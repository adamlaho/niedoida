/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_pdpp_AA.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
//
void second_derivative_ee_1211_11(const double ae,
                                  const double xA,
                                  const double yA,
                                  const double zA,
                                  const double be,
                                  const double xB,
                                  const double yB,
                                  const double zB,
                                  const double ce,
                                  const double xC,
                                  const double yC,
                                  const double zC,
                                  const double de,
                                  const double xD,
                                  const double yD,
                                  const double zD,
                                  const double* const bs,
                                  double* const d2eexx,
                                  double* const d2eexy,
                                  double* const d2eexz,
                                  double* const d2eeyx,
                                  double* const d2eeyy,
                                  double* const d2eeyz,
                                  double* const d2eezx,
                                  double* const d2eezy,
                                  double* const d2eezz)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    const double C139334 = 0 * ae;
    const double C139333 = ae * be;
    const double C139332 = 0 * be;
    const double C139331 = xA - xB;
    const double C139330 = ae + be;
    const double C139329 = 0 * be;
    const double C139394 = yA - yB;
    const double C139397 = zA - zB;
    const double C139412 = 0 * be;
    const double C139438 = 0 * be;
    const double C139519 = 0 * ae;
    const double C139515 = 0 * be;
    const double C139590 = 0 * ae;
    const double C139586 = 0 * be;
    const double C139638 = p + q;
    const double C139637 = p * q;
    const double C139643 = xP - xQ;
    const double C139642 = bs[2];
    const double C139650 = std::pow(ae, 2);
    const double C139648 = bs[3];
    const double C139661 = bs[4];
    const double C139682 = bs[5];
    const double C139715 = bs[6];
    const double C139758 = yP - yQ;
    const double C139801 = zP - zQ;
    const double C108 = bs[0];
    const double C141238 = ce + de;
    const double C141237 = ce * de;
    const double C141236 = xC - xD;
    const double C141251 = yC - yD;
    const double C141260 = zC - zD;
    const double C139340 = 2 * C139333;
    const double C139337 = -2 * C139332;
    const double C139339 = C139333 * C139331;
    const double C139338 = C139331 * C139332;
    const double C141212 = C139331 * be;
    const double C141211 = C139331 * ae;
    const double C141210 = std::pow(C139331, 2);
    const double C139341 = C139334 / C139330;
    const double C139336 = 2 * C139330;
    const double C139335 = std::pow(C139330, 2);
    const double C139413 = C139333 * C139394;
    const double C141305 = std::pow(C139394, 2);
    const double C141354 = C139394 * be;
    const double C141353 = C139394 * ae;
    const double C139439 = C139333 * C139397;
    const double C141316 = std::pow(C139397, 2);
    const double C141380 = C139397 * be;
    const double C141379 = C139397 * ae;
    const double C139516 = C139394 * C139412;
    const double C139540 = -2 * C139412;
    const double C139587 = C139397 * C139438;
    const double C139611 = -2 * C139438;
    const double C139524 = C139519 / C139330;
    const double C139595 = C139590 / C139330;
    const double C139639 = 2 * C139637;
    const double C139651 = C139643 * ae;
    const double C139647 = std::pow(C139643, 2);
    const double C139761 = C139758 * ae;
    const double C139760 = C139643 * C139758;
    const double C139845 = C139758 * C139643;
    const double C139866 = std::pow(C139758, 2);
    const double C139804 = C139801 * ae;
    const double C139803 = C139643 * C139801;
    const double C139887 = C139758 * C139801;
    const double C139903 = C139801 * C139643;
    const double C139924 = C139801 * C139758;
    const double C139940 = std::pow(C139801, 2);
    const double C141248 = 2 * C141238;
    const double C141459 = std::pow(C141238, 2);
    const double C141239 = std::pow(C141236, 2);
    const double C141458 = C141236 * de;
    const double C141457 = C141236 * ce;
    const double C141273 = std::pow(C141251, 2);
    const double C141463 = C141251 * de;
    const double C141461 = C141251 * ce;
    const double C141290 = std::pow(C141260, 2);
    const double C141464 = C141260 * de;
    const double C141462 = C141260 * ce;
    const double C139343 = ae * C139337;
    const double C139344 = C139338 / C139330;
    const double C141213 = C141210 * C139333;
    const double C141220 = std::pow(C139336, -1);
    const double C141466 = std::pow(C139336, -2);
    const double C139345 = 2 * C139335;
    const double C139342 = C139335 * C139336;
    const double C141456 = 4 * C139335;
    const double C141306 = C141305 * C139333;
    const double C141317 = C141316 * C139333;
    const double C139521 = C139516 / C139330;
    const double C139543 = ae * C139540;
    const double C139592 = C139587 / C139330;
    const double C139614 = ae * C139611;
    const double C139641 = C139639 / C139638;
    const double C120 =
        ((std::pow(xP - xQ, 2) * bs[2] * std::pow(C139639 / C139638, 2) -
          (bs[1] * C139639) / C139638) *
         std::pow(ae, 2)) /
        C139335;
    const double C109 = -(C139643 * bs[1] * C139639) / C139638;
    const double C823 = -(C139758 * bs[1] * C139639) / C139638;
    const double C1601 = -(C139801 * bs[1] * C139639) / C139638;
    const double C139653 = C139648 * C139651;
    const double C139664 = C139661 * C139651;
    const double C139687 = C139682 * C139651;
    const double C139723 = C139715 * C139651;
    const double C114 = (-(bs[1] * C139651 * C139639) / C139638) / C139330;
    const double C139663 = C139647 * C139661;
    const double C139686 = C139647 * C139682;
    const double C139722 = C139647 * C139715;
    const double C139763 = C139648 * C139761;
    const double C139767 = C139661 * C139761;
    const double C139774 = C139682 * C139761;
    const double C139785 = C139715 * C139761;
    const double C189 = (-(bs[1] * C139761 * C139639) / C139638) / C139330;
    const double C139762 = C139760 * C139650;
    const double C139846 = C139845 * C139650;
    const double C139868 = C139866 * C139661;
    const double C139873 = C139866 * C139682;
    const double C139878 = C139866 * C139715;
    const double C139806 = C139648 * C139804;
    const double C139810 = C139661 * C139804;
    const double C139817 = C139682 * C139804;
    const double C139828 = C139715 * C139804;
    const double C276 = (-(bs[1] * C139804 * C139639) / C139638) / C139330;
    const double C139805 = C139803 * C139650;
    const double C139888 = C139887 * C139650;
    const double C139904 = C139903 * C139650;
    const double C139925 = C139924 * C139650;
    const double C139942 = C139940 * C139661;
    const double C139947 = C139940 * C139682;
    const double C139952 = C139940 * C139715;
    const double C141460 = std::pow(C141248, -1);
    const double C141482 = 2 * C141459;
    const double C141240 = C141239 * C141237;
    const double C141274 = C141273 * C141237;
    const double C141291 = C141290 * C141237;
    const double C139347 = 0 - C139344;
    const double C141214 = C141213 / C139330;
    const double C139351 = C139332 / C139345;
    const double C139348 = C139329 / C139345;
    const double C139518 = C139412 / C139345;
    const double C139522 = C139515 / C139345;
    const double C139589 = C139438 / C139345;
    const double C139593 = C139586 / C139345;
    const double C141307 = C141306 / C139330;
    const double C141318 = C141317 / C139330;
    const double C139525 = 0 - C139521;
    const double C139596 = 0 - C139592;
    const double C139644 = std::pow(C139641, 2);
    const double C139649 = -C139641;
    const double C139662 = std::pow(C139641, 4);
    const double C139716 = std::pow(C139641, 6);
    const double C139766 = C139661 * C139762;
    const double C139773 = C139682 * C139762;
    const double C139784 = C139715 * C139762;
    const double C139848 = C139661 * C139846;
    const double C139851 = C139682 * C139846;
    const double C139857 = C139715 * C139846;
    const double C139809 = C139661 * C139805;
    const double C139816 = C139682 * C139805;
    const double C139827 = C139715 * C139805;
    const double C139890 = C139661 * C139888;
    const double C139893 = C139682 * C139888;
    const double C139896 = C139715 * C139888;
    const double C139906 = C139661 * C139904;
    const double C139909 = C139682 * C139904;
    const double C139915 = C139715 * C139904;
    const double C139927 = C139661 * C139925;
    const double C139930 = C139682 * C139925;
    const double C139933 = C139715 * C139925;
    const double C141241 = C141240 / C141238;
    const double C141275 = C141274 / C141238;
    const double C141292 = C141291 / C141238;
    const double C139353 = C139347 * ae;
    const double C141215 = -C141214;
    const double C141308 = -C141307;
    const double C141319 = -C141318;
    const double C139528 = C139525 * ae;
    const double C139599 = C139596 * ae;
    const double C139646 = C139642 * C139644;
    const double C121 = (2 * ae * C139644 * C139642 * C139643 * ae +
                         C139643 *
                             (C139642 * C139644 + std::pow(C139643, 2) * bs[3] *
                                                      std::pow(-C139641, 3)) *
                             std::pow(ae, 2)) /
                        C139335;
    const double C195 =
        (C139644 * C139642 * C139643 * (yP - yQ) * C139650) / C139335;
    const double C282 =
        (C139644 * C139642 * C139643 * (zP - zQ) * C139650) / C139335;
    const double C362 =
        (C139644 * C139642 * C139758 * C139643 * C139650) / C139335;
    const double C419 = ((std::pow(C139758, 2) * C139642 * C139644 -
                          (bs[1] * C139639) / C139638) *
                         C139650) /
                        C139335;
    const double C501 =
        (C139644 * C139642 * C139758 * C139801 * C139650) / C139335;
    const double C579 =
        (C139644 * C139642 * C139801 * C139643 * C139650) / C139335;
    const double C635 =
        (C139644 * C139642 * C139801 * C139758 * C139650) / C139335;
    const double C714 = ((std::pow(C139801, 2) * C139642 * C139644 -
                          (bs[1] * C139639) / C139638) *
                         C139650) /
                        C139335;
    const double C115 = (C139643 * C139644 * C139642 * C139651) / C139330 -
                        (ae * bs[1] * C139639) / (C139638 * C139330);
    const double C190 = (C139643 * C139644 * C139642 * C139761) / C139330;
    const double C277 = (C139643 * C139644 * C139642 * C139804) / C139330;
    const double C828 = (C139758 * C139644 * C139642 * C139651) / C139330;
    const double C912 = (C139758 * C139644 * C139642 * C139761) / C139330 -
                        (ae * bs[1] * C139639) / (C139638 * C139330);
    const double C1006 = (C139758 * C139644 * C139642 * C139804) / C139330;
    const double C1606 = (C139801 * C139644 * C139642 * C139651) / C139330;
    const double C1690 = (C139801 * C139644 * C139642 * C139761) / C139330;
    const double C1784 = (C139801 * C139644 * C139642 * C139804) / C139330 -
                         (ae * bs[1] * C139639) / (C139638 * C139330);
    const double C139652 = std::pow(C139649, 3);
    const double C139683 = std::pow(C139649, 5);
    const double C139668 = C139662 * C139664;
    const double C139667 = C139663 * C139662;
    const double C139681 = C139661 * C139662;
    const double C139769 = C139662 * C139767;
    const double C139812 = C139662 * C139810;
    const double C139869 = C139868 * C139662;
    const double C139943 = C139942 * C139662;
    const double C139728 = C139716 * C139723;
    const double C139727 = C139722 * C139716;
    const double C139789 = C139716 * C139785;
    const double C139832 = C139716 * C139828;
    const double C139879 = C139878 * C139716;
    const double C139953 = C139952 * C139716;
    const double C139768 = C139662 * C139766;
    const double C139787 = C139716 * C139784;
    const double C139849 = C139662 * C139848;
    const double C139858 = C139716 * C139857;
    const double C139811 = C139662 * C139809;
    const double C139830 = C139716 * C139827;
    const double C139891 = C139662 * C139890;
    const double C139897 = C139716 * C139896;
    const double C139907 = C139662 * C139906;
    const double C139916 = C139716 * C139915;
    const double C139928 = C139662 * C139927;
    const double C139934 = C139716 * C139933;
    const double C141242 = -C141241;
    const double C141276 = -C141275;
    const double C141293 = -C141292;
    const double C139357 = C139353 / C139330;
    const double C141216 = std::exp(C141215);
    const double C141309 = std::exp(C141308);
    const double C141320 = std::exp(C141319);
    const double C139529 = C139528 / C139330;
    const double C139600 = C139599 / C139330;
    const double C139654 = C139646 * ae;
    const double C110 = C139646 * C139647 - (bs[1] * C139639) / C139638;
    const double C822 = C139758 * C139643 * C139646;
    const double C1600 = C139801 * C139643 * C139646;
    const double C2960 = C139646 * C139866 - (bs[1] * C139639) / C139638;
    const double C3490 = C139801 * C139758 * C139646;
    const double C5325 = C139646 * C139940 - (bs[1] * C139639) / C139638;
    const double C139655 = C139652 * C139653;
    const double C139660 = C139648 * C139652;
    const double C139764 = C139652 * C139763;
    const double C139807 = C139652 * C139806;
    const double C196 =
        (ae * C139644 * C139642 * C139758 * ae +
         C139643 * C139652 * C139648 * C139643 * C139758 * C139650) /
        C139335;
    const double C283 =
        (ae * C139644 * C139642 * C139801 * ae +
         C139643 * C139652 * C139648 * C139643 * C139801 * C139650) /
        C139335;
    const double C363 =
        (ae * C139644 * C139642 * C139761 +
         C139643 * C139652 * C139648 * C139758 * C139643 * C139650) /
        C139335;
    const double C420 =
        (C139643 * (C139646 + std::pow(C139758, 2) * C139648 * C139652) *
         C139650) /
        C139335;
    const double C502 =
        (C139643 * C139652 * C139648 * C139758 * C139801 * C139650) / C139335;
    const double C503 =
        (C139652 * C139648 * C139888 + C139662 * C139661 * C139888 * C139647) /
        C139335;
    const double C580 =
        (ae * C139644 * C139642 * C139804 +
         C139643 * C139652 * C139648 * C139801 * C139643 * C139650) /
        C139335;
    const double C636 =
        (C139643 * C139652 * C139648 * C139801 * C139758 * C139650) / C139335;
    const double C637 =
        (C139652 * C139648 * C139925 + C139662 * C139661 * C139925 * C139647) /
        C139335;
    const double C715 =
        (C139643 * (C139646 + std::pow(C139801, 2) * C139648 * C139652) *
         C139650) /
        C139335;
    const double C833 =
        (C139758 * (C139646 + C139647 * C139648 * C139652) * C139650) / C139335;
    const double C917 = (ae * C139644 * C139642 * C139651 +
                         C139758 * C139652 * C139648 * C139762) /
                        C139335;
    const double C1011 = (C139758 * C139652 * C139648 * C139805) / C139335;
    const double C1100 = (ae * C139644 * C139642 * C139651 +
                          C139758 * C139652 * C139648 * C139846) /
                         C139335;
    const double C1171 =
        (2 * ae * C139644 * C139642 * C139761 +
         C139758 * (C139646 + C139866 * C139648 * C139652) * C139650) /
        C139335;
    const double C1262 = (ae * C139644 * C139642 * C139804 +
                          C139758 * C139652 * C139648 * C139888) /
                         C139335;
    const double C1348 = (C139758 * C139652 * C139648 * C139904) / C139335;
    const double C1419 = (ae * C139644 * C139642 * C139804 +
                          C139758 * C139652 * C139648 * C139925) /
                         C139335;
    const double C1505 =
        (C139758 * (C139646 + C139940 * C139648 * C139652) * C139650) / C139335;
    const double C1611 =
        (C139801 * (C139646 + C139647 * C139648 * C139652) * C139650) / C139335;
    const double C1695 = (C139801 * C139652 * C139648 * C139762) / C139335;
    const double C1789 = (ae * C139644 * C139642 * C139651 +
                          C139801 * C139652 * C139648 * C139805) /
                         C139335;
    const double C1878 = (C139801 * C139652 * C139648 * C139846) / C139335;
    const double C1949 =
        (C139801 * (C139646 + C139866 * C139648 * C139652) * C139650) / C139335;
    const double C2040 = (ae * C139644 * C139642 * C139761 +
                          C139801 * C139652 * C139648 * C139888) /
                         C139335;
    const double C2126 = (ae * C139644 * C139642 * C139651 +
                          C139801 * C139652 * C139648 * C139904) /
                         C139335;
    const double C2197 = (ae * C139644 * C139642 * C139761 +
                          C139801 * C139652 * C139648 * C139925) /
                         C139335;
    const double C2283 =
        (2 * ae * C139644 * C139642 * C139804 +
         C139801 * (C139646 + C139940 * C139648 * C139652) * C139650) /
        C139335;
    const double C139692 = C139683 * C139687;
    const double C139691 = C139686 * C139683;
    const double C139714 = C139682 * C139683;
    const double C139776 = C139683 * C139774;
    const double C139775 = C139683 * C139773;
    const double C139819 = C139683 * C139817;
    const double C139818 = C139683 * C139816;
    const double C139852 = C139683 * C139851;
    const double C139874 = C139873 * C139683;
    const double C139894 = C139683 * C139893;
    const double C139910 = C139683 * C139909;
    const double C139931 = C139683 * C139930;
    const double C139948 = C139947 * C139683;
    const double C139671 = C139643 * C139668;
    const double C139680 = ae * C139668;
    const double C140347 = C139758 * C139668;
    const double C140644 = C139801 * C139668;
    const double C139690 = C139681 * C139647;
    const double C139689 = C139643 * C139681;
    const double C139688 = C139681 * ae;
    const double C140369 = C139681 * C139866;
    const double C140368 = C139758 * C139681;
    const double C140682 = C139681 * C139940;
    const double C140681 = C139801 * C139681;
    const double C139772 = ae * C139769;
    const double C139771 = C139643 * C139769;
    const double C140275 = C139758 * C139769;
    const double C140657 = C139801 * C139769;
    const double C139815 = ae * C139812;
    const double C139814 = C139643 * C139812;
    const double C140408 = C139758 * C139812;
    const double C140576 = C139801 * C139812;
    const double C139732 = C139643 * C139728;
    const double C140723 = C139728 * C139866;
    const double C140877 = C139758 * C139728;
    const double C140927 = C139728 * C139940;
    const double C139792 = C139789 * C139647;
    const double C140388 = C139643 * C139789;
    const double C140745 = C139758 * C139789;
    const double C140886 = C139789 * C139940;
    const double C139835 = C139832 * C139647;
    const double C140416 = C139643 * C139832;
    const double C140777 = C139832 * C139866;
    const double C140900 = C139758 * C139832;
    const double C140958 = C139801 * C139832;
    const double C5395 =
        (C139652 * C139648 * C139762 + C139768 * C139940) / C139335;
    const double C139791 = C139643 * C139787;
    const double C140721 = C139758 * C139787;
    const double C140921 = C139787 * C139940;
    const double C5507 =
        (C139652 * C139648 * C139846 + C139849 * C139940) / C139335;
    const double C139859 = C139643 * C139858;
    const double C140735 = C139758 * C139858;
    const double C140801 = C139801 * C139858;
    const double C140829 = C139858 * C139940;
    const double C3088 =
        (C139652 * C139648 * C139805 + C139811 * C139866) / C139335;
    const double C139834 = C139643 * C139830;
    const double C140731 = C139830 * C139866;
    const double C140876 = C139758 * C139830;
    const double C140925 = C139801 * C139830;
    const double C504 =
        (2 * C139643 * C139891 +
         C139643 * (C139891 + C139683 * C139682 * C139888 * C139647)) /
        C139335;
    const double C139898 = C139897 * C139647;
    const double C140415 = C139643 * C139897;
    const double C140775 = C139758 * C139897;
    const double C140818 = C139801 * C139897;
    const double C3308 =
        (C139652 * C139648 * C139904 + C139907 * C139866) / C139335;
    const double C139917 = C139643 * C139916;
    const double C140786 = C139916 * C139866;
    const double C140890 = C139758 * C139916;
    const double C140942 = C139801 * C139916;
    const double C638 =
        (2 * C139643 * C139928 +
         C139643 * (C139928 + C139683 * C139682 * C139925 * C139647)) /
        C139335;
    const double C139935 = C139934 * C139647;
    const double C140427 = C139643 * C139934;
    const double C140790 = C139758 * C139934;
    const double C140948 = C139801 * C139934;
    const double C141243 = std::exp(C141242);
    const double C141277 = std::exp(C141276);
    const double C141294 = std::exp(C141293);
    const double C139359 = C139357 - C139348;
    const double C56276 = C141216 * C828;
    const double C62847 = C141216 * C1606;
    const double C139346 = C139339 * C141216;
    const double C141217 = C141216 * C141211;
    const double C141221 = C141220 * C141216;
    const double C141453 = C141216 * C141212;
    const double C141450 = C141216 / C139336;
    const double C47709 = C141466 * C141216;
    const double C203 = C141309 * C190;
    const double C16020 = C141309 * C1690;
    const double C139414 = C139413 * C141309;
    const double C188 = -(2 * C139333 * (yA - yB) * C141309) / C139330;
    const double C418 =
        -((C141309 - (C139394 * 2 * C139333 * C139394 * C141309) / C139330) *
          C139340) /
        C139330;
    const double C141355 = C141309 * C141353;
    const double C141358 = C141220 * C141309;
    const double C141470 = C141309 * C141354;
    const double C141465 = C141309 / C139336;
    const double C5867 = C141466 * C141309;
    const double C290 = C141320 * C277;
    const double C7009 = C141320 * C1006;
    const double C139440 = C139439 * C141320;
    const double C275 = -(2 * C139333 * (zA - zB) * C141320) / C139330;
    const double C713 =
        -((C141320 - (C139397 * 2 * C139333 * C139397 * C141320) / C139330) *
          C139340) /
        C139330;
    const double C141381 = C141320 * C141379;
    const double C141384 = C141220 * C141320;
    const double C141474 = C141320 * C141380;
    const double C141467 = C141320 / C139336;
    const double C14037 = C141466 * C141320;
    const double C139530 = C139529 - C139522;
    const double C139601 = C139600 - C139593;
    const double C139656 = C139643 * C139655;
    const double C3030 = (C139652 * C139648 * C139762 + ae * C139758 * C139655 +
                          C139758 * (ae * C139655 + C139758 * C139768)) /
                         C139335;
    const double C3142 = (C139652 * C139648 * C139846 + ae * C139758 * C139655 +
                          C139758 * (ae * C139655 + C139758 * C139849)) /
                         C139335;
    const double C3576 =
        (C139801 * (ae * C139655 + C139758 * C139768)) / C139335;
    const double C3650 =
        (ae * C139758 * C139655 + C139801 * C139758 * C139811) / C139335;
    const double C3720 =
        (ae * C139801 * C139655 + C139758 * C139801 * C139849) / C139335;
    const double C3934 =
        (ae * C139758 * C139655 + C139801 * C139758 * C139907) / C139335;
    const double C5453 = (C139652 * C139648 * C139805 + ae * C139801 * C139655 +
                          C139801 * (ae * C139655 + C139801 * C139811)) /
                         C139335;
    const double C5673 = (C139652 * C139648 * C139904 + ae * C139801 * C139655 +
                          C139801 * (ae * C139655 + C139801 * C139907)) /
                         C139335;
    const double C2964 =
        (C139644 * C139642 * C139651 + C139655 * C139866) / C139330;
    const double C3494 = (C139801 * C139758 * C139655) / C139330;
    const double C5329 =
        (C139644 * C139642 * C139651 + C139655 * C139940) / C139330;
    const double C6732 =
        (2 * C139758 * C139655 + C139758 * (C139655 + C139668 * C139866)) /
        C139330;
    const double C7890 = (C139801 * (C139655 + C139668 * C139866)) / C139330;
    const double C15865 =
        (2 * C139801 * C139655 + C139801 * (C139655 + C139668 * C139940)) /
        C139330;
    const double C139666 = C139643 * C139660;
    const double C139665 = C139660 * ae;
    const double C139670 = C139660 + C139667;
    const double C139870 = C139660 + C139869;
    const double C139944 = C139660 + C139943;
    const double C140276 = C139758 * C139660;
    const double C140577 = C139801 * C139660;
    const double C421 =
        ((C139646 + C139866 * C139648 * C139652) * C139650 +
         (C139660 + C139866 * C139661 * C139662) * C139650 * C139647) /
        C139335;
    const double C716 =
        ((C139646 + C139940 * C139648 * C139652) * C139650 +
         (C139660 + C139940 * C139661 * C139662) * C139650 * C139647) /
        C139335;
    const double C111 =
        2 * C139643 * C139646 + C139643 * (C139646 + C139660 * C139647);
    const double C821 = C139758 * (C139646 + C139660 * C139647);
    const double C1599 = C139801 * (C139646 + C139660 * C139647);
    const double C6729 =
        2 * C139758 * C139646 + C139758 * (C139646 + C139660 * C139866);
    const double C7887 = C139801 * (C139646 + C139660 * C139866);
    const double C15862 =
        2 * C139801 * C139646 + C139801 * (C139646 + C139660 * C139940);
    const double C140114 = C139758 * C139764;
    const double C197 =
        (C139652 * C139648 * C139762 + ae * C139643 * C139764 +
         C139643 * (ae * C139764 + C139643 * C139662 * C139661 * C139762)) /
        C139335;
    const double C198 =
        (2 * (ae * C139764 + C139643 * C139768) +
         ae * (C139764 + C139769 * C139647) +
         C139643 * (C139768 + ae * C139643 * C139769 +
                    C139643 * (ae * C139769 +
                               C139643 * C139683 * C139682 * C139762))) /
        C139335;
    const double C364 =
        (C139652 * C139648 * C139846 + ae * C139643 * C139764 +
         C139643 * (ae * C139764 + C139643 * C139662 * C139661 * C139846)) /
        C139335;
    const double C1694 =
        (C139801 * (ae * C139764 + C139643 * C139768)) / C139335;
    const double C1877 =
        (C139801 * (ae * C139764 + C139643 * C139849)) / C139335;
    const double C2039 =
        (ae * C139643 * C139764 + C139801 * C139643 * C139891) / C139335;
    const double C2196 =
        (ae * C139643 * C139764 + C139801 * C139643 * C139928) / C139335;
    const double C5619 = (C139652 * C139648 * C139888 + ae * C139801 * C139764 +
                          C139801 * (ae * C139764 + C139801 * C139891)) /
                         C139335;
    const double C5727 = (C139652 * C139648 * C139925 + ae * C139801 * C139764 +
                          C139801 * (ae * C139764 + C139801 * C139928)) /
                         C139335;
    const double C191 =
        (C139644 * C139642 * C139761 + C139764 * C139647) / C139330;
    const double C192 =
        (2 * C139643 * C139764 + C139643 * (C139764 + C139769 * C139647)) /
        C139330;
    const double C910 = (C139758 * (C139764 + C139769 * C139647) +
                         (C139646 + C139660 * C139647) * ae) /
                        C139330;
    const double C911 =
        (C139758 * C139643 * C139764 + C139643 * C139646 * ae) / C139330;
    const double C1688 = (C139801 * (C139764 + C139769 * C139647)) / C139330;
    const double C1689 = (C139801 * C139643 * C139764) / C139330;
    const double C5391 =
        (C139644 * C139642 * C139761 + C139764 * C139940) / C139330;
    const double C16013 =
        (2 * C139801 * C139764 + C139801 * (C139764 + C139769 * C139940)) /
        C139330;
    const double C140232 = C139801 * C139807;
    const double C284 =
        (C139652 * C139648 * C139805 + ae * C139643 * C139807 +
         C139643 * (ae * C139807 + C139643 * C139662 * C139661 * C139805)) /
        C139335;
    const double C285 =
        (2 * (ae * C139807 + C139643 * C139811) +
         ae * (C139807 + C139812 * C139647) +
         C139643 * (C139811 + ae * C139643 * C139812 +
                    C139643 * (ae * C139812 +
                               C139643 * C139683 * C139682 * C139805))) /
        C139335;
    const double C581 =
        (C139652 * C139648 * C139904 + ae * C139643 * C139807 +
         C139643 * (ae * C139807 + C139643 * C139662 * C139661 * C139904)) /
        C139335;
    const double C1010 =
        (C139758 * (ae * C139807 + C139643 * C139811)) / C139335;
    const double C1261 =
        (ae * C139643 * C139807 + C139758 * C139643 * C139891) / C139335;
    const double C1347 =
        (C139758 * (ae * C139807 + C139643 * C139907)) / C139335;
    const double C1418 =
        (ae * C139643 * C139807 + C139758 * C139643 * C139928) / C139335;
    const double C3254 = (C139652 * C139648 * C139888 + ae * C139758 * C139807 +
                          C139758 * (ae * C139807 + C139758 * C139891)) /
                         C139335;
    const double C3362 = (C139652 * C139648 * C139925 + ae * C139758 * C139807 +
                          C139758 * (ae * C139807 + C139758 * C139928)) /
                         C139335;
    const double C3864 = (ae * (C139801 * C139807 + C139654) +
                          C139758 * (ae * C139764 + C139801 * C139891)) /
                         C139335;
    const double C278 =
        (C139644 * C139642 * C139804 + C139807 * C139647) / C139330;
    const double C279 =
        (2 * C139643 * C139807 + C139643 * (C139807 + C139812 * C139647)) /
        C139330;
    const double C1004 = (C139758 * (C139807 + C139812 * C139647)) / C139330;
    const double C1005 = (C139758 * C139643 * C139807) / C139330;
    const double C1782 = (C139801 * (C139807 + C139812 * C139647) +
                          (C139646 + C139660 * C139647) * ae) /
                         C139330;
    const double C1783 =
        (C139801 * C139643 * C139807 + C139643 * C139646 * ae) / C139330;
    const double C3084 =
        (C139644 * C139642 * C139804 + C139807 * C139866) / C139330;
    const double C3646 =
        (C139801 * C139758 * C139807 + C139758 * C139646 * ae) / C139330;
    const double C7002 =
        (2 * C139758 * C139807 + C139758 * (C139807 + C139812 * C139866)) /
        C139330;
    const double C8128 = (C139801 * (C139807 + C139812 * C139866) +
                          (C139646 + C139660 * C139866) * ae) /
                         C139330;
    const double C205 = C141309 * C196;
    const double C292 = C141320 * C283;
    const double C429 = C141309 * C420;
    const double C510 = C141320 * C502;
    const double C513 = C141320 * C503;
    const double C644 = C141309 * C636;
    const double C647 = C141309 * C637;
    const double C724 = C141320 * C715;
    const double C56028 = C141216 * C833;
    const double C7011 = C141320 * C1011;
    const double C56278 = C141216 * C1100;
    const double C7418 = C141320 * C1262;
    const double C56519 = C141216 * C1348;
    const double C7769 = C141320 * C1505;
    const double C62493 = C141216 * C1611;
    const double C16022 = C141309 * C1695;
    const double C62849 = C141216 * C1878;
    const double C16426 = C141309 * C1949;
    const double C63215 = C141216 * C2126;
    const double C16788 = C141309 * C2197;
    const double C139696 = C139643 * C139692;
    const double C139713 = ae * C139692;
    const double C139970 = C139758 * C139692;
    const double C140034 = C139801 * C139692;
    const double C140349 = C139692 * C139866;
    const double C140646 = C139692 * C139940;
    const double C139695 = C139681 + C139691;
    const double C139726 = C139714 * C139647;
    const double C139725 = C139643 * C139714;
    const double C139724 = C139714 * ae;
    const double C139731 = C139714 + C139727;
    const double C139880 = C139714 + C139879;
    const double C139954 = C139714 + C139953;
    const double C140747 = C139714 * C139866;
    const double C140746 = C139758 * C139714;
    const double C140885 = C139714 * C139940;
    const double C140959 = C139801 * C139714;
    const double C139778 = C139776 * C139647;
    const double C139783 = ae * C139776;
    const double C139782 = C139643 * C139776;
    const double C140367 = C139758 * C139776;
    const double C140658 = C139776 * C139940;
    const double C140805 = C139801 * C139776;
    const double C139777 = C139643 * C139775;
    const double C140348 = C139758 * C139775;
    const double C16016 =
        (2 * C139801 * C139768 + C139801 * (C139768 + C139775 * C139940)) /
        C139335;
    const double C21403 =
        (3 * (C139768 + C139775 * C139940) +
         C139801 * (2 * C139801 * C139775 +
                    C139801 * (C139775 + C139787 * C139940))) /
        C139335;
    const double C139821 = C139819 * C139647;
    const double C139826 = ae * C139819;
    const double C139825 = C139643 * C139819;
    const double C140410 = C139819 * C139866;
    const double C140617 = C139758 * C139819;
    const double C140680 = C139801 * C139819;
    const double C139820 = C139643 * C139818;
    const double C140600 = C139758 * C139818;
    const double C140645 = C139801 * C139818;
    const double C7005 =
        (2 * C139758 * C139811 + C139758 * (C139811 + C139818 * C139866)) /
        C139335;
    const double C8131 = (ae * (C139655 + C139668 * C139866) +
                          C139801 * (C139811 + C139818 * C139866)) /
                         C139335;
    const double C9942 = (3 * (C139811 + C139818 * C139866) +
                          C139758 * (2 * C139758 * C139818 +
                                     C139758 * (C139818 + C139830 * C139866))) /
                         C139335;
    const double C139853 = C139643 * C139852;
    const double C140358 = C139758 * C139852;
    const double C140440 = C139801 * C139852;
    const double C8244 =
        (C139801 * C139849 + ae * C139801 * C139758 * C139668 +
         C139758 * (ae * C139801 * C139668 + C139758 * C139801 * C139852)) /
        C139335;
    const double C13557 = (ae * (C139655 + C139668 * C139940) +
                           C139758 * (C139849 + C139852 * C139940)) /
                          C139335;
    const double C16273 =
        (2 * C139801 * C139849 + C139801 * (C139849 + C139852 * C139940)) /
        C139335;
    const double C139875 = C139681 + C139874;
    const double C140295 = C139643 * C139894;
    const double C140409 = C139758 * C139894;
    const double C140456 = C139801 * C139894;
    const double C505 =
        (3 * (C139891 + C139894 * C139647) +
         C139643 *
             (2 * C139643 * C139894 +
              C139643 * (C139894 + C139716 * C139715 * C139888 * C139647))) /
        C139335;
    const double C1260 = (ae * (C139807 + C139812 * C139647) +
                          C139758 * (C139891 + C139894 * C139647)) /
                         C139335;
    const double C2038 = (ae * (C139764 + C139769 * C139647) +
                          C139801 * (C139891 + C139894 * C139647)) /
                         C139335;
    const double C139911 = C139643 * C139910;
    const double C140610 = C139758 * C139910;
    const double C140665 = C139801 * C139910;
    const double C7530 =
        (2 * C139758 * C139907 + C139758 * (C139907 + C139910 * C139866)) /
        C139335;
    const double C8583 = (ae * (C139655 + C139668 * C139866) +
                          C139801 * (C139907 + C139910 * C139866)) /
                         C139335;
    const double C10282 =
        (3 * (C139907 + C139910 * C139866) +
         C139758 * (2 * C139758 * C139910 +
                    C139758 * (C139910 + C139916 * C139866))) /
        C139335;
    const double C140302 = C139643 * C139931;
    const double C140424 = C139758 * C139931;
    const double C140671 = C139801 * C139931;
    const double C639 =
        (3 * (C139928 + C139931 * C139647) +
         C139643 *
             (2 * C139643 * C139931 +
              C139643 * (C139931 + C139716 * C139715 * C139925 * C139647))) /
        C139335;
    const double C1417 = (ae * (C139807 + C139812 * C139647) +
                          C139758 * (C139928 + C139931 * C139647)) /
                         C139335;
    const double C2195 = (ae * (C139764 + C139769 * C139647) +
                          C139801 * (C139928 + C139931 * C139647)) /
                         C139335;
    const double C139949 = C139681 + C139948;
    const double C139685 = 2 * C139680;
    const double C6883 = (2 * (ae * C139655 + C139758 * C139768) +
                          ae * (C139655 + C139668 * C139866) +
                          C139758 * (C139768 + ae * C139758 * C139668 +
                                     C139758 * (C139680 + C139758 * C139775))) /
                         C139335;
    const double C7140 = (2 * (ae * C139655 + C139758 * C139849) +
                          ae * (C139655 + C139668 * C139866) +
                          C139758 * (C139849 + ae * C139758 * C139668 +
                                     C139758 * (C139680 + C139758 * C139852))) /
                         C139335;
    const double C8009 = (C139801 * (C139768 + ae * C139758 * C139668 +
                                     C139758 * (C139680 + C139758 * C139775))) /
                         C139335;
    const double C16154 =
        (2 * (ae * C139655 + C139801 * C139811) +
         ae * (C139655 + C139668 * C139940) +
         C139801 * (C139811 + ae * C139801 * C139668 +
                    C139801 * (C139680 + C139801 * C139818))) /
        C139335;
    const double C16659 =
        (2 * (ae * C139655 + C139801 * C139907) +
         ae * (C139655 + C139668 * C139940) +
         C139801 * (C139907 + ae * C139801 * C139668 +
                    C139801 * (C139680 + C139801 * C139910))) /
        C139335;
    const double C13479 =
        (C139758 * C139811 + ae * C139801 * C140347 +
         C139801 * (ae * C140347 + C139801 * C139758 * C139818)) /
        C139335;
    const double C13797 =
        (C139758 * C139907 + ae * C139801 * C140347 +
         C139801 * (ae * C140347 + C139801 * C139758 * C139910)) /
        C139335;
    const double C13305 = (C139758 * C139655 + C140347 * C139940) / C139330;
    const double C139694 = C139660 + C139690;
    const double C139693 = C139689 * ae;
    const double C139719 = 2 * C139689;
    const double C140266 = C139758 * C139689;
    const double C140567 = C139801 * C139689;
    const double C140373 = C139660 + C140369;
    const double C140372 = C140368 * ae;
    const double C140618 = C139801 * C140368;
    const double C140748 = 2 * C140368;
    const double C140686 = C139660 + C140682;
    const double C140685 = C140681 * ae;
    const double C140961 = 2 * C140681;
    const double C140364 = 2 * C139772;
    const double C16784 =
        (2 * (ae * C139764 + C139801 * C139928) +
         ae * (C139764 + C139769 * C139940) +
         C139801 * (C139928 + ae * C139801 * C139769 +
                    C139801 * (C139772 + C139801 * C139931))) /
        C139335;
    const double C140118 = C139758 * C139771;
    const double C365 =
        (2 * (ae * C139764 + C139643 * C139849) +
         ae * (C139764 + C139769 * C139647) +
         C139643 *
             (C139849 + ae * C139771 +
              C139643 * (C139772 + C139643 * C139683 * C139682 * C139846))) /
        C139335;
    const double C5620 =
        (C139643 * C139891 + ae * C139801 * C139771 +
         C139801 * (ae * C139771 + C139801 * C139643 * C139894)) /
        C139335;
    const double C5728 =
        (C139643 * C139928 + ae * C139801 * C139771 +
         C139801 * (ae * C139771 + C139801 * C139643 * C139931)) /
        C139335;
    const double C5392 = (C139643 * C139764 + C139771 * C139940) / C139330;
    const double C140677 = 2 * C139815;
    const double C7414 = (2 * (ae * C139807 + C139758 * C139891) +
                          ae * (C139807 + C139812 * C139866) +
                          C139758 * (C139891 + ae * C139758 * C139812 +
                                     C139758 * (C139815 + C139758 * C139894))) /
                         C139335;
    const double C7655 = (2 * (ae * C139807 + C139758 * C139928) +
                          ae * (C139807 + C139812 * C139866) +
                          C139758 * (C139928 + ae * C139758 * C139812 +
                                     C139758 * (C139815 + C139758 * C139931))) /
                         C139335;
    const double C140236 = C139801 * C139814;
    const double C582 =
        (2 * (ae * C139807 + C139643 * C139907) +
         ae * (C139807 + C139812 * C139647) +
         C139643 *
             (C139907 + ae * C139814 +
              C139643 * (C139815 + C139643 * C139683 * C139682 * C139904))) /
        C139335;
    const double C3255 =
        (C139643 * C139891 + ae * C139758 * C139814 +
         C139758 * (ae * C139814 + C139758 * C139643 * C139894)) /
        C139335;
    const double C3363 =
        (C139643 * C139928 + ae * C139758 * C139814 +
         C139758 * (ae * C139814 + C139758 * C139643 * C139931)) /
        C139335;
    const double C3085 = (C139643 * C139807 + C139814 * C139866) / C139330;
    const double C140506 = C139801 * C140408;
    const double C140725 = C139692 + C140723;
    const double C140879 = C140877 * C139940;
    const double C140929 = C139692 + C140927;
    const double C139794 = C139776 + C139792;
    const double C140392 = C139758 * C140388;
    const double C140662 = C140388 * C139940;
    const double C140888 = C139776 + C140886;
    const double C139837 = C139819 + C139835;
    const double C140418 = C140416 * C139866;
    const double C140629 = C139758 * C140416;
    const double C140701 = C139801 * C140416;
    const double C140780 = C139819 + C140777;
    const double C140904 = C139801 * C140900;
    const double C16028 = C141309 * C5395;
    const double C140922 = C139775 + C140921;
    const double C62855 = C141216 * C5507;
    const double C140802 = C139758 * C140801;
    const double C140830 = C139852 + C140829;
    const double C7017 = C141320 * C3088;
    const double C140732 = C139818 + C140731;
    const double C140878 = C139801 * C140876;
    const double C516 = C141320 * C504;
    const double C139899 = C139894 + C139898;
    const double C140417 = C139758 * C140415;
    const double C140459 = C139801 * C140415;
    const double C56522 = C141216 * C3308;
    const double C140787 = C139910 + C140786;
    const double C140891 = C139801 * C140890;
    const double C650 = C141309 * C638;
    const double C139936 = C139931 + C139935;
    const double C140428 = C139758 * C140427;
    const double C140674 = C139801 * C140427;
    const double C141483 = C141460 * C141243;
    const double C141481 = C141243 * C141457;
    const double C818 = -(C141243 * C141458) / C141238;
    const double C141485 = C141460 * C141277;
    const double C141484 = C141277 * C141461;
    const double C2374 = -(C141277 * C141463) / C141238;
    const double C141487 = C141460 * C141294;
    const double C141486 = C141294 * C141462;
    const double C4148 = -(C141294 * C141464) / C141238;
    const double C139352 = C139346 / C139335;
    const double C139350 = 2 * C139346;
    const double C139349 = -4 * C139346;
    const double C141454 = C141217 / C139345;
    const double C141452 = C141217 / C139330;
    const double C141451 = C141217 * C141212;
    const double C47708 = (2 * C141220 * C141217) / C139330;
    const double C141455 = C141221 * C141212;
    const double C92 = C141221 / C141456;
    const double C22071 = C141221 / C139336;
    const double C141479 = C141453 / C139330;
    const double C47707 = (C141216 * std::pow(C141211, 2)) / C139335 + C141450;
    const double C139422 = 2 * C139414;
    const double C139520 = C139414 / C139335;
    const double C139541 = -4 * C139414;
    const double C5966 =
        ((0 * ae) / C139330 - C139414 / C139335) / C139336 + (0 * ae) / C139330;
    const double C22173 = (0 * ae) / C139330 - C139414 / C139335;
    const double C206 = C188 * C110;
    const double C204 = C188 * C115;
    const double C202 = C188 * C109;
    const double C428 = C188 * C190;
    const double C426 = C188 * C189;
    const double C643 = C188 * C277;
    const double C930 = C188 * C822;
    const double C1183 = C188 * C912;
    const double C1708 = C188 * C1600;
    const double C1961 = C188 * C1690;
    const double C16025 = C188 * C5325;
    const double C16021 = C188 * C1606;
    const double C16019 = C188 * C1601;
    const double C16787 = C188 * C1784;
    const double C18703 = C188 * C3490;
    const double C430 = C418 * C110;
    const double C427 = C418 * C109;
    const double C1180 = C418 * C822;
    const double C1958 = C418 * C1600;
    const double C16428 = C418 * C5325;
    const double C16425 = C418 * C1601;
    const double C19037 = C418 * C3490;
    const double C141472 = C141355 / C139345;
    const double C141471 = C141355 * C141354;
    const double C141468 = C141355 / C139330;
    const double C5866 = (2 * C141220 * C141355) / C139330;
    const double C5965 =
        (((C141309 - (C139394 * 2 * C139414) / C139330) * ae) / C139330 -
         C139412 / C139345) /
            C139336 +
        ((C139394 * ((0 * ae) / C139330 - C139414 / C139335) + C141358) * ae) /
            C139330;
    const double C141473 = C141358 * C141354;
    const double C55525 = C141358 / C141456;
    const double C68674 = C141358 / C139336;
    const double C141488 = C141470 / C139330;
    const double C5865 = (C141309 * std::pow(C141353, 2)) / C139335 + C141465;
    const double C139448 = 2 * C139440;
    const double C139591 = C139440 / C139335;
    const double C139612 = -4 * C139440;
    const double C14206 =
        ((0 * ae) / C139330 - C139440 / C139335) / C139336 + (0 * ae) / C139330;
    const double C30076 = (0 * ae) / C139330 - C139440 / C139335;
    const double C293 = C275 * C110;
    const double C291 = C275 * C115;
    const double C289 = C275 * C109;
    const double C509 = C275 * C190;
    const double C723 = C275 * C277;
    const double C721 = C275 * C276;
    const double C1024 = C275 * C822;
    const double C1517 = C275 * C1006;
    const double C1802 = C275 * C1600;
    const double C2295 = C275 * C1784;
    const double C7014 = C275 * C2960;
    const double C7010 = C275 * C828;
    const double C7008 = C275 * C823;
    const double C7417 = C275 * C912;
    const double C10794 = C275 * C3490;
    const double C725 = C713 * C110;
    const double C722 = C713 * C109;
    const double C1514 = C713 * C822;
    const double C2292 = C713 * C1600;
    const double C7770 = C713 * C2960;
    const double C7768 = C713 * C823;
    const double C11454 = C713 * C3490;
    const double C141476 = C141381 / C139345;
    const double C141475 = C141381 * C141380;
    const double C141469 = C141381 / C139330;
    const double C14036 = (2 * C141220 * C141381) / C139330;
    const double C14205 =
        (((C141320 - (C139397 * 2 * C139440) / C139330) * ae) / C139330 -
         C139438 / C139345) /
            C139336 +
        ((C139397 * ((0 * ae) / C139330 - C139440 / C139335) + C141384) * ae) /
            C139330;
    const double C141477 = C141384 * C141380;
    const double C109360 = C141384 / C141456;
    const double C124182 = C141384 / C139336;
    const double C141491 = C141474 / C139330;
    const double C14035 = (C141320 * std::pow(C141379, 2)) / C139335 + C141467;
    const double C139657 = C139656 + C139654;
    const double C56282 = C141216 * C3142;
    const double C18706 = C141309 * C3576;
    const double C40051 = C141358 * C3576;
    const double C62621 = C141358 * C3576;
    const double C10793 = C141320 * C3650;
    const double C38913 = C141384 * C3650;
    const double C102597 = C141384 * C3650;
    const double C58701 = C141216 * C3720;
    const double C58925 = C141216 * C3934;
    const double C63217 = C141216 * C5673;
    const double C7016 = C275 * C2964;
    const double C56280 = C141216 * C2964;
    const double C10792 = C275 * C3494;
    const double C18705 = C188 * C3494;
    const double C58703 = C141216 * C3494;
    const double C16027 = C188 * C5329;
    const double C62853 = C141216 * C5329;
    const double C9948 = C275 * C6732;
    const double C56284 = C141216 * C6732;
    const double C10786 = C275 * C7890;
    const double C58699 = C141216 * C7890;
    const double C21409 = C188 * C15865;
    const double C68188 = C141216 * C15865;
    const double C139669 = C139666 * ae;
    const double C3647 =
        (C139801 * C139758 * C139814 + C139758 * C139666 * ae) / C139330;
    const double C2961 = C139643 * C139646 + C139666 * C139866;
    const double C3491 = C139801 * C139758 * C139666;
    const double C5326 = C139643 * C139646 + C139666 * C139940;
    const double C6728 =
        2 * C139758 * C139666 + C139758 * (C139666 + C139689 * C139866);
    const double C7886 = C139801 * (C139666 + C139689 * C139866);
    const double C15861 =
        2 * C139801 * C139666 + C139801 * (C139666 + C139689 * C139940);
    const double C139673 = C139671 + C139665;
    const double C140277 = C140275 + C139665;
    const double C140578 = C140576 + C139665;
    const double C139672 = C139670 * C139650;
    const double C139871 = C139870 * C139650;
    const double C139945 = C139944 * C139650;
    const double C140278 = C140276 * ae;
    const double C13301 = C139758 * C139646 + C140276 * C139940;
    const double C18582 =
        2 * C139801 * C140276 + C139801 * (C140276 + C140368 * C139940);
    const double C140579 = C140577 * ae;
    const double C432 = C141309 * C421;
    const double C727 = C141320 * C716;
    const double C210 = C188 * C111;
    const double C297 = C275 * C111;
    const double C433 = C418 * C111;
    const double C728 = C713 * C111;
    const double C926 = C188 * C821;
    const double C1020 = C275 * C821;
    const double C1177 = C418 * C821;
    const double C1511 = C713 * C821;
    const double C1704 = C188 * C1599;
    const double C1798 = C275 * C1599;
    const double C1955 = C418 * C1599;
    const double C2289 = C713 * C1599;
    const double C9950 = C275 * C6729;
    const double C10447 = C713 * C6729;
    const double C10788 = C275 * C7887;
    const double C11452 = C713 * C7887;
    const double C21411 = C188 * C15862;
    const double C21668 = C418 * C15862;
    const double C140115 = C140114 + C139654;
    const double C209 = C141309 * C197;
    const double C213 = C141309 * C198;
    const double C1707 = C141309 * C1694;
    const double C16283 = C141221 * C1877;
    const double C62861 = C141216 * C1877;
    const double C79100 = C141221 * C1877;
    const double C2050 = C141320 * C2039;
    const double C30341 = C141384 * C2039;
    const double C94368 = C141384 * C2039;
    const double C2207 = C141309 * C2196;
    const double C16790 = C141309 * C5727;
    const double C207 = C141309 * C191;
    const double C431 = C188 * C191;
    const double C512 = C275 * C191;
    const double C211 = C141309 * C192;
    const double C434 = C188 * C192;
    const double C515 = C275 * C192;
    const double C927 = C141309 * C910;
    const double C1178 = C188 * C910;
    const double C1268 = C275 * C910;
    const double C22186 = C141358 * C910;
    const double C47824 = C141358 * C910;
    const double C931 = C141309 * C911;
    const double C1181 = C188 * C911;
    const double C1271 = C275 * C911;
    const double C22178 = C141358 * C911;
    const double C47816 = C141358 * C911;
    const double C1705 = C141309 * C1688;
    const double C1956 = C188 * C1688;
    const double C2046 = C275 * C1688;
    const double C1709 = C141309 * C1689;
    const double C1959 = C188 * C1689;
    const double C2049 = C275 * C1689;
    const double C5566 = C188 * C5391;
    const double C16026 = C141309 * C5391;
    const double C16434 = C188 * C16013;
    const double C21412 = C141309 * C16013;
    const double C140233 = C140232 + C139654;
    const double C296 = C141320 * C284;
    const double C300 = C141320 * C285;
    const double C1023 = C141320 * C1010;
    const double C1272 = C141320 * C1261;
    const double C7536 = C141221 * C1347;
    const double C56528 = C141216 * C1347;
    const double C70255 = C141221 * C1347;
    const double C1429 = C141309 * C1418;
    const double C22718 = C141358 * C1418;
    const double C48356 = C141358 * C1418;
    const double C7420 = C141320 * C3254;
    const double C11137 = C141320 * C3864;
    const double C39349 = C141384 * C3864;
    const double C102923 = C141384 * C3864;
    const double C294 = C141320 * C278;
    const double C646 = C188 * C278;
    const double C726 = C275 * C278;
    const double C298 = C141320 * C279;
    const double C649 = C188 * C279;
    const double C729 = C275 * C279;
    const double C1021 = C141320 * C1004;
    const double C1425 = C188 * C1004;
    const double C1512 = C275 * C1004;
    const double C1025 = C141320 * C1005;
    const double C1428 = C188 * C1005;
    const double C1515 = C275 * C1005;
    const double C1799 = C141320 * C1782;
    const double C2203 = C188 * C1782;
    const double C2290 = C275 * C1782;
    const double C30089 = C141384 * C1782;
    const double C94116 = C141384 * C1782;
    const double C1803 = C141320 * C1783;
    const double C2206 = C188 * C1783;
    const double C2293 = C275 * C1783;
    const double C30081 = C141384 * C1783;
    const double C94108 = C141384 * C1783;
    const double C3421 = C275 * C3084;
    const double C7015 = C141320 * C3084;
    const double C4079 = C275 * C3646;
    const double C10795 = C141320 * C3646;
    const double C19359 = C188 * C3646;
    const double C38909 = C141384 * C3646;
    const double C102593 = C141384 * C3646;
    const double C7777 = C275 * C7002;
    const double C9951 = C141320 * C7002;
    const double C8803 = C275 * C8128;
    const double C10789 = C141320 * C8128;
    const double C42515 = C141384 * C8128;
    const double C102601 = C141384 * C8128;
    const double C139699 = C139696 + C139688;
    const double C139721 = 2 * C139713;
    const double C140724 = C139713 + C140721;
    const double C140736 = C139713 + C140735;
    const double C140928 = C139713 + C140925;
    const double C140943 = C139713 + C140942;
    const double C139975 = ae * C139970;
    const double C140722 = 2 * C139970;
    const double C140875 = C139801 * C139970;
    const double C13559 =
        (C139849 + C139852 * C139940 + ae * (C140347 + C139970 * C139940) +
         C139758 * (ae * (C139668 + C139692 * C139940) +
                    C139758 * (C139852 + C139858 * C139940))) /
        C139335;
    const double C18584 =
        (2 * C139801 * C140347 + C139801 * (C140347 + C139970 * C139940)) /
        C139330;
    const double C140039 = ae * C140034;
    const double C140926 = 2 * C140034;
    const double C140351 = C139668 + C140349;
    const double C140648 = C139668 + C140646;
    const double C139698 = C139695 * C139650;
    const double C139730 = C139681 + C139726;
    const double C139729 = C139725 * ae;
    const double C140390 = C139725 * C139866;
    const double C140389 = C139758 * C139725;
    const double C140703 = C139725 * C139940;
    const double C140702 = C139801 * C139725;
    const double C139736 = C139732 + C139724;
    const double C140751 = C140745 + C139724;
    const double C140965 = C140958 + C139724;
    const double C139735 = C139731 * C139650;
    const double C139881 = C139880 * C139650;
    const double C139955 = C139954 * C139650;
    const double C140753 = C139681 + C140747;
    const double C140752 = C140746 * ae;
    const double C140902 = C140746 * C139940;
    const double C140901 = C139801 * C140746;
    const double C140887 = C139681 + C140885;
    const double C140966 = C140959 * ae;
    const double C139780 = C139769 + C139778;
    const double C139793 = C139783 + C139791;
    const double C139860 = C139783 + C139859;
    const double C140741 = 2 * C139783;
    const double C140819 = C139783 + C140818;
    const double C140949 = C139783 + C140948;
    const double C139788 = 2 * C139782;
    const double C139786 = ae * C139782;
    const double C140265 = C139758 * C139782;
    const double C140661 = C139801 * C139782;
    const double C16012 =
        (2 * C139801 * C139771 + C139801 * (C139771 + C139782 * C139940)) /
        C139330;
    const double C140371 = C140367 + C139688;
    const double C140659 = C139769 + C140658;
    const double C140810 = ae * C140805;
    const double C140937 = 2 * C140805;
    const double C139779 = C139772 + C139777;
    const double C140350 = C139680 + C140348;
    const double C21410 = C141309 * C16016;
    const double C114011 = C141309 * C21403;
    const double C139823 = C139812 + C139821;
    const double C139836 = C139826 + C139834;
    const double C139918 = C139826 + C139917;
    const double C140779 = C139826 + C140775;
    const double C140791 = C139826 + C140790;
    const double C140954 = 2 * C139826;
    const double C139831 = 2 * C139825;
    const double C139829 = ae * C139825;
    const double C140414 = C139758 * C139825;
    const double C140566 = C139801 * C139825;
    const double C7001 =
        (2 * C139758 * C139814 + C139758 * (C139814 + C139825 * C139866)) /
        C139330;
    const double C8127 = (C139801 * (C139814 + C139825 * C139866) +
                          (C139666 + C139689 * C139866) * ae) /
                         C139330;
    const double C140412 = C139812 + C140410;
    const double C140619 = C139801 * C140617;
    const double C140776 = 2 * C140617;
    const double C140774 = ae * C140617;
    const double C140684 = C140680 + C139688;
    const double C139822 = C139815 + C139820;
    const double C140647 = C139680 + C140645;
    const double C9949 = C141320 * C7005;
    const double C10787 = C141320 * C8131;
    const double C42511 = C141384 * C8131;
    const double C102605 = C141384 * C8131;
    const double C58050 = C141320 * C9942;
    const double C139854 = C139772 + C139853;
    const double C140359 = C139680 + C140358;
    const double C18922 =
        (ae *
             (2 * C139801 * C139668 + C139801 * (C139668 + C139692 * C139940)) +
         C139758 * (2 * C140440 + C139801 * (C139852 + C139858 * C139940))) /
        C139335;
    const double C21570 =
        (3 * (C139849 + C139852 * C139940) +
         C139801 * (2 * C140440 + C139801 * (C139852 + C139858 * C139940))) /
        C139335;
    const double C58697 = C141216 * C8244;
    const double C61840 = C141216 * C13557;
    const double C68186 = C141216 * C16273;
    const double C139876 = C139875 * C139650;
    const double C140411 = C139815 + C140409;
    const double C140457 = C139772 + C140456;
    const double C518 = C141320 * C505;
    const double C1269 = C141320 * C1260;
    const double C2047 = C141320 * C2038;
    const double C30346 = C141384 * C2038;
    const double C94373 = C141384 * C2038;
    const double C139912 = C139815 + C139911;
    const double C140666 = C139680 + C140665;
    const double C56525 = C141216 * C7530;
    const double C58922 = C141216 * C8583;
    const double C58277 = C141216 * C10282;
    const double C140425 = C139815 + C140424;
    const double C140672 = C139772 + C140671;
    const double C652 = C141309 * C639;
    const double C1426 = C141309 * C1417;
    const double C22723 = C141358 * C1417;
    const double C48361 = C141358 * C1417;
    const double C2204 = C141309 * C2195;
    const double C139950 = C139949 * C139650;
    const double C56286 = C141216 * C7140;
    const double C43403 = C141358 * C8009;
    const double C65277 = C141358 * C8009;
    const double C103489 = C5867 * C8009;
    const double C68435 = C141216 * C16659;
    const double C43539 = C141384 * C13479;
    const double C61732 = C14037 * C13479;
    const double C106145 = C141384 * C13479;
    const double C62168 = C141216 * C13797;
    const double C18711 = C188 * C13305;
    const double C61838 = C141216 * C13305;
    const double C139697 = C139694 * ae;
    const double C112 = 3 * (C139646 + C139660 * C139647) +
                        C139643 * (2 * C139666 + C139643 * C139694);
    const double C820 = C139758 * (2 * C139666 + C139643 * C139694);
    const double C1598 = C139801 * (2 * C139666 + C139643 * C139694);
    const double C2962 = C139646 + C139660 * C139647 + C139694 * C139866;
    const double C3492 = C139801 * C139758 * C139694;
    const double C5327 = C139646 + C139660 * C139647 + C139694 * C139940;
    const double C140268 = C140266 * ae;
    const double C13302 = C139758 * C139666 + C140266 * C139940;
    const double C140569 = C140567 * ae;
    const double C140375 = C140373 * ae;
    const double C9768 = 3 * (C139646 + C139660 * C139866) +
                         C139758 * (2 * C140276 + C139758 * C140373);
    const double C10551 = C139801 * (2 * C140276 + C139758 * C140373);
    const double C13303 = C139646 + C139660 * C139866 + C140373 * C139940;
    const double C140620 = C140618 * ae;
    const double C140688 = C140686 * ae;
    const double C21308 = 3 * (C139646 + C139660 * C139940) +
                          C139801 * (2 * C140577 + C139801 * C140686);
    const double C21912 = C141309 * C16784;
    const double C14481 = C14037 * C5620;
    const double C32313 = C141384 * C5620;
    const double C96326 = C141384 * C5620;
    const double C14648 = C141309 * C5728;
    const double C5567 = C188 * C5392;
    const double C14120 = C141309 * C5392;
    const double C10207 = C141320 * C7414;
    const double C6363 = C141320 * C3255;
    const double C6528 = C5867 * C3363;
    const double C23769 = C141358 * C3363;
    const double C49407 = C141358 * C3363;
    const double C3422 = C275 * C3085;
    const double C6079 = C141320 * C3085;
    const double C140727 = C139758 * C140725;
    const double C140881 = C139970 + C140879;
    const double C140931 = C139801 * C140929;
    const double C139796 = C139643 * C139794;
    const double C140285 = C139758 * C139794;
    const double C140663 = C139782 + C140662;
    const double C140938 = C139801 * C140888;
    const double C139839 = C139643 * C139837;
    const double C140533 = C139758 * C139837;
    const double C140586 = C139801 * C139837;
    const double C140420 = C139825 + C140418;
    const double C140631 = C139801 * C140629;
    const double C140782 = C139758 * C140780;
    const double C140863 = C139801 * C140780;
    const double C114006 =
        (4 * (2 * C139801 * C139775 + C139801 * C140922) +
         C139801 *
             (3 * C140922 +
              C139801 * (2 * C139801 * C139787 +
                         C139801 * (C139787 + std::pow(C139649, 7) * bs[7] *
                                                  C139762 * C139940)))) /
        C139335;
    const double C65509 =
        (2 * C140440 + C139801 * C140830 +
         ae * (2 * C139801 * C139970 +
               C139801 * (C139970 + C139758 * C139728 * C139940)) +
         C139758 *
             (ae * (2 * C140034 + C139801 * (C139692 + C139728 * C139940)) +
              C139758 * (2 * C140801 +
                         C139801 * (C139858 + std::pow(C139649, 7) * bs[7] *
                                                  C139846 * C139940)))) /
        C139335;
    const double C114119 =
        (4 * (2 * C140440 + C139801 * C140830) +
         C139801 *
             (3 * C140830 +
              C139801 * (2 * C140801 +
                         C139801 * (C139858 + std::pow(C139649, 7) * bs[7] *
                                                  C139846 * C139940)))) /
        C139335;
    const double C58045 =
        (4 * (2 * C140600 + C139758 * C140732) +
         C139758 *
             (3 * C140732 +
              C139758 * (2 * C139758 * C139830 +
                         C139758 * (C139830 + std::pow(C139649, 7) * bs[7] *
                                                  C139805 * C139866)))) /
        C139335;
    const double C506 =
        (4 * (2 * C139643 * C139894 + C139643 * C139899) +
         C139643 *
             (3 * C139899 +
              C139643 * (2 * C139643 * C139897 +
                         C139643 * (C139897 + std::pow(C139649, 7) * bs[7] *
                                                  C139888 * C139647)))) /
        C139335;
    const double C58272 =
        (4 * (2 * C140610 + C139758 * C140787) +
         C139758 *
             (3 * C140787 +
              C139758 * (2 * C139758 * C139916 +
                         C139758 * (C139916 + std::pow(C139649, 7) * bs[7] *
                                                  C139904 * C139866)))) /
        C139335;
    const double C640 =
        (4 * (2 * C139643 * C139931 + C139643 * C139936) +
         C139643 *
             (3 * C139936 +
              C139643 * (2 * C139643 * C139934 +
                         C139643 * (C139934 + std::pow(C139649, 7) * bs[7] *
                                                  C139925 * C139647)))) /
        C139335;
    const double C99 = C141483 / C141248;
    const double C97 = C141243 / C141248 - (C141481 * C141458) / C141459;
    const double C98 = C141481 / C141482 - (C141483 * C141458) / C141238;
    const double C2376 = C141481 / C141238;
    const double C2958 = C141485 / C141248;
    const double C816 = C141484 / C141238;
    const double C2956 = C141277 / C141248 - (C141484 * C141463) / C141459;
    const double C2957 = C141484 / C141482 - (C141485 * C141463) / C141238;
    const double C5324 = C141487 / C141248;
    const double C1596 = C141486 / C141238;
    const double C5322 = C141294 / C141248 - (C141486 * C141464) / C141459;
    const double C5323 = C141486 / C141482 - (C141487 * C141464) / C141238;
    const double C139356 = C139341 - C139352;
    const double C139355 = C139331 * C139350;
    const double C5871 = (-C139350 / C139330) / C139336 - (0 * be) / C139330;
    const double C55527 = -C139350 / C139330;
    const double C139354 = C139349 / C139330;
    const double C69509 = C141452 * C833;
    const double C69893 = C141452 * C3142;
    const double C69889 = C141452 * C2964;
    const double C69885 = C141452 * C1100;
    const double C69881 = C141452 * C828;
    const double C70261 = C141452 * C1347;
    const double C70257 = C141452 * C3308;
    const double C70253 = C141452 * C1348;
    const double C72646 = C141452 * C6732;
    const double C72642 = C141452 * C7140;
    const double C72884 = C141452 * C7530;
    const double C73474 = C141452 * C3494;
    const double C73470 = C141452 * C3720;
    const double C73466 = C141452 * C7890;
    const double C73462 = C141452 * C8244;
    const double C73790 = C141452 * C3934;
    const double C73786 = C141452 * C8583;
    const double C78676 = C141452 * C1611;
    const double C79106 = C141452 * C1877;
    const double C79098 = C141452 * C1878;
    const double C79094 = C141452 * C1606;
    const double C79510 = C141452 * C2126;
    const double C82378 = C141452 * C13305;
    const double C82374 = C141452 * C13557;
    const double C82779 = C141452 * C13797;
    const double C85796 = C141452 * C5329;
    const double C85792 = C141452 * C5507;
    const double C86098 = C141452 * C5673;
    const double C131367 = C141452 * C15865;
    const double C131363 = C141452 * C16273;
    const double C131604 = C141452 * C16659;
    const double C141478 = C141451 / C139335;
    const double C49289 = C47708 * C1347;
    const double C96092 = C47708 * C1877;
    const double C141480 = C141455 / C139330;
    const double C5863 = -C141479;
    const double C48555 = C47707 * C833;
    const double C48927 = C47707 * C1100;
    const double C48921 = C47707 * C828;
    const double C49293 = C47707 * C1347;
    const double C49287 = C47707 * C1348;
    const double C51699 = C47707 * C2964;
    const double C51693 = C47707 * C3142;
    const double C51939 = C47707 * C3308;
    const double C52518 = C47707 * C3494;
    const double C52512 = C47707 * C3720;
    const double C52830 = C47707 * C3934;
    const double C95721 = C47707 * C1611;
    const double C96102 = C47707 * C1877;
    const double C96090 = C47707 * C1878;
    const double C96084 = C47707 * C1606;
    const double C96432 = C47707 * C2126;
    const double C101227 = C47707 * C5329;
    const double C101221 = C47707 * C5507;
    const double C101464 = C47707 * C5673;
    const double C139423 = C139394 * C139422;
    const double C47811 = (-C139422 / C139330) / C139336 - (0 * be) / C139330;
    const double C139527 = C139524 - C139520;
    const double C139544 = C139541 / C139330;
    const double C6527 = C5966 * C3085;
    const double C103488 = C5966 * C7890;
    const double C103482 = C5966 * C7887;
    const double C104115 = C5966 * C8128;
    const double C22185 = C22173 * C821;
    const double C22177 = C22173 * C822;
    const double C22449 = C22173 * C910;
    const double C22443 = C22173 * C911;
    const double C22438 = C22173 * C912;
    const double C22722 = C22173 * C1004;
    const double C22717 = C22173 * C1005;
    const double C23768 = C22173 * C3085;
    const double C40050 = C22173 * C3494;
    const double C40046 = C22173 * C3490;
    const double C40894 = C22173 * C3646;
    const double C43402 = C22173 * C7890;
    const double C43398 = C22173 * C7887;
    const double C44228 = C22173 * C8128;
    const double C46912 = C22173 * C13305;
    const double C219 = C204 + C205;
    const double C218 = C202 + C203;
    const double C654 = C643 + C644;
    const double C16044 = C16021 + C16022;
    const double C16043 = C16019 + C16020;
    const double C16798 = C16787 + C16788;
    const double C440 = C427 + C428;
    const double C16440 = C16425 + C1961;
    const double C141489 = C141471 / C139335;
    const double C22198 = C141468 * C192;
    const double C22194 = C141468 * C198;
    const double C22188 = C141468 * C197;
    const double C22184 = C141468 * C191;
    const double C22180 = C141468 * C196;
    const double C22176 = C141468 * C190;
    const double C22447 = C141468 * C421;
    const double C22441 = C141468 * C420;
    const double C22727 = C141468 * C638;
    const double C22721 = C141468 * C637;
    const double C22716 = C141468 * C636;
    const double C23065 = C141468 * C911;
    const double C23057 = C141468 * C910;
    const double C23771 = C141468 * C1418;
    const double C23767 = C141468 * C1417;
    const double C24101 = C141468 * C1689;
    const double C24097 = C141468 * C1694;
    const double C24093 = C141468 * C1688;
    const double C24750 = C141468 * C2196;
    const double C24746 = C141468 * C2195;
    const double C40061 = C141468 * C5392;
    const double C40049 = C141468 * C1695;
    const double C40045 = C141468 * C1690;
    const double C40475 = C141468 * C1949;
    const double C40900 = C141468 * C5728;
    const double C40893 = C141468 * C2197;
    const double C43401 = C141468 * C3576;
    const double C46919 = C141468 * C5391;
    const double C46915 = C141468 * C5395;
    const double C47529 = C141468 * C5727;
    const double C138766 = C141468 * C16013;
    const double C138762 = C141468 * C16016;
    const double C139243 = C141468 * C16784;
    const double C5964 =
        (((0 - (C139394 * C139412) / C139330) * ae) / C139330 -
         (0 * be) / C139345) /
            C139336 +
        ((C139394 *
              (((C141309 - (C139394 * 2 * C139414) / C139330) * ae) / C139330 -
               C139412 / C139345) +
          C141468) *
         ae) /
            C139330 +
        (0 * ae) / C139330 - C139414 / C139335;
    const double C5989 = C5866 * C910;
    const double C5971 = C5866 * C911;
    const double C6532 = C5866 * C1417;
    const double C6526 = C5866 * C1418;
    const double C7661 = C5866 * C3363;
    const double C103487 = C5866 * C3576;
    const double C106029 = C5866 * C8009;
    const double C5988 = C5965 * C821;
    const double C5970 = C5965 * C822;
    const double C6257 = C5965 * C910;
    const double C6248 = C5965 * C911;
    const double C6242 = C5965 * C912;
    const double C6531 = C5965 * C1004;
    const double C6525 = C5965 * C1005;
    const double C7660 = C5965 * C3085;
    const double C103486 = C5965 * C3494;
    const double C103480 = C5965 * C3490;
    const double C104113 = C5965 * C3646;
    const double C106028 = C5965 * C7890;
    const double C106022 = C5965 * C7887;
    const double C106696 = C5965 * C8128;
    const double C108737 = C5965 * C13305;
    const double C141490 = C141473 / C139330;
    const double C69317 = C68674 * C3363;
    const double C88091 = C68674 * C8009;
    const double C47710 = -C141488;
    const double C5991 = C5865 * C191;
    const double C5985 = C5865 * C197;
    const double C5975 = C5865 * C196;
    const double C5969 = C5865 * C190;
    const double C6261 = C5865 * C421;
    const double C6246 = C5865 * C420;
    const double C6534 = C5865 * C637;
    const double C6524 = C5865 * C636;
    const double C6897 = C5865 * C911;
    const double C7663 = C5865 * C1418;
    const double C8023 = C5865 * C1689;
    const double C8017 = C5865 * C1694;
    const double C8692 = C5865 * C2196;
    const double C103485 = C5865 * C1695;
    const double C103479 = C5865 * C1690;
    const double C103803 = C5865 * C1949;
    const double C104112 = C5865 * C2197;
    const double C106027 = C5865 * C3576;
    const double C108746 = C5865 * C5391;
    const double C108740 = C5865 * C5395;
    const double C109226 = C5865 * C5727;
    const double C139449 = C139397 * C139448;
    const double C94103 = (-C139448 / C139330) / C139336 - (0 * be) / C139330;
    const double C139598 = C139595 - C139591;
    const double C139615 = C139612 / C139330;
    const double C14480 = C14206 * C5392;
    const double C61731 = C14206 * C13305;
    const double C30088 = C30076 * C1599;
    const double C30080 = C30076 * C1600;
    const double C30345 = C30076 * C1688;
    const double C30340 = C30076 * C1689;
    const double C30611 = C30076 * C1782;
    const double C30605 = C30076 * C1783;
    const double C30600 = C30076 * C1784;
    const double C31593 = C30076 * C3646;
    const double C32312 = C30076 * C5392;
    const double C34218 = C30076 * C8128;
    const double C38912 = C30076 * C3494;
    const double C38908 = C30076 * C3490;
    const double C42514 = C30076 * C7887;
    const double C42510 = C30076 * C7890;
    const double C43538 = C30076 * C13305;
    const double C306 = C291 + C292;
    const double C305 = C289 + C290;
    const double C520 = C509 + C510;
    const double C7033 = C7010 + C7011;
    const double C7032 = C7008 + C7009;
    const double C7428 = C7417 + C7418;
    const double C735 = C722 + C723;
    const double C7779 = C7768 + C1517;
    const double C141492 = C141475 / C139335;
    const double C30101 = C141469 * C279;
    const double C30097 = C141469 * C285;
    const double C30091 = C141469 * C284;
    const double C30087 = C141469 * C278;
    const double C30083 = C141469 * C283;
    const double C30079 = C141469 * C277;
    const double C30350 = C141469 * C504;
    const double C30344 = C141469 * C503;
    const double C30339 = C141469 * C502;
    const double C30609 = C141469 * C716;
    const double C30603 = C141469 * C715;
    const double C30956 = C141469 * C1005;
    const double C30952 = C141469 * C1010;
    const double C30948 = C141469 * C1004;
    const double C31271 = C141469 * C1261;
    const double C31267 = C141469 * C1260;
    const double C31963 = C141469 * C1783;
    const double C31955 = C141469 * C1782;
    const double C32315 = C141469 * C2039;
    const double C32311 = C141469 * C2038;
    const double C38923 = C141469 * C3085;
    const double C38911 = C141469 * C1011;
    const double C38907 = C141469 * C1006;
    const double C39354 = C141469 * C3255;
    const double C39347 = C141469 * C1262;
    const double C39763 = C141469 * C1505;
    const double C42517 = C141469 * C3084;
    const double C42513 = C141469 * C3088;
    const double C42823 = C141469 * C3254;
    const double C43545 = C141469 * C3646;
    const double C43541 = C141469 * C3650;
    const double C43961 = C141469 * C3864;
    const double C89936 = C141469 * C7002;
    const double C89932 = C141469 * C7005;
    const double C90173 = C141469 * C7414;
    const double C90741 = C141469 * C8128;
    const double C90737 = C141469 * C8131;
    const double C14204 =
        (((0 - (C139397 * C139438) / C139330) * ae) / C139330 -
         (0 * be) / C139345) /
            C139336 +
        ((C139397 *
              (((C141320 - (C139397 * 2 * C139440) / C139330) * ae) / C139330 -
               C139438 / C139345) +
          C141469) *
         ae) /
            C139330 +
        (0 * ae) / C139330 - C139440 / C139335;
    const double C14229 = C14036 * C1782;
    const double C14211 = C14036 * C1783;
    const double C14485 = C14036 * C2038;
    const double C14479 = C14036 * C2039;
    const double C16555 = C14036 * C5620;
    const double C61730 = C14036 * C3650;
    const double C61724 = C14036 * C3646;
    const double C62058 = C14036 * C3864;
    const double C64561 = C14036 * C8128;
    const double C64555 = C14036 * C8131;
    const double C65397 = C14036 * C13479;
    const double C14228 = C14205 * C1599;
    const double C14210 = C14205 * C1600;
    const double C14484 = C14205 * C1688;
    const double C14478 = C14205 * C1689;
    const double C14753 = C14205 * C1782;
    const double C14744 = C14205 * C1783;
    const double C14738 = C14205 * C1784;
    const double C15750 = C14205 * C3646;
    const double C16554 = C14205 * C5392;
    const double C18480 = C14205 * C8128;
    const double C61729 = C14205 * C3494;
    const double C61723 = C14205 * C3490;
    const double C64560 = C14205 * C7887;
    const double C64554 = C14205 * C7890;
    const double C65396 = C14205 * C13305;
    const double C141493 = C141477 / C139330;
    const double C124600 = C124182 * C5620;
    const double C132738 = C124182 * C13479;
    const double C93949 = -C141491;
    const double C14231 = C14035 * C278;
    const double C14225 = C14035 * C284;
    const double C14215 = C14035 * C283;
    const double C14209 = C14035 * C277;
    const double C14487 = C14035 * C503;
    const double C14477 = C14035 * C502;
    const double C14757 = C14035 * C716;
    const double C14742 = C14035 * C715;
    const double C15105 = C14035 * C1005;
    const double C15099 = C14035 * C1010;
    const double C15427 = C14035 * C1261;
    const double C16168 = C14035 * C1783;
    const double C16557 = C14035 * C2039;
    const double C61728 = C14035 * C1011;
    const double C61722 = C14035 * C1006;
    const double C62056 = C14035 * C1262;
    const double C62380 = C14035 * C1505;
    const double C64563 = C14035 * C3084;
    const double C64557 = C14035 * C3088;
    const double C64807 = C14035 * C3254;
    const double C65405 = C14035 * C3646;
    const double C65399 = C14035 * C3650;
    const double C65750 = C14035 * C3864;
    const double C139658 = ae * C139657;
    const double C116 = (C139644 * C139642 * C139651 + C139643 * C139657 +
                         C139643 * C139646 * ae) /
                        C139330;
    const double C827 = (C139758 * C139657) / C139330;
    const double C1605 = (C139801 * C139657) / C139330;
    const double C7035 = C7016 + C7017;
    const double C10798 = C10792 + C10793;
    const double C18716 = C18705 + C18706;
    const double C16046 = C16027 + C16028;
    const double C140119 = C140118 + C139669;
    const double C140237 = C140236 + C139669;
    const double C3865 =
        (ae * (C139801 * C139814 + C139669) +
         C139758 * (ae * C139771 + C139801 * C139643 * C139894)) /
        C139335;
    const double C4080 = C275 * C3647;
    const double C8141 = C141320 * C3647;
    const double C8689 = C5965 * C3647;
    const double C15103 = C14036 * C3647;
    const double C15632 = C188 * C3647;
    const double C15744 = C14205 * C3647;
    const double C24747 = C22173 * C3647;
    const double C30954 = C141384 * C3647;
    const double C31588 = C30076 * C3647;
    const double C40209 = C141469 * C3647;
    const double C94975 = C141384 * C3647;
    const double C5972 = C5966 * C2961;
    const double C6078 = C275 * C2961;
    const double C6617 = C713 * C2961;
    const double C6894 = C5965 * C2961;
    const double C23062 = C22173 * C2961;
    const double C8020 = C5965 * C3491;
    const double C8140 = C275 * C3491;
    const double C8800 = C713 * C3491;
    const double C14988 = C188 * C3491;
    const double C15102 = C14205 * C3491;
    const double C15314 = C418 * C3491;
    const double C24098 = C22173 * C3491;
    const double C30953 = C30076 * C3491;
    const double C14119 = C188 * C5326;
    const double C14212 = C14206 * C5326;
    const double C14392 = C418 * C5326;
    const double C16165 = C14205 * C5326;
    const double C31960 = C30076 * C5326;
    const double C6892 = C5966 * C6728;
    const double C7022 = C275 * C6728;
    const double C7772 = C713 * C6728;
    const double C8018 = C5966 * C7886;
    const double C8136 = C275 * C7886;
    const double C8797 = C713 * C7886;
    const double C38768 = C22173 * C7886;
    const double C38920 = C30076 * C7886;
    const double C16033 = C188 * C15861;
    const double C16163 = C14206 * C15861;
    const double C16431 = C418 * C15861;
    const double C139675 = ae * C139673;
    const double C139674 = C139643 * C139673;
    const double C139684 = 2 * C139673;
    const double C139965 = C139758 * C139673;
    const double C140029 = C139801 * C139673;
    const double C2965 = (C139657 + C139673 * C139866) / C139330;
    const double C5330 = (C139657 + C139673 * C139940) / C139330;
    const double C140280 = ae * C140277;
    const double C140279 = C139758 * C140277;
    const double C140327 = C139801 * C140277;
    const double C140366 = 2 * C140277;
    const double C140581 = ae * C140578;
    const double C140580 = C139801 * C140578;
    const double C140679 = 2 * C140578;
    const double C832 =
        (2 * ae * C139758 * C139655 + C139643 * C139758 * C139672) / C139335;
    const double C1610 =
        (2 * ae * C139801 * C139655 + C139643 * C139801 * C139672) / C139335;
    const double C2968 = ((C139646 + C139647 * C139648 * C139652) * C139650 +
                          C139672 * C139866) /
                         C139335;
    const double C3498 = (C139801 * C139758 * C139672) / C139335;
    const double C5333 = ((C139646 + C139647 * C139648 * C139652) * C139650 +
                          C139672 * C139940) /
                         C139335;
    const double C422 =
        (2 * C139643 * C139871 +
         C139643 * (C139871 + (C139681 + C139866 * C139682 * C139683) *
                                  C139650 * C139647)) /
        C139335;
    const double C1170 =
        (2 * ae * C139643 * C139764 + C139758 * C139643 * C139871) / C139335;
    const double C1948 = (C139801 * C139643 * C139871) / C139335;
    const double C3790 =
        (2 * ae * C139801 * C139764 + C139758 * C139801 * C139871) / C139335;
    const double C5561 = ((C139646 + C139866 * C139648 * C139652) * C139650 +
                          C139871 * C139940) /
                         C139335;
    const double C717 =
        (2 * C139643 * C139945 +
         C139643 * (C139945 + (C139681 + C139940 * C139682 * C139683) *
                                  C139650 * C139647)) /
        C139335;
    const double C1504 = (C139758 * C139643 * C139945) / C139335;
    const double C2282 =
        (2 * ae * C139643 * C139807 + C139801 * C139643 * C139945) / C139335;
    const double C3416 = ((C139646 + C139940 * C139648 * C139652) * C139650 +
                          C139945 * C139866) /
                         C139335;
    const double C4074 =
        (2 * ae * C139758 * C139807 + C139801 * C139758 * C139945) / C139335;
    const double C140507 = C140506 + C140278;
    const double C8470 = (ae * C139764 + C139801 * C139891 +
                          ae * (C139801 * C139758 * C139812 + C140278) +
                          C139758 * (ae * (C139801 * C139812 + C139665) +
                                     C139758 * (C139772 + C139801 * C139894))) /
                         C139335;
    const double C18709 = C188 * C13301;
    const double C19040 = C418 * C13301;
    const double C43542 = C30076 * C13301;
    const double C46916 = C22173 * C13301;
    const double C61725 = C14206 * C13301;
    const double C65402 = C14205 * C13301;
    const double C108743 = C5965 * C13301;
    const double C65400 = C14206 * C18582;
    const double C112217 = C188 * C18582;
    const double C112431 = C418 * C18582;
    const double C138763 = C22173 * C18582;
    const double C140116 = ae * C140115;
    const double C3026 = (C139644 * C139642 * C139761 + C139758 * C140115 +
                          C139758 * C139646 * ae) /
                         C139330;
    const double C3572 = (C139801 * C140115) / C139330;
    const double C13393 = (C140115 + C140277 * C139940) / C139330;
    const double C220 = C206 + C207;
    const double C441 = C430 + C431;
    const double C521 = C512 + C513;
    const double C222 = C210 + C211;
    const double C442 = C433 + C434;
    const double C522 = C515 + C516;
    const double C935 = C926 + C927;
    const double C1186 = C1177 + C1178;
    const double C937 = C930 + C931;
    const double C1187 = C1180 + C1181;
    const double C1713 = C1704 + C1705;
    const double C1964 = C1955 + C1956;
    const double C1715 = C1708 + C1709;
    const double C1965 = C1958 + C1959;
    const double C2054 = C2049 + C2050;
    const double C16441 = C16428 + C5566;
    const double C16045 = C16025 + C16026;
    const double C21672 = C21668 + C16434;
    const double C21415 = C21411 + C21412;
    const double C140234 = ae * C140233;
    const double C5449 = (C139644 * C139642 * C139804 + C139801 * C140233 +
                          C139801 * C139646 * ae) /
                         C139330;
    const double C1276 = C1271 + C1272;
    const double C307 = C293 + C294;
    const double C655 = C646 + C647;
    const double C736 = C725 + C726;
    const double C309 = C297 + C298;
    const double C656 = C649 + C650;
    const double C737 = C728 + C729;
    const double C1029 = C1020 + C1021;
    const double C1520 = C1511 + C1512;
    const double C1031 = C1024 + C1025;
    const double C1433 = C1428 + C1429;
    const double C1521 = C1514 + C1515;
    const double C1807 = C1798 + C1799;
    const double C2298 = C2289 + C2290;
    const double C1809 = C1802 + C1803;
    const double C2211 = C2206 + C2207;
    const double C2299 = C2292 + C2293;
    const double C7780 = C7770 + C3421;
    const double C7034 = C7014 + C7015;
    const double C11459 = C11454 + C4079;
    const double C10799 = C10794 + C10795;
    const double C10451 = C10447 + C7777;
    const double C9954 = C9950 + C9951;
    const double C11458 = C11452 + C8803;
    const double C10797 = C10788 + C10789;
    const double C139702 = ae * C139699;
    const double C139701 = C139643 * C139699;
    const double C139718 = 2 * C139699;
    const double C139961 = C139758 * C139699;
    const double C140025 = C139801 * C139699;
    const double C140089 = C139699 * C139866;
    const double C140191 = C139699 * C139940;
    const double C140726 = C139758 * C140724;
    const double C140737 = C139758 * C140736;
    const double C140930 = C139801 * C140928;
    const double C140944 = C139801 * C140943;
    const double C139980 = 2 * C139975;
    const double C140720 = C139775 + C139975;
    const double C140734 = C139852 + C139975;
    const double C140880 = C139975 + C140878;
    const double C140892 = C139975 + C140891;
    const double C18822 =
        (2 * (ae * C140347 + C139801 * C140600) +
         ae * (C140347 + C139970 * C139940) +
         C139801 * (C140600 + ae * C139801 * C139970 +
                    C139801 * (C139975 + C139801 * C139758 * C139830))) /
        C139335;
    const double C19250 =
        (2 * (ae * C140347 + C139801 * C140610) +
         ae * (C140347 + C139970 * C139940) +
         C139801 * (C140610 + ae * C139801 * C139970 +
                    C139801 * (C139975 + C139801 * C139758 * C139916))) /
        C139335;
    const double C64645 = C141216 * C13559;
    const double C65394 = C14206 * C18584;
    const double C65514 = C141216 * C18584;
    const double C112219 = C188 * C18584;
    const double C138759 = C22173 * C18584;
    const double C140044 = 2 * C140039;
    const double C140803 = C140039 + C140802;
    const double C140924 = C139818 + C140039;
    const double C140941 = C139910 + C140039;
    const double C10781 =
        (ae * (2 * C140347 + C139758 * C140351) +
         C139801 * (2 * C139758 * C139818 +
                    C139758 * (C139818 + C139830 * C139866))) /
        C139335;
    const double C10901 =
        (2 * (ae * C139801 * C139668 + C139758 * C140440) +
         ae * C139801 * C140351 +
         C139758 * (C140440 + ae * C139801 * C139970 +
                    C139758 * (C140039 + C139758 * C139801 * C139858))) /
        C139335;
    const double C11237 =
        (ae * (2 * C140347 + C139758 * C140351) +
         C139801 * (2 * C139758 * C139910 +
                    C139758 * (C139910 + C139916 * C139866))) /
        C139335;
    const double C13481 =
        (C139811 + C139818 * C139866 + ae * C139801 * C140351 +
         C139801 * (ae * C140351 + C139801 * (C139818 + C139830 * C139866))) /
        C139335;
    const double C13799 =
        (C139907 + C139910 * C139866 + ae * C139801 * C140351 +
         C139801 * (ae * C140351 + C139801 * (C139910 + C139916 * C139866))) /
        C139335;
    const double C65392 =
        (2 * (ae * C140351 + C139801 * C140732) +
         ae * (C140351 + C140725 * C139940) +
         C139801 *
             (C140732 + ae * C139801 * C140725 +
              C139801 * (ae * C140725 +
                         C139801 * (C139830 + std::pow(C139649, 7) * bs[7] *
                                                  C139805 * C139866)))) /
        C139335;
    const double C65851 =
        (2 * (ae * C140351 + C139801 * C140787) +
         ae * (C140351 + C140725 * C139940) +
         C139801 *
             (C140787 + ae * C139801 * C140725 +
              C139801 * (ae * C140725 +
                         C139801 * (C139916 + std::pow(C139649, 7) * bs[7] *
                                                  C139904 * C139866)))) /
        C139335;
    const double C9770 = (3 * (C139655 + C139668 * C139866) +
                          C139758 * (2 * C140347 + C139758 * C140351)) /
                         C139330;
    const double C10553 =
        (C139801 * (2 * C140347 + C139758 * C140351)) / C139330;
    const double C13307 =
        (C139655 + C139668 * C139866 + C140351 * C139940) / C139330;
    const double C65158 =
        (2 * C139801 * C140351 + C139801 * (C140351 + C140725 * C139940)) /
        C139330;
    const double C60471 =
        (2 * (ae * C140648 + C139758 * C140830) +
         ae * (C140351 + C140725 * C139940) +
         C139758 *
             (C140830 + ae * (C139970 + C139758 * C139728 * C139940) +
              C139758 * (ae * (C139692 + C139728 * C139940) +
                         C139758 * (C139858 + std::pow(C139649, 7) * bs[7] *
                                                  C139846 * C139940)))) /
        C139335;
    const double C68180 =
        (ae * (3 * C140648 +
               C139801 *
                   (2 * C140034 + C139801 * (C139692 + C139728 * C139940))) +
         C139758 *
             (3 * C140830 +
              C139801 * (2 * C140801 +
                         C139801 * (C139858 + std::pow(C139649, 7) * bs[7] *
                                                  C139846 * C139940)))) /
        C139335;
    const double C21310 = (3 * (C139655 + C139668 * C139940) +
                           C139801 * (2 * C140644 + C139801 * C140648)) /
                          C139330;
    const double C139700 = C139643 * C139698;
    const double C139959 = C139758 * C139698;
    const double C140023 = C139801 * C139698;
    const double C2969 = (2 * ae * (C139655 + C139668 * C139866) +
                          C139643 * (C139672 + C139698 * C139866)) /
                         C139335;
    const double C5334 = (2 * ae * (C139655 + C139668 * C139940) +
                          C139643 * (C139672 + C139698 * C139940)) /
                         C139335;
    const double C6735 =
        (2 * C139758 * C139672 + C139758 * (C139672 + C139698 * C139866)) /
        C139335;
    const double C7893 = (C139801 * (C139672 + C139698 * C139866)) / C139335;
    const double C15868 =
        (2 * C139801 * C139672 + C139801 * (C139672 + C139698 * C139940)) /
        C139335;
    const double C139734 = C139643 * C139730;
    const double C139733 = C139730 * ae;
    const double C140286 = C139758 * C139730;
    const double C140587 = C139801 * C139730;
    const double C6730 =
        2 * C139758 * C139694 + C139758 * (C139694 + C139730 * C139866);
    const double C7888 = C139801 * (C139694 + C139730 * C139866);
    const double C15863 =
        2 * C139801 * C139694 + C139801 * (C139694 + C139730 * C139940);
    const double C140396 = C140392 + C139729;
    const double C140705 = C140701 + C139729;
    const double C140394 = C139689 + C140390;
    const double C140393 = C140389 * ae;
    const double C140630 = C139801 * C140389;
    const double C18583 =
        2 * C139801 * C140266 + C139801 * (C140266 + C140389 * C139940);
    const double C140707 = C139689 + C140703;
    const double C140706 = C140702 * ae;
    const double C139741 = ae * C139736;
    const double C139739 = C139643 * C139736;
    const double C139974 = C139758 * C139736;
    const double C140038 = C139801 * C139736;
    const double C140095 = C139736 * C139866;
    const double C140197 = C139736 * C139940;
    const double C140758 = ae * C140751;
    const double C140755 = C139758 * C140751;
    const double C140809 = C139801 * C140751;
    const double C140834 = C140751 * C139940;
    const double C140971 = ae * C140965;
    const double C140969 = C139801 * C140965;
    const double C139738 = C139643 * C139735;
    const double C139971 = C139758 * C139735;
    const double C140035 = C139801 * C139735;
    const double C140093 = C139735 * C139866;
    const double C140195 = C139735 * C139940;
    const double C139882 = C139881 * C139647;
    const double C140386 = C139643 * C139881;
    const double C140742 = C139758 * C139881;
    const double C140806 = C139801 * C139881;
    const double C140832 = C139881 * C139940;
    const double C139956 = C139955 * C139647;
    const double C140432 = C139643 * C139955;
    const double C140795 = C139955 * C139866;
    const double C140898 = C139758 * C139955;
    const double C140955 = C139801 * C139955;
    const double C140757 = C139758 * C140753;
    const double C140756 = C140753 * ae;
    const double C140864 = C139801 * C140753;
    const double C65157 =
        2 * C139801 * C140373 + C139801 * (C140373 + C140753 * C139940);
    const double C140908 = C140904 + C140752;
    const double C140906 = C140368 + C140902;
    const double C140905 = C140901 * ae;
    const double C140962 = C139801 * C140887;
    const double C140960 = C140887 * ae;
    const double C140122 = C139758 * C139780;
    const double C2037 =
        (ae * (2 * C139771 + C139643 * C139780) +
         C139801 * (2 * C139643 * C139894 + C139643 * C139899)) /
        C139335;
    const double C2194 =
        (ae * (2 * C139771 + C139643 * C139780) +
         C139801 * (2 * C139643 * C139931 + C139643 * C139936)) /
        C139335;
    const double C5621 = (C139891 + C139894 * C139647 + ae * C139801 * C139780 +
                          C139801 * (ae * C139780 + C139801 * C139899)) /
                         C139335;
    const double C5729 = (C139928 + C139931 * C139647 + ae * C139801 * C139780 +
                          C139801 * (ae * C139780 + C139801 * C139936)) /
                         C139335;
    const double C16550 =
        (2 * (ae * C139780 + C139801 * C139899) +
         ae * (C139780 + C139794 * C139940) +
         C139801 *
             (C139899 + ae * C139801 * C139794 +
              C139801 * (ae * C139794 +
                         C139801 * (C139897 + std::pow(C139649, 7) * bs[7] *
                                                  C139888 * C139647)))) /
        C139335;
    const double C16785 =
        (2 * (ae * C139780 + C139801 * C139936) +
         ae * (C139780 + C139794 * C139940) +
         C139801 *
             (C139936 + ae * C139801 * C139794 +
              C139801 * (ae * C139794 +
                         C139801 * (C139934 + std::pow(C139649, 7) * bs[7] *
                                                  C139925 * C139647)))) /
        C139335;
    const double C193 = (3 * (C139764 + C139769 * C139647) +
                         C139643 * (2 * C139771 + C139643 * C139780)) /
                        C139330;
    const double C909 = (C139758 * (2 * C139771 + C139643 * C139780) +
                         (2 * C139666 + C139643 * C139694) * ae) /
                        C139330;
    const double C1687 =
        (C139801 * (2 * C139771 + C139643 * C139780)) / C139330;
    const double C5393 =
        (C139764 + C139769 * C139647 + C139780 * C139940) / C139330;
    const double C16014 =
        (2 * C139801 * C139780 + C139801 * (C139780 + C139794 * C139940)) /
        C139330;
    const double C139795 = C139643 * C139793;
    const double C140353 = C139758 * C139793;
    const double C139861 = C139643 * C139860;
    const double C140361 = C139758 * C139860;
    const double C140442 = C139801 * C139860;
    const double C140820 = C139758 * C140819;
    const double C140842 = C139801 * C140819;
    const double C140950 = C139801 * C140949;
    const double C139790 = C139775 + C139786;
    const double C139856 = C139852 + C139786;
    const double C140385 = 2 * C139786;
    const double C140460 = C139786 + C140459;
    const double C140675 = C139786 + C140674;
    const double C16783 =
        (2 * (ae * C139771 + C139801 * C140302) +
         ae * (C139771 + C139782 * C139940) +
         C139801 * (C140302 + ae * C139801 * C139782 +
                    C139801 * (C139786 + C139801 * C140427))) /
        C139335;
    const double C140267 = C140265 + C139693;
    const double C16034 = C141309 * C16012;
    const double C16432 = C188 * C16012;
    const double C16552 = C14206 * C16012;
    const double C140376 = ae * C140371;
    const double C140374 = C139758 * C140371;
    const double C140446 = C139801 * C140371;
    const double C140485 = C140371 * C139940;
    const double C140744 = 2 * C140371;
    const double C21401 = (3 * (C139764 + C139769 * C139940) +
                           C139801 * (2 * C140657 + C139801 * C140659)) /
                          C139330;
    const double C140815 = 2 * C140810;
    const double C140841 = C139894 + C140810;
    const double C140947 = C139931 + C140810;
    const double C199 =
        (3 * (C139768 + ae * C139771 + C139643 * C139779) +
         ae * (2 * C139771 + C139643 * C139780) +
         C139643 *
             (2 * C139779 + ae * C139780 +
              C139643 * (C139775 + ae * C139643 * C139776 +
                         C139643 * (ae * C139776 +
                                    C139643 * C139716 * C139715 * C139762)))) /
        C139335;
    const double C1693 =
        (C139801 * (C139768 + ae * C139771 + C139643 * C139779)) / C139335;
    const double C5396 =
        (ae * C139764 + C139643 * C139768 + C139779 * C139940) / C139335;
    const double C16015 =
        (2 * C139801 * C139779 + C139801 * (C139779 + C139793 * C139940)) /
        C139335;
    const double C21404 =
        (3 * (C139779 + C139793 * C139940) +
         C139801 * (2 * C139801 * C139793 +
                    C139801 * (C139793 +
                               (ae * C139789 + C139643 * std::pow(C139649, 7) *
                                                   bs[7] * C139762) *
                                   C139940))) /
        C139335;
    const double C9864 =
        (3 * (C139768 + ae * C140347 + C139758 * C140350) +
         ae * (2 * C140347 + C139758 * C140351) +
         C139758 * (2 * C140350 + ae * C140351 +
                    C139758 * (C139775 + C139975 +
                               C139758 * (C139713 + C139758 * C139787)))) /
        C139335;
    const double C10679 =
        (C139801 * (2 * C140350 + ae * C140351 +
                    C139758 * (C139775 + C139975 +
                               C139758 * (C139713 + C139758 * C139787)))) /
        C139335;
    const double C13397 =
        (ae * C139655 + C139758 * C139768 + C140350 * C139940) / C139335;
    const double C13398 =
        (C139768 + ae * C140347 + C139758 * C140350 +
         (C139775 + C139975 + C139758 * (C139713 + C139758 * C139787)) *
             C139940) /
        C139335;
    const double C18700 =
        (2 * C139801 * C140350 +
         C139801 * (C140350 + (C139713 + C139758 * C139787) * C139940)) /
        C139335;
    const double C68012 =
        (3 * (C140350 + C140724 * C139940) +
         C139801 * (2 * C139801 * C140724 +
                    C139801 * (C140724 +
                               (ae * C139728 + C139758 * std::pow(C139649, 7) *
                                                   bs[7] * C139762) *
                                   C139940))) /
        C139335;
    const double C21414 = C21409 + C21410;
    const double C140240 = C139801 * C139823;
    const double C1259 =
        (ae * (2 * C139814 + C139643 * C139823) +
         C139758 * (2 * C139643 * C139894 + C139643 * C139899)) /
        C139335;
    const double C1416 =
        (ae * (2 * C139814 + C139643 * C139823) +
         C139758 * (2 * C139643 * C139931 + C139643 * C139936)) /
        C139335;
    const double C3256 = (C139891 + C139894 * C139647 + ae * C139758 * C139823 +
                          C139758 * (ae * C139823 + C139758 * C139899)) /
                         C139335;
    const double C3364 = (C139928 + C139931 * C139647 + ae * C139758 * C139823 +
                          C139758 * (ae * C139823 + C139758 * C139936)) /
                         C139335;
    const double C7415 =
        (2 * (ae * C139823 + C139758 * C139899) +
         ae * (C139823 + C139837 * C139866) +
         C139758 *
             (C139899 + ae * C139758 * C139837 +
              C139758 * (ae * C139837 +
                         C139758 * (C139897 + std::pow(C139649, 7) * bs[7] *
                                                  C139888 * C139647)))) /
        C139335;
    const double C7656 =
        (2 * (ae * C139823 + C139758 * C139936) +
         ae * (C139823 + C139837 * C139866) +
         C139758 *
             (C139936 + ae * C139758 * C139837 +
              C139758 * (ae * C139837 +
                         C139758 * (C139934 + std::pow(C139649, 7) * bs[7] *
                                                  C139925 * C139647)))) /
        C139335;
    const double C280 = (3 * (C139807 + C139812 * C139647) +
                         C139643 * (2 * C139814 + C139643 * C139823)) /
                        C139330;
    const double C1003 =
        (C139758 * (2 * C139814 + C139643 * C139823)) / C139330;
    const double C1781 = (C139801 * (2 * C139814 + C139643 * C139823) +
                          (2 * C139666 + C139643 * C139694) * ae) /
                         C139330;
    const double C3086 =
        (C139807 + C139812 * C139647 + C139823 * C139866) / C139330;
    const double C3648 =
        (C139801 * C139758 * C139823 + C139758 * C139694 * ae) / C139330;
    const double C7003 =
        (2 * C139758 * C139823 + C139758 * (C139823 + C139837 * C139866)) /
        C139330;
    const double C8129 = (C139801 * (C139823 + C139837 * C139866) +
                          (C139694 + C139730 * C139866) * ae) /
                         C139330;
    const double C139838 = C139643 * C139836;
    const double C140602 = C139758 * C139836;
    const double C140650 = C139801 * C139836;
    const double C139919 = C139643 * C139918;
    const double C140612 = C139758 * C139918;
    const double C140668 = C139801 * C139918;
    const double C140781 = C139758 * C140779;
    const double C140792 = C139758 * C140791;
    const double C140894 = C139801 * C140791;
    const double C139833 = C139818 + C139829;
    const double C139914 = C139910 + C139829;
    const double C140419 = C139829 + C140417;
    const double C140429 = C139829 + C140428;
    const double C140698 = 2 * C139829;
    const double C7413 =
        (2 * (ae * C139814 + C139758 * C140295) +
         ae * (C139814 + C139825 * C139866) +
         C139758 * (C140295 + ae * C139758 * C139825 +
                    C139758 * (C139829 + C139758 * C139643 * C139897))) /
        C139335;
    const double C7654 =
        (2 * (ae * C139814 + C139758 * C140302) +
         ae * (C139814 + C139825 * C139866) +
         C139758 * (C140302 + ae * C139758 * C139825 +
                    C139758 * (C139829 + C139758 * C139643 * C139934))) /
        C139335;
    const double C140514 = C139801 * C140414;
    const double C140568 = C140566 + C139693;
    const double C7023 = C141320 * C7001;
    const double C7658 = C5966 * C7001;
    const double C7773 = C275 * C7001;
    const double C8137 = C141320 * C8127;
    const double C8687 = C5966 * C8127;
    const double C8798 = C275 * C8127;
    const double C18483 = C14205 * C8127;
    const double C34220 = C30076 * C8127;
    const double C38921 = C141384 * C8127;
    const double C39626 = C22173 * C8127;
    const double C102609 = C141384 * C8127;
    const double C140510 = C139801 * C140412;
    const double C9940 = (3 * (C139807 + C139812 * C139866) +
                          C139758 * (2 * C140408 + C139758 * C140412)) /
                         C139330;
    const double C10779 = (C139801 * (2 * C140408 + C139758 * C140412) +
                           (2 * C140276 + C139758 * C140373) * ae) /
                          C139330;
    const double C140621 = C140619 + C140372;
    const double C140778 = C139894 + C140774;
    const double C140789 = C139931 + C140774;
    const double C140897 = 2 * C140774;
    const double C140689 = ae * C140684;
    const double C140687 = C139801 * C140684;
    const double C140957 = 2 * C140684;
    const double C286 =
        (3 * (C139811 + ae * C139814 + C139643 * C139822) +
         ae * (2 * C139814 + C139643 * C139823) +
         C139643 *
             (2 * C139822 + ae * C139823 +
              C139643 * (C139818 + ae * C139643 * C139819 +
                         C139643 * (ae * C139819 +
                                    C139643 * C139716 * C139715 * C139805)))) /
        C139335;
    const double C1009 =
        (C139758 * (C139811 + ae * C139814 + C139643 * C139822)) / C139335;
    const double C3089 =
        (ae * C139807 + C139643 * C139811 + C139822 * C139866) / C139335;
    const double C7004 =
        (2 * C139758 * C139822 + C139758 * (C139822 + C139836 * C139866)) /
        C139335;
    const double C9943 =
        (3 * (C139822 + C139836 * C139866) +
         C139758 * (2 * C139758 * C139836 +
                    C139758 * (C139836 +
                               (ae * C139832 + C139643 * std::pow(C139649, 7) *
                                                   bs[7] * C139805) *
                                   C139866))) /
        C139335;
    const double C21494 =
        (3 * (C139811 + ae * C140644 + C139801 * C140647) +
         ae * (2 * C140644 + C139801 * C140648) +
         C139801 * (2 * C140647 + ae * C140648 +
                    C139801 * (C139818 + C140039 +
                               C139801 * (C139713 + C139801 * C139830)))) /
        C139335;
    const double C9953 = C9948 + C9949;
    const double C10796 = C10786 + C10787;
    const double C366 =
        (3 * (C139849 + ae * C139771 + C139643 * C139854) +
         ae * (2 * C139771 + C139643 * C139780) +
         C139643 * (2 * C139854 + ae * C139780 +
                    C139643 * (C139852 + C139786 +
                               C139643 * (C139783 + C139643 * C139716 *
                                                        C139715 * C139846)))) /
        C139335;
    const double C1876 =
        (C139801 * (C139849 + ae * C139771 + C139643 * C139854)) / C139335;
    const double C5508 =
        (ae * C139764 + C139643 * C139849 + C139854 * C139940) / C139335;
    const double C16272 =
        (2 * C139801 * C139854 + C139801 * (C139854 + C139860 * C139940)) /
        C139335;
    const double C10031 =
        (3 * (C139849 + ae * C140347 + C139758 * C140359) +
         ae * (2 * C140347 + C139758 * C140351) +
         C139758 * (2 * C140359 + ae * C140351 +
                    C139758 * (C139852 + C139975 +
                               C139758 * (C139713 + C139758 * C139858)))) /
        C139335;
    const double C65512 = C141216 * C18922;
    const double C114124 = C141216 * C21570;
    const double C140264 = C139643 * C139876;
    const double C140365 = C139758 * C139876;
    const double C140444 = C139801 * C139876;
    const double C423 =
        (3 * (C139871 + C139876 * C139647) +
         C139643 *
             (2 * C139643 * C139876 +
              C139643 * (C139876 + (C139714 + C139866 * C139715 * C139716) *
                                       C139650 * C139647))) /
        C139335;
    const double C1169 = (2 * ae * (C139764 + C139769 * C139647) +
                          C139758 * (C139871 + C139876 * C139647)) /
                         C139335;
    const double C1947 = (C139801 * (C139871 + C139876 * C139647)) / C139335;
    const double C3791 =
        (2 * ae * C139801 * C139771 + C139758 * C139801 * C139643 * C139876) /
        C139335;
    const double C5562 =
        (C139643 * C139871 + C139643 * C139876 * C139940) / C139335;
    const double C13635 = (2 * ae * (C139764 + C139769 * C139940) +
                           C139758 * (C139871 + C139876 * C139940)) /
                          C139335;
    const double C16422 =
        (2 * C139801 * C139871 + C139801 * (C139871 + C139876 * C139940)) /
        C139335;
    const double C10203 =
        (3 * (C139891 + ae * C140408 + C139758 * C140411) +
         ae * (2 * C140408 + C139758 * C140412) +
         C139758 * (2 * C140411 + ae * C140412 +
                    C139758 * (C139894 + ae * C139758 * C139819 +
                               C139758 * (C139826 + C139758 * C139897)))) /
        C139335;
    const double C13719 =
        (ae * (C139807 + C139801 * (C139801 * C139812 + C139665) +
               C139801 * C139660 * ae) +
         C139758 * (C139891 + ae * C139801 * C139769 + C139801 * C140457)) /
        C139335;
    const double C13720 =
        (C139891 + ae * C139801 * C139769 + C139801 * C140457 +
         ae * (C140408 + C139801 * (C139801 * C139758 * C139819 + C140372) +
               C139801 * C140368 * ae) +
         C139758 * (ae * (C139812 + C139801 * (C139801 * C139819 + C139688) +
                          C139801 * C139681 * ae) +
                    C139758 * (C139894 + ae * C139801 * C139776 +
                               C139801 * (C139783 + C139801 * C139897)))) /
        C139335;
    const double C16549 =
        (2 * (ae * C139764 + C139801 * C139891) +
         ae * (C139764 + C139769 * C139940) +
         C139801 * (C139891 + ae * C139801 * C139769 + C139801 * C140457)) /
        C139335;
    const double C19150 =
        (ae * (2 * C140578 +
               C139801 * (C139812 + C139801 * (C139801 * C139819 + C139688) +
                          C139801 * C139681 * ae) +
               (C139660 + C139681 * C139940) * ae) +
         C139758 * (2 * C140457 + ae * (C139769 + C139776 * C139940) +
                    C139801 * (C139894 + ae * C139801 * C139776 +
                               C139801 * (C139783 + C139801 * C139897)))) /
        C139335;
    const double C21749 =
        (3 * (C139891 + ae * C140657 + C139801 * C140457) +
         ae * (2 * C140657 + C139801 * C140659) +
         C139801 * (2 * C140457 + ae * C140659 +
                    C139801 * (C139894 + ae * C139801 * C139776 +
                               C139801 * (C139783 + C139801 * C139897)))) /
        C139335;
    const double C1275 = C1268 + C1269;
    const double C2053 = C2046 + C2047;
    const double C583 =
        (3 * (C139907 + ae * C139814 + C139643 * C139912) +
         ae * (2 * C139814 + C139643 * C139823) +
         C139643 * (2 * C139912 + ae * C139823 +
                    C139643 * (C139910 + C139829 +
                               C139643 * (C139826 + C139643 * C139716 *
                                                        C139715 * C139904)))) /
        C139335;
    const double C1346 =
        (C139758 * (C139907 + ae * C139814 + C139643 * C139912)) / C139335;
    const double C3309 =
        (ae * C139807 + C139643 * C139907 + C139912 * C139866) / C139335;
    const double C7529 =
        (2 * C139758 * C139912 + C139758 * (C139912 + C139918 * C139866)) /
        C139335;
    const double C10283 =
        (3 * (C139912 + C139918 * C139866) +
         C139758 * (2 * C139758 * C139918 +
                    C139758 * (C139918 +
                               (ae * C139832 + C139643 * std::pow(C139649, 7) *
                                                   bs[7] * C139904) *
                                   C139866))) /
        C139335;
    const double C21825 =
        (3 * (C139907 + ae * C140644 + C139801 * C140666) +
         ae * (2 * C140644 + C139801 * C140648) +
         C139801 * (2 * C140666 + ae * C140648 +
                    C139801 * (C139910 + C140039 +
                               C139801 * (C139713 + C139801 * C139916)))) /
        C139335;
    const double C10368 =
        (3 * (C139928 + ae * C140408 + C139758 * C140425) +
         ae * (2 * C140408 + C139758 * C140412) +
         C139758 * (2 * C140425 + ae * C140412 +
                    C139758 * (C139931 + ae * C139758 * C139819 +
                               C139758 * (C139826 + C139758 * C139934)))) /
        C139335;
    const double C21908 =
        (3 * (C139928 + ae * C140657 + C139801 * C140672) +
         ae * (2 * C140657 + C139801 * C140659) +
         C139801 * (2 * C140672 + ae * C140659 +
                    C139801 * (C139931 + ae * C139801 * C139776 +
                               C139801 * (C139783 + C139801 * C139934)))) /
        C139335;
    const double C1432 = C1425 + C1426;
    const double C2210 = C2203 + C2204;
    const double C140306 = C139643 * C139950;
    const double C140616 = C139758 * C139950;
    const double C140678 = C139801 * C139950;
    const double C718 =
        (3 * (C139945 + C139950 * C139647) +
         C139643 *
             (2 * C139643 * C139950 +
              C139643 * (C139950 + (C139714 + C139940 * C139715 * C139716) *
                                       C139650 * C139647))) /
        C139335;
    const double C1503 = (C139758 * (C139945 + C139950 * C139647)) / C139335;
    const double C2281 = (2 * ae * (C139807 + C139812 * C139647) +
                          C139801 * (C139945 + C139950 * C139647)) /
                         C139335;
    const double C3417 =
        (C139643 * C139945 + C139643 * C139950 * C139866) / C139335;
    const double C4075 =
        (2 * ae * C139758 * C139814 + C139801 * C139758 * C139643 * C139950) /
        C139335;
    const double C7765 =
        (2 * C139758 * C139945 + C139758 * (C139945 + C139950 * C139866)) /
        C139335;
    const double C8794 = (2 * ae * (C139807 + C139812 * C139866) +
                          C139801 * (C139945 + C139950 * C139866)) /
                         C139335;
    const double C10444 =
        (3 * (C139945 + C139950 * C139866) +
         C139758 * (2 * C139758 * C139950 +
                    C139758 * (C139950 + C139955 * C139866))) /
        C139335;
    const double C11449 =
        (2 * ae * (2 * C140408 + C139758 * C140412) +
         C139801 * (2 * C139758 * C139950 +
                    C139758 * (C139950 + C139955 * C139866))) /
        C139335;
    const double C3866 = (ae * (C139801 * C139823 + C139697) +
                          C139758 * (ae * C139780 + C139801 * C139899)) /
                         C139335;
    const double C216 = C188 * C112;
    const double C303 = C275 * C112;
    const double C436 = C418 * C112;
    const double C731 = C713 * C112;
    const double C922 = C188 * C820;
    const double C1016 = C275 * C820;
    const double C1174 = C418 * C820;
    const double C1508 = C713 * C820;
    const double C22195 = C22173 * C820;
    const double C1700 = C188 * C1598;
    const double C1794 = C275 * C1598;
    const double C1952 = C418 * C1598;
    const double C2286 = C713 * C1598;
    const double C30098 = C30076 * C1598;
    const double C5986 = C5966 * C2962;
    const double C6084 = C275 * C2962;
    const double C6619 = C713 * C2962;
    const double C23054 = C22173 * C2962;
    const double C24090 = C22173 * C3492;
    const double C24210 = C275 * C3492;
    const double C24853 = C713 * C3492;
    const double C30839 = C188 * C3492;
    const double C30945 = C30076 * C3492;
    const double C31161 = C418 * C3492;
    const double C14125 = C188 * C5327;
    const double C14226 = C14206 * C5327;
    const double C14394 = C418 * C5327;
    const double C31952 = C30076 * C5327;
    const double C8469 =
        (ae * C139771 + C139801 * C140295 +
         ae * (C139801 * C139758 * C139825 + C140268) +
         C139758 * (ae * (C139801 * C139825 + C139693) +
                    C139758 * (C139786 + C139801 * C139643 * C139897))) /
        C139335;
    const double C14984 = C188 * C13302;
    const double C15100 = C14206 * C13302;
    const double C15310 = C418 * C13302;
    const double C40058 = C22173 * C13302;
    const double C40206 = C30076 * C13302;
    const double C11131 =
        (2 * (ae * (C139801 * C139812 + C139665) + C139758 * C140457) +
         ae * (C139801 * C140412 + C140375) +
         C139758 * (C140457 + ae * (C139801 * C139758 * C139819 + C140372) +
                    C139758 * (ae * (C139801 * C139819 + C139688) +
                               C139758 * (C139783 + C139801 * C139897)))) /
        C139335;
    const double C58051 = C275 * C9768;
    const double C58383 = C713 * C9768;
    const double C58615 = C275 * C10551;
    const double C59067 = C713 * C10551;
    const double C89933 = C30076 * C10551;
    const double C106024 = C5966 * C10551;
    const double C64558 = C14206 * C13303;
    const double C90738 = C30076 * C13303;
    const double C108741 = C5966 * C13303;
    const double C136072 = C22173 * C13303;
    const double C114012 = C188 * C21308;
    const double C114182 = C418 * C21308;
    const double C140729 = C140722 + C140727;
    const double C67928 = (3 * (C140347 + C139970 * C139940) +
                           C139801 * (2 * C140875 + C139801 * C140881)) /
                          C139330;
    const double C140933 = C140926 + C140931;
    const double C139798 = C139788 + C139796;
    const double C21402 = (3 * (C139771 + C139782 * C139940) +
                           C139801 * (2 * C140661 + C139801 * C140663)) /
                          C139330;
    const double C140939 = C140937 + C140938;
    const double C139841 = C139831 + C139839;
    const double C140534 = C139801 * C140533;
    const double C140518 = C139801 * C140420;
    const double C9941 = (3 * (C139814 + C139825 * C139866) +
                          C139758 * (2 * C140414 + C139758 * C140420)) /
                         C139330;
    const double C140784 = C140776 + C140782;
    const double C68681 = C139356 * C115;
    const double C69906 = C139356 * C2962;
    const double C69902 = C139356 * C910;
    const double C69898 = C139356 * C821;
    const double C69890 = C139356 * C2961;
    const double C69886 = C139356 * C911;
    const double C69882 = C139356 * C822;
    const double C70262 = C139356 * C1004;
    const double C70258 = C139356 * C3085;
    const double C70254 = C139356 * C1005;
    const double C72643 = C139356 * C6728;
    const double C72881 = C139356 * C7001;
    const double C73471 = C139356 * C3491;
    const double C73463 = C139356 * C7886;
    const double C73787 = C139356 * C3647;
    const double C73783 = C139356 * C8127;
    const double C77863 = C139356 * C3492;
    const double C79107 = C139356 * C1688;
    const double C79103 = C139356 * C1599;
    const double C79099 = C139356 * C1689;
    const double C79095 = C139356 * C1600;
    const double C79515 = C139356 * C1782;
    const double C79511 = C139356 * C1783;
    const double C82375 = C139356 * C13302;
    const double C85793 = C139356 * C5326;
    const double C85789 = C139356 * C5392;
    const double C126271 = C139356 * C5327;
    const double C131364 = C139356 * C15861;
    const double C131360 = C139356 * C16012;
    const double C107 =
        (C139356 / C139336 - (0 * be) / C139330) / C139336 + (0 * ae) / C139330;
    const double C22079 = C139356 / C139336 - (0 * be) / C139330;
    const double C47717 = C139356 / C139336 + (0 * ae) / C139330;
    const double C139358 = C139355 / C139330;
    const double C5874 = C5871 * C115;
    const double C7169 = C5871 * C2962;
    const double C7165 = C5871 * C910;
    const double C7161 = C5871 * C821;
    const double C7153 = C5871 * C2961;
    const double C7149 = C5871 * C911;
    const double C7145 = C5871 * C822;
    const double C7543 = C5871 * C1004;
    const double C7539 = C5871 * C3085;
    const double C7535 = C5871 * C1005;
    const double C10040 = C5871 * C6728;
    const double C10287 = C5871 * C7001;
    const double C10916 = C5871 * C3491;
    const double C10908 = C5871 * C7886;
    const double C11244 = C5871 * C3647;
    const double C11240 = C5871 * C8127;
    const double C16302 = C5871 * C5327;
    const double C16298 = C5871 * C1688;
    const double C16294 = C5871 * C1599;
    const double C16290 = C5871 * C5392;
    const double C16286 = C5871 * C5326;
    const double C16282 = C5871 * C1689;
    const double C16278 = C5871 * C1600;
    const double C16672 = C5871 * C1782;
    const double C16664 = C5871 * C1783;
    const double C18927 = C5871 * C13302;
    const double C21579 = C5871 * C15861;
    const double C21575 = C5871 * C16012;
    const double C39066 = C5871 * C3492;
    const double C55536 = C55527 * C115;
    const double C55532 = C55527 * C6732;
    const double C55531 = C55527 * C2964;
    const double C55530 = C55527 * C828;
    const double C55529 = C55527 * C114;
    const double C56295 = C55527 * C6728;
    const double C56291 = C55527 * C2961;
    const double C56289 = C55527 * C911;
    const double C56287 = C55527 * C822;
    const double C56283 = C55527 * C6729;
    const double C56279 = C55527 * C2960;
    const double C56277 = C55527 * C912;
    const double C56275 = C55527 * C823;
    const double C56533 = C55527 * C7001;
    const double C56530 = C55527 * C3085;
    const double C56527 = C55527 * C1005;
    const double C56524 = C55527 * C7002;
    const double C56521 = C55527 * C3084;
    const double C56518 = C55527 * C1006;
    const double C56748 = C55527 * C1606;
    const double C56747 = C55527 * C3494;
    const double C56746 = C55527 * C7890;
    const double C58110 = C55527 * C9768;
    const double C58702 = C55527 * C3490;
    const double C58698 = C55527 * C7887;
    const double C58694 = C55527 * C10551;
    const double C58924 = C55527 * C3646;
    const double C58921 = C55527 * C8128;
    const double C60315 = C55527 * C13305;
    const double C60314 = C55527 * C5329;
    const double C61845 = C55527 * C13302;
    const double C61841 = C55527 * C3491;
    const double C61837 = C55527 * C13301;
    const double C62172 = C55527 * C3647;
    const double C62497 = C55527 * C15865;
    const double C62496 = C55527 * C18584;
    const double C62866 = C55527 * C5392;
    const double C62864 = C55527 * C5326;
    const double C62860 = C55527 * C1689;
    const double C62858 = C55527 * C1600;
    const double C62854 = C55527 * C5391;
    const double C62852 = C55527 * C5325;
    const double C62848 = C55527 * C1690;
    const double C62846 = C55527 * C1601;
    const double C63218 = C55527 * C1783;
    const double C63214 = C55527 * C1784;
    const double C64646 = C55527 * C13303;
    const double C65513 = C55527 * C18582;
    const double C68187 = C55527 * C15862;
    const double C68185 = C55527 * C16013;
    const double C87369 = C55527 * C7886;
    const double C87684 = C55527 * C8127;
    const double C110679 = C55527 * C16012;
    const double C110677 = C55527 * C15861;
    const double C114125 = C55527 * C21308;
    const double C141494 = C141450 - C141478;
    const double C141495 = C141454 - C141480;
    const double C6739 = C5863 * C833;
    const double C7156 = C5863 * C3142;
    const double C7152 = C5863 * C2964;
    const double C7148 = C5863 * C1100;
    const double C7144 = C5863 * C828;
    const double C7542 = C5863 * C1347;
    const double C7538 = C5863 * C3308;
    const double C7534 = C5863 * C1348;
    const double C10043 = C5863 * C6732;
    const double C10039 = C5863 * C7140;
    const double C10290 = C5863 * C7530;
    const double C10919 = C5863 * C3494;
    const double C10915 = C5863 * C3720;
    const double C10911 = C5863 * C7890;
    const double C10907 = C5863 * C8244;
    const double C11247 = C5863 * C3934;
    const double C11243 = C5863 * C8583;
    const double C15872 = C5863 * C1611;
    const double C16297 = C5863 * C1877;
    const double C16289 = C5863 * C5507;
    const double C16285 = C5863 * C5329;
    const double C16281 = C5863 * C1878;
    const double C16277 = C5863 * C1606;
    const double C16667 = C5863 * C5673;
    const double C16663 = C5863 * C2126;
    const double C18930 = C5863 * C13557;
    const double C18926 = C5863 * C13305;
    const double C19254 = C5863 * C13797;
    const double C21582 = C5863 * C15865;
    const double C21578 = C5863 * C16273;
    const double C21832 = C5863 * C16659;
    const double C139424 = C139423 / C139330;
    const double C47833 = C47811 * C820;
    const double C47823 = C47811 * C821;
    const double C47815 = C47811 * C822;
    const double C48087 = C47811 * C910;
    const double C48081 = C47811 * C911;
    const double C48076 = C47811 * C912;
    const double C48360 = C47811 * C1004;
    const double C48355 = C47811 * C1005;
    const double C48700 = C47811 * C2961;
    const double C48692 = C47811 * C2962;
    const double C49406 = C47811 * C3085;
    const double C49736 = C47811 * C3491;
    const double C49728 = C47811 * C3492;
    const double C50376 = C47811 * C3647;
    const double C62632 = C47811 * C13302;
    const double C62628 = C47811 * C13305;
    const double C62624 = C47811 * C13301;
    const double C62620 = C47811 * C3494;
    const double C62616 = C47811 * C3490;
    const double C63326 = C47811 * C3646;
    const double C65280 = C47811 * C13303;
    const double C65276 = C47811 * C7890;
    const double C65272 = C47811 * C7887;
    const double C65963 = C47811 * C8128;
    const double C68020 = C47811 * C18582;
    const double C68016 = C47811 * C18584;
    const double C77593 = C47811 * C7886;
    const double C78409 = C47811 * C8127;
    const double C55593 =
        (C139527 / C139336 - (0 * be) / C139330) / C139336 + (0 * ae) / C139330;
    const double C68773 = C139527 / C139336 - (0 * be) / C139330;
    const double C6537 = C6527 + C6528;
    const double C103495 = C103488 + C103489;
    const double C22204 = C22185 + C22186;
    const double C22200 = C22177 + C22178;
    const double C22731 = C22722 + C22723;
    const double C22729 = C22717 + C22718;
    const double C23774 = C23768 + C23769;
    const double C40067 = C40050 + C40051;
    const double C43407 = C43402 + C43403;
    const double C642 = C218 * C275;
    const double C658 = C654 * C141320;
    const double C14643 = C654 * C14035;
    const double C30509 = C654 * C141469;
    const double C16050 = C16044 * C5863;
    const double C95852 = C16044 * C47707;
    const double C110524 = C16044 * C141216;
    const double C126040 = C16044 * C141452;
    const double C110523 = C16043 * C55527;
    const double C444 = C440 + C428;
    const double C16443 = C16440 + C1961;
    const double C141496 = C141465 - C141489;
    const double C5990 = C5964 * C110;
    const double C5974 = C5964 * C115;
    const double C5968 = C5964 * C109;
    const double C6262 = C5964 * C192;
    const double C6260 = C5964 * C191;
    const double C6245 = C5964 * C190;
    const double C6241 = C5964 * C189;
    const double C6533 = C5964 * C278;
    const double C6523 = C5964 * C277;
    const double C6896 = C5964 * C822;
    const double C7304 = C5964 * C910;
    const double C7303 = C5964 * C912;
    const double C7299 = C5964 * C911;
    const double C7662 = C5964 * C1005;
    const double C8022 = C5964 * C1600;
    const double C8360 = C5964 * C1688;
    const double C8359 = C5964 * C1690;
    const double C8355 = C5964 * C1689;
    const double C8691 = C5964 * C1783;
    const double C13643 = C5964 * C5392;
    const double C13640 = C5964 * C5391;
    const double C103484 = C5964 * C1606;
    const double C103478 = C5964 * C1601;
    const double C104111 = C5964 * C1784;
    const double C106026 = C5964 * C3494;
    const double C106020 = C5964 * C3490;
    const double C106694 = C5964 * C3646;
    const double C108745 = C5964 * C5325;
    const double C108739 = C5964 * C5329;
    const double C108987 = C5964 * C16013;
    const double C6002 = C5988 + C5989;
    const double C5993 = C5970 + C5971;
    const double C6539 = C6531 + C6532;
    const double C6536 = C6525 + C6526;
    const double C7665 = C7660 + C7661;
    const double C103494 = C103486 + C103487;
    const double C106036 = C106028 + C106029;
    const double C141497 = C141472 - C141490;
    const double C47836 = C47710 * C192;
    const double C47832 = C47710 * C198;
    const double C47826 = C47710 * C197;
    const double C47822 = C47710 * C191;
    const double C47818 = C47710 * C196;
    const double C47814 = C47710 * C190;
    const double C48085 = C47710 * C421;
    const double C48079 = C47710 * C420;
    const double C48365 = C47710 * C638;
    const double C48359 = C47710 * C637;
    const double C48354 = C47710 * C636;
    const double C48703 = C47710 * C911;
    const double C48695 = C47710 * C910;
    const double C49409 = C47710 * C1418;
    const double C49405 = C47710 * C1417;
    const double C49739 = C47710 * C1689;
    const double C49735 = C47710 * C1694;
    const double C49731 = C47710 * C1688;
    const double C50379 = C47710 * C2196;
    const double C50375 = C47710 * C2195;
    const double C62631 = C47710 * C5392;
    const double C62627 = C47710 * C5395;
    const double C62623 = C47710 * C5391;
    const double C62619 = C47710 * C1695;
    const double C62615 = C47710 * C1690;
    const double C62985 = C47710 * C1949;
    const double C63333 = C47710 * C5728;
    const double C63329 = C47710 * C5727;
    const double C63325 = C47710 * C2197;
    const double C65275 = C47710 * C3576;
    const double C68023 = C47710 * C16013;
    const double C68019 = C47710 * C16016;
    const double C68516 = C47710 * C16784;
    const double C139450 = C139449 / C139330;
    const double C94125 = C94103 * C1598;
    const double C94115 = C94103 * C1599;
    const double C94107 = C94103 * C1600;
    const double C94372 = C94103 * C1688;
    const double C94367 = C94103 * C1689;
    const double C94638 = C94103 * C1782;
    const double C94632 = C94103 * C1783;
    const double C94627 = C94103 * C1784;
    const double C94974 = C94103 * C3491;
    const double C94966 = C94103 * C3492;
    const double C95606 = C94103 * C3646;
    const double C95601 = C94103 * C3647;
    const double C95973 = C94103 * C5326;
    const double C95965 = C94103 * C5327;
    const double C96325 = C94103 * C5392;
    const double C98232 = C94103 * C8127;
    const double C98230 = C94103 * C8128;
    const double C102608 = C94103 * C7886;
    const double C102604 = C94103 * C7890;
    const double C102600 = C94103 * C7887;
    const double C102596 = C94103 * C3494;
    const double C102592 = C94103 * C3490;
    const double C105335 = C94103 * C10551;
    const double C106148 = C94103 * C13301;
    const double C106144 = C94103 * C13305;
    const double C106140 = C94103 * C13303;
    const double C116857 = C94103 * C13302;
    const double C109465 =
        (C139598 / C139336 - (0 * be) / C139330) / C139336 + (0 * ae) / C139330;
    const double C124335 = C139598 / C139336 - (0 * be) / C139330;
    const double C14490 = C14480 + C14481;
    const double C61738 = C61731 + C61732;
    const double C30107 = C30088 + C30089;
    const double C30103 = C30080 + C30081;
    const double C30354 = C30345 + C30346;
    const double C30352 = C30340 + C30341;
    const double C32318 = C32312 + C32313;
    const double C38929 = C38912 + C38913;
    const double C38927 = C38908 + C38909;
    const double C42520 = C42514 + C42515;
    const double C42518 = C42510 + C42511;
    const double C43546 = C43538 + C43539;
    const double C508 = C305 * C188;
    const double C6357 = C305 * C5964;
    const double C524 = C520 * C141309;
    const double C6358 = C520 * C5865;
    const double C22553 = C520 * C141468;
    const double C48191 = C520 * C47710;
    const double C7039 = C7033 * C5863;
    const double C48811 = C7033 * C47707;
    const double C56198 = C7033 * C141216;
    const double C69767 = C7033 * C141452;
    const double C56197 = C7032 * C55527;
    const double C739 = C735 + C723;
    const double C7782 = C7779 + C1517;
    const double C141498 = C141467 - C141492;
    const double C14230 = C14204 * C110;
    const double C14214 = C14204 * C115;
    const double C14208 = C14204 * C109;
    const double C14486 = C14204 * C191;
    const double C14476 = C14204 * C190;
    const double C14642 = C218 * C14204;
    const double C14758 = C14204 * C279;
    const double C14756 = C14204 * C278;
    const double C14741 = C14204 * C277;
    const double C14737 = C14204 * C276;
    const double C15104 = C14204 * C822;
    const double C15426 = C14204 * C911;
    const double C15752 = C14204 * C1004;
    const double C15751 = C14204 * C1006;
    const double C15747 = C14204 * C1005;
    const double C16167 = C14204 * C1600;
    const double C16556 = C14204 * C1689;
    const double C16915 = C14204 * C1782;
    const double C16914 = C14204 * C1784;
    const double C16910 = C14204 * C1783;
    const double C18482 = C14204 * C3085;
    const double C18479 = C14204 * C3084;
    const double C19468 = C14204 * C3647;
    const double C19465 = C14204 * C3646;
    const double C61727 = C14204 * C828;
    const double C61721 = C14204 * C823;
    const double C62055 = C14204 * C912;
    const double C64562 = C14204 * C2960;
    const double C64556 = C14204 * C2964;
    const double C65048 = C14204 * C7002;
    const double C65404 = C14204 * C3490;
    const double C65398 = C14204 * C3494;
    const double C66078 = C14204 * C8128;
    const double C14242 = C14228 + C14229;
    const double C14233 = C14210 + C14211;
    const double C14492 = C14484 + C14485;
    const double C14489 = C14478 + C14479;
    const double C16559 = C16554 + C16555;
    const double C61737 = C61729 + C61730;
    const double C61734 = C61723 + C61724;
    const double C64568 = C64560 + C64561;
    const double C64565 = C64554 + C64555;
    const double C65407 = C65396 + C65397;
    const double C141499 = C141476 - C141493;
    const double C94128 = C93949 * C279;
    const double C94124 = C93949 * C285;
    const double C94118 = C93949 * C284;
    const double C94114 = C93949 * C278;
    const double C94110 = C93949 * C283;
    const double C94106 = C93949 * C277;
    const double C94377 = C93949 * C504;
    const double C94371 = C93949 * C503;
    const double C94366 = C93949 * C502;
    const double C94536 = C654 * C93949;
    const double C94636 = C93949 * C716;
    const double C94630 = C93949 * C715;
    const double C94977 = C93949 * C1005;
    const double C94973 = C93949 * C1010;
    const double C94969 = C93949 * C1004;
    const double C95287 = C93949 * C1261;
    const double C95283 = C93949 * C1260;
    const double C95976 = C93949 * C1783;
    const double C95968 = C93949 * C1782;
    const double C96328 = C93949 * C2039;
    const double C96324 = C93949 * C2038;
    const double C102607 = C93949 * C3085;
    const double C102603 = C93949 * C3088;
    const double C102599 = C93949 * C3084;
    const double C102595 = C93949 * C1011;
    const double C102591 = C93949 * C1006;
    const double C102929 = C93949 * C3255;
    const double C102925 = C93949 * C3254;
    const double C102921 = C93949 * C1262;
    const double C103249 = C93949 * C1505;
    const double C105338 = C93949 * C7002;
    const double C105334 = C93949 * C7005;
    const double C105575 = C93949 * C7414;
    const double C106151 = C93949 * C3646;
    const double C106147 = C93949 * C3650;
    const double C106143 = C93949 * C8128;
    const double C106139 = C93949 * C8131;
    const double C106485 = C93949 * C3864;
    const double C116860 = C93949 * C3647;
    const double C122 =
        ((C139646 + C139647 * C139648 * C139652) * C139650 + C139658 + C139658 +
         C139643 *
             (2 * ae * C139655 +
              C139643 *
                  (C139648 * C139652 + C139647 * bs[4] * std::pow(C139641, 4)) *
                  C139650)) /
        C139335;
    const double C916 =
        (C139658 + C139758 * (ae * C139764 + C139643 * C139768)) / C139335;
    const double C1099 =
        (C139658 + C139758 * (ae * C139764 + C139643 * C139849)) / C139335;
    const double C1788 =
        (C139658 + C139801 * (ae * C139807 + C139643 * C139811)) / C139335;
    const double C2125 =
        (C139658 + C139801 * (ae * C139807 + C139643 * C139907)) / C139335;
    const double C208 = C188 * C116;
    const double C295 = C275 * C116;
    const double C5883 = C5871 * C116;
    const double C5984 = C5964 * C116;
    const double C14224 = C14204 * C116;
    const double C55537 = C55527 * C116;
    const double C68690 = C139356 * C116;
    const double C928 = C188 * C827;
    const double C1022 = C275 * C827;
    const double C5876 = C5871 * C827;
    const double C5976 = C5965 * C827;
    const double C6890 = C5964 * C827;
    const double C7160 = C5863 * C827;
    const double C7146 = C141221 * C827;
    const double C15098 = C14204 * C827;
    const double C22181 = C22173 * C827;
    const double C47819 = C47811 * C827;
    const double C48933 = C47707 * C827;
    const double C48923 = C47708 * C827;
    const double C55535 = C55527 * C827;
    const double C56288 = C141216 * C827;
    const double C68683 = C139356 * C827;
    const double C69897 = C141452 * C827;
    const double C69883 = C141221 * C827;
    const double C1706 = C188 * C1605;
    const double C1800 = C275 * C1605;
    const double C7900 = C5871 * C1605;
    const double C8016 = C5964 * C1605;
    const double C14216 = C14205 * C1605;
    const double C16161 = C14204 * C1605;
    const double C16293 = C5863 * C1605;
    const double C16279 = C141221 * C1605;
    const double C30084 = C30076 * C1605;
    const double C56749 = C55527 * C1605;
    const double C62859 = C141216 * C1605;
    const double C70586 = C139356 * C1605;
    const double C79102 = C141452 * C1605;
    const double C79096 = C141221 * C1605;
    const double C94111 = C94103 * C1605;
    const double C96096 = C47707 * C1605;
    const double C96086 = C47708 * C1605;
    const double C7041 = C7035 * C5863;
    const double C51612 = C7035 * C47707;
    const double C56200 = C7035 * C141216;
    const double C69771 = C7035 * C141452;
    const double C10802 = C10798 * C5863;
    const double C52407 = C10798 * C47707;
    const double C58619 = C10798 * C141216;
    const double C73359 = C10798 * C141452;
    const double C18720 = C18716 * C5863;
    const double C98432 = C18716 * C47707;
    const double C112214 = C18716 * C141216;
    const double C128575 = C18716 * C141452;
    const double C16052 = C16046 * C5863;
    const double C101066 = C16046 * C47707;
    const double C110526 = C16046 * C141216;
    const double C126044 = C16046 * C141452;
    const double C140120 = ae * C140119;
    const double C3027 =
        (C139643 * C139764 + C139758 * C140119 + C139758 * C139666 * ae) /
        C139330;
    const double C3573 = (C139801 * C140119) / C139330;
    const double C140238 = ae * C140237;
    const double C5450 =
        (C139643 * C139807 + C139801 * C140237 + C139801 * C139666 * ae) /
        C139330;
    const double C8477 = C141320 * C3865;
    const double C15425 = C14036 * C3865;
    const double C31269 = C141384 * C3865;
    const double C40629 = C141469 * C3865;
    const double C95285 = C141384 * C3865;
    const double C117258 = C93949 * C3865;
    const double C6086 = C6078 + C6079;
    const double C6623 = C6617 + C3422;
    const double C8145 = C8140 + C8141;
    const double C8806 = C8800 + C4080;
    const double C15110 = C15102 + C15103;
    const double C30963 = C30953 + C30954;
    const double C14127 = C14119 + C14120;
    const double C14396 = C14392 + C5567;
    const double C3577 = (C139801 * (C139675 + C139758 * C139779)) / C139335;
    const double C139676 = C139655 + C139674;
    const double C139966 = ae * C139965;
    const double C3495 = (C139801 * C139965) / C139330;
    const double C140030 = ae * C140029;
    const double C5878 = C5871 * C2965;
    const double C5978 = C5966 * C2965;
    const double C6080 = C275 * C2965;
    const double C6888 = C5965 * C2965;
    const double C7168 = C5863 * C2965;
    const double C7154 = C141221 * C2965;
    const double C23058 = C22173 * C2965;
    const double C48696 = C47811 * C2965;
    const double C51697 = C47708 * C2965;
    const double C55534 = C55527 * C2965;
    const double C56292 = C141216 * C2965;
    const double C68685 = C139356 * C2965;
    const double C69905 = C141452 * C2965;
    const double C69891 = C141221 * C2965;
    const double C13315 = C5871 * C5330;
    const double C14121 = C188 * C5330;
    const double C14218 = C14206 * C5330;
    const double C16159 = C14205 * C5330;
    const double C16301 = C5863 * C5330;
    const double C16287 = C141221 * C5330;
    const double C31956 = C30076 * C5330;
    const double C60808 = C55527 * C5330;
    const double C62865 = C141216 * C5330;
    const double C75830 = C139356 * C5330;
    const double C85794 = C141221 * C5330;
    const double C95969 = C94103 * C5330;
    const double C101225 = C47708 * C5330;
    const double C126270 = C141452 * C5330;
    const double C140281 = C139764 + C140279;
    const double C140328 = ae * C140327;
    const double C140582 = C139807 + C140580;
    const double C6749 = C5863 * C832;
    const double C6741 = C141221 * C832;
    const double C48564 = C47707 * C832;
    const double C48557 = C47708 * C832;
    const double C56035 = C141216 * C832;
    const double C69519 = C141452 * C832;
    const double C69511 = C141221 * C832;
    const double C15882 = C5863 * C1610;
    const double C15874 = C141221 * C1610;
    const double C62499 = C141216 * C1610;
    const double C78680 = C141452 * C1610;
    const double C78678 = C141221 * C1610;
    const double C95727 = C47707 * C1610;
    const double C95723 = C47708 * C1610;
    const double C6743 = C5863 * C2968;
    const double C51447 = C47707 * C2968;
    const double C56030 = C141216 * C2968;
    const double C69513 = C141452 * C2968;
    const double C10565 = C5863 * C3498;
    const double C52194 = C47707 * C3498;
    const double C58463 = C141216 * C3498;
    const double C73142 = C141452 * C3498;
    const double C15876 = C5863 * C5333;
    const double C62495 = C141216 * C5333;
    const double C85484 = C141452 * C5333;
    const double C100975 = C47707 * C5333;
    const double C435 = C141309 * C422;
    const double C22456 = C141468 * C422;
    const double C48094 = C47710 * C422;
    const double C1182 = C141309 * C1170;
    const double C6249 = C5866 * C1170;
    const double C7300 = C5865 * C1170;
    const double C22444 = C141358 * C1170;
    const double C23427 = C141468 * C1170;
    const double C48082 = C141358 * C1170;
    const double C49065 = C47710 * C1170;
    const double C1960 = C141309 * C1948;
    const double C8356 = C5865 * C1948;
    const double C24421 = C141468 * C1948;
    const double C50053 = C47710 * C1948;
    const double C19038 = C141309 * C3790;
    const double C40477 = C141358 * C3790;
    const double C43815 = C141468 * C3790;
    const double C62987 = C141358 * C3790;
    const double C65625 = C47710 * C3790;
    const double C103805 = C5866 * C3790;
    const double C106363 = C5865 * C3790;
    const double C16429 = C141309 * C5561;
    const double C47221 = C141468 * C5561;
    const double C62989 = C47710 * C5561;
    const double C108986 = C5865 * C5561;
    const double C730 = C141320 * C717;
    const double C30618 = C141469 * C717;
    const double C94645 = C93949 * C717;
    const double C1516 = C141320 * C1504;
    const double C15748 = C14035 * C1504;
    const double C31592 = C141469 * C1504;
    const double C95605 = C93949 * C1504;
    const double C2294 = C141320 * C2282;
    const double C14745 = C14036 * C2282;
    const double C16911 = C14035 * C2282;
    const double C30606 = C141384 * C2282;
    const double C32651 = C141469 * C2282;
    const double C94633 = C141384 * C2282;
    const double C96664 = C93949 * C2282;
    const double C7771 = C141320 * C3416;
    const double C43123 = C141469 * C3416;
    const double C65047 = C14035 * C3416;
    const double C103253 = C93949 * C3416;
    const double C11455 = C141320 * C4074;
    const double C39765 = C141384 * C4074;
    const double C44365 = C141469 * C4074;
    const double C62382 = C14036 * C4074;
    const double C66077 = C14035 * C4074;
    const double C103251 = C141384 * C4074;
    const double C106808 = C93949 * C4074;
    const double C140508 = ae * C140507;
    const double C13475 =
        (C139758 * C139807 + C139801 * C140507 + C139801 * C140276 * ae) /
        C139330;
    const double C11135 = C141320 * C8470;
    const double C42821 = C141384 * C8470;
    const double C64805 = C14036 * C8470;
    const double C91067 = C141469 * C8470;
    const double C102927 = C141384 * C8470;
    const double C106481 = C93949 * C8470;
    const double C3196 =
        ((C139646 + C139866 * C139648 * C139652) * C139650 + C140116 + C140116 +
         C139758 * (2 * ae * C139764 + C139758 * C139871)) /
        C139335;
    const double C4004 =
        (C140116 + C139801 * (ae * C139807 + C139758 * C139928)) / C139335;
    const double C3201 = C188 * C3026;
    const double C6243 = C5966 * C3026;
    const double C7302 = C5965 * C3026;
    const double C7419 = C275 * C3026;
    const double C10124 = C5964 * C3026;
    const double C23428 = C22173 * C3026;
    const double C49066 = C47811 * C3026;
    const double C56281 = C55527 * C3026;
    const double C64806 = C14204 * C3026;
    const double C3795 = C188 * C3572;
    const double C8358 = C5965 * C3572;
    const double C11028 = C5964 * C3572;
    const double C11136 = C275 * C3572;
    const double C18704 = C141309 * C3572;
    const double C24422 = C22173 * C3572;
    const double C39348 = C30076 * C3572;
    const double C40047 = C141358 * C3572;
    const double C43397 = C141468 * C3572;
    const double C50054 = C47811 * C3572;
    const double C58700 = C55527 * C3572;
    const double C62057 = C14205 * C3572;
    const double C62617 = C141358 * C3572;
    const double C65271 = C47710 * C3572;
    const double C65749 = C14204 * C3572;
    const double C102922 = C94103 * C3572;
    const double C103481 = C5866 * C3572;
    const double C106021 = C5865 * C3572;
    const double C13641 = C5965 * C13393;
    const double C15313 = C188 * C13393;
    const double C18710 = C141309 * C13393;
    const double C29547 = C22173 * C13393;
    const double C43958 = C30076 * C13393;
    const double C46917 = C141358 * C13393;
    const double C55171 = C47811 * C13393;
    const double C61839 = C55527 * C13393;
    const double C62059 = C14206 * C13393;
    const double C62625 = C141358 * C13393;
    const double C65279 = C47710 * C13393;
    const double C65747 = C14205 * C13393;
    const double C106368 = C5964 * C13393;
    const double C106482 = C94103 * C13393;
    const double C108744 = C5866 * C13393;
    const double C136071 = C141468 * C13393;
    const double C645 = C220 * C275;
    const double C14655 = C220 * C14204;
    const double C445 = C441 + C431;
    const double C525 = C521 * C141309;
    const double C6369 = C521 * C5865;
    const double C22557 = C521 * C141468;
    const double C48195 = C521 * C47710;
    const double C648 = C222 * C275;
    const double C446 = C442 + C434;
    const double C526 = C522 * C141309;
    const double C22562 = C522 * C141468;
    const double C48200 = C522 * C47710;
    const double C1427 = C935 * C275;
    const double C1189 = C1186 + C1178;
    const double C1430 = C937 * C275;
    const double C15636 = C937 * C14204;
    const double C1190 = C1187 + C1181;
    const double C2205 = C1713 * C275;
    const double C14653 = C1713 * C14205;
    const double C16037 = C1713 * C5871;
    const double C30514 = C1713 * C30076;
    const double C94541 = C1713 * C94103;
    const double C126049 = C1713 * C139356;
    const double C1967 = C1964 + C1956;
    const double C2208 = C1715 * C275;
    const double C14644 = C1715 * C14205;
    const double C16023 = C1715 * C5871;
    const double C16797 = C1715 * C14204;
    const double C30510 = C1715 * C30076;
    const double C94537 = C1715 * C94103;
    const double C110529 = C1715 * C55527;
    const double C126041 = C1715 * C139356;
    const double C1968 = C1965 + C1959;
    const double C2057 = C2054 * C141309;
    const double C8479 = C2054 * C5865;
    const double C24543 = C2054 * C141468;
    const double C50174 = C2054 * C47710;
    const double C16444 = C16441 + C5566;
    const double C110525 = C16045 * C55527;
    const double C21673 = C21672 + C16434;
    const double C110527 = C21415 * C55527;
    const double C5781 =
        ((C139646 + C139940 * C139648 * C139652) * C139650 + C140234 + C140234 +
         C139801 * (2 * ae * C139807 + C139801 * C139945)) /
        C139335;
    const double C5786 = C275 * C5449;
    const double C14739 = C14206 * C5449;
    const double C16789 = C188 * C5449;
    const double C16913 = C14205 * C5449;
    const double C21990 = C14204 * C5449;
    const double C32652 = C30076 * C5449;
    const double C63216 = C55527 * C5449;
    const double C96665 = C94103 * C5449;
    const double C109225 = C5964 * C5449;
    const double C1279 = C1276 * C141309;
    const double C6360 = C1276 * C5866;
    const double C7426 = C1276 * C5865;
    const double C22555 = C1276 * C141358;
    const double C23548 = C1276 * C141468;
    const double C48193 = C1276 * C141358;
    const double C49186 = C1276 * C47710;
    const double C511 = C307 * C188;
    const double C6370 = C307 * C5964;
    const double C659 = C655 * C141320;
    const double C14654 = C655 * C14035;
    const double C30513 = C655 * C141469;
    const double C94540 = C655 * C93949;
    const double C740 = C736 + C726;
    const double C514 = C309 * C188;
    const double C660 = C656 * C141320;
    const double C30518 = C656 * C141469;
    const double C94545 = C656 * C93949;
    const double C741 = C737 + C729;
    const double C1270 = C1029 * C188;
    const double C6368 = C1029 * C5965;
    const double C7026 = C1029 * C5871;
    const double C22558 = C1029 * C22173;
    const double C48196 = C1029 * C47811;
    const double C69776 = C1029 * C139356;
    const double C1523 = C1520 + C1512;
    const double C1273 = C1031 * C188;
    const double C6359 = C1031 * C5965;
    const double C7012 = C1031 * C5871;
    const double C7427 = C1031 * C5964;
    const double C22554 = C1031 * C22173;
    const double C48192 = C1031 * C47811;
    const double C56203 = C1031 * C55527;
    const double C69768 = C1031 * C139356;
    const double C1436 = C1433 * C141320;
    const double C15635 = C1433 * C14035;
    const double C31479 = C1433 * C141469;
    const double C95494 = C1433 * C93949;
    const double C1524 = C1521 + C1515;
    const double C2048 = C1807 * C188;
    const double C2301 = C2298 + C2290;
    const double C2051 = C1809 * C188;
    const double C8480 = C1809 * C5964;
    const double C2214 = C2211 * C141320;
    const double C14645 = C2211 * C14036;
    const double C16796 = C2211 * C14035;
    const double C30511 = C2211 * C141384;
    const double C32540 = C2211 * C141469;
    const double C94538 = C2211 * C141384;
    const double C96553 = C2211 * C93949;
    const double C2302 = C2299 + C2293;
    const double C7783 = C7780 + C3421;
    const double C56199 = C7034 * C55527;
    const double C11461 = C11459 + C4079;
    const double C58620 = C10799 * C55527;
    const double C10452 = C10451 + C7777;
    const double C56201 = C9954 * C55527;
    const double C11460 = C11458 + C8803;
    const double C58618 = C10797 * C55527;
    const double C139712 = C139698 + C139702;
    const double C139704 = C139668 + C139701;
    const double C139963 = ae * C139961;
    const double C140148 = C139801 * C139961;
    const double C140250 = 2 * C139961;
    const double C13306 = (C139965 + C139961 * C139940) / C139330;
    const double C140027 = ae * C140025;
    const double C140540 = 2 * C140025;
    const double C140090 = C139673 + C140089;
    const double C140192 = C139673 + C140191;
    const double C140728 = C140720 + C140726;
    const double C140738 = C140734 + C140737;
    const double C68105 =
        (3 * (C140600 + ae * C140875 + C139801 * C140880) +
         ae * (2 * C140875 + C139801 * C140881) +
         C139801 *
             (2 * C140880 + ae * C140881 +
              C139801 * (C140876 + ae * C139801 * C140877 +
                         C139801 * (ae * C140877 + C139801 * C139758 *
                                                       std::pow(C139649, 7) *
                                                       bs[7] * C139805)))) /
        C139335;
    const double C68432 =
        (3 * (C140610 + ae * C140875 + C139801 * C140892) +
         ae * (2 * C140875 + C139801 * C140881) +
         C139801 *
             (2 * C140892 + ae * C140881 +
              C139801 * (C140890 + ae * C139801 * C140877 +
                         C139801 * (ae * C140877 + C139801 * C139758 *
                                                       std::pow(C139649, 7) *
                                                       bs[7] * C139904)))) /
        C139335;
    const double C65395 = C14037 * C18822;
    const double C136181 = C124182 * C18822;
    const double C65854 = C141216 * C19250;
    const double C140932 = C140924 + C140930;
    const double C140945 = C140941 + C140944;
    const double C58614 = C141320 * C10781;
    const double C89930 = C141384 * C10781;
    const double C105332 = C141384 * C10781;
    const double C58693 = C141216 * C10901;
    const double C58919 = C141216 * C11237;
    const double C64553 = C14037 * C13481;
    const double C90735 = C141384 * C13481;
    const double C106137 = C141384 * C13481;
    const double C135375 = C124182 * C13481;
    const double C64886 = C141216 * C13799;
    const double C56033 = C55527 * C9770;
    const double C58049 = C275 * C9770;
    const double C58111 = C141216 * C9770;
    const double C56745 = C55527 * C10553;
    const double C58613 = C275 * C10553;
    const double C58695 = C141216 * C10553;
    const double C89929 = C30076 * C10553;
    const double C105331 = C94103 * C10553;
    const double C106030 = C5966 * C10553;
    const double C60316 = C55527 * C13307;
    const double C64552 = C14206 * C13307;
    const double C64647 = C141216 * C13307;
    const double C65284 = C47811 * C13307;
    const double C90734 = C30076 * C13307;
    const double C106136 = C94103 * C13307;
    const double C108735 = C5966 * C13307;
    const double C136076 = C22173 * C13307;
    const double C65165 = C55527 * C65158;
    const double C67933 = C55527 * C21310;
    const double C114010 = C188 * C21310;
    const double C114126 = C141216 * C21310;
    const double C139703 = C139685 + C139700;
    const double C3499 =
        (2 * ae * C139801 * C139758 * C139668 + C139643 * C139801 * C139959) /
        C139335;
    const double C13309 = (C139758 * C139672 + C139959 * C139940) / C139335;
    const double C6753 = C5863 * C2969;
    const double C6745 = C141221 * C2969;
    const double C51445 = C47708 * C2969;
    const double C56037 = C141216 * C2969;
    const double C69523 = C141452 * C2969;
    const double C69515 = C141221 * C2969;
    const double C15886 = C5863 * C5334;
    const double C15878 = C141221 * C5334;
    const double C62501 = C141216 * C5334;
    const double C85482 = C141221 * C5334;
    const double C100973 = C47708 * C5334;
    const double C125930 = C141452 * C5334;
    const double C9779 = C5863 * C6735;
    const double C56032 = C141216 * C6735;
    const double C72398 = C141452 * C6735;
    const double C10561 = C5863 * C7893;
    const double C58461 = C141216 * C7893;
    const double C73138 = C141452 * C7893;
    const double C21319 = C5863 * C15868;
    const double C67932 = C141216 * C15868;
    const double C131120 = C141452 * C15868;
    const double C139737 = C139719 + C139734;
    const double C140287 = C140285 + C139733;
    const double C140588 = C140586 + C139733;
    const double C15420 =
        (ae * (C139823 + C139801 * (C139801 * C139837 + C139733) +
               C139801 * C139730 * ae) +
         C139758 *
             (C139899 + ae * C139801 * C139794 +
              C139801 * (ae * C139794 +
                         C139801 * (C139897 + std::pow(C139649, 7) * bs[7] *
                                                  C139888 * C139647)))) /
        C139335;
    const double C140288 = C140286 * ae;
    const double C14876 = C139758 * C139694 + C140286 * C139940;
    const double C140589 = C140587 * ae;
    const double C140399 = ae * C140396;
    const double C140398 = C139758 * C140396;
    const double C140452 = C139801 * C140396;
    const double C140490 = C140396 * C139940;
    const double C140710 = ae * C140705;
    const double C140708 = C139801 * C140705;
    const double C140397 = C140394 * ae;
    const double C10780 = (C139801 * (2 * C140414 + C139758 * C140420) +
                           (2 * C140266 + C139758 * C140394) * ae) /
                          C139330;
    const double C9769 = 3 * (C139666 + C139689 * C139866) +
                         C139758 * (2 * C140266 + C139758 * C140394);
    const double C10552 = C139801 * (2 * C140266 + C139758 * C140394);
    const double C13304 = C139666 + C139689 * C139866 + C140394 * C139940;
    const double C140633 = C140631 + C140393;
    const double C140632 = C140630 * ae;
    const double C140709 = C140707 * ae;
    const double C21309 = 3 * (C139666 + C139689 * C139940) +
                          C139801 * (2 * C140567 + C139801 * C140707);
    const double C139743 = C139692 + C139739;
    const double C139979 = ae * C139974;
    const double C140153 = C139801 * C139974;
    const double C140522 = C139974 * C139940;
    const double C140043 = ae * C140038;
    const double C140098 = C139699 + C140095;
    const double C140200 = C139699 + C140197;
    const double C140760 = C139776 + C140755;
    const double C140814 = ae * C140809;
    const double C140837 = C140371 + C140834;
    const double C140973 = C139819 + C140969;
    const double C139742 = C139721 + C139738;
    const double C139976 = C139643 * C139971;
    const double C140151 = C139801 * C139971;
    const double C10556 =
        (2 * ae * C139801 *
             (2 * C139970 + C139758 * (C139692 + C139728 * C139866)) +
         C139643 * C139801 *
             (2 * C139971 +
              C139758 * (C139735 + (C139715 * C139716 +
                                    C139647 * bs[7] * std::pow(C139649, 7)) *
                                       C139650 * C139866))) /
        C139335;
    const double C13310 = (2 * ae * (C140347 + C139970 * C139940) +
                           C139643 * (C139959 + C139971 * C139940)) /
                          C139335;
    const double C18586 =
        (2 * C139801 * C139959 + C139801 * (C139959 + C139971 * C139940)) /
        C139335;
    const double C140040 = C139643 * C140035;
    const double C140096 = C139698 + C140093;
    const double C140198 = C139698 + C140195;
    const double C139883 = C139876 + C139882;
    const double C140391 = C139758 * C140386;
    const double C140450 = C139801 * C140386;
    const double C140750 = C140741 + C140742;
    const double C140811 = C139758 * C140806;
    const double C140835 = C139876 + C140832;
    const double C139957 = C139950 + C139956;
    const double C140628 = C139758 * C140432;
    const double C140699 = C139801 * C140432;
    const double C11450 =
        (2 * ae * (2 * C140414 + C139758 * C140420) +
         C139801 * (2 * C139758 * C140432 +
                    C139758 * (C140432 +
                               C139643 *
                                   (C139715 * C139716 +
                                    C139940 * bs[7] * std::pow(C139649, 7)) *
                                   C139650 * C139866))) /
        C139335;
    const double C140796 = C139950 + C140795;
    const double C140903 = C139801 * C140898;
    const double C140964 = C140954 + C140955;
    const double C140761 = C140748 + C140757;
    const double C140865 = C140863 + C140756;
    const double C140866 = C140864 * ae;
    const double C140911 = ae * C140908;
    const double C140910 = C139801 * C140908;
    const double C140909 = C140906 * ae;
    const double C67927 = 3 * (C140276 + C140368 * C139940) +
                          C139801 * (2 * C140618 + C139801 * C140906);
    const double C140967 = C140961 + C140962;
    const double C140123 = C140122 + C139697;
    const double C2044 = C141320 * C2037;
    const double C30348 = C141384 * C2037;
    const double C94375 = C141384 * C2037;
    const double C2201 = C141309 * C2194;
    const double C14483 = C14037 * C5621;
    const double C32309 = C141384 * C5621;
    const double C96322 = C141384 * C5621;
    const double C124602 = C124182 * C5621;
    const double C14650 = C141309 * C5729;
    const double C217 = C141309 * C193;
    const double C437 = C188 * C193;
    const double C517 = C275 * C193;
    const double C923 = C141309 * C909;
    const double C1175 = C188 * C909;
    const double C1265 = C275 * C909;
    const double C6263 = C5965 * C909;
    const double C22196 = C141358 * C909;
    const double C22452 = C22173 * C909;
    const double C47834 = C141358 * C909;
    const double C48090 = C47811 * C909;
    const double C1701 = C141309 * C1687;
    const double C1953 = C188 * C1687;
    const double C2043 = C275 * C1687;
    const double C30347 = C30076 * C1687;
    const double C94374 = C94103 * C1687;
    const double C5568 = C188 * C5393;
    const double C14126 = C141309 * C5393;
    const double C14482 = C14206 * C5393;
    const double C16306 = C5871 * C5393;
    const double C32308 = C30076 * C5393;
    const double C96321 = C94103 * C5393;
    const double C126275 = C139356 * C5393;
    const double C16439 = C188 * C16014;
    const double C140354 = C139702 + C140353;
    const double C140362 = C139702 + C140361;
    const double C21571 =
        (3 * (C139854 + C139860 * C139940) +
         C139801 * (2 * C140442 +
                    C139801 * (C139860 +
                               (ae * C139789 + C139643 * std::pow(C139649, 7) *
                                                   bs[7] * C139846) *
                                   C139940))) /
        C139335;
    const double C139797 = C139790 + C139795;
    const double C139862 = C139856 + C139861;
    const double C13721 =
        (ae * (C139814 + C139801 * (C139801 * C139825 + C139693) +
               C139801 * C139689 * ae) +
         C139758 * (C140295 + ae * C139801 * C139782 + C139801 * C140460)) /
        C139335;
    const double C13722 =
        (C140295 + ae * C139801 * C139782 + C139801 * C140460 +
         ae * (C140414 + C139801 * (C139801 * C139758 * C140416 + C140393) +
               C139801 * C140389 * ae) +
         C139758 *
             (ae * (C139825 + C139801 * (C139801 * C140416 + C139729) +
                    C139801 * C139725 * ae) +
              C139758 * (C140415 + ae * C139801 * C140388 +
                         C139801 * (ae * C140388 + C139801 * C139643 *
                                                       std::pow(C139649, 7) *
                                                       bs[7] * C139888)))) /
        C139335;
    const double C16548 =
        (2 * (ae * C139771 + C139801 * C140295) +
         ae * (C139771 + C139782 * C139940) +
         C139801 * (C140295 + ae * C139801 * C139782 + C139801 * C140460)) /
        C139335;
    const double C21750 =
        (3 * (C140295 + ae * C140661 + C139801 * C140460) +
         ae * (2 * C140661 + C139801 * C140663) +
         C139801 *
             (2 * C140460 + ae * C140663 +
              C139801 * (C140415 + ae * C139801 * C140388 +
                         C139801 * (ae * C140388 + C139801 * C139643 *
                                                       std::pow(C139649, 7) *
                                                       bs[7] * C139888)))) /
        C139335;
    const double C21909 =
        (3 * (C140302 + ae * C140661 + C139801 * C140675) +
         ae * (2 * C140661 + C139801 * C140663) +
         C139801 *
             (2 * C140675 + ae * C140663 +
              C139801 * (C140427 + ae * C139801 * C140388 +
                         C139801 * (ae * C140388 + C139801 * C139643 *
                                                       std::pow(C139649, 7) *
                                                       bs[7] * C139925)))) /
        C139335;
    const double C16792 = C141309 * C16783;
    const double C140270 = ae * C140267;
    const double C140269 = C139758 * C140267;
    const double C140324 = C139801 * C140267;
    const double C140387 = 2 * C140267;
    const double C13395 = (C140119 + C140267 * C139940) / C139330;
    const double C16048 = C16033 + C16034;
    const double C16442 = C16431 + C16432;
    const double C140740 = C139876 + C140376;
    const double C140377 = C139769 + C140374;
    const double C140448 = ae * C140446;
    const double C140855 = 2 * C140446;
    const double C140486 = C140277 + C140485;
    const double C21670 = C188 * C21401;
    const double C114013 = C141309 * C21401;
    const double C114123 = C55527 * C21401;
    const double C140843 = C140841 + C140842;
    const double C140951 = C140947 + C140950;
    const double C215 = C141309 * C199;
    const double C1703 = C141309 * C1693;
    const double C24089 = C141468 * C1693;
    const double C49727 = C47710 * C1693;
    const double C14122 = C141309 * C5396;
    const double C40057 = C141468 * C5396;
    const double C62635 = C47710 * C5396;
    const double C16032 = C141309 * C16015;
    const double C90629 = C68674 * C10679;
    const double C106031 = C5867 * C10679;
    const double C18712 = C141309 * C13397;
    const double C46913 = C141358 * C13397;
    const double C62629 = C141358 * C13397;
    const double C65283 = C47710 * C13397;
    const double C108738 = C5866 * C13397;
    const double C136075 = C141468 * C13397;
    const double C65285 = C141358 * C13398;
    const double C93306 = C68674 * C13398;
    const double C108736 = C5867 * C13398;
    const double C136077 = C141358 * C13398;
    const double C68017 = C141358 * C18700;
    const double C112220 = C141309 * C18700;
    const double C138760 = C141358 * C18700;
    const double C21417 = C21414 * C5863;
    const double C110528 = C21414 * C141216;
    const double C131206 = C21414 * C141452;
    const double C140241 = C140240 + C139697;
    const double C1266 = C141320 * C1259;
    const double C1423 = C141309 * C1416;
    const double C22725 = C141358 * C1416;
    const double C48363 = C141358 * C1416;
    const double C6365 = C141320 * C3256;
    const double C6530 = C5867 * C3364;
    const double C23765 = C141358 * C3364;
    const double C49403 = C141358 * C3364;
    const double C69319 = C68674 * C3364;
    const double C304 = C141320 * C280;
    const double C651 = C188 * C280;
    const double C732 = C275 * C280;
    const double C1017 = C141320 * C1003;
    const double C1422 = C188 * C1003;
    const double C1509 = C275 * C1003;
    const double C22724 = C22173 * C1003;
    const double C48362 = C47811 * C1003;
    const double C1795 = C141320 * C1781;
    const double C2200 = C188 * C1781;
    const double C2287 = C275 * C1781;
    const double C14759 = C14205 * C1781;
    const double C30099 = C141384 * C1781;
    const double C30614 = C30076 * C1781;
    const double C94126 = C141384 * C1781;
    const double C94641 = C94103 * C1781;
    const double C3423 = C275 * C3086;
    const double C6085 = C141320 * C3086;
    const double C6529 = C5966 * C3086;
    const double C7547 = C5871 * C3086;
    const double C23764 = C22173 * C3086;
    const double C49402 = C47811 * C3086;
    const double C70266 = C139356 * C3086;
    const double C4081 = C275 * C3648;
    const double C15753 = C14205 * C3648;
    const double C24211 = C141320 * C3648;
    const double C24743 = C22173 * C3648;
    const double C30946 = C141384 * C3648;
    const double C31472 = C188 * C3648;
    const double C31582 = C30076 * C3648;
    const double C39492 = C5871 * C3648;
    const double C50372 = C47811 * C3648;
    const double C78275 = C139356 * C3648;
    const double C94967 = C141384 * C3648;
    const double C95595 = C94103 * C3648;
    const double C7778 = C275 * C7003;
    const double C8804 = C275 * C8129;
    const double C34222 = C30076 * C8129;
    const double C98234 = C94103 * C8129;
    const double C140651 = C139702 + C140650;
    const double C140669 = C139702 + C140668;
    const double C140895 = C140376 + C140894;
    const double C139840 = C139833 + C139838;
    const double C139920 = C139914 + C139919;
    const double C10204 =
        (3 * (C140295 + ae * C140414 + C139758 * C140419) +
         ae * (2 * C140414 + C139758 * C140420) +
         C139758 *
             (2 * C140419 + ae * C140420 +
              C139758 * (C140415 + ae * C139758 * C140416 +
                         C139758 * (ae * C140416 + C139758 * C139643 *
                                                       std::pow(C139649, 7) *
                                                       bs[7] * C139888)))) /
        C139335;
    const double C10369 =
        (3 * (C140302 + ae * C140414 + C139758 * C140429) +
         ae * (2 * C140414 + C139758 * C140420) +
         C139758 *
             (2 * C140429 + ae * C140420 +
              C139758 * (C140427 + ae * C139758 * C140416 +
                         C139758 * (ae * C140416 + C139758 * C139643 *
                                                       std::pow(C139649, 7) *
                                                       bs[7] * C139925)))) /
        C139335;
    const double C7422 = C141320 * C7413;
    const double C7659 = C5867 * C7654;
    const double C70375 = C68674 * C7654;
    const double C140515 = C140514 + C140268;
    const double C140571 = ae * C140568;
    const double C140570 = C139801 * C140568;
    const double C140700 = 2 * C140568;
    const double C19151 =
        (ae * (2 * C140568 +
               C139801 * (C139825 + C139801 * (C139801 * C140416 + C139729) +
                          C139801 * C139725 * ae) +
               (C139689 + C139725 * C139940) * ae) +
         C139758 *
             (2 * C140460 + ae * (C139782 + C140388 * C139940) +
              C139801 * (C140415 + ae * C139801 * C140388 +
                         C139801 * (ae * C140388 + C139801 * C139643 *
                                                       std::pow(C139649, 7) *
                                                       bs[7] * C139888)))) /
        C139335;
    const double C7037 = C7022 + C7023;
    const double C7781 = C7772 + C7773;
    const double C8143 = C8136 + C8137;
    const double C8805 = C8797 + C8798;
    const double C38932 = C38920 + C38921;
    const double C140511 = C140510 + C140375;
    const double C10449 = C275 * C9940;
    const double C58052 = C141320 * C9940;
    const double C58276 = C55527 * C9940;
    const double C11456 = C275 * C10779;
    const double C43125 = C30076 * C10779;
    const double C58616 = C141320 * C10779;
    const double C58918 = C55527 * C10779;
    const double C65049 = C14205 * C10779;
    const double C89934 = C141384 * C10779;
    const double C103256 = C94103 * C10779;
    const double C105336 = C141384 * C10779;
    const double C106698 = C5966 * C10779;
    const double C140623 = ae * C140621;
    const double C140622 = C139801 * C140621;
    const double C140899 = 2 * C140621;
    const double C140783 = C140778 + C140781;
    const double C140793 = C140789 + C140792;
    const double C140821 = C140689 + C140820;
    const double C140953 = C139950 + C140689;
    const double C140690 = C139812 + C140687;
    const double C302 = C141320 * C286;
    const double C1019 = C141320 * C1009;
    const double C30944 = C141469 * C1009;
    const double C94965 = C93949 * C1009;
    const double C6081 = C141320 * C3089;
    const double C38919 = C141469 * C3089;
    const double C102611 = C93949 * C3089;
    const double C7021 = C141320 * C7004;
    const double C9956 = C9953 * C5863;
    const double C56202 = C9953 * C141216;
    const double C72559 = C9953 * C141452;
    const double C10800 = C10796 * C5863;
    const double C58617 = C10796 * C141216;
    const double C73355 = C10796 * C141452;
    const double C16299 = C141221 * C1876;
    const double C32081 = C22071 * C1876;
    const double C79108 = C141221 * C1876;
    const double C96104 = C47708 * C1876;
    const double C96094 = C47709 * C1876;
    const double C16305 = C5863 * C5508;
    const double C16291 = C141221 * C5508;
    const double C62867 = C141216 * C5508;
    const double C85790 = C141221 * C5508;
    const double C101219 = C47708 * C5508;
    const double C126274 = C141452 * C5508;
    const double C21576 = C141221 * C16272;
    const double C110680 = C141216 * C16272;
    const double C131361 = C141221 * C16272;
    const double C58109 = C141216 * C10031;
    const double C13637 = (2 * ae * (C139771 + C139782 * C139940) +
                           C139758 * (C140264 + C140386 * C139940)) /
                          C139335;
    const double C16421 =
        (2 * C139801 * C140264 + C139801 * (C140264 + C140386 * C139940)) /
        C139335;
    const double C140370 = C140364 + C140365;
    const double C19034 =
        (2 * ae *
             (2 * C139801 * C139769 + C139801 * (C139769 + C139776 * C139940)) +
         C139758 * (2 * C140444 + C139801 * (C139876 + C139881 * C139940))) /
        C139335;
    const double C21663 =
        (3 * (C139871 + C139876 * C139940) +
         C139801 * (2 * C140444 + C139801 * (C139876 + C139881 * C139940))) /
        C139335;
    const double C438 = C141309 * C423;
    const double C1179 = C141309 * C1169;
    const double C6258 = C5866 * C1169;
    const double C22450 = C141358 * C1169;
    const double C23421 = C141468 * C1169;
    const double C48088 = C141358 * C1169;
    const double C49059 = C47710 * C1169;
    const double C1957 = C141309 * C1947;
    const double C24415 = C141468 * C1947;
    const double C50047 = C47710 * C1947;
    const double C8353 = C5866 * C3791;
    const double C15315 = C141309 * C3791;
    const double C24418 = C141358 * C3791;
    const double C39209 = C141468 * C3791;
    const double C50050 = C141358 * C3791;
    const double C78006 = C47710 * C3791;
    const double C14393 = C141309 * C5562;
    const double C40482 = C141468 * C5562;
    const double C62995 = C47710 * C5562;
    const double C19041 = C141309 * C13635;
    const double C47219 = C141358 * C13635;
    const double C62991 = C141358 * C13635;
    const double C65629 = C47710 * C13635;
    const double C108984 = C5866 * C13635;
    const double C136403 = C141468 * C13635;
    const double C21669 = C141309 * C16422;
    const double C68274 = C47710 * C16422;
    const double C139007 = C141468 * C16422;
    const double C58221 = C141320 * C10203;
    const double C43959 = C141384 * C13719;
    const double C62060 = C14037 * C13719;
    const double C65748 = C14036 * C13719;
    const double C106483 = C141384 * C13719;
    const double C133044 = C124182 * C13719;
    const double C64803 = C14037 * C13720;
    const double C91065 = C141384 * C13720;
    const double C106479 = C141384 * C13720;
    const double C135617 = C124182 * C13720;
    const double C65746 = C14037 * C19150;
    const double C136513 = C124182 * C19150;
    const double C1278 = C1275 * C141309;
    const double C6367 = C1275 * C5866;
    const double C22559 = C1275 * C141358;
    const double C23544 = C1275 * C141468;
    const double C48197 = C1275 * C141358;
    const double C49182 = C1275 * C47710;
    const double C2056 = C2053 * C141309;
    const double C24539 = C2053 * C141468;
    const double C50170 = C2053 * C47710;
    const double C7544 = C141221 * C1346;
    const double C23653 = C22071 * C1346;
    const double C49295 = C47708 * C1346;
    const double C49291 = C47709 * C1346;
    const double C70263 = C141221 * C1346;
    const double C7546 = C5863 * C3309;
    const double C7540 = C141221 * C3309;
    const double C51937 = C47708 * C3309;
    const double C56531 = C141216 * C3309;
    const double C70265 = C141452 * C3309;
    const double C70259 = C141221 * C3309;
    const double C10288 = C141221 * C7529;
    const double C56534 = C141216 * C7529;
    const double C72882 = C141221 * C7529;
    const double C114292 = C141216 * C21825;
    const double C114346 = C141309 * C21908;
    const double C1435 = C1432 * C141320;
    const double C31475 = C1432 * C141469;
    const double C95490 = C1432 * C93949;
    const double C2213 = C2210 * C141320;
    const double C14652 = C2210 * C14036;
    const double C30515 = C2210 * C141384;
    const double C32536 = C2210 * C141469;
    const double C94542 = C2210 * C141384;
    const double C96549 = C2210 * C93949;
    const double C7764 = (2 * C139758 * C140306 +
                          C139758 * (C140306 + C139643 * C139955 * C139866)) /
                         C139335;
    const double C8793 = (2 * ae * (C139814 + C139825 * C139866) +
                          C139801 * (C140306 + C139643 * C139955 * C139866)) /
                         C139335;
    const double C10445 =
        (3 * (C140306 + C140432 * C139866) +
         C139758 * (2 * C139758 * C140432 +
                    C139758 * (C140432 +
                               C139643 *
                                   (C139715 * C139716 +
                                    C139940 * bs[7] * std::pow(C139649, 7)) *
                                   C139650 * C139866))) /
        C139335;
    const double C140683 = C140677 + C140678;
    const double C733 = C141320 * C718;
    const double C1513 = C141320 * C1503;
    const double C31586 = C141469 * C1503;
    const double C95599 = C93949 * C1503;
    const double C2291 = C141320 * C2281;
    const double C14754 = C14036 * C2281;
    const double C30612 = C141384 * C2281;
    const double C32645 = C141469 * C2281;
    const double C94639 = C141384 * C2281;
    const double C96658 = C93949 * C2281;
    const double C6618 = C141320 * C3417;
    const double C39770 = C141469 * C3417;
    const double C103259 = C93949 * C3417;
    const double C8801 = C141320 * C4075;
    const double C15745 = C14036 * C4075;
    const double C31589 = C141384 * C4075;
    const double C41039 = C141469 * C4075;
    const double C95602 = C141384 * C4075;
    const double C117654 = C93949 * C4075;
    const double C10448 = C141320 * C7765;
    const double C90409 = C141469 * C7765;
    const double C105811 = C93949 * C7765;
    const double C11453 = C141320 * C8794;
    const double C43121 = C141384 * C8794;
    const double C65045 = C14036 * C8794;
    const double C91384 = C141469 * C8794;
    const double C103255 = C141384 * C8794;
    const double C106804 = C93949 * C8794;
    const double C58384 = C141320 * C10444;
    const double C59068 = C141320 * C11449;
    const double C90407 = C141384 * C11449;
    const double C105809 = C141384 * C11449;
    const double C24537 = C141320 * C3866;
    const double C31265 = C141384 * C3866;
    const double C95281 = C141384 * C3866;
    const double C8474 = C141320 * C8469;
    const double C39352 = C141384 * C8469;
    const double C102931 = C141384 * C8469;
    const double C58849 = C141320 * C11131;
    const double C90171 = C141384 * C11131;
    const double C105573 = C141384 * C11131;
    const double C58611 =
        (ae * (3 * C140351 + C139758 * C140729) +
         C139801 *
             (3 * C140732 +
              C139758 * (2 * C139758 * C139830 +
                         C139758 * (C139830 + std::pow(C139649, 7) * bs[7] *
                                                  C139805 * C139866)))) /
        C139335;
    const double C58690 =
        (3 * (C140440 + ae * C139801 * C139970 + C139758 * C140803) +
         ae * C139801 * C140729 +
         C139758 *
             (2 * C140803 + ae * C139801 * C140725 +
              C139758 * (C140801 + ae * C139801 * C139758 * C139728 +
                         C139758 * (ae * C139801 * C139728 +
                                    C139758 * C139801 * std::pow(C139649, 7) *
                                        bs[7] * C139846)))) /
        C139335;
    const double C58916 =
        (ae * (3 * C140351 + C139758 * C140729) +
         C139801 *
             (3 * C140787 +
              C139758 * (2 * C139758 * C139916 +
                         C139758 * (C139916 + std::pow(C139649, 7) * bs[7] *
                                                  C139904 * C139866)))) /
        C139335;
    const double C60420 =
        (2 * C140600 + C139758 * C140732 + ae * C139801 * C140729 +
         C139801 *
             (ae * C140729 +
              C139801 * (2 * C139758 * C139830 +
                         C139758 * (C139830 + std::pow(C139649, 7) * bs[7] *
                                                  C139805 * C139866)))) /
        C139335;
    const double C60628 =
        (2 * C140610 + C139758 * C140787 + ae * C139801 * C140729 +
         C139801 *
             (ae * C140729 +
              C139801 * (2 * C139758 * C139916 +
                         C139758 * (C139916 + std::pow(C139649, 7) * bs[7] *
                                                  C139904 * C139866)))) /
        C139335;
    const double C57933 = (4 * (2 * C140347 + C139758 * C140351) +
                           C139758 * (3 * C140351 + C139758 * C140729)) /
                          C139330;
    const double C58455 =
        (C139801 * (3 * C140351 + C139758 * C140729)) / C139330;
    const double C60311 =
        (2 * C140347 + C139758 * C140351 + C140729 * C139940) / C139330;
    const double C67934 = C55527 * C67928;
    const double C113947 = (4 * (2 * C140644 + C139801 * C140648) +
                            C139801 * (3 * C140648 + C139801 * C140933)) /
                           C139330;
    const double C140126 = C139758 * C139798;
    const double C2041 =
        (ae * (3 * C139780 + C139643 * C139798) +
         C139801 *
             (3 * C139899 +
              C139643 * (2 * C139643 * C139897 +
                         C139643 * (C139897 + std::pow(C139649, 7) * bs[7] *
                                                  C139888 * C139647)))) /
        C139335;
    const double C2198 =
        (ae * (3 * C139780 + C139643 * C139798) +
         C139801 *
             (3 * C139936 +
              C139643 * (2 * C139643 * C139934 +
                         C139643 * (C139934 + std::pow(C139649, 7) * bs[7] *
                                                  C139925 * C139647)))) /
        C139335;
    const double C3793 =
        (2 * ae * C139801 * C139798 +
         C139758 * C139801 *
             (2 * C139643 * C139881 +
              C139643 * (C139881 + (C139715 * C139716 +
                                    C139866 * bs[7] * std::pow(C139649, 7)) *
                                       C139650 * C139647))) /
        C139335;
    const double C5622 =
        (2 * C139643 * C139894 + C139643 * C139899 + ae * C139801 * C139798 +
         C139801 *
             (ae * C139798 +
              C139801 * (2 * C139643 * C139897 +
                         C139643 * (C139897 + std::pow(C139649, 7) * bs[7] *
                                                  C139888 * C139647)))) /
        C139335;
    const double C5730 =
        (2 * C139643 * C139931 + C139643 * C139936 + ae * C139801 * C139798 +
         C139801 *
             (ae * C139798 +
              C139801 * (2 * C139643 * C139934 +
                         C139643 * (C139934 + std::pow(C139649, 7) * bs[7] *
                                                  C139925 * C139647)))) /
        C139335;
    const double C194 = (4 * (2 * C139771 + C139643 * C139780) +
                         C139643 * (3 * C139780 + C139643 * C139798)) /
                        C139330;
    const double C1691 =
        (C139801 * (3 * C139780 + C139643 * C139798)) / C139330;
    const double C5394 =
        (2 * C139771 + C139643 * C139780 + C139798 * C139940) / C139330;
    const double C21671 = C188 * C21402;
    const double C114005 = (4 * (2 * C140657 + C139801 * C140659) +
                            C139801 * (3 * C140659 + C139801 * C140939)) /
                           C139330;
    const double C140244 = C139801 * C139841;
    const double C1263 =
        (ae * (3 * C139823 + C139643 * C139841) +
         C139758 *
             (3 * C139899 +
              C139643 * (2 * C139643 * C139897 +
                         C139643 * (C139897 + std::pow(C139649, 7) * bs[7] *
                                                  C139888 * C139647)))) /
        C139335;
    const double C1420 =
        (ae * (3 * C139823 + C139643 * C139841) +
         C139758 *
             (3 * C139936 +
              C139643 * (2 * C139643 * C139934 +
                         C139643 * (C139934 + std::pow(C139649, 7) * bs[7] *
                                                  C139925 * C139647)))) /
        C139335;
    const double C3257 =
        (2 * C139643 * C139894 + C139643 * C139899 + ae * C139758 * C139841 +
         C139758 *
             (ae * C139841 +
              C139758 * (2 * C139643 * C139897 +
                         C139643 * (C139897 + std::pow(C139649, 7) * bs[7] *
                                                  C139888 * C139647)))) /
        C139335;
    const double C3365 =
        (2 * C139643 * C139931 + C139643 * C139936 + ae * C139758 * C139841 +
         C139758 *
             (ae * C139841 +
              C139758 * (2 * C139643 * C139934 +
                         C139643 * (C139934 + std::pow(C139649, 7) * bs[7] *
                                                  C139925 * C139647)))) /
        C139335;
    const double C4077 =
        (2 * ae * C139758 * C139841 +
         C139801 * C139758 *
             (2 * C139643 * C139955 +
              C139643 * (C139955 + (C139715 * C139716 +
                                    C139940 * bs[7] * std::pow(C139649, 7)) *
                                       C139650 * C139647))) /
        C139335;
    const double C281 = (4 * (2 * C139814 + C139643 * C139823) +
                         C139643 * (3 * C139823 + C139643 * C139841)) /
                        C139330;
    const double C1007 =
        (C139758 * (3 * C139823 + C139643 * C139841)) / C139330;
    const double C3087 =
        (2 * C139814 + C139643 * C139823 + C139841 * C139866) / C139330;
    const double C10450 = C275 * C9941;
    const double C140847 = C139801 * C140784;
    const double C58044 = (4 * (2 * C140408 + C139758 * C140412) +
                           C139758 * (3 * C140412 + C139758 * C140784)) /
                          C139330;
    const double C70269 = C70254 + C70255;
    const double C79112 = C79099 + C79100;
    const double C22083 = C22079 * C116;
    const double C23176 = C1029 * C22079;
    const double C23304 = C22079 * C909;
    const double C23298 = C22079 * C820;
    const double C23292 = C22079 * C910;
    const double C23286 = C22079 * C821;
    const double C23658 = C22079 * C1003;
    const double C23652 = C22079 * C1004;
    const double C26070 = C22079 * C2962;
    const double C26310 = C22079 * C3086;
    const double C26889 = C22079 * C3492;
    const double C27201 = C22079 * C3648;
    const double C31842 = C1713 * C22079;
    const double C32092 = C22079 * C1687;
    const double C32086 = C22079 * C1598;
    const double C32080 = C22079 * C1688;
    const double C32074 = C22079 * C1599;
    const double C32428 = C22079 * C1781;
    const double C32422 = C22079 * C1782;
    const double C37210 = C22079 * C5327;
    const double C37204 = C22079 * C5393;
    const double C47721 = C47717 * C116;
    const double C48814 = C1029 * C47717;
    const double C48942 = C47717 * C909;
    const double C48936 = C47717 * C820;
    const double C48930 = C47717 * C910;
    const double C48924 = C47717 * C821;
    const double C49296 = C47717 * C1003;
    const double C49290 = C47717 * C1004;
    const double C51694 = C47717 * C2962;
    const double C51934 = C47717 * C3086;
    const double C52513 = C47717 * C3492;
    const double C52825 = C47717 * C3648;
    const double C95855 = C1713 * C47717;
    const double C96105 = C47717 * C1687;
    const double C96099 = C47717 * C1598;
    const double C96093 = C47717 * C1688;
    const double C96087 = C47717 * C1599;
    const double C96441 = C47717 * C1781;
    const double C96435 = C47717 * C1782;
    const double C101222 = C47717 * C5327;
    const double C101216 = C47717 * C5393;
    const double C139360 = C141216 - C139358;
    const double C7550 = C7535 + C7536;
    const double C16311 = C16282 + C16283;
    const double C56303 = C56283 + C56284;
    const double C56301 = C56279 + C56280;
    const double C56300 = C56277 + C56278;
    const double C56299 = C56275 + C56276;
    const double C56538 = C56527 + C56528;
    const double C56537 = C56524 + C56525;
    const double C56536 = C56521 + C56522;
    const double C56535 = C56518 + C56519;
    const double C58709 = C58702 + C58703;
    const double C58707 = C58698 + C58699;
    const double C58929 = C58924 + C58925;
    const double C58928 = C58921 + C58922;
    const double C61849 = C61837 + C61838;
    const double C62875 = C62860 + C62861;
    const double C62873 = C62854 + C62855;
    const double C62872 = C62852 + C62853;
    const double C62871 = C62848 + C62849;
    const double C62870 = C62846 + C62847;
    const double C63222 = C63214 + C63215;
    const double C65524 = C65513 + C65514;
    const double C68191 = C68187 + C68188;
    const double C68190 = C68185 + C68186;
    const double C22926 = C141494 * C832;
    const double C22917 = C141494 * C833;
    const double C23173 = C7033 * C141494;
    const double C23295 = C141494 * C827;
    const double C23289 = C141494 * C1100;
    const double C23283 = C141494 * C828;
    const double C23655 = C141494 * C1347;
    const double C23649 = C141494 * C1348;
    const double C25823 = C141494 * C2968;
    const double C25988 = C7035 * C141494;
    const double C26075 = C141494 * C2964;
    const double C26069 = C141494 * C3142;
    const double C26315 = C141494 * C3308;
    const double C26570 = C141494 * C3498;
    const double C26783 = C10798 * C141494;
    const double C26894 = C141494 * C3494;
    const double C26888 = C141494 * C3720;
    const double C27206 = C141494 * C3934;
    const double C31714 = C141494 * C1610;
    const double C31708 = C141494 * C1611;
    const double C31839 = C16044 * C141494;
    const double C32089 = C141494 * C1877;
    const double C32083 = C141494 * C1605;
    const double C32077 = C141494 * C1878;
    const double C32071 = C141494 * C1606;
    const double C32419 = C141494 * C2126;
    const double C34420 = C18716 * C141494;
    const double C36963 = C141494 * C5333;
    const double C37054 = C16046 * C141494;
    const double C37215 = C141494 * C5329;
    const double C37209 = C141494 * C5507;
    const double C37452 = C141494 * C5673;
    const double C89 =
        (C141494 * C141211) / C139330 + (C141452 - C141479) / C139336;
    const double C22919 = C141495 * C832;
    const double C23285 = C141495 * C827;
    const double C23657 = C141495 * C1346;
    const double C23651 = C141495 * C1347;
    const double C25821 = C141495 * C2969;
    const double C26073 = C141495 * C2965;
    const double C26313 = C141495 * C3309;
    const double C31710 = C141495 * C1610;
    const double C32091 = C141495 * C1876;
    const double C32079 = C141495 * C1877;
    const double C32073 = C141495 * C1605;
    const double C36961 = C141495 * C5334;
    const double C37213 = C141495 * C5330;
    const double C37207 = C141495 * C5508;
    const double C90 =
        (C141495 * C141211) / C139330 + (2 * C141221 + C141494) / C139336;
    const double C91 = (C141211 * C141221) / C139345 + C141495 / C139336;
    const double C139425 = C141309 - C139424;
    const double C47842 = C47823 + C47824;
    const double C47838 = C47815 + C47816;
    const double C48369 = C48360 + C48361;
    const double C48367 = C48355 + C48356;
    const double C49412 = C49406 + C49407;
    const double C62641 = C62620 + C62621;
    const double C65289 = C65276 + C65277;
    const double C68793 = C68773 * C2962;
    const double C68785 = C68773 * C2965;
    const double C68779 = C68773 * C2961;
    const double C69038 = C68773 * C3026;
    const double C69318 = C68773 * C3086;
    const double C69316 = C68773 * C3085;
    const double C69656 = C68773 * C6728;
    const double C70374 = C68773 * C7001;
    const double C70698 = C68773 * C7886;
    const double C71328 = C68773 * C8127;
    const double C88090 = C68773 * C7890;
    const double C88084 = C68773 * C7887;
    const double C88717 = C68773 * C8128;
    const double C90628 = C68773 * C10553;
    const double C90622 = C68773 * C10551;
    const double C91278 = C68773 * C10779;
    const double C93311 = C68773 * C13303;
    const double C93305 = C68773 * C13307;
    const double C448 = C444 + C429;
    const double C16446 = C16443 + C16426;
    const double C68798 = C141496 * C191;
    const double C68792 = C141496 * C197;
    const double C68782 = C141496 * C196;
    const double C68776 = C141496 * C190;
    const double C69056 = C141496 * C421;
    const double C69041 = C141496 * C420;
    const double C69162 = C521 * C141496;
    const double C69153 = C520 * C141496;
    const double C69323 = C141496 * C637;
    const double C69313 = C141496 * C636;
    const double C69661 = C141496 * C911;
    const double C70034 = C141496 * C1170;
    const double C70152 = C1276 * C141496;
    const double C70379 = C141496 * C1418;
    const double C70703 = C141496 * C1689;
    const double C70697 = C141496 * C1694;
    const double C71012 = C141496 * C1948;
    const double C71130 = C2054 * C141496;
    const double C71333 = C141496 * C2196;
    const double C88087 = C141496 * C1695;
    const double C88081 = C141496 * C1690;
    const double C88405 = C141496 * C1949;
    const double C88714 = C141496 * C2197;
    const double C90625 = C141496 * C3576;
    const double C90619 = C141496 * C3572;
    const double C90949 = C141496 * C3790;
    const double C93316 = C141496 * C5391;
    const double C93310 = C141496 * C5395;
    const double C93556 = C141496 * C5561;
    const double C93796 = C141496 * C5727;
    const double C55522 =
        (C141496 * C141353) / C139330 + (C141468 - C141488) / C139336;
    const double C6003 = C5990 + C5991;
    const double C5995 = C5974 + C5975;
    const double C5992 = C5968 + C5969;
    const double C6540 = C6533 + C6534;
    const double C6535 = C6523 + C6524;
    const double C6903 = C6896 + C6897;
    const double C7666 = C7662 + C7663;
    const double C8029 = C8022 + C8023;
    const double C8695 = C8691 + C8692;
    const double C103493 = C103484 + C103485;
    const double C103490 = C103478 + C103479;
    const double C104117 = C104111 + C104112;
    const double C106035 = C106026 + C106027;
    const double C108752 = C108745 + C108746;
    const double C108749 = C108739 + C108740;
    const double C68796 = C141497 * C910;
    const double C68778 = C141497 * C911;
    const double C69053 = C141497 * C1169;
    const double C69044 = C141497 * C1170;
    const double C69160 = C1275 * C141497;
    const double C69155 = C1276 * C141497;
    const double C69321 = C141497 * C1417;
    const double C69315 = C141497 * C1418;
    const double C70377 = C141497 * C3363;
    const double C71009 = C141497 * C3791;
    const double C88089 = C141497 * C3576;
    const double C88083 = C141497 * C3572;
    const double C88407 = C141497 * C3790;
    const double C90627 = C141497 * C8009;
    const double C93314 = C141497 * C13393;
    const double C93308 = C141497 * C13397;
    const double C93554 = C141497 * C13635;
    const double C55523 =
        (C141497 * C141353) / C139330 + (2 * C141358 + C141496) / C139336;
    const double C55524 = (C141353 * C141358) / C139345 + C141497 / C139336;
    const double C139451 = C141320 - C139450;
    const double C94134 = C94115 + C94116;
    const double C94130 = C94107 + C94108;
    const double C94381 = C94372 + C94373;
    const double C94379 = C94367 + C94368;
    const double C94984 = C94974 + C94975;
    const double C96331 = C96325 + C96326;
    const double C102623 = C102608 + C102609;
    const double C102621 = C102604 + C102605;
    const double C102619 = C102600 + C102601;
    const double C102617 = C102596 + C102597;
    const double C102615 = C102592 + C102593;
    const double C106156 = C106144 + C106145;
    const double C124355 = C124335 * C5327;
    const double C124347 = C124335 * C5330;
    const double C124341 = C124335 * C5326;
    const double C124601 = C124335 * C5393;
    const double C124599 = C124335 * C5392;
    const double C124852 = C124335 * C5449;
    const double C125192 = C124335 * C13302;
    const double C126159 = C124335 * C15861;
    const double C126485 = C124335 * C16012;
    const double C132737 = C124335 * C13305;
    const double C132731 = C124335 * C13301;
    const double C133043 = C124335 * C13393;
    const double C135380 = C124335 * C13303;
    const double C135374 = C124335 * C13307;
    const double C136186 = C124335 * C18582;
    const double C136180 = C124335 * C18584;
    const double C743 = C739 + C724;
    const double C7785 = C7782 + C7769;
    const double C124360 = C141498 * C278;
    const double C124354 = C141498 * C284;
    const double C124344 = C141498 * C283;
    const double C124338 = C141498 * C277;
    const double C124606 = C141498 * C503;
    const double C124596 = C141498 * C502;
    const double C124771 = C655 * C141498;
    const double C124762 = C654 * C141498;
    const double C124870 = C141498 * C716;
    const double C124855 = C141498 * C715;
    const double C125197 = C141498 * C1005;
    const double C125191 = C141498 * C1010;
    const double C125503 = C141498 * C1261;
    const double C125707 = C1433 * C141498;
    const double C125815 = C141498 * C1504;
    const double C126164 = C141498 * C1783;
    const double C126490 = C141498 * C2039;
    const double C126700 = C2211 * C141498;
    const double C126808 = C141498 * C2282;
    const double C132734 = C141498 * C1011;
    const double C132728 = C141498 * C1006;
    const double C133040 = C141498 * C1262;
    const double C133355 = C141498 * C1505;
    const double C135385 = C141498 * C3084;
    const double C135379 = C141498 * C3088;
    const double C135621 = C141498 * C3254;
    const double C135858 = C141498 * C3416;
    const double C136191 = C141498 * C3646;
    const double C136185 = C141498 * C3650;
    const double C136517 = C141498 * C3864;
    const double C136832 = C141498 * C4074;
    const double C109357 =
        (C141498 * C141379) / C139330 + (C141469 - C141491) / C139336;
    const double C14243 = C14230 + C14231;
    const double C14235 = C14214 + C14215;
    const double C14232 = C14208 + C14209;
    const double C14493 = C14486 + C14487;
    const double C14488 = C14476 + C14477;
    const double C15111 = C15104 + C15105;
    const double C15430 = C15426 + C15427;
    const double C16174 = C16167 + C16168;
    const double C16560 = C16556 + C16557;
    const double C61736 = C61727 + C61728;
    const double C61733 = C61721 + C61722;
    const double C62061 = C62055 + C62056;
    const double C64569 = C64562 + C64563;
    const double C64566 = C64556 + C64557;
    const double C65411 = C65404 + C65405;
    const double C65408 = C65398 + C65399;
    const double C124358 = C141499 * C1782;
    const double C124340 = C141499 * C1783;
    const double C124604 = C141499 * C2038;
    const double C124598 = C141499 * C2039;
    const double C124769 = C2210 * C141499;
    const double C124764 = C2211 * C141499;
    const double C124867 = C141499 * C2281;
    const double C124858 = C141499 * C2282;
    const double C125195 = C141499 * C3647;
    const double C125501 = C141499 * C3865;
    const double C125812 = C141499 * C4075;
    const double C126488 = C141499 * C5620;
    const double C132736 = C141499 * C3650;
    const double C132730 = C141499 * C3646;
    const double C133042 = C141499 * C3864;
    const double C133357 = C141499 * C4074;
    const double C135383 = C141499 * C8128;
    const double C135377 = C141499 * C8131;
    const double C135619 = C141499 * C8470;
    const double C135856 = C141499 * C8794;
    const double C136183 = C141499 * C13479;
    const double C136515 = C141499 * C13719;
    const double C109358 =
        (C141499 * C141379) / C139330 + (2 * C141384 + C141498) / C139336;
    const double C109359 = (C141379 * C141384) / C139345 + C141499 / C139336;
    const double C929 = C141309 * C916;
    const double C5977 = C5866 * C916;
    const double C6891 = C5865 * C916;
    const double C22182 = C141358 * C916;
    const double C23061 = C141468 * C916;
    const double C47820 = C141358 * C916;
    const double C48699 = C47710 * C916;
    const double C68784 = C141497 * C916;
    const double C69655 = C141496 * C916;
    const double C7164 = C5863 * C1099;
    const double C7150 = C141221 * C1099;
    const double C23301 = C141494 * C1099;
    const double C23291 = C141495 * C1099;
    const double C48939 = C47707 * C1099;
    const double C48929 = C47708 * C1099;
    const double C56290 = C141216 * C1099;
    const double C69901 = C141452 * C1099;
    const double C69887 = C141221 * C1099;
    const double C1801 = C141320 * C1788;
    const double C14217 = C14036 * C1788;
    const double C16162 = C14035 * C1788;
    const double C30085 = C141384 * C1788;
    const double C31959 = C141469 * C1788;
    const double C94112 = C141384 * C1788;
    const double C95972 = C93949 * C1788;
    const double C124346 = C141499 * C1788;
    const double C126158 = C141498 * C1788;
    const double C16671 = C5863 * C2125;
    const double C16665 = C141221 * C2125;
    const double C32425 = C141494 * C2125;
    const double C32421 = C141495 * C2125;
    const double C63219 = C141216 * C2125;
    const double C79514 = C141452 * C2125;
    const double C79512 = C141221 * C2125;
    const double C96438 = C47707 * C2125;
    const double C96434 = C47708 * C2125;
    const double C221 = C208 + C209;
    const double C308 = C295 + C296;
    const double C6000 = C5984 + C5985;
    const double C14240 = C14224 + C14225;
    const double C1030 = C1022 + C1023;
    const double C7176 = C7145 + C7146;
    const double C15108 = C15098 + C15099;
    const double C56305 = C56287 + C56288;
    const double C69913 = C69882 + C69883;
    const double C1714 = C1706 + C1707;
    const double C8026 = C8016 + C8017;
    const double C16309 = C16278 + C16279;
    const double C62874 = C62858 + C62859;
    const double C79110 = C79095 + C79096;
    const double C3197 =
        (C139643 * C139871 + C140120 + C140120 +
         C139758 * (2 * ae * C139771 + C139758 * C139643 * C139876)) /
        C139335;
    const double C4005 =
        (C140120 + C139801 * (ae * C139814 + C139758 * C139643 * C139931)) /
        C139335;
    const double C3202 = C188 * C3027;
    const double C5973 = C5867 * C3027;
    const double C6251 = C5966 * C3027;
    const double C6362 = C275 * C3027;
    const double C6895 = C5866 * C3027;
    const double C7157 = C5871 * C3027;
    const double C7296 = C5965 * C3027;
    const double C10127 = C5964 * C3027;
    const double C23063 = C141358 * C3027;
    const double C23423 = C22173 * C3027;
    const double C48701 = C141358 * C3027;
    const double C49061 = C47811 * C3027;
    const double C56293 = C55527 * C3027;
    const double C68780 = C68674 * C3027;
    const double C69046 = C68773 * C3027;
    const double C69659 = C141497 * C3027;
    const double C69894 = C139356 * C3027;
    const double C3796 = C188 * C3573;
    const double C8021 = C5866 * C3573;
    const double C8352 = C5965 * C3573;
    const double C8476 = C275 * C3573;
    const double C10912 = C5871 * C3573;
    const double C11031 = C5964 * C3573;
    const double C14989 = C141309 * C3573;
    const double C15424 = C14205 * C3573;
    const double C24099 = C141358 * C3573;
    const double C24417 = C22173 * C3573;
    const double C31268 = C30076 * C3573;
    const double C38771 = C141468 * C3573;
    const double C49737 = C141358 * C3573;
    const double C50049 = C47811 * C3573;
    const double C61843 = C55527 * C3573;
    const double C70701 = C141497 * C3573;
    const double C73467 = C139356 * C3573;
    const double C77596 = C47710 * C3573;
    const double C95284 = C94103 * C3573;
    const double C5782 =
        (C139643 * C139945 + C140238 + C140238 +
         C139801 * (2 * ae * C139814 + C139801 * C139643 * C139950)) /
        C139335;
    const double C5787 = C275 * C5450;
    const double C14213 = C14037 * C5450;
    const double C14647 = C188 * C5450;
    const double C14747 = C14206 * C5450;
    const double C16166 = C14036 * C5450;
    const double C16668 = C5871 * C5450;
    const double C16907 = C14205 * C5450;
    const double C21993 = C14204 * C5450;
    const double C31961 = C141384 * C5450;
    const double C32647 = C30076 * C5450;
    const double C63220 = C55527 * C5450;
    const double C86095 = C139356 * C5450;
    const double C95974 = C141384 * C5450;
    const double C96660 = C94103 * C5450;
    const double C124342 = C124182 * C5450;
    const double C124860 = C124335 * C5450;
    const double C126162 = C141499 * C5450;
    const double C6361 = C6086 * C5966;
    const double C7018 = C6086 * C5871;
    const double C7425 = C6086 * C5965;
    const double C23547 = C6086 * C22173;
    const double C49185 = C6086 * C47811;
    const double C56205 = C6086 * C55527;
    const double C69156 = C6086 * C68773;
    const double C69772 = C6086 * C139356;
    const double C6625 = C6623 + C3422;
    const double C8478 = C8145 * C5965;
    const double C10791 = C8145 * C5871;
    const double C24542 = C8145 * C22173;
    const double C50173 = C8145 * C47811;
    const double C73358 = C8145 * C139356;
    const double C8808 = C8806 + C4080;
    const double C14646 = C14127 * C14206;
    const double C16029 = C14127 * C5871;
    const double C16795 = C14127 * C14205;
    const double C32539 = C14127 * C30076;
    const double C96552 = C14127 * C94103;
    const double C110531 = C14127 * C55527;
    const double C124765 = C14127 * C124335;
    const double C126045 = C14127 * C139356;
    const double C14398 = C14396 + C5567;
    const double C8015 = C5866 * C3577;
    const double C14987 = C141309 * C3577;
    const double C24095 = C141358 * C3577;
    const double C38767 = C141468 * C3577;
    const double C49733 = C141358 * C3577;
    const double C70695 = C141497 * C3577;
    const double C77592 = C47710 * C3577;
    const double C139677 = C139676 + C139669;
    const double C831 =
        (C139758 * C139672 + C139966 + C139966 +
         C139643 * (2 * ae * C139758 * C139668 + C139643 * C139959)) /
        C139335;
    const double C3031 = (ae * C139764 + C139643 * C139768 + C139966 +
                          C139758 * (C139675 + C139758 * C139779)) /
                         C139335;
    const double C3143 = (ae * C139764 + C139643 * C139849 + C139966 +
                          C139758 * (C139675 + C139758 * C139854)) /
                         C139335;
    const double C3651 = (C139966 + C139801 * C139758 * C139822) / C139335;
    const double C3935 = (C139966 + C139801 * C139758 * C139912) / C139335;
    const double C7898 = C5871 * C3495;
    const double C8014 = C5965 * C3495;
    const double C8138 = C275 * C3495;
    const double C10917 = C141221 * C3495;
    const double C14986 = C188 * C3495;
    const double C15096 = C14205 * C3495;
    const double C24094 = C22173 * C3495;
    const double C26892 = C141495 * C3495;
    const double C30949 = C30076 * C3495;
    const double C39065 = C5863 * C3495;
    const double C49732 = C47811 * C3495;
    const double C52516 = C47708 * C3495;
    const double C56750 = C55527 * C3495;
    const double C61842 = C141216 * C3495;
    const double C70584 = C139356 * C3495;
    const double C73472 = C141221 * C3495;
    const double C77862 = C141452 * C3495;
    const double C94970 = C94103 * C3495;
    const double C1609 =
        (C139801 * C139672 + C140030 + C140030 +
         C139643 * (2 * ae * C139801 * C139668 + C139643 * C140023)) /
        C139335;
    const double C3721 = (C140030 + C139758 * C139801 * C139854) / C139335;
    const double C5454 = (ae * C139807 + C139643 * C139811 + C140030 +
                          C139801 * (C139675 + C139801 * C139822)) /
                         C139335;
    const double C5674 = (ae * C139807 + C139643 * C139907 + C140030 +
                          C139801 * (C139675 + C139801 * C139912)) /
                         C139335;
    const double C7180 = C7153 + C7154;
    const double C56307 = C56291 + C56292;
    const double C69917 = C69890 + C69891;
    const double C16313 = C16286 + C16287;
    const double C62876 = C62864 + C62865;
    const double C85799 = C85793 + C85794;
    const double C140282 = C140281 + C140278;
    const double C8345 =
        (C139801 * C139871 + C140328 + C140328 +
         C139758 * (2 * ae * C139801 * C139769 + C139758 * C139801 * C139876)) /
        C139335;
    const double C13875 = (ae * C139807 + C139758 * C139928 + C140328 +
                           C139801 * (C140280 + C139801 * C140425)) /
                          C139335;
    const double C140583 = C140582 + C140579;
    const double C13953 =
        (C139758 * C139945 + C140508 + C140508 +
         C139801 * (2 * ae * C140408 + C139801 * C139758 * C139950)) /
        C139335;
    const double C13958 = C275 * C13475;
    const double C15749 = C14206 * C13475;
    const double C19361 = C188 * C13475;
    const double C19466 = C14205 * C13475;
    const double C35115 = C30076 * C13475;
    const double C43543 = C141384 * C13475;
    const double C47526 = C22173 * C13475;
    const double C61726 = C14037 * C13475;
    const double C62167 = C55527 * C13475;
    const double C63330 = C47811 * C13475;
    const double C65403 = C14036 * C13475;
    const double C68594 = C14204 * C13475;
    const double C99127 = C94103 * C13475;
    const double C106149 = C141384 * C13475;
    const double C109223 = C5965 * C13475;
    const double C125816 = C124335 * C13475;
    const double C132732 = C124182 * C13475;
    const double C136189 = C141499 * C13475;
    const double C19360 = C141309 * C4004;
    const double C40895 = C141358 * C4004;
    const double C44227 = C141468 * C4004;
    const double C63327 = C141358 * C4004;
    const double C65962 = C47710 * C4004;
    const double C88716 = C141497 * C4004;
    const double C91275 = C141496 * C4004;
    const double C104114 = C5866 * C4004;
    const double C106695 = C5865 * C4004;
    const double C7429 = C7419 + C7420;
    const double C56302 = C56281 + C56282;
    const double C64810 = C64806 + C64807;
    const double C19045 = C19037 + C3795;
    const double C11139 = C11136 + C11137;
    const double C18715 = C18703 + C18704;
    const double C39357 = C39348 + C39349;
    const double C40065 = C40046 + C40047;
    const double C58708 = C58700 + C58701;
    const double C62062 = C62057 + C62058;
    const double C62639 = C62616 + C62617;
    const double C65753 = C65749 + C65750;
    const double C102933 = C102922 + C102923;
    const double C103491 = C103480 + C103481;
    const double C106032 = C106020 + C106021;
    const double C19046 = C19040 + C15313;
    const double C18717 = C18709 + C18710;
    const double C46922 = C46916 + C46917;
    const double C61850 = C61839 + C61840;
    const double C62643 = C62624 + C62625;
    const double C108751 = C108743 + C108744;
    const double C449 = C445 + C432;
    const double C450 = C446 + C435;
    const double C1193 = C1190 + C1182;
    const double C1971 = C1968 + C1960;
    const double C16447 = C16444 + C16429;
    const double C114008 = C110525 + C110526;
    const double C16799 = C16789 + C16790;
    const double C63223 = C63216 + C63217;
    const double C109229 = C109225 + C109226;
    const double C528 = C511 + C525;
    const double C662 = C645 + C659;
    const double C744 = C740 + C727;
    const double C529 = C514 + C526;
    const double C663 = C648 + C660;
    const double C745 = C741 + C730;
    const double C1527 = C1524 + C1516;
    const double C2305 = C2302 + C2294;
    const double C7786 = C7783 + C7771;
    const double C58047 = C56199 + C56200;
    const double C11463 = C11461 + C11455;
    const double C139720 = C139712 + C139702;
    const double C139705 = C139704 + C139693;
    const double C8008 = (C139801 * (C139779 + C139963 +
                                     C139758 * (C139702 + C139758 * C139793))) /
                         C139335;
    const double C140149 = ae * C140148;
    const double C13317 = C5871 * C13306;
    const double C14982 = C188 * C13306;
    const double C15094 = C14206 * C13306;
    const double C18928 = C141221 * C13306;
    const double C40054 = C22173 * C13306;
    const double C40202 = C30076 * C13306;
    const double C60807 = C55527 * C13306;
    const double C61846 = C141216 * C13306;
    const double C62636 = C47811 * C13306;
    const double C75832 = C139356 * C13306;
    const double C82376 = C141221 * C13306;
    const double C116853 = C94103 * C13306;
    const double C125186 = C124335 * C13306;
    const double C140091 = ae * C140090;
    const double C6731 = (2 * C139965 + C139758 * C140090) / C139330;
    const double C7889 = (C139801 * C140090) / C139330;
    const double C140193 = ae * C140192;
    const double C15864 = (2 * C140029 + C139801 * C140192) / C139330;
    const double C57993 =
        (4 * (2 * C140350 + ae * C140351 + C139758 * C140728) +
         ae * (3 * C140351 + C139758 * C140729) +
         C139758 *
             (3 * C140728 + ae * C140729 +
              C139758 * (2 * C140724 + ae * C140725 +
                         C139758 * (C139787 + ae * C139758 * C139728 +
                                    C139758 * (ae * C139728 +
                                               C139758 * std::pow(C139649, 7) *
                                                   bs[7] * C139762))))) /
        C139335;
    const double C58543 =
        (C139801 *
         (3 * C140728 + ae * C140729 +
          C139758 * (2 * C140724 + ae * C140725 +
                     C139758 * (C139787 + ae * C139758 * C139728 +
                                C139758 * (ae * C139728 +
                                           C139758 * std::pow(C139649, 7) *
                                               bs[7] * C139762))))) /
        C139335;
    const double C60368 =
        (2 * C140350 + ae * C140351 + C139758 * C140728 +
         (2 * C140724 + ae * C140725 +
          C139758 * (C139787 + ae * C139758 * C139728 +
                     C139758 * (ae * C139728 + C139758 * std::pow(C139649, 7) *
                                                   bs[7] * C139762))) *
             C139940) /
        C139335;
    const double C65268 =
        (2 * C139801 * C140728 +
         C139801 * (C140728 +
                    (C139787 + ae * C139758 * C139728 +
                     C139758 * (ae * C139728 + C139758 * std::pow(C139649, 7) *
                                                   bs[7] * C139762)) *
                        C139940)) /
        C139335;
    const double C58106 =
        (4 * (2 * C140359 + ae * C140351 + C139758 * C140738) +
         ae * (3 * C140351 + C139758 * C140729) +
         C139758 *
             (3 * C140738 + ae * C140729 +
              C139758 * (2 * C140736 + ae * C140725 +
                         C139758 * (C139858 + ae * C139758 * C139728 +
                                    C139758 * (ae * C139728 +
                                               C139758 * std::pow(C139649, 7) *
                                                   bs[7] * C139846))))) /
        C139335;
    const double C65406 = C65394 + C65395;
    const double C114068 =
        (4 * (2 * C140647 + ae * C140648 + C139801 * C140932) +
         ae * (3 * C140648 + C139801 * C140933) +
         C139801 *
             (3 * C140932 + ae * C140933 +
              C139801 * (2 * C140928 + ae * C140929 +
                         C139801 * (C139830 + ae * C139801 * C139728 +
                                    C139801 * (ae * C139728 +
                                               C139801 * std::pow(C139649, 7) *
                                                   bs[7] * C139805))))) /
        C139335;
    const double C114289 =
        (4 * (2 * C140666 + ae * C140648 + C139801 * C140945) +
         ae * (3 * C140648 + C139801 * C140933) +
         C139801 *
             (3 * C140945 + ae * C140933 +
              C139801 * (2 * C140943 + ae * C140929 +
                         C139801 * (C139916 + ae * C139801 * C139728 +
                                    C139801 * (ae * C139728 +
                                               C139801 * std::pow(C139649, 7) *
                                                   bs[7] * C139904))))) /
        C139335;
    const double C58053 = C58049 + C58050;
    const double C58113 = C58110 + C58111;
    const double C58621 = C58613 + C58614;
    const double C58705 = C58694 + C58695;
    const double C89939 = C89929 + C89930;
    const double C105341 = C105331 + C105332;
    const double C64564 = C64552 + C64553;
    const double C64649 = C64646 + C64647;
    const double C90742 = C90734 + C90735;
    const double C106152 = C106136 + C106137;
    const double C114014 = C114010 + C114011;
    const double C114128 = C114125 + C114126;
    const double C10563 = C141221 * C3499;
    const double C26568 = C141495 * C3499;
    const double C38625 = C5863 * C3499;
    const double C52192 = C47708 * C3499;
    const double C61509 = C141216 * C3499;
    const double C73140 = C141221 * C3499;
    const double C77450 = C141452 * C3499;
    const double C18590 = C5863 * C13309;
    const double C61506 = C141216 * C13309;
    const double C81971 = C141452 * C13309;
    const double C139740 = C139737 * ae;
    const double C913 = (C139758 * (3 * C139780 + C139643 * C139798) +
                         (3 * C139694 + C139643 * C139737) * ae) /
                        C139330;
    const double C1785 = (C139801 * (3 * C139823 + C139643 * C139841) +
                          (3 * C139694 + C139643 * C139737) * ae) /
                         C139330;
    const double C3649 =
        (C139801 * C139758 * C139841 + C139758 * C139737 * ae) / C139330;
    const double C113 = 4 * (2 * C139666 + C139643 * C139694) +
                        C139643 * (3 * C139694 + C139643 * C139737);
    const double C824 = C139758 * (3 * C139694 + C139643 * C139737);
    const double C1602 = C139801 * (3 * C139694 + C139643 * C139737);
    const double C2963 = 2 * C139666 + C139643 * C139694 + C139737 * C139866;
    const double C3493 = C139801 * C139758 * C139737;
    const double C5328 = 2 * C139666 + C139643 * C139694 + C139737 * C139940;
    const double C140290 = ae * C140287;
    const double C140289 = C139758 * C140287;
    const double C140330 = C139801 * C140287;
    const double C140591 = ae * C140588;
    const double C140590 = C139801 * C140588;
    const double C140535 = C140534 + C140288;
    const double C8471 =
        (ae * C139780 + C139801 * C139899 +
         ae * (C139801 * C139758 * C139837 + C140288) +
         C139758 *
             (ae * (C139801 * C139837 + C139733) +
              C139758 * (ae * C139794 +
                         C139801 * (C139897 + std::pow(C139649, 7) * bs[7] *
                                                  C139888 * C139647)))) /
        C139335;
    const double C140400 = C139782 + C140398;
    const double C140454 = ae * C140452;
    const double C140491 = C140267 + C140490;
    const double C140711 = C139825 + C140708;
    const double C140519 = C140518 + C140397;
    const double C11132 =
        (2 * (ae * (C139801 * C139825 + C139693) + C139758 * C140460) +
         ae * (C139801 * C140420 + C140397) +
         C139758 *
             (C140460 + ae * (C139801 * C139758 * C140416 + C140393) +
              C139758 * (ae * (C139801 * C140416 + C139729) +
                         C139758 * (ae * C140388 + C139801 * C139643 *
                                                       std::pow(C139649, 7) *
                                                       bs[7] * C139888)))) /
        C139335;
    const double C11457 = C275 * C10780;
    const double C43127 = C30076 * C10780;
    const double C103263 = C94103 * C10780;
    const double C140635 = ae * C140633;
    const double C140634 = C139801 * C140633;
    const double C139745 = C139743 + C139729;
    const double C140155 = ae * C140153;
    const double C140523 = C139961 + C140522;
    const double C140100 = ae * C140098;
    const double C140251 = C139758 * C140098;
    const double C140312 = C139801 * C140098;
    const double C13308 = (C140090 + C140098 * C139940) / C139330;
    const double C140202 = ae * C140200;
    const double C140541 = C139801 * C140200;
    const double C140762 = C140760 + C140752;
    const double C140839 = ae * C140837;
    const double C140856 = C139801 * C140837;
    const double C140974 = C140973 + C140966;
    const double C139744 = C139643 * C139742;
    const double C139981 = C139980 + C139976;
    const double C18587 =
        (2 * ae *
             (2 * C139801 * C139970 +
              C139801 * (C139970 + C139758 * C139728 * C139940)) +
         C139643 * (2 * C140151 +
                    C139801 * (C139971 +
                               C139758 *
                                   (C139715 * C139716 +
                                    C139647 * bs[7] * std::pow(C139649, 7)) *
                                   C139650 * C139940))) /
        C139335;
    const double C67929 =
        (3 * (C139959 + C139971 * C139940) +
         C139801 * (2 * C140151 +
                    C139801 * (C139971 +
                               C139758 *
                                   (C139715 * C139716 +
                                    C139647 * bs[7] * std::pow(C139649, 7)) *
                                   C139650 * C139940))) /
        C139335;
    const double C18592 = C141221 * C13310;
    const double C61511 = C141216 * C13310;
    const double C81969 = C141221 * C13310;
    const double C65162 = C141216 * C18586;
    const double C140045 = C140044 + C140040;
    const double C6734 =
        (2 * ae *
             (2 * C139758 * C139668 + C139758 * (C139668 + C139692 * C139866)) +
         C139643 * (2 * C139959 + C139758 * C140096)) /
        C139335;
    const double C7892 = (2 * ae * C139801 * (C139668 + C139692 * C139866) +
                          C139643 * C139801 * C140096) /
                         C139335;
    const double C9772 = (3 * (C139672 + C139698 * C139866) +
                          C139758 * (2 * C139959 + C139758 * C140096)) /
                         C139335;
    const double C9773 =
        (2 * ae *
             (3 * (C139668 + C139692 * C139866) +
              C139758 *
                  (2 * C139970 + C139758 * (C139692 + C139728 * C139866))) +
         C139643 * (3 * C140096 +
                    C139758 * (2 * C139971 +
                               C139758 * (C139735 + (C139715 * C139716 +
                                                     C139647 * bs[7] *
                                                         std::pow(C139649, 7)) *
                                                        C139650 * C139866)))) /
        C139335;
    const double C10555 =
        (C139801 * (2 * C139959 + C139758 * C140096)) / C139335;
    const double C13311 =
        (C139672 + C139698 * C139866 + C140096 * C139940) / C139335;
    const double C13312 =
        (2 * ae * (C140351 + (C139692 + C139728 * C139866) * C139940) +
         C139643 *
             (C140096 + (C139735 + (C139715 * C139716 +
                                    C139647 * bs[7] * std::pow(C139649, 7)) *
                                       C139650 * C139866) *
                            C139940)) /
        C139335;
    const double C57934 =
        (4 * (2 * C139959 + C139758 * C140096) +
         C139758 * (3 * C140096 +
                    C139758 * (2 * C139971 +
                               C139758 * (C139735 + (C139715 * C139716 +
                                                     C139647 * bs[7] *
                                                         std::pow(C139649, 7)) *
                                                        C139650 * C139866)))) /
        C139335;
    const double C58456 =
        (C139801 * (3 * C140096 +
                    C139758 * (2 * C139971 +
                               C139758 * (C139735 + (C139715 * C139716 +
                                                     C139647 * bs[7] *
                                                         std::pow(C139649, 7)) *
                                                        C139650 * C139866)))) /
        C139335;
    const double C60312 =
        (2 * C139959 + C139758 * C140096 +
         (2 * C139971 +
          C139758 * (C139735 + (C139715 * C139716 +
                                C139647 * bs[7] * std::pow(C139649, 7)) *
                                   C139650 * C139866)) *
             C139940) /
        C139335;
    const double C65159 =
        (2 * C139801 * C140096 +
         C139801 *
             (C140096 + (C139735 + (C139715 * C139716 +
                                    C139647 * bs[7] * std::pow(C139649, 7)) *
                                       C139650 * C139866) *
                            C139940)) /
        C139335;
    const double C15867 =
        (2 * ae *
             (2 * C139801 * C139668 + C139801 * (C139668 + C139692 * C139940)) +
         C139643 * (2 * C140023 + C139801 * C140198)) /
        C139335;
    const double C21312 = (3 * (C139672 + C139698 * C139940) +
                           C139801 * (2 * C140023 + C139801 * C140198)) /
                          C139335;
    const double C21313 =
        (2 * ae *
             (3 * (C139668 + C139692 * C139940) +
              C139801 *
                  (2 * C140034 + C139801 * (C139692 + C139728 * C139940))) +
         C139643 * (3 * C140198 +
                    C139801 * (2 * C140035 +
                               C139801 * (C139735 + (C139715 * C139716 +
                                                     C139647 * bs[7] *
                                                         std::pow(C139649, 7)) *
                                                        C139650 * C139940)))) /
        C139335;
    const double C113948 =
        (4 * (2 * C140023 + C139801 * C140198) +
         C139801 * (3 * C140198 +
                    C139801 * (2 * C140035 +
                               C139801 * (C139735 + (C139715 * C139716 +
                                                     C139647 * bs[7] *
                                                         std::pow(C139649, 7)) *
                                                        C139650 * C139940)))) /
        C139335;
    const double C424 =
        (4 * (2 * C139643 * C139876 + C139643 * C139883) +
         C139643 * (3 * C139883 +
                    C139643 * (2 * C139643 * C139881 +
                               C139643 * (C139881 + (C139715 * C139716 +
                                                     C139866 * bs[7] *
                                                         std::pow(C139649, 7)) *
                                                        C139650 * C139647)))) /
        C139335;
    const double C1168 =
        (2 * ae * (2 * C139771 + C139643 * C139780) +
         C139758 * (2 * C139643 * C139876 + C139643 * C139883)) /
        C139335;
    const double C1172 =
        (2 * ae * (3 * C139780 + C139643 * C139798) +
         C139758 * (3 * C139883 +
                    C139643 * (2 * C139643 * C139881 +
                               C139643 * (C139881 + (C139715 * C139716 +
                                                     C139866 * bs[7] *
                                                         std::pow(C139649, 7)) *
                                                        C139650 * C139647)))) /
        C139335;
    const double C1946 =
        (C139801 * (2 * C139643 * C139876 + C139643 * C139883)) / C139335;
    const double C1950 =
        (C139801 * (3 * C139883 +
                    C139643 * (2 * C139643 * C139881 +
                               C139643 * (C139881 + (C139715 * C139716 +
                                                     C139866 * bs[7] *
                                                         std::pow(C139649, 7)) *
                                                        C139650 * C139647)))) /
        C139335;
    const double C3792 =
        (2 * ae * C139801 * C139780 + C139758 * C139801 * C139883) / C139335;
    const double C5563 =
        (C139871 + C139876 * C139647 + C139883 * C139940) / C139335;
    const double C5564 =
        (2 * C139643 * C139876 + C139643 * C139883 +
         (2 * C139643 * C139881 +
          C139643 * (C139881 + (C139715 * C139716 +
                                C139866 * bs[7] * std::pow(C139649, 7)) *
                                   C139650 * C139647)) *
             C139940) /
        C139335;
    const double C15308 =
        (2 * ae * (C139780 + C139794 * C139940) +
         C139758 *
             (C139883 + (C139881 + (C139715 * C139716 +
                                    C139866 * bs[7] * std::pow(C139649, 7)) *
                                       C139650 * C139647) *
                            C139940)) /
        C139335;
    const double C16423 =
        (2 * C139801 * C139883 +
         C139801 *
             (C139883 + (C139881 + (C139715 * C139716 +
                                    C139866 * bs[7] * std::pow(C139649, 7)) *
                                       C139650 * C139647) *
                            C139940)) /
        C139335;
    const double C140395 = C140385 + C140391;
    const double C19035 =
        (2 * ae *
             (2 * C139801 * C139782 + C139801 * (C139782 + C140388 * C139940)) +
         C139758 * (2 * C140450 +
                    C139801 * (C140386 +
                               C139643 *
                                   (C139715 * C139716 +
                                    C139866 * bs[7] * std::pow(C139649, 7)) *
                                   C139650 * C139940))) /
        C139335;
    const double C21664 =
        (3 * (C140264 + C140386 * C139940) +
         C139801 * (2 * C140450 +
                    C139801 * (C140386 +
                               C139643 *
                                   (C139715 * C139716 +
                                    C139866 * bs[7] * std::pow(C139649, 7)) *
                                   C139650 * C139940))) /
        C139335;
    const double C140754 = C139758 * C140750;
    const double C140816 = C140815 + C140811;
    const double C68268 =
        (2 * ae *
             (3 * C140659 +
              C139801 *
                  (2 * C140805 + C139801 * (C139776 + C139789 * C139940))) +
         C139758 * (3 * C140835 +
                    C139801 * (2 * C140806 +
                               C139801 * (C139881 + (C139715 * C139716 +
                                                     C139866 * bs[7] *
                                                         std::pow(C139649, 7)) *
                                                        C139650 * C139940)))) /
        C139335;
    const double C114180 =
        (4 * (2 * C140444 + C139801 * C140835) +
         C139801 * (3 * C140835 +
                    C139801 * (2 * C140806 +
                               C139801 * (C139881 + (C139715 * C139716 +
                                                     C139866 * bs[7] *
                                                         std::pow(C139649, 7)) *
                                                        C139650 * C139940)))) /
        C139335;
    const double C719 =
        (4 * (2 * C139643 * C139950 + C139643 * C139957) +
         C139643 * (3 * C139957 +
                    C139643 * (2 * C139643 * C139955 +
                               C139643 * (C139955 + (C139715 * C139716 +
                                                     C139940 * bs[7] *
                                                         std::pow(C139649, 7)) *
                                                        C139650 * C139647)))) /
        C139335;
    const double C1502 =
        (C139758 * (2 * C139643 * C139950 + C139643 * C139957)) / C139335;
    const double C1506 =
        (C139758 * (3 * C139957 +
                    C139643 * (2 * C139643 * C139955 +
                               C139643 * (C139955 + (C139715 * C139716 +
                                                     C139940 * bs[7] *
                                                         std::pow(C139649, 7)) *
                                                        C139650 * C139647)))) /
        C139335;
    const double C2280 =
        (2 * ae * (2 * C139814 + C139643 * C139823) +
         C139801 * (2 * C139643 * C139950 + C139643 * C139957)) /
        C139335;
    const double C2284 =
        (2 * ae * (3 * C139823 + C139643 * C139841) +
         C139801 * (3 * C139957 +
                    C139643 * (2 * C139643 * C139955 +
                               C139643 * (C139955 + (C139715 * C139716 +
                                                     C139940 * bs[7] *
                                                         std::pow(C139649, 7)) *
                                                        C139650 * C139647)))) /
        C139335;
    const double C3418 =
        (C139945 + C139950 * C139647 + C139957 * C139866) / C139335;
    const double C3419 =
        (2 * C139643 * C139950 + C139643 * C139957 +
         (2 * C139643 * C139955 +
          C139643 * (C139955 + (C139715 * C139716 +
                                C139940 * bs[7] * std::pow(C139649, 7)) *
                                   C139650 * C139647)) *
             C139866) /
        C139335;
    const double C4076 =
        (2 * ae * C139758 * C139823 + C139801 * C139758 * C139957) / C139335;
    const double C7766 =
        (2 * C139758 * C139957 +
         C139758 *
             (C139957 + (C139955 + (C139715 * C139716 +
                                    C139940 * bs[7] * std::pow(C139649, 7)) *
                                       C139650 * C139647) *
                            C139866)) /
        C139335;
    const double C8795 =
        (2 * ae * (C139823 + C139837 * C139866) +
         C139801 *
             (C139957 + (C139955 + (C139715 * C139716 +
                                    C139940 * bs[7] * std::pow(C139649, 7)) *
                                       C139650 * C139647) *
                            C139866)) /
        C139335;
    const double C140704 = C140698 + C140699;
    const double C58381 =
        (4 * (2 * C140616 + C139758 * C140796) +
         C139758 * (3 * C140796 +
                    C139758 * (2 * C139758 * C139955 +
                               C139758 * (C139955 + (C139715 * C139716 +
                                                     C139940 * bs[7] *
                                                         std::pow(C139649, 7)) *
                                                        C139650 * C139866)))) /
        C139335;
    const double C59065 =
        (2 * ae * (3 * C140412 + C139758 * C140784) +
         C139801 * (3 * C140796 +
                    C139758 * (2 * C139758 * C139955 +
                               C139758 * (C139955 + (C139715 * C139716 +
                                                     C139940 * bs[7] *
                                                         std::pow(C139649, 7)) *
                                                        C139650 * C139866)))) /
        C139335;
    const double C140907 = C140897 + C140903;
    const double C140968 = C139801 * C140964;
    const double C140763 = C140761 * ae;
    const double C58610 = (C139801 * (3 * C140412 + C139758 * C140784) +
                           (3 * C140373 + C139758 * C140761) * ae) /
                          C139330;
    const double C57932 = 4 * (2 * C140276 + C139758 * C140373) +
                          C139758 * (3 * C140373 + C139758 * C140761);
    const double C58454 = C139801 * (3 * C140373 + C139758 * C140761);
    const double C60310 = 2 * C140276 + C139758 * C140373 + C140761 * C139940;
    const double C140868 = ae * C140865;
    const double C140867 = C139801 * C140865;
    const double C140912 = C140617 + C140910;
    const double C140970 = C140967 * ae;
    const double C113946 = 4 * (2 * C140577 + C139801 * C140686) +
                           C139801 * (3 * C140686 + C139801 * C140967);
    const double C140124 = ae * C140123;
    const double C3028 = (C139764 + C139769 * C139647 + C139758 * C140123 +
                          C139758 * C139694 * ae) /
                         C139330;
    const double C3574 = (C139801 * C140123) / C139330;
    const double C14979 = (C140123 + C140287 * C139940) / C139330;
    const double C225 = C216 + C217;
    const double C443 = C436 + C437;
    const double C523 = C517 + C518;
    const double C933 = C922 + C923;
    const double C1185 = C1174 + C1175;
    const double C22209 = C22195 + C22196;
    const double C47847 = C47833 + C47834;
    const double C1711 = C1700 + C1701;
    const double C1963 = C1952 + C1953;
    const double C2052 = C2043 + C2044;
    const double C30355 = C30347 + C30348;
    const double C94382 = C94374 + C94375;
    const double C14397 = C14394 + C5568;
    const double C14130 = C14125 + C14126;
    const double C14491 = C14482 + C14483;
    const double C32316 = C32308 + C32309;
    const double C96329 = C96321 + C96322;
    const double C13399 =
        (C139675 + C139758 * C139779 + C140354 * C139940) / C139335;
    const double C13400 =
        (C139779 + C139963 + C139758 * C140354 +
         (C139793 + C139979 +
          C139758 * (C139741 +
                     C139758 * (ae * C139789 + C139643 * std::pow(C139649, 7) *
                                                   bs[7] * C139762))) *
             C139940) /
        C139335;
    const double C18701 =
        (2 * C139801 * C140354 +
         C139801 * (C140354 +
                    (C139741 +
                     C139758 * (ae * C139789 + C139643 * std::pow(C139649, 7) *
                                                   bs[7] * C139762)) *
                        C139940)) /
        C139335;
    const double C200 =
        (4 * (2 * C139779 + ae * C139780 + C139643 * C139797) +
         ae * (3 * C139780 + C139643 * C139798) +
         C139643 *
             (3 * C139797 + ae * C139798 +
              C139643 * (2 * C139793 + ae * C139794 +
                         C139643 * (C139787 + ae * C139643 * C139789 +
                                    C139643 * (ae * C139789 +
                                               C139643 * std::pow(C139649, 7) *
                                                   bs[7] * C139762))))) /
        C139335;
    const double C1692 =
        (C139801 * (2 * C139779 + ae * C139780 + C139643 * C139797)) / C139335;
    const double C1696 =
        (C139801 *
         (3 * C139797 + ae * C139798 +
          C139643 * (2 * C139793 + ae * C139794 +
                     C139643 * (C139787 + ae * C139643 * C139789 +
                                C139643 * (ae * C139789 +
                                           C139643 * std::pow(C139649, 7) *
                                               bs[7] * C139762))))) /
        C139335;
    const double C5397 =
        (C139768 + ae * C139771 + C139643 * C139779 + C139797 * C139940) /
        C139335;
    const double C5398 =
        (2 * C139779 + ae * C139780 + C139643 * C139797 +
         (2 * C139793 + ae * C139794 +
          C139643 * (C139787 + ae * C139643 * C139789 +
                     C139643 * (ae * C139789 + C139643 * std::pow(C139649, 7) *
                                                   bs[7] * C139762))) *
             C139940) /
        C139335;
    const double C16017 =
        (2 * C139801 * C139797 +
         C139801 * (C139797 +
                    (C139787 + ae * C140388 +
                     C139643 * (ae * C139789 + C139643 * std::pow(C139649, 7) *
                                                   bs[7] * C139762)) *
                        C139940)) /
        C139335;
    const double C367 =
        (4 * (2 * C139854 + ae * C139780 + C139643 * C139862) +
         ae * (3 * C139780 + C139643 * C139798) +
         C139643 *
             (3 * C139862 + ae * C139798 +
              C139643 * (2 * C139860 + ae * C139794 +
                         C139643 * (C139858 + ae * C139643 * C139789 +
                                    C139643 * (ae * C139789 +
                                               C139643 * std::pow(C139649, 7) *
                                                   bs[7] * C139846))))) /
        C139335;
    const double C1875 =
        (C139801 * (2 * C139854 + ae * C139780 + C139643 * C139862)) / C139335;
    const double C1879 =
        (C139801 *
         (3 * C139862 + ae * C139798 +
          C139643 * (2 * C139860 + ae * C139794 +
                     C139643 * (C139858 + ae * C139643 * C139789 +
                                C139643 * (ae * C139789 +
                                           C139643 * std::pow(C139649, 7) *
                                               bs[7] * C139846))))) /
        C139335;
    const double C5509 =
        (C139849 + ae * C139771 + C139643 * C139854 + C139862 * C139940) /
        C139335;
    const double C5510 =
        (2 * C139854 + ae * C139780 + C139643 * C139862 +
         (2 * C139860 + ae * C139794 +
          C139643 * (C139858 + ae * C139643 * C139789 +
                     C139643 * (ae * C139789 + C139643 * std::pow(C139649, 7) *
                                                   bs[7] * C139846))) *
             C139940) /
        C139335;
    const double C16274 =
        (2 * C139801 * C139862 +
         C139801 * (C139862 +
                    (C139858 + ae * C140388 +
                     C139643 * (ae * C139789 + C139643 * std::pow(C139649, 7) *
                                                   bs[7] * C139846)) *
                        C139940)) /
        C139335;
    const double C15423 = C14037 * C13721;
    const double C40627 = C141384 * C13721;
    const double C117256 = C141384 * C13721;
    const double C125499 = C124182 * C13721;
    const double C16553 = C14037 * C16548;
    const double C126486 = C124182 * C16548;
    const double C140271 = C139771 + C140269;
    const double C140325 = ae * C140324;
    const double C13644 = C5965 * C13395;
    const double C14985 = C141309 * C13395;
    const double C15311 = C188 * C13395;
    const double C15422 = C14206 * C13395;
    const double C18931 = C5871 * C13395;
    const double C29549 = C22173 * C13395;
    const double C40059 = C141358 * C13395;
    const double C40626 = C30076 * C13395;
    const double C55173 = C47811 * C13395;
    const double C61847 = C55527 * C13395;
    const double C62633 = C141358 * C13395;
    const double C82371 = C139356 * C13395;
    const double C117255 = C94103 * C13395;
    const double C125498 = C124335 * C13395;
    const double C16793 = C16048 * C14206;
    const double C21408 = C16048 * C5871;
    const double C110533 = C16048 * C55527;
    const double C126697 = C16048 * C124335;
    const double C131205 = C16048 * C139356;
    const double C16445 = C16442 + C16432;
    const double C140749 = C140740 + C140376;
    const double C140378 = C140377 + C140372;
    const double C140487 = ae * C140486;
    const double C18698 = (2 * C140327 + C139801 * C140486) / C139330;
    const double C114185 = C114182 + C21670;
    const double C114015 = C114012 + C114013;
    const double C114127 = C114123 + C114124;
    const double C65743 =
        (2 * C140457 + ae * C140659 + C139801 * C140843 +
         ae * (2 * C140621 +
               C139801 * (C140617 +
                          C139801 * (C139801 * C139758 * C139832 + C140752) +
                          C139801 * C140746 * ae) +
               (C140368 + C140746 * C139940) * ae) +
         C139758 *
             (ae * (2 * C140684 +
                    C139801 *
                        (C139819 + C139801 * (C139801 * C139832 + C139724) +
                         C139801 * C139714 * ae) +
                    (C139681 + C139714 * C139940) * ae) +
              C139758 * (2 * C140819 + ae * (C139776 + C139789 * C139940) +
                         C139801 * (C139897 + ae * C139801 * C139789 +
                                    C139801 * (ae * C139789 +
                                               C139801 * std::pow(C139649, 7) *
                                                   bs[7] * C139888))))) /
        C139335;
    const double C114238 =
        (4 * (2 * C140457 + ae * C140659 + C139801 * C140843) +
         ae * (3 * C140659 + C139801 * C140939) +
         C139801 *
             (3 * C140843 + ae * C140939 +
              C139801 * (2 * C140819 + ae * C140888 +
                         C139801 * (C139897 + ae * C139801 * C139789 +
                                    C139801 * (ae * C139789 +
                                               C139801 * std::pow(C139649, 7) *
                                                   bs[7] * C139888))))) /
        C139335;
    const double C114343 =
        (4 * (2 * C140672 + ae * C140659 + C139801 * C140951) +
         ae * (3 * C140659 + C139801 * C140939) +
         C139801 *
             (3 * C140951 + ae * C140939 +
              C139801 * (2 * C140949 + ae * C140888 +
                         C139801 * (C139934 + ae * C139801 * C139789 +
                                    C139801 * (ae * C139789 +
                                               C139801 * std::pow(C139649, 7) *
                                                   bs[7] * C139925))))) /
        C139335;
    const double C14128 = C14121 + C14122;
    const double C106037 = C106030 + C106031;
    const double C18718 = C18711 + C18712;
    const double C46920 = C46912 + C46913;
    const double C62645 = C62628 + C62629;
    const double C108748 = C108737 + C108738;
    const double C65293 = C65284 + C65285;
    const double C108747 = C108735 + C108736;
    const double C136081 = C136076 + C136077;
    const double C68026 = C68016 + C68017;
    const double C112222 = C112219 + C112220;
    const double C138769 = C138759 + C138760;
    const double C114009 = C110527 + C110528;
    const double C140242 = ae * C140241;
    const double C5451 = (C139807 + C139812 * C139647 + C139801 * C140241 +
                          C139801 * C139694 * ae) /
                         C139330;
    const double C1274 = C1265 + C1266;
    const double C312 = C303 + C304;
    const double C657 = C651 + C652;
    const double C738 = C731 + C732;
    const double C1027 = C1016 + C1017;
    const double C1431 = C1422 + C1423;
    const double C1519 = C1508 + C1509;
    const double C22732 = C22724 + C22725;
    const double C48370 = C48362 + C48363;
    const double C1805 = C1794 + C1795;
    const double C2209 = C2200 + C2201;
    const double C2297 = C2286 + C2287;
    const double C30112 = C30098 + C30099;
    const double C94139 = C94125 + C94126;
    const double C6624 = C6619 + C3423;
    const double C6089 = C6084 + C6085;
    const double C6538 = C6529 + C6530;
    const double C23772 = C23764 + C23765;
    const double C49410 = C49402 + C49403;
    const double C24858 = C24853 + C4081;
    const double C24213 = C24210 + C24211;
    const double C30959 = C30945 + C30946;
    const double C94980 = C94966 + C94967;
    const double C287 =
        (4 * (2 * C139822 + ae * C139823 + C139643 * C139840) +
         ae * (3 * C139823 + C139643 * C139841) +
         C139643 *
             (3 * C139840 + ae * C139841 +
              C139643 * (2 * C139836 + ae * C139837 +
                         C139643 * (C139830 + ae * C139643 * C139832 +
                                    C139643 * (ae * C139832 +
                                               C139643 * std::pow(C139649, 7) *
                                                   bs[7] * C139805))))) /
        C139335;
    const double C1008 =
        (C139758 * (2 * C139822 + ae * C139823 + C139643 * C139840)) / C139335;
    const double C1012 =
        (C139758 *
         (3 * C139840 + ae * C139841 +
          C139643 * (2 * C139836 + ae * C139837 +
                     C139643 * (C139830 + ae * C139643 * C139832 +
                                C139643 * (ae * C139832 +
                                           C139643 * std::pow(C139649, 7) *
                                               bs[7] * C139805))))) /
        C139335;
    const double C3090 =
        (C139811 + ae * C139814 + C139643 * C139822 + C139840 * C139866) /
        C139335;
    const double C3091 =
        (2 * C139822 + ae * C139823 + C139643 * C139840 +
         (2 * C139836 + ae * C139837 +
          C139643 * (C139830 + ae * C139643 * C139832 +
                     C139643 * (ae * C139832 + C139643 * std::pow(C139649, 7) *
                                                   bs[7] * C139805))) *
             C139866) /
        C139335;
    const double C7006 =
        (2 * C139758 * C139840 +
         C139758 * (C139840 +
                    (C139830 + ae * C139643 * C139832 +
                     C139643 * (ae * C139832 + C139643 * std::pow(C139649, 7) *
                                                   bs[7] * C139805)) *
                        C139866)) /
        C139335;
    const double C584 =
        (4 * (2 * C139912 + ae * C139823 + C139643 * C139920) +
         ae * (3 * C139823 + C139643 * C139841) +
         C139643 *
             (3 * C139920 + ae * C139841 +
              C139643 * (2 * C139918 + ae * C139837 +
                         C139643 * (C139916 + ae * C139643 * C139832 +
                                    C139643 * (ae * C139832 +
                                               C139643 * std::pow(C139649, 7) *
                                                   bs[7] * C139904))))) /
        C139335;
    const double C1345 =
        (C139758 * (2 * C139912 + ae * C139823 + C139643 * C139920)) / C139335;
    const double C1349 =
        (C139758 *
         (3 * C139920 + ae * C139841 +
          C139643 * (2 * C139918 + ae * C139837 +
                     C139643 * (C139916 + ae * C139643 * C139832 +
                                C139643 * (ae * C139832 +
                                           C139643 * std::pow(C139649, 7) *
                                               bs[7] * C139904))))) /
        C139335;
    const double C3310 =
        (C139907 + ae * C139814 + C139643 * C139912 + C139920 * C139866) /
        C139335;
    const double C3311 =
        (2 * C139912 + ae * C139823 + C139643 * C139920 +
         (2 * C139918 + ae * C139837 +
          C139643 * (C139916 + ae * C139643 * C139832 +
                     C139643 * (ae * C139832 + C139643 * std::pow(C139649, 7) *
                                                   bs[7] * C139904))) *
             C139866) /
        C139335;
    const double C7531 =
        (2 * C139758 * C139920 +
         C139758 * (C139920 +
                    (C139916 + ae * C139643 * C139832 +
                     C139643 * (ae * C139832 + C139643 * std::pow(C139649, 7) *
                                                   bs[7] * C139904)) *
                        C139866)) /
        C139335;
    const double C7664 = C7658 + C7659;
    const double C140516 = ae * C140515;
    const double C13476 =
        (C139758 * C139814 + C139801 * C140515 + C139801 * C140266 * ae) /
        C139330;
    const double C140572 = C139814 + C140570;
    const double C7423 = C7037 * C5966;
    const double C9947 = C7037 * C5871;
    const double C56207 = C7037 * C55527;
    const double C70149 = C7037 * C68773;
    const double C72558 = C7037 * C139356;
    const double C7784 = C7781 + C7773;
    const double C8475 = C8143 * C5966;
    const double C10785 = C8143 * C5871;
    const double C71127 = C8143 * C68773;
    const double C73354 = C8143 * C139356;
    const double C8807 = C8805 + C8798;
    const double C140512 = ae * C140511;
    const double C13477 = (C139807 + C139812 * C139866 + C139801 * C140511 +
                           C139801 * C140373 * ae) /
                          C139330;
    const double C58386 = C58383 + C10449;
    const double C58054 = C58051 + C58052;
    const double C58279 = C58276 + C58277;
    const double C59070 = C59067 + C11456;
    const double C58622 = C58615 + C58616;
    const double C58927 = C58918 + C58919;
    const double C89941 = C89933 + C89934;
    const double C105343 = C105335 + C105336;
    const double C140624 = C140408 + C140622;
    const double C58218 =
        (4 * (2 * C140411 + ae * C140412 + C139758 * C140783) +
         ae * (3 * C140412 + C139758 * C140784) +
         C139758 *
             (3 * C140783 + ae * C140784 +
              C139758 * (2 * C140779 + ae * C140780 +
                         C139758 * (C139897 + ae * C139758 * C139832 +
                                    C139758 * (ae * C139832 +
                                               C139758 * std::pow(C139649, 7) *
                                                   bs[7] * C139888))))) /
        C139335;
    const double C58330 =
        (4 * (2 * C140425 + ae * C140412 + C139758 * C140793) +
         ae * (3 * C140412 + C139758 * C140784) +
         C139758 *
             (3 * C140793 + ae * C140784 +
              C139758 * (2 * C140791 + ae * C140780 +
                         C139758 * (C139934 + ae * C139758 * C139832 +
                                    C139758 * (ae * C139832 +
                                               C139758 * std::pow(C139649, 7) *
                                                   bs[7] * C139925))))) /
        C139335;
    const double C140963 = C140953 + C140689;
    const double C140691 = C140690 + C140685;
    const double C6087 = C6080 + C6081;
    const double C58048 = C56201 + C56202;
    const double C16319 = C16298 + C16299;
    const double C79116 = C79107 + C79108;
    const double C16315 = C16290 + C16291;
    const double C62877 = C62866 + C62867;
    const double C85797 = C85789 + C85790;
    const double C21585 = C21575 + C21576;
    const double C110682 = C110679 + C110680;
    const double C131370 = C131360 + C131361;
    const double C15312 = C141309 * C13637;
    const double C40480 = C141358 * C13637;
    const double C62997 = C141358 * C13637;
    const double C16433 = C141309 * C16421;
    const double C68272 = C141358 * C19034;
    const double C112432 = C141309 * C19034;
    const double C139005 = C141358 * C19034;
    const double C114183 = C141309 * C21663;
    const double C1192 = C1189 + C1179;
    const double C1970 = C1967 + C1957;
    const double C21674 = C21673 + C21669;
    const double C43962 = C43958 + C43959;
    const double C62063 = C62059 + C62060;
    const double C65752 = C65747 + C65748;
    const double C106488 = C106482 + C106483;
    const double C7554 = C7543 + C7544;
    const double C70273 = C70262 + C70263;
    const double C7552 = C7539 + C7540;
    const double C56539 = C56530 + C56531;
    const double C70271 = C70258 + C70259;
    const double C10292 = C10287 + C10288;
    const double C56540 = C56533 + C56534;
    const double C72886 = C72881 + C72882;
    const double C7774 = C141320 * C7764;
    const double C8799 = C141320 * C8793;
    const double C39768 = C141384 * C8793;
    const double C103261 = C141384 * C8793;
    const double C1526 = C1523 + C1513;
    const double C2304 = C2301 + C2291;
    const double C10453 = C10452 + C10448;
    const double C11462 = C11460 + C11453;
    const double C57938 = C55527 * C57933;
    const double C58464 = C55527 * C58455;
    const double C60317 = C55527 * C60311;
    const double C113952 = C55527 * C113947;
    const double C439 = C188 * C194;
    const double C1962 = C188 * C1691;
    const double C5569 = C188 * C5394;
    const double C114184 = C188 * C114005;
    const double C734 = C275 * C281;
    const double C1518 = C275 * C1007;
    const double C3424 = C275 * C3087;
    const double C58385 = C275 * C58044;
    const double C23662 = C23652 + C23653;
    const double C32099 = C32080 + C32081;
    const double C49300 = C49290 + C49291;
    const double C96112 = C96093 + C96094;
    const double C139362 = C139360 * ae;
    const double C139361 = C139360 * C139340;
    const double C5869 =
        (-C139332 / C139330) / C139336 - (C139360 * be) / C139330;
    const double C56523 = C56303 * C275;
    const double C56520 = C56301 * C275;
    const double C64891 = C56301 * C14204;
    const double C56517 = C56299 * C275;
    const double C62162 = C56299 * C14204;
    const double C56544 = C56538 * C141320;
    const double C62170 = C56538 * C14035;
    const double C87678 = C56538 * C141469;
    const double C103045 = C56538 * C93949;
    const double C133153 = C56538 * C141498;
    const double C56543 = C56537 * C141320;
    const double C90253 = C56537 * C141469;
    const double C105655 = C56537 * C93949;
    const double C56542 = C56536 * C141320;
    const double C64890 = C56536 * C14035;
    const double C87674 = C56536 * C141469;
    const double C103041 = C56536 * C93949;
    const double C135703 = C56536 * C141498;
    const double C56541 = C56535 * C141320;
    const double C62163 = C56535 * C14035;
    const double C87670 = C56535 * C141469;
    const double C103037 = C56535 * C93949;
    const double C133147 = C56535 * C141498;
    const double C58926 = C58709 * C275;
    const double C62164 = C58709 * C14205;
    const double C62850 = C58709 * C47811;
    const double C65859 = C58709 * C14204;
    const double C87671 = C58709 * C30076;
    const double C103038 = C58709 * C94103;
    const double C103694 = C58709 * C5965;
    const double C106258 = C58709 * C5964;
    const double C112357 = C58709 * C188;
    const double C133763 = C58709 * C22173;
    const double C58923 = C58707 * C275;
    const double C64889 = C58707 * C14205;
    const double C65517 = C58707 * C47811;
    const double C87675 = C58707 * C30076;
    const double C88298 = C58707 * C68773;
    const double C103042 = C58707 * C94103;
    const double C103696 = C58707 * C5966;
    const double C106260 = C58707 * C5965;
    const double C136298 = C58707 * C22173;
    const double C58932 = C58929 * C141320;
    const double C62165 = C58929 * C14036;
    const double C65858 = C58929 * C14035;
    const double C87672 = C58929 * C141384;
    const double C91174 = C58929 * C141469;
    const double C103039 = C58929 * C141384;
    const double C106594 = C58929 * C93949;
    const double C133149 = C58929 * C141499;
    const double C136623 = C58929 * C141498;
    const double C58931 = C58928 * C141320;
    const double C64888 = C58928 * C14036;
    const double C87676 = C58928 * C141384;
    const double C91170 = C58928 * C141469;
    const double C103043 = C58928 * C141384;
    const double C106590 = C58928 * C93949;
    const double C135701 = C58928 * C141499;
    const double C62166 = C61849 * C14206;
    const double C62856 = C61849 * C47811;
    const double C65857 = C61849 * C14205;
    const double C91173 = C61849 * C30076;
    const double C106593 = C61849 * C94103;
    const double C108904 = C61849 * C5965;
    const double C112359 = C61849 * C188;
    const double C133150 = C61849 * C124335;
    const double C133767 = C61849 * C22173;
    const double C62883 = C62875 * C47710;
    const double C88301 = C62875 * C141496;
    const double C103699 = C62875 * C5865;
    const double C110674 = C62875 * C141309;
    const double C133770 = C62875 * C141468;
    const double C62881 = C62873 * C47710;
    const double C93475 = C62873 * C141496;
    const double C108905 = C62873 * C5865;
    const double C110670 = C62873 * C141309;
    const double C133766 = C62873 * C141468;
    const double C108906 = C62872 * C5964;
    const double C110669 = C62872 * C188;
    const double C62879 = C62871 * C47710;
    const double C88295 = C62871 * C141496;
    const double C103693 = C62871 * C5865;
    const double C110668 = C62871 * C141309;
    const double C133762 = C62871 * C141468;
    const double C103692 = C62870 * C5964;
    const double C110667 = C62870 * C188;
    const double C65855 = C65524 * C14206;
    const double C68184 = C65524 * C47811;
    const double C112361 = C65524 * C188;
    const double C136620 = C65524 * C124335;
    const double C138924 = C65524 * C22173;
    const double C110671 = C68191 * C188;
    const double C68193 = C68190 * C47710;
    const double C110672 = C68190 * C141309;
    const double C138925 = C68190 * C141468;
    const double C139426 = C139425 * C139340;
    const double C139517 = C139425 * ae;
    const double C22172 = (C139425 * ae) / C139330 - C139412 / C139345;
    const double C47810 =
        (-C139412 / C139330) / C139336 - (C139425 * be) / C139330;
    const double C69327 = C69318 + C69319;
    const double C69326 = C69316 + C69317;
    const double C70380 = C70374 + C70375;
    const double C88097 = C88090 + C88091;
    const double C90635 = C90628 + C90629;
    const double C93317 = C93305 + C93306;
    const double C16449 = C16446 * C5863;
    const double C32204 = C16446 * C141494;
    const double C96217 = C16446 * C47707;
    const double C110751 = C16446 * C141216;
    const double C126379 = C16446 * C141452;
    const double C139452 = C139451 * C139340;
    const double C139588 = C139451 * ae;
    const double C30075 = (C139451 * ae) / C139330 - C139438 / C139345;
    const double C94102 =
        (-C139438 / C139330) / C139336 - (C139451 * be) / C139330;
    const double C124610 = C124601 + C124602;
    const double C124609 = C124599 + C124600;
    const double C132744 = C132737 + C132738;
    const double C133047 = C133043 + C133044;
    const double C135386 = C135374 + C135375;
    const double C136192 = C136180 + C136181;
    const double C747 = C743 * C141309;
    const double C6615 = C743 * C5865;
    const double C22811 = C743 * C141468;
    const double C48449 = C743 * C47710;
    const double C69404 = C743 * C141496;
    const double C936 = C928 + C929;
    const double C5996 = C5976 + C5977;
    const double C6900 = C6890 + C6891;
    const double C22202 = C22181 + C22182;
    const double C47840 = C47819 + C47820;
    const double C7178 = C7149 + C7150;
    const double C56306 = C56289 + C56290;
    const double C69915 = C69886 + C69887;
    const double C1808 = C1800 + C1801;
    const double C14236 = C14216 + C14217;
    const double C16171 = C16161 + C16162;
    const double C30105 = C30084 + C30085;
    const double C94132 = C94111 + C94112;
    const double C16679 = C16664 + C16665;
    const double C63224 = C63218 + C63219;
    const double C79518 = C79511 + C79512;
    const double C7025 = C1030 * C5863;
    const double C7013 = C1030 * C141221;
    const double C23179 = C1030 * C141494;
    const double C23175 = C1030 * C141495;
    const double C48817 = C1030 * C47707;
    const double C48813 = C1030 * C47708;
    const double C56204 = C1030 * C141216;
    const double C69775 = C1030 * C141452;
    const double C69769 = C1030 * C141221;
    const double C56526 = C56305 * C275;
    const double C62169 = C56305 * C14204;
    const double C16036 = C1714 * C5863;
    const double C16024 = C1714 * C141221;
    const double C31845 = C1714 * C141494;
    const double C31841 = C1714 * C141495;
    const double C95858 = C1714 * C47707;
    const double C95854 = C1714 * C47708;
    const double C110530 = C1714 * C141216;
    const double C126048 = C1714 * C141452;
    const double C126042 = C1714 * C141221;
    const double C103698 = C62874 * C5964;
    const double C110673 = C62874 * C188;
    const double C6252 = C5867 * C3197;
    const double C7297 = C5866 * C3197;
    const double C23424 = C141358 * C3197;
    const double C49062 = C141358 * C3197;
    const double C69047 = C68674 * C3197;
    const double C70031 = C141497 * C3197;
    const double C8690 = C5866 * C4005;
    const double C15633 = C141309 * C4005;
    const double C24748 = C141358 * C4005;
    const double C39629 = C141468 * C4005;
    const double C50377 = C141358 * C4005;
    const double C71331 = C141497 * C4005;
    const double C78412 = C47710 * C4005;
    const double C5994 = C5972 + C5973;
    const double C6371 = C6362 + C6363;
    const double C6902 = C6894 + C6895;
    const double C23072 = C23062 + C23063;
    const double C48710 = C48700 + C48701;
    const double C68801 = C68779 + C68780;
    const double C15318 = C15314 + C3796;
    const double C8028 = C8020 + C8021;
    const double C8482 = C8476 + C8477;
    const double C14993 = C14988 + C14989;
    const double C15429 = C15424 + C15425;
    const double C24108 = C24098 + C24099;
    const double C31274 = C31268 + C31269;
    const double C49746 = C49736 + C49737;
    const double C95290 = C95284 + C95285;
    const double C14748 = C14037 * C5782;
    const double C16908 = C14036 * C5782;
    const double C32648 = C141384 * C5782;
    const double C96661 = C141384 * C5782;
    const double C124861 = C124182 * C5782;
    const double C126805 = C141499 * C5782;
    const double C14234 = C14212 + C14213;
    const double C14656 = C14647 + C14648;
    const double C16173 = C16165 + C16166;
    const double C31970 = C31960 + C31961;
    const double C95983 = C95973 + C95974;
    const double C124363 = C124341 + C124342;
    const double C6627 = C6625 + C6618;
    const double C8810 = C8808 + C8801;
    const double C14400 = C14398 + C14393;
    const double C139678 = ae * C139677;
    const double C117 =
        (2 * C139657 + C139643 * C139677 + (C139646 + C139660 * C139647) * ae) /
        C139330;
    const double C826 = (C139758 * C139677) / C139330;
    const double C1604 = (C139801 * C139677) / C139330;
    const double C6751 = C141221 * C831;
    const double C22928 = C141495 * C831;
    const double C22921 = C22071 * C831;
    const double C48566 = C47708 * C831;
    const double C48559 = C47709 * C831;
    const double C69521 = C141221 * C831;
    const double C5979 = C5867 * C3031;
    const double C6889 = C5866 * C3031;
    const double C23059 = C141358 * C3031;
    const double C48697 = C141358 * C3031;
    const double C68786 = C68674 * C3031;
    const double C69653 = C141497 * C3031;
    const double C7172 = C5863 * C3143;
    const double C7158 = C141221 * C3143;
    const double C26067 = C141495 * C3143;
    const double C51691 = C47708 * C3143;
    const double C56294 = C141216 * C3143;
    const double C69909 = C141452 * C3143;
    const double C69895 = C141221 * C3143;
    const double C8139 = C141320 * C3651;
    const double C15097 = C14036 * C3651;
    const double C30950 = C141384 * C3651;
    const double C40205 = C141469 * C3651;
    const double C94971 = C141384 * C3651;
    const double C116856 = C93949 * C3651;
    const double C125189 = C141499 * C3651;
    const double C11245 = C141221 * C3935;
    const double C27204 = C141495 * C3935;
    const double C39491 = C5863 * C3935;
    const double C52828 = C47708 * C3935;
    const double C62173 = C141216 * C3935;
    const double C73788 = C141221 * C3935;
    const double C78274 = C141452 * C3935;
    const double C8025 = C8014 + C8015;
    const double C10926 = C10916 + C10917;
    const double C14992 = C14986 + C14987;
    const double C24106 = C24094 + C24095;
    const double C49744 = C49732 + C49733;
    const double C61851 = C61841 + C61842;
    const double C73481 = C73471 + C73472;
    const double C15884 = C141221 * C1609;
    const double C31716 = C141495 * C1609;
    const double C31712 = C22071 * C1609;
    const double C78682 = C141221 * C1609;
    const double C95729 = C47708 * C1609;
    const double C95725 = C47709 * C1609;
    const double C10913 = C141221 * C3721;
    const double C26886 = C141495 * C3721;
    const double C39069 = C5863 * C3721;
    const double C52510 = C47708 * C3721;
    const double C61844 = C141216 * C3721;
    const double C73468 = C141221 * C3721;
    const double C77866 = C141452 * C3721;
    const double C14219 = C14037 * C5454;
    const double C16160 = C14036 * C5454;
    const double C31957 = C141384 * C5454;
    const double C95970 = C141384 * C5454;
    const double C124348 = C124182 * C5454;
    const double C126156 = C141499 * C5454;
    const double C16675 = C5863 * C5674;
    const double C16669 = C141221 * C5674;
    const double C37450 = C141495 * C5674;
    const double C63221 = C141216 * C5674;
    const double C86096 = C141221 * C5674;
    const double C101462 = C47708 * C5674;
    const double C126593 = C141452 * C5674;
    const double C56529 = C56307 * C275;
    const double C110675 = C62876 * C188;
    const double C140283 = ae * C140282;
    const double C6880 =
        (2 * C140115 + C139758 * C140282 + (C139646 + C139660 * C139866) * ae) /
        C139330;
    const double C8006 = (C139801 * C140282) / C139330;
    const double C43817 = C141358 * C8345;
    const double C65627 = C141358 * C8345;
    const double C88409 = C68674 * C8345;
    const double C90951 = C141497 * C8345;
    const double C103807 = C5867 * C8345;
    const double C106365 = C5866 * C8345;
    const double C19362 = C141309 * C13875;
    const double C47527 = C141358 * C13875;
    const double C63331 = C141358 * C13875;
    const double C65966 = C47710 * C13875;
    const double C93794 = C141497 * C13875;
    const double C109224 = C5866 * C13875;
    const double C136724 = C141468 * C13875;
    const double C140584 = ae * C140583;
    const double C16151 =
        (2 * C140233 + C139801 * C140583 + (C139646 + C139660 * C139940) * ae) /
        C139330;
    const double C44363 = C141384 * C13953;
    const double C62384 = C14037 * C13953;
    const double C66075 = C14036 * C13953;
    const double C106806 = C141384 * C13953;
    const double C133359 = C124182 * C13953;
    const double C136830 = C141499 * C13953;
    const double C43548 = C43542 + C43543;
    const double C61735 = C61725 + C61726;
    const double C62177 = C62167 + C62168;
    const double C65410 = C65402 + C65403;
    const double C106158 = C106148 + C106149;
    const double C132741 = C132731 + C132732;
    const double C19363 = C19359 + C19360;
    const double C40903 = C40894 + C40895;
    const double C63337 = C63326 + C63327;
    const double C104118 = C104113 + C104114;
    const double C106700 = C106694 + C106695;
    const double C19047 = C19045 + C3795;
    const double C112213 = C18715 * C55527;
    const double C62851 = C58708 * C141358;
    const double C65516 = C58708 * C47710;
    const double C88297 = C58708 * C141497;
    const double C90845 = C58708 * C141496;
    const double C103695 = C58708 * C5866;
    const double C106259 = C58708 * C5865;
    const double C112358 = C58708 * C141309;
    const double C133764 = C58708 * C141358;
    const double C136297 = C58708 * C141468;
    const double C19048 = C19046 + C15313;
    const double C112215 = C18717 * C55527;
    const double C62857 = C61850 * C141358;
    const double C65520 = C61850 * C47710;
    const double C93473 = C61850 * C141497;
    const double C108903 = C61850 * C5866;
    const double C112360 = C61850 * C141309;
    const double C133768 = C61850 * C141358;
    const double C136301 = C61850 * C141468;
    const double C16435 = C1971 * C5863;
    const double C16427 = C1971 * C141221;
    const double C32207 = C1971 * C141494;
    const double C32205 = C1971 * C141495;
    const double C96220 = C1971 * C47707;
    const double C96218 = C1971 * C47708;
    const double C110754 = C1971 * C141216;
    const double C126383 = C1971 * C141452;
    const double C126380 = C1971 * C141221;
    const double C16450 = C16447 * C5863;
    const double C37298 = C16447 * C141494;
    const double C101310 = C16447 * C47707;
    const double C110752 = C16447 * C141216;
    const double C126381 = C16447 * C141452;
    const double C748 = C744 * C141309;
    const double C6622 = C744 * C5865;
    const double C22813 = C744 * C141468;
    const double C48451 = C744 * C47710;
    const double C69409 = C744 * C141496;
    const double C749 = C745 * C141309;
    const double C22816 = C745 * C141468;
    const double C48454 = C745 * C47710;
    const double C1530 = C1527 * C141309;
    const double C6616 = C1527 * C5866;
    const double C7776 = C1527 * C5865;
    const double C22812 = C1527 * C141358;
    const double C23877 = C1527 * C141468;
    const double C48450 = C1527 * C141358;
    const double C49515 = C1527 * C47710;
    const double C69405 = C1527 * C141497;
    const double C70483 = C1527 * C141496;
    const double C2308 = C2305 * C141309;
    const double C8802 = C2305 * C5865;
    const double C24857 = C2305 * C141468;
    const double C50485 = C2305 * C47710;
    const double C71437 = C2305 * C141496;
    const double C139707 = ae * C139705;
    const double C139706 = C139643 * C139705;
    const double C139717 = 3 * C139705;
    const double C139960 = C139758 * C139705;
    const double C140024 = C139801 * C139705;
    const double C2966 = (C139677 + C139705 * C139866) / C139330;
    const double C5331 = (C139677 + C139705 * C139940) / C139330;
    const double C8013 = C5867 * C8008;
    const double C38765 = C141358 * C8008;
    const double C70693 = C68674 * C8008;
    const double C77590 = C141358 * C8008;
    const double C3500 =
        (C139801 * C139959 + C140149 + C140149 +
         C139643 * (2 * ae * C139801 * C139970 + C139643 * C139801 * C139971)) /
        C139335;
    const double C8243 = (C139801 * C139854 + C140149 +
                          C139758 * (C140027 + C139758 * C139801 * C139860)) /
                         C139335;
    const double C13480 = (C139758 * C139822 + C140149 +
                           C139801 * (C139963 + C139801 * C139758 * C139836)) /
                          C139335;
    const double C13798 = (C139758 * C139912 + C140149 +
                           C139801 * (C139963 + C139801 * C139758 * C139918)) /
                          C139335;
    const double C18934 = C18927 + C18928;
    const double C61853 = C61845 + C61846;
    const double C82383 = C82375 + C82376;
    const double C2970 = (C139672 + C139698 * C139866 + C140091 + C140091 +
                          C139643 * (2 * ae * (C139668 + C139692 * C139866) +
                                     C139643 * (C139698 + C139735 * C139866))) /
                         C139335;
    const double C6882 = (2 * (C139675 + C139758 * C139779) + C140091 +
                          C139758 * (C139779 + C139963 +
                                     C139758 * (C139702 + C139758 * C139793))) /
                         C139335;
    const double C7139 = (2 * (C139675 + C139758 * C139854) + C140091 +
                          C139758 * (C139854 + C139963 +
                                     C139758 * (C139702 + C139758 * C139860))) /
                         C139335;
    const double C8130 =
        (C140091 + C139801 * (C139822 + C139836 * C139866)) / C139335;
    const double C8582 =
        (C140091 + C139801 * (C139912 + C139918 * C139866)) / C139335;
    const double C6746 = C5871 * C6731;
    const double C6886 = C5966 * C6731;
    const double C7020 = C275 * C6731;
    const double C10041 = C141221 * C6731;
    const double C55533 = C55527 * C6731;
    const double C56296 = C141216 * C6731;
    const double C69516 = C139356 * C6731;
    const double C69650 = C68773 * C6731;
    const double C72644 = C141221 * C6731;
    const double C7896 = C5871 * C7889;
    const double C8012 = C5966 * C7889;
    const double C8134 = C275 * C7889;
    const double C10909 = C141221 * C7889;
    const double C38764 = C22173 * C7889;
    const double C38916 = C30076 * C7889;
    const double C56751 = C55527 * C7889;
    const double C70582 = C139356 * C7889;
    const double C70692 = C68773 * C7889;
    const double C73464 = C141221 * C7889;
    const double C77589 = C47811 * C7889;
    const double C87370 = C141216 * C7889;
    const double C102612 = C94103 * C7889;
    const double C5335 = (C139672 + C139698 * C139940 + C140193 + C140193 +
                          C139643 * (2 * ae * (C139668 + C139692 * C139940) +
                                     C139643 * (C139698 + C139735 * C139940))) /
                         C139335;
    const double C13558 =
        (C140193 + C139758 * (C139854 + C139860 * C139940)) / C139335;
    const double C16153 =
        (2 * (C139675 + C139801 * C139822) + C140193 +
         C139801 *
             (C139822 + C140027 + C139801 * (C139702 + C139801 * C139836))) /
        C139335;
    const double C16658 =
        (2 * (C139675 + C139801 * C139912) + C140193 +
         C139801 *
             (C139912 + C140027 + C139801 * (C139702 + C139801 * C139918))) /
        C139335;
    const double C15879 = C5871 * C15864;
    const double C16031 = C188 * C15864;
    const double C16157 = C14206 * C15864;
    const double C21580 = C141221 * C15864;
    const double C62502 = C55527 * C15864;
    const double C85486 = C139356 * C15864;
    const double C110678 = C141216 * C15864;
    const double C126153 = C124335 * C15864;
    const double C131365 = C141221 * C15864;
    const double C58055 = C58053 * C141216;
    const double C58278 = C58113 * C275;
    const double C58623 = C58621 * C141216;
    const double C58920 = C58705 * C275;
    const double C90252 = C58705 * C30076;
    const double C90848 = C58705 * C68773;
    const double C105654 = C58705 * C94103;
    const double C106262 = C58705 * C5966;
    const double C64887 = C64649 * C14206;
    const double C65521 = C64649 * C47811;
    const double C91169 = C64649 * C30076;
    const double C93472 = C64649 * C68773;
    const double C106589 = C64649 * C94103;
    const double C108902 = C64649 * C5966;
    const double C135700 = C64649 * C124335;
    const double C136302 = C64649 * C22173;
    const double C114016 = C114014 * C141216;
    const double C114130 = C114128 * C188;
    const double C140127 = C140126 + C139740;
    const double C140245 = C140244 + C139740;
    const double C3867 =
        (ae * (C139801 * C139841 + C139740) +
         C139758 *
             (ae * C139798 +
              C139801 * (2 * C139643 * C139897 +
                         C139643 * (C139897 + std::pow(C139649, 7) * bs[7] *
                                                  C139888 * C139647)))) /
        C139335;
    const double C1184 = C188 * C913;
    const double C22458 = C22173 * C913;
    const double C48096 = C47811 * C913;
    const double C2296 = C275 * C1785;
    const double C30620 = C30076 * C1785;
    const double C94647 = C94103 * C1785;
    const double C4082 = C275 * C3649;
    const double C31596 = C30076 * C3649;
    const double C95609 = C94103 * C3649;
    const double C140291 = C139780 + C140289;
    const double C140331 = ae * C140330;
    const double C140592 = C139823 + C140590;
    const double C140536 = ae * C140535;
    const double C15091 =
        (C139758 * C139823 + C139801 * C140535 + C139801 * C140286 * ae) /
        C139330;
    const double C140401 = C140400 + C140393;
    const double C140492 = ae * C140491;
    const double C18699 = (2 * C140324 + C139801 * C140491) / C139330;
    const double C140712 = C140711 + C140706;
    const double C140520 = ae * C140519;
    const double C13478 = (C139814 + C139825 * C139866 + C139801 * C140519 +
                           C139801 * C140394 * ae) /
                          C139330;
    const double C140636 = C140414 + C140634;
    const double C139748 = ae * C139745;
    const double C139747 = C139643 * C139745;
    const double C139973 = C139758 * C139745;
    const double C140037 = C139801 * C139745;
    const double C140094 = C139745 * C139866;
    const double C140196 = C139745 * C139940;
    const double C140524 = ae * C140523;
    const double C18585 = (2 * C140148 + C139801 * C140523) / C139330;
    const double C10680 =
        (C139801 *
         (2 * C140354 + C140100 +
          C139758 *
              (C139793 + C139979 +
               C139758 * (C139741 + C139758 * (ae * C139789 +
                                               C139643 * std::pow(C139649, 7) *
                                                   bs[7] * C139762))))) /
        C139335;
    const double C140252 = C140250 + C140251;
    const double C140313 = ae * C140312;
    const double C13319 = C5871 * C13308;
    const double C61512 = C55527 * C13308;
    const double C75834 = C139356 * C13308;
    const double C13560 =
        (C139854 + C139860 * C139940 + ae * (C139961 + C139974 * C139940) +
         C139758 * (C140202 +
                    C139758 * (C139860 +
                               (ae * C139789 + C139643 * std::pow(C139649, 7) *
                                                   bs[7] * C139846) *
                                   C139940))) /
        C139335;
    const double C140542 = C140540 + C140541;
    const double C140765 = ae * C140762;
    const double C140764 = C139758 * C140762;
    const double C140808 = C139801 * C140762;
    const double C140833 = C140762 * C139940;
    const double C140857 = C140855 + C140856;
    const double C140976 = ae * C140974;
    const double C140975 = C139801 * C140974;
    const double C139746 = C139720 + C139744;
    const double C9777 = C141221 * C6734;
    const double C56039 = C141216 * C6734;
    const double C72396 = C141221 * C6734;
    const double C10559 = C141221 * C7892;
    const double C73136 = C141221 * C7892;
    const double C87070 = C141216 * C7892;
    const double C57937 = C141216 * C9772;
    const double C58459 = C141216 * C10555;
    const double C64397 = C141216 * C13311;
    const double C21317 = C141221 * C15867;
    const double C110452 = C141216 * C15867;
    const double C131118 = C141221 * C15867;
    const double C113951 = C141216 * C21312;
    const double C1176 = C141309 * C1168;
    const double C22453 = C141358 * C1168;
    const double C48091 = C141358 * C1168;
    const double C1954 = C141309 * C1946;
    const double C24412 = C141358 * C3792;
    const double C31162 = C141309 * C3792;
    const double C50044 = C141358 * C3792;
    const double C14395 = C141309 * C5563;
    const double C1510 = C141320 * C1502;
    const double C2288 = C141320 * C2280;
    const double C30615 = C141384 * C2280;
    const double C94642 = C141384 * C2280;
    const double C6620 = C141320 * C3418;
    const double C24854 = C141320 * C4076;
    const double C31583 = C141384 * C4076;
    const double C95596 = C141384 * C4076;
    const double C140848 = C140847 + C140763;
    const double C58846 =
        (3 * (C140457 + C140623 + C139758 * C140821) +
         ae * (C139801 * C140784 + C140763) +
         C139758 *
             (2 * C140821 + ae * (C139801 * C140780 + C140756) +
              C139758 *
                  (C140819 + ae * (C139801 * C139758 * C139832 + C140752) +
                   C139758 * (ae * (C139801 * C139832 + C139724) +
                              C139758 * (ae * C139789 +
                                         C139801 * std::pow(C139649, 7) *
                                             bs[7] * C139888))))) /
        C139335;
    const double C59069 = C275 * C58610;
    const double C90411 = C30076 * C58610;
    const double C105813 = C94103 * C58610;
    const double C140869 = C140412 + C140867;
    const double C140913 = C140912 + C140905;
    const double C3198 = (C139871 + C139876 * C139647 + C140124 + C140124 +
                          C139758 * (2 * ae * C139780 + C139758 * C139883)) /
                         C139335;
    const double C4006 =
        (C140124 + C139801 * (ae * C139823 + C139758 * C139936)) / C139335;
    const double C3203 = C188 * C3028;
    const double C5987 = C5867 * C3028;
    const double C6254 = C5966 * C3028;
    const double C6364 = C275 * C3028;
    const double C7173 = C5871 * C3028;
    const double C7305 = C5965 * C3028;
    const double C23055 = C141358 * C3028;
    const double C23417 = C22173 * C3028;
    const double C26064 = C22079 * C3028;
    const double C48693 = C141358 * C3028;
    const double C49055 = C47811 * C3028;
    const double C51688 = C47717 * C3028;
    const double C68794 = C68674 * C3028;
    const double C69049 = C68773 * C3028;
    const double C69910 = C139356 * C3028;
    const double C3797 = C188 * C3574;
    const double C8361 = C5965 * C3574;
    const double C24091 = C141358 * C3574;
    const double C24411 = C22173 * C3574;
    const double C24536 = C275 * C3574;
    const double C26883 = C22079 * C3574;
    const double C30840 = C141309 * C3574;
    const double C31264 = C30076 * C3574;
    const double C39070 = C5871 * C3574;
    const double C49729 = C141358 * C3574;
    const double C50043 = C47811 * C3574;
    const double C52507 = C47717 * C3574;
    const double C77867 = C139356 * C3574;
    const double C95280 = C94103 * C3574;
    const double C15316 = C188 * C14979;
    const double C29551 = C22173 * C14979;
    const double C55175 = C47811 * C14979;
    const double C653 = C225 * C275;
    const double C447 = C443 + C437;
    const double C527 = C523 * C141309;
    const double C1424 = C933 * C275;
    const double C1188 = C1185 + C1175;
    const double C2202 = C1711 * C275;
    const double C30517 = C1711 * C30076;
    const double C31848 = C1711 * C22079;
    const double C94544 = C1711 * C94103;
    const double C95861 = C1711 * C47717;
    const double C1966 = C1963 + C1953;
    const double C2055 = C2052 * C141309;
    const double C14399 = C14397 + C5568;
    const double C14651 = C14130 * C14206;
    const double C16041 = C14130 * C5871;
    const double C32535 = C14130 * C30076;
    const double C37051 = C14130 * C22079;
    const double C96548 = C14130 * C94103;
    const double C101063 = C14130 * C47717;
    const double C124768 = C14130 * C124335;
    const double C126053 = C14130 * C139356;
    const double C14983 = C141309 * C13399;
    const double C40055 = C141358 * C13399;
    const double C62637 = C141358 * C13399;
    const double C1699 = C141309 * C1692;
    const double C14124 = C141309 * C5397;
    const double C32093 = C22071 * C1875;
    const double C96106 = C47709 * C1875;
    const double C16307 = C141221 * C5509;
    const double C37205 = C22071 * C5509;
    const double C101217 = C47709 * C5509;
    const double C126276 = C141221 * C5509;
    const double C16558 = C16552 + C16553;
    const double C126491 = C126485 + C126486;
    const double C140272 = C140271 + C140268;
    const double C8344 = (C139801 * C140264 + C140325 + C140325 +
                          C139758 * (2 * ae * C139801 * C139782 +
                                     C139758 * C139801 * C139643 * C139881)) /
                         C139335;
    const double C13877 = (ae * C139814 + C139758 * C140302 + C140325 +
                           C139801 * (C140270 + C139801 * C140429)) /
                          C139335;
    const double C14991 = C14984 + C14985;
    const double C15317 = C15310 + C15311;
    const double C15428 = C15422 + C15423;
    const double C40070 = C40058 + C40059;
    const double C40630 = C40626 + C40627;
    const double C62647 = C62632 + C62633;
    const double C117259 = C117255 + C117256;
    const double C125504 = C125498 + C125499;
    const double C140759 = C140749 + C140754;
    const double C140380 = ae * C140378;
    const double C140379 = C139758 * C140378;
    const double C140445 = C139801 * C140378;
    const double C140743 = 3 * C140378;
    const double C13394 = (C140282 + C140378 * C139940) / C139330;
    const double C13636 =
        (C139871 + C139876 * C139940 + C140487 + C140487 +
         C139758 * (2 * ae * (C139769 + C139776 * C139940) +
                    C139758 * (C139876 + C139881 * C139940))) /
        C139335;
    const double C19356 =
        (2 * (C140280 + C139801 * C140425) + C140487 +
         C139801 *
             (C140425 + C140448 +
              C139801 * (C140376 + C139801 * (C139826 + C139758 * C139934)))) /
        C139335;
    const double C19043 = C188 * C18698;
    const double C47223 = C22173 * C18698;
    const double C62992 = C47811 * C18698;
    const double C65511 = C55527 * C18698;
    const double C65745 = C14206 * C18698;
    const double C68021 = C141358 * C18698;
    const double C108988 = C5965 * C18698;
    const double C112218 = C141309 * C18698;
    const double C136512 = C124335 * C18698;
    const double C138764 = C141358 * C18698;
    const double C114186 = C114185 + C21670;
    const double C114017 = C114015 * C55527;
    const double C114129 = C114127 * C141309;
    const double C16040 = C14128 * C5863;
    const double C16030 = C14128 * C141221;
    const double C37052 = C14128 * C141495;
    const double C101064 = C14128 * C47708;
    const double C110532 = C14128 * C141216;
    const double C126052 = C14128 * C141452;
    const double C126046 = C14128 * C141221;
    const double C18722 = C18718 * C5863;
    const double C112216 = C18718 * C141216;
    const double C128579 = C18718 * C141452;
    const double C112224 = C112222 * C141216;
    const double C5783 = (C139945 + C139950 * C139647 + C140242 + C140242 +
                          C139801 * (2 * ae * C139823 + C139801 * C139957)) /
                         C139335;
    const double C5788 = C275 * C5451;
    const double C14227 = C14037 * C5451;
    const double C14649 = C188 * C5451;
    const double C14750 = C14206 * C5451;
    const double C16676 = C5871 * C5451;
    const double C16916 = C14205 * C5451;
    const double C31953 = C141384 * C5451;
    const double C32641 = C30076 * C5451;
    const double C37447 = C22079 * C5451;
    const double C95966 = C141384 * C5451;
    const double C96654 = C94103 * C5451;
    const double C101459 = C47717 * C5451;
    const double C124356 = C124182 * C5451;
    const double C124863 = C124335 * C5451;
    const double C126594 = C139356 * C5451;
    const double C1277 = C1274 * C141309;
    const double C22560 = C1274 * C141358;
    const double C48198 = C1274 * C141358;
    const double C519 = C312 * C188;
    const double C661 = C657 * C141320;
    const double C742 = C738 + C732;
    const double C1267 = C1027 * C188;
    const double C22561 = C1027 * C22173;
    const double C23182 = C1027 * C22079;
    const double C48199 = C1027 * C47811;
    const double C48820 = C1027 * C47717;
    const double C1434 = C1431 * C141320;
    const double C1522 = C1519 + C1509;
    const double C2045 = C1805 * C188;
    const double C2212 = C2209 * C141320;
    const double C30516 = C2209 * C141384;
    const double C94543 = C2209 * C141384;
    const double C2300 = C2297 + C2287;
    const double C6626 = C6624 + C3423;
    const double C6366 = C6089 * C5966;
    const double C7030 = C6089 * C5871;
    const double C23543 = C6089 * C22173;
    const double C25985 = C6089 * C22079;
    const double C49181 = C6089 * C47811;
    const double C51609 = C6089 * C47717;
    const double C69159 = C6089 * C68773;
    const double C69780 = C6089 * C139356;
    const double C24859 = C24858 + C4081;
    const double C24538 = C24213 * C22173;
    const double C26780 = C24213 * C22079;
    const double C50169 = C24213 * C47811;
    const double C52404 = C24213 * C47717;
    const double C1015 = C141320 * C1008;
    const double C6083 = C141320 * C3090;
    const double C23659 = C22071 * C1345;
    const double C49297 = C47709 * C1345;
    const double C7548 = C141221 * C3310;
    const double C26311 = C22071 * C3310;
    const double C51935 = C47709 * C3310;
    const double C70267 = C141221 * C3310;
    const double C13955 =
        (C139758 * C140306 + C140516 + C140516 +
         C139801 * (2 * ae * C140414 + C139801 * C139758 * C140432)) /
        C139335;
    const double C13960 = C275 * C13476;
    const double C15101 = C14037 * C13476;
    const double C15629 = C188 * C13476;
    const double C15741 = C14206 * C13476;
    const double C19255 = C5871 * C13476;
    const double C19469 = C14205 * C13476;
    const double C35117 = C30076 * C13476;
    const double C40207 = C141384 * C13476;
    const double C40897 = C22173 * C13476;
    const double C62175 = C55527 * C13476;
    const double C63334 = C47811 * C13476;
    const double C82776 = C139356 * C13476;
    const double C99129 = C94103 * C13476;
    const double C116858 = C141384 * C13476;
    const double C125193 = C124182 * C13476;
    const double C125808 = C124335 * C13476;
    const double C140573 = C140572 + C140569;
    const double C13954 =
        (C139945 + C139950 * C139866 + C140512 + C140512 +
         C139801 *
             (2 * ae * C140412 + C139801 * (C139950 + C139955 * C139866))) /
        C139335;
    const double C13959 = C275 * C13477;
    const double C18481 = C14206 * C13477;
    const double C44367 = C30076 * C13477;
    const double C64559 = C14037 * C13477;
    const double C64885 = C55527 * C13477;
    const double C65967 = C47811 * C13477;
    const double C66079 = C14205 * C13477;
    const double C90739 = C141384 * C13477;
    const double C93791 = C68773 * C13477;
    const double C104218 = C94103 * C13477;
    const double C106141 = C141384 * C13477;
    const double C109221 = C5966 * C13477;
    const double C128374 = C124335 * C13477;
    const double C135381 = C124182 * C13477;
    const double C136725 = C22173 * C13477;
    const double C58387 = C58386 + C10449;
    const double C58056 = C58054 * C55527;
    const double C58280 = C58279 * C141320;
    const double C59071 = C59070 + C11456;
    const double C58624 = C58622 * C55527;
    const double C58930 = C58927 * C141320;
    const double C90251 = C58927 * C141384;
    const double C105653 = C58927 * C141384;
    const double C140625 = C140624 + C140620;
    const double C140972 = C140963 + C140968;
    const double C140693 = ae * C140691;
    const double C140692 = C139801 * C140691;
    const double C140956 = 3 * C140691;
    const double C68357 =
        (ae * (3 * C140691 +
               C139801 * (2 * C140684 +
                          C139801 * (C139819 +
                                     C139801 * (C139801 * C139832 + C139724) +
                                     C139801 * C139714 * ae) +
                          C140887 * ae) +
               (2 * C140681 + C139801 * C140887) * ae) +
         C139758 *
             (3 * C140843 + ae * (2 * C140805 + C139801 * C140888) +
              C139801 * (2 * C140819 + ae * C140888 +
                         C139801 * (C139897 + ae * C139801 * C139789 +
                                    C139801 * (ae * C139789 +
                                               C139801 * std::pow(C139649, 7) *
                                                   bs[7] * C139888))))) /
        C139335;
    const double C7029 = C6087 * C5863;
    const double C7019 = C6087 * C141221;
    const double C25986 = C6087 * C141495;
    const double C51610 = C6087 * C47708;
    const double C56206 = C6087 * C141216;
    const double C69779 = C6087 * C141452;
    const double C69773 = C6087 * C141221;
    const double C62885 = C62877 * C47710;
    const double C110676 = C62877 * C141309;
    const double C133774 = C62877 * C141468;
    const double C110684 = C110682 * C141309;
    const double C16448 = C16445 + C16433;
    const double C16436 = C1970 * C141221;
    const double C32208 = C1970 * C141495;
    const double C32206 = C1970 * C22071;
    const double C96221 = C1970 * C47708;
    const double C96219 = C1970 * C47709;
    const double C126384 = C1970 * C141221;
    const double C21675 = C21674 * C5863;
    const double C110753 = C21674 * C141216;
    const double C131451 = C21674 * C141452;
    const double C56545 = C56539 * C141320;
    const double C87682 = C56539 * C141469;
    const double C103049 = C56539 * C93949;
    const double C56546 = C56540 * C141320;
    const double C7787 = C7784 + C7774;
    const double C8809 = C8807 + C8799;
    const double C1529 = C1526 * C141309;
    const double C6621 = C1526 * C5866;
    const double C22814 = C1526 * C141358;
    const double C23875 = C1526 * C141468;
    const double C48452 = C1526 * C141358;
    const double C49513 = C1526 * C47710;
    const double C69408 = C1526 * C141497;
    const double C2307 = C2304 * C141309;
    const double C24855 = C2304 * C141468;
    const double C50483 = C2304 * C47710;
    const double C139364 = C139362 / C139330;
    const double C139363 = C139331 * C139361;
    const double C106 = (-C139361 / C139330) / (4 * C139342);
    const double C5870 = (-C139361 / C139330) / C139336;
    const double C22078 = (-C139361 / C139330) / (4 * C139335);
    const double C47716 = (-C139361 / C139330) / (4 * C139335);
    const double C55526 = -C139361 / C139330;
    const double C68677 = (-C139361 / C139330) / C139336;
    const double C5885 = C5869 * C116;
    const double C5884 = C5869 * C115;
    const double C5882 = C5869 * C827;
    const double C5880 = C5869 * C2965;
    const double C5877 = C5869 * C2964;
    const double C5875 = C5869 * C828;
    const double C5873 = C5869 * C114;
    const double C6756 = C5869 * C6731;
    const double C6747 = C5869 * C6732;
    const double C7028 = C6086 * C5869;
    const double C7024 = C1031 * C5869;
    const double C7040 = C7034 * C5869;
    const double C7038 = C7032 * C5869;
    const double C7171 = C5869 * C3027;
    const double C7167 = C5869 * C2961;
    const double C7163 = C5869 * C911;
    const double C7159 = C5869 * C822;
    const double C7155 = C5869 * C3026;
    const double C7151 = C5869 * C2960;
    const double C7147 = C5869 * C912;
    const double C7143 = C5869 * C823;
    const double C7545 = C5869 * C3085;
    const double C7541 = C5869 * C1005;
    const double C7537 = C5869 * C3084;
    const double C7533 = C5869 * C1006;
    const double C7906 = C5869 * C7889;
    const double C7904 = C5869 * C3495;
    const double C7902 = C5869 * C1605;
    const double C7901 = C5869 * C1606;
    const double C7899 = C5869 * C3494;
    const double C7897 = C5869 * C7890;
    const double C9780 = C5869 * C9770;
    const double C9957 = C9954 * C5869;
    const double C10042 = C5869 * C6729;
    const double C10289 = C5869 * C7002;
    const double C10566 = C5869 * C10553;
    const double C10803 = C10799 * C5869;
    const double C10801 = C10797 * C5869;
    const double C10918 = C5869 * C3490;
    const double C10914 = C5869 * C3572;
    const double C10910 = C5869 * C7887;
    const double C11246 = C5869 * C3646;
    const double C11242 = C5869 * C8128;
    const double C13318 = C5869 * C13307;
    const double C13316 = C5869 * C13305;
    const double C13314 = C5869 * C5329;
    const double C14040 = C5869 * C5330;
    const double C14880 = C5869 * C13306;
    const double C15889 = C5869 * C15864;
    const double C15880 = C5869 * C15865;
    const double C16039 = C14127 * C5869;
    const double C16035 = C1715 * C5869;
    const double C16051 = C16045 * C5869;
    const double C16049 = C16043 * C5869;
    const double C16304 = C5869 * C5392;
    const double C16300 = C5869 * C5326;
    const double C16296 = C5869 * C1689;
    const double C16292 = C5869 * C1600;
    const double C16288 = C5869 * C5391;
    const double C16284 = C5869 * C5325;
    const double C16280 = C5869 * C1690;
    const double C16276 = C5869 * C1601;
    const double C16674 = C5869 * C5450;
    const double C16670 = C5869 * C1783;
    const double C16666 = C5869 * C5449;
    const double C16662 = C5869 * C1784;
    const double C18593 = C5869 * C18584;
    const double C18721 = C18717 * C5869;
    const double C18719 = C18715 * C5869;
    const double C18929 = C5869 * C13393;
    const double C18925 = C5869 * C13301;
    const double C19253 = C5869 * C13475;
    const double C21320 = C5869 * C21310;
    const double C21418 = C21415 * C5869;
    const double C21581 = C5869 * C15862;
    const double C21577 = C5869 * C16013;
    const double C39068 = C5869 * C3573;
    const double C39064 = C5869 * C3491;
    const double C39490 = C5869 * C3647;
    const double C58275 = C56523 + C56543;
    const double C58274 = C56520 + C56542;
    const double C114121 = C110669 + C110670;
    const double C114122 = C110671 + C110672;
    const double C139429 = C139394 * C139426;
    const double C6237 =
        (ae * -2 * C139412) / C139342 +
        (((C139394 *
           ((-4 * C139414) / C139330 - (C139394 * C139426) / C139330) * ae) /
              C139330 +
          2 * ((C139425 * ae) / C139330 - C139412 / C139345)) *
         ae) /
            C139330 -
        C139426 / C139345;
    const double C6239 = (-C139426 / C139330) / (4 * C139335);
    const double C22435 = (-C139426 / C139330) / C139336;
    const double C48073 = (-C139426 / C139330) / C139336;
    const double C55747 = (-C139426 / C139330) / (4 * C139342);
    const double C69034 = (-C139426 / C139330) / (4 * C139335);
    const double C139523 = C139517 / C139330;
    const double C22197 = C22172 * C111;
    const double C22187 = C22172 * C116;
    const double C22183 = C22172 * C110;
    const double C22179 = C22172 * C115;
    const double C22175 = C22172 * C109;
    const double C22457 = C22172 * C193;
    const double C22455 = C22172 * C192;
    const double C22446 = C22172 * C191;
    const double C22440 = C22172 * C190;
    const double C22437 = C22172 * C189;
    const double C22563 = C309 * C22172;
    const double C22556 = C307 * C22172;
    const double C22552 = C305 * C22172;
    const double C22726 = C22172 * C279;
    const double C22720 = C22172 * C278;
    const double C22715 = C22172 * C277;
    const double C23064 = C22172 * C822;
    const double C23060 = C22172 * C827;
    const double C23056 = C22172 * C821;
    const double C23430 = C22172 * C909;
    const double C23429 = C22172 * C912;
    const double C23426 = C22172 * C911;
    const double C23420 = C22172 * C910;
    const double C23549 = C1031 * C22172;
    const double C23545 = C1029 * C22172;
    const double C23770 = C22172 * C1005;
    const double C23766 = C22172 * C1004;
    const double C24100 = C22172 * C1600;
    const double C24096 = C22172 * C1605;
    const double C24092 = C22172 * C1599;
    const double C24424 = C22172 * C1687;
    const double C24423 = C22172 * C1690;
    const double C24420 = C22172 * C1689;
    const double C24414 = C22172 * C1688;
    const double C24544 = C1809 * C22172;
    const double C24540 = C1807 * C22172;
    const double C24749 = C22172 * C1783;
    const double C24745 = C22172 * C1782;
    const double C26160 = C22172 * C3028;
    const double C26158 = C22172 * C3027;
    const double C26156 = C22172 * C3026;
    const double C27003 = C22172 * C3574;
    const double C27001 = C22172 * C3573;
    const double C26999 = C22172 * C3572;
    const double C29550 = C22172 * C5393;
    const double C29548 = C22172 * C5392;
    const double C29546 = C22172 * C5391;
    const double C38770 = C22172 * C3491;
    const double C38766 = C22172 * C3495;
    const double C39628 = C22172 * C3647;
    const double C40060 = C22172 * C5326;
    const double C40056 = C22172 * C5330;
    const double C40048 = C22172 * C1606;
    const double C40044 = C22172 * C1601;
    const double C40899 = C22172 * C5450;
    const double C40892 = C22172 * C1784;
    const double C43400 = C22172 * C3494;
    const double C43396 = C22172 * C3490;
    const double C43820 = C22172 * C13395;
    const double C43818 = C22172 * C13393;
    const double C44226 = C22172 * C3646;
    const double C46918 = C22172 * C5325;
    const double C46914 = C22172 * C5329;
    const double C47224 = C22172 * C16012;
    const double C47222 = C22172 * C16013;
    const double C47528 = C22172 * C5449;
    const double C133773 = C62876 * C22172;
    const double C133769 = C62874 * C22172;
    const double C133765 = C62872 * C22172;
    const double C133761 = C62870 * C22172;
    const double C136074 = C22172 * C13305;
    const double C136070 = C22172 * C13301;
    const double C136300 = C61849 * C22172;
    const double C136296 = C58709 * C22172;
    const double C136406 = C22172 * C18698;
    const double C136723 = C22172 * C13475;
    const double C138765 = C22172 * C15862;
    const double C138761 = C22172 * C15865;
    const double C138926 = C68191 * C22172;
    const double C139008 = C22172 * C21401;
    const double C47835 = C47810 * C111;
    const double C47825 = C47810 * C116;
    const double C47821 = C47810 * C110;
    const double C47817 = C47810 * C115;
    const double C47813 = C47810 * C109;
    const double C48095 = C47810 * C193;
    const double C48093 = C47810 * C192;
    const double C48084 = C47810 * C191;
    const double C48078 = C47810 * C190;
    const double C48075 = C47810 * C189;
    const double C48201 = C309 * C47810;
    const double C48194 = C307 * C47810;
    const double C48190 = C305 * C47810;
    const double C48364 = C47810 * C279;
    const double C48358 = C47810 * C278;
    const double C48353 = C47810 * C277;
    const double C48702 = C47810 * C822;
    const double C48698 = C47810 * C827;
    const double C48694 = C47810 * C821;
    const double C49068 = C47810 * C909;
    const double C49067 = C47810 * C912;
    const double C49064 = C47810 * C911;
    const double C49058 = C47810 * C910;
    const double C49187 = C1031 * C47810;
    const double C49183 = C1029 * C47810;
    const double C49408 = C47810 * C1005;
    const double C49404 = C47810 * C1004;
    const double C49738 = C47810 * C1600;
    const double C49734 = C47810 * C1605;
    const double C49730 = C47810 * C1599;
    const double C50056 = C47810 * C1687;
    const double C50055 = C47810 * C1690;
    const double C50052 = C47810 * C1689;
    const double C50046 = C47810 * C1688;
    const double C50175 = C1809 * C47810;
    const double C50171 = C1807 * C47810;
    const double C50378 = C47810 * C1783;
    const double C50374 = C47810 * C1782;
    const double C51784 = C47810 * C3028;
    const double C51782 = C47810 * C3027;
    const double C51780 = C47810 * C3026;
    const double C52627 = C47810 * C3574;
    const double C52625 = C47810 * C3573;
    const double C52623 = C47810 * C3572;
    const double C55174 = C47810 * C5393;
    const double C55172 = C47810 * C5392;
    const double C55170 = C47810 * C5391;
    const double C61955 = C47810 * C13395;
    const double C61954 = C47810 * C13393;
    const double C62634 = C47810 * C5330;
    const double C62630 = C47810 * C5326;
    const double C62626 = C47810 * C5329;
    const double C62622 = C47810 * C5325;
    const double C62618 = C47810 * C1606;
    const double C62614 = C47810 * C1601;
    const double C62884 = C62876 * C47810;
    const double C62882 = C62874 * C47810;
    const double C62880 = C62872 * C47810;
    const double C62878 = C62870 * C47810;
    const double C62998 = C47810 * C16012;
    const double C62993 = C47810 * C16013;
    const double C63332 = C47810 * C5450;
    const double C63328 = C47810 * C5449;
    const double C63324 = C47810 * C1784;
    const double C65282 = C47810 * C13305;
    const double C65278 = C47810 * C13301;
    const double C65274 = C47810 * C3494;
    const double C65270 = C47810 * C3490;
    const double C65519 = C61849 * C47810;
    const double C65515 = C58709 * C47810;
    const double C65632 = C47810 * C18698;
    const double C65965 = C47810 * C13475;
    const double C65961 = C47810 * C3646;
    const double C68022 = C47810 * C15862;
    const double C68018 = C47810 * C15865;
    const double C68194 = C68191 * C47810;
    const double C68275 = C47810 * C21401;
    const double C77595 = C47810 * C3491;
    const double C77591 = C47810 * C3495;
    const double C78411 = C47810 * C3647;
    const double C139455 = C139397 * C139452;
    const double C14733 =
        (ae * -2 * C139438) / C139342 +
        (((C139397 *
           ((-4 * C139440) / C139330 - (C139397 * C139452) / C139330) * ae) /
              C139330 +
          2 * ((C139451 * ae) / C139330 - C139438 / C139345)) *
         ae) /
            C139330 -
        C139452 / C139345;
    const double C14735 = (-C139452 / C139330) / (4 * C139335);
    const double C30597 = (-C139452 / C139330) / C139336;
    const double C94624 = (-C139452 / C139330) / C139336;
    const double C109769 = (-C139452 / C139330) / (4 * C139342);
    const double C124848 = (-C139452 / C139330) / (4 * C139335);
    const double C139594 = C139588 / C139330;
    const double C30100 = C30075 * C111;
    const double C30090 = C30075 * C116;
    const double C30086 = C30075 * C110;
    const double C30082 = C30075 * C115;
    const double C30078 = C30075 * C109;
    const double C30349 = C30075 * C192;
    const double C30343 = C30075 * C191;
    const double C30338 = C30075 * C190;
    const double C30519 = C222 * C30075;
    const double C30512 = C220 * C30075;
    const double C30508 = C218 * C30075;
    const double C30619 = C30075 * C280;
    const double C30617 = C30075 * C279;
    const double C30608 = C30075 * C278;
    const double C30602 = C30075 * C277;
    const double C30599 = C30075 * C276;
    const double C30955 = C30075 * C822;
    const double C30951 = C30075 * C827;
    const double C30947 = C30075 * C821;
    const double C31270 = C30075 * C911;
    const double C31266 = C30075 * C910;
    const double C31480 = C937 * C30075;
    const double C31476 = C935 * C30075;
    const double C31595 = C30075 * C1003;
    const double C31594 = C30075 * C1006;
    const double C31591 = C30075 * C1005;
    const double C31585 = C30075 * C1004;
    const double C31962 = C30075 * C1600;
    const double C31958 = C30075 * C1605;
    const double C31954 = C30075 * C1599;
    const double C32314 = C30075 * C1689;
    const double C32310 = C30075 * C1688;
    const double C32541 = C1715 * C30075;
    const double C32537 = C1713 * C30075;
    const double C32654 = C30075 * C1781;
    const double C32653 = C30075 * C1784;
    const double C32650 = C30075 * C1783;
    const double C32644 = C30075 * C1782;
    const double C34221 = C30075 * C3086;
    const double C34219 = C30075 * C3085;
    const double C34217 = C30075 * C3084;
    const double C35118 = C30075 * C3648;
    const double C35116 = C30075 * C3647;
    const double C35114 = C30075 * C3646;
    const double C37608 = C30075 * C5451;
    const double C37606 = C30075 * C5450;
    const double C37604 = C30075 * C5449;
    const double C38922 = C30075 * C2961;
    const double C38918 = C30075 * C2965;
    const double C38910 = C30075 * C828;
    const double C38906 = C30075 * C823;
    const double C39353 = C30075 * C3027;
    const double C39346 = C30075 * C912;
    const double C40208 = C30075 * C3491;
    const double C40204 = C30075 * C3495;
    const double C40628 = C30075 * C3573;
    const double C42516 = C30075 * C2960;
    const double C42512 = C30075 * C2964;
    const double C42822 = C30075 * C3026;
    const double C43126 = C30075 * C7001;
    const double C43124 = C30075 * C7002;
    const double C43544 = C30075 * C3490;
    const double C43540 = C30075 * C3494;
    const double C43960 = C30075 * C3572;
    const double C44368 = C30075 * C8127;
    const double C44366 = C30075 * C8128;
    const double C47632 = C30075 * C13476;
    const double C47630 = C30075 * C13475;
    const double C87681 = C56307 * C30075;
    const double C87677 = C56305 * C30075;
    const double C87673 = C56301 * C30075;
    const double C87669 = C56299 * C30075;
    const double C89935 = C30075 * C6729;
    const double C89931 = C30075 * C6732;
    const double C90254 = C56303 * C30075;
    const double C90410 = C30075 * C9940;
    const double C90740 = C30075 * C7887;
    const double C90736 = C30075 * C7890;
    const double C91175 = C58709 * C30075;
    const double C91171 = C58707 * C30075;
    const double C91385 = C30075 * C10779;
    const double C93874 = C30075 * C13477;
    const double C94127 = C94102 * C111;
    const double C94117 = C94102 * C116;
    const double C94113 = C94102 * C110;
    const double C94109 = C94102 * C115;
    const double C94105 = C94102 * C109;
    const double C94376 = C94102 * C192;
    const double C94370 = C94102 * C191;
    const double C94365 = C94102 * C190;
    const double C94546 = C222 * C94102;
    const double C94539 = C220 * C94102;
    const double C94535 = C218 * C94102;
    const double C94646 = C94102 * C280;
    const double C94644 = C94102 * C279;
    const double C94635 = C94102 * C278;
    const double C94629 = C94102 * C277;
    const double C94626 = C94102 * C276;
    const double C94976 = C94102 * C822;
    const double C94972 = C94102 * C827;
    const double C94968 = C94102 * C821;
    const double C95286 = C94102 * C911;
    const double C95282 = C94102 * C910;
    const double C95495 = C937 * C94102;
    const double C95491 = C935 * C94102;
    const double C95608 = C94102 * C1003;
    const double C95607 = C94102 * C1006;
    const double C95604 = C94102 * C1005;
    const double C95598 = C94102 * C1004;
    const double C95975 = C94102 * C1600;
    const double C95971 = C94102 * C1605;
    const double C95967 = C94102 * C1599;
    const double C96327 = C94102 * C1689;
    const double C96323 = C94102 * C1688;
    const double C96554 = C1715 * C94102;
    const double C96550 = C1713 * C94102;
    const double C96667 = C94102 * C1781;
    const double C96666 = C94102 * C1784;
    const double C96663 = C94102 * C1783;
    const double C96657 = C94102 * C1782;
    const double C98233 = C94102 * C3086;
    const double C98231 = C94102 * C3085;
    const double C98229 = C94102 * C3084;
    const double C99130 = C94102 * C3648;
    const double C99128 = C94102 * C3647;
    const double C99126 = C94102 * C3646;
    const double C101620 = C94102 * C5451;
    const double C101618 = C94102 * C5450;
    const double C101616 = C94102 * C5449;
    const double C102610 = C94102 * C2965;
    const double C102606 = C94102 * C2961;
    const double C102602 = C94102 * C2964;
    const double C102598 = C94102 * C2960;
    const double C102594 = C94102 * C828;
    const double C102590 = C94102 * C823;
    const double C102928 = C94102 * C3027;
    const double C102924 = C94102 * C3026;
    const double C102920 = C94102 * C912;
    const double C103048 = C56307 * C94102;
    const double C103044 = C56305 * C94102;
    const double C103040 = C56301 * C94102;
    const double C103036 = C56299 * C94102;
    const double C103262 = C94102 * C7001;
    const double C103257 = C94102 * C7002;
    const double C104220 = C94102 * C8127;
    const double C104219 = C94102 * C8128;
    const double C105337 = C94102 * C6729;
    const double C105333 = C94102 * C6732;
    const double C105656 = C56303 * C94102;
    const double C105812 = C94102 * C9940;
    const double C106150 = C94102 * C3490;
    const double C106146 = C94102 * C3494;
    const double C106142 = C94102 * C7887;
    const double C106138 = C94102 * C7890;
    const double C106484 = C94102 * C3572;
    const double C106595 = C58709 * C94102;
    const double C106591 = C58707 * C94102;
    const double C106809 = C94102 * C10779;
    const double C109306 = C94102 * C13477;
    const double C109304 = C94102 * C13475;
    const double C116859 = C94102 * C3491;
    const double C116855 = C94102 * C3495;
    const double C117257 = C94102 * C3573;
    const double C124105 = C94102 * C13476;
    const double C8694 = C8689 + C8690;
    const double C15638 = C15632 + C15633;
    const double C24753 = C24747 + C24748;
    const double C50382 = C50376 + C50377;
    const double C6373 = C6371 * C5867;
    const double C7424 = C6371 * C5866;
    const double C23546 = C6371 * C141358;
    const double C49184 = C6371 * C141358;
    const double C69157 = C6371 * C68674;
    const double C70150 = C6371 * C141497;
    const double C15320 = C15318 + C3796;
    const double C8484 = C8482 * C5866;
    const double C24541 = C8482 * C141358;
    const double C50172 = C8482 * C141358;
    const double C71128 = C8482 * C141497;
    const double C15634 = C14993 * C14205;
    const double C18707 = C14993 * C5871;
    const double C31478 = C14993 * C30076;
    const double C95493 = C14993 * C94103;
    const double C128576 = C14993 * C139356;
    const double C14658 = C14656 * C14037;
    const double C16794 = C14656 * C14036;
    const double C32538 = C14656 * C141384;
    const double C96551 = C14656 * C141384;
    const double C124766 = C14656 * C124182;
    const double C126698 = C14656 * C141499;
    const double C6629 = C6627 * C5867;
    const double C7775 = C6627 * C5866;
    const double C23876 = C6627 * C141358;
    const double C49514 = C6627 * C141358;
    const double C69406 = C6627 * C68674;
    const double C70482 = C6627 * C141497;
    const double C8812 = C8810 * C5866;
    const double C24856 = C8810 * C141358;
    const double C50484 = C8810 * C141358;
    const double C71436 = C8810 * C141497;
    const double C16437 = C14400 * C5863;
    const double C16430 = C14400 * C141221;
    const double C37297 = C14400 * C141495;
    const double C101309 = C14400 * C47708;
    const double C110755 = C14400 * C141216;
    const double C126385 = C14400 * C141452;
    const double C126382 = C14400 * C141221;
    const double C123 =
        (2 * (2 * ae * C139655 + C139643 * C139672) + C139678 + C139678 +
         C139643 * (C139672 + C139675 + C139675 +
                    C139643 * (2 * ae * C139668 +
                               C139643 *
                                   (C139661 * C139662 +
                                    C139647 * bs[5] * std::pow(C139649, 5)) *
                                   C139650))) /
        C139335;
    const double C915 =
        (C139678 + C139758 * (C139768 + ae * C139771 + C139643 * C139779)) /
        C139335;
    const double C1098 =
        (C139678 + C139758 * (C139849 + ae * C139771 + C139643 * C139854)) /
        C139335;
    const double C1787 =
        (C139678 + C139801 * (C139811 + ae * C139814 + C139643 * C139822)) /
        C139335;
    const double C2124 =
        (C139678 + C139801 * (C139907 + ae * C139814 + C139643 * C139912)) /
        C139335;
    const double C130 = C107 * C117;
    const double C212 = C188 * C117;
    const double C299 = C275 * C117;
    const double C5886 = C5871 * C117;
    const double C22090 = C22079 * C117;
    const double C22193 = C22172 * C117;
    const double C30096 = C30075 * C117;
    const double C47728 = C47717 * C117;
    const double C47831 = C47810 * C117;
    const double C68693 = C139356 * C117;
    const double C94123 = C94102 * C117;
    const double C924 = C188 * C826;
    const double C1018 = C275 * C826;
    const double C5887 = C5869 * C826;
    const double C5881 = C5871 * C826;
    const double C5982 = C5965 * C826;
    const double C7162 = C141221 * C826;
    const double C22086 = C22079 * C826;
    const double C22189 = C22173 * C826;
    const double C23052 = C22172 * C826;
    const double C23297 = C141495 * C826;
    const double C23287 = C22071 * C826;
    const double C30943 = C30075 * C826;
    const double C47724 = C47717 * C826;
    const double C47827 = C47811 * C826;
    const double C48690 = C47810 * C826;
    const double C48935 = C47708 * C826;
    const double C48925 = C47709 * C826;
    const double C55538 = C55527 * C826;
    const double C68688 = C139356 * C826;
    const double C69899 = C141221 * C826;
    const double C94964 = C94102 * C826;
    const double C1702 = C188 * C1604;
    const double C1796 = C275 * C1604;
    const double C7903 = C5871 * C1604;
    const double C14041 = C5869 * C1604;
    const double C14222 = C14205 * C1604;
    const double C16295 = C141221 * C1604;
    const double C23979 = C22079 * C1604;
    const double C24088 = C22172 * C1604;
    const double C30092 = C30076 * C1604;
    const double C31950 = C30075 * C1604;
    const double C32085 = C141495 * C1604;
    const double C32075 = C22071 * C1604;
    const double C49617 = C47717 * C1604;
    const double C49726 = C47810 * C1604;
    const double C60809 = C55527 * C1604;
    const double C70589 = C139356 * C1604;
    const double C79104 = C141221 * C1604;
    const double C94119 = C94103 * C1604;
    const double C95963 = C94102 * C1604;
    const double C96098 = C47708 * C1604;
    const double C96088 = C47709 * C1604;
    const double C5997 = C5978 + C5979;
    const double C6899 = C6888 + C6889;
    const double C23070 = C23058 + C23059;
    const double C48708 = C48696 + C48697;
    const double C68804 = C68785 + C68786;
    const double C7182 = C7157 + C7158;
    const double C56308 = C56293 + C56294;
    const double C69919 = C69894 + C69895;
    const double C8144 = C8138 + C8139;
    const double C15107 = C15096 + C15097;
    const double C30961 = C30949 + C30950;
    const double C94982 = C94970 + C94971;
    const double C11250 = C11244 + C11245;
    const double C62178 = C62172 + C62173;
    const double C73793 = C73787 + C73788;
    const double C18708 = C14992 * C141221;
    const double C34422 = C14992 * C141495;
    const double C98434 = C14992 * C47708;
    const double C128577 = C14992 * C141221;
    const double C62171 = C61851 * C14205;
    const double C62862 = C61851 * C47811;
    const double C87679 = C61851 * C30076;
    const double C103046 = C61851 * C94103;
    const double C103700 = C61851 * C5965;
    const double C133771 = C61851 * C22173;
    const double C10924 = C10912 + C10913;
    const double C61852 = C61843 + C61844;
    const double C73479 = C73467 + C73468;
    const double C14237 = C14218 + C14219;
    const double C16170 = C16159 + C16160;
    const double C31968 = C31956 + C31957;
    const double C95981 = C95969 + C95970;
    const double C124366 = C124347 + C124348;
    const double C16681 = C16668 + C16669;
    const double C63225 = C63220 + C63221;
    const double C86099 = C86095 + C86096;
    const double C7289 =
        (2 * (2 * ae * C139764 + C139758 * C139871) + C140283 + C140283 +
         C139758 * (C139871 + C140280 + C140280 +
                    C139758 * (2 * C139772 + C139758 * C139876))) /
        C139335;
    const double C8684 =
        (C140283 + C139801 * (C139928 + ae * C139758 * C139812 +
                              C139758 * (C139815 + C139758 * C139931))) /
        C139335;
    const double C7301 = C5966 * C6880;
    const double C10038 = C5869 * C6880;
    const double C10125 = C5965 * C6880;
    const double C10206 = C275 * C6880;
    const double C26157 = C22173 * C6880;
    const double C51781 = C47811 * C6880;
    const double C55752 = C55593 * C6880;
    const double C56285 = C55527 * C6880;
    const double C70035 = C68773 * C6880;
    const double C90172 = C30075 * C6880;
    const double C105574 = C94102 * C6880;
    const double C8357 = C5966 * C8006;
    const double C10906 = C5869 * C8006;
    const double C11029 = C5965 * C8006;
    const double C11134 = C275 * C8006;
    const double C18179 = C188 * C8006;
    const double C27000 = C22173 * C8006;
    const double C42718 = C22172 * C8006;
    const double C42820 = C30076 * C8006;
    const double C43399 = C141358 * C8006;
    const double C52624 = C47811 * C8006;
    const double C58696 = C55527 * C8006;
    const double C64724 = C47810 * C8006;
    const double C64804 = C14205 * C8006;
    const double C65273 = C141358 * C8006;
    const double C71013 = C68773 * C8006;
    const double C88085 = C68674 * C8006;
    const double C90621 = C141497 * C8006;
    const double C91066 = C30075 * C8006;
    const double C102926 = C94103 * C8006;
    const double C103483 = C5867 * C8006;
    const double C105494 = C5964 * C8006;
    const double C106023 = C5866 * C8006;
    const double C106480 = C94102 * C8006;
    const double C19364 = C19361 + C19362;
    const double C47530 = C47526 + C47527;
    const double C63339 = C63330 + C63331;
    const double C109228 = C109223 + C109224;
    const double C16900 =
        (2 * (2 * ae * C139807 + C139801 * C139945) + C140584 + C140584 +
         C139801 * (C139945 + C140581 + C140581 +
                    C139801 * (2 * C139815 + C139801 * C139950))) /
        C139335;
    const double C16912 = C14206 * C16151;
    const double C21831 = C5869 * C16151;
    const double C21911 = C188 * C16151;
    const double C21991 = C14205 * C16151;
    const double C37605 = C30076 * C16151;
    const double C68434 = C55527 * C16151;
    const double C68515 = C47810 * C16151;
    const double C101617 = C94103 * C16151;
    const double C109774 = C109465 * C16151;
    const double C126809 = C124335 * C16151;
    const double C139242 = C22172 * C16151;
    const double C62180 = C62177 * C14037;
    const double C65856 = C62177 * C14036;
    const double C91172 = C62177 * C141384;
    const double C106592 = C62177 * C141384;
    const double C133151 = C62177 * C124182;
    const double C136621 = C62177 * C141499;
    const double C19049 = C19047 + C19038;
    const double C19050 = C19048 + C19041;
    const double C3578 = (C139801 * (C139707 + C139758 * C139797)) / C139335;
    const double C139708 = C139684 + C139706;
    const double C139962 = ae * C139960;
    const double C3496 = (C139801 * C139960) / C139330;
    const double C140026 = ae * C140024;
    const double C5889 = C5869 * C2966;
    const double C5879 = C5871 * C2966;
    const double C5980 = C5966 * C2966;
    const double C6082 = C275 * C2966;
    const double C7170 = C141221 * C2966;
    const double C22922 = C22079 * C2966;
    const double C23050 = C22173 * C2966;
    const double C26071 = C22071 * C2966;
    const double C48560 = C47717 * C2966;
    const double C48688 = C47811 * C2966;
    const double C51695 = C47709 * C2966;
    const double C55539 = C55527 * C2966;
    const double C68686 = C139356 * C2966;
    const double C68787 = C68773 * C2966;
    const double C69907 = C141221 * C2966;
    const double C14043 = C5869 * C5331;
    const double C14039 = C5871 * C5331;
    const double C14123 = C188 * C5331;
    const double C14220 = C14206 * C5331;
    const double C16303 = C141221 * C5331;
    const double C29246 = C22079 * C5331;
    const double C31948 = C30076 * C5331;
    const double C37211 = C22071 * C5331;
    const double C54870 = C47717 * C5331;
    const double C60810 = C55527 * C5331;
    const double C78684 = C139356 * C5331;
    const double C95961 = C94103 * C5331;
    const double C101223 = C47709 * C5331;
    const double C124349 = C124335 * C5331;
    const double C126272 = C141221 * C5331;
    const double C26566 = C22071 * C3500;
    const double C38627 = C141221 * C3500;
    const double C52190 = C47709 * C3500;
    const double C77452 = C141221 * C3500;
    const double C10905 = C141221 * C8243;
    const double C73460 = C141221 * C8243;
    const double C87372 = C141216 * C8243;
    const double C15095 = C14037 * C13480;
    const double C40203 = C141384 * C13480;
    const double C116854 = C141384 * C13480;
    const double C125187 = C124182 * C13480;
    const double C19256 = C141221 * C13798;
    const double C62176 = C141216 * C13798;
    const double C82777 = C141221 * C13798;
    const double C62174 = C61853 * C14206;
    const double C62868 = C61853 * C47811;
    const double C133156 = C61853 * C124335;
    const double C133775 = C61853 * C22173;
    const double C6755 = C141221 * C2970;
    const double C25819 = C22071 * C2970;
    const double C51443 = C47709 * C2970;
    const double C69525 = C141221 * C2970;
    const double C6887 = C5867 * C6882;
    const double C69651 = C68674 * C6882;
    const double C10037 = C141221 * C7139;
    const double C56298 = C141216 * C7139;
    const double C72640 = C141221 * C7139;
    const double C8135 = C141320 * C8130;
    const double C38917 = C141384 * C8130;
    const double C102613 = C141384 * C8130;
    const double C11241 = C141221 * C8582;
    const double C73784 = C141221 * C8582;
    const double C87685 = C141216 * C8582;
    const double C7036 = C7020 + C7021;
    const double C10046 = C10040 + C10041;
    const double C56309 = C56295 + C56296;
    const double C72649 = C72643 + C72644;
    const double C8024 = C8012 + C8013;
    const double C10922 = C10908 + C10909;
    const double C38772 = C38764 + C38765;
    const double C70704 = C70692 + C70693;
    const double C73477 = C73463 + C73464;
    const double C77597 = C77589 + C77590;
    const double C87373 = C87369 + C87370;
    const double C15888 = C141221 * C5335;
    const double C36959 = C22071 * C5335;
    const double C100971 = C47709 * C5335;
    const double C125932 = C141221 * C5335;
    const double C18932 = C141221 * C13558;
    const double C61848 = C141216 * C13558;
    const double C82372 = C141221 * C13558;
    const double C16158 = C14037 * C16153;
    const double C126154 = C124182 * C16153;
    const double C21830 = C141221 * C16658;
    const double C110890 = C141216 * C16658;
    const double C131602 = C141221 * C16658;
    const double C16047 = C16031 + C16032;
    const double C21587 = C21579 + C21580;
    const double C110681 = C110677 + C110678;
    const double C131372 = C131364 + C131365;
    const double C140128 = ae * C140127;
    const double C3029 = (2 * C139771 + C139643 * C139780 + C139758 * C140127 +
                          C139758 * C139737 * ae) /
                         C139330;
    const double C3575 = (C139801 * C140127) / C139330;
    const double C140246 = ae * C140245;
    const double C5452 = (2 * C139814 + C139643 * C139823 + C139801 * C140245 +
                          C139801 * C139737 * ae) /
                         C139330;
    const double C140292 = C140291 + C140288;
    const double C8346 =
        (C139801 * C139883 + C140331 + C140331 +
         C139758 * (2 * ae * C139801 * C139794 +
                    C139758 * C139801 *
                        (C139881 + (C139715 * C139716 +
                                    C139866 * bs[7] * std::pow(C139649, 7)) *
                                       C139650 * C139647))) /
        C139335;
    const double C15627 =
        (ae * C139823 + C139758 * C139936 + C140331 +
         C139801 *
             (C140290 +
              C139801 * (ae * C139837 +
                         C139758 * (C139934 + std::pow(C139649, 7) * bs[7] *
                                                  C139925 * C139647)))) /
        C139335;
    const double C140593 = C140592 + C140589;
    const double C15738 =
        (C139758 * C139957 + C140536 + C140536 +
         C139801 * (2 * ae * C140533 +
                    C139801 * C139758 *
                        (C139955 + (C139715 * C139716 +
                                    C139940 * bs[7] * std::pow(C139649, 7)) *
                                       C139650 * C139647))) /
        C139335;
    const double C15754 = C14206 * C15091;
    const double C29848 = C275 * C15091;
    const double C35119 = C30076 * C15091;
    const double C99131 = C94103 * C15091;
    const double C125821 = C124335 * C15091;
    const double C140403 = ae * C140401;
    const double C140402 = C139758 * C140401;
    const double C140451 = C139801 * C140401;
    const double C13638 =
        (C140264 + C140386 * C139940 + C140492 + C140492 +
         C139758 * (2 * ae * (C139782 + C140388 * C139940) +
                    C139758 * (C140386 +
                               C139643 *
                                   (C139715 * C139716 +
                                    C139866 * bs[7] * std::pow(C139649, 7)) *
                                   C139650 * C139940))) /
        C139335;
    const double C19357 =
        (2 * (C140270 + C139801 * C140429) + C140492 +
         C139801 * (C140429 + C140454 +
                    C139801 * (C140399 + C139801 * (ae * C140416 +
                                                    C139758 * C139643 *
                                                        std::pow(C139649, 7) *
                                                        bs[7] * C139925)))) /
        C139335;
    const double C19044 = C188 * C18699;
    const double C47225 = C22173 * C18699;
    const double C62999 = C47811 * C18699;
    const double C140714 = ae * C140712;
    const double C140713 = C139801 * C140712;
    const double C13956 =
        (C140306 + C140432 * C139866 + C140520 + C140520 +
         C139801 * (2 * ae * C140420 +
                    C139801 * (C140432 +
                               C139643 *
                                   (C139715 * C139716 +
                                    C139940 * bs[7] * std::pow(C139649, 7)) *
                                   C139650 * C139866))) /
        C139335;
    const double C13961 = C275 * C13478;
    const double C18484 = C14206 * C13478;
    const double C44369 = C30076 * C13478;
    const double C104221 = C94103 * C13478;
    const double C128377 = C124335 * C13478;
    const double C140637 = C140636 + C140632;
    const double C14980 =
        (C139707 + C139758 * C139797 +
         (C139748 +
          C139758 * (C139787 + ae * C140388 +
                     C139643 * (ae * C139789 + C139643 * std::pow(C139649, 7) *
                                                   bs[7] * C139762))) *
             C139940) /
        C139335;
    const double C139749 = C139718 + C139747;
    const double C139978 = ae * C139973;
    const double C140152 = C139801 * C139973;
    const double C14877 = (C139960 + C139973 * C139940) / C139330;
    const double C140042 = ae * C140037;
    const double C140097 = C139705 + C140094;
    const double C140199 = C139705 + C140196;
    const double C14878 =
        (C139959 + C139971 * C139940 + C140524 + C140524 +
         C139643 * (2 * ae * (C139970 + C139758 * C139728 * C139940) +
                    C139643 * (C139971 +
                               C139758 *
                                   (C139715 * C139716 +
                                    C139647 * bs[7] * std::pow(C139649, 7)) *
                                   C139650 * C139940))) /
        C139335;
    const double C18823 =
        (2 * (C139963 + C139801 * C140602) + C140524 +
         C139801 * (C140602 + C140155 +
                    C139801 * (C139979 + C139801 * C139758 *
                                             (ae * C139832 +
                                              C139643 * std::pow(C139649, 7) *
                                                  bs[7] * C139805)))) /
        C139335;
    const double C19251 =
        (2 * (C139963 + C139801 * C140612) + C140524 +
         C139801 * (C140612 + C140155 +
                    C139801 * (C139979 + C139801 * C139758 *
                                             (ae * C139832 +
                                              C139643 * std::pow(C139649, 7) *
                                                  bs[7] * C139904)))) /
        C139335;
    const double C18594 = C5871 * C18585;
    const double C62503 = C55527 * C18585;
    const double C85488 = C139356 * C18585;
    const double C140253 = ae * C140252;
    const double C9771 = (3 * C140090 + C139758 * C140252) / C139330;
    const double C10554 = (C139801 * C140252) / C139330;
    const double C7894 =
        (C139801 * C140096 + C140313 + C140313 +
         C139643 * (2 * ae * C139801 * (C139692 + C139728 * C139866) +
                    C139643 * C139801 *
                        (C139735 + (C139715 * C139716 +
                                    C139647 * bs[7] * std::pow(C139649, 7)) *
                                       C139650 * C139866))) /
        C139335;
    const double C10902 =
        (2 * (C140027 + C139758 * C140442) + C140313 +
         C139758 * (C140442 + C140155 +
                    C139758 * (C140043 + C139758 * C139801 *
                                             (ae * C139789 +
                                              C139643 * std::pow(C139649, 7) *
                                                  bs[7] * C139846)))) /
        C139335;
    const double C13482 =
        (C139822 + C139836 * C139866 + C140313 +
         C139801 * (C140100 +
                    C139801 * (C139836 +
                               (ae * C139832 + C139643 * std::pow(C139649, 7) *
                                                   bs[7] * C139805) *
                                   C139866))) /
        C139335;
    const double C13800 =
        (C139912 + C139918 * C139866 + C140313 +
         C139801 * (C140100 +
                    C139801 * (C139918 +
                               (ae * C139832 + C139643 * std::pow(C139649, 7) *
                                                   bs[7] * C139904) *
                                   C139866))) /
        C139335;
    const double C140543 = ae * C140542;
    const double C21311 = (3 * C140192 + C139801 * C140542) / C139330;
    const double C140766 = C140744 + C140764;
    const double C140813 = ae * C140808;
    const double C140836 = C140378 + C140833;
    const double C140858 = ae * C140857;
    const double C68011 = (3 * C140486 + C139801 * C140857) / C139330;
    const double C140977 = C140957 + C140975;
    const double C140849 = ae * C140848;
    const double C60419 = (2 * C140408 + C139758 * C140412 + C139801 * C140848 +
                           C139801 * C140761 * ae) /
                          C139330;
    const double C140870 = C140869 + C140866;
    const double C140915 = ae * C140913;
    const double C140914 = C139801 * C140913;
    const double C6255 = C5867 * C3198;
    const double C23418 = C141358 * C3198;
    const double C49056 = C141358 * C3198;
    const double C69050 = C68674 * C3198;
    const double C24744 = C141358 * C4006;
    const double C31473 = C141309 * C4006;
    const double C50373 = C141358 * C4006;
    const double C6001 = C5986 + C5987;
    const double C6372 = C6364 + C6365;
    const double C23068 = C23054 + C23055;
    const double C48706 = C48692 + C48693;
    const double C68808 = C68793 + C68794;
    const double C31163 = C31161 + C3797;
    const double C24104 = C24090 + C24091;
    const double C24545 = C24536 + C24537;
    const double C30842 = C30839 + C30840;
    const double C31272 = C31264 + C31265;
    const double C49742 = C49728 + C49729;
    const double C95288 = C95280 + C95281;
    const double C451 = C447 + C438;
    const double C1191 = C1188 + C1176;
    const double C1969 = C1966 + C1954;
    const double C14401 = C14399 + C14395;
    const double C14990 = C14982 + C14983;
    const double C40068 = C40054 + C40055;
    const double C62649 = C62636 + C62637;
    const double C32105 = C32092 + C32093;
    const double C96118 = C96105 + C96106;
    const double C16323 = C16306 + C16307;
    const double C37216 = C37204 + C37205;
    const double C101228 = C101216 + C101217;
    const double C126280 = C126275 + C126276;
    const double C140273 = ae * C140272;
    const double C6879 =
        (2 * C140119 + C139758 * C140272 + (C139666 + C139689 * C139866) * ae) /
        C139330;
    const double C8005 = (C139801 * C140272) / C139330;
    const double C13396 = (C140272 + C140401 * C139940) / C139330;
    const double C8350 = C5867 * C8344;
    const double C39207 = C141358 * C8344;
    const double C71006 = C68674 * C8344;
    const double C78004 = C141358 * C8344;
    const double C15630 = C141309 * C13877;
    const double C40898 = C141358 * C13877;
    const double C63335 = C141358 * C13877;
    const double C15631 = C14991 * C14206;
    const double C18713 = C14991 * C5871;
    const double C125704 = C14991 * C124335;
    const double C128580 = C14991 * C139356;
    const double C15319 = C15317 + C15311;
    const double C140381 = C140366 + C140379;
    const double C140447 = ae * C140445;
    const double C13642 = C5966 * C13394;
    const double C18181 = C188 * C13394;
    const double C43819 = C22173 * C13394;
    const double C61953 = C47811 * C13394;
    const double C64644 = C55527 * C13394;
    const double C64726 = C47810 * C13394;
    const double C64802 = C14206 * C13394;
    const double C65281 = C141358 * C13394;
    const double C76133 = C68773 * C13394;
    const double C91064 = C30076 * C13394;
    const double C93312 = C68674 * C13394;
    const double C106369 = C5965 * C13394;
    const double C106478 = C94103 * C13394;
    const double C108742 = C5867 * C13394;
    const double C135540 = C22172 * C13394;
    const double C135616 = C124335 * C13394;
    const double C136073 = C141358 * C13394;
    const double C65631 = C141358 * C13636;
    const double C93552 = C68674 * C13636;
    const double C108982 = C5867 * C13636;
    const double C136405 = C141358 * C13636;
    const double C68514 = C141358 * C19356;
    const double C112637 = C141309 * C19356;
    const double C139241 = C141358 * C19356;
    const double C112434 = C112431 + C19043;
    const double C65523 = C65511 + C65512;
    const double C65751 = C65745 + C65746;
    const double C68028 = C68020 + C68021;
    const double C112221 = C112217 + C112218;
    const double C136518 = C136512 + C136513;
    const double C138771 = C138763 + C138764;
    const double C114187 = C114186 + C114183;
    const double C14751 = C14037 * C5783;
    const double C32642 = C141384 * C5783;
    const double C96655 = C141384 * C5783;
    const double C124864 = C124182 * C5783;
    const double C14241 = C14226 + C14227;
    const double C14657 = C14649 + C14650;
    const double C31966 = C31952 + C31953;
    const double C95979 = C95965 + C95966;
    const double C124370 = C124355 + C124356;
    const double C746 = C742 + C733;
    const double C1525 = C1522 + C1510;
    const double C2303 = C2300 + C2288;
    const double C6628 = C6626 + C6620;
    const double C24860 = C24859 + C24854;
    const double C23665 = C23658 + C23659;
    const double C49303 = C49296 + C49297;
    const double C7556 = C7547 + C7548;
    const double C26316 = C26310 + C26311;
    const double C51940 = C51934 + C51935;
    const double C70275 = C70266 + C70267;
    const double C15742 = C14037 * C13955;
    const double C41037 = C141384 * C13955;
    const double C117652 = C141384 * C13955;
    const double C125809 = C124182 * C13955;
    const double C15109 = C15100 + C15101;
    const double C40212 = C40206 + C40207;
    const double C116863 = C116857 + C116858;
    const double C125201 = C125192 + C125193;
    const double C140574 = ae * C140573;
    const double C16150 =
        (2 * C140237 + C139801 * C140573 + (C139666 + C139689 * C139940) * ae) /
        C139330;
    const double C65043 = C14037 * C13954;
    const double C91382 = C141384 * C13954;
    const double C106802 = C141384 * C13954;
    const double C135854 = C124182 * C13954;
    const double C64567 = C64558 + C64559;
    const double C64892 = C64885 + C64886;
    const double C90744 = C90738 + C90739;
    const double C106154 = C106140 + C106141;
    const double C135389 = C135380 + C135381;
    const double C58388 = C58387 + C58384;
    const double C59072 = C59071 + C59068;
    const double C140626 = ae * C140625;
    const double C18820 =
        (2 * C140507 + C139801 * C140625 + (C140276 + C140368 * C139940) * ae) /
        C139330;
    const double C60577 =
        (2 * (C140693 + C139758 * C140843) +
         ae * (C140412 + C139801 * (C139801 * C140780 + C140756) +
               C139801 * C140753 * ae) +
         C139758 *
             (C140843 +
              ae *
                  (C140617 + C139801 * (C139801 * C139758 * C139832 + C140752) +
                   C139801 * C140746 * ae) +
              C139758 *
                  (ae * (C139819 + C139801 * (C139801 * C139832 + C139724) +
                         C139801 * C139714 * ae) +
                   C139758 * (C139897 + ae * C139801 * C139789 +
                              C139801 * (ae * C139789 +
                                         C139801 * std::pow(C139649, 7) *
                                             bs[7] * C139888))))) /
        C139335;
    const double C140694 = C140679 + C140692;
    const double C21667 = C16448 * C141221;
    const double C110756 = C16448 * C141216;
    const double C131450 = C16448 * C141221;
    const double C7788 = C7787 * C5867;
    const double C70481 = C7787 * C68674;
    const double C8811 = C8809 * C5867;
    const double C71435 = C8809 * C68674;
    const double C22817 = C22813 + C22814;
    const double C48455 = C48451 + C48452;
    const double C139366 = C139364 - C139351;
    const double C139365 = C139363 / C139330;
    const double C6754 = C5870 * C2962;
    const double C6750 = C5870 * C821;
    const double C6744 = C5870 * C2961;
    const double C6740 = C5870 * C822;
    const double C9776 = C5870 * C6728;
    const double C10562 = C5870 * C3491;
    const double C10558 = C5870 * C7886;
    const double C15887 = C5870 * C5327;
    const double C15883 = C5870 * C1599;
    const double C15877 = C5870 * C5326;
    const double C15873 = C5870 * C1600;
    const double C18591 = C5870 * C13302;
    const double C21316 = C5870 * C15861;
    const double C38626 = C5870 * C3492;
    const double C22929 = C22078 * C820;
    const double C22920 = C22078 * C821;
    const double C25818 = C22078 * C2962;
    const double C26565 = C22078 * C3492;
    const double C31717 = C22078 * C1598;
    const double C31711 = C22078 * C1599;
    const double C36958 = C22078 * C5327;
    const double C48567 = C47716 * C820;
    const double C48558 = C47716 * C821;
    const double C51442 = C47716 * C2962;
    const double C52189 = C47716 * C3492;
    const double C95730 = C47716 * C1598;
    const double C95724 = C47716 * C1599;
    const double C100970 = C47716 * C5327;
    const double C56038 = C55526 * C6728;
    const double C56036 = C55526 * C2961;
    const double C56034 = C55526 * C822;
    const double C56031 = C55526 * C6729;
    const double C56029 = C55526 * C2960;
    const double C56027 = C55526 * C823;
    const double C57936 = C55526 * C9768;
    const double C58462 = C55526 * C3490;
    const double C58460 = C55526 * C7887;
    const double C58458 = C55526 * C10551;
    const double C61510 = C55526 * C13302;
    const double C61508 = C55526 * C3491;
    const double C61505 = C55526 * C13301;
    const double C62500 = C55526 * C5326;
    const double C62498 = C55526 * C1600;
    const double C62494 = C55526 * C5325;
    const double C62492 = C55526 * C1601;
    const double C64396 = C55526 * C13303;
    const double C65161 = C55526 * C18582;
    const double C67931 = C55526 * C15862;
    const double C87069 = C55526 * C7886;
    const double C110451 = C55526 * C15861;
    const double C113950 = C55526 * C21308;
    const double C69524 = C68677 * C2962;
    const double C69520 = C68677 * C821;
    const double C69514 = C68677 * C2961;
    const double C69510 = C68677 * C822;
    const double C72395 = C68677 * C6728;
    const double C73139 = C68677 * C3491;
    const double C73135 = C68677 * C7886;
    const double C77451 = C68677 * C3492;
    const double C78681 = C68677 * C1599;
    const double C78677 = C68677 * C1600;
    const double C81968 = C68677 * C13302;
    const double C85481 = C68677 * C5326;
    const double C125931 = C68677 * C5327;
    const double C131117 = C68677 * C15861;
    const double C9945 = C7040 + C7041;
    const double C7189 = C7171 + C7172;
    const double C7187 = C7167 + C7168;
    const double C7185 = C7163 + C7164;
    const double C7183 = C7159 + C7160;
    const double C7181 = C7155 + C7156;
    const double C7179 = C7151 + C7152;
    const double C7177 = C7147 + C7148;
    const double C7175 = C7143 + C7144;
    const double C7555 = C7545 + C7546;
    const double C7553 = C7541 + C7542;
    const double C7551 = C7537 + C7538;
    const double C7549 = C7533 + C7534;
    const double C10047 = C10042 + C10043;
    const double C10293 = C10289 + C10290;
    const double C10927 = C10918 + C10919;
    const double C10925 = C10914 + C10915;
    const double C10923 = C10910 + C10911;
    const double C11251 = C11246 + C11247;
    const double C11249 = C11242 + C11243;
    const double C21406 = C16051 + C16052;
    const double C16322 = C16304 + C16305;
    const double C16320 = C16300 + C16301;
    const double C16318 = C16296 + C16297;
    const double C16316 = C16292 + C16293;
    const double C16314 = C16288 + C16289;
    const double C16312 = C16284 + C16285;
    const double C16310 = C16280 + C16281;
    const double C16308 = C16276 + C16277;
    const double C16684 = C16674 + C16675;
    const double C16682 = C16670 + C16671;
    const double C16680 = C16666 + C16667;
    const double C16678 = C16662 + C16663;
    const double C18935 = C18929 + C18930;
    const double C18933 = C18925 + C18926;
    const double C19257 = C19253 + C19254;
    const double C21588 = C21581 + C21582;
    const double C21586 = C21577 + C21578;
    const double C39074 = C39068 + C39069;
    const double C39072 = C39064 + C39065;
    const double C39494 = C39490 + C39491;
    const double C139542 = C139429 / C139330;
    const double C6238 =
        (((-4 * C139414) / C139330 - C139429 / C139330) * ae) / C139345 +
        ((2 * ((0 * ae) / C139330 - C139414 / C139335) - C139429 / C139345) *
         ae) /
            C139330;
    const double C22434 =
        (((-4 * C139414) / C139330 - C139429 / C139330) * ae) / C139330;
    const double C48072 =
        -(((-4 * C139414) / C139330 - C139429 / C139330) * be) / C139330;
    const double C6259 = C6237 * C110;
    const double C6244 = C6237 * C109;
    const double C7298 = C6237 * C822;
    const double C8354 = C6237 * C1600;
    const double C103802 = C6237 * C1601;
    const double C106362 = C6237 * C3490;
    const double C108985 = C6237 * C5325;
    const double C6253 = C6239 * C2962;
    const double C6250 = C6239 * C2961;
    const double C7292 = C6239 * C6728;
    const double C8348 = C6239 * C7886;
    const double C103806 = C6239 * C7887;
    const double C106366 = C6239 * C10551;
    const double C108981 = C6239 * C13303;
    const double C22451 = C22435 * C820;
    const double C22448 = C22435 * C821;
    const double C22442 = C22435 * C822;
    const double C23422 = C22435 * C2961;
    const double C23416 = C22435 * C2962;
    const double C24416 = C22435 * C3491;
    const double C24410 = C22435 * C3492;
    const double C39206 = C22435 * C7886;
    const double C40479 = C22435 * C13302;
    const double C40476 = C22435 * C3490;
    const double C43816 = C22435 * C7887;
    const double C47218 = C22435 * C13301;
    const double C136404 = C22435 * C13303;
    const double C139004 = C22435 * C18582;
    const double C48089 = C48073 * C820;
    const double C48086 = C48073 * C821;
    const double C48080 = C48073 * C822;
    const double C49060 = C48073 * C2961;
    const double C49054 = C48073 * C2962;
    const double C50048 = C48073 * C3491;
    const double C50042 = C48073 * C3492;
    const double C62996 = C48073 * C13302;
    const double C62990 = C48073 * C13301;
    const double C62986 = C48073 * C3490;
    const double C65630 = C48073 * C13303;
    const double C65626 = C48073 * C7887;
    const double C68271 = C48073 * C18582;
    const double C78003 = C48073 * C7886;
    const double C69048 = C69034 * C2962;
    const double C69045 = C69034 * C2961;
    const double C70026 = C69034 * C6728;
    const double C71004 = C69034 * C7886;
    const double C88408 = C69034 * C7887;
    const double C90952 = C69034 * C10551;
    const double C93551 = C69034 * C13303;
    const double C139526 = C139523 - C139518;
    const double C22210 = C22197 + C22198;
    const double C22205 = C22187 + C22188;
    const double C22203 = C22183 + C22184;
    const double C22201 = C22179 + C22180;
    const double C22199 = C22175 + C22176;
    const double C22564 = C22556 + C22557;
    const double C22733 = C22726 + C22727;
    const double C22730 = C22720 + C22721;
    const double C22728 = C22715 + C22716;
    const double C23073 = C23064 + C23065;
    const double C23071 = C23060 + C23061;
    const double C23069 = C23056 + C23057;
    const double C23775 = C23770 + C23771;
    const double C23773 = C23766 + C23767;
    const double C24109 = C24100 + C24101;
    const double C24107 = C24096 + C24097;
    const double C24105 = C24092 + C24093;
    const double C24754 = C24749 + C24750;
    const double C24752 = C24745 + C24746;
    const double C38775 = C38770 + C38771;
    const double C38773 = C38766 + C38767;
    const double C39631 = C39628 + C39629;
    const double C40071 = C40060 + C40061;
    const double C40069 = C40056 + C40057;
    const double C40066 = C40048 + C40049;
    const double C40064 = C40044 + C40045;
    const double C40905 = C40899 + C40900;
    const double C40902 = C40892 + C40893;
    const double C43406 = C43400 + C43401;
    const double C43404 = C43396 + C43397;
    const double C44230 = C44226 + C44227;
    const double C46923 = C46918 + C46919;
    const double C46921 = C46914 + C46915;
    const double C47531 = C47528 + C47529;
    const double C138922 = C133765 + C133766;
    const double C136080 = C136074 + C136075;
    const double C136078 = C136070 + C136071;
    const double C136727 = C136723 + C136724;
    const double C138772 = C138765 + C138766;
    const double C138770 = C138761 + C138762;
    const double C47848 = C47835 + C47836;
    const double C47843 = C47825 + C47826;
    const double C47841 = C47821 + C47822;
    const double C47839 = C47817 + C47818;
    const double C47837 = C47813 + C47814;
    const double C48202 = C48194 + C48195;
    const double C48371 = C48364 + C48365;
    const double C48368 = C48358 + C48359;
    const double C48366 = C48353 + C48354;
    const double C48711 = C48702 + C48703;
    const double C48709 = C48698 + C48699;
    const double C48707 = C48694 + C48695;
    const double C49413 = C49408 + C49409;
    const double C49411 = C49404 + C49405;
    const double C49747 = C49738 + C49739;
    const double C49745 = C49734 + C49735;
    const double C49743 = C49730 + C49731;
    const double C50383 = C50378 + C50379;
    const double C50381 = C50374 + C50375;
    const double C62648 = C62634 + C62635;
    const double C62646 = C62630 + C62631;
    const double C62644 = C62626 + C62627;
    const double C62642 = C62622 + C62623;
    const double C62640 = C62618 + C62619;
    const double C62638 = C62614 + C62615;
    const double C68182 = C62880 + C62881;
    const double C63340 = C63332 + C63333;
    const double C63338 = C63328 + C63329;
    const double C63336 = C63324 + C63325;
    const double C65292 = C65282 + C65283;
    const double C65290 = C65278 + C65279;
    const double C65288 = C65274 + C65275;
    const double C65286 = C65270 + C65271;
    const double C65971 = C65965 + C65966;
    const double C65969 = C65961 + C65962;
    const double C68029 = C68022 + C68023;
    const double C68027 = C68018 + C68019;
    const double C77600 = C77595 + C77596;
    const double C77598 = C77591 + C77592;
    const double C78414 = C78411 + C78412;
    const double C139613 = C139455 / C139330;
    const double C14734 =
        (((-4 * C139440) / C139330 - C139455 / C139330) * ae) / C139345 +
        ((2 * ((0 * ae) / C139330 - C139440 / C139335) - C139455 / C139345) *
         ae) /
            C139330;
    const double C30596 =
        (((-4 * C139440) / C139330 - C139455 / C139330) * ae) / C139330;
    const double C94623 =
        -(((-4 * C139440) / C139330 - C139455 / C139330) * be) / C139330;
    const double C14755 = C14733 * C110;
    const double C14740 = C14733 * C109;
    const double C15746 = C14733 * C822;
    const double C16909 = C14733 * C1600;
    const double C62379 = C14733 * C823;
    const double C65046 = C14733 * C2960;
    const double C66076 = C14733 * C3490;
    const double C14749 = C14735 * C5327;
    const double C14746 = C14735 * C5326;
    const double C15740 = C14735 * C13302;
    const double C16903 = C14735 * C15861;
    const double C62383 = C14735 * C13301;
    const double C65042 = C14735 * C13303;
    const double C66072 = C14735 * C18582;
    const double C30613 = C30597 * C1598;
    const double C30610 = C30597 * C1599;
    const double C30604 = C30597 * C1600;
    const double C31587 = C30597 * C3491;
    const double C31581 = C30597 * C3492;
    const double C32646 = C30597 * C5326;
    const double C32640 = C30597 * C5327;
    const double C39767 = C30597 * C7886;
    const double C39764 = C30597 * C3490;
    const double C41036 = C30597 * C13302;
    const double C43120 = C30597 * C7887;
    const double C44362 = C30597 * C13301;
    const double C90406 = C30597 * C10551;
    const double C91381 = C30597 * C13303;
    const double C94640 = C94624 * C1598;
    const double C94637 = C94624 * C1599;
    const double C94631 = C94624 * C1600;
    const double C95600 = C94624 * C3491;
    const double C95594 = C94624 * C3492;
    const double C96659 = C94624 * C5326;
    const double C96653 = C94624 * C5327;
    const double C103260 = C94624 * C7886;
    const double C103254 = C94624 * C7887;
    const double C103250 = C94624 * C3490;
    const double C105808 = C94624 * C10551;
    const double C106805 = C94624 * C13301;
    const double C106801 = C94624 * C13303;
    const double C117651 = C94624 * C13302;
    const double C124862 = C124848 * C5327;
    const double C124859 = C124848 * C5326;
    const double C125807 = C124848 * C13302;
    const double C126800 = C124848 * C15861;
    const double C133358 = C124848 * C13301;
    const double C135853 = C124848 * C13303;
    const double C136827 = C124848 * C18582;
    const double C139597 = C139594 - C139589;
    const double C30113 = C30100 + C30101;
    const double C30108 = C30090 + C30091;
    const double C30106 = C30086 + C30087;
    const double C30104 = C30082 + C30083;
    const double C30102 = C30078 + C30079;
    const double C30356 = C30349 + C30350;
    const double C30353 = C30343 + C30344;
    const double C30351 = C30338 + C30339;
    const double C30520 = C30512 + C30513;
    const double C30964 = C30955 + C30956;
    const double C30962 = C30951 + C30952;
    const double C30960 = C30947 + C30948;
    const double C31275 = C31270 + C31271;
    const double C31273 = C31266 + C31267;
    const double C31971 = C31962 + C31963;
    const double C31969 = C31958 + C31959;
    const double C31967 = C31954 + C31955;
    const double C32319 = C32314 + C32315;
    const double C32317 = C32310 + C32311;
    const double C38933 = C38922 + C38923;
    const double C38931 = C38918 + C38919;
    const double C38928 = C38910 + C38911;
    const double C38926 = C38906 + C38907;
    const double C39359 = C39353 + C39354;
    const double C39356 = C39346 + C39347;
    const double C40213 = C40208 + C40209;
    const double C40211 = C40204 + C40205;
    const double C40631 = C40628 + C40629;
    const double C42521 = C42516 + C42517;
    const double C42519 = C42512 + C42513;
    const double C42825 = C42822 + C42823;
    const double C43549 = C43544 + C43545;
    const double C43547 = C43540 + C43541;
    const double C43963 = C43960 + C43961;
    const double C90250 = C87673 + C87674;
    const double C89942 = C89935 + C89936;
    const double C89940 = C89931 + C89932;
    const double C90745 = C90740 + C90741;
    const double C90743 = C90736 + C90737;
    const double C94140 = C94127 + C94128;
    const double C94135 = C94117 + C94118;
    const double C94133 = C94113 + C94114;
    const double C94131 = C94109 + C94110;
    const double C94129 = C94105 + C94106;
    const double C94383 = C94376 + C94377;
    const double C94380 = C94370 + C94371;
    const double C94378 = C94365 + C94366;
    const double C94547 = C94539 + C94540;
    const double C94985 = C94976 + C94977;
    const double C94983 = C94972 + C94973;
    const double C94981 = C94968 + C94969;
    const double C95291 = C95286 + C95287;
    const double C95289 = C95282 + C95283;
    const double C95984 = C95975 + C95976;
    const double C95982 = C95971 + C95972;
    const double C95980 = C95967 + C95968;
    const double C96332 = C96327 + C96328;
    const double C96330 = C96323 + C96324;
    const double C102624 = C102610 + C102611;
    const double C102622 = C102606 + C102607;
    const double C102620 = C102602 + C102603;
    const double C102618 = C102598 + C102599;
    const double C102616 = C102594 + C102595;
    const double C102614 = C102590 + C102591;
    const double C102936 = C102928 + C102929;
    const double C102934 = C102924 + C102925;
    const double C102932 = C102920 + C102921;
    const double C105652 = C103040 + C103041;
    const double C105344 = C105337 + C105338;
    const double C105342 = C105333 + C105334;
    const double C106159 = C106150 + C106151;
    const double C106157 = C106146 + C106147;
    const double C106155 = C106142 + C106143;
    const double C106153 = C106138 + C106139;
    const double C106489 = C106484 + C106485;
    const double C116864 = C116859 + C116860;
    const double C116862 = C116855 + C116856;
    const double C117260 = C117257 + C117258;
    const double C15640 = C15638 * C14036;
    const double C31477 = C15638 * C141384;
    const double C95492 = C15638 * C141384;
    const double C125705 = C15638 * C141499;
    const double C15322 = C15320 + C15315;
    const double C21666 = C16450 + C16430;
    const double C131449 = C126381 + C126382;
    const double C925 = C141309 * C915;
    const double C5983 = C5866 * C915;
    const double C22190 = C141358 * C915;
    const double C23053 = C141468 * C915;
    const double C47828 = C141358 * C915;
    const double C48691 = C47710 * C915;
    const double C68790 = C141497 * C915;
    const double C7166 = C141221 * C1098;
    const double C23303 = C141495 * C1098;
    const double C23293 = C22071 * C1098;
    const double C48941 = C47708 * C1098;
    const double C48931 = C47709 * C1098;
    const double C69903 = C141221 * C1098;
    const double C1797 = C141320 * C1787;
    const double C14223 = C14036 * C1787;
    const double C30093 = C141384 * C1787;
    const double C31951 = C141469 * C1787;
    const double C94120 = C141384 * C1787;
    const double C95964 = C93949 * C1787;
    const double C124352 = C141499 * C1787;
    const double C16673 = C141221 * C2124;
    const double C32427 = C141495 * C2124;
    const double C32423 = C22071 * C2124;
    const double C79516 = C141221 * C2124;
    const double C96440 = C47708 * C2124;
    const double C96436 = C47709 * C2124;
    const double C223 = C212 + C213;
    const double C310 = C299 + C300;
    const double C22208 = C22193 + C22194;
    const double C30111 = C30096 + C30097;
    const double C47846 = C47831 + C47832;
    const double C94138 = C94123 + C94124;
    const double C1028 = C1018 + C1019;
    const double C7184 = C7161 + C7162;
    const double C23308 = C23286 + C23287;
    const double C30958 = C30943 + C30944;
    const double C48946 = C48924 + C48925;
    const double C69921 = C69898 + C69899;
    const double C94979 = C94964 + C94965;
    const double C1712 = C1702 + C1703;
    const double C16317 = C16294 + C16295;
    const double C24103 = C24088 + C24089;
    const double C32096 = C32074 + C32075;
    const double C49741 = C49726 + C49727;
    const double C79114 = C79103 + C79104;
    const double C96109 = C96087 + C96088;
    const double C10790 = C8144 * C141221;
    const double C26781 = C8144 * C141495;
    const double C52405 = C8144 * C47708;
    const double C73357 = C8144 * C141221;
    const double C62181 = C62178 * C14036;
    const double C87680 = C62178 * C141384;
    const double C103047 = C62178 * C141384;
    const double C133155 = C62178 * C141499;
    const double C62863 = C61852 * C141358;
    const double C88303 = C61852 * C141497;
    const double C103701 = C61852 * C5866;
    const double C133772 = C61852 * C141358;
    const double C44229 = C141358 * C8684;
    const double C65964 = C141358 * C8684;
    const double C88718 = C68674 * C8684;
    const double C91277 = C141497 * C8684;
    const double C104116 = C5867 * C8684;
    const double C106697 = C5866 * C8684;
    const double C10045 = C10038 + C10039;
    const double C10208 = C10206 + C10207;
    const double C56304 = C56285 + C56286;
    const double C90175 = C90172 + C90173;
    const double C105577 = C105574 + C105575;
    const double C10921 = C10906 + C10907;
    const double C11138 = C11134 + C11135;
    const double C42824 = C42820 + C42821;
    const double C43405 = C43398 + C43399;
    const double C58706 = C58696 + C58697;
    const double C64809 = C64804 + C64805;
    const double C65287 = C65272 + C65273;
    const double C88094 = C88084 + C88085;
    const double C91069 = C91066 + C91067;
    const double C102935 = C102926 + C102927;
    const double C103492 = C103482 + C103483;
    const double C106033 = C106022 + C106023;
    const double C106487 = C106480 + C106481;
    const double C21834 = C21831 + C21832;
    const double C21913 = C21911 + C21912;
    const double C68436 = C68434 + C68435;
    const double C68518 = C68515 + C68516;
    const double C139245 = C139242 + C139243;
    const double C19051 = C19049 * C5863;
    const double C34719 = C19049 * C141494;
    const double C98731 = C19049 * C47707;
    const double C112429 = C19049 * C141216;
    const double C128876 = C19049 * C141452;
    const double C19052 = C19050 * C5863;
    const double C112430 = C19050 * C141216;
    const double C128878 = C19050 * C141452;
    const double C24087 = C141358 * C3578;
    const double C30838 = C141309 * C3578;
    const double C49725 = C141358 * C3578;
    const double C139709 = C139708 + C139697;
    const double C830 = (2 * (2 * ae * C139758 * C139668 + C139643 * C139959) +
                         C139962 + C139962 +
                         C139643 * (C139959 + C139963 + C139963 +
                                    C139643 * (2 * ae * C139758 * C139692 +
                                               C139643 * C139758 * C139735))) /
                        C139335;
    const double C3032 = (C139768 + ae * C139771 + C139643 * C139779 + C139962 +
                          C139758 * (C139707 + C139758 * C139797)) /
                         C139335;
    const double C3144 = (C139849 + ae * C139771 + C139643 * C139854 + C139962 +
                          C139758 * (C139707 + C139758 * C139862)) /
                         C139335;
    const double C3652 = (C139962 + C139801 * C139758 * C139840) / C139335;
    const double C3936 = (C139962 + C139801 * C139758 * C139920) / C139335;
    const double C7905 = C5871 * C3496;
    const double C23976 = C22079 * C3496;
    const double C24086 = C22173 * C3496;
    const double C24208 = C275 * C3496;
    const double C26890 = C22071 * C3496;
    const double C30837 = C188 * C3496;
    const double C30941 = C30076 * C3496;
    const double C37708 = C5869 * C3496;
    const double C39067 = C141221 * C3496;
    const double C49614 = C47717 * C3496;
    const double C49724 = C47811 * C3496;
    const double C52514 = C47709 * C3496;
    const double C60811 = C55527 * C3496;
    const double C70591 = C139356 * C3496;
    const double C77864 = C141221 * C3496;
    const double C94962 = C94103 * C3496;
    const double C1608 = (2 * (2 * ae * C139801 * C139668 + C139643 * C140023) +
                          C140026 + C140026 +
                          C139643 * (C140023 + C140027 + C140027 +
                                     C139643 * (2 * ae * C139801 * C139692 +
                                                C139643 * C139801 * C139735))) /
                         C139335;
    const double C3722 = (C140026 + C139758 * C139801 * C139862) / C139335;
    const double C5455 = (C139811 + ae * C139814 + C139643 * C139822 + C140026 +
                          C139801 * (C139707 + C139801 * C139840)) /
                         C139335;
    const double C5675 = (C139907 + ae * C139814 + C139643 * C139912 + C140026 +
                          C139801 * (C139707 + C139801 * C139920)) /
                         C139335;
    const double C6088 = C6082 + C6083;
    const double C7188 = C7169 + C7170;
    const double C26079 = C26070 + C26071;
    const double C51703 = C51694 + C51695;
    const double C69925 = C69906 + C69907;
    const double C14129 = C14123 + C14124;
    const double C16321 = C16302 + C16303;
    const double C37219 = C37210 + C37211;
    const double C101231 = C101222 + C101223;
    const double C126278 = C126271 + C126272;
    const double C15106 = C15094 + C15095;
    const double C40210 = C40202 + C40203;
    const double C116861 = C116853 + C116854;
    const double C125198 = C125186 + C125187;
    const double C19258 = C19255 + C19256;
    const double C62179 = C62175 + C62176;
    const double C82781 = C82776 + C82777;
    const double C6898 = C6886 + C6887;
    const double C69662 = C69650 + C69651;
    const double C8142 = C8134 + C8135;
    const double C38930 = C38916 + C38917;
    const double C102625 = C102612 + C102613;
    const double C11248 = C11240 + C11241;
    const double C73791 = C73783 + C73784;
    const double C87686 = C87684 + C87685;
    const double C9946 = C7036 * C141221;
    const double C56208 = C7036 * C141216;
    const double C72557 = C7036 * C141221;
    const double C56532 = C56309 * C275;
    const double C87683 = C87373 * C30076;
    const double C88304 = C87373 * C68773;
    const double C103050 = C87373 * C94103;
    const double C103702 = C87373 * C5966;
    const double C18936 = C18931 + C18932;
    const double C61854 = C61847 + C61848;
    const double C82381 = C82371 + C82372;
    const double C16169 = C16157 + C16158;
    const double C126165 = C126153 + C126154;
    const double C21407 = C16047 * C141221;
    const double C110534 = C16047 * C141216;
    const double C131204 = C16047 * C141221;
    const double C110683 = C110681 * C188;
    const double C3199 =
        (2 * C139643 * C139876 + C139643 * C139883 + C140128 + C140128 +
         C139758 * (2 * ae * C139798 +
                    C139758 * (2 * C139643 * C139881 +
                               C139643 * (C139881 + (C139715 * C139716 +
                                                     C139866 * bs[7] *
                                                         std::pow(C139649, 7)) *
                                                        C139650 * C139647)))) /
        C139335;
    const double C4007 =
        (C140128 +
         C139801 *
             (ae * C139841 +
              C139758 * (2 * C139643 * C139934 +
                         C139643 * (C139934 + std::pow(C139649, 7) * bs[7] *
                                                  C139925 * C139647)))) /
        C139335;
    const double C3204 = C188 * C3029;
    const double C6264 = C5966 * C3029;
    const double C23431 = C22173 * C3029;
    const double C49069 = C47811 * C3029;
    const double C69059 = C68773 * C3029;
    const double C3798 = C188 * C3575;
    const double C24425 = C22173 * C3575;
    const double C50057 = C47811 * C3575;
    const double C5784 =
        (2 * C139643 * C139950 + C139643 * C139957 + C140246 + C140246 +
         C139801 * (2 * ae * C139841 +
                    C139801 * (2 * C139643 * C139955 +
                               C139643 * (C139955 + (C139715 * C139716 +
                                                     C139940 * bs[7] *
                                                         std::pow(C139649, 7)) *
                                                        C139650 * C139647)))) /
        C139335;
    const double C5789 = C275 * C5452;
    const double C14760 = C14206 * C5452;
    const double C32655 = C30076 * C5452;
    const double C96668 = C94103 * C5452;
    const double C124873 = C124335 * C5452;
    const double C140293 = ae * C140292;
    const double C6881 =
        (2 * C140123 + C139758 * C140292 + (C139694 + C139730 * C139866) * ae) /
        C139330;
    const double C8007 = (C139801 * C140292) / C139330;
    const double C140594 = ae * C140593;
    const double C16152 =
        (2 * C140241 + C139801 * C140593 + (C139694 + C139730 * C139940) * ae) /
        C139330;
    const double C140404 = C140387 + C140402;
    const double C140453 = ae * C140451;
    const double C140715 = C140700 + C140713;
    const double C140638 = ae * C140637;
    const double C18821 =
        (2 * C140515 + C139801 * C140637 + (C140266 + C140389 * C139940) * ae) /
        C139330;
    const double C139750 = C139749 + C139733;
    const double C8010 =
        (C139801 *
         (C139797 + C139978 +
          C139758 *
              (C139748 + C139758 * (C139787 + ae * C139643 * C139789 +
                                    C139643 * (ae * C139789 +
                                               C139643 * std::pow(C139649, 7) *
                                                   bs[7] * C139762))))) /
        C139335;
    const double C140154 = ae * C140152;
    const double C14881 = C5871 * C14877;
    const double C29249 = C22079 * C14877;
    const double C54873 = C47717 * C14877;
    const double C60812 = C55527 * C14877;
    const double C78686 = C139356 * C14877;
    const double C140099 = ae * C140097;
    const double C6733 = (2 * C139960 + C139758 * C140097) / C139330;
    const double C7891 = (C139801 * C140097) / C139330;
    const double C140201 = ae * C140199;
    const double C15866 = (2 * C140024 + C139801 * C140199) / C139330;
    const double C6736 =
        (2 * C139959 + C139758 * C140096 + C140253 + C140253 +
         C139643 *
             (2 * ae * (2 * C139970 + C139758 * (C139692 + C139728 * C139866)) +
              C139643 * (2 * C139971 +
                         C139758 * (C139735 +
                                    (C139715 * C139716 +
                                     C139647 * bs[7] * std::pow(C139649, 7)) *
                                        C139650 * C139866)))) /
        C139335;
    const double C9865 =
        (3 * (C139779 + C139963 + C139758 * C140354) + C140253 +
         C139758 *
             (2 * C140354 + C140100 +
              C139758 * (C139793 + C139979 +
                         C139758 * (C139741 +
                                    C139758 * (ae * C139789 +
                                               C139643 * std::pow(C139649, 7) *
                                                   bs[7] * C139762))))) /
        C139335;
    const double C10032 =
        (3 * (C139854 + C139963 + C139758 * C140362) + C140253 +
         C139758 *
             (2 * C140362 + C140100 +
              C139758 * (C139860 + C139979 +
                         C139758 * (C139741 +
                                    C139758 * (ae * C139789 +
                                               C139643 * std::pow(C139649, 7) *
                                                   bs[7] * C139846))))) /
        C139335;
    const double C10782 =
        (C140253 +
         C139801 * (2 * C139758 * C139836 +
                    C139758 * (C139836 +
                               (ae * C139832 + C139643 * std::pow(C139649, 7) *
                                                   bs[7] * C139805) *
                                   C139866))) /
        C139335;
    const double C11238 =
        (C140253 +
         C139801 * (2 * C139758 * C139918 +
                    C139758 * (C139918 +
                               (ae * C139832 + C139643 * std::pow(C139649, 7) *
                                                   bs[7] * C139904) *
                                   C139866))) /
        C139335;
    const double C9781 = C5871 * C9771;
    const double C56040 = C55527 * C9771;
    const double C72400 = C139356 * C9771;
    const double C10567 = C5871 * C10554;
    const double C56752 = C55527 * C10554;
    const double C73144 = C139356 * C10554;
    const double C15869 =
        (2 * C140023 + C139801 * C140198 + C140543 + C140543 +
         C139643 *
             (2 * ae * (2 * C140034 + C139801 * (C139692 + C139728 * C139940)) +
              C139643 * (2 * C140035 +
                         C139801 * (C139735 +
                                    (C139715 * C139716 +
                                     C139647 * bs[7] * std::pow(C139649, 7)) *
                                        C139650 * C139940)))) /
        C139335;
    const double C18923 =
        (C140543 +
         C139758 * (2 * C140442 +
                    C139801 * (C139860 +
                               (ae * C139789 + C139643 * std::pow(C139649, 7) *
                                                   bs[7] * C139846) *
                                   C139940))) /
        C139335;
    const double C21495 =
        (3 * (C139822 + C140027 + C139801 * C140651) + C140543 +
         C139801 *
             (2 * C140651 + C140202 +
              C139801 * (C139836 + C140043 +
                         C139801 * (C139741 +
                                    C139801 * (ae * C139832 +
                                               C139643 * std::pow(C139649, 7) *
                                                   bs[7] * C139805))))) /
        C139335;
    const double C21826 =
        (3 * (C139912 + C140027 + C139801 * C140669) + C140543 +
         C139801 *
             (2 * C140669 + C140202 +
              C139801 * (C139918 + C140043 +
                         C139801 * (C139741 +
                                    C139801 * (ae * C139832 +
                                               C139643 * std::pow(C139649, 7) *
                                                   bs[7] * C139904))))) /
        C139335;
    const double C21321 = C5871 * C21311;
    const double C110453 = C55527 * C21311;
    const double C131122 = C139356 * C21311;
    const double C140767 = C140766 + C140756;
    const double C140838 = ae * C140836;
    const double C65267 = (2 * C140445 + C139801 * C140836) / C139330;
    const double C65622 =
        (2 * C140444 + C139801 * C140835 + C140858 + C140858 +
         C139758 *
             (2 * ae * (2 * C140805 + C139801 * (C139776 + C139789 * C139940)) +
              C139758 * (2 * C140806 +
                         C139801 * (C139881 +
                                    (C139715 * C139716 +
                                     C139866 * bs[7] * std::pow(C139649, 7)) *
                                        C139650 * C139940)))) /
        C139335;
    const double C68510 =
        (3 * (C140425 + C140448 + C139801 * C140895) + C140858 +
         C139801 *
             (2 * C140895 + C140839 +
              C139801 * (C140791 + C140814 +
                         C139801 * (C140758 +
                                    C139801 * (ae * C139832 +
                                               C139758 * std::pow(C139649, 7) *
                                                   bs[7] * C139925))))) /
        C139335;
    const double C68276 = C47811 * C68011;
    const double C112433 = C188 * C68011;
    const double C139009 = C22173 * C68011;
    const double C140978 = C140977 + C140960;
    const double C60730 =
        (2 * C140616 + C139758 * C140796 + C140849 + C140849 +
         C139801 * (2 * ae * C140784 +
                    C139801 * (2 * C139758 * C139955 +
                               C139758 * (C139955 + (C139715 * C139716 +
                                                     C139940 * bs[7] *
                                                         std::pow(C139649, 7)) *
                                                        C139650 * C139866)))) /
        C139335;
    const double C60732 = C275 * C60419;
    const double C65050 = C14206 * C60419;
    const double C91386 = C30076 * C60419;
    const double C106810 = C94103 * C60419;
    const double C135861 = C124335 * C60419;
    const double C140871 = ae * C140870;
    const double C65391 =
        (2 * C140511 + C139801 * C140870 + (C140373 + C140753 * C139940) * ae) /
        C139330;
    const double C140916 = C140899 + C140914;
    const double C24751 = C24743 + C24744;
    const double C31481 = C31472 + C31473;
    const double C50380 = C50372 + C50373;
    const double C6374 = C6372 * C5867;
    const double C23542 = C6372 * C141358;
    const double C49180 = C6372 * C141358;
    const double C69158 = C6372 * C68674;
    const double C31164 = C31163 + C3797;
    const double C24546 = C24545 * C141358;
    const double C50168 = C24545 * C141358;
    const double C31474 = C30842 * C30076;
    const double C34423 = C30842 * C22079;
    const double C95489 = C30842 * C94103;
    const double C98435 = C30842 * C47717;
    const double C32209 = C1969 * C22071;
    const double C96222 = C1969 * C47709;
    const double C16438 = C14401 * C141221;
    const double C37296 = C14401 * C22071;
    const double C101308 = C14401 * C47709;
    const double C126386 = C14401 * C141221;
    const double C18714 = C14990 * C141221;
    const double C128581 = C14990 * C141221;
    const double C7288 =
        (2 * (2 * ae * C139771 + C139758 * C140264) + C140273 + C140273 +
         C139758 * (C140264 + C140270 + C140270 +
                    C139758 * (2 * C139786 + C139758 * C139643 * C139881))) /
        C139335;
    const double C8683 =
        (C140273 +
         C139801 * (C140302 + ae * C139758 * C139825 +
                    C139758 * (C139829 + C139758 * C139643 * C139934))) /
        C139335;
    const double C6893 = C5867 * C6879;
    const double C7293 = C5966 * C6879;
    const double C7421 = C275 * C6879;
    const double C10036 = C5871 * C6879;
    const double C10128 = C5965 * C6879;
    const double C26159 = C22173 * C6879;
    const double C51783 = C47811 * C6879;
    const double C55753 = C55593 * C6879;
    const double C56297 = C55527 * C6879;
    const double C69657 = C68674 * C6879;
    const double C70027 = C68773 * C6879;
    const double C72639 = C139356 * C6879;
    const double C8019 = C5867 * C8005;
    const double C8349 = C5966 * C8005;
    const double C8473 = C275 * C8005;
    const double C10904 = C5871 * C8005;
    const double C11032 = C5965 * C8005;
    const double C18180 = C188 * C8005;
    const double C27002 = C22173 * C8005;
    const double C38769 = C141358 * C8005;
    const double C39351 = C30076 * C8005;
    const double C42720 = C22172 * C8005;
    const double C52626 = C47811 * C8005;
    const double C70699 = C68674 * C8005;
    const double C71005 = C68773 * C8005;
    const double C73459 = C139356 * C8005;
    const double C77594 = C141358 * C8005;
    const double C81443 = C47810 * C8005;
    const double C87371 = C55527 * C8005;
    const double C102930 = C94103 * C8005;
    const double C13645 = C5966 * C13396;
    const double C18182 = C188 * C13396;
    const double C43821 = C22173 * C13396;
    const double C61956 = C47811 * C13396;
    const double C76136 = C68773 * C13396;
    const double C15637 = C15629 + C15630;
    const double C40904 = C40897 + C40898;
    const double C63341 = C63334 + C63335;
    const double C15321 = C15319 + C15312;
    const double C140382 = C140381 + C140375;
    const double C11025 =
        (2 * (2 * ae * C139801 * C139769 + C139758 * C140444) + C140447 +
         C140447 +
         C139758 * (C140444 + C140448 + C140448 +
                    C139758 * (2 * ae * C139801 * C139776 +
                               C139758 * C139801 * C139881))) /
        C139335;
    const double C13876 =
        (C139928 + ae * C140408 + C139758 * C140425 + C140447 +
         C139801 *
             (C140380 + C139801 * (C139931 + ae * C139758 * C139819 +
                                   C139758 * (C139826 + C139758 * C139934)))) /
        C139335;
    const double C64648 = C64644 + C64645;
    const double C64808 = C64802 + C64803;
    const double C65291 = C65280 + C65281;
    const double C91068 = C91064 + C91065;
    const double C93320 = C93311 + C93312;
    const double C106486 = C106478 + C106479;
    const double C108750 = C108741 + C108742;
    const double C135622 = C135616 + C135617;
    const double C136079 = C136072 + C136073;
    const double C112435 = C112434 + C19043;
    const double C68183 = C65523 * C141358;
    const double C112362 = C65523 * C141309;
    const double C138923 = C65523 * C141358;
    const double C112223 = C112221 * C55527;
    const double C114188 = C114187 * C141216;
    const double C14659 = C14657 * C14037;
    const double C32534 = C14657 * C141384;
    const double C96547 = C14657 * C141384;
    const double C124767 = C14657 * C124182;
    const double C750 = C746 * C141309;
    const double C1528 = C1525 * C141309;
    const double C22815 = C1525 * C141358;
    const double C48453 = C1525 * C141358;
    const double C2306 = C2303 * C141309;
    const double C6630 = C6628 * C5867;
    const double C23874 = C6628 * C141358;
    const double C49512 = C6628 * C141358;
    const double C69407 = C6628 * C68674;
    const double C24861 = C24860 * C141358;
    const double C50482 = C24860 * C141358;
    const double C16899 =
        (2 * (2 * ae * C139814 + C139801 * C140306) + C140574 + C140574 +
         C139801 * (C140306 + C140571 + C140571 +
                    C139801 * (2 * C139829 + C139801 * C140432))) /
        C139335;
    const double C16164 = C14037 * C16150;
    const double C16791 = C188 * C16150;
    const double C16904 = C14206 * C16150;
    const double C21829 = C5871 * C16150;
    const double C21994 = C14205 * C16150;
    const double C37607 = C30076 * C16150;
    const double C101619 = C94103 * C16150;
    const double C109775 = C109465 * C16150;
    const double C110889 = C55527 * C16150;
    const double C126160 = C124182 * C16150;
    const double C126801 = C124335 * C16150;
    const double C131601 = C139356 * C16150;
    const double C64893 = C64892 * C14037;
    const double C91168 = C64892 * C141384;
    const double C106588 = C64892 * C141384;
    const double C135699 = C64892 * C124182;
    const double C19462 =
        (2 * (2 * ae * C140408 + C139801 * C140616) + C140626 + C140626 +
         C139801 *
             (C140616 + C140623 + C140623 +
              C139801 * (2 * ae * C140617 + C139801 * C139758 * C139955))) /
        C139335;
    const double C19467 = C14206 * C18820;
    const double C47631 = C30076 * C18820;
    const double C65401 = C14037 * C18820;
    const double C65853 = C55527 * C18820;
    const double C68513 = C47811 * C18820;
    const double C68595 = C14205 * C18820;
    const double C109305 = C94103 * C18820;
    const double C110377 = C109465 * C18820;
    const double C112636 = C188 * C18820;
    const double C129274 = C124335 * C18820;
    const double C136187 = C124182 * C18820;
    const double C139240 = C22173 * C18820;
    const double C140695 = C140694 + C140688;
    const double C68696 = C139366 * C2966;
    const double C68694 = C139366 * C826;
    const double C68692 = C139366 * C116;
    const double C68691 = C139366 * C115;
    const double C68689 = C139366 * C827;
    const double C68687 = C139366 * C2965;
    const double C68684 = C139366 * C2964;
    const double C68682 = C139366 * C828;
    const double C68680 = C139366 * C114;
    const double C69526 = C139366 * C6731;
    const double C69517 = C139366 * C6732;
    const double C69778 = C6086 * C139366;
    const double C69774 = C1031 * C139366;
    const double C69770 = C7034 * C139366;
    const double C69766 = C7032 * C139366;
    const double C69908 = C139366 * C3027;
    const double C69904 = C139366 * C2961;
    const double C69900 = C139366 * C911;
    const double C69896 = C139366 * C822;
    const double C69892 = C139366 * C3026;
    const double C69888 = C139366 * C2960;
    const double C69884 = C139366 * C912;
    const double C69880 = C139366 * C823;
    const double C70264 = C139366 * C3085;
    const double C70260 = C139366 * C1005;
    const double C70256 = C139366 * C3084;
    const double C70252 = C139366 * C1006;
    const double C70592 = C139366 * C7889;
    const double C70590 = C139366 * C3495;
    const double C70588 = C139366 * C1605;
    const double C70587 = C139366 * C1606;
    const double C70585 = C139366 * C3494;
    const double C70583 = C139366 * C7890;
    const double C72399 = C139366 * C9770;
    const double C72560 = C9954 * C139366;
    const double C72645 = C139366 * C6729;
    const double C72641 = C139366 * C6880;
    const double C72883 = C139366 * C7002;
    const double C73143 = C139366 * C10553;
    const double C73360 = C10799 * C139366;
    const double C73356 = C10797 * C139366;
    const double C73473 = C139366 * C3490;
    const double C73469 = C139366 * C3572;
    const double C73465 = C139366 * C7887;
    const double C73461 = C139366 * C8006;
    const double C73789 = C139366 * C3646;
    const double C73785 = C139366 * C8128;
    const double C75833 = C139366 * C13307;
    const double C75831 = C139366 * C13305;
    const double C75829 = C139366 * C5329;
    const double C76533 = C139366 * C3496;
    const double C76531 = C139366 * C1604;
    const double C77865 = C139366 * C3573;
    const double C77861 = C139366 * C3491;
    const double C78273 = C139366 * C3647;
    const double C78685 = C139366 * C13306;
    const double C78683 = C139366 * C5330;
    const double C79105 = C139366 * C1689;
    const double C79101 = C139366 * C1600;
    const double C79097 = C139366 * C1690;
    const double C79093 = C139366 * C1601;
    const double C79513 = C139366 * C1783;
    const double C79509 = C139366 * C1784;
    const double C82377 = C139366 * C13301;
    const double C82373 = C139366 * C13393;
    const double C82778 = C139366 * C13475;
    const double C85487 = C139366 * C18584;
    const double C85485 = C139366 * C15865;
    const double C85795 = C139366 * C5325;
    const double C85791 = C139366 * C5391;
    const double C86097 = C139366 * C5449;
    const double C124184 = C139366 * C5331;
    const double C125933 = C139366 * C15864;
    const double C126051 = C14127 * C139366;
    const double C126047 = C1715 * C139366;
    const double C126043 = C16045 * C139366;
    const double C126039 = C16043 * C139366;
    const double C126273 = C139366 * C5392;
    const double C126269 = C139366 * C5326;
    const double C126592 = C139366 * C5450;
    const double C128578 = C18717 * C139366;
    const double C128574 = C18715 * C139366;
    const double C131121 = C139366 * C21310;
    const double C131207 = C21415 * C139366;
    const double C131366 = C139366 * C15862;
    const double C131362 = C139366 * C16013;
    const double C131603 = C139366 * C16151;
    const double C101 =
        ((((0 - (C139331 * C139329) / C139330) * ae) / C139330 -
          (0 * be) / C139345 + C139332 / C139330) /
             C139336 -
         ((C139331 * C139359 + 0) * be) / C139330) /
            C139336 +
        ((C139331 * (C139359 / C139336 -
                     ((C139331 * C139366 + C141452) * be) / C139330 + C139356) +
          C141494) *
         ae) /
            C139330 +
        C139366 / C139336 - ((C139331 * C139356 + C141221) * be) / C139330;
    const double C103 =
        (C139359 / C139336 - ((C139331 * C139366 + C141452) * be) / C139330 +
         C139356) /
            C139336 +
        ((C139331 * (C139366 / C139336 -
                     ((C139331 * C139356 + C141221) * be) / C139330) +
          C141495) *
         ae) /
            C139330 +
        2 * (C139356 / C139336 - (0 * be) / C139330);
    const double C105 =
        (C139366 / C139336 - ((C139331 * C139356 + C141221) * be) / C139330) /
            C139336 +
        ((C139331 * (C139356 / C139336 - (0 * be) / C139330) + C22071) * ae) /
            C139330;
    const double C22075 = C139359 / C139336 -
                          ((C139331 * C139366 + C141452) * be) / C139330 +
                          C139356;
    const double C22077 =
        C139366 / C139336 - ((C139331 * C139356 + C141221) * be) / C139330;
    const double C47713 = C139359 / C139336 +
                          ((C139331 * C139366 + C141452) * ae) / C139330 +
                          C139356;
    const double C47715 =
        C139366 / C139336 + ((C139331 * C139356 + C141221) * ae) / C139330;
    const double C139367 = C139354 - C139365;
    const double C6765 = C6754 + C5879;
    const double C6763 = C6750 + C5881;
    const double C6761 = C6744 + C5878;
    const double C6759 = C6740 + C5876;
    const double C9783 = C9776 + C6746;
    const double C10570 = C10562 + C7898;
    const double C10568 = C10558 + C7896;
    const double C15898 = C15887 + C14039;
    const double C15896 = C15883 + C7903;
    const double C15894 = C15877 + C13315;
    const double C15892 = C15873 + C7900;
    const double C18596 = C18591 + C13317;
    const double C21322 = C21316 + C15879;
    const double C22936 = C22920 + C22086;
    const double C25827 = C25818 + C22922;
    const double C31724 = C31711 + C23979;
    const double C36967 = C36958 + C29246;
    const double C48574 = C48558 + C47724;
    const double C51451 = C51442 + C48560;
    const double C95737 = C95724 + C49617;
    const double C100979 = C100970 + C54870;
    const double C56046 = C56038 + C55533;
    const double C56045 = C56036 + C55534;
    const double C56044 = C56034 + C55535;
    const double C56043 = C56031 + C55532;
    const double C56042 = C56029 + C55531;
    const double C56041 = C56027 + C55530;
    const double C57939 = C57936 + C56033;
    const double C58467 = C58462 + C56747;
    const double C58466 = C58460 + C56746;
    const double C58465 = C58458 + C56745;
    const double C61515 = C61510 + C60807;
    const double C61514 = C61508 + C56750;
    const double C61513 = C61505 + C60315;
    const double C62507 = C62500 + C60808;
    const double C62506 = C62498 + C56749;
    const double C62505 = C62494 + C60314;
    const double C62504 = C62492 + C56748;
    const double C64400 = C64396 + C60316;
    const double C65166 = C65161 + C62496;
    const double C67935 = C67931 + C62497;
    const double C87071 = C87069 + C56751;
    const double C110454 = C110451 + C62502;
    const double C113953 = C113950 + C67933;
    const double C69535 = C69524 + C68686;
    const double C69533 = C69520 + C68688;
    const double C69531 = C69514 + C68685;
    const double C69529 = C69510 + C68683;
    const double C72402 = C72395 + C69516;
    const double C73147 = C73139 + C70584;
    const double C73145 = C73135 + C70582;
    const double C78690 = C78681 + C70589;
    const double C78688 = C78677 + C70586;
    const double C81973 = C81968 + C75832;
    const double C85489 = C85481 + C75830;
    const double C125936 = C125931 + C78684;
    const double C131123 = C131117 + C85486;
    const double C9952 = C9945 + C7018;
    const double C10035 = C7181 + C7182;
    const double C10034 = C7179 + C7180;
    const double C10286 = C7551 + C7552;
    const double C43683 = C10926 + C10927;
    const double C43680 = C10927 + C10926;
    const double C43682 = C10924 + C10925;
    const double C43681 = C10925 + C10924;
    const double C44095 = C11250 + C11251;
    const double C44094 = C11251 + C11250;
    const double C21413 = C21406 + C16029;
    const double C21574 = C16314 + C16315;
    const double C21573 = C16312 + C16313;
    const double C21828 = C16680 + C16681;
    const double C139545 = C139544 - C139542;
    const double C6256 = C6238 * C821;
    const double C6247 = C6238 * C822;
    const double C7295 = C6238 * C2961;
    const double C8351 = C6238 * C3491;
    const double C103804 = C6238 * C3490;
    const double C106364 = C6238 * C7887;
    const double C108983 = C6238 * C13301;
    const double C22454 = C22434 * C111;
    const double C22445 = C22434 * C110;
    const double C22439 = C22434 * C109;
    const double C23425 = C22434 * C822;
    const double C23419 = C22434 * C821;
    const double C24419 = C22434 * C1600;
    const double C24413 = C22434 * C1599;
    const double C39208 = C22434 * C3491;
    const double C40481 = C22434 * C5326;
    const double C40474 = C22434 * C1601;
    const double C43814 = C22434 * C3490;
    const double C47220 = C22434 * C5325;
    const double C136402 = C22434 * C13301;
    const double C139006 = C22434 * C15862;
    const double C48092 = C48072 * C111;
    const double C48083 = C48072 * C110;
    const double C48077 = C48072 * C109;
    const double C49063 = C48072 * C822;
    const double C49057 = C48072 * C821;
    const double C50051 = C48072 * C1600;
    const double C50045 = C48072 * C1599;
    const double C62994 = C48072 * C5326;
    const double C62988 = C48072 * C5325;
    const double C62984 = C48072 * C1601;
    const double C65628 = C48072 * C13301;
    const double C65624 = C48072 * C3490;
    const double C68273 = C48072 * C15862;
    const double C78005 = C48072 * C3491;
    const double C6270 = C6259 + C6260;
    const double C6265 = C6244 + C6245;
    const double C7309 = C7298 + C7299;
    const double C8365 = C8354 + C8355;
    const double C103808 = C103802 + C8359;
    const double C106371 = C106362 + C11028;
    const double C108992 = C108985 + C13640;
    const double C6268 = C6253 + C6254;
    const double C6267 = C6250 + C6251;
    const double C103810 = C103806 + C8357;
    const double C108990 = C108981 + C13642;
    const double C22463 = C22451 + C22452;
    const double C22462 = C22448 + C22449;
    const double C22460 = C22442 + C22443;
    const double C23434 = C23422 + C23423;
    const double C23432 = C23416 + C23417;
    const double C24428 = C24416 + C24417;
    const double C24426 = C24410 + C24411;
    const double C40486 = C40479 + C29549;
    const double C40485 = C40476 + C24422;
    const double C43823 = C43816 + C27000;
    const double C47226 = C47218 + C29547;
    const double C136409 = C136404 + C43819;
    const double C139011 = C139004 + C47223;
    const double C48101 = C48089 + C48090;
    const double C48100 = C48086 + C48087;
    const double C48098 = C48080 + C48081;
    const double C49072 = C49060 + C49061;
    const double C49070 = C49054 + C49055;
    const double C50060 = C50048 + C50049;
    const double C50058 = C50042 + C50043;
    const double C63005 = C62996 + C55173;
    const double C63003 = C62990 + C55171;
    const double C63001 = C62986 + C50054;
    const double C65637 = C65630 + C61953;
    const double C65635 = C65626 + C52624;
    const double C68278 = C68271 + C62992;
    const double C69063 = C69048 + C69049;
    const double C69062 = C69045 + C69046;
    const double C88412 = C88408 + C71013;
    const double C93560 = C93551 + C76133;
    const double C55590 =
        ((((0 - (C139394 * C139515) / C139330) * ae) / C139330 -
          (0 * be) / C139345 + C139412 / C139330) /
             C139336 -
         ((C139394 * C139530 + 0) * be) / C139330) /
            C139336 +
        ((C139394 * (C139530 / C139336 -
                     ((C139394 * C139526 + C141468) * be) / C139330 + C139527) +
          C141496) *
         ae) /
            C139330 +
        C139526 / C139336 - ((C139394 * C139527 + C141358) * be) / C139330;
    const double C55591 =
        (C139530 / C139336 - ((C139394 * C139526 + C141468) * be) / C139330 +
         C139527) /
            C139336 +
        ((C139394 * (C139526 / C139336 -
                     ((C139394 * C139527 + C141358) * be) / C139330) +
          C141497) *
         ae) /
            C139330 +
        2 * (C139527 / C139336 - (0 * be) / C139330);
    const double C55592 =
        (C139526 / C139336 - ((C139394 * C139527 + C141358) * be) / C139330) /
            C139336 +
        ((C139394 * (C139527 / C139336 - (0 * be) / C139330) + C68674) * ae) /
            C139330;
    const double C68771 = C139530 / C139336 -
                          ((C139394 * C139526 + C141468) * be) / C139330 +
                          C139527;
    const double C68772 =
        C139526 / C139336 - ((C139394 * C139527 + C141358) * be) / C139330;
    const double C22211 = C22203 + C22204;
    const double C22565 = C22564 + C22558;
    const double C22734 = C22730 + C22731;
    const double C40063 = C24108 + C24109;
    const double C40052 = C24109 + C24108;
    const double C40062 = C24106 + C24107;
    const double C40053 = C24107 + C24106;
    const double C40901 = C24753 + C24754;
    const double C40896 = C24754 + C24753;
    const double C138757 = C46923 + C46922;
    const double C138758 = C46921 + C46920;
    const double C139239 = C47531 + C47530;
    const double C138927 = C138922 + C133767;
    const double C47849 = C47841 + C47842;
    const double C48203 = C48202 + C48196;
    const double C48372 = C48368 + C48369;
    const double C78832 = C49746 + C49747;
    const double C78829 = C49747 + C49746;
    const double C78831 = C49744 + C49745;
    const double C78830 = C49745 + C49744;
    const double C79652 = C50382 + C50383;
    const double C79651 = C50383 + C50382;
    const double C68015 = C62644 + C62645;
    const double C68014 = C62642 + C62643;
    const double C68189 = C68182 + C62856;
    const double C68512 = C63338 + C63339;
    const double C139616 = C139615 - C139613;
    const double C14752 = C14734 * C1599;
    const double C14743 = C14734 * C1600;
    const double C15743 = C14734 * C3491;
    const double C16906 = C14734 * C5326;
    const double C62381 = C14734 * C3490;
    const double C65044 = C14734 * C7887;
    const double C66074 = C14734 * C13301;
    const double C30616 = C30596 * C111;
    const double C30607 = C30596 * C110;
    const double C30601 = C30596 * C109;
    const double C31590 = C30596 * C822;
    const double C31584 = C30596 * C821;
    const double C32649 = C30596 * C1600;
    const double C32643 = C30596 * C1599;
    const double C39769 = C30596 * C2961;
    const double C39762 = C30596 * C823;
    const double C41038 = C30596 * C3491;
    const double C43122 = C30596 * C2960;
    const double C44364 = C30596 * C3490;
    const double C90408 = C30596 * C6729;
    const double C91383 = C30596 * C7887;
    const double C94643 = C94623 * C111;
    const double C94634 = C94623 * C110;
    const double C94628 = C94623 * C109;
    const double C95603 = C94623 * C822;
    const double C95597 = C94623 * C821;
    const double C96662 = C94623 * C1600;
    const double C96656 = C94623 * C1599;
    const double C103258 = C94623 * C2961;
    const double C103252 = C94623 * C2960;
    const double C103248 = C94623 * C823;
    const double C105810 = C94623 * C6729;
    const double C106807 = C94623 * C3490;
    const double C106803 = C94623 * C7887;
    const double C117653 = C94623 * C3491;
    const double C14766 = C14755 + C14756;
    const double C14761 = C14740 + C14741;
    const double C15757 = C15746 + C15747;
    const double C16920 = C16909 + C16910;
    const double C62385 = C62379 + C15751;
    const double C65053 = C65046 + C18479;
    const double C66083 = C66076 + C19465;
    const double C14764 = C14749 + C14750;
    const double C14763 = C14746 + C14747;
    const double C15755 = C15740 + C15741;
    const double C62387 = C62383 + C15749;
    const double C65051 = C65042 + C18481;
    const double C30625 = C30613 + C30614;
    const double C30624 = C30610 + C30611;
    const double C30622 = C30604 + C30605;
    const double C31599 = C31587 + C31588;
    const double C31597 = C31581 + C31582;
    const double C32658 = C32646 + C32647;
    const double C32656 = C32640 + C32641;
    const double C39774 = C39767 + C34220;
    const double C39773 = C39764 + C31593;
    const double C41040 = C41036 + C35117;
    const double C43128 = C43120 + C34218;
    const double C44370 = C44362 + C35115;
    const double C90412 = C90406 + C43125;
    const double C91387 = C91381 + C44367;
    const double C94652 = C94640 + C94641;
    const double C94651 = C94637 + C94638;
    const double C94649 = C94631 + C94632;
    const double C95612 = C95600 + C95601;
    const double C95610 = C95594 + C95595;
    const double C96671 = C96659 + C96660;
    const double C96669 = C96653 + C96654;
    const double C103269 = C103260 + C98232;
    const double C103267 = C103254 + C98230;
    const double C103265 = C103250 + C95606;
    const double C105814 = C105808 + C103256;
    const double C106813 = C106805 + C99127;
    const double C106811 = C106801 + C104218;
    const double C117655 = C117651 + C99129;
    const double C124877 = C124862 + C124863;
    const double C124876 = C124859 + C124860;
    const double C125822 = C125807 + C125808;
    const double C133362 = C133358 + C125816;
    const double C135862 = C135853 + C128374;
    const double C109462 =
        ((((0 - (C139397 * C139586) / C139330) * ae) / C139330 -
          (0 * be) / C139345 + C139438 / C139330) /
             C139336 -
         ((C139397 * C139601 + 0) * be) / C139330) /
            C139336 +
        ((C139397 * (C139601 / C139336 -
                     ((C139397 * C139597 + C141469) * be) / C139330 + C139598) +
          C141498) *
         ae) /
            C139330 +
        C139597 / C139336 - ((C139397 * C139598 + C141384) * be) / C139330;
    const double C109463 =
        (C139601 / C139336 - ((C139397 * C139597 + C141469) * be) / C139330 +
         C139598) /
            C139336 +
        ((C139397 * (C139597 / C139336 -
                     ((C139397 * C139598 + C141384) * be) / C139330) +
          C141499) *
         ae) /
            C139330 +
        2 * (C139598 / C139336 - (0 * be) / C139330);
    const double C109464 =
        (C139597 / C139336 - ((C139397 * C139598 + C141384) * be) / C139330) /
            C139336 +
        ((C139397 * (C139598 / C139336 - (0 * be) / C139330) + C124182) * ae) /
            C139330;
    const double C124333 = C139601 / C139336 -
                           ((C139397 * C139597 + C141469) * be) / C139330 +
                           C139598;
    const double C124334 =
        C139597 / C139336 - ((C139397 * C139598 + C141384) * be) / C139330;
    const double C30114 = C30106 + C30107;
    const double C30357 = C30353 + C30354;
    const double C30521 = C30520 + C30514;
    const double C38925 = C30963 + C30964;
    const double C38914 = C30964 + C30963;
    const double C38924 = C30961 + C30962;
    const double C38915 = C30962 + C30961;
    const double C39355 = C31274 + C31275;
    const double C39350 = C31275 + C31274;
    const double C89927 = C42521 + C42520;
    const double C89928 = C42519 + C42518;
    const double C90255 = C90250 + C87675;
    const double C94141 = C94133 + C94134;
    const double C94384 = C94380 + C94381;
    const double C94548 = C94547 + C94541;
    const double C115678 = C94984 + C94985;
    const double C115675 = C94985 + C94984;
    const double C115677 = C94982 + C94983;
    const double C115676 = C94983 + C94982;
    const double C116070 = C95290 + C95291;
    const double C116069 = C95291 + C95290;
    const double C105330 = C102620 + C102621;
    const double C105329 = C102618 + C102619;
    const double C105657 = C105652 + C103042;
    const double C19039 = C15322 * C141221;
    const double C34720 = C15322 * C141495;
    const double C98732 = C15322 * C47708;
    const double C128877 = C15322 * C141221;
    const double C934 = C924 + C925;
    const double C5999 = C5982 + C5983;
    const double C22206 = C22189 + C22190;
    const double C23067 = C23052 + C23053;
    const double C47844 = C47827 + C47828;
    const double C48705 = C48690 + C48691;
    const double C7186 = C7165 + C7166;
    const double C23311 = C23292 + C23293;
    const double C48949 = C48930 + C48931;
    const double C69923 = C69902 + C69903;
    const double C1806 = C1796 + C1797;
    const double C14239 = C14222 + C14223;
    const double C30109 = C30092 + C30093;
    const double C31965 = C31950 + C31951;
    const double C94136 = C94119 + C94120;
    const double C95978 = C95963 + C95964;
    const double C16683 = C16672 + C16673;
    const double C32432 = C32422 + C32423;
    const double C79520 = C79515 + C79516;
    const double C96445 = C96435 + C96436;
    const double C7027 = C1028 * C141221;
    const double C23181 = C1028 * C141495;
    const double C23177 = C1028 * C22071;
    const double C48819 = C1028 * C47708;
    const double C48815 = C1028 * C47709;
    const double C69777 = C1028 * C141221;
    const double C16038 = C1712 * C141221;
    const double C31847 = C1712 * C141495;
    const double C31843 = C1712 * C22071;
    const double C95860 = C1712 * C47708;
    const double C95856 = C1712 * C47709;
    const double C126050 = C1712 * C141221;
    const double C44231 = C44228 + C44229;
    const double C65970 = C65963 + C65964;
    const double C88721 = C88717 + C88718;
    const double C104119 = C104115 + C104116;
    const double C106701 = C106696 + C106697;
    const double C90169 = C42825 + C42824;
    const double C65518 = C58706 * C141358;
    const double C88299 = C58706 * C68674;
    const double C90847 = C58706 * C141497;
    const double C103697 = C58706 * C5867;
    const double C106261 = C58706 * C5866;
    const double C136299 = C58706 * C141358;
    const double C105571 = C102934 + C102935;
    const double C139710 = ae * C139709;
    const double C118 = (3 * C139677 + C139643 * C139709 +
                         (2 * C139666 + C139643 * C139694) * ae) /
                        C139330;
    const double C825 = (C139758 * C139709) / C139330;
    const double C1603 = (C139801 * C139709) / C139330;
    const double C22930 = C22071 * C830;
    const double C48568 = C47709 * C830;
    const double C5981 = C5867 * C3032;
    const double C23051 = C141358 * C3032;
    const double C48689 = C141358 * C3032;
    const double C68788 = C68674 * C3032;
    const double C7174 = C141221 * C3144;
    const double C26065 = C22071 * C3144;
    const double C51689 = C47709 * C3144;
    const double C69911 = C141221 * C3144;
    const double C24209 = C141320 * C3652;
    const double C30942 = C141384 * C3652;
    const double C94963 = C141384 * C3652;
    const double C27202 = C22071 * C3936;
    const double C39493 = C141221 * C3936;
    const double C52826 = C47709 * C3936;
    const double C78276 = C141221 * C3936;
    const double C38629 = C38626 + C7905;
    const double C26574 = C26565 + C23976;
    const double C24102 = C24086 + C24087;
    const double C26898 = C26889 + C26890;
    const double C30841 = C30837 + C30838;
    const double C39073 = C39066 + C39067;
    const double C52198 = C52189 + C49614;
    const double C49740 = C49724 + C49725;
    const double C52522 = C52513 + C52514;
    const double C77454 = C77451 + C70591;
    const double C77870 = C77863 + C77864;
    const double C31718 = C22071 * C1608;
    const double C95731 = C47709 * C1608;
    const double C26884 = C22071 * C3722;
    const double C39071 = C141221 * C3722;
    const double C52508 = C47709 * C3722;
    const double C77868 = C141221 * C3722;
    const double C14221 = C14037 * C5455;
    const double C31949 = C141384 * C5455;
    const double C95962 = C141384 * C5455;
    const double C124350 = C124182 * C5455;
    const double C16677 = C141221 * C5675;
    const double C37448 = C22071 * C5675;
    const double C101460 = C47709 * C5675;
    const double C126595 = C141221 * C5675;
    const double C7031 = C6088 * C141221;
    const double C25984 = C6088 * C22071;
    const double C51608 = C6088 * C47709;
    const double C69781 = C6088 * C141221;
    const double C16042 = C14129 * C141221;
    const double C37050 = C14129 * C22071;
    const double C101062 = C14129 * C47709;
    const double C126054 = C14129 * C141221;
    const double C62182 = C62179 * C14037;
    const double C133157 = C62179 * C124182;
    const double C10784 = C8142 * C141221;
    const double C73353 = C8142 * C141221;
    const double C87687 = C87686 * C141384;
    const double C103051 = C87686 * C141384;
    const double C62869 = C61854 * C141358;
    const double C133776 = C61854 * C141358;
    const double C7290 =
        (2 * (2 * ae * C139780 + C139758 * C139883) + C140293 + C140293 +
         C139758 * (C139883 + C140290 + C140290 +
                    C139758 * (2 * ae * C139794 +
                               C139758 * (C139881 + (C139715 * C139716 +
                                                     C139866 * bs[7] *
                                                         std::pow(C139649, 7)) *
                                                        C139650 * C139647)))) /
        C139335;
    const double C8685 =
        (C140293 +
         C139801 *
             (C139936 + ae * C139758 * C139837 +
              C139758 * (ae * C139837 +
                         C139758 * (C139934 + std::pow(C139649, 7) * bs[7] *
                                                  C139925 * C139647)))) /
        C139335;
    const double C7306 = C5966 * C6881;
    const double C26161 = C22173 * C6881;
    const double C51785 = C47811 * C6881;
    const double C55760 = C55593 * C6881;
    const double C70040 = C68773 * C6881;
    const double C8362 = C5966 * C8007;
    const double C27004 = C22173 * C8007;
    const double C33920 = C188 * C8007;
    const double C52628 = C47811 * C8007;
    const double C71018 = C68773 * C8007;
    const double C16901 =
        (2 * (2 * ae * C139823 + C139801 * C139957) + C140594 + C140594 +
         C139801 * (C139957 + C140591 + C140591 +
                    C139801 * (2 * ae * C139837 +
                               C139801 * (C139955 + (C139715 * C139716 +
                                                     C139940 * bs[7] *
                                                         std::pow(C139649, 7)) *
                                                        C139650 * C139647)))) /
        C139335;
    const double C16917 = C14206 * C16152;
    const double C37609 = C30076 * C16152;
    const double C101621 = C94103 * C16152;
    const double C109782 = C109465 * C16152;
    const double C126814 = C124335 * C16152;
    const double C140405 = C140404 + C140397;
    const double C11026 =
        (2 * (2 * ae * C139801 * C139782 + C139758 * C140450) + C140453 +
         C140453 +
         C139758 * (C140450 + C140454 + C140454 +
                    C139758 * (2 * ae * C139801 * C140388 +
                               C139758 * C139801 * C139643 *
                                   (C139715 * C139716 +
                                    C139866 * bs[7] * std::pow(C139649, 7)) *
                                   C139650))) /
        C139335;
    const double C13878 =
        (C140302 + ae * C140414 + C139758 * C140429 + C140453 +
         C139801 * (C140403 + C139801 * (C140427 + ae * C139758 * C140416 +
                                         C139758 * (ae * C140416 +
                                                    C139758 * C139643 *
                                                        std::pow(C139649, 7) *
                                                        bs[7] * C139925)))) /
        C139335;
    const double C140716 = C140715 + C140709;
    const double C19463 =
        (2 * (2 * ae * C140414 + C139801 * C140628) + C140638 + C140638 +
         C139801 * (C140628 + C140635 + C140635 +
                    C139801 * (2 * ae * C140629 +
                               C139801 * C139758 * C139643 *
                                   (C139715 * C139716 +
                                    C139940 * bs[7] * std::pow(C139649, 7)) *
                                   C139650))) /
        C139335;
    const double C19470 = C14206 * C18821;
    const double C47633 = C30076 * C18821;
    const double C110384 = C109465 * C18821;
    const double C124106 = C94103 * C18821;
    const double C129277 = C124335 * C18821;
    const double C139752 = ae * C139750;
    const double C139751 = C139643 * C139750;
    const double C139972 = C139758 * C139750;
    const double C140036 = C139801 * C139750;
    const double C2967 = (C139709 + C139750 * C139866) / C139330;
    const double C5332 = (C139709 + C139750 * C139940) / C139330;
    const double C3501 =
        (2 * (2 * ae * C139801 * C139970 + C139643 * C140151) + C140154 +
         C140154 +
         C139643 * (C140151 + C140155 + C140155 +
                    C139643 * (2 * ae * C139801 * C139758 * C139728 +
                               C139643 * C139801 * C139758 *
                                   (C139715 * C139716 +
                                    C139647 * bs[7] * std::pow(C139649, 7)) *
                                   C139650))) /
        C139335;
    const double C8245 =
        (C139801 * C139862 + C140154 +
         C139758 * (C140042 + C139758 * C139801 *
                                  (C139858 + ae * C139643 * C139789 +
                                   C139643 * (ae * C139789 +
                                              C139643 * std::pow(C139649, 7) *
                                                  bs[7] * C139846)))) /
        C139335;
    const double C15092 =
        (C139758 * C139840 + C140154 +
         C139801 * (C139978 + C139801 * C139758 *
                                  (C139830 + ae * C140416 +
                                   C139643 * (ae * C139832 +
                                              C139643 * std::pow(C139649, 7) *
                                                  bs[7] * C139805)))) /
        C139335;
    const double C15528 =
        (C139758 * C139920 + C140154 +
         C139801 * (C139978 + C139801 * C139758 *
                                  (C139916 + ae * C140416 +
                                   C139643 * (ae * C139832 +
                                              C139643 * std::pow(C139649, 7) *
                                                  bs[7] * C139904)))) /
        C139335;
    const double C2971 =
        (2 * (2 * ae * (C139668 + C139692 * C139866) + C139643 * C140096) +
         C140099 + C140099 +
         C139643 * (C140096 + C140100 + C140100 +
                    C139643 * (2 * ae * (C139692 + C139728 * C139866) +
                               C139643 * (C139735 + (C139715 * C139716 +
                                                     C139647 * bs[7] *
                                                         std::pow(C139649, 7)) *
                                                        C139650 * C139866)))) /
        C139335;
    const double C6884 =
        (2 * (C139707 + C139758 * C139797) + C140099 +
         C139758 *
             (C139797 + C139978 +
              C139758 * (C139748 +
                         C139758 * (C139787 + ae * C139643 * C139789 +
                                    C139643 * (ae * C139789 +
                                               C139643 * std::pow(C139649, 7) *
                                                   bs[7] * C139762))))) /
        C139335;
    const double C7141 =
        (2 * (C139707 + C139758 * C139862) + C140099 +
         C139758 *
             (C139862 + C139978 +
              C139758 * (C139748 +
                         C139758 * (C139858 + ae * C139643 * C139789 +
                                    C139643 * (ae * C139789 +
                                               C139643 * std::pow(C139649, 7) *
                                                   bs[7] * C139846))))) /
        C139335;
    const double C8132 =
        (C140099 +
         C139801 * (C139840 +
                    (C139830 + ae * C139643 * C139832 +
                     C139643 * (ae * C139832 + C139643 * std::pow(C139649, 7) *
                                                   bs[7] * C139805)) *
                        C139866)) /
        C139335;
    const double C8584 =
        (C140099 +
         C139801 * (C139920 +
                    (C139916 + ae * C139643 * C139832 +
                     C139643 * (ae * C139832 + C139643 * std::pow(C139649, 7) *
                                                   bs[7] * C139904)) *
                        C139866)) /
        C139335;
    const double C6757 = C5871 * C6733;
    const double C25826 = C22079 * C6733;
    const double C51450 = C47717 * C6733;
    const double C55540 = C55527 * C6733;
    const double C69527 = C139356 * C6733;
    const double C7907 = C5871 * C7891;
    const double C26573 = C22079 * C7891;
    const double C52197 = C47717 * C7891;
    const double C70593 = C139356 * C7891;
    const double C86371 = C55527 * C7891;
    const double C5336 =
        (2 * (2 * ae * (C139668 + C139692 * C139940) + C139643 * C140198) +
         C140201 + C140201 +
         C139643 * (C140198 + C140202 + C140202 +
                    C139643 * (2 * ae * (C139692 + C139728 * C139940) +
                               C139643 * (C139735 + (C139715 * C139716 +
                                                     C139647 * bs[7] *
                                                         std::pow(C139649, 7)) *
                                                        C139650 * C139940)))) /
        C139335;
    const double C15209 =
        (C140201 +
         C139758 * (C139862 +
                    (C139858 + ae * C140388 +
                     C139643 * (ae * C139789 + C139643 * std::pow(C139649, 7) *
                                                   bs[7] * C139846)) *
                        C139940)) /
        C139335;
    const double C16155 =
        (2 * (C139707 + C139801 * C139840) + C140201 +
         C139801 *
             (C139840 + C140042 +
              C139801 * (C139748 +
                         C139801 * (C139830 + ae * C140416 +
                                    C139643 * (ae * C139832 +
                                               C139643 * std::pow(C139649, 7) *
                                                   bs[7] * C139805))))) /
        C139335;
    const double C16660 =
        (2 * (C139707 + C139801 * C139920) + C140201 +
         C139801 *
             (C139920 + C140042 +
              C139801 * (C139748 +
                         C139801 * (C139916 + ae * C140416 +
                                    C139643 * (ae * C139832 +
                                               C139643 * std::pow(C139649, 7) *
                                                   bs[7] * C139904))))) /
        C139335;
    const double C15890 = C5871 * C15866;
    const double C36966 = C22079 * C15866;
    const double C100978 = C47717 * C15866;
    const double C109362 = C55527 * C15866;
    const double C125934 = C139356 * C15866;
    const double C140769 = ae * C140767;
    const double C140768 = C139758 * C140767;
    const double C140807 = C139801 * C140767;
    const double C60522 =
        (2 * (2 * ae * C140659 + C139758 * C140835) + C140838 + C140838 +
         C139758 * (C140835 + C140839 + C140839 +
                    C139758 * (2 * ae * (C139776 + C139789 * C139940) +
                               C139758 * (C139881 + (C139715 * C139716 +
                                                     C139866 * bs[7] *
                                                         std::pow(C139649, 7)) *
                                                        C139650 * C139940)))) /
        C139335;
    const double C65959 =
        (2 * (C140380 + C139801 * C140793) + C140838 +
         C139801 *
             (C140793 + C140813 +
              C139801 * (C140765 +
                         C139801 * (C139934 + ae * C139758 * C139832 +
                                    C139758 * (ae * C139832 +
                                               C139758 * std::pow(C139649, 7) *
                                                   bs[7] * C139925))))) /
        C139335;
    const double C65633 = C47811 * C65267;
    const double C93559 = C68773 * C65267;
    const double C108989 = C5966 * C65267;
    const double C111876 = C188 * C65267;
    const double C136407 = C22173 * C65267;
    const double C140980 = ae * C140978;
    const double C140979 = C139801 * C140978;
    const double C66070 =
        (2 * (2 * ae * C140412 + C139801 * C140796) + C140871 + C140871 +
         C139801 * (C140796 + C140868 + C140868 +
                    C139801 * (2 * ae * C140780 +
                               C139801 * (C139955 + (C139715 * C139716 +
                                                     C139940 * bs[7] *
                                                         std::pow(C139649, 7)) *
                                                        C139650 * C139866)))) /
        C139335;
    const double C66080 = C14206 * C65391;
    const double C93875 = C30076 * C65391;
    const double C109307 = C94103 * C65391;
    const double C112080 = C109465 * C65391;
    const double C136835 = C124335 * C65391;
    const double C140917 = C140916 + C140909;
    const double C31482 = C31481 * C141384;
    const double C95488 = C31481 * C141384;
    const double C31165 = C31164 + C31162;
    const double C7294 = C5867 * C7288;
    const double C70028 = C68674 * C7288;
    const double C8688 = C5867 * C8683;
    const double C39627 = C141358 * C8683;
    const double C71329 = C68674 * C8683;
    const double C78410 = C141358 * C8683;
    const double C6901 = C6892 + C6893;
    const double C7307 = C7292 + C7293;
    const double C7430 = C7421 + C7422;
    const double C10044 = C10036 + C10037;
    const double C56310 = C56297 + C56298;
    const double C69665 = C69656 + C69657;
    const double C70041 = C70026 + C70027;
    const double C72647 = C72639 + C72640;
    const double C8027 = C8018 + C8019;
    const double C8363 = C8348 + C8349;
    const double C8481 = C8473 + C8474;
    const double C10920 = C10904 + C10905;
    const double C39210 = C39206 + C27002;
    const double C38774 = C38768 + C38769;
    const double C39358 = C39351 + C39352;
    const double C78007 = C78003 + C52626;
    const double C70707 = C70698 + C70699;
    const double C71019 = C71004 + C71005;
    const double C73475 = C73459 + C73460;
    const double C77599 = C77593 + C77594;
    const double C87374 = C87371 + C87372;
    const double C102937 = C102930 + C102931;
    const double C15639 = C15637 * C14037;
    const double C125703 = C15637 * C124182;
    const double C19042 = C15321 * C141221;
    const double C128879 = C15321 * C141221;
    const double C140383 = ae * C140382;
    const double C9862 = (3 * C140282 + C139758 * C140382 +
                          (2 * C140276 + C139758 * C140373) * ae) /
                         C139330;
    const double C10677 = (C139801 * C140382) / C139330;
    const double C60367 = (C140382 + C140767 * C139940) / C139330;
    const double C90953 = C68674 * C11025;
    const double C106367 = C5867 * C11025;
    const double C65968 = C141358 * C13876;
    const double C93792 = C68674 * C13876;
    const double C109222 = C5867 * C13876;
    const double C136726 = C141358 * C13876;
    const double C65522 = C64648 * C141358;
    const double C93471 = C64648 * C68674;
    const double C108901 = C64648 * C5867;
    const double C136303 = C64648 * C141358;
    const double C112436 = C112435 + C112432;
    const double C16905 = C14037 * C16899;
    const double C126802 = C124182 * C16899;
    const double C16172 = C16163 + C16164;
    const double C16800 = C16791 + C16792;
    const double C16918 = C16903 + C16904;
    const double C21833 = C21829 + C21830;
    const double C110891 = C110889 + C110890;
    const double C126168 = C126159 + C126160;
    const double C126815 = C126800 + C126801;
    const double C131605 = C131601 + C131602;
    const double C66073 = C14037 * C19462;
    const double C136828 = C124182 * C19462;
    const double C66081 = C66072 + C19467;
    const double C65409 = C65400 + C65401;
    const double C65860 = C65853 + C65854;
    const double C68517 = C68513 + C68514;
    const double C112638 = C112636 + C112637;
    const double C136836 = C136827 + C129274;
    const double C136195 = C136186 + C136187;
    const double C139244 = C139240 + C139241;
    const double C140696 = ae * C140695;
    const double C21492 = (3 * C140583 + C139801 * C140695 +
                           (2 * C140577 + C139801 * C140686) * ae) /
                          C139330;
    const double C72556 = C69770 + C69771;
    const double C69926 = C69908 + C69909;
    const double C69924 = C69904 + C69905;
    const double C69922 = C69900 + C69901;
    const double C69920 = C69896 + C69897;
    const double C69918 = C69892 + C69893;
    const double C69916 = C69888 + C69889;
    const double C69914 = C69884 + C69885;
    const double C69912 = C69880 + C69881;
    const double C70274 = C70264 + C70265;
    const double C70272 = C70260 + C70261;
    const double C70270 = C70256 + C70257;
    const double C70268 = C70252 + C70253;
    const double C72650 = C72645 + C72646;
    const double C72648 = C72641 + C72642;
    const double C72887 = C72883 + C72884;
    const double C73482 = C73473 + C73474;
    const double C73480 = C73469 + C73470;
    const double C73478 = C73465 + C73466;
    const double C73476 = C73461 + C73462;
    const double C73794 = C73789 + C73790;
    const double C73792 = C73785 + C73786;
    const double C77871 = C77865 + C77866;
    const double C77869 = C77861 + C77862;
    const double C78277 = C78273 + C78274;
    const double C79115 = C79105 + C79106;
    const double C79113 = C79101 + C79102;
    const double C79111 = C79097 + C79098;
    const double C79109 = C79093 + C79094;
    const double C79519 = C79513 + C79514;
    const double C79517 = C79509 + C79510;
    const double C82384 = C82377 + C82378;
    const double C82382 = C82373 + C82374;
    const double C82782 = C82778 + C82779;
    const double C85800 = C85795 + C85796;
    const double C85798 = C85791 + C85792;
    const double C86100 = C86097 + C86098;
    const double C131203 = C126043 + C126044;
    const double C126279 = C126273 + C126274;
    const double C126277 = C126269 + C126270;
    const double C126596 = C126592 + C126593;
    const double C131373 = C131366 + C131367;
    const double C131371 = C131362 + C131363;
    const double C131606 = C131603 + C131604;
    const double C135 = C101 * C116;
    const double C134 = C101 * C115;
    const double C127 = C101 * C114;
    const double C840 = C101 * C827;
    const double C839 = C101 * C828;
    const double C1618 = C101 * C1605;
    const double C1617 = C101 * C1606;
    const double C2973 = C101 * C2964;
    const double C3503 = C101 * C3494;
    const double C5338 = C101 * C5329;
    const double C136 = C103 * C117;
    const double C133 = C103 * C116;
    const double C128 = C103 * C115;
    const double C841 = C103 * C826;
    const double C838 = C103 * C827;
    const double C1619 = C103 * C1604;
    const double C1616 = C103 * C1605;
    const double C2974 = C103 * C2965;
    const double C3504 = C103 * C3495;
    const double C5339 = C103 * C5330;
    const double C132 = C105 * C117;
    const double C129 = C105 * C116;
    const double C837 = C105 * C826;
    const double C1615 = C105 * C1604;
    const double C2975 = C105 * C2966;
    const double C3505 = C105 * C3496;
    const double C5340 = C105 * C5331;
    const double C22096 = C22075 * C826;
    const double C22093 = C22075 * C116;
    const double C22092 = C22075 * C115;
    const double C22089 = C22075 * C827;
    const double C22084 = C22075 * C828;
    const double C22081 = C22075 * C114;
    const double C22931 = C22075 * C2965;
    const double C22924 = C22075 * C2964;
    const double C23178 = C1031 * C22075;
    const double C23172 = C7032 * C22075;
    const double C23300 = C22075 * C911;
    const double C23294 = C22075 * C822;
    const double C23288 = C22075 * C912;
    const double C23282 = C22075 * C823;
    const double C23654 = C22075 * C1005;
    const double C23648 = C22075 * C1006;
    const double C23985 = C22075 * C3495;
    const double C23982 = C22075 * C1605;
    const double C23981 = C22075 * C1606;
    const double C23978 = C22075 * C3494;
    const double C25824 = C22075 * C6732;
    const double C25989 = C7034 * C22075;
    const double C26074 = C22075 * C2960;
    const double C26068 = C22075 * C3026;
    const double C26314 = C22075 * C3084;
    const double C26571 = C22075 * C7890;
    const double C26784 = C10799 * C22075;
    const double C26893 = C22075 * C3490;
    const double C26887 = C22075 * C3572;
    const double C27205 = C22075 * C3646;
    const double C29247 = C22075 * C13305;
    const double C29244 = C22075 * C5329;
    const double C29925 = C22075 * C1604;
    const double C31719 = C22075 * C5330;
    const double C31844 = C1715 * C22075;
    const double C31838 = C16043 * C22075;
    const double C32088 = C22075 * C1689;
    const double C32082 = C22075 * C1600;
    const double C32076 = C22075 * C1690;
    const double C32070 = C22075 * C1601;
    const double C32424 = C22075 * C1783;
    const double C32418 = C22075 * C1784;
    const double C34419 = C18715 * C22075;
    const double C36964 = C22075 * C15865;
    const double C37055 = C16045 * C22075;
    const double C37214 = C22075 * C5325;
    const double C37208 = C22075 * C5391;
    const double C37451 = C22075 * C5449;
    const double C22094 = C22077 * C117;
    const double C22091 = C22077 * C116;
    const double C22088 = C22077 * C826;
    const double C22085 = C22077 * C827;
    const double C22082 = C22077 * C115;
    const double C22932 = C22077 * C2966;
    const double C22923 = C22077 * C2965;
    const double C23180 = C1029 * C22077;
    const double C23174 = C1031 * C22077;
    const double C23302 = C22077 * C910;
    const double C23296 = C22077 * C821;
    const double C23290 = C22077 * C911;
    const double C23284 = C22077 * C822;
    const double C23656 = C22077 * C1004;
    const double C23650 = C22077 * C1005;
    const double C23986 = C22077 * C3496;
    const double C23983 = C22077 * C1604;
    const double C23980 = C22077 * C1605;
    const double C23977 = C22077 * C3495;
    const double C25825 = C22077 * C6731;
    const double C25987 = C6086 * C22077;
    const double C26072 = C22077 * C2961;
    const double C26066 = C22077 * C3027;
    const double C26312 = C22077 * C3085;
    const double C26572 = C22077 * C7889;
    const double C26782 = C8145 * C22077;
    const double C26891 = C22077 * C3491;
    const double C26885 = C22077 * C3573;
    const double C27203 = C22077 * C3647;
    const double C29248 = C22077 * C13306;
    const double C29245 = C22077 * C5330;
    const double C31720 = C22077 * C5331;
    const double C31846 = C1713 * C22077;
    const double C31840 = C1715 * C22077;
    const double C32090 = C22077 * C1688;
    const double C32084 = C22077 * C1599;
    const double C32078 = C22077 * C1689;
    const double C32072 = C22077 * C1600;
    const double C32426 = C22077 * C1782;
    const double C32420 = C22077 * C1783;
    const double C34421 = C14993 * C22077;
    const double C36965 = C22077 * C15864;
    const double C37053 = C14127 * C22077;
    const double C37212 = C22077 * C5326;
    const double C37206 = C22077 * C5392;
    const double C37449 = C22077 * C5450;
    const double C47734 = C47713 * C826;
    const double C47731 = C47713 * C116;
    const double C47730 = C47713 * C115;
    const double C47727 = C47713 * C827;
    const double C47722 = C47713 * C828;
    const double C47719 = C47713 * C114;
    const double C48569 = C47713 * C2965;
    const double C48562 = C47713 * C2964;
    const double C48816 = C1031 * C47713;
    const double C48810 = C7032 * C47713;
    const double C48938 = C47713 * C911;
    const double C48932 = C47713 * C822;
    const double C48926 = C47713 * C912;
    const double C48920 = C47713 * C823;
    const double C49292 = C47713 * C1005;
    const double C49286 = C47713 * C1006;
    const double C49623 = C47713 * C3495;
    const double C49620 = C47713 * C1605;
    const double C49619 = C47713 * C1606;
    const double C49616 = C47713 * C3494;
    const double C51448 = C47713 * C6732;
    const double C51613 = C7034 * C47713;
    const double C51698 = C47713 * C2960;
    const double C51692 = C47713 * C3026;
    const double C51938 = C47713 * C3084;
    const double C52195 = C47713 * C7890;
    const double C52408 = C10799 * C47713;
    const double C52517 = C47713 * C3490;
    const double C52511 = C47713 * C3572;
    const double C52829 = C47713 * C3646;
    const double C54871 = C47713 * C13305;
    const double C54868 = C47713 * C5329;
    const double C93952 = C47713 * C1604;
    const double C95732 = C47713 * C5330;
    const double C95857 = C1715 * C47713;
    const double C95851 = C16043 * C47713;
    const double C96101 = C47713 * C1689;
    const double C96095 = C47713 * C1600;
    const double C96089 = C47713 * C1690;
    const double C96083 = C47713 * C1601;
    const double C96437 = C47713 * C1783;
    const double C96431 = C47713 * C1784;
    const double C98431 = C18715 * C47713;
    const double C100976 = C47713 * C15865;
    const double C101067 = C16045 * C47713;
    const double C101226 = C47713 * C5325;
    const double C101220 = C47713 * C5391;
    const double C101463 = C47713 * C5449;
    const double C47732 = C47715 * C117;
    const double C47729 = C47715 * C116;
    const double C47726 = C47715 * C826;
    const double C47723 = C47715 * C827;
    const double C47720 = C47715 * C115;
    const double C48570 = C47715 * C2966;
    const double C48561 = C47715 * C2965;
    const double C48818 = C1029 * C47715;
    const double C48812 = C1031 * C47715;
    const double C48940 = C47715 * C910;
    const double C48934 = C47715 * C821;
    const double C48928 = C47715 * C911;
    const double C48922 = C47715 * C822;
    const double C49294 = C47715 * C1004;
    const double C49288 = C47715 * C1005;
    const double C49624 = C47715 * C3496;
    const double C49621 = C47715 * C1604;
    const double C49618 = C47715 * C1605;
    const double C49615 = C47715 * C3495;
    const double C51449 = C47715 * C6731;
    const double C51611 = C6086 * C47715;
    const double C51696 = C47715 * C2961;
    const double C51690 = C47715 * C3027;
    const double C51936 = C47715 * C3085;
    const double C52196 = C47715 * C7889;
    const double C52406 = C8145 * C47715;
    const double C52515 = C47715 * C3491;
    const double C52509 = C47715 * C3573;
    const double C52827 = C47715 * C3647;
    const double C54872 = C47715 * C13306;
    const double C54869 = C47715 * C5330;
    const double C95733 = C47715 * C5331;
    const double C95859 = C1713 * C47715;
    const double C95853 = C1715 * C47715;
    const double C96103 = C47715 * C1688;
    const double C96097 = C47715 * C1599;
    const double C96091 = C47715 * C1689;
    const double C96085 = C47715 * C1600;
    const double C96439 = C47715 * C1782;
    const double C96433 = C47715 * C1783;
    const double C98433 = C14993 * C47715;
    const double C100977 = C47715 * C15864;
    const double C101065 = C14127 * C47715;
    const double C101224 = C47715 * C5326;
    const double C101218 = C47715 * C5392;
    const double C101461 = C47715 * C5450;
    const double C139368 = C139367 * ae;
    const double C5868 = -(C139367 * be) / C139330;
    const double C6773 = C6765 + C5879;
    const double C6771 = C6763 + C5881;
    const double C6769 = C6761 + C5878;
    const double C6767 = C6759 + C5876;
    const double C9785 = C9783 + C6746;
    const double C10574 = C10570 + C7898;
    const double C10572 = C10568 + C7896;
    const double C15906 = C15898 + C14039;
    const double C15904 = C15896 + C7903;
    const double C15902 = C15894 + C13315;
    const double C15900 = C15892 + C7900;
    const double C18598 = C18596 + C13317;
    const double C21324 = C21322 + C15879;
    const double C22942 = C22936 + C22086;
    const double C25830 = C25827 + C22922;
    const double C31730 = C31724 + C23979;
    const double C36970 = C36967 + C29246;
    const double C48580 = C48574 + C47724;
    const double C51454 = C51451 + C48560;
    const double C95743 = C95737 + C49617;
    const double C100982 = C100979 + C54870;
    const double C56052 = C56046 + C55533;
    const double C56051 = C56045 + C55534;
    const double C56050 = C56044 + C55535;
    const double C56049 = C56043 + C55532;
    const double C56048 = C56042 + C55531;
    const double C56047 = C56041 + C55530;
    const double C57940 = C57939 + C56033;
    const double C58470 = C58467 + C56747;
    const double C58469 = C58466 + C56746;
    const double C58468 = C58465 + C56745;
    const double C61518 = C61515 + C60807;
    const double C61517 = C61514 + C56750;
    const double C61516 = C61513 + C60315;
    const double C62511 = C62507 + C60808;
    const double C62510 = C62506 + C56749;
    const double C62509 = C62505 + C60314;
    const double C62508 = C62504 + C56748;
    const double C64401 = C64400 + C60316;
    const double C65167 = C65166 + C62496;
    const double C67936 = C67935 + C62497;
    const double C87072 = C87071 + C56751;
    const double C110455 = C110454 + C62502;
    const double C113954 = C113953 + C67933;
    const double C69543 = C69535 + C68686;
    const double C69541 = C69533 + C68688;
    const double C69539 = C69531 + C68685;
    const double C69537 = C69529 + C68683;
    const double C72404 = C72402 + C69516;
    const double C73151 = C73147 + C70584;
    const double C73149 = C73145 + C70582;
    const double C78694 = C78690 + C70589;
    const double C78692 = C78688 + C70586;
    const double C81975 = C81973 + C75832;
    const double C85491 = C85489 + C75830;
    const double C125938 = C125936 + C78684;
    const double C131125 = C131123 + C85486;
    const double C9955 = C9952 + C7019;
    const double C10285 = C10034 * C275;
    const double C10291 = C10286 * C141320;
    const double C21416 = C21413 + C16030;
    const double C21584 = C21574 * C141309;
    const double C21583 = C21573 * C188;
    const double C139546 = C139545 * ae;
    const double C6269 = C6256 + C6257;
    const double C6266 = C6247 + C6248;
    const double C7308 = C7295 + C7296;
    const double C8364 = C8351 + C8352;
    const double C103809 = C103804 + C8358;
    const double C106372 = C106364 + C11029;
    const double C108991 = C108983 + C13641;
    const double C22464 = C22454 + C22455;
    const double C22461 = C22445 + C22446;
    const double C22459 = C22439 + C22440;
    const double C23435 = C23425 + C23426;
    const double C23433 = C23419 + C23420;
    const double C24429 = C24419 + C24420;
    const double C24427 = C24413 + C24414;
    const double C39211 = C39208 + C27001;
    const double C40487 = C40481 + C29548;
    const double C40484 = C40474 + C24423;
    const double C43822 = C43814 + C26999;
    const double C47227 = C47220 + C29546;
    const double C136408 = C136402 + C43818;
    const double C139012 = C139006 + C47222;
    const double C48102 = C48092 + C48093;
    const double C48099 = C48083 + C48084;
    const double C48097 = C48077 + C48078;
    const double C49073 = C49063 + C49064;
    const double C49071 = C49057 + C49058;
    const double C50061 = C50051 + C50052;
    const double C50059 = C50045 + C50046;
    const double C63004 = C62994 + C55172;
    const double C63002 = C62988 + C55170;
    const double C63000 = C62984 + C50055;
    const double C65636 = C65628 + C61954;
    const double C65634 = C65624 + C52623;
    const double C68279 = C68273 + C62993;
    const double C78008 = C78005 + C52625;
    const double C6276 = C6270 + C6260;
    const double C6271 = C6265 + C6245;
    const double C7312 = C7309 + C7299;
    const double C8368 = C8365 + C8355;
    const double C103811 = C103808 + C8359;
    const double C106374 = C106371 + C11028;
    const double C108995 = C108992 + C13640;
    const double C6274 = C6268 + C6254;
    const double C6273 = C6267 + C6251;
    const double C103813 = C103810 + C8357;
    const double C108993 = C108990 + C13642;
    const double C22469 = C22463 + C22452;
    const double C22468 = C22462 + C22449;
    const double C22466 = C22460 + C22443;
    const double C23438 = C23434 + C23423;
    const double C23436 = C23432 + C23417;
    const double C24432 = C24428 + C24417;
    const double C24430 = C24426 + C24411;
    const double C40490 = C40486 + C29549;
    const double C40489 = C40485 + C24422;
    const double C43825 = C43823 + C27000;
    const double C47228 = C47226 + C29547;
    const double C136411 = C136409 + C43819;
    const double C139013 = C139011 + C47223;
    const double C48107 = C48101 + C48090;
    const double C48106 = C48100 + C48087;
    const double C48104 = C48098 + C48081;
    const double C49076 = C49072 + C49061;
    const double C49074 = C49070 + C49055;
    const double C50064 = C50060 + C50049;
    const double C50062 = C50058 + C50043;
    const double C63011 = C63005 + C55173;
    const double C63009 = C63003 + C55171;
    const double C63007 = C63001 + C50054;
    const double C65641 = C65637 + C61953;
    const double C65639 = C65635 + C52624;
    const double C68280 = C68278 + C62992;
    const double C69069 = C69063 + C69049;
    const double C69068 = C69062 + C69046;
    const double C88415 = C88412 + C71013;
    const double C93563 = C93560 + C76133;
    const double C55757 = C55590 * C191;
    const double C55756 = C55590 * C190;
    const double C55749 = C55590 * C189;
    const double C56381 = C55590 * C911;
    const double C56380 = C55590 * C912;
    const double C57021 = C55590 * C1689;
    const double C57020 = C55590 * C1690;
    const double C58165 = C55590 * C3026;
    const double C58777 = C55590 * C3572;
    const double C60524 = C55590 * C5391;
    const double C55758 = C55591 * C910;
    const double C55755 = C55591 * C911;
    const double C55750 = C55591 * C912;
    const double C56382 = C55591 * C3027;
    const double C56379 = C55591 * C3026;
    const double C57022 = C55591 * C3573;
    const double C57019 = C55591 * C3572;
    const double C58166 = C55591 * C6880;
    const double C58778 = C55591 * C8006;
    const double C60525 = C55591 * C13393;
    const double C55759 = C55592 * C3028;
    const double C55754 = C55592 * C3027;
    const double C55751 = C55592 * C3026;
    const double C56383 = C55592 * C6879;
    const double C56378 = C55592 * C6880;
    const double C57023 = C55592 * C8005;
    const double C57018 = C55592 * C8006;
    const double C60526 = C55592 * C13394;
    const double C68797 = C68771 * C110;
    const double C68791 = C68771 * C116;
    const double C68781 = C68771 * C115;
    const double C68775 = C68771 * C109;
    const double C69057 = C68771 * C192;
    const double C69055 = C68771 * C191;
    const double C69040 = C68771 * C190;
    const double C69036 = C68771 * C189;
    const double C69163 = C307 * C68771;
    const double C69152 = C305 * C68771;
    const double C69322 = C68771 * C278;
    const double C69312 = C68771 * C277;
    const double C69660 = C68771 * C822;
    const double C69654 = C68771 * C827;
    const double C70038 = C68771 * C910;
    const double C70037 = C68771 * C912;
    const double C70033 = C68771 * C911;
    const double C70153 = C1031 * C68771;
    const double C70378 = C68771 * C1005;
    const double C70702 = C68771 * C1600;
    const double C70696 = C68771 * C1605;
    const double C71016 = C68771 * C1688;
    const double C71015 = C68771 * C1690;
    const double C71011 = C68771 * C1689;
    const double C71131 = C1809 * C68771;
    const double C71332 = C68771 * C1783;
    const double C72728 = C68771 * C3027;
    const double C72725 = C68771 * C3026;
    const double C73584 = C68771 * C3573;
    const double C73581 = C68771 * C3572;
    const double C76134 = C68771 * C5392;
    const double C76131 = C68771 * C5391;
    const double C88086 = C68771 * C1606;
    const double C88080 = C68771 * C1601;
    const double C88300 = C62874 * C68771;
    const double C88294 = C62870 * C68771;
    const double C88713 = C68771 * C1784;
    const double C90092 = C68771 * C8006;
    const double C90624 = C68771 * C3494;
    const double C90618 = C68771 * C3490;
    const double C90844 = C58709 * C68771;
    const double C90954 = C68771 * C13393;
    const double C91274 = C68771 * C3646;
    const double C93315 = C68771 * C5325;
    const double C93309 = C68771 * C5329;
    const double C93476 = C62872 * C68771;
    const double C93557 = C68771 * C16013;
    const double C93795 = C68771 * C5449;
    const double C68795 = C68772 * C821;
    const double C68789 = C68772 * C826;
    const double C68783 = C68772 * C827;
    const double C68777 = C68772 * C822;
    const double C69058 = C68772 * C909;
    const double C69052 = C68772 * C910;
    const double C69043 = C68772 * C911;
    const double C69037 = C68772 * C912;
    const double C69161 = C1029 * C68772;
    const double C69154 = C1031 * C68772;
    const double C69320 = C68772 * C1004;
    const double C69314 = C68772 * C1005;
    const double C69658 = C68772 * C2961;
    const double C69652 = C68772 * C2965;
    const double C70039 = C68772 * C3028;
    const double C70036 = C68772 * C3026;
    const double C70030 = C68772 * C3027;
    const double C70151 = C6086 * C68772;
    const double C70376 = C68772 * C3085;
    const double C70700 = C68772 * C3491;
    const double C70694 = C68772 * C3495;
    const double C71017 = C68772 * C3574;
    const double C71014 = C68772 * C3572;
    const double C71008 = C68772 * C3573;
    const double C71129 = C8145 * C68772;
    const double C71330 = C68772 * C3647;
    const double C72729 = C68772 * C6879;
    const double C72726 = C68772 * C6880;
    const double C73585 = C68772 * C8005;
    const double C73582 = C68772 * C8006;
    const double C76135 = C68772 * C13395;
    const double C76132 = C68772 * C13393;
    const double C88088 = C68772 * C3494;
    const double C88082 = C68772 * C3490;
    const double C88302 = C61851 * C68772;
    const double C88296 = C58709 * C68772;
    const double C88715 = C68772 * C3646;
    const double C90626 = C68772 * C7890;
    const double C90620 = C68772 * C7887;
    const double C90846 = C58707 * C68772;
    const double C90955 = C68772 * C13394;
    const double C91276 = C68772 * C8128;
    const double C93313 = C68772 * C13301;
    const double C93307 = C68772 * C13305;
    const double C93474 = C61849 * C68772;
    const double C93558 = C68772 * C18698;
    const double C93793 = C68772 * C13475;
    const double C22719 = C22211 * C275;
    const double C22566 = C22565 + C22559;
    const double C22735 = C22734 * C141320;
    const double C138767 = C138757 * C55527;
    const double C138768 = C138758 * C141216;
    const double C138928 = C138927 + C133768;
    const double C48357 = C47849 * C275;
    const double C48204 = C48203 + C48197;
    const double C48373 = C48372 * C141320;
    const double C68025 = C68015 * C141216;
    const double C68024 = C68014 * C55527;
    const double C68192 = C68189 + C62857;
    const double C139617 = C139616 * ae;
    const double C14765 = C14752 + C14753;
    const double C14762 = C14743 + C14744;
    const double C15756 = C15743 + C15744;
    const double C16919 = C16906 + C16907;
    const double C62386 = C62381 + C15750;
    const double C65052 = C65044 + C18480;
    const double C66082 = C66074 + C19466;
    const double C30626 = C30616 + C30617;
    const double C30623 = C30607 + C30608;
    const double C30621 = C30601 + C30602;
    const double C31600 = C31590 + C31591;
    const double C31598 = C31584 + C31585;
    const double C32659 = C32649 + C32650;
    const double C32657 = C32643 + C32644;
    const double C39775 = C39769 + C34219;
    const double C39772 = C39762 + C31594;
    const double C41041 = C41038 + C35116;
    const double C43129 = C43122 + C34217;
    const double C44371 = C44364 + C35114;
    const double C90413 = C90408 + C43124;
    const double C91388 = C91383 + C44366;
    const double C94653 = C94643 + C94644;
    const double C94650 = C94634 + C94635;
    const double C94648 = C94628 + C94629;
    const double C95613 = C95603 + C95604;
    const double C95611 = C95597 + C95598;
    const double C96672 = C96662 + C96663;
    const double C96670 = C96656 + C96657;
    const double C103268 = C103258 + C98231;
    const double C103266 = C103252 + C98229;
    const double C103264 = C103248 + C95607;
    const double C105815 = C105810 + C103257;
    const double C106814 = C106807 + C99126;
    const double C106812 = C106803 + C104219;
    const double C117656 = C117653 + C99128;
    const double C14772 = C14766 + C14756;
    const double C14767 = C14761 + C14741;
    const double C15760 = C15757 + C15747;
    const double C16923 = C16920 + C16910;
    const double C62388 = C62385 + C15751;
    const double C65056 = C65053 + C18479;
    const double C66086 = C66083 + C19465;
    const double C14770 = C14764 + C14750;
    const double C14769 = C14763 + C14747;
    const double C15758 = C15755 + C15741;
    const double C62390 = C62387 + C15749;
    const double C65054 = C65051 + C18481;
    const double C30631 = C30625 + C30614;
    const double C30630 = C30624 + C30611;
    const double C30628 = C30622 + C30605;
    const double C31603 = C31599 + C31588;
    const double C31601 = C31597 + C31582;
    const double C32662 = C32658 + C32647;
    const double C32660 = C32656 + C32641;
    const double C39778 = C39774 + C34220;
    const double C39777 = C39773 + C31593;
    const double C41042 = C41040 + C35117;
    const double C43130 = C43128 + C34218;
    const double C44372 = C44370 + C35115;
    const double C90414 = C90412 + C43125;
    const double C91389 = C91387 + C44367;
    const double C94658 = C94652 + C94641;
    const double C94657 = C94651 + C94638;
    const double C94655 = C94649 + C94632;
    const double C95616 = C95612 + C95601;
    const double C95614 = C95610 + C95595;
    const double C96675 = C96671 + C96660;
    const double C96673 = C96669 + C96654;
    const double C103275 = C103269 + C98232;
    const double C103273 = C103267 + C98230;
    const double C103271 = C103265 + C95606;
    const double C105816 = C105814 + C103256;
    const double C106817 = C106813 + C99127;
    const double C106815 = C106811 + C104218;
    const double C117657 = C117655 + C99129;
    const double C124883 = C124877 + C124863;
    const double C124882 = C124876 + C124860;
    const double C125825 = C125822 + C125808;
    const double C133365 = C133362 + C125816;
    const double C135865 = C135862 + C128374;
    const double C109779 = C109462 * C278;
    const double C109778 = C109462 * C277;
    const double C109771 = C109462 * C276;
    const double C110381 = C109462 * C1005;
    const double C110380 = C109462 * C1006;
    const double C111028 = C109462 * C1783;
    const double C111027 = C109462 * C1784;
    const double C112077 = C109462 * C3084;
    const double C112705 = C109462 * C3646;
    const double C114399 = C109462 * C5449;
    const double C109780 = C109463 * C1782;
    const double C109777 = C109463 * C1783;
    const double C109772 = C109463 * C1784;
    const double C110382 = C109463 * C3647;
    const double C110379 = C109463 * C3646;
    const double C111029 = C109463 * C5450;
    const double C111026 = C109463 * C5449;
    const double C112078 = C109463 * C8128;
    const double C112706 = C109463 * C13475;
    const double C114400 = C109463 * C16151;
    const double C109781 = C109464 * C5451;
    const double C109776 = C109464 * C5450;
    const double C109773 = C109464 * C5449;
    const double C110383 = C109464 * C13476;
    const double C110378 = C109464 * C13475;
    const double C111030 = C109464 * C16150;
    const double C111025 = C109464 * C16151;
    const double C112079 = C109464 * C13477;
    const double C112707 = C109464 * C18820;
    const double C124359 = C124333 * C110;
    const double C124353 = C124333 * C116;
    const double C124343 = C124333 * C115;
    const double C124337 = C124333 * C109;
    const double C124605 = C124333 * C191;
    const double C124595 = C124333 * C190;
    const double C124772 = C220 * C124333;
    const double C124761 = C218 * C124333;
    const double C124871 = C124333 * C279;
    const double C124869 = C124333 * C278;
    const double C124854 = C124333 * C277;
    const double C124850 = C124333 * C276;
    const double C125196 = C124333 * C822;
    const double C125190 = C124333 * C827;
    const double C125502 = C124333 * C911;
    const double C125708 = C937 * C124333;
    const double C125819 = C124333 * C1004;
    const double C125818 = C124333 * C1006;
    const double C125814 = C124333 * C1005;
    const double C126163 = C124333 * C1600;
    const double C126157 = C124333 * C1605;
    const double C126489 = C124333 * C1689;
    const double C126701 = C1715 * C124333;
    const double C126812 = C124333 * C1782;
    const double C126811 = C124333 * C1784;
    const double C126807 = C124333 * C1783;
    const double C128375 = C124333 * C3085;
    const double C128372 = C124333 * C3084;
    const double C129275 = C124333 * C3647;
    const double C129272 = C124333 * C3646;
    const double C131758 = C124333 * C5450;
    const double C131755 = C124333 * C5449;
    const double C132733 = C124333 * C828;
    const double C132727 = C124333 * C823;
    const double C133039 = C124333 * C912;
    const double C133152 = C56305 * C124333;
    const double C133146 = C56299 * C124333;
    const double C135384 = C124333 * C2960;
    const double C135378 = C124333 * C2964;
    const double C135620 = C124333 * C3026;
    const double C135704 = C56301 * C124333;
    const double C135859 = C124333 * C7002;
    const double C136190 = C124333 * C3490;
    const double C136184 = C124333 * C3494;
    const double C136516 = C124333 * C3572;
    const double C136624 = C58709 * C124333;
    const double C136833 = C124333 * C8128;
    const double C139320 = C124333 * C13475;
    const double C124357 = C124334 * C1599;
    const double C124351 = C124334 * C1604;
    const double C124345 = C124334 * C1605;
    const double C124339 = C124334 * C1600;
    const double C124603 = C124334 * C1688;
    const double C124597 = C124334 * C1689;
    const double C124770 = C1713 * C124334;
    const double C124763 = C1715 * C124334;
    const double C124872 = C124334 * C1781;
    const double C124866 = C124334 * C1782;
    const double C124857 = C124334 * C1783;
    const double C124851 = C124334 * C1784;
    const double C125194 = C124334 * C3491;
    const double C125188 = C124334 * C3495;
    const double C125500 = C124334 * C3573;
    const double C125706 = C14993 * C124334;
    const double C125820 = C124334 * C3648;
    const double C125817 = C124334 * C3646;
    const double C125811 = C124334 * C3647;
    const double C126161 = C124334 * C5326;
    const double C126155 = C124334 * C5330;
    const double C126487 = C124334 * C5392;
    const double C126699 = C14127 * C124334;
    const double C126813 = C124334 * C5451;
    const double C126810 = C124334 * C5449;
    const double C126804 = C124334 * C5450;
    const double C128376 = C124334 * C8127;
    const double C128373 = C124334 * C8128;
    const double C129276 = C124334 * C13476;
    const double C129273 = C124334 * C13475;
    const double C131759 = C124334 * C16150;
    const double C131756 = C124334 * C16151;
    const double C132735 = C124334 * C3494;
    const double C132729 = C124334 * C3490;
    const double C133041 = C124334 * C3572;
    const double C133154 = C61851 * C124334;
    const double C133148 = C58709 * C124334;
    const double C135382 = C124334 * C7887;
    const double C135376 = C124334 * C7890;
    const double C135618 = C124334 * C8006;
    const double C135702 = C58707 * C124334;
    const double C135860 = C124334 * C10779;
    const double C136188 = C124334 * C13301;
    const double C136182 = C124334 * C13305;
    const double C136514 = C124334 * C13393;
    const double C136622 = C61849 * C124334;
    const double C136834 = C124334 * C13477;
    const double C139321 = C124334 * C18820;
    const double C30342 = C30114 * C188;
    const double C30358 = C30357 * C141309;
    const double C30522 = C30521 + C30515;
    const double C89937 = C89927 * C55527;
    const double C89938 = C89928 * C141216;
    const double C90256 = C90255 + C87676;
    const double C94369 = C94141 * C188;
    const double C94385 = C94384 * C141309;
    const double C94549 = C94548 + C94542;
    const double C105340 = C105330 * C141216;
    const double C105339 = C105329 * C55527;
    const double C105658 = C105657 + C103043;
    const double C22212 = C22205 + C22206;
    const double C47850 = C47843 + C47844;
    const double C30115 = C30108 + C30109;
    const double C94142 = C94135 + C94136;
    const double C124 =
        (3 * (C139672 + C139675 + C139675 + C139643 * C139703) + C139710 +
         C139710 +
         C139643 * (2 * C139703 + C139707 + C139707 +
                    C139643 * (C139698 + C139702 + C139702 +
                               C139643 * (2 * ae * C139692 +
                                          C139643 *
                                              (C139682 * C139683 +
                                               C139647 * bs[6] *
                                                   std::pow(C139641, 6)) *
                                              C139650)))) /
        C139335;
    const double C914 =
        (C139710 + C139758 * (2 * C139779 + ae * C139780 + C139643 * C139797)) /
        C139335;
    const double C1097 =
        (C139710 + C139758 * (2 * C139854 + ae * C139780 + C139643 * C139862)) /
        C139335;
    const double C1786 =
        (C139710 + C139801 * (2 * C139822 + ae * C139823 + C139643 * C139840)) /
        C139335;
    const double C2123 =
        (C139710 + C139801 * (2 * C139912 + ae * C139823 + C139643 * C139920)) /
        C139335;
    const double C137 = C105 * C118;
    const double C131 = C107 * C118;
    const double C214 = C188 * C118;
    const double C301 = C275 * C118;
    const double C22095 = C22079 * C118;
    const double C47733 = C47717 * C118;
    const double C842 = C105 * C825;
    const double C836 = C107 * C825;
    const double C920 = C188 * C825;
    const double C1014 = C275 * C825;
    const double C5888 = C5871 * C825;
    const double C22097 = C22077 * C825;
    const double C22087 = C22079 * C825;
    const double C22191 = C22173 * C825;
    const double C23299 = C22071 * C825;
    const double C47735 = C47715 * C825;
    const double C47725 = C47717 * C825;
    const double C47829 = C47811 * C825;
    const double C48937 = C47709 * C825;
    const double C68695 = C139356 * C825;
    const double C1620 = C105 * C1603;
    const double C1614 = C107 * C1603;
    const double C1698 = C188 * C1603;
    const double C1792 = C275 * C1603;
    const double C14042 = C5871 * C1603;
    const double C23984 = C22079 * C1603;
    const double C29926 = C22077 * C1603;
    const double C30094 = C30076 * C1603;
    const double C32087 = C22071 * C1603;
    const double C49622 = C47717 * C1603;
    const double C76532 = C139356 * C1603;
    const double C93953 = C47715 * C1603;
    const double C94121 = C94103 * C1603;
    const double C96100 = C47709 * C1603;
    const double C5998 = C5980 + C5981;
    const double C23066 = C23050 + C23051;
    const double C48704 = C48688 + C48689;
    const double C68805 = C68787 + C68788;
    const double C7190 = C7173 + C7174;
    const double C26076 = C26064 + C26065;
    const double C51700 = C51688 + C51689;
    const double C69927 = C69910 + C69911;
    const double C24212 = C24208 + C24209;
    const double C30957 = C30941 + C30942;
    const double C94978 = C94962 + C94963;
    const double C27207 = C27201 + C27202;
    const double C39495 = C39492 + C39493;
    const double C52831 = C52825 + C52826;
    const double C78278 = C78275 + C78276;
    const double C38631 = C38629 + C7905;
    const double C26577 = C26574 + C23976;
    const double C34424 = C30841 * C22071;
    const double C98436 = C30841 * C47709;
    const double C52201 = C52198 + C49614;
    const double C77456 = C77454 + C70591;
    const double C26895 = C26883 + C26884;
    const double C39075 = C39070 + C39071;
    const double C52519 = C52507 + C52508;
    const double C77872 = C77867 + C77868;
    const double C14238 = C14220 + C14221;
    const double C31964 = C31948 + C31949;
    const double C95977 = C95961 + C95962;
    const double C124367 = C124349 + C124350;
    const double C16685 = C16676 + C16677;
    const double C37453 = C37447 + C37448;
    const double C101465 = C101459 + C101460;
    const double C126597 = C126594 + C126595;
    const double C140406 = ae * C140405;
    const double C9863 = (3 * C140272 + C139758 * C140405 +
                          (2 * C140266 + C139758 * C140394) * ae) /
                         C139330;
    const double C10678 = (C139801 * C140405) / C139330;
    const double C140717 = ae * C140716;
    const double C21493 = (3 * C140573 + C139801 * C140716 +
                           (2 * C140567 + C139801 * C140707) * ae) /
                          C139330;
    const double C3579 =
        (C139801 *
         (C139752 +
          C139758 * (2 * C139793 + ae * C139794 +
                     C139643 * (C139787 + ae * C139643 * C139789 +
                                C139643 * (ae * C139789 +
                                           C139643 * std::pow(C139649, 7) *
                                               bs[7] * C139762))))) /
        C139335;
    const double C139753 = C139717 + C139751;
    const double C139977 = ae * C139972;
    const double C3497 = (C139801 * C139972) / C139330;
    const double C140041 = ae * C140036;
    const double C2976 = C107 * C2967;
    const double C5890 = C5871 * C2967;
    const double C22933 = C22079 * C2967;
    const double C48571 = C47717 * C2967;
    const double C68697 = C139356 * C2967;
    const double C5341 = C107 * C5332;
    const double C14044 = C5871 * C5332;
    const double C31721 = C22079 * C5332;
    const double C95734 = C47717 * C5332;
    const double C124185 = C139356 * C5332;
    const double C140770 = C140743 + C140768;
    const double C140812 = ae * C140807;
    const double C140981 = C140956 + C140979;
    const double C140918 = ae * C140917;
    const double C68104 = (3 * C140625 + C139801 * C140917 +
                           (2 * C140618 + C139801 * C140906) * ae) /
                          C139330;
    const double C34721 = C31165 * C22071;
    const double C98733 = C31165 * C47709;
    const double C8693 = C8687 + C8688;
    const double C39630 = C39626 + C39627;
    const double C71334 = C71328 + C71329;
    const double C78413 = C78409 + C78410;
    const double C7310 = C7307 + C7293;
    const double C7431 = C7430 * C5867;
    const double C70148 = C7430 * C68674;
    const double C70044 = C70041 + C70027;
    const double C8366 = C8363 + C8349;
    const double C8483 = C8481 * C5867;
    const double C71126 = C8481 * C68674;
    const double C39212 = C39210 + C27002;
    const double C78009 = C78007 + C52626;
    const double C71022 = C71019 + C71005;
    const double C88305 = C87374 * C68674;
    const double C103703 = C87374 * C5867;
    const double C10121 =
        (3 * (C139871 + C140280 + C140280 + C139758 * C140370) + C140383 +
         C140383 +
         C139758 * (2 * C140370 + C140380 + C140380 +
                    C139758 * (C139876 + C140376 + C140376 +
                               C139758 * (2 * C139783 + C139758 * C139881)))) /
        C139335;
    const double C11349 =
        (C140383 +
         C139801 * (2 * C140425 + ae * C140412 +
                    C139758 * (C139931 + ae * C139758 * C139819 +
                               C139758 * (C139826 + C139758 * C139934)))) /
        C139335;
    const double C10126 = C5966 * C9862;
    const double C56377 = C55593 * C9862;
    const double C58108 = C55527 * C9862;
    const double C58167 = C55592 * C9862;
    const double C58220 = C275 * C9862;
    const double C72727 = C68773 * C9862;
    const double C11030 = C5966 * C10677;
    const double C42719 = C22173 * C10677;
    const double C57017 = C55593 * C10677;
    const double C58692 = C55527 * C10677;
    const double C58779 = C55592 * C10677;
    const double C58848 = C275 * C10677;
    const double C64725 = C47811 * C10677;
    const double C73583 = C68773 * C10677;
    const double C90093 = C68772 * C10677;
    const double C90170 = C30076 * C10677;
    const double C90623 = C68674 * C10677;
    const double C105495 = C5965 * C10677;
    const double C105572 = C94103 * C10677;
    const double C106025 = C5867 * C10677;
    const double C60527 = C55593 * C60367;
    const double C64727 = C47811 * C60367;
    const double C90956 = C68773 * C60367;
    const double C106370 = C5966 * C60367;
    const double C135541 = C22173 * C60367;
    const double C65972 = C65967 + C65968;
    const double C93797 = C93791 + C93792;
    const double C109227 = C109221 + C109222;
    const double C136728 = C136725 + C136726;
    const double C112437 = C112436 * C141216;
    const double C16801 = C16800 * C14037;
    const double C126696 = C16800 * C124182;
    const double C16921 = C16918 + C16904;
    const double C126818 = C126815 + C126801;
    const double C66084 = C66081 + C19467;
    const double C65861 = C65860 * C14037;
    const double C136619 = C65860 * C124182;
    const double C136839 = C136836 + C129274;
    const double C21987 =
        (3 * (C139945 + C140581 + C140581 + C139801 * C140683) + C140696 +
         C140696 +
         C139801 * (2 * C140683 + C140693 + C140693 +
                    C139801 * (C139950 + C140689 + C140689 +
                               C139801 * (2 * C139826 + C139801 * C139955)))) /
        C139335;
    const double C21992 = C14206 * C21492;
    const double C111024 = C109465 * C21492;
    const double C114291 = C55527 * C21492;
    const double C114345 = C188 * C21492;
    const double C114401 = C109464 * C21492;
    const double C131757 = C124335 * C21492;
    const double C72561 = C72556 + C69772;
    const double C72638 = C69918 + C69919;
    const double C72637 = C69916 + C69917;
    const double C72880 = C70270 + C70271;
    const double C82380 = C73481 + C73482;
    const double C82369 = C73482 + C73481;
    const double C82379 = C73479 + C73480;
    const double C82370 = C73480 + C73479;
    const double C82780 = C73793 + C73794;
    const double C82775 = C73794 + C73793;
    const double C131358 = C85800 + C85799;
    const double C131359 = C85798 + C85797;
    const double C131600 = C86100 + C86099;
    const double C131208 = C131203 + C126045;
    const double C23315 = C23300 + C23301;
    const double C23312 = C23294 + C23295;
    const double C23309 = C23288 + C23289;
    const double C23306 = C23282 + C23283;
    const double C23663 = C23654 + C23655;
    const double C23660 = C23648 + C23649;
    const double C26081 = C26074 + C26075;
    const double C26078 = C26068 + C26069;
    const double C26318 = C26314 + C26315;
    const double C26900 = C26893 + C26894;
    const double C26897 = C26887 + C26888;
    const double C27209 = C27205 + C27206;
    const double C32103 = C32088 + C32089;
    const double C32100 = C32082 + C32083;
    const double C32097 = C32076 + C32077;
    const double C32094 = C32070 + C32071;
    const double C32433 = C32424 + C32425;
    const double C32430 = C32418 + C32419;
    const double C37221 = C37214 + C37215;
    const double C37218 = C37208 + C37209;
    const double C37455 = C37451 + C37452;
    const double C23316 = C23302 + C23303;
    const double C23313 = C23296 + C23297;
    const double C23310 = C23290 + C23291;
    const double C23307 = C23284 + C23285;
    const double C23664 = C23656 + C23657;
    const double C23661 = C23650 + C23651;
    const double C26080 = C26072 + C26073;
    const double C26077 = C26066 + C26067;
    const double C26317 = C26312 + C26313;
    const double C26899 = C26891 + C26892;
    const double C26896 = C26885 + C26886;
    const double C27208 = C27203 + C27204;
    const double C32104 = C32090 + C32091;
    const double C32101 = C32084 + C32085;
    const double C32098 = C32078 + C32079;
    const double C32095 = C32072 + C32073;
    const double C32434 = C32426 + C32427;
    const double C32431 = C32420 + C32421;
    const double C37220 = C37212 + C37213;
    const double C37217 = C37206 + C37207;
    const double C37454 = C37449 + C37450;
    const double C48953 = C48938 + C48939;
    const double C48950 = C48932 + C48933;
    const double C48947 = C48926 + C48927;
    const double C48944 = C48920 + C48921;
    const double C49301 = C49292 + C49293;
    const double C49298 = C49286 + C49287;
    const double C51705 = C51698 + C51699;
    const double C51702 = C51692 + C51693;
    const double C51942 = C51938 + C51939;
    const double C52524 = C52517 + C52518;
    const double C52521 = C52511 + C52512;
    const double C52833 = C52829 + C52830;
    const double C96116 = C96101 + C96102;
    const double C96113 = C96095 + C96096;
    const double C96110 = C96089 + C96090;
    const double C96107 = C96083 + C96084;
    const double C96446 = C96437 + C96438;
    const double C96443 = C96431 + C96432;
    const double C101233 = C101226 + C101227;
    const double C101230 = C101220 + C101221;
    const double C101467 = C101463 + C101464;
    const double C48954 = C48940 + C48941;
    const double C48951 = C48934 + C48935;
    const double C48948 = C48928 + C48929;
    const double C48945 = C48922 + C48923;
    const double C49302 = C49294 + C49295;
    const double C49299 = C49288 + C49289;
    const double C51704 = C51696 + C51697;
    const double C51701 = C51690 + C51691;
    const double C51941 = C51936 + C51937;
    const double C52523 = C52515 + C52516;
    const double C52520 = C52509 + C52510;
    const double C52832 = C52827 + C52828;
    const double C96117 = C96103 + C96104;
    const double C96114 = C96097 + C96098;
    const double C96111 = C96091 + C96092;
    const double C96108 = C96085 + C96086;
    const double C96447 = C96439 + C96440;
    const double C96444 = C96433 + C96434;
    const double C101232 = C101224 + C101225;
    const double C101229 = C101218 + C101219;
    const double C101466 = C101461 + C101462;
    const double C100 =
        ((ae * -2 * C139329) / C139342 -
         (((C139331 * C139343) / C139335 + 2 * C139359) * be) / C139330) /
            C139336 +
        ((C139331 *
              (C139343 / C139342 -
               (((C139331 * C139368) / C139330 + 2 * C139366) * be) / C139330 -
               C139361 / C139345) +
          2 * (C139359 / C139336 -
               ((C139331 * C139366 + C141452) * be) / C139330 + C139356)) *
         ae) /
            C139330 +
        C139368 / C139345 - ((2 * C139356 - C139363 / C139345) * be) / C139330;
    const double C102 =
        (C139343 / C139342 -
         (((C139331 * C139368) / C139330 + 2 * C139366) * be) / C139330 -
         C139361 / C139345) /
            C139336 +
        ((C139331 * (C139368 / C139345 -
                     ((2 * C139356 - C139363 / C139345) * be) / C139330) +
          2 * (C139366 / C139336 -
               ((C139331 * C139356 + C141221) * be) / C139330)) *
         ae) /
            C139330 +
        (-2 * C139361) / (C139330 * 4 * C139335);
    const double C104 = (C139368 / C139345 -
                         ((2 * C139356 - C139363 / C139345) * be) / C139330) /
                            C139336 +
                        ((2 * (C139356 / C139336 - (0 * be) / C139330) -
                          C139363 / (C139330 * 4 * C139335)) *
                         ae) /
                            C139330;
    const double C22074 =
        C139343 / C139342 -
        (((C139331 * C139368) / C139330 + 2 * C139366) * be) / C139330 -
        C139361 / C139345;
    const double C22076 =
        C139368 / C139345 - ((2 * C139356 - C139363 / C139345) * be) / C139330;
    const double C47712 =
        C139343 / C139342 +
        (((C139331 * C139368) / C139330 + 2 * C139366) * ae) / C139330 -
        C139361 / C139345;
    const double C47714 =
        C139368 / C139345 + ((2 * C139356 - C139363 / C139345) * ae) / C139330;
    const double C68675 = C139368 / C139330;
    const double C6752 = C5868 * C2961;
    const double C6748 = C5868 * C822;
    const double C6742 = C5868 * C2960;
    const double C6738 = C5868 * C823;
    const double C9778 = C5868 * C6729;
    const double C10564 = C5868 * C3490;
    const double C10560 = C5868 * C7887;
    const double C15885 = C5868 * C5326;
    const double C15881 = C5868 * C1600;
    const double C15875 = C5868 * C5325;
    const double C15871 = C5868 * C1601;
    const double C18589 = C5868 * C13301;
    const double C21318 = C5868 * C15862;
    const double C38624 = C5868 * C3491;
    const double C6781 = C6773 + C6755;
    const double C6779 = C6771 + C6751;
    const double C6777 = C6769 + C6745;
    const double C6775 = C6767 + C6741;
    const double C9787 = C9785 + C9777;
    const double C10578 = C10574 + C10563;
    const double C10576 = C10572 + C10559;
    const double C15914 = C15906 + C15888;
    const double C15912 = C15904 + C15884;
    const double C15910 = C15902 + C15878;
    const double C15908 = C15900 + C15874;
    const double C18600 = C18598 + C18592;
    const double C21326 = C21324 + C21317;
    const double C22948 = C22942 + C22921;
    const double C25833 = C25830 + C25819;
    const double C31736 = C31730 + C31712;
    const double C36973 = C36970 + C36959;
    const double C48586 = C48580 + C48559;
    const double C51457 = C51454 + C51443;
    const double C95749 = C95743 + C95725;
    const double C100985 = C100982 + C100971;
    const double C56058 = C56052 + C56039;
    const double C56057 = C56051 + C56037;
    const double C56056 = C56050 + C56035;
    const double C56055 = C56049 + C56032;
    const double C56054 = C56048 + C56030;
    const double C56053 = C56047 + C56028;
    const double C57941 = C57940 + C57937;
    const double C58473 = C58470 + C58463;
    const double C58472 = C58469 + C58461;
    const double C58471 = C58468 + C58459;
    const double C61521 = C61518 + C61511;
    const double C61520 = C61517 + C61509;
    const double C61519 = C61516 + C61506;
    const double C62515 = C62511 + C62501;
    const double C62514 = C62510 + C62499;
    const double C62513 = C62509 + C62495;
    const double C62512 = C62508 + C62493;
    const double C64402 = C64401 + C64397;
    const double C65168 = C65167 + C65162;
    const double C67937 = C67936 + C67932;
    const double C87073 = C87072 + C87070;
    const double C110456 = C110455 + C110452;
    const double C113955 = C113954 + C113951;
    const double C69551 = C69543 + C69525;
    const double C69549 = C69541 + C69521;
    const double C69547 = C69539 + C69515;
    const double C69545 = C69537 + C69511;
    const double C72406 = C72404 + C72396;
    const double C73155 = C73151 + C73140;
    const double C73153 = C73149 + C73136;
    const double C78698 = C78694 + C78682;
    const double C78696 = C78692 + C78678;
    const double C81977 = C81975 + C81969;
    const double C85493 = C85491 + C85482;
    const double C125940 = C125938 + C125932;
    const double C131127 = C131125 + C131118;
    const double C10294 = C10285 + C10291;
    const double C21589 = C21583 + C21584;
    const double C55744 =
        ((ae * -2 * C139515) / C139342 -
         (((C139394 * C139543) / C139335 + 2 * C139530) * be) / C139330) /
            C139336 +
        ((C139394 *
              (C139543 / C139342 -
               (((C139394 * C139546) / C139330 + 2 * C139526) * be) / C139330 -
               C139426 / C139345) +
          2 * (C139530 / C139336 -
               ((C139394 * C139526 + C141468) * be) / C139330 + C139527)) *
         ae) /
            C139330 +
        C139546 / C139345 - ((2 * C139527 - C139429 / C139345) * be) / C139330;
    const double C55745 =
        (C139543 / C139342 -
         (((C139394 * C139546) / C139330 + 2 * C139526) * be) / C139330 -
         C139426 / C139345) /
            C139336 +
        ((C139394 * (C139546 / C139345 -
                     ((2 * C139527 - C139429 / C139345) * be) / C139330) +
          2 * (C139526 / C139336 -
               ((C139394 * C139527 + C141358) * be) / C139330)) *
         ae) /
            C139330 +
        (-2 * C139426) / (C139330 * 4 * C139335);
    const double C55746 = (C139546 / C139345 -
                           ((2 * C139527 - C139429 / C139345) * be) / C139330) /
                              C139336 +
                          ((2 * (C139527 / C139336 - (0 * be) / C139330) -
                            C139429 / (C139330 * 4 * C139335)) *
                           ae) /
                              C139330;
    const double C69032 =
        C139543 / C139342 -
        (((C139394 * C139546) / C139330 + 2 * C139526) * be) / C139330 -
        C139426 / C139345;
    const double C69033 =
        C139546 / C139345 - ((2 * C139527 - C139429 / C139345) * be) / C139330;
    const double C6275 = C6269 + C6257;
    const double C6272 = C6266 + C6248;
    const double C7311 = C7308 + C7296;
    const double C8367 = C8364 + C8352;
    const double C103812 = C103809 + C8358;
    const double C106375 = C106372 + C11029;
    const double C108994 = C108991 + C13641;
    const double C22470 = C22464 + C22455;
    const double C22467 = C22461 + C22446;
    const double C22465 = C22459 + C22440;
    const double C23439 = C23435 + C23426;
    const double C23437 = C23433 + C23420;
    const double C24433 = C24429 + C24420;
    const double C24431 = C24427 + C24414;
    const double C39213 = C39211 + C27001;
    const double C40491 = C40487 + C29548;
    const double C40488 = C40484 + C24423;
    const double C43824 = C43822 + C26999;
    const double C47229 = C47227 + C29546;
    const double C136410 = C136408 + C43818;
    const double C139014 = C139012 + C47222;
    const double C48108 = C48102 + C48093;
    const double C48105 = C48099 + C48084;
    const double C48103 = C48097 + C48078;
    const double C49077 = C49073 + C49064;
    const double C49075 = C49071 + C49058;
    const double C50065 = C50061 + C50052;
    const double C50063 = C50059 + C50046;
    const double C63010 = C63004 + C55172;
    const double C63008 = C63002 + C55170;
    const double C63006 = C63000 + C50055;
    const double C65640 = C65636 + C61954;
    const double C65638 = C65634 + C52623;
    const double C68281 = C68279 + C62993;
    const double C78010 = C78008 + C52625;
    const double C6282 = C6276 + C6261;
    const double C6277 = C6271 + C6246;
    const double C7315 = C7312 + C7300;
    const double C8371 = C8368 + C8356;
    const double C103814 = C103811 + C103803;
    const double C106377 = C106374 + C106363;
    const double C108998 = C108995 + C108986;
    const double C6280 = C6274 + C6255;
    const double C6279 = C6273 + C6252;
    const double C103816 = C103813 + C103807;
    const double C108996 = C108993 + C108982;
    const double C22475 = C22469 + C22453;
    const double C22474 = C22468 + C22450;
    const double C22472 = C22466 + C22444;
    const double C23442 = C23438 + C23424;
    const double C23440 = C23436 + C23418;
    const double C24436 = C24432 + C24418;
    const double C24434 = C24430 + C24412;
    const double C40494 = C40490 + C40480;
    const double C40493 = C40489 + C40477;
    const double C43827 = C43825 + C43817;
    const double C47230 = C47228 + C47219;
    const double C136413 = C136411 + C136405;
    const double C139015 = C139013 + C139005;
    const double C48113 = C48107 + C48091;
    const double C48112 = C48106 + C48088;
    const double C48110 = C48104 + C48082;
    const double C49080 = C49076 + C49062;
    const double C49078 = C49074 + C49056;
    const double C50068 = C50064 + C50050;
    const double C50066 = C50062 + C50044;
    const double C63017 = C63011 + C62997;
    const double C63015 = C63009 + C62991;
    const double C63013 = C63007 + C62987;
    const double C65645 = C65641 + C65631;
    const double C65643 = C65639 + C65627;
    const double C68282 = C68280 + C68272;
    const double C69075 = C69069 + C69050;
    const double C69074 = C69068 + C69047;
    const double C88418 = C88415 + C88409;
    const double C93566 = C93563 + C93552;
    const double C68810 = C68797 + C68798;
    const double C68807 = C68791 + C68792;
    const double C68802 = C68781 + C68782;
    const double C68799 = C68775 + C68776;
    const double C69329 = C69322 + C69323;
    const double C69324 = C69312 + C69313;
    const double C69667 = C69660 + C69661;
    const double C69664 = C69654 + C69655;
    const double C70382 = C70378 + C70379;
    const double C70709 = C70702 + C70703;
    const double C70706 = C70696 + C70697;
    const double C71336 = C71332 + C71333;
    const double C88095 = C88086 + C88087;
    const double C88092 = C88080 + C88081;
    const double C88719 = C88713 + C88714;
    const double C90633 = C90624 + C90625;
    const double C90630 = C90618 + C90619;
    const double C91280 = C91274 + C91275;
    const double C93322 = C93315 + C93316;
    const double C93319 = C93309 + C93310;
    const double C93799 = C93795 + C93796;
    const double C68809 = C68795 + C68796;
    const double C68806 = C68789 + C68790;
    const double C68803 = C68783 + C68784;
    const double C68800 = C68777 + C68778;
    const double C69328 = C69320 + C69321;
    const double C69325 = C69314 + C69315;
    const double C69666 = C69658 + C69659;
    const double C69663 = C69652 + C69653;
    const double C70381 = C70376 + C70377;
    const double C70708 = C70700 + C70701;
    const double C70705 = C70694 + C70695;
    const double C71335 = C71330 + C71331;
    const double C88096 = C88088 + C88089;
    const double C88093 = C88082 + C88083;
    const double C88720 = C88715 + C88716;
    const double C90634 = C90626 + C90627;
    const double C90631 = C90620 + C90621;
    const double C91281 = C91276 + C91277;
    const double C93321 = C93313 + C93314;
    const double C93318 = C93307 + C93308;
    const double C93798 = C93793 + C93794;
    const double C22736 = C22719 + C22735;
    const double C138773 = C138767 + C138768;
    const double C48374 = C48357 + C48373;
    const double C68030 = C68024 + C68025;
    const double C109766 =
        ((ae * -2 * C139586) / C139342 -
         (((C139397 * C139614) / C139335 + 2 * C139601) * be) / C139330) /
            C139336 +
        ((C139397 *
              (C139614 / C139342 -
               (((C139397 * C139617) / C139330 + 2 * C139597) * be) / C139330 -
               C139452 / C139345) +
          2 * (C139601 / C139336 -
               ((C139397 * C139597 + C141469) * be) / C139330 + C139598)) *
         ae) /
            C139330 +
        C139617 / C139345 - ((2 * C139598 - C139455 / C139345) * be) / C139330;
    const double C109767 =
        (C139614 / C139342 -
         (((C139397 * C139617) / C139330 + 2 * C139597) * be) / C139330 -
         C139452 / C139345) /
            C139336 +
        ((C139397 * (C139617 / C139345 -
                     ((2 * C139598 - C139455 / C139345) * be) / C139330) +
          2 * (C139597 / C139336 -
               ((C139397 * C139598 + C141384) * be) / C139330)) *
         ae) /
            C139330 +
        (-2 * C139452) / (C139330 * 4 * C139335);
    const double C109768 =
        (C139617 / C139345 -
         ((2 * C139598 - C139455 / C139345) * be) / C139330) /
            C139336 +
        ((2 * (C139598 / C139336 - (0 * be) / C139330) -
          C139455 / (C139330 * 4 * C139335)) *
         ae) /
            C139330;
    const double C124846 =
        C139614 / C139342 -
        (((C139397 * C139617) / C139330 + 2 * C139597) * be) / C139330 -
        C139452 / C139345;
    const double C124847 =
        C139617 / C139345 - ((2 * C139598 - C139455 / C139345) * be) / C139330;
    const double C14771 = C14765 + C14753;
    const double C14768 = C14762 + C14744;
    const double C15759 = C15756 + C15744;
    const double C16922 = C16919 + C16907;
    const double C62389 = C62386 + C15750;
    const double C65055 = C65052 + C18480;
    const double C66085 = C66082 + C19466;
    const double C30632 = C30626 + C30617;
    const double C30629 = C30623 + C30608;
    const double C30627 = C30621 + C30602;
    const double C31604 = C31600 + C31591;
    const double C31602 = C31598 + C31585;
    const double C32663 = C32659 + C32650;
    const double C32661 = C32657 + C32644;
    const double C39779 = C39775 + C34219;
    const double C39776 = C39772 + C31594;
    const double C41043 = C41041 + C35116;
    const double C43131 = C43129 + C34217;
    const double C44373 = C44371 + C35114;
    const double C90415 = C90413 + C43124;
    const double C91390 = C91388 + C44366;
    const double C94659 = C94653 + C94644;
    const double C94656 = C94650 + C94635;
    const double C94654 = C94648 + C94629;
    const double C95617 = C95613 + C95604;
    const double C95615 = C95611 + C95598;
    const double C96676 = C96672 + C96663;
    const double C96674 = C96670 + C96657;
    const double C103274 = C103268 + C98231;
    const double C103272 = C103266 + C98229;
    const double C103270 = C103264 + C95607;
    const double C105817 = C105815 + C103257;
    const double C106818 = C106814 + C99126;
    const double C106816 = C106812 + C104219;
    const double C117658 = C117656 + C99128;
    const double C14778 = C14772 + C14757;
    const double C14773 = C14767 + C14742;
    const double C15763 = C15760 + C15748;
    const double C16926 = C16923 + C16911;
    const double C62391 = C62388 + C62380;
    const double C65059 = C65056 + C65047;
    const double C66089 = C66086 + C66077;
    const double C14776 = C14770 + C14751;
    const double C14775 = C14769 + C14748;
    const double C15761 = C15758 + C15742;
    const double C62393 = C62390 + C62384;
    const double C65057 = C65054 + C65043;
    const double C30637 = C30631 + C30615;
    const double C30636 = C30630 + C30612;
    const double C30634 = C30628 + C30606;
    const double C31607 = C31603 + C31589;
    const double C31605 = C31601 + C31583;
    const double C32666 = C32662 + C32648;
    const double C32664 = C32660 + C32642;
    const double C39782 = C39778 + C39768;
    const double C39781 = C39777 + C39765;
    const double C41044 = C41042 + C41037;
    const double C43132 = C43130 + C43121;
    const double C44374 = C44372 + C44363;
    const double C90416 = C90414 + C90407;
    const double C91391 = C91389 + C91382;
    const double C94664 = C94658 + C94642;
    const double C94663 = C94657 + C94639;
    const double C94661 = C94655 + C94633;
    const double C95620 = C95616 + C95602;
    const double C95618 = C95614 + C95596;
    const double C96679 = C96675 + C96661;
    const double C96677 = C96673 + C96655;
    const double C103281 = C103275 + C103261;
    const double C103279 = C103273 + C103255;
    const double C103277 = C103271 + C103251;
    const double C105818 = C105816 + C105809;
    const double C106821 = C106817 + C106806;
    const double C106819 = C106815 + C106802;
    const double C117659 = C117657 + C117652;
    const double C124889 = C124883 + C124864;
    const double C124888 = C124882 + C124861;
    const double C125828 = C125825 + C125809;
    const double C133368 = C133365 + C133359;
    const double C135868 = C135865 + C135854;
    const double C124372 = C124359 + C124360;
    const double C124369 = C124353 + C124354;
    const double C124364 = C124343 + C124344;
    const double C124361 = C124337 + C124338;
    const double C124612 = C124605 + C124606;
    const double C124607 = C124595 + C124596;
    const double C125203 = C125196 + C125197;
    const double C125200 = C125190 + C125191;
    const double C125506 = C125502 + C125503;
    const double C126170 = C126163 + C126164;
    const double C126167 = C126157 + C126158;
    const double C126493 = C126489 + C126490;
    const double C132742 = C132733 + C132734;
    const double C132739 = C132727 + C132728;
    const double C133045 = C133039 + C133040;
    const double C135391 = C135384 + C135385;
    const double C135388 = C135378 + C135379;
    const double C135624 = C135620 + C135621;
    const double C136197 = C136190 + C136191;
    const double C136194 = C136184 + C136185;
    const double C136520 = C136516 + C136517;
    const double C124371 = C124357 + C124358;
    const double C124368 = C124351 + C124352;
    const double C124365 = C124345 + C124346;
    const double C124362 = C124339 + C124340;
    const double C124611 = C124603 + C124604;
    const double C124608 = C124597 + C124598;
    const double C125202 = C125194 + C125195;
    const double C125199 = C125188 + C125189;
    const double C125505 = C125500 + C125501;
    const double C126169 = C126161 + C126162;
    const double C126166 = C126155 + C126156;
    const double C126492 = C126487 + C126488;
    const double C132743 = C132735 + C132736;
    const double C132740 = C132729 + C132730;
    const double C133046 = C133041 + C133042;
    const double C135390 = C135382 + C135383;
    const double C135387 = C135376 + C135377;
    const double C135623 = C135618 + C135619;
    const double C136196 = C136188 + C136189;
    const double C136193 = C136182 + C136183;
    const double C136519 = C136514 + C136515;
    const double C30359 = C30342 + C30358;
    const double C89943 = C89937 + C89938;
    const double C94386 = C94369 + C94385;
    const double C105345 = C105339 + C105340;
    const double C921 = C141309 * C914;
    const double C22192 = C141358 * C914;
    const double C47830 = C141358 * C914;
    const double C23305 = C22071 * C1097;
    const double C48943 = C47709 * C1097;
    const double C1793 = C141320 * C1786;
    const double C30095 = C141384 * C1786;
    const double C94122 = C141384 * C1786;
    const double C32429 = C22071 * C2123;
    const double C96442 = C47709 * C2123;
    const double C224 = C214 + C215;
    const double C311 = C301 + C302;
    const double C1026 = C1014 + C1015;
    const double C22939 = C22929 + C22087;
    const double C23314 = C23298 + C23299;
    const double C48577 = C48567 + C47725;
    const double C48952 = C48936 + C48937;
    const double C1710 = C1698 + C1699;
    const double C31727 = C31717 + C23984;
    const double C32102 = C32086 + C32087;
    const double C95740 = C95730 + C49622;
    const double C96115 = C96099 + C96100;
    const double C26779 = C24212 * C22071;
    const double C52403 = C24212 * C47709;
    const double C38633 = C38631 + C38627;
    const double C26580 = C26577 + C26566;
    const double C52204 = C52201 + C52190;
    const double C77458 = C77456 + C77452;
    const double C10122 =
        (3 * (C140264 + C140270 + C140270 + C139758 * C140395) + C140406 +
         C140406 +
         C139758 * (2 * C140395 + C140403 + C140403 +
                    C139758 * (C140386 + C140399 + C140399 +
                               C139758 * (2 * ae * C140388 +
                                          C139758 * C139643 *
                                              (C139715 * C139716 +
                                               C139866 * bs[7] *
                                                   std::pow(C139649, 7)) *
                                              C139650)))) /
        C139335;
    const double C11350 =
        (C140406 + C139801 * (2 * C140429 + ae * C140420 +
                              C139758 * (C140427 + ae * C139758 * C140416 +
                                         C139758 * (ae * C140416 +
                                                    C139758 * C139643 *
                                                        std::pow(C139649, 7) *
                                                        bs[7] * C139925)))) /
        C139335;
    const double C10129 = C5966 * C9863;
    const double C56384 = C55593 * C9863;
    const double C72730 = C68773 * C9863;
    const double C11033 = C5966 * C10678;
    const double C42721 = C22173 * C10678;
    const double C57024 = C55593 * C10678;
    const double C73586 = C68773 * C10678;
    const double C81444 = C47811 * C10678;
    const double C21988 =
        (3 * (C140306 + C140571 + C140571 + C139801 * C140704) + C140717 +
         C140717 +
         C139801 * (2 * C140704 + C140714 + C140714 +
                    C139801 * (C140432 + C140710 + C140710 +
                               C139801 * (2 * ae * C140416 +
                                          C139801 * C139643 *
                                              (C139715 * C139716 +
                                               C139940 * bs[7] *
                                                   std::pow(C139649, 7)) *
                                              C139650)))) /
        C139335;
    const double C21995 = C14206 * C21493;
    const double C111031 = C109465 * C21493;
    const double C131760 = C124335 * C21493;
    const double C139754 = C139753 + C139740;
    const double C834 =
        (3 * (C139959 + C139963 + C139963 + C139643 * C139981) + C139977 +
         C139977 +
         C139643 * (2 * C139981 + C139978 + C139978 +
                    C139643 * (C139971 + C139979 + C139979 +
                               C139643 * (2 * ae * C139758 * C139728 +
                                          C139643 * C139758 *
                                              (C139715 * C139716 +
                                               C139647 * bs[7] *
                                                   std::pow(C139649, 7)) *
                                              C139650)))) /
        C139335;
    const double C3033 =
        (2 * C139779 + ae * C139780 + C139643 * C139797 + C139977 +
         C139758 *
             (C139752 +
              C139758 * (2 * C139793 + ae * C139794 +
                         C139643 * (C139787 + ae * C139643 * C139789 +
                                    C139643 * (ae * C139789 +
                                               C139643 * std::pow(C139649, 7) *
                                                   bs[7] * C139762))))) /
        C139335;
    const double C3145 =
        (2 * C139854 + ae * C139780 + C139643 * C139862 + C139977 +
         C139758 *
             (C139752 +
              C139758 * (2 * C139860 + ae * C139794 +
                         C139643 * (C139858 + ae * C139643 * C139789 +
                                    C139643 * (ae * C139789 +
                                               C139643 * std::pow(C139649, 7) *
                                                   bs[7] * C139846))))) /
        C139335;
    const double C3653 =
        (C139977 + C139801 * C139758 *
                       (2 * C139836 + ae * C139837 +
                        C139643 * (C139830 + ae * C139643 * C139832 +
                                   C139643 * (ae * C139832 +
                                              C139643 * std::pow(C139649, 7) *
                                                  bs[7] * C139805)))) /
        C139335;
    const double C3937 =
        (C139977 + C139801 * C139758 *
                       (2 * C139918 + ae * C139837 +
                        C139643 * (C139916 + ae * C139643 * C139832 +
                                   C139643 * (ae * C139832 +
                                              C139643 * std::pow(C139649, 7) *
                                                  bs[7] * C139904)))) /
        C139335;
    const double C3506 = C107 * C3497;
    const double C23987 = C22079 * C3497;
    const double C37709 = C5871 * C3497;
    const double C49625 = C47717 * C3497;
    const double C76534 = C139356 * C3497;
    const double C1612 =
        (3 * (C140023 + C140027 + C140027 + C139643 * C140045) + C140041 +
         C140041 +
         C139643 * (2 * C140045 + C140042 + C140042 +
                    C139643 * (C140035 + C140043 + C140043 +
                               C139643 * (2 * ae * C139801 * C139728 +
                                          C139643 * C139801 *
                                              (C139715 * C139716 +
                                               C139647 * bs[7] *
                                                   std::pow(C139649, 7)) *
                                              C139650)))) /
        C139335;
    const double C3723 =
        (C140041 + C139758 * C139801 *
                       (2 * C139860 + ae * C139794 +
                        C139643 * (C139858 + ae * C139643 * C139789 +
                                   C139643 * (ae * C139789 +
                                              C139643 * std::pow(C139649, 7) *
                                                  bs[7] * C139846)))) /
        C139335;
    const double C5456 =
        (2 * C139822 + ae * C139823 + C139643 * C139840 + C140041 +
         C139801 *
             (C139752 +
              C139801 * (2 * C139836 + ae * C139837 +
                         C139643 * (C139830 + ae * C139643 * C139832 +
                                    C139643 * (ae * C139832 +
                                               C139643 * std::pow(C139649, 7) *
                                                   bs[7] * C139805))))) /
        C139335;
    const double C5676 =
        (2 * C139912 + ae * C139823 + C139643 * C139920 + C140041 +
         C139801 *
             (C139752 +
              C139801 * (2 * C139918 + ae * C139837 +
                         C139643 * (C139916 + ae * C139643 * C139832 +
                                    C139643 * (ae * C139832 +
                                               C139643 * std::pow(C139649, 7) *
                                                   bs[7] * C139904))))) /
        C139335;
    const double C140771 = C140770 + C140763;
    const double C58775 =
        (3 * (C140444 + C140448 + C140448 + C139758 * C140816) + C140812 +
         C140812 +
         C139758 * (2 * C140816 + C140813 + C140813 +
                    C139758 * (C140806 + C140814 + C140814 +
                               C139758 * (2 * ae * C139801 * C139789 +
                                          C139758 * C139801 *
                                              (C139715 * C139716 +
                                               C139866 * bs[7] *
                                                   std::pow(C139649, 7)) *
                                              C139650)))) /
        C139335;
    const double C60679 =
        (2 * C140425 + ae * C140412 + C139758 * C140793 + C140812 +
         C139801 *
             (C140769 +
              C139801 * (2 * C140791 + ae * C140780 +
                         C139758 * (C139934 + ae * C139758 * C139832 +
                                    C139758 * (ae * C139832 +
                                               C139758 * std::pow(C139649, 7) *
                                                   bs[7] * C139925))))) /
        C139335;
    const double C140982 = C140981 + C140970;
    const double C68592 =
        (3 * (C140616 + C140623 + C140623 + C139801 * C140907) + C140918 +
         C140918 +
         C139801 * (2 * C140907 + C140915 + C140915 +
                    C139801 * (C140898 + C140911 + C140911 +
                               C139801 * (2 * ae * C140900 +
                                          C139801 * C139758 *
                                              (C139715 * C139716 +
                                               C139940 * bs[7] *
                                                   std::pow(C139649, 7)) *
                                              C139650)))) /
        C139335;
    const double C68596 = C14206 * C68104;
    const double C112708 = C109465 * C68104;
    const double C139322 = C124335 * C68104;
    const double C7313 = C7310 + C7294;
    const double C70047 = C70044 + C70028;
    const double C8369 = C8366 + C8350;
    const double C39214 = C39212 + C39207;
    const double C78011 = C78009 + C78004;
    const double C71025 = C71022 + C71006;
    const double C91279 = C68674 * C11349;
    const double C106699 = C5867 * C11349;
    const double C58112 = C58108 + C58109;
    const double C58222 = C58220 + C58221;
    const double C106373 = C106366 + C11030;
    const double C58704 = C58692 + C58693;
    const double C58850 = C58848 + C58849;
    const double C90959 = C90952 + C73583;
    const double C90174 = C90170 + C90171;
    const double C90632 = C90622 + C90623;
    const double C105576 = C105572 + C105573;
    const double C106034 = C106024 + C106025;
    const double C16924 = C16921 + C16905;
    const double C126821 = C126818 + C126802;
    const double C66087 = C66084 + C66073;
    const double C136842 = C136839 + C136828;
    const double C114293 = C114291 + C114292;
    const double C114347 = C114345 + C114346;
    const double C72562 = C72561 + C69773;
    const double C72879 = C72637 * C275;
    const double C72885 = C72880 * C141320;
    const double C131368 = C131358 * C188;
    const double C131369 = C131359 * C141309;
    const double C131209 = C131208 + C126046;
    const double C22925 = C22074 * C822;
    const double C22916 = C22074 * C823;
    const double C25822 = C22074 * C2960;
    const double C26569 = C22074 * C3490;
    const double C31713 = C22074 * C1600;
    const double C31707 = C22074 * C1601;
    const double C36962 = C22074 * C5325;
    const double C22927 = C22076 * C821;
    const double C22918 = C22076 * C822;
    const double C25820 = C22076 * C2961;
    const double C26567 = C22076 * C3491;
    const double C31715 = C22076 * C1599;
    const double C31709 = C22076 * C1600;
    const double C36960 = C22076 * C5326;
    const double C48563 = C47712 * C822;
    const double C48554 = C47712 * C823;
    const double C51446 = C47712 * C2960;
    const double C52193 = C47712 * C3490;
    const double C95726 = C47712 * C1600;
    const double C95720 = C47712 * C1601;
    const double C100974 = C47712 * C5325;
    const double C48565 = C47714 * C821;
    const double C48556 = C47714 * C822;
    const double C51444 = C47714 * C2961;
    const double C52191 = C47714 * C3491;
    const double C95728 = C47714 * C1599;
    const double C95722 = C47714 * C1600;
    const double C100972 = C47714 * C5326;
    const double C69522 = C68675 * C2961;
    const double C69518 = C68675 * C822;
    const double C69512 = C68675 * C2960;
    const double C69508 = C68675 * C823;
    const double C72397 = C68675 * C6729;
    const double C73141 = C68675 * C3490;
    const double C73137 = C68675 * C7887;
    const double C77449 = C68675 * C3491;
    const double C78679 = C68675 * C1600;
    const double C78675 = C68675 * C1601;
    const double C81970 = C68675 * C13301;
    const double C85483 = C68675 * C5325;
    const double C125929 = C68675 * C5326;
    const double C131119 = C68675 * C15862;
    const double C6764 = C6752 + C5880;
    const double C6762 = C6748 + C5882;
    const double C6760 = C6742 + C5877;
    const double C6758 = C6738 + C5875;
    const double C9784 = C9778 + C6747;
    const double C10571 = C10564 + C7899;
    const double C10569 = C10560 + C7897;
    const double C15897 = C15885 + C14040;
    const double C15895 = C15881 + C7902;
    const double C15893 = C15875 + C13314;
    const double C15891 = C15871 + C7901;
    const double C18595 = C18589 + C13316;
    const double C21323 = C21318 + C15880;
    const double C38628 = C38624 + C7904;
    const double C56064 = C56058 * C141320;
    const double C56063 = C56057 * C141320;
    const double C87068 = C56057 * C141469;
    const double C102392 = C56057 * C93949;
    const double C56062 = C56056 * C141320;
    const double C61507 = C56056 * C14035;
    const double C87066 = C56056 * C141469;
    const double C102390 = C56056 * C93949;
    const double C132528 = C56056 * C141498;
    const double C56061 = C56055 * C141320;
    const double C89778 = C56055 * C141469;
    const double C105180 = C56055 * C93949;
    const double C56060 = C56054 * C141320;
    const double C64399 = C56054 * C14035;
    const double C87064 = C56054 * C141469;
    const double C102388 = C56054 * C93949;
    const double C135225 = C56054 * C141498;
    const double C56059 = C56053 * C141320;
    const double C61503 = C56053 * C14035;
    const double C87062 = C56053 * C141469;
    const double C102386 = C56053 * C93949;
    const double C132525 = C56053 * C141498;
    const double C57942 = C57941 * C141320;
    const double C58476 = C58473 * C141320;
    const double C61504 = C58473 * C14036;
    const double C65164 = C58473 * C14035;
    const double C87063 = C58473 * C141384;
    const double C90519 = C58473 * C141469;
    const double C102387 = C58473 * C141384;
    const double C105921 = C58473 * C93949;
    const double C132526 = C58473 * C141499;
    const double C135971 = C58473 * C141498;
    const double C58475 = C58472 * C141320;
    const double C64398 = C58472 * C14036;
    const double C87065 = C58472 * C141384;
    const double C90517 = C58472 * C141469;
    const double C102389 = C58472 * C141384;
    const double C105919 = C58472 * C93949;
    const double C135224 = C58472 * C141499;
    const double C58474 = C58471 * C141320;
    const double C89777 = C58471 * C141384;
    const double C105179 = C58471 * C141384;
    const double C61524 = C61521 * C14037;
    const double C132530 = C61521 * C124182;
    const double C61523 = C61520 * C14036;
    const double C87067 = C61520 * C141384;
    const double C102391 = C61520 * C141384;
    const double C132529 = C61520 * C141499;
    const double C61522 = C61519 * C14037;
    const double C65163 = C61519 * C14036;
    const double C90518 = C61519 * C141384;
    const double C105920 = C61519 * C141384;
    const double C132527 = C61519 * C124182;
    const double C135970 = C61519 * C141499;
    const double C64403 = C64402 * C14037;
    const double C90516 = C64402 * C141384;
    const double C105918 = C64402 * C141384;
    const double C135223 = C64402 * C124182;
    const double C65169 = C65168 * C14037;
    const double C135969 = C65168 * C124182;
    const double C87074 = C87073 * C141384;
    const double C102393 = C87073 * C141384;
    const double C69054 = C69032 * C110;
    const double C69039 = C69032 * C109;
    const double C70032 = C69032 * C822;
    const double C71010 = C69032 * C1600;
    const double C88404 = C69032 * C1601;
    const double C90948 = C69032 * C3490;
    const double C93555 = C69032 * C5325;
    const double C69051 = C69033 * C821;
    const double C69042 = C69033 * C822;
    const double C70029 = C69033 * C2961;
    const double C71007 = C69033 * C3491;
    const double C88406 = C69033 * C3490;
    const double C90950 = C69033 * C7887;
    const double C93553 = C69033 * C13301;
    const double C6281 = C6275 + C6258;
    const double C6278 = C6272 + C6249;
    const double C7314 = C7311 + C7297;
    const double C8370 = C8367 + C8353;
    const double C103815 = C103812 + C103805;
    const double C106378 = C106375 + C106365;
    const double C108997 = C108994 + C108984;
    const double C22476 = C22470 + C22456;
    const double C22473 = C22467 + C22447;
    const double C22471 = C22465 + C22441;
    const double C23443 = C23439 + C23427;
    const double C23441 = C23437 + C23421;
    const double C24437 = C24433 + C24421;
    const double C24435 = C24431 + C24415;
    const double C39215 = C39213 + C39209;
    const double C40495 = C40491 + C40482;
    const double C40492 = C40488 + C40475;
    const double C43826 = C43824 + C43815;
    const double C47231 = C47229 + C47221;
    const double C136412 = C136410 + C136403;
    const double C139016 = C139014 + C139007;
    const double C48114 = C48108 + C48094;
    const double C48111 = C48105 + C48085;
    const double C48109 = C48103 + C48079;
    const double C49081 = C49077 + C49065;
    const double C49079 = C49075 + C49059;
    const double C50069 = C50065 + C50053;
    const double C50067 = C50063 + C50047;
    const double C63016 = C63010 + C62995;
    const double C63014 = C63008 + C62989;
    const double C63012 = C63006 + C62985;
    const double C65644 = C65640 + C65629;
    const double C65642 = C65638 + C65625;
    const double C68283 = C68281 + C68274;
    const double C78012 = C78010 + C78006;
    const double C124868 = C124846 * C110;
    const double C124853 = C124846 * C109;
    const double C125813 = C124846 * C822;
    const double C126806 = C124846 * C1600;
    const double C133354 = C124846 * C823;
    const double C135857 = C124846 * C2960;
    const double C136831 = C124846 * C3490;
    const double C124865 = C124847 * C1599;
    const double C124856 = C124847 * C1600;
    const double C125810 = C124847 * C3491;
    const double C126803 = C124847 * C5326;
    const double C133356 = C124847 * C3490;
    const double C135855 = C124847 * C7887;
    const double C136829 = C124847 * C13301;
    const double C14777 = C14771 + C14754;
    const double C14774 = C14768 + C14745;
    const double C15762 = C15759 + C15745;
    const double C16925 = C16922 + C16908;
    const double C62392 = C62389 + C62382;
    const double C65058 = C65055 + C65045;
    const double C66088 = C66085 + C66075;
    const double C30638 = C30632 + C30618;
    const double C30635 = C30629 + C30609;
    const double C30633 = C30627 + C30603;
    const double C31608 = C31604 + C31592;
    const double C31606 = C31602 + C31586;
    const double C32667 = C32663 + C32651;
    const double C32665 = C32661 + C32645;
    const double C39783 = C39779 + C39770;
    const double C39780 = C39776 + C39763;
    const double C41045 = C41043 + C41039;
    const double C43133 = C43131 + C43123;
    const double C44375 = C44373 + C44365;
    const double C90417 = C90415 + C90409;
    const double C91392 = C91390 + C91384;
    const double C94665 = C94659 + C94645;
    const double C94662 = C94656 + C94636;
    const double C94660 = C94654 + C94630;
    const double C95621 = C95617 + C95605;
    const double C95619 = C95615 + C95599;
    const double C96680 = C96676 + C96664;
    const double C96678 = C96674 + C96658;
    const double C103280 = C103274 + C103259;
    const double C103278 = C103272 + C103253;
    const double C103276 = C103270 + C103249;
    const double C105819 = C105817 + C105811;
    const double C106822 = C106818 + C106808;
    const double C106820 = C106816 + C106804;
    const double C117660 = C117658 + C117654;
    const double C932 = C920 + C921;
    const double C22207 = C22191 + C22192;
    const double C47845 = C47829 + C47830;
    const double C23317 = C23304 + C23305;
    const double C48955 = C48942 + C48943;
    const double C1804 = C1792 + C1793;
    const double C30110 = C30094 + C30095;
    const double C94137 = C94121 + C94122;
    const double C32435 = C32428 + C32429;
    const double C96448 = C96441 + C96442;
    const double C23183 = C1026 * C22071;
    const double C48821 = C1026 * C47709;
    const double C22945 = C22939 + C22087;
    const double C48583 = C48577 + C47725;
    const double C31849 = C1710 * C22071;
    const double C95862 = C1710 * C47709;
    const double C31733 = C31727 + C23984;
    const double C95746 = C95740 + C49622;
    const double C139755 = ae * C139754;
    const double C119 = (4 * C139709 + C139643 * C139754 +
                         (3 * C139694 + C139643 * C139737) * ae) /
                        C139330;
    const double C829 = (C139758 * C139754) / C139330;
    const double C1607 = (C139801 * C139754) / C139330;
    const double C140772 = ae * C140771;
    const double C57992 = (4 * C140382 + C139758 * C140771 +
                           (3 * C140373 + C139758 * C140761) * ae) /
                          C139330;
    const double C58542 = (C139801 * C140771) / C139330;
    const double C140983 = ae * C140982;
    const double C114067 = (4 * C140695 + C139801 * C140982 +
                            (3 * C140686 + C139801 * C140967) * ae) /
                           C139330;
    const double C91282 = C91278 + C91279;
    const double C106702 = C106698 + C106699;
    const double C106376 = C106373 + C11030;
    const double C90849 = C58704 * C68674;
    const double C106263 = C58704 * C5867;
    const double C90962 = C90959 + C73583;
    const double C72888 = C72879 + C72885;
    const double C131374 = C131368 + C131369;
    const double C22937 = C22925 + C22089;
    const double C22934 = C22916 + C22084;
    const double C25829 = C25822 + C22924;
    const double C26576 = C26569 + C23978;
    const double C31725 = C31713 + C23982;
    const double C31722 = C31707 + C23981;
    const double C36969 = C36962 + C29244;
    const double C22938 = C22927 + C22088;
    const double C22935 = C22918 + C22085;
    const double C25828 = C25820 + C22923;
    const double C26575 = C26567 + C23977;
    const double C31726 = C31715 + C23983;
    const double C31723 = C31709 + C23980;
    const double C36968 = C36960 + C29245;
    const double C48575 = C48563 + C47727;
    const double C48572 = C48554 + C47722;
    const double C51453 = C51446 + C48562;
    const double C52200 = C52193 + C49616;
    const double C95738 = C95726 + C49620;
    const double C95735 = C95720 + C49619;
    const double C100981 = C100974 + C54868;
    const double C48576 = C48565 + C47726;
    const double C48573 = C48556 + C47723;
    const double C51452 = C51444 + C48561;
    const double C52199 = C52191 + C49615;
    const double C95739 = C95728 + C49621;
    const double C95736 = C95722 + C49618;
    const double C100980 = C100972 + C54869;
    const double C69534 = C69522 + C68687;
    const double C69532 = C69518 + C68689;
    const double C69530 = C69512 + C68684;
    const double C69528 = C69508 + C68682;
    const double C72403 = C72397 + C69517;
    const double C73148 = C73141 + C70585;
    const double C73146 = C73137 + C70583;
    const double C77453 = C77449 + C70590;
    const double C78689 = C78679 + C70588;
    const double C78687 = C78675 + C70587;
    const double C81974 = C81970 + C75831;
    const double C85490 = C85483 + C75829;
    const double C125935 = C125929 + C78683;
    const double C131124 = C131119 + C85485;
    const double C6772 = C6764 + C5880;
    const double C6770 = C6762 + C5882;
    const double C6768 = C6760 + C5877;
    const double C6766 = C6758 + C5875;
    const double C9786 = C9784 + C6747;
    const double C10575 = C10571 + C7899;
    const double C10573 = C10569 + C7897;
    const double C15905 = C15897 + C14040;
    const double C15903 = C15895 + C7902;
    const double C15901 = C15893 + C13314;
    const double C15899 = C15891 + C7901;
    const double C18597 = C18595 + C13316;
    const double C21325 = C21323 + C15880;
    const double C38630 = C38628 + C7904;
    const double C89776 = C87064 + C87065;
    const double C105178 = C102388 + C102389;
    const double C69065 = C69054 + C69055;
    const double C69060 = C69039 + C69040;
    const double C70043 = C70032 + C70033;
    const double C71021 = C71010 + C71011;
    const double C88410 = C88404 + C71015;
    const double C90957 = C90948 + C73581;
    const double C93562 = C93555 + C76131;
    const double C69064 = C69051 + C69052;
    const double C69061 = C69042 + C69043;
    const double C70042 = C70029 + C70030;
    const double C71020 = C71007 + C71008;
    const double C88411 = C88406 + C71014;
    const double C90958 = C90950 + C73582;
    const double C93561 = C93553 + C76132;
    const double C22477 = C22473 + C22474;
    const double C40483 = C24436 + C24437;
    const double C40478 = C24437 + C24436;
    const double C139003 = C47231 + C47230;
    const double C48115 = C48111 + C48112;
    const double C79248 = C50068 + C50069;
    const double C79247 = C50069 + C50068;
    const double C68270 = C63014 + C63015;
    const double C124879 = C124868 + C124869;
    const double C124874 = C124853 + C124854;
    const double C125824 = C125813 + C125814;
    const double C126817 = C126806 + C126807;
    const double C133360 = C133354 + C125818;
    const double C135864 = C135857 + C128372;
    const double C136838 = C136831 + C129272;
    const double C124878 = C124865 + C124866;
    const double C124875 = C124856 + C124857;
    const double C125823 = C125810 + C125811;
    const double C126816 = C126803 + C126804;
    const double C133361 = C133356 + C125817;
    const double C135863 = C135855 + C128373;
    const double C136837 = C136829 + C129273;
    const double C30639 = C30635 + C30636;
    const double C39771 = C31607 + C31608;
    const double C39766 = C31608 + C31607;
    const double C90405 = C43133 + C43132;
    const double C94666 = C94662 + C94663;
    const double C116462 = C95620 + C95621;
    const double C116461 = C95621 + C95620;
    const double C105807 = C103278 + C103279;
    const double C22951 = C22945 + C22930;
    const double C48589 = C48583 + C48568;
    const double C31739 = C31733 + C31718;
    const double C95752 = C95746 + C95731;
    const double C125 =
        (4 * (2 * C139703 + C139707 + C139707 + C139643 * C139746) + C139755 +
         C139755 +
         C139643 *
             (3 * C139746 + C139752 + C139752 +
              C139643 * (2 * C139742 + C139748 + C139748 +
                         C139643 * (C139735 + C139741 + C139741 +
                                    C139643 * (2 * ae * C139728 +
                                               C139643 *
                                                   (C139715 * C139716 +
                                                    C139647 * bs[7] *
                                                        std::pow(C139649, 7)) *
                                                   C139650))))) /
        C139335;
    const double C918 =
        (C139755 +
         C139758 *
             (3 * C139797 + ae * C139798 +
              C139643 * (2 * C139793 + ae * C139794 +
                         C139643 * (C139787 + ae * C139643 * C139789 +
                                    C139643 * (ae * C139789 +
                                               C139643 * std::pow(C139649, 7) *
                                                   bs[7] * C139762))))) /
        C139335;
    const double C1101 =
        (C139755 +
         C139758 *
             (3 * C139862 + ae * C139798 +
              C139643 * (2 * C139860 + ae * C139794 +
                         C139643 * (C139858 + ae * C139643 * C139789 +
                                    C139643 * (ae * C139789 +
                                               C139643 * std::pow(C139649, 7) *
                                                   bs[7] * C139846))))) /
        C139335;
    const double C1790 =
        (C139755 +
         C139801 *
             (3 * C139840 + ae * C139841 +
              C139643 * (2 * C139836 + ae * C139837 +
                         C139643 * (C139830 + ae * C139643 * C139832 +
                                    C139643 * (ae * C139832 +
                                               C139643 * std::pow(C139649, 7) *
                                                   bs[7] * C139805))))) /
        C139335;
    const double C2127 =
        (C139755 +
         C139801 *
             (3 * C139920 + ae * C139841 +
              C139643 * (2 * C139918 + ae * C139837 +
                         C139643 * (C139916 + ae * C139643 * C139832 +
                                    C139643 * (ae * C139832 +
                                               C139643 * std::pow(C139649, 7) *
                                                   bs[7] * C139904))))) /
        C139335;
    const double C138 = C107 * C119;
    const double C843 = C107 * C829;
    const double C22098 = C22079 * C829;
    const double C47736 = C47717 * C829;
    const double C1621 = C107 * C1607;
    const double C29927 = C22079 * C1607;
    const double C93954 = C47717 * C1607;
    const double C58163 =
        (4 * (2 * C140370 + C140380 + C140380 + C139758 * C140759) + C140772 +
         C140772 +
         C139758 *
             (3 * C140759 + C140769 + C140769 +
              C139758 * (2 * C140750 + C140765 + C140765 +
                         C139758 * (C139881 + C140758 + C140758 +
                                    C139758 * (2 * ae * C139789 +
                                               C139758 *
                                                   (C139715 * C139716 +
                                                    C139866 * bs[7] *
                                                        std::pow(C139649, 7)) *
                                                   C139650))))) /
        C139335;
    const double C58998 =
        (C140772 +
         C139801 *
             (3 * C140793 + ae * C140784 +
              C139758 * (2 * C140791 + ae * C140780 +
                         C139758 * (C139934 + ae * C139758 * C139832 +
                                    C139758 * (ae * C139832 +
                                               C139758 * std::pow(C139649, 7) *
                                                   bs[7] * C139925))))) /
        C139335;
    const double C58168 = C55593 * C57992;
    const double C58780 = C55593 * C58542;
    const double C90094 = C68773 * C58542;
    const double C105496 = C5966 * C58542;
    const double C114397 =
        (4 * (2 * C140683 + C140693 + C140693 + C139801 * C140972) + C140983 +
         C140983 +
         C139801 *
             (3 * C140972 + C140980 + C140980 +
              C139801 * (2 * C140964 + C140976 + C140976 +
                         C139801 * (C139955 + C140971 + C140971 +
                                    C139801 * (2 * ae * C139832 +
                                               C139801 *
                                                   (C139715 * C139716 +
                                                    C139940 * bs[7] *
                                                        std::pow(C139649, 7)) *
                                                   C139650))))) /
        C139335;
    const double C114402 = C109465 * C114067;
    const double C106379 = C106376 + C106367;
    const double C90965 = C90962 + C90953;
    const double C22943 = C22937 + C22089;
    const double C22940 = C22934 + C22084;
    const double C25832 = C25829 + C22924;
    const double C26579 = C26576 + C23978;
    const double C31731 = C31725 + C23982;
    const double C31728 = C31722 + C23981;
    const double C36972 = C36969 + C29244;
    const double C22944 = C22938 + C22088;
    const double C22941 = C22935 + C22085;
    const double C25831 = C25828 + C22923;
    const double C26578 = C26575 + C23977;
    const double C31732 = C31726 + C23983;
    const double C31729 = C31723 + C23980;
    const double C36971 = C36968 + C29245;
    const double C48581 = C48575 + C47727;
    const double C48578 = C48572 + C47722;
    const double C51456 = C51453 + C48562;
    const double C52203 = C52200 + C49616;
    const double C95744 = C95738 + C49620;
    const double C95741 = C95735 + C49619;
    const double C100984 = C100981 + C54868;
    const double C48582 = C48576 + C47726;
    const double C48579 = C48573 + C47723;
    const double C51455 = C51452 + C48561;
    const double C52202 = C52199 + C49615;
    const double C95745 = C95739 + C49621;
    const double C95742 = C95736 + C49618;
    const double C100983 = C100980 + C54869;
    const double C69542 = C69534 + C68687;
    const double C69540 = C69532 + C68689;
    const double C69538 = C69530 + C68684;
    const double C69536 = C69528 + C68682;
    const double C72405 = C72403 + C69517;
    const double C73152 = C73148 + C70585;
    const double C73150 = C73146 + C70583;
    const double C77455 = C77453 + C70590;
    const double C78693 = C78689 + C70588;
    const double C78691 = C78687 + C70587;
    const double C81976 = C81974 + C75831;
    const double C85492 = C85490 + C75829;
    const double C125937 = C125935 + C78683;
    const double C131126 = C131124 + C85485;
    const double C6780 = C6772 + C6753;
    const double C6778 = C6770 + C6749;
    const double C6776 = C6768 + C6743;
    const double C6774 = C6766 + C6739;
    const double C9788 = C9786 + C9779;
    const double C10579 = C10575 + C10565;
    const double C10577 = C10573 + C10561;
    const double C15913 = C15905 + C15886;
    const double C15911 = C15903 + C15882;
    const double C15909 = C15901 + C15876;
    const double C15907 = C15899 + C15872;
    const double C18599 = C18597 + C18590;
    const double C21327 = C21325 + C21319;
    const double C38632 = C38630 + C38625;
    const double C69071 = C69065 + C69055;
    const double C69066 = C69060 + C69040;
    const double C70046 = C70043 + C70033;
    const double C71024 = C71021 + C71011;
    const double C88413 = C88410 + C71015;
    const double C90960 = C90957 + C73581;
    const double C93565 = C93562 + C76131;
    const double C69070 = C69064 + C69052;
    const double C69067 = C69061 + C69043;
    const double C70045 = C70042 + C70030;
    const double C71023 = C71020 + C71008;
    const double C88414 = C88411 + C71014;
    const double C90961 = C90958 + C73582;
    const double C93564 = C93561 + C76132;
    const double C139010 = C139003 * C141216;
    const double C68277 = C68270 * C141216;
    const double C124885 = C124879 + C124869;
    const double C124880 = C124874 + C124854;
    const double C125827 = C125824 + C125814;
    const double C126820 = C126817 + C126807;
    const double C133363 = C133360 + C125818;
    const double C135867 = C135864 + C128372;
    const double C136841 = C136838 + C129272;
    const double C124884 = C124878 + C124866;
    const double C124881 = C124875 + C124857;
    const double C125826 = C125823 + C125811;
    const double C126819 = C126816 + C126804;
    const double C133364 = C133361 + C125817;
    const double C135866 = C135863 + C128373;
    const double C136840 = C136837 + C129273;
    const double C30640 = C30639 * C141309;
    const double C94667 = C94666 * C141309;
    const double C22949 = C22943 + C22926;
    const double C22946 = C22940 + C22917;
    const double C25835 = C25832 + C25823;
    const double C26582 = C26579 + C26570;
    const double C31737 = C31731 + C31714;
    const double C31734 = C31728 + C31708;
    const double C36975 = C36972 + C36963;
    const double C22950 = C22944 + C22928;
    const double C22947 = C22941 + C22919;
    const double C25834 = C25831 + C25821;
    const double C26581 = C26578 + C26568;
    const double C31738 = C31732 + C31716;
    const double C31735 = C31729 + C31710;
    const double C36974 = C36971 + C36961;
    const double C48587 = C48581 + C48564;
    const double C48584 = C48578 + C48555;
    const double C51459 = C51456 + C51447;
    const double C52206 = C52203 + C52194;
    const double C95750 = C95744 + C95727;
    const double C95747 = C95741 + C95721;
    const double C100987 = C100984 + C100975;
    const double C48588 = C48582 + C48566;
    const double C48585 = C48579 + C48557;
    const double C51458 = C51455 + C51445;
    const double C52205 = C52202 + C52192;
    const double C95751 = C95745 + C95729;
    const double C95748 = C95742 + C95723;
    const double C100986 = C100983 + C100973;
    const double C69550 = C69542 + C69523;
    const double C69548 = C69540 + C69519;
    const double C69546 = C69538 + C69513;
    const double C69544 = C69536 + C69509;
    const double C72407 = C72405 + C72398;
    const double C73156 = C73152 + C73142;
    const double C73154 = C73150 + C73138;
    const double C77457 = C77455 + C77450;
    const double C78697 = C78693 + C78680;
    const double C78695 = C78691 + C78676;
    const double C81978 = C81976 + C81971;
    const double C85494 = C85492 + C85484;
    const double C125939 = C125937 + C125930;
    const double C131128 = C131126 + C131120;
    const double C9775 = C6776 + C6777;
    const double C43265 = C10578 + C10579;
    const double C43264 = C10579 + C10578;
    const double C21315 = C15909 + C15910;
    const double C69077 = C69071 + C69056;
    const double C69072 = C69066 + C69041;
    const double C70049 = C70046 + C70034;
    const double C71027 = C71024 + C71012;
    const double C88416 = C88413 + C88405;
    const double C90963 = C90960 + C90949;
    const double C93568 = C93565 + C93556;
    const double C69076 = C69070 + C69053;
    const double C69073 = C69067 + C69044;
    const double C70048 = C70045 + C70031;
    const double C71026 = C71023 + C71009;
    const double C88417 = C88414 + C88407;
    const double C90964 = C90961 + C90951;
    const double C93567 = C93564 + C93554;
    const double C124891 = C124885 + C124870;
    const double C124886 = C124880 + C124855;
    const double C125830 = C125827 + C125815;
    const double C126823 = C126820 + C126808;
    const double C133366 = C133363 + C133355;
    const double C135870 = C135867 + C135858;
    const double C136844 = C136841 + C136832;
    const double C124890 = C124884 + C124867;
    const double C124887 = C124881 + C124858;
    const double C125829 = C125826 + C125812;
    const double C126822 = C126819 + C126805;
    const double C133367 = C133364 + C133357;
    const double C135869 = C135866 + C135856;
    const double C136843 = C136840 + C136830;
    const double C72394 = C69546 + C69547;
    const double C81972 = C73155 + C73156;
    const double C81967 = C73156 + C73155;
    const double C131116 = C85494 + C85493;
    const double C9782 = C9775 * C141320;
    const double C72401 = C72394 * C141320;
    d2eexx[0] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((C22074 * C108 + C22081 + C22081 + C141494 * C120 +
                     C22076 * C109 + C22082 + C22082 + C141495 * C121 +
                     C22078 * C110 + C22083 + C22083 + C22071 * C122) *
                        C141320 * C141468 +
                    (C22074 * C823 + C22084 + C22084 + C141494 * C833 +
                     C22076 * C822 + C22085 + C22085 + C141495 * C832 +
                     C22078 * C821 + C22086 + C22086 + C22071 * C831) *
                        C141320 * C141358) *
                       C141294 * C141277 * C97 -
                   ((C22078 * C820 + C22087 + C22087 + C22071 * C830 +
                     C22076 * C821 + C22088 + C22088 + C141495 * C831 +
                     C22074 * C822 + C22089 + C22089 + C141494 * C832) *
                        C141320 * C141358 +
                    (C22078 * C111 + C22090 + C22090 + C22071 * C123 +
                     C22076 * C110 + C22091 + C22091 + C141495 * C122 +
                     C22074 * C109 + C22092 + C22092 + C141494 * C121) *
                        C141320 * C141468) *
                       C141294 * C141277 * C98 +
                   ((C22074 * C110 + C22093 + C22093 + C141494 * C122 +
                     C22076 * C111 + C22094 + C22094 + C141495 * C123 +
                     C22078 * C112 + C22095 + C22095 + C22071 * C124) *
                        C141320 * C141468 +
                    (C22074 * C821 + C22096 + C22096 + C141494 * C831 +
                     C22076 * C820 + C22097 + C22097 + C141495 * C830 +
                     C22078 * C824 + C22098 + C22098 + C22071 * C834) *
                        C141320 * C141358) *
                       C141294 * C141277 * C99)) /
                 (p * q * std::sqrt(p + q));
    d2eexy[0] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C22172 * C108 + C141468 * C189 + C22173 * C823 + C141358 * C912) *
               C22075 +
           (C22172 * C114 + C141468 * C195 + C22173 * C828 + C141358 * C917) *
               C141494 +
           (C22199 + C22200) * C22077 + (C22201 + C22202) * C141495 +
           C22211 * C22079 + C22212 * C22071) *
              C141320 * C141294 * C141277 * C97 -
          ((C22207 + C22208) * C22071 + (C22209 + C22210) * C22079 +
           (C22206 + C22205) * C141495 + (C22204 + C22203) * C22077 +
           (C22202 + C22201) * C141494 + (C22200 + C22199) * C22075) *
              C141320 * C141294 * C141277 * C98 +
          (C22211 * C22075 + C22212 * C141494 + (C22210 + C22209) * C22077 +
           (C22208 + C22207) * C141495 +
           (C22172 * C112 + C141468 * C193 + C22173 * C824 + C141358 * C913) *
               C22079 +
           (C22172 * C118 + C141468 * C199 + C22173 * C829 + C141358 * C918) *
               C22071) *
              C141320 * C141294 * C141277 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eexz[0] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141320 * C276) * C22075 +
            (C275 * C114 + C141320 * C282) * C141494 + C305 * C22077 +
            C306 * C141495 + C307 * C22079 + C308 * C22071) *
               C141468 +
           (C7032 * C22075 + C7033 * C141494 + C1031 * C22077 +
            C1030 * C141495 + C1029 * C22079 + C1028 * C22071) *
               C141358) *
              C141294 * C141277 * C97 -
          ((C1026 * C22071 + C1027 * C22079 + C1028 * C141495 + C1029 * C22077 +
            C1030 * C141494 + C1031 * C22075) *
               C141358 +
           (C310 * C22071 + C309 * C22079 + C308 * C141495 + C307 * C22077 +
            C306 * C141494 + C305 * C22075) *
               C141468) *
              C141294 * C141277 * C98 +
          ((C307 * C22075 + C308 * C141494 + C309 * C22077 + C310 * C141495 +
            C312 * C22079 + C311 * C22071) *
               C141468 +
           (C1029 * C22075 + C1028 * C141494 + C1027 * C22077 +
            C1026 * C141495 + (C275 * C824 + C141320 * C1007) * C22079 +
            (C275 * C829 + C141320 * C1012) * C22071) *
               C141358) *
              C141294 * C141277 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[0] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((C22075 * C108 + C141494 * C114 + C22077 * C109 +
                     C141495 * C115 + C22079 * C110 + C22071 * C116) *
                        C22172 +
                    (C22075 * C189 + C141494 * C362 + C22077 * C190 +
                     C141495 * C363 + C22079 * C191 + C22071 * C364) *
                        C141468 +
                    (C22075 * C823 + C141494 * C828 + C22077 * C822 +
                     C141495 * C827 + C22079 * C821 + C22071 * C826) *
                        C22173 +
                    (C22075 * C912 + C141494 * C1100 + C22077 * C911 +
                     C141495 * C1099 + C22079 * C910 + C22071 * C1098) *
                        C141358) *
                       C141320 * C141294 * C141277 * C97 -
                   ((C22079 * C909 + C22071 * C1097 + C22077 * C910 +
                     C141495 * C1098 + C22075 * C911 + C141494 * C1099) *
                        C141358 +
                    (C22079 * C820 + C22071 * C825 + C22077 * C821 +
                     C141495 * C826 + C22075 * C822 + C141494 * C827) *
                        C22173 +
                    (C22079 * C192 + C22071 * C365 + C22077 * C191 +
                     C141495 * C364 + C22075 * C190 + C141494 * C363) *
                        C141468 +
                    (C22079 * C111 + C22071 * C117 + C22077 * C110 +
                     C141495 * C116 + C22075 * C109 + C141494 * C115) *
                        C22172) *
                       C141320 * C141294 * C141277 * C98 +
                   ((C22075 * C110 + C141494 * C116 + C22077 * C111 +
                     C141495 * C117 + C22079 * C112 + C22071 * C118) *
                        C22172 +
                    (C22075 * C191 + C141494 * C364 + C22077 * C192 +
                     C141495 * C365 + C22079 * C193 + C22071 * C366) *
                        C141468 +
                    (C22075 * C821 + C141494 * C826 + C22077 * C820 +
                     C141495 * C825 + C22079 * C824 + C22071 * C829) *
                        C22173 +
                    (C22075 * C910 + C141494 * C1098 + C22077 * C909 +
                     C141495 * C1097 + C22079 * C913 + C22071 * C1101) *
                        C141358) *
                       C141320 * C141294 * C141277 * C99)) /
                 (p * q * std::sqrt(p + q));
    d2eeyy[0] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((C22434 * C108 + C22437 + C22437 + C141468 * C419 +
                     C22435 * C823 + C22438 + C22438 + C141358 * C1171) *
                        C141494 +
                    (C22471 + C22472) * C141495 + C22477 * C22071) *
                       C141320 * C141294 * C141277 * C97 -
                   ((C22475 + C22476) * C22071 + (C22474 + C22473) * C141495 +
                    (C22472 + C22471) * C141494) *
                       C141320 * C141294 * C141277 * C98 +
                   (C22477 * C141494 + (C22476 + C22475) * C141495 +
                    (C22434 * C112 + C22457 + C22457 + C141468 * C423 +
                     C22435 * C824 + C22458 + C22458 + C141358 * C1172) *
                        C22071) *
                       C141320 * C141294 * C141277 * C99)) /
                 (p * q * std::sqrt(p + q));
    d2eeyz[0] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141320 * C276) * C22172 +
            (C275 * C189 + C141320 * C501) * C141468 + C7032 * C22173 +
            C7428 * C141358) *
               C141494 +
           (C22552 + C22553 + C22554 + C22555) * C141495 + C22566 * C22071) *
              C141294 * C141277 * C97 -
          ((C22560 + C22561 + C22562 + C22563) * C22071 +
           (C22559 + C22558 + C22557 + C22556) * C141495 +
           (C22555 + C22554 + C22553 + C22552) * C141494) *
              C141294 * C141277 * C98 +
          (C22566 * C141494 + (C22563 + C22562 + C22561 + C22560) * C141495 +
           (C312 * C22172 + C523 * C141468 +
            (C275 * C824 + C141320 * C1007) * C22173 +
            (C275 * C913 + C141320 * C1263) * C141358) *
               C22071) *
              C141294 * C141277 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eezx[0] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C22075 * C108 + C141494 * C114 + C22077 * C109 +
                      C141495 * C115 + C22079 * C110 + C22071 * C116) *
                         C275 +
                     (C22075 * C276 + C141494 * C579 + C22077 * C277 +
                      C141495 * C580 + C22079 * C278 + C22071 * C581) *
                         C141320) *
                        C141468 +
                    ((C22075 * C823 + C141494 * C828 + C22077 * C822 +
                      C141495 * C827 + C22079 * C821 + C22071 * C826) *
                         C275 +
                     (C22075 * C1006 + C141494 * C1348 + C22077 * C1005 +
                      C141495 * C1347 + C22079 * C1004 + C22071 * C1346) *
                         C141320) *
                        C141358) *
                       C141294 * C141277 * C97 -
                   (((C22079 * C1003 + C22071 * C1345 + C22077 * C1004 +
                      C141495 * C1346 + C22075 * C1005 + C141494 * C1347) *
                         C141320 +
                     (C22079 * C820 + C22071 * C825 + C22077 * C821 +
                      C141495 * C826 + C22075 * C822 + C141494 * C827) *
                         C275) *
                        C141358 +
                    ((C22079 * C279 + C22071 * C582 + C22077 * C278 +
                      C141495 * C581 + C22075 * C277 + C141494 * C580) *
                         C141320 +
                     (C22079 * C111 + C22071 * C117 + C22077 * C110 +
                      C141495 * C116 + C22075 * C109 + C141494 * C115) *
                         C275) *
                        C141468) *
                       C141294 * C141277 * C98 +
                   (((C22075 * C110 + C141494 * C116 + C22077 * C111 +
                      C141495 * C117 + C22079 * C112 + C22071 * C118) *
                         C275 +
                     (C22075 * C278 + C141494 * C581 + C22077 * C279 +
                      C141495 * C582 + C22079 * C280 + C22071 * C583) *
                         C141320) *
                        C141468 +
                    ((C22075 * C821 + C141494 * C826 + C22077 * C820 +
                      C141495 * C825 + C22079 * C824 + C22071 * C829) *
                         C275 +
                     (C22075 * C1004 + C141494 * C1346 + C22077 * C1003 +
                      C141495 * C1345 + C22079 * C1007 + C22071 * C1349) *
                         C141320) *
                        C141358) *
                       C141294 * C141277 * C99)) /
                 (p * q * std::sqrt(p + q));
    d2eezy[0] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C22172 * C108 + C141468 * C189 + C22173 * C823 + C141358 * C912) *
                C275 +
            (C22172 * C276 + C141468 * C635 + C22173 * C1006 +
             C141358 * C1419) *
                C141320) *
               C141494 +
           ((C22199 + C22200) * C275 + (C22728 + C22729) * C141320) * C141495 +
           C22736 * C22071) *
              C141294 * C141277 * C97 -
          (((C22732 + C22733) * C141320 + (C22209 + C22210) * C275) * C22071 +
           ((C22731 + C22730) * C141320 + (C22204 + C22203) * C275) * C141495 +
           ((C22729 + C22728) * C141320 + (C22200 + C22199) * C275) * C141494) *
              C141294 * C141277 * C98 +
          (C22736 * C141494 +
           ((C22210 + C22209) * C275 + (C22733 + C22732) * C141320) * C141495 +
           ((C22172 * C112 + C141468 * C193 + C22173 * C824 + C141358 * C913) *
                C275 +
            (C22172 * C280 + C141468 * C639 + C22173 * C1007 +
             C141358 * C1420) *
                C141320) *
               C22071) *
              C141294 * C141277 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eezz[0] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C141320 * C714) * C141468 +
            C7785 * C141358) *
               C141494 +
           (C22811 + C22812) * C141495 + C22817 * C22071) *
              C141294 * C141277 * C97 -
          ((C22815 + C22816) * C22071 + (C22814 + C22813) * C141495 +
           (C22812 + C22811) * C141494) *
              C141294 * C141277 * C98 +
          (C22817 * C141494 + (C22816 + C22815) * C141495 +
           (C746 * C141468 +
            (C713 * C824 + C1518 + C1518 + C141320 * C1506) * C141358) *
               C22071) *
              C141294 * C141277 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eexx[1] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C22074 * C108 + C22081 + C22081 + C141494 * C120 +
                      C22076 * C109 + C22082 + C22082 + C141495 * C121 +
                      C22078 * C110 + C22083 + C22083 + C22071 * C122) *
                         C141320 * C141468 +
                     (C22946 + C22947 + C22948) * C141320 * C141358) *
                        C141294 * C816 -
                    ((C22078 * C2962 + C22922 + C22922 + C22071 * C2970 +
                      C22076 * C2961 + C22923 + C22923 + C141495 * C2969 +
                      C22074 * C2960 + C22924 + C22924 + C141494 * C2968) *
                         C141320 * C141358 +
                     (C22948 + C22947 + C22946) * C141320 * C141468) *
                        C141294 * C141485) *
                       C818 +
                   (((C22949 + C22950 + C22951) * C141320 * C141468 +
                     (C22074 * C2961 + C22931 + C22931 + C141494 * C2969 +
                      C22076 * C2962 + C22932 + C22932 + C141495 * C2970 +
                      C22078 * C2963 + C22933 + C22933 + C22071 * C2971) *
                         C141320 * C141358) *
                        C141294 * C141485 -
                    ((C22951 + C22950 + C22949) * C141320 * C141358 +
                     (C22078 * C111 + C22090 + C22090 + C22071 * C123 +
                      C22076 * C110 + C22091 + C22091 + C141495 * C122 +
                      C22074 * C109 + C22092 + C22092 + C141494 * C121) *
                         C141320 * C141468) *
                        C141294 * C816) *
                       C141483)) /
                 (p * q * std::sqrt(p + q));
    d2eexy[1] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C22172 * C108 + C141468 * C189 + C22173 * C823 + C141358 * C912) *
                C22075 +
            (C22172 * C114 + C141468 * C195 + C22173 * C828 + C141358 * C917) *
                C141494 +
            (C22199 + C22200) * C22077 + (C22201 + C22202) * C141495 +
            C22211 * C22079 + C22212 * C22071) *
               C141320 * C141294 * C816 -
           ((C23066 + C23067) * C22071 + (C23068 + C23069) * C22079 +
            (C23070 + C23071) * C141495 + (C23072 + C23073) * C22077 +
            (C22173 * C2964 + C141358 * C3030 + C22172 * C828 +
             C141468 * C917) *
                C141494 +
            (C22173 * C2960 + C141358 * C3026 + C22172 * C823 +
             C141468 * C912) *
                C22075) *
               C141320 * C141294 * C141485) *
              C818 +
          (((C23073 + C23072) * C22075 + (C23071 + C23070) * C141494 +
            (C23069 + C23068) * C22077 + (C23067 + C23066) * C141495 +
            (C22172 * C820 + C141468 * C909 + C22173 * C2963 +
             C141358 * C3029) *
                C22079 +
            (C22172 * C825 + C141468 * C914 + C22173 * C2967 +
             C141358 * C3033) *
                C22071) *
               C141320 * C141294 * C141485 -
           ((C22207 + C22208) * C22071 + (C22209 + C22210) * C22079 +
            (C22206 + C22205) * C141495 + (C22204 + C22203) * C22077 +
            (C22202 + C22201) * C141494 + (C22200 + C22199) * C22075) *
               C141320 * C141294 * C816) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eexz[1] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141320 * C276) * C22075 +
             (C275 * C114 + C141320 * C282) * C141494 + C305 * C22077 +
             C306 * C141495 + C307 * C22079 + C308 * C22071) *
                C141468 +
            (C23172 + C23173 + C23174 + C23175 + C23176 + C23177) * C141358) *
               C141294 * C816 -
           ((C6088 * C22071 + C6089 * C22079 + C6087 * C141495 +
             C6086 * C22077 + C7035 * C141494 + C7034 * C22075) *
                C141358 +
            (C23177 + C23176 + C23175 + C23174 + C23173 + C23172) * C141468) *
               C141294 * C141485) *
              C818 +
          (((C23178 + C23179 + C23180 + C23181 + C23182 + C23183) * C141468 +
            (C6086 * C22075 + C6087 * C141494 + C6089 * C22077 +
             C6088 * C141495 + (C275 * C2963 + C141320 * C3087) * C22079 +
             (C275 * C2967 + C141320 * C3091) * C22071) *
                C141358) *
               C141294 * C141485 -
           ((C23183 + C23182 + C23181 + C23180 + C23179 + C23178) * C141358 +
            (C310 * C22071 + C309 * C22079 + C308 * C141495 + C307 * C22077 +
             C306 * C141494 + C305 * C22075) *
                C141468) *
               C141294 * C816) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[1] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C22075 * C108 + C141494 * C114 + C22077 * C109 +
                      C141495 * C115 + C22079 * C110 + C22071 * C116) *
                         C22172 +
                     (C22075 * C189 + C141494 * C362 + C22077 * C190 +
                      C141495 * C363 + C22079 * C191 + C22071 * C364) *
                         C141468 +
                     (C23306 + C23307 + C23308) * C22173 +
                     (C23309 + C23310 + C23311) * C141358) *
                        C141320 * C141294 * C816 -
                    ((C22079 * C3028 + C22071 * C3144 + C22077 * C3027 +
                      C141495 * C3143 + C22075 * C3026 + C141494 * C3142) *
                         C141358 +
                     (C22079 * C2962 + C22071 * C2966 + C22077 * C2961 +
                      C141495 * C2965 + C22075 * C2960 + C141494 * C2964) *
                         C22173 +
                     (C23311 + C23310 + C23309) * C141468 +
                     (C23308 + C23307 + C23306) * C22172) *
                        C141320 * C141294 * C141485) *
                       C818 +
                   (((C23312 + C23313 + C23314) * C22172 +
                     (C23315 + C23316 + C23317) * C141468 +
                     (C22075 * C2961 + C141494 * C2965 + C22077 * C2962 +
                      C141495 * C2966 + C22079 * C2963 + C22071 * C2967) *
                         C22173 +
                     (C22075 * C3027 + C141494 * C3143 + C22077 * C3028 +
                      C141495 * C3144 + C22079 * C3029 + C22071 * C3145) *
                         C141358) *
                        C141320 * C141294 * C141485 -
                    ((C23317 + C23316 + C23315) * C141358 +
                     (C23314 + C23313 + C23312) * C22173 +
                     (C22079 * C192 + C22071 * C365 + C22077 * C191 +
                      C141495 * C364 + C22075 * C190 + C141494 * C363) *
                         C141468 +
                     (C22079 * C111 + C22071 * C117 + C22077 * C110 +
                      C141495 * C116 + C22075 * C109 + C141494 * C115) *
                         C22172) *
                        C141320 * C141294 * C816) *
                       C141483)) /
                 (p * q * std::sqrt(p + q));
    d2eeyy[1] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C22434 * C108 + C22437 + C22437 + C141468 * C419 +
                      C22435 * C823 + C22438 + C22438 + C141358 * C1171) *
                         C141494 +
                     (C22471 + C22472) * C141495 + C22477 * C22071) *
                        C141320 * C141294 * C816 -
                    ((C23440 + C23441) * C22071 + (C23442 + C23443) * C141495 +
                     (C22435 * C2960 + C23428 + C23428 + C141358 * C3196 +
                      C22434 * C823 + C23429 + C23429 + C141468 * C1171) *
                         C141494) *
                        C141320 * C141294 * C141485) *
                       C818 +
                   (((C23443 + C23442) * C141494 + (C23441 + C23440) * C141495 +
                     (C22434 * C820 + C23430 + C23430 + C141468 * C1168 +
                      C22435 * C2963 + C23431 + C23431 + C141358 * C3199) *
                         C22071) *
                        C141320 * C141294 * C141485 -
                    ((C22475 + C22476) * C22071 + (C22474 + C22473) * C141495 +
                     (C22472 + C22471) * C141494) *
                        C141320 * C141294 * C816) *
                       C141483)) /
                 (p * q * std::sqrt(p + q));
    d2eeyz[1] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141320 * C276) * C22172 +
             (C275 * C189 + C141320 * C501) * C141468 + C7032 * C22173 +
             C7428 * C141358) *
                C141494 +
            (C22552 + C22553 + C22554 + C22555) * C141495 + C22566 * C22071) *
               C141294 * C816 -
           ((C23542 + C23543 + C23544 + C23545) * C22071 +
            (C23546 + C23547 + C23548 + C23549) * C141495 +
            (C7429 * C141358 + C7034 * C22173 + C7428 * C141468 +
             C7032 * C22172) *
                C141494) *
               C141294 * C141485) *
              C818 +
          (((C23549 + C23548 + C23547 + C23546) * C141494 +
            (C23545 + C23544 + C23543 + C23542) * C141495 +
            (C1027 * C22172 + C1274 * C141468 +
             (C275 * C2963 + C141320 * C3087) * C22173 +
             (C275 * C3029 + C141320 * C3257) * C141358) *
                C22071) *
               C141294 * C141485 -
           ((C22560 + C22561 + C22562 + C22563) * C22071 +
            (C22559 + C22558 + C22557 + C22556) * C141495 +
            (C22555 + C22554 + C22553 + C22552) * C141494) *
               C141294 * C816) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eezx[1] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C22075 * C108 + C141494 * C114 + C22077 * C109 +
                       C141495 * C115 + C22079 * C110 + C22071 * C116) *
                          C275 +
                      (C22075 * C276 + C141494 * C579 + C22077 * C277 +
                       C141495 * C580 + C22079 * C278 + C22071 * C581) *
                          C141320) *
                         C141468 +
                     ((C23306 + C23307 + C23308) * C275 +
                      (C23660 + C23661 + C23662) * C141320) *
                         C141358) *
                        C141294 * C816 -
                    (((C22079 * C3086 + C22071 * C3310 + C22077 * C3085 +
                       C141495 * C3309 + C22075 * C3084 + C141494 * C3308) *
                          C141320 +
                      (C22079 * C2962 + C22071 * C2966 + C22077 * C2961 +
                       C141495 * C2965 + C22075 * C2960 + C141494 * C2964) *
                          C275) *
                         C141358 +
                     ((C23662 + C23661 + C23660) * C141320 +
                      (C23308 + C23307 + C23306) * C275) *
                         C141468) *
                        C141294 * C141485) *
                       C818 +
                   ((((C23312 + C23313 + C23314) * C275 +
                      (C23663 + C23664 + C23665) * C141320) *
                         C141468 +
                     ((C22075 * C2961 + C141494 * C2965 + C22077 * C2962 +
                       C141495 * C2966 + C22079 * C2963 + C22071 * C2967) *
                          C275 +
                      (C22075 * C3085 + C141494 * C3309 + C22077 * C3086 +
                       C141495 * C3310 + C22079 * C3087 + C22071 * C3311) *
                          C141320) *
                         C141358) *
                        C141294 * C141485 -
                    (((C23665 + C23664 + C23663) * C141320 +
                      (C23314 + C23313 + C23312) * C275) *
                         C141358 +
                     ((C22079 * C279 + C22071 * C582 + C22077 * C278 +
                       C141495 * C581 + C22075 * C277 + C141494 * C580) *
                          C141320 +
                      (C22079 * C111 + C22071 * C117 + C22077 * C110 +
                       C141495 * C116 + C22075 * C109 + C141494 * C115) *
                          C275) *
                         C141468) *
                        C141294 * C816) *
                       C141483)) /
                 (p * q * std::sqrt(p + q));
    d2eezy[1] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22172 * C108 + C141468 * C189 + C22173 * C823 + C141358 * C912) *
                 C275 +
             (C22172 * C276 + C141468 * C635 + C22173 * C1006 +
              C141358 * C1419) *
                 C141320) *
                C141494 +
            ((C22199 + C22200) * C275 + (C22728 + C22729) * C141320) * C141495 +
            C22736 * C22071) *
               C141294 * C816 -
           (((C23772 + C23773) * C141320 + (C23068 + C23069) * C275) * C22071 +
            ((C23774 + C23775) * C141320 + (C23072 + C23073) * C275) * C141495 +
            ((C22173 * C3084 + C141358 * C3362 + C22172 * C1006 +
              C141468 * C1419) *
                 C141320 +
             (C22173 * C2960 + C141358 * C3026 + C22172 * C823 +
              C141468 * C912) *
                 C275) *
                C141494) *
               C141294 * C141485) *
              C818 +
          ((((C23073 + C23072) * C275 + (C23775 + C23774) * C141320) * C141494 +
            ((C23069 + C23068) * C275 + (C23773 + C23772) * C141320) * C141495 +
            ((C22172 * C820 + C141468 * C909 + C22173 * C2963 +
              C141358 * C3029) *
                 C275 +
             (C22172 * C1003 + C141468 * C1416 + C22173 * C3087 +
              C141358 * C3365) *
                 C141320) *
                C22071) *
               C141294 * C141485 -
           (((C22732 + C22733) * C141320 + (C22209 + C22210) * C275) * C22071 +
            ((C22731 + C22730) * C141320 + (C22204 + C22203) * C275) * C141495 +
            ((C22729 + C22728) * C141320 + (C22200 + C22199) * C275) *
                C141494) *
               C141294 * C816) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eezz[1] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C713 * C108 + C721 + C721 + C141320 * C714) * C141468 +
             C7785 * C141358) *
                C141494 +
            (C22811 + C22812) * C141495 + C22817 * C22071) *
               C141294 * C816 -
           ((C23874 + C23875) * C22071 + (C23876 + C23877) * C141495 +
            (C7786 * C141358 + C7785 * C141468) * C141494) *
               C141294 * C141485) *
              C818 +
          (((C23877 + C23876) * C141494 + (C23875 + C23874) * C141495 +
            (C1525 * C141468 +
             (C713 * C2963 + C3424 + C3424 + C141320 * C3419) * C141358) *
                C22071) *
               C141294 * C141485 -
           ((C22815 + C22816) * C22071 + (C22814 + C22813) * C141495 +
            (C22812 + C22811) * C141494) *
               C141294 * C816) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eexx[2] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C22074 * C108 + C22081 + C22081 + C141494 * C120 +
                      C22076 * C109 + C22082 + C22082 + C141495 * C121 +
                      C22078 * C110 + C22083 + C22083 + C22071 * C122) *
                         C141320 * C141468 +
                     (C22946 + C22947 + C22948) * C141320 * C141358) *
                        C1596 -
                    ((C22078 * C3492 + C23976 + C23976 + C22071 * C3500 +
                      C22076 * C3491 + C23977 + C23977 + C141495 * C3499 +
                      C22074 * C3490 + C23978 + C23978 + C141494 * C3498) *
                         C141320 * C141358 +
                     (C22078 * C1599 + C23979 + C23979 + C22071 * C1609 +
                      C22076 * C1600 + C23980 + C23980 + C141495 * C1610 +
                      C22074 * C1601 + C23981 + C23981 + C141494 * C1611) *
                         C141320 * C141468) *
                        C141487) *
                       C141277 * C818 +
                   (((C22074 * C1600 + C23982 + C23982 + C141494 * C1610 +
                      C22076 * C1599 + C23983 + C23983 + C141495 * C1609 +
                      C22078 * C1598 + C23984 + C23984 + C22071 * C1608) *
                         C141320 * C141468 +
                     (C22074 * C3491 + C23985 + C23985 + C141494 * C3499 +
                      C22076 * C3492 + C23986 + C23986 + C141495 * C3500 +
                      C22078 * C3493 + C23987 + C23987 + C22071 * C3501) *
                         C141320 * C141358) *
                        C141487 -
                    ((C22951 + C22950 + C22949) * C141320 * C141358 +
                     (C22078 * C111 + C22090 + C22090 + C22071 * C123 +
                      C22076 * C110 + C22091 + C22091 + C141495 * C122 +
                      C22074 * C109 + C22092 + C22092 + C141494 * C121) *
                         C141320 * C141468) *
                        C1596) *
                       C141277 * C141483)) /
                 (p * q * std::sqrt(p + q));
    d2eexy[2] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C22172 * C108 + C141468 * C189 + C22173 * C823 + C141358 * C912) *
                C22075 +
            (C22172 * C114 + C141468 * C195 + C22173 * C828 + C141358 * C917) *
                C141494 +
            (C22199 + C22200) * C22077 + (C22201 + C22202) * C141495 +
            C22211 * C22079 + C22212 * C22071) *
               C141320 * C1596 -
           ((C24102 + C24103) * C22071 + (C24104 + C24105) * C22079 +
            (C24106 + C24107) * C141495 + (C24108 + C24109) * C22077 +
            (C22173 * C3494 + C141358 * C3576 + C22172 * C1606 +
             C141468 * C1695) *
                C141494 +
            (C22173 * C3490 + C141358 * C3572 + C22172 * C1601 +
             C141468 * C1690) *
                C22075) *
               C141320 * C141487) *
              C141277 * C818 +
          (((C24109 + C24108) * C22075 + (C24107 + C24106) * C141494 +
            (C24105 + C24104) * C22077 + (C24103 + C24102) * C141495 +
            (C22172 * C1598 + C141468 * C1687 + C22173 * C3493 +
             C141358 * C3575) *
                C22079 +
            (C22172 * C1603 + C141468 * C1692 + C22173 * C3497 +
             C141358 * C3579) *
                C22071) *
               C141320 * C141487 -
           ((C22207 + C22208) * C22071 + (C22209 + C22210) * C22079 +
            (C22206 + C22205) * C141495 + (C22204 + C22203) * C22077 +
            (C22202 + C22201) * C141494 + (C22200 + C22199) * C22075) *
               C141320 * C1596) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eexz[2] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141320 * C276) * C22075 +
             (C275 * C114 + C141320 * C282) * C141494 + C305 * C22077 +
             C306 * C141495 + C307 * C22079 + C308 * C22071) *
                C141468 +
            (C23172 + C23173 + C23174 + C23175 + C23176 + C23177) * C141358) *
               C1596 -
           ((C24212 * C22071 + C24213 * C22079 + C8144 * C141495 +
             C8145 * C22077 + C10798 * C141494 + C10799 * C22075) *
                C141358 +
            (C1806 * C22071 + C1807 * C22079 + C1808 * C141495 +
             C1809 * C22077 + (C275 * C1606 + C141320 * C1789) * C141494 +
             (C275 * C1601 + C141320 * C1784) * C22075) *
                C141468) *
               C141487) *
              C141277 * C818 +
          (((C1809 * C22075 + C1808 * C141494 + C1807 * C22077 +
             C1806 * C141495 + C1805 * C22079 + C1804 * C22071) *
                C141468 +
            (C8145 * C22075 + C8144 * C141494 + C24213 * C22077 +
             C24212 * C141495 + (C275 * C3493 + C141320 * C3649) * C22079 +
             (C275 * C3497 + C141320 * C3653) * C22071) *
                C141358) *
               C141487 -
           ((C23183 + C23182 + C23181 + C23180 + C23179 + C23178) * C141358 +
            (C310 * C22071 + C309 * C22079 + C308 * C141495 + C307 * C22077 +
             C306 * C141494 + C305 * C22075) *
                C141468) *
               C1596) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[2] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C22075 * C108 + C141494 * C114 + C22077 * C109 +
                      C141495 * C115 + C22079 * C110 + C22071 * C116) *
                         C22172 +
                     (C22075 * C189 + C141494 * C362 + C22077 * C190 +
                      C141495 * C363 + C22079 * C191 + C22071 * C364) *
                         C141468 +
                     (C23306 + C23307 + C23308) * C22173 +
                     (C23309 + C23310 + C23311) * C141358) *
                        C141320 * C1596 -
                    ((C22079 * C3574 + C22071 * C3722 + C22077 * C3573 +
                      C141495 * C3721 + C22075 * C3572 + C141494 * C3720) *
                         C141358 +
                     (C22079 * C3492 + C22071 * C3496 + C22077 * C3491 +
                      C141495 * C3495 + C22075 * C3490 + C141494 * C3494) *
                         C22173 +
                     (C22079 * C1688 + C22071 * C1876 + C22077 * C1689 +
                      C141495 * C1877 + C22075 * C1690 + C141494 * C1878) *
                         C141468 +
                     (C22079 * C1599 + C22071 * C1604 + C22077 * C1600 +
                      C141495 * C1605 + C22075 * C1601 + C141494 * C1606) *
                         C22172) *
                        C141320 * C141487) *
                       C141277 * C818 +
                   (((C22075 * C1600 + C141494 * C1605 + C22077 * C1599 +
                      C141495 * C1604 + C22079 * C1598 + C22071 * C1603) *
                         C22172 +
                     (C22075 * C1689 + C141494 * C1877 + C22077 * C1688 +
                      C141495 * C1876 + C22079 * C1687 + C22071 * C1875) *
                         C141468 +
                     (C22075 * C3491 + C141494 * C3495 + C22077 * C3492 +
                      C141495 * C3496 + C22079 * C3493 + C22071 * C3497) *
                         C22173 +
                     (C22075 * C3573 + C141494 * C3721 + C22077 * C3574 +
                      C141495 * C3722 + C22079 * C3575 + C22071 * C3723) *
                         C141358) *
                        C141320 * C141487 -
                    ((C23317 + C23316 + C23315) * C141358 +
                     (C23314 + C23313 + C23312) * C22173 +
                     (C22079 * C192 + C22071 * C365 + C22077 * C191 +
                      C141495 * C364 + C22075 * C190 + C141494 * C363) *
                         C141468 +
                     (C22079 * C111 + C22071 * C117 + C22077 * C110 +
                      C141495 * C116 + C22075 * C109 + C141494 * C115) *
                         C22172) *
                        C141320 * C1596) *
                       C141277 * C141483)) /
                 (p * q * std::sqrt(p + q));
    d2eeyy[2] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C22434 * C108 + C22437 + C22437 + C141468 * C419 +
                      C22435 * C823 + C22438 + C22438 + C141358 * C1171) *
                         C141494 +
                     (C22471 + C22472) * C141495 + C22477 * C22071) *
                        C141320 * C1596 -
                    ((C24434 + C24435) * C22071 + (C24436 + C24437) * C141495 +
                     (C22435 * C3490 + C24422 + C24422 + C141358 * C3790 +
                      C22434 * C1601 + C24423 + C24423 + C141468 * C1949) *
                         C141494) *
                        C141320 * C141487) *
                       C141277 * C818 +
                   (((C24437 + C24436) * C141494 + (C24435 + C24434) * C141495 +
                     (C22434 * C1598 + C24424 + C24424 + C141468 * C1946 +
                      C22435 * C3493 + C24425 + C24425 + C141358 * C3793) *
                         C22071) *
                        C141320 * C141487 -
                    ((C22475 + C22476) * C22071 + (C22474 + C22473) * C141495 +
                     (C22472 + C22471) * C141494) *
                        C141320 * C1596) *
                       C141277 * C141483)) /
                 (p * q * std::sqrt(p + q));
    d2eeyz[2] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141320 * C276) * C22172 +
             (C275 * C189 + C141320 * C501) * C141468 + C7032 * C22173 +
             C7428 * C141358) *
                C141494 +
            (C22552 + C22553 + C22554 + C22555) * C141495 + C22566 * C22071) *
               C1596 -
           ((C24546 + C24538 + C24539 + C24540) * C22071 +
            (C24541 + C24542 + C24543 + C24544) * C141495 +
            (C11139 * C141358 + C10799 * C22173 +
             (C275 * C1690 + C141320 * C2040) * C141468 +
             (C275 * C1601 + C141320 * C1784) * C22172) *
                C141494) *
               C141487) *
              C141277 * C818 +
          (((C24544 + C24543 + C24542 + C24541) * C141494 +
            (C24540 + C24539 + C24538 + C24546) * C141495 +
            (C1805 * C22172 + C2052 * C141468 +
             (C275 * C3493 + C141320 * C3649) * C22173 +
             (C275 * C3575 + C141320 * C3867) * C141358) *
                C22071) *
               C141487 -
           ((C22560 + C22561 + C22562 + C22563) * C22071 +
            (C22559 + C22558 + C22557 + C22556) * C141495 +
            (C22555 + C22554 + C22553 + C22552) * C141494) *
               C1596) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eezx[2] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C22075 * C108 + C141494 * C114 + C22077 * C109 +
                       C141495 * C115 + C22079 * C110 + C22071 * C116) *
                          C275 +
                      (C22075 * C276 + C141494 * C579 + C22077 * C277 +
                       C141495 * C580 + C22079 * C278 + C22071 * C581) *
                          C141320) *
                         C141468 +
                     ((C23306 + C23307 + C23308) * C275 +
                      (C23660 + C23661 + C23662) * C141320) *
                         C141358) *
                        C1596 -
                    (((C22079 * C3648 + C22071 * C3936 + C22077 * C3647 +
                       C141495 * C3935 + C22075 * C3646 + C141494 * C3934) *
                          C141320 +
                      (C22079 * C3492 + C22071 * C3496 + C22077 * C3491 +
                       C141495 * C3495 + C22075 * C3490 + C141494 * C3494) *
                          C275) *
                         C141358 +
                     ((C22079 * C1782 + C22071 * C2124 + C22077 * C1783 +
                       C141495 * C2125 + C22075 * C1784 + C141494 * C2126) *
                          C141320 +
                      (C22079 * C1599 + C22071 * C1604 + C22077 * C1600 +
                       C141495 * C1605 + C22075 * C1601 + C141494 * C1606) *
                          C275) *
                         C141468) *
                        C141487) *
                       C141277 * C818 +
                   ((((C22075 * C1600 + C141494 * C1605 + C22077 * C1599 +
                       C141495 * C1604 + C22079 * C1598 + C22071 * C1603) *
                          C275 +
                      (C22075 * C1783 + C141494 * C2125 + C22077 * C1782 +
                       C141495 * C2124 + C22079 * C1781 + C22071 * C2123) *
                          C141320) *
                         C141468 +
                     ((C22075 * C3491 + C141494 * C3495 + C22077 * C3492 +
                       C141495 * C3496 + C22079 * C3493 + C22071 * C3497) *
                          C275 +
                      (C22075 * C3647 + C141494 * C3935 + C22077 * C3648 +
                       C141495 * C3936 + C22079 * C3649 + C22071 * C3937) *
                          C141320) *
                         C141358) *
                        C141487 -
                    (((C23665 + C23664 + C23663) * C141320 +
                      (C23314 + C23313 + C23312) * C275) *
                         C141358 +
                     ((C22079 * C279 + C22071 * C582 + C22077 * C278 +
                       C141495 * C581 + C22075 * C277 + C141494 * C580) *
                          C141320 +
                      (C22079 * C111 + C22071 * C117 + C22077 * C110 +
                       C141495 * C116 + C22075 * C109 + C141494 * C115) *
                          C275) *
                         C141468) *
                        C1596) *
                       C141277 * C141483)) /
                 (p * q * std::sqrt(p + q));
    d2eezy[2] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22172 * C108 + C141468 * C189 + C22173 * C823 + C141358 * C912) *
                 C275 +
             (C22172 * C276 + C141468 * C635 + C22173 * C1006 +
              C141358 * C1419) *
                 C141320) *
                C141494 +
            ((C22199 + C22200) * C275 + (C22728 + C22729) * C141320) * C141495 +
            C22736 * C22071) *
               C1596 -
           (((C24751 + C24752) * C141320 + (C24104 + C24105) * C275) * C22071 +
            ((C24753 + C24754) * C141320 + (C24108 + C24109) * C275) * C141495 +
            ((C22173 * C3646 + C141358 * C4004 + C22172 * C1784 +
              C141468 * C2197) *
                 C141320 +
             (C22173 * C3490 + C141358 * C3572 + C22172 * C1601 +
              C141468 * C1690) *
                 C275) *
                C141494) *
               C141487) *
              C141277 * C818 +
          ((((C24109 + C24108) * C275 + (C24754 + C24753) * C141320) * C141494 +
            ((C24105 + C24104) * C275 + (C24752 + C24751) * C141320) * C141495 +
            ((C22172 * C1598 + C141468 * C1687 + C22173 * C3493 +
              C141358 * C3575) *
                 C275 +
             (C22172 * C1781 + C141468 * C2194 + C22173 * C3649 +
              C141358 * C4007) *
                 C141320) *
                C22071) *
               C141487 -
           (((C22732 + C22733) * C141320 + (C22209 + C22210) * C275) * C22071 +
            ((C22731 + C22730) * C141320 + (C22204 + C22203) * C275) * C141495 +
            ((C22729 + C22728) * C141320 + (C22200 + C22199) * C275) *
                C141494) *
               C1596) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eezz[2] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C713 * C108 + C721 + C721 + C141320 * C714) * C141468 +
             C7785 * C141358) *
                C141494 +
            (C22811 + C22812) * C141495 + C22817 * C22071) *
               C1596 -
           ((C24861 + C24855) * C22071 + (C24856 + C24857) * C141495 +
            (C11463 * C141358 +
             (C713 * C1601 + C2295 + C2295 + C141320 * C2283) * C141468) *
                C141494) *
               C141487) *
              C141277 * C818 +
          (((C24857 + C24856) * C141494 + (C24855 + C24861) * C141495 +
            (C2303 * C141468 +
             (C713 * C3493 + C4082 + C4082 + C141320 * C4077) * C141358) *
                C22071) *
               C141487 -
           ((C22815 + C22816) * C22071 + (C22814 + C22813) * C141495 +
            (C22812 + C22811) * C141494) *
               C1596) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eexx[3] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C22074 * C108 + C22081 + C22081 + C141494 * C120 +
                      C22076 * C109 + C22082 + C22082 + C141495 * C121 +
                      C22078 * C110 + C22083 + C22083 + C22071 * C122) *
                         C141320 * C141468 +
                     (C22946 + C22947 + C22948) * C141320 * C141358) *
                        C141294 * C2374 -
                    ((C22078 * C2962 + C22922 + C22922 + C22071 * C2970 +
                      C22076 * C2961 + C22923 + C22923 + C141495 * C2969 +
                      C22074 * C2960 + C22924 + C22924 + C141494 * C2968) *
                         C141320 * C141358 +
                     (C22948 + C22947 + C22946) * C141320 * C141468) *
                        C141294 * C141485) *
                       C2376 +
                   (((C22949 + C22950 + C22951) * C141320 * C141468 +
                     (C22074 * C2961 + C22931 + C22931 + C141494 * C2969 +
                      C22076 * C2962 + C22932 + C22932 + C141495 * C2970 +
                      C22078 * C2963 + C22933 + C22933 + C22071 * C2971) *
                         C141320 * C141358) *
                        C141294 * C141485 -
                    ((C22951 + C22950 + C22949) * C141320 * C141358 +
                     (C22078 * C111 + C22090 + C22090 + C22071 * C123 +
                      C22076 * C110 + C22091 + C22091 + C141495 * C122 +
                      C22074 * C109 + C22092 + C22092 + C141494 * C121) *
                         C141320 * C141468) *
                        C141294 * C2374) *
                       C141483)) /
                 (p * q * std::sqrt(p + q));
    d2eexy[3] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C22172 * C108 + C141468 * C189 + C22173 * C823 + C141358 * C912) *
                C22075 +
            (C22172 * C114 + C141468 * C195 + C22173 * C828 + C141358 * C917) *
                C141494 +
            (C22199 + C22200) * C22077 + (C22201 + C22202) * C141495 +
            C22211 * C22079 + C22212 * C22071) *
               C141320 * C141294 * C2374 -
           ((C23066 + C23067) * C22071 + (C23068 + C23069) * C22079 +
            (C23070 + C23071) * C141495 + (C23072 + C23073) * C22077 +
            (C22173 * C2964 + C141358 * C3030 + C22172 * C828 +
             C141468 * C917) *
                C141494 +
            (C22173 * C2960 + C141358 * C3026 + C22172 * C823 +
             C141468 * C912) *
                C22075) *
               C141320 * C141294 * C141485) *
              C2376 +
          (((C23073 + C23072) * C22075 + (C23071 + C23070) * C141494 +
            (C23069 + C23068) * C22077 + (C23067 + C23066) * C141495 +
            (C22172 * C820 + C141468 * C909 + C22173 * C2963 +
             C141358 * C3029) *
                C22079 +
            (C22172 * C825 + C141468 * C914 + C22173 * C2967 +
             C141358 * C3033) *
                C22071) *
               C141320 * C141294 * C141485 -
           ((C22207 + C22208) * C22071 + (C22209 + C22210) * C22079 +
            (C22206 + C22205) * C141495 + (C22204 + C22203) * C22077 +
            (C22202 + C22201) * C141494 + (C22200 + C22199) * C22075) *
               C141320 * C141294 * C2374) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eexz[3] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141320 * C276) * C22075 +
             (C275 * C114 + C141320 * C282) * C141494 + C305 * C22077 +
             C306 * C141495 + C307 * C22079 + C308 * C22071) *
                C141468 +
            (C23172 + C23173 + C23174 + C23175 + C23176 + C23177) * C141358) *
               C141294 * C2374 -
           ((C6088 * C22071 + C6089 * C22079 + C6087 * C141495 +
             C6086 * C22077 + C7035 * C141494 + C7034 * C22075) *
                C141358 +
            (C23177 + C23176 + C23175 + C23174 + C23173 + C23172) * C141468) *
               C141294 * C141485) *
              C2376 +
          (((C23178 + C23179 + C23180 + C23181 + C23182 + C23183) * C141468 +
            (C6086 * C22075 + C6087 * C141494 + C6089 * C22077 +
             C6088 * C141495 + (C275 * C2963 + C141320 * C3087) * C22079 +
             (C275 * C2967 + C141320 * C3091) * C22071) *
                C141358) *
               C141294 * C141485 -
           ((C23183 + C23182 + C23181 + C23180 + C23179 + C23178) * C141358 +
            (C310 * C22071 + C309 * C22079 + C308 * C141495 + C307 * C22077 +
             C306 * C141494 + C305 * C22075) *
                C141468) *
               C141294 * C2374) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[3] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C22075 * C108 + C141494 * C114 + C22077 * C109 +
                      C141495 * C115 + C22079 * C110 + C22071 * C116) *
                         C22172 +
                     (C22075 * C189 + C141494 * C362 + C22077 * C190 +
                      C141495 * C363 + C22079 * C191 + C22071 * C364) *
                         C141468 +
                     (C23306 + C23307 + C23308) * C22173 +
                     (C23309 + C23310 + C23311) * C141358) *
                        C141320 * C141294 * C2374 -
                    ((C22079 * C3028 + C22071 * C3144 + C22077 * C3027 +
                      C141495 * C3143 + C22075 * C3026 + C141494 * C3142) *
                         C141358 +
                     (C22079 * C2962 + C22071 * C2966 + C22077 * C2961 +
                      C141495 * C2965 + C22075 * C2960 + C141494 * C2964) *
                         C22173 +
                     (C23311 + C23310 + C23309) * C141468 +
                     (C23308 + C23307 + C23306) * C22172) *
                        C141320 * C141294 * C141485) *
                       C2376 +
                   (((C23312 + C23313 + C23314) * C22172 +
                     (C23315 + C23316 + C23317) * C141468 +
                     (C22075 * C2961 + C141494 * C2965 + C22077 * C2962 +
                      C141495 * C2966 + C22079 * C2963 + C22071 * C2967) *
                         C22173 +
                     (C22075 * C3027 + C141494 * C3143 + C22077 * C3028 +
                      C141495 * C3144 + C22079 * C3029 + C22071 * C3145) *
                         C141358) *
                        C141320 * C141294 * C141485 -
                    ((C23317 + C23316 + C23315) * C141358 +
                     (C23314 + C23313 + C23312) * C22173 +
                     (C22079 * C192 + C22071 * C365 + C22077 * C191 +
                      C141495 * C364 + C22075 * C190 + C141494 * C363) *
                         C141468 +
                     (C22079 * C111 + C22071 * C117 + C22077 * C110 +
                      C141495 * C116 + C22075 * C109 + C141494 * C115) *
                         C22172) *
                        C141320 * C141294 * C2374) *
                       C141483)) /
                 (p * q * std::sqrt(p + q));
    d2eeyy[3] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C22434 * C108 + C22437 + C22437 + C141468 * C419 +
                      C22435 * C823 + C22438 + C22438 + C141358 * C1171) *
                         C141494 +
                     (C22471 + C22472) * C141495 + C22477 * C22071) *
                        C141320 * C141294 * C2374 -
                    ((C23440 + C23441) * C22071 + (C23442 + C23443) * C141495 +
                     (C22435 * C2960 + C23428 + C23428 + C141358 * C3196 +
                      C22434 * C823 + C23429 + C23429 + C141468 * C1171) *
                         C141494) *
                        C141320 * C141294 * C141485) *
                       C2376 +
                   (((C23443 + C23442) * C141494 + (C23441 + C23440) * C141495 +
                     (C22434 * C820 + C23430 + C23430 + C141468 * C1168 +
                      C22435 * C2963 + C23431 + C23431 + C141358 * C3199) *
                         C22071) *
                        C141320 * C141294 * C141485 -
                    ((C22475 + C22476) * C22071 + (C22474 + C22473) * C141495 +
                     (C22472 + C22471) * C141494) *
                        C141320 * C141294 * C2374) *
                       C141483)) /
                 (p * q * std::sqrt(p + q));
    d2eeyz[3] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141320 * C276) * C22172 +
             (C275 * C189 + C141320 * C501) * C141468 + C7032 * C22173 +
             C7428 * C141358) *
                C141494 +
            (C22552 + C22553 + C22554 + C22555) * C141495 + C22566 * C22071) *
               C141294 * C2374 -
           ((C23542 + C23543 + C23544 + C23545) * C22071 +
            (C23546 + C23547 + C23548 + C23549) * C141495 +
            (C7429 * C141358 + C7034 * C22173 + C7428 * C141468 +
             C7032 * C22172) *
                C141494) *
               C141294 * C141485) *
              C2376 +
          (((C23549 + C23548 + C23547 + C23546) * C141494 +
            (C23545 + C23544 + C23543 + C23542) * C141495 +
            (C1027 * C22172 + C1274 * C141468 +
             (C275 * C2963 + C141320 * C3087) * C22173 +
             (C275 * C3029 + C141320 * C3257) * C141358) *
                C22071) *
               C141294 * C141485 -
           ((C22560 + C22561 + C22562 + C22563) * C22071 +
            (C22559 + C22558 + C22557 + C22556) * C141495 +
            (C22555 + C22554 + C22553 + C22552) * C141494) *
               C141294 * C2374) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eezx[3] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C22075 * C108 + C141494 * C114 + C22077 * C109 +
                       C141495 * C115 + C22079 * C110 + C22071 * C116) *
                          C275 +
                      (C22075 * C276 + C141494 * C579 + C22077 * C277 +
                       C141495 * C580 + C22079 * C278 + C22071 * C581) *
                          C141320) *
                         C141468 +
                     ((C23306 + C23307 + C23308) * C275 +
                      (C23660 + C23661 + C23662) * C141320) *
                         C141358) *
                        C141294 * C2374 -
                    (((C22079 * C3086 + C22071 * C3310 + C22077 * C3085 +
                       C141495 * C3309 + C22075 * C3084 + C141494 * C3308) *
                          C141320 +
                      (C22079 * C2962 + C22071 * C2966 + C22077 * C2961 +
                       C141495 * C2965 + C22075 * C2960 + C141494 * C2964) *
                          C275) *
                         C141358 +
                     ((C23662 + C23661 + C23660) * C141320 +
                      (C23308 + C23307 + C23306) * C275) *
                         C141468) *
                        C141294 * C141485) *
                       C2376 +
                   ((((C23312 + C23313 + C23314) * C275 +
                      (C23663 + C23664 + C23665) * C141320) *
                         C141468 +
                     ((C22075 * C2961 + C141494 * C2965 + C22077 * C2962 +
                       C141495 * C2966 + C22079 * C2963 + C22071 * C2967) *
                          C275 +
                      (C22075 * C3085 + C141494 * C3309 + C22077 * C3086 +
                       C141495 * C3310 + C22079 * C3087 + C22071 * C3311) *
                          C141320) *
                         C141358) *
                        C141294 * C141485 -
                    (((C23665 + C23664 + C23663) * C141320 +
                      (C23314 + C23313 + C23312) * C275) *
                         C141358 +
                     ((C22079 * C279 + C22071 * C582 + C22077 * C278 +
                       C141495 * C581 + C22075 * C277 + C141494 * C580) *
                          C141320 +
                      (C22079 * C111 + C22071 * C117 + C22077 * C110 +
                       C141495 * C116 + C22075 * C109 + C141494 * C115) *
                          C275) *
                         C141468) *
                        C141294 * C2374) *
                       C141483)) /
                 (p * q * std::sqrt(p + q));
    d2eezy[3] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22172 * C108 + C141468 * C189 + C22173 * C823 + C141358 * C912) *
                 C275 +
             (C22172 * C276 + C141468 * C635 + C22173 * C1006 +
              C141358 * C1419) *
                 C141320) *
                C141494 +
            ((C22199 + C22200) * C275 + (C22728 + C22729) * C141320) * C141495 +
            C22736 * C22071) *
               C141294 * C2374 -
           (((C23772 + C23773) * C141320 + (C23068 + C23069) * C275) * C22071 +
            ((C23774 + C23775) * C141320 + (C23072 + C23073) * C275) * C141495 +
            ((C22173 * C3084 + C141358 * C3362 + C22172 * C1006 +
              C141468 * C1419) *
                 C141320 +
             (C22173 * C2960 + C141358 * C3026 + C22172 * C823 +
              C141468 * C912) *
                 C275) *
                C141494) *
               C141294 * C141485) *
              C2376 +
          ((((C23073 + C23072) * C275 + (C23775 + C23774) * C141320) * C141494 +
            ((C23069 + C23068) * C275 + (C23773 + C23772) * C141320) * C141495 +
            ((C22172 * C820 + C141468 * C909 + C22173 * C2963 +
              C141358 * C3029) *
                 C275 +
             (C22172 * C1003 + C141468 * C1416 + C22173 * C3087 +
              C141358 * C3365) *
                 C141320) *
                C22071) *
               C141294 * C141485 -
           (((C22732 + C22733) * C141320 + (C22209 + C22210) * C275) * C22071 +
            ((C22731 + C22730) * C141320 + (C22204 + C22203) * C275) * C141495 +
            ((C22729 + C22728) * C141320 + (C22200 + C22199) * C275) *
                C141494) *
               C141294 * C2374) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eezz[3] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C713 * C108 + C721 + C721 + C141320 * C714) * C141468 +
             C7785 * C141358) *
                C141494 +
            (C22811 + C22812) * C141495 + C22817 * C22071) *
               C141294 * C2374 -
           ((C23874 + C23875) * C22071 + (C23876 + C23877) * C141495 +
            (C7786 * C141358 + C7785 * C141468) * C141494) *
               C141294 * C141485) *
              C2376 +
          (((C23877 + C23876) * C141494 + (C23875 + C23874) * C141495 +
            (C1525 * C141468 +
             (C713 * C2963 + C3424 + C3424 + C141320 * C3419) * C141358) *
                C22071) *
               C141294 * C141485 -
           ((C22815 + C22816) * C22071 + (C22814 + C22813) * C141495 +
            (C22812 + C22811) * C141494) *
               C141294 * C2374) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eexx[4] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((C22074 * C108 + C22081 + C22081 + C141494 * C120 +
                     C22076 * C109 + C22082 + C22082 + C141495 * C121 +
                     C22078 * C110 + C22083 + C22083 + C22071 * C122) *
                        C141320 * C141468 +
                    (C22946 + C22947 + C22948) * C141320 * C141358) *
                       C141294 * C2956 -
                   ((C25833 + C25834 + C25835) * C141320 * C141358 +
                    (C22948 + C22947 + C22946) * C141320 * C141468) *
                       C141294 * C2957 +
                   ((C25835 + C25834 + C25833) * C141320 * C141468 +
                    (C22074 * C6729 + C25824 + C25824 + C141494 * C6735 +
                     C22076 * C6728 + C25825 + C25825 + C141495 * C6734 +
                     C22078 * C6730 + C25826 + C25826 + C22071 * C6736) *
                        C141320 * C141358) *
                       C141294 * C2958) *
                  C141243) /
                 (p * q * std::sqrt(p + q));
    d2eexy[4] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C22172 * C108 + C141468 * C189 + C22173 * C823 + C141358 * C912) *
               C22075 +
           (C22172 * C114 + C141468 * C195 + C22173 * C828 + C141358 * C917) *
               C141494 +
           (C22199 + C22200) * C22077 + (C22201 + C22202) * C141495 +
           C22211 * C22079 + C22212 * C22071) *
              C141320 * C141294 * C2956 -
          ((C23066 + C23067) * C22071 + (C23068 + C23069) * C22079 +
           (C23070 + C23071) * C141495 + (C23072 + C23073) * C22077 +
           (C22173 * C2964 + C141358 * C3030 + C22172 * C828 + C141468 * C917) *
               C141494 +
           (C22173 * C2960 + C141358 * C3026 + C22172 * C823 + C141468 * C912) *
               C22075) *
              C141320 * C141294 * C2957 +
          ((C22172 * C2960 + C141468 * C3026 + C22173 * C6729 +
            C141358 * C6880) *
               C22075 +
           (C22172 * C2964 + C141468 * C3030 + C22173 * C6732 +
            C141358 * C6883) *
               C141494 +
           (C22172 * C2961 + C141468 * C3027 + C22173 * C6728 +
            C141358 * C6879) *
               C22077 +
           (C22172 * C2965 + C141468 * C3031 + C22173 * C6731 +
            C141358 * C6882) *
               C141495 +
           (C22172 * C2962 + C141468 * C3028 + C22173 * C6730 +
            C141358 * C6881) *
               C22079 +
           (C22172 * C2966 + C141468 * C3032 + C22173 * C6733 +
            C141358 * C6884) *
               C22071) *
              C141320 * C141294 * C2958) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eexz[4] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141320 * C276) * C22075 +
            (C275 * C114 + C141320 * C282) * C141494 + C305 * C22077 +
            C306 * C141495 + C307 * C22079 + C308 * C22071) *
               C141468 +
           (C23172 + C23173 + C23174 + C23175 + C23176 + C23177) * C141358) *
              C141294 * C2956 -
          ((C25984 + C25985 + C25986 + C25987 + C25988 + C25989) * C141358 +
           (C23177 + C23176 + C23175 + C23174 + C23173 + C23172) * C141468) *
              C141294 * C2957 +
          ((C25989 + C25988 + C25987 + C25986 + C25985 + C25984) * C141468 +
           (C9954 * C22075 + C9953 * C141494 + C7037 * C22077 +
            C7036 * C141495 + (C275 * C6730 + C141320 * C7003) * C22079 +
            (C275 * C6733 + C141320 * C7006) * C22071) *
               C141358) *
              C141294 * C2958) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eeyx[4] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((C22075 * C108 + C141494 * C114 + C22077 * C109 +
                     C141495 * C115 + C22079 * C110 + C22071 * C116) *
                        C22172 +
                    (C22075 * C189 + C141494 * C362 + C22077 * C190 +
                     C141495 * C363 + C22079 * C191 + C22071 * C364) *
                        C141468 +
                    (C23306 + C23307 + C23308) * C22173 +
                    (C23309 + C23310 + C23311) * C141358) *
                       C141320 * C141294 * C2956 -
                   ((C26076 + C26077 + C26078) * C141358 +
                    (C26079 + C26080 + C26081) * C22173 +
                    (C23311 + C23310 + C23309) * C141468 +
                    (C23308 + C23307 + C23306) * C22172) *
                       C141320 * C141294 * C2957 +
                   ((C26081 + C26080 + C26079) * C22172 +
                    (C26078 + C26077 + C26076) * C141468 +
                    (C22075 * C6729 + C141494 * C6732 + C22077 * C6728 +
                     C141495 * C6731 + C22079 * C6730 + C22071 * C6733) *
                        C22173 +
                    (C22075 * C6880 + C141494 * C7140 + C22077 * C6879 +
                     C141495 * C7139 + C22079 * C6881 + C22071 * C7141) *
                        C141358) *
                       C141320 * C141294 * C2958) *
                  C141243) /
                 (p * q * std::sqrt(p + q));
    d2eeyy[4] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((C22434 * C108 + C22437 + C22437 + C141468 * C419 +
                     C22435 * C823 + C22438 + C22438 + C141358 * C1171) *
                        C141494 +
                    (C22471 + C22472) * C141495 + C22477 * C22071) *
                       C141320 * C141294 * C2956 -
                   ((C23440 + C23441) * C22071 + (C23442 + C23443) * C141495 +
                    (C22435 * C2960 + C23428 + C23428 + C141358 * C3196 +
                     C22434 * C823 + C23429 + C23429 + C141468 * C1171) *
                        C141494) *
                       C141320 * C141294 * C2957 +
                   ((C22434 * C2960 + C26156 + C26156 + C141468 * C3196 +
                     C22435 * C6729 + C26157 + C26157 + C141358 * C7289) *
                        C141494 +
                    (C22434 * C2961 + C26158 + C26158 + C141468 * C3197 +
                     C22435 * C6728 + C26159 + C26159 + C141358 * C7288) *
                        C141495 +
                    (C22434 * C2962 + C26160 + C26160 + C141468 * C3198 +
                     C22435 * C6730 + C26161 + C26161 + C141358 * C7290) *
                        C22071) *
                       C141320 * C141294 * C2958) *
                  C141243) /
                 (p * q * std::sqrt(p + q));
    d2eeyz[4] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141320 * C276) * C22172 +
            (C275 * C189 + C141320 * C501) * C141468 + C7032 * C22173 +
            C7428 * C141358) *
               C141494 +
           (C22552 + C22553 + C22554 + C22555) * C141495 + C22566 * C22071) *
              C141294 * C2956 -
          ((C23542 + C23543 + C23544 + C23545) * C22071 +
           (C23546 + C23547 + C23548 + C23549) * C141495 +
           (C7429 * C141358 + C7034 * C22173 + C7428 * C141468 +
            C7032 * C22172) *
               C141494) *
              C141294 * C2957 +
          ((C7034 * C22172 + C7429 * C141468 + C9954 * C22173 +
            C10208 * C141358) *
               C141494 +
           (C6086 * C22172 + C6371 * C141468 + C7037 * C22173 +
            C7430 * C141358) *
               C141495 +
           (C6089 * C22172 + C6372 * C141468 +
            (C275 * C6730 + C141320 * C7003) * C22173 +
            (C275 * C6881 + C141320 * C7415) * C141358) *
               C22071) *
              C141294 * C2958) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eezx[4] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C22075 * C108 + C141494 * C114 + C22077 * C109 +
                      C141495 * C115 + C22079 * C110 + C22071 * C116) *
                         C275 +
                     (C22075 * C276 + C141494 * C579 + C22077 * C277 +
                      C141495 * C580 + C22079 * C278 + C22071 * C581) *
                         C141320) *
                        C141468 +
                    ((C23306 + C23307 + C23308) * C275 +
                     (C23660 + C23661 + C23662) * C141320) *
                        C141358) *
                       C141294 * C2956 -
                   (((C26316 + C26317 + C26318) * C141320 +
                     (C26079 + C26080 + C26081) * C275) *
                        C141358 +
                    ((C23662 + C23661 + C23660) * C141320 +
                     (C23308 + C23307 + C23306) * C275) *
                        C141468) *
                       C141294 * C2957 +
                   (((C26081 + C26080 + C26079) * C275 +
                     (C26318 + C26317 + C26316) * C141320) *
                        C141468 +
                    ((C22075 * C6729 + C141494 * C6732 + C22077 * C6728 +
                      C141495 * C6731 + C22079 * C6730 + C22071 * C6733) *
                         C275 +
                     (C22075 * C7002 + C141494 * C7530 + C22077 * C7001 +
                      C141495 * C7529 + C22079 * C7003 + C22071 * C7531) *
                         C141320) *
                        C141358) *
                       C141294 * C2958) *
                  C141243) /
                 (p * q * std::sqrt(p + q));
    d2eezy[4] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C22172 * C108 + C141468 * C189 + C22173 * C823 + C141358 * C912) *
                C275 +
            (C22172 * C276 + C141468 * C635 + C22173 * C1006 +
             C141358 * C1419) *
                C141320) *
               C141494 +
           ((C22199 + C22200) * C275 + (C22728 + C22729) * C141320) * C141495 +
           C22736 * C22071) *
              C141294 * C2956 -
          (((C23772 + C23773) * C141320 + (C23068 + C23069) * C275) * C22071 +
           ((C23774 + C23775) * C141320 + (C23072 + C23073) * C275) * C141495 +
           ((C22173 * C3084 + C141358 * C3362 + C22172 * C1006 +
             C141468 * C1419) *
                C141320 +
            (C22173 * C2960 + C141358 * C3026 + C22172 * C823 +
             C141468 * C912) *
                C275) *
               C141494) *
              C141294 * C2957 +
          (((C22172 * C2960 + C141468 * C3026 + C22173 * C6729 +
             C141358 * C6880) *
                C275 +
            (C22172 * C3084 + C141468 * C3362 + C22173 * C7002 +
             C141358 * C7655) *
                C141320) *
               C141494 +
           ((C22172 * C2961 + C141468 * C3027 + C22173 * C6728 +
             C141358 * C6879) *
                C275 +
            (C22172 * C3085 + C141468 * C3363 + C22173 * C7001 +
             C141358 * C7654) *
                C141320) *
               C141495 +
           ((C22172 * C2962 + C141468 * C3028 + C22173 * C6730 +
             C141358 * C6881) *
                C275 +
            (C22172 * C3086 + C141468 * C3364 + C22173 * C7003 +
             C141358 * C7656) *
                C141320) *
               C22071) *
              C141294 * C2958) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eezz[4] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C141320 * C714) * C141468 +
            C7785 * C141358) *
               C141494 +
           (C22811 + C22812) * C141495 + C22817 * C22071) *
              C141294 * C2956 -
          ((C23874 + C23875) * C22071 + (C23876 + C23877) * C141495 +
           (C7786 * C141358 + C7785 * C141468) * C141494) *
              C141294 * C2957 +
          ((C7786 * C141468 + C10453 * C141358) * C141494 +
           (C6627 * C141468 + C7787 * C141358) * C141495 +
           (C6628 * C141468 +
            (C713 * C6730 + C7778 + C7778 + C141320 * C7766) * C141358) *
               C22071) *
              C141294 * C2958) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eexx[5] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C22074 * C108 + C22081 + C22081 + C141494 * C120 +
                      C22076 * C109 + C22082 + C22082 + C141495 * C121 +
                      C22078 * C110 + C22083 + C22083 + C22071 * C122) *
                         C141320 * C141468 +
                     (C22946 + C22947 + C22948) * C141320 * C141358) *
                        C1596 -
                    ((C26580 + C26581 + C26582) * C141320 * C141358 +
                     (C22078 * C1599 + C23979 + C23979 + C22071 * C1609 +
                      C22076 * C1600 + C23980 + C23980 + C141495 * C1610 +
                      C22074 * C1601 + C23981 + C23981 + C141494 * C1611) *
                         C141320 * C141468) *
                        C141487) *
                       C2374 +
                   (((C26582 + C26581 + C26580) * C141320 * C141468 +
                     (C22074 * C7887 + C26571 + C26571 + C141494 * C7893 +
                      C22076 * C7886 + C26572 + C26572 + C141495 * C7892 +
                      C22078 * C7888 + C26573 + C26573 + C22071 * C7894) *
                         C141320 * C141358) *
                        C141487 -
                    ((C25833 + C25834 + C25835) * C141320 * C141358 +
                     (C22948 + C22947 + C22946) * C141320 * C141468) *
                        C1596) *
                       C141485) *
                  C141243) /
                 (p * q * std::sqrt(p + q));
    d2eexy[5] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C22172 * C108 + C141468 * C189 + C22173 * C823 + C141358 * C912) *
                C22075 +
            (C22172 * C114 + C141468 * C195 + C22173 * C828 + C141358 * C917) *
                C141494 +
            (C22199 + C22200) * C22077 + (C22201 + C22202) * C141495 +
            C22211 * C22079 + C22212 * C22071) *
               C141320 * C1596 -
           ((C24102 + C24103) * C22071 + (C24104 + C24105) * C22079 +
            (C24106 + C24107) * C141495 + (C24108 + C24109) * C22077 +
            (C22173 * C3494 + C141358 * C3576 + C22172 * C1606 +
             C141468 * C1695) *
                C141494 +
            (C22173 * C3490 + C141358 * C3572 + C22172 * C1601 +
             C141468 * C1690) *
                C22075) *
               C141320 * C141487) *
              C2374 +
          (((C22172 * C3490 + C141468 * C3572 + C22173 * C7887 +
             C141358 * C8006) *
                C22075 +
            (C22172 * C3494 + C141468 * C3576 + C22173 * C7890 +
             C141358 * C8009) *
                C141494 +
            (C22172 * C3491 + C141468 * C3573 + C22173 * C7886 +
             C141358 * C8005) *
                C22077 +
            (C22172 * C3495 + C141468 * C3577 + C22173 * C7889 +
             C141358 * C8008) *
                C141495 +
            (C22172 * C3492 + C141468 * C3574 + C22173 * C7888 +
             C141358 * C8007) *
                C22079 +
            (C22172 * C3496 + C141468 * C3578 + C22173 * C7891 +
             C141358 * C8010) *
                C22071) *
               C141320 * C141487 -
           ((C23066 + C23067) * C22071 + (C23068 + C23069) * C22079 +
            (C23070 + C23071) * C141495 + (C23072 + C23073) * C22077 +
            (C22173 * C2964 + C141358 * C3030 + C22172 * C828 +
             C141468 * C917) *
                C141494 +
            (C22173 * C2960 + C141358 * C3026 + C22172 * C823 +
             C141468 * C912) *
                C22075) *
               C141320 * C1596) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eexz[5] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141320 * C276) * C22075 +
             (C275 * C114 + C141320 * C282) * C141494 + C305 * C22077 +
             C306 * C141495 + C307 * C22079 + C308 * C22071) *
                C141468 +
            (C23172 + C23173 + C23174 + C23175 + C23176 + C23177) * C141358) *
               C1596 -
           ((C26779 + C26780 + C26781 + C26782 + C26783 + C26784) * C141358 +
            (C1806 * C22071 + C1807 * C22079 + C1808 * C141495 +
             C1809 * C22077 + (C275 * C1606 + C141320 * C1789) * C141494 +
             (C275 * C1601 + C141320 * C1784) * C22075) *
                C141468) *
               C141487) *
              C2374 +
          (((C26784 + C26783 + C26782 + C26781 + C26780 + C26779) * C141468 +
            (C10797 * C22075 + C10796 * C141494 + C8143 * C22077 +
             C8142 * C141495 + (C275 * C7888 + C141320 * C8129) * C22079 +
             (C275 * C7891 + C141320 * C8132) * C22071) *
                C141358) *
               C141487 -
           ((C25984 + C25985 + C25986 + C25987 + C25988 + C25989) * C141358 +
            (C23177 + C23176 + C23175 + C23174 + C23173 + C23172) * C141468) *
               C1596) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eeyx[5] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C22075 * C108 + C141494 * C114 + C22077 * C109 +
                      C141495 * C115 + C22079 * C110 + C22071 * C116) *
                         C22172 +
                     (C22075 * C189 + C141494 * C362 + C22077 * C190 +
                      C141495 * C363 + C22079 * C191 + C22071 * C364) *
                         C141468 +
                     (C23306 + C23307 + C23308) * C22173 +
                     (C23309 + C23310 + C23311) * C141358) *
                        C141320 * C1596 -
                    ((C26895 + C26896 + C26897) * C141358 +
                     (C26898 + C26899 + C26900) * C22173 +
                     (C22079 * C1688 + C22071 * C1876 + C22077 * C1689 +
                      C141495 * C1877 + C22075 * C1690 + C141494 * C1878) *
                         C141468 +
                     (C22079 * C1599 + C22071 * C1604 + C22077 * C1600 +
                      C141495 * C1605 + C22075 * C1601 + C141494 * C1606) *
                         C22172) *
                        C141320 * C141487) *
                       C2374 +
                   (((C26900 + C26899 + C26898) * C22172 +
                     (C26897 + C26896 + C26895) * C141468 +
                     (C22075 * C7887 + C141494 * C7890 + C22077 * C7886 +
                      C141495 * C7889 + C22079 * C7888 + C22071 * C7891) *
                         C22173 +
                     (C22075 * C8006 + C141494 * C8244 + C22077 * C8005 +
                      C141495 * C8243 + C22079 * C8007 + C22071 * C8245) *
                         C141358) *
                        C141320 * C141487 -
                    ((C26076 + C26077 + C26078) * C141358 +
                     (C26079 + C26080 + C26081) * C22173 +
                     (C23311 + C23310 + C23309) * C141468 +
                     (C23308 + C23307 + C23306) * C22172) *
                        C141320 * C1596) *
                       C141485) *
                  C141243) /
                 (p * q * std::sqrt(p + q));
    d2eeyy[5] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C22434 * C108 + C22437 + C22437 + C141468 * C419 +
                      C22435 * C823 + C22438 + C22438 + C141358 * C1171) *
                         C141494 +
                     (C22471 + C22472) * C141495 + C22477 * C22071) *
                        C141320 * C1596 -
                    ((C24434 + C24435) * C22071 + (C24436 + C24437) * C141495 +
                     (C22435 * C3490 + C24422 + C24422 + C141358 * C3790 +
                      C22434 * C1601 + C24423 + C24423 + C141468 * C1949) *
                         C141494) *
                        C141320 * C141487) *
                       C2374 +
                   (((C22434 * C3490 + C26999 + C26999 + C141468 * C3790 +
                      C22435 * C7887 + C27000 + C27000 + C141358 * C8345) *
                         C141494 +
                     (C22434 * C3491 + C27001 + C27001 + C141468 * C3791 +
                      C22435 * C7886 + C27002 + C27002 + C141358 * C8344) *
                         C141495 +
                     (C22434 * C3492 + C27003 + C27003 + C141468 * C3792 +
                      C22435 * C7888 + C27004 + C27004 + C141358 * C8346) *
                         C22071) *
                        C141320 * C141487 -
                    ((C23440 + C23441) * C22071 + (C23442 + C23443) * C141495 +
                     (C22435 * C2960 + C23428 + C23428 + C141358 * C3196 +
                      C22434 * C823 + C23429 + C23429 + C141468 * C1171) *
                         C141494) *
                        C141320 * C1596) *
                       C141485) *
                  C141243) /
                 (p * q * std::sqrt(p + q));
    d2eeyz[5] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141320 * C276) * C22172 +
             (C275 * C189 + C141320 * C501) * C141468 + C7032 * C22173 +
             C7428 * C141358) *
                C141494 +
            (C22552 + C22553 + C22554 + C22555) * C141495 + C22566 * C22071) *
               C1596 -
           ((C24546 + C24538 + C24539 + C24540) * C22071 +
            (C24541 + C24542 + C24543 + C24544) * C141495 +
            (C11139 * C141358 + C10799 * C22173 +
             (C275 * C1690 + C141320 * C2040) * C141468 +
             (C275 * C1601 + C141320 * C1784) * C22172) *
                C141494) *
               C141487) *
              C2374 +
          (((C10799 * C22172 + C11139 * C141468 + C10797 * C22173 +
             C11138 * C141358) *
                C141494 +
            (C8145 * C22172 + C8482 * C141468 + C8143 * C22173 +
             C8481 * C141358) *
                C141495 +
            (C24213 * C22172 + C24545 * C141468 +
             (C275 * C7888 + C141320 * C8129) * C22173 +
             (C275 * C8007 + C141320 * C8471) * C141358) *
                C22071) *
               C141487 -
           ((C23542 + C23543 + C23544 + C23545) * C22071 +
            (C23546 + C23547 + C23548 + C23549) * C141495 +
            (C7429 * C141358 + C7034 * C22173 + C7428 * C141468 +
             C7032 * C22172) *
                C141494) *
               C1596) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eezx[5] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C22075 * C108 + C141494 * C114 + C22077 * C109 +
                       C141495 * C115 + C22079 * C110 + C22071 * C116) *
                          C275 +
                      (C22075 * C276 + C141494 * C579 + C22077 * C277 +
                       C141495 * C580 + C22079 * C278 + C22071 * C581) *
                          C141320) *
                         C141468 +
                     ((C23306 + C23307 + C23308) * C275 +
                      (C23660 + C23661 + C23662) * C141320) *
                         C141358) *
                        C1596 -
                    (((C27207 + C27208 + C27209) * C141320 +
                      (C26898 + C26899 + C26900) * C275) *
                         C141358 +
                     ((C22079 * C1782 + C22071 * C2124 + C22077 * C1783 +
                       C141495 * C2125 + C22075 * C1784 + C141494 * C2126) *
                          C141320 +
                      (C22079 * C1599 + C22071 * C1604 + C22077 * C1600 +
                       C141495 * C1605 + C22075 * C1601 + C141494 * C1606) *
                          C275) *
                         C141468) *
                        C141487) *
                       C2374 +
                   ((((C26900 + C26899 + C26898) * C275 +
                      (C27209 + C27208 + C27207) * C141320) *
                         C141468 +
                     ((C22075 * C7887 + C141494 * C7890 + C22077 * C7886 +
                       C141495 * C7889 + C22079 * C7888 + C22071 * C7891) *
                          C275 +
                      (C22075 * C8128 + C141494 * C8583 + C22077 * C8127 +
                       C141495 * C8582 + C22079 * C8129 + C22071 * C8584) *
                          C141320) *
                         C141358) *
                        C141487 -
                    (((C26316 + C26317 + C26318) * C141320 +
                      (C26079 + C26080 + C26081) * C275) *
                         C141358 +
                     ((C23662 + C23661 + C23660) * C141320 +
                      (C23308 + C23307 + C23306) * C275) *
                         C141468) *
                        C1596) *
                       C141485) *
                  C141243) /
                 (p * q * std::sqrt(p + q));
    d2eezy[5] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22172 * C108 + C141468 * C189 + C22173 * C823 + C141358 * C912) *
                 C275 +
             (C22172 * C276 + C141468 * C635 + C22173 * C1006 +
              C141358 * C1419) *
                 C141320) *
                C141494 +
            ((C22199 + C22200) * C275 + (C22728 + C22729) * C141320) * C141495 +
            C22736 * C22071) *
               C1596 -
           (((C24751 + C24752) * C141320 + (C24104 + C24105) * C275) * C22071 +
            ((C24753 + C24754) * C141320 + (C24108 + C24109) * C275) * C141495 +
            ((C22173 * C3646 + C141358 * C4004 + C22172 * C1784 +
              C141468 * C2197) *
                 C141320 +
             (C22173 * C3490 + C141358 * C3572 + C22172 * C1601 +
              C141468 * C1690) *
                 C275) *
                C141494) *
               C141487) *
              C2374 +
          ((((C22172 * C3490 + C141468 * C3572 + C22173 * C7887 +
              C141358 * C8006) *
                 C275 +
             (C22172 * C3646 + C141468 * C4004 + C22173 * C8128 +
              C141358 * C8684) *
                 C141320) *
                C141494 +
            ((C22172 * C3491 + C141468 * C3573 + C22173 * C7886 +
              C141358 * C8005) *
                 C275 +
             (C22172 * C3647 + C141468 * C4005 + C22173 * C8127 +
              C141358 * C8683) *
                 C141320) *
                C141495 +
            ((C22172 * C3492 + C141468 * C3574 + C22173 * C7888 +
              C141358 * C8007) *
                 C275 +
             (C22172 * C3648 + C141468 * C4006 + C22173 * C8129 +
              C141358 * C8685) *
                 C141320) *
                C22071) *
               C141487 -
           (((C23772 + C23773) * C141320 + (C23068 + C23069) * C275) * C22071 +
            ((C23774 + C23775) * C141320 + (C23072 + C23073) * C275) * C141495 +
            ((C22173 * C3084 + C141358 * C3362 + C22172 * C1006 +
              C141468 * C1419) *
                 C141320 +
             (C22173 * C2960 + C141358 * C3026 + C22172 * C823 +
              C141468 * C912) *
                 C275) *
                C141494) *
               C1596) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eezz[5] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C713 * C108 + C721 + C721 + C141320 * C714) * C141468 +
             C7785 * C141358) *
                C141494 +
            (C22811 + C22812) * C141495 + C22817 * C22071) *
               C1596 -
           ((C24861 + C24855) * C22071 + (C24856 + C24857) * C141495 +
            (C11463 * C141358 +
             (C713 * C1601 + C2295 + C2295 + C141320 * C2283) * C141468) *
                C141494) *
               C141487) *
              C2374 +
          (((C11463 * C141468 + C11462 * C141358) * C141494 +
            (C8810 * C141468 + C8809 * C141358) * C141495 +
            (C24860 * C141468 +
             (C713 * C7888 + C8804 + C8804 + C141320 * C8795) * C141358) *
                C22071) *
               C141487 -
           ((C23874 + C23875) * C22071 + (C23876 + C23877) * C141495 +
            (C7786 * C141358 + C7785 * C141468) * C141494) *
               C1596) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eexx[6] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C22074 * C108 + C22081 + C22081 + C141494 * C120 +
                      C22076 * C109 + C22082 + C22082 + C141495 * C121 +
                      C22078 * C110 + C22083 + C22083 + C22071 * C122) *
                         C141320 * C141468 +
                     (C22946 + C22947 + C22948) * C141320 * C141358) *
                        C4148 -
                    ((C26580 + C26581 + C26582) * C141320 * C141358 +
                     (C22078 * C1599 + C23979 + C23979 + C22071 * C1609 +
                      C22076 * C1600 + C23980 + C23980 + C141495 * C1610 +
                      C22074 * C1601 + C23981 + C23981 + C141494 * C1611) *
                         C141320 * C141468) *
                        C141487) *
                       C141277 * C2376 +
                   (((C22074 * C1600 + C23982 + C23982 + C141494 * C1610 +
                      C22076 * C1599 + C23983 + C23983 + C141495 * C1609 +
                      C22078 * C1598 + C23984 + C23984 + C22071 * C1608) *
                         C141320 * C141468 +
                     (C22074 * C3491 + C23985 + C23985 + C141494 * C3499 +
                      C22076 * C3492 + C23986 + C23986 + C141495 * C3500 +
                      C22078 * C3493 + C23987 + C23987 + C22071 * C3501) *
                         C141320 * C141358) *
                        C141487 -
                    ((C22951 + C22950 + C22949) * C141320 * C141358 +
                     (C22078 * C111 + C22090 + C22090 + C22071 * C123 +
                      C22076 * C110 + C22091 + C22091 + C141495 * C122 +
                      C22074 * C109 + C22092 + C22092 + C141494 * C121) *
                         C141320 * C141468) *
                        C4148) *
                       C141277 * C141483)) /
                 (p * q * std::sqrt(p + q));
    d2eexy[6] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C22172 * C108 + C141468 * C189 + C22173 * C823 + C141358 * C912) *
                C22075 +
            (C22172 * C114 + C141468 * C195 + C22173 * C828 + C141358 * C917) *
                C141494 +
            (C22199 + C22200) * C22077 + (C22201 + C22202) * C141495 +
            C22211 * C22079 + C22212 * C22071) *
               C141320 * C4148 -
           ((C24102 + C24103) * C22071 + (C24104 + C24105) * C22079 +
            (C24106 + C24107) * C141495 + (C24108 + C24109) * C22077 +
            (C22173 * C3494 + C141358 * C3576 + C22172 * C1606 +
             C141468 * C1695) *
                C141494 +
            (C22173 * C3490 + C141358 * C3572 + C22172 * C1601 +
             C141468 * C1690) *
                C22075) *
               C141320 * C141487) *
              C141277 * C2376 +
          (((C24109 + C24108) * C22075 + (C24107 + C24106) * C141494 +
            (C24105 + C24104) * C22077 + (C24103 + C24102) * C141495 +
            (C22172 * C1598 + C141468 * C1687 + C22173 * C3493 +
             C141358 * C3575) *
                C22079 +
            (C22172 * C1603 + C141468 * C1692 + C22173 * C3497 +
             C141358 * C3579) *
                C22071) *
               C141320 * C141487 -
           ((C22207 + C22208) * C22071 + (C22209 + C22210) * C22079 +
            (C22206 + C22205) * C141495 + (C22204 + C22203) * C22077 +
            (C22202 + C22201) * C141494 + (C22200 + C22199) * C22075) *
               C141320 * C4148) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eexz[6] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141320 * C276) * C22075 +
             (C275 * C114 + C141320 * C282) * C141494 + C305 * C22077 +
             C306 * C141495 + C307 * C22079 + C308 * C22071) *
                C141468 +
            (C23172 + C23173 + C23174 + C23175 + C23176 + C23177) * C141358) *
               C4148 -
           ((C26779 + C26780 + C26781 + C26782 + C26783 + C26784) * C141358 +
            (C1806 * C22071 + C1807 * C22079 + C1808 * C141495 +
             C1809 * C22077 + (C275 * C1606 + C141320 * C1789) * C141494 +
             (C275 * C1601 + C141320 * C1784) * C22075) *
                C141468) *
               C141487) *
              C141277 * C2376 +
          (((C1809 * C22075 + C1808 * C141494 + C1807 * C22077 +
             C1806 * C141495 + C1805 * C22079 + C1804 * C22071) *
                C141468 +
            (C8145 * C22075 + C8144 * C141494 + C24213 * C22077 +
             C24212 * C141495 + (C275 * C3493 + C141320 * C3649) * C22079 +
             (C275 * C3497 + C141320 * C3653) * C22071) *
                C141358) *
               C141487 -
           ((C23183 + C23182 + C23181 + C23180 + C23179 + C23178) * C141358 +
            (C310 * C22071 + C309 * C22079 + C308 * C141495 + C307 * C22077 +
             C306 * C141494 + C305 * C22075) *
                C141468) *
               C4148) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[6] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C22075 * C108 + C141494 * C114 + C22077 * C109 +
                      C141495 * C115 + C22079 * C110 + C22071 * C116) *
                         C22172 +
                     (C22075 * C189 + C141494 * C362 + C22077 * C190 +
                      C141495 * C363 + C22079 * C191 + C22071 * C364) *
                         C141468 +
                     (C23306 + C23307 + C23308) * C22173 +
                     (C23309 + C23310 + C23311) * C141358) *
                        C141320 * C4148 -
                    ((C26895 + C26896 + C26897) * C141358 +
                     (C26898 + C26899 + C26900) * C22173 +
                     (C22079 * C1688 + C22071 * C1876 + C22077 * C1689 +
                      C141495 * C1877 + C22075 * C1690 + C141494 * C1878) *
                         C141468 +
                     (C22079 * C1599 + C22071 * C1604 + C22077 * C1600 +
                      C141495 * C1605 + C22075 * C1601 + C141494 * C1606) *
                         C22172) *
                        C141320 * C141487) *
                       C141277 * C2376 +
                   (((C22075 * C1600 + C141494 * C1605 + C22077 * C1599 +
                      C141495 * C1604 + C22079 * C1598 + C22071 * C1603) *
                         C22172 +
                     (C22075 * C1689 + C141494 * C1877 + C22077 * C1688 +
                      C141495 * C1876 + C22079 * C1687 + C22071 * C1875) *
                         C141468 +
                     (C22075 * C3491 + C141494 * C3495 + C22077 * C3492 +
                      C141495 * C3496 + C22079 * C3493 + C22071 * C3497) *
                         C22173 +
                     (C22075 * C3573 + C141494 * C3721 + C22077 * C3574 +
                      C141495 * C3722 + C22079 * C3575 + C22071 * C3723) *
                         C141358) *
                        C141320 * C141487 -
                    ((C23317 + C23316 + C23315) * C141358 +
                     (C23314 + C23313 + C23312) * C22173 +
                     (C22079 * C192 + C22071 * C365 + C22077 * C191 +
                      C141495 * C364 + C22075 * C190 + C141494 * C363) *
                         C141468 +
                     (C22079 * C111 + C22071 * C117 + C22077 * C110 +
                      C141495 * C116 + C22075 * C109 + C141494 * C115) *
                         C22172) *
                        C141320 * C4148) *
                       C141277 * C141483)) /
                 (p * q * std::sqrt(p + q));
    d2eeyy[6] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C22434 * C108 + C22437 + C22437 + C141468 * C419 +
                      C22435 * C823 + C22438 + C22438 + C141358 * C1171) *
                         C141494 +
                     (C22471 + C22472) * C141495 + C22477 * C22071) *
                        C141320 * C4148 -
                    ((C24434 + C24435) * C22071 + (C24436 + C24437) * C141495 +
                     (C22435 * C3490 + C24422 + C24422 + C141358 * C3790 +
                      C22434 * C1601 + C24423 + C24423 + C141468 * C1949) *
                         C141494) *
                        C141320 * C141487) *
                       C141277 * C2376 +
                   (((C24437 + C24436) * C141494 + (C24435 + C24434) * C141495 +
                     (C22434 * C1598 + C24424 + C24424 + C141468 * C1946 +
                      C22435 * C3493 + C24425 + C24425 + C141358 * C3793) *
                         C22071) *
                        C141320 * C141487 -
                    ((C22475 + C22476) * C22071 + (C22474 + C22473) * C141495 +
                     (C22472 + C22471) * C141494) *
                        C141320 * C4148) *
                       C141277 * C141483)) /
                 (p * q * std::sqrt(p + q));
    d2eeyz[6] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141320 * C276) * C22172 +
             (C275 * C189 + C141320 * C501) * C141468 + C7032 * C22173 +
             C7428 * C141358) *
                C141494 +
            (C22552 + C22553 + C22554 + C22555) * C141495 + C22566 * C22071) *
               C4148 -
           ((C24546 + C24538 + C24539 + C24540) * C22071 +
            (C24541 + C24542 + C24543 + C24544) * C141495 +
            (C11139 * C141358 + C10799 * C22173 +
             (C275 * C1690 + C141320 * C2040) * C141468 +
             (C275 * C1601 + C141320 * C1784) * C22172) *
                C141494) *
               C141487) *
              C141277 * C2376 +
          (((C24544 + C24543 + C24542 + C24541) * C141494 +
            (C24540 + C24539 + C24538 + C24546) * C141495 +
            (C1805 * C22172 + C2052 * C141468 +
             (C275 * C3493 + C141320 * C3649) * C22173 +
             (C275 * C3575 + C141320 * C3867) * C141358) *
                C22071) *
               C141487 -
           ((C22560 + C22561 + C22562 + C22563) * C22071 +
            (C22559 + C22558 + C22557 + C22556) * C141495 +
            (C22555 + C22554 + C22553 + C22552) * C141494) *
               C4148) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eezx[6] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C22075 * C108 + C141494 * C114 + C22077 * C109 +
                       C141495 * C115 + C22079 * C110 + C22071 * C116) *
                          C275 +
                      (C22075 * C276 + C141494 * C579 + C22077 * C277 +
                       C141495 * C580 + C22079 * C278 + C22071 * C581) *
                          C141320) *
                         C141468 +
                     ((C23306 + C23307 + C23308) * C275 +
                      (C23660 + C23661 + C23662) * C141320) *
                         C141358) *
                        C4148 -
                    (((C27207 + C27208 + C27209) * C141320 +
                      (C26898 + C26899 + C26900) * C275) *
                         C141358 +
                     ((C22079 * C1782 + C22071 * C2124 + C22077 * C1783 +
                       C141495 * C2125 + C22075 * C1784 + C141494 * C2126) *
                          C141320 +
                      (C22079 * C1599 + C22071 * C1604 + C22077 * C1600 +
                       C141495 * C1605 + C22075 * C1601 + C141494 * C1606) *
                          C275) *
                         C141468) *
                        C141487) *
                       C141277 * C2376 +
                   ((((C22075 * C1600 + C141494 * C1605 + C22077 * C1599 +
                       C141495 * C1604 + C22079 * C1598 + C22071 * C1603) *
                          C275 +
                      (C22075 * C1783 + C141494 * C2125 + C22077 * C1782 +
                       C141495 * C2124 + C22079 * C1781 + C22071 * C2123) *
                          C141320) *
                         C141468 +
                     ((C22075 * C3491 + C141494 * C3495 + C22077 * C3492 +
                       C141495 * C3496 + C22079 * C3493 + C22071 * C3497) *
                          C275 +
                      (C22075 * C3647 + C141494 * C3935 + C22077 * C3648 +
                       C141495 * C3936 + C22079 * C3649 + C22071 * C3937) *
                          C141320) *
                         C141358) *
                        C141487 -
                    (((C23665 + C23664 + C23663) * C141320 +
                      (C23314 + C23313 + C23312) * C275) *
                         C141358 +
                     ((C22079 * C279 + C22071 * C582 + C22077 * C278 +
                       C141495 * C581 + C22075 * C277 + C141494 * C580) *
                          C141320 +
                      (C22079 * C111 + C22071 * C117 + C22077 * C110 +
                       C141495 * C116 + C22075 * C109 + C141494 * C115) *
                          C275) *
                         C141468) *
                        C4148) *
                       C141277 * C141483)) /
                 (p * q * std::sqrt(p + q));
    d2eezy[6] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22172 * C108 + C141468 * C189 + C22173 * C823 + C141358 * C912) *
                 C275 +
             (C22172 * C276 + C141468 * C635 + C22173 * C1006 +
              C141358 * C1419) *
                 C141320) *
                C141494 +
            ((C22199 + C22200) * C275 + (C22728 + C22729) * C141320) * C141495 +
            C22736 * C22071) *
               C4148 -
           (((C24751 + C24752) * C141320 + (C24104 + C24105) * C275) * C22071 +
            ((C24753 + C24754) * C141320 + (C24108 + C24109) * C275) * C141495 +
            ((C22173 * C3646 + C141358 * C4004 + C22172 * C1784 +
              C141468 * C2197) *
                 C141320 +
             (C22173 * C3490 + C141358 * C3572 + C22172 * C1601 +
              C141468 * C1690) *
                 C275) *
                C141494) *
               C141487) *
              C141277 * C2376 +
          ((((C24109 + C24108) * C275 + (C24754 + C24753) * C141320) * C141494 +
            ((C24105 + C24104) * C275 + (C24752 + C24751) * C141320) * C141495 +
            ((C22172 * C1598 + C141468 * C1687 + C22173 * C3493 +
              C141358 * C3575) *
                 C275 +
             (C22172 * C1781 + C141468 * C2194 + C22173 * C3649 +
              C141358 * C4007) *
                 C141320) *
                C22071) *
               C141487 -
           (((C22732 + C22733) * C141320 + (C22209 + C22210) * C275) * C22071 +
            ((C22731 + C22730) * C141320 + (C22204 + C22203) * C275) * C141495 +
            ((C22729 + C22728) * C141320 + (C22200 + C22199) * C275) *
                C141494) *
               C4148) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eezz[6] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C713 * C108 + C721 + C721 + C141320 * C714) * C141468 +
             C7785 * C141358) *
                C141494 +
            (C22811 + C22812) * C141495 + C22817 * C22071) *
               C4148 -
           ((C24861 + C24855) * C22071 + (C24856 + C24857) * C141495 +
            (C11463 * C141358 +
             (C713 * C1601 + C2295 + C2295 + C141320 * C2283) * C141468) *
                C141494) *
               C141487) *
              C141277 * C2376 +
          (((C24857 + C24856) * C141494 + (C24855 + C24861) * C141495 +
            (C2303 * C141468 +
             (C713 * C3493 + C4082 + C4082 + C141320 * C4077) * C141358) *
                C22071) *
               C141487 -
           ((C22815 + C22816) * C22071 + (C22814 + C22813) * C141495 +
            (C22812 + C22811) * C141494) *
               C4148) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eexx[7] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C22074 * C108 + C22081 + C22081 + C141494 * C120 +
                      C22076 * C109 + C22082 + C22082 + C141495 * C121 +
                      C22078 * C110 + C22083 + C22083 + C22071 * C122) *
                         C141320 * C141468 +
                     (C22946 + C22947 + C22948) * C141320 * C141358) *
                        C4148 -
                    ((C26580 + C26581 + C26582) * C141320 * C141358 +
                     (C22078 * C1599 + C23979 + C23979 + C22071 * C1609 +
                      C22076 * C1600 + C23980 + C23980 + C141495 * C1610 +
                      C22074 * C1601 + C23981 + C23981 + C141494 * C1611) *
                         C141320 * C141468) *
                        C141487) *
                       C816 +
                   (((C26582 + C26581 + C26580) * C141320 * C141468 +
                     (C22074 * C7887 + C26571 + C26571 + C141494 * C7893 +
                      C22076 * C7886 + C26572 + C26572 + C141495 * C7892 +
                      C22078 * C7888 + C26573 + C26573 + C22071 * C7894) *
                         C141320 * C141358) *
                        C141487 -
                    ((C25833 + C25834 + C25835) * C141320 * C141358 +
                     (C22948 + C22947 + C22946) * C141320 * C141468) *
                        C4148) *
                       C141485) *
                  C141243) /
                 (p * q * std::sqrt(p + q));
    d2eexy[7] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C22172 * C108 + C141468 * C189 + C22173 * C823 + C141358 * C912) *
                C22075 +
            (C22172 * C114 + C141468 * C195 + C22173 * C828 + C141358 * C917) *
                C141494 +
            (C22199 + C22200) * C22077 + (C22201 + C22202) * C141495 +
            C22211 * C22079 + C22212 * C22071) *
               C141320 * C4148 -
           ((C24102 + C24103) * C22071 + (C24104 + C24105) * C22079 +
            (C24106 + C24107) * C141495 + (C24108 + C24109) * C22077 +
            (C22173 * C3494 + C141358 * C3576 + C22172 * C1606 +
             C141468 * C1695) *
                C141494 +
            (C22173 * C3490 + C141358 * C3572 + C22172 * C1601 +
             C141468 * C1690) *
                C22075) *
               C141320 * C141487) *
              C816 +
          (((C22172 * C3490 + C141468 * C3572 + C22173 * C7887 +
             C141358 * C8006) *
                C22075 +
            (C22172 * C3494 + C141468 * C3576 + C22173 * C7890 +
             C141358 * C8009) *
                C141494 +
            (C22172 * C3491 + C141468 * C3573 + C22173 * C7886 +
             C141358 * C8005) *
                C22077 +
            (C22172 * C3495 + C141468 * C3577 + C22173 * C7889 +
             C141358 * C8008) *
                C141495 +
            (C22172 * C3492 + C141468 * C3574 + C22173 * C7888 +
             C141358 * C8007) *
                C22079 +
            (C22172 * C3496 + C141468 * C3578 + C22173 * C7891 +
             C141358 * C8010) *
                C22071) *
               C141320 * C141487 -
           ((C23066 + C23067) * C22071 + (C23068 + C23069) * C22079 +
            (C23070 + C23071) * C141495 + (C23072 + C23073) * C22077 +
            (C22173 * C2964 + C141358 * C3030 + C22172 * C828 +
             C141468 * C917) *
                C141494 +
            (C22173 * C2960 + C141358 * C3026 + C22172 * C823 +
             C141468 * C912) *
                C22075) *
               C141320 * C4148) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eexz[7] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141320 * C276) * C22075 +
             (C275 * C114 + C141320 * C282) * C141494 + C305 * C22077 +
             C306 * C141495 + C307 * C22079 + C308 * C22071) *
                C141468 +
            (C23172 + C23173 + C23174 + C23175 + C23176 + C23177) * C141358) *
               C4148 -
           ((C26779 + C26780 + C26781 + C26782 + C26783 + C26784) * C141358 +
            (C1806 * C22071 + C1807 * C22079 + C1808 * C141495 +
             C1809 * C22077 + (C275 * C1606 + C141320 * C1789) * C141494 +
             (C275 * C1601 + C141320 * C1784) * C22075) *
                C141468) *
               C141487) *
              C816 +
          (((C26784 + C26783 + C26782 + C26781 + C26780 + C26779) * C141468 +
            (C10797 * C22075 + C10796 * C141494 + C8143 * C22077 +
             C8142 * C141495 + (C275 * C7888 + C141320 * C8129) * C22079 +
             (C275 * C7891 + C141320 * C8132) * C22071) *
                C141358) *
               C141487 -
           ((C25984 + C25985 + C25986 + C25987 + C25988 + C25989) * C141358 +
            (C23177 + C23176 + C23175 + C23174 + C23173 + C23172) * C141468) *
               C4148) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eeyx[7] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C22075 * C108 + C141494 * C114 + C22077 * C109 +
                      C141495 * C115 + C22079 * C110 + C22071 * C116) *
                         C22172 +
                     (C22075 * C189 + C141494 * C362 + C22077 * C190 +
                      C141495 * C363 + C22079 * C191 + C22071 * C364) *
                         C141468 +
                     (C23306 + C23307 + C23308) * C22173 +
                     (C23309 + C23310 + C23311) * C141358) *
                        C141320 * C4148 -
                    ((C26895 + C26896 + C26897) * C141358 +
                     (C26898 + C26899 + C26900) * C22173 +
                     (C22079 * C1688 + C22071 * C1876 + C22077 * C1689 +
                      C141495 * C1877 + C22075 * C1690 + C141494 * C1878) *
                         C141468 +
                     (C22079 * C1599 + C22071 * C1604 + C22077 * C1600 +
                      C141495 * C1605 + C22075 * C1601 + C141494 * C1606) *
                         C22172) *
                        C141320 * C141487) *
                       C816 +
                   (((C26900 + C26899 + C26898) * C22172 +
                     (C26897 + C26896 + C26895) * C141468 +
                     (C22075 * C7887 + C141494 * C7890 + C22077 * C7886 +
                      C141495 * C7889 + C22079 * C7888 + C22071 * C7891) *
                         C22173 +
                     (C22075 * C8006 + C141494 * C8244 + C22077 * C8005 +
                      C141495 * C8243 + C22079 * C8007 + C22071 * C8245) *
                         C141358) *
                        C141320 * C141487 -
                    ((C26076 + C26077 + C26078) * C141358 +
                     (C26079 + C26080 + C26081) * C22173 +
                     (C23311 + C23310 + C23309) * C141468 +
                     (C23308 + C23307 + C23306) * C22172) *
                        C141320 * C4148) *
                       C141485) *
                  C141243) /
                 (p * q * std::sqrt(p + q));
    d2eeyy[7] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C22434 * C108 + C22437 + C22437 + C141468 * C419 +
                      C22435 * C823 + C22438 + C22438 + C141358 * C1171) *
                         C141494 +
                     (C22471 + C22472) * C141495 + C22477 * C22071) *
                        C141320 * C4148 -
                    ((C24434 + C24435) * C22071 + (C24436 + C24437) * C141495 +
                     (C22435 * C3490 + C24422 + C24422 + C141358 * C3790 +
                      C22434 * C1601 + C24423 + C24423 + C141468 * C1949) *
                         C141494) *
                        C141320 * C141487) *
                       C816 +
                   (((C22434 * C3490 + C26999 + C26999 + C141468 * C3790 +
                      C22435 * C7887 + C27000 + C27000 + C141358 * C8345) *
                         C141494 +
                     (C22434 * C3491 + C27001 + C27001 + C141468 * C3791 +
                      C22435 * C7886 + C27002 + C27002 + C141358 * C8344) *
                         C141495 +
                     (C22434 * C3492 + C27003 + C27003 + C141468 * C3792 +
                      C22435 * C7888 + C27004 + C27004 + C141358 * C8346) *
                         C22071) *
                        C141320 * C141487 -
                    ((C23440 + C23441) * C22071 + (C23442 + C23443) * C141495 +
                     (C22435 * C2960 + C23428 + C23428 + C141358 * C3196 +
                      C22434 * C823 + C23429 + C23429 + C141468 * C1171) *
                         C141494) *
                        C141320 * C4148) *
                       C141485) *
                  C141243) /
                 (p * q * std::sqrt(p + q));
    d2eeyz[7] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141320 * C276) * C22172 +
             (C275 * C189 + C141320 * C501) * C141468 + C7032 * C22173 +
             C7428 * C141358) *
                C141494 +
            (C22552 + C22553 + C22554 + C22555) * C141495 + C22566 * C22071) *
               C4148 -
           ((C24546 + C24538 + C24539 + C24540) * C22071 +
            (C24541 + C24542 + C24543 + C24544) * C141495 +
            (C11139 * C141358 + C10799 * C22173 +
             (C275 * C1690 + C141320 * C2040) * C141468 +
             (C275 * C1601 + C141320 * C1784) * C22172) *
                C141494) *
               C141487) *
              C816 +
          (((C10799 * C22172 + C11139 * C141468 + C10797 * C22173 +
             C11138 * C141358) *
                C141494 +
            (C8145 * C22172 + C8482 * C141468 + C8143 * C22173 +
             C8481 * C141358) *
                C141495 +
            (C24213 * C22172 + C24545 * C141468 +
             (C275 * C7888 + C141320 * C8129) * C22173 +
             (C275 * C8007 + C141320 * C8471) * C141358) *
                C22071) *
               C141487 -
           ((C23542 + C23543 + C23544 + C23545) * C22071 +
            (C23546 + C23547 + C23548 + C23549) * C141495 +
            (C7429 * C141358 + C7034 * C22173 + C7428 * C141468 +
             C7032 * C22172) *
                C141494) *
               C4148) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eezx[7] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C22075 * C108 + C141494 * C114 + C22077 * C109 +
                       C141495 * C115 + C22079 * C110 + C22071 * C116) *
                          C275 +
                      (C22075 * C276 + C141494 * C579 + C22077 * C277 +
                       C141495 * C580 + C22079 * C278 + C22071 * C581) *
                          C141320) *
                         C141468 +
                     ((C23306 + C23307 + C23308) * C275 +
                      (C23660 + C23661 + C23662) * C141320) *
                         C141358) *
                        C4148 -
                    (((C27207 + C27208 + C27209) * C141320 +
                      (C26898 + C26899 + C26900) * C275) *
                         C141358 +
                     ((C22079 * C1782 + C22071 * C2124 + C22077 * C1783 +
                       C141495 * C2125 + C22075 * C1784 + C141494 * C2126) *
                          C141320 +
                      (C22079 * C1599 + C22071 * C1604 + C22077 * C1600 +
                       C141495 * C1605 + C22075 * C1601 + C141494 * C1606) *
                          C275) *
                         C141468) *
                        C141487) *
                       C816 +
                   ((((C26900 + C26899 + C26898) * C275 +
                      (C27209 + C27208 + C27207) * C141320) *
                         C141468 +
                     ((C22075 * C7887 + C141494 * C7890 + C22077 * C7886 +
                       C141495 * C7889 + C22079 * C7888 + C22071 * C7891) *
                          C275 +
                      (C22075 * C8128 + C141494 * C8583 + C22077 * C8127 +
                       C141495 * C8582 + C22079 * C8129 + C22071 * C8584) *
                          C141320) *
                         C141358) *
                        C141487 -
                    (((C26316 + C26317 + C26318) * C141320 +
                      (C26079 + C26080 + C26081) * C275) *
                         C141358 +
                     ((C23662 + C23661 + C23660) * C141320 +
                      (C23308 + C23307 + C23306) * C275) *
                         C141468) *
                        C4148) *
                       C141485) *
                  C141243) /
                 (p * q * std::sqrt(p + q));
    d2eezy[7] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22172 * C108 + C141468 * C189 + C22173 * C823 + C141358 * C912) *
                 C275 +
             (C22172 * C276 + C141468 * C635 + C22173 * C1006 +
              C141358 * C1419) *
                 C141320) *
                C141494 +
            ((C22199 + C22200) * C275 + (C22728 + C22729) * C141320) * C141495 +
            C22736 * C22071) *
               C4148 -
           (((C24751 + C24752) * C141320 + (C24104 + C24105) * C275) * C22071 +
            ((C24753 + C24754) * C141320 + (C24108 + C24109) * C275) * C141495 +
            ((C22173 * C3646 + C141358 * C4004 + C22172 * C1784 +
              C141468 * C2197) *
                 C141320 +
             (C22173 * C3490 + C141358 * C3572 + C22172 * C1601 +
              C141468 * C1690) *
                 C275) *
                C141494) *
               C141487) *
              C816 +
          ((((C22172 * C3490 + C141468 * C3572 + C22173 * C7887 +
              C141358 * C8006) *
                 C275 +
             (C22172 * C3646 + C141468 * C4004 + C22173 * C8128 +
              C141358 * C8684) *
                 C141320) *
                C141494 +
            ((C22172 * C3491 + C141468 * C3573 + C22173 * C7886 +
              C141358 * C8005) *
                 C275 +
             (C22172 * C3647 + C141468 * C4005 + C22173 * C8127 +
              C141358 * C8683) *
                 C141320) *
                C141495 +
            ((C22172 * C3492 + C141468 * C3574 + C22173 * C7888 +
              C141358 * C8007) *
                 C275 +
             (C22172 * C3648 + C141468 * C4006 + C22173 * C8129 +
              C141358 * C8685) *
                 C141320) *
                C22071) *
               C141487 -
           (((C23772 + C23773) * C141320 + (C23068 + C23069) * C275) * C22071 +
            ((C23774 + C23775) * C141320 + (C23072 + C23073) * C275) * C141495 +
            ((C22173 * C3084 + C141358 * C3362 + C22172 * C1006 +
              C141468 * C1419) *
                 C141320 +
             (C22173 * C2960 + C141358 * C3026 + C22172 * C823 +
              C141468 * C912) *
                 C275) *
                C141494) *
               C4148) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eezz[7] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C713 * C108 + C721 + C721 + C141320 * C714) * C141468 +
             C7785 * C141358) *
                C141494 +
            (C22811 + C22812) * C141495 + C22817 * C22071) *
               C4148 -
           ((C24861 + C24855) * C22071 + (C24856 + C24857) * C141495 +
            (C11463 * C141358 +
             (C713 * C1601 + C2295 + C2295 + C141320 * C2283) * C141468) *
                C141494) *
               C141487) *
              C816 +
          (((C11463 * C141468 + C11462 * C141358) * C141494 +
            (C8810 * C141468 + C8809 * C141358) * C141495 +
            (C24860 * C141468 +
             (C713 * C7888 + C8804 + C8804 + C141320 * C8795) * C141358) *
                C22071) *
               C141487 -
           ((C23874 + C23875) * C22071 + (C23876 + C23877) * C141495 +
            (C7786 * C141358 + C7785 * C141468) * C141494) *
               C4148) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eexx[8] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((C22074 * C108 + C22081 + C22081 + C141494 * C120 +
                     C22076 * C109 + C22082 + C22082 + C141495 * C121 +
                     C22078 * C110 + C22083 + C22083 + C22071 * C122) *
                        C141320 * C141468 +
                    (C22946 + C22947 + C22948) * C141320 * C141358) *
                       C5322 -
                   ((C26580 + C26581 + C26582) * C141320 * C141358 +
                    (C22078 * C1599 + C23979 + C23979 + C22071 * C1609 +
                     C22076 * C1600 + C23980 + C23980 + C141495 * C1610 +
                     C22074 * C1601 + C23981 + C23981 + C141494 * C1611) *
                        C141320 * C141468) *
                       C5323 +
                   ((C22074 * C5325 + C29244 + C29244 + C141494 * C5333 +
                     C22076 * C5326 + C29245 + C29245 + C141495 * C5334 +
                     C22078 * C5327 + C29246 + C29246 + C22071 * C5335) *
                        C141320 * C141468 +
                    (C22074 * C13301 + C29247 + C29247 + C141494 * C13309 +
                     C22076 * C13302 + C29248 + C29248 + C141495 * C13310 +
                     C22078 * C14876 + C29249 + C29249 + C22071 * C14878) *
                        C141320 * C141358) *
                       C5324) *
                  C141277 * C141243) /
                 (p * q * std::sqrt(p + q));
    d2eexy[8] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C22172 * C108 + C141468 * C189 + C22173 * C823 + C141358 * C912) *
               C22075 +
           (C22172 * C114 + C141468 * C195 + C22173 * C828 + C141358 * C917) *
               C141494 +
           (C22199 + C22200) * C22077 + (C22201 + C22202) * C141495 +
           C22211 * C22079 + C22212 * C22071) *
              C141320 * C5322 -
          ((C24102 + C24103) * C22071 + (C24104 + C24105) * C22079 +
           (C24106 + C24107) * C141495 + (C24108 + C24109) * C22077 +
           (C22173 * C3494 + C141358 * C3576 + C22172 * C1606 +
            C141468 * C1695) *
               C141494 +
           (C22173 * C3490 + C141358 * C3572 + C22172 * C1601 +
            C141468 * C1690) *
               C22075) *
              C141320 * C5323 +
          ((C22172 * C5325 + C141468 * C5391 + C22173 * C13301 +
            C141358 * C13393) *
               C22075 +
           (C22172 * C5329 + C141468 * C5395 + C22173 * C13305 +
            C141358 * C13397) *
               C141494 +
           (C22172 * C5326 + C141468 * C5392 + C22173 * C13302 +
            C141358 * C13395) *
               C22077 +
           (C22172 * C5330 + C141468 * C5396 + C22173 * C13306 +
            C141358 * C13399) *
               C141495 +
           (C22172 * C5327 + C141468 * C5393 + C22173 * C14876 +
            C141358 * C14979) *
               C22079 +
           (C22172 * C5331 + C141468 * C5397 + C22173 * C14877 +
            C141358 * C14980) *
               C22071) *
              C141320 * C5324) *
         C141277 * C141243) /
        (p * q * std::sqrt(p + q));
    d2eexz[8] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141320 * C276) * C22075 +
            (C275 * C114 + C141320 * C282) * C141494 + C305 * C22077 +
            C306 * C141495 + C307 * C22079 + C308 * C22071) *
               C141468 +
           (C23172 + C23173 + C23174 + C23175 + C23176 + C23177) * C141358) *
              C5322 -
          ((C26779 + C26780 + C26781 + C26782 + C26783 + C26784) * C141358 +
           (C1806 * C22071 + C1807 * C22079 + C1808 * C141495 + C1809 * C22077 +
            (C275 * C1606 + C141320 * C1789) * C141494 +
            (C275 * C1601 + C141320 * C1784) * C22075) *
               C141468) *
              C5323 +
          (((C275 * C5325 + C141320 * C5449) * C22075 +
            (C275 * C5329 + C141320 * C5453) * C141494 +
            (C275 * C5326 + C141320 * C5450) * C22077 +
            (C275 * C5330 + C141320 * C5454) * C141495 +
            (C275 * C5327 + C141320 * C5451) * C22079 +
            (C275 * C5331 + C141320 * C5455) * C22071) *
               C141468 +
           ((C275 * C13301 + C141320 * C13475) * C22075 +
            (C275 * C13305 + C141320 * C13479) * C141494 +
            (C275 * C13302 + C141320 * C13476) * C22077 +
            (C275 * C13306 + C141320 * C13480) * C141495 +
            (C275 * C14876 + C141320 * C15091) * C22079 +
            (C275 * C14877 + C141320 * C15092) * C22071) *
               C141358) *
              C5324) *
         C141277 * C141243) /
        (p * q * std::sqrt(p + q));
    d2eeyx[8] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((C22075 * C108 + C141494 * C114 + C22077 * C109 +
                     C141495 * C115 + C22079 * C110 + C22071 * C116) *
                        C22172 +
                    (C22075 * C189 + C141494 * C362 + C22077 * C190 +
                     C141495 * C363 + C22079 * C191 + C22071 * C364) *
                        C141468 +
                    (C23306 + C23307 + C23308) * C22173 +
                    (C23309 + C23310 + C23311) * C141358) *
                       C141320 * C5322 -
                   ((C26895 + C26896 + C26897) * C141358 +
                    (C26898 + C26899 + C26900) * C22173 +
                    (C22079 * C1688 + C22071 * C1876 + C22077 * C1689 +
                     C141495 * C1877 + C22075 * C1690 + C141494 * C1878) *
                        C141468 +
                    (C22079 * C1599 + C22071 * C1604 + C22077 * C1600 +
                     C141495 * C1605 + C22075 * C1601 + C141494 * C1606) *
                        C22172) *
                       C141320 * C5323 +
                   ((C22075 * C5325 + C141494 * C5329 + C22077 * C5326 +
                     C141495 * C5330 + C22079 * C5327 + C22071 * C5331) *
                        C22172 +
                    (C22075 * C5391 + C141494 * C5507 + C22077 * C5392 +
                     C141495 * C5508 + C22079 * C5393 + C22071 * C5509) *
                        C141468 +
                    (C22075 * C13301 + C141494 * C13305 + C22077 * C13302 +
                     C141495 * C13306 + C22079 * C14876 + C22071 * C14877) *
                        C22173 +
                    (C22075 * C13393 + C141494 * C13557 + C22077 * C13395 +
                     C141495 * C13558 + C22079 * C14979 + C22071 * C15209) *
                        C141358) *
                       C141320 * C5324) *
                  C141277 * C141243) /
                 (p * q * std::sqrt(p + q));
    d2eeyy[8] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((C22434 * C108 + C22437 + C22437 + C141468 * C419 +
                     C22435 * C823 + C22438 + C22438 + C141358 * C1171) *
                        C141494 +
                    (C22471 + C22472) * C141495 + C22477 * C22071) *
                       C141320 * C5322 -
                   ((C24434 + C24435) * C22071 + (C24436 + C24437) * C141495 +
                    (C22435 * C3490 + C24422 + C24422 + C141358 * C3790 +
                     C22434 * C1601 + C24423 + C24423 + C141468 * C1949) *
                        C141494) *
                       C141320 * C5323 +
                   ((C22434 * C5325 + C29546 + C29546 + C141468 * C5561 +
                     C22435 * C13301 + C29547 + C29547 + C141358 * C13635) *
                        C141494 +
                    (C22434 * C5326 + C29548 + C29548 + C141468 * C5562 +
                     C22435 * C13302 + C29549 + C29549 + C141358 * C13637) *
                        C141495 +
                    (C22434 * C5327 + C29550 + C29550 + C141468 * C5563 +
                     C22435 * C14876 + C29551 + C29551 + C141358 * C15308) *
                        C22071) *
                       C141320 * C5324) *
                  C141277 * C141243) /
                 (p * q * std::sqrt(p + q));
    d2eeyz[8] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141320 * C276) * C22172 +
            (C275 * C189 + C141320 * C501) * C141468 + C7032 * C22173 +
            C7428 * C141358) *
               C141494 +
           (C22552 + C22553 + C22554 + C22555) * C141495 + C22566 * C22071) *
              C5322 -
          ((C24546 + C24538 + C24539 + C24540) * C22071 +
           (C24541 + C24542 + C24543 + C24544) * C141495 +
           (C11139 * C141358 + C10799 * C22173 +
            (C275 * C1690 + C141320 * C2040) * C141468 +
            (C275 * C1601 + C141320 * C1784) * C22172) *
               C141494) *
              C5323 +
          (((C275 * C5325 + C141320 * C5449) * C22172 +
            (C275 * C5391 + C141320 * C5619) * C141468 +
            (C275 * C13301 + C141320 * C13475) * C22173 +
            (C275 * C13393 + C141320 * C13719) * C141358) *
               C141494 +
           ((C275 * C5326 + C141320 * C5450) * C22172 +
            (C275 * C5392 + C141320 * C5620) * C141468 +
            (C275 * C13302 + C141320 * C13476) * C22173 +
            (C275 * C13395 + C141320 * C13721) * C141358) *
               C141495 +
           ((C275 * C5327 + C141320 * C5451) * C22172 +
            (C275 * C5393 + C141320 * C5621) * C141468 +
            (C275 * C14876 + C141320 * C15091) * C22173 +
            (C275 * C14979 + C141320 * C15420) * C141358) *
               C22071) *
              C5324) *
         C141277 * C141243) /
        (p * q * std::sqrt(p + q));
    d2eezx[8] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C22075 * C108 + C141494 * C114 + C22077 * C109 +
                      C141495 * C115 + C22079 * C110 + C22071 * C116) *
                         C275 +
                     (C22075 * C276 + C141494 * C579 + C22077 * C277 +
                      C141495 * C580 + C22079 * C278 + C22071 * C581) *
                         C141320) *
                        C141468 +
                    ((C23306 + C23307 + C23308) * C275 +
                     (C23660 + C23661 + C23662) * C141320) *
                        C141358) *
                       C5322 -
                   (((C27207 + C27208 + C27209) * C141320 +
                     (C26898 + C26899 + C26900) * C275) *
                        C141358 +
                    ((C22079 * C1782 + C22071 * C2124 + C22077 * C1783 +
                      C141495 * C2125 + C22075 * C1784 + C141494 * C2126) *
                         C141320 +
                     (C22079 * C1599 + C22071 * C1604 + C22077 * C1600 +
                      C141495 * C1605 + C22075 * C1601 + C141494 * C1606) *
                         C275) *
                        C141468) *
                       C5323 +
                   (((C22075 * C5325 + C141494 * C5329 + C22077 * C5326 +
                      C141495 * C5330 + C22079 * C5327 + C22071 * C5331) *
                         C275 +
                     (C22075 * C5449 + C141494 * C5673 + C22077 * C5450 +
                      C141495 * C5674 + C22079 * C5451 + C22071 * C5675) *
                         C141320) *
                        C141468 +
                    ((C22075 * C13301 + C141494 * C13305 + C22077 * C13302 +
                      C141495 * C13306 + C22079 * C14876 + C22071 * C14877) *
                         C275 +
                     (C22075 * C13475 + C141494 * C13797 + C22077 * C13476 +
                      C141495 * C13798 + C22079 * C15091 + C22071 * C15528) *
                         C141320) *
                        C141358) *
                       C5324) *
                  C141277 * C141243) /
                 (p * q * std::sqrt(p + q));
    d2eezy[8] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C22172 * C108 + C141468 * C189 + C22173 * C823 + C141358 * C912) *
                C275 +
            (C22172 * C276 + C141468 * C635 + C22173 * C1006 +
             C141358 * C1419) *
                C141320) *
               C141494 +
           ((C22199 + C22200) * C275 + (C22728 + C22729) * C141320) * C141495 +
           C22736 * C22071) *
              C5322 -
          (((C24751 + C24752) * C141320 + (C24104 + C24105) * C275) * C22071 +
           ((C24753 + C24754) * C141320 + (C24108 + C24109) * C275) * C141495 +
           ((C22173 * C3646 + C141358 * C4004 + C22172 * C1784 +
             C141468 * C2197) *
                C141320 +
            (C22173 * C3490 + C141358 * C3572 + C22172 * C1601 +
             C141468 * C1690) *
                C275) *
               C141494) *
              C5323 +
          (((C22172 * C5325 + C141468 * C5391 + C22173 * C13301 +
             C141358 * C13393) *
                C275 +
            (C22172 * C5449 + C141468 * C5727 + C22173 * C13475 +
             C141358 * C13875) *
                C141320) *
               C141494 +
           ((C22172 * C5326 + C141468 * C5392 + C22173 * C13302 +
             C141358 * C13395) *
                C275 +
            (C22172 * C5450 + C141468 * C5728 + C22173 * C13476 +
             C141358 * C13877) *
                C141320) *
               C141495 +
           ((C22172 * C5327 + C141468 * C5393 + C22173 * C14876 +
             C141358 * C14979) *
                C275 +
            (C22172 * C5451 + C141468 * C5729 + C22173 * C15091 +
             C141358 * C15627) *
                C141320) *
               C22071) *
              C5324) *
         C141277 * C141243) /
        (p * q * std::sqrt(p + q));
    d2eezz[8] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C141320 * C714) * C141468 +
            C7785 * C141358) *
               C141494 +
           (C22811 + C22812) * C141495 + C22817 * C22071) *
              C5322 -
          ((C24861 + C24855) * C22071 + (C24856 + C24857) * C141495 +
           (C11463 * C141358 +
            (C713 * C1601 + C2295 + C2295 + C141320 * C2283) * C141468) *
               C141494) *
              C5323 +
          (((C713 * C5325 + C5786 + C5786 + C141320 * C5781) * C141468 +
            (C713 * C13301 + C13958 + C13958 + C141320 * C13953) * C141358) *
               C141494 +
           ((C713 * C5326 + C5787 + C5787 + C141320 * C5782) * C141468 +
            (C713 * C13302 + C13960 + C13960 + C141320 * C13955) * C141358) *
               C141495 +
           ((C713 * C5327 + C5788 + C5788 + C141320 * C5783) * C141468 +
            (C713 * C14876 + C29848 + C29848 + C141320 * C15738) * C141358) *
               C22071) *
              C5324) *
         C141277 * C141243) /
        (p * q * std::sqrt(p + q));
    d2eexx[9] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C5868 * C108 + C5873 + C5873 + C5863 * C120 +
                      C5870 * C109 + C5874 + C5874 + C141221 * C121) *
                         C141469 +
                     (C15907 + C15908) * C141384) *
                        C141468 +
                    ((C6774 + C6775) * C141469 + (C10579 + C10578) * C141384) *
                        C141358) *
                       C141294 * C141277 * C97 -
                   (((C5870 * C3492 + C7905 + C7905 + C141221 * C3500 +
                      C5868 * C3491 + C7904 + C7904 + C5863 * C3499) *
                         C141384 +
                     (C6779 + C6778) * C141469) *
                        C141358 +
                    ((C15912 + C15911) * C141384 +
                     (C5870 * C110 + C5883 + C5883 + C141221 * C122 +
                      C5868 * C109 + C5884 + C5884 + C5863 * C121) *
                         C141469) *
                        C141468) *
                       C141294 * C141277 * C98 +
                   (((C5868 * C110 + C5885 + C5885 + C5863 * C122 +
                      C5870 * C111 + C5886 + C5886 + C141221 * C123) *
                         C141469 +
                     (C5868 * C1599 + C14041 + C14041 + C5863 * C1609 +
                      C5870 * C1598 + C14042 + C14042 + C141221 * C1608) *
                         C141384) *
                        C141468 +
                    ((C5868 * C821 + C5887 + C5887 + C5863 * C831 +
                      C5870 * C820 + C5888 + C5888 + C141221 * C830) *
                         C141469 +
                     (C5868 * C3492 + C37708 + C37708 + C5863 * C3500 +
                      C5870 * C3493 + C37709 + C37709 + C141221 * C3501) *
                         C141384) *
                        C141358) *
                       C141294 * C141277 * C99)) /
                 (p * q * std::sqrt(p + q));
    d2eexy[9] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C22172 * C108 + C141468 * C189 + C22173 * C823 + C141358 * C912) *
                C5869 +
            (C22172 * C114 + C141468 * C195 + C22173 * C828 + C141358 * C917) *
                C5863 +
            (C22199 + C22200) * C5871 + (C22201 + C22202) * C141221) *
               C141469 +
           ((C22172 * C1601 + C141468 * C1690 + C22173 * C3490 +
             C141358 * C3572) *
                C5869 +
            (C22172 * C1606 + C141468 * C1695 + C22173 * C3494 +
             C141358 * C3576) *
                C5863 +
            (C24109 + C24108) * C5871 + (C24107 + C24106) * C141221) *
               C141384) *
              C141294 * C141277 * C97 -
          (((C24102 + C24103) * C141221 + (C24104 + C24105) * C5871 +
            (C24106 + C24107) * C5863 + (C24108 + C24109) * C5869) *
               C141384 +
           ((C22206 + C22205) * C141221 + (C22204 + C22203) * C5871 +
            (C22202 + C22201) * C5863 + (C22200 + C22199) * C5869) *
               C141469) *
              C141294 * C141277 * C98 +
          ((C22211 * C5869 + C22212 * C5863 + (C22210 + C22209) * C5871 +
            (C22208 + C22207) * C141221) *
               C141469 +
           ((C24105 + C24104) * C5869 + (C24103 + C24102) * C5863 +
            (C22172 * C1598 + C141468 * C1687 + C22173 * C3493 +
             C141358 * C3575) *
                C5871 +
            (C22172 * C1603 + C141468 * C1692 + C22173 * C3497 +
             C141358 * C3579) *
                C141221) *
               C141384) *
              C141294 * C141277 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eexz[9] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C30075 * C108 + C141469 * C276 + C30076 * C1601 +
                      C141384 * C1784) *
                         C5869 +
                     (C30075 * C114 + C141469 * C282 + C30076 * C1606 +
                      C141384 * C1789) *
                         C5863 +
                     (C30102 + C30103) * C5871 + (C30104 + C30105) * C141221) *
                        C141468 +
                    ((C30075 * C823 + C141469 * C1006 + C30076 * C3490 +
                      C141384 * C3646) *
                         C5869 +
                     (C30075 * C828 + C141469 * C1011 + C30076 * C3494 +
                      C141384 * C3650) *
                         C5863 +
                     (C30964 + C30963) * C5871 + (C30962 + C30961) * C141221) *
                        C141358) *
                       C141294 * C141277 * C97 -
                   (((C30957 + C30958) * C141221 + (C30959 + C30960) * C5871 +
                     (C30961 + C30962) * C5863 + (C30963 + C30964) * C5869) *
                        C141358 +
                    ((C30109 + C30108) * C141221 + (C30107 + C30106) * C5871 +
                     (C30105 + C30104) * C5863 + (C30103 + C30102) * C5869) *
                        C141468) *
                       C141294 * C141277 * C98 +
                   ((C30114 * C5869 + C30115 * C5863 +
                     (C30113 + C30112) * C5871 + (C30111 + C30110) * C141221) *
                        C141468 +
                    ((C30960 + C30959) * C5869 + (C30958 + C30957) * C5863 +
                     (C30075 * C820 + C141469 * C1003 + C30076 * C3493 +
                      C141384 * C3649) *
                         C5871 +
                     (C30075 * C825 + C141469 * C1008 + C30076 * C3497 +
                      C141384 * C3653) *
                         C141221) *
                        C141358) *
                       C141294 * C141277 * C99)) /
                 (p * q * std::sqrt(p + q));
    d2eeyx[9] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C141221 * C115) *
                C22172 +
            (C5869 * C189 + C5863 * C362 + C5871 * C190 + C141221 * C363) *
                C141468 +
            (C7175 + C7176) * C22173 + (C7177 + C7178) * C141358) *
               C141469 +
           ((C16308 + C16309) * C22172 + (C16310 + C16311) * C141468 +
            (C10927 + C10926) * C22173 + (C10925 + C10924) * C141358) *
               C141384) *
              C141294 * C141277 * C97 -
          (((C5871 * C3574 + C141221 * C3722 + C5869 * C3573 + C5863 * C3721) *
                C141358 +
            (C5871 * C3492 + C141221 * C3496 + C5869 * C3491 + C5863 * C3495) *
                C22173 +
            (C16319 + C16318) * C141468 + (C16317 + C16316) * C22172) *
               C141384 +
           ((C7186 + C7185) * C141358 + (C7184 + C7183) * C22173 +
            (C5871 * C191 + C141221 * C364 + C5869 * C190 + C5863 * C363) *
                C141468 +
            (C5871 * C110 + C141221 * C116 + C5869 * C109 + C5863 * C115) *
                C22172) *
               C141469) *
              C141294 * C141277 * C98 +
          (((C5869 * C110 + C5863 * C116 + C5871 * C111 + C141221 * C117) *
                C22172 +
            (C5869 * C191 + C5863 * C364 + C5871 * C192 + C141221 * C365) *
                C141468 +
            (C5869 * C821 + C5863 * C826 + C5871 * C820 + C141221 * C825) *
                C22173 +
            (C5869 * C910 + C5863 * C1098 + C5871 * C909 + C141221 * C1097) *
                C141358) *
               C141469 +
           ((C5869 * C1599 + C5863 * C1604 + C5871 * C1598 + C141221 * C1603) *
                C22172 +
            (C5869 * C1688 + C5863 * C1876 + C5871 * C1687 + C141221 * C1875) *
                C141468 +
            (C5869 * C3492 + C5863 * C3496 + C5871 * C3493 + C141221 * C3497) *
                C22173 +
            (C5869 * C3574 + C5863 * C3722 + C5871 * C3575 + C141221 * C3723) *
                C141358) *
               C141384) *
              C141294 * C141277 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[9] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C22434 * C108 + C22437 + C22437 + C141468 * C419 + C22435 * C823 +
             C22438 + C22438 + C141358 * C1171) *
                C5863 +
            (C22471 + C22472) * C141221) *
               C141469 +
           ((C22434 * C1601 + C24423 + C24423 + C141468 * C1949 +
             C22435 * C3490 + C24422 + C24422 + C141358 * C3790) *
                C5863 +
            (C24437 + C24436) * C141221) *
               C141384) *
              C141294 * C141277 * C97 -
          (((C24434 + C24435) * C141221 + (C24436 + C24437) * C5863) * C141384 +
           ((C22474 + C22473) * C141221 + (C22472 + C22471) * C5863) *
               C141469) *
              C141294 * C141277 * C98 +
          ((C22477 * C5863 + (C22476 + C22475) * C141221) * C141469 +
           ((C24435 + C24434) * C5863 +
            (C22434 * C1598 + C24424 + C24424 + C141468 * C1946 +
             C22435 * C3493 + C24425 + C24425 + C141358 * C3793) *
                C141221) *
               C141384) *
              C141294 * C141277 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[9] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C30075 * C108 + C141469 * C276 + C30076 * C1601 +
                      C141384 * C1784) *
                         C22172 +
                     (C30075 * C189 + C141469 * C501 + C30076 * C1690 +
                      C141384 * C2040) *
                         C141468 +
                     (C30075 * C823 + C141469 * C1006 + C30076 * C3490 +
                      C141384 * C3646) *
                         C22173 +
                     (C30075 * C912 + C141469 * C1262 + C30076 * C3572 +
                      C141384 * C3864) *
                         C141358) *
                        C5863 +
                    ((C30102 + C30103) * C22172 + (C30351 + C30352) * C141468 +
                     (C30964 + C30963) * C22173 + (C31275 + C31274) * C141358) *
                        C141221) *
                       C141294 * C141277 * C97 -
                   (((C31272 + C31273) * C141358 + (C30959 + C30960) * C22173 +
                     (C30354 + C30353) * C141468 + (C30107 + C30106) * C22172) *
                        C141221 +
                    ((C31274 + C31275) * C141358 + (C30963 + C30964) * C22173 +
                     (C30352 + C30351) * C141468 + (C30103 + C30102) * C22172) *
                        C5863) *
                       C141294 * C141277 * C98 +
                   ((C30114 * C22172 + C30357 * C141468 +
                     (C30960 + C30959) * C22173 + (C31273 + C31272) * C141358) *
                        C5863 +
                    ((C30113 + C30112) * C22172 + (C30356 + C30355) * C141468 +
                     (C30075 * C820 + C141469 * C1003 + C30076 * C3493 +
                      C141384 * C3649) *
                         C22173 +
                     (C30075 * C909 + C141469 * C1259 + C30076 * C3575 +
                      C141384 * C3867) *
                         C141358) *
                        C141221) *
                       C141294 * C141277 * C99)) /
                 (p * q * std::sqrt(p + q));
    d2eezx[9] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C141221 * C115) *
                C30075 +
            (C5869 * C276 + C5863 * C579 + C5871 * C277 + C141221 * C580) *
                C141469 +
            (C16308 + C16309) * C30076 + (C16678 + C16679) * C141384) *
               C141468 +
           ((C7175 + C7176) * C30075 + (C7549 + C7550) * C141469 +
            (C10927 + C10926) * C30076 + (C11251 + C11250) * C141384) *
               C141358) *
              C141294 * C141277 * C97 -
          (((C5871 * C3648 + C141221 * C3936 + C5869 * C3647 + C5863 * C3935) *
                C141384 +
            (C5871 * C3492 + C141221 * C3496 + C5869 * C3491 + C5863 * C3495) *
                C30076 +
            (C7554 + C7553) * C141469 + (C7184 + C7183) * C30075) *
               C141358 +
           ((C16683 + C16682) * C141384 + (C16317 + C16316) * C30076 +
            (C5871 * C278 + C141221 * C581 + C5869 * C277 + C5863 * C580) *
                C141469 +
            (C5871 * C110 + C141221 * C116 + C5869 * C109 + C5863 * C115) *
                C30075) *
               C141468) *
              C141294 * C141277 * C98 +
          (((C5869 * C110 + C5863 * C116 + C5871 * C111 + C141221 * C117) *
                C30075 +
            (C5869 * C278 + C5863 * C581 + C5871 * C279 + C141221 * C582) *
                C141469 +
            (C5869 * C1599 + C5863 * C1604 + C5871 * C1598 + C141221 * C1603) *
                C30076 +
            (C5869 * C1782 + C5863 * C2124 + C5871 * C1781 + C141221 * C2123) *
                C141384) *
               C141468 +
           ((C5869 * C821 + C5863 * C826 + C5871 * C820 + C141221 * C825) *
                C30075 +
            (C5869 * C1004 + C5863 * C1346 + C5871 * C1003 + C141221 * C1345) *
                C141469 +
            (C5869 * C3492 + C5863 * C3496 + C5871 * C3493 + C141221 * C3497) *
                C30076 +
            (C5869 * C3648 + C5863 * C3936 + C5871 * C3649 + C141221 * C3937) *
                C141384) *
               C141358) *
              C141294 * C141277 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eezy[9] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C22172 * C108 + C141468 * C189 + C22173 * C823 + C141358 * C912) *
                C30075 +
            (C22172 * C276 + C141468 * C635 + C22173 * C1006 +
             C141358 * C1419) *
                C141469 +
            (C22172 * C1601 + C141468 * C1690 + C22173 * C3490 +
             C141358 * C3572) *
                C30076 +
            (C22172 * C1784 + C141468 * C2197 + C22173 * C3646 +
             C141358 * C4004) *
                C141384) *
               C5863 +
           ((C22199 + C22200) * C30075 + (C22728 + C22729) * C141469 +
            (C24109 + C24108) * C30076 + (C24754 + C24753) * C141384) *
               C141221) *
              C141294 * C141277 * C97 -
          (((C24751 + C24752) * C141384 + (C24104 + C24105) * C30076 +
            (C22731 + C22730) * C141469 + (C22204 + C22203) * C30075) *
               C141221 +
           ((C24753 + C24754) * C141384 + (C24108 + C24109) * C30076 +
            (C22729 + C22728) * C141469 + (C22200 + C22199) * C30075) *
               C5863) *
              C141294 * C141277 * C98 +
          ((C22211 * C30075 + C22734 * C141469 + (C24105 + C24104) * C30076 +
            (C24752 + C24751) * C141384) *
               C5863 +
           ((C22210 + C22209) * C30075 + (C22733 + C22732) * C141469 +
            (C22172 * C1598 + C141468 * C1687 + C22173 * C3493 +
             C141358 * C3575) *
                C30076 +
            (C22172 * C1781 + C141468 * C2194 + C22173 * C3649 +
             C141358 * C4007) *
                C141384) *
               C141221) *
              C141294 * C141277 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eezz[9] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30596 * C108 + C30599 + C30599 + C141469 * C714 + C30597 * C1601 +
             C30600 + C30600 + C141384 * C2283) *
                C141468 +
            (C30596 * C823 + C31594 + C31594 + C141469 * C1505 +
             C30597 * C3490 + C31593 + C31593 + C141384 * C4074) *
                C141358) *
               C5863 +
           ((C30633 + C30634) * C141468 + (C31608 + C31607) * C141358) *
               C141221) *
              C141294 * C141277 * C97 -
          (((C31605 + C31606) * C141358 + (C30636 + C30635) * C141468) *
               C141221 +
           ((C31607 + C31608) * C141358 + (C30634 + C30633) * C141468) *
               C5863) *
              C141294 * C141277 * C98 +
          ((C30639 * C141468 + (C31606 + C31605) * C141358) * C5863 +
           ((C30638 + C30637) * C141468 +
            (C30596 * C820 + C31595 + C31595 + C141469 * C1502 +
             C30597 * C3493 + C31596 + C31596 + C141384 * C4077) *
                C141358) *
               C141221) *
              C141294 * C141277 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eexx[10] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5868 * C108 + C5873 + C5873 + C5863 * C120 + C5870 * C109 +
              C5874 + C5874 + C141221 * C121) *
                 C141469 +
             (C15907 + C15908) * C141384) *
                C141468 +
            ((C6774 + C6775) * C141469 + (C10579 + C10578) * C141384) *
                C141358) *
               C141294 * C816 -
           (((C10576 + C10577) * C141384 + (C6777 + C6776) * C141469) *
                C141358 +
            ((C10578 + C10579) * C141384 + (C6775 + C6774) * C141469) *
                C141468) *
               C141294 * C141485) *
              C818 +
          ((((C6778 + C6779) * C141469 + (C38632 + C38633) * C141384) *
                C141468 +
            ((C6780 + C6781) * C141469 +
             (C5868 * C7886 + C7906 + C7906 + C5863 * C7892 + C5870 * C7888 +
              C7907 + C7907 + C141221 * C7894) *
                 C141384) *
                C141358) *
               C141294 * C141485 -
           (((C38633 + C38632) * C141384 + (C6779 + C6778) * C141469) *
                C141358 +
            ((C15912 + C15911) * C141384 +
             (C5870 * C110 + C5883 + C5883 + C141221 * C122 + C5868 * C109 +
              C5884 + C5884 + C5863 * C121) *
                 C141469) *
                C141468) *
               C141294 * C816) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eexy[10] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22172 * C108 + C141468 * C189 + C22173 * C823 + C141358 * C912) *
                 C5869 +
             (C22172 * C114 + C141468 * C195 + C22173 * C828 + C141358 * C917) *
                 C5863 +
             (C22199 + C22200) * C5871 + (C22201 + C22202) * C141221) *
                C141469 +
            ((C22172 * C1601 + C141468 * C1690 + C22173 * C3490 +
              C141358 * C3572) *
                 C5869 +
             (C22172 * C1606 + C141468 * C1695 + C22173 * C3494 +
              C141358 * C3576) *
                 C5863 +
             (C24109 + C24108) * C5871 + (C24107 + C24106) * C141221) *
                C141384) *
               C141294 * C816 -
           (((C38772 + C38773) * C141221 + (C38774 + C38775) * C5871 +
             (C22173 * C7890 + C141358 * C8009 + C22172 * C3494 +
              C141468 * C3576) *
                 C5863 +
             (C22173 * C7887 + C141358 * C8006 + C22172 * C3490 +
              C141468 * C3572) *
                 C5869) *
                C141384 +
            ((C23070 + C23071) * C141221 + (C23072 + C23073) * C5871 +
             (C22173 * C2964 + C141358 * C3030 + C22172 * C828 +
              C141468 * C917) *
                 C5863 +
             (C22173 * C2960 + C141358 * C3026 + C22172 * C823 +
              C141468 * C912) *
                 C5869) *
                C141469) *
               C141294 * C141485) *
              C818 +
          ((((C23073 + C23072) * C5869 + (C23071 + C23070) * C5863 +
             (C23069 + C23068) * C5871 + (C23067 + C23066) * C141221) *
                C141469 +
            ((C38775 + C38774) * C5869 + (C38773 + C38772) * C5863 +
             (C22172 * C3492 + C141468 * C3574 + C22173 * C7888 +
              C141358 * C8007) *
                 C5871 +
             (C22172 * C3496 + C141468 * C3578 + C22173 * C7891 +
              C141358 * C8010) *
                 C141221) *
                C141384) *
               C141294 * C141485 -
           (((C24102 + C24103) * C141221 + (C24104 + C24105) * C5871 +
             (C24106 + C24107) * C5863 + (C24108 + C24109) * C5869) *
                C141384 +
            ((C22206 + C22205) * C141221 + (C22204 + C22203) * C5871 +
             (C22202 + C22201) * C5863 + (C22200 + C22199) * C5869) *
                C141469) *
               C141294 * C816) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eexz[10] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30075 * C108 + C141469 * C276 + C30076 * C1601 +
              C141384 * C1784) *
                 C5869 +
             (C30075 * C114 + C141469 * C282 + C30076 * C1606 +
              C141384 * C1789) *
                 C5863 +
             (C30102 + C30103) * C5871 + (C30104 + C30105) * C141221) *
                C141468 +
            ((C38926 + C38927) * C5869 + (C38928 + C38929) * C5863 +
             C38914 * C5871 + C38915 * C141221) *
                C141358) *
               C141294 * C816 -
           (((C38930 + C38931) * C141221 + (C38932 + C38933) * C5871 +
             (C30076 * C7890 + C141384 * C8131 + C30075 * C2964 +
              C141469 * C3088) *
                 C5863 +
             (C30076 * C7887 + C141384 * C8128 + C30075 * C2960 +
              C141469 * C3084) *
                 C5869) *
                C141358 +
            (C38924 * C141221 + C38925 * C5871 + (C38929 + C38928) * C5863 +
             (C38927 + C38926) * C5869) *
                C141468) *
               C141294 * C141485) *
              C818 +
          (((C38914 * C5869 + C38915 * C5863 + (C30960 + C30959) * C5871 +
             (C30958 + C30957) * C141221) *
                C141468 +
            ((C38933 + C38932) * C5869 + (C38931 + C38930) * C5863 +
             (C30075 * C2962 + C141469 * C3086 + C30076 * C7888 +
              C141384 * C8129) *
                 C5871 +
             (C30075 * C2966 + C141469 * C3090 + C30076 * C7891 +
              C141384 * C8132) *
                 C141221) *
                C141358) *
               C141294 * C141485 -
           (((C30957 + C30958) * C141221 + (C30959 + C30960) * C5871 +
             C38924 * C5863 + C38925 * C5869) *
                C141358 +
            ((C30109 + C30108) * C141221 + (C30107 + C30106) * C5871 +
             (C30105 + C30104) * C5863 + (C30103 + C30102) * C5869) *
                C141468) *
               C141294 * C816) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[10] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C141221 * C115) *
                 C22172 +
             (C5869 * C189 + C5863 * C362 + C5871 * C190 + C141221 * C363) *
                 C141468 +
             (C7175 + C7176) * C22173 + (C7177 + C7178) * C141358) *
                C141469 +
            ((C16308 + C16309) * C22172 + (C16310 + C16311) * C141468 +
             (C10927 + C10926) * C22173 + (C10925 + C10924) * C141358) *
                C141384) *
               C141294 * C816 -
           (((C10920 + C10921) * C141358 + (C10922 + C10923) * C22173 +
             (C10924 + C10925) * C141468 + (C10926 + C10927) * C22172) *
                C141384 +
            ((C7182 + C7181) * C141358 + (C7180 + C7179) * C22173 +
             (C7178 + C7177) * C141468 + (C7176 + C7175) * C22172) *
                C141469) *
               C141294 * C141485) *
              C818 +
          ((((C7183 + C7184) * C22172 + (C7185 + C7186) * C141468 +
             (C7187 + C7188) * C22173 + (C7189 + C7190) * C141358) *
                C141469 +
            ((C39072 + C39073) * C22172 + (C39074 + C39075) * C141468 +
             (C5869 * C7886 + C5863 * C7889 + C5871 * C7888 + C141221 * C7891) *
                 C22173 +
             (C5869 * C8005 + C5863 * C8243 + C5871 * C8007 + C141221 * C8245) *
                 C141358) *
                C141384) *
               C141294 * C141485 -
           (((C39075 + C39074) * C141358 + (C39073 + C39072) * C22173 +
             (C16319 + C16318) * C141468 + (C16317 + C16316) * C22172) *
                C141384 +
            ((C7186 + C7185) * C141358 + (C7184 + C7183) * C22173 +
             (C5871 * C191 + C141221 * C364 + C5869 * C190 + C5863 * C363) *
                 C141468 +
             (C5871 * C110 + C141221 * C116 + C5869 * C109 + C5863 * C115) *
                 C22172) *
                C141469) *
               C141294 * C816) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[10] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22434 * C108 + C22437 + C22437 + C141468 * C419 + C22435 * C823 +
              C22438 + C22438 + C141358 * C1171) *
                 C5863 +
             (C22471 + C22472) * C141221) *
                C141469 +
            ((C22434 * C1601 + C24423 + C24423 + C141468 * C1949 +
              C22435 * C3490 + C24422 + C24422 + C141358 * C3790) *
                 C5863 +
             (C24437 + C24436) * C141221) *
                C141384) *
               C141294 * C816 -
           (((C39214 + C39215) * C141221 +
             (C22435 * C7887 + C27000 + C27000 + C141358 * C8345 +
              C22434 * C3490 + C26999 + C26999 + C141468 * C3790) *
                 C5863) *
                C141384 +
            ((C23442 + C23443) * C141221 +
             (C22435 * C2960 + C23428 + C23428 + C141358 * C3196 +
              C22434 * C823 + C23429 + C23429 + C141468 * C1171) *
                 C5863) *
                C141469) *
               C141294 * C141485) *
              C818 +
          ((((C23443 + C23442) * C5863 + (C23441 + C23440) * C141221) *
                C141469 +
            ((C39215 + C39214) * C5863 +
             (C22434 * C3492 + C27003 + C27003 + C141468 * C3792 +
              C22435 * C7888 + C27004 + C27004 + C141358 * C8346) *
                 C141221) *
                C141384) *
               C141294 * C141485 -
           (((C24434 + C24435) * C141221 + (C24436 + C24437) * C5863) *
                C141384 +
            ((C22474 + C22473) * C141221 + (C22472 + C22471) * C5863) *
                C141469) *
               C141294 * C816) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[10] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30075 * C108 + C141469 * C276 + C30076 * C1601 +
              C141384 * C1784) *
                 C22172 +
             (C30075 * C189 + C141469 * C501 + C30076 * C1690 +
              C141384 * C2040) *
                 C141468 +
             (C38926 + C38927) * C22173 + (C39356 + C39357) * C141358) *
                C5863 +
            ((C30102 + C30103) * C22172 + (C30351 + C30352) * C141468 +
             C38914 * C22173 + C39350 * C141358) *
                C141221) *
               C141294 * C816 -
           (((C39358 + C39359) * C141358 + (C38932 + C38933) * C22173 +
             C39355 * C141468 + C38925 * C22172) *
                C141221 +
            ((C30076 * C8006 + C141384 * C8470 + C30075 * C3026 +
              C141469 * C3254) *
                 C141358 +
             (C30076 * C7887 + C141384 * C8128 + C30075 * C2960 +
              C141469 * C3084) *
                 C22173 +
             (C39357 + C39356) * C141468 + (C38927 + C38926) * C22172) *
                C5863) *
               C141294 * C141485) *
              C818 +
          (((C38914 * C22172 + C39350 * C141468 + (C38933 + C38932) * C22173 +
             (C39359 + C39358) * C141358) *
                C5863 +
            ((C30960 + C30959) * C22172 + (C31273 + C31272) * C141468 +
             (C30075 * C2962 + C141469 * C3086 + C30076 * C7888 +
              C141384 * C8129) *
                 C22173 +
             (C30075 * C3028 + C141469 * C3256 + C30076 * C8007 +
              C141384 * C8471) *
                 C141358) *
                C141221) *
               C141294 * C141485 -
           (((C31272 + C31273) * C141358 + (C30959 + C30960) * C22173 +
             (C30354 + C30353) * C141468 + (C30107 + C30106) * C22172) *
                C141221 +
            (C39355 * C141358 + C38925 * C22173 + (C30352 + C30351) * C141468 +
             (C30103 + C30102) * C22172) *
                C5863) *
               C141294 * C816) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eezx[10] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C141221 * C115) *
                 C30075 +
             (C5869 * C276 + C5863 * C579 + C5871 * C277 + C141221 * C580) *
                 C141469 +
             (C16308 + C16309) * C30076 + (C16678 + C16679) * C141384) *
                C141468 +
            ((C7175 + C7176) * C30075 + (C7549 + C7550) * C141469 +
             (C10927 + C10926) * C30076 + (C11251 + C11250) * C141384) *
                C141358) *
               C141294 * C816 -
           (((C11248 + C11249) * C141384 + (C10922 + C10923) * C30076 +
             (C7552 + C7551) * C141469 + (C7180 + C7179) * C30075) *
                C141358 +
            ((C11250 + C11251) * C141384 + (C10926 + C10927) * C30076 +
             (C7550 + C7549) * C141469 + (C7176 + C7175) * C30075) *
                C141468) *
               C141294 * C141485) *
              C818 +
          ((((C7183 + C7184) * C30075 + (C7553 + C7554) * C141469 +
             (C39072 + C39073) * C30076 + (C39494 + C39495) * C141384) *
                C141468 +
            ((C7187 + C7188) * C30075 + (C7555 + C7556) * C141469 +
             (C5869 * C7886 + C5863 * C7889 + C5871 * C7888 + C141221 * C7891) *
                 C30076 +
             (C5869 * C8127 + C5863 * C8582 + C5871 * C8129 + C141221 * C8584) *
                 C141384) *
                C141358) *
               C141294 * C141485 -
           (((C39495 + C39494) * C141384 + (C39073 + C39072) * C30076 +
             (C7554 + C7553) * C141469 + (C7184 + C7183) * C30075) *
                C141358 +
            ((C16683 + C16682) * C141384 + (C16317 + C16316) * C30076 +
             (C5871 * C278 + C141221 * C581 + C5869 * C277 + C5863 * C580) *
                 C141469 +
             (C5871 * C110 + C141221 * C116 + C5869 * C109 + C5863 * C115) *
                 C30075) *
                C141468) *
               C141294 * C816) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eezy[10] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22172 * C108 + C141468 * C189 + C22173 * C823 + C141358 * C912) *
                 C30075 +
             (C22172 * C276 + C141468 * C635 + C22173 * C1006 +
              C141358 * C1419) *
                 C141469 +
             (C22172 * C1601 + C141468 * C1690 + C22173 * C3490 +
              C141358 * C3572) *
                 C30076 +
             (C22172 * C1784 + C141468 * C2197 + C22173 * C3646 +
              C141358 * C4004) *
                 C141384) *
                C5863 +
            ((C22199 + C22200) * C30075 + (C22728 + C22729) * C141469 +
             (C24109 + C24108) * C30076 + (C24754 + C24753) * C141384) *
                C141221) *
               C141294 * C816 -
           (((C39630 + C39631) * C141384 + (C38774 + C38775) * C30076 +
             (C23774 + C23775) * C141469 + (C23072 + C23073) * C30075) *
                C141221 +
            ((C22173 * C8128 + C141358 * C8684 + C22172 * C3646 +
              C141468 * C4004) *
                 C141384 +
             (C22173 * C7887 + C141358 * C8006 + C22172 * C3490 +
              C141468 * C3572) *
                 C30076 +
             (C22173 * C3084 + C141358 * C3362 + C22172 * C1006 +
              C141468 * C1419) *
                 C141469 +
             (C22173 * C2960 + C141358 * C3026 + C22172 * C823 +
              C141468 * C912) *
                 C30075) *
                C5863) *
               C141294 * C141485) *
              C818 +
          ((((C23073 + C23072) * C30075 + (C23775 + C23774) * C141469 +
             (C38775 + C38774) * C30076 + (C39631 + C39630) * C141384) *
                C5863 +
            ((C23069 + C23068) * C30075 + (C23773 + C23772) * C141469 +
             (C22172 * C3492 + C141468 * C3574 + C22173 * C7888 +
              C141358 * C8007) *
                 C30076 +
             (C22172 * C3648 + C141468 * C4006 + C22173 * C8129 +
              C141358 * C8685) *
                 C141384) *
                C141221) *
               C141294 * C141485 -
           (((C24751 + C24752) * C141384 + (C24104 + C24105) * C30076 +
             (C22731 + C22730) * C141469 + (C22204 + C22203) * C30075) *
                C141221 +
            ((C24753 + C24754) * C141384 + (C24108 + C24109) * C30076 +
             (C22729 + C22728) * C141469 + (C22200 + C22199) * C30075) *
                C5863) *
               C141294 * C816) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eezz[10] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30596 * C108 + C30599 + C30599 + C141469 * C714 +
              C30597 * C1601 + C30600 + C30600 + C141384 * C2283) *
                 C141468 +
             (C39780 + C39781) * C141358) *
                C5863 +
            ((C30633 + C30634) * C141468 + C39766 * C141358) * C141221) *
               C141294 * C816 -
           (((C39782 + C39783) * C141358 + C39771 * C141468) * C141221 +
            ((C30597 * C7887 + C34218 + C34218 + C141384 * C8794 +
              C30596 * C2960 + C34217 + C34217 + C141469 * C3416) *
                 C141358 +
             (C39781 + C39780) * C141468) *
                C5863) *
               C141294 * C141485) *
              C818 +
          (((C39766 * C141468 + (C39783 + C39782) * C141358) * C5863 +
            ((C31606 + C31605) * C141468 +
             (C30596 * C2962 + C34221 + C34221 + C141469 * C3418 +
              C30597 * C7888 + C34222 + C34222 + C141384 * C8795) *
                 C141358) *
                C141221) *
               C141294 * C141485 -
           (((C31605 + C31606) * C141358 + (C30636 + C30635) * C141468) *
                C141221 +
            (C39771 * C141358 + (C30634 + C30633) * C141468) * C5863) *
               C141294 * C816) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eexx[11] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5868 * C108 + C5873 + C5873 + C5863 * C120 + C5870 * C109 +
              C5874 + C5874 + C141221 * C121) *
                 C141469 +
             (C15907 + C15908) * C141384) *
                C141468 +
            ((C6774 + C6775) * C141469 + (C10579 + C10578) * C141384) *
                C141358) *
               C1596 -
           (((C18600 + C18599) * C141384 + (C10578 + C10579) * C141469) *
                C141358 +
            ((C15910 + C15909) * C141384 + (C15908 + C15907) * C141469) *
                C141468) *
               C141487) *
              C141277 * C818 +
          ((((C15911 + C15912) * C141469 + (C15913 + C15914) * C141384) *
                C141468 +
            ((C38632 + C38633) * C141469 +
             (C5868 * C13302 + C14880 + C14880 + C5863 * C13310 +
              C5870 * C14876 + C14881 + C14881 + C141221 * C14878) *
                 C141384) *
                C141358) *
               C141487 -
           (((C38633 + C38632) * C141384 + (C6779 + C6778) * C141469) *
                C141358 +
            ((C15912 + C15911) * C141384 +
             (C5870 * C110 + C5883 + C5883 + C141221 * C122 + C5868 * C109 +
              C5884 + C5884 + C5863 * C121) *
                 C141469) *
                C141468) *
               C1596) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eexy[11] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22172 * C108 + C141468 * C189 + C22173 * C823 + C141358 * C912) *
                 C5869 +
             (C22172 * C114 + C141468 * C195 + C22173 * C828 + C141358 * C917) *
                 C5863 +
             (C22199 + C22200) * C5871 + (C22201 + C22202) * C141221) *
                C141469 +
            ((C40064 + C40065) * C5869 + (C40066 + C40067) * C5863 +
             C40052 * C5871 + C40053 * C141221) *
                C141384) *
               C1596 -
           (((C40068 + C40069) * C141221 + (C40070 + C40071) * C5871 +
             (C22173 * C13305 + C141358 * C13397 + C22172 * C5329 +
              C141468 * C5395) *
                 C5863 +
             (C22173 * C13301 + C141358 * C13393 + C22172 * C5325 +
              C141468 * C5391) *
                 C5869) *
                C141384 +
            (C40062 * C141221 + C40063 * C5871 + (C40067 + C40066) * C5863 +
             (C40065 + C40064) * C5869) *
                C141469) *
               C141487) *
              C141277 * C818 +
          (((C40052 * C5869 + C40053 * C5863 + (C24105 + C24104) * C5871 +
             (C24103 + C24102) * C141221) *
                C141469 +
            ((C40071 + C40070) * C5869 + (C40069 + C40068) * C5863 +
             (C22172 * C5327 + C141468 * C5393 + C22173 * C14876 +
              C141358 * C14979) *
                 C5871 +
             (C22172 * C5331 + C141468 * C5397 + C22173 * C14877 +
              C141358 * C14980) *
                 C141221) *
                C141384) *
               C141487 -
           (((C24102 + C24103) * C141221 + (C24104 + C24105) * C5871 +
             C40062 * C5863 + C40063 * C5869) *
                C141384 +
            ((C22206 + C22205) * C141221 + (C22204 + C22203) * C5871 +
             (C22202 + C22201) * C5863 + (C22200 + C22199) * C5869) *
                C141469) *
               C1596) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eexz[11] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30075 * C108 + C141469 * C276 + C30076 * C1601 +
              C141384 * C1784) *
                 C5869 +
             (C30075 * C114 + C141469 * C282 + C30076 * C1606 +
              C141384 * C1789) *
                 C5863 +
             (C30102 + C30103) * C5871 + (C30104 + C30105) * C141221) *
                C141468 +
            ((C38926 + C38927) * C5869 + (C38928 + C38929) * C5863 +
             C38914 * C5871 + C38915 * C141221) *
                C141358) *
               C1596 -
           (((C40210 + C40211) * C141221 + (C40212 + C40213) * C5871 +
             (C30076 * C13305 + C141384 * C13479 + C30075 * C3494 +
              C141469 * C3650) *
                 C5863 +
             (C30076 * C13301 + C141384 * C13475 + C30075 * C3490 +
              C141469 * C3646) *
                 C5869) *
                C141358 +
            ((C31968 + C31969) * C141221 + (C31970 + C31971) * C5871 +
             (C30076 * C5329 + C141384 * C5453 + C30075 * C1606 +
              C141469 * C1789) *
                 C5863 +
             (C30076 * C5325 + C141384 * C5449 + C30075 * C1601 +
              C141469 * C1784) *
                 C5869) *
                C141468) *
               C141487) *
              C141277 * C818 +
          ((((C31971 + C31970) * C5869 + (C31969 + C31968) * C5863 +
             (C31967 + C31966) * C5871 + (C31965 + C31964) * C141221) *
                C141468 +
            ((C40213 + C40212) * C5869 + (C40211 + C40210) * C5863 +
             (C30075 * C3492 + C141469 * C3648 + C30076 * C14876 +
              C141384 * C15091) *
                 C5871 +
             (C30075 * C3496 + C141469 * C3652 + C30076 * C14877 +
              C141384 * C15092) *
                 C141221) *
                C141358) *
               C141487 -
           (((C30957 + C30958) * C141221 + (C30959 + C30960) * C5871 +
             C38924 * C5863 + C38925 * C5869) *
                C141358 +
            ((C30109 + C30108) * C141221 + (C30107 + C30106) * C5871 +
             (C30105 + C30104) * C5863 + (C30103 + C30102) * C5869) *
                C141468) *
               C1596) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[11] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C141221 * C115) *
                 C22172 +
             (C5869 * C189 + C5863 * C362 + C5871 * C190 + C141221 * C363) *
                 C141468 +
             (C7175 + C7176) * C22173 + (C7177 + C7178) * C141358) *
                C141469 +
            ((C16308 + C16309) * C22172 + (C16310 + C16311) * C141468 +
             (C10927 + C10926) * C22173 + (C10925 + C10924) * C141358) *
                C141384) *
               C1596 -
           (((C18936 + C18935) * C141358 + (C18934 + C18933) * C22173 +
             (C16315 + C16314) * C141468 + (C16313 + C16312) * C22172) *
                C141384 +
            ((C10924 + C10925) * C141358 + (C10926 + C10927) * C22173 +
             (C16311 + C16310) * C141468 + (C16309 + C16308) * C22172) *
                C141469) *
               C141487) *
              C141277 * C818 +
          ((((C16316 + C16317) * C22172 + (C16318 + C16319) * C141468 +
             (C39072 + C39073) * C22173 + (C39074 + C39075) * C141358) *
                C141469 +
            ((C16320 + C16321) * C22172 + (C16322 + C16323) * C141468 +
             (C5869 * C13302 + C5863 * C13306 + C5871 * C14876 +
              C141221 * C14877) *
                 C22173 +
             (C5869 * C13395 + C5863 * C13558 + C5871 * C14979 +
              C141221 * C15209) *
                 C141358) *
                C141384) *
               C141487 -
           (((C39075 + C39074) * C141358 + (C39073 + C39072) * C22173 +
             (C16319 + C16318) * C141468 + (C16317 + C16316) * C22172) *
                C141384 +
            ((C7186 + C7185) * C141358 + (C7184 + C7183) * C22173 +
             (C5871 * C191 + C141221 * C364 + C5869 * C190 + C5863 * C363) *
                 C141468 +
             (C5871 * C110 + C141221 * C116 + C5869 * C109 + C5863 * C115) *
                 C22172) *
                C141469) *
               C1596) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[11] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22434 * C108 + C22437 + C22437 + C141468 * C419 + C22435 * C823 +
              C22438 + C22438 + C141358 * C1171) *
                 C5863 +
             (C22471 + C22472) * C141221) *
                C141469 +
            ((C40492 + C40493) * C5863 + C40478 * C141221) * C141384) *
               C1596 -
           (((C40494 + C40495) * C141221 +
             (C22435 * C13301 + C29547 + C29547 + C141358 * C13635 +
              C22434 * C5325 + C29546 + C29546 + C141468 * C5561) *
                 C5863) *
                C141384 +
            (C40483 * C141221 + (C40493 + C40492) * C5863) * C141469) *
               C141487) *
              C141277 * C818 +
          (((C40478 * C5863 + (C24435 + C24434) * C141221) * C141469 +
            ((C40495 + C40494) * C5863 +
             (C22434 * C5327 + C29550 + C29550 + C141468 * C5563 +
              C22435 * C14876 + C29551 + C29551 + C141358 * C15308) *
                 C141221) *
                C141384) *
               C141487 -
           (((C24434 + C24435) * C141221 + C40483 * C5863) * C141384 +
            ((C22474 + C22473) * C141221 + (C22472 + C22471) * C5863) *
                C141469) *
               C1596) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[11] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30075 * C108 + C141469 * C276 + C30076 * C1601 +
              C141384 * C1784) *
                 C22172 +
             (C30075 * C189 + C141469 * C501 + C30076 * C1690 +
              C141384 * C2040) *
                 C141468 +
             (C38926 + C38927) * C22173 + (C39356 + C39357) * C141358) *
                C5863 +
            ((C30102 + C30103) * C22172 + (C30351 + C30352) * C141468 +
             C38914 * C22173 + C39350 * C141358) *
                C141221) *
               C1596 -
           (((C40630 + C40631) * C141358 + (C40212 + C40213) * C22173 +
             (C32318 + C32319) * C141468 + (C31970 + C31971) * C22172) *
                C141221 +
            ((C30076 * C13393 + C141384 * C13719 + C30075 * C3572 +
              C141469 * C3864) *
                 C141358 +
             (C30076 * C13301 + C141384 * C13475 + C30075 * C3490 +
              C141469 * C3646) *
                 C22173 +
             (C30076 * C5391 + C141384 * C5619 + C30075 * C1690 +
              C141469 * C2040) *
                 C141468 +
             (C30076 * C5325 + C141384 * C5449 + C30075 * C1601 +
              C141469 * C1784) *
                 C22172) *
                C5863) *
               C141487) *
              C141277 * C818 +
          ((((C31971 + C31970) * C22172 + (C32319 + C32318) * C141468 +
             (C40213 + C40212) * C22173 + (C40631 + C40630) * C141358) *
                C5863 +
            ((C31967 + C31966) * C22172 + (C32317 + C32316) * C141468 +
             (C30075 * C3492 + C141469 * C3648 + C30076 * C14876 +
              C141384 * C15091) *
                 C22173 +
             (C30075 * C3574 + C141469 * C3866 + C30076 * C14979 +
              C141384 * C15420) *
                 C141358) *
                C141221) *
               C141487 -
           (((C31272 + C31273) * C141358 + (C30959 + C30960) * C22173 +
             (C30354 + C30353) * C141468 + (C30107 + C30106) * C22172) *
                C141221 +
            (C39355 * C141358 + C38925 * C22173 + (C30352 + C30351) * C141468 +
             (C30103 + C30102) * C22172) *
                C5863) *
               C1596) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eezx[11] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C141221 * C115) *
                 C30075 +
             (C5869 * C276 + C5863 * C579 + C5871 * C277 + C141221 * C580) *
                 C141469 +
             (C16308 + C16309) * C30076 + (C16678 + C16679) * C141384) *
                C141468 +
            ((C7175 + C7176) * C30075 + (C7549 + C7550) * C141469 +
             (C10927 + C10926) * C30076 + (C11251 + C11250) * C141384) *
                C141358) *
               C1596 -
           (((C19258 + C19257) * C141384 + (C18934 + C18933) * C30076 +
             (C11250 + C11251) * C141469 + (C10926 + C10927) * C30075) *
                C141358 +
            ((C16681 + C16680) * C141384 + (C16313 + C16312) * C30076 +
             (C16679 + C16678) * C141469 + (C16309 + C16308) * C30075) *
                C141468) *
               C141487) *
              C141277 * C818 +
          ((((C16316 + C16317) * C30075 + (C16682 + C16683) * C141469 +
             (C16320 + C16321) * C30076 + (C16684 + C16685) * C141384) *
                C141468 +
            ((C39072 + C39073) * C30075 + (C39494 + C39495) * C141469 +
             (C5869 * C13302 + C5863 * C13306 + C5871 * C14876 +
              C141221 * C14877) *
                 C30076 +
             (C5869 * C13476 + C5863 * C13798 + C5871 * C15091 +
              C141221 * C15528) *
                 C141384) *
                C141358) *
               C141487 -
           (((C39495 + C39494) * C141384 + (C39073 + C39072) * C30076 +
             (C7554 + C7553) * C141469 + (C7184 + C7183) * C30075) *
                C141358 +
            ((C16683 + C16682) * C141384 + (C16317 + C16316) * C30076 +
             (C5871 * C278 + C141221 * C581 + C5869 * C277 + C5863 * C580) *
                 C141469 +
             (C5871 * C110 + C141221 * C116 + C5869 * C109 + C5863 * C115) *
                 C30075) *
                C141468) *
               C1596) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eezy[11] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22172 * C108 + C141468 * C189 + C22173 * C823 + C141358 * C912) *
                 C30075 +
             (C22172 * C276 + C141468 * C635 + C22173 * C1006 +
              C141358 * C1419) *
                 C141469 +
             (C40064 + C40065) * C30076 + (C40902 + C40903) * C141384) *
                C5863 +
            ((C22199 + C22200) * C30075 + (C22728 + C22729) * C141469 +
             C40052 * C30076 + C40896 * C141384) *
                C141221) *
               C1596 -
           (((C40904 + C40905) * C141384 + (C40070 + C40071) * C30076 +
             C40901 * C141469 + C40063 * C30075) *
                C141221 +
            ((C22173 * C13475 + C141358 * C13875 + C22172 * C5449 +
              C141468 * C5727) *
                 C141384 +
             (C22173 * C13301 + C141358 * C13393 + C22172 * C5325 +
              C141468 * C5391) *
                 C30076 +
             (C40903 + C40902) * C141469 + (C40065 + C40064) * C30075) *
                C5863) *
               C141487) *
              C141277 * C818 +
          (((C40052 * C30075 + C40896 * C141469 + (C40071 + C40070) * C30076 +
             (C40905 + C40904) * C141384) *
                C5863 +
            ((C24105 + C24104) * C30075 + (C24752 + C24751) * C141469 +
             (C22172 * C5327 + C141468 * C5393 + C22173 * C14876 +
              C141358 * C14979) *
                 C30076 +
             (C22172 * C5451 + C141468 * C5729 + C22173 * C15091 +
              C141358 * C15627) *
                 C141384) *
                C141221) *
               C141487 -
           (((C24751 + C24752) * C141384 + (C24104 + C24105) * C30076 +
             (C22731 + C22730) * C141469 + (C22204 + C22203) * C30075) *
                C141221 +
            (C40901 * C141384 + C40063 * C30076 + (C22729 + C22728) * C141469 +
             (C22200 + C22199) * C30075) *
                C5863) *
               C1596) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eezz[11] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30596 * C108 + C30599 + C30599 + C141469 * C714 +
              C30597 * C1601 + C30600 + C30600 + C141384 * C2283) *
                 C141468 +
             (C39780 + C39781) * C141358) *
                C5863 +
            ((C30633 + C30634) * C141468 + C39766 * C141358) * C141221) *
               C1596 -
           (((C41044 + C41045) * C141358 + (C32666 + C32667) * C141468) *
                C141221 +
            ((C30597 * C13301 + C35115 + C35115 + C141384 * C13953 +
              C30596 * C3490 + C35114 + C35114 + C141469 * C4074) *
                 C141358 +
             (C30597 * C5325 + C32652 + C32652 + C141384 * C5781 +
              C30596 * C1601 + C32653 + C32653 + C141469 * C2283) *
                 C141468) *
                C5863) *
               C141487) *
              C141277 * C818 +
          ((((C32667 + C32666) * C141468 + (C41045 + C41044) * C141358) *
                C5863 +
            ((C32665 + C32664) * C141468 +
             (C30596 * C3492 + C35118 + C35118 + C141469 * C4076 +
              C30597 * C14876 + C35119 + C35119 + C141384 * C15738) *
                 C141358) *
                C141221) *
               C141487 -
           (((C31605 + C31606) * C141358 + (C30636 + C30635) * C141468) *
                C141221 +
            (C39771 * C141358 + (C30634 + C30633) * C141468) * C5863) *
               C1596) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eexx[12] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5868 * C108 + C5873 + C5873 + C5863 * C120 + C5870 * C109 +
              C5874 + C5874 + C141221 * C121) *
                 C141469 +
             (C15907 + C15908) * C141384) *
                C141468 +
            ((C6774 + C6775) * C141469 + (C10579 + C10578) * C141384) *
                C141358) *
               C141294 * C2374 -
           (((C10576 + C10577) * C141384 + (C6777 + C6776) * C141469) *
                C141358 +
            ((C10578 + C10579) * C141384 + (C6775 + C6774) * C141469) *
                C141468) *
               C141294 * C141485) *
              C2376 +
          ((((C6778 + C6779) * C141469 + (C38632 + C38633) * C141384) *
                C141468 +
            ((C6780 + C6781) * C141469 +
             (C5868 * C7886 + C7906 + C7906 + C5863 * C7892 + C5870 * C7888 +
              C7907 + C7907 + C141221 * C7894) *
                 C141384) *
                C141358) *
               C141294 * C141485 -
           (((C38633 + C38632) * C141384 + (C6779 + C6778) * C141469) *
                C141358 +
            ((C15912 + C15911) * C141384 +
             (C5870 * C110 + C5883 + C5883 + C141221 * C122 + C5868 * C109 +
              C5884 + C5884 + C5863 * C121) *
                 C141469) *
                C141468) *
               C141294 * C2374) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eexy[12] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22172 * C108 + C141468 * C189 + C22173 * C823 + C141358 * C912) *
                 C5869 +
             (C22172 * C114 + C141468 * C195 + C22173 * C828 + C141358 * C917) *
                 C5863 +
             (C22199 + C22200) * C5871 + (C22201 + C22202) * C141221) *
                C141469 +
            ((C40064 + C40065) * C5869 + (C40066 + C40067) * C5863 +
             C40052 * C5871 + C40053 * C141221) *
                C141384) *
               C141294 * C2374 -
           (((C38772 + C38773) * C141221 + (C38774 + C38775) * C5871 +
             (C22173 * C7890 + C141358 * C8009 + C22172 * C3494 +
              C141468 * C3576) *
                 C5863 +
             (C22173 * C7887 + C141358 * C8006 + C22172 * C3490 +
              C141468 * C3572) *
                 C5869) *
                C141384 +
            ((C23070 + C23071) * C141221 + (C23072 + C23073) * C5871 +
             (C22173 * C2964 + C141358 * C3030 + C22172 * C828 +
              C141468 * C917) *
                 C5863 +
             (C22173 * C2960 + C141358 * C3026 + C22172 * C823 +
              C141468 * C912) *
                 C5869) *
                C141469) *
               C141294 * C141485) *
              C2376 +
          ((((C23073 + C23072) * C5869 + (C23071 + C23070) * C5863 +
             (C23069 + C23068) * C5871 + (C23067 + C23066) * C141221) *
                C141469 +
            ((C38775 + C38774) * C5869 + (C38773 + C38772) * C5863 +
             (C22172 * C3492 + C141468 * C3574 + C22173 * C7888 +
              C141358 * C8007) *
                 C5871 +
             (C22172 * C3496 + C141468 * C3578 + C22173 * C7891 +
              C141358 * C8010) *
                 C141221) *
                C141384) *
               C141294 * C141485 -
           (((C24102 + C24103) * C141221 + (C24104 + C24105) * C5871 +
             C40062 * C5863 + C40063 * C5869) *
                C141384 +
            ((C22206 + C22205) * C141221 + (C22204 + C22203) * C5871 +
             (C22202 + C22201) * C5863 + (C22200 + C22199) * C5869) *
                C141469) *
               C141294 * C2374) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eexz[12] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30075 * C108 + C141469 * C276 + C30076 * C1601 +
              C141384 * C1784) *
                 C5869 +
             (C30075 * C114 + C141469 * C282 + C30076 * C1606 +
              C141384 * C1789) *
                 C5863 +
             (C30102 + C30103) * C5871 + (C30104 + C30105) * C141221) *
                C141468 +
            ((C38926 + C38927) * C5869 + (C38928 + C38929) * C5863 +
             C38914 * C5871 + C38915 * C141221) *
                C141358) *
               C141294 * C2374 -
           (((C38930 + C38931) * C141221 + (C38932 + C38933) * C5871 +
             (C30076 * C7890 + C141384 * C8131 + C30075 * C2964 +
              C141469 * C3088) *
                 C5863 +
             (C30076 * C7887 + C141384 * C8128 + C30075 * C2960 +
              C141469 * C3084) *
                 C5869) *
                C141358 +
            (C38924 * C141221 + C38925 * C5871 + (C38929 + C38928) * C5863 +
             (C38927 + C38926) * C5869) *
                C141468) *
               C141294 * C141485) *
              C2376 +
          (((C38914 * C5869 + C38915 * C5863 + (C30960 + C30959) * C5871 +
             (C30958 + C30957) * C141221) *
                C141468 +
            ((C38933 + C38932) * C5869 + (C38931 + C38930) * C5863 +
             (C30075 * C2962 + C141469 * C3086 + C30076 * C7888 +
              C141384 * C8129) *
                 C5871 +
             (C30075 * C2966 + C141469 * C3090 + C30076 * C7891 +
              C141384 * C8132) *
                 C141221) *
                C141358) *
               C141294 * C141485 -
           (((C30957 + C30958) * C141221 + (C30959 + C30960) * C5871 +
             C38924 * C5863 + C38925 * C5869) *
                C141358 +
            ((C30109 + C30108) * C141221 + (C30107 + C30106) * C5871 +
             (C30105 + C30104) * C5863 + (C30103 + C30102) * C5869) *
                C141468) *
               C141294 * C2374) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[12] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C141221 * C115) *
                 C22172 +
             (C5869 * C189 + C5863 * C362 + C5871 * C190 + C141221 * C363) *
                 C141468 +
             (C7175 + C7176) * C22173 + (C7177 + C7178) * C141358) *
                C141469 +
            ((C16308 + C16309) * C22172 + (C16310 + C16311) * C141468 +
             (C10927 + C10926) * C22173 + (C10925 + C10924) * C141358) *
                C141384) *
               C141294 * C2374 -
           (((C10920 + C10921) * C141358 + (C10922 + C10923) * C22173 +
             (C10924 + C10925) * C141468 + (C10926 + C10927) * C22172) *
                C141384 +
            ((C7182 + C7181) * C141358 + (C7180 + C7179) * C22173 +
             (C7178 + C7177) * C141468 + (C7176 + C7175) * C22172) *
                C141469) *
               C141294 * C141485) *
              C2376 +
          ((((C7183 + C7184) * C22172 + (C7185 + C7186) * C141468 +
             (C7187 + C7188) * C22173 + (C7189 + C7190) * C141358) *
                C141469 +
            ((C39072 + C39073) * C22172 + (C39074 + C39075) * C141468 +
             (C5869 * C7886 + C5863 * C7889 + C5871 * C7888 + C141221 * C7891) *
                 C22173 +
             (C5869 * C8005 + C5863 * C8243 + C5871 * C8007 + C141221 * C8245) *
                 C141358) *
                C141384) *
               C141294 * C141485 -
           (((C39075 + C39074) * C141358 + (C39073 + C39072) * C22173 +
             (C16319 + C16318) * C141468 + (C16317 + C16316) * C22172) *
                C141384 +
            ((C7186 + C7185) * C141358 + (C7184 + C7183) * C22173 +
             (C5871 * C191 + C141221 * C364 + C5869 * C190 + C5863 * C363) *
                 C141468 +
             (C5871 * C110 + C141221 * C116 + C5869 * C109 + C5863 * C115) *
                 C22172) *
                C141469) *
               C141294 * C2374) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[12] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22434 * C108 + C22437 + C22437 + C141468 * C419 + C22435 * C823 +
              C22438 + C22438 + C141358 * C1171) *
                 C5863 +
             (C22471 + C22472) * C141221) *
                C141469 +
            ((C40492 + C40493) * C5863 + C40478 * C141221) * C141384) *
               C141294 * C2374 -
           (((C39214 + C39215) * C141221 +
             (C22435 * C7887 + C27000 + C27000 + C141358 * C8345 +
              C22434 * C3490 + C26999 + C26999 + C141468 * C3790) *
                 C5863) *
                C141384 +
            ((C23442 + C23443) * C141221 +
             (C22435 * C2960 + C23428 + C23428 + C141358 * C3196 +
              C22434 * C823 + C23429 + C23429 + C141468 * C1171) *
                 C5863) *
                C141469) *
               C141294 * C141485) *
              C2376 +
          ((((C23443 + C23442) * C5863 + (C23441 + C23440) * C141221) *
                C141469 +
            ((C39215 + C39214) * C5863 +
             (C22434 * C3492 + C27003 + C27003 + C141468 * C3792 +
              C22435 * C7888 + C27004 + C27004 + C141358 * C8346) *
                 C141221) *
                C141384) *
               C141294 * C141485 -
           (((C24434 + C24435) * C141221 + C40483 * C5863) * C141384 +
            ((C22474 + C22473) * C141221 + (C22472 + C22471) * C5863) *
                C141469) *
               C141294 * C2374) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[12] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30075 * C108 + C141469 * C276 + C30076 * C1601 +
              C141384 * C1784) *
                 C22172 +
             (C30075 * C189 + C141469 * C501 + C30076 * C1690 +
              C141384 * C2040) *
                 C141468 +
             (C38926 + C38927) * C22173 + (C39356 + C39357) * C141358) *
                C5863 +
            ((C30102 + C30103) * C22172 + (C30351 + C30352) * C141468 +
             C38914 * C22173 + C39350 * C141358) *
                C141221) *
               C141294 * C2374 -
           (((C39358 + C39359) * C141358 + (C38932 + C38933) * C22173 +
             C39355 * C141468 + C38925 * C22172) *
                C141221 +
            ((C30076 * C8006 + C141384 * C8470 + C30075 * C3026 +
              C141469 * C3254) *
                 C141358 +
             (C30076 * C7887 + C141384 * C8128 + C30075 * C2960 +
              C141469 * C3084) *
                 C22173 +
             (C39357 + C39356) * C141468 + (C38927 + C38926) * C22172) *
                C5863) *
               C141294 * C141485) *
              C2376 +
          (((C38914 * C22172 + C39350 * C141468 + (C38933 + C38932) * C22173 +
             (C39359 + C39358) * C141358) *
                C5863 +
            ((C30960 + C30959) * C22172 + (C31273 + C31272) * C141468 +
             (C30075 * C2962 + C141469 * C3086 + C30076 * C7888 +
              C141384 * C8129) *
                 C22173 +
             (C30075 * C3028 + C141469 * C3256 + C30076 * C8007 +
              C141384 * C8471) *
                 C141358) *
                C141221) *
               C141294 * C141485 -
           (((C31272 + C31273) * C141358 + (C30959 + C30960) * C22173 +
             (C30354 + C30353) * C141468 + (C30107 + C30106) * C22172) *
                C141221 +
            (C39355 * C141358 + C38925 * C22173 + (C30352 + C30351) * C141468 +
             (C30103 + C30102) * C22172) *
                C5863) *
               C141294 * C2374) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eezx[12] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C141221 * C115) *
                 C30075 +
             (C5869 * C276 + C5863 * C579 + C5871 * C277 + C141221 * C580) *
                 C141469 +
             (C16308 + C16309) * C30076 + (C16678 + C16679) * C141384) *
                C141468 +
            ((C7175 + C7176) * C30075 + (C7549 + C7550) * C141469 +
             (C10927 + C10926) * C30076 + (C11251 + C11250) * C141384) *
                C141358) *
               C141294 * C2374 -
           (((C11248 + C11249) * C141384 + (C10922 + C10923) * C30076 +
             (C7552 + C7551) * C141469 + (C7180 + C7179) * C30075) *
                C141358 +
            ((C11250 + C11251) * C141384 + (C10926 + C10927) * C30076 +
             (C7550 + C7549) * C141469 + (C7176 + C7175) * C30075) *
                C141468) *
               C141294 * C141485) *
              C2376 +
          ((((C7183 + C7184) * C30075 + (C7553 + C7554) * C141469 +
             (C39072 + C39073) * C30076 + (C39494 + C39495) * C141384) *
                C141468 +
            ((C7187 + C7188) * C30075 + (C7555 + C7556) * C141469 +
             (C5869 * C7886 + C5863 * C7889 + C5871 * C7888 + C141221 * C7891) *
                 C30076 +
             (C5869 * C8127 + C5863 * C8582 + C5871 * C8129 + C141221 * C8584) *
                 C141384) *
                C141358) *
               C141294 * C141485 -
           (((C39495 + C39494) * C141384 + (C39073 + C39072) * C30076 +
             (C7554 + C7553) * C141469 + (C7184 + C7183) * C30075) *
                C141358 +
            ((C16683 + C16682) * C141384 + (C16317 + C16316) * C30076 +
             (C5871 * C278 + C141221 * C581 + C5869 * C277 + C5863 * C580) *
                 C141469 +
             (C5871 * C110 + C141221 * C116 + C5869 * C109 + C5863 * C115) *
                 C30075) *
                C141468) *
               C141294 * C2374) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eezy[12] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22172 * C108 + C141468 * C189 + C22173 * C823 + C141358 * C912) *
                 C30075 +
             (C22172 * C276 + C141468 * C635 + C22173 * C1006 +
              C141358 * C1419) *
                 C141469 +
             (C40064 + C40065) * C30076 + (C40902 + C40903) * C141384) *
                C5863 +
            ((C22199 + C22200) * C30075 + (C22728 + C22729) * C141469 +
             C40052 * C30076 + C40896 * C141384) *
                C141221) *
               C141294 * C2374 -
           (((C39630 + C39631) * C141384 + (C38774 + C38775) * C30076 +
             (C23774 + C23775) * C141469 + (C23072 + C23073) * C30075) *
                C141221 +
            ((C22173 * C8128 + C141358 * C8684 + C22172 * C3646 +
              C141468 * C4004) *
                 C141384 +
             (C22173 * C7887 + C141358 * C8006 + C22172 * C3490 +
              C141468 * C3572) *
                 C30076 +
             (C22173 * C3084 + C141358 * C3362 + C22172 * C1006 +
              C141468 * C1419) *
                 C141469 +
             (C22173 * C2960 + C141358 * C3026 + C22172 * C823 +
              C141468 * C912) *
                 C30075) *
                C5863) *
               C141294 * C141485) *
              C2376 +
          ((((C23073 + C23072) * C30075 + (C23775 + C23774) * C141469 +
             (C38775 + C38774) * C30076 + (C39631 + C39630) * C141384) *
                C5863 +
            ((C23069 + C23068) * C30075 + (C23773 + C23772) * C141469 +
             (C22172 * C3492 + C141468 * C3574 + C22173 * C7888 +
              C141358 * C8007) *
                 C30076 +
             (C22172 * C3648 + C141468 * C4006 + C22173 * C8129 +
              C141358 * C8685) *
                 C141384) *
                C141221) *
               C141294 * C141485 -
           (((C24751 + C24752) * C141384 + (C24104 + C24105) * C30076 +
             (C22731 + C22730) * C141469 + (C22204 + C22203) * C30075) *
                C141221 +
            (C40901 * C141384 + C40063 * C30076 + (C22729 + C22728) * C141469 +
             (C22200 + C22199) * C30075) *
                C5863) *
               C141294 * C2374) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eezz[12] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30596 * C108 + C30599 + C30599 + C141469 * C714 +
              C30597 * C1601 + C30600 + C30600 + C141384 * C2283) *
                 C141468 +
             (C39780 + C39781) * C141358) *
                C5863 +
            ((C30633 + C30634) * C141468 + C39766 * C141358) * C141221) *
               C141294 * C2374 -
           (((C39782 + C39783) * C141358 + C39771 * C141468) * C141221 +
            ((C30597 * C7887 + C34218 + C34218 + C141384 * C8794 +
              C30596 * C2960 + C34217 + C34217 + C141469 * C3416) *
                 C141358 +
             (C39781 + C39780) * C141468) *
                C5863) *
               C141294 * C141485) *
              C2376 +
          (((C39766 * C141468 + (C39783 + C39782) * C141358) * C5863 +
            ((C31606 + C31605) * C141468 +
             (C30596 * C2962 + C34221 + C34221 + C141469 * C3418 +
              C30597 * C7888 + C34222 + C34222 + C141384 * C8795) *
                 C141358) *
                C141221) *
               C141294 * C141485 -
           (((C31605 + C31606) * C141358 + (C30636 + C30635) * C141468) *
                C141221 +
            (C39771 * C141358 + (C30634 + C30633) * C141468) * C5863) *
               C141294 * C2374) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eexx[13] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C5868 * C108 + C5873 + C5873 + C5863 * C120 + C5870 * C109 +
             C5874 + C5874 + C141221 * C121) *
                C141469 +
            (C15907 + C15908) * C141384) *
               C141468 +
           ((C6774 + C6775) * C141469 + (C10579 + C10578) * C141384) *
               C141358) *
              C141294 * C2956 -
          (((C10576 + C10577) * C141384 + (C6777 + C6776) * C141469) * C141358 +
           ((C10578 + C10579) * C141384 + (C6775 + C6774) * C141469) *
               C141468) *
              C141294 * C2957 +
          ((C9775 * C141469 + (C10577 + C10576) * C141384) * C141468 +
           ((C9788 + C9787) * C141469 +
            (C5868 * C10551 + C10566 + C10566 + C5863 * C10555 +
             C5870 * C10552 + C10567 + C10567 + C141221 * C10556) *
                C141384) *
               C141358) *
              C141294 * C2958) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eexy[13] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C22172 * C108 + C141468 * C189 + C22173 * C823 + C141358 * C912) *
                C5869 +
            (C22172 * C114 + C141468 * C195 + C22173 * C828 + C141358 * C917) *
                C5863 +
            (C22199 + C22200) * C5871 + (C22201 + C22202) * C141221) *
               C141469 +
           ((C40064 + C40065) * C5869 + (C40066 + C40067) * C5863 +
            C40052 * C5871 + C40053 * C141221) *
               C141384) *
              C141294 * C2956 -
          (((C38772 + C38773) * C141221 + (C38774 + C38775) * C5871 +
            (C22173 * C7890 + C141358 * C8009 + C22172 * C3494 +
             C141468 * C3576) *
                C5863 +
            (C22173 * C7887 + C141358 * C8006 + C22172 * C3490 +
             C141468 * C3572) *
                C5869) *
               C141384 +
           ((C23070 + C23071) * C141221 + (C23072 + C23073) * C5871 +
            (C22173 * C2964 + C141358 * C3030 + C22172 * C828 +
             C141468 * C917) *
                C5863 +
            (C22173 * C2960 + C141358 * C3026 + C22172 * C823 +
             C141468 * C912) *
                C5869) *
               C141469) *
              C141294 * C2957 +
          (((C22172 * C2960 + C141468 * C3026 + C22173 * C6729 +
             C141358 * C6880) *
                C5869 +
            (C22172 * C2964 + C141468 * C3030 + C22173 * C6732 +
             C141358 * C6883) *
                C5863 +
            (C22172 * C2961 + C141468 * C3027 + C22173 * C6728 +
             C141358 * C6879) *
                C5871 +
            (C22172 * C2965 + C141468 * C3031 + C22173 * C6731 +
             C141358 * C6882) *
                C141221) *
               C141469 +
           ((C22172 * C7887 + C141468 * C8006 + C22173 * C10551 +
             C141358 * C10677) *
                C5869 +
            (C22172 * C7890 + C141468 * C8009 + C22173 * C10553 +
             C141358 * C10679) *
                C5863 +
            (C22172 * C7886 + C141468 * C8005 + C22173 * C10552 +
             C141358 * C10678) *
                C5871 +
            (C22172 * C7889 + C141468 * C8008 + C22173 * C10554 +
             C141358 * C10680) *
                C141221) *
               C141384) *
              C141294 * C2958) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eexz[13] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C30075 * C108 + C141469 * C276 + C30076 * C1601 +
                       C141384 * C1784) *
                          C5869 +
                      (C30075 * C114 + C141469 * C282 + C30076 * C1606 +
                       C141384 * C1789) *
                          C5863 +
                      (C30102 + C30103) * C5871 + (C30104 + C30105) * C141221) *
                         C141468 +
                     ((C38926 + C38927) * C5869 + (C38928 + C38929) * C5863 +
                      C38914 * C5871 + C38915 * C141221) *
                         C141358) *
                        C141294 * C2956 -
                    (((C38930 + C38931) * C141221 + (C38932 + C38933) * C5871 +
                      (C42518 + C42519) * C5863 + (C42520 + C42521) * C5869) *
                         C141358 +
                     (C38924 * C141221 + C38925 * C5871 +
                      (C38929 + C38928) * C5863 + (C38927 + C38926) * C5869) *
                         C141468) *
                        C141294 * C2957 +
                    (((C42521 + C42520) * C5869 + (C42519 + C42518) * C5863 +
                      (C38933 + C38932) * C5871 + (C38931 + C38930) * C141221) *
                         C141468 +
                     ((C30075 * C6729 + C141469 * C7002 + C30076 * C10551 +
                       C141384 * C10779) *
                          C5869 +
                      (C30075 * C6732 + C141469 * C7005 + C30076 * C10553 +
                       C141384 * C10781) *
                          C5863 +
                      (C30075 * C6728 + C141469 * C7001 + C30076 * C10552 +
                       C141384 * C10780) *
                          C5871 +
                      (C30075 * C6731 + C141469 * C7004 + C30076 * C10554 +
                       C141384 * C10782) *
                          C141221) *
                         C141358) *
                        C141294 * C2958) *
                   C141243) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[13] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C141221 * C115) *
                C22172 +
            (C5869 * C189 + C5863 * C362 + C5871 * C190 + C141221 * C363) *
                C141468 +
            (C7175 + C7176) * C22173 + (C7177 + C7178) * C141358) *
               C141469 +
           ((C16308 + C16309) * C22172 + (C16310 + C16311) * C141468 +
            (C10927 + C10926) * C22173 + (C10925 + C10924) * C141358) *
               C141384) *
              C141294 * C2956 -
          (((C10920 + C10921) * C141358 + (C10922 + C10923) * C22173 +
            (C10924 + C10925) * C141468 + (C10926 + C10927) * C22172) *
               C141384 +
           ((C7182 + C7181) * C141358 + (C7180 + C7179) * C22173 +
            (C7178 + C7177) * C141468 + (C7176 + C7175) * C22172) *
               C141469) *
              C141294 * C2957 +
          ((C10034 * C22172 + C10035 * C141468 + (C10047 + C10046) * C22173 +
            (C10045 + C10044) * C141358) *
               C141469 +
           ((C10923 + C10922) * C22172 + (C10921 + C10920) * C141468 +
            (C5869 * C10551 + C5863 * C10553 + C5871 * C10552 +
             C141221 * C10554) *
                C22173 +
            (C5869 * C10677 + C5863 * C10901 + C5871 * C10678 +
             C141221 * C10902) *
                C141358) *
               C141384) *
              C141294 * C2958) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eeyy[13] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C22434 * C108 + C22437 + C22437 + C141468 * C419 +
                       C22435 * C823 + C22438 + C22438 + C141358 * C1171) *
                          C5863 +
                      (C22471 + C22472) * C141221) *
                         C141469 +
                     ((C40492 + C40493) * C5863 + C40478 * C141221) * C141384) *
                        C141294 * C2956 -
                    (((C39214 + C39215) * C141221 +
                      (C22435 * C7887 + C27000 + C27000 + C141358 * C8345 +
                       C22434 * C3490 + C26999 + C26999 + C141468 * C3790) *
                          C5863) *
                         C141384 +
                     ((C23442 + C23443) * C141221 +
                      (C22435 * C2960 + C23428 + C23428 + C141358 * C3196 +
                       C22434 * C823 + C23429 + C23429 + C141468 * C1171) *
                          C5863) *
                         C141469) *
                        C141294 * C2957 +
                    (((C22434 * C2960 + C26156 + C26156 + C141468 * C3196 +
                       C22435 * C6729 + C26157 + C26157 + C141358 * C7289) *
                          C5863 +
                      (C22434 * C2961 + C26158 + C26158 + C141468 * C3197 +
                       C22435 * C6728 + C26159 + C26159 + C141358 * C7288) *
                          C141221) *
                         C141469 +
                     ((C22434 * C7887 + C42718 + C42718 + C141468 * C8345 +
                       C22435 * C10551 + C42719 + C42719 + C141358 * C11025) *
                          C5863 +
                      (C22434 * C7886 + C42720 + C42720 + C141468 * C8344 +
                       C22435 * C10552 + C42721 + C42721 + C141358 * C11026) *
                          C141221) *
                         C141384) *
                        C141294 * C2958) *
                   C141243) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[13] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30075 * C108 + C141469 * C276 + C30076 * C1601 +
             C141384 * C1784) *
                C22172 +
            (C30075 * C189 + C141469 * C501 + C30076 * C1690 +
             C141384 * C2040) *
                C141468 +
            (C38926 + C38927) * C22173 + (C39356 + C39357) * C141358) *
               C5863 +
           ((C30102 + C30103) * C22172 + (C30351 + C30352) * C141468 +
            C38914 * C22173 + C39350 * C141358) *
               C141221) *
              C141294 * C2956 -
          (((C39358 + C39359) * C141358 + (C38932 + C38933) * C22173 +
            C39355 * C141468 + C38925 * C22172) *
               C141221 +
           ((C42824 + C42825) * C141358 + (C42520 + C42521) * C22173 +
            (C39357 + C39356) * C141468 + (C38927 + C38926) * C22172) *
               C5863) *
              C141294 * C2957 +
          (((C42521 + C42520) * C22172 + (C42825 + C42824) * C141468 +
            (C30075 * C6729 + C141469 * C7002 + C30076 * C10551 +
             C141384 * C10779) *
                C22173 +
            (C30075 * C6880 + C141469 * C7414 + C30076 * C10677 +
             C141384 * C11131) *
                C141358) *
               C5863 +
           ((C38933 + C38932) * C22172 + (C39359 + C39358) * C141468 +
            (C30075 * C6728 + C141469 * C7001 + C30076 * C10552 +
             C141384 * C10780) *
                C22173 +
            (C30075 * C6879 + C141469 * C7413 + C30076 * C10678 +
             C141384 * C11132) *
                C141358) *
               C141221) *
              C141294 * C2958) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eezx[13] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C141221 * C115) *
                C30075 +
            (C5869 * C276 + C5863 * C579 + C5871 * C277 + C141221 * C580) *
                C141469 +
            (C16308 + C16309) * C30076 + (C16678 + C16679) * C141384) *
               C141468 +
           ((C7175 + C7176) * C30075 + (C7549 + C7550) * C141469 +
            (C10927 + C10926) * C30076 + (C11251 + C11250) * C141384) *
               C141358) *
              C141294 * C2956 -
          (((C11248 + C11249) * C141384 + (C10922 + C10923) * C30076 +
            (C7552 + C7551) * C141469 + (C7180 + C7179) * C30075) *
               C141358 +
           ((C11250 + C11251) * C141384 + (C10926 + C10927) * C30076 +
            (C7550 + C7549) * C141469 + (C7176 + C7175) * C30075) *
               C141468) *
              C141294 * C2957 +
          ((C10034 * C30075 + C10286 * C141469 + (C10923 + C10922) * C30076 +
            (C11249 + C11248) * C141384) *
               C141468 +
           ((C10047 + C10046) * C30075 + (C10293 + C10292) * C141469 +
            (C5869 * C10551 + C5863 * C10553 + C5871 * C10552 +
             C141221 * C10554) *
                C30076 +
            (C5869 * C10779 + C5863 * C11237 + C5871 * C10780 +
             C141221 * C11238) *
                C141384) *
               C141358) *
              C141294 * C2958) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eezy[13] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C22172 * C108 + C141468 * C189 + C22173 * C823 + C141358 * C912) *
                C30075 +
            (C22172 * C276 + C141468 * C635 + C22173 * C1006 +
             C141358 * C1419) *
                C141469 +
            (C40064 + C40065) * C30076 + (C40902 + C40903) * C141384) *
               C5863 +
           ((C22199 + C22200) * C30075 + (C22728 + C22729) * C141469 +
            C40052 * C30076 + C40896 * C141384) *
               C141221) *
              C141294 * C2956 -
          (((C39630 + C39631) * C141384 + (C38774 + C38775) * C30076 +
            (C23774 + C23775) * C141469 + (C23072 + C23073) * C30075) *
               C141221 +
           ((C22173 * C8128 + C141358 * C8684 + C22172 * C3646 +
             C141468 * C4004) *
                C141384 +
            (C22173 * C7887 + C141358 * C8006 + C22172 * C3490 +
             C141468 * C3572) *
                C30076 +
            (C22173 * C3084 + C141358 * C3362 + C22172 * C1006 +
             C141468 * C1419) *
                C141469 +
            (C22173 * C2960 + C141358 * C3026 + C22172 * C823 +
             C141468 * C912) *
                C30075) *
               C5863) *
              C141294 * C2957 +
          (((C22172 * C2960 + C141468 * C3026 + C22173 * C6729 +
             C141358 * C6880) *
                C30075 +
            (C22172 * C3084 + C141468 * C3362 + C22173 * C7002 +
             C141358 * C7655) *
                C141469 +
            (C22172 * C7887 + C141468 * C8006 + C22173 * C10551 +
             C141358 * C10677) *
                C30076 +
            (C22172 * C8128 + C141468 * C8684 + C22173 * C10779 +
             C141358 * C11349) *
                C141384) *
               C5863 +
           ((C22172 * C2961 + C141468 * C3027 + C22173 * C6728 +
             C141358 * C6879) *
                C30075 +
            (C22172 * C3085 + C141468 * C3363 + C22173 * C7001 +
             C141358 * C7654) *
                C141469 +
            (C22172 * C7886 + C141468 * C8005 + C22173 * C10552 +
             C141358 * C10678) *
                C30076 +
            (C22172 * C8127 + C141468 * C8683 + C22173 * C10780 +
             C141358 * C11350) *
                C141384) *
               C141221) *
              C141294 * C2958) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eezz[13] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30596 * C108 + C30599 + C30599 + C141469 * C714 + C30597 * C1601 +
             C30600 + C30600 + C141384 * C2283) *
                C141468 +
            (C39780 + C39781) * C141358) *
               C5863 +
           ((C30633 + C30634) * C141468 + C39766 * C141358) * C141221) *
              C141294 * C2956 -
          (((C39782 + C39783) * C141358 + C39771 * C141468) * C141221 +
           ((C43132 + C43133) * C141358 + (C39781 + C39780) * C141468) *
               C5863) *
              C141294 * C2957 +
          (((C43133 + C43132) * C141468 +
            (C30596 * C6729 + C43124 + C43124 + C141469 * C7765 +
             C30597 * C10551 + C43125 + C43125 + C141384 * C11449) *
                C141358) *
               C5863 +
           ((C39783 + C39782) * C141468 +
            (C30596 * C6728 + C43126 + C43126 + C141469 * C7764 +
             C30597 * C10552 + C43127 + C43127 + C141384 * C11450) *
                C141358) *
               C141221) *
              C141294 * C2958) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eexx[14] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5868 * C108 + C5873 + C5873 + C5863 * C120 + C5870 * C109 +
              C5874 + C5874 + C141221 * C121) *
                 C141469 +
             (C15907 + C15908) * C141384) *
                C141468 +
            ((C6774 + C6775) * C141469 + C43264 * C141384) * C141358) *
               C1596 -
           (((C18600 + C18599) * C141384 + C43265 * C141469) * C141358 +
            ((C15910 + C15909) * C141384 + (C15908 + C15907) * C141469) *
                C141468) *
               C141487) *
              C2374 +
          (((C43264 * C141469 + (C18599 + C18600) * C141384) * C141468 +
            ((C10577 + C10576) * C141469 +
             (C5868 * C13303 + C13318 + C13318 + C5863 * C13311 +
              C5870 * C13304 + C13319 + C13319 + C141221 * C13312) *
                 C141384) *
                C141358) *
               C141487 -
           (((C10576 + C10577) * C141384 + (C6777 + C6776) * C141469) *
                C141358 +
            (C43265 * C141384 + (C6775 + C6774) * C141469) * C141468) *
               C1596) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eexy[14] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22172 * C108 + C141468 * C189 + C22173 * C823 + C141358 * C912) *
                 C5869 +
             (C22172 * C114 + C141468 * C195 + C22173 * C828 + C141358 * C917) *
                 C5863 +
             (C22199 + C22200) * C5871 + (C22201 + C22202) * C141221) *
                C141469 +
            ((C40064 + C40065) * C5869 + (C40066 + C40067) * C5863 +
             C40052 * C5871 + C40053 * C141221) *
                C141384) *
               C1596 -
           (((C40068 + C40069) * C141221 + (C40070 + C40071) * C5871 +
             (C22173 * C13305 + C141358 * C13397 + C22172 * C5329 +
              C141468 * C5395) *
                 C5863 +
             (C22173 * C13301 + C141358 * C13393 + C22172 * C5325 +
              C141468 * C5391) *
                 C5869) *
                C141384 +
            (C40062 * C141221 + C40063 * C5871 + (C40067 + C40066) * C5863 +
             (C40065 + C40064) * C5869) *
                C141469) *
               C141487) *
              C2374 +
          ((((C43404 + C43405) * C5869 + (C43406 + C43407) * C5863 +
             (C38775 + C38774) * C5871 + (C38773 + C38772) * C141221) *
                C141469 +
            ((C22172 * C13301 + C141468 * C13393 + C22173 * C13303 +
              C141358 * C13394) *
                 C5869 +
             (C22172 * C13305 + C141468 * C13397 + C22173 * C13307 +
              C141358 * C13398) *
                 C5863 +
             (C22172 * C13302 + C141468 * C13395 + C22173 * C13304 +
              C141358 * C13396) *
                 C5871 +
             (C22172 * C13306 + C141468 * C13399 + C22173 * C13308 +
              C141358 * C13400) *
                 C141221) *
                C141384) *
               C141487 -
           (((C38772 + C38773) * C141221 + (C38774 + C38775) * C5871 +
             (C43407 + C43406) * C5863 + (C43405 + C43404) * C5869) *
                C141384 +
            ((C23070 + C23071) * C141221 + (C23072 + C23073) * C5871 +
             (C22173 * C2964 + C141358 * C3030 + C22172 * C828 +
              C141468 * C917) *
                 C5863 +
             (C22173 * C2960 + C141358 * C3026 + C22172 * C823 +
              C141468 * C912) *
                 C5869) *
                C141469) *
               C1596) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eexz[14] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30075 * C108 + C141469 * C276 + C30076 * C1601 +
              C141384 * C1784) *
                 C5869 +
             (C30075 * C114 + C141469 * C282 + C30076 * C1606 +
              C141384 * C1789) *
                 C5863 +
             (C30102 + C30103) * C5871 + (C30104 + C30105) * C141221) *
                C141468 +
            ((C38926 + C38927) * C5869 + (C38928 + C38929) * C5863 +
             C38914 * C5871 + C38915 * C141221) *
                C141358) *
               C1596 -
           (((C40210 + C40211) * C141221 + (C40212 + C40213) * C5871 +
             (C43546 + C43547) * C5863 + (C43548 + C43549) * C5869) *
                C141358 +
            ((C31968 + C31969) * C141221 + (C31970 + C31971) * C5871 +
             (C30076 * C5329 + C141384 * C5453 + C30075 * C1606 +
              C141469 * C1789) *
                 C5863 +
             (C30076 * C5325 + C141384 * C5449 + C30075 * C1601 +
              C141469 * C1784) *
                 C5869) *
                C141468) *
               C141487) *
              C2374 +
          ((((C43549 + C43548) * C5869 + (C43547 + C43546) * C5863 +
             (C40213 + C40212) * C5871 + (C40211 + C40210) * C141221) *
                C141468 +
            ((C30075 * C7887 + C141469 * C8128 + C30076 * C13303 +
              C141384 * C13477) *
                 C5869 +
             (C30075 * C7890 + C141469 * C8131 + C30076 * C13307 +
              C141384 * C13481) *
                 C5863 +
             (C30075 * C7886 + C141469 * C8127 + C30076 * C13304 +
              C141384 * C13478) *
                 C5871 +
             (C30075 * C7889 + C141469 * C8130 + C30076 * C13308 +
              C141384 * C13482) *
                 C141221) *
                C141358) *
               C141487 -
           (((C38930 + C38931) * C141221 + (C38932 + C38933) * C5871 +
             (C42518 + C42519) * C5863 + (C42520 + C42521) * C5869) *
                C141358 +
            (C38924 * C141221 + C38925 * C5871 + (C38929 + C38928) * C5863 +
             (C38927 + C38926) * C5869) *
                C141468) *
               C1596) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eeyx[14] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C141221 * C115) *
                 C22172 +
             (C5869 * C189 + C5863 * C362 + C5871 * C190 + C141221 * C363) *
                 C141468 +
             (C7175 + C7176) * C22173 + (C7177 + C7178) * C141358) *
                C141469 +
            ((C16308 + C16309) * C22172 + (C16310 + C16311) * C141468 +
             C43680 * C22173 + C43681 * C141358) *
                C141384) *
               C1596 -
           (((C18936 + C18935) * C141358 + (C18934 + C18933) * C22173 +
             (C16315 + C16314) * C141468 + (C16313 + C16312) * C22172) *
                C141384 +
            (C43682 * C141358 + C43683 * C22173 + (C16311 + C16310) * C141468 +
             (C16309 + C16308) * C22172) *
                C141469) *
               C141487) *
              C2374 +
          (((C43680 * C22172 + C43681 * C141468 + (C10923 + C10922) * C22173 +
             (C10921 + C10920) * C141358) *
                C141469 +
            ((C18933 + C18934) * C22172 + (C18935 + C18936) * C141468 +
             (C5869 * C13303 + C5863 * C13307 + C5871 * C13304 +
              C141221 * C13308) *
                 C22173 +
             (C5869 * C13394 + C5863 * C13559 + C5871 * C13396 +
              C141221 * C13560) *
                 C141358) *
                C141384) *
               C141487 -
           (((C10920 + C10921) * C141358 + (C10922 + C10923) * C22173 +
             C43682 * C141468 + C43683 * C22172) *
                C141384 +
            ((C7182 + C7181) * C141358 + (C7180 + C7179) * C22173 +
             (C7178 + C7177) * C141468 + (C7176 + C7175) * C22172) *
                C141469) *
               C1596) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eeyy[14] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22434 * C108 + C22437 + C22437 + C141468 * C419 + C22435 * C823 +
              C22438 + C22438 + C141358 * C1171) *
                 C5863 +
             (C22471 + C22472) * C141221) *
                C141469 +
            ((C40492 + C40493) * C5863 + C40478 * C141221) * C141384) *
               C1596 -
           (((C40494 + C40495) * C141221 +
             (C22435 * C13301 + C29547 + C29547 + C141358 * C13635 +
              C22434 * C5325 + C29546 + C29546 + C141468 * C5561) *
                 C5863) *
                C141384 +
            (C40483 * C141221 + (C40493 + C40492) * C5863) * C141469) *
               C141487) *
              C2374 +
          ((((C43826 + C43827) * C5863 + (C39215 + C39214) * C141221) *
                C141469 +
            ((C22434 * C13301 + C43818 + C43818 + C141468 * C13635 +
              C22435 * C13303 + C43819 + C43819 + C141358 * C13636) *
                 C5863 +
             (C22434 * C13302 + C43820 + C43820 + C141468 * C13637 +
              C22435 * C13304 + C43821 + C43821 + C141358 * C13638) *
                 C141221) *
                C141384) *
               C141487 -
           (((C39214 + C39215) * C141221 + (C43827 + C43826) * C5863) *
                C141384 +
            ((C23442 + C23443) * C141221 +
             (C22435 * C2960 + C23428 + C23428 + C141358 * C3196 +
              C22434 * C823 + C23429 + C23429 + C141468 * C1171) *
                 C5863) *
                C141469) *
               C1596) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eeyz[14] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30075 * C108 + C141469 * C276 + C30076 * C1601 +
              C141384 * C1784) *
                 C22172 +
             (C30075 * C189 + C141469 * C501 + C30076 * C1690 +
              C141384 * C2040) *
                 C141468 +
             (C38926 + C38927) * C22173 + (C39356 + C39357) * C141358) *
                C5863 +
            ((C30102 + C30103) * C22172 + (C30351 + C30352) * C141468 +
             C38914 * C22173 + C39350 * C141358) *
                C141221) *
               C1596 -
           (((C40630 + C40631) * C141358 + (C40212 + C40213) * C22173 +
             (C32318 + C32319) * C141468 + (C31970 + C31971) * C22172) *
                C141221 +
            ((C43962 + C43963) * C141358 + (C43548 + C43549) * C22173 +
             (C30076 * C5391 + C141384 * C5619 + C30075 * C1690 +
              C141469 * C2040) *
                 C141468 +
             (C30076 * C5325 + C141384 * C5449 + C30075 * C1601 +
              C141469 * C1784) *
                 C22172) *
                C5863) *
               C141487) *
              C2374 +
          ((((C43549 + C43548) * C22172 + (C43963 + C43962) * C141468 +
             (C30075 * C7887 + C141469 * C8128 + C30076 * C13303 +
              C141384 * C13477) *
                 C22173 +
             (C30075 * C8006 + C141469 * C8470 + C30076 * C13394 +
              C141384 * C13720) *
                 C141358) *
                C5863 +
            ((C40213 + C40212) * C22172 + (C40631 + C40630) * C141468 +
             (C30075 * C7886 + C141469 * C8127 + C30076 * C13304 +
              C141384 * C13478) *
                 C22173 +
             (C30075 * C8005 + C141469 * C8469 + C30076 * C13396 +
              C141384 * C13722) *
                 C141358) *
                C141221) *
               C141487 -
           (((C39358 + C39359) * C141358 + (C38932 + C38933) * C22173 +
             C39355 * C141468 + C38925 * C22172) *
                C141221 +
            ((C42824 + C42825) * C141358 + (C42520 + C42521) * C22173 +
             (C39357 + C39356) * C141468 + (C38927 + C38926) * C22172) *
                C5863) *
               C1596) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eezx[14] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C141221 * C115) *
                 C30075 +
             (C5869 * C276 + C5863 * C579 + C5871 * C277 + C141221 * C580) *
                 C141469 +
             (C16308 + C16309) * C30076 + (C16678 + C16679) * C141384) *
                C141468 +
            ((C7175 + C7176) * C30075 + (C7549 + C7550) * C141469 +
             C43680 * C30076 + C44094 * C141384) *
                C141358) *
               C1596 -
           (((C19258 + C19257) * C141384 + (C18934 + C18933) * C30076 +
             C44095 * C141469 + C43683 * C30075) *
                C141358 +
            ((C16681 + C16680) * C141384 + (C16313 + C16312) * C30076 +
             (C16679 + C16678) * C141469 + (C16309 + C16308) * C30075) *
                C141468) *
               C141487) *
              C2374 +
          (((C43680 * C30075 + C44094 * C141469 + (C18933 + C18934) * C30076 +
             (C19257 + C19258) * C141384) *
                C141468 +
            ((C10923 + C10922) * C30075 + (C11249 + C11248) * C141469 +
             (C5869 * C13303 + C5863 * C13307 + C5871 * C13304 +
              C141221 * C13308) *
                 C30076 +
             (C5869 * C13477 + C5863 * C13799 + C5871 * C13478 +
              C141221 * C13800) *
                 C141384) *
                C141358) *
               C141487 -
           (((C11248 + C11249) * C141384 + (C10922 + C10923) * C30076 +
             (C7552 + C7551) * C141469 + (C7180 + C7179) * C30075) *
                C141358 +
            (C44095 * C141384 + C43683 * C30076 + (C7550 + C7549) * C141469 +
             (C7176 + C7175) * C30075) *
                C141468) *
               C1596) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eezy[14] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22172 * C108 + C141468 * C189 + C22173 * C823 + C141358 * C912) *
                 C30075 +
             (C22172 * C276 + C141468 * C635 + C22173 * C1006 +
              C141358 * C1419) *
                 C141469 +
             (C40064 + C40065) * C30076 + (C40902 + C40903) * C141384) *
                C5863 +
            ((C22199 + C22200) * C30075 + (C22728 + C22729) * C141469 +
             C40052 * C30076 + C40896 * C141384) *
                C141221) *
               C1596 -
           (((C40904 + C40905) * C141384 + (C40070 + C40071) * C30076 +
             C40901 * C141469 + C40063 * C30075) *
                C141221 +
            ((C22173 * C13475 + C141358 * C13875 + C22172 * C5449 +
              C141468 * C5727) *
                 C141384 +
             (C22173 * C13301 + C141358 * C13393 + C22172 * C5325 +
              C141468 * C5391) *
                 C30076 +
             (C40903 + C40902) * C141469 + (C40065 + C40064) * C30075) *
                C5863) *
               C141487) *
              C2374 +
          ((((C43404 + C43405) * C30075 + (C44230 + C44231) * C141469 +
             (C22172 * C13301 + C141468 * C13393 + C22173 * C13303 +
              C141358 * C13394) *
                 C30076 +
             (C22172 * C13475 + C141468 * C13875 + C22173 * C13477 +
              C141358 * C13876) *
                 C141384) *
                C5863 +
            ((C38775 + C38774) * C30075 + (C39631 + C39630) * C141469 +
             (C22172 * C13302 + C141468 * C13395 + C22173 * C13304 +
              C141358 * C13396) *
                 C30076 +
             (C22172 * C13476 + C141468 * C13877 + C22173 * C13478 +
              C141358 * C13878) *
                 C141384) *
                C141221) *
               C141487 -
           (((C39630 + C39631) * C141384 + (C38774 + C38775) * C30076 +
             (C23774 + C23775) * C141469 + (C23072 + C23073) * C30075) *
                C141221 +
            ((C44231 + C44230) * C141384 + (C43405 + C43404) * C30076 +
             (C22173 * C3084 + C141358 * C3362 + C22172 * C1006 +
              C141468 * C1419) *
                 C141469 +
             (C22173 * C2960 + C141358 * C3026 + C22172 * C823 +
              C141468 * C912) *
                 C30075) *
                C5863) *
               C1596) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eezz[14] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30596 * C108 + C30599 + C30599 + C141469 * C714 +
              C30597 * C1601 + C30600 + C30600 + C141384 * C2283) *
                 C141468 +
             (C39780 + C39781) * C141358) *
                C5863 +
            ((C30633 + C30634) * C141468 + C39766 * C141358) * C141221) *
               C1596 -
           (((C41044 + C41045) * C141358 + (C32666 + C32667) * C141468) *
                C141221 +
            ((C44374 + C44375) * C141358 +
             (C30597 * C5325 + C32652 + C32652 + C141384 * C5781 +
              C30596 * C1601 + C32653 + C32653 + C141469 * C2283) *
                 C141468) *
                C5863) *
               C141487) *
              C2374 +
          ((((C44375 + C44374) * C141468 +
             (C30596 * C7887 + C44366 + C44366 + C141469 * C8794 +
              C30597 * C13303 + C44367 + C44367 + C141384 * C13954) *
                 C141358) *
                C5863 +
            ((C41045 + C41044) * C141468 +
             (C30596 * C7886 + C44368 + C44368 + C141469 * C8793 +
              C30597 * C13304 + C44369 + C44369 + C141384 * C13956) *
                 C141358) *
                C141221) *
               C141487 -
           (((C39782 + C39783) * C141358 + C39771 * C141468) * C141221 +
            ((C43132 + C43133) * C141358 + (C39781 + C39780) * C141468) *
                C5863) *
               C1596) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eexx[15] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5868 * C108 + C5873 + C5873 + C5863 * C120 + C5870 * C109 +
              C5874 + C5874 + C141221 * C121) *
                 C141469 +
             (C15907 + C15908) * C141384) *
                C141468 +
            ((C6774 + C6775) * C141469 + C43264 * C141384) * C141358) *
               C4148 -
           (((C18600 + C18599) * C141384 + C43265 * C141469) * C141358 +
            ((C15910 + C15909) * C141384 + (C15908 + C15907) * C141469) *
                C141468) *
               C141487) *
              C141277 * C2376 +
          ((((C15911 + C15912) * C141469 + (C15913 + C15914) * C141384) *
                C141468 +
            ((C38632 + C38633) * C141469 +
             (C5868 * C13302 + C14880 + C14880 + C5863 * C13310 +
              C5870 * C14876 + C14881 + C14881 + C141221 * C14878) *
                 C141384) *
                C141358) *
               C141487 -
           (((C38633 + C38632) * C141384 + (C6779 + C6778) * C141469) *
                C141358 +
            ((C15912 + C15911) * C141384 +
             (C5870 * C110 + C5883 + C5883 + C141221 * C122 + C5868 * C109 +
              C5884 + C5884 + C5863 * C121) *
                 C141469) *
                C141468) *
               C4148) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eexy[15] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22172 * C108 + C141468 * C189 + C22173 * C823 + C141358 * C912) *
                 C5869 +
             (C22172 * C114 + C141468 * C195 + C22173 * C828 + C141358 * C917) *
                 C5863 +
             (C22199 + C22200) * C5871 + (C22201 + C22202) * C141221) *
                C141469 +
            ((C40064 + C40065) * C5869 + (C40066 + C40067) * C5863 +
             C40052 * C5871 + C40053 * C141221) *
                C141384) *
               C4148 -
           (((C40068 + C40069) * C141221 + (C40070 + C40071) * C5871 +
             (C22173 * C13305 + C141358 * C13397 + C22172 * C5329 +
              C141468 * C5395) *
                 C5863 +
             (C22173 * C13301 + C141358 * C13393 + C22172 * C5325 +
              C141468 * C5391) *
                 C5869) *
                C141384 +
            (C40062 * C141221 + C40063 * C5871 + (C40067 + C40066) * C5863 +
             (C40065 + C40064) * C5869) *
                C141469) *
               C141487) *
              C141277 * C2376 +
          (((C40052 * C5869 + C40053 * C5863 + (C24105 + C24104) * C5871 +
             (C24103 + C24102) * C141221) *
                C141469 +
            ((C40071 + C40070) * C5869 + (C40069 + C40068) * C5863 +
             (C22172 * C5327 + C141468 * C5393 + C22173 * C14876 +
              C141358 * C14979) *
                 C5871 +
             (C22172 * C5331 + C141468 * C5397 + C22173 * C14877 +
              C141358 * C14980) *
                 C141221) *
                C141384) *
               C141487 -
           (((C24102 + C24103) * C141221 + (C24104 + C24105) * C5871 +
             C40062 * C5863 + C40063 * C5869) *
                C141384 +
            ((C22206 + C22205) * C141221 + (C22204 + C22203) * C5871 +
             (C22202 + C22201) * C5863 + (C22200 + C22199) * C5869) *
                C141469) *
               C4148) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eexz[15] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30075 * C108 + C141469 * C276 + C30076 * C1601 +
              C141384 * C1784) *
                 C5869 +
             (C30075 * C114 + C141469 * C282 + C30076 * C1606 +
              C141384 * C1789) *
                 C5863 +
             (C30102 + C30103) * C5871 + (C30104 + C30105) * C141221) *
                C141468 +
            ((C38926 + C38927) * C5869 + (C38928 + C38929) * C5863 +
             C38914 * C5871 + C38915 * C141221) *
                C141358) *
               C4148 -
           (((C40210 + C40211) * C141221 + (C40212 + C40213) * C5871 +
             (C43546 + C43547) * C5863 + (C43548 + C43549) * C5869) *
                C141358 +
            ((C31968 + C31969) * C141221 + (C31970 + C31971) * C5871 +
             (C30076 * C5329 + C141384 * C5453 + C30075 * C1606 +
              C141469 * C1789) *
                 C5863 +
             (C30076 * C5325 + C141384 * C5449 + C30075 * C1601 +
              C141469 * C1784) *
                 C5869) *
                C141468) *
               C141487) *
              C141277 * C2376 +
          ((((C31971 + C31970) * C5869 + (C31969 + C31968) * C5863 +
             (C31967 + C31966) * C5871 + (C31965 + C31964) * C141221) *
                C141468 +
            ((C40213 + C40212) * C5869 + (C40211 + C40210) * C5863 +
             (C30075 * C3492 + C141469 * C3648 + C30076 * C14876 +
              C141384 * C15091) *
                 C5871 +
             (C30075 * C3496 + C141469 * C3652 + C30076 * C14877 +
              C141384 * C15092) *
                 C141221) *
                C141358) *
               C141487 -
           (((C30957 + C30958) * C141221 + (C30959 + C30960) * C5871 +
             C38924 * C5863 + C38925 * C5869) *
                C141358 +
            ((C30109 + C30108) * C141221 + (C30107 + C30106) * C5871 +
             (C30105 + C30104) * C5863 + (C30103 + C30102) * C5869) *
                C141468) *
               C4148) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[15] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C141221 * C115) *
                 C22172 +
             (C5869 * C189 + C5863 * C362 + C5871 * C190 + C141221 * C363) *
                 C141468 +
             (C7175 + C7176) * C22173 + (C7177 + C7178) * C141358) *
                C141469 +
            ((C16308 + C16309) * C22172 + (C16310 + C16311) * C141468 +
             C43680 * C22173 + C43681 * C141358) *
                C141384) *
               C4148 -
           (((C18936 + C18935) * C141358 + (C18934 + C18933) * C22173 +
             (C16315 + C16314) * C141468 + (C16313 + C16312) * C22172) *
                C141384 +
            (C43682 * C141358 + C43683 * C22173 + (C16311 + C16310) * C141468 +
             (C16309 + C16308) * C22172) *
                C141469) *
               C141487) *
              C141277 * C2376 +
          ((((C16316 + C16317) * C22172 + (C16318 + C16319) * C141468 +
             (C39072 + C39073) * C22173 + (C39074 + C39075) * C141358) *
                C141469 +
            ((C16320 + C16321) * C22172 + (C16322 + C16323) * C141468 +
             (C5869 * C13302 + C5863 * C13306 + C5871 * C14876 +
              C141221 * C14877) *
                 C22173 +
             (C5869 * C13395 + C5863 * C13558 + C5871 * C14979 +
              C141221 * C15209) *
                 C141358) *
                C141384) *
               C141487 -
           (((C39075 + C39074) * C141358 + (C39073 + C39072) * C22173 +
             (C16319 + C16318) * C141468 + (C16317 + C16316) * C22172) *
                C141384 +
            ((C7186 + C7185) * C141358 + (C7184 + C7183) * C22173 +
             (C5871 * C191 + C141221 * C364 + C5869 * C190 + C5863 * C363) *
                 C141468 +
             (C5871 * C110 + C141221 * C116 + C5869 * C109 + C5863 * C115) *
                 C22172) *
                C141469) *
               C4148) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[15] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22434 * C108 + C22437 + C22437 + C141468 * C419 + C22435 * C823 +
              C22438 + C22438 + C141358 * C1171) *
                 C5863 +
             (C22471 + C22472) * C141221) *
                C141469 +
            ((C40492 + C40493) * C5863 + C40478 * C141221) * C141384) *
               C4148 -
           (((C40494 + C40495) * C141221 +
             (C22435 * C13301 + C29547 + C29547 + C141358 * C13635 +
              C22434 * C5325 + C29546 + C29546 + C141468 * C5561) *
                 C5863) *
                C141384 +
            (C40483 * C141221 + (C40493 + C40492) * C5863) * C141469) *
               C141487) *
              C141277 * C2376 +
          (((C40478 * C5863 + (C24435 + C24434) * C141221) * C141469 +
            ((C40495 + C40494) * C5863 +
             (C22434 * C5327 + C29550 + C29550 + C141468 * C5563 +
              C22435 * C14876 + C29551 + C29551 + C141358 * C15308) *
                 C141221) *
                C141384) *
               C141487 -
           (((C24434 + C24435) * C141221 + C40483 * C5863) * C141384 +
            ((C22474 + C22473) * C141221 + (C22472 + C22471) * C5863) *
                C141469) *
               C4148) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[15] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30075 * C108 + C141469 * C276 + C30076 * C1601 +
              C141384 * C1784) *
                 C22172 +
             (C30075 * C189 + C141469 * C501 + C30076 * C1690 +
              C141384 * C2040) *
                 C141468 +
             (C38926 + C38927) * C22173 + (C39356 + C39357) * C141358) *
                C5863 +
            ((C30102 + C30103) * C22172 + (C30351 + C30352) * C141468 +
             C38914 * C22173 + C39350 * C141358) *
                C141221) *
               C4148 -
           (((C40630 + C40631) * C141358 + (C40212 + C40213) * C22173 +
             (C32318 + C32319) * C141468 + (C31970 + C31971) * C22172) *
                C141221 +
            ((C43962 + C43963) * C141358 + (C43548 + C43549) * C22173 +
             (C30076 * C5391 + C141384 * C5619 + C30075 * C1690 +
              C141469 * C2040) *
                 C141468 +
             (C30076 * C5325 + C141384 * C5449 + C30075 * C1601 +
              C141469 * C1784) *
                 C22172) *
                C5863) *
               C141487) *
              C141277 * C2376 +
          ((((C31971 + C31970) * C22172 + (C32319 + C32318) * C141468 +
             (C40213 + C40212) * C22173 + (C40631 + C40630) * C141358) *
                C5863 +
            ((C31967 + C31966) * C22172 + (C32317 + C32316) * C141468 +
             (C30075 * C3492 + C141469 * C3648 + C30076 * C14876 +
              C141384 * C15091) *
                 C22173 +
             (C30075 * C3574 + C141469 * C3866 + C30076 * C14979 +
              C141384 * C15420) *
                 C141358) *
                C141221) *
               C141487 -
           (((C31272 + C31273) * C141358 + (C30959 + C30960) * C22173 +
             (C30354 + C30353) * C141468 + (C30107 + C30106) * C22172) *
                C141221 +
            (C39355 * C141358 + C38925 * C22173 + (C30352 + C30351) * C141468 +
             (C30103 + C30102) * C22172) *
                C5863) *
               C4148) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eezx[15] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C141221 * C115) *
                 C30075 +
             (C5869 * C276 + C5863 * C579 + C5871 * C277 + C141221 * C580) *
                 C141469 +
             (C16308 + C16309) * C30076 + (C16678 + C16679) * C141384) *
                C141468 +
            ((C7175 + C7176) * C30075 + (C7549 + C7550) * C141469 +
             C43680 * C30076 + C44094 * C141384) *
                C141358) *
               C4148 -
           (((C19258 + C19257) * C141384 + (C18934 + C18933) * C30076 +
             C44095 * C141469 + C43683 * C30075) *
                C141358 +
            ((C16681 + C16680) * C141384 + (C16313 + C16312) * C30076 +
             (C16679 + C16678) * C141469 + (C16309 + C16308) * C30075) *
                C141468) *
               C141487) *
              C141277 * C2376 +
          ((((C16316 + C16317) * C30075 + (C16682 + C16683) * C141469 +
             (C16320 + C16321) * C30076 + (C16684 + C16685) * C141384) *
                C141468 +
            ((C39072 + C39073) * C30075 + (C39494 + C39495) * C141469 +
             (C5869 * C13302 + C5863 * C13306 + C5871 * C14876 +
              C141221 * C14877) *
                 C30076 +
             (C5869 * C13476 + C5863 * C13798 + C5871 * C15091 +
              C141221 * C15528) *
                 C141384) *
                C141358) *
               C141487 -
           (((C39495 + C39494) * C141384 + (C39073 + C39072) * C30076 +
             (C7554 + C7553) * C141469 + (C7184 + C7183) * C30075) *
                C141358 +
            ((C16683 + C16682) * C141384 + (C16317 + C16316) * C30076 +
             (C5871 * C278 + C141221 * C581 + C5869 * C277 + C5863 * C580) *
                 C141469 +
             (C5871 * C110 + C141221 * C116 + C5869 * C109 + C5863 * C115) *
                 C30075) *
                C141468) *
               C4148) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eezy[15] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22172 * C108 + C141468 * C189 + C22173 * C823 + C141358 * C912) *
                 C30075 +
             (C22172 * C276 + C141468 * C635 + C22173 * C1006 +
              C141358 * C1419) *
                 C141469 +
             (C40064 + C40065) * C30076 + (C40902 + C40903) * C141384) *
                C5863 +
            ((C22199 + C22200) * C30075 + (C22728 + C22729) * C141469 +
             C40052 * C30076 + C40896 * C141384) *
                C141221) *
               C4148 -
           (((C40904 + C40905) * C141384 + (C40070 + C40071) * C30076 +
             C40901 * C141469 + C40063 * C30075) *
                C141221 +
            ((C22173 * C13475 + C141358 * C13875 + C22172 * C5449 +
              C141468 * C5727) *
                 C141384 +
             (C22173 * C13301 + C141358 * C13393 + C22172 * C5325 +
              C141468 * C5391) *
                 C30076 +
             (C40903 + C40902) * C141469 + (C40065 + C40064) * C30075) *
                C5863) *
               C141487) *
              C141277 * C2376 +
          (((C40052 * C30075 + C40896 * C141469 + (C40071 + C40070) * C30076 +
             (C40905 + C40904) * C141384) *
                C5863 +
            ((C24105 + C24104) * C30075 + (C24752 + C24751) * C141469 +
             (C22172 * C5327 + C141468 * C5393 + C22173 * C14876 +
              C141358 * C14979) *
                 C30076 +
             (C22172 * C5451 + C141468 * C5729 + C22173 * C15091 +
              C141358 * C15627) *
                 C141384) *
                C141221) *
               C141487 -
           (((C24751 + C24752) * C141384 + (C24104 + C24105) * C30076 +
             (C22731 + C22730) * C141469 + (C22204 + C22203) * C30075) *
                C141221 +
            (C40901 * C141384 + C40063 * C30076 + (C22729 + C22728) * C141469 +
             (C22200 + C22199) * C30075) *
                C5863) *
               C4148) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eezz[15] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30596 * C108 + C30599 + C30599 + C141469 * C714 +
              C30597 * C1601 + C30600 + C30600 + C141384 * C2283) *
                 C141468 +
             (C39780 + C39781) * C141358) *
                C5863 +
            ((C30633 + C30634) * C141468 + C39766 * C141358) * C141221) *
               C4148 -
           (((C41044 + C41045) * C141358 + (C32666 + C32667) * C141468) *
                C141221 +
            ((C44374 + C44375) * C141358 +
             (C30597 * C5325 + C32652 + C32652 + C141384 * C5781 +
              C30596 * C1601 + C32653 + C32653 + C141469 * C2283) *
                 C141468) *
                C5863) *
               C141487) *
              C141277 * C2376 +
          ((((C32667 + C32666) * C141468 + (C41045 + C41044) * C141358) *
                C5863 +
            ((C32665 + C32664) * C141468 +
             (C30596 * C3492 + C35118 + C35118 + C141469 * C4076 +
              C30597 * C14876 + C35119 + C35119 + C141384 * C15738) *
                 C141358) *
                C141221) *
               C141487 -
           (((C31605 + C31606) * C141358 + (C30636 + C30635) * C141468) *
                C141221 +
            (C39771 * C141358 + (C30634 + C30633) * C141468) * C5863) *
               C4148) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eexx[16] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5868 * C108 + C5873 + C5873 + C5863 * C120 + C5870 * C109 +
              C5874 + C5874 + C141221 * C121) *
                 C141469 +
             (C15907 + C15908) * C141384) *
                C141468 +
            ((C6774 + C6775) * C141469 + C43264 * C141384) * C141358) *
               C4148 -
           (((C18600 + C18599) * C141384 + C43265 * C141469) * C141358 +
            ((C15910 + C15909) * C141384 + (C15908 + C15907) * C141469) *
                C141468) *
               C141487) *
              C816 +
          (((C43264 * C141469 + (C18599 + C18600) * C141384) * C141468 +
            ((C10577 + C10576) * C141469 +
             (C5868 * C13303 + C13318 + C13318 + C5863 * C13311 +
              C5870 * C13304 + C13319 + C13319 + C141221 * C13312) *
                 C141384) *
                C141358) *
               C141487 -
           (((C10576 + C10577) * C141384 + (C6777 + C6776) * C141469) *
                C141358 +
            (C43265 * C141384 + (C6775 + C6774) * C141469) * C141468) *
               C4148) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eexy[16] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22172 * C108 + C141468 * C189 + C22173 * C823 + C141358 * C912) *
                 C5869 +
             (C22172 * C114 + C141468 * C195 + C22173 * C828 + C141358 * C917) *
                 C5863 +
             (C22199 + C22200) * C5871 + (C22201 + C22202) * C141221) *
                C141469 +
            ((C40064 + C40065) * C5869 + (C40066 + C40067) * C5863 +
             C40052 * C5871 + C40053 * C141221) *
                C141384) *
               C4148 -
           (((C40068 + C40069) * C141221 + (C40070 + C40071) * C5871 +
             (C22173 * C13305 + C141358 * C13397 + C22172 * C5329 +
              C141468 * C5395) *
                 C5863 +
             (C22173 * C13301 + C141358 * C13393 + C22172 * C5325 +
              C141468 * C5391) *
                 C5869) *
                C141384 +
            (C40062 * C141221 + C40063 * C5871 + (C40067 + C40066) * C5863 +
             (C40065 + C40064) * C5869) *
                C141469) *
               C141487) *
              C816 +
          ((((C43404 + C43405) * C5869 + (C43406 + C43407) * C5863 +
             (C38775 + C38774) * C5871 + (C38773 + C38772) * C141221) *
                C141469 +
            ((C22172 * C13301 + C141468 * C13393 + C22173 * C13303 +
              C141358 * C13394) *
                 C5869 +
             (C22172 * C13305 + C141468 * C13397 + C22173 * C13307 +
              C141358 * C13398) *
                 C5863 +
             (C22172 * C13302 + C141468 * C13395 + C22173 * C13304 +
              C141358 * C13396) *
                 C5871 +
             (C22172 * C13306 + C141468 * C13399 + C22173 * C13308 +
              C141358 * C13400) *
                 C141221) *
                C141384) *
               C141487 -
           (((C38772 + C38773) * C141221 + (C38774 + C38775) * C5871 +
             (C43407 + C43406) * C5863 + (C43405 + C43404) * C5869) *
                C141384 +
            ((C23070 + C23071) * C141221 + (C23072 + C23073) * C5871 +
             (C22173 * C2964 + C141358 * C3030 + C22172 * C828 +
              C141468 * C917) *
                 C5863 +
             (C22173 * C2960 + C141358 * C3026 + C22172 * C823 +
              C141468 * C912) *
                 C5869) *
                C141469) *
               C4148) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eexz[16] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30075 * C108 + C141469 * C276 + C30076 * C1601 +
              C141384 * C1784) *
                 C5869 +
             (C30075 * C114 + C141469 * C282 + C30076 * C1606 +
              C141384 * C1789) *
                 C5863 +
             (C30102 + C30103) * C5871 + (C30104 + C30105) * C141221) *
                C141468 +
            ((C38926 + C38927) * C5869 + (C38928 + C38929) * C5863 +
             C38914 * C5871 + C38915 * C141221) *
                C141358) *
               C4148 -
           (((C40210 + C40211) * C141221 + (C40212 + C40213) * C5871 +
             (C43546 + C43547) * C5863 + (C43548 + C43549) * C5869) *
                C141358 +
            ((C31968 + C31969) * C141221 + (C31970 + C31971) * C5871 +
             (C30076 * C5329 + C141384 * C5453 + C30075 * C1606 +
              C141469 * C1789) *
                 C5863 +
             (C30076 * C5325 + C141384 * C5449 + C30075 * C1601 +
              C141469 * C1784) *
                 C5869) *
                C141468) *
               C141487) *
              C816 +
          ((((C43549 + C43548) * C5869 + (C43547 + C43546) * C5863 +
             (C40213 + C40212) * C5871 + (C40211 + C40210) * C141221) *
                C141468 +
            ((C30075 * C7887 + C141469 * C8128 + C30076 * C13303 +
              C141384 * C13477) *
                 C5869 +
             (C30075 * C7890 + C141469 * C8131 + C30076 * C13307 +
              C141384 * C13481) *
                 C5863 +
             (C30075 * C7886 + C141469 * C8127 + C30076 * C13304 +
              C141384 * C13478) *
                 C5871 +
             (C30075 * C7889 + C141469 * C8130 + C30076 * C13308 +
              C141384 * C13482) *
                 C141221) *
                C141358) *
               C141487 -
           (((C38930 + C38931) * C141221 + (C38932 + C38933) * C5871 +
             (C42518 + C42519) * C5863 + (C42520 + C42521) * C5869) *
                C141358 +
            (C38924 * C141221 + C38925 * C5871 + (C38929 + C38928) * C5863 +
             (C38927 + C38926) * C5869) *
                C141468) *
               C4148) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eeyx[16] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C141221 * C115) *
                 C22172 +
             (C5869 * C189 + C5863 * C362 + C5871 * C190 + C141221 * C363) *
                 C141468 +
             (C7175 + C7176) * C22173 + (C7177 + C7178) * C141358) *
                C141469 +
            ((C16308 + C16309) * C22172 + (C16310 + C16311) * C141468 +
             C43680 * C22173 + C43681 * C141358) *
                C141384) *
               C4148 -
           (((C18936 + C18935) * C141358 + (C18934 + C18933) * C22173 +
             (C16315 + C16314) * C141468 + (C16313 + C16312) * C22172) *
                C141384 +
            (C43682 * C141358 + C43683 * C22173 + (C16311 + C16310) * C141468 +
             (C16309 + C16308) * C22172) *
                C141469) *
               C141487) *
              C816 +
          (((C43680 * C22172 + C43681 * C141468 + (C10923 + C10922) * C22173 +
             (C10921 + C10920) * C141358) *
                C141469 +
            ((C18933 + C18934) * C22172 + (C18935 + C18936) * C141468 +
             (C5869 * C13303 + C5863 * C13307 + C5871 * C13304 +
              C141221 * C13308) *
                 C22173 +
             (C5869 * C13394 + C5863 * C13559 + C5871 * C13396 +
              C141221 * C13560) *
                 C141358) *
                C141384) *
               C141487 -
           (((C10920 + C10921) * C141358 + (C10922 + C10923) * C22173 +
             C43682 * C141468 + C43683 * C22172) *
                C141384 +
            ((C7182 + C7181) * C141358 + (C7180 + C7179) * C22173 +
             (C7178 + C7177) * C141468 + (C7176 + C7175) * C22172) *
                C141469) *
               C4148) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eeyy[16] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22434 * C108 + C22437 + C22437 + C141468 * C419 + C22435 * C823 +
              C22438 + C22438 + C141358 * C1171) *
                 C5863 +
             (C22471 + C22472) * C141221) *
                C141469 +
            ((C40492 + C40493) * C5863 + C40478 * C141221) * C141384) *
               C4148 -
           (((C40494 + C40495) * C141221 +
             (C22435 * C13301 + C29547 + C29547 + C141358 * C13635 +
              C22434 * C5325 + C29546 + C29546 + C141468 * C5561) *
                 C5863) *
                C141384 +
            (C40483 * C141221 + (C40493 + C40492) * C5863) * C141469) *
               C141487) *
              C816 +
          ((((C43826 + C43827) * C5863 + (C39215 + C39214) * C141221) *
                C141469 +
            ((C22434 * C13301 + C43818 + C43818 + C141468 * C13635 +
              C22435 * C13303 + C43819 + C43819 + C141358 * C13636) *
                 C5863 +
             (C22434 * C13302 + C43820 + C43820 + C141468 * C13637 +
              C22435 * C13304 + C43821 + C43821 + C141358 * C13638) *
                 C141221) *
                C141384) *
               C141487 -
           (((C39214 + C39215) * C141221 + (C43827 + C43826) * C5863) *
                C141384 +
            ((C23442 + C23443) * C141221 +
             (C22435 * C2960 + C23428 + C23428 + C141358 * C3196 +
              C22434 * C823 + C23429 + C23429 + C141468 * C1171) *
                 C5863) *
                C141469) *
               C4148) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eeyz[16] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30075 * C108 + C141469 * C276 + C30076 * C1601 +
              C141384 * C1784) *
                 C22172 +
             (C30075 * C189 + C141469 * C501 + C30076 * C1690 +
              C141384 * C2040) *
                 C141468 +
             (C38926 + C38927) * C22173 + (C39356 + C39357) * C141358) *
                C5863 +
            ((C30102 + C30103) * C22172 + (C30351 + C30352) * C141468 +
             C38914 * C22173 + C39350 * C141358) *
                C141221) *
               C4148 -
           (((C40630 + C40631) * C141358 + (C40212 + C40213) * C22173 +
             (C32318 + C32319) * C141468 + (C31970 + C31971) * C22172) *
                C141221 +
            ((C43962 + C43963) * C141358 + (C43548 + C43549) * C22173 +
             (C30076 * C5391 + C141384 * C5619 + C30075 * C1690 +
              C141469 * C2040) *
                 C141468 +
             (C30076 * C5325 + C141384 * C5449 + C30075 * C1601 +
              C141469 * C1784) *
                 C22172) *
                C5863) *
               C141487) *
              C816 +
          ((((C43549 + C43548) * C22172 + (C43963 + C43962) * C141468 +
             (C30075 * C7887 + C141469 * C8128 + C30076 * C13303 +
              C141384 * C13477) *
                 C22173 +
             (C30075 * C8006 + C141469 * C8470 + C30076 * C13394 +
              C141384 * C13720) *
                 C141358) *
                C5863 +
            ((C40213 + C40212) * C22172 + (C40631 + C40630) * C141468 +
             (C30075 * C7886 + C141469 * C8127 + C30076 * C13304 +
              C141384 * C13478) *
                 C22173 +
             (C30075 * C8005 + C141469 * C8469 + C30076 * C13396 +
              C141384 * C13722) *
                 C141358) *
                C141221) *
               C141487 -
           (((C39358 + C39359) * C141358 + (C38932 + C38933) * C22173 +
             C39355 * C141468 + C38925 * C22172) *
                C141221 +
            ((C42824 + C42825) * C141358 + (C42520 + C42521) * C22173 +
             (C39357 + C39356) * C141468 + (C38927 + C38926) * C22172) *
                C5863) *
               C4148) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eezx[16] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C141221 * C115) *
                 C30075 +
             (C5869 * C276 + C5863 * C579 + C5871 * C277 + C141221 * C580) *
                 C141469 +
             (C16308 + C16309) * C30076 + (C16678 + C16679) * C141384) *
                C141468 +
            ((C7175 + C7176) * C30075 + (C7549 + C7550) * C141469 +
             C43680 * C30076 + C44094 * C141384) *
                C141358) *
               C4148 -
           (((C19258 + C19257) * C141384 + (C18934 + C18933) * C30076 +
             C44095 * C141469 + C43683 * C30075) *
                C141358 +
            ((C16681 + C16680) * C141384 + (C16313 + C16312) * C30076 +
             (C16679 + C16678) * C141469 + (C16309 + C16308) * C30075) *
                C141468) *
               C141487) *
              C816 +
          (((C43680 * C30075 + C44094 * C141469 + (C18933 + C18934) * C30076 +
             (C19257 + C19258) * C141384) *
                C141468 +
            ((C10923 + C10922) * C30075 + (C11249 + C11248) * C141469 +
             (C5869 * C13303 + C5863 * C13307 + C5871 * C13304 +
              C141221 * C13308) *
                 C30076 +
             (C5869 * C13477 + C5863 * C13799 + C5871 * C13478 +
              C141221 * C13800) *
                 C141384) *
                C141358) *
               C141487 -
           (((C11248 + C11249) * C141384 + (C10922 + C10923) * C30076 +
             (C7552 + C7551) * C141469 + (C7180 + C7179) * C30075) *
                C141358 +
            (C44095 * C141384 + C43683 * C30076 + (C7550 + C7549) * C141469 +
             (C7176 + C7175) * C30075) *
                C141468) *
               C4148) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eezy[16] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22172 * C108 + C141468 * C189 + C22173 * C823 + C141358 * C912) *
                 C30075 +
             (C22172 * C276 + C141468 * C635 + C22173 * C1006 +
              C141358 * C1419) *
                 C141469 +
             (C40064 + C40065) * C30076 + (C40902 + C40903) * C141384) *
                C5863 +
            ((C22199 + C22200) * C30075 + (C22728 + C22729) * C141469 +
             C40052 * C30076 + C40896 * C141384) *
                C141221) *
               C4148 -
           (((C40904 + C40905) * C141384 + (C40070 + C40071) * C30076 +
             C40901 * C141469 + C40063 * C30075) *
                C141221 +
            ((C22173 * C13475 + C141358 * C13875 + C22172 * C5449 +
              C141468 * C5727) *
                 C141384 +
             (C22173 * C13301 + C141358 * C13393 + C22172 * C5325 +
              C141468 * C5391) *
                 C30076 +
             (C40903 + C40902) * C141469 + (C40065 + C40064) * C30075) *
                C5863) *
               C141487) *
              C816 +
          ((((C43404 + C43405) * C30075 + (C44230 + C44231) * C141469 +
             (C22172 * C13301 + C141468 * C13393 + C22173 * C13303 +
              C141358 * C13394) *
                 C30076 +
             (C22172 * C13475 + C141468 * C13875 + C22173 * C13477 +
              C141358 * C13876) *
                 C141384) *
                C5863 +
            ((C38775 + C38774) * C30075 + (C39631 + C39630) * C141469 +
             (C22172 * C13302 + C141468 * C13395 + C22173 * C13304 +
              C141358 * C13396) *
                 C30076 +
             (C22172 * C13476 + C141468 * C13877 + C22173 * C13478 +
              C141358 * C13878) *
                 C141384) *
                C141221) *
               C141487 -
           (((C39630 + C39631) * C141384 + (C38774 + C38775) * C30076 +
             (C23774 + C23775) * C141469 + (C23072 + C23073) * C30075) *
                C141221 +
            ((C44231 + C44230) * C141384 + (C43405 + C43404) * C30076 +
             (C22173 * C3084 + C141358 * C3362 + C22172 * C1006 +
              C141468 * C1419) *
                 C141469 +
             (C22173 * C2960 + C141358 * C3026 + C22172 * C823 +
              C141468 * C912) *
                 C30075) *
                C5863) *
               C4148) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eezz[16] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30596 * C108 + C30599 + C30599 + C141469 * C714 +
              C30597 * C1601 + C30600 + C30600 + C141384 * C2283) *
                 C141468 +
             (C39780 + C39781) * C141358) *
                C5863 +
            ((C30633 + C30634) * C141468 + C39766 * C141358) * C141221) *
               C4148 -
           (((C41044 + C41045) * C141358 + (C32666 + C32667) * C141468) *
                C141221 +
            ((C44374 + C44375) * C141358 +
             (C30597 * C5325 + C32652 + C32652 + C141384 * C5781 +
              C30596 * C1601 + C32653 + C32653 + C141469 * C2283) *
                 C141468) *
                C5863) *
               C141487) *
              C816 +
          ((((C44375 + C44374) * C141468 +
             (C30596 * C7887 + C44366 + C44366 + C141469 * C8794 +
              C30597 * C13303 + C44367 + C44367 + C141384 * C13954) *
                 C141358) *
                C5863 +
            ((C41045 + C41044) * C141468 +
             (C30596 * C7886 + C44368 + C44368 + C141469 * C8793 +
              C30597 * C13304 + C44369 + C44369 + C141384 * C13956) *
                 C141358) *
                C141221) *
               C141487 -
           (((C39782 + C39783) * C141358 + C39771 * C141468) * C141221 +
            ((C43132 + C43133) * C141358 + (C39781 + C39780) * C141468) *
                C5863) *
               C4148) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eexx[17] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C5868 * C108 + C5873 + C5873 + C5863 * C120 + C5870 * C109 +
             C5874 + C5874 + C141221 * C121) *
                C141469 +
            (C15907 + C15908) * C141384) *
               C141468 +
           ((C6774 + C6775) * C141469 + C43264 * C141384) * C141358) *
              C5322 -
          (((C18600 + C18599) * C141384 + C43265 * C141469) * C141358 +
           ((C15910 + C15909) * C141384 + (C15908 + C15907) * C141469) *
               C141468) *
              C5323 +
          ((C21315 * C141469 + (C21327 + C21326) * C141384) * C141468 +
           ((C18599 + C18600) * C141469 +
            (C5868 * C18582 + C18593 + C18593 + C5863 * C18586 +
             C5870 * C18583 + C18594 + C18594 + C141221 * C18587) *
                C141384) *
               C141358) *
              C5324) *
         C141277 * C141243) /
        (p * q * std::sqrt(p + q));
    d2eexy[17] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C22172 * C108 + C141468 * C189 + C22173 * C823 + C141358 * C912) *
                C5869 +
            (C22172 * C114 + C141468 * C195 + C22173 * C828 + C141358 * C917) *
                C5863 +
            (C22199 + C22200) * C5871 + (C22201 + C22202) * C141221) *
               C141469 +
           ((C40064 + C40065) * C5869 + (C40066 + C40067) * C5863 +
            C40052 * C5871 + C40053 * C141221) *
               C141384) *
              C5322 -
          (((C40068 + C40069) * C141221 + (C40070 + C40071) * C5871 +
            (C46920 + C46921) * C5863 + (C46922 + C46923) * C5869) *
               C141384 +
           (C40062 * C141221 + C40063 * C5871 + (C40067 + C40066) * C5863 +
            (C40065 + C40064) * C5869) *
               C141469) *
              C5323 +
          (((C46923 + C46922) * C5869 + (C46921 + C46920) * C5863 +
            (C40071 + C40070) * C5871 + (C40069 + C40068) * C141221) *
               C141469 +
           ((C22172 * C15862 + C141468 * C16013 + C22173 * C18582 +
             C141358 * C18698) *
                C5869 +
            (C22172 * C15865 + C141468 * C16016 + C22173 * C18584 +
             C141358 * C18700) *
                C5863 +
            (C22172 * C15861 + C141468 * C16012 + C22173 * C18583 +
             C141358 * C18699) *
                C5871 +
            (C22172 * C15864 + C141468 * C16015 + C22173 * C18585 +
             C141358 * C18701) *
                C141221) *
               C141384) *
              C5324) *
         C141277 * C141243) /
        (p * q * std::sqrt(p + q));
    d2eexz[17] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C30075 * C108 + C141469 * C276 + C30076 * C1601 +
                       C141384 * C1784) *
                          C5869 +
                      (C30075 * C114 + C141469 * C282 + C30076 * C1606 +
                       C141384 * C1789) *
                          C5863 +
                      (C30102 + C30103) * C5871 + (C30104 + C30105) * C141221) *
                         C141468 +
                     ((C38926 + C38927) * C5869 + (C38928 + C38929) * C5863 +
                      C38914 * C5871 + C38915 * C141221) *
                         C141358) *
                        C5322 -
                    (((C40210 + C40211) * C141221 + (C40212 + C40213) * C5871 +
                      (C43546 + C43547) * C5863 + (C43548 + C43549) * C5869) *
                         C141358 +
                     ((C31968 + C31969) * C141221 + (C31970 + C31971) * C5871 +
                      (C30076 * C5329 + C141384 * C5453 + C30075 * C1606 +
                       C141469 * C1789) *
                          C5863 +
                      (C30076 * C5325 + C141384 * C5449 + C30075 * C1601 +
                       C141469 * C1784) *
                          C5869) *
                         C141468) *
                        C5323 +
                    (((C30075 * C5325 + C141469 * C5449 + C30076 * C15862 +
                       C141384 * C16151) *
                          C5869 +
                      (C30075 * C5329 + C141469 * C5453 + C30076 * C15865 +
                       C141384 * C16154) *
                          C5863 +
                      (C30075 * C5326 + C141469 * C5450 + C30076 * C15861 +
                       C141384 * C16150) *
                          C5871 +
                      (C30075 * C5330 + C141469 * C5454 + C30076 * C15864 +
                       C141384 * C16153) *
                          C141221) *
                         C141468 +
                     ((C30075 * C13301 + C141469 * C13475 + C30076 * C18582 +
                       C141384 * C18820) *
                          C5869 +
                      (C30075 * C13305 + C141469 * C13479 + C30076 * C18584 +
                       C141384 * C18822) *
                          C5863 +
                      (C30075 * C13302 + C141469 * C13476 + C30076 * C18583 +
                       C141384 * C18821) *
                          C5871 +
                      (C30075 * C13306 + C141469 * C13480 + C30076 * C18585 +
                       C141384 * C18823) *
                          C141221) *
                         C141358) *
                        C5324) *
                   C141277 * C141243) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[17] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C141221 * C115) *
                C22172 +
            (C5869 * C189 + C5863 * C362 + C5871 * C190 + C141221 * C363) *
                C141468 +
            (C7175 + C7176) * C22173 + (C7177 + C7178) * C141358) *
               C141469 +
           ((C16308 + C16309) * C22172 + (C16310 + C16311) * C141468 +
            C43680 * C22173 + C43681 * C141358) *
               C141384) *
              C5322 -
          (((C18936 + C18935) * C141358 + (C18934 + C18933) * C22173 +
            (C16315 + C16314) * C141468 + (C16313 + C16312) * C22172) *
               C141384 +
           (C43682 * C141358 + C43683 * C22173 + (C16311 + C16310) * C141468 +
            (C16309 + C16308) * C22172) *
               C141469) *
              C5323 +
          ((C21573 * C22172 + C21574 * C141468 + (C18933 + C18934) * C22173 +
            (C18935 + C18936) * C141358) *
               C141469 +
           ((C21588 + C21587) * C22172 + (C21586 + C21585) * C141468 +
            (C5869 * C18582 + C5863 * C18584 + C5871 * C18583 +
             C141221 * C18585) *
                C22173 +
            (C5869 * C18698 + C5863 * C18922 + C5871 * C18699 +
             C141221 * C18923) *
                C141358) *
               C141384) *
              C5324) *
         C141277 * C141243) /
        (p * q * std::sqrt(p + q));
    d2eeyy[17] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C22434 * C108 + C22437 + C22437 + C141468 * C419 + C22435 * C823 +
             C22438 + C22438 + C141358 * C1171) *
                C5863 +
            (C22471 + C22472) * C141221) *
               C141469 +
           ((C40492 + C40493) * C5863 + C40478 * C141221) * C141384) *
              C5322 -
          (((C40494 + C40495) * C141221 + (C47230 + C47231) * C5863) * C141384 +
           (C40483 * C141221 + (C40493 + C40492) * C5863) * C141469) *
              C5323 +
          (((C47231 + C47230) * C5863 + (C40495 + C40494) * C141221) * C141469 +
           ((C22434 * C15862 + C47222 + C47222 + C141468 * C16422 +
             C22435 * C18582 + C47223 + C47223 + C141358 * C19034) *
                C5863 +
            (C22434 * C15861 + C47224 + C47224 + C141468 * C16421 +
             C22435 * C18583 + C47225 + C47225 + C141358 * C19035) *
                C141221) *
               C141384) *
              C5324) *
         C141277 * C141243) /
        (p * q * std::sqrt(p + q));
    d2eeyz[17] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30075 * C108 + C141469 * C276 + C30076 * C1601 +
             C141384 * C1784) *
                C22172 +
            (C30075 * C189 + C141469 * C501 + C30076 * C1690 +
             C141384 * C2040) *
                C141468 +
            (C38926 + C38927) * C22173 + (C39356 + C39357) * C141358) *
               C5863 +
           ((C30102 + C30103) * C22172 + (C30351 + C30352) * C141468 +
            C38914 * C22173 + C39350 * C141358) *
               C141221) *
              C5322 -
          (((C40630 + C40631) * C141358 + (C40212 + C40213) * C22173 +
            (C32318 + C32319) * C141468 + (C31970 + C31971) * C22172) *
               C141221 +
           ((C43962 + C43963) * C141358 + (C43548 + C43549) * C22173 +
            (C30076 * C5391 + C141384 * C5619 + C30075 * C1690 +
             C141469 * C2040) *
                C141468 +
            (C30076 * C5325 + C141384 * C5449 + C30075 * C1601 +
             C141469 * C1784) *
                C22172) *
               C5863) *
              C5323 +
          (((C30075 * C5325 + C141469 * C5449 + C30076 * C15862 +
             C141384 * C16151) *
                C22172 +
            (C30075 * C5391 + C141469 * C5619 + C30076 * C16013 +
             C141384 * C16549) *
                C141468 +
            (C30075 * C13301 + C141469 * C13475 + C30076 * C18582 +
             C141384 * C18820) *
                C22173 +
            (C30075 * C13393 + C141469 * C13719 + C30076 * C18698 +
             C141384 * C19150) *
                C141358) *
               C5863 +
           ((C30075 * C5326 + C141469 * C5450 + C30076 * C15861 +
             C141384 * C16150) *
                C22172 +
            (C30075 * C5392 + C141469 * C5620 + C30076 * C16012 +
             C141384 * C16548) *
                C141468 +
            (C30075 * C13302 + C141469 * C13476 + C30076 * C18583 +
             C141384 * C18821) *
                C22173 +
            (C30075 * C13395 + C141469 * C13721 + C30076 * C18699 +
             C141384 * C19151) *
                C141358) *
               C141221) *
              C5324) *
         C141277 * C141243) /
        (p * q * std::sqrt(p + q));
    d2eezx[17] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C141221 * C115) *
                C30075 +
            (C5869 * C276 + C5863 * C579 + C5871 * C277 + C141221 * C580) *
                C141469 +
            (C16308 + C16309) * C30076 + (C16678 + C16679) * C141384) *
               C141468 +
           ((C7175 + C7176) * C30075 + (C7549 + C7550) * C141469 +
            C43680 * C30076 + C44094 * C141384) *
               C141358) *
              C5322 -
          (((C19258 + C19257) * C141384 + (C18934 + C18933) * C30076 +
            C44095 * C141469 + C43683 * C30075) *
               C141358 +
           ((C16681 + C16680) * C141384 + (C16313 + C16312) * C30076 +
            (C16679 + C16678) * C141469 + (C16309 + C16308) * C30075) *
               C141468) *
              C5323 +
          ((C21573 * C30075 + C21828 * C141469 + (C21588 + C21587) * C30076 +
            (C21834 + C21833) * C141384) *
               C141468 +
           ((C18933 + C18934) * C30075 + (C19257 + C19258) * C141469 +
            (C5869 * C18582 + C5863 * C18584 + C5871 * C18583 +
             C141221 * C18585) *
                C30076 +
            (C5869 * C18820 + C5863 * C19250 + C5871 * C18821 +
             C141221 * C19251) *
                C141384) *
               C141358) *
              C5324) *
         C141277 * C141243) /
        (p * q * std::sqrt(p + q));
    d2eezy[17] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C22172 * C108 + C141468 * C189 + C22173 * C823 + C141358 * C912) *
                C30075 +
            (C22172 * C276 + C141468 * C635 + C22173 * C1006 +
             C141358 * C1419) *
                C141469 +
            (C40064 + C40065) * C30076 + (C40902 + C40903) * C141384) *
               C5863 +
           ((C22199 + C22200) * C30075 + (C22728 + C22729) * C141469 +
            C40052 * C30076 + C40896 * C141384) *
               C141221) *
              C5322 -
          (((C40904 + C40905) * C141384 + (C40070 + C40071) * C30076 +
            C40901 * C141469 + C40063 * C30075) *
               C141221 +
           ((C47530 + C47531) * C141384 + (C46922 + C46923) * C30076 +
            (C40903 + C40902) * C141469 + (C40065 + C40064) * C30075) *
               C5863) *
              C5323 +
          (((C46923 + C46922) * C30075 + (C47531 + C47530) * C141469 +
            (C22172 * C15862 + C141468 * C16013 + C22173 * C18582 +
             C141358 * C18698) *
                C30076 +
            (C22172 * C16151 + C141468 * C16784 + C22173 * C18820 +
             C141358 * C19356) *
                C141384) *
               C5863 +
           ((C40071 + C40070) * C30075 + (C40905 + C40904) * C141469 +
            (C22172 * C15861 + C141468 * C16012 + C22173 * C18583 +
             C141358 * C18699) *
                C30076 +
            (C22172 * C16150 + C141468 * C16783 + C22173 * C18821 +
             C141358 * C19357) *
                C141384) *
               C141221) *
              C5324) *
         C141277 * C141243) /
        (p * q * std::sqrt(p + q));
    d2eezz[17] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30596 * C108 + C30599 + C30599 + C141469 * C714 + C30597 * C1601 +
             C30600 + C30600 + C141384 * C2283) *
                C141468 +
            (C39780 + C39781) * C141358) *
               C5863 +
           ((C30633 + C30634) * C141468 + C39766 * C141358) * C141221) *
              C5322 -
          (((C41044 + C41045) * C141358 + (C32666 + C32667) * C141468) *
               C141221 +
           ((C44374 + C44375) * C141358 +
            (C30597 * C5325 + C32652 + C32652 + C141384 * C5781 +
             C30596 * C1601 + C32653 + C32653 + C141469 * C2283) *
                C141468) *
               C5863) *
              C5323 +
          (((C30596 * C5325 + C37604 + C37604 + C141469 * C5781 +
             C30597 * C15862 + C37605 + C37605 + C141384 * C16900) *
                C141468 +
            (C30596 * C13301 + C47630 + C47630 + C141469 * C13953 +
             C30597 * C18582 + C47631 + C47631 + C141384 * C19462) *
                C141358) *
               C5863 +
           ((C30596 * C5326 + C37606 + C37606 + C141469 * C5782 +
             C30597 * C15861 + C37607 + C37607 + C141384 * C16899) *
                C141468 +
            (C30596 * C13302 + C47632 + C47632 + C141469 * C13955 +
             C30597 * C18583 + C47633 + C47633 + C141384 * C19463) *
                C141358) *
               C141221) *
              C5324) *
         C141277 * C141243) /
        (p * q * std::sqrt(p + q));
    d2eexx[18] += (-std::pow(Pi, 2.5) *
                   (((C5868 * C108 + C5873 + C5873 + C5863 * C120 +
                      C5870 * C109 + C5874 + C5874 + C141221 * C121) *
                         C141320 * C5865 +
                     (C5868 * C823 + C5875 + C5875 + C5863 * C833 +
                      C5870 * C822 + C5876 + C5876 + C141221 * C832) *
                         C141320 * C5866 +
                     (C5868 * C2960 + C5877 + C5877 + C5863 * C2968 +
                      C5870 * C2961 + C5878 + C5878 + C141221 * C2969) *
                         C141320 * C5867) *
                        C141294 * C141277 * C97 -
                    ((C5870 * C2962 + C5879 + C5879 + C141221 * C2970 +
                      C5868 * C2961 + C5880 + C5880 + C5863 * C2969) *
                         C141320 * C5867 +
                     (C5870 * C821 + C5881 + C5881 + C141221 * C831 +
                      C5868 * C822 + C5882 + C5882 + C5863 * C832) *
                         C141320 * C5866 +
                     (C5870 * C110 + C5883 + C5883 + C141221 * C122 +
                      C5868 * C109 + C5884 + C5884 + C5863 * C121) *
                         C141320 * C5865) *
                        C141294 * C141277 * C98 +
                    ((C5868 * C110 + C5885 + C5885 + C5863 * C122 +
                      C5870 * C111 + C5886 + C5886 + C141221 * C123) *
                         C141320 * C5865 +
                     (C5868 * C821 + C5887 + C5887 + C5863 * C831 +
                      C5870 * C820 + C5888 + C5888 + C141221 * C830) *
                         C141320 * C5866 +
                     (C5868 * C2962 + C5889 + C5889 + C5863 * C2970 +
                      C5870 * C2963 + C5890 + C5890 + C141221 * C2971) *
                         C141320 * C5867) *
                        C141294 * C141277 * C99)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   ((C100 * C108 + C127 + C127 + C89 * C120 + C102 * C109 +
                     C128 + C128 + C90 * C121 + C104 * C110 + C129 + C129 +
                     C91 * C122 + C106 * C111 + C130 + C130 + C92 * C123) *
                        C141320 * C141309 * C141294 * C141277 * C97 -
                    (C106 * C112 + C131 + C131 + C92 * C124 + C104 * C111 +
                     C132 + C132 + C91 * C123 + C102 * C110 + C133 + C133 +
                     C90 * C122 + C100 * C109 + C134 + C134 + C89 * C121) *
                        C141320 * C141309 * C141294 * C141277 * C98 +
                    (C100 * C110 + C135 + C135 + C89 * C122 + C102 * C111 +
                     C136 + C136 + C90 * C123 + C104 * C112 + C137 + C137 +
                     C91 * C124 + C106 * C113 + C138 + C138 + C92 * C125) *
                        C141320 * C141309 * C141294 * C141277 * C99)) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   (((C5868 * C108 + C5873 + C5873 + C5863 * C120 +
                      C5870 * C109 + C5874 + C5874 + C141221 * C121) *
                         C14035 +
                     (C5868 * C1601 + C7901 + C7901 + C5863 * C1611 +
                      C5870 * C1600 + C7900 + C7900 + C141221 * C1610) *
                         C14036 +
                     (C5868 * C5325 + C13314 + C13314 + C5863 * C5333 +
                      C5870 * C5326 + C13315 + C13315 + C141221 * C5334) *
                         C14037) *
                        C141309 * C141294 * C141277 * C97 -
                    ((C5870 * C5327 + C14039 + C14039 + C141221 * C5335 +
                      C5868 * C5326 + C14040 + C14040 + C5863 * C5334) *
                         C14037 +
                     (C5870 * C1599 + C7903 + C7903 + C141221 * C1609 +
                      C5868 * C1600 + C7902 + C7902 + C5863 * C1610) *
                         C14036 +
                     (C5870 * C110 + C5883 + C5883 + C141221 * C122 +
                      C5868 * C109 + C5884 + C5884 + C5863 * C121) *
                         C14035) *
                        C141309 * C141294 * C141277 * C98 +
                    ((C5868 * C110 + C5885 + C5885 + C5863 * C122 +
                      C5870 * C111 + C5886 + C5886 + C141221 * C123) *
                         C14035 +
                     (C5868 * C1599 + C14041 + C14041 + C5863 * C1609 +
                      C5870 * C1598 + C14042 + C14042 + C141221 * C1608) *
                         C14036 +
                     (C5868 * C5327 + C14043 + C14043 + C5863 * C5335 +
                      C5870 * C5328 + C14044 + C14044 + C141221 * C5336) *
                         C14037) *
                        C141309 * C141294 * C141277 * C99)) /
                      (p * q * std::sqrt(p + q));
    d2eexy[18] +=
        (-std::pow(Pi, 2.5) *
         (((C5964 * C108 + C5865 * C189 + C5965 * C823 + C5866 * C912 +
            C5966 * C2960 + C5867 * C3026) *
               C5869 +
           (C5964 * C114 + C5865 * C195 + C5965 * C828 + C5866 * C917 +
            C5966 * C2964 + C5867 * C3030) *
               C5863 +
           (C5992 + C5993 + C5994) * C5871 +
           (C5995 + C5996 + C5997) * C141221) *
              C141320 * C141294 * C141277 * C97 -
          ((C5998 + C5999 + C6000) * C141221 + (C6001 + C6002 + C6003) * C5871 +
           (C5997 + C5996 + C5995) * C5863 + (C5994 + C5993 + C5992) * C5869) *
              C141320 * C141294 * C141277 * C98 +
          ((C6003 + C6002 + C6001) * C5869 + (C6000 + C5999 + C5998) * C5863 +
           (C5964 * C111 + C5865 * C192 + C5965 * C820 + C5866 * C909 +
            C5966 * C2963 + C5867 * C3029) *
               C5871 +
           (C5964 * C117 + C5865 * C198 + C5965 * C825 + C5866 * C914 +
            C5966 * C2967 + C5867 * C3033) *
               C141221) *
              C141320 * C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C188 * C108 + C141309 * C189) * C101 +
           (C188 * C114 + C141309 * C195) * C89 + C218 * C103 + C219 * C90 +
           C220 * C105 + C221 * C91 + C222 * C107 + C223 * C92) *
              C141320 * C141294 * C141277 * C97 -
          (C224 * C92 + C225 * C107 + C223 * C91 + C222 * C105 + C221 * C90 +
           C220 * C103 + C219 * C89 + C218 * C101) *
              C141320 * C141294 * C141277 * C98 +
          (C220 * C101 + C221 * C89 + C222 * C103 + C223 * C90 + C225 * C105 +
           C224 * C91 + (C188 * C113 + C141309 * C194) * C107 +
           (C188 * C119 + C141309 * C200) * C92) *
              C141320 * C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141309 * C189) * C5869 +
            (C188 * C114 + C141309 * C195) * C5863 + C218 * C5871 +
            C219 * C141221) *
               C14035 +
           ((C188 * C1601 + C141309 * C1690) * C5869 +
            (C188 * C1606 + C141309 * C1695) * C5863 + C1715 * C5871 +
            C1714 * C141221) *
               C14036 +
           ((C188 * C5325 + C141309 * C5391) * C5869 +
            (C188 * C5329 + C141309 * C5395) * C5863 + C14127 * C5871 +
            C14128 * C141221) *
               C14037) *
              C141294 * C141277 * C97 -
          ((C14129 * C141221 + C14130 * C5871 + C14128 * C5863 +
            C14127 * C5869) *
               C14037 +
           (C1712 * C141221 + C1713 * C5871 + C1714 * C5863 + C1715 * C5869) *
               C14036 +
           (C221 * C141221 + C220 * C5871 + C219 * C5863 + C218 * C5869) *
               C14035) *
              C141294 * C141277 * C98 +
          ((C220 * C5869 + C221 * C5863 + C222 * C5871 + C223 * C141221) *
               C14035 +
           (C1713 * C5869 + C1712 * C5863 + C1711 * C5871 + C1710 * C141221) *
               C14036 +
           (C14130 * C5869 + C14129 * C5863 +
            (C188 * C5328 + C141309 * C5394) * C5871 +
            (C188 * C5332 + C141309 * C5398) * C141221) *
               C14037) *
              C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eexz[18] +=
        (-std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141320 * C276) * C5869 +
            (C275 * C114 + C141320 * C282) * C5863 + C305 * C5871 +
            C306 * C141221) *
               C5865 +
           ((C275 * C823 + C141320 * C1006) * C5869 +
            (C275 * C828 + C141320 * C1011) * C5863 + C1031 * C5871 +
            C1030 * C141221) *
               C5866 +
           ((C275 * C2960 + C141320 * C3084) * C5869 +
            (C275 * C2964 + C141320 * C3088) * C5863 + C6086 * C5871 +
            C6087 * C141221) *
               C5867) *
              C141294 * C141277 * C97 -
          ((C6088 * C141221 + C6089 * C5871 + C6087 * C5863 + C6086 * C5869) *
               C5867 +
           (C1028 * C141221 + C1029 * C5871 + C1030 * C5863 + C1031 * C5869) *
               C5866 +
           (C308 * C141221 + C307 * C5871 + C306 * C5863 + C305 * C5869) *
               C5865) *
              C141294 * C141277 * C98 +
          ((C307 * C5869 + C308 * C5863 + C309 * C5871 + C310 * C141221) *
               C5865 +
           (C1029 * C5869 + C1028 * C5863 + C1027 * C5871 + C1026 * C141221) *
               C5866 +
           (C6089 * C5869 + C6088 * C5863 +
            (C275 * C2963 + C141320 * C3087) * C5871 +
            (C275 * C2967 + C141320 * C3091) * C141221) *
               C5867) *
              C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C275 * C108 + C141320 * C276) * C101 +
           (C275 * C114 + C141320 * C282) * C89 + C305 * C103 + C306 * C90 +
           C307 * C105 + C308 * C91 + C309 * C107 + C310 * C92) *
              C141309 * C141294 * C141277 * C97 -
          (C311 * C92 + C312 * C107 + C310 * C91 + C309 * C105 + C308 * C90 +
           C307 * C103 + C306 * C89 + C305 * C101) *
              C141309 * C141294 * C141277 * C98 +
          (C307 * C101 + C308 * C89 + C309 * C103 + C310 * C90 + C312 * C105 +
           C311 * C91 + (C275 * C113 + C141320 * C281) * C107 +
           (C275 * C119 + C141320 * C287) * C92) *
              C141309 * C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C14204 * C108 + C14035 * C276 + C14205 * C1601 + C14036 * C1784 +
            C14206 * C5325 + C14037 * C5449) *
               C5869 +
           (C14204 * C114 + C14035 * C282 + C14205 * C1606 + C14036 * C1789 +
            C14206 * C5329 + C14037 * C5453) *
               C5863 +
           (C14232 + C14233 + C14234) * C5871 +
           (C14235 + C14236 + C14237) * C141221) *
              C141309 * C141294 * C141277 * C97 -
          ((C14238 + C14239 + C14240) * C141221 +
           (C14241 + C14242 + C14243) * C5871 +
           (C14237 + C14236 + C14235) * C5863 +
           (C14234 + C14233 + C14232) * C5869) *
              C141309 * C141294 * C141277 * C98 +
          ((C14243 + C14242 + C14241) * C5869 +
           (C14240 + C14239 + C14238) * C5863 +
           (C14204 * C111 + C14035 * C279 + C14205 * C1598 + C14036 * C1781 +
            C14206 * C5328 + C14037 * C5452) *
               C5871 +
           (C14204 * C117 + C14035 * C285 + C14205 * C1603 + C14036 * C1786 +
            C14206 * C5332 + C14037 * C5456) *
               C141221) *
              C141309 * C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[18] +=
        (-std::pow(Pi, 2.5) *
         (((C5869 * C108 + C5863 * C114 + C5871 * C109 + C141221 * C115) *
               C5964 +
           (C5869 * C189 + C5863 * C362 + C5871 * C190 + C141221 * C363) *
               C5865 +
           (C5869 * C823 + C5863 * C828 + C5871 * C822 + C141221 * C827) *
               C5965 +
           (C5869 * C912 + C5863 * C1100 + C5871 * C911 + C141221 * C1099) *
               C5866 +
           (C5869 * C2960 + C5863 * C2964 + C5871 * C2961 + C141221 * C2965) *
               C5966 +
           (C5869 * C3026 + C5863 * C3142 + C5871 * C3027 + C141221 * C3143) *
               C5867) *
              C141320 * C141294 * C141277 * C97 -
          ((C5871 * C3028 + C141221 * C3144 + C5869 * C3027 + C5863 * C3143) *
               C5867 +
           (C5871 * C2962 + C141221 * C2966 + C5869 * C2961 + C5863 * C2965) *
               C5966 +
           (C5871 * C910 + C141221 * C1098 + C5869 * C911 + C5863 * C1099) *
               C5866 +
           (C5871 * C821 + C141221 * C826 + C5869 * C822 + C5863 * C827) *
               C5965 +
           (C5871 * C191 + C141221 * C364 + C5869 * C190 + C5863 * C363) *
               C5865 +
           (C5871 * C110 + C141221 * C116 + C5869 * C109 + C5863 * C115) *
               C5964) *
              C141320 * C141294 * C141277 * C98 +
          ((C5869 * C110 + C5863 * C116 + C5871 * C111 + C141221 * C117) *
               C5964 +
           (C5869 * C191 + C5863 * C364 + C5871 * C192 + C141221 * C365) *
               C5865 +
           (C5869 * C821 + C5863 * C826 + C5871 * C820 + C141221 * C825) *
               C5965 +
           (C5869 * C910 + C5863 * C1098 + C5871 * C909 + C141221 * C1097) *
               C5866 +
           (C5869 * C2962 + C5863 * C2966 + C5871 * C2963 + C141221 * C2967) *
               C5966 +
           (C5869 * C3028 + C5863 * C3144 + C5871 * C3029 + C141221 * C3145) *
               C5867) *
              C141320 * C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
            C91 * C116 + C107 * C111 + C92 * C117) *
               C188 +
           (C101 * C189 + C89 * C362 + C103 * C190 + C90 * C363 + C105 * C191 +
            C91 * C364 + C107 * C192 + C92 * C365) *
               C141309) *
              C141320 * C141294 * C141277 * C97 -
          ((C107 * C193 + C92 * C366 + C105 * C192 + C91 * C365 + C103 * C191 +
            C90 * C364 + C101 * C190 + C89 * C363) *
               C141309 +
           (C107 * C112 + C92 * C118 + C105 * C111 + C91 * C117 + C103 * C110 +
            C90 * C116 + C101 * C109 + C89 * C115) *
               C188) *
              C141320 * C141294 * C141277 * C98 +
          ((C101 * C110 + C89 * C116 + C103 * C111 + C90 * C117 + C105 * C112 +
            C91 * C118 + C107 * C113 + C92 * C119) *
               C188 +
           (C101 * C191 + C89 * C364 + C103 * C192 + C90 * C365 + C105 * C193 +
            C91 * C366 + C107 * C194 + C92 * C367) *
               C141309) *
              C141320 * C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C141221 * C115) *
                C188 +
            (C5869 * C189 + C5863 * C362 + C5871 * C190 + C141221 * C363) *
                C141309) *
               C14035 +
           ((C5869 * C1601 + C5863 * C1606 + C5871 * C1600 + C141221 * C1605) *
                C188 +
            (C5869 * C1690 + C5863 * C1878 + C5871 * C1689 + C141221 * C1877) *
                C141309) *
               C14036 +
           ((C5869 * C5325 + C5863 * C5329 + C5871 * C5326 + C141221 * C5330) *
                C188 +
            (C5869 * C5391 + C5863 * C5507 + C5871 * C5392 + C141221 * C5508) *
                C141309) *
               C14037) *
              C141294 * C141277 * C97 -
          (((C5871 * C5393 + C141221 * C5509 + C5869 * C5392 + C5863 * C5508) *
                C141309 +
            (C5871 * C5327 + C141221 * C5331 + C5869 * C5326 + C5863 * C5330) *
                C188) *
               C14037 +
           ((C5871 * C1688 + C141221 * C1876 + C5869 * C1689 + C5863 * C1877) *
                C141309 +
            (C5871 * C1599 + C141221 * C1604 + C5869 * C1600 + C5863 * C1605) *
                C188) *
               C14036 +
           ((C5871 * C191 + C141221 * C364 + C5869 * C190 + C5863 * C363) *
                C141309 +
            (C5871 * C110 + C141221 * C116 + C5869 * C109 + C5863 * C115) *
                C188) *
               C14035) *
              C141294 * C141277 * C98 +
          (((C5869 * C110 + C5863 * C116 + C5871 * C111 + C141221 * C117) *
                C188 +
            (C5869 * C191 + C5863 * C364 + C5871 * C192 + C141221 * C365) *
                C141309) *
               C14035 +
           ((C5869 * C1599 + C5863 * C1604 + C5871 * C1598 + C141221 * C1603) *
                C188 +
            (C5869 * C1688 + C5863 * C1876 + C5871 * C1687 + C141221 * C1875) *
                C141309) *
               C14036 +
           ((C5869 * C5327 + C5863 * C5331 + C5871 * C5328 + C141221 * C5332) *
                C188 +
            (C5869 * C5393 + C5863 * C5509 + C5871 * C5394 + C141221 * C5510) *
                C141309) *
               C14037) *
              C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[18] +=
        (-std::pow(Pi, 2.5) *
         (((C6237 * C108 + C6241 + C6241 + C5865 * C419 + C6238 * C823 + C6242 +
            C6242 + C5866 * C1171 + C6239 * C2960 + C6243 + C6243 +
            C5867 * C3196) *
               C5863 +
           (C6277 + C6278 + C6279) * C141221) *
              C141320 * C141294 * C141277 * C97 -
          ((C6280 + C6281 + C6282) * C141221 +
           (C6279 + C6278 + C6277) * C5863) *
              C141320 * C141294 * C141277 * C98 +
          ((C6282 + C6281 + C6280) * C5863 +
           (C6237 * C111 + C6262 + C6262 + C5865 * C422 + C6238 * C820 + C6263 +
            C6263 + C5866 * C1168 + C6239 * C2963 + C6264 + C6264 +
            C5867 * C3199) *
               C141221) *
              C141320 * C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C418 * C108 + C426 + C426 + C141309 * C419) * C89 + C448 * C90 +
           C449 * C91 + C450 * C92) *
              C141320 * C141294 * C141277 * C97 -
          (C451 * C92 + C450 * C91 + C449 * C90 + C448 * C89) * C141320 *
              C141294 * C141277 * C98 +
          (C449 * C89 + C450 * C90 + C451 * C91 +
           (C418 * C113 + C439 + C439 + C141309 * C424) * C92) *
              C141320 * C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C418 * C108 + C426 + C426 + C141309 * C419) * C5863 +
            C448 * C141221) *
               C14035 +
           ((C418 * C1601 + C1961 + C1961 + C141309 * C1949) * C5863 +
            C1971 * C141221) *
               C14036 +
           ((C418 * C5325 + C5566 + C5566 + C141309 * C5561) * C5863 +
            C14400 * C141221) *
               C14037) *
              C141294 * C141277 * C97 -
          ((C14401 * C141221 + C14400 * C5863) * C14037 +
           (C1970 * C141221 + C1971 * C5863) * C14036 +
           (C449 * C141221 + C448 * C5863) * C14035) *
              C141294 * C141277 * C98 +
          ((C449 * C5863 + C450 * C141221) * C14035 +
           (C1970 * C5863 + C1969 * C141221) * C14036 +
           (C14401 * C5863 +
            (C418 * C5328 + C5569 + C5569 + C141309 * C5564) * C141221) *
               C14037) *
              C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[18] +=
        (-std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141320 * C276) * C5964 +
            (C275 * C189 + C141320 * C501) * C5865 +
            (C275 * C823 + C141320 * C1006) * C5965 +
            (C275 * C912 + C141320 * C1262) * C5866 +
            (C275 * C2960 + C141320 * C3084) * C5966 +
            (C275 * C3026 + C141320 * C3254) * C5867) *
               C5863 +
           (C6357 + C6358 + C6359 + C6360 + C6361 + C6373) * C141221) *
              C141294 * C141277 * C97 -
          ((C6374 + C6366 + C6367 + C6368 + C6369 + C6370) * C141221 +
           (C6373 + C6361 + C6360 + C6359 + C6358 + C6357) * C5863) *
              C141294 * C141277 * C98 +
          ((C6370 + C6369 + C6368 + C6367 + C6366 + C6374) * C5863 +
           (C309 * C5964 + C522 * C5865 + C1027 * C5965 + C1274 * C5866 +
            (C275 * C2963 + C141320 * C3087) * C5966 +
            (C275 * C3029 + C141320 * C3257) * C5867) *
               C141221) *
              C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * ((((C275 * C108 + C141320 * C276) * C188 +
                                (C275 * C189 + C141320 * C501) * C141309) *
                                   C89 +
                               (C508 + C524) * C90 + C528 * C91 + C529 * C92) *
                                  C141294 * C141277 * C97 -
                              ((C527 + C519) * C92 + (C526 + C514) * C91 +
                               (C525 + C511) * C90 + (C524 + C508) * C89) *
                                  C141294 * C141277 * C98 +
                              (C528 * C89 + C529 * C90 + (C519 + C527) * C91 +
                               ((C275 * C113 + C141320 * C281) * C188 +
                                (C275 * C194 + C141320 * C506) * C141309) *
                                   C92) *
                                  C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C14204 * C108 + C14035 * C276 + C14205 * C1601 + C14036 * C1784 +
             C14206 * C5325 + C14037 * C5449) *
                C188 +
            (C14204 * C189 + C14035 * C501 + C14205 * C1690 + C14036 * C2040 +
             C14206 * C5391 + C14037 * C5619) *
                C141309) *
               C5863 +
           ((C14232 + C14233 + C14234) * C188 +
            (C14488 + C14489 + C14490) * C141309) *
               C141221) *
              C141294 * C141277 * C97 -
          (((C14491 + C14492 + C14493) * C141309 +
            (C14241 + C14242 + C14243) * C188) *
               C141221 +
           ((C14490 + C14489 + C14488) * C141309 +
            (C14234 + C14233 + C14232) * C188) *
               C5863) *
              C141294 * C141277 * C98 +
          (((C14243 + C14242 + C14241) * C188 +
            (C14493 + C14492 + C14491) * C141309) *
               C5863 +
           ((C14204 * C111 + C14035 * C279 + C14205 * C1598 + C14036 * C1781 +
             C14206 * C5328 + C14037 * C5452) *
                C188 +
            (C14204 * C192 + C14035 * C504 + C14205 * C1687 + C14036 * C2037 +
             C14206 * C5394 + C14037 * C5622) *
                C141309) *
               C141221) *
              C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eezx[18] +=
        (-std::pow(Pi, 2.5) *
         ((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C141221 * C115) *
                C275 +
            (C5869 * C276 + C5863 * C579 + C5871 * C277 + C141221 * C580) *
                C141320) *
               C5865 +
           ((C5869 * C823 + C5863 * C828 + C5871 * C822 + C141221 * C827) *
                C275 +
            (C5869 * C1006 + C5863 * C1348 + C5871 * C1005 + C141221 * C1347) *
                C141320) *
               C5866 +
           ((C5869 * C2960 + C5863 * C2964 + C5871 * C2961 + C141221 * C2965) *
                C275 +
            (C5869 * C3084 + C5863 * C3308 + C5871 * C3085 + C141221 * C3309) *
                C141320) *
               C5867) *
              C141294 * C141277 * C97 -
          (((C5871 * C3086 + C141221 * C3310 + C5869 * C3085 + C5863 * C3309) *
                C141320 +
            (C5871 * C2962 + C141221 * C2966 + C5869 * C2961 + C5863 * C2965) *
                C275) *
               C5867 +
           ((C5871 * C1004 + C141221 * C1346 + C5869 * C1005 + C5863 * C1347) *
                C141320 +
            (C5871 * C821 + C141221 * C826 + C5869 * C822 + C5863 * C827) *
                C275) *
               C5866 +
           ((C5871 * C278 + C141221 * C581 + C5869 * C277 + C5863 * C580) *
                C141320 +
            (C5871 * C110 + C141221 * C116 + C5869 * C109 + C5863 * C115) *
                C275) *
               C5865) *
              C141294 * C141277 * C98 +
          (((C5869 * C110 + C5863 * C116 + C5871 * C111 + C141221 * C117) *
                C275 +
            (C5869 * C278 + C5863 * C581 + C5871 * C279 + C141221 * C582) *
                C141320) *
               C5865 +
           ((C5869 * C821 + C5863 * C826 + C5871 * C820 + C141221 * C825) *
                C275 +
            (C5869 * C1004 + C5863 * C1346 + C5871 * C1003 + C141221 * C1345) *
                C141320) *
               C5866 +
           ((C5869 * C2962 + C5863 * C2966 + C5871 * C2963 + C141221 * C2967) *
                C275 +
            (C5869 * C3086 + C5863 * C3310 + C5871 * C3087 + C141221 * C3311) *
                C141320) *
               C5867) *
              C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
            C91 * C116 + C107 * C111 + C92 * C117) *
               C275 +
           (C101 * C276 + C89 * C579 + C103 * C277 + C90 * C580 + C105 * C278 +
            C91 * C581 + C107 * C279 + C92 * C582) *
               C141320) *
              C141309 * C141294 * C141277 * C97 -
          ((C107 * C280 + C92 * C583 + C105 * C279 + C91 * C582 + C103 * C278 +
            C90 * C581 + C101 * C277 + C89 * C580) *
               C141320 +
           (C107 * C112 + C92 * C118 + C105 * C111 + C91 * C117 + C103 * C110 +
            C90 * C116 + C101 * C109 + C89 * C115) *
               C275) *
              C141309 * C141294 * C141277 * C98 +
          ((C101 * C110 + C89 * C116 + C103 * C111 + C90 * C117 + C105 * C112 +
            C91 * C118 + C107 * C113 + C92 * C119) *
               C275 +
           (C101 * C278 + C89 * C581 + C103 * C279 + C90 * C582 + C105 * C280 +
            C91 * C583 + C107 * C281 + C92 * C584) *
               C141320) *
              C141309 * C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C5869 * C108 + C5863 * C114 + C5871 * C109 + C141221 * C115) *
               C14204 +
           (C5869 * C276 + C5863 * C579 + C5871 * C277 + C141221 * C580) *
               C14035 +
           (C5869 * C1601 + C5863 * C1606 + C5871 * C1600 + C141221 * C1605) *
               C14205 +
           (C5869 * C1784 + C5863 * C2126 + C5871 * C1783 + C141221 * C2125) *
               C14036 +
           (C5869 * C5325 + C5863 * C5329 + C5871 * C5326 + C141221 * C5330) *
               C14206 +
           (C5869 * C5449 + C5863 * C5673 + C5871 * C5450 + C141221 * C5674) *
               C14037) *
              C141309 * C141294 * C141277 * C97 -
          ((C5871 * C5451 + C141221 * C5675 + C5869 * C5450 + C5863 * C5674) *
               C14037 +
           (C5871 * C5327 + C141221 * C5331 + C5869 * C5326 + C5863 * C5330) *
               C14206 +
           (C5871 * C1782 + C141221 * C2124 + C5869 * C1783 + C5863 * C2125) *
               C14036 +
           (C5871 * C1599 + C141221 * C1604 + C5869 * C1600 + C5863 * C1605) *
               C14205 +
           (C5871 * C278 + C141221 * C581 + C5869 * C277 + C5863 * C580) *
               C14035 +
           (C5871 * C110 + C141221 * C116 + C5869 * C109 + C5863 * C115) *
               C14204) *
              C141309 * C141294 * C141277 * C98 +
          ((C5869 * C110 + C5863 * C116 + C5871 * C111 + C141221 * C117) *
               C14204 +
           (C5869 * C278 + C5863 * C581 + C5871 * C279 + C141221 * C582) *
               C14035 +
           (C5869 * C1599 + C5863 * C1604 + C5871 * C1598 + C141221 * C1603) *
               C14205 +
           (C5869 * C1782 + C5863 * C2124 + C5871 * C1781 + C141221 * C2123) *
               C14036 +
           (C5869 * C5327 + C5863 * C5331 + C5871 * C5328 + C141221 * C5332) *
               C14206 +
           (C5869 * C5451 + C5863 * C5675 + C5871 * C5452 + C141221 * C5676) *
               C14037) *
              C141309 * C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eezy[18] +=
        (-std::pow(Pi, 2.5) *
         ((((C5964 * C108 + C5865 * C189 + C5965 * C823 + C5866 * C912 +
             C5966 * C2960 + C5867 * C3026) *
                C275 +
            (C5964 * C276 + C5865 * C635 + C5965 * C1006 + C5866 * C1419 +
             C5966 * C3084 + C5867 * C3362) *
                C141320) *
               C5863 +
           ((C5992 + C5993 + C5994) * C275 +
            (C6535 + C6536 + C6537) * C141320) *
               C141221) *
              C141294 * C141277 * C97 -
          (((C6538 + C6539 + C6540) * C141320 +
            (C6001 + C6002 + C6003) * C275) *
               C141221 +
           ((C6537 + C6536 + C6535) * C141320 +
            (C5994 + C5993 + C5992) * C275) *
               C5863) *
              C141294 * C141277 * C98 +
          (((C6003 + C6002 + C6001) * C275 +
            (C6540 + C6539 + C6538) * C141320) *
               C5863 +
           ((C5964 * C111 + C5865 * C192 + C5965 * C820 + C5866 * C909 +
             C5966 * C2963 + C5867 * C3029) *
                C275 +
            (C5964 * C279 + C5865 * C638 + C5965 * C1003 + C5866 * C1416 +
             C5966 * C3087 + C5867 * C3365) *
                C141320) *
               C141221) *
              C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * ((((C188 * C108 + C141309 * C189) * C275 +
                                (C188 * C276 + C141309 * C635) * C141320) *
                                   C89 +
                               (C642 + C658) * C90 + C662 * C91 + C663 * C92) *
                                  C141294 * C141277 * C97 -
                              ((C661 + C653) * C92 + (C660 + C648) * C91 +
                               (C659 + C645) * C90 + (C658 + C642) * C89) *
                                  C141294 * C141277 * C98 +
                              (C662 * C89 + C663 * C90 + (C653 + C661) * C91 +
                               ((C188 * C113 + C141309 * C194) * C275 +
                                (C188 * C281 + C141309 * C640) * C141320) *
                                   C92) *
                                  C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141309 * C189) * C14204 +
            (C188 * C276 + C141309 * C635) * C14035 +
            (C188 * C1601 + C141309 * C1690) * C14205 +
            (C188 * C1784 + C141309 * C2197) * C14036 +
            (C188 * C5325 + C141309 * C5391) * C14206 +
            (C188 * C5449 + C141309 * C5727) * C14037) *
               C5863 +
           (C14642 + C14643 + C14644 + C14645 + C14646 + C14658) * C141221) *
              C141294 * C141277 * C97 -
          ((C14659 + C14651 + C14652 + C14653 + C14654 + C14655) * C141221 +
           (C14658 + C14646 + C14645 + C14644 + C14643 + C14642) * C5863) *
              C141294 * C141277 * C98 +
          ((C14655 + C14654 + C14653 + C14652 + C14651 + C14659) * C5863 +
           (C222 * C14204 + C656 * C14035 + C1711 * C14205 + C2209 * C14036 +
            (C188 * C5328 + C141309 * C5394) * C14206 +
            (C188 * C5452 + C141309 * C5730) * C14037) *
               C141221) *
              C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eezz[18] +=
        (-std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C141320 * C714) * C5865 +
            (C713 * C823 + C1517 + C1517 + C141320 * C1505) * C5866 +
            (C713 * C2960 + C3421 + C3421 + C141320 * C3416) * C5867) *
               C5863 +
           (C6615 + C6616 + C6629) * C141221) *
              C141294 * C141277 * C97 -
          ((C6630 + C6621 + C6622) * C141221 +
           (C6629 + C6616 + C6615) * C5863) *
              C141294 * C141277 * C98 +
          ((C6622 + C6621 + C6630) * C5863 +
           (C745 * C5865 + C1525 * C5866 +
            (C713 * C2963 + C3424 + C3424 + C141320 * C3419) * C5867) *
               C141221) *
              C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C713 * C108 + C721 + C721 + C141320 * C714) * C141309 * C89 +
           C747 * C90 + C748 * C91 + C749 * C92) *
              C141294 * C141277 * C97 -
          (C750 * C92 + C749 * C91 + C748 * C90 + C747 * C89) * C141294 *
              C141277 * C98 +
          (C748 * C89 + C749 * C90 + C750 * C91 +
           (C713 * C113 + C734 + C734 + C141320 * C719) * C141309 * C92) *
              C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C14733 * C108 + C14737 + C14737 + C14035 * C714 + C14734 * C1601 +
            C14738 + C14738 + C14036 * C2283 + C14735 * C5325 + C14739 +
            C14739 + C14037 * C5781) *
               C141309 * C5863 +
           (C14773 + C14774 + C14775) * C141309 * C141221) *
              C141294 * C141277 * C97 -
          ((C14776 + C14777 + C14778) * C141309 * C141221 +
           (C14775 + C14774 + C14773) * C141309 * C5863) *
              C141294 * C141277 * C98 +
          ((C14778 + C14777 + C14776) * C141309 * C5863 +
           (C14733 * C111 + C14758 + C14758 + C14035 * C717 + C14734 * C1598 +
            C14759 + C14759 + C14036 * C2280 + C14735 * C5328 + C14760 +
            C14760 + C14037 * C5784) *
               C141309 * C141221) *
              C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eexx[19] += (-std::pow(Pi, 2.5) *
                   ((((C5868 * C108 + C5873 + C5873 + C5863 * C120 +
                       C5870 * C109 + C5874 + C5874 + C141221 * C121) *
                          C141320 * C5865 +
                      (C6774 + C6775) * C141320 * C5866 +
                      (C6776 + C6777) * C141320 * C5867) *
                         C141294 * C816 -
                     ((C5870 * C6728 + C6746 + C6746 + C141221 * C6734 +
                       C5868 * C6729 + C6747 + C6747 + C5863 * C6735) *
                          C141320 * C5867 +
                      (C6777 + C6776) * C141320 * C5866 +
                      (C6775 + C6774) * C141320 * C5865) *
                         C141294 * C141485) *
                        C818 +
                    (((C6778 + C6779) * C141320 * C5865 +
                      (C6780 + C6781) * C141320 * C5866 +
                      (C5868 * C6728 + C6756 + C6756 + C5863 * C6734 +
                       C5870 * C6730 + C6757 + C6757 + C141221 * C6736) *
                          C141320 * C5867) *
                         C141294 * C141485 -
                     ((C6781 + C6780) * C141320 * C5867 +
                      (C6779 + C6778) * C141320 * C5866 +
                      (C5870 * C110 + C5883 + C5883 + C141221 * C122 +
                       C5868 * C109 + C5884 + C5884 + C5863 * C121) *
                          C141320 * C5865) *
                         C141294 * C816) *
                        C141483)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   (((C100 * C108 + C127 + C127 + C89 * C120 + C102 * C109 +
                      C128 + C128 + C90 * C121 + C104 * C110 + C129 + C129 +
                      C91 * C122 + C106 * C111 + C130 + C130 + C92 * C123) *
                         C141320 * C141309 * C141294 * C816 -
                     (C106 * C820 + C836 + C836 + C92 * C830 + C104 * C821 +
                      C837 + C837 + C91 * C831 + C102 * C822 + C838 + C838 +
                      C90 * C832 + C100 * C823 + C839 + C839 + C89 * C833) *
                         C141320 * C141309 * C141294 * C141485) *
                        C818 +
                    ((C100 * C822 + C840 + C840 + C89 * C832 + C102 * C821 +
                      C841 + C841 + C90 * C831 + C104 * C820 + C842 + C842 +
                      C91 * C830 + C106 * C824 + C843 + C843 + C92 * C834) *
                         C141320 * C141309 * C141294 * C141485 -
                     (C106 * C112 + C131 + C131 + C92 * C124 + C104 * C111 +
                      C132 + C132 + C91 * C123 + C102 * C110 + C133 + C133 +
                      C90 * C122 + C100 * C109 + C134 + C134 + C89 * C121) *
                         C141320 * C141309 * C141294 * C816) *
                        C141483)) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   ((((C5868 * C108 + C5873 + C5873 + C5863 * C120 +
                       C5870 * C109 + C5874 + C5874 + C141221 * C121) *
                          C14035 +
                      (C5868 * C1601 + C7901 + C7901 + C5863 * C1611 +
                       C5870 * C1600 + C7900 + C7900 + C141221 * C1610) *
                          C14036 +
                      (C5868 * C5325 + C13314 + C13314 + C5863 * C5333 +
                       C5870 * C5326 + C13315 + C13315 + C141221 * C5334) *
                          C14037) *
                         C141309 * C141294 * C816 -
                     ((C5870 * C13302 + C13317 + C13317 + C141221 * C13310 +
                       C5868 * C13301 + C13316 + C13316 + C5863 * C13309) *
                          C14037 +
                      (C10578 + C10579) * C14036 + (C6775 + C6774) * C14035) *
                         C141309 * C141294 * C141485) *
                        C818 +
                    (((C6778 + C6779) * C14035 +
                      (C5868 * C3491 + C7904 + C7904 + C5863 * C3499 +
                       C5870 * C3492 + C7905 + C7905 + C141221 * C3500) *
                          C14036 +
                      (C5868 * C13302 + C14880 + C14880 + C5863 * C13310 +
                       C5870 * C14876 + C14881 + C14881 + C141221 * C14878) *
                          C14037) *
                         C141309 * C141294 * C141485 -
                     ((C5870 * C5327 + C14039 + C14039 + C141221 * C5335 +
                       C5868 * C5326 + C14040 + C14040 + C5863 * C5334) *
                          C14037 +
                      (C5870 * C1599 + C7903 + C7903 + C141221 * C1609 +
                       C5868 * C1600 + C7902 + C7902 + C5863 * C1610) *
                          C14036 +
                      (C5870 * C110 + C5883 + C5883 + C141221 * C122 +
                       C5868 * C109 + C5884 + C5884 + C5863 * C121) *
                          C14035) *
                         C141309 * C141294 * C816) *
                        C141483)) /
                      (p * q * std::sqrt(p + q));
    d2eexy[19] +=
        (-std::pow(Pi, 2.5) *
         ((((C5964 * C108 + C5865 * C189 + C5965 * C823 + C5866 * C912 +
             C5966 * C2960 + C5867 * C3026) *
                C5869 +
            (C5964 * C114 + C5865 * C195 + C5965 * C828 + C5866 * C917 +
             C5966 * C2964 + C5867 * C3030) *
                C5863 +
            (C5992 + C5993 + C5994) * C5871 +
            (C5995 + C5996 + C5997) * C141221) *
               C141320 * C141294 * C816 -
           ((C6898 + C6899 + C6900) * C141221 +
            (C6901 + C6902 + C6903) * C5871 +
            (C5966 * C6732 + C5867 * C6883 + C5965 * C2964 + C5866 * C3030 +
             C5964 * C828 + C5865 * C917) *
                C5863 +
            (C5966 * C6729 + C5867 * C6880 + C5965 * C2960 + C5866 * C3026 +
             C5964 * C823 + C5865 * C912) *
                C5869) *
               C141320 * C141294 * C141485) *
              C818 +
          (((C6903 + C6902 + C6901) * C5869 + (C6900 + C6899 + C6898) * C5863 +
            (C5964 * C821 + C5865 * C910 + C5965 * C2962 + C5866 * C3028 +
             C5966 * C6730 + C5867 * C6881) *
                C5871 +
            (C5964 * C826 + C5865 * C915 + C5965 * C2966 + C5866 * C3032 +
             C5966 * C6733 + C5867 * C6884) *
                C141221) *
               C141320 * C141294 * C141485 -
           ((C5998 + C5999 + C6000) * C141221 +
            (C6001 + C6002 + C6003) * C5871 + (C5997 + C5996 + C5995) * C5863 +
            (C5994 + C5993 + C5992) * C5869) *
               C141320 * C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141309 * C189) * C101 +
            (C188 * C114 + C141309 * C195) * C89 + C218 * C103 + C219 * C90 +
            C220 * C105 + C221 * C91 + C222 * C107 + C223 * C92) *
               C141320 * C141294 * C816 -
           (C932 * C92 + C933 * C107 + C934 * C91 + C935 * C105 + C936 * C90 +
            C937 * C103 + (C188 * C828 + C141309 * C917) * C89 +
            (C188 * C823 + C141309 * C912) * C101) *
               C141320 * C141294 * C141485) *
              C818 +
          ((C937 * C101 + C936 * C89 + C935 * C103 + C934 * C90 + C933 * C105 +
            C932 * C91 + (C188 * C824 + C141309 * C913) * C107 +
            (C188 * C829 + C141309 * C918) * C92) *
               C141320 * C141294 * C141485 -
           (C224 * C92 + C225 * C107 + C223 * C91 + C222 * C105 + C221 * C90 +
            C220 * C103 + C219 * C89 + C218 * C101) *
               C141320 * C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141309 * C189) * C5869 +
             (C188 * C114 + C141309 * C195) * C5863 + C218 * C5871 +
             C219 * C141221) *
                C14035 +
            ((C188 * C1601 + C141309 * C1690) * C5869 +
             (C188 * C1606 + C141309 * C1695) * C5863 + C1715 * C5871 +
             C1714 * C141221) *
                C14036 +
            ((C188 * C5325 + C141309 * C5391) * C5869 +
             (C188 * C5329 + C141309 * C5395) * C5863 + C14127 * C5871 +
             C14128 * C141221) *
                C14037) *
               C141294 * C816 -
           ((C14990 * C141221 + C14991 * C5871 +
             (C188 * C13305 + C141309 * C13397) * C5863 +
             (C188 * C13301 + C141309 * C13393) * C5869) *
                C14037 +
            (C14992 * C141221 + C14993 * C5871 +
             (C188 * C3494 + C141309 * C3576) * C5863 +
             (C188 * C3490 + C141309 * C3572) * C5869) *
                C14036 +
            (C936 * C141221 + C937 * C5871 +
             (C188 * C828 + C141309 * C917) * C5863 +
             (C188 * C823 + C141309 * C912) * C5869) *
                C14035) *
               C141294 * C141485) *
              C818 +
          (((C937 * C5869 + C936 * C5863 + C935 * C5871 + C934 * C141221) *
                C14035 +
            (C14993 * C5869 + C14992 * C5863 +
             (C188 * C3492 + C141309 * C3574) * C5871 +
             (C188 * C3496 + C141309 * C3578) * C141221) *
                C14036 +
            (C14991 * C5869 + C14990 * C5863 +
             (C188 * C14876 + C141309 * C14979) * C5871 +
             (C188 * C14877 + C141309 * C14980) * C141221) *
                C14037) *
               C141294 * C141485 -
           ((C14129 * C141221 + C14130 * C5871 + C14128 * C5863 +
             C14127 * C5869) *
                C14037 +
            (C1712 * C141221 + C1713 * C5871 + C1714 * C5863 + C1715 * C5869) *
                C14036 +
            (C221 * C141221 + C220 * C5871 + C219 * C5863 + C218 * C5869) *
                C14035) *
               C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q));
    d2eexz[19] +=
        (-std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141320 * C276) * C5869 +
             (C275 * C114 + C141320 * C282) * C5863 + C305 * C5871 +
             C306 * C141221) *
                C5865 +
            (C7038 + C7039 + C7012 + C7013) * C5866 +
            (C7040 + C7041 + C7018 + C7019) * C5867) *
               C141294 * C816 -
           ((C7036 * C141221 + C7037 * C5871 +
             (C275 * C6732 + C141320 * C7005) * C5863 +
             (C275 * C6729 + C141320 * C7002) * C5869) *
                C5867 +
            (C7019 + C7018 + C7041 + C7040) * C5866 +
            (C7013 + C7012 + C7039 + C7038) * C5865) *
               C141294 * C141485) *
              C818 +
          (((C7024 + C7025 + C7026 + C7027) * C5865 +
            (C7028 + C7029 + C7030 + C7031) * C5866 +
            (C7037 * C5869 + C7036 * C5863 +
             (C275 * C6730 + C141320 * C7003) * C5871 +
             (C275 * C6733 + C141320 * C7006) * C141221) *
                C5867) *
               C141294 * C141485 -
           ((C7031 + C7030 + C7029 + C7028) * C5867 +
            (C7027 + C7026 + C7025 + C7024) * C5866 +
            (C308 * C141221 + C307 * C5871 + C306 * C5863 + C305 * C5869) *
                C5865) *
               C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141320 * C276) * C101 +
            (C275 * C114 + C141320 * C282) * C89 + C305 * C103 + C306 * C90 +
            C307 * C105 + C308 * C91 + C309 * C107 + C310 * C92) *
               C141309 * C141294 * C816 -
           (C1026 * C92 + C1027 * C107 + C1028 * C91 + C1029 * C105 +
            C1030 * C90 + C1031 * C103 + (C275 * C828 + C141320 * C1011) * C89 +
            (C275 * C823 + C141320 * C1006) * C101) *
               C141309 * C141294 * C141485) *
              C818 +
          ((C1031 * C101 + C1030 * C89 + C1029 * C103 + C1028 * C90 +
            C1027 * C105 + C1026 * C91 +
            (C275 * C824 + C141320 * C1007) * C107 +
            (C275 * C829 + C141320 * C1012) * C92) *
               C141309 * C141294 * C141485 -
           (C311 * C92 + C312 * C107 + C310 * C91 + C309 * C105 + C308 * C90 +
            C307 * C103 + C306 * C89 + C305 * C101) *
               C141309 * C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C14204 * C108 + C14035 * C276 + C14205 * C1601 + C14036 * C1784 +
             C14206 * C5325 + C14037 * C5449) *
                C5869 +
            (C14204 * C114 + C14035 * C282 + C14205 * C1606 + C14036 * C1789 +
             C14206 * C5329 + C14037 * C5453) *
                C5863 +
            (C14232 + C14233 + C14234) * C5871 +
            (C14235 + C14236 + C14237) * C141221) *
               C141309 * C141294 * C816 -
           ((C15106 + C15107 + C15108) * C141221 +
            (C15109 + C15110 + C15111) * C5871 +
            (C14206 * C13305 + C14037 * C13479 + C14205 * C3494 +
             C14036 * C3650 + C14204 * C828 + C14035 * C1011) *
                C5863 +
            (C14206 * C13301 + C14037 * C13475 + C14205 * C3490 +
             C14036 * C3646 + C14204 * C823 + C14035 * C1006) *
                C5869) *
               C141309 * C141294 * C141485) *
              C818 +
          (((C15111 + C15110 + C15109) * C5869 +
            (C15108 + C15107 + C15106) * C5863 +
            (C14204 * C821 + C14035 * C1004 + C14205 * C3492 + C14036 * C3648 +
             C14206 * C14876 + C14037 * C15091) *
                C5871 +
            (C14204 * C826 + C14035 * C1009 + C14205 * C3496 + C14036 * C3652 +
             C14206 * C14877 + C14037 * C15092) *
                C141221) *
               C141309 * C141294 * C141485 -
           ((C14238 + C14239 + C14240) * C141221 +
            (C14241 + C14242 + C14243) * C5871 +
            (C14237 + C14236 + C14235) * C5863 +
            (C14234 + C14233 + C14232) * C5869) *
               C141309 * C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[19] +=
        (-std::pow(Pi, 2.5) *
         ((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C141221 * C115) *
                C5964 +
            (C5869 * C189 + C5863 * C362 + C5871 * C190 + C141221 * C363) *
                C5865 +
            (C7175 + C7176) * C5965 + (C7177 + C7178) * C5866 +
            (C7179 + C7180) * C5966 + (C7181 + C7182) * C5867) *
               C141320 * C141294 * C816 -
           ((C5871 * C6879 + C141221 * C7139 + C5869 * C6880 + C5863 * C7140) *
                C5867 +
            (C5871 * C6728 + C141221 * C6731 + C5869 * C6729 + C5863 * C6732) *
                C5966 +
            (C7182 + C7181) * C5866 + (C7180 + C7179) * C5965 +
            (C7178 + C7177) * C5865 + (C7176 + C7175) * C5964) *
               C141320 * C141294 * C141485) *
              C818 +
          (((C7183 + C7184) * C5964 + (C7185 + C7186) * C5865 +
            (C7187 + C7188) * C5965 + (C7189 + C7190) * C5866 +
            (C5869 * C6728 + C5863 * C6731 + C5871 * C6730 + C141221 * C6733) *
                C5966 +
            (C5869 * C6879 + C5863 * C7139 + C5871 * C6881 + C141221 * C7141) *
                C5867) *
               C141320 * C141294 * C141485 -
           ((C7190 + C7189) * C5867 + (C7188 + C7187) * C5966 +
            (C7186 + C7185) * C5866 + (C7184 + C7183) * C5965 +
            (C5871 * C191 + C141221 * C364 + C5869 * C190 + C5863 * C363) *
                C5865 +
            (C5871 * C110 + C141221 * C116 + C5869 * C109 + C5863 * C115) *
                C5964) *
               C141320 * C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
             C91 * C116 + C107 * C111 + C92 * C117) *
                C188 +
            (C101 * C189 + C89 * C362 + C103 * C190 + C90 * C363 + C105 * C191 +
             C91 * C364 + C107 * C192 + C92 * C365) *
                C141309) *
               C141320 * C141294 * C816 -
           ((C107 * C909 + C92 * C1097 + C105 * C910 + C91 * C1098 +
             C103 * C911 + C90 * C1099 + C101 * C912 + C89 * C1100) *
                C141309 +
            (C107 * C820 + C92 * C825 + C105 * C821 + C91 * C826 + C103 * C822 +
             C90 * C827 + C101 * C823 + C89 * C828) *
                C188) *
               C141320 * C141294 * C141485) *
              C818 +
          (((C101 * C822 + C89 * C827 + C103 * C821 + C90 * C826 + C105 * C820 +
             C91 * C825 + C107 * C824 + C92 * C829) *
                C188 +
            (C101 * C911 + C89 * C1099 + C103 * C910 + C90 * C1098 +
             C105 * C909 + C91 * C1097 + C107 * C913 + C92 * C1101) *
                C141309) *
               C141320 * C141294 * C141485 -
           ((C107 * C193 + C92 * C366 + C105 * C192 + C91 * C365 + C103 * C191 +
             C90 * C364 + C101 * C190 + C89 * C363) *
                C141309 +
            (C107 * C112 + C92 * C118 + C105 * C111 + C91 * C117 + C103 * C110 +
             C90 * C116 + C101 * C109 + C89 * C115) *
                C188) *
               C141320 * C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C141221 * C115) *
                 C188 +
             (C5869 * C189 + C5863 * C362 + C5871 * C190 + C141221 * C363) *
                 C141309) *
                C14035 +
            ((C5869 * C1601 + C5863 * C1606 + C5871 * C1600 + C141221 * C1605) *
                 C188 +
             (C5869 * C1690 + C5863 * C1878 + C5871 * C1689 + C141221 * C1877) *
                 C141309) *
                C14036 +
            ((C5869 * C5325 + C5863 * C5329 + C5871 * C5326 + C141221 * C5330) *
                 C188 +
             (C5869 * C5391 + C5863 * C5507 + C5871 * C5392 + C141221 * C5508) *
                 C141309) *
                C14037) *
               C141294 * C816 -
           (((C5871 * C13395 + C141221 * C13558 + C5869 * C13393 +
              C5863 * C13557) *
                 C141309 +
             (C5871 * C13302 + C141221 * C13306 + C5869 * C13301 +
              C5863 * C13305) *
                 C188) *
                C14037 +
            ((C10924 + C10925) * C141309 + (C10926 + C10927) * C188) * C14036 +
            ((C7178 + C7177) * C141309 + (C7176 + C7175) * C188) * C14035) *
               C141294 * C141485) *
              C818 +
          ((((C7183 + C7184) * C188 + (C7185 + C7186) * C141309) * C14035 +
            ((C5869 * C3491 + C5863 * C3495 + C5871 * C3492 + C141221 * C3496) *
                 C188 +
             (C5869 * C3573 + C5863 * C3721 + C5871 * C3574 + C141221 * C3722) *
                 C141309) *
                C14036 +
            ((C5869 * C13302 + C5863 * C13306 + C5871 * C14876 +
              C141221 * C14877) *
                 C188 +
             (C5869 * C13395 + C5863 * C13558 + C5871 * C14979 +
              C141221 * C15209) *
                 C141309) *
                C14037) *
               C141294 * C141485 -
           (((C5871 * C5393 + C141221 * C5509 + C5869 * C5392 + C5863 * C5508) *
                 C141309 +
             (C5871 * C5327 + C141221 * C5331 + C5869 * C5326 + C5863 * C5330) *
                 C188) *
                C14037 +
            ((C5871 * C1688 + C141221 * C1876 + C5869 * C1689 + C5863 * C1877) *
                 C141309 +
             (C5871 * C1599 + C141221 * C1604 + C5869 * C1600 + C5863 * C1605) *
                 C188) *
                C14036 +
            ((C5871 * C191 + C141221 * C364 + C5869 * C190 + C5863 * C363) *
                 C141309 +
             (C5871 * C110 + C141221 * C116 + C5869 * C109 + C5863 * C115) *
                 C188) *
                C14035) *
               C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[19] +=
        (-std::pow(Pi, 2.5) *
         ((((C6237 * C108 + C6241 + C6241 + C5865 * C419 + C6238 * C823 +
             C6242 + C6242 + C5866 * C1171 + C6239 * C2960 + C6243 + C6243 +
             C5867 * C3196) *
                C5863 +
            (C6277 + C6278 + C6279) * C141221) *
               C141320 * C141294 * C816 -
           ((C7313 + C7314 + C7315) * C141221 +
            (C6239 * C6729 + C7301 + C7301 + C5867 * C7289 + C6238 * C2960 +
             C7302 + C7302 + C5866 * C3196 + C6237 * C823 + C7303 + C7303 +
             C5865 * C1171) *
                C5863) *
               C141320 * C141294 * C141485) *
              C818 +
          (((C7315 + C7314 + C7313) * C5863 +
            (C6237 * C821 + C7304 + C7304 + C5865 * C1169 + C6238 * C2962 +
             C7305 + C7305 + C5866 * C3198 + C6239 * C6730 + C7306 + C7306 +
             C5867 * C7290) *
                C141221) *
               C141320 * C141294 * C141485 -
           ((C6280 + C6281 + C6282) * C141221 +
            (C6279 + C6278 + C6277) * C5863) *
               C141320 * C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C418 * C108 + C426 + C426 + C141309 * C419) * C89 + C448 * C90 +
            C449 * C91 + C450 * C92) *
               C141320 * C141294 * C816 -
           (C1191 * C92 + C1192 * C91 + C1193 * C90 +
            (C418 * C823 + C1183 + C1183 + C141309 * C1171) * C89) *
               C141320 * C141294 * C141485) *
              C818 +
          ((C1193 * C89 + C1192 * C90 + C1191 * C91 +
            (C418 * C824 + C1184 + C1184 + C141309 * C1172) * C92) *
               C141320 * C141294 * C141485 -
           (C451 * C92 + C450 * C91 + C449 * C90 + C448 * C89) * C141320 *
               C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C418 * C108 + C426 + C426 + C141309 * C419) * C5863 +
             C448 * C141221) *
                C14035 +
            ((C418 * C1601 + C1961 + C1961 + C141309 * C1949) * C5863 +
             C1971 * C141221) *
                C14036 +
            ((C418 * C5325 + C5566 + C5566 + C141309 * C5561) * C5863 +
             C14400 * C141221) *
                C14037) *
               C141294 * C816 -
           ((C15321 * C141221 +
             (C418 * C13301 + C15313 + C15313 + C141309 * C13635) * C5863) *
                C14037 +
            (C15322 * C141221 +
             (C418 * C3490 + C3795 + C3795 + C141309 * C3790) * C5863) *
                C14036 +
            (C1193 * C141221 +
             (C418 * C823 + C1183 + C1183 + C141309 * C1171) * C5863) *
                C14035) *
               C141294 * C141485) *
              C818 +
          (((C1193 * C5863 + C1192 * C141221) * C14035 +
            (C15322 * C5863 +
             (C418 * C3492 + C3797 + C3797 + C141309 * C3792) * C141221) *
                C14036 +
            (C15321 * C5863 +
             (C418 * C14876 + C15316 + C15316 + C141309 * C15308) * C141221) *
                C14037) *
               C141294 * C141485 -
           ((C14401 * C141221 + C14400 * C5863) * C14037 +
            (C1970 * C141221 + C1971 * C5863) * C14036 +
            (C449 * C141221 + C448 * C5863) * C14035) *
               C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[19] +=
        (-std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141320 * C276) * C5964 +
             (C275 * C189 + C141320 * C501) * C5865 + C7032 * C5965 +
             C7428 * C5866 + C7034 * C5966 + C7429 * C5867) *
                C5863 +
            (C6357 + C6358 + C6359 + C6360 + C6361 + C6373) * C141221) *
               C141294 * C816 -
           ((C7431 + C7423 + C7424 + C7425 + C7426 + C7427) * C141221 +
            ((C275 * C6880 + C141320 * C7414) * C5867 +
             (C275 * C6729 + C141320 * C7002) * C5966 + C7429 * C5866 +
             C7034 * C5965 + C7428 * C5865 + C7032 * C5964) *
                C5863) *
               C141294 * C141485) *
              C818 +
          (((C7427 + C7426 + C7425 + C7424 + C7423 + C7431) * C5863 +
            (C1029 * C5964 + C1275 * C5865 + C6089 * C5965 + C6372 * C5866 +
             (C275 * C6730 + C141320 * C7003) * C5966 +
             (C275 * C6881 + C141320 * C7415) * C5867) *
                C141221) *
               C141294 * C141485 -
           ((C6374 + C6366 + C6367 + C6368 + C6369 + C6370) * C141221 +
            (C6373 + C6361 + C6360 + C6359 + C6358 + C6357) * C5863) *
               C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((((C275 * C108 + C141320 * C276) * C188 +
                                 (C275 * C189 + C141320 * C501) * C141309) *
                                    C89 +
                                (C508 + C524) * C90 + C528 * C91 + C529 * C92) *
                                   C141294 * C816 -
                               ((C1277 + C1267) * C92 + (C1278 + C1270) * C91 +
                                (C1279 + C1273) * C90 +
                                ((C275 * C912 + C141320 * C1262) * C141309 +
                                 (C275 * C823 + C141320 * C1006) * C188) *
                                    C89) *
                                   C141294 * C141485) *
                                  C818 +
                              (((C1273 + C1279) * C89 + (C1270 + C1278) * C90 +
                                (C1267 + C1277) * C91 +
                                ((C275 * C824 + C141320 * C1007) * C188 +
                                 (C275 * C913 + C141320 * C1263) * C141309) *
                                    C92) *
                                   C141294 * C141485 -
                               ((C527 + C519) * C92 + (C526 + C514) * C91 +
                                (C525 + C511) * C90 + (C524 + C508) * C89) *
                                   C141294 * C816) *
                                  C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C14204 * C108 + C14035 * C276 + C14205 * C1601 + C14036 * C1784 +
              C14206 * C5325 + C14037 * C5449) *
                 C188 +
             (C14204 * C189 + C14035 * C501 + C14205 * C1690 + C14036 * C2040 +
              C14206 * C5391 + C14037 * C5619) *
                 C141309) *
                C5863 +
            ((C14232 + C14233 + C14234) * C188 +
             (C14488 + C14489 + C14490) * C141309) *
                C141221) *
               C141294 * C816 -
           (((C15428 + C15429 + C15430) * C141309 +
             (C15109 + C15110 + C15111) * C188) *
                C141221 +
            ((C14206 * C13393 + C14037 * C13719 + C14205 * C3572 +
              C14036 * C3864 + C14204 * C912 + C14035 * C1262) *
                 C141309 +
             (C14206 * C13301 + C14037 * C13475 + C14205 * C3490 +
              C14036 * C3646 + C14204 * C823 + C14035 * C1006) *
                 C188) *
                C5863) *
               C141294 * C141485) *
              C818 +
          ((((C15111 + C15110 + C15109) * C188 +
             (C15430 + C15429 + C15428) * C141309) *
                C5863 +
            ((C14204 * C821 + C14035 * C1004 + C14205 * C3492 + C14036 * C3648 +
              C14206 * C14876 + C14037 * C15091) *
                 C188 +
             (C14204 * C910 + C14035 * C1260 + C14205 * C3574 + C14036 * C3866 +
              C14206 * C14979 + C14037 * C15420) *
                 C141309) *
                C141221) *
               C141294 * C141485 -
           (((C14491 + C14492 + C14493) * C141309 +
             (C14241 + C14242 + C14243) * C188) *
                C141221 +
            ((C14490 + C14489 + C14488) * C141309 +
             (C14234 + C14233 + C14232) * C188) *
                C5863) *
               C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q));
    d2eezx[19] +=
        (-std::pow(Pi, 2.5) *
         (((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C141221 * C115) *
                 C275 +
             (C5869 * C276 + C5863 * C579 + C5871 * C277 + C141221 * C580) *
                 C141320) *
                C5865 +
            ((C7175 + C7176) * C275 + (C7549 + C7550) * C141320) * C5866 +
            ((C7179 + C7180) * C275 + (C7551 + C7552) * C141320) * C5867) *
               C141294 * C816 -
           (((C5871 * C7001 + C141221 * C7529 + C5869 * C7002 + C5863 * C7530) *
                 C141320 +
             (C5871 * C6728 + C141221 * C6731 + C5869 * C6729 + C5863 * C6732) *
                 C275) *
                C5867 +
            ((C7552 + C7551) * C141320 + (C7180 + C7179) * C275) * C5866 +
            ((C7550 + C7549) * C141320 + (C7176 + C7175) * C275) * C5865) *
               C141294 * C141485) *
              C818 +
          ((((C7183 + C7184) * C275 + (C7553 + C7554) * C141320) * C5865 +
            ((C7187 + C7188) * C275 + (C7555 + C7556) * C141320) * C5866 +
            ((C5869 * C6728 + C5863 * C6731 + C5871 * C6730 + C141221 * C6733) *
                 C275 +
             (C5869 * C7001 + C5863 * C7529 + C5871 * C7003 + C141221 * C7531) *
                 C141320) *
                C5867) *
               C141294 * C141485 -
           (((C7556 + C7555) * C141320 + (C7188 + C7187) * C275) * C5867 +
            ((C7554 + C7553) * C141320 + (C7184 + C7183) * C275) * C5866 +
            ((C5871 * C278 + C141221 * C581 + C5869 * C277 + C5863 * C580) *
                 C141320 +
             (C5871 * C110 + C141221 * C116 + C5869 * C109 + C5863 * C115) *
                 C275) *
                C5865) *
               C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
             C91 * C116 + C107 * C111 + C92 * C117) *
                C275 +
            (C101 * C276 + C89 * C579 + C103 * C277 + C90 * C580 + C105 * C278 +
             C91 * C581 + C107 * C279 + C92 * C582) *
                C141320) *
               C141309 * C141294 * C816 -
           ((C107 * C1003 + C92 * C1345 + C105 * C1004 + C91 * C1346 +
             C103 * C1005 + C90 * C1347 + C101 * C1006 + C89 * C1348) *
                C141320 +
            (C107 * C820 + C92 * C825 + C105 * C821 + C91 * C826 + C103 * C822 +
             C90 * C827 + C101 * C823 + C89 * C828) *
                C275) *
               C141309 * C141294 * C141485) *
              C818 +
          (((C101 * C822 + C89 * C827 + C103 * C821 + C90 * C826 + C105 * C820 +
             C91 * C825 + C107 * C824 + C92 * C829) *
                C275 +
            (C101 * C1005 + C89 * C1347 + C103 * C1004 + C90 * C1346 +
             C105 * C1003 + C91 * C1345 + C107 * C1007 + C92 * C1349) *
                C141320) *
               C141309 * C141294 * C141485 -
           ((C107 * C280 + C92 * C583 + C105 * C279 + C91 * C582 + C103 * C278 +
             C90 * C581 + C101 * C277 + C89 * C580) *
                C141320 +
            (C107 * C112 + C92 * C118 + C105 * C111 + C91 * C117 + C103 * C110 +
             C90 * C116 + C101 * C109 + C89 * C115) *
                C275) *
               C141309 * C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C141221 * C115) *
                C14204 +
            (C5869 * C276 + C5863 * C579 + C5871 * C277 + C141221 * C580) *
                C14035 +
            (C5869 * C1601 + C5863 * C1606 + C5871 * C1600 + C141221 * C1605) *
                C14205 +
            (C5869 * C1784 + C5863 * C2126 + C5871 * C1783 + C141221 * C2125) *
                C14036 +
            (C5869 * C5325 + C5863 * C5329 + C5871 * C5326 + C141221 * C5330) *
                C14206 +
            (C5869 * C5449 + C5863 * C5673 + C5871 * C5450 + C141221 * C5674) *
                C14037) *
               C141309 * C141294 * C816 -
           ((C5871 * C13476 + C141221 * C13798 + C5869 * C13475 +
             C5863 * C13797) *
                C14037 +
            (C5871 * C13302 + C141221 * C13306 + C5869 * C13301 +
             C5863 * C13305) *
                C14206 +
            (C11250 + C11251) * C14036 + (C10926 + C10927) * C14205 +
            (C7550 + C7549) * C14035 + (C7176 + C7175) * C14204) *
               C141309 * C141294 * C141485) *
              C818 +
          (((C7183 + C7184) * C14204 + (C7553 + C7554) * C14035 +
            (C5869 * C3491 + C5863 * C3495 + C5871 * C3492 + C141221 * C3496) *
                C14205 +
            (C5869 * C3647 + C5863 * C3935 + C5871 * C3648 + C141221 * C3936) *
                C14036 +
            (C5869 * C13302 + C5863 * C13306 + C5871 * C14876 +
             C141221 * C14877) *
                C14206 +
            (C5869 * C13476 + C5863 * C13798 + C5871 * C15091 +
             C141221 * C15528) *
                C14037) *
               C141309 * C141294 * C141485 -
           ((C5871 * C5451 + C141221 * C5675 + C5869 * C5450 + C5863 * C5674) *
                C14037 +
            (C5871 * C5327 + C141221 * C5331 + C5869 * C5326 + C5863 * C5330) *
                C14206 +
            (C5871 * C1782 + C141221 * C2124 + C5869 * C1783 + C5863 * C2125) *
                C14036 +
            (C5871 * C1599 + C141221 * C1604 + C5869 * C1600 + C5863 * C1605) *
                C14205 +
            (C5871 * C278 + C141221 * C581 + C5869 * C277 + C5863 * C580) *
                C14035 +
            (C5871 * C110 + C141221 * C116 + C5869 * C109 + C5863 * C115) *
                C14204) *
               C141309 * C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q));
    d2eezy[19] +=
        (-std::pow(Pi, 2.5) *
         (((((C5964 * C108 + C5865 * C189 + C5965 * C823 + C5866 * C912 +
              C5966 * C2960 + C5867 * C3026) *
                 C275 +
             (C5964 * C276 + C5865 * C635 + C5965 * C1006 + C5866 * C1419 +
              C5966 * C3084 + C5867 * C3362) *
                 C141320) *
                C5863 +
            ((C5992 + C5993 + C5994) * C275 +
             (C6535 + C6536 + C6537) * C141320) *
                C141221) *
               C141294 * C816 -
           (((C7664 + C7665 + C7666) * C141320 +
             (C6901 + C6902 + C6903) * C275) *
                C141221 +
            ((C5966 * C7002 + C5867 * C7655 + C5965 * C3084 + C5866 * C3362 +
              C5964 * C1006 + C5865 * C1419) *
                 C141320 +
             (C5966 * C6729 + C5867 * C6880 + C5965 * C2960 + C5866 * C3026 +
              C5964 * C823 + C5865 * C912) *
                 C275) *
                C5863) *
               C141294 * C141485) *
              C818 +
          ((((C6903 + C6902 + C6901) * C275 +
             (C7666 + C7665 + C7664) * C141320) *
                C5863 +
            ((C5964 * C821 + C5865 * C910 + C5965 * C2962 + C5866 * C3028 +
              C5966 * C6730 + C5867 * C6881) *
                 C275 +
             (C5964 * C1004 + C5865 * C1417 + C5965 * C3086 + C5866 * C3364 +
              C5966 * C7003 + C5867 * C7656) *
                 C141320) *
                C141221) *
               C141294 * C141485 -
           (((C6538 + C6539 + C6540) * C141320 +
             (C6001 + C6002 + C6003) * C275) *
                C141221 +
            ((C6537 + C6536 + C6535) * C141320 +
             (C5994 + C5993 + C5992) * C275) *
                C5863) *
               C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((((C188 * C108 + C141309 * C189) * C275 +
                                 (C188 * C276 + C141309 * C635) * C141320) *
                                    C89 +
                                (C642 + C658) * C90 + C662 * C91 + C663 * C92) *
                                   C141294 * C816 -
                               ((C1434 + C1424) * C92 + (C1435 + C1427) * C91 +
                                (C1436 + C1430) * C90 +
                                ((C188 * C1006 + C141309 * C1419) * C141320 +
                                 (C188 * C823 + C141309 * C912) * C275) *
                                    C89) *
                                   C141294 * C141485) *
                                  C818 +
                              (((C1430 + C1436) * C89 + (C1427 + C1435) * C90 +
                                (C1424 + C1434) * C91 +
                                ((C188 * C824 + C141309 * C913) * C275 +
                                 (C188 * C1007 + C141309 * C1420) * C141320) *
                                    C92) *
                                   C141294 * C141485 -
                               ((C661 + C653) * C92 + (C660 + C648) * C91 +
                                (C659 + C645) * C90 + (C658 + C642) * C89) *
                                   C141294 * C816) *
                                  C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141309 * C189) * C14204 +
             (C188 * C276 + C141309 * C635) * C14035 +
             (C188 * C1601 + C141309 * C1690) * C14205 +
             (C188 * C1784 + C141309 * C2197) * C14036 +
             (C188 * C5325 + C141309 * C5391) * C14206 +
             (C188 * C5449 + C141309 * C5727) * C14037) *
                C5863 +
            (C14642 + C14643 + C14644 + C14645 + C14646 + C14658) * C141221) *
               C141294 * C816 -
           ((C15639 + C15631 + C15640 + C15634 + C15635 + C15636) * C141221 +
            ((C188 * C13475 + C141309 * C13875) * C14037 +
             (C188 * C13301 + C141309 * C13393) * C14206 +
             (C188 * C3646 + C141309 * C4004) * C14036 +
             (C188 * C3490 + C141309 * C3572) * C14205 +
             (C188 * C1006 + C141309 * C1419) * C14035 +
             (C188 * C823 + C141309 * C912) * C14204) *
                C5863) *
               C141294 * C141485) *
              C818 +
          (((C15636 + C15635 + C15634 + C15640 + C15631 + C15639) * C5863 +
            (C935 * C14204 + C1432 * C14035 +
             (C188 * C3492 + C141309 * C3574) * C14205 +
             (C188 * C3648 + C141309 * C4006) * C14036 +
             (C188 * C14876 + C141309 * C14979) * C14206 +
             (C188 * C15091 + C141309 * C15627) * C14037) *
                C141221) *
               C141294 * C141485 -
           ((C14659 + C14651 + C14652 + C14653 + C14654 + C14655) * C141221 +
            (C14658 + C14646 + C14645 + C14644 + C14643 + C14642) * C5863) *
               C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q));
    d2eezz[19] +=
        (-std::pow(Pi, 2.5) *
         (((((C713 * C108 + C721 + C721 + C141320 * C714) * C5865 +
             C7785 * C5866 + C7786 * C5867) *
                C5863 +
            (C6615 + C6616 + C6629) * C141221) *
               C141294 * C816 -
           ((C7788 + C7775 + C7776) * C141221 +
            ((C713 * C6729 + C7777 + C7777 + C141320 * C7765) * C5867 +
             C7786 * C5866 + C7785 * C5865) *
                C5863) *
               C141294 * C141485) *
              C818 +
          (((C7776 + C7775 + C7788) * C5863 +
            (C1526 * C5865 + C6628 * C5866 +
             (C713 * C6730 + C7778 + C7778 + C141320 * C7766) * C5867) *
                C141221) *
               C141294 * C141485 -
           ((C6630 + C6621 + C6622) * C141221 +
            (C6629 + C6616 + C6615) * C5863) *
               C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C141320 * C714) * C141309 * C89 +
            C747 * C90 + C748 * C91 + C749 * C92) *
               C141294 * C816 -
           (C1528 * C92 + C1529 * C91 + C1530 * C90 +
            (C713 * C823 + C1517 + C1517 + C141320 * C1505) * C141309 * C89) *
               C141294 * C141485) *
              C818 +
          ((C1530 * C89 + C1529 * C90 + C1528 * C91 +
            (C713 * C824 + C1518 + C1518 + C141320 * C1506) * C141309 * C92) *
               C141294 * C141485 -
           (C750 * C92 + C749 * C91 + C748 * C90 + C747 * C89) * C141294 *
               C816) *
              C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C14733 * C108 + C14737 + C14737 + C14035 * C714 + C14734 * C1601 +
             C14738 + C14738 + C14036 * C2283 + C14735 * C5325 + C14739 +
             C14739 + C14037 * C5781) *
                C141309 * C5863 +
            (C14773 + C14774 + C14775) * C141309 * C141221) *
               C141294 * C816 -
           ((C15761 + C15762 + C15763) * C141309 * C141221 +
            (C14735 * C13301 + C15749 + C15749 + C14037 * C13953 +
             C14734 * C3490 + C15750 + C15750 + C14036 * C4074 + C14733 * C823 +
             C15751 + C15751 + C14035 * C1505) *
                C141309 * C5863) *
               C141294 * C141485) *
              C818 +
          (((C15763 + C15762 + C15761) * C141309 * C5863 +
            (C14733 * C821 + C15752 + C15752 + C14035 * C1503 + C14734 * C3492 +
             C15753 + C15753 + C14036 * C4076 + C14735 * C14876 + C15754 +
             C15754 + C14037 * C15738) *
                C141309 * C141221) *
               C141294 * C141485 -
           ((C14776 + C14777 + C14778) * C141309 * C141221 +
            (C14775 + C14774 + C14773) * C141309 * C5863) *
               C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q));
    d2eexx[20] +=
        (-std::pow(Pi, 2.5) *
         ((((C5868 * C108 + C5873 + C5873 + C5863 * C120 + C5870 * C109 +
             C5874 + C5874 + C141221 * C121) *
                C141320 * C5865 +
            (C6774 + C6775) * C141320 * C5866 +
            (C6776 + C6777) * C141320 * C5867) *
               C1596 -
           ((C5870 * C7886 + C7896 + C7896 + C141221 * C7892 + C5868 * C7887 +
             C7897 + C7897 + C5863 * C7893) *
                C141320 * C5867 +
            (C5870 * C3491 + C7898 + C7898 + C141221 * C3499 + C5868 * C3490 +
             C7899 + C7899 + C5863 * C3498) *
                C141320 * C5866 +
            (C5870 * C1600 + C7900 + C7900 + C141221 * C1610 + C5868 * C1601 +
             C7901 + C7901 + C5863 * C1611) *
                C141320 * C5865) *
               C141487) *
              C141277 * C818 +
          (((C5868 * C1600 + C7902 + C7902 + C5863 * C1610 + C5870 * C1599 +
             C7903 + C7903 + C141221 * C1609) *
                C141320 * C5865 +
            (C5868 * C3491 + C7904 + C7904 + C5863 * C3499 + C5870 * C3492 +
             C7905 + C7905 + C141221 * C3500) *
                C141320 * C5866 +
            (C5868 * C7886 + C7906 + C7906 + C5863 * C7892 + C5870 * C7888 +
             C7907 + C7907 + C141221 * C7894) *
                C141320 * C5867) *
               C141487 -
           ((C6781 + C6780) * C141320 * C5867 +
            (C6779 + C6778) * C141320 * C5866 +
            (C5870 * C110 + C5883 + C5883 + C141221 * C122 + C5868 * C109 +
             C5884 + C5884 + C5863 * C121) *
                C141320 * C5865) *
               C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C100 * C108 + C127 + C127 + C89 * C120 + C102 * C109 + C128 + C128 +
            C90 * C121 + C104 * C110 + C129 + C129 + C91 * C122 + C106 * C111 +
            C130 + C130 + C92 * C123) *
               C141320 * C141309 * C1596 -
           (C106 * C1598 + C1614 + C1614 + C92 * C1608 + C104 * C1599 + C1615 +
            C1615 + C91 * C1609 + C102 * C1600 + C1616 + C1616 + C90 * C1610 +
            C100 * C1601 + C1617 + C1617 + C89 * C1611) *
               C141320 * C141309 * C141487) *
              C141277 * C818 +
          ((C100 * C1600 + C1618 + C1618 + C89 * C1610 + C102 * C1599 + C1619 +
            C1619 + C90 * C1609 + C104 * C1598 + C1620 + C1620 + C91 * C1608 +
            C106 * C1602 + C1621 + C1621 + C92 * C1612) *
               C141320 * C141309 * C141487 -
           (C106 * C112 + C131 + C131 + C92 * C124 + C104 * C111 + C132 + C132 +
            C91 * C123 + C102 * C110 + C133 + C133 + C90 * C122 + C100 * C109 +
            C134 + C134 + C89 * C121) *
               C141320 * C141309 * C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C5868 * C108 + C5873 + C5873 + C5863 * C120 + C5870 * C109 +
             C5874 + C5874 + C141221 * C121) *
                C14035 +
            (C15907 + C15908) * C14036 + (C15909 + C15910) * C14037) *
               C141309 * C1596 -
           ((C5870 * C15861 + C15879 + C15879 + C141221 * C15867 +
             C5868 * C15862 + C15880 + C15880 + C5863 * C15868) *
                C14037 +
            (C15910 + C15909) * C14036 + (C15908 + C15907) * C14035) *
               C141309 * C141487) *
              C141277 * C818 +
          (((C15911 + C15912) * C14035 + (C15913 + C15914) * C14036 +
            (C5868 * C15861 + C15889 + C15889 + C5863 * C15867 +
             C5870 * C15863 + C15890 + C15890 + C141221 * C15869) *
                C14037) *
               C141309 * C141487 -
           ((C15914 + C15913) * C14037 + (C15912 + C15911) * C14036 +
            (C5870 * C110 + C5883 + C5883 + C141221 * C122 + C5868 * C109 +
             C5884 + C5884 + C5863 * C121) *
                C14035) *
               C141309 * C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eexy[20] +=
        (-std::pow(Pi, 2.5) *
         ((((C5964 * C108 + C5865 * C189 + C5965 * C823 + C5866 * C912 +
             C5966 * C2960 + C5867 * C3026) *
                C5869 +
            (C5964 * C114 + C5865 * C195 + C5965 * C828 + C5866 * C917 +
             C5966 * C2964 + C5867 * C3030) *
                C5863 +
            (C5992 + C5993 + C5994) * C5871 +
            (C5995 + C5996 + C5997) * C141221) *
               C141320 * C1596 -
           ((C8024 + C8025 + C8026) * C141221 +
            (C8027 + C8028 + C8029) * C5871 +
            (C5966 * C7890 + C5867 * C8009 + C5965 * C3494 + C5866 * C3576 +
             C5964 * C1606 + C5865 * C1695) *
                C5863 +
            (C5966 * C7887 + C5867 * C8006 + C5965 * C3490 + C5866 * C3572 +
             C5964 * C1601 + C5865 * C1690) *
                C5869) *
               C141320 * C141487) *
              C141277 * C818 +
          (((C8029 + C8028 + C8027) * C5869 + (C8026 + C8025 + C8024) * C5863 +
            (C5964 * C1599 + C5865 * C1688 + C5965 * C3492 + C5866 * C3574 +
             C5966 * C7888 + C5867 * C8007) *
                C5871 +
            (C5964 * C1604 + C5865 * C1693 + C5965 * C3496 + C5866 * C3578 +
             C5966 * C7891 + C5867 * C8010) *
                C141221) *
               C141320 * C141487 -
           ((C5998 + C5999 + C6000) * C141221 +
            (C6001 + C6002 + C6003) * C5871 + (C5997 + C5996 + C5995) * C5863 +
            (C5994 + C5993 + C5992) * C5869) *
               C141320 * C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141309 * C189) * C101 +
            (C188 * C114 + C141309 * C195) * C89 + C218 * C103 + C219 * C90 +
            C220 * C105 + C221 * C91 + C222 * C107 + C223 * C92) *
               C141320 * C1596 -
           (C1710 * C92 + C1711 * C107 + C1712 * C91 + C1713 * C105 +
            C1714 * C90 + C1715 * C103 +
            (C188 * C1606 + C141309 * C1695) * C89 +
            (C188 * C1601 + C141309 * C1690) * C101) *
               C141320 * C141487) *
              C141277 * C818 +
          ((C1715 * C101 + C1714 * C89 + C1713 * C103 + C1712 * C90 +
            C1711 * C105 + C1710 * C91 +
            (C188 * C1602 + C141309 * C1691) * C107 +
            (C188 * C1607 + C141309 * C1696) * C92) *
               C141320 * C141487 -
           (C224 * C92 + C225 * C107 + C223 * C91 + C222 * C105 + C221 * C90 +
            C220 * C103 + C219 * C89 + C218 * C101) *
               C141320 * C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141309 * C189) * C5869 +
             (C188 * C114 + C141309 * C195) * C5863 + C218 * C5871 +
             C219 * C141221) *
                C14035 +
            (C16049 + C16050 + C16023 + C16024) * C14036 +
            (C16051 + C16052 + C16029 + C16030) * C14037) *
               C1596 -
           ((C16047 * C141221 + C16048 * C5871 +
             (C188 * C15865 + C141309 * C16016) * C5863 +
             (C188 * C15862 + C141309 * C16013) * C5869) *
                C14037 +
            (C16030 + C16029 + C16052 + C16051) * C14036 +
            (C16024 + C16023 + C16050 + C16049) * C14035) *
               C141487) *
              C141277 * C818 +
          (((C16035 + C16036 + C16037 + C16038) * C14035 +
            (C16039 + C16040 + C16041 + C16042) * C14036 +
            (C16048 * C5869 + C16047 * C5863 +
             (C188 * C15863 + C141309 * C16014) * C5871 +
             (C188 * C15866 + C141309 * C16017) * C141221) *
                C14037) *
               C141487 -
           ((C16042 + C16041 + C16040 + C16039) * C14037 +
            (C16038 + C16037 + C16036 + C16035) * C14036 +
            (C221 * C141221 + C220 * C5871 + C219 * C5863 + C218 * C5869) *
                C14035) *
               C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eexz[20] +=
        (-std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141320 * C276) * C5869 +
             (C275 * C114 + C141320 * C282) * C5863 + C305 * C5871 +
             C306 * C141221) *
                C5865 +
            (C7038 + C7039 + C7012 + C7013) * C5866 +
            (C7040 + C7041 + C7018 + C7019) * C5867) *
               C1596 -
           ((C8142 * C141221 + C8143 * C5871 +
             (C275 * C7890 + C141320 * C8131) * C5863 +
             (C275 * C7887 + C141320 * C8128) * C5869) *
                C5867 +
            (C8144 * C141221 + C8145 * C5871 +
             (C275 * C3494 + C141320 * C3650) * C5863 +
             (C275 * C3490 + C141320 * C3646) * C5869) *
                C5866 +
            (C1808 * C141221 + C1809 * C5871 +
             (C275 * C1606 + C141320 * C1789) * C5863 +
             (C275 * C1601 + C141320 * C1784) * C5869) *
                C5865) *
               C141487) *
              C141277 * C818 +
          (((C1809 * C5869 + C1808 * C5863 + C1807 * C5871 + C1806 * C141221) *
                C5865 +
            (C8145 * C5869 + C8144 * C5863 +
             (C275 * C3492 + C141320 * C3648) * C5871 +
             (C275 * C3496 + C141320 * C3652) * C141221) *
                C5866 +
            (C8143 * C5869 + C8142 * C5863 +
             (C275 * C7888 + C141320 * C8129) * C5871 +
             (C275 * C7891 + C141320 * C8132) * C141221) *
                C5867) *
               C141487 -
           ((C7031 + C7030 + C7029 + C7028) * C5867 +
            (C7027 + C7026 + C7025 + C7024) * C5866 +
            (C308 * C141221 + C307 * C5871 + C306 * C5863 + C305 * C5869) *
                C5865) *
               C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141320 * C276) * C101 +
            (C275 * C114 + C141320 * C282) * C89 + C305 * C103 + C306 * C90 +
            C307 * C105 + C308 * C91 + C309 * C107 + C310 * C92) *
               C141309 * C1596 -
           (C1804 * C92 + C1805 * C107 + C1806 * C91 + C1807 * C105 +
            C1808 * C90 + C1809 * C103 +
            (C275 * C1606 + C141320 * C1789) * C89 +
            (C275 * C1601 + C141320 * C1784) * C101) *
               C141309 * C141487) *
              C141277 * C818 +
          ((C1809 * C101 + C1808 * C89 + C1807 * C103 + C1806 * C90 +
            C1805 * C105 + C1804 * C91 +
            (C275 * C1602 + C141320 * C1785) * C107 +
            (C275 * C1607 + C141320 * C1790) * C92) *
               C141309 * C141487 -
           (C311 * C92 + C312 * C107 + C310 * C91 + C309 * C105 + C308 * C90 +
            C307 * C103 + C306 * C89 + C305 * C101) *
               C141309 * C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C14204 * C108 + C14035 * C276 + C14205 * C1601 + C14036 * C1784 +
             C14206 * C5325 + C14037 * C5449) *
                C5869 +
            (C14204 * C114 + C14035 * C282 + C14205 * C1606 + C14036 * C1789 +
             C14206 * C5329 + C14037 * C5453) *
                C5863 +
            (C14232 + C14233 + C14234) * C5871 +
            (C14235 + C14236 + C14237) * C141221) *
               C141309 * C1596 -
           ((C16169 + C16170 + C16171) * C141221 +
            (C16172 + C16173 + C16174) * C5871 +
            (C14206 * C15865 + C14037 * C16154 + C14205 * C5329 +
             C14036 * C5453 + C14204 * C1606 + C14035 * C1789) *
                C5863 +
            (C14206 * C15862 + C14037 * C16151 + C14205 * C5325 +
             C14036 * C5449 + C14204 * C1601 + C14035 * C1784) *
                C5869) *
               C141309 * C141487) *
              C141277 * C818 +
          (((C16174 + C16173 + C16172) * C5869 +
            (C16171 + C16170 + C16169) * C5863 +
            (C14204 * C1599 + C14035 * C1782 + C14205 * C5327 + C14036 * C5451 +
             C14206 * C15863 + C14037 * C16152) *
                C5871 +
            (C14204 * C1604 + C14035 * C1787 + C14205 * C5331 + C14036 * C5455 +
             C14206 * C15866 + C14037 * C16155) *
                C141221) *
               C141309 * C141487 -
           ((C14238 + C14239 + C14240) * C141221 +
            (C14241 + C14242 + C14243) * C5871 +
            (C14237 + C14236 + C14235) * C5863 +
            (C14234 + C14233 + C14232) * C5869) *
               C141309 * C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[20] +=
        (-std::pow(Pi, 2.5) *
         ((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C141221 * C115) *
                C5964 +
            (C5869 * C189 + C5863 * C362 + C5871 * C190 + C141221 * C363) *
                C5865 +
            (C7175 + C7176) * C5965 + (C7177 + C7178) * C5866 +
            (C7179 + C7180) * C5966 + (C7181 + C7182) * C5867) *
               C141320 * C1596 -
           ((C5871 * C8005 + C141221 * C8243 + C5869 * C8006 + C5863 * C8244) *
                C5867 +
            (C5871 * C7886 + C141221 * C7889 + C5869 * C7887 + C5863 * C7890) *
                C5966 +
            (C5871 * C3573 + C141221 * C3721 + C5869 * C3572 + C5863 * C3720) *
                C5866 +
            (C5871 * C3491 + C141221 * C3495 + C5869 * C3490 + C5863 * C3494) *
                C5965 +
            (C5871 * C1689 + C141221 * C1877 + C5869 * C1690 + C5863 * C1878) *
                C5865 +
            (C5871 * C1600 + C141221 * C1605 + C5869 * C1601 + C5863 * C1606) *
                C5964) *
               C141320 * C141487) *
              C141277 * C818 +
          (((C5869 * C1600 + C5863 * C1605 + C5871 * C1599 + C141221 * C1604) *
                C5964 +
            (C5869 * C1689 + C5863 * C1877 + C5871 * C1688 + C141221 * C1876) *
                C5865 +
            (C5869 * C3491 + C5863 * C3495 + C5871 * C3492 + C141221 * C3496) *
                C5965 +
            (C5869 * C3573 + C5863 * C3721 + C5871 * C3574 + C141221 * C3722) *
                C5866 +
            (C5869 * C7886 + C5863 * C7889 + C5871 * C7888 + C141221 * C7891) *
                C5966 +
            (C5869 * C8005 + C5863 * C8243 + C5871 * C8007 + C141221 * C8245) *
                C5867) *
               C141320 * C141487 -
           ((C7190 + C7189) * C5867 + (C7188 + C7187) * C5966 +
            (C7186 + C7185) * C5866 + (C7184 + C7183) * C5965 +
            (C5871 * C191 + C141221 * C364 + C5869 * C190 + C5863 * C363) *
                C5865 +
            (C5871 * C110 + C141221 * C116 + C5869 * C109 + C5863 * C115) *
                C5964) *
               C141320 * C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
             C91 * C116 + C107 * C111 + C92 * C117) *
                C188 +
            (C101 * C189 + C89 * C362 + C103 * C190 + C90 * C363 + C105 * C191 +
             C91 * C364 + C107 * C192 + C92 * C365) *
                C141309) *
               C141320 * C1596 -
           ((C107 * C1687 + C92 * C1875 + C105 * C1688 + C91 * C1876 +
             C103 * C1689 + C90 * C1877 + C101 * C1690 + C89 * C1878) *
                C141309 +
            (C107 * C1598 + C92 * C1603 + C105 * C1599 + C91 * C1604 +
             C103 * C1600 + C90 * C1605 + C101 * C1601 + C89 * C1606) *
                C188) *
               C141320 * C141487) *
              C141277 * C818 +
          (((C101 * C1600 + C89 * C1605 + C103 * C1599 + C90 * C1604 +
             C105 * C1598 + C91 * C1603 + C107 * C1602 + C92 * C1607) *
                C188 +
            (C101 * C1689 + C89 * C1877 + C103 * C1688 + C90 * C1876 +
             C105 * C1687 + C91 * C1875 + C107 * C1691 + C92 * C1879) *
                C141309) *
               C141320 * C141487 -
           ((C107 * C193 + C92 * C366 + C105 * C192 + C91 * C365 + C103 * C191 +
             C90 * C364 + C101 * C190 + C89 * C363) *
                C141309 +
            (C107 * C112 + C92 * C118 + C105 * C111 + C91 * C117 + C103 * C110 +
             C90 * C116 + C101 * C109 + C89 * C115) *
                C188) *
               C141320 * C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C141221 * C115) *
                 C188 +
             (C5869 * C189 + C5863 * C362 + C5871 * C190 + C141221 * C363) *
                 C141309) *
                C14035 +
            ((C16308 + C16309) * C188 + (C16310 + C16311) * C141309) * C14036 +
            ((C16312 + C16313) * C188 + (C16314 + C16315) * C141309) * C14037) *
               C1596 -
           (((C5871 * C16012 + C141221 * C16272 + C5869 * C16013 +
              C5863 * C16273) *
                 C141309 +
             (C5871 * C15861 + C141221 * C15864 + C5869 * C15862 +
              C5863 * C15865) *
                 C188) *
                C14037 +
            ((C16315 + C16314) * C141309 + (C16313 + C16312) * C188) * C14036 +
            ((C16311 + C16310) * C141309 + (C16309 + C16308) * C188) * C14035) *
               C141487) *
              C141277 * C818 +
          ((((C16316 + C16317) * C188 + (C16318 + C16319) * C141309) * C14035 +
            ((C16320 + C16321) * C188 + (C16322 + C16323) * C141309) * C14036 +
            ((C5869 * C15861 + C5863 * C15864 + C5871 * C15863 +
              C141221 * C15866) *
                 C188 +
             (C5869 * C16012 + C5863 * C16272 + C5871 * C16014 +
              C141221 * C16274) *
                 C141309) *
                C14037) *
               C141487 -
           (((C16323 + C16322) * C141309 + (C16321 + C16320) * C188) * C14037 +
            ((C16319 + C16318) * C141309 + (C16317 + C16316) * C188) * C14036 +
            ((C5871 * C191 + C141221 * C364 + C5869 * C190 + C5863 * C363) *
                 C141309 +
             (C5871 * C110 + C141221 * C116 + C5869 * C109 + C5863 * C115) *
                 C188) *
                C14035) *
               C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[20] +=
        (-std::pow(Pi, 2.5) *
         ((((C6237 * C108 + C6241 + C6241 + C5865 * C419 + C6238 * C823 +
             C6242 + C6242 + C5866 * C1171 + C6239 * C2960 + C6243 + C6243 +
             C5867 * C3196) *
                C5863 +
            (C6277 + C6278 + C6279) * C141221) *
               C141320 * C1596 -
           ((C8369 + C8370 + C8371) * C141221 +
            (C6239 * C7887 + C8357 + C8357 + C5867 * C8345 + C6238 * C3490 +
             C8358 + C8358 + C5866 * C3790 + C6237 * C1601 + C8359 + C8359 +
             C5865 * C1949) *
                C5863) *
               C141320 * C141487) *
              C141277 * C818 +
          (((C8371 + C8370 + C8369) * C5863 +
            (C6237 * C1599 + C8360 + C8360 + C5865 * C1947 + C6238 * C3492 +
             C8361 + C8361 + C5866 * C3792 + C6239 * C7888 + C8362 + C8362 +
             C5867 * C8346) *
                C141221) *
               C141320 * C141487 -
           ((C6280 + C6281 + C6282) * C141221 +
            (C6279 + C6278 + C6277) * C5863) *
               C141320 * C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C418 * C108 + C426 + C426 + C141309 * C419) * C89 + C448 * C90 +
            C449 * C91 + C450 * C92) *
               C141320 * C1596 -
           (C1969 * C92 + C1970 * C91 + C1971 * C90 +
            (C418 * C1601 + C1961 + C1961 + C141309 * C1949) * C89) *
               C141320 * C141487) *
              C141277 * C818 +
          ((C1971 * C89 + C1970 * C90 + C1969 * C91 +
            (C418 * C1602 + C1962 + C1962 + C141309 * C1950) * C92) *
               C141320 * C141487 -
           (C451 * C92 + C450 * C91 + C449 * C90 + C448 * C89) * C141320 *
               C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C418 * C108 + C426 + C426 + C141309 * C419) * C5863 +
             C448 * C141221) *
                C14035 +
            (C16449 + C16427) * C14036 + (C16450 + C16430) * C14037) *
               C1596 -
           ((C16448 * C141221 +
             (C418 * C15862 + C16434 + C16434 + C141309 * C16422) * C5863) *
                C14037 +
            (C16430 + C16450) * C14036 + (C16427 + C16449) * C14035) *
               C141487) *
              C141277 * C818 +
          (((C16435 + C16436) * C14035 + (C16437 + C16438) * C14036 +
            (C16448 * C5863 +
             (C418 * C15863 + C16439 + C16439 + C141309 * C16423) * C141221) *
                C14037) *
               C141487 -
           ((C16438 + C16437) * C14037 + (C16436 + C16435) * C14036 +
            (C449 * C141221 + C448 * C5863) * C14035) *
               C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[20] +=
        (-std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141320 * C276) * C5964 +
             (C275 * C189 + C141320 * C501) * C5865 + C7032 * C5965 +
             C7428 * C5866 + C7034 * C5966 + C7429 * C5867) *
                C5863 +
            (C6357 + C6358 + C6359 + C6360 + C6361 + C6373) * C141221) *
               C1596 -
           ((C8483 + C8475 + C8484 + C8478 + C8479 + C8480) * C141221 +
            ((C275 * C8006 + C141320 * C8470) * C5867 +
             (C275 * C7887 + C141320 * C8128) * C5966 +
             (C275 * C3572 + C141320 * C3864) * C5866 +
             (C275 * C3490 + C141320 * C3646) * C5965 +
             (C275 * C1690 + C141320 * C2040) * C5865 +
             (C275 * C1601 + C141320 * C1784) * C5964) *
                C5863) *
               C141487) *
              C141277 * C818 +
          (((C8480 + C8479 + C8478 + C8484 + C8475 + C8483) * C5863 +
            (C1807 * C5964 + C2053 * C5865 +
             (C275 * C3492 + C141320 * C3648) * C5965 +
             (C275 * C3574 + C141320 * C3866) * C5866 +
             (C275 * C7888 + C141320 * C8129) * C5966 +
             (C275 * C8007 + C141320 * C8471) * C5867) *
                C141221) *
               C141487 -
           ((C6374 + C6366 + C6367 + C6368 + C6369 + C6370) * C141221 +
            (C6373 + C6361 + C6360 + C6359 + C6358 + C6357) * C5863) *
               C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((((C275 * C108 + C141320 * C276) * C188 +
                                 (C275 * C189 + C141320 * C501) * C141309) *
                                    C89 +
                                (C508 + C524) * C90 + C528 * C91 + C529 * C92) *
                                   C1596 -
                               ((C2055 + C2045) * C92 + (C2056 + C2048) * C91 +
                                (C2057 + C2051) * C90 +
                                ((C275 * C1690 + C141320 * C2040) * C141309 +
                                 (C275 * C1601 + C141320 * C1784) * C188) *
                                    C89) *
                                   C141487) *
                                  C141277 * C818 +
                              (((C2051 + C2057) * C89 + (C2048 + C2056) * C90 +
                                (C2045 + C2055) * C91 +
                                ((C275 * C1602 + C141320 * C1785) * C188 +
                                 (C275 * C1691 + C141320 * C2041) * C141309) *
                                    C92) *
                                   C141487 -
                               ((C527 + C519) * C92 + (C526 + C514) * C91 +
                                (C525 + C511) * C90 + (C524 + C508) * C89) *
                                   C1596) *
                                  C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C14204 * C108 + C14035 * C276 + C14205 * C1601 + C14036 * C1784 +
              C14206 * C5325 + C14037 * C5449) *
                 C188 +
             (C14204 * C189 + C14035 * C501 + C14205 * C1690 + C14036 * C2040 +
              C14206 * C5391 + C14037 * C5619) *
                 C141309) *
                C5863 +
            ((C14232 + C14233 + C14234) * C188 +
             (C14488 + C14489 + C14490) * C141309) *
                C141221) *
               C1596 -
           (((C16558 + C16559 + C16560) * C141309 +
             (C16172 + C16173 + C16174) * C188) *
                C141221 +
            ((C14206 * C16013 + C14037 * C16549 + C14205 * C5391 +
              C14036 * C5619 + C14204 * C1690 + C14035 * C2040) *
                 C141309 +
             (C14206 * C15862 + C14037 * C16151 + C14205 * C5325 +
              C14036 * C5449 + C14204 * C1601 + C14035 * C1784) *
                 C188) *
                C5863) *
               C141487) *
              C141277 * C818 +
          ((((C16174 + C16173 + C16172) * C188 +
             (C16560 + C16559 + C16558) * C141309) *
                C5863 +
            ((C14204 * C1599 + C14035 * C1782 + C14205 * C5327 +
              C14036 * C5451 + C14206 * C15863 + C14037 * C16152) *
                 C188 +
             (C14204 * C1688 + C14035 * C2038 + C14205 * C5393 +
              C14036 * C5621 + C14206 * C16014 + C14037 * C16550) *
                 C141309) *
                C141221) *
               C141487 -
           (((C14491 + C14492 + C14493) * C141309 +
             (C14241 + C14242 + C14243) * C188) *
                C141221 +
            ((C14490 + C14489 + C14488) * C141309 +
             (C14234 + C14233 + C14232) * C188) *
                C5863) *
               C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eezx[20] +=
        (-std::pow(Pi, 2.5) *
         (((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C141221 * C115) *
                 C275 +
             (C5869 * C276 + C5863 * C579 + C5871 * C277 + C141221 * C580) *
                 C141320) *
                C5865 +
            ((C7175 + C7176) * C275 + (C7549 + C7550) * C141320) * C5866 +
            ((C7179 + C7180) * C275 + (C7551 + C7552) * C141320) * C5867) *
               C1596 -
           (((C5871 * C8127 + C141221 * C8582 + C5869 * C8128 + C5863 * C8583) *
                 C141320 +
             (C5871 * C7886 + C141221 * C7889 + C5869 * C7887 + C5863 * C7890) *
                 C275) *
                C5867 +
            ((C5871 * C3647 + C141221 * C3935 + C5869 * C3646 + C5863 * C3934) *
                 C141320 +
             (C5871 * C3491 + C141221 * C3495 + C5869 * C3490 + C5863 * C3494) *
                 C275) *
                C5866 +
            ((C5871 * C1783 + C141221 * C2125 + C5869 * C1784 + C5863 * C2126) *
                 C141320 +
             (C5871 * C1600 + C141221 * C1605 + C5869 * C1601 + C5863 * C1606) *
                 C275) *
                C5865) *
               C141487) *
              C141277 * C818 +
          ((((C5869 * C1600 + C5863 * C1605 + C5871 * C1599 + C141221 * C1604) *
                 C275 +
             (C5869 * C1783 + C5863 * C2125 + C5871 * C1782 + C141221 * C2124) *
                 C141320) *
                C5865 +
            ((C5869 * C3491 + C5863 * C3495 + C5871 * C3492 + C141221 * C3496) *
                 C275 +
             (C5869 * C3647 + C5863 * C3935 + C5871 * C3648 + C141221 * C3936) *
                 C141320) *
                C5866 +
            ((C5869 * C7886 + C5863 * C7889 + C5871 * C7888 + C141221 * C7891) *
                 C275 +
             (C5869 * C8127 + C5863 * C8582 + C5871 * C8129 + C141221 * C8584) *
                 C141320) *
                C5867) *
               C141487 -
           (((C7556 + C7555) * C141320 + (C7188 + C7187) * C275) * C5867 +
            ((C7554 + C7553) * C141320 + (C7184 + C7183) * C275) * C5866 +
            ((C5871 * C278 + C141221 * C581 + C5869 * C277 + C5863 * C580) *
                 C141320 +
             (C5871 * C110 + C141221 * C116 + C5869 * C109 + C5863 * C115) *
                 C275) *
                C5865) *
               C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
             C91 * C116 + C107 * C111 + C92 * C117) *
                C275 +
            (C101 * C276 + C89 * C579 + C103 * C277 + C90 * C580 + C105 * C278 +
             C91 * C581 + C107 * C279 + C92 * C582) *
                C141320) *
               C141309 * C1596 -
           ((C107 * C1781 + C92 * C2123 + C105 * C1782 + C91 * C2124 +
             C103 * C1783 + C90 * C2125 + C101 * C1784 + C89 * C2126) *
                C141320 +
            (C107 * C1598 + C92 * C1603 + C105 * C1599 + C91 * C1604 +
             C103 * C1600 + C90 * C1605 + C101 * C1601 + C89 * C1606) *
                C275) *
               C141309 * C141487) *
              C141277 * C818 +
          (((C101 * C1600 + C89 * C1605 + C103 * C1599 + C90 * C1604 +
             C105 * C1598 + C91 * C1603 + C107 * C1602 + C92 * C1607) *
                C275 +
            (C101 * C1783 + C89 * C2125 + C103 * C1782 + C90 * C2124 +
             C105 * C1781 + C91 * C2123 + C107 * C1785 + C92 * C2127) *
                C141320) *
               C141309 * C141487 -
           ((C107 * C280 + C92 * C583 + C105 * C279 + C91 * C582 + C103 * C278 +
             C90 * C581 + C101 * C277 + C89 * C580) *
                C141320 +
            (C107 * C112 + C92 * C118 + C105 * C111 + C91 * C117 + C103 * C110 +
             C90 * C116 + C101 * C109 + C89 * C115) *
                C275) *
               C141309 * C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C141221 * C115) *
                C14204 +
            (C5869 * C276 + C5863 * C579 + C5871 * C277 + C141221 * C580) *
                C14035 +
            (C16308 + C16309) * C14205 + (C16678 + C16679) * C14036 +
            (C16312 + C16313) * C14206 + (C16680 + C16681) * C14037) *
               C141309 * C1596 -
           ((C5871 * C16150 + C141221 * C16658 + C5869 * C16151 +
             C5863 * C16659) *
                C14037 +
            (C5871 * C15861 + C141221 * C15864 + C5869 * C15862 +
             C5863 * C15865) *
                C14206 +
            (C16681 + C16680) * C14036 + (C16313 + C16312) * C14205 +
            (C16679 + C16678) * C14035 + (C16309 + C16308) * C14204) *
               C141309 * C141487) *
              C141277 * C818 +
          (((C16316 + C16317) * C14204 + (C16682 + C16683) * C14035 +
            (C16320 + C16321) * C14205 + (C16684 + C16685) * C14036 +
            (C5869 * C15861 + C5863 * C15864 + C5871 * C15863 +
             C141221 * C15866) *
                C14206 +
            (C5869 * C16150 + C5863 * C16658 + C5871 * C16152 +
             C141221 * C16660) *
                C14037) *
               C141309 * C141487 -
           ((C16685 + C16684) * C14037 + (C16321 + C16320) * C14206 +
            (C16683 + C16682) * C14036 + (C16317 + C16316) * C14205 +
            (C5871 * C278 + C141221 * C581 + C5869 * C277 + C5863 * C580) *
                C14035 +
            (C5871 * C110 + C141221 * C116 + C5869 * C109 + C5863 * C115) *
                C14204) *
               C141309 * C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eezy[20] +=
        (-std::pow(Pi, 2.5) *
         (((((C5964 * C108 + C5865 * C189 + C5965 * C823 + C5866 * C912 +
              C5966 * C2960 + C5867 * C3026) *
                 C275 +
             (C5964 * C276 + C5865 * C635 + C5965 * C1006 + C5866 * C1419 +
              C5966 * C3084 + C5867 * C3362) *
                 C141320) *
                C5863 +
            ((C5992 + C5993 + C5994) * C275 +
             (C6535 + C6536 + C6537) * C141320) *
                C141221) *
               C1596 -
           (((C8693 + C8694 + C8695) * C141320 +
             (C8027 + C8028 + C8029) * C275) *
                C141221 +
            ((C5966 * C8128 + C5867 * C8684 + C5965 * C3646 + C5866 * C4004 +
              C5964 * C1784 + C5865 * C2197) *
                 C141320 +
             (C5966 * C7887 + C5867 * C8006 + C5965 * C3490 + C5866 * C3572 +
              C5964 * C1601 + C5865 * C1690) *
                 C275) *
                C5863) *
               C141487) *
              C141277 * C818 +
          ((((C8029 + C8028 + C8027) * C275 +
             (C8695 + C8694 + C8693) * C141320) *
                C5863 +
            ((C5964 * C1599 + C5865 * C1688 + C5965 * C3492 + C5866 * C3574 +
              C5966 * C7888 + C5867 * C8007) *
                 C275 +
             (C5964 * C1782 + C5865 * C2195 + C5965 * C3648 + C5866 * C4006 +
              C5966 * C8129 + C5867 * C8685) *
                 C141320) *
                C141221) *
               C141487 -
           (((C6538 + C6539 + C6540) * C141320 +
             (C6001 + C6002 + C6003) * C275) *
                C141221 +
            ((C6537 + C6536 + C6535) * C141320 +
             (C5994 + C5993 + C5992) * C275) *
                C5863) *
               C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((((C188 * C108 + C141309 * C189) * C275 +
                                 (C188 * C276 + C141309 * C635) * C141320) *
                                    C89 +
                                (C642 + C658) * C90 + C662 * C91 + C663 * C92) *
                                   C1596 -
                               ((C2212 + C2202) * C92 + (C2213 + C2205) * C91 +
                                (C2214 + C2208) * C90 +
                                ((C188 * C1784 + C141309 * C2197) * C141320 +
                                 (C188 * C1601 + C141309 * C1690) * C275) *
                                    C89) *
                                   C141487) *
                                  C141277 * C818 +
                              (((C2208 + C2214) * C89 + (C2205 + C2213) * C90 +
                                (C2202 + C2212) * C91 +
                                ((C188 * C1602 + C141309 * C1691) * C275 +
                                 (C188 * C1785 + C141309 * C2198) * C141320) *
                                    C92) *
                                   C141487 -
                               ((C661 + C653) * C92 + (C660 + C648) * C91 +
                                (C659 + C645) * C90 + (C658 + C642) * C89) *
                                   C1596) *
                                  C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141309 * C189) * C14204 +
             (C188 * C276 + C141309 * C635) * C14035 + C16043 * C14205 +
             C16798 * C14036 + C16045 * C14206 + C16799 * C14037) *
                C5863 +
            (C14642 + C14643 + C14644 + C14645 + C14646 + C14658) * C141221) *
               C1596 -
           ((C16801 + C16793 + C16794 + C16795 + C16796 + C16797) * C141221 +
            ((C188 * C16151 + C141309 * C16784) * C14037 +
             (C188 * C15862 + C141309 * C16013) * C14206 + C16799 * C14036 +
             C16045 * C14205 + C16798 * C14035 + C16043 * C14204) *
                C5863) *
               C141487) *
              C141277 * C818 +
          (((C16797 + C16796 + C16795 + C16794 + C16793 + C16801) * C5863 +
            (C1713 * C14204 + C2210 * C14035 + C14130 * C14205 +
             C14657 * C14036 + (C188 * C15863 + C141309 * C16014) * C14206 +
             (C188 * C16152 + C141309 * C16785) * C14037) *
                C141221) *
               C141487 -
           ((C14659 + C14651 + C14652 + C14653 + C14654 + C14655) * C141221 +
            (C14658 + C14646 + C14645 + C14644 + C14643 + C14642) * C5863) *
               C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eezz[20] +=
        (-std::pow(Pi, 2.5) *
         (((((C713 * C108 + C721 + C721 + C141320 * C714) * C5865 +
             C7785 * C5866 + C7786 * C5867) *
                C5863 +
            (C6615 + C6616 + C6629) * C141221) *
               C1596 -
           ((C8811 + C8812 + C8802) * C141221 +
            ((C713 * C7887 + C8803 + C8803 + C141320 * C8794) * C5867 +
             (C713 * C3490 + C4079 + C4079 + C141320 * C4074) * C5866 +
             (C713 * C1601 + C2295 + C2295 + C141320 * C2283) * C5865) *
                C5863) *
               C141487) *
              C141277 * C818 +
          (((C8802 + C8812 + C8811) * C5863 +
            (C2304 * C5865 +
             (C713 * C3492 + C4081 + C4081 + C141320 * C4076) * C5866 +
             (C713 * C7888 + C8804 + C8804 + C141320 * C8795) * C5867) *
                C141221) *
               C141487 -
           ((C6630 + C6621 + C6622) * C141221 +
            (C6629 + C6616 + C6615) * C5863) *
               C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C141320 * C714) * C141309 * C89 +
            C747 * C90 + C748 * C91 + C749 * C92) *
               C1596 -
           (C2306 * C92 + C2307 * C91 + C2308 * C90 +
            (C713 * C1601 + C2295 + C2295 + C141320 * C2283) * C141309 * C89) *
               C141487) *
              C141277 * C818 +
          ((C2308 * C89 + C2307 * C90 + C2306 * C91 +
            (C713 * C1602 + C2296 + C2296 + C141320 * C2284) * C141309 * C92) *
               C141487 -
           (C750 * C92 + C749 * C91 + C748 * C90 + C747 * C89) * C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C14733 * C108 + C14737 + C14737 + C14035 * C714 + C14734 * C1601 +
             C14738 + C14738 + C14036 * C2283 + C14735 * C5325 + C14739 +
             C14739 + C14037 * C5781) *
                C141309 * C5863 +
            (C14773 + C14774 + C14775) * C141309 * C141221) *
               C1596 -
           ((C16924 + C16925 + C16926) * C141309 * C141221 +
            (C14735 * C15862 + C16912 + C16912 + C14037 * C16900 +
             C14734 * C5325 + C16913 + C16913 + C14036 * C5781 +
             C14733 * C1601 + C16914 + C16914 + C14035 * C2283) *
                C141309 * C5863) *
               C141487) *
              C141277 * C818 +
          (((C16926 + C16925 + C16924) * C141309 * C5863 +
            (C14733 * C1599 + C16915 + C16915 + C14035 * C2281 +
             C14734 * C5327 + C16916 + C16916 + C14036 * C5783 +
             C14735 * C15863 + C16917 + C16917 + C14037 * C16901) *
                C141309 * C141221) *
               C141487 -
           ((C14776 + C14777 + C14778) * C141309 * C141221 +
            (C14775 + C14774 + C14773) * C141309 * C5863) *
               C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eexx[21] += (-std::pow(Pi, 2.5) *
                   ((((C5868 * C108 + C5873 + C5873 + C5863 * C120 +
                       C5870 * C109 + C5874 + C5874 + C141221 * C121) *
                          C141320 * C5865 +
                      (C6774 + C6775) * C141320 * C5866 +
                      (C6776 + C6777) * C141320 * C5867) *
                         C141294 * C2374 -
                     ((C5870 * C6728 + C6746 + C6746 + C141221 * C6734 +
                       C5868 * C6729 + C6747 + C6747 + C5863 * C6735) *
                          C141320 * C5867 +
                      (C6777 + C6776) * C141320 * C5866 +
                      (C6775 + C6774) * C141320 * C5865) *
                         C141294 * C141485) *
                        C2376 +
                    (((C6778 + C6779) * C141320 * C5865 +
                      (C6780 + C6781) * C141320 * C5866 +
                      (C5868 * C6728 + C6756 + C6756 + C5863 * C6734 +
                       C5870 * C6730 + C6757 + C6757 + C141221 * C6736) *
                          C141320 * C5867) *
                         C141294 * C141485 -
                     ((C6781 + C6780) * C141320 * C5867 +
                      (C6779 + C6778) * C141320 * C5866 +
                      (C5870 * C110 + C5883 + C5883 + C141221 * C122 +
                       C5868 * C109 + C5884 + C5884 + C5863 * C121) *
                          C141320 * C5865) *
                         C141294 * C2374) *
                        C141483)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   (((C100 * C108 + C127 + C127 + C89 * C120 + C102 * C109 +
                      C128 + C128 + C90 * C121 + C104 * C110 + C129 + C129 +
                      C91 * C122 + C106 * C111 + C130 + C130 + C92 * C123) *
                         C141320 * C141309 * C141294 * C2374 -
                     (C106 * C820 + C836 + C836 + C92 * C830 + C104 * C821 +
                      C837 + C837 + C91 * C831 + C102 * C822 + C838 + C838 +
                      C90 * C832 + C100 * C823 + C839 + C839 + C89 * C833) *
                         C141320 * C141309 * C141294 * C141485) *
                        C2376 +
                    ((C100 * C822 + C840 + C840 + C89 * C832 + C102 * C821 +
                      C841 + C841 + C90 * C831 + C104 * C820 + C842 + C842 +
                      C91 * C830 + C106 * C824 + C843 + C843 + C92 * C834) *
                         C141320 * C141309 * C141294 * C141485 -
                     (C106 * C112 + C131 + C131 + C92 * C124 + C104 * C111 +
                      C132 + C132 + C91 * C123 + C102 * C110 + C133 + C133 +
                      C90 * C122 + C100 * C109 + C134 + C134 + C89 * C121) *
                         C141320 * C141309 * C141294 * C2374) *
                        C141483)) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   ((((C5868 * C108 + C5873 + C5873 + C5863 * C120 +
                       C5870 * C109 + C5874 + C5874 + C141221 * C121) *
                          C14035 +
                      (C15907 + C15908) * C14036 + (C15909 + C15910) * C14037) *
                         C141309 * C141294 * C2374 -
                     ((C5870 * C13302 + C13317 + C13317 + C141221 * C13310 +
                       C5868 * C13301 + C13316 + C13316 + C5863 * C13309) *
                          C14037 +
                      (C10578 + C10579) * C14036 + (C6775 + C6774) * C14035) *
                         C141309 * C141294 * C141485) *
                        C2376 +
                    (((C6778 + C6779) * C14035 +
                      (C5868 * C3491 + C7904 + C7904 + C5863 * C3499 +
                       C5870 * C3492 + C7905 + C7905 + C141221 * C3500) *
                          C14036 +
                      (C5868 * C13302 + C14880 + C14880 + C5863 * C13310 +
                       C5870 * C14876 + C14881 + C14881 + C141221 * C14878) *
                          C14037) *
                         C141309 * C141294 * C141485 -
                     ((C15914 + C15913) * C14037 + (C15912 + C15911) * C14036 +
                      (C5870 * C110 + C5883 + C5883 + C141221 * C122 +
                       C5868 * C109 + C5884 + C5884 + C5863 * C121) *
                          C14035) *
                         C141309 * C141294 * C2374) *
                        C141483)) /
                      (p * q * std::sqrt(p + q));
    d2eexy[21] +=
        (-std::pow(Pi, 2.5) *
         ((((C5964 * C108 + C5865 * C189 + C5965 * C823 + C5866 * C912 +
             C5966 * C2960 + C5867 * C3026) *
                C5869 +
            (C5964 * C114 + C5865 * C195 + C5965 * C828 + C5866 * C917 +
             C5966 * C2964 + C5867 * C3030) *
                C5863 +
            (C5992 + C5993 + C5994) * C5871 +
            (C5995 + C5996 + C5997) * C141221) *
               C141320 * C141294 * C2374 -
           ((C6898 + C6899 + C6900) * C141221 +
            (C6901 + C6902 + C6903) * C5871 +
            (C5966 * C6732 + C5867 * C6883 + C5965 * C2964 + C5866 * C3030 +
             C5964 * C828 + C5865 * C917) *
                C5863 +
            (C5966 * C6729 + C5867 * C6880 + C5965 * C2960 + C5866 * C3026 +
             C5964 * C823 + C5865 * C912) *
                C5869) *
               C141320 * C141294 * C141485) *
              C2376 +
          (((C6903 + C6902 + C6901) * C5869 + (C6900 + C6899 + C6898) * C5863 +
            (C5964 * C821 + C5865 * C910 + C5965 * C2962 + C5866 * C3028 +
             C5966 * C6730 + C5867 * C6881) *
                C5871 +
            (C5964 * C826 + C5865 * C915 + C5965 * C2966 + C5866 * C3032 +
             C5966 * C6733 + C5867 * C6884) *
                C141221) *
               C141320 * C141294 * C141485 -
           ((C5998 + C5999 + C6000) * C141221 +
            (C6001 + C6002 + C6003) * C5871 + (C5997 + C5996 + C5995) * C5863 +
            (C5994 + C5993 + C5992) * C5869) *
               C141320 * C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141309 * C189) * C101 +
            (C188 * C114 + C141309 * C195) * C89 + C218 * C103 + C219 * C90 +
            C220 * C105 + C221 * C91 + C222 * C107 + C223 * C92) *
               C141320 * C141294 * C2374 -
           (C932 * C92 + C933 * C107 + C934 * C91 + C935 * C105 + C936 * C90 +
            C937 * C103 + (C188 * C828 + C141309 * C917) * C89 +
            (C188 * C823 + C141309 * C912) * C101) *
               C141320 * C141294 * C141485) *
              C2376 +
          ((C937 * C101 + C936 * C89 + C935 * C103 + C934 * C90 + C933 * C105 +
            C932 * C91 + (C188 * C824 + C141309 * C913) * C107 +
            (C188 * C829 + C141309 * C918) * C92) *
               C141320 * C141294 * C141485 -
           (C224 * C92 + C225 * C107 + C223 * C91 + C222 * C105 + C221 * C90 +
            C220 * C103 + C219 * C89 + C218 * C101) *
               C141320 * C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141309 * C189) * C5869 +
             (C188 * C114 + C141309 * C195) * C5863 + C218 * C5871 +
             C219 * C141221) *
                C14035 +
            (C16049 + C16050 + C16023 + C16024) * C14036 +
            (C16051 + C16052 + C16029 + C16030) * C14037) *
               C141294 * C2374 -
           ((C14990 * C141221 + C14991 * C5871 +
             (C188 * C13305 + C141309 * C13397) * C5863 +
             (C188 * C13301 + C141309 * C13393) * C5869) *
                C14037 +
            (C14992 * C141221 + C14993 * C5871 +
             (C188 * C3494 + C141309 * C3576) * C5863 +
             (C188 * C3490 + C141309 * C3572) * C5869) *
                C14036 +
            (C936 * C141221 + C937 * C5871 +
             (C188 * C828 + C141309 * C917) * C5863 +
             (C188 * C823 + C141309 * C912) * C5869) *
                C14035) *
               C141294 * C141485) *
              C2376 +
          (((C937 * C5869 + C936 * C5863 + C935 * C5871 + C934 * C141221) *
                C14035 +
            (C14993 * C5869 + C14992 * C5863 +
             (C188 * C3492 + C141309 * C3574) * C5871 +
             (C188 * C3496 + C141309 * C3578) * C141221) *
                C14036 +
            (C14991 * C5869 + C14990 * C5863 +
             (C188 * C14876 + C141309 * C14979) * C5871 +
             (C188 * C14877 + C141309 * C14980) * C141221) *
                C14037) *
               C141294 * C141485 -
           ((C16042 + C16041 + C16040 + C16039) * C14037 +
            (C16038 + C16037 + C16036 + C16035) * C14036 +
            (C221 * C141221 + C220 * C5871 + C219 * C5863 + C218 * C5869) *
                C14035) *
               C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q));
    d2eexz[21] +=
        (-std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141320 * C276) * C5869 +
             (C275 * C114 + C141320 * C282) * C5863 + C305 * C5871 +
             C306 * C141221) *
                C5865 +
            (C7038 + C7039 + C7012 + C7013) * C5866 +
            (C7040 + C7041 + C7018 + C7019) * C5867) *
               C141294 * C2374 -
           ((C7036 * C141221 + C7037 * C5871 +
             (C275 * C6732 + C141320 * C7005) * C5863 +
             (C275 * C6729 + C141320 * C7002) * C5869) *
                C5867 +
            (C7019 + C7018 + C7041 + C7040) * C5866 +
            (C7013 + C7012 + C7039 + C7038) * C5865) *
               C141294 * C141485) *
              C2376 +
          (((C7024 + C7025 + C7026 + C7027) * C5865 +
            (C7028 + C7029 + C7030 + C7031) * C5866 +
            (C7037 * C5869 + C7036 * C5863 +
             (C275 * C6730 + C141320 * C7003) * C5871 +
             (C275 * C6733 + C141320 * C7006) * C141221) *
                C5867) *
               C141294 * C141485 -
           ((C7031 + C7030 + C7029 + C7028) * C5867 +
            (C7027 + C7026 + C7025 + C7024) * C5866 +
            (C308 * C141221 + C307 * C5871 + C306 * C5863 + C305 * C5869) *
                C5865) *
               C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141320 * C276) * C101 +
            (C275 * C114 + C141320 * C282) * C89 + C305 * C103 + C306 * C90 +
            C307 * C105 + C308 * C91 + C309 * C107 + C310 * C92) *
               C141309 * C141294 * C2374 -
           (C1026 * C92 + C1027 * C107 + C1028 * C91 + C1029 * C105 +
            C1030 * C90 + C1031 * C103 + (C275 * C828 + C141320 * C1011) * C89 +
            (C275 * C823 + C141320 * C1006) * C101) *
               C141309 * C141294 * C141485) *
              C2376 +
          ((C1031 * C101 + C1030 * C89 + C1029 * C103 + C1028 * C90 +
            C1027 * C105 + C1026 * C91 +
            (C275 * C824 + C141320 * C1007) * C107 +
            (C275 * C829 + C141320 * C1012) * C92) *
               C141309 * C141294 * C141485 -
           (C311 * C92 + C312 * C107 + C310 * C91 + C309 * C105 + C308 * C90 +
            C307 * C103 + C306 * C89 + C305 * C101) *
               C141309 * C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C14204 * C108 + C14035 * C276 + C14205 * C1601 + C14036 * C1784 +
             C14206 * C5325 + C14037 * C5449) *
                C5869 +
            (C14204 * C114 + C14035 * C282 + C14205 * C1606 + C14036 * C1789 +
             C14206 * C5329 + C14037 * C5453) *
                C5863 +
            (C14232 + C14233 + C14234) * C5871 +
            (C14235 + C14236 + C14237) * C141221) *
               C141309 * C141294 * C2374 -
           ((C15106 + C15107 + C15108) * C141221 +
            (C15109 + C15110 + C15111) * C5871 +
            (C14206 * C13305 + C14037 * C13479 + C14205 * C3494 +
             C14036 * C3650 + C14204 * C828 + C14035 * C1011) *
                C5863 +
            (C14206 * C13301 + C14037 * C13475 + C14205 * C3490 +
             C14036 * C3646 + C14204 * C823 + C14035 * C1006) *
                C5869) *
               C141309 * C141294 * C141485) *
              C2376 +
          (((C15111 + C15110 + C15109) * C5869 +
            (C15108 + C15107 + C15106) * C5863 +
            (C14204 * C821 + C14035 * C1004 + C14205 * C3492 + C14036 * C3648 +
             C14206 * C14876 + C14037 * C15091) *
                C5871 +
            (C14204 * C826 + C14035 * C1009 + C14205 * C3496 + C14036 * C3652 +
             C14206 * C14877 + C14037 * C15092) *
                C141221) *
               C141309 * C141294 * C141485 -
           ((C14238 + C14239 + C14240) * C141221 +
            (C14241 + C14242 + C14243) * C5871 +
            (C14237 + C14236 + C14235) * C5863 +
            (C14234 + C14233 + C14232) * C5869) *
               C141309 * C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[21] +=
        (-std::pow(Pi, 2.5) *
         ((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C141221 * C115) *
                C5964 +
            (C5869 * C189 + C5863 * C362 + C5871 * C190 + C141221 * C363) *
                C5865 +
            (C7175 + C7176) * C5965 + (C7177 + C7178) * C5866 +
            (C7179 + C7180) * C5966 + (C7181 + C7182) * C5867) *
               C141320 * C141294 * C2374 -
           ((C5871 * C6879 + C141221 * C7139 + C5869 * C6880 + C5863 * C7140) *
                C5867 +
            (C5871 * C6728 + C141221 * C6731 + C5869 * C6729 + C5863 * C6732) *
                C5966 +
            (C7182 + C7181) * C5866 + (C7180 + C7179) * C5965 +
            (C7178 + C7177) * C5865 + (C7176 + C7175) * C5964) *
               C141320 * C141294 * C141485) *
              C2376 +
          (((C7183 + C7184) * C5964 + (C7185 + C7186) * C5865 +
            (C7187 + C7188) * C5965 + (C7189 + C7190) * C5866 +
            (C5869 * C6728 + C5863 * C6731 + C5871 * C6730 + C141221 * C6733) *
                C5966 +
            (C5869 * C6879 + C5863 * C7139 + C5871 * C6881 + C141221 * C7141) *
                C5867) *
               C141320 * C141294 * C141485 -
           ((C7190 + C7189) * C5867 + (C7188 + C7187) * C5966 +
            (C7186 + C7185) * C5866 + (C7184 + C7183) * C5965 +
            (C5871 * C191 + C141221 * C364 + C5869 * C190 + C5863 * C363) *
                C5865 +
            (C5871 * C110 + C141221 * C116 + C5869 * C109 + C5863 * C115) *
                C5964) *
               C141320 * C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
             C91 * C116 + C107 * C111 + C92 * C117) *
                C188 +
            (C101 * C189 + C89 * C362 + C103 * C190 + C90 * C363 + C105 * C191 +
             C91 * C364 + C107 * C192 + C92 * C365) *
                C141309) *
               C141320 * C141294 * C2374 -
           ((C107 * C909 + C92 * C1097 + C105 * C910 + C91 * C1098 +
             C103 * C911 + C90 * C1099 + C101 * C912 + C89 * C1100) *
                C141309 +
            (C107 * C820 + C92 * C825 + C105 * C821 + C91 * C826 + C103 * C822 +
             C90 * C827 + C101 * C823 + C89 * C828) *
                C188) *
               C141320 * C141294 * C141485) *
              C2376 +
          (((C101 * C822 + C89 * C827 + C103 * C821 + C90 * C826 + C105 * C820 +
             C91 * C825 + C107 * C824 + C92 * C829) *
                C188 +
            (C101 * C911 + C89 * C1099 + C103 * C910 + C90 * C1098 +
             C105 * C909 + C91 * C1097 + C107 * C913 + C92 * C1101) *
                C141309) *
               C141320 * C141294 * C141485 -
           ((C107 * C193 + C92 * C366 + C105 * C192 + C91 * C365 + C103 * C191 +
             C90 * C364 + C101 * C190 + C89 * C363) *
                C141309 +
            (C107 * C112 + C92 * C118 + C105 * C111 + C91 * C117 + C103 * C110 +
             C90 * C116 + C101 * C109 + C89 * C115) *
                C188) *
               C141320 * C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C141221 * C115) *
                 C188 +
             (C5869 * C189 + C5863 * C362 + C5871 * C190 + C141221 * C363) *
                 C141309) *
                C14035 +
            ((C16308 + C16309) * C188 + (C16310 + C16311) * C141309) * C14036 +
            ((C16312 + C16313) * C188 + (C16314 + C16315) * C141309) * C14037) *
               C141294 * C2374 -
           (((C5871 * C13395 + C141221 * C13558 + C5869 * C13393 +
              C5863 * C13557) *
                 C141309 +
             (C5871 * C13302 + C141221 * C13306 + C5869 * C13301 +
              C5863 * C13305) *
                 C188) *
                C14037 +
            ((C10924 + C10925) * C141309 + (C10926 + C10927) * C188) * C14036 +
            ((C7178 + C7177) * C141309 + (C7176 + C7175) * C188) * C14035) *
               C141294 * C141485) *
              C2376 +
          ((((C7183 + C7184) * C188 + (C7185 + C7186) * C141309) * C14035 +
            ((C5869 * C3491 + C5863 * C3495 + C5871 * C3492 + C141221 * C3496) *
                 C188 +
             (C5869 * C3573 + C5863 * C3721 + C5871 * C3574 + C141221 * C3722) *
                 C141309) *
                C14036 +
            ((C5869 * C13302 + C5863 * C13306 + C5871 * C14876 +
              C141221 * C14877) *
                 C188 +
             (C5869 * C13395 + C5863 * C13558 + C5871 * C14979 +
              C141221 * C15209) *
                 C141309) *
                C14037) *
               C141294 * C141485 -
           (((C16323 + C16322) * C141309 + (C16321 + C16320) * C188) * C14037 +
            ((C16319 + C16318) * C141309 + (C16317 + C16316) * C188) * C14036 +
            ((C5871 * C191 + C141221 * C364 + C5869 * C190 + C5863 * C363) *
                 C141309 +
             (C5871 * C110 + C141221 * C116 + C5869 * C109 + C5863 * C115) *
                 C188) *
                C14035) *
               C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[21] +=
        (-std::pow(Pi, 2.5) *
         ((((C6237 * C108 + C6241 + C6241 + C5865 * C419 + C6238 * C823 +
             C6242 + C6242 + C5866 * C1171 + C6239 * C2960 + C6243 + C6243 +
             C5867 * C3196) *
                C5863 +
            (C6277 + C6278 + C6279) * C141221) *
               C141320 * C141294 * C2374 -
           ((C7313 + C7314 + C7315) * C141221 +
            (C6239 * C6729 + C7301 + C7301 + C5867 * C7289 + C6238 * C2960 +
             C7302 + C7302 + C5866 * C3196 + C6237 * C823 + C7303 + C7303 +
             C5865 * C1171) *
                C5863) *
               C141320 * C141294 * C141485) *
              C2376 +
          (((C7315 + C7314 + C7313) * C5863 +
            (C6237 * C821 + C7304 + C7304 + C5865 * C1169 + C6238 * C2962 +
             C7305 + C7305 + C5866 * C3198 + C6239 * C6730 + C7306 + C7306 +
             C5867 * C7290) *
                C141221) *
               C141320 * C141294 * C141485 -
           ((C6280 + C6281 + C6282) * C141221 +
            (C6279 + C6278 + C6277) * C5863) *
               C141320 * C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C418 * C108 + C426 + C426 + C141309 * C419) * C89 + C448 * C90 +
            C449 * C91 + C450 * C92) *
               C141320 * C141294 * C2374 -
           (C1191 * C92 + C1192 * C91 + C1193 * C90 +
            (C418 * C823 + C1183 + C1183 + C141309 * C1171) * C89) *
               C141320 * C141294 * C141485) *
              C2376 +
          ((C1193 * C89 + C1192 * C90 + C1191 * C91 +
            (C418 * C824 + C1184 + C1184 + C141309 * C1172) * C92) *
               C141320 * C141294 * C141485 -
           (C451 * C92 + C450 * C91 + C449 * C90 + C448 * C89) * C141320 *
               C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C418 * C108 + C426 + C426 + C141309 * C419) * C5863 +
             C448 * C141221) *
                C14035 +
            (C16449 + C16427) * C14036 + (C16450 + C16430) * C14037) *
               C141294 * C2374 -
           ((C15321 * C141221 +
             (C418 * C13301 + C15313 + C15313 + C141309 * C13635) * C5863) *
                C14037 +
            (C15322 * C141221 +
             (C418 * C3490 + C3795 + C3795 + C141309 * C3790) * C5863) *
                C14036 +
            (C1193 * C141221 +
             (C418 * C823 + C1183 + C1183 + C141309 * C1171) * C5863) *
                C14035) *
               C141294 * C141485) *
              C2376 +
          (((C1193 * C5863 + C1192 * C141221) * C14035 +
            (C15322 * C5863 +
             (C418 * C3492 + C3797 + C3797 + C141309 * C3792) * C141221) *
                C14036 +
            (C15321 * C5863 +
             (C418 * C14876 + C15316 + C15316 + C141309 * C15308) * C141221) *
                C14037) *
               C141294 * C141485 -
           ((C16438 + C16437) * C14037 + (C16436 + C16435) * C14036 +
            (C449 * C141221 + C448 * C5863) * C14035) *
               C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[21] +=
        (-std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141320 * C276) * C5964 +
             (C275 * C189 + C141320 * C501) * C5865 + C7032 * C5965 +
             C7428 * C5866 + C7034 * C5966 + C7429 * C5867) *
                C5863 +
            (C6357 + C6358 + C6359 + C6360 + C6361 + C6373) * C141221) *
               C141294 * C2374 -
           ((C7431 + C7423 + C7424 + C7425 + C7426 + C7427) * C141221 +
            ((C275 * C6880 + C141320 * C7414) * C5867 +
             (C275 * C6729 + C141320 * C7002) * C5966 + C7429 * C5866 +
             C7034 * C5965 + C7428 * C5865 + C7032 * C5964) *
                C5863) *
               C141294 * C141485) *
              C2376 +
          (((C7427 + C7426 + C7425 + C7424 + C7423 + C7431) * C5863 +
            (C1029 * C5964 + C1275 * C5865 + C6089 * C5965 + C6372 * C5866 +
             (C275 * C6730 + C141320 * C7003) * C5966 +
             (C275 * C6881 + C141320 * C7415) * C5867) *
                C141221) *
               C141294 * C141485 -
           ((C6374 + C6366 + C6367 + C6368 + C6369 + C6370) * C141221 +
            (C6373 + C6361 + C6360 + C6359 + C6358 + C6357) * C5863) *
               C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((((C275 * C108 + C141320 * C276) * C188 +
                                 (C275 * C189 + C141320 * C501) * C141309) *
                                    C89 +
                                (C508 + C524) * C90 + C528 * C91 + C529 * C92) *
                                   C141294 * C2374 -
                               ((C1277 + C1267) * C92 + (C1278 + C1270) * C91 +
                                (C1279 + C1273) * C90 +
                                ((C275 * C912 + C141320 * C1262) * C141309 +
                                 (C275 * C823 + C141320 * C1006) * C188) *
                                    C89) *
                                   C141294 * C141485) *
                                  C2376 +
                              (((C1273 + C1279) * C89 + (C1270 + C1278) * C90 +
                                (C1267 + C1277) * C91 +
                                ((C275 * C824 + C141320 * C1007) * C188 +
                                 (C275 * C913 + C141320 * C1263) * C141309) *
                                    C92) *
                                   C141294 * C141485 -
                               ((C527 + C519) * C92 + (C526 + C514) * C91 +
                                (C525 + C511) * C90 + (C524 + C508) * C89) *
                                   C141294 * C2374) *
                                  C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C14204 * C108 + C14035 * C276 + C14205 * C1601 + C14036 * C1784 +
              C14206 * C5325 + C14037 * C5449) *
                 C188 +
             (C14204 * C189 + C14035 * C501 + C14205 * C1690 + C14036 * C2040 +
              C14206 * C5391 + C14037 * C5619) *
                 C141309) *
                C5863 +
            ((C14232 + C14233 + C14234) * C188 +
             (C14488 + C14489 + C14490) * C141309) *
                C141221) *
               C141294 * C2374 -
           (((C15428 + C15429 + C15430) * C141309 +
             (C15109 + C15110 + C15111) * C188) *
                C141221 +
            ((C14206 * C13393 + C14037 * C13719 + C14205 * C3572 +
              C14036 * C3864 + C14204 * C912 + C14035 * C1262) *
                 C141309 +
             (C14206 * C13301 + C14037 * C13475 + C14205 * C3490 +
              C14036 * C3646 + C14204 * C823 + C14035 * C1006) *
                 C188) *
                C5863) *
               C141294 * C141485) *
              C2376 +
          ((((C15111 + C15110 + C15109) * C188 +
             (C15430 + C15429 + C15428) * C141309) *
                C5863 +
            ((C14204 * C821 + C14035 * C1004 + C14205 * C3492 + C14036 * C3648 +
              C14206 * C14876 + C14037 * C15091) *
                 C188 +
             (C14204 * C910 + C14035 * C1260 + C14205 * C3574 + C14036 * C3866 +
              C14206 * C14979 + C14037 * C15420) *
                 C141309) *
                C141221) *
               C141294 * C141485 -
           (((C14491 + C14492 + C14493) * C141309 +
             (C14241 + C14242 + C14243) * C188) *
                C141221 +
            ((C14490 + C14489 + C14488) * C141309 +
             (C14234 + C14233 + C14232) * C188) *
                C5863) *
               C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q));
    d2eezx[21] +=
        (-std::pow(Pi, 2.5) *
         (((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C141221 * C115) *
                 C275 +
             (C5869 * C276 + C5863 * C579 + C5871 * C277 + C141221 * C580) *
                 C141320) *
                C5865 +
            ((C7175 + C7176) * C275 + (C7549 + C7550) * C141320) * C5866 +
            ((C7179 + C7180) * C275 + (C7551 + C7552) * C141320) * C5867) *
               C141294 * C2374 -
           (((C5871 * C7001 + C141221 * C7529 + C5869 * C7002 + C5863 * C7530) *
                 C141320 +
             (C5871 * C6728 + C141221 * C6731 + C5869 * C6729 + C5863 * C6732) *
                 C275) *
                C5867 +
            ((C7552 + C7551) * C141320 + (C7180 + C7179) * C275) * C5866 +
            ((C7550 + C7549) * C141320 + (C7176 + C7175) * C275) * C5865) *
               C141294 * C141485) *
              C2376 +
          ((((C7183 + C7184) * C275 + (C7553 + C7554) * C141320) * C5865 +
            ((C7187 + C7188) * C275 + (C7555 + C7556) * C141320) * C5866 +
            ((C5869 * C6728 + C5863 * C6731 + C5871 * C6730 + C141221 * C6733) *
                 C275 +
             (C5869 * C7001 + C5863 * C7529 + C5871 * C7003 + C141221 * C7531) *
                 C141320) *
                C5867) *
               C141294 * C141485 -
           (((C7556 + C7555) * C141320 + (C7188 + C7187) * C275) * C5867 +
            ((C7554 + C7553) * C141320 + (C7184 + C7183) * C275) * C5866 +
            ((C5871 * C278 + C141221 * C581 + C5869 * C277 + C5863 * C580) *
                 C141320 +
             (C5871 * C110 + C141221 * C116 + C5869 * C109 + C5863 * C115) *
                 C275) *
                C5865) *
               C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
             C91 * C116 + C107 * C111 + C92 * C117) *
                C275 +
            (C101 * C276 + C89 * C579 + C103 * C277 + C90 * C580 + C105 * C278 +
             C91 * C581 + C107 * C279 + C92 * C582) *
                C141320) *
               C141309 * C141294 * C2374 -
           ((C107 * C1003 + C92 * C1345 + C105 * C1004 + C91 * C1346 +
             C103 * C1005 + C90 * C1347 + C101 * C1006 + C89 * C1348) *
                C141320 +
            (C107 * C820 + C92 * C825 + C105 * C821 + C91 * C826 + C103 * C822 +
             C90 * C827 + C101 * C823 + C89 * C828) *
                C275) *
               C141309 * C141294 * C141485) *
              C2376 +
          (((C101 * C822 + C89 * C827 + C103 * C821 + C90 * C826 + C105 * C820 +
             C91 * C825 + C107 * C824 + C92 * C829) *
                C275 +
            (C101 * C1005 + C89 * C1347 + C103 * C1004 + C90 * C1346 +
             C105 * C1003 + C91 * C1345 + C107 * C1007 + C92 * C1349) *
                C141320) *
               C141309 * C141294 * C141485 -
           ((C107 * C280 + C92 * C583 + C105 * C279 + C91 * C582 + C103 * C278 +
             C90 * C581 + C101 * C277 + C89 * C580) *
                C141320 +
            (C107 * C112 + C92 * C118 + C105 * C111 + C91 * C117 + C103 * C110 +
             C90 * C116 + C101 * C109 + C89 * C115) *
                C275) *
               C141309 * C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C141221 * C115) *
                C14204 +
            (C5869 * C276 + C5863 * C579 + C5871 * C277 + C141221 * C580) *
                C14035 +
            (C16308 + C16309) * C14205 + (C16678 + C16679) * C14036 +
            (C16312 + C16313) * C14206 + (C16680 + C16681) * C14037) *
               C141309 * C141294 * C2374 -
           ((C5871 * C13476 + C141221 * C13798 + C5869 * C13475 +
             C5863 * C13797) *
                C14037 +
            (C5871 * C13302 + C141221 * C13306 + C5869 * C13301 +
             C5863 * C13305) *
                C14206 +
            (C11250 + C11251) * C14036 + (C10926 + C10927) * C14205 +
            (C7550 + C7549) * C14035 + (C7176 + C7175) * C14204) *
               C141309 * C141294 * C141485) *
              C2376 +
          (((C7183 + C7184) * C14204 + (C7553 + C7554) * C14035 +
            (C5869 * C3491 + C5863 * C3495 + C5871 * C3492 + C141221 * C3496) *
                C14205 +
            (C5869 * C3647 + C5863 * C3935 + C5871 * C3648 + C141221 * C3936) *
                C14036 +
            (C5869 * C13302 + C5863 * C13306 + C5871 * C14876 +
             C141221 * C14877) *
                C14206 +
            (C5869 * C13476 + C5863 * C13798 + C5871 * C15091 +
             C141221 * C15528) *
                C14037) *
               C141309 * C141294 * C141485 -
           ((C16685 + C16684) * C14037 + (C16321 + C16320) * C14206 +
            (C16683 + C16682) * C14036 + (C16317 + C16316) * C14205 +
            (C5871 * C278 + C141221 * C581 + C5869 * C277 + C5863 * C580) *
                C14035 +
            (C5871 * C110 + C141221 * C116 + C5869 * C109 + C5863 * C115) *
                C14204) *
               C141309 * C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q));
    d2eezy[21] +=
        (-std::pow(Pi, 2.5) *
         (((((C5964 * C108 + C5865 * C189 + C5965 * C823 + C5866 * C912 +
              C5966 * C2960 + C5867 * C3026) *
                 C275 +
             (C5964 * C276 + C5865 * C635 + C5965 * C1006 + C5866 * C1419 +
              C5966 * C3084 + C5867 * C3362) *
                 C141320) *
                C5863 +
            ((C5992 + C5993 + C5994) * C275 +
             (C6535 + C6536 + C6537) * C141320) *
                C141221) *
               C141294 * C2374 -
           (((C7664 + C7665 + C7666) * C141320 +
             (C6901 + C6902 + C6903) * C275) *
                C141221 +
            ((C5966 * C7002 + C5867 * C7655 + C5965 * C3084 + C5866 * C3362 +
              C5964 * C1006 + C5865 * C1419) *
                 C141320 +
             (C5966 * C6729 + C5867 * C6880 + C5965 * C2960 + C5866 * C3026 +
              C5964 * C823 + C5865 * C912) *
                 C275) *
                C5863) *
               C141294 * C141485) *
              C2376 +
          ((((C6903 + C6902 + C6901) * C275 +
             (C7666 + C7665 + C7664) * C141320) *
                C5863 +
            ((C5964 * C821 + C5865 * C910 + C5965 * C2962 + C5866 * C3028 +
              C5966 * C6730 + C5867 * C6881) *
                 C275 +
             (C5964 * C1004 + C5865 * C1417 + C5965 * C3086 + C5866 * C3364 +
              C5966 * C7003 + C5867 * C7656) *
                 C141320) *
                C141221) *
               C141294 * C141485 -
           (((C6538 + C6539 + C6540) * C141320 +
             (C6001 + C6002 + C6003) * C275) *
                C141221 +
            ((C6537 + C6536 + C6535) * C141320 +
             (C5994 + C5993 + C5992) * C275) *
                C5863) *
               C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((((C188 * C108 + C141309 * C189) * C275 +
                                 (C188 * C276 + C141309 * C635) * C141320) *
                                    C89 +
                                (C642 + C658) * C90 + C662 * C91 + C663 * C92) *
                                   C141294 * C2374 -
                               ((C1434 + C1424) * C92 + (C1435 + C1427) * C91 +
                                (C1436 + C1430) * C90 +
                                ((C188 * C1006 + C141309 * C1419) * C141320 +
                                 (C188 * C823 + C141309 * C912) * C275) *
                                    C89) *
                                   C141294 * C141485) *
                                  C2376 +
                              (((C1430 + C1436) * C89 + (C1427 + C1435) * C90 +
                                (C1424 + C1434) * C91 +
                                ((C188 * C824 + C141309 * C913) * C275 +
                                 (C188 * C1007 + C141309 * C1420) * C141320) *
                                    C92) *
                                   C141294 * C141485 -
                               ((C661 + C653) * C92 + (C660 + C648) * C91 +
                                (C659 + C645) * C90 + (C658 + C642) * C89) *
                                   C141294 * C2374) *
                                  C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141309 * C189) * C14204 +
             (C188 * C276 + C141309 * C635) * C14035 + C16043 * C14205 +
             C16798 * C14036 + C16045 * C14206 + C16799 * C14037) *
                C5863 +
            (C14642 + C14643 + C14644 + C14645 + C14646 + C14658) * C141221) *
               C141294 * C2374 -
           ((C15639 + C15631 + C15640 + C15634 + C15635 + C15636) * C141221 +
            ((C188 * C13475 + C141309 * C13875) * C14037 +
             (C188 * C13301 + C141309 * C13393) * C14206 +
             (C188 * C3646 + C141309 * C4004) * C14036 +
             (C188 * C3490 + C141309 * C3572) * C14205 +
             (C188 * C1006 + C141309 * C1419) * C14035 +
             (C188 * C823 + C141309 * C912) * C14204) *
                C5863) *
               C141294 * C141485) *
              C2376 +
          (((C15636 + C15635 + C15634 + C15640 + C15631 + C15639) * C5863 +
            (C935 * C14204 + C1432 * C14035 +
             (C188 * C3492 + C141309 * C3574) * C14205 +
             (C188 * C3648 + C141309 * C4006) * C14036 +
             (C188 * C14876 + C141309 * C14979) * C14206 +
             (C188 * C15091 + C141309 * C15627) * C14037) *
                C141221) *
               C141294 * C141485 -
           ((C14659 + C14651 + C14652 + C14653 + C14654 + C14655) * C141221 +
            (C14658 + C14646 + C14645 + C14644 + C14643 + C14642) * C5863) *
               C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q));
    d2eezz[21] +=
        (-std::pow(Pi, 2.5) *
         (((((C713 * C108 + C721 + C721 + C141320 * C714) * C5865 +
             C7785 * C5866 + C7786 * C5867) *
                C5863 +
            (C6615 + C6616 + C6629) * C141221) *
               C141294 * C2374 -
           ((C7788 + C7775 + C7776) * C141221 +
            ((C713 * C6729 + C7777 + C7777 + C141320 * C7765) * C5867 +
             C7786 * C5866 + C7785 * C5865) *
                C5863) *
               C141294 * C141485) *
              C2376 +
          (((C7776 + C7775 + C7788) * C5863 +
            (C1526 * C5865 + C6628 * C5866 +
             (C713 * C6730 + C7778 + C7778 + C141320 * C7766) * C5867) *
                C141221) *
               C141294 * C141485 -
           ((C6630 + C6621 + C6622) * C141221 +
            (C6629 + C6616 + C6615) * C5863) *
               C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C141320 * C714) * C141309 * C89 +
            C747 * C90 + C748 * C91 + C749 * C92) *
               C141294 * C2374 -
           (C1528 * C92 + C1529 * C91 + C1530 * C90 +
            (C713 * C823 + C1517 + C1517 + C141320 * C1505) * C141309 * C89) *
               C141294 * C141485) *
              C2376 +
          ((C1530 * C89 + C1529 * C90 + C1528 * C91 +
            (C713 * C824 + C1518 + C1518 + C141320 * C1506) * C141309 * C92) *
               C141294 * C141485 -
           (C750 * C92 + C749 * C91 + C748 * C90 + C747 * C89) * C141294 *
               C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C14733 * C108 + C14737 + C14737 + C14035 * C714 + C14734 * C1601 +
             C14738 + C14738 + C14036 * C2283 + C14735 * C5325 + C14739 +
             C14739 + C14037 * C5781) *
                C141309 * C5863 +
            (C14773 + C14774 + C14775) * C141309 * C141221) *
               C141294 * C2374 -
           ((C15761 + C15762 + C15763) * C141309 * C141221 +
            (C14735 * C13301 + C15749 + C15749 + C14037 * C13953 +
             C14734 * C3490 + C15750 + C15750 + C14036 * C4074 + C14733 * C823 +
             C15751 + C15751 + C14035 * C1505) *
                C141309 * C5863) *
               C141294 * C141485) *
              C2376 +
          (((C15763 + C15762 + C15761) * C141309 * C5863 +
            (C14733 * C821 + C15752 + C15752 + C14035 * C1503 + C14734 * C3492 +
             C15753 + C15753 + C14036 * C4076 + C14735 * C14876 + C15754 +
             C15754 + C14037 * C15738) *
                C141309 * C141221) *
               C141294 * C141485 -
           ((C14776 + C14777 + C14778) * C141309 * C141221 +
            (C14775 + C14774 + C14773) * C141309 * C5863) *
               C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q));
    d2eexx[22] +=
        (-std::pow(Pi, 2.5) *
         (((C5868 * C108 + C5873 + C5873 + C5863 * C120 + C5870 * C109 + C5874 +
            C5874 + C141221 * C121) *
               C141320 * C5865 +
           (C6774 + C6775) * C141320 * C5866 + C9782 * C5867) *
              C141294 * C2956 -
          ((C9787 + C9788) * C141320 * C5867 +
           (C6777 + C6776) * C141320 * C5866 +
           (C6775 + C6774) * C141320 * C5865) *
              C141294 * C2957 +
          (C9782 * C5865 + (C9788 + C9787) * C141320 * C5866 +
           (C5868 * C9768 + C9780 + C9780 + C5863 * C9772 + C5870 * C9769 +
            C9781 + C9781 + C141221 * C9773) *
               C141320 * C5867) *
              C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((C100 * C108 + C127 + C127 + C89 * C120 + C102 * C109 + C128 + C128 +
           C90 * C121 + C104 * C110 + C129 + C129 + C91 * C122 + C106 * C111 +
           C130 + C130 + C92 * C123) *
              C141320 * C141309 * C141294 * C2956 -
          (C106 * C820 + C836 + C836 + C92 * C830 + C104 * C821 + C837 + C837 +
           C91 * C831 + C102 * C822 + C838 + C838 + C90 * C832 + C100 * C823 +
           C839 + C839 + C89 * C833) *
              C141320 * C141309 * C141294 * C2957 +
          (C100 * C2960 + C2973 + C2973 + C89 * C2968 + C102 * C2961 + C2974 +
           C2974 + C90 * C2969 + C104 * C2962 + C2975 + C2975 + C91 * C2970 +
           C106 * C2963 + C2976 + C2976 + C92 * C2971) *
              C141320 * C141309 * C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C5868 * C108 + C5873 + C5873 + C5863 * C120 + C5870 * C109 + C5874 +
            C5874 + C141221 * C121) *
               C14035 +
           (C15907 + C15908) * C14036 + (C15909 + C15910) * C14037) *
              C141309 * C141294 * C2956 -
          ((C5870 * C13302 + C13317 + C13317 + C141221 * C13310 +
            C5868 * C13301 + C13316 + C13316 + C5863 * C13309) *
               C14037 +
           (C10578 + C10579) * C14036 + (C6775 + C6774) * C14035) *
              C141309 * C141294 * C2957 +
          (C9775 * C14035 + (C10577 + C10576) * C14036 +
           (C5868 * C13303 + C13318 + C13318 + C5863 * C13311 + C5870 * C13304 +
            C13319 + C13319 + C141221 * C13312) *
               C14037) *
              C141309 * C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eexy[22] +=
        (-std::pow(Pi, 2.5) *
         (((C5964 * C108 + C5865 * C189 + C5965 * C823 + C5866 * C912 +
            C5966 * C2960 + C5867 * C3026) *
               C5869 +
           (C5964 * C114 + C5865 * C195 + C5965 * C828 + C5866 * C917 +
            C5966 * C2964 + C5867 * C3030) *
               C5863 +
           (C5992 + C5993 + C5994) * C5871 +
           (C5995 + C5996 + C5997) * C141221) *
              C141320 * C141294 * C2956 -
          ((C6898 + C6899 + C6900) * C141221 + (C6901 + C6902 + C6903) * C5871 +
           (C5966 * C6732 + C5867 * C6883 + C5965 * C2964 + C5866 * C3030 +
            C5964 * C828 + C5865 * C917) *
               C5863 +
           (C5966 * C6729 + C5867 * C6880 + C5965 * C2960 + C5866 * C3026 +
            C5964 * C823 + C5865 * C912) *
               C5869) *
              C141320 * C141294 * C2957 +
          ((C5964 * C2960 + C5865 * C3026 + C5965 * C6729 + C5866 * C6880 +
            C5966 * C9768 + C5867 * C9862) *
               C5869 +
           (C5964 * C2964 + C5865 * C3030 + C5965 * C6732 + C5866 * C6883 +
            C5966 * C9770 + C5867 * C9864) *
               C5863 +
           (C5964 * C2961 + C5865 * C3027 + C5965 * C6728 + C5866 * C6879 +
            C5966 * C9769 + C5867 * C9863) *
               C5871 +
           (C5964 * C2965 + C5865 * C3031 + C5965 * C6731 + C5866 * C6882 +
            C5966 * C9771 + C5867 * C9865) *
               C141221) *
              C141320 * C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C188 * C108 + C141309 * C189) * C101 +
           (C188 * C114 + C141309 * C195) * C89 + C218 * C103 + C219 * C90 +
           C220 * C105 + C221 * C91 + C222 * C107 + C223 * C92) *
              C141320 * C141294 * C2956 -
          (C932 * C92 + C933 * C107 + C934 * C91 + C935 * C105 + C936 * C90 +
           C937 * C103 + (C188 * C828 + C141309 * C917) * C89 +
           (C188 * C823 + C141309 * C912) * C101) *
              C141320 * C141294 * C2957 +
          ((C188 * C2960 + C141309 * C3026) * C101 +
           (C188 * C2964 + C141309 * C3030) * C89 +
           (C188 * C2961 + C141309 * C3027) * C103 +
           (C188 * C2965 + C141309 * C3031) * C90 +
           (C188 * C2962 + C141309 * C3028) * C105 +
           (C188 * C2966 + C141309 * C3032) * C91 +
           (C188 * C2963 + C141309 * C3029) * C107 +
           (C188 * C2967 + C141309 * C3033) * C92) *
              C141320 * C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141309 * C189) * C5869 +
            (C188 * C114 + C141309 * C195) * C5863 + C218 * C5871 +
            C219 * C141221) *
               C14035 +
           (C16049 + C16050 + C16023 + C16024) * C14036 +
           (C16051 + C16052 + C16029 + C16030) * C14037) *
              C141294 * C2956 -
          ((C14990 * C141221 + C14991 * C5871 +
            (C188 * C13305 + C141309 * C13397) * C5863 +
            (C188 * C13301 + C141309 * C13393) * C5869) *
               C14037 +
           (C14992 * C141221 + C14993 * C5871 +
            (C188 * C3494 + C141309 * C3576) * C5863 +
            (C188 * C3490 + C141309 * C3572) * C5869) *
               C14036 +
           (C936 * C141221 + C937 * C5871 +
            (C188 * C828 + C141309 * C917) * C5863 +
            (C188 * C823 + C141309 * C912) * C5869) *
               C14035) *
              C141294 * C2957 +
          (((C188 * C2960 + C141309 * C3026) * C5869 +
            (C188 * C2964 + C141309 * C3030) * C5863 +
            (C188 * C2961 + C141309 * C3027) * C5871 +
            (C188 * C2965 + C141309 * C3031) * C141221) *
               C14035 +
           ((C188 * C7887 + C141309 * C8006) * C5869 +
            (C188 * C7890 + C141309 * C8009) * C5863 +
            (C188 * C7886 + C141309 * C8005) * C5871 +
            (C188 * C7889 + C141309 * C8008) * C141221) *
               C14036 +
           ((C188 * C13303 + C141309 * C13394) * C5869 +
            (C188 * C13307 + C141309 * C13398) * C5863 +
            (C188 * C13304 + C141309 * C13396) * C5871 +
            (C188 * C13308 + C141309 * C13400) * C141221) *
               C14037) *
              C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eexz[22] +=
        (-std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141320 * C276) * C5869 +
            (C275 * C114 + C141320 * C282) * C5863 + C305 * C5871 +
            C306 * C141221) *
               C5865 +
           (C7038 + C7039 + C7012 + C7013) * C5866 + C9955 * C5867) *
              C141294 * C2956 -
          ((C9946 + C9947 + C9956 + C9957) * C5867 +
           (C7019 + C7018 + C7041 + C7040) * C5866 +
           (C7013 + C7012 + C7039 + C7038) * C5865) *
              C141294 * C2957 +
          (C9955 * C5865 + (C9957 + C9956 + C9947 + C9946) * C5866 +
           ((C275 * C9768 + C141320 * C9940) * C5869 +
            (C275 * C9770 + C141320 * C9942) * C5863 +
            (C275 * C9769 + C141320 * C9941) * C5871 +
            (C275 * C9771 + C141320 * C9943) * C141221) *
               C5867) *
              C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C275 * C108 + C141320 * C276) * C101 +
           (C275 * C114 + C141320 * C282) * C89 + C305 * C103 + C306 * C90 +
           C307 * C105 + C308 * C91 + C309 * C107 + C310 * C92) *
              C141309 * C141294 * C2956 -
          (C1026 * C92 + C1027 * C107 + C1028 * C91 + C1029 * C105 +
           C1030 * C90 + C1031 * C103 + (C275 * C828 + C141320 * C1011) * C89 +
           (C275 * C823 + C141320 * C1006) * C101) *
              C141309 * C141294 * C2957 +
          ((C275 * C2960 + C141320 * C3084) * C101 +
           (C275 * C2964 + C141320 * C3088) * C89 +
           (C275 * C2961 + C141320 * C3085) * C103 +
           (C275 * C2965 + C141320 * C3089) * C90 +
           (C275 * C2962 + C141320 * C3086) * C105 +
           (C275 * C2966 + C141320 * C3090) * C91 +
           (C275 * C2963 + C141320 * C3087) * C107 +
           (C275 * C2967 + C141320 * C3091) * C92) *
              C141309 * C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C14204 * C108 + C14035 * C276 + C14205 * C1601 + C14036 * C1784 +
            C14206 * C5325 + C14037 * C5449) *
               C5869 +
           (C14204 * C114 + C14035 * C282 + C14205 * C1606 + C14036 * C1789 +
            C14206 * C5329 + C14037 * C5453) *
               C5863 +
           (C14232 + C14233 + C14234) * C5871 +
           (C14235 + C14236 + C14237) * C141221) *
              C141309 * C141294 * C2956 -
          ((C15106 + C15107 + C15108) * C141221 +
           (C15109 + C15110 + C15111) * C5871 +
           (C14206 * C13305 + C14037 * C13479 + C14205 * C3494 +
            C14036 * C3650 + C14204 * C828 + C14035 * C1011) *
               C5863 +
           (C14206 * C13301 + C14037 * C13475 + C14205 * C3490 +
            C14036 * C3646 + C14204 * C823 + C14035 * C1006) *
               C5869) *
              C141309 * C141294 * C2957 +
          ((C14204 * C2960 + C14035 * C3084 + C14205 * C7887 + C14036 * C8128 +
            C14206 * C13303 + C14037 * C13477) *
               C5869 +
           (C14204 * C2964 + C14035 * C3088 + C14205 * C7890 + C14036 * C8131 +
            C14206 * C13307 + C14037 * C13481) *
               C5863 +
           (C14204 * C2961 + C14035 * C3085 + C14205 * C7886 + C14036 * C8127 +
            C14206 * C13304 + C14037 * C13478) *
               C5871 +
           (C14204 * C2965 + C14035 * C3089 + C14205 * C7889 + C14036 * C8130 +
            C14206 * C13308 + C14037 * C13482) *
               C141221) *
              C141309 * C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eeyx[22] +=
        (-std::pow(Pi, 2.5) *
         (((C5869 * C108 + C5863 * C114 + C5871 * C109 + C141221 * C115) *
               C5964 +
           (C5869 * C189 + C5863 * C362 + C5871 * C190 + C141221 * C363) *
               C5865 +
           (C7175 + C7176) * C5965 + (C7177 + C7178) * C5866 + C10034 * C5966 +
           C10035 * C5867) *
              C141320 * C141294 * C2956 -
          ((C10044 + C10045) * C5867 + (C10046 + C10047) * C5966 +
           (C7182 + C7181) * C5866 + (C7180 + C7179) * C5965 +
           (C7178 + C7177) * C5865 + (C7176 + C7175) * C5964) *
              C141320 * C141294 * C2957 +
          (C10034 * C5964 + C10035 * C5865 + (C10047 + C10046) * C5965 +
           (C10045 + C10044) * C5866 +
           (C5869 * C9768 + C5863 * C9770 + C5871 * C9769 + C141221 * C9771) *
               C5966 +
           (C5869 * C9862 + C5863 * C10031 + C5871 * C9863 + C141221 * C10032) *
               C5867) *
              C141320 * C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
            C91 * C116 + C107 * C111 + C92 * C117) *
               C188 +
           (C101 * C189 + C89 * C362 + C103 * C190 + C90 * C363 + C105 * C191 +
            C91 * C364 + C107 * C192 + C92 * C365) *
               C141309) *
              C141320 * C141294 * C2956 -
          ((C107 * C909 + C92 * C1097 + C105 * C910 + C91 * C1098 +
            C103 * C911 + C90 * C1099 + C101 * C912 + C89 * C1100) *
               C141309 +
           (C107 * C820 + C92 * C825 + C105 * C821 + C91 * C826 + C103 * C822 +
            C90 * C827 + C101 * C823 + C89 * C828) *
               C188) *
              C141320 * C141294 * C2957 +
          ((C101 * C2960 + C89 * C2964 + C103 * C2961 + C90 * C2965 +
            C105 * C2962 + C91 * C2966 + C107 * C2963 + C92 * C2967) *
               C188 +
           (C101 * C3026 + C89 * C3142 + C103 * C3027 + C90 * C3143 +
            C105 * C3028 + C91 * C3144 + C107 * C3029 + C92 * C3145) *
               C141309) *
              C141320 * C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C141221 * C115) *
                C188 +
            (C5869 * C189 + C5863 * C362 + C5871 * C190 + C141221 * C363) *
                C141309) *
               C14035 +
           ((C16308 + C16309) * C188 + (C16310 + C16311) * C141309) * C14036 +
           ((C16312 + C16313) * C188 + (C16314 + C16315) * C141309) * C14037) *
              C141294 * C2956 -
          (((C5871 * C13395 + C141221 * C13558 + C5869 * C13393 +
             C5863 * C13557) *
                C141309 +
            (C5871 * C13302 + C141221 * C13306 + C5869 * C13301 +
             C5863 * C13305) *
                C188) *
               C14037 +
           ((C10924 + C10925) * C141309 + (C10926 + C10927) * C188) * C14036 +
           ((C7178 + C7177) * C141309 + (C7176 + C7175) * C188) * C14035) *
              C141294 * C2957 +
          ((C10034 * C188 + C10035 * C141309) * C14035 +
           ((C10923 + C10922) * C188 + (C10921 + C10920) * C141309) * C14036 +
           ((C5869 * C13303 + C5863 * C13307 + C5871 * C13304 +
             C141221 * C13308) *
                C188 +
            (C5869 * C13394 + C5863 * C13559 + C5871 * C13396 +
             C141221 * C13560) *
                C141309) *
               C14037) *
              C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eeyy[22] +=
        (-std::pow(Pi, 2.5) *
         (((C6237 * C108 + C6241 + C6241 + C5865 * C419 + C6238 * C823 + C6242 +
            C6242 + C5866 * C1171 + C6239 * C2960 + C6243 + C6243 +
            C5867 * C3196) *
               C5863 +
           (C6277 + C6278 + C6279) * C141221) *
              C141320 * C141294 * C2956 -
          ((C7313 + C7314 + C7315) * C141221 +
           (C6239 * C6729 + C7301 + C7301 + C5867 * C7289 + C6238 * C2960 +
            C7302 + C7302 + C5866 * C3196 + C6237 * C823 + C7303 + C7303 +
            C5865 * C1171) *
               C5863) *
              C141320 * C141294 * C2957 +
          ((C6237 * C2960 + C10124 + C10124 + C5865 * C3196 + C6238 * C6729 +
            C10125 + C10125 + C5866 * C7289 + C6239 * C9768 + C10126 + C10126 +
            C5867 * C10121) *
               C5863 +
           (C6237 * C2961 + C10127 + C10127 + C5865 * C3197 + C6238 * C6728 +
            C10128 + C10128 + C5866 * C7288 + C6239 * C9769 + C10129 + C10129 +
            C5867 * C10122) *
               C141221) *
              C141320 * C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C418 * C108 + C426 + C426 + C141309 * C419) * C89 + C448 * C90 +
           C449 * C91 + C450 * C92) *
              C141320 * C141294 * C2956 -
          (C1191 * C92 + C1192 * C91 + C1193 * C90 +
           (C418 * C823 + C1183 + C1183 + C141309 * C1171) * C89) *
              C141320 * C141294 * C2957 +
          ((C418 * C2960 + C3201 + C3201 + C141309 * C3196) * C89 +
           (C418 * C2961 + C3202 + C3202 + C141309 * C3197) * C90 +
           (C418 * C2962 + C3203 + C3203 + C141309 * C3198) * C91 +
           (C418 * C2963 + C3204 + C3204 + C141309 * C3199) * C92) *
              C141320 * C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C418 * C108 + C426 + C426 + C141309 * C419) * C5863 +
            C448 * C141221) *
               C14035 +
           (C16449 + C16427) * C14036 + (C16450 + C16430) * C14037) *
              C141294 * C2956 -
          ((C15321 * C141221 +
            (C418 * C13301 + C15313 + C15313 + C141309 * C13635) * C5863) *
               C14037 +
           (C15322 * C141221 +
            (C418 * C3490 + C3795 + C3795 + C141309 * C3790) * C5863) *
               C14036 +
           (C1193 * C141221 +
            (C418 * C823 + C1183 + C1183 + C141309 * C1171) * C5863) *
               C14035) *
              C141294 * C2957 +
          (((C418 * C2960 + C3201 + C3201 + C141309 * C3196) * C5863 +
            (C418 * C2961 + C3202 + C3202 + C141309 * C3197) * C141221) *
               C14035 +
           ((C418 * C7887 + C18179 + C18179 + C141309 * C8345) * C5863 +
            (C418 * C7886 + C18180 + C18180 + C141309 * C8344) * C141221) *
               C14036 +
           ((C418 * C13303 + C18181 + C18181 + C141309 * C13636) * C5863 +
            (C418 * C13304 + C18182 + C18182 + C141309 * C13638) * C141221) *
               C14037) *
              C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eeyz[22] +=
        (-std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141320 * C276) * C5964 +
            (C275 * C189 + C141320 * C501) * C5865 + C7032 * C5965 +
            C7428 * C5866 + C7034 * C5966 + C7429 * C5867) *
               C5863 +
           (C6357 + C6358 + C6359 + C6360 + C6361 + C6373) * C141221) *
              C141294 * C2956 -
          ((C7431 + C7423 + C7424 + C7425 + C7426 + C7427) * C141221 +
           (C10208 * C5867 + C9954 * C5966 + C7429 * C5866 + C7034 * C5965 +
            C7428 * C5865 + C7032 * C5964) *
               C5863) *
              C141294 * C2957 +
          ((C7034 * C5964 + C7429 * C5865 + C9954 * C5965 + C10208 * C5866 +
            (C275 * C9768 + C141320 * C9940) * C5966 +
            (C275 * C9862 + C141320 * C10203) * C5867) *
               C5863 +
           (C6086 * C5964 + C6371 * C5865 + C7037 * C5965 + C7430 * C5866 +
            (C275 * C9769 + C141320 * C9941) * C5966 +
            (C275 * C9863 + C141320 * C10204) * C5867) *
               C141221) *
              C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141320 * C276) * C188 +
            (C275 * C189 + C141320 * C501) * C141309) *
               C89 +
           (C508 + C524) * C90 + C528 * C91 + C529 * C92) *
              C141294 * C2956 -
          ((C1277 + C1267) * C92 + (C1278 + C1270) * C91 +
           (C1279 + C1273) * C90 +
           ((C275 * C912 + C141320 * C1262) * C141309 +
            (C275 * C823 + C141320 * C1006) * C188) *
               C89) *
              C141294 * C2957 +
          (((C275 * C2960 + C141320 * C3084) * C188 +
            (C275 * C3026 + C141320 * C3254) * C141309) *
               C89 +
           ((C275 * C2961 + C141320 * C3085) * C188 +
            (C275 * C3027 + C141320 * C3255) * C141309) *
               C90 +
           ((C275 * C2962 + C141320 * C3086) * C188 +
            (C275 * C3028 + C141320 * C3256) * C141309) *
               C91 +
           ((C275 * C2963 + C141320 * C3087) * C188 +
            (C275 * C3029 + C141320 * C3257) * C141309) *
               C92) *
              C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C14204 * C108 + C14035 * C276 + C14205 * C1601 + C14036 * C1784 +
             C14206 * C5325 + C14037 * C5449) *
                C188 +
            (C14204 * C189 + C14035 * C501 + C14205 * C1690 + C14036 * C2040 +
             C14206 * C5391 + C14037 * C5619) *
                C141309) *
               C5863 +
           ((C14232 + C14233 + C14234) * C188 +
            (C14488 + C14489 + C14490) * C141309) *
               C141221) *
              C141294 * C2956 -
          (((C15428 + C15429 + C15430) * C141309 +
            (C15109 + C15110 + C15111) * C188) *
               C141221 +
           ((C14206 * C13393 + C14037 * C13719 + C14205 * C3572 +
             C14036 * C3864 + C14204 * C912 + C14035 * C1262) *
                C141309 +
            (C14206 * C13301 + C14037 * C13475 + C14205 * C3490 +
             C14036 * C3646 + C14204 * C823 + C14035 * C1006) *
                C188) *
               C5863) *
              C141294 * C2957 +
          (((C14204 * C2960 + C14035 * C3084 + C14205 * C7887 + C14036 * C8128 +
             C14206 * C13303 + C14037 * C13477) *
                C188 +
            (C14204 * C3026 + C14035 * C3254 + C14205 * C8006 + C14036 * C8470 +
             C14206 * C13394 + C14037 * C13720) *
                C141309) *
               C5863 +
           ((C14204 * C2961 + C14035 * C3085 + C14205 * C7886 + C14036 * C8127 +
             C14206 * C13304 + C14037 * C13478) *
                C188 +
            (C14204 * C3027 + C14035 * C3255 + C14205 * C8005 + C14036 * C8469 +
             C14206 * C13396 + C14037 * C13722) *
                C141309) *
               C141221) *
              C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eezx[22] +=
        (-std::pow(Pi, 2.5) *
         ((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C141221 * C115) *
                C275 +
            (C5869 * C276 + C5863 * C579 + C5871 * C277 + C141221 * C580) *
                C141320) *
               C5865 +
           ((C7175 + C7176) * C275 + (C7549 + C7550) * C141320) * C5866 +
           C10294 * C5867) *
              C141294 * C2956 -
          (((C10292 + C10293) * C141320 + (C10046 + C10047) * C275) * C5867 +
           ((C7552 + C7551) * C141320 + (C7180 + C7179) * C275) * C5866 +
           ((C7550 + C7549) * C141320 + (C7176 + C7175) * C275) * C5865) *
              C141294 * C2957 +
          (C10294 * C5865 +
           ((C10047 + C10046) * C275 + (C10293 + C10292) * C141320) * C5866 +
           ((C5869 * C9768 + C5863 * C9770 + C5871 * C9769 + C141221 * C9771) *
                C275 +
            (C5869 * C9940 + C5863 * C10282 + C5871 * C9941 +
             C141221 * C10283) *
                C141320) *
               C5867) *
              C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
            C91 * C116 + C107 * C111 + C92 * C117) *
               C275 +
           (C101 * C276 + C89 * C579 + C103 * C277 + C90 * C580 + C105 * C278 +
            C91 * C581 + C107 * C279 + C92 * C582) *
               C141320) *
              C141309 * C141294 * C2956 -
          ((C107 * C1003 + C92 * C1345 + C105 * C1004 + C91 * C1346 +
            C103 * C1005 + C90 * C1347 + C101 * C1006 + C89 * C1348) *
               C141320 +
           (C107 * C820 + C92 * C825 + C105 * C821 + C91 * C826 + C103 * C822 +
            C90 * C827 + C101 * C823 + C89 * C828) *
               C275) *
              C141309 * C141294 * C2957 +
          ((C101 * C2960 + C89 * C2964 + C103 * C2961 + C90 * C2965 +
            C105 * C2962 + C91 * C2966 + C107 * C2963 + C92 * C2967) *
               C275 +
           (C101 * C3084 + C89 * C3308 + C103 * C3085 + C90 * C3309 +
            C105 * C3086 + C91 * C3310 + C107 * C3087 + C92 * C3311) *
               C141320) *
              C141309 * C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C5869 * C108 + C5863 * C114 + C5871 * C109 + C141221 * C115) *
               C14204 +
           (C5869 * C276 + C5863 * C579 + C5871 * C277 + C141221 * C580) *
               C14035 +
           (C16308 + C16309) * C14205 + (C16678 + C16679) * C14036 +
           (C16312 + C16313) * C14206 + (C16680 + C16681) * C14037) *
              C141309 * C141294 * C2956 -
          ((C5871 * C13476 + C141221 * C13798 + C5869 * C13475 +
            C5863 * C13797) *
               C14037 +
           (C5871 * C13302 + C141221 * C13306 + C5869 * C13301 +
            C5863 * C13305) *
               C14206 +
           (C11250 + C11251) * C14036 + (C10926 + C10927) * C14205 +
           (C7550 + C7549) * C14035 + (C7176 + C7175) * C14204) *
              C141309 * C141294 * C2957 +
          (C10034 * C14204 + C10286 * C14035 + (C10923 + C10922) * C14205 +
           (C11249 + C11248) * C14036 +
           (C5869 * C13303 + C5863 * C13307 + C5871 * C13304 +
            C141221 * C13308) *
               C14206 +
           (C5869 * C13477 + C5863 * C13799 + C5871 * C13478 +
            C141221 * C13800) *
               C14037) *
              C141309 * C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eezy[22] +=
        (-std::pow(Pi, 2.5) *
         ((((C5964 * C108 + C5865 * C189 + C5965 * C823 + C5866 * C912 +
             C5966 * C2960 + C5867 * C3026) *
                C275 +
            (C5964 * C276 + C5865 * C635 + C5965 * C1006 + C5866 * C1419 +
             C5966 * C3084 + C5867 * C3362) *
                C141320) *
               C5863 +
           ((C5992 + C5993 + C5994) * C275 +
            (C6535 + C6536 + C6537) * C141320) *
               C141221) *
              C141294 * C2956 -
          (((C7664 + C7665 + C7666) * C141320 +
            (C6901 + C6902 + C6903) * C275) *
               C141221 +
           ((C5966 * C7002 + C5867 * C7655 + C5965 * C3084 + C5866 * C3362 +
             C5964 * C1006 + C5865 * C1419) *
                C141320 +
            (C5966 * C6729 + C5867 * C6880 + C5965 * C2960 + C5866 * C3026 +
             C5964 * C823 + C5865 * C912) *
                C275) *
               C5863) *
              C141294 * C2957 +
          (((C5964 * C2960 + C5865 * C3026 + C5965 * C6729 + C5866 * C6880 +
             C5966 * C9768 + C5867 * C9862) *
                C275 +
            (C5964 * C3084 + C5865 * C3362 + C5965 * C7002 + C5866 * C7655 +
             C5966 * C9940 + C5867 * C10368) *
                C141320) *
               C5863 +
           ((C5964 * C2961 + C5865 * C3027 + C5965 * C6728 + C5866 * C6879 +
             C5966 * C9769 + C5867 * C9863) *
                C275 +
            (C5964 * C3085 + C5865 * C3363 + C5965 * C7001 + C5866 * C7654 +
             C5966 * C9941 + C5867 * C10369) *
                C141320) *
               C141221) *
              C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141309 * C189) * C275 +
            (C188 * C276 + C141309 * C635) * C141320) *
               C89 +
           (C642 + C658) * C90 + C662 * C91 + C663 * C92) *
              C141294 * C2956 -
          ((C1434 + C1424) * C92 + (C1435 + C1427) * C91 +
           (C1436 + C1430) * C90 +
           ((C188 * C1006 + C141309 * C1419) * C141320 +
            (C188 * C823 + C141309 * C912) * C275) *
               C89) *
              C141294 * C2957 +
          (((C188 * C2960 + C141309 * C3026) * C275 +
            (C188 * C3084 + C141309 * C3362) * C141320) *
               C89 +
           ((C188 * C2961 + C141309 * C3027) * C275 +
            (C188 * C3085 + C141309 * C3363) * C141320) *
               C90 +
           ((C188 * C2962 + C141309 * C3028) * C275 +
            (C188 * C3086 + C141309 * C3364) * C141320) *
               C91 +
           ((C188 * C2963 + C141309 * C3029) * C275 +
            (C188 * C3087 + C141309 * C3365) * C141320) *
               C92) *
              C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141309 * C189) * C14204 +
            (C188 * C276 + C141309 * C635) * C14035 + C16043 * C14205 +
            C16798 * C14036 + C16045 * C14206 + C16799 * C14037) *
               C5863 +
           (C14642 + C14643 + C14644 + C14645 + C14646 + C14658) * C141221) *
              C141294 * C2956 -
          ((C15639 + C15631 + C15640 + C15634 + C15635 + C15636) * C141221 +
           ((C188 * C13475 + C141309 * C13875) * C14037 +
            (C188 * C13301 + C141309 * C13393) * C14206 +
            (C188 * C3646 + C141309 * C4004) * C14036 +
            (C188 * C3490 + C141309 * C3572) * C14205 +
            (C188 * C1006 + C141309 * C1419) * C14035 +
            (C188 * C823 + C141309 * C912) * C14204) *
               C5863) *
              C141294 * C2957 +
          (((C188 * C2960 + C141309 * C3026) * C14204 +
            (C188 * C3084 + C141309 * C3362) * C14035 +
            (C188 * C7887 + C141309 * C8006) * C14205 +
            (C188 * C8128 + C141309 * C8684) * C14036 +
            (C188 * C13303 + C141309 * C13394) * C14206 +
            (C188 * C13477 + C141309 * C13876) * C14037) *
               C5863 +
           ((C188 * C2961 + C141309 * C3027) * C14204 +
            (C188 * C3085 + C141309 * C3363) * C14035 +
            (C188 * C7886 + C141309 * C8005) * C14205 +
            (C188 * C8127 + C141309 * C8683) * C14036 +
            (C188 * C13304 + C141309 * C13396) * C14206 +
            (C188 * C13478 + C141309 * C13878) * C14037) *
               C141221) *
              C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eezz[22] +=
        (-std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C141320 * C714) * C5865 +
            C7785 * C5866 + C7786 * C5867) *
               C5863 +
           (C6615 + C6616 + C6629) * C141221) *
              C141294 * C2956 -
          ((C7788 + C7775 + C7776) * C141221 +
           (C10453 * C5867 + C7786 * C5866 + C7785 * C5865) * C5863) *
              C141294 * C2957 +
          ((C7786 * C5865 + C10453 * C5866 +
            (C713 * C9768 + C10449 + C10449 + C141320 * C10444) * C5867) *
               C5863 +
           (C6627 * C5865 + C7787 * C5866 +
            (C713 * C9769 + C10450 + C10450 + C141320 * C10445) * C5867) *
               C141221) *
              C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C713 * C108 + C721 + C721 + C141320 * C714) * C141309 * C89 +
           C747 * C90 + C748 * C91 + C749 * C92) *
              C141294 * C2956 -
          (C1528 * C92 + C1529 * C91 + C1530 * C90 +
           (C713 * C823 + C1517 + C1517 + C141320 * C1505) * C141309 * C89) *
              C141294 * C2957 +
          ((C713 * C2960 + C3421 + C3421 + C141320 * C3416) * C141309 * C89 +
           (C713 * C2961 + C3422 + C3422 + C141320 * C3417) * C141309 * C90 +
           (C713 * C2962 + C3423 + C3423 + C141320 * C3418) * C141309 * C91 +
           (C713 * C2963 + C3424 + C3424 + C141320 * C3419) * C141309 * C92) *
              C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C14733 * C108 + C14737 + C14737 + C14035 * C714 + C14734 * C1601 +
            C14738 + C14738 + C14036 * C2283 + C14735 * C5325 + C14739 +
            C14739 + C14037 * C5781) *
               C141309 * C5863 +
           (C14773 + C14774 + C14775) * C141309 * C141221) *
              C141294 * C2956 -
          ((C15761 + C15762 + C15763) * C141309 * C141221 +
           (C14735 * C13301 + C15749 + C15749 + C14037 * C13953 +
            C14734 * C3490 + C15750 + C15750 + C14036 * C4074 + C14733 * C823 +
            C15751 + C15751 + C14035 * C1505) *
               C141309 * C5863) *
              C141294 * C2957 +
          ((C14733 * C2960 + C18479 + C18479 + C14035 * C3416 + C14734 * C7887 +
            C18480 + C18480 + C14036 * C8794 + C14735 * C13303 + C18481 +
            C18481 + C14037 * C13954) *
               C141309 * C5863 +
           (C14733 * C2961 + C18482 + C18482 + C14035 * C3417 + C14734 * C7886 +
            C18483 + C18483 + C14036 * C8793 + C14735 * C13304 + C18484 +
            C18484 + C14037 * C13956) *
               C141309 * C141221) *
              C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eexx[23] +=
        (-std::pow(Pi, 2.5) *
         ((((C5868 * C108 + C5873 + C5873 + C5863 * C120 + C5870 * C109 +
             C5874 + C5874 + C141221 * C121) *
                C141320 * C5865 +
            (C6774 + C6775) * C141320 * C5866 + C9782 * C5867) *
               C1596 -
           ((C10576 + C10577) * C141320 * C5867 +
            (C10578 + C10579) * C141320 * C5866 +
            (C5870 * C1600 + C7900 + C7900 + C141221 * C1610 + C5868 * C1601 +
             C7901 + C7901 + C5863 * C1611) *
                C141320 * C5865) *
               C141487) *
              C2374 +
          (((C10579 + C10578) * C141320 * C5865 +
            (C10577 + C10576) * C141320 * C5866 +
            (C5868 * C10551 + C10566 + C10566 + C5863 * C10555 +
             C5870 * C10552 + C10567 + C10567 + C141221 * C10556) *
                C141320 * C5867) *
               C141487 -
           ((C9787 + C9788) * C141320 * C5867 +
            (C6777 + C6776) * C141320 * C5866 +
            (C6775 + C6774) * C141320 * C5865) *
               C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C100 * C108 + C127 + C127 + C89 * C120 + C102 * C109 + C128 + C128 +
            C90 * C121 + C104 * C110 + C129 + C129 + C91 * C122 + C106 * C111 +
            C130 + C130 + C92 * C123) *
               C141320 * C141309 * C1596 -
           (C106 * C1598 + C1614 + C1614 + C92 * C1608 + C104 * C1599 + C1615 +
            C1615 + C91 * C1609 + C102 * C1600 + C1616 + C1616 + C90 * C1610 +
            C100 * C1601 + C1617 + C1617 + C89 * C1611) *
               C141320 * C141309 * C141487) *
              C2374 +
          ((C100 * C3490 + C3503 + C3503 + C89 * C3498 + C102 * C3491 + C3504 +
            C3504 + C90 * C3499 + C104 * C3492 + C3505 + C3505 + C91 * C3500 +
            C106 * C3493 + C3506 + C3506 + C92 * C3501) *
               C141320 * C141309 * C141487 -
           (C106 * C820 + C836 + C836 + C92 * C830 + C104 * C821 + C837 + C837 +
            C91 * C831 + C102 * C822 + C838 + C838 + C90 * C832 + C100 * C823 +
            C839 + C839 + C89 * C833) *
               C141320 * C141309 * C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C5868 * C108 + C5873 + C5873 + C5863 * C120 + C5870 * C109 +
             C5874 + C5874 + C141221 * C121) *
                C14035 +
            (C15907 + C15908) * C14036 + (C15909 + C15910) * C14037) *
               C141309 * C1596 -
           ((C5870 * C15861 + C15879 + C15879 + C141221 * C15867 +
             C5868 * C15862 + C15880 + C15880 + C5863 * C15868) *
                C14037 +
            (C15910 + C15909) * C14036 + (C15908 + C15907) * C14035) *
               C141309 * C141487) *
              C2374 +
          (((C10579 + C10578) * C14035 + (C18599 + C18600) * C14036 +
            (C5868 * C18582 + C18593 + C18593 + C5863 * C18586 +
             C5870 * C18583 + C18594 + C18594 + C141221 * C18587) *
                C14037) *
               C141309 * C141487 -
           ((C18600 + C18599) * C14037 + (C10578 + C10579) * C14036 +
            (C6775 + C6774) * C14035) *
               C141309 * C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eexy[23] +=
        (-std::pow(Pi, 2.5) *
         ((((C5964 * C108 + C5865 * C189 + C5965 * C823 + C5866 * C912 +
             C5966 * C2960 + C5867 * C3026) *
                C5869 +
            (C5964 * C114 + C5865 * C195 + C5965 * C828 + C5866 * C917 +
             C5966 * C2964 + C5867 * C3030) *
                C5863 +
            (C5992 + C5993 + C5994) * C5871 +
            (C5995 + C5996 + C5997) * C141221) *
               C141320 * C1596 -
           ((C8024 + C8025 + C8026) * C141221 +
            (C8027 + C8028 + C8029) * C5871 +
            (C5966 * C7890 + C5867 * C8009 + C5965 * C3494 + C5866 * C3576 +
             C5964 * C1606 + C5865 * C1695) *
                C5863 +
            (C5966 * C7887 + C5867 * C8006 + C5965 * C3490 + C5866 * C3572 +
             C5964 * C1601 + C5865 * C1690) *
                C5869) *
               C141320 * C141487) *
              C2374 +
          (((C5964 * C3490 + C5865 * C3572 + C5965 * C7887 + C5866 * C8006 +
             C5966 * C10551 + C5867 * C10677) *
                C5869 +
            (C5964 * C3494 + C5865 * C3576 + C5965 * C7890 + C5866 * C8009 +
             C5966 * C10553 + C5867 * C10679) *
                C5863 +
            (C5964 * C3491 + C5865 * C3573 + C5965 * C7886 + C5866 * C8005 +
             C5966 * C10552 + C5867 * C10678) *
                C5871 +
            (C5964 * C3495 + C5865 * C3577 + C5965 * C7889 + C5866 * C8008 +
             C5966 * C10554 + C5867 * C10680) *
                C141221) *
               C141320 * C141487 -
           ((C6898 + C6899 + C6900) * C141221 +
            (C6901 + C6902 + C6903) * C5871 +
            (C5966 * C6732 + C5867 * C6883 + C5965 * C2964 + C5866 * C3030 +
             C5964 * C828 + C5865 * C917) *
                C5863 +
            (C5966 * C6729 + C5867 * C6880 + C5965 * C2960 + C5866 * C3026 +
             C5964 * C823 + C5865 * C912) *
                C5869) *
               C141320 * C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141309 * C189) * C101 +
            (C188 * C114 + C141309 * C195) * C89 + C218 * C103 + C219 * C90 +
            C220 * C105 + C221 * C91 + C222 * C107 + C223 * C92) *
               C141320 * C1596 -
           (C1710 * C92 + C1711 * C107 + C1712 * C91 + C1713 * C105 +
            C1714 * C90 + C1715 * C103 +
            (C188 * C1606 + C141309 * C1695) * C89 +
            (C188 * C1601 + C141309 * C1690) * C101) *
               C141320 * C141487) *
              C2374 +
          (((C188 * C3490 + C141309 * C3572) * C101 +
            (C188 * C3494 + C141309 * C3576) * C89 +
            (C188 * C3491 + C141309 * C3573) * C103 +
            (C188 * C3495 + C141309 * C3577) * C90 +
            (C188 * C3492 + C141309 * C3574) * C105 +
            (C188 * C3496 + C141309 * C3578) * C91 +
            (C188 * C3493 + C141309 * C3575) * C107 +
            (C188 * C3497 + C141309 * C3579) * C92) *
               C141320 * C141487 -
           (C932 * C92 + C933 * C107 + C934 * C91 + C935 * C105 + C936 * C90 +
            C937 * C103 + (C188 * C828 + C141309 * C917) * C89 +
            (C188 * C823 + C141309 * C912) * C101) *
               C141320 * C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141309 * C189) * C5869 +
             (C188 * C114 + C141309 * C195) * C5863 + C218 * C5871 +
             C219 * C141221) *
                C14035 +
            (C16049 + C16050 + C16023 + C16024) * C14036 +
            (C16051 + C16052 + C16029 + C16030) * C14037) *
               C1596 -
           ((C16047 * C141221 + C16048 * C5871 +
             (C188 * C15865 + C141309 * C16016) * C5863 +
             (C188 * C15862 + C141309 * C16013) * C5869) *
                C14037 +
            (C16030 + C16029 + C16052 + C16051) * C14036 +
            (C16024 + C16023 + C16050 + C16049) * C14035) *
               C141487) *
              C2374 +
          (((C18719 + C18720 + C18707 + C18708) * C14035 +
            (C18721 + C18722 + C18713 + C18714) * C14036 +
            ((C188 * C18582 + C141309 * C18698) * C5869 +
             (C188 * C18584 + C141309 * C18700) * C5863 +
             (C188 * C18583 + C141309 * C18699) * C5871 +
             (C188 * C18585 + C141309 * C18701) * C141221) *
                C14037) *
               C141487 -
           ((C18714 + C18713 + C18722 + C18721) * C14037 +
            (C18708 + C18707 + C18720 + C18719) * C14036 +
            (C936 * C141221 + C937 * C5871 +
             (C188 * C828 + C141309 * C917) * C5863 +
             (C188 * C823 + C141309 * C912) * C5869) *
                C14035) *
               C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eexz[23] +=
        (-std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141320 * C276) * C5869 +
             (C275 * C114 + C141320 * C282) * C5863 + C305 * C5871 +
             C306 * C141221) *
                C5865 +
            (C7038 + C7039 + C7012 + C7013) * C5866 + C9955 * C5867) *
               C1596 -
           ((C10784 + C10785 + C10800 + C10801) * C5867 +
            (C10790 + C10791 + C10802 + C10803) * C5866 +
            (C1808 * C141221 + C1809 * C5871 +
             (C275 * C1606 + C141320 * C1789) * C5863 +
             (C275 * C1601 + C141320 * C1784) * C5869) *
                C5865) *
               C141487) *
              C2374 +
          (((C10803 + C10802 + C10791 + C10790) * C5865 +
            (C10801 + C10800 + C10785 + C10784) * C5866 +
            ((C275 * C10551 + C141320 * C10779) * C5869 +
             (C275 * C10553 + C141320 * C10781) * C5863 +
             (C275 * C10552 + C141320 * C10780) * C5871 +
             (C275 * C10554 + C141320 * C10782) * C141221) *
                C5867) *
               C141487 -
           ((C9946 + C9947 + C9956 + C9957) * C5867 +
            (C7019 + C7018 + C7041 + C7040) * C5866 +
            (C7013 + C7012 + C7039 + C7038) * C5865) *
               C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141320 * C276) * C101 +
            (C275 * C114 + C141320 * C282) * C89 + C305 * C103 + C306 * C90 +
            C307 * C105 + C308 * C91 + C309 * C107 + C310 * C92) *
               C141309 * C1596 -
           (C1804 * C92 + C1805 * C107 + C1806 * C91 + C1807 * C105 +
            C1808 * C90 + C1809 * C103 +
            (C275 * C1606 + C141320 * C1789) * C89 +
            (C275 * C1601 + C141320 * C1784) * C101) *
               C141309 * C141487) *
              C2374 +
          (((C275 * C3490 + C141320 * C3646) * C101 +
            (C275 * C3494 + C141320 * C3650) * C89 +
            (C275 * C3491 + C141320 * C3647) * C103 +
            (C275 * C3495 + C141320 * C3651) * C90 +
            (C275 * C3492 + C141320 * C3648) * C105 +
            (C275 * C3496 + C141320 * C3652) * C91 +
            (C275 * C3493 + C141320 * C3649) * C107 +
            (C275 * C3497 + C141320 * C3653) * C92) *
               C141309 * C141487 -
           (C1026 * C92 + C1027 * C107 + C1028 * C91 + C1029 * C105 +
            C1030 * C90 + C1031 * C103 + (C275 * C828 + C141320 * C1011) * C89 +
            (C275 * C823 + C141320 * C1006) * C101) *
               C141309 * C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C14204 * C108 + C14035 * C276 + C14205 * C1601 + C14036 * C1784 +
             C14206 * C5325 + C14037 * C5449) *
                C5869 +
            (C14204 * C114 + C14035 * C282 + C14205 * C1606 + C14036 * C1789 +
             C14206 * C5329 + C14037 * C5453) *
                C5863 +
            (C14232 + C14233 + C14234) * C5871 +
            (C14235 + C14236 + C14237) * C141221) *
               C141309 * C1596 -
           ((C16169 + C16170 + C16171) * C141221 +
            (C16172 + C16173 + C16174) * C5871 +
            (C14206 * C15865 + C14037 * C16154 + C14205 * C5329 +
             C14036 * C5453 + C14204 * C1606 + C14035 * C1789) *
                C5863 +
            (C14206 * C15862 + C14037 * C16151 + C14205 * C5325 +
             C14036 * C5449 + C14204 * C1601 + C14035 * C1784) *
                C5869) *
               C141309 * C141487) *
              C2374 +
          (((C14204 * C3490 + C14035 * C3646 + C14205 * C13301 +
             C14036 * C13475 + C14206 * C18582 + C14037 * C18820) *
                C5869 +
            (C14204 * C3494 + C14035 * C3650 + C14205 * C13305 +
             C14036 * C13479 + C14206 * C18584 + C14037 * C18822) *
                C5863 +
            (C14204 * C3491 + C14035 * C3647 + C14205 * C13302 +
             C14036 * C13476 + C14206 * C18583 + C14037 * C18821) *
                C5871 +
            (C14204 * C3495 + C14035 * C3651 + C14205 * C13306 +
             C14036 * C13480 + C14206 * C18585 + C14037 * C18823) *
                C141221) *
               C141309 * C141487 -
           ((C15106 + C15107 + C15108) * C141221 +
            (C15109 + C15110 + C15111) * C5871 +
            (C14206 * C13305 + C14037 * C13479 + C14205 * C3494 +
             C14036 * C3650 + C14204 * C828 + C14035 * C1011) *
                C5863 +
            (C14206 * C13301 + C14037 * C13475 + C14205 * C3490 +
             C14036 * C3646 + C14204 * C823 + C14035 * C1006) *
                C5869) *
               C141309 * C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eeyx[23] +=
        (-std::pow(Pi, 2.5) *
         ((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C141221 * C115) *
                C5964 +
            (C5869 * C189 + C5863 * C362 + C5871 * C190 + C141221 * C363) *
                C5865 +
            (C7175 + C7176) * C5965 + (C7177 + C7178) * C5866 + C10034 * C5966 +
            C10035 * C5867) *
               C141320 * C1596 -
           ((C10920 + C10921) * C5867 + (C10922 + C10923) * C5966 +
            (C10924 + C10925) * C5866 + (C10926 + C10927) * C5965 +
            (C5871 * C1689 + C141221 * C1877 + C5869 * C1690 + C5863 * C1878) *
                C5865 +
            (C5871 * C1600 + C141221 * C1605 + C5869 * C1601 + C5863 * C1606) *
                C5964) *
               C141320 * C141487) *
              C2374 +
          (((C10927 + C10926) * C5964 + (C10925 + C10924) * C5865 +
            (C10923 + C10922) * C5965 + (C10921 + C10920) * C5866 +
            (C5869 * C10551 + C5863 * C10553 + C5871 * C10552 +
             C141221 * C10554) *
                C5966 +
            (C5869 * C10677 + C5863 * C10901 + C5871 * C10678 +
             C141221 * C10902) *
                C5867) *
               C141320 * C141487 -
           ((C10044 + C10045) * C5867 + (C10046 + C10047) * C5966 +
            (C7182 + C7181) * C5866 + (C7180 + C7179) * C5965 +
            (C7178 + C7177) * C5865 + (C7176 + C7175) * C5964) *
               C141320 * C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
             C91 * C116 + C107 * C111 + C92 * C117) *
                C188 +
            (C101 * C189 + C89 * C362 + C103 * C190 + C90 * C363 + C105 * C191 +
             C91 * C364 + C107 * C192 + C92 * C365) *
                C141309) *
               C141320 * C1596 -
           ((C107 * C1687 + C92 * C1875 + C105 * C1688 + C91 * C1876 +
             C103 * C1689 + C90 * C1877 + C101 * C1690 + C89 * C1878) *
                C141309 +
            (C107 * C1598 + C92 * C1603 + C105 * C1599 + C91 * C1604 +
             C103 * C1600 + C90 * C1605 + C101 * C1601 + C89 * C1606) *
                C188) *
               C141320 * C141487) *
              C2374 +
          (((C101 * C3490 + C89 * C3494 + C103 * C3491 + C90 * C3495 +
             C105 * C3492 + C91 * C3496 + C107 * C3493 + C92 * C3497) *
                C188 +
            (C101 * C3572 + C89 * C3720 + C103 * C3573 + C90 * C3721 +
             C105 * C3574 + C91 * C3722 + C107 * C3575 + C92 * C3723) *
                C141309) *
               C141320 * C141487 -
           ((C107 * C909 + C92 * C1097 + C105 * C910 + C91 * C1098 +
             C103 * C911 + C90 * C1099 + C101 * C912 + C89 * C1100) *
                C141309 +
            (C107 * C820 + C92 * C825 + C105 * C821 + C91 * C826 + C103 * C822 +
             C90 * C827 + C101 * C823 + C89 * C828) *
                C188) *
               C141320 * C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C141221 * C115) *
                 C188 +
             (C5869 * C189 + C5863 * C362 + C5871 * C190 + C141221 * C363) *
                 C141309) *
                C14035 +
            ((C16308 + C16309) * C188 + (C16310 + C16311) * C141309) * C14036 +
            ((C16312 + C16313) * C188 + (C16314 + C16315) * C141309) * C14037) *
               C1596 -
           (((C5871 * C16012 + C141221 * C16272 + C5869 * C16013 +
              C5863 * C16273) *
                 C141309 +
             (C5871 * C15861 + C141221 * C15864 + C5869 * C15862 +
              C5863 * C15865) *
                 C188) *
                C14037 +
            ((C16315 + C16314) * C141309 + (C16313 + C16312) * C188) * C14036 +
            ((C16311 + C16310) * C141309 + (C16309 + C16308) * C188) * C14035) *
               C141487) *
              C2374 +
          ((((C10927 + C10926) * C188 + (C10925 + C10924) * C141309) * C14035 +
            ((C18933 + C18934) * C188 + (C18935 + C18936) * C141309) * C14036 +
            ((C5869 * C18582 + C5863 * C18584 + C5871 * C18583 +
              C141221 * C18585) *
                 C188 +
             (C5869 * C18698 + C5863 * C18922 + C5871 * C18699 +
              C141221 * C18923) *
                 C141309) *
                C14037) *
               C141487 -
           (((C18936 + C18935) * C141309 + (C18934 + C18933) * C188) * C14037 +
            ((C10924 + C10925) * C141309 + (C10926 + C10927) * C188) * C14036 +
            ((C7178 + C7177) * C141309 + (C7176 + C7175) * C188) * C14035) *
               C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eeyy[23] +=
        (-std::pow(Pi, 2.5) *
         ((((C6237 * C108 + C6241 + C6241 + C5865 * C419 + C6238 * C823 +
             C6242 + C6242 + C5866 * C1171 + C6239 * C2960 + C6243 + C6243 +
             C5867 * C3196) *
                C5863 +
            (C6277 + C6278 + C6279) * C141221) *
               C141320 * C1596 -
           ((C8369 + C8370 + C8371) * C141221 +
            (C6239 * C7887 + C8357 + C8357 + C5867 * C8345 + C6238 * C3490 +
             C8358 + C8358 + C5866 * C3790 + C6237 * C1601 + C8359 + C8359 +
             C5865 * C1949) *
                C5863) *
               C141320 * C141487) *
              C2374 +
          (((C6237 * C3490 + C11028 + C11028 + C5865 * C3790 + C6238 * C7887 +
             C11029 + C11029 + C5866 * C8345 + C6239 * C10551 + C11030 +
             C11030 + C5867 * C11025) *
                C5863 +
            (C6237 * C3491 + C11031 + C11031 + C5865 * C3791 + C6238 * C7886 +
             C11032 + C11032 + C5866 * C8344 + C6239 * C10552 + C11033 +
             C11033 + C5867 * C11026) *
                C141221) *
               C141320 * C141487 -
           ((C7313 + C7314 + C7315) * C141221 +
            (C6239 * C6729 + C7301 + C7301 + C5867 * C7289 + C6238 * C2960 +
             C7302 + C7302 + C5866 * C3196 + C6237 * C823 + C7303 + C7303 +
             C5865 * C1171) *
                C5863) *
               C141320 * C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C418 * C108 + C426 + C426 + C141309 * C419) * C89 + C448 * C90 +
            C449 * C91 + C450 * C92) *
               C141320 * C1596 -
           (C1969 * C92 + C1970 * C91 + C1971 * C90 +
            (C418 * C1601 + C1961 + C1961 + C141309 * C1949) * C89) *
               C141320 * C141487) *
              C2374 +
          (((C418 * C3490 + C3795 + C3795 + C141309 * C3790) * C89 +
            (C418 * C3491 + C3796 + C3796 + C141309 * C3791) * C90 +
            (C418 * C3492 + C3797 + C3797 + C141309 * C3792) * C91 +
            (C418 * C3493 + C3798 + C3798 + C141309 * C3793) * C92) *
               C141320 * C141487 -
           (C1191 * C92 + C1192 * C91 + C1193 * C90 +
            (C418 * C823 + C1183 + C1183 + C141309 * C1171) * C89) *
               C141320 * C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C418 * C108 + C426 + C426 + C141309 * C419) * C5863 +
             C448 * C141221) *
                C14035 +
            (C16449 + C16427) * C14036 + (C16450 + C16430) * C14037) *
               C1596 -
           ((C16448 * C141221 +
             (C418 * C15862 + C16434 + C16434 + C141309 * C16422) * C5863) *
                C14037 +
            (C16430 + C16450) * C14036 + (C16427 + C16449) * C14035) *
               C141487) *
              C2374 +
          (((C19051 + C19039) * C14035 + (C19052 + C19042) * C14036 +
            ((C418 * C18582 + C19043 + C19043 + C141309 * C19034) * C5863 +
             (C418 * C18583 + C19044 + C19044 + C141309 * C19035) * C141221) *
                C14037) *
               C141487 -
           ((C19042 + C19052) * C14037 + (C19039 + C19051) * C14036 +
            (C1193 * C141221 +
             (C418 * C823 + C1183 + C1183 + C141309 * C1171) * C5863) *
                C14035) *
               C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eeyz[23] +=
        (-std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141320 * C276) * C5964 +
             (C275 * C189 + C141320 * C501) * C5865 + C7032 * C5965 +
             C7428 * C5866 + C7034 * C5966 + C7429 * C5867) *
                C5863 +
            (C6357 + C6358 + C6359 + C6360 + C6361 + C6373) * C141221) *
               C1596 -
           ((C8483 + C8475 + C8484 + C8478 + C8479 + C8480) * C141221 +
            (C11138 * C5867 + C10797 * C5966 + C11139 * C5866 + C10799 * C5965 +
             (C275 * C1690 + C141320 * C2040) * C5865 +
             (C275 * C1601 + C141320 * C1784) * C5964) *
                C5863) *
               C141487) *
              C2374 +
          (((C10799 * C5964 + C11139 * C5865 + C10797 * C5965 + C11138 * C5866 +
             (C275 * C10551 + C141320 * C10779) * C5966 +
             (C275 * C10677 + C141320 * C11131) * C5867) *
                C5863 +
            (C8145 * C5964 + C8482 * C5865 + C8143 * C5965 + C8481 * C5866 +
             (C275 * C10552 + C141320 * C10780) * C5966 +
             (C275 * C10678 + C141320 * C11132) * C5867) *
                C141221) *
               C141487 -
           ((C7431 + C7423 + C7424 + C7425 + C7426 + C7427) * C141221 +
            (C10208 * C5867 + C9954 * C5966 + C7429 * C5866 + C7034 * C5965 +
             C7428 * C5865 + C7032 * C5964) *
                C5863) *
               C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141320 * C276) * C188 +
             (C275 * C189 + C141320 * C501) * C141309) *
                C89 +
            (C508 + C524) * C90 + C528 * C91 + C529 * C92) *
               C1596 -
           ((C2055 + C2045) * C92 + (C2056 + C2048) * C91 +
            (C2057 + C2051) * C90 +
            ((C275 * C1690 + C141320 * C2040) * C141309 +
             (C275 * C1601 + C141320 * C1784) * C188) *
                C89) *
               C141487) *
              C2374 +
          ((((C275 * C3490 + C141320 * C3646) * C188 +
             (C275 * C3572 + C141320 * C3864) * C141309) *
                C89 +
            ((C275 * C3491 + C141320 * C3647) * C188 +
             (C275 * C3573 + C141320 * C3865) * C141309) *
                C90 +
            ((C275 * C3492 + C141320 * C3648) * C188 +
             (C275 * C3574 + C141320 * C3866) * C141309) *
                C91 +
            ((C275 * C3493 + C141320 * C3649) * C188 +
             (C275 * C3575 + C141320 * C3867) * C141309) *
                C92) *
               C141487 -
           ((C1277 + C1267) * C92 + (C1278 + C1270) * C91 +
            (C1279 + C1273) * C90 +
            ((C275 * C912 + C141320 * C1262) * C141309 +
             (C275 * C823 + C141320 * C1006) * C188) *
                C89) *
               C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C14204 * C108 + C14035 * C276 + C14205 * C1601 + C14036 * C1784 +
              C14206 * C5325 + C14037 * C5449) *
                 C188 +
             (C14204 * C189 + C14035 * C501 + C14205 * C1690 + C14036 * C2040 +
              C14206 * C5391 + C14037 * C5619) *
                 C141309) *
                C5863 +
            ((C14232 + C14233 + C14234) * C188 +
             (C14488 + C14489 + C14490) * C141309) *
                C141221) *
               C1596 -
           (((C16558 + C16559 + C16560) * C141309 +
             (C16172 + C16173 + C16174) * C188) *
                C141221 +
            ((C14206 * C16013 + C14037 * C16549 + C14205 * C5391 +
              C14036 * C5619 + C14204 * C1690 + C14035 * C2040) *
                 C141309 +
             (C14206 * C15862 + C14037 * C16151 + C14205 * C5325 +
              C14036 * C5449 + C14204 * C1601 + C14035 * C1784) *
                 C188) *
                C5863) *
               C141487) *
              C2374 +
          ((((C14204 * C3490 + C14035 * C3646 + C14205 * C13301 +
              C14036 * C13475 + C14206 * C18582 + C14037 * C18820) *
                 C188 +
             (C14204 * C3572 + C14035 * C3864 + C14205 * C13393 +
              C14036 * C13719 + C14206 * C18698 + C14037 * C19150) *
                 C141309) *
                C5863 +
            ((C14204 * C3491 + C14035 * C3647 + C14205 * C13302 +
              C14036 * C13476 + C14206 * C18583 + C14037 * C18821) *
                 C188 +
             (C14204 * C3573 + C14035 * C3865 + C14205 * C13395 +
              C14036 * C13721 + C14206 * C18699 + C14037 * C19151) *
                 C141309) *
                C141221) *
               C141487 -
           (((C15428 + C15429 + C15430) * C141309 +
             (C15109 + C15110 + C15111) * C188) *
                C141221 +
            ((C14206 * C13393 + C14037 * C13719 + C14205 * C3572 +
              C14036 * C3864 + C14204 * C912 + C14035 * C1262) *
                 C141309 +
             (C14206 * C13301 + C14037 * C13475 + C14205 * C3490 +
              C14036 * C3646 + C14204 * C823 + C14035 * C1006) *
                 C188) *
                C5863) *
               C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eezx[23] +=
        (-std::pow(Pi, 2.5) *
         (((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C141221 * C115) *
                 C275 +
             (C5869 * C276 + C5863 * C579 + C5871 * C277 + C141221 * C580) *
                 C141320) *
                C5865 +
            ((C7175 + C7176) * C275 + (C7549 + C7550) * C141320) * C5866 +
            C10294 * C5867) *
               C1596 -
           (((C11248 + C11249) * C141320 + (C10922 + C10923) * C275) * C5867 +
            ((C11250 + C11251) * C141320 + (C10926 + C10927) * C275) * C5866 +
            ((C5871 * C1783 + C141221 * C2125 + C5869 * C1784 + C5863 * C2126) *
                 C141320 +
             (C5871 * C1600 + C141221 * C1605 + C5869 * C1601 + C5863 * C1606) *
                 C275) *
                C5865) *
               C141487) *
              C2374 +
          ((((C10927 + C10926) * C275 + (C11251 + C11250) * C141320) * C5865 +
            ((C10923 + C10922) * C275 + (C11249 + C11248) * C141320) * C5866 +
            ((C5869 * C10551 + C5863 * C10553 + C5871 * C10552 +
              C141221 * C10554) *
                 C275 +
             (C5869 * C10779 + C5863 * C11237 + C5871 * C10780 +
              C141221 * C11238) *
                 C141320) *
                C5867) *
               C141487 -
           (((C10292 + C10293) * C141320 + (C10046 + C10047) * C275) * C5867 +
            ((C7552 + C7551) * C141320 + (C7180 + C7179) * C275) * C5866 +
            ((C7550 + C7549) * C141320 + (C7176 + C7175) * C275) * C5865) *
               C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
             C91 * C116 + C107 * C111 + C92 * C117) *
                C275 +
            (C101 * C276 + C89 * C579 + C103 * C277 + C90 * C580 + C105 * C278 +
             C91 * C581 + C107 * C279 + C92 * C582) *
                C141320) *
               C141309 * C1596 -
           ((C107 * C1781 + C92 * C2123 + C105 * C1782 + C91 * C2124 +
             C103 * C1783 + C90 * C2125 + C101 * C1784 + C89 * C2126) *
                C141320 +
            (C107 * C1598 + C92 * C1603 + C105 * C1599 + C91 * C1604 +
             C103 * C1600 + C90 * C1605 + C101 * C1601 + C89 * C1606) *
                C275) *
               C141309 * C141487) *
              C2374 +
          (((C101 * C3490 + C89 * C3494 + C103 * C3491 + C90 * C3495 +
             C105 * C3492 + C91 * C3496 + C107 * C3493 + C92 * C3497) *
                C275 +
            (C101 * C3646 + C89 * C3934 + C103 * C3647 + C90 * C3935 +
             C105 * C3648 + C91 * C3936 + C107 * C3649 + C92 * C3937) *
                C141320) *
               C141309 * C141487 -
           ((C107 * C1003 + C92 * C1345 + C105 * C1004 + C91 * C1346 +
             C103 * C1005 + C90 * C1347 + C101 * C1006 + C89 * C1348) *
                C141320 +
            (C107 * C820 + C92 * C825 + C105 * C821 + C91 * C826 + C103 * C822 +
             C90 * C827 + C101 * C823 + C89 * C828) *
                C275) *
               C141309 * C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C141221 * C115) *
                C14204 +
            (C5869 * C276 + C5863 * C579 + C5871 * C277 + C141221 * C580) *
                C14035 +
            (C16308 + C16309) * C14205 + (C16678 + C16679) * C14036 +
            (C16312 + C16313) * C14206 + (C16680 + C16681) * C14037) *
               C141309 * C1596 -
           ((C5871 * C16150 + C141221 * C16658 + C5869 * C16151 +
             C5863 * C16659) *
                C14037 +
            (C5871 * C15861 + C141221 * C15864 + C5869 * C15862 +
             C5863 * C15865) *
                C14206 +
            (C16681 + C16680) * C14036 + (C16313 + C16312) * C14205 +
            (C16679 + C16678) * C14035 + (C16309 + C16308) * C14204) *
               C141309 * C141487) *
              C2374 +
          (((C10927 + C10926) * C14204 + (C11251 + C11250) * C14035 +
            (C18933 + C18934) * C14205 + (C19257 + C19258) * C14036 +
            (C5869 * C18582 + C5863 * C18584 + C5871 * C18583 +
             C141221 * C18585) *
                C14206 +
            (C5869 * C18820 + C5863 * C19250 + C5871 * C18821 +
             C141221 * C19251) *
                C14037) *
               C141309 * C141487 -
           ((C19258 + C19257) * C14037 + (C18934 + C18933) * C14206 +
            (C11250 + C11251) * C14036 + (C10926 + C10927) * C14205 +
            (C7550 + C7549) * C14035 + (C7176 + C7175) * C14204) *
               C141309 * C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eezy[23] +=
        (-std::pow(Pi, 2.5) *
         (((((C5964 * C108 + C5865 * C189 + C5965 * C823 + C5866 * C912 +
              C5966 * C2960 + C5867 * C3026) *
                 C275 +
             (C5964 * C276 + C5865 * C635 + C5965 * C1006 + C5866 * C1419 +
              C5966 * C3084 + C5867 * C3362) *
                 C141320) *
                C5863 +
            ((C5992 + C5993 + C5994) * C275 +
             (C6535 + C6536 + C6537) * C141320) *
                C141221) *
               C1596 -
           (((C8693 + C8694 + C8695) * C141320 +
             (C8027 + C8028 + C8029) * C275) *
                C141221 +
            ((C5966 * C8128 + C5867 * C8684 + C5965 * C3646 + C5866 * C4004 +
              C5964 * C1784 + C5865 * C2197) *
                 C141320 +
             (C5966 * C7887 + C5867 * C8006 + C5965 * C3490 + C5866 * C3572 +
              C5964 * C1601 + C5865 * C1690) *
                 C275) *
                C5863) *
               C141487) *
              C2374 +
          ((((C5964 * C3490 + C5865 * C3572 + C5965 * C7887 + C5866 * C8006 +
              C5966 * C10551 + C5867 * C10677) *
                 C275 +
             (C5964 * C3646 + C5865 * C4004 + C5965 * C8128 + C5866 * C8684 +
              C5966 * C10779 + C5867 * C11349) *
                 C141320) *
                C5863 +
            ((C5964 * C3491 + C5865 * C3573 + C5965 * C7886 + C5866 * C8005 +
              C5966 * C10552 + C5867 * C10678) *
                 C275 +
             (C5964 * C3647 + C5865 * C4005 + C5965 * C8127 + C5866 * C8683 +
              C5966 * C10780 + C5867 * C11350) *
                 C141320) *
                C141221) *
               C141487 -
           (((C7664 + C7665 + C7666) * C141320 +
             (C6901 + C6902 + C6903) * C275) *
                C141221 +
            ((C5966 * C7002 + C5867 * C7655 + C5965 * C3084 + C5866 * C3362 +
              C5964 * C1006 + C5865 * C1419) *
                 C141320 +
             (C5966 * C6729 + C5867 * C6880 + C5965 * C2960 + C5866 * C3026 +
              C5964 * C823 + C5865 * C912) *
                 C275) *
                C5863) *
               C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141309 * C189) * C275 +
             (C188 * C276 + C141309 * C635) * C141320) *
                C89 +
            (C642 + C658) * C90 + C662 * C91 + C663 * C92) *
               C1596 -
           ((C2212 + C2202) * C92 + (C2213 + C2205) * C91 +
            (C2214 + C2208) * C90 +
            ((C188 * C1784 + C141309 * C2197) * C141320 +
             (C188 * C1601 + C141309 * C1690) * C275) *
                C89) *
               C141487) *
              C2374 +
          ((((C188 * C3490 + C141309 * C3572) * C275 +
             (C188 * C3646 + C141309 * C4004) * C141320) *
                C89 +
            ((C188 * C3491 + C141309 * C3573) * C275 +
             (C188 * C3647 + C141309 * C4005) * C141320) *
                C90 +
            ((C188 * C3492 + C141309 * C3574) * C275 +
             (C188 * C3648 + C141309 * C4006) * C141320) *
                C91 +
            ((C188 * C3493 + C141309 * C3575) * C275 +
             (C188 * C3649 + C141309 * C4007) * C141320) *
                C92) *
               C141487 -
           ((C1434 + C1424) * C92 + (C1435 + C1427) * C91 +
            (C1436 + C1430) * C90 +
            ((C188 * C1006 + C141309 * C1419) * C141320 +
             (C188 * C823 + C141309 * C912) * C275) *
                C89) *
               C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141309 * C189) * C14204 +
             (C188 * C276 + C141309 * C635) * C14035 + C16043 * C14205 +
             C16798 * C14036 + C16045 * C14206 + C16799 * C14037) *
                C5863 +
            (C14642 + C14643 + C14644 + C14645 + C14646 + C14658) * C141221) *
               C1596 -
           ((C16801 + C16793 + C16794 + C16795 + C16796 + C16797) * C141221 +
            ((C188 * C16151 + C141309 * C16784) * C14037 +
             (C188 * C15862 + C141309 * C16013) * C14206 + C16799 * C14036 +
             C16045 * C14205 + C16798 * C14035 + C16043 * C14204) *
                C5863) *
               C141487) *
              C2374 +
          (((C18715 * C14204 + C19363 * C14035 + C18717 * C14205 +
             C19364 * C14036 + (C188 * C18582 + C141309 * C18698) * C14206 +
             (C188 * C18820 + C141309 * C19356) * C14037) *
                C5863 +
            (C14993 * C14204 + C15638 * C14035 + C14991 * C14205 +
             C15637 * C14036 + (C188 * C18583 + C141309 * C18699) * C14206 +
             (C188 * C18821 + C141309 * C19357) * C14037) *
                C141221) *
               C141487 -
           ((C15639 + C15631 + C15640 + C15634 + C15635 + C15636) * C141221 +
            (C19364 * C14037 + C18717 * C14206 + C19363 * C14036 +
             C18715 * C14205 + (C188 * C1006 + C141309 * C1419) * C14035 +
             (C188 * C823 + C141309 * C912) * C14204) *
                C5863) *
               C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eezz[23] +=
        (-std::pow(Pi, 2.5) *
         (((((C713 * C108 + C721 + C721 + C141320 * C714) * C5865 +
             C7785 * C5866 + C7786 * C5867) *
                C5863 +
            (C6615 + C6616 + C6629) * C141221) *
               C1596 -
           ((C8811 + C8812 + C8802) * C141221 +
            (C11462 * C5867 + C11463 * C5866 +
             (C713 * C1601 + C2295 + C2295 + C141320 * C2283) * C5865) *
                C5863) *
               C141487) *
              C2374 +
          (((C11463 * C5865 + C11462 * C5866 +
             (C713 * C10551 + C11456 + C11456 + C141320 * C11449) * C5867) *
                C5863 +
            (C8810 * C5865 + C8809 * C5866 +
             (C713 * C10552 + C11457 + C11457 + C141320 * C11450) * C5867) *
                C141221) *
               C141487 -
           ((C7788 + C7775 + C7776) * C141221 +
            (C10453 * C5867 + C7786 * C5866 + C7785 * C5865) * C5863) *
               C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C141320 * C714) * C141309 * C89 +
            C747 * C90 + C748 * C91 + C749 * C92) *
               C1596 -
           (C2306 * C92 + C2307 * C91 + C2308 * C90 +
            (C713 * C1601 + C2295 + C2295 + C141320 * C2283) * C141309 * C89) *
               C141487) *
              C2374 +
          (((C713 * C3490 + C4079 + C4079 + C141320 * C4074) * C141309 * C89 +
            (C713 * C3491 + C4080 + C4080 + C141320 * C4075) * C141309 * C90 +
            (C713 * C3492 + C4081 + C4081 + C141320 * C4076) * C141309 * C91 +
            (C713 * C3493 + C4082 + C4082 + C141320 * C4077) * C141309 * C92) *
               C141487 -
           (C1528 * C92 + C1529 * C91 + C1530 * C90 +
            (C713 * C823 + C1517 + C1517 + C141320 * C1505) * C141309 * C89) *
               C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C14733 * C108 + C14737 + C14737 + C14035 * C714 + C14734 * C1601 +
             C14738 + C14738 + C14036 * C2283 + C14735 * C5325 + C14739 +
             C14739 + C14037 * C5781) *
                C141309 * C5863 +
            (C14773 + C14774 + C14775) * C141309 * C141221) *
               C1596 -
           ((C16924 + C16925 + C16926) * C141309 * C141221 +
            (C14735 * C15862 + C16912 + C16912 + C14037 * C16900 +
             C14734 * C5325 + C16913 + C16913 + C14036 * C5781 +
             C14733 * C1601 + C16914 + C16914 + C14035 * C2283) *
                C141309 * C5863) *
               C141487) *
              C2374 +
          (((C14733 * C3490 + C19465 + C19465 + C14035 * C4074 +
             C14734 * C13301 + C19466 + C19466 + C14036 * C13953 +
             C14735 * C18582 + C19467 + C19467 + C14037 * C19462) *
                C141309 * C5863 +
            (C14733 * C3491 + C19468 + C19468 + C14035 * C4075 +
             C14734 * C13302 + C19469 + C19469 + C14036 * C13955 +
             C14735 * C18583 + C19470 + C19470 + C14037 * C19463) *
                C141309 * C141221) *
               C141487 -
           ((C15761 + C15762 + C15763) * C141309 * C141221 +
            (C14735 * C13301 + C15749 + C15749 + C14037 * C13953 +
             C14734 * C3490 + C15750 + C15750 + C14036 * C4074 + C14733 * C823 +
             C15751 + C15751 + C14035 * C1505) *
                C141309 * C5863) *
               C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eexx[24] +=
        (-std::pow(Pi, 2.5) *
         ((((C5868 * C108 + C5873 + C5873 + C5863 * C120 + C5870 * C109 +
             C5874 + C5874 + C141221 * C121) *
                C141320 * C5865 +
            (C6774 + C6775) * C141320 * C5866 + C9782 * C5867) *
               C4148 -
           ((C10576 + C10577) * C141320 * C5867 +
            (C10578 + C10579) * C141320 * C5866 +
            (C5870 * C1600 + C7900 + C7900 + C141221 * C1610 + C5868 * C1601 +
             C7901 + C7901 + C5863 * C1611) *
                C141320 * C5865) *
               C141487) *
              C141277 * C2376 +
          (((C5868 * C1600 + C7902 + C7902 + C5863 * C1610 + C5870 * C1599 +
             C7903 + C7903 + C141221 * C1609) *
                C141320 * C5865 +
            (C5868 * C3491 + C7904 + C7904 + C5863 * C3499 + C5870 * C3492 +
             C7905 + C7905 + C141221 * C3500) *
                C141320 * C5866 +
            (C5868 * C7886 + C7906 + C7906 + C5863 * C7892 + C5870 * C7888 +
             C7907 + C7907 + C141221 * C7894) *
                C141320 * C5867) *
               C141487 -
           ((C6781 + C6780) * C141320 * C5867 +
            (C6779 + C6778) * C141320 * C5866 +
            (C5870 * C110 + C5883 + C5883 + C141221 * C122 + C5868 * C109 +
             C5884 + C5884 + C5863 * C121) *
                C141320 * C5865) *
               C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C100 * C108 + C127 + C127 + C89 * C120 + C102 * C109 + C128 + C128 +
            C90 * C121 + C104 * C110 + C129 + C129 + C91 * C122 + C106 * C111 +
            C130 + C130 + C92 * C123) *
               C141320 * C141309 * C4148 -
           (C106 * C1598 + C1614 + C1614 + C92 * C1608 + C104 * C1599 + C1615 +
            C1615 + C91 * C1609 + C102 * C1600 + C1616 + C1616 + C90 * C1610 +
            C100 * C1601 + C1617 + C1617 + C89 * C1611) *
               C141320 * C141309 * C141487) *
              C141277 * C2376 +
          ((C100 * C1600 + C1618 + C1618 + C89 * C1610 + C102 * C1599 + C1619 +
            C1619 + C90 * C1609 + C104 * C1598 + C1620 + C1620 + C91 * C1608 +
            C106 * C1602 + C1621 + C1621 + C92 * C1612) *
               C141320 * C141309 * C141487 -
           (C106 * C112 + C131 + C131 + C92 * C124 + C104 * C111 + C132 + C132 +
            C91 * C123 + C102 * C110 + C133 + C133 + C90 * C122 + C100 * C109 +
            C134 + C134 + C89 * C121) *
               C141320 * C141309 * C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C5868 * C108 + C5873 + C5873 + C5863 * C120 + C5870 * C109 +
             C5874 + C5874 + C141221 * C121) *
                C14035 +
            (C15907 + C15908) * C14036 + (C15909 + C15910) * C14037) *
               C141309 * C4148 -
           ((C5870 * C15861 + C15879 + C15879 + C141221 * C15867 +
             C5868 * C15862 + C15880 + C15880 + C5863 * C15868) *
                C14037 +
            (C15910 + C15909) * C14036 + (C15908 + C15907) * C14035) *
               C141309 * C141487) *
              C141277 * C2376 +
          (((C15911 + C15912) * C14035 + (C15913 + C15914) * C14036 +
            (C5868 * C15861 + C15889 + C15889 + C5863 * C15867 +
             C5870 * C15863 + C15890 + C15890 + C141221 * C15869) *
                C14037) *
               C141309 * C141487 -
           ((C15914 + C15913) * C14037 + (C15912 + C15911) * C14036 +
            (C5870 * C110 + C5883 + C5883 + C141221 * C122 + C5868 * C109 +
             C5884 + C5884 + C5863 * C121) *
                C14035) *
               C141309 * C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eexy[24] +=
        (-std::pow(Pi, 2.5) *
         ((((C5964 * C108 + C5865 * C189 + C5965 * C823 + C5866 * C912 +
             C5966 * C2960 + C5867 * C3026) *
                C5869 +
            (C5964 * C114 + C5865 * C195 + C5965 * C828 + C5866 * C917 +
             C5966 * C2964 + C5867 * C3030) *
                C5863 +
            (C5992 + C5993 + C5994) * C5871 +
            (C5995 + C5996 + C5997) * C141221) *
               C141320 * C4148 -
           ((C8024 + C8025 + C8026) * C141221 +
            (C8027 + C8028 + C8029) * C5871 +
            (C5966 * C7890 + C5867 * C8009 + C5965 * C3494 + C5866 * C3576 +
             C5964 * C1606 + C5865 * C1695) *
                C5863 +
            (C5966 * C7887 + C5867 * C8006 + C5965 * C3490 + C5866 * C3572 +
             C5964 * C1601 + C5865 * C1690) *
                C5869) *
               C141320 * C141487) *
              C141277 * C2376 +
          (((C8029 + C8028 + C8027) * C5869 + (C8026 + C8025 + C8024) * C5863 +
            (C5964 * C1599 + C5865 * C1688 + C5965 * C3492 + C5866 * C3574 +
             C5966 * C7888 + C5867 * C8007) *
                C5871 +
            (C5964 * C1604 + C5865 * C1693 + C5965 * C3496 + C5866 * C3578 +
             C5966 * C7891 + C5867 * C8010) *
                C141221) *
               C141320 * C141487 -
           ((C5998 + C5999 + C6000) * C141221 +
            (C6001 + C6002 + C6003) * C5871 + (C5997 + C5996 + C5995) * C5863 +
            (C5994 + C5993 + C5992) * C5869) *
               C141320 * C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141309 * C189) * C101 +
            (C188 * C114 + C141309 * C195) * C89 + C218 * C103 + C219 * C90 +
            C220 * C105 + C221 * C91 + C222 * C107 + C223 * C92) *
               C141320 * C4148 -
           (C1710 * C92 + C1711 * C107 + C1712 * C91 + C1713 * C105 +
            C1714 * C90 + C1715 * C103 +
            (C188 * C1606 + C141309 * C1695) * C89 +
            (C188 * C1601 + C141309 * C1690) * C101) *
               C141320 * C141487) *
              C141277 * C2376 +
          ((C1715 * C101 + C1714 * C89 + C1713 * C103 + C1712 * C90 +
            C1711 * C105 + C1710 * C91 +
            (C188 * C1602 + C141309 * C1691) * C107 +
            (C188 * C1607 + C141309 * C1696) * C92) *
               C141320 * C141487 -
           (C224 * C92 + C225 * C107 + C223 * C91 + C222 * C105 + C221 * C90 +
            C220 * C103 + C219 * C89 + C218 * C101) *
               C141320 * C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141309 * C189) * C5869 +
             (C188 * C114 + C141309 * C195) * C5863 + C218 * C5871 +
             C219 * C141221) *
                C14035 +
            (C16049 + C16050 + C16023 + C16024) * C14036 +
            (C16051 + C16052 + C16029 + C16030) * C14037) *
               C4148 -
           ((C16047 * C141221 + C16048 * C5871 +
             (C188 * C15865 + C141309 * C16016) * C5863 +
             (C188 * C15862 + C141309 * C16013) * C5869) *
                C14037 +
            (C16030 + C16029 + C16052 + C16051) * C14036 +
            (C16024 + C16023 + C16050 + C16049) * C14035) *
               C141487) *
              C141277 * C2376 +
          (((C16035 + C16036 + C16037 + C16038) * C14035 +
            (C16039 + C16040 + C16041 + C16042) * C14036 +
            (C16048 * C5869 + C16047 * C5863 +
             (C188 * C15863 + C141309 * C16014) * C5871 +
             (C188 * C15866 + C141309 * C16017) * C141221) *
                C14037) *
               C141487 -
           ((C16042 + C16041 + C16040 + C16039) * C14037 +
            (C16038 + C16037 + C16036 + C16035) * C14036 +
            (C221 * C141221 + C220 * C5871 + C219 * C5863 + C218 * C5869) *
                C14035) *
               C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eexz[24] +=
        (-std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141320 * C276) * C5869 +
             (C275 * C114 + C141320 * C282) * C5863 + C305 * C5871 +
             C306 * C141221) *
                C5865 +
            (C7038 + C7039 + C7012 + C7013) * C5866 + C9955 * C5867) *
               C4148 -
           ((C10784 + C10785 + C10800 + C10801) * C5867 +
            (C10790 + C10791 + C10802 + C10803) * C5866 +
            (C1808 * C141221 + C1809 * C5871 +
             (C275 * C1606 + C141320 * C1789) * C5863 +
             (C275 * C1601 + C141320 * C1784) * C5869) *
                C5865) *
               C141487) *
              C141277 * C2376 +
          (((C1809 * C5869 + C1808 * C5863 + C1807 * C5871 + C1806 * C141221) *
                C5865 +
            (C8145 * C5869 + C8144 * C5863 +
             (C275 * C3492 + C141320 * C3648) * C5871 +
             (C275 * C3496 + C141320 * C3652) * C141221) *
                C5866 +
            (C8143 * C5869 + C8142 * C5863 +
             (C275 * C7888 + C141320 * C8129) * C5871 +
             (C275 * C7891 + C141320 * C8132) * C141221) *
                C5867) *
               C141487 -
           ((C7031 + C7030 + C7029 + C7028) * C5867 +
            (C7027 + C7026 + C7025 + C7024) * C5866 +
            (C308 * C141221 + C307 * C5871 + C306 * C5863 + C305 * C5869) *
                C5865) *
               C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141320 * C276) * C101 +
            (C275 * C114 + C141320 * C282) * C89 + C305 * C103 + C306 * C90 +
            C307 * C105 + C308 * C91 + C309 * C107 + C310 * C92) *
               C141309 * C4148 -
           (C1804 * C92 + C1805 * C107 + C1806 * C91 + C1807 * C105 +
            C1808 * C90 + C1809 * C103 +
            (C275 * C1606 + C141320 * C1789) * C89 +
            (C275 * C1601 + C141320 * C1784) * C101) *
               C141309 * C141487) *
              C141277 * C2376 +
          ((C1809 * C101 + C1808 * C89 + C1807 * C103 + C1806 * C90 +
            C1805 * C105 + C1804 * C91 +
            (C275 * C1602 + C141320 * C1785) * C107 +
            (C275 * C1607 + C141320 * C1790) * C92) *
               C141309 * C141487 -
           (C311 * C92 + C312 * C107 + C310 * C91 + C309 * C105 + C308 * C90 +
            C307 * C103 + C306 * C89 + C305 * C101) *
               C141309 * C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C14204 * C108 + C14035 * C276 + C14205 * C1601 + C14036 * C1784 +
             C14206 * C5325 + C14037 * C5449) *
                C5869 +
            (C14204 * C114 + C14035 * C282 + C14205 * C1606 + C14036 * C1789 +
             C14206 * C5329 + C14037 * C5453) *
                C5863 +
            (C14232 + C14233 + C14234) * C5871 +
            (C14235 + C14236 + C14237) * C141221) *
               C141309 * C4148 -
           ((C16169 + C16170 + C16171) * C141221 +
            (C16172 + C16173 + C16174) * C5871 +
            (C14206 * C15865 + C14037 * C16154 + C14205 * C5329 +
             C14036 * C5453 + C14204 * C1606 + C14035 * C1789) *
                C5863 +
            (C14206 * C15862 + C14037 * C16151 + C14205 * C5325 +
             C14036 * C5449 + C14204 * C1601 + C14035 * C1784) *
                C5869) *
               C141309 * C141487) *
              C141277 * C2376 +
          (((C16174 + C16173 + C16172) * C5869 +
            (C16171 + C16170 + C16169) * C5863 +
            (C14204 * C1599 + C14035 * C1782 + C14205 * C5327 + C14036 * C5451 +
             C14206 * C15863 + C14037 * C16152) *
                C5871 +
            (C14204 * C1604 + C14035 * C1787 + C14205 * C5331 + C14036 * C5455 +
             C14206 * C15866 + C14037 * C16155) *
                C141221) *
               C141309 * C141487 -
           ((C14238 + C14239 + C14240) * C141221 +
            (C14241 + C14242 + C14243) * C5871 +
            (C14237 + C14236 + C14235) * C5863 +
            (C14234 + C14233 + C14232) * C5869) *
               C141309 * C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[24] +=
        (-std::pow(Pi, 2.5) *
         ((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C141221 * C115) *
                C5964 +
            (C5869 * C189 + C5863 * C362 + C5871 * C190 + C141221 * C363) *
                C5865 +
            (C7175 + C7176) * C5965 + (C7177 + C7178) * C5866 + C10034 * C5966 +
            C10035 * C5867) *
               C141320 * C4148 -
           ((C10920 + C10921) * C5867 + (C10922 + C10923) * C5966 +
            (C10924 + C10925) * C5866 + (C10926 + C10927) * C5965 +
            (C5871 * C1689 + C141221 * C1877 + C5869 * C1690 + C5863 * C1878) *
                C5865 +
            (C5871 * C1600 + C141221 * C1605 + C5869 * C1601 + C5863 * C1606) *
                C5964) *
               C141320 * C141487) *
              C141277 * C2376 +
          (((C5869 * C1600 + C5863 * C1605 + C5871 * C1599 + C141221 * C1604) *
                C5964 +
            (C5869 * C1689 + C5863 * C1877 + C5871 * C1688 + C141221 * C1876) *
                C5865 +
            (C5869 * C3491 + C5863 * C3495 + C5871 * C3492 + C141221 * C3496) *
                C5965 +
            (C5869 * C3573 + C5863 * C3721 + C5871 * C3574 + C141221 * C3722) *
                C5866 +
            (C5869 * C7886 + C5863 * C7889 + C5871 * C7888 + C141221 * C7891) *
                C5966 +
            (C5869 * C8005 + C5863 * C8243 + C5871 * C8007 + C141221 * C8245) *
                C5867) *
               C141320 * C141487 -
           ((C7190 + C7189) * C5867 + (C7188 + C7187) * C5966 +
            (C7186 + C7185) * C5866 + (C7184 + C7183) * C5965 +
            (C5871 * C191 + C141221 * C364 + C5869 * C190 + C5863 * C363) *
                C5865 +
            (C5871 * C110 + C141221 * C116 + C5869 * C109 + C5863 * C115) *
                C5964) *
               C141320 * C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
             C91 * C116 + C107 * C111 + C92 * C117) *
                C188 +
            (C101 * C189 + C89 * C362 + C103 * C190 + C90 * C363 + C105 * C191 +
             C91 * C364 + C107 * C192 + C92 * C365) *
                C141309) *
               C141320 * C4148 -
           ((C107 * C1687 + C92 * C1875 + C105 * C1688 + C91 * C1876 +
             C103 * C1689 + C90 * C1877 + C101 * C1690 + C89 * C1878) *
                C141309 +
            (C107 * C1598 + C92 * C1603 + C105 * C1599 + C91 * C1604 +
             C103 * C1600 + C90 * C1605 + C101 * C1601 + C89 * C1606) *
                C188) *
               C141320 * C141487) *
              C141277 * C2376 +
          (((C101 * C1600 + C89 * C1605 + C103 * C1599 + C90 * C1604 +
             C105 * C1598 + C91 * C1603 + C107 * C1602 + C92 * C1607) *
                C188 +
            (C101 * C1689 + C89 * C1877 + C103 * C1688 + C90 * C1876 +
             C105 * C1687 + C91 * C1875 + C107 * C1691 + C92 * C1879) *
                C141309) *
               C141320 * C141487 -
           ((C107 * C193 + C92 * C366 + C105 * C192 + C91 * C365 + C103 * C191 +
             C90 * C364 + C101 * C190 + C89 * C363) *
                C141309 +
            (C107 * C112 + C92 * C118 + C105 * C111 + C91 * C117 + C103 * C110 +
             C90 * C116 + C101 * C109 + C89 * C115) *
                C188) *
               C141320 * C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C141221 * C115) *
                 C188 +
             (C5869 * C189 + C5863 * C362 + C5871 * C190 + C141221 * C363) *
                 C141309) *
                C14035 +
            ((C16308 + C16309) * C188 + (C16310 + C16311) * C141309) * C14036 +
            ((C16312 + C16313) * C188 + (C16314 + C16315) * C141309) * C14037) *
               C4148 -
           (((C5871 * C16012 + C141221 * C16272 + C5869 * C16013 +
              C5863 * C16273) *
                 C141309 +
             (C5871 * C15861 + C141221 * C15864 + C5869 * C15862 +
              C5863 * C15865) *
                 C188) *
                C14037 +
            ((C16315 + C16314) * C141309 + (C16313 + C16312) * C188) * C14036 +
            ((C16311 + C16310) * C141309 + (C16309 + C16308) * C188) * C14035) *
               C141487) *
              C141277 * C2376 +
          ((((C16316 + C16317) * C188 + (C16318 + C16319) * C141309) * C14035 +
            ((C16320 + C16321) * C188 + (C16322 + C16323) * C141309) * C14036 +
            ((C5869 * C15861 + C5863 * C15864 + C5871 * C15863 +
              C141221 * C15866) *
                 C188 +
             (C5869 * C16012 + C5863 * C16272 + C5871 * C16014 +
              C141221 * C16274) *
                 C141309) *
                C14037) *
               C141487 -
           (((C16323 + C16322) * C141309 + (C16321 + C16320) * C188) * C14037 +
            ((C16319 + C16318) * C141309 + (C16317 + C16316) * C188) * C14036 +
            ((C5871 * C191 + C141221 * C364 + C5869 * C190 + C5863 * C363) *
                 C141309 +
             (C5871 * C110 + C141221 * C116 + C5869 * C109 + C5863 * C115) *
                 C188) *
                C14035) *
               C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[24] +=
        (-std::pow(Pi, 2.5) *
         ((((C6237 * C108 + C6241 + C6241 + C5865 * C419 + C6238 * C823 +
             C6242 + C6242 + C5866 * C1171 + C6239 * C2960 + C6243 + C6243 +
             C5867 * C3196) *
                C5863 +
            (C6277 + C6278 + C6279) * C141221) *
               C141320 * C4148 -
           ((C8369 + C8370 + C8371) * C141221 +
            (C6239 * C7887 + C8357 + C8357 + C5867 * C8345 + C6238 * C3490 +
             C8358 + C8358 + C5866 * C3790 + C6237 * C1601 + C8359 + C8359 +
             C5865 * C1949) *
                C5863) *
               C141320 * C141487) *
              C141277 * C2376 +
          (((C8371 + C8370 + C8369) * C5863 +
            (C6237 * C1599 + C8360 + C8360 + C5865 * C1947 + C6238 * C3492 +
             C8361 + C8361 + C5866 * C3792 + C6239 * C7888 + C8362 + C8362 +
             C5867 * C8346) *
                C141221) *
               C141320 * C141487 -
           ((C6280 + C6281 + C6282) * C141221 +
            (C6279 + C6278 + C6277) * C5863) *
               C141320 * C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C418 * C108 + C426 + C426 + C141309 * C419) * C89 + C448 * C90 +
            C449 * C91 + C450 * C92) *
               C141320 * C4148 -
           (C1969 * C92 + C1970 * C91 + C1971 * C90 +
            (C418 * C1601 + C1961 + C1961 + C141309 * C1949) * C89) *
               C141320 * C141487) *
              C141277 * C2376 +
          ((C1971 * C89 + C1970 * C90 + C1969 * C91 +
            (C418 * C1602 + C1962 + C1962 + C141309 * C1950) * C92) *
               C141320 * C141487 -
           (C451 * C92 + C450 * C91 + C449 * C90 + C448 * C89) * C141320 *
               C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C418 * C108 + C426 + C426 + C141309 * C419) * C5863 +
             C448 * C141221) *
                C14035 +
            (C16449 + C16427) * C14036 + (C16450 + C16430) * C14037) *
               C4148 -
           ((C16448 * C141221 +
             (C418 * C15862 + C16434 + C16434 + C141309 * C16422) * C5863) *
                C14037 +
            (C16430 + C16450) * C14036 + (C16427 + C16449) * C14035) *
               C141487) *
              C141277 * C2376 +
          (((C16435 + C16436) * C14035 + (C16437 + C16438) * C14036 +
            (C16448 * C5863 +
             (C418 * C15863 + C16439 + C16439 + C141309 * C16423) * C141221) *
                C14037) *
               C141487 -
           ((C16438 + C16437) * C14037 + (C16436 + C16435) * C14036 +
            (C449 * C141221 + C448 * C5863) * C14035) *
               C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[24] +=
        (-std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141320 * C276) * C5964 +
             (C275 * C189 + C141320 * C501) * C5865 + C7032 * C5965 +
             C7428 * C5866 + C7034 * C5966 + C7429 * C5867) *
                C5863 +
            (C6357 + C6358 + C6359 + C6360 + C6361 + C6373) * C141221) *
               C4148 -
           ((C8483 + C8475 + C8484 + C8478 + C8479 + C8480) * C141221 +
            (C11138 * C5867 + C10797 * C5966 + C11139 * C5866 + C10799 * C5965 +
             (C275 * C1690 + C141320 * C2040) * C5865 +
             (C275 * C1601 + C141320 * C1784) * C5964) *
                C5863) *
               C141487) *
              C141277 * C2376 +
          (((C8480 + C8479 + C8478 + C8484 + C8475 + C8483) * C5863 +
            (C1807 * C5964 + C2053 * C5865 +
             (C275 * C3492 + C141320 * C3648) * C5965 +
             (C275 * C3574 + C141320 * C3866) * C5866 +
             (C275 * C7888 + C141320 * C8129) * C5966 +
             (C275 * C8007 + C141320 * C8471) * C5867) *
                C141221) *
               C141487 -
           ((C6374 + C6366 + C6367 + C6368 + C6369 + C6370) * C141221 +
            (C6373 + C6361 + C6360 + C6359 + C6358 + C6357) * C5863) *
               C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((((C275 * C108 + C141320 * C276) * C188 +
                                 (C275 * C189 + C141320 * C501) * C141309) *
                                    C89 +
                                (C508 + C524) * C90 + C528 * C91 + C529 * C92) *
                                   C4148 -
                               ((C2055 + C2045) * C92 + (C2056 + C2048) * C91 +
                                (C2057 + C2051) * C90 +
                                ((C275 * C1690 + C141320 * C2040) * C141309 +
                                 (C275 * C1601 + C141320 * C1784) * C188) *
                                    C89) *
                                   C141487) *
                                  C141277 * C2376 +
                              (((C2051 + C2057) * C89 + (C2048 + C2056) * C90 +
                                (C2045 + C2055) * C91 +
                                ((C275 * C1602 + C141320 * C1785) * C188 +
                                 (C275 * C1691 + C141320 * C2041) * C141309) *
                                    C92) *
                                   C141487 -
                               ((C527 + C519) * C92 + (C526 + C514) * C91 +
                                (C525 + C511) * C90 + (C524 + C508) * C89) *
                                   C4148) *
                                  C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C14204 * C108 + C14035 * C276 + C14205 * C1601 + C14036 * C1784 +
              C14206 * C5325 + C14037 * C5449) *
                 C188 +
             (C14204 * C189 + C14035 * C501 + C14205 * C1690 + C14036 * C2040 +
              C14206 * C5391 + C14037 * C5619) *
                 C141309) *
                C5863 +
            ((C14232 + C14233 + C14234) * C188 +
             (C14488 + C14489 + C14490) * C141309) *
                C141221) *
               C4148 -
           (((C16558 + C16559 + C16560) * C141309 +
             (C16172 + C16173 + C16174) * C188) *
                C141221 +
            ((C14206 * C16013 + C14037 * C16549 + C14205 * C5391 +
              C14036 * C5619 + C14204 * C1690 + C14035 * C2040) *
                 C141309 +
             (C14206 * C15862 + C14037 * C16151 + C14205 * C5325 +
              C14036 * C5449 + C14204 * C1601 + C14035 * C1784) *
                 C188) *
                C5863) *
               C141487) *
              C141277 * C2376 +
          ((((C16174 + C16173 + C16172) * C188 +
             (C16560 + C16559 + C16558) * C141309) *
                C5863 +
            ((C14204 * C1599 + C14035 * C1782 + C14205 * C5327 +
              C14036 * C5451 + C14206 * C15863 + C14037 * C16152) *
                 C188 +
             (C14204 * C1688 + C14035 * C2038 + C14205 * C5393 +
              C14036 * C5621 + C14206 * C16014 + C14037 * C16550) *
                 C141309) *
                C141221) *
               C141487 -
           (((C14491 + C14492 + C14493) * C141309 +
             (C14241 + C14242 + C14243) * C188) *
                C141221 +
            ((C14490 + C14489 + C14488) * C141309 +
             (C14234 + C14233 + C14232) * C188) *
                C5863) *
               C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eezx[24] +=
        (-std::pow(Pi, 2.5) *
         (((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C141221 * C115) *
                 C275 +
             (C5869 * C276 + C5863 * C579 + C5871 * C277 + C141221 * C580) *
                 C141320) *
                C5865 +
            ((C7175 + C7176) * C275 + (C7549 + C7550) * C141320) * C5866 +
            C10294 * C5867) *
               C4148 -
           (((C11248 + C11249) * C141320 + (C10922 + C10923) * C275) * C5867 +
            ((C11250 + C11251) * C141320 + (C10926 + C10927) * C275) * C5866 +
            ((C5871 * C1783 + C141221 * C2125 + C5869 * C1784 + C5863 * C2126) *
                 C141320 +
             (C5871 * C1600 + C141221 * C1605 + C5869 * C1601 + C5863 * C1606) *
                 C275) *
                C5865) *
               C141487) *
              C141277 * C2376 +
          ((((C5869 * C1600 + C5863 * C1605 + C5871 * C1599 + C141221 * C1604) *
                 C275 +
             (C5869 * C1783 + C5863 * C2125 + C5871 * C1782 + C141221 * C2124) *
                 C141320) *
                C5865 +
            ((C5869 * C3491 + C5863 * C3495 + C5871 * C3492 + C141221 * C3496) *
                 C275 +
             (C5869 * C3647 + C5863 * C3935 + C5871 * C3648 + C141221 * C3936) *
                 C141320) *
                C5866 +
            ((C5869 * C7886 + C5863 * C7889 + C5871 * C7888 + C141221 * C7891) *
                 C275 +
             (C5869 * C8127 + C5863 * C8582 + C5871 * C8129 + C141221 * C8584) *
                 C141320) *
                C5867) *
               C141487 -
           (((C7556 + C7555) * C141320 + (C7188 + C7187) * C275) * C5867 +
            ((C7554 + C7553) * C141320 + (C7184 + C7183) * C275) * C5866 +
            ((C5871 * C278 + C141221 * C581 + C5869 * C277 + C5863 * C580) *
                 C141320 +
             (C5871 * C110 + C141221 * C116 + C5869 * C109 + C5863 * C115) *
                 C275) *
                C5865) *
               C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
             C91 * C116 + C107 * C111 + C92 * C117) *
                C275 +
            (C101 * C276 + C89 * C579 + C103 * C277 + C90 * C580 + C105 * C278 +
             C91 * C581 + C107 * C279 + C92 * C582) *
                C141320) *
               C141309 * C4148 -
           ((C107 * C1781 + C92 * C2123 + C105 * C1782 + C91 * C2124 +
             C103 * C1783 + C90 * C2125 + C101 * C1784 + C89 * C2126) *
                C141320 +
            (C107 * C1598 + C92 * C1603 + C105 * C1599 + C91 * C1604 +
             C103 * C1600 + C90 * C1605 + C101 * C1601 + C89 * C1606) *
                C275) *
               C141309 * C141487) *
              C141277 * C2376 +
          (((C101 * C1600 + C89 * C1605 + C103 * C1599 + C90 * C1604 +
             C105 * C1598 + C91 * C1603 + C107 * C1602 + C92 * C1607) *
                C275 +
            (C101 * C1783 + C89 * C2125 + C103 * C1782 + C90 * C2124 +
             C105 * C1781 + C91 * C2123 + C107 * C1785 + C92 * C2127) *
                C141320) *
               C141309 * C141487 -
           ((C107 * C280 + C92 * C583 + C105 * C279 + C91 * C582 + C103 * C278 +
             C90 * C581 + C101 * C277 + C89 * C580) *
                C141320 +
            (C107 * C112 + C92 * C118 + C105 * C111 + C91 * C117 + C103 * C110 +
             C90 * C116 + C101 * C109 + C89 * C115) *
                C275) *
               C141309 * C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C141221 * C115) *
                C14204 +
            (C5869 * C276 + C5863 * C579 + C5871 * C277 + C141221 * C580) *
                C14035 +
            (C16308 + C16309) * C14205 + (C16678 + C16679) * C14036 +
            (C16312 + C16313) * C14206 + (C16680 + C16681) * C14037) *
               C141309 * C4148 -
           ((C5871 * C16150 + C141221 * C16658 + C5869 * C16151 +
             C5863 * C16659) *
                C14037 +
            (C5871 * C15861 + C141221 * C15864 + C5869 * C15862 +
             C5863 * C15865) *
                C14206 +
            (C16681 + C16680) * C14036 + (C16313 + C16312) * C14205 +
            (C16679 + C16678) * C14035 + (C16309 + C16308) * C14204) *
               C141309 * C141487) *
              C141277 * C2376 +
          (((C16316 + C16317) * C14204 + (C16682 + C16683) * C14035 +
            (C16320 + C16321) * C14205 + (C16684 + C16685) * C14036 +
            (C5869 * C15861 + C5863 * C15864 + C5871 * C15863 +
             C141221 * C15866) *
                C14206 +
            (C5869 * C16150 + C5863 * C16658 + C5871 * C16152 +
             C141221 * C16660) *
                C14037) *
               C141309 * C141487 -
           ((C16685 + C16684) * C14037 + (C16321 + C16320) * C14206 +
            (C16683 + C16682) * C14036 + (C16317 + C16316) * C14205 +
            (C5871 * C278 + C141221 * C581 + C5869 * C277 + C5863 * C580) *
                C14035 +
            (C5871 * C110 + C141221 * C116 + C5869 * C109 + C5863 * C115) *
                C14204) *
               C141309 * C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eezy[24] +=
        (-std::pow(Pi, 2.5) *
         (((((C5964 * C108 + C5865 * C189 + C5965 * C823 + C5866 * C912 +
              C5966 * C2960 + C5867 * C3026) *
                 C275 +
             (C5964 * C276 + C5865 * C635 + C5965 * C1006 + C5866 * C1419 +
              C5966 * C3084 + C5867 * C3362) *
                 C141320) *
                C5863 +
            ((C5992 + C5993 + C5994) * C275 +
             (C6535 + C6536 + C6537) * C141320) *
                C141221) *
               C4148 -
           (((C8693 + C8694 + C8695) * C141320 +
             (C8027 + C8028 + C8029) * C275) *
                C141221 +
            ((C5966 * C8128 + C5867 * C8684 + C5965 * C3646 + C5866 * C4004 +
              C5964 * C1784 + C5865 * C2197) *
                 C141320 +
             (C5966 * C7887 + C5867 * C8006 + C5965 * C3490 + C5866 * C3572 +
              C5964 * C1601 + C5865 * C1690) *
                 C275) *
                C5863) *
               C141487) *
              C141277 * C2376 +
          ((((C8029 + C8028 + C8027) * C275 +
             (C8695 + C8694 + C8693) * C141320) *
                C5863 +
            ((C5964 * C1599 + C5865 * C1688 + C5965 * C3492 + C5866 * C3574 +
              C5966 * C7888 + C5867 * C8007) *
                 C275 +
             (C5964 * C1782 + C5865 * C2195 + C5965 * C3648 + C5866 * C4006 +
              C5966 * C8129 + C5867 * C8685) *
                 C141320) *
                C141221) *
               C141487 -
           (((C6538 + C6539 + C6540) * C141320 +
             (C6001 + C6002 + C6003) * C275) *
                C141221 +
            ((C6537 + C6536 + C6535) * C141320 +
             (C5994 + C5993 + C5992) * C275) *
                C5863) *
               C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((((C188 * C108 + C141309 * C189) * C275 +
                                 (C188 * C276 + C141309 * C635) * C141320) *
                                    C89 +
                                (C642 + C658) * C90 + C662 * C91 + C663 * C92) *
                                   C4148 -
                               ((C2212 + C2202) * C92 + (C2213 + C2205) * C91 +
                                (C2214 + C2208) * C90 +
                                ((C188 * C1784 + C141309 * C2197) * C141320 +
                                 (C188 * C1601 + C141309 * C1690) * C275) *
                                    C89) *
                                   C141487) *
                                  C141277 * C2376 +
                              (((C2208 + C2214) * C89 + (C2205 + C2213) * C90 +
                                (C2202 + C2212) * C91 +
                                ((C188 * C1602 + C141309 * C1691) * C275 +
                                 (C188 * C1785 + C141309 * C2198) * C141320) *
                                    C92) *
                                   C141487 -
                               ((C661 + C653) * C92 + (C660 + C648) * C91 +
                                (C659 + C645) * C90 + (C658 + C642) * C89) *
                                   C4148) *
                                  C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141309 * C189) * C14204 +
             (C188 * C276 + C141309 * C635) * C14035 + C16043 * C14205 +
             C16798 * C14036 + C16045 * C14206 + C16799 * C14037) *
                C5863 +
            (C14642 + C14643 + C14644 + C14645 + C14646 + C14658) * C141221) *
               C4148 -
           ((C16801 + C16793 + C16794 + C16795 + C16796 + C16797) * C141221 +
            ((C188 * C16151 + C141309 * C16784) * C14037 +
             (C188 * C15862 + C141309 * C16013) * C14206 + C16799 * C14036 +
             C16045 * C14205 + C16798 * C14035 + C16043 * C14204) *
                C5863) *
               C141487) *
              C141277 * C2376 +
          (((C16797 + C16796 + C16795 + C16794 + C16793 + C16801) * C5863 +
            (C1713 * C14204 + C2210 * C14035 + C14130 * C14205 +
             C14657 * C14036 + (C188 * C15863 + C141309 * C16014) * C14206 +
             (C188 * C16152 + C141309 * C16785) * C14037) *
                C141221) *
               C141487 -
           ((C14659 + C14651 + C14652 + C14653 + C14654 + C14655) * C141221 +
            (C14658 + C14646 + C14645 + C14644 + C14643 + C14642) * C5863) *
               C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eezz[24] +=
        (-std::pow(Pi, 2.5) *
         (((((C713 * C108 + C721 + C721 + C141320 * C714) * C5865 +
             C7785 * C5866 + C7786 * C5867) *
                C5863 +
            (C6615 + C6616 + C6629) * C141221) *
               C4148 -
           ((C8811 + C8812 + C8802) * C141221 +
            (C11462 * C5867 + C11463 * C5866 +
             (C713 * C1601 + C2295 + C2295 + C141320 * C2283) * C5865) *
                C5863) *
               C141487) *
              C141277 * C2376 +
          (((C8802 + C8812 + C8811) * C5863 +
            (C2304 * C5865 +
             (C713 * C3492 + C4081 + C4081 + C141320 * C4076) * C5866 +
             (C713 * C7888 + C8804 + C8804 + C141320 * C8795) * C5867) *
                C141221) *
               C141487 -
           ((C6630 + C6621 + C6622) * C141221 +
            (C6629 + C6616 + C6615) * C5863) *
               C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C141320 * C714) * C141309 * C89 +
            C747 * C90 + C748 * C91 + C749 * C92) *
               C4148 -
           (C2306 * C92 + C2307 * C91 + C2308 * C90 +
            (C713 * C1601 + C2295 + C2295 + C141320 * C2283) * C141309 * C89) *
               C141487) *
              C141277 * C2376 +
          ((C2308 * C89 + C2307 * C90 + C2306 * C91 +
            (C713 * C1602 + C2296 + C2296 + C141320 * C2284) * C141309 * C92) *
               C141487 -
           (C750 * C92 + C749 * C91 + C748 * C90 + C747 * C89) * C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C14733 * C108 + C14737 + C14737 + C14035 * C714 + C14734 * C1601 +
             C14738 + C14738 + C14036 * C2283 + C14735 * C5325 + C14739 +
             C14739 + C14037 * C5781) *
                C141309 * C5863 +
            (C14773 + C14774 + C14775) * C141309 * C141221) *
               C4148 -
           ((C16924 + C16925 + C16926) * C141309 * C141221 +
            (C14735 * C15862 + C16912 + C16912 + C14037 * C16900 +
             C14734 * C5325 + C16913 + C16913 + C14036 * C5781 +
             C14733 * C1601 + C16914 + C16914 + C14035 * C2283) *
                C141309 * C5863) *
               C141487) *
              C141277 * C2376 +
          (((C16926 + C16925 + C16924) * C141309 * C5863 +
            (C14733 * C1599 + C16915 + C16915 + C14035 * C2281 +
             C14734 * C5327 + C16916 + C16916 + C14036 * C5783 +
             C14735 * C15863 + C16917 + C16917 + C14037 * C16901) *
                C141309 * C141221) *
               C141487 -
           ((C14776 + C14777 + C14778) * C141309 * C141221 +
            (C14775 + C14774 + C14773) * C141309 * C5863) *
               C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eexx[25] +=
        (-std::pow(Pi, 2.5) *
         ((((C5868 * C108 + C5873 + C5873 + C5863 * C120 + C5870 * C109 +
             C5874 + C5874 + C141221 * C121) *
                C141320 * C5865 +
            (C6774 + C6775) * C141320 * C5866 + C9782 * C5867) *
               C4148 -
           ((C10576 + C10577) * C141320 * C5867 +
            (C10578 + C10579) * C141320 * C5866 +
            (C5870 * C1600 + C7900 + C7900 + C141221 * C1610 + C5868 * C1601 +
             C7901 + C7901 + C5863 * C1611) *
                C141320 * C5865) *
               C141487) *
              C816 +
          (((C10579 + C10578) * C141320 * C5865 +
            (C10577 + C10576) * C141320 * C5866 +
            (C5868 * C10551 + C10566 + C10566 + C5863 * C10555 +
             C5870 * C10552 + C10567 + C10567 + C141221 * C10556) *
                C141320 * C5867) *
               C141487 -
           ((C9787 + C9788) * C141320 * C5867 +
            (C6777 + C6776) * C141320 * C5866 +
            (C6775 + C6774) * C141320 * C5865) *
               C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C100 * C108 + C127 + C127 + C89 * C120 + C102 * C109 + C128 + C128 +
            C90 * C121 + C104 * C110 + C129 + C129 + C91 * C122 + C106 * C111 +
            C130 + C130 + C92 * C123) *
               C141320 * C141309 * C4148 -
           (C106 * C1598 + C1614 + C1614 + C92 * C1608 + C104 * C1599 + C1615 +
            C1615 + C91 * C1609 + C102 * C1600 + C1616 + C1616 + C90 * C1610 +
            C100 * C1601 + C1617 + C1617 + C89 * C1611) *
               C141320 * C141309 * C141487) *
              C816 +
          ((C100 * C3490 + C3503 + C3503 + C89 * C3498 + C102 * C3491 + C3504 +
            C3504 + C90 * C3499 + C104 * C3492 + C3505 + C3505 + C91 * C3500 +
            C106 * C3493 + C3506 + C3506 + C92 * C3501) *
               C141320 * C141309 * C141487 -
           (C106 * C820 + C836 + C836 + C92 * C830 + C104 * C821 + C837 + C837 +
            C91 * C831 + C102 * C822 + C838 + C838 + C90 * C832 + C100 * C823 +
            C839 + C839 + C89 * C833) *
               C141320 * C141309 * C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C5868 * C108 + C5873 + C5873 + C5863 * C120 + C5870 * C109 +
             C5874 + C5874 + C141221 * C121) *
                C14035 +
            (C15907 + C15908) * C14036 + (C15909 + C15910) * C14037) *
               C141309 * C4148 -
           ((C5870 * C15861 + C15879 + C15879 + C141221 * C15867 +
             C5868 * C15862 + C15880 + C15880 + C5863 * C15868) *
                C14037 +
            (C15910 + C15909) * C14036 + (C15908 + C15907) * C14035) *
               C141309 * C141487) *
              C816 +
          (((C10579 + C10578) * C14035 + (C18599 + C18600) * C14036 +
            (C5868 * C18582 + C18593 + C18593 + C5863 * C18586 +
             C5870 * C18583 + C18594 + C18594 + C141221 * C18587) *
                C14037) *
               C141309 * C141487 -
           ((C18600 + C18599) * C14037 + (C10578 + C10579) * C14036 +
            (C6775 + C6774) * C14035) *
               C141309 * C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eexy[25] +=
        (-std::pow(Pi, 2.5) *
         ((((C5964 * C108 + C5865 * C189 + C5965 * C823 + C5866 * C912 +
             C5966 * C2960 + C5867 * C3026) *
                C5869 +
            (C5964 * C114 + C5865 * C195 + C5965 * C828 + C5866 * C917 +
             C5966 * C2964 + C5867 * C3030) *
                C5863 +
            (C5992 + C5993 + C5994) * C5871 +
            (C5995 + C5996 + C5997) * C141221) *
               C141320 * C4148 -
           ((C8024 + C8025 + C8026) * C141221 +
            (C8027 + C8028 + C8029) * C5871 +
            (C5966 * C7890 + C5867 * C8009 + C5965 * C3494 + C5866 * C3576 +
             C5964 * C1606 + C5865 * C1695) *
                C5863 +
            (C5966 * C7887 + C5867 * C8006 + C5965 * C3490 + C5866 * C3572 +
             C5964 * C1601 + C5865 * C1690) *
                C5869) *
               C141320 * C141487) *
              C816 +
          (((C5964 * C3490 + C5865 * C3572 + C5965 * C7887 + C5866 * C8006 +
             C5966 * C10551 + C5867 * C10677) *
                C5869 +
            (C5964 * C3494 + C5865 * C3576 + C5965 * C7890 + C5866 * C8009 +
             C5966 * C10553 + C5867 * C10679) *
                C5863 +
            (C5964 * C3491 + C5865 * C3573 + C5965 * C7886 + C5866 * C8005 +
             C5966 * C10552 + C5867 * C10678) *
                C5871 +
            (C5964 * C3495 + C5865 * C3577 + C5965 * C7889 + C5866 * C8008 +
             C5966 * C10554 + C5867 * C10680) *
                C141221) *
               C141320 * C141487 -
           ((C6898 + C6899 + C6900) * C141221 +
            (C6901 + C6902 + C6903) * C5871 +
            (C5966 * C6732 + C5867 * C6883 + C5965 * C2964 + C5866 * C3030 +
             C5964 * C828 + C5865 * C917) *
                C5863 +
            (C5966 * C6729 + C5867 * C6880 + C5965 * C2960 + C5866 * C3026 +
             C5964 * C823 + C5865 * C912) *
                C5869) *
               C141320 * C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141309 * C189) * C101 +
            (C188 * C114 + C141309 * C195) * C89 + C218 * C103 + C219 * C90 +
            C220 * C105 + C221 * C91 + C222 * C107 + C223 * C92) *
               C141320 * C4148 -
           (C1710 * C92 + C1711 * C107 + C1712 * C91 + C1713 * C105 +
            C1714 * C90 + C1715 * C103 +
            (C188 * C1606 + C141309 * C1695) * C89 +
            (C188 * C1601 + C141309 * C1690) * C101) *
               C141320 * C141487) *
              C816 +
          (((C188 * C3490 + C141309 * C3572) * C101 +
            (C188 * C3494 + C141309 * C3576) * C89 +
            (C188 * C3491 + C141309 * C3573) * C103 +
            (C188 * C3495 + C141309 * C3577) * C90 +
            (C188 * C3492 + C141309 * C3574) * C105 +
            (C188 * C3496 + C141309 * C3578) * C91 +
            (C188 * C3493 + C141309 * C3575) * C107 +
            (C188 * C3497 + C141309 * C3579) * C92) *
               C141320 * C141487 -
           (C932 * C92 + C933 * C107 + C934 * C91 + C935 * C105 + C936 * C90 +
            C937 * C103 + (C188 * C828 + C141309 * C917) * C89 +
            (C188 * C823 + C141309 * C912) * C101) *
               C141320 * C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141309 * C189) * C5869 +
             (C188 * C114 + C141309 * C195) * C5863 + C218 * C5871 +
             C219 * C141221) *
                C14035 +
            (C16049 + C16050 + C16023 + C16024) * C14036 +
            (C16051 + C16052 + C16029 + C16030) * C14037) *
               C4148 -
           ((C16047 * C141221 + C16048 * C5871 +
             (C188 * C15865 + C141309 * C16016) * C5863 +
             (C188 * C15862 + C141309 * C16013) * C5869) *
                C14037 +
            (C16030 + C16029 + C16052 + C16051) * C14036 +
            (C16024 + C16023 + C16050 + C16049) * C14035) *
               C141487) *
              C816 +
          (((C18719 + C18720 + C18707 + C18708) * C14035 +
            (C18721 + C18722 + C18713 + C18714) * C14036 +
            ((C188 * C18582 + C141309 * C18698) * C5869 +
             (C188 * C18584 + C141309 * C18700) * C5863 +
             (C188 * C18583 + C141309 * C18699) * C5871 +
             (C188 * C18585 + C141309 * C18701) * C141221) *
                C14037) *
               C141487 -
           ((C18714 + C18713 + C18722 + C18721) * C14037 +
            (C18708 + C18707 + C18720 + C18719) * C14036 +
            (C936 * C141221 + C937 * C5871 +
             (C188 * C828 + C141309 * C917) * C5863 +
             (C188 * C823 + C141309 * C912) * C5869) *
                C14035) *
               C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eexz[25] +=
        (-std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141320 * C276) * C5869 +
             (C275 * C114 + C141320 * C282) * C5863 + C305 * C5871 +
             C306 * C141221) *
                C5865 +
            (C7038 + C7039 + C7012 + C7013) * C5866 + C9955 * C5867) *
               C4148 -
           ((C10784 + C10785 + C10800 + C10801) * C5867 +
            (C10790 + C10791 + C10802 + C10803) * C5866 +
            (C1808 * C141221 + C1809 * C5871 +
             (C275 * C1606 + C141320 * C1789) * C5863 +
             (C275 * C1601 + C141320 * C1784) * C5869) *
                C5865) *
               C141487) *
              C816 +
          (((C10803 + C10802 + C10791 + C10790) * C5865 +
            (C10801 + C10800 + C10785 + C10784) * C5866 +
            ((C275 * C10551 + C141320 * C10779) * C5869 +
             (C275 * C10553 + C141320 * C10781) * C5863 +
             (C275 * C10552 + C141320 * C10780) * C5871 +
             (C275 * C10554 + C141320 * C10782) * C141221) *
                C5867) *
               C141487 -
           ((C9946 + C9947 + C9956 + C9957) * C5867 +
            (C7019 + C7018 + C7041 + C7040) * C5866 +
            (C7013 + C7012 + C7039 + C7038) * C5865) *
               C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141320 * C276) * C101 +
            (C275 * C114 + C141320 * C282) * C89 + C305 * C103 + C306 * C90 +
            C307 * C105 + C308 * C91 + C309 * C107 + C310 * C92) *
               C141309 * C4148 -
           (C1804 * C92 + C1805 * C107 + C1806 * C91 + C1807 * C105 +
            C1808 * C90 + C1809 * C103 +
            (C275 * C1606 + C141320 * C1789) * C89 +
            (C275 * C1601 + C141320 * C1784) * C101) *
               C141309 * C141487) *
              C816 +
          (((C275 * C3490 + C141320 * C3646) * C101 +
            (C275 * C3494 + C141320 * C3650) * C89 +
            (C275 * C3491 + C141320 * C3647) * C103 +
            (C275 * C3495 + C141320 * C3651) * C90 +
            (C275 * C3492 + C141320 * C3648) * C105 +
            (C275 * C3496 + C141320 * C3652) * C91 +
            (C275 * C3493 + C141320 * C3649) * C107 +
            (C275 * C3497 + C141320 * C3653) * C92) *
               C141309 * C141487 -
           (C1026 * C92 + C1027 * C107 + C1028 * C91 + C1029 * C105 +
            C1030 * C90 + C1031 * C103 + (C275 * C828 + C141320 * C1011) * C89 +
            (C275 * C823 + C141320 * C1006) * C101) *
               C141309 * C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C14204 * C108 + C14035 * C276 + C14205 * C1601 + C14036 * C1784 +
             C14206 * C5325 + C14037 * C5449) *
                C5869 +
            (C14204 * C114 + C14035 * C282 + C14205 * C1606 + C14036 * C1789 +
             C14206 * C5329 + C14037 * C5453) *
                C5863 +
            (C14232 + C14233 + C14234) * C5871 +
            (C14235 + C14236 + C14237) * C141221) *
               C141309 * C4148 -
           ((C16169 + C16170 + C16171) * C141221 +
            (C16172 + C16173 + C16174) * C5871 +
            (C14206 * C15865 + C14037 * C16154 + C14205 * C5329 +
             C14036 * C5453 + C14204 * C1606 + C14035 * C1789) *
                C5863 +
            (C14206 * C15862 + C14037 * C16151 + C14205 * C5325 +
             C14036 * C5449 + C14204 * C1601 + C14035 * C1784) *
                C5869) *
               C141309 * C141487) *
              C816 +
          (((C14204 * C3490 + C14035 * C3646 + C14205 * C13301 +
             C14036 * C13475 + C14206 * C18582 + C14037 * C18820) *
                C5869 +
            (C14204 * C3494 + C14035 * C3650 + C14205 * C13305 +
             C14036 * C13479 + C14206 * C18584 + C14037 * C18822) *
                C5863 +
            (C14204 * C3491 + C14035 * C3647 + C14205 * C13302 +
             C14036 * C13476 + C14206 * C18583 + C14037 * C18821) *
                C5871 +
            (C14204 * C3495 + C14035 * C3651 + C14205 * C13306 +
             C14036 * C13480 + C14206 * C18585 + C14037 * C18823) *
                C141221) *
               C141309 * C141487 -
           ((C15106 + C15107 + C15108) * C141221 +
            (C15109 + C15110 + C15111) * C5871 +
            (C14206 * C13305 + C14037 * C13479 + C14205 * C3494 +
             C14036 * C3650 + C14204 * C828 + C14035 * C1011) *
                C5863 +
            (C14206 * C13301 + C14037 * C13475 + C14205 * C3490 +
             C14036 * C3646 + C14204 * C823 + C14035 * C1006) *
                C5869) *
               C141309 * C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eeyx[25] +=
        (-std::pow(Pi, 2.5) *
         ((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C141221 * C115) *
                C5964 +
            (C5869 * C189 + C5863 * C362 + C5871 * C190 + C141221 * C363) *
                C5865 +
            (C7175 + C7176) * C5965 + (C7177 + C7178) * C5866 + C10034 * C5966 +
            C10035 * C5867) *
               C141320 * C4148 -
           ((C10920 + C10921) * C5867 + (C10922 + C10923) * C5966 +
            (C10924 + C10925) * C5866 + (C10926 + C10927) * C5965 +
            (C5871 * C1689 + C141221 * C1877 + C5869 * C1690 + C5863 * C1878) *
                C5865 +
            (C5871 * C1600 + C141221 * C1605 + C5869 * C1601 + C5863 * C1606) *
                C5964) *
               C141320 * C141487) *
              C816 +
          (((C10927 + C10926) * C5964 + (C10925 + C10924) * C5865 +
            (C10923 + C10922) * C5965 + (C10921 + C10920) * C5866 +
            (C5869 * C10551 + C5863 * C10553 + C5871 * C10552 +
             C141221 * C10554) *
                C5966 +
            (C5869 * C10677 + C5863 * C10901 + C5871 * C10678 +
             C141221 * C10902) *
                C5867) *
               C141320 * C141487 -
           ((C10044 + C10045) * C5867 + (C10046 + C10047) * C5966 +
            (C7182 + C7181) * C5866 + (C7180 + C7179) * C5965 +
            (C7178 + C7177) * C5865 + (C7176 + C7175) * C5964) *
               C141320 * C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
             C91 * C116 + C107 * C111 + C92 * C117) *
                C188 +
            (C101 * C189 + C89 * C362 + C103 * C190 + C90 * C363 + C105 * C191 +
             C91 * C364 + C107 * C192 + C92 * C365) *
                C141309) *
               C141320 * C4148 -
           ((C107 * C1687 + C92 * C1875 + C105 * C1688 + C91 * C1876 +
             C103 * C1689 + C90 * C1877 + C101 * C1690 + C89 * C1878) *
                C141309 +
            (C107 * C1598 + C92 * C1603 + C105 * C1599 + C91 * C1604 +
             C103 * C1600 + C90 * C1605 + C101 * C1601 + C89 * C1606) *
                C188) *
               C141320 * C141487) *
              C816 +
          (((C101 * C3490 + C89 * C3494 + C103 * C3491 + C90 * C3495 +
             C105 * C3492 + C91 * C3496 + C107 * C3493 + C92 * C3497) *
                C188 +
            (C101 * C3572 + C89 * C3720 + C103 * C3573 + C90 * C3721 +
             C105 * C3574 + C91 * C3722 + C107 * C3575 + C92 * C3723) *
                C141309) *
               C141320 * C141487 -
           ((C107 * C909 + C92 * C1097 + C105 * C910 + C91 * C1098 +
             C103 * C911 + C90 * C1099 + C101 * C912 + C89 * C1100) *
                C141309 +
            (C107 * C820 + C92 * C825 + C105 * C821 + C91 * C826 + C103 * C822 +
             C90 * C827 + C101 * C823 + C89 * C828) *
                C188) *
               C141320 * C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C141221 * C115) *
                 C188 +
             (C5869 * C189 + C5863 * C362 + C5871 * C190 + C141221 * C363) *
                 C141309) *
                C14035 +
            ((C16308 + C16309) * C188 + (C16310 + C16311) * C141309) * C14036 +
            ((C16312 + C16313) * C188 + (C16314 + C16315) * C141309) * C14037) *
               C4148 -
           (((C5871 * C16012 + C141221 * C16272 + C5869 * C16013 +
              C5863 * C16273) *
                 C141309 +
             (C5871 * C15861 + C141221 * C15864 + C5869 * C15862 +
              C5863 * C15865) *
                 C188) *
                C14037 +
            ((C16315 + C16314) * C141309 + (C16313 + C16312) * C188) * C14036 +
            ((C16311 + C16310) * C141309 + (C16309 + C16308) * C188) * C14035) *
               C141487) *
              C816 +
          ((((C10927 + C10926) * C188 + (C10925 + C10924) * C141309) * C14035 +
            ((C18933 + C18934) * C188 + (C18935 + C18936) * C141309) * C14036 +
            ((C5869 * C18582 + C5863 * C18584 + C5871 * C18583 +
              C141221 * C18585) *
                 C188 +
             (C5869 * C18698 + C5863 * C18922 + C5871 * C18699 +
              C141221 * C18923) *
                 C141309) *
                C14037) *
               C141487 -
           (((C18936 + C18935) * C141309 + (C18934 + C18933) * C188) * C14037 +
            ((C10924 + C10925) * C141309 + (C10926 + C10927) * C188) * C14036 +
            ((C7178 + C7177) * C141309 + (C7176 + C7175) * C188) * C14035) *
               C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eeyy[25] +=
        (-std::pow(Pi, 2.5) *
         ((((C6237 * C108 + C6241 + C6241 + C5865 * C419 + C6238 * C823 +
             C6242 + C6242 + C5866 * C1171 + C6239 * C2960 + C6243 + C6243 +
             C5867 * C3196) *
                C5863 +
            (C6277 + C6278 + C6279) * C141221) *
               C141320 * C4148 -
           ((C8369 + C8370 + C8371) * C141221 +
            (C6239 * C7887 + C8357 + C8357 + C5867 * C8345 + C6238 * C3490 +
             C8358 + C8358 + C5866 * C3790 + C6237 * C1601 + C8359 + C8359 +
             C5865 * C1949) *
                C5863) *
               C141320 * C141487) *
              C816 +
          (((C6237 * C3490 + C11028 + C11028 + C5865 * C3790 + C6238 * C7887 +
             C11029 + C11029 + C5866 * C8345 + C6239 * C10551 + C11030 +
             C11030 + C5867 * C11025) *
                C5863 +
            (C6237 * C3491 + C11031 + C11031 + C5865 * C3791 + C6238 * C7886 +
             C11032 + C11032 + C5866 * C8344 + C6239 * C10552 + C11033 +
             C11033 + C5867 * C11026) *
                C141221) *
               C141320 * C141487 -
           ((C7313 + C7314 + C7315) * C141221 +
            (C6239 * C6729 + C7301 + C7301 + C5867 * C7289 + C6238 * C2960 +
             C7302 + C7302 + C5866 * C3196 + C6237 * C823 + C7303 + C7303 +
             C5865 * C1171) *
                C5863) *
               C141320 * C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C418 * C108 + C426 + C426 + C141309 * C419) * C89 + C448 * C90 +
            C449 * C91 + C450 * C92) *
               C141320 * C4148 -
           (C1969 * C92 + C1970 * C91 + C1971 * C90 +
            (C418 * C1601 + C1961 + C1961 + C141309 * C1949) * C89) *
               C141320 * C141487) *
              C816 +
          (((C418 * C3490 + C3795 + C3795 + C141309 * C3790) * C89 +
            (C418 * C3491 + C3796 + C3796 + C141309 * C3791) * C90 +
            (C418 * C3492 + C3797 + C3797 + C141309 * C3792) * C91 +
            (C418 * C3493 + C3798 + C3798 + C141309 * C3793) * C92) *
               C141320 * C141487 -
           (C1191 * C92 + C1192 * C91 + C1193 * C90 +
            (C418 * C823 + C1183 + C1183 + C141309 * C1171) * C89) *
               C141320 * C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C418 * C108 + C426 + C426 + C141309 * C419) * C5863 +
             C448 * C141221) *
                C14035 +
            (C16449 + C16427) * C14036 + (C16450 + C16430) * C14037) *
               C4148 -
           ((C16448 * C141221 +
             (C418 * C15862 + C16434 + C16434 + C141309 * C16422) * C5863) *
                C14037 +
            (C16430 + C16450) * C14036 + (C16427 + C16449) * C14035) *
               C141487) *
              C816 +
          (((C19051 + C19039) * C14035 + (C19052 + C19042) * C14036 +
            ((C418 * C18582 + C19043 + C19043 + C141309 * C19034) * C5863 +
             (C418 * C18583 + C19044 + C19044 + C141309 * C19035) * C141221) *
                C14037) *
               C141487 -
           ((C19042 + C19052) * C14037 + (C19039 + C19051) * C14036 +
            (C1193 * C141221 +
             (C418 * C823 + C1183 + C1183 + C141309 * C1171) * C5863) *
                C14035) *
               C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eeyz[25] +=
        (-std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141320 * C276) * C5964 +
             (C275 * C189 + C141320 * C501) * C5865 + C7032 * C5965 +
             C7428 * C5866 + C7034 * C5966 + C7429 * C5867) *
                C5863 +
            (C6357 + C6358 + C6359 + C6360 + C6361 + C6373) * C141221) *
               C4148 -
           ((C8483 + C8475 + C8484 + C8478 + C8479 + C8480) * C141221 +
            (C11138 * C5867 + C10797 * C5966 + C11139 * C5866 + C10799 * C5965 +
             (C275 * C1690 + C141320 * C2040) * C5865 +
             (C275 * C1601 + C141320 * C1784) * C5964) *
                C5863) *
               C141487) *
              C816 +
          (((C10799 * C5964 + C11139 * C5865 + C10797 * C5965 + C11138 * C5866 +
             (C275 * C10551 + C141320 * C10779) * C5966 +
             (C275 * C10677 + C141320 * C11131) * C5867) *
                C5863 +
            (C8145 * C5964 + C8482 * C5865 + C8143 * C5965 + C8481 * C5866 +
             (C275 * C10552 + C141320 * C10780) * C5966 +
             (C275 * C10678 + C141320 * C11132) * C5867) *
                C141221) *
               C141487 -
           ((C7431 + C7423 + C7424 + C7425 + C7426 + C7427) * C141221 +
            (C10208 * C5867 + C9954 * C5966 + C7429 * C5866 + C7034 * C5965 +
             C7428 * C5865 + C7032 * C5964) *
                C5863) *
               C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141320 * C276) * C188 +
             (C275 * C189 + C141320 * C501) * C141309) *
                C89 +
            (C508 + C524) * C90 + C528 * C91 + C529 * C92) *
               C4148 -
           ((C2055 + C2045) * C92 + (C2056 + C2048) * C91 +
            (C2057 + C2051) * C90 +
            ((C275 * C1690 + C141320 * C2040) * C141309 +
             (C275 * C1601 + C141320 * C1784) * C188) *
                C89) *
               C141487) *
              C816 +
          ((((C275 * C3490 + C141320 * C3646) * C188 +
             (C275 * C3572 + C141320 * C3864) * C141309) *
                C89 +
            ((C275 * C3491 + C141320 * C3647) * C188 +
             (C275 * C3573 + C141320 * C3865) * C141309) *
                C90 +
            ((C275 * C3492 + C141320 * C3648) * C188 +
             (C275 * C3574 + C141320 * C3866) * C141309) *
                C91 +
            ((C275 * C3493 + C141320 * C3649) * C188 +
             (C275 * C3575 + C141320 * C3867) * C141309) *
                C92) *
               C141487 -
           ((C1277 + C1267) * C92 + (C1278 + C1270) * C91 +
            (C1279 + C1273) * C90 +
            ((C275 * C912 + C141320 * C1262) * C141309 +
             (C275 * C823 + C141320 * C1006) * C188) *
                C89) *
               C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C14204 * C108 + C14035 * C276 + C14205 * C1601 + C14036 * C1784 +
              C14206 * C5325 + C14037 * C5449) *
                 C188 +
             (C14204 * C189 + C14035 * C501 + C14205 * C1690 + C14036 * C2040 +
              C14206 * C5391 + C14037 * C5619) *
                 C141309) *
                C5863 +
            ((C14232 + C14233 + C14234) * C188 +
             (C14488 + C14489 + C14490) * C141309) *
                C141221) *
               C4148 -
           (((C16558 + C16559 + C16560) * C141309 +
             (C16172 + C16173 + C16174) * C188) *
                C141221 +
            ((C14206 * C16013 + C14037 * C16549 + C14205 * C5391 +
              C14036 * C5619 + C14204 * C1690 + C14035 * C2040) *
                 C141309 +
             (C14206 * C15862 + C14037 * C16151 + C14205 * C5325 +
              C14036 * C5449 + C14204 * C1601 + C14035 * C1784) *
                 C188) *
                C5863) *
               C141487) *
              C816 +
          ((((C14204 * C3490 + C14035 * C3646 + C14205 * C13301 +
              C14036 * C13475 + C14206 * C18582 + C14037 * C18820) *
                 C188 +
             (C14204 * C3572 + C14035 * C3864 + C14205 * C13393 +
              C14036 * C13719 + C14206 * C18698 + C14037 * C19150) *
                 C141309) *
                C5863 +
            ((C14204 * C3491 + C14035 * C3647 + C14205 * C13302 +
              C14036 * C13476 + C14206 * C18583 + C14037 * C18821) *
                 C188 +
             (C14204 * C3573 + C14035 * C3865 + C14205 * C13395 +
              C14036 * C13721 + C14206 * C18699 + C14037 * C19151) *
                 C141309) *
                C141221) *
               C141487 -
           (((C15428 + C15429 + C15430) * C141309 +
             (C15109 + C15110 + C15111) * C188) *
                C141221 +
            ((C14206 * C13393 + C14037 * C13719 + C14205 * C3572 +
              C14036 * C3864 + C14204 * C912 + C14035 * C1262) *
                 C141309 +
             (C14206 * C13301 + C14037 * C13475 + C14205 * C3490 +
              C14036 * C3646 + C14204 * C823 + C14035 * C1006) *
                 C188) *
                C5863) *
               C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eezx[25] +=
        (-std::pow(Pi, 2.5) *
         (((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C141221 * C115) *
                 C275 +
             (C5869 * C276 + C5863 * C579 + C5871 * C277 + C141221 * C580) *
                 C141320) *
                C5865 +
            ((C7175 + C7176) * C275 + (C7549 + C7550) * C141320) * C5866 +
            C10294 * C5867) *
               C4148 -
           (((C11248 + C11249) * C141320 + (C10922 + C10923) * C275) * C5867 +
            ((C11250 + C11251) * C141320 + (C10926 + C10927) * C275) * C5866 +
            ((C5871 * C1783 + C141221 * C2125 + C5869 * C1784 + C5863 * C2126) *
                 C141320 +
             (C5871 * C1600 + C141221 * C1605 + C5869 * C1601 + C5863 * C1606) *
                 C275) *
                C5865) *
               C141487) *
              C816 +
          ((((C10927 + C10926) * C275 + (C11251 + C11250) * C141320) * C5865 +
            ((C10923 + C10922) * C275 + (C11249 + C11248) * C141320) * C5866 +
            ((C5869 * C10551 + C5863 * C10553 + C5871 * C10552 +
              C141221 * C10554) *
                 C275 +
             (C5869 * C10779 + C5863 * C11237 + C5871 * C10780 +
              C141221 * C11238) *
                 C141320) *
                C5867) *
               C141487 -
           (((C10292 + C10293) * C141320 + (C10046 + C10047) * C275) * C5867 +
            ((C7552 + C7551) * C141320 + (C7180 + C7179) * C275) * C5866 +
            ((C7550 + C7549) * C141320 + (C7176 + C7175) * C275) * C5865) *
               C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
             C91 * C116 + C107 * C111 + C92 * C117) *
                C275 +
            (C101 * C276 + C89 * C579 + C103 * C277 + C90 * C580 + C105 * C278 +
             C91 * C581 + C107 * C279 + C92 * C582) *
                C141320) *
               C141309 * C4148 -
           ((C107 * C1781 + C92 * C2123 + C105 * C1782 + C91 * C2124 +
             C103 * C1783 + C90 * C2125 + C101 * C1784 + C89 * C2126) *
                C141320 +
            (C107 * C1598 + C92 * C1603 + C105 * C1599 + C91 * C1604 +
             C103 * C1600 + C90 * C1605 + C101 * C1601 + C89 * C1606) *
                C275) *
               C141309 * C141487) *
              C816 +
          (((C101 * C3490 + C89 * C3494 + C103 * C3491 + C90 * C3495 +
             C105 * C3492 + C91 * C3496 + C107 * C3493 + C92 * C3497) *
                C275 +
            (C101 * C3646 + C89 * C3934 + C103 * C3647 + C90 * C3935 +
             C105 * C3648 + C91 * C3936 + C107 * C3649 + C92 * C3937) *
                C141320) *
               C141309 * C141487 -
           ((C107 * C1003 + C92 * C1345 + C105 * C1004 + C91 * C1346 +
             C103 * C1005 + C90 * C1347 + C101 * C1006 + C89 * C1348) *
                C141320 +
            (C107 * C820 + C92 * C825 + C105 * C821 + C91 * C826 + C103 * C822 +
             C90 * C827 + C101 * C823 + C89 * C828) *
                C275) *
               C141309 * C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C141221 * C115) *
                C14204 +
            (C5869 * C276 + C5863 * C579 + C5871 * C277 + C141221 * C580) *
                C14035 +
            (C16308 + C16309) * C14205 + (C16678 + C16679) * C14036 +
            (C16312 + C16313) * C14206 + (C16680 + C16681) * C14037) *
               C141309 * C4148 -
           ((C5871 * C16150 + C141221 * C16658 + C5869 * C16151 +
             C5863 * C16659) *
                C14037 +
            (C5871 * C15861 + C141221 * C15864 + C5869 * C15862 +
             C5863 * C15865) *
                C14206 +
            (C16681 + C16680) * C14036 + (C16313 + C16312) * C14205 +
            (C16679 + C16678) * C14035 + (C16309 + C16308) * C14204) *
               C141309 * C141487) *
              C816 +
          (((C10927 + C10926) * C14204 + (C11251 + C11250) * C14035 +
            (C18933 + C18934) * C14205 + (C19257 + C19258) * C14036 +
            (C5869 * C18582 + C5863 * C18584 + C5871 * C18583 +
             C141221 * C18585) *
                C14206 +
            (C5869 * C18820 + C5863 * C19250 + C5871 * C18821 +
             C141221 * C19251) *
                C14037) *
               C141309 * C141487 -
           ((C19258 + C19257) * C14037 + (C18934 + C18933) * C14206 +
            (C11250 + C11251) * C14036 + (C10926 + C10927) * C14205 +
            (C7550 + C7549) * C14035 + (C7176 + C7175) * C14204) *
               C141309 * C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eezy[25] +=
        (-std::pow(Pi, 2.5) *
         (((((C5964 * C108 + C5865 * C189 + C5965 * C823 + C5866 * C912 +
              C5966 * C2960 + C5867 * C3026) *
                 C275 +
             (C5964 * C276 + C5865 * C635 + C5965 * C1006 + C5866 * C1419 +
              C5966 * C3084 + C5867 * C3362) *
                 C141320) *
                C5863 +
            ((C5992 + C5993 + C5994) * C275 +
             (C6535 + C6536 + C6537) * C141320) *
                C141221) *
               C4148 -
           (((C8693 + C8694 + C8695) * C141320 +
             (C8027 + C8028 + C8029) * C275) *
                C141221 +
            ((C5966 * C8128 + C5867 * C8684 + C5965 * C3646 + C5866 * C4004 +
              C5964 * C1784 + C5865 * C2197) *
                 C141320 +
             (C5966 * C7887 + C5867 * C8006 + C5965 * C3490 + C5866 * C3572 +
              C5964 * C1601 + C5865 * C1690) *
                 C275) *
                C5863) *
               C141487) *
              C816 +
          ((((C5964 * C3490 + C5865 * C3572 + C5965 * C7887 + C5866 * C8006 +
              C5966 * C10551 + C5867 * C10677) *
                 C275 +
             (C5964 * C3646 + C5865 * C4004 + C5965 * C8128 + C5866 * C8684 +
              C5966 * C10779 + C5867 * C11349) *
                 C141320) *
                C5863 +
            ((C5964 * C3491 + C5865 * C3573 + C5965 * C7886 + C5866 * C8005 +
              C5966 * C10552 + C5867 * C10678) *
                 C275 +
             (C5964 * C3647 + C5865 * C4005 + C5965 * C8127 + C5866 * C8683 +
              C5966 * C10780 + C5867 * C11350) *
                 C141320) *
                C141221) *
               C141487 -
           (((C7664 + C7665 + C7666) * C141320 +
             (C6901 + C6902 + C6903) * C275) *
                C141221 +
            ((C5966 * C7002 + C5867 * C7655 + C5965 * C3084 + C5866 * C3362 +
              C5964 * C1006 + C5865 * C1419) *
                 C141320 +
             (C5966 * C6729 + C5867 * C6880 + C5965 * C2960 + C5866 * C3026 +
              C5964 * C823 + C5865 * C912) *
                 C275) *
                C5863) *
               C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141309 * C189) * C275 +
             (C188 * C276 + C141309 * C635) * C141320) *
                C89 +
            (C642 + C658) * C90 + C662 * C91 + C663 * C92) *
               C4148 -
           ((C2212 + C2202) * C92 + (C2213 + C2205) * C91 +
            (C2214 + C2208) * C90 +
            ((C188 * C1784 + C141309 * C2197) * C141320 +
             (C188 * C1601 + C141309 * C1690) * C275) *
                C89) *
               C141487) *
              C816 +
          ((((C188 * C3490 + C141309 * C3572) * C275 +
             (C188 * C3646 + C141309 * C4004) * C141320) *
                C89 +
            ((C188 * C3491 + C141309 * C3573) * C275 +
             (C188 * C3647 + C141309 * C4005) * C141320) *
                C90 +
            ((C188 * C3492 + C141309 * C3574) * C275 +
             (C188 * C3648 + C141309 * C4006) * C141320) *
                C91 +
            ((C188 * C3493 + C141309 * C3575) * C275 +
             (C188 * C3649 + C141309 * C4007) * C141320) *
                C92) *
               C141487 -
           ((C1434 + C1424) * C92 + (C1435 + C1427) * C91 +
            (C1436 + C1430) * C90 +
            ((C188 * C1006 + C141309 * C1419) * C141320 +
             (C188 * C823 + C141309 * C912) * C275) *
                C89) *
               C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141309 * C189) * C14204 +
             (C188 * C276 + C141309 * C635) * C14035 + C16043 * C14205 +
             C16798 * C14036 + C16045 * C14206 + C16799 * C14037) *
                C5863 +
            (C14642 + C14643 + C14644 + C14645 + C14646 + C14658) * C141221) *
               C4148 -
           ((C16801 + C16793 + C16794 + C16795 + C16796 + C16797) * C141221 +
            ((C188 * C16151 + C141309 * C16784) * C14037 +
             (C188 * C15862 + C141309 * C16013) * C14206 + C16799 * C14036 +
             C16045 * C14205 + C16798 * C14035 + C16043 * C14204) *
                C5863) *
               C141487) *
              C816 +
          (((C18715 * C14204 + C19363 * C14035 + C18717 * C14205 +
             C19364 * C14036 + (C188 * C18582 + C141309 * C18698) * C14206 +
             (C188 * C18820 + C141309 * C19356) * C14037) *
                C5863 +
            (C14993 * C14204 + C15638 * C14035 + C14991 * C14205 +
             C15637 * C14036 + (C188 * C18583 + C141309 * C18699) * C14206 +
             (C188 * C18821 + C141309 * C19357) * C14037) *
                C141221) *
               C141487 -
           ((C15639 + C15631 + C15640 + C15634 + C15635 + C15636) * C141221 +
            (C19364 * C14037 + C18717 * C14206 + C19363 * C14036 +
             C18715 * C14205 + (C188 * C1006 + C141309 * C1419) * C14035 +
             (C188 * C823 + C141309 * C912) * C14204) *
                C5863) *
               C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eezz[25] +=
        (-std::pow(Pi, 2.5) *
         (((((C713 * C108 + C721 + C721 + C141320 * C714) * C5865 +
             C7785 * C5866 + C7786 * C5867) *
                C5863 +
            (C6615 + C6616 + C6629) * C141221) *
               C4148 -
           ((C8811 + C8812 + C8802) * C141221 +
            (C11462 * C5867 + C11463 * C5866 +
             (C713 * C1601 + C2295 + C2295 + C141320 * C2283) * C5865) *
                C5863) *
               C141487) *
              C816 +
          (((C11463 * C5865 + C11462 * C5866 +
             (C713 * C10551 + C11456 + C11456 + C141320 * C11449) * C5867) *
                C5863 +
            (C8810 * C5865 + C8809 * C5866 +
             (C713 * C10552 + C11457 + C11457 + C141320 * C11450) * C5867) *
                C141221) *
               C141487 -
           ((C7788 + C7775 + C7776) * C141221 +
            (C10453 * C5867 + C7786 * C5866 + C7785 * C5865) * C5863) *
               C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C141320 * C714) * C141309 * C89 +
            C747 * C90 + C748 * C91 + C749 * C92) *
               C4148 -
           (C2306 * C92 + C2307 * C91 + C2308 * C90 +
            (C713 * C1601 + C2295 + C2295 + C141320 * C2283) * C141309 * C89) *
               C141487) *
              C816 +
          (((C713 * C3490 + C4079 + C4079 + C141320 * C4074) * C141309 * C89 +
            (C713 * C3491 + C4080 + C4080 + C141320 * C4075) * C141309 * C90 +
            (C713 * C3492 + C4081 + C4081 + C141320 * C4076) * C141309 * C91 +
            (C713 * C3493 + C4082 + C4082 + C141320 * C4077) * C141309 * C92) *
               C141487 -
           (C1528 * C92 + C1529 * C91 + C1530 * C90 +
            (C713 * C823 + C1517 + C1517 + C141320 * C1505) * C141309 * C89) *
               C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C14733 * C108 + C14737 + C14737 + C14035 * C714 + C14734 * C1601 +
             C14738 + C14738 + C14036 * C2283 + C14735 * C5325 + C14739 +
             C14739 + C14037 * C5781) *
                C141309 * C5863 +
            (C14773 + C14774 + C14775) * C141309 * C141221) *
               C4148 -
           ((C16924 + C16925 + C16926) * C141309 * C141221 +
            (C14735 * C15862 + C16912 + C16912 + C14037 * C16900 +
             C14734 * C5325 + C16913 + C16913 + C14036 * C5781 +
             C14733 * C1601 + C16914 + C16914 + C14035 * C2283) *
                C141309 * C5863) *
               C141487) *
              C816 +
          (((C14733 * C3490 + C19465 + C19465 + C14035 * C4074 +
             C14734 * C13301 + C19466 + C19466 + C14036 * C13953 +
             C14735 * C18582 + C19467 + C19467 + C14037 * C19462) *
                C141309 * C5863 +
            (C14733 * C3491 + C19468 + C19468 + C14035 * C4075 +
             C14734 * C13302 + C19469 + C19469 + C14036 * C13955 +
             C14735 * C18583 + C19470 + C19470 + C14037 * C19463) *
                C141309 * C141221) *
               C141487 -
           ((C15761 + C15762 + C15763) * C141309 * C141221 +
            (C14735 * C13301 + C15749 + C15749 + C14037 * C13953 +
             C14734 * C3490 + C15750 + C15750 + C14036 * C4074 + C14733 * C823 +
             C15751 + C15751 + C14035 * C1505) *
                C141309 * C5863) *
               C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eexx[26] +=
        (-std::pow(Pi, 2.5) *
         (((C5868 * C108 + C5873 + C5873 + C5863 * C120 + C5870 * C109 + C5874 +
            C5874 + C141221 * C121) *
               C141320 * C5865 +
           (C6774 + C6775) * C141320 * C5866 + C9782 * C5867) *
              C5322 -
          ((C10576 + C10577) * C141320 * C5867 +
           (C10578 + C10579) * C141320 * C5866 +
           (C5870 * C1600 + C7900 + C7900 + C141221 * C1610 + C5868 * C1601 +
            C7901 + C7901 + C5863 * C1611) *
               C141320 * C5865) *
              C5323 +
          ((C5868 * C5325 + C13314 + C13314 + C5863 * C5333 + C5870 * C5326 +
            C13315 + C13315 + C141221 * C5334) *
               C141320 * C5865 +
           (C5868 * C13301 + C13316 + C13316 + C5863 * C13309 + C5870 * C13302 +
            C13317 + C13317 + C141221 * C13310) *
               C141320 * C5866 +
           (C5868 * C13303 + C13318 + C13318 + C5863 * C13311 + C5870 * C13304 +
            C13319 + C13319 + C141221 * C13312) *
               C141320 * C5867) *
              C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((C100 * C108 + C127 + C127 + C89 * C120 + C102 * C109 + C128 + C128 +
           C90 * C121 + C104 * C110 + C129 + C129 + C91 * C122 + C106 * C111 +
           C130 + C130 + C92 * C123) *
              C141320 * C141309 * C5322 -
          (C106 * C1598 + C1614 + C1614 + C92 * C1608 + C104 * C1599 + C1615 +
           C1615 + C91 * C1609 + C102 * C1600 + C1616 + C1616 + C90 * C1610 +
           C100 * C1601 + C1617 + C1617 + C89 * C1611) *
              C141320 * C141309 * C5323 +
          (C100 * C5325 + C5338 + C5338 + C89 * C5333 + C102 * C5326 + C5339 +
           C5339 + C90 * C5334 + C104 * C5327 + C5340 + C5340 + C91 * C5335 +
           C106 * C5328 + C5341 + C5341 + C92 * C5336) *
              C141320 * C141309 * C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C5868 * C108 + C5873 + C5873 + C5863 * C120 + C5870 * C109 + C5874 +
            C5874 + C141221 * C121) *
               C14035 +
           (C15907 + C15908) * C14036 + C21315 * C14037) *
              C141309 * C5322 -
          ((C21326 + C21327) * C14037 + (C15910 + C15909) * C14036 +
           (C15908 + C15907) * C14035) *
              C141309 * C5323 +
          (C21315 * C14035 + (C21327 + C21326) * C14036 +
           (C5868 * C21308 + C21320 + C21320 + C5863 * C21312 + C5870 * C21309 +
            C21321 + C21321 + C141221 * C21313) *
               C14037) *
              C141309 * C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q));
    d2eexy[26] +=
        (-std::pow(Pi, 2.5) *
         (((C5964 * C108 + C5865 * C189 + C5965 * C823 + C5866 * C912 +
            C5966 * C2960 + C5867 * C3026) *
               C5869 +
           (C5964 * C114 + C5865 * C195 + C5965 * C828 + C5866 * C917 +
            C5966 * C2964 + C5867 * C3030) *
               C5863 +
           (C5992 + C5993 + C5994) * C5871 +
           (C5995 + C5996 + C5997) * C141221) *
              C141320 * C5322 -
          ((C8024 + C8025 + C8026) * C141221 + (C8027 + C8028 + C8029) * C5871 +
           (C5966 * C7890 + C5867 * C8009 + C5965 * C3494 + C5866 * C3576 +
            C5964 * C1606 + C5865 * C1695) *
               C5863 +
           (C5966 * C7887 + C5867 * C8006 + C5965 * C3490 + C5866 * C3572 +
            C5964 * C1601 + C5865 * C1690) *
               C5869) *
              C141320 * C5323 +
          ((C5964 * C5325 + C5865 * C5391 + C5965 * C13301 + C5866 * C13393 +
            C5966 * C13303 + C5867 * C13394) *
               C5869 +
           (C5964 * C5329 + C5865 * C5395 + C5965 * C13305 + C5866 * C13397 +
            C5966 * C13307 + C5867 * C13398) *
               C5863 +
           (C5964 * C5326 + C5865 * C5392 + C5965 * C13302 + C5866 * C13395 +
            C5966 * C13304 + C5867 * C13396) *
               C5871 +
           (C5964 * C5330 + C5865 * C5396 + C5965 * C13306 + C5866 * C13399 +
            C5966 * C13308 + C5867 * C13400) *
               C141221) *
              C141320 * C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C188 * C108 + C141309 * C189) * C101 +
           (C188 * C114 + C141309 * C195) * C89 + C218 * C103 + C219 * C90 +
           C220 * C105 + C221 * C91 + C222 * C107 + C223 * C92) *
              C141320 * C5322 -
          (C1710 * C92 + C1711 * C107 + C1712 * C91 + C1713 * C105 +
           C1714 * C90 + C1715 * C103 + (C188 * C1606 + C141309 * C1695) * C89 +
           (C188 * C1601 + C141309 * C1690) * C101) *
              C141320 * C5323 +
          ((C188 * C5325 + C141309 * C5391) * C101 +
           (C188 * C5329 + C141309 * C5395) * C89 +
           (C188 * C5326 + C141309 * C5392) * C103 +
           (C188 * C5330 + C141309 * C5396) * C90 +
           (C188 * C5327 + C141309 * C5393) * C105 +
           (C188 * C5331 + C141309 * C5397) * C91 +
           (C188 * C5328 + C141309 * C5394) * C107 +
           (C188 * C5332 + C141309 * C5398) * C92) *
              C141320 * C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141309 * C189) * C5869 +
            (C188 * C114 + C141309 * C195) * C5863 + C218 * C5871 +
            C219 * C141221) *
               C14035 +
           (C16049 + C16050 + C16023 + C16024) * C14036 + C21416 * C14037) *
              C5322 -
          ((C21407 + C21408 + C21417 + C21418) * C14037 +
           (C16030 + C16029 + C16052 + C16051) * C14036 +
           (C16024 + C16023 + C16050 + C16049) * C14035) *
              C5323 +
          (C21416 * C14035 + (C21418 + C21417 + C21408 + C21407) * C14036 +
           ((C188 * C21308 + C141309 * C21401) * C5869 +
            (C188 * C21310 + C141309 * C21403) * C5863 +
            (C188 * C21309 + C141309 * C21402) * C5871 +
            (C188 * C21311 + C141309 * C21404) * C141221) *
               C14037) *
              C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q));
    d2eexz[26] +=
        (-std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141320 * C276) * C5869 +
            (C275 * C114 + C141320 * C282) * C5863 + C305 * C5871 +
            C306 * C141221) *
               C5865 +
           (C7038 + C7039 + C7012 + C7013) * C5866 + C9955 * C5867) *
              C5322 -
          ((C10784 + C10785 + C10800 + C10801) * C5867 +
           (C10790 + C10791 + C10802 + C10803) * C5866 +
           (C1808 * C141221 + C1809 * C5871 +
            (C275 * C1606 + C141320 * C1789) * C5863 +
            (C275 * C1601 + C141320 * C1784) * C5869) *
               C5865) *
              C5323 +
          (((C275 * C5325 + C141320 * C5449) * C5869 +
            (C275 * C5329 + C141320 * C5453) * C5863 +
            (C275 * C5326 + C141320 * C5450) * C5871 +
            (C275 * C5330 + C141320 * C5454) * C141221) *
               C5865 +
           ((C275 * C13301 + C141320 * C13475) * C5869 +
            (C275 * C13305 + C141320 * C13479) * C5863 +
            (C275 * C13302 + C141320 * C13476) * C5871 +
            (C275 * C13306 + C141320 * C13480) * C141221) *
               C5866 +
           ((C275 * C13303 + C141320 * C13477) * C5869 +
            (C275 * C13307 + C141320 * C13481) * C5863 +
            (C275 * C13304 + C141320 * C13478) * C5871 +
            (C275 * C13308 + C141320 * C13482) * C141221) *
               C5867) *
              C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C275 * C108 + C141320 * C276) * C101 +
           (C275 * C114 + C141320 * C282) * C89 + C305 * C103 + C306 * C90 +
           C307 * C105 + C308 * C91 + C309 * C107 + C310 * C92) *
              C141309 * C5322 -
          (C1804 * C92 + C1805 * C107 + C1806 * C91 + C1807 * C105 +
           C1808 * C90 + C1809 * C103 + (C275 * C1606 + C141320 * C1789) * C89 +
           (C275 * C1601 + C141320 * C1784) * C101) *
              C141309 * C5323 +
          ((C275 * C5325 + C141320 * C5449) * C101 +
           (C275 * C5329 + C141320 * C5453) * C89 +
           (C275 * C5326 + C141320 * C5450) * C103 +
           (C275 * C5330 + C141320 * C5454) * C90 +
           (C275 * C5327 + C141320 * C5451) * C105 +
           (C275 * C5331 + C141320 * C5455) * C91 +
           (C275 * C5328 + C141320 * C5452) * C107 +
           (C275 * C5332 + C141320 * C5456) * C92) *
              C141309 * C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C14204 * C108 + C14035 * C276 + C14205 * C1601 + C14036 * C1784 +
            C14206 * C5325 + C14037 * C5449) *
               C5869 +
           (C14204 * C114 + C14035 * C282 + C14205 * C1606 + C14036 * C1789 +
            C14206 * C5329 + C14037 * C5453) *
               C5863 +
           (C14232 + C14233 + C14234) * C5871 +
           (C14235 + C14236 + C14237) * C141221) *
              C141309 * C5322 -
          ((C16169 + C16170 + C16171) * C141221 +
           (C16172 + C16173 + C16174) * C5871 +
           (C14206 * C15865 + C14037 * C16154 + C14205 * C5329 +
            C14036 * C5453 + C14204 * C1606 + C14035 * C1789) *
               C5863 +
           (C14206 * C15862 + C14037 * C16151 + C14205 * C5325 +
            C14036 * C5449 + C14204 * C1601 + C14035 * C1784) *
               C5869) *
              C141309 * C5323 +
          ((C14204 * C5325 + C14035 * C5449 + C14205 * C15862 +
            C14036 * C16151 + C14206 * C21308 + C14037 * C21492) *
               C5869 +
           (C14204 * C5329 + C14035 * C5453 + C14205 * C15865 +
            C14036 * C16154 + C14206 * C21310 + C14037 * C21494) *
               C5863 +
           (C14204 * C5326 + C14035 * C5450 + C14205 * C15861 +
            C14036 * C16150 + C14206 * C21309 + C14037 * C21493) *
               C5871 +
           (C14204 * C5330 + C14035 * C5454 + C14205 * C15864 +
            C14036 * C16153 + C14206 * C21311 + C14037 * C21495) *
               C141221) *
              C141309 * C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q));
    d2eeyx[26] +=
        (-std::pow(Pi, 2.5) *
         (((C5869 * C108 + C5863 * C114 + C5871 * C109 + C141221 * C115) *
               C5964 +
           (C5869 * C189 + C5863 * C362 + C5871 * C190 + C141221 * C363) *
               C5865 +
           (C7175 + C7176) * C5965 + (C7177 + C7178) * C5866 + C10034 * C5966 +
           C10035 * C5867) *
              C141320 * C5322 -
          ((C10920 + C10921) * C5867 + (C10922 + C10923) * C5966 +
           (C10924 + C10925) * C5866 + (C10926 + C10927) * C5965 +
           (C5871 * C1689 + C141221 * C1877 + C5869 * C1690 + C5863 * C1878) *
               C5865 +
           (C5871 * C1600 + C141221 * C1605 + C5869 * C1601 + C5863 * C1606) *
               C5964) *
              C141320 * C5323 +
          ((C5869 * C5325 + C5863 * C5329 + C5871 * C5326 + C141221 * C5330) *
               C5964 +
           (C5869 * C5391 + C5863 * C5507 + C5871 * C5392 + C141221 * C5508) *
               C5865 +
           (C5869 * C13301 + C5863 * C13305 + C5871 * C13302 +
            C141221 * C13306) *
               C5965 +
           (C5869 * C13393 + C5863 * C13557 + C5871 * C13395 +
            C141221 * C13558) *
               C5866 +
           (C5869 * C13303 + C5863 * C13307 + C5871 * C13304 +
            C141221 * C13308) *
               C5966 +
           (C5869 * C13394 + C5863 * C13559 + C5871 * C13396 +
            C141221 * C13560) *
               C5867) *
              C141320 * C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
            C91 * C116 + C107 * C111 + C92 * C117) *
               C188 +
           (C101 * C189 + C89 * C362 + C103 * C190 + C90 * C363 + C105 * C191 +
            C91 * C364 + C107 * C192 + C92 * C365) *
               C141309) *
              C141320 * C5322 -
          ((C107 * C1687 + C92 * C1875 + C105 * C1688 + C91 * C1876 +
            C103 * C1689 + C90 * C1877 + C101 * C1690 + C89 * C1878) *
               C141309 +
           (C107 * C1598 + C92 * C1603 + C105 * C1599 + C91 * C1604 +
            C103 * C1600 + C90 * C1605 + C101 * C1601 + C89 * C1606) *
               C188) *
              C141320 * C5323 +
          ((C101 * C5325 + C89 * C5329 + C103 * C5326 + C90 * C5330 +
            C105 * C5327 + C91 * C5331 + C107 * C5328 + C92 * C5332) *
               C188 +
           (C101 * C5391 + C89 * C5507 + C103 * C5392 + C90 * C5508 +
            C105 * C5393 + C91 * C5509 + C107 * C5394 + C92 * C5510) *
               C141309) *
              C141320 * C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C141221 * C115) *
                C188 +
            (C5869 * C189 + C5863 * C362 + C5871 * C190 + C141221 * C363) *
                C141309) *
               C14035 +
           ((C16308 + C16309) * C188 + (C16310 + C16311) * C141309) * C14036 +
           C21589 * C14037) *
              C5322 -
          (((C21585 + C21586) * C141309 + (C21587 + C21588) * C188) * C14037 +
           ((C16315 + C16314) * C141309 + (C16313 + C16312) * C188) * C14036 +
           ((C16311 + C16310) * C141309 + (C16309 + C16308) * C188) * C14035) *
              C5323 +
          (C21589 * C14035 +
           ((C21588 + C21587) * C188 + (C21586 + C21585) * C141309) * C14036 +
           ((C5869 * C21308 + C5863 * C21310 + C5871 * C21309 +
             C141221 * C21311) *
                C188 +
            (C5869 * C21401 + C5863 * C21570 + C5871 * C21402 +
             C141221 * C21571) *
                C141309) *
               C14037) *
              C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q));
    d2eeyy[26] +=
        (-std::pow(Pi, 2.5) *
         (((C6237 * C108 + C6241 + C6241 + C5865 * C419 + C6238 * C823 + C6242 +
            C6242 + C5866 * C1171 + C6239 * C2960 + C6243 + C6243 +
            C5867 * C3196) *
               C5863 +
           (C6277 + C6278 + C6279) * C141221) *
              C141320 * C5322 -
          ((C8369 + C8370 + C8371) * C141221 +
           (C6239 * C7887 + C8357 + C8357 + C5867 * C8345 + C6238 * C3490 +
            C8358 + C8358 + C5866 * C3790 + C6237 * C1601 + C8359 + C8359 +
            C5865 * C1949) *
               C5863) *
              C141320 * C5323 +
          ((C6237 * C5325 + C13640 + C13640 + C5865 * C5561 + C6238 * C13301 +
            C13641 + C13641 + C5866 * C13635 + C6239 * C13303 + C13642 +
            C13642 + C5867 * C13636) *
               C5863 +
           (C6237 * C5326 + C13643 + C13643 + C5865 * C5562 + C6238 * C13302 +
            C13644 + C13644 + C5866 * C13637 + C6239 * C13304 + C13645 +
            C13645 + C5867 * C13638) *
               C141221) *
              C141320 * C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C418 * C108 + C426 + C426 + C141309 * C419) * C89 + C448 * C90 +
           C449 * C91 + C450 * C92) *
              C141320 * C5322 -
          (C1969 * C92 + C1970 * C91 + C1971 * C90 +
           (C418 * C1601 + C1961 + C1961 + C141309 * C1949) * C89) *
              C141320 * C5323 +
          ((C418 * C5325 + C5566 + C5566 + C141309 * C5561) * C89 +
           (C418 * C5326 + C5567 + C5567 + C141309 * C5562) * C90 +
           (C418 * C5327 + C5568 + C5568 + C141309 * C5563) * C91 +
           (C418 * C5328 + C5569 + C5569 + C141309 * C5564) * C92) *
              C141320 * C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C418 * C108 + C426 + C426 + C141309 * C419) * C5863 +
            C448 * C141221) *
               C14035 +
           (C16449 + C16427) * C14036 + C21666 * C14037) *
              C5322 -
          ((C21667 + C21675) * C14037 + (C16430 + C16450) * C14036 +
           (C16427 + C16449) * C14035) *
              C5323 +
          (C21666 * C14035 + (C21675 + C21667) * C14036 +
           ((C418 * C21308 + C21670 + C21670 + C141309 * C21663) * C5863 +
            (C418 * C21309 + C21671 + C21671 + C141309 * C21664) * C141221) *
               C14037) *
              C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q));
    d2eeyz[26] +=
        (-std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141320 * C276) * C5964 +
            (C275 * C189 + C141320 * C501) * C5865 + C7032 * C5965 +
            C7428 * C5866 + C7034 * C5966 + C7429 * C5867) *
               C5863 +
           (C6357 + C6358 + C6359 + C6360 + C6361 + C6373) * C141221) *
              C5322 -
          ((C8483 + C8475 + C8484 + C8478 + C8479 + C8480) * C141221 +
           (C11138 * C5867 + C10797 * C5966 + C11139 * C5866 + C10799 * C5965 +
            (C275 * C1690 + C141320 * C2040) * C5865 +
            (C275 * C1601 + C141320 * C1784) * C5964) *
               C5863) *
              C5323 +
          (((C275 * C5325 + C141320 * C5449) * C5964 +
            (C275 * C5391 + C141320 * C5619) * C5865 +
            (C275 * C13301 + C141320 * C13475) * C5965 +
            (C275 * C13393 + C141320 * C13719) * C5866 +
            (C275 * C13303 + C141320 * C13477) * C5966 +
            (C275 * C13394 + C141320 * C13720) * C5867) *
               C5863 +
           ((C275 * C5326 + C141320 * C5450) * C5964 +
            (C275 * C5392 + C141320 * C5620) * C5865 +
            (C275 * C13302 + C141320 * C13476) * C5965 +
            (C275 * C13395 + C141320 * C13721) * C5866 +
            (C275 * C13304 + C141320 * C13478) * C5966 +
            (C275 * C13396 + C141320 * C13722) * C5867) *
               C141221) *
              C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141320 * C276) * C188 +
            (C275 * C189 + C141320 * C501) * C141309) *
               C89 +
           (C508 + C524) * C90 + C528 * C91 + C529 * C92) *
              C5322 -
          ((C2055 + C2045) * C92 + (C2056 + C2048) * C91 +
           (C2057 + C2051) * C90 +
           ((C275 * C1690 + C141320 * C2040) * C141309 +
            (C275 * C1601 + C141320 * C1784) * C188) *
               C89) *
              C5323 +
          (((C275 * C5325 + C141320 * C5449) * C188 +
            (C275 * C5391 + C141320 * C5619) * C141309) *
               C89 +
           ((C275 * C5326 + C141320 * C5450) * C188 +
            (C275 * C5392 + C141320 * C5620) * C141309) *
               C90 +
           ((C275 * C5327 + C141320 * C5451) * C188 +
            (C275 * C5393 + C141320 * C5621) * C141309) *
               C91 +
           ((C275 * C5328 + C141320 * C5452) * C188 +
            (C275 * C5394 + C141320 * C5622) * C141309) *
               C92) *
              C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C14204 * C108 + C14035 * C276 + C14205 * C1601 + C14036 * C1784 +
             C14206 * C5325 + C14037 * C5449) *
                C188 +
            (C14204 * C189 + C14035 * C501 + C14205 * C1690 + C14036 * C2040 +
             C14206 * C5391 + C14037 * C5619) *
                C141309) *
               C5863 +
           ((C14232 + C14233 + C14234) * C188 +
            (C14488 + C14489 + C14490) * C141309) *
               C141221) *
              C5322 -
          (((C16558 + C16559 + C16560) * C141309 +
            (C16172 + C16173 + C16174) * C188) *
               C141221 +
           ((C14206 * C16013 + C14037 * C16549 + C14205 * C5391 +
             C14036 * C5619 + C14204 * C1690 + C14035 * C2040) *
                C141309 +
            (C14206 * C15862 + C14037 * C16151 + C14205 * C5325 +
             C14036 * C5449 + C14204 * C1601 + C14035 * C1784) *
                C188) *
               C5863) *
              C5323 +
          (((C14204 * C5325 + C14035 * C5449 + C14205 * C15862 +
             C14036 * C16151 + C14206 * C21308 + C14037 * C21492) *
                C188 +
            (C14204 * C5391 + C14035 * C5619 + C14205 * C16013 +
             C14036 * C16549 + C14206 * C21401 + C14037 * C21749) *
                C141309) *
               C5863 +
           ((C14204 * C5326 + C14035 * C5450 + C14205 * C15861 +
             C14036 * C16150 + C14206 * C21309 + C14037 * C21493) *
                C188 +
            (C14204 * C5392 + C14035 * C5620 + C14205 * C16012 +
             C14036 * C16548 + C14206 * C21402 + C14037 * C21750) *
                C141309) *
               C141221) *
              C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q));
    d2eezx[26] +=
        (-std::pow(Pi, 2.5) *
         ((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C141221 * C115) *
                C275 +
            (C5869 * C276 + C5863 * C579 + C5871 * C277 + C141221 * C580) *
                C141320) *
               C5865 +
           ((C7175 + C7176) * C275 + (C7549 + C7550) * C141320) * C5866 +
           C10294 * C5867) *
              C5322 -
          (((C11248 + C11249) * C141320 + (C10922 + C10923) * C275) * C5867 +
           ((C11250 + C11251) * C141320 + (C10926 + C10927) * C275) * C5866 +
           ((C5871 * C1783 + C141221 * C2125 + C5869 * C1784 + C5863 * C2126) *
                C141320 +
            (C5871 * C1600 + C141221 * C1605 + C5869 * C1601 + C5863 * C1606) *
                C275) *
               C5865) *
              C5323 +
          (((C5869 * C5325 + C5863 * C5329 + C5871 * C5326 + C141221 * C5330) *
                C275 +
            (C5869 * C5449 + C5863 * C5673 + C5871 * C5450 + C141221 * C5674) *
                C141320) *
               C5865 +
           ((C5869 * C13301 + C5863 * C13305 + C5871 * C13302 +
             C141221 * C13306) *
                C275 +
            (C5869 * C13475 + C5863 * C13797 + C5871 * C13476 +
             C141221 * C13798) *
                C141320) *
               C5866 +
           ((C5869 * C13303 + C5863 * C13307 + C5871 * C13304 +
             C141221 * C13308) *
                C275 +
            (C5869 * C13477 + C5863 * C13799 + C5871 * C13478 +
             C141221 * C13800) *
                C141320) *
               C5867) *
              C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
            C91 * C116 + C107 * C111 + C92 * C117) *
               C275 +
           (C101 * C276 + C89 * C579 + C103 * C277 + C90 * C580 + C105 * C278 +
            C91 * C581 + C107 * C279 + C92 * C582) *
               C141320) *
              C141309 * C5322 -
          ((C107 * C1781 + C92 * C2123 + C105 * C1782 + C91 * C2124 +
            C103 * C1783 + C90 * C2125 + C101 * C1784 + C89 * C2126) *
               C141320 +
           (C107 * C1598 + C92 * C1603 + C105 * C1599 + C91 * C1604 +
            C103 * C1600 + C90 * C1605 + C101 * C1601 + C89 * C1606) *
               C275) *
              C141309 * C5323 +
          ((C101 * C5325 + C89 * C5329 + C103 * C5326 + C90 * C5330 +
            C105 * C5327 + C91 * C5331 + C107 * C5328 + C92 * C5332) *
               C275 +
           (C101 * C5449 + C89 * C5673 + C103 * C5450 + C90 * C5674 +
            C105 * C5451 + C91 * C5675 + C107 * C5452 + C92 * C5676) *
               C141320) *
              C141309 * C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C5869 * C108 + C5863 * C114 + C5871 * C109 + C141221 * C115) *
               C14204 +
           (C5869 * C276 + C5863 * C579 + C5871 * C277 + C141221 * C580) *
               C14035 +
           (C16308 + C16309) * C14205 + (C16678 + C16679) * C14036 +
           C21573 * C14206 + C21828 * C14037) *
              C141309 * C5322 -
          ((C21833 + C21834) * C14037 + (C21587 + C21588) * C14206 +
           (C16681 + C16680) * C14036 + (C16313 + C16312) * C14205 +
           (C16679 + C16678) * C14035 + (C16309 + C16308) * C14204) *
              C141309 * C5323 +
          (C21573 * C14204 + C21828 * C14035 + (C21588 + C21587) * C14205 +
           (C21834 + C21833) * C14036 +
           (C5869 * C21308 + C5863 * C21310 + C5871 * C21309 +
            C141221 * C21311) *
               C14206 +
           (C5869 * C21492 + C5863 * C21825 + C5871 * C21493 +
            C141221 * C21826) *
               C14037) *
              C141309 * C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q));
    d2eezy[26] +=
        (-std::pow(Pi, 2.5) *
         ((((C5964 * C108 + C5865 * C189 + C5965 * C823 + C5866 * C912 +
             C5966 * C2960 + C5867 * C3026) *
                C275 +
            (C5964 * C276 + C5865 * C635 + C5965 * C1006 + C5866 * C1419 +
             C5966 * C3084 + C5867 * C3362) *
                C141320) *
               C5863 +
           ((C5992 + C5993 + C5994) * C275 +
            (C6535 + C6536 + C6537) * C141320) *
               C141221) *
              C5322 -
          (((C8693 + C8694 + C8695) * C141320 +
            (C8027 + C8028 + C8029) * C275) *
               C141221 +
           ((C5966 * C8128 + C5867 * C8684 + C5965 * C3646 + C5866 * C4004 +
             C5964 * C1784 + C5865 * C2197) *
                C141320 +
            (C5966 * C7887 + C5867 * C8006 + C5965 * C3490 + C5866 * C3572 +
             C5964 * C1601 + C5865 * C1690) *
                C275) *
               C5863) *
              C5323 +
          (((C5964 * C5325 + C5865 * C5391 + C5965 * C13301 + C5866 * C13393 +
             C5966 * C13303 + C5867 * C13394) *
                C275 +
            (C5964 * C5449 + C5865 * C5727 + C5965 * C13475 + C5866 * C13875 +
             C5966 * C13477 + C5867 * C13876) *
                C141320) *
               C5863 +
           ((C5964 * C5326 + C5865 * C5392 + C5965 * C13302 + C5866 * C13395 +
             C5966 * C13304 + C5867 * C13396) *
                C275 +
            (C5964 * C5450 + C5865 * C5728 + C5965 * C13476 + C5866 * C13877 +
             C5966 * C13478 + C5867 * C13878) *
                C141320) *
               C141221) *
              C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141309 * C189) * C275 +
            (C188 * C276 + C141309 * C635) * C141320) *
               C89 +
           (C642 + C658) * C90 + C662 * C91 + C663 * C92) *
              C5322 -
          ((C2212 + C2202) * C92 + (C2213 + C2205) * C91 +
           (C2214 + C2208) * C90 +
           ((C188 * C1784 + C141309 * C2197) * C141320 +
            (C188 * C1601 + C141309 * C1690) * C275) *
               C89) *
              C5323 +
          (((C188 * C5325 + C141309 * C5391) * C275 +
            (C188 * C5449 + C141309 * C5727) * C141320) *
               C89 +
           ((C188 * C5326 + C141309 * C5392) * C275 +
            (C188 * C5450 + C141309 * C5728) * C141320) *
               C90 +
           ((C188 * C5327 + C141309 * C5393) * C275 +
            (C188 * C5451 + C141309 * C5729) * C141320) *
               C91 +
           ((C188 * C5328 + C141309 * C5394) * C275 +
            (C188 * C5452 + C141309 * C5730) * C141320) *
               C92) *
              C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141309 * C189) * C14204 +
            (C188 * C276 + C141309 * C635) * C14035 + C16043 * C14205 +
            C16798 * C14036 + C16045 * C14206 + C16799 * C14037) *
               C5863 +
           (C14642 + C14643 + C14644 + C14645 + C14646 + C14658) * C141221) *
              C5322 -
          ((C16801 + C16793 + C16794 + C16795 + C16796 + C16797) * C141221 +
           (C21913 * C14037 + C21415 * C14206 + C16799 * C14036 +
            C16045 * C14205 + C16798 * C14035 + C16043 * C14204) *
               C5863) *
              C5323 +
          ((C16045 * C14204 + C16799 * C14035 + C21415 * C14205 +
            C21913 * C14036 + (C188 * C21308 + C141309 * C21401) * C14206 +
            (C188 * C21492 + C141309 * C21908) * C14037) *
               C5863 +
           (C14127 * C14204 + C14656 * C14035 + C16048 * C14205 +
            C16800 * C14036 + (C188 * C21309 + C141309 * C21402) * C14206 +
            (C188 * C21493 + C141309 * C21909) * C14037) *
               C141221) *
              C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q));
    d2eezz[26] +=
        (-std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C141320 * C714) * C5865 +
            C7785 * C5866 + C7786 * C5867) *
               C5863 +
           (C6615 + C6616 + C6629) * C141221) *
              C5322 -
          ((C8811 + C8812 + C8802) * C141221 +
           (C11462 * C5867 + C11463 * C5866 +
            (C713 * C1601 + C2295 + C2295 + C141320 * C2283) * C5865) *
               C5863) *
              C5323 +
          (((C713 * C5325 + C5786 + C5786 + C141320 * C5781) * C5865 +
            (C713 * C13301 + C13958 + C13958 + C141320 * C13953) * C5866 +
            (C713 * C13303 + C13959 + C13959 + C141320 * C13954) * C5867) *
               C5863 +
           ((C713 * C5326 + C5787 + C5787 + C141320 * C5782) * C5865 +
            (C713 * C13302 + C13960 + C13960 + C141320 * C13955) * C5866 +
            (C713 * C13304 + C13961 + C13961 + C141320 * C13956) * C5867) *
               C141221) *
              C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C713 * C108 + C721 + C721 + C141320 * C714) * C141309 * C89 +
           C747 * C90 + C748 * C91 + C749 * C92) *
              C5322 -
          (C2306 * C92 + C2307 * C91 + C2308 * C90 +
           (C713 * C1601 + C2295 + C2295 + C141320 * C2283) * C141309 * C89) *
              C5323 +
          ((C713 * C5325 + C5786 + C5786 + C141320 * C5781) * C141309 * C89 +
           (C713 * C5326 + C5787 + C5787 + C141320 * C5782) * C141309 * C90 +
           (C713 * C5327 + C5788 + C5788 + C141320 * C5783) * C141309 * C91 +
           (C713 * C5328 + C5789 + C5789 + C141320 * C5784) * C141309 * C92) *
              C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C14733 * C108 + C14737 + C14737 + C14035 * C714 + C14734 * C1601 +
            C14738 + C14738 + C14036 * C2283 + C14735 * C5325 + C14739 +
            C14739 + C14037 * C5781) *
               C141309 * C5863 +
           (C14773 + C14774 + C14775) * C141309 * C141221) *
              C5322 -
          ((C16924 + C16925 + C16926) * C141309 * C141221 +
           (C14735 * C15862 + C16912 + C16912 + C14037 * C16900 +
            C14734 * C5325 + C16913 + C16913 + C14036 * C5781 + C14733 * C1601 +
            C16914 + C16914 + C14035 * C2283) *
               C141309 * C5863) *
              C5323 +
          ((C14733 * C5325 + C21990 + C21990 + C14035 * C5781 +
            C14734 * C15862 + C21991 + C21991 + C14036 * C16900 +
            C14735 * C21308 + C21992 + C21992 + C14037 * C21987) *
               C141309 * C5863 +
           (C14733 * C5326 + C21993 + C21993 + C14035 * C5782 +
            C14734 * C15861 + C21994 + C21994 + C14036 * C16899 +
            C14735 * C21309 + C21995 + C21995 + C14037 * C21988) *
               C141309 * C141221) *
              C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q));
    d2eexx[27] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C22074 * C108 + C22081 + C22081 + C141494 * C120 +
                      C22076 * C109 + C22082 + C22082 + C141495 * C121 +
                      C22078 * C110 + C22083 + C22083 + C22071 * C122) *
                         C141469 +
                     (C22074 * C1601 + C23981 + C23981 + C141494 * C1611 +
                      C22076 * C1600 + C23980 + C23980 + C141495 * C1610 +
                      C22078 * C1599 + C23979 + C23979 + C22071 * C1609) *
                         C141384) *
                        C141309 * C141294 * C141277 * C97 -
                    ((C22078 * C1598 + C23984 + C23984 + C22071 * C1608 +
                      C22076 * C1599 + C23983 + C23983 + C141495 * C1609 +
                      C22074 * C1600 + C23982 + C23982 + C141494 * C1610) *
                         C141384 +
                     (C22078 * C111 + C22090 + C22090 + C22071 * C123 +
                      C22076 * C110 + C22091 + C22091 + C141495 * C122 +
                      C22074 * C109 + C22092 + C22092 + C141494 * C121) *
                         C141469) *
                        C141309 * C141294 * C141277 * C98 +
                    ((C22074 * C110 + C22093 + C22093 + C141494 * C122 +
                      C22076 * C111 + C22094 + C22094 + C141495 * C123 +
                      C22078 * C112 + C22095 + C22095 + C22071 * C124) *
                         C141469 +
                     (C22074 * C1599 + C29925 + C29925 + C141494 * C1609 +
                      C22076 * C1598 + C29926 + C29926 + C141495 * C1608 +
                      C22078 * C1602 + C29927 + C29927 + C22071 * C1612) *
                         C141384) *
                        C141309 * C141294 * C141277 * C99)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[27] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141309 * C189) * C22075 +
            (C188 * C114 + C141309 * C195) * C141494 + C218 * C22077 +
            C219 * C141495 + C220 * C22079 + C221 * C22071) *
               C141469 +
           (C16043 * C22075 + C16044 * C141494 + C1715 * C22077 +
            C1714 * C141495 + C1713 * C22079 + C1712 * C22071) *
               C141384) *
              C141294 * C141277 * C97 -
          ((C1710 * C22071 + C1711 * C22079 + C1712 * C141495 + C1713 * C22077 +
            C1714 * C141494 + C1715 * C22075) *
               C141384 +
           (C223 * C22071 + C222 * C22079 + C221 * C141495 + C220 * C22077 +
            C219 * C141494 + C218 * C22075) *
               C141469) *
              C141294 * C141277 * C98 +
          ((C220 * C22075 + C221 * C141494 + C222 * C22077 + C223 * C141495 +
            C225 * C22079 + C224 * C22071) *
               C141469 +
           (C1713 * C22075 + C1712 * C141494 + C1711 * C22077 +
            C1710 * C141495 + (C188 * C1602 + C141309 * C1691) * C22079 +
            (C188 * C1607 + C141309 * C1696) * C22071) *
               C141384) *
              C141294 * C141277 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eexz[27] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C30075 * C108 + C141469 * C276 + C30076 * C1601 + C141384 * C1784) *
               C22075 +
           (C30075 * C114 + C141469 * C282 + C30076 * C1606 + C141384 * C1789) *
               C141494 +
           (C30102 + C30103) * C22077 + (C30104 + C30105) * C141495 +
           C30114 * C22079 + C30115 * C22071) *
              C141309 * C141294 * C141277 * C97 -
          ((C30110 + C30111) * C22071 + (C30112 + C30113) * C22079 +
           (C30109 + C30108) * C141495 + (C30107 + C30106) * C22077 +
           (C30105 + C30104) * C141494 + (C30103 + C30102) * C22075) *
              C141309 * C141294 * C141277 * C98 +
          (C30114 * C22075 + C30115 * C141494 + (C30113 + C30112) * C22077 +
           (C30111 + C30110) * C141495 +
           (C30075 * C112 + C141469 * C280 + C30076 * C1602 + C141384 * C1785) *
               C22079 +
           (C30075 * C118 + C141469 * C286 + C30076 * C1607 + C141384 * C1790) *
               C22071) *
              C141309 * C141294 * C141277 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[27] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C22075 * C108 + C141494 * C114 + C22077 * C109 +
                       C141495 * C115 + C22079 * C110 + C22071 * C116) *
                          C188 +
                      (C22075 * C189 + C141494 * C362 + C22077 * C190 +
                       C141495 * C363 + C22079 * C191 + C22071 * C364) *
                          C141309) *
                         C141469 +
                     ((C22075 * C1601 + C141494 * C1606 + C22077 * C1600 +
                       C141495 * C1605 + C22079 * C1599 + C22071 * C1604) *
                          C188 +
                      (C22075 * C1690 + C141494 * C1878 + C22077 * C1689 +
                       C141495 * C1877 + C22079 * C1688 + C22071 * C1876) *
                          C141309) *
                         C141384) *
                        C141294 * C141277 * C97 -
                    (((C22079 * C1687 + C22071 * C1875 + C22077 * C1688 +
                       C141495 * C1876 + C22075 * C1689 + C141494 * C1877) *
                          C141309 +
                      (C22079 * C1598 + C22071 * C1603 + C22077 * C1599 +
                       C141495 * C1604 + C22075 * C1600 + C141494 * C1605) *
                          C188) *
                         C141384 +
                     ((C22079 * C192 + C22071 * C365 + C22077 * C191 +
                       C141495 * C364 + C22075 * C190 + C141494 * C363) *
                          C141309 +
                      (C22079 * C111 + C22071 * C117 + C22077 * C110 +
                       C141495 * C116 + C22075 * C109 + C141494 * C115) *
                          C188) *
                         C141469) *
                        C141294 * C141277 * C98 +
                    (((C22075 * C110 + C141494 * C116 + C22077 * C111 +
                       C141495 * C117 + C22079 * C112 + C22071 * C118) *
                          C188 +
                      (C22075 * C191 + C141494 * C364 + C22077 * C192 +
                       C141495 * C365 + C22079 * C193 + C22071 * C366) *
                          C141309) *
                         C141469 +
                     ((C22075 * C1599 + C141494 * C1604 + C22077 * C1598 +
                       C141495 * C1603 + C22079 * C1602 + C22071 * C1607) *
                          C188 +
                      (C22075 * C1688 + C141494 * C1876 + C22077 * C1687 +
                       C141495 * C1875 + C22079 * C1691 + C22071 * C1879) *
                          C141309) *
                         C141384) *
                        C141294 * C141277 * C99)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[27] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C418 * C108 + C426 + C426 + C141309 * C419) * C141494 +
            C448 * C141495 + C449 * C22071) *
               C141469 +
           (C16446 * C141494 + C1971 * C141495 + C1970 * C22071) * C141384) *
              C141294 * C141277 * C97 -
          ((C1969 * C22071 + C1970 * C141495 + C1971 * C141494) * C141384 +
           (C450 * C22071 + C449 * C141495 + C448 * C141494) * C141469) *
              C141294 * C141277 * C98 +
          ((C449 * C141494 + C450 * C141495 + C451 * C22071) * C141469 +
           (C1970 * C141494 + C1969 * C141495 +
            (C418 * C1602 + C1962 + C1962 + C141309 * C1950) * C22071) *
               C141384) *
              C141294 * C141277 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[27] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30075 * C108 + C141469 * C276 + C30076 * C1601 +
             C141384 * C1784) *
                C188 +
            (C30075 * C189 + C141469 * C501 + C30076 * C1690 +
             C141384 * C2040) *
                C141309) *
               C141494 +
           ((C30102 + C30103) * C188 + (C30351 + C30352) * C141309) * C141495 +
           C30359 * C22071) *
              C141294 * C141277 * C97 -
          (((C30355 + C30356) * C141309 + (C30112 + C30113) * C188) * C22071 +
           ((C30354 + C30353) * C141309 + (C30107 + C30106) * C188) * C141495 +
           ((C30352 + C30351) * C141309 + (C30103 + C30102) * C188) * C141494) *
              C141294 * C141277 * C98 +
          (C30359 * C141494 +
           ((C30113 + C30112) * C188 + (C30356 + C30355) * C141309) * C141495 +
           ((C30075 * C112 + C141469 * C280 + C30076 * C1602 +
             C141384 * C1785) *
                C188 +
            (C30075 * C193 + C141469 * C505 + C30076 * C1691 +
             C141384 * C2041) *
                C141309) *
               C22071) *
              C141294 * C141277 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eezx[27] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C22075 * C108 + C141494 * C114 + C22077 * C109 +
                      C141495 * C115 + C22079 * C110 + C22071 * C116) *
                         C30075 +
                     (C22075 * C276 + C141494 * C579 + C22077 * C277 +
                      C141495 * C580 + C22079 * C278 + C22071 * C581) *
                         C141469 +
                     (C22075 * C1601 + C141494 * C1606 + C22077 * C1600 +
                      C141495 * C1605 + C22079 * C1599 + C22071 * C1604) *
                         C30076 +
                     (C22075 * C1784 + C141494 * C2126 + C22077 * C1783 +
                      C141495 * C2125 + C22079 * C1782 + C22071 * C2124) *
                         C141384) *
                        C141309 * C141294 * C141277 * C97 -
                    ((C22079 * C1781 + C22071 * C2123 + C22077 * C1782 +
                      C141495 * C2124 + C22075 * C1783 + C141494 * C2125) *
                         C141384 +
                     (C22079 * C1598 + C22071 * C1603 + C22077 * C1599 +
                      C141495 * C1604 + C22075 * C1600 + C141494 * C1605) *
                         C30076 +
                     (C22079 * C279 + C22071 * C582 + C22077 * C278 +
                      C141495 * C581 + C22075 * C277 + C141494 * C580) *
                         C141469 +
                     (C22079 * C111 + C22071 * C117 + C22077 * C110 +
                      C141495 * C116 + C22075 * C109 + C141494 * C115) *
                         C30075) *
                        C141309 * C141294 * C141277 * C98 +
                    ((C22075 * C110 + C141494 * C116 + C22077 * C111 +
                      C141495 * C117 + C22079 * C112 + C22071 * C118) *
                         C30075 +
                     (C22075 * C278 + C141494 * C581 + C22077 * C279 +
                      C141495 * C582 + C22079 * C280 + C22071 * C583) *
                         C141469 +
                     (C22075 * C1599 + C141494 * C1604 + C22077 * C1598 +
                      C141495 * C1603 + C22079 * C1602 + C22071 * C1607) *
                         C30076 +
                     (C22075 * C1782 + C141494 * C2124 + C22077 * C1781 +
                      C141495 * C2123 + C22079 * C1785 + C22071 * C2127) *
                         C141384) *
                        C141309 * C141294 * C141277 * C99)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[27] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141309 * C189) * C30075 +
            (C188 * C276 + C141309 * C635) * C141469 + C16043 * C30076 +
            C16798 * C141384) *
               C141494 +
           (C30508 + C30509 + C30510 + C30511) * C141495 + C30522 * C22071) *
              C141294 * C141277 * C97 -
          ((C30516 + C30517 + C30518 + C30519) * C22071 +
           (C30515 + C30514 + C30513 + C30512) * C141495 +
           (C30511 + C30510 + C30509 + C30508) * C141494) *
              C141294 * C141277 * C98 +
          (C30522 * C141494 + (C30519 + C30518 + C30517 + C30516) * C141495 +
           (C225 * C30075 + C657 * C141469 +
            (C188 * C1602 + C141309 * C1691) * C30076 +
            (C188 * C1785 + C141309 * C2198) * C141384) *
               C22071) *
              C141294 * C141277 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eezz[27] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C30596 * C108 + C30599 + C30599 + C141469 * C714 +
                      C30597 * C1601 + C30600 + C30600 + C141384 * C2283) *
                         C141309 * C141494 +
                     (C30633 + C30634) * C141309 * C141495 + C30640 * C22071) *
                        C141294 * C141277 * C97 -
                    ((C30637 + C30638) * C141309 * C22071 +
                     (C30636 + C30635) * C141309 * C141495 +
                     (C30634 + C30633) * C141309 * C141494) *
                        C141294 * C141277 * C98 +
                    (C30640 * C141494 + (C30638 + C30637) * C141309 * C141495 +
                     (C30596 * C112 + C30619 + C30619 + C141469 * C718 +
                      C30597 * C1602 + C30620 + C30620 + C141384 * C2284) *
                         C141309 * C22071) *
                        C141294 * C141277 * C99)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[28] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C22074 * C108 + C22081 + C22081 + C141494 * C120 +
                       C22076 * C109 + C22082 + C22082 + C141495 * C121 +
                       C22078 * C110 + C22083 + C22083 + C22071 * C122) *
                          C141469 +
                      (C22074 * C1601 + C23981 + C23981 + C141494 * C1611 +
                       C22076 * C1600 + C23980 + C23980 + C141495 * C1610 +
                       C22078 * C1599 + C23979 + C23979 + C22071 * C1609) *
                          C141384) *
                         C141309 * C141294 * C816 -
                     ((C26580 + C26581 + C26582) * C141384 +
                      (C22948 + C22947 + C22946) * C141469) *
                         C141309 * C141294 * C141485) *
                        C818 +
                    (((C22949 + C22950 + C22951) * C141469 +
                      (C22074 * C3491 + C23985 + C23985 + C141494 * C3499 +
                       C22076 * C3492 + C23986 + C23986 + C141495 * C3500 +
                       C22078 * C3493 + C23987 + C23987 + C22071 * C3501) *
                          C141384) *
                         C141309 * C141294 * C141485 -
                     ((C22078 * C1598 + C23984 + C23984 + C22071 * C1608 +
                       C22076 * C1599 + C23983 + C23983 + C141495 * C1609 +
                       C22074 * C1600 + C23982 + C23982 + C141494 * C1610) *
                          C141384 +
                      (C22078 * C111 + C22090 + C22090 + C22071 * C123 +
                       C22076 * C110 + C22091 + C22091 + C141495 * C122 +
                       C22074 * C109 + C22092 + C22092 + C141494 * C121) *
                          C141469) *
                         C141309 * C141294 * C816) *
                        C141483)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[28] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141309 * C189) * C22075 +
             (C188 * C114 + C141309 * C195) * C141494 + C218 * C22077 +
             C219 * C141495 + C220 * C22079 + C221 * C22071) *
                C141469 +
            (C16043 * C22075 + C16044 * C141494 + C1715 * C22077 +
             C1714 * C141495 + C1713 * C22079 + C1712 * C22071) *
                C141384) *
               C141294 * C816 -
           ((C30841 * C22071 + C30842 * C22079 + C14992 * C141495 +
             C14993 * C22077 + C18716 * C141494 + C18715 * C22075) *
                C141384 +
            (C934 * C22071 + C935 * C22079 + C936 * C141495 + C937 * C22077 +
             (C188 * C828 + C141309 * C917) * C141494 +
             (C188 * C823 + C141309 * C912) * C22075) *
                C141469) *
               C141294 * C141485) *
              C818 +
          (((C937 * C22075 + C936 * C141494 + C935 * C22077 + C934 * C141495 +
             C933 * C22079 + C932 * C22071) *
                C141469 +
            (C14993 * C22075 + C14992 * C141494 + C30842 * C22077 +
             C30841 * C141495 + (C188 * C3493 + C141309 * C3575) * C22079 +
             (C188 * C3497 + C141309 * C3579) * C22071) *
                C141384) *
               C141294 * C141485 -
           ((C1710 * C22071 + C1711 * C22079 + C1712 * C141495 +
             C1713 * C22077 + C1714 * C141494 + C1715 * C22075) *
                C141384 +
            (C223 * C22071 + C222 * C22079 + C221 * C141495 + C220 * C22077 +
             C219 * C141494 + C218 * C22075) *
                C141469) *
               C141294 * C816) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eexz[28] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30075 * C108 + C141469 * C276 + C30076 * C1601 +
             C141384 * C1784) *
                C22075 +
            (C30075 * C114 + C141469 * C282 + C30076 * C1606 +
             C141384 * C1789) *
                C141494 +
            (C30102 + C30103) * C22077 + (C30104 + C30105) * C141495 +
            C30114 * C22079 + C30115 * C22071) *
               C141309 * C141294 * C816 -
           ((C30957 + C30958) * C22071 + (C30959 + C30960) * C22079 +
            (C30961 + C30962) * C141495 + (C30963 + C30964) * C22077 +
            (C30076 * C3494 + C141384 * C3650 + C30075 * C828 +
             C141469 * C1011) *
                C141494 +
            (C30076 * C3490 + C141384 * C3646 + C30075 * C823 +
             C141469 * C1006) *
                C22075) *
               C141309 * C141294 * C141485) *
              C818 +
          (((C30964 + C30963) * C22075 + (C30962 + C30961) * C141494 +
            (C30960 + C30959) * C22077 + (C30958 + C30957) * C141495 +
            (C30075 * C820 + C141469 * C1003 + C30076 * C3493 +
             C141384 * C3649) *
                C22079 +
            (C30075 * C825 + C141469 * C1008 + C30076 * C3497 +
             C141384 * C3653) *
                C22071) *
               C141309 * C141294 * C141485 -
           ((C30110 + C30111) * C22071 + (C30112 + C30113) * C22079 +
            (C30109 + C30108) * C141495 + (C30107 + C30106) * C22077 +
            (C30105 + C30104) * C141494 + (C30103 + C30102) * C22075) *
               C141309 * C141294 * C816) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[28] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C22075 * C108 + C141494 * C114 + C22077 * C109 +
                        C141495 * C115 + C22079 * C110 + C22071 * C116) *
                           C188 +
                       (C22075 * C189 + C141494 * C362 + C22077 * C190 +
                        C141495 * C363 + C22079 * C191 + C22071 * C364) *
                           C141309) *
                          C141469 +
                      ((C22075 * C1601 + C141494 * C1606 + C22077 * C1600 +
                        C141495 * C1605 + C22079 * C1599 + C22071 * C1604) *
                           C188 +
                       (C22075 * C1690 + C141494 * C1878 + C22077 * C1689 +
                        C141495 * C1877 + C22079 * C1688 + C22071 * C1876) *
                           C141309) *
                          C141384) *
                         C141294 * C816 -
                     (((C26895 + C26896 + C26897) * C141309 +
                       (C26898 + C26899 + C26900) * C188) *
                          C141384 +
                      ((C23311 + C23310 + C23309) * C141309 +
                       (C23308 + C23307 + C23306) * C188) *
                          C141469) *
                         C141294 * C141485) *
                        C818 +
                    ((((C23312 + C23313 + C23314) * C188 +
                       (C23315 + C23316 + C23317) * C141309) *
                          C141469 +
                      ((C22075 * C3491 + C141494 * C3495 + C22077 * C3492 +
                        C141495 * C3496 + C22079 * C3493 + C22071 * C3497) *
                           C188 +
                       (C22075 * C3573 + C141494 * C3721 + C22077 * C3574 +
                        C141495 * C3722 + C22079 * C3575 + C22071 * C3723) *
                           C141309) *
                          C141384) *
                         C141294 * C141485 -
                     (((C22079 * C1687 + C22071 * C1875 + C22077 * C1688 +
                        C141495 * C1876 + C22075 * C1689 + C141494 * C1877) *
                           C141309 +
                       (C22079 * C1598 + C22071 * C1603 + C22077 * C1599 +
                        C141495 * C1604 + C22075 * C1600 + C141494 * C1605) *
                           C188) *
                          C141384 +
                      ((C22079 * C192 + C22071 * C365 + C22077 * C191 +
                        C141495 * C364 + C22075 * C190 + C141494 * C363) *
                           C141309 +
                       (C22079 * C111 + C22071 * C117 + C22077 * C110 +
                        C141495 * C116 + C22075 * C109 + C141494 * C115) *
                           C188) *
                          C141469) *
                         C141294 * C816) *
                        C141483)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[28] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C418 * C108 + C426 + C426 + C141309 * C419) * C141494 +
             C448 * C141495 + C449 * C22071) *
                C141469 +
            (C16446 * C141494 + C1971 * C141495 + C1970 * C22071) * C141384) *
               C141294 * C816 -
           ((C31165 * C22071 + C15322 * C141495 + C19049 * C141494) * C141384 +
            (C1192 * C22071 + C1193 * C141495 +
             (C418 * C823 + C1183 + C1183 + C141309 * C1171) * C141494) *
                C141469) *
               C141294 * C141485) *
              C818 +
          (((C1193 * C141494 + C1192 * C141495 + C1191 * C22071) * C141469 +
            (C15322 * C141494 + C31165 * C141495 +
             (C418 * C3493 + C3798 + C3798 + C141309 * C3793) * C22071) *
                C141384) *
               C141294 * C141485 -
           ((C1969 * C22071 + C1970 * C141495 + C1971 * C141494) * C141384 +
            (C450 * C22071 + C449 * C141495 + C448 * C141494) * C141469) *
               C141294 * C816) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[28] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30075 * C108 + C141469 * C276 + C30076 * C1601 +
              C141384 * C1784) *
                 C188 +
             (C30075 * C189 + C141469 * C501 + C30076 * C1690 +
              C141384 * C2040) *
                 C141309) *
                C141494 +
            ((C30102 + C30103) * C188 + (C30351 + C30352) * C141309) * C141495 +
            C30359 * C22071) *
               C141294 * C816 -
           (((C31272 + C31273) * C141309 + (C30959 + C30960) * C188) * C22071 +
            ((C31274 + C31275) * C141309 + (C30963 + C30964) * C188) * C141495 +
            ((C30076 * C3572 + C141384 * C3864 + C30075 * C912 +
              C141469 * C1262) *
                 C141309 +
             (C30076 * C3490 + C141384 * C3646 + C30075 * C823 +
              C141469 * C1006) *
                 C188) *
                C141494) *
               C141294 * C141485) *
              C818 +
          ((((C30964 + C30963) * C188 + (C31275 + C31274) * C141309) * C141494 +
            ((C30960 + C30959) * C188 + (C31273 + C31272) * C141309) * C141495 +
            ((C30075 * C820 + C141469 * C1003 + C30076 * C3493 +
              C141384 * C3649) *
                 C188 +
             (C30075 * C909 + C141469 * C1259 + C30076 * C3575 +
              C141384 * C3867) *
                 C141309) *
                C22071) *
               C141294 * C141485 -
           (((C30355 + C30356) * C141309 + (C30112 + C30113) * C188) * C22071 +
            ((C30354 + C30353) * C141309 + (C30107 + C30106) * C188) * C141495 +
            ((C30352 + C30351) * C141309 + (C30103 + C30102) * C188) *
                C141494) *
               C141294 * C816) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eezx[28] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C22075 * C108 + C141494 * C114 + C22077 * C109 +
                       C141495 * C115 + C22079 * C110 + C22071 * C116) *
                          C30075 +
                      (C22075 * C276 + C141494 * C579 + C22077 * C277 +
                       C141495 * C580 + C22079 * C278 + C22071 * C581) *
                          C141469 +
                      (C22075 * C1601 + C141494 * C1606 + C22077 * C1600 +
                       C141495 * C1605 + C22079 * C1599 + C22071 * C1604) *
                          C30076 +
                      (C22075 * C1784 + C141494 * C2126 + C22077 * C1783 +
                       C141495 * C2125 + C22079 * C1782 + C22071 * C2124) *
                          C141384) *
                         C141309 * C141294 * C816 -
                     ((C27207 + C27208 + C27209) * C141384 +
                      (C26898 + C26899 + C26900) * C30076 +
                      (C23662 + C23661 + C23660) * C141469 +
                      (C23308 + C23307 + C23306) * C30075) *
                         C141309 * C141294 * C141485) *
                        C818 +
                    (((C23312 + C23313 + C23314) * C30075 +
                      (C23663 + C23664 + C23665) * C141469 +
                      (C22075 * C3491 + C141494 * C3495 + C22077 * C3492 +
                       C141495 * C3496 + C22079 * C3493 + C22071 * C3497) *
                          C30076 +
                      (C22075 * C3647 + C141494 * C3935 + C22077 * C3648 +
                       C141495 * C3936 + C22079 * C3649 + C22071 * C3937) *
                          C141384) *
                         C141309 * C141294 * C141485 -
                     ((C22079 * C1781 + C22071 * C2123 + C22077 * C1782 +
                       C141495 * C2124 + C22075 * C1783 + C141494 * C2125) *
                          C141384 +
                      (C22079 * C1598 + C22071 * C1603 + C22077 * C1599 +
                       C141495 * C1604 + C22075 * C1600 + C141494 * C1605) *
                          C30076 +
                      (C22079 * C279 + C22071 * C582 + C22077 * C278 +
                       C141495 * C581 + C22075 * C277 + C141494 * C580) *
                          C141469 +
                      (C22079 * C111 + C22071 * C117 + C22077 * C110 +
                       C141495 * C116 + C22075 * C109 + C141494 * C115) *
                          C30075) *
                         C141309 * C141294 * C816) *
                        C141483)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[28] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141309 * C189) * C30075 +
             (C188 * C276 + C141309 * C635) * C141469 + C16043 * C30076 +
             C16798 * C141384) *
                C141494 +
            (C30508 + C30509 + C30510 + C30511) * C141495 + C30522 * C22071) *
               C141294 * C816 -
           ((C31482 + C31474 + C31475 + C31476) * C22071 +
            (C31477 + C31478 + C31479 + C31480) * C141495 +
            (C19363 * C141384 + C18715 * C30076 +
             (C188 * C1006 + C141309 * C1419) * C141469 +
             (C188 * C823 + C141309 * C912) * C30075) *
                C141494) *
               C141294 * C141485) *
              C818 +
          (((C31480 + C31479 + C31478 + C31477) * C141494 +
            (C31476 + C31475 + C31474 + C31482) * C141495 +
            (C933 * C30075 + C1431 * C141469 +
             (C188 * C3493 + C141309 * C3575) * C30076 +
             (C188 * C3649 + C141309 * C4007) * C141384) *
                C22071) *
               C141294 * C141485 -
           ((C30516 + C30517 + C30518 + C30519) * C22071 +
            (C30515 + C30514 + C30513 + C30512) * C141495 +
            (C30511 + C30510 + C30509 + C30508) * C141494) *
               C141294 * C816) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eezz[28] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C30596 * C108 + C30599 + C30599 + C141469 * C714 +
                       C30597 * C1601 + C30600 + C30600 + C141384 * C2283) *
                          C141309 * C141494 +
                      (C30633 + C30634) * C141309 * C141495 + C30640 * C22071) *
                         C141294 * C816 -
                     ((C31605 + C31606) * C141309 * C22071 +
                      (C31607 + C31608) * C141309 * C141495 +
                      (C30597 * C3490 + C31593 + C31593 + C141384 * C4074 +
                       C30596 * C823 + C31594 + C31594 + C141469 * C1505) *
                          C141309 * C141494) *
                         C141294 * C141485) *
                        C818 +
                    (((C31608 + C31607) * C141309 * C141494 +
                      (C31606 + C31605) * C141309 * C141495 +
                      (C30596 * C820 + C31595 + C31595 + C141469 * C1502 +
                       C30597 * C3493 + C31596 + C31596 + C141384 * C4077) *
                          C141309 * C22071) *
                         C141294 * C141485 -
                     ((C30637 + C30638) * C141309 * C22071 +
                      (C30636 + C30635) * C141309 * C141495 +
                      (C30634 + C30633) * C141309 * C141494) *
                         C141294 * C816) *
                        C141483)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[29] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C22074 * C108 + C22081 + C22081 + C141494 * C120 +
                       C22076 * C109 + C22082 + C22082 + C141495 * C121 +
                       C22078 * C110 + C22083 + C22083 + C22071 * C122) *
                          C141469 +
                      (C31734 + C31735 + C31736) * C141384) *
                         C141309 * C1596 -
                     ((C22078 * C5327 + C29246 + C29246 + C22071 * C5335 +
                       C22076 * C5326 + C29245 + C29245 + C141495 * C5334 +
                       C22074 * C5325 + C29244 + C29244 + C141494 * C5333) *
                          C141384 +
                      (C31736 + C31735 + C31734) * C141469) *
                         C141309 * C141487) *
                        C141277 * C818 +
                    (((C31737 + C31738 + C31739) * C141469 +
                      (C22074 * C5326 + C31719 + C31719 + C141494 * C5334 +
                       C22076 * C5327 + C31720 + C31720 + C141495 * C5335 +
                       C22078 * C5328 + C31721 + C31721 + C22071 * C5336) *
                          C141384) *
                         C141309 * C141487 -
                     ((C31739 + C31738 + C31737) * C141384 +
                      (C22078 * C111 + C22090 + C22090 + C22071 * C123 +
                       C22076 * C110 + C22091 + C22091 + C141495 * C122 +
                       C22074 * C109 + C22092 + C22092 + C141494 * C121) *
                          C141469) *
                         C141309 * C1596) *
                        C141277 * C141483)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[29] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141309 * C189) * C22075 +
             (C188 * C114 + C141309 * C195) * C141494 + C218 * C22077 +
             C219 * C141495 + C220 * C22079 + C221 * C22071) *
                C141469 +
            (C31838 + C31839 + C31840 + C31841 + C31842 + C31843) * C141384) *
               C1596 -
           ((C14129 * C22071 + C14130 * C22079 + C14128 * C141495 +
             C14127 * C22077 + C16046 * C141494 + C16045 * C22075) *
                C141384 +
            (C31843 + C31842 + C31841 + C31840 + C31839 + C31838) * C141469) *
               C141487) *
              C141277 * C818 +
          (((C31844 + C31845 + C31846 + C31847 + C31848 + C31849) * C141469 +
            (C14127 * C22075 + C14128 * C141494 + C14130 * C22077 +
             C14129 * C141495 + (C188 * C5328 + C141309 * C5394) * C22079 +
             (C188 * C5332 + C141309 * C5398) * C22071) *
                C141384) *
               C141487 -
           ((C31849 + C31848 + C31847 + C31846 + C31845 + C31844) * C141384 +
            (C223 * C22071 + C222 * C22079 + C221 * C141495 + C220 * C22077 +
             C219 * C141494 + C218 * C22075) *
                C141469) *
               C1596) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eexz[29] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30075 * C108 + C141469 * C276 + C30076 * C1601 +
             C141384 * C1784) *
                C22075 +
            (C30075 * C114 + C141469 * C282 + C30076 * C1606 +
             C141384 * C1789) *
                C141494 +
            (C30102 + C30103) * C22077 + (C30104 + C30105) * C141495 +
            C30114 * C22079 + C30115 * C22071) *
               C141309 * C1596 -
           ((C31964 + C31965) * C22071 + (C31966 + C31967) * C22079 +
            (C31968 + C31969) * C141495 + (C31970 + C31971) * C22077 +
            (C30076 * C5329 + C141384 * C5453 + C30075 * C1606 +
             C141469 * C1789) *
                C141494 +
            (C30076 * C5325 + C141384 * C5449 + C30075 * C1601 +
             C141469 * C1784) *
                C22075) *
               C141309 * C141487) *
              C141277 * C818 +
          (((C31971 + C31970) * C22075 + (C31969 + C31968) * C141494 +
            (C31967 + C31966) * C22077 + (C31965 + C31964) * C141495 +
            (C30075 * C1598 + C141469 * C1781 + C30076 * C5328 +
             C141384 * C5452) *
                C22079 +
            (C30075 * C1603 + C141469 * C1786 + C30076 * C5332 +
             C141384 * C5456) *
                C22071) *
               C141309 * C141487 -
           ((C30110 + C30111) * C22071 + (C30112 + C30113) * C22079 +
            (C30109 + C30108) * C141495 + (C30107 + C30106) * C22077 +
            (C30105 + C30104) * C141494 + (C30103 + C30102) * C22075) *
               C141309 * C1596) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[29] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C22075 * C108 + C141494 * C114 + C22077 * C109 +
                        C141495 * C115 + C22079 * C110 + C22071 * C116) *
                           C188 +
                       (C22075 * C189 + C141494 * C362 + C22077 * C190 +
                        C141495 * C363 + C22079 * C191 + C22071 * C364) *
                           C141309) *
                          C141469 +
                      ((C32094 + C32095 + C32096) * C188 +
                       (C32097 + C32098 + C32099) * C141309) *
                          C141384) *
                         C1596 -
                     (((C22079 * C5393 + C22071 * C5509 + C22077 * C5392 +
                        C141495 * C5508 + C22075 * C5391 + C141494 * C5507) *
                           C141309 +
                       (C22079 * C5327 + C22071 * C5331 + C22077 * C5326 +
                        C141495 * C5330 + C22075 * C5325 + C141494 * C5329) *
                           C188) *
                          C141384 +
                      ((C32099 + C32098 + C32097) * C141309 +
                       (C32096 + C32095 + C32094) * C188) *
                          C141469) *
                         C141487) *
                        C141277 * C818 +
                    ((((C32100 + C32101 + C32102) * C188 +
                       (C32103 + C32104 + C32105) * C141309) *
                          C141469 +
                      ((C22075 * C5326 + C141494 * C5330 + C22077 * C5327 +
                        C141495 * C5331 + C22079 * C5328 + C22071 * C5332) *
                           C188 +
                       (C22075 * C5392 + C141494 * C5508 + C22077 * C5393 +
                        C141495 * C5509 + C22079 * C5394 + C22071 * C5510) *
                           C141309) *
                          C141384) *
                         C141487 -
                     (((C32105 + C32104 + C32103) * C141309 +
                       (C32102 + C32101 + C32100) * C188) *
                          C141384 +
                      ((C22079 * C192 + C22071 * C365 + C22077 * C191 +
                        C141495 * C364 + C22075 * C190 + C141494 * C363) *
                           C141309 +
                       (C22079 * C111 + C22071 * C117 + C22077 * C110 +
                        C141495 * C116 + C22075 * C109 + C141494 * C115) *
                           C188) *
                          C141469) *
                         C1596) *
                        C141277 * C141483)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[29] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C418 * C108 + C426 + C426 + C141309 * C419) * C141494 +
             C448 * C141495 + C449 * C22071) *
                C141469 +
            (C32204 + C32205 + C32206) * C141384) *
               C1596 -
           ((C14401 * C22071 + C14400 * C141495 + C16447 * C141494) * C141384 +
            (C32206 + C32205 + C32204) * C141469) *
               C141487) *
              C141277 * C818 +
          (((C32207 + C32208 + C32209) * C141469 +
            (C14400 * C141494 + C14401 * C141495 +
             (C418 * C5328 + C5569 + C5569 + C141309 * C5564) * C22071) *
                C141384) *
               C141487 -
           ((C32209 + C32208 + C32207) * C141384 +
            (C450 * C22071 + C449 * C141495 + C448 * C141494) * C141469) *
               C1596) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[29] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30075 * C108 + C141469 * C276 + C30076 * C1601 +
              C141384 * C1784) *
                 C188 +
             (C30075 * C189 + C141469 * C501 + C30076 * C1690 +
              C141384 * C2040) *
                 C141309) *
                C141494 +
            ((C30102 + C30103) * C188 + (C30351 + C30352) * C141309) * C141495 +
            C30359 * C22071) *
               C1596 -
           (((C32316 + C32317) * C141309 + (C31966 + C31967) * C188) * C22071 +
            ((C32318 + C32319) * C141309 + (C31970 + C31971) * C188) * C141495 +
            ((C30076 * C5391 + C141384 * C5619 + C30075 * C1690 +
              C141469 * C2040) *
                 C141309 +
             (C30076 * C5325 + C141384 * C5449 + C30075 * C1601 +
              C141469 * C1784) *
                 C188) *
                C141494) *
               C141487) *
              C141277 * C818 +
          ((((C31971 + C31970) * C188 + (C32319 + C32318) * C141309) * C141494 +
            ((C31967 + C31966) * C188 + (C32317 + C32316) * C141309) * C141495 +
            ((C30075 * C1598 + C141469 * C1781 + C30076 * C5328 +
              C141384 * C5452) *
                 C188 +
             (C30075 * C1687 + C141469 * C2037 + C30076 * C5394 +
              C141384 * C5622) *
                 C141309) *
                C22071) *
               C141487 -
           (((C30355 + C30356) * C141309 + (C30112 + C30113) * C188) * C22071 +
            ((C30354 + C30353) * C141309 + (C30107 + C30106) * C188) * C141495 +
            ((C30352 + C30351) * C141309 + (C30103 + C30102) * C188) *
                C141494) *
               C1596) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eezx[29] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C22075 * C108 + C141494 * C114 + C22077 * C109 +
                       C141495 * C115 + C22079 * C110 + C22071 * C116) *
                          C30075 +
                      (C22075 * C276 + C141494 * C579 + C22077 * C277 +
                       C141495 * C580 + C22079 * C278 + C22071 * C581) *
                          C141469 +
                      (C32094 + C32095 + C32096) * C30076 +
                      (C32430 + C32431 + C32432) * C141384) *
                         C141309 * C1596 -
                     ((C22079 * C5451 + C22071 * C5675 + C22077 * C5450 +
                       C141495 * C5674 + C22075 * C5449 + C141494 * C5673) *
                          C141384 +
                      (C22079 * C5327 + C22071 * C5331 + C22077 * C5326 +
                       C141495 * C5330 + C22075 * C5325 + C141494 * C5329) *
                          C30076 +
                      (C32432 + C32431 + C32430) * C141469 +
                      (C32096 + C32095 + C32094) * C30075) *
                         C141309 * C141487) *
                        C141277 * C818 +
                    (((C32100 + C32101 + C32102) * C30075 +
                      (C32433 + C32434 + C32435) * C141469 +
                      (C22075 * C5326 + C141494 * C5330 + C22077 * C5327 +
                       C141495 * C5331 + C22079 * C5328 + C22071 * C5332) *
                          C30076 +
                      (C22075 * C5450 + C141494 * C5674 + C22077 * C5451 +
                       C141495 * C5675 + C22079 * C5452 + C22071 * C5676) *
                          C141384) *
                         C141309 * C141487 -
                     ((C32435 + C32434 + C32433) * C141384 +
                      (C32102 + C32101 + C32100) * C30076 +
                      (C22079 * C279 + C22071 * C582 + C22077 * C278 +
                       C141495 * C581 + C22075 * C277 + C141494 * C580) *
                          C141469 +
                      (C22079 * C111 + C22071 * C117 + C22077 * C110 +
                       C141495 * C116 + C22075 * C109 + C141494 * C115) *
                          C30075) *
                         C141309 * C1596) *
                        C141277 * C141483)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[29] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141309 * C189) * C30075 +
             (C188 * C276 + C141309 * C635) * C141469 + C16043 * C30076 +
             C16798 * C141384) *
                C141494 +
            (C30508 + C30509 + C30510 + C30511) * C141495 + C30522 * C22071) *
               C1596 -
           ((C32534 + C32535 + C32536 + C32537) * C22071 +
            (C32538 + C32539 + C32540 + C32541) * C141495 +
            (C16799 * C141384 + C16045 * C30076 + C16798 * C141469 +
             C16043 * C30075) *
                C141494) *
               C141487) *
              C141277 * C818 +
          (((C32541 + C32540 + C32539 + C32538) * C141494 +
            (C32537 + C32536 + C32535 + C32534) * C141495 +
            (C1711 * C30075 + C2209 * C141469 +
             (C188 * C5328 + C141309 * C5394) * C30076 +
             (C188 * C5452 + C141309 * C5730) * C141384) *
                C22071) *
               C141487 -
           ((C30516 + C30517 + C30518 + C30519) * C22071 +
            (C30515 + C30514 + C30513 + C30512) * C141495 +
            (C30511 + C30510 + C30509 + C30508) * C141494) *
               C1596) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eezz[29] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C30596 * C108 + C30599 + C30599 + C141469 * C714 +
                       C30597 * C1601 + C30600 + C30600 + C141384 * C2283) *
                          C141309 * C141494 +
                      (C30633 + C30634) * C141309 * C141495 + C30640 * C22071) *
                         C1596 -
                     ((C32664 + C32665) * C141309 * C22071 +
                      (C32666 + C32667) * C141309 * C141495 +
                      (C30597 * C5325 + C32652 + C32652 + C141384 * C5781 +
                       C30596 * C1601 + C32653 + C32653 + C141469 * C2283) *
                          C141309 * C141494) *
                         C141487) *
                        C141277 * C818 +
                    (((C32667 + C32666) * C141309 * C141494 +
                      (C32665 + C32664) * C141309 * C141495 +
                      (C30596 * C1598 + C32654 + C32654 + C141469 * C2280 +
                       C30597 * C5328 + C32655 + C32655 + C141384 * C5784) *
                          C141309 * C22071) *
                         C141487 -
                     ((C30637 + C30638) * C141309 * C22071 +
                      (C30636 + C30635) * C141309 * C141495 +
                      (C30634 + C30633) * C141309 * C141494) *
                         C1596) *
                        C141277 * C141483)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[30] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C22074 * C108 + C22081 + C22081 + C141494 * C120 +
                       C22076 * C109 + C22082 + C22082 + C141495 * C121 +
                       C22078 * C110 + C22083 + C22083 + C22071 * C122) *
                          C141469 +
                      (C31734 + C31735 + C31736) * C141384) *
                         C141309 * C141294 * C2374 -
                     ((C26580 + C26581 + C26582) * C141384 +
                      (C22948 + C22947 + C22946) * C141469) *
                         C141309 * C141294 * C141485) *
                        C2376 +
                    (((C22949 + C22950 + C22951) * C141469 +
                      (C22074 * C3491 + C23985 + C23985 + C141494 * C3499 +
                       C22076 * C3492 + C23986 + C23986 + C141495 * C3500 +
                       C22078 * C3493 + C23987 + C23987 + C22071 * C3501) *
                          C141384) *
                         C141309 * C141294 * C141485 -
                     ((C31739 + C31738 + C31737) * C141384 +
                      (C22078 * C111 + C22090 + C22090 + C22071 * C123 +
                       C22076 * C110 + C22091 + C22091 + C141495 * C122 +
                       C22074 * C109 + C22092 + C22092 + C141494 * C121) *
                          C141469) *
                         C141309 * C141294 * C2374) *
                        C141483)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[30] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141309 * C189) * C22075 +
             (C188 * C114 + C141309 * C195) * C141494 + C218 * C22077 +
             C219 * C141495 + C220 * C22079 + C221 * C22071) *
                C141469 +
            (C31838 + C31839 + C31840 + C31841 + C31842 + C31843) * C141384) *
               C141294 * C2374 -
           ((C30841 * C22071 + C30842 * C22079 + C14992 * C141495 +
             C14993 * C22077 + C18716 * C141494 + C18715 * C22075) *
                C141384 +
            (C934 * C22071 + C935 * C22079 + C936 * C141495 + C937 * C22077 +
             (C188 * C828 + C141309 * C917) * C141494 +
             (C188 * C823 + C141309 * C912) * C22075) *
                C141469) *
               C141294 * C141485) *
              C2376 +
          (((C937 * C22075 + C936 * C141494 + C935 * C22077 + C934 * C141495 +
             C933 * C22079 + C932 * C22071) *
                C141469 +
            (C14993 * C22075 + C14992 * C141494 + C30842 * C22077 +
             C30841 * C141495 + (C188 * C3493 + C141309 * C3575) * C22079 +
             (C188 * C3497 + C141309 * C3579) * C22071) *
                C141384) *
               C141294 * C141485 -
           ((C31849 + C31848 + C31847 + C31846 + C31845 + C31844) * C141384 +
            (C223 * C22071 + C222 * C22079 + C221 * C141495 + C220 * C22077 +
             C219 * C141494 + C218 * C22075) *
                C141469) *
               C141294 * C2374) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eexz[30] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30075 * C108 + C141469 * C276 + C30076 * C1601 +
             C141384 * C1784) *
                C22075 +
            (C30075 * C114 + C141469 * C282 + C30076 * C1606 +
             C141384 * C1789) *
                C141494 +
            (C30102 + C30103) * C22077 + (C30104 + C30105) * C141495 +
            C30114 * C22079 + C30115 * C22071) *
               C141309 * C141294 * C2374 -
           ((C30957 + C30958) * C22071 + (C30959 + C30960) * C22079 +
            (C30961 + C30962) * C141495 + (C30963 + C30964) * C22077 +
            (C30076 * C3494 + C141384 * C3650 + C30075 * C828 +
             C141469 * C1011) *
                C141494 +
            (C30076 * C3490 + C141384 * C3646 + C30075 * C823 +
             C141469 * C1006) *
                C22075) *
               C141309 * C141294 * C141485) *
              C2376 +
          (((C30964 + C30963) * C22075 + (C30962 + C30961) * C141494 +
            (C30960 + C30959) * C22077 + (C30958 + C30957) * C141495 +
            (C30075 * C820 + C141469 * C1003 + C30076 * C3493 +
             C141384 * C3649) *
                C22079 +
            (C30075 * C825 + C141469 * C1008 + C30076 * C3497 +
             C141384 * C3653) *
                C22071) *
               C141309 * C141294 * C141485 -
           ((C30110 + C30111) * C22071 + (C30112 + C30113) * C22079 +
            (C30109 + C30108) * C141495 + (C30107 + C30106) * C22077 +
            (C30105 + C30104) * C141494 + (C30103 + C30102) * C22075) *
               C141309 * C141294 * C2374) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[30] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C22075 * C108 + C141494 * C114 + C22077 * C109 +
                        C141495 * C115 + C22079 * C110 + C22071 * C116) *
                           C188 +
                       (C22075 * C189 + C141494 * C362 + C22077 * C190 +
                        C141495 * C363 + C22079 * C191 + C22071 * C364) *
                           C141309) *
                          C141469 +
                      ((C32094 + C32095 + C32096) * C188 +
                       (C32097 + C32098 + C32099) * C141309) *
                          C141384) *
                         C141294 * C2374 -
                     (((C26895 + C26896 + C26897) * C141309 +
                       (C26898 + C26899 + C26900) * C188) *
                          C141384 +
                      ((C23311 + C23310 + C23309) * C141309 +
                       (C23308 + C23307 + C23306) * C188) *
                          C141469) *
                         C141294 * C141485) *
                        C2376 +
                    ((((C23312 + C23313 + C23314) * C188 +
                       (C23315 + C23316 + C23317) * C141309) *
                          C141469 +
                      ((C22075 * C3491 + C141494 * C3495 + C22077 * C3492 +
                        C141495 * C3496 + C22079 * C3493 + C22071 * C3497) *
                           C188 +
                       (C22075 * C3573 + C141494 * C3721 + C22077 * C3574 +
                        C141495 * C3722 + C22079 * C3575 + C22071 * C3723) *
                           C141309) *
                          C141384) *
                         C141294 * C141485 -
                     (((C32105 + C32104 + C32103) * C141309 +
                       (C32102 + C32101 + C32100) * C188) *
                          C141384 +
                      ((C22079 * C192 + C22071 * C365 + C22077 * C191 +
                        C141495 * C364 + C22075 * C190 + C141494 * C363) *
                           C141309 +
                       (C22079 * C111 + C22071 * C117 + C22077 * C110 +
                        C141495 * C116 + C22075 * C109 + C141494 * C115) *
                           C188) *
                          C141469) *
                         C141294 * C2374) *
                        C141483)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[30] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C418 * C108 + C426 + C426 + C141309 * C419) * C141494 +
             C448 * C141495 + C449 * C22071) *
                C141469 +
            (C32204 + C32205 + C32206) * C141384) *
               C141294 * C2374 -
           ((C31165 * C22071 + C15322 * C141495 + C19049 * C141494) * C141384 +
            (C1192 * C22071 + C1193 * C141495 +
             (C418 * C823 + C1183 + C1183 + C141309 * C1171) * C141494) *
                C141469) *
               C141294 * C141485) *
              C2376 +
          (((C1193 * C141494 + C1192 * C141495 + C1191 * C22071) * C141469 +
            (C15322 * C141494 + C31165 * C141495 +
             (C418 * C3493 + C3798 + C3798 + C141309 * C3793) * C22071) *
                C141384) *
               C141294 * C141485 -
           ((C32209 + C32208 + C32207) * C141384 +
            (C450 * C22071 + C449 * C141495 + C448 * C141494) * C141469) *
               C141294 * C2374) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[30] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30075 * C108 + C141469 * C276 + C30076 * C1601 +
              C141384 * C1784) *
                 C188 +
             (C30075 * C189 + C141469 * C501 + C30076 * C1690 +
              C141384 * C2040) *
                 C141309) *
                C141494 +
            ((C30102 + C30103) * C188 + (C30351 + C30352) * C141309) * C141495 +
            C30359 * C22071) *
               C141294 * C2374 -
           (((C31272 + C31273) * C141309 + (C30959 + C30960) * C188) * C22071 +
            ((C31274 + C31275) * C141309 + (C30963 + C30964) * C188) * C141495 +
            ((C30076 * C3572 + C141384 * C3864 + C30075 * C912 +
              C141469 * C1262) *
                 C141309 +
             (C30076 * C3490 + C141384 * C3646 + C30075 * C823 +
              C141469 * C1006) *
                 C188) *
                C141494) *
               C141294 * C141485) *
              C2376 +
          ((((C30964 + C30963) * C188 + (C31275 + C31274) * C141309) * C141494 +
            ((C30960 + C30959) * C188 + (C31273 + C31272) * C141309) * C141495 +
            ((C30075 * C820 + C141469 * C1003 + C30076 * C3493 +
              C141384 * C3649) *
                 C188 +
             (C30075 * C909 + C141469 * C1259 + C30076 * C3575 +
              C141384 * C3867) *
                 C141309) *
                C22071) *
               C141294 * C141485 -
           (((C30355 + C30356) * C141309 + (C30112 + C30113) * C188) * C22071 +
            ((C30354 + C30353) * C141309 + (C30107 + C30106) * C188) * C141495 +
            ((C30352 + C30351) * C141309 + (C30103 + C30102) * C188) *
                C141494) *
               C141294 * C2374) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eezx[30] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C22075 * C108 + C141494 * C114 + C22077 * C109 +
                       C141495 * C115 + C22079 * C110 + C22071 * C116) *
                          C30075 +
                      (C22075 * C276 + C141494 * C579 + C22077 * C277 +
                       C141495 * C580 + C22079 * C278 + C22071 * C581) *
                          C141469 +
                      (C32094 + C32095 + C32096) * C30076 +
                      (C32430 + C32431 + C32432) * C141384) *
                         C141309 * C141294 * C2374 -
                     ((C27207 + C27208 + C27209) * C141384 +
                      (C26898 + C26899 + C26900) * C30076 +
                      (C23662 + C23661 + C23660) * C141469 +
                      (C23308 + C23307 + C23306) * C30075) *
                         C141309 * C141294 * C141485) *
                        C2376 +
                    (((C23312 + C23313 + C23314) * C30075 +
                      (C23663 + C23664 + C23665) * C141469 +
                      (C22075 * C3491 + C141494 * C3495 + C22077 * C3492 +
                       C141495 * C3496 + C22079 * C3493 + C22071 * C3497) *
                          C30076 +
                      (C22075 * C3647 + C141494 * C3935 + C22077 * C3648 +
                       C141495 * C3936 + C22079 * C3649 + C22071 * C3937) *
                          C141384) *
                         C141309 * C141294 * C141485 -
                     ((C32435 + C32434 + C32433) * C141384 +
                      (C32102 + C32101 + C32100) * C30076 +
                      (C22079 * C279 + C22071 * C582 + C22077 * C278 +
                       C141495 * C581 + C22075 * C277 + C141494 * C580) *
                          C141469 +
                      (C22079 * C111 + C22071 * C117 + C22077 * C110 +
                       C141495 * C116 + C22075 * C109 + C141494 * C115) *
                          C30075) *
                         C141309 * C141294 * C2374) *
                        C141483)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[30] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141309 * C189) * C30075 +
             (C188 * C276 + C141309 * C635) * C141469 + C16043 * C30076 +
             C16798 * C141384) *
                C141494 +
            (C30508 + C30509 + C30510 + C30511) * C141495 + C30522 * C22071) *
               C141294 * C2374 -
           ((C31482 + C31474 + C31475 + C31476) * C22071 +
            (C31477 + C31478 + C31479 + C31480) * C141495 +
            (C19363 * C141384 + C18715 * C30076 +
             (C188 * C1006 + C141309 * C1419) * C141469 +
             (C188 * C823 + C141309 * C912) * C30075) *
                C141494) *
               C141294 * C141485) *
              C2376 +
          (((C31480 + C31479 + C31478 + C31477) * C141494 +
            (C31476 + C31475 + C31474 + C31482) * C141495 +
            (C933 * C30075 + C1431 * C141469 +
             (C188 * C3493 + C141309 * C3575) * C30076 +
             (C188 * C3649 + C141309 * C4007) * C141384) *
                C22071) *
               C141294 * C141485 -
           ((C30516 + C30517 + C30518 + C30519) * C22071 +
            (C30515 + C30514 + C30513 + C30512) * C141495 +
            (C30511 + C30510 + C30509 + C30508) * C141494) *
               C141294 * C2374) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eezz[30] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C30596 * C108 + C30599 + C30599 + C141469 * C714 +
                       C30597 * C1601 + C30600 + C30600 + C141384 * C2283) *
                          C141309 * C141494 +
                      (C30633 + C30634) * C141309 * C141495 + C30640 * C22071) *
                         C141294 * C2374 -
                     ((C31605 + C31606) * C141309 * C22071 +
                      (C31607 + C31608) * C141309 * C141495 +
                      (C30597 * C3490 + C31593 + C31593 + C141384 * C4074 +
                       C30596 * C823 + C31594 + C31594 + C141469 * C1505) *
                          C141309 * C141494) *
                         C141294 * C141485) *
                        C2376 +
                    (((C31608 + C31607) * C141309 * C141494 +
                      (C31606 + C31605) * C141309 * C141495 +
                      (C30596 * C820 + C31595 + C31595 + C141469 * C1502 +
                       C30597 * C3493 + C31596 + C31596 + C141384 * C4077) *
                          C141309 * C22071) *
                         C141294 * C141485 -
                     ((C30637 + C30638) * C141309 * C22071 +
                      (C30636 + C30635) * C141309 * C141495 +
                      (C30634 + C30633) * C141309 * C141494) *
                         C141294 * C2374) *
                        C141483)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[31] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C22074 * C108 + C22081 + C22081 + C141494 * C120 +
                      C22076 * C109 + C22082 + C22082 + C141495 * C121 +
                      C22078 * C110 + C22083 + C22083 + C22071 * C122) *
                         C141469 +
                     (C31734 + C31735 + C31736) * C141384) *
                        C141309 * C141294 * C2956 -
                    ((C26580 + C26581 + C26582) * C141384 +
                     (C22948 + C22947 + C22946) * C141469) *
                        C141309 * C141294 * C2957 +
                    ((C25835 + C25834 + C25833) * C141469 +
                     (C22074 * C7887 + C26571 + C26571 + C141494 * C7893 +
                      C22076 * C7886 + C26572 + C26572 + C141495 * C7892 +
                      C22078 * C7888 + C26573 + C26573 + C22071 * C7894) *
                         C141384) *
                        C141309 * C141294 * C2958) *
                   C141243) /
                  (p * q * std::sqrt(p + q));
    d2eexy[31] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141309 * C189) * C22075 +
            (C188 * C114 + C141309 * C195) * C141494 + C218 * C22077 +
            C219 * C141495 + C220 * C22079 + C221 * C22071) *
               C141469 +
           (C31838 + C31839 + C31840 + C31841 + C31842 + C31843) * C141384) *
              C141294 * C2956 -
          ((C30841 * C22071 + C30842 * C22079 + C14992 * C141495 +
            C14993 * C22077 + C18716 * C141494 + C18715 * C22075) *
               C141384 +
           (C934 * C22071 + C935 * C22079 + C936 * C141495 + C937 * C22077 +
            (C188 * C828 + C141309 * C917) * C141494 +
            (C188 * C823 + C141309 * C912) * C22075) *
               C141469) *
              C141294 * C2957 +
          (((C188 * C2960 + C141309 * C3026) * C22075 +
            (C188 * C2964 + C141309 * C3030) * C141494 +
            (C188 * C2961 + C141309 * C3027) * C22077 +
            (C188 * C2965 + C141309 * C3031) * C141495 +
            (C188 * C2962 + C141309 * C3028) * C22079 +
            (C188 * C2966 + C141309 * C3032) * C22071) *
               C141469 +
           ((C188 * C7887 + C141309 * C8006) * C22075 +
            (C188 * C7890 + C141309 * C8009) * C141494 +
            (C188 * C7886 + C141309 * C8005) * C22077 +
            (C188 * C7889 + C141309 * C8008) * C141495 +
            (C188 * C7888 + C141309 * C8007) * C22079 +
            (C188 * C7891 + C141309 * C8010) * C22071) *
               C141384) *
              C141294 * C2958) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eexz[31] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C30075 * C108 + C141469 * C276 + C30076 * C1601 + C141384 * C1784) *
               C22075 +
           (C30075 * C114 + C141469 * C282 + C30076 * C1606 + C141384 * C1789) *
               C141494 +
           (C30102 + C30103) * C22077 + (C30104 + C30105) * C141495 +
           C30114 * C22079 + C30115 * C22071) *
              C141309 * C141294 * C2956 -
          ((C30957 + C30958) * C22071 + (C30959 + C30960) * C22079 +
           (C30961 + C30962) * C141495 + (C30963 + C30964) * C22077 +
           (C30076 * C3494 + C141384 * C3650 + C30075 * C828 +
            C141469 * C1011) *
               C141494 +
           (C30076 * C3490 + C141384 * C3646 + C30075 * C823 +
            C141469 * C1006) *
               C22075) *
              C141309 * C141294 * C2957 +
          ((C30075 * C2960 + C141469 * C3084 + C30076 * C7887 +
            C141384 * C8128) *
               C22075 +
           (C30075 * C2964 + C141469 * C3088 + C30076 * C7890 +
            C141384 * C8131) *
               C141494 +
           (C30075 * C2961 + C141469 * C3085 + C30076 * C7886 +
            C141384 * C8127) *
               C22077 +
           (C30075 * C2965 + C141469 * C3089 + C30076 * C7889 +
            C141384 * C8130) *
               C141495 +
           (C30075 * C2962 + C141469 * C3086 + C30076 * C7888 +
            C141384 * C8129) *
               C22079 +
           (C30075 * C2966 + C141469 * C3090 + C30076 * C7891 +
            C141384 * C8132) *
               C22071) *
              C141309 * C141294 * C2958) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eeyx[31] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C22075 * C108 + C141494 * C114 + C22077 * C109 +
                       C141495 * C115 + C22079 * C110 + C22071 * C116) *
                          C188 +
                      (C22075 * C189 + C141494 * C362 + C22077 * C190 +
                       C141495 * C363 + C22079 * C191 + C22071 * C364) *
                          C141309) *
                         C141469 +
                     ((C32094 + C32095 + C32096) * C188 +
                      (C32097 + C32098 + C32099) * C141309) *
                         C141384) *
                        C141294 * C2956 -
                    (((C26895 + C26896 + C26897) * C141309 +
                      (C26898 + C26899 + C26900) * C188) *
                         C141384 +
                     ((C23311 + C23310 + C23309) * C141309 +
                      (C23308 + C23307 + C23306) * C188) *
                         C141469) *
                        C141294 * C2957 +
                    (((C26081 + C26080 + C26079) * C188 +
                      (C26078 + C26077 + C26076) * C141309) *
                         C141469 +
                     ((C22075 * C7887 + C141494 * C7890 + C22077 * C7886 +
                       C141495 * C7889 + C22079 * C7888 + C22071 * C7891) *
                          C188 +
                      (C22075 * C8006 + C141494 * C8244 + C22077 * C8005 +
                       C141495 * C8243 + C22079 * C8007 + C22071 * C8245) *
                          C141309) *
                         C141384) *
                        C141294 * C2958) *
                   C141243) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[31] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C418 * C108 + C426 + C426 + C141309 * C419) * C141494 +
            C448 * C141495 + C449 * C22071) *
               C141469 +
           (C32204 + C32205 + C32206) * C141384) *
              C141294 * C2956 -
          ((C31165 * C22071 + C15322 * C141495 + C19049 * C141494) * C141384 +
           (C1192 * C22071 + C1193 * C141495 +
            (C418 * C823 + C1183 + C1183 + C141309 * C1171) * C141494) *
               C141469) *
              C141294 * C2957 +
          (((C418 * C2960 + C3201 + C3201 + C141309 * C3196) * C141494 +
            (C418 * C2961 + C3202 + C3202 + C141309 * C3197) * C141495 +
            (C418 * C2962 + C3203 + C3203 + C141309 * C3198) * C22071) *
               C141469 +
           ((C418 * C7887 + C18179 + C18179 + C141309 * C8345) * C141494 +
            (C418 * C7886 + C18180 + C18180 + C141309 * C8344) * C141495 +
            (C418 * C7888 + C33920 + C33920 + C141309 * C8346) * C22071) *
               C141384) *
              C141294 * C2958) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eeyz[31] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30075 * C108 + C141469 * C276 + C30076 * C1601 +
             C141384 * C1784) *
                C188 +
            (C30075 * C189 + C141469 * C501 + C30076 * C1690 +
             C141384 * C2040) *
                C141309) *
               C141494 +
           ((C30102 + C30103) * C188 + (C30351 + C30352) * C141309) * C141495 +
           C30359 * C22071) *
              C141294 * C2956 -
          (((C31272 + C31273) * C141309 + (C30959 + C30960) * C188) * C22071 +
           ((C31274 + C31275) * C141309 + (C30963 + C30964) * C188) * C141495 +
           ((C30076 * C3572 + C141384 * C3864 + C30075 * C912 +
             C141469 * C1262) *
                C141309 +
            (C30076 * C3490 + C141384 * C3646 + C30075 * C823 +
             C141469 * C1006) *
                C188) *
               C141494) *
              C141294 * C2957 +
          (((C30075 * C2960 + C141469 * C3084 + C30076 * C7887 +
             C141384 * C8128) *
                C188 +
            (C30075 * C3026 + C141469 * C3254 + C30076 * C8006 +
             C141384 * C8470) *
                C141309) *
               C141494 +
           ((C30075 * C2961 + C141469 * C3085 + C30076 * C7886 +
             C141384 * C8127) *
                C188 +
            (C30075 * C3027 + C141469 * C3255 + C30076 * C8005 +
             C141384 * C8469) *
                C141309) *
               C141495 +
           ((C30075 * C2962 + C141469 * C3086 + C30076 * C7888 +
             C141384 * C8129) *
                C188 +
            (C30075 * C3028 + C141469 * C3256 + C30076 * C8007 +
             C141384 * C8471) *
                C141309) *
               C22071) *
              C141294 * C2958) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eezx[31] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C22075 * C108 + C141494 * C114 + C22077 * C109 +
                      C141495 * C115 + C22079 * C110 + C22071 * C116) *
                         C30075 +
                     (C22075 * C276 + C141494 * C579 + C22077 * C277 +
                      C141495 * C580 + C22079 * C278 + C22071 * C581) *
                         C141469 +
                     (C32094 + C32095 + C32096) * C30076 +
                     (C32430 + C32431 + C32432) * C141384) *
                        C141309 * C141294 * C2956 -
                    ((C27207 + C27208 + C27209) * C141384 +
                     (C26898 + C26899 + C26900) * C30076 +
                     (C23662 + C23661 + C23660) * C141469 +
                     (C23308 + C23307 + C23306) * C30075) *
                        C141309 * C141294 * C2957 +
                    ((C26081 + C26080 + C26079) * C30075 +
                     (C26318 + C26317 + C26316) * C141469 +
                     (C22075 * C7887 + C141494 * C7890 + C22077 * C7886 +
                      C141495 * C7889 + C22079 * C7888 + C22071 * C7891) *
                         C30076 +
                     (C22075 * C8128 + C141494 * C8583 + C22077 * C8127 +
                      C141495 * C8582 + C22079 * C8129 + C22071 * C8584) *
                         C141384) *
                        C141309 * C141294 * C2958) *
                   C141243) /
                  (p * q * std::sqrt(p + q));
    d2eezy[31] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141309 * C189) * C30075 +
            (C188 * C276 + C141309 * C635) * C141469 + C16043 * C30076 +
            C16798 * C141384) *
               C141494 +
           (C30508 + C30509 + C30510 + C30511) * C141495 + C30522 * C22071) *
              C141294 * C2956 -
          ((C31482 + C31474 + C31475 + C31476) * C22071 +
           (C31477 + C31478 + C31479 + C31480) * C141495 +
           (C19363 * C141384 + C18715 * C30076 +
            (C188 * C1006 + C141309 * C1419) * C141469 +
            (C188 * C823 + C141309 * C912) * C30075) *
               C141494) *
              C141294 * C2957 +
          (((C188 * C2960 + C141309 * C3026) * C30075 +
            (C188 * C3084 + C141309 * C3362) * C141469 +
            (C188 * C7887 + C141309 * C8006) * C30076 +
            (C188 * C8128 + C141309 * C8684) * C141384) *
               C141494 +
           ((C188 * C2961 + C141309 * C3027) * C30075 +
            (C188 * C3085 + C141309 * C3363) * C141469 +
            (C188 * C7886 + C141309 * C8005) * C30076 +
            (C188 * C8127 + C141309 * C8683) * C141384) *
               C141495 +
           ((C188 * C2962 + C141309 * C3028) * C30075 +
            (C188 * C3086 + C141309 * C3364) * C141469 +
            (C188 * C7888 + C141309 * C8007) * C30076 +
            (C188 * C8129 + C141309 * C8685) * C141384) *
               C22071) *
              C141294 * C2958) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eezz[31] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C30596 * C108 + C30599 + C30599 + C141469 * C714 +
                      C30597 * C1601 + C30600 + C30600 + C141384 * C2283) *
                         C141309 * C141494 +
                     (C30633 + C30634) * C141309 * C141495 + C30640 * C22071) *
                        C141294 * C2956 -
                    ((C31605 + C31606) * C141309 * C22071 +
                     (C31607 + C31608) * C141309 * C141495 +
                     (C30597 * C3490 + C31593 + C31593 + C141384 * C4074 +
                      C30596 * C823 + C31594 + C31594 + C141469 * C1505) *
                         C141309 * C141494) *
                        C141294 * C2957 +
                    ((C30596 * C2960 + C34217 + C34217 + C141469 * C3416 +
                      C30597 * C7887 + C34218 + C34218 + C141384 * C8794) *
                         C141309 * C141494 +
                     (C30596 * C2961 + C34219 + C34219 + C141469 * C3417 +
                      C30597 * C7886 + C34220 + C34220 + C141384 * C8793) *
                         C141309 * C141495 +
                     (C30596 * C2962 + C34221 + C34221 + C141469 * C3418 +
                      C30597 * C7888 + C34222 + C34222 + C141384 * C8795) *
                         C141309 * C22071) *
                        C141294 * C2958) *
                   C141243) /
                  (p * q * std::sqrt(p + q));
    d2eexx[32] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C22074 * C108 + C22081 + C22081 + C141494 * C120 +
                       C22076 * C109 + C22082 + C22082 + C141495 * C121 +
                       C22078 * C110 + C22083 + C22083 + C22071 * C122) *
                          C141469 +
                      (C31734 + C31735 + C31736) * C141384) *
                         C141309 * C1596 -
                     ((C22078 * C5327 + C29246 + C29246 + C22071 * C5335 +
                       C22076 * C5326 + C29245 + C29245 + C141495 * C5334 +
                       C22074 * C5325 + C29244 + C29244 + C141494 * C5333) *
                          C141384 +
                      (C31736 + C31735 + C31734) * C141469) *
                         C141309 * C141487) *
                        C2374 +
                    (((C26582 + C26581 + C26580) * C141469 +
                      (C22074 * C13301 + C29247 + C29247 + C141494 * C13309 +
                       C22076 * C13302 + C29248 + C29248 + C141495 * C13310 +
                       C22078 * C14876 + C29249 + C29249 + C22071 * C14878) *
                          C141384) *
                         C141309 * C141487 -
                     ((C26580 + C26581 + C26582) * C141384 +
                      (C22948 + C22947 + C22946) * C141469) *
                         C141309 * C1596) *
                        C141485) *
                   C141243) /
                  (p * q * std::sqrt(p + q));
    d2eexy[32] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141309 * C189) * C22075 +
             (C188 * C114 + C141309 * C195) * C141494 + C218 * C22077 +
             C219 * C141495 + C220 * C22079 + C221 * C22071) *
                C141469 +
            (C31838 + C31839 + C31840 + C31841 + C31842 + C31843) * C141384) *
               C1596 -
           ((C14129 * C22071 + C14130 * C22079 + C14128 * C141495 +
             C14127 * C22077 + C16046 * C141494 + C16045 * C22075) *
                C141384 +
            (C31843 + C31842 + C31841 + C31840 + C31839 + C31838) * C141469) *
               C141487) *
              C2374 +
          (((C34419 + C34420 + C34421 + C34422 + C34423 + C34424) * C141469 +
            (C18717 * C22075 + C18718 * C141494 + C14991 * C22077 +
             C14990 * C141495 + (C188 * C14876 + C141309 * C14979) * C22079 +
             (C188 * C14877 + C141309 * C14980) * C22071) *
                C141384) *
               C141487 -
           ((C34424 + C34423 + C34422 + C34421 + C34420 + C34419) * C141384 +
            (C934 * C22071 + C935 * C22079 + C936 * C141495 + C937 * C22077 +
             (C188 * C828 + C141309 * C917) * C141494 +
             (C188 * C823 + C141309 * C912) * C22075) *
                C141469) *
               C1596) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eexz[32] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C30075 * C108 + C141469 * C276 + C30076 * C1601 +
                       C141384 * C1784) *
                          C22075 +
                      (C30075 * C114 + C141469 * C282 + C30076 * C1606 +
                       C141384 * C1789) *
                          C141494 +
                      (C30102 + C30103) * C22077 + (C30104 + C30105) * C141495 +
                      C30114 * C22079 + C30115 * C22071) *
                         C141309 * C1596 -
                     ((C31964 + C31965) * C22071 + (C31966 + C31967) * C22079 +
                      (C31968 + C31969) * C141495 + (C31970 + C31971) * C22077 +
                      (C30076 * C5329 + C141384 * C5453 + C30075 * C1606 +
                       C141469 * C1789) *
                          C141494 +
                      (C30076 * C5325 + C141384 * C5449 + C30075 * C1601 +
                       C141469 * C1784) *
                          C22075) *
                         C141309 * C141487) *
                        C2374 +
                    (((C30075 * C3490 + C141469 * C3646 + C30076 * C13301 +
                       C141384 * C13475) *
                          C22075 +
                      (C30075 * C3494 + C141469 * C3650 + C30076 * C13305 +
                       C141384 * C13479) *
                          C141494 +
                      (C30075 * C3491 + C141469 * C3647 + C30076 * C13302 +
                       C141384 * C13476) *
                          C22077 +
                      (C30075 * C3495 + C141469 * C3651 + C30076 * C13306 +
                       C141384 * C13480) *
                          C141495 +
                      (C30075 * C3492 + C141469 * C3648 + C30076 * C14876 +
                       C141384 * C15091) *
                          C22079 +
                      (C30075 * C3496 + C141469 * C3652 + C30076 * C14877 +
                       C141384 * C15092) *
                          C22071) *
                         C141309 * C141487 -
                     ((C30957 + C30958) * C22071 + (C30959 + C30960) * C22079 +
                      (C30961 + C30962) * C141495 + (C30963 + C30964) * C22077 +
                      (C30076 * C3494 + C141384 * C3650 + C30075 * C828 +
                       C141469 * C1011) *
                          C141494 +
                      (C30076 * C3490 + C141384 * C3646 + C30075 * C823 +
                       C141469 * C1006) *
                          C22075) *
                         C141309 * C1596) *
                        C141485) *
                   C141243) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[32] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C22075 * C108 + C141494 * C114 + C22077 * C109 +
                        C141495 * C115 + C22079 * C110 + C22071 * C116) *
                           C188 +
                       (C22075 * C189 + C141494 * C362 + C22077 * C190 +
                        C141495 * C363 + C22079 * C191 + C22071 * C364) *
                           C141309) *
                          C141469 +
                      ((C32094 + C32095 + C32096) * C188 +
                       (C32097 + C32098 + C32099) * C141309) *
                          C141384) *
                         C1596 -
                     (((C22079 * C5393 + C22071 * C5509 + C22077 * C5392 +
                        C141495 * C5508 + C22075 * C5391 + C141494 * C5507) *
                           C141309 +
                       (C22079 * C5327 + C22071 * C5331 + C22077 * C5326 +
                        C141495 * C5330 + C22075 * C5325 + C141494 * C5329) *
                           C188) *
                          C141384 +
                      ((C32099 + C32098 + C32097) * C141309 +
                       (C32096 + C32095 + C32094) * C188) *
                          C141469) *
                         C141487) *
                        C2374 +
                    ((((C26900 + C26899 + C26898) * C188 +
                       (C26897 + C26896 + C26895) * C141309) *
                          C141469 +
                      ((C22075 * C13301 + C141494 * C13305 + C22077 * C13302 +
                        C141495 * C13306 + C22079 * C14876 + C22071 * C14877) *
                           C188 +
                       (C22075 * C13393 + C141494 * C13557 + C22077 * C13395 +
                        C141495 * C13558 + C22079 * C14979 + C22071 * C15209) *
                           C141309) *
                          C141384) *
                         C141487 -
                     (((C26895 + C26896 + C26897) * C141309 +
                       (C26898 + C26899 + C26900) * C188) *
                          C141384 +
                      ((C23311 + C23310 + C23309) * C141309 +
                       (C23308 + C23307 + C23306) * C188) *
                          C141469) *
                         C1596) *
                        C141485) *
                   C141243) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[32] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C418 * C108 + C426 + C426 + C141309 * C419) * C141494 +
             C448 * C141495 + C449 * C22071) *
                C141469 +
            (C32204 + C32205 + C32206) * C141384) *
               C1596 -
           ((C14401 * C22071 + C14400 * C141495 + C16447 * C141494) * C141384 +
            (C32206 + C32205 + C32204) * C141469) *
               C141487) *
              C2374 +
          (((C34719 + C34720 + C34721) * C141469 +
            (C19050 * C141494 + C15321 * C141495 +
             (C418 * C14876 + C15316 + C15316 + C141309 * C15308) * C22071) *
                C141384) *
               C141487 -
           ((C34721 + C34720 + C34719) * C141384 +
            (C1192 * C22071 + C1193 * C141495 +
             (C418 * C823 + C1183 + C1183 + C141309 * C1171) * C141494) *
                C141469) *
               C1596) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eeyz[32] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30075 * C108 + C141469 * C276 + C30076 * C1601 +
              C141384 * C1784) *
                 C188 +
             (C30075 * C189 + C141469 * C501 + C30076 * C1690 +
              C141384 * C2040) *
                 C141309) *
                C141494 +
            ((C30102 + C30103) * C188 + (C30351 + C30352) * C141309) * C141495 +
            C30359 * C22071) *
               C1596 -
           (((C32316 + C32317) * C141309 + (C31966 + C31967) * C188) * C22071 +
            ((C32318 + C32319) * C141309 + (C31970 + C31971) * C188) * C141495 +
            ((C30076 * C5391 + C141384 * C5619 + C30075 * C1690 +
              C141469 * C2040) *
                 C141309 +
             (C30076 * C5325 + C141384 * C5449 + C30075 * C1601 +
              C141469 * C1784) *
                 C188) *
                C141494) *
               C141487) *
              C2374 +
          ((((C30075 * C3490 + C141469 * C3646 + C30076 * C13301 +
              C141384 * C13475) *
                 C188 +
             (C30075 * C3572 + C141469 * C3864 + C30076 * C13393 +
              C141384 * C13719) *
                 C141309) *
                C141494 +
            ((C30075 * C3491 + C141469 * C3647 + C30076 * C13302 +
              C141384 * C13476) *
                 C188 +
             (C30075 * C3573 + C141469 * C3865 + C30076 * C13395 +
              C141384 * C13721) *
                 C141309) *
                C141495 +
            ((C30075 * C3492 + C141469 * C3648 + C30076 * C14876 +
              C141384 * C15091) *
                 C188 +
             (C30075 * C3574 + C141469 * C3866 + C30076 * C14979 +
              C141384 * C15420) *
                 C141309) *
                C22071) *
               C141487 -
           (((C31272 + C31273) * C141309 + (C30959 + C30960) * C188) * C22071 +
            ((C31274 + C31275) * C141309 + (C30963 + C30964) * C188) * C141495 +
            ((C30076 * C3572 + C141384 * C3864 + C30075 * C912 +
              C141469 * C1262) *
                 C141309 +
             (C30076 * C3490 + C141384 * C3646 + C30075 * C823 +
              C141469 * C1006) *
                 C188) *
                C141494) *
               C1596) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eezx[32] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C22075 * C108 + C141494 * C114 + C22077 * C109 +
                       C141495 * C115 + C22079 * C110 + C22071 * C116) *
                          C30075 +
                      (C22075 * C276 + C141494 * C579 + C22077 * C277 +
                       C141495 * C580 + C22079 * C278 + C22071 * C581) *
                          C141469 +
                      (C32094 + C32095 + C32096) * C30076 +
                      (C32430 + C32431 + C32432) * C141384) *
                         C141309 * C1596 -
                     ((C22079 * C5451 + C22071 * C5675 + C22077 * C5450 +
                       C141495 * C5674 + C22075 * C5449 + C141494 * C5673) *
                          C141384 +
                      (C22079 * C5327 + C22071 * C5331 + C22077 * C5326 +
                       C141495 * C5330 + C22075 * C5325 + C141494 * C5329) *
                          C30076 +
                      (C32432 + C32431 + C32430) * C141469 +
                      (C32096 + C32095 + C32094) * C30075) *
                         C141309 * C141487) *
                        C2374 +
                    (((C26900 + C26899 + C26898) * C30075 +
                      (C27209 + C27208 + C27207) * C141469 +
                      (C22075 * C13301 + C141494 * C13305 + C22077 * C13302 +
                       C141495 * C13306 + C22079 * C14876 + C22071 * C14877) *
                          C30076 +
                      (C22075 * C13475 + C141494 * C13797 + C22077 * C13476 +
                       C141495 * C13798 + C22079 * C15091 + C22071 * C15528) *
                          C141384) *
                         C141309 * C141487 -
                     ((C27207 + C27208 + C27209) * C141384 +
                      (C26898 + C26899 + C26900) * C30076 +
                      (C23662 + C23661 + C23660) * C141469 +
                      (C23308 + C23307 + C23306) * C30075) *
                         C141309 * C1596) *
                        C141485) *
                   C141243) /
                  (p * q * std::sqrt(p + q));
    d2eezy[32] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141309 * C189) * C30075 +
             (C188 * C276 + C141309 * C635) * C141469 + C16043 * C30076 +
             C16798 * C141384) *
                C141494 +
            (C30508 + C30509 + C30510 + C30511) * C141495 + C30522 * C22071) *
               C1596 -
           ((C32534 + C32535 + C32536 + C32537) * C22071 +
            (C32538 + C32539 + C32540 + C32541) * C141495 +
            (C16799 * C141384 + C16045 * C30076 + C16798 * C141469 +
             C16043 * C30075) *
                C141494) *
               C141487) *
              C2374 +
          (((C18715 * C30075 + C19363 * C141469 + C18717 * C30076 +
             C19364 * C141384) *
                C141494 +
            (C14993 * C30075 + C15638 * C141469 + C14991 * C30076 +
             C15637 * C141384) *
                C141495 +
            (C30842 * C30075 + C31481 * C141469 +
             (C188 * C14876 + C141309 * C14979) * C30076 +
             (C188 * C15091 + C141309 * C15627) * C141384) *
                C22071) *
               C141487 -
           ((C31482 + C31474 + C31475 + C31476) * C22071 +
            (C31477 + C31478 + C31479 + C31480) * C141495 +
            (C19363 * C141384 + C18715 * C30076 +
             (C188 * C1006 + C141309 * C1419) * C141469 +
             (C188 * C823 + C141309 * C912) * C30075) *
                C141494) *
               C1596) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eezz[32] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C30596 * C108 + C30599 + C30599 + C141469 * C714 +
                       C30597 * C1601 + C30600 + C30600 + C141384 * C2283) *
                          C141309 * C141494 +
                      (C30633 + C30634) * C141309 * C141495 + C30640 * C22071) *
                         C1596 -
                     ((C32664 + C32665) * C141309 * C22071 +
                      (C32666 + C32667) * C141309 * C141495 +
                      (C30597 * C5325 + C32652 + C32652 + C141384 * C5781 +
                       C30596 * C1601 + C32653 + C32653 + C141469 * C2283) *
                          C141309 * C141494) *
                         C141487) *
                        C2374 +
                    (((C30596 * C3490 + C35114 + C35114 + C141469 * C4074 +
                       C30597 * C13301 + C35115 + C35115 + C141384 * C13953) *
                          C141309 * C141494 +
                      (C30596 * C3491 + C35116 + C35116 + C141469 * C4075 +
                       C30597 * C13302 + C35117 + C35117 + C141384 * C13955) *
                          C141309 * C141495 +
                      (C30596 * C3492 + C35118 + C35118 + C141469 * C4076 +
                       C30597 * C14876 + C35119 + C35119 + C141384 * C15738) *
                          C141309 * C22071) *
                         C141487 -
                     ((C31605 + C31606) * C141309 * C22071 +
                      (C31607 + C31608) * C141309 * C141495 +
                      (C30597 * C3490 + C31593 + C31593 + C141384 * C4074 +
                       C30596 * C823 + C31594 + C31594 + C141469 * C1505) *
                          C141309 * C141494) *
                         C1596) *
                        C141485) *
                   C141243) /
                  (p * q * std::sqrt(p + q));
    d2eexx[33] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C22074 * C108 + C22081 + C22081 + C141494 * C120 +
                       C22076 * C109 + C22082 + C22082 + C141495 * C121 +
                       C22078 * C110 + C22083 + C22083 + C22071 * C122) *
                          C141469 +
                      (C31734 + C31735 + C31736) * C141384) *
                         C141309 * C4148 -
                     ((C22078 * C5327 + C29246 + C29246 + C22071 * C5335 +
                       C22076 * C5326 + C29245 + C29245 + C141495 * C5334 +
                       C22074 * C5325 + C29244 + C29244 + C141494 * C5333) *
                          C141384 +
                      (C31736 + C31735 + C31734) * C141469) *
                         C141309 * C141487) *
                        C141277 * C2376 +
                    (((C31737 + C31738 + C31739) * C141469 +
                      (C22074 * C5326 + C31719 + C31719 + C141494 * C5334 +
                       C22076 * C5327 + C31720 + C31720 + C141495 * C5335 +
                       C22078 * C5328 + C31721 + C31721 + C22071 * C5336) *
                          C141384) *
                         C141309 * C141487 -
                     ((C31739 + C31738 + C31737) * C141384 +
                      (C22078 * C111 + C22090 + C22090 + C22071 * C123 +
                       C22076 * C110 + C22091 + C22091 + C141495 * C122 +
                       C22074 * C109 + C22092 + C22092 + C141494 * C121) *
                          C141469) *
                         C141309 * C4148) *
                        C141277 * C141483)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[33] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141309 * C189) * C22075 +
             (C188 * C114 + C141309 * C195) * C141494 + C218 * C22077 +
             C219 * C141495 + C220 * C22079 + C221 * C22071) *
                C141469 +
            (C31838 + C31839 + C31840 + C31841 + C31842 + C31843) * C141384) *
               C4148 -
           ((C14129 * C22071 + C14130 * C22079 + C14128 * C141495 +
             C14127 * C22077 + C16046 * C141494 + C16045 * C22075) *
                C141384 +
            (C31843 + C31842 + C31841 + C31840 + C31839 + C31838) * C141469) *
               C141487) *
              C141277 * C2376 +
          (((C31844 + C31845 + C31846 + C31847 + C31848 + C31849) * C141469 +
            (C14127 * C22075 + C14128 * C141494 + C14130 * C22077 +
             C14129 * C141495 + (C188 * C5328 + C141309 * C5394) * C22079 +
             (C188 * C5332 + C141309 * C5398) * C22071) *
                C141384) *
               C141487 -
           ((C31849 + C31848 + C31847 + C31846 + C31845 + C31844) * C141384 +
            (C223 * C22071 + C222 * C22079 + C221 * C141495 + C220 * C22077 +
             C219 * C141494 + C218 * C22075) *
                C141469) *
               C4148) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eexz[33] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30075 * C108 + C141469 * C276 + C30076 * C1601 +
             C141384 * C1784) *
                C22075 +
            (C30075 * C114 + C141469 * C282 + C30076 * C1606 +
             C141384 * C1789) *
                C141494 +
            (C30102 + C30103) * C22077 + (C30104 + C30105) * C141495 +
            C30114 * C22079 + C30115 * C22071) *
               C141309 * C4148 -
           ((C31964 + C31965) * C22071 + (C31966 + C31967) * C22079 +
            (C31968 + C31969) * C141495 + (C31970 + C31971) * C22077 +
            (C30076 * C5329 + C141384 * C5453 + C30075 * C1606 +
             C141469 * C1789) *
                C141494 +
            (C30076 * C5325 + C141384 * C5449 + C30075 * C1601 +
             C141469 * C1784) *
                C22075) *
               C141309 * C141487) *
              C141277 * C2376 +
          (((C31971 + C31970) * C22075 + (C31969 + C31968) * C141494 +
            (C31967 + C31966) * C22077 + (C31965 + C31964) * C141495 +
            (C30075 * C1598 + C141469 * C1781 + C30076 * C5328 +
             C141384 * C5452) *
                C22079 +
            (C30075 * C1603 + C141469 * C1786 + C30076 * C5332 +
             C141384 * C5456) *
                C22071) *
               C141309 * C141487 -
           ((C30110 + C30111) * C22071 + (C30112 + C30113) * C22079 +
            (C30109 + C30108) * C141495 + (C30107 + C30106) * C22077 +
            (C30105 + C30104) * C141494 + (C30103 + C30102) * C22075) *
               C141309 * C4148) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[33] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C22075 * C108 + C141494 * C114 + C22077 * C109 +
                        C141495 * C115 + C22079 * C110 + C22071 * C116) *
                           C188 +
                       (C22075 * C189 + C141494 * C362 + C22077 * C190 +
                        C141495 * C363 + C22079 * C191 + C22071 * C364) *
                           C141309) *
                          C141469 +
                      ((C32094 + C32095 + C32096) * C188 +
                       (C32097 + C32098 + C32099) * C141309) *
                          C141384) *
                         C4148 -
                     (((C22079 * C5393 + C22071 * C5509 + C22077 * C5392 +
                        C141495 * C5508 + C22075 * C5391 + C141494 * C5507) *
                           C141309 +
                       (C22079 * C5327 + C22071 * C5331 + C22077 * C5326 +
                        C141495 * C5330 + C22075 * C5325 + C141494 * C5329) *
                           C188) *
                          C141384 +
                      ((C32099 + C32098 + C32097) * C141309 +
                       (C32096 + C32095 + C32094) * C188) *
                          C141469) *
                         C141487) *
                        C141277 * C2376 +
                    ((((C32100 + C32101 + C32102) * C188 +
                       (C32103 + C32104 + C32105) * C141309) *
                          C141469 +
                      ((C22075 * C5326 + C141494 * C5330 + C22077 * C5327 +
                        C141495 * C5331 + C22079 * C5328 + C22071 * C5332) *
                           C188 +
                       (C22075 * C5392 + C141494 * C5508 + C22077 * C5393 +
                        C141495 * C5509 + C22079 * C5394 + C22071 * C5510) *
                           C141309) *
                          C141384) *
                         C141487 -
                     (((C32105 + C32104 + C32103) * C141309 +
                       (C32102 + C32101 + C32100) * C188) *
                          C141384 +
                      ((C22079 * C192 + C22071 * C365 + C22077 * C191 +
                        C141495 * C364 + C22075 * C190 + C141494 * C363) *
                           C141309 +
                       (C22079 * C111 + C22071 * C117 + C22077 * C110 +
                        C141495 * C116 + C22075 * C109 + C141494 * C115) *
                           C188) *
                          C141469) *
                         C4148) *
                        C141277 * C141483)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[33] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C418 * C108 + C426 + C426 + C141309 * C419) * C141494 +
             C448 * C141495 + C449 * C22071) *
                C141469 +
            (C32204 + C32205 + C32206) * C141384) *
               C4148 -
           ((C14401 * C22071 + C14400 * C141495 + C16447 * C141494) * C141384 +
            (C32206 + C32205 + C32204) * C141469) *
               C141487) *
              C141277 * C2376 +
          (((C32207 + C32208 + C32209) * C141469 +
            (C14400 * C141494 + C14401 * C141495 +
             (C418 * C5328 + C5569 + C5569 + C141309 * C5564) * C22071) *
                C141384) *
               C141487 -
           ((C32209 + C32208 + C32207) * C141384 +
            (C450 * C22071 + C449 * C141495 + C448 * C141494) * C141469) *
               C4148) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[33] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30075 * C108 + C141469 * C276 + C30076 * C1601 +
              C141384 * C1784) *
                 C188 +
             (C30075 * C189 + C141469 * C501 + C30076 * C1690 +
              C141384 * C2040) *
                 C141309) *
                C141494 +
            ((C30102 + C30103) * C188 + (C30351 + C30352) * C141309) * C141495 +
            C30359 * C22071) *
               C4148 -
           (((C32316 + C32317) * C141309 + (C31966 + C31967) * C188) * C22071 +
            ((C32318 + C32319) * C141309 + (C31970 + C31971) * C188) * C141495 +
            ((C30076 * C5391 + C141384 * C5619 + C30075 * C1690 +
              C141469 * C2040) *
                 C141309 +
             (C30076 * C5325 + C141384 * C5449 + C30075 * C1601 +
              C141469 * C1784) *
                 C188) *
                C141494) *
               C141487) *
              C141277 * C2376 +
          ((((C31971 + C31970) * C188 + (C32319 + C32318) * C141309) * C141494 +
            ((C31967 + C31966) * C188 + (C32317 + C32316) * C141309) * C141495 +
            ((C30075 * C1598 + C141469 * C1781 + C30076 * C5328 +
              C141384 * C5452) *
                 C188 +
             (C30075 * C1687 + C141469 * C2037 + C30076 * C5394 +
              C141384 * C5622) *
                 C141309) *
                C22071) *
               C141487 -
           (((C30355 + C30356) * C141309 + (C30112 + C30113) * C188) * C22071 +
            ((C30354 + C30353) * C141309 + (C30107 + C30106) * C188) * C141495 +
            ((C30352 + C30351) * C141309 + (C30103 + C30102) * C188) *
                C141494) *
               C4148) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eezx[33] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C22075 * C108 + C141494 * C114 + C22077 * C109 +
                       C141495 * C115 + C22079 * C110 + C22071 * C116) *
                          C30075 +
                      (C22075 * C276 + C141494 * C579 + C22077 * C277 +
                       C141495 * C580 + C22079 * C278 + C22071 * C581) *
                          C141469 +
                      (C32094 + C32095 + C32096) * C30076 +
                      (C32430 + C32431 + C32432) * C141384) *
                         C141309 * C4148 -
                     ((C22079 * C5451 + C22071 * C5675 + C22077 * C5450 +
                       C141495 * C5674 + C22075 * C5449 + C141494 * C5673) *
                          C141384 +
                      (C22079 * C5327 + C22071 * C5331 + C22077 * C5326 +
                       C141495 * C5330 + C22075 * C5325 + C141494 * C5329) *
                          C30076 +
                      (C32432 + C32431 + C32430) * C141469 +
                      (C32096 + C32095 + C32094) * C30075) *
                         C141309 * C141487) *
                        C141277 * C2376 +
                    (((C32100 + C32101 + C32102) * C30075 +
                      (C32433 + C32434 + C32435) * C141469 +
                      (C22075 * C5326 + C141494 * C5330 + C22077 * C5327 +
                       C141495 * C5331 + C22079 * C5328 + C22071 * C5332) *
                          C30076 +
                      (C22075 * C5450 + C141494 * C5674 + C22077 * C5451 +
                       C141495 * C5675 + C22079 * C5452 + C22071 * C5676) *
                          C141384) *
                         C141309 * C141487 -
                     ((C32435 + C32434 + C32433) * C141384 +
                      (C32102 + C32101 + C32100) * C30076 +
                      (C22079 * C279 + C22071 * C582 + C22077 * C278 +
                       C141495 * C581 + C22075 * C277 + C141494 * C580) *
                          C141469 +
                      (C22079 * C111 + C22071 * C117 + C22077 * C110 +
                       C141495 * C116 + C22075 * C109 + C141494 * C115) *
                          C30075) *
                         C141309 * C4148) *
                        C141277 * C141483)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[33] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141309 * C189) * C30075 +
             (C188 * C276 + C141309 * C635) * C141469 + C16043 * C30076 +
             C16798 * C141384) *
                C141494 +
            (C30508 + C30509 + C30510 + C30511) * C141495 + C30522 * C22071) *
               C4148 -
           ((C32534 + C32535 + C32536 + C32537) * C22071 +
            (C32538 + C32539 + C32540 + C32541) * C141495 +
            (C16799 * C141384 + C16045 * C30076 + C16798 * C141469 +
             C16043 * C30075) *
                C141494) *
               C141487) *
              C141277 * C2376 +
          (((C32541 + C32540 + C32539 + C32538) * C141494 +
            (C32537 + C32536 + C32535 + C32534) * C141495 +
            (C1711 * C30075 + C2209 * C141469 +
             (C188 * C5328 + C141309 * C5394) * C30076 +
             (C188 * C5452 + C141309 * C5730) * C141384) *
                C22071) *
               C141487 -
           ((C30516 + C30517 + C30518 + C30519) * C22071 +
            (C30515 + C30514 + C30513 + C30512) * C141495 +
            (C30511 + C30510 + C30509 + C30508) * C141494) *
               C4148) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eezz[33] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C30596 * C108 + C30599 + C30599 + C141469 * C714 +
                       C30597 * C1601 + C30600 + C30600 + C141384 * C2283) *
                          C141309 * C141494 +
                      (C30633 + C30634) * C141309 * C141495 + C30640 * C22071) *
                         C4148 -
                     ((C32664 + C32665) * C141309 * C22071 +
                      (C32666 + C32667) * C141309 * C141495 +
                      (C30597 * C5325 + C32652 + C32652 + C141384 * C5781 +
                       C30596 * C1601 + C32653 + C32653 + C141469 * C2283) *
                          C141309 * C141494) *
                         C141487) *
                        C141277 * C2376 +
                    (((C32667 + C32666) * C141309 * C141494 +
                      (C32665 + C32664) * C141309 * C141495 +
                      (C30596 * C1598 + C32654 + C32654 + C141469 * C2280 +
                       C30597 * C5328 + C32655 + C32655 + C141384 * C5784) *
                          C141309 * C22071) *
                         C141487 -
                     ((C30637 + C30638) * C141309 * C22071 +
                      (C30636 + C30635) * C141309 * C141495 +
                      (C30634 + C30633) * C141309 * C141494) *
                         C4148) *
                        C141277 * C141483)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[34] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C22074 * C108 + C22081 + C22081 + C141494 * C120 +
                       C22076 * C109 + C22082 + C22082 + C141495 * C121 +
                       C22078 * C110 + C22083 + C22083 + C22071 * C122) *
                          C141469 +
                      (C31734 + C31735 + C31736) * C141384) *
                         C141309 * C4148 -
                     ((C22078 * C5327 + C29246 + C29246 + C22071 * C5335 +
                       C22076 * C5326 + C29245 + C29245 + C141495 * C5334 +
                       C22074 * C5325 + C29244 + C29244 + C141494 * C5333) *
                          C141384 +
                      (C31736 + C31735 + C31734) * C141469) *
                         C141309 * C141487) *
                        C816 +
                    (((C26582 + C26581 + C26580) * C141469 +
                      (C22074 * C13301 + C29247 + C29247 + C141494 * C13309 +
                       C22076 * C13302 + C29248 + C29248 + C141495 * C13310 +
                       C22078 * C14876 + C29249 + C29249 + C22071 * C14878) *
                          C141384) *
                         C141309 * C141487 -
                     ((C26580 + C26581 + C26582) * C141384 +
                      (C22948 + C22947 + C22946) * C141469) *
                         C141309 * C4148) *
                        C141485) *
                   C141243) /
                  (p * q * std::sqrt(p + q));
    d2eexy[34] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141309 * C189) * C22075 +
             (C188 * C114 + C141309 * C195) * C141494 + C218 * C22077 +
             C219 * C141495 + C220 * C22079 + C221 * C22071) *
                C141469 +
            (C31838 + C31839 + C31840 + C31841 + C31842 + C31843) * C141384) *
               C4148 -
           ((C14129 * C22071 + C14130 * C22079 + C14128 * C141495 +
             C14127 * C22077 + C16046 * C141494 + C16045 * C22075) *
                C141384 +
            (C31843 + C31842 + C31841 + C31840 + C31839 + C31838) * C141469) *
               C141487) *
              C816 +
          (((C34419 + C34420 + C34421 + C34422 + C34423 + C34424) * C141469 +
            (C18717 * C22075 + C18718 * C141494 + C14991 * C22077 +
             C14990 * C141495 + (C188 * C14876 + C141309 * C14979) * C22079 +
             (C188 * C14877 + C141309 * C14980) * C22071) *
                C141384) *
               C141487 -
           ((C34424 + C34423 + C34422 + C34421 + C34420 + C34419) * C141384 +
            (C934 * C22071 + C935 * C22079 + C936 * C141495 + C937 * C22077 +
             (C188 * C828 + C141309 * C917) * C141494 +
             (C188 * C823 + C141309 * C912) * C22075) *
                C141469) *
               C4148) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eexz[34] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C30075 * C108 + C141469 * C276 + C30076 * C1601 +
                       C141384 * C1784) *
                          C22075 +
                      (C30075 * C114 + C141469 * C282 + C30076 * C1606 +
                       C141384 * C1789) *
                          C141494 +
                      (C30102 + C30103) * C22077 + (C30104 + C30105) * C141495 +
                      C30114 * C22079 + C30115 * C22071) *
                         C141309 * C4148 -
                     ((C31964 + C31965) * C22071 + (C31966 + C31967) * C22079 +
                      (C31968 + C31969) * C141495 + (C31970 + C31971) * C22077 +
                      (C30076 * C5329 + C141384 * C5453 + C30075 * C1606 +
                       C141469 * C1789) *
                          C141494 +
                      (C30076 * C5325 + C141384 * C5449 + C30075 * C1601 +
                       C141469 * C1784) *
                          C22075) *
                         C141309 * C141487) *
                        C816 +
                    (((C30075 * C3490 + C141469 * C3646 + C30076 * C13301 +
                       C141384 * C13475) *
                          C22075 +
                      (C30075 * C3494 + C141469 * C3650 + C30076 * C13305 +
                       C141384 * C13479) *
                          C141494 +
                      (C30075 * C3491 + C141469 * C3647 + C30076 * C13302 +
                       C141384 * C13476) *
                          C22077 +
                      (C30075 * C3495 + C141469 * C3651 + C30076 * C13306 +
                       C141384 * C13480) *
                          C141495 +
                      (C30075 * C3492 + C141469 * C3648 + C30076 * C14876 +
                       C141384 * C15091) *
                          C22079 +
                      (C30075 * C3496 + C141469 * C3652 + C30076 * C14877 +
                       C141384 * C15092) *
                          C22071) *
                         C141309 * C141487 -
                     ((C30957 + C30958) * C22071 + (C30959 + C30960) * C22079 +
                      (C30961 + C30962) * C141495 + (C30963 + C30964) * C22077 +
                      (C30076 * C3494 + C141384 * C3650 + C30075 * C828 +
                       C141469 * C1011) *
                          C141494 +
                      (C30076 * C3490 + C141384 * C3646 + C30075 * C823 +
                       C141469 * C1006) *
                          C22075) *
                         C141309 * C4148) *
                        C141485) *
                   C141243) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[34] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C22075 * C108 + C141494 * C114 + C22077 * C109 +
                        C141495 * C115 + C22079 * C110 + C22071 * C116) *
                           C188 +
                       (C22075 * C189 + C141494 * C362 + C22077 * C190 +
                        C141495 * C363 + C22079 * C191 + C22071 * C364) *
                           C141309) *
                          C141469 +
                      ((C32094 + C32095 + C32096) * C188 +
                       (C32097 + C32098 + C32099) * C141309) *
                          C141384) *
                         C4148 -
                     (((C22079 * C5393 + C22071 * C5509 + C22077 * C5392 +
                        C141495 * C5508 + C22075 * C5391 + C141494 * C5507) *
                           C141309 +
                       (C22079 * C5327 + C22071 * C5331 + C22077 * C5326 +
                        C141495 * C5330 + C22075 * C5325 + C141494 * C5329) *
                           C188) *
                          C141384 +
                      ((C32099 + C32098 + C32097) * C141309 +
                       (C32096 + C32095 + C32094) * C188) *
                          C141469) *
                         C141487) *
                        C816 +
                    ((((C26900 + C26899 + C26898) * C188 +
                       (C26897 + C26896 + C26895) * C141309) *
                          C141469 +
                      ((C22075 * C13301 + C141494 * C13305 + C22077 * C13302 +
                        C141495 * C13306 + C22079 * C14876 + C22071 * C14877) *
                           C188 +
                       (C22075 * C13393 + C141494 * C13557 + C22077 * C13395 +
                        C141495 * C13558 + C22079 * C14979 + C22071 * C15209) *
                           C141309) *
                          C141384) *
                         C141487 -
                     (((C26895 + C26896 + C26897) * C141309 +
                       (C26898 + C26899 + C26900) * C188) *
                          C141384 +
                      ((C23311 + C23310 + C23309) * C141309 +
                       (C23308 + C23307 + C23306) * C188) *
                          C141469) *
                         C4148) *
                        C141485) *
                   C141243) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[34] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C418 * C108 + C426 + C426 + C141309 * C419) * C141494 +
             C448 * C141495 + C449 * C22071) *
                C141469 +
            (C32204 + C32205 + C32206) * C141384) *
               C4148 -
           ((C14401 * C22071 + C14400 * C141495 + C16447 * C141494) * C141384 +
            (C32206 + C32205 + C32204) * C141469) *
               C141487) *
              C816 +
          (((C34719 + C34720 + C34721) * C141469 +
            (C19050 * C141494 + C15321 * C141495 +
             (C418 * C14876 + C15316 + C15316 + C141309 * C15308) * C22071) *
                C141384) *
               C141487 -
           ((C34721 + C34720 + C34719) * C141384 +
            (C1192 * C22071 + C1193 * C141495 +
             (C418 * C823 + C1183 + C1183 + C141309 * C1171) * C141494) *
                C141469) *
               C4148) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eeyz[34] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30075 * C108 + C141469 * C276 + C30076 * C1601 +
              C141384 * C1784) *
                 C188 +
             (C30075 * C189 + C141469 * C501 + C30076 * C1690 +
              C141384 * C2040) *
                 C141309) *
                C141494 +
            ((C30102 + C30103) * C188 + (C30351 + C30352) * C141309) * C141495 +
            C30359 * C22071) *
               C4148 -
           (((C32316 + C32317) * C141309 + (C31966 + C31967) * C188) * C22071 +
            ((C32318 + C32319) * C141309 + (C31970 + C31971) * C188) * C141495 +
            ((C30076 * C5391 + C141384 * C5619 + C30075 * C1690 +
              C141469 * C2040) *
                 C141309 +
             (C30076 * C5325 + C141384 * C5449 + C30075 * C1601 +
              C141469 * C1784) *
                 C188) *
                C141494) *
               C141487) *
              C816 +
          ((((C30075 * C3490 + C141469 * C3646 + C30076 * C13301 +
              C141384 * C13475) *
                 C188 +
             (C30075 * C3572 + C141469 * C3864 + C30076 * C13393 +
              C141384 * C13719) *
                 C141309) *
                C141494 +
            ((C30075 * C3491 + C141469 * C3647 + C30076 * C13302 +
              C141384 * C13476) *
                 C188 +
             (C30075 * C3573 + C141469 * C3865 + C30076 * C13395 +
              C141384 * C13721) *
                 C141309) *
                C141495 +
            ((C30075 * C3492 + C141469 * C3648 + C30076 * C14876 +
              C141384 * C15091) *
                 C188 +
             (C30075 * C3574 + C141469 * C3866 + C30076 * C14979 +
              C141384 * C15420) *
                 C141309) *
                C22071) *
               C141487 -
           (((C31272 + C31273) * C141309 + (C30959 + C30960) * C188) * C22071 +
            ((C31274 + C31275) * C141309 + (C30963 + C30964) * C188) * C141495 +
            ((C30076 * C3572 + C141384 * C3864 + C30075 * C912 +
              C141469 * C1262) *
                 C141309 +
             (C30076 * C3490 + C141384 * C3646 + C30075 * C823 +
              C141469 * C1006) *
                 C188) *
                C141494) *
               C4148) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eezx[34] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C22075 * C108 + C141494 * C114 + C22077 * C109 +
                       C141495 * C115 + C22079 * C110 + C22071 * C116) *
                          C30075 +
                      (C22075 * C276 + C141494 * C579 + C22077 * C277 +
                       C141495 * C580 + C22079 * C278 + C22071 * C581) *
                          C141469 +
                      (C32094 + C32095 + C32096) * C30076 +
                      (C32430 + C32431 + C32432) * C141384) *
                         C141309 * C4148 -
                     ((C22079 * C5451 + C22071 * C5675 + C22077 * C5450 +
                       C141495 * C5674 + C22075 * C5449 + C141494 * C5673) *
                          C141384 +
                      (C22079 * C5327 + C22071 * C5331 + C22077 * C5326 +
                       C141495 * C5330 + C22075 * C5325 + C141494 * C5329) *
                          C30076 +
                      (C32432 + C32431 + C32430) * C141469 +
                      (C32096 + C32095 + C32094) * C30075) *
                         C141309 * C141487) *
                        C816 +
                    (((C26900 + C26899 + C26898) * C30075 +
                      (C27209 + C27208 + C27207) * C141469 +
                      (C22075 * C13301 + C141494 * C13305 + C22077 * C13302 +
                       C141495 * C13306 + C22079 * C14876 + C22071 * C14877) *
                          C30076 +
                      (C22075 * C13475 + C141494 * C13797 + C22077 * C13476 +
                       C141495 * C13798 + C22079 * C15091 + C22071 * C15528) *
                          C141384) *
                         C141309 * C141487 -
                     ((C27207 + C27208 + C27209) * C141384 +
                      (C26898 + C26899 + C26900) * C30076 +
                      (C23662 + C23661 + C23660) * C141469 +
                      (C23308 + C23307 + C23306) * C30075) *
                         C141309 * C4148) *
                        C141485) *
                   C141243) /
                  (p * q * std::sqrt(p + q));
    d2eezy[34] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141309 * C189) * C30075 +
             (C188 * C276 + C141309 * C635) * C141469 + C16043 * C30076 +
             C16798 * C141384) *
                C141494 +
            (C30508 + C30509 + C30510 + C30511) * C141495 + C30522 * C22071) *
               C4148 -
           ((C32534 + C32535 + C32536 + C32537) * C22071 +
            (C32538 + C32539 + C32540 + C32541) * C141495 +
            (C16799 * C141384 + C16045 * C30076 + C16798 * C141469 +
             C16043 * C30075) *
                C141494) *
               C141487) *
              C816 +
          (((C18715 * C30075 + C19363 * C141469 + C18717 * C30076 +
             C19364 * C141384) *
                C141494 +
            (C14993 * C30075 + C15638 * C141469 + C14991 * C30076 +
             C15637 * C141384) *
                C141495 +
            (C30842 * C30075 + C31481 * C141469 +
             (C188 * C14876 + C141309 * C14979) * C30076 +
             (C188 * C15091 + C141309 * C15627) * C141384) *
                C22071) *
               C141487 -
           ((C31482 + C31474 + C31475 + C31476) * C22071 +
            (C31477 + C31478 + C31479 + C31480) * C141495 +
            (C19363 * C141384 + C18715 * C30076 +
             (C188 * C1006 + C141309 * C1419) * C141469 +
             (C188 * C823 + C141309 * C912) * C30075) *
                C141494) *
               C4148) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eezz[34] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C30596 * C108 + C30599 + C30599 + C141469 * C714 +
                       C30597 * C1601 + C30600 + C30600 + C141384 * C2283) *
                          C141309 * C141494 +
                      (C30633 + C30634) * C141309 * C141495 + C30640 * C22071) *
                         C4148 -
                     ((C32664 + C32665) * C141309 * C22071 +
                      (C32666 + C32667) * C141309 * C141495 +
                      (C30597 * C5325 + C32652 + C32652 + C141384 * C5781 +
                       C30596 * C1601 + C32653 + C32653 + C141469 * C2283) *
                          C141309 * C141494) *
                         C141487) *
                        C816 +
                    (((C30596 * C3490 + C35114 + C35114 + C141469 * C4074 +
                       C30597 * C13301 + C35115 + C35115 + C141384 * C13953) *
                          C141309 * C141494 +
                      (C30596 * C3491 + C35116 + C35116 + C141469 * C4075 +
                       C30597 * C13302 + C35117 + C35117 + C141384 * C13955) *
                          C141309 * C141495 +
                      (C30596 * C3492 + C35118 + C35118 + C141469 * C4076 +
                       C30597 * C14876 + C35119 + C35119 + C141384 * C15738) *
                          C141309 * C22071) *
                         C141487 -
                     ((C31605 + C31606) * C141309 * C22071 +
                      (C31607 + C31608) * C141309 * C141495 +
                      (C30597 * C3490 + C31593 + C31593 + C141384 * C4074 +
                       C30596 * C823 + C31594 + C31594 + C141469 * C1505) *
                          C141309 * C141494) *
                         C4148) *
                        C141485) *
                   C141243) /
                  (p * q * std::sqrt(p + q));
    d2eexx[35] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C22074 * C108 + C22081 + C22081 + C141494 * C120 +
                      C22076 * C109 + C22082 + C22082 + C141495 * C121 +
                      C22078 * C110 + C22083 + C22083 + C22071 * C122) *
                         C141469 +
                     (C31734 + C31735 + C31736) * C141384) *
                        C141309 * C5322 -
                    ((C36973 + C36974 + C36975) * C141384 +
                     (C31736 + C31735 + C31734) * C141469) *
                        C141309 * C5323 +
                    ((C36975 + C36974 + C36973) * C141469 +
                     (C22074 * C15862 + C36964 + C36964 + C141494 * C15868 +
                      C22076 * C15861 + C36965 + C36965 + C141495 * C15867 +
                      C22078 * C15863 + C36966 + C36966 + C22071 * C15869) *
                         C141384) *
                        C141309 * C5324) *
                   C141277 * C141243) /
                  (p * q * std::sqrt(p + q));
    d2eexy[35] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141309 * C189) * C22075 +
            (C188 * C114 + C141309 * C195) * C141494 + C218 * C22077 +
            C219 * C141495 + C220 * C22079 + C221 * C22071) *
               C141469 +
           (C31838 + C31839 + C31840 + C31841 + C31842 + C31843) * C141384) *
              C5322 -
          ((C37050 + C37051 + C37052 + C37053 + C37054 + C37055) * C141384 +
           (C31843 + C31842 + C31841 + C31840 + C31839 + C31838) * C141469) *
              C5323 +
          ((C37055 + C37054 + C37053 + C37052 + C37051 + C37050) * C141469 +
           (C21415 * C22075 + C21414 * C141494 + C16048 * C22077 +
            C16047 * C141495 + (C188 * C15863 + C141309 * C16014) * C22079 +
            (C188 * C15866 + C141309 * C16017) * C22071) *
               C141384) *
              C5324) *
         C141277 * C141243) /
        (p * q * std::sqrt(p + q));
    d2eexz[35] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C30075 * C108 + C141469 * C276 + C30076 * C1601 + C141384 * C1784) *
               C22075 +
           (C30075 * C114 + C141469 * C282 + C30076 * C1606 + C141384 * C1789) *
               C141494 +
           (C30102 + C30103) * C22077 + (C30104 + C30105) * C141495 +
           C30114 * C22079 + C30115 * C22071) *
              C141309 * C5322 -
          ((C31964 + C31965) * C22071 + (C31966 + C31967) * C22079 +
           (C31968 + C31969) * C141495 + (C31970 + C31971) * C22077 +
           (C30076 * C5329 + C141384 * C5453 + C30075 * C1606 +
            C141469 * C1789) *
               C141494 +
           (C30076 * C5325 + C141384 * C5449 + C30075 * C1601 +
            C141469 * C1784) *
               C22075) *
              C141309 * C5323 +
          ((C30075 * C5325 + C141469 * C5449 + C30076 * C15862 +
            C141384 * C16151) *
               C22075 +
           (C30075 * C5329 + C141469 * C5453 + C30076 * C15865 +
            C141384 * C16154) *
               C141494 +
           (C30075 * C5326 + C141469 * C5450 + C30076 * C15861 +
            C141384 * C16150) *
               C22077 +
           (C30075 * C5330 + C141469 * C5454 + C30076 * C15864 +
            C141384 * C16153) *
               C141495 +
           (C30075 * C5327 + C141469 * C5451 + C30076 * C15863 +
            C141384 * C16152) *
               C22079 +
           (C30075 * C5331 + C141469 * C5455 + C30076 * C15866 +
            C141384 * C16155) *
               C22071) *
              C141309 * C5324) *
         C141277 * C141243) /
        (p * q * std::sqrt(p + q));
    d2eeyx[35] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C22075 * C108 + C141494 * C114 + C22077 * C109 +
                       C141495 * C115 + C22079 * C110 + C22071 * C116) *
                          C188 +
                      (C22075 * C189 + C141494 * C362 + C22077 * C190 +
                       C141495 * C363 + C22079 * C191 + C22071 * C364) *
                          C141309) *
                         C141469 +
                     ((C32094 + C32095 + C32096) * C188 +
                      (C32097 + C32098 + C32099) * C141309) *
                         C141384) *
                        C5322 -
                    (((C37216 + C37217 + C37218) * C141309 +
                      (C37219 + C37220 + C37221) * C188) *
                         C141384 +
                     ((C32099 + C32098 + C32097) * C141309 +
                      (C32096 + C32095 + C32094) * C188) *
                         C141469) *
                        C5323 +
                    (((C37221 + C37220 + C37219) * C188 +
                      (C37218 + C37217 + C37216) * C141309) *
                         C141469 +
                     ((C22075 * C15862 + C141494 * C15865 + C22077 * C15861 +
                       C141495 * C15864 + C22079 * C15863 + C22071 * C15866) *
                          C188 +
                      (C22075 * C16013 + C141494 * C16273 + C22077 * C16012 +
                       C141495 * C16272 + C22079 * C16014 + C22071 * C16274) *
                          C141309) *
                         C141384) *
                        C5324) *
                   C141277 * C141243) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[35] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C418 * C108 + C426 + C426 + C141309 * C419) * C141494 +
            C448 * C141495 + C449 * C22071) *
               C141469 +
           (C32204 + C32205 + C32206) * C141384) *
              C5322 -
          ((C37296 + C37297 + C37298) * C141384 +
           (C32206 + C32205 + C32204) * C141469) *
              C5323 +
          ((C37298 + C37297 + C37296) * C141469 +
           (C21674 * C141494 + C16448 * C141495 +
            (C418 * C15863 + C16439 + C16439 + C141309 * C16423) * C22071) *
               C141384) *
              C5324) *
         C141277 * C141243) /
        (p * q * std::sqrt(p + q));
    d2eeyz[35] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30075 * C108 + C141469 * C276 + C30076 * C1601 +
             C141384 * C1784) *
                C188 +
            (C30075 * C189 + C141469 * C501 + C30076 * C1690 +
             C141384 * C2040) *
                C141309) *
               C141494 +
           ((C30102 + C30103) * C188 + (C30351 + C30352) * C141309) * C141495 +
           C30359 * C22071) *
              C5322 -
          (((C32316 + C32317) * C141309 + (C31966 + C31967) * C188) * C22071 +
           ((C32318 + C32319) * C141309 + (C31970 + C31971) * C188) * C141495 +
           ((C30076 * C5391 + C141384 * C5619 + C30075 * C1690 +
             C141469 * C2040) *
                C141309 +
            (C30076 * C5325 + C141384 * C5449 + C30075 * C1601 +
             C141469 * C1784) *
                C188) *
               C141494) *
              C5323 +
          (((C30075 * C5325 + C141469 * C5449 + C30076 * C15862 +
             C141384 * C16151) *
                C188 +
            (C30075 * C5391 + C141469 * C5619 + C30076 * C16013 +
             C141384 * C16549) *
                C141309) *
               C141494 +
           ((C30075 * C5326 + C141469 * C5450 + C30076 * C15861 +
             C141384 * C16150) *
                C188 +
            (C30075 * C5392 + C141469 * C5620 + C30076 * C16012 +
             C141384 * C16548) *
                C141309) *
               C141495 +
           ((C30075 * C5327 + C141469 * C5451 + C30076 * C15863 +
             C141384 * C16152) *
                C188 +
            (C30075 * C5393 + C141469 * C5621 + C30076 * C16014 +
             C141384 * C16550) *
                C141309) *
               C22071) *
              C5324) *
         C141277 * C141243) /
        (p * q * std::sqrt(p + q));
    d2eezx[35] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C22075 * C108 + C141494 * C114 + C22077 * C109 +
                      C141495 * C115 + C22079 * C110 + C22071 * C116) *
                         C30075 +
                     (C22075 * C276 + C141494 * C579 + C22077 * C277 +
                      C141495 * C580 + C22079 * C278 + C22071 * C581) *
                         C141469 +
                     (C32094 + C32095 + C32096) * C30076 +
                     (C32430 + C32431 + C32432) * C141384) *
                        C141309 * C5322 -
                    ((C37453 + C37454 + C37455) * C141384 +
                     (C37219 + C37220 + C37221) * C30076 +
                     (C32432 + C32431 + C32430) * C141469 +
                     (C32096 + C32095 + C32094) * C30075) *
                        C141309 * C5323 +
                    ((C37221 + C37220 + C37219) * C30075 +
                     (C37455 + C37454 + C37453) * C141469 +
                     (C22075 * C15862 + C141494 * C15865 + C22077 * C15861 +
                      C141495 * C15864 + C22079 * C15863 + C22071 * C15866) *
                         C30076 +
                     (C22075 * C16151 + C141494 * C16659 + C22077 * C16150 +
                      C141495 * C16658 + C22079 * C16152 + C22071 * C16660) *
                         C141384) *
                        C141309 * C5324) *
                   C141277 * C141243) /
                  (p * q * std::sqrt(p + q));
    d2eezy[35] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141309 * C189) * C30075 +
            (C188 * C276 + C141309 * C635) * C141469 + C16043 * C30076 +
            C16798 * C141384) *
               C141494 +
           (C30508 + C30509 + C30510 + C30511) * C141495 + C30522 * C22071) *
              C5322 -
          ((C32534 + C32535 + C32536 + C32537) * C22071 +
           (C32538 + C32539 + C32540 + C32541) * C141495 +
           (C16799 * C141384 + C16045 * C30076 + C16798 * C141469 +
            C16043 * C30075) *
               C141494) *
              C5323 +
          ((C16045 * C30075 + C16799 * C141469 + C21415 * C30076 +
            C21913 * C141384) *
               C141494 +
           (C14127 * C30075 + C14656 * C141469 + C16048 * C30076 +
            C16800 * C141384) *
               C141495 +
           (C14130 * C30075 + C14657 * C141469 +
            (C188 * C15863 + C141309 * C16014) * C30076 +
            (C188 * C16152 + C141309 * C16785) * C141384) *
               C22071) *
              C5324) *
         C141277 * C141243) /
        (p * q * std::sqrt(p + q));
    d2eezz[35] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C30596 * C108 + C30599 + C30599 + C141469 * C714 +
                      C30597 * C1601 + C30600 + C30600 + C141384 * C2283) *
                         C141309 * C141494 +
                     (C30633 + C30634) * C141309 * C141495 + C30640 * C22071) *
                        C5322 -
                    ((C32664 + C32665) * C141309 * C22071 +
                     (C32666 + C32667) * C141309 * C141495 +
                     (C30597 * C5325 + C32652 + C32652 + C141384 * C5781 +
                      C30596 * C1601 + C32653 + C32653 + C141469 * C2283) *
                         C141309 * C141494) *
                        C5323 +
                    ((C30596 * C5325 + C37604 + C37604 + C141469 * C5781 +
                      C30597 * C15862 + C37605 + C37605 + C141384 * C16900) *
                         C141309 * C141494 +
                     (C30596 * C5326 + C37606 + C37606 + C141469 * C5782 +
                      C30597 * C15861 + C37607 + C37607 + C141384 * C16899) *
                         C141309 * C141495 +
                     (C30596 * C5327 + C37608 + C37608 + C141469 * C5783 +
                      C30597 * C15863 + C37609 + C37609 + C141384 * C16901) *
                         C141309 * C22071) *
                        C5324) *
                   C141277 * C141243) /
                  (p * q * std::sqrt(p + q));
    d2eexx[36] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((C100 * C108 + C127 + C127 + C89 * C120 + C102 * C109 +
                     C128 + C128 + C90 * C121 + C104 * C110 + C129 + C129 +
                     C91 * C122 + C106 * C111 + C130 + C130 + C92 * C123) *
                        C141320 * C141309 * C141294 * C141277 * C97 -
                    (C106 * C112 + C131 + C131 + C92 * C124 + C104 * C111 +
                     C132 + C132 + C91 * C123 + C102 * C110 + C133 + C133 +
                     C90 * C122 + C100 * C109 + C134 + C134 + C89 * C121) *
                        C141320 * C141309 * C141294 * C141277 * C98 +
                    (C100 * C110 + C135 + C135 + C89 * C122 + C102 * C111 +
                     C136 + C136 + C90 * C123 + C104 * C112 + C137 + C137 +
                     C91 * C124 + C106 * C113 + C138 + C138 + C92 * C125) *
                        C141320 * C141309 * C141294 * C141277 * C99)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C5868 * C108 + C5873 + C5873 + C5863 * C120 +
                      C5870 * C109 + C5874 + C5874 + C141221 * C121) *
                         C141320 * C5865 +
                     (C5868 * C823 + C5875 + C5875 + C5863 * C833 +
                      C5870 * C822 + C5876 + C5876 + C141221 * C832) *
                         C141320 * C5866 +
                     (C5868 * C2960 + C5877 + C5877 + C5863 * C2968 +
                      C5870 * C2961 + C5878 + C5878 + C141221 * C2969) *
                         C141320 * C5867) *
                        C141294 * C141277 * C97 -
                    ((C5870 * C2962 + C5879 + C5879 + C141221 * C2970 +
                      C5868 * C2961 + C5880 + C5880 + C5863 * C2969) *
                         C141320 * C5867 +
                     (C5870 * C821 + C5881 + C5881 + C141221 * C831 +
                      C5868 * C822 + C5882 + C5882 + C5863 * C832) *
                         C141320 * C5866 +
                     (C5870 * C110 + C5883 + C5883 + C141221 * C122 +
                      C5868 * C109 + C5884 + C5884 + C5863 * C121) *
                         C141320 * C5865) *
                        C141294 * C141277 * C98 +
                    ((C5868 * C110 + C5885 + C5885 + C5863 * C122 +
                      C5870 * C111 + C5886 + C5886 + C141221 * C123) *
                         C141320 * C5865 +
                     (C5868 * C821 + C5887 + C5887 + C5863 * C831 +
                      C5870 * C820 + C5888 + C5888 + C141221 * C830) *
                         C141320 * C5866 +
                     (C5868 * C2962 + C5889 + C5889 + C5863 * C2970 +
                      C5870 * C2963 + C5890 + C5890 + C141221 * C2971) *
                         C141320 * C5867) *
                        C141294 * C141277 * C99)) /
                      (p * q * std::sqrt(p + q));
    d2eexy[36] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C188 * C108 + C141309 * C189) * C101 +
           (C188 * C114 + C141309 * C195) * C89 + C218 * C103 + C219 * C90 +
           C220 * C105 + C221 * C91 + C222 * C107 + C223 * C92) *
              C141320 * C141294 * C141277 * C97 -
          (C224 * C92 + C225 * C107 + C223 * C91 + C222 * C105 + C221 * C90 +
           C220 * C103 + C219 * C89 + C218 * C101) *
              C141320 * C141294 * C141277 * C98 +
          (C220 * C101 + C221 * C89 + C222 * C103 + C223 * C90 + C225 * C105 +
           C224 * C91 + (C188 * C113 + C141309 * C194) * C107 +
           (C188 * C119 + C141309 * C200) * C92) *
              C141320 * C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C5964 * C108 + C5865 * C189 + C5965 * C823 + C5866 * C912 +
            C5966 * C2960 + C5867 * C3026) *
               C5869 +
           (C5964 * C114 + C5865 * C195 + C5965 * C828 + C5866 * C917 +
            C5966 * C2964 + C5867 * C3030) *
               C5863 +
           (C5992 + C5993 + C5994) * C5871 +
           (C5995 + C5996 + C5997) * C141221) *
              C141320 * C141294 * C141277 * C97 -
          ((C5998 + C5999 + C6000) * C141221 + (C6001 + C6002 + C6003) * C5871 +
           (C5997 + C5996 + C5995) * C5863 + (C5994 + C5993 + C5992) * C5869) *
              C141320 * C141294 * C141277 * C98 +
          ((C6003 + C6002 + C6001) * C5869 + (C6000 + C5999 + C5998) * C5863 +
           (C5964 * C111 + C5865 * C192 + C5965 * C820 + C5866 * C909 +
            C5966 * C2963 + C5867 * C3029) *
               C5871 +
           (C5964 * C117 + C5865 * C198 + C5965 * C825 + C5866 * C914 +
            C5966 * C2967 + C5867 * C3033) *
               C141221) *
              C141320 * C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eexz[36] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C275 * C108 + C141320 * C276) * C101 +
           (C275 * C114 + C141320 * C282) * C89 + C305 * C103 + C306 * C90 +
           C307 * C105 + C308 * C91 + C309 * C107 + C310 * C92) *
              C141309 * C141294 * C141277 * C97 -
          (C311 * C92 + C312 * C107 + C310 * C91 + C309 * C105 + C308 * C90 +
           C307 * C103 + C306 * C89 + C305 * C101) *
              C141309 * C141294 * C141277 * C98 +
          (C307 * C101 + C308 * C89 + C309 * C103 + C310 * C90 + C312 * C105 +
           C311 * C91 + (C275 * C113 + C141320 * C281) * C107 +
           (C275 * C119 + C141320 * C287) * C92) *
              C141309 * C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141320 * C276) * C5869 +
            (C275 * C114 + C141320 * C282) * C5863 + C305 * C5871 +
            C306 * C141221) *
               C5865 +
           ((C275 * C823 + C141320 * C1006) * C5869 +
            (C275 * C828 + C141320 * C1011) * C5863 + C1031 * C5871 +
            C1030 * C141221) *
               C5866 +
           ((C275 * C2960 + C141320 * C3084) * C5869 +
            (C275 * C2964 + C141320 * C3088) * C5863 + C6086 * C5871 +
            C6087 * C141221) *
               C5867) *
              C141294 * C141277 * C97 -
          ((C6088 * C141221 + C6089 * C5871 + C6087 * C5863 + C6086 * C5869) *
               C5867 +
           (C1028 * C141221 + C1029 * C5871 + C1030 * C5863 + C1031 * C5869) *
               C5866 +
           (C308 * C141221 + C307 * C5871 + C306 * C5863 + C305 * C5869) *
               C5865) *
              C141294 * C141277 * C98 +
          ((C307 * C5869 + C308 * C5863 + C309 * C5871 + C310 * C141221) *
               C5865 +
           (C1029 * C5869 + C1028 * C5863 + C1027 * C5871 + C1026 * C141221) *
               C5866 +
           (C6089 * C5869 + C6088 * C5863 +
            (C275 * C2963 + C141320 * C3087) * C5871 +
            (C275 * C2967 + C141320 * C3091) * C141221) *
               C5867) *
              C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[36] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
            C91 * C116 + C107 * C111 + C92 * C117) *
               C188 +
           (C101 * C189 + C89 * C362 + C103 * C190 + C90 * C363 + C105 * C191 +
            C91 * C364 + C107 * C192 + C92 * C365) *
               C141309) *
              C141320 * C141294 * C141277 * C97 -
          ((C107 * C193 + C92 * C366 + C105 * C192 + C91 * C365 + C103 * C191 +
            C90 * C364 + C101 * C190 + C89 * C363) *
               C141309 +
           (C107 * C112 + C92 * C118 + C105 * C111 + C91 * C117 + C103 * C110 +
            C90 * C116 + C101 * C109 + C89 * C115) *
               C188) *
              C141320 * C141294 * C141277 * C98 +
          ((C101 * C110 + C89 * C116 + C103 * C111 + C90 * C117 + C105 * C112 +
            C91 * C118 + C107 * C113 + C92 * C119) *
               C188 +
           (C101 * C191 + C89 * C364 + C103 * C192 + C90 * C365 + C105 * C193 +
            C91 * C366 + C107 * C194 + C92 * C367) *
               C141309) *
              C141320 * C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C5869 * C108 + C5863 * C114 + C5871 * C109 + C141221 * C115) *
               C5964 +
           (C5869 * C189 + C5863 * C362 + C5871 * C190 + C141221 * C363) *
               C5865 +
           (C5869 * C823 + C5863 * C828 + C5871 * C822 + C141221 * C827) *
               C5965 +
           (C5869 * C912 + C5863 * C1100 + C5871 * C911 + C141221 * C1099) *
               C5866 +
           (C5869 * C2960 + C5863 * C2964 + C5871 * C2961 + C141221 * C2965) *
               C5966 +
           (C5869 * C3026 + C5863 * C3142 + C5871 * C3027 + C141221 * C3143) *
               C5867) *
              C141320 * C141294 * C141277 * C97 -
          ((C5871 * C3028 + C141221 * C3144 + C5869 * C3027 + C5863 * C3143) *
               C5867 +
           (C5871 * C2962 + C141221 * C2966 + C5869 * C2961 + C5863 * C2965) *
               C5966 +
           (C5871 * C910 + C141221 * C1098 + C5869 * C911 + C5863 * C1099) *
               C5866 +
           (C5871 * C821 + C141221 * C826 + C5869 * C822 + C5863 * C827) *
               C5965 +
           (C5871 * C191 + C141221 * C364 + C5869 * C190 + C5863 * C363) *
               C5865 +
           (C5871 * C110 + C141221 * C116 + C5869 * C109 + C5863 * C115) *
               C5964) *
              C141320 * C141294 * C141277 * C98 +
          ((C5869 * C110 + C5863 * C116 + C5871 * C111 + C141221 * C117) *
               C5964 +
           (C5869 * C191 + C5863 * C364 + C5871 * C192 + C141221 * C365) *
               C5865 +
           (C5869 * C821 + C5863 * C826 + C5871 * C820 + C141221 * C825) *
               C5965 +
           (C5869 * C910 + C5863 * C1098 + C5871 * C909 + C141221 * C1097) *
               C5866 +
           (C5869 * C2962 + C5863 * C2966 + C5871 * C2963 + C141221 * C2967) *
               C5966 +
           (C5869 * C3028 + C5863 * C3144 + C5871 * C3029 + C141221 * C3145) *
               C5867) *
              C141320 * C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[36] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C418 * C108 + C426 + C426 + C141309 * C419) * C89 +
                     C448 * C90 + C449 * C91 + C450 * C92) *
                        C141320 * C141294 * C141277 * C97 -
                    (C451 * C92 + C450 * C91 + C449 * C90 + C448 * C89) *
                        C141320 * C141294 * C141277 * C98 +
                    (C449 * C89 + C450 * C90 + C451 * C91 +
                     (C418 * C113 + C439 + C439 + C141309 * C424) * C92) *
                        C141320 * C141294 * C141277 * C99)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C6237 * C108 + C6241 + C6241 + C5865 * C419 +
                      C6238 * C823 + C6242 + C6242 + C5866 * C1171 +
                      C6239 * C2960 + C6243 + C6243 + C5867 * C3196) *
                         C5863 +
                     (C6277 + C6278 + C6279) * C141221) *
                        C141320 * C141294 * C141277 * C97 -
                    ((C6280 + C6281 + C6282) * C141221 +
                     (C6279 + C6278 + C6277) * C5863) *
                        C141320 * C141294 * C141277 * C98 +
                    ((C6282 + C6281 + C6280) * C5863 +
                     (C6237 * C111 + C6262 + C6262 + C5865 * C422 +
                      C6238 * C820 + C6263 + C6263 + C5866 * C1168 +
                      C6239 * C2963 + C6264 + C6264 + C5867 * C3199) *
                         C141221) *
                        C141320 * C141294 * C141277 * C99)) /
                      (p * q * std::sqrt(p + q));
    d2eeyz[36] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141320 * C276) * C188 +
            (C275 * C189 + C141320 * C501) * C141309) *
               C89 +
           (C508 + C524) * C90 + C528 * C91 + C529 * C92) *
              C141294 * C141277 * C97 -
          ((C527 + C519) * C92 + (C526 + C514) * C91 + (C525 + C511) * C90 +
           (C524 + C508) * C89) *
              C141294 * C141277 * C98 +
          (C528 * C89 + C529 * C90 + (C519 + C527) * C91 +
           ((C275 * C113 + C141320 * C281) * C188 +
            (C275 * C194 + C141320 * C506) * C141309) *
               C92) *
              C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141320 * C276) * C5964 +
            (C275 * C189 + C141320 * C501) * C5865 +
            (C275 * C823 + C141320 * C1006) * C5965 +
            (C275 * C912 + C141320 * C1262) * C5866 +
            (C275 * C2960 + C141320 * C3084) * C5966 +
            (C275 * C3026 + C141320 * C3254) * C5867) *
               C5863 +
           (C6357 + C6358 + C6359 + C6360 + C6361 + C6373) * C141221) *
              C141294 * C141277 * C97 -
          ((C6374 + C6366 + C6367 + C6368 + C6369 + C6370) * C141221 +
           (C6373 + C6361 + C6360 + C6359 + C6358 + C6357) * C5863) *
              C141294 * C141277 * C98 +
          ((C6370 + C6369 + C6368 + C6367 + C6366 + C6374) * C5863 +
           (C309 * C5964 + C522 * C5865 + C1027 * C5965 + C1274 * C5866 +
            (C275 * C2963 + C141320 * C3087) * C5966 +
            (C275 * C3029 + C141320 * C3257) * C5867) *
               C141221) *
              C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eezx[36] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
            C91 * C116 + C107 * C111 + C92 * C117) *
               C275 +
           (C101 * C276 + C89 * C579 + C103 * C277 + C90 * C580 + C105 * C278 +
            C91 * C581 + C107 * C279 + C92 * C582) *
               C141320) *
              C141309 * C141294 * C141277 * C97 -
          ((C107 * C280 + C92 * C583 + C105 * C279 + C91 * C582 + C103 * C278 +
            C90 * C581 + C101 * C277 + C89 * C580) *
               C141320 +
           (C107 * C112 + C92 * C118 + C105 * C111 + C91 * C117 + C103 * C110 +
            C90 * C116 + C101 * C109 + C89 * C115) *
               C275) *
              C141309 * C141294 * C141277 * C98 +
          ((C101 * C110 + C89 * C116 + C103 * C111 + C90 * C117 + C105 * C112 +
            C91 * C118 + C107 * C113 + C92 * C119) *
               C275 +
           (C101 * C278 + C89 * C581 + C103 * C279 + C90 * C582 + C105 * C280 +
            C91 * C583 + C107 * C281 + C92 * C584) *
               C141320) *
              C141309 * C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C141221 * C115) *
                C275 +
            (C5869 * C276 + C5863 * C579 + C5871 * C277 + C141221 * C580) *
                C141320) *
               C5865 +
           ((C5869 * C823 + C5863 * C828 + C5871 * C822 + C141221 * C827) *
                C275 +
            (C5869 * C1006 + C5863 * C1348 + C5871 * C1005 + C141221 * C1347) *
                C141320) *
               C5866 +
           ((C5869 * C2960 + C5863 * C2964 + C5871 * C2961 + C141221 * C2965) *
                C275 +
            (C5869 * C3084 + C5863 * C3308 + C5871 * C3085 + C141221 * C3309) *
                C141320) *
               C5867) *
              C141294 * C141277 * C97 -
          (((C5871 * C3086 + C141221 * C3310 + C5869 * C3085 + C5863 * C3309) *
                C141320 +
            (C5871 * C2962 + C141221 * C2966 + C5869 * C2961 + C5863 * C2965) *
                C275) *
               C5867 +
           ((C5871 * C1004 + C141221 * C1346 + C5869 * C1005 + C5863 * C1347) *
                C141320 +
            (C5871 * C821 + C141221 * C826 + C5869 * C822 + C5863 * C827) *
                C275) *
               C5866 +
           ((C5871 * C278 + C141221 * C581 + C5869 * C277 + C5863 * C580) *
                C141320 +
            (C5871 * C110 + C141221 * C116 + C5869 * C109 + C5863 * C115) *
                C275) *
               C5865) *
              C141294 * C141277 * C98 +
          (((C5869 * C110 + C5863 * C116 + C5871 * C111 + C141221 * C117) *
                C275 +
            (C5869 * C278 + C5863 * C581 + C5871 * C279 + C141221 * C582) *
                C141320) *
               C5865 +
           ((C5869 * C821 + C5863 * C826 + C5871 * C820 + C141221 * C825) *
                C275 +
            (C5869 * C1004 + C5863 * C1346 + C5871 * C1003 + C141221 * C1345) *
                C141320) *
               C5866 +
           ((C5869 * C2962 + C5863 * C2966 + C5871 * C2963 + C141221 * C2967) *
                C275 +
            (C5869 * C3086 + C5863 * C3310 + C5871 * C3087 + C141221 * C3311) *
                C141320) *
               C5867) *
              C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eezy[36] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C188 * C108 + C141309 * C189) * C275 +
                      (C188 * C276 + C141309 * C635) * C141320) *
                         C89 +
                     (C642 + C658) * C90 + C662 * C91 + C663 * C92) *
                        C141294 * C141277 * C97 -
                    ((C661 + C653) * C92 + (C660 + C648) * C91 +
                     (C659 + C645) * C90 + (C658 + C642) * C89) *
                        C141294 * C141277 * C98 +
                    (C662 * C89 + C663 * C90 + (C653 + C661) * C91 +
                     ((C188 * C113 + C141309 * C194) * C275 +
                      (C188 * C281 + C141309 * C640) * C141320) *
                         C92) *
                        C141294 * C141277 * C99)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C5964 * C108 + C5865 * C189 + C5965 * C823 +
                       C5866 * C912 + C5966 * C2960 + C5867 * C3026) *
                          C275 +
                      (C5964 * C276 + C5865 * C635 + C5965 * C1006 +
                       C5866 * C1419 + C5966 * C3084 + C5867 * C3362) *
                          C141320) *
                         C5863 +
                     ((C5992 + C5993 + C5994) * C275 +
                      (C6535 + C6536 + C6537) * C141320) *
                         C141221) *
                        C141294 * C141277 * C97 -
                    (((C6538 + C6539 + C6540) * C141320 +
                      (C6001 + C6002 + C6003) * C275) *
                         C141221 +
                     ((C6537 + C6536 + C6535) * C141320 +
                      (C5994 + C5993 + C5992) * C275) *
                         C5863) *
                        C141294 * C141277 * C98 +
                    (((C6003 + C6002 + C6001) * C275 +
                      (C6540 + C6539 + C6538) * C141320) *
                         C5863 +
                     ((C5964 * C111 + C5865 * C192 + C5965 * C820 +
                       C5866 * C909 + C5966 * C2963 + C5867 * C3029) *
                          C275 +
                      (C5964 * C279 + C5865 * C638 + C5965 * C1003 +
                       C5866 * C1416 + C5966 * C3087 + C5867 * C3365) *
                          C141320) *
                         C141221) *
                        C141294 * C141277 * C99)) /
                      (p * q * std::sqrt(p + q));
    d2eezz[36] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C713 * C108 + C721 + C721 + C141320 * C714) * C141309 * C89 +
           C747 * C90 + C748 * C91 + C749 * C92) *
              C141294 * C141277 * C97 -
          (C750 * C92 + C749 * C91 + C748 * C90 + C747 * C89) * C141294 *
              C141277 * C98 +
          (C748 * C89 + C749 * C90 + C750 * C91 +
           (C713 * C113 + C734 + C734 + C141320 * C719) * C141309 * C92) *
              C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C141320 * C714) * C5865 +
            (C713 * C823 + C1517 + C1517 + C141320 * C1505) * C5866 +
            (C713 * C2960 + C3421 + C3421 + C141320 * C3416) * C5867) *
               C5863 +
           (C6615 + C6616 + C6629) * C141221) *
              C141294 * C141277 * C97 -
          ((C6630 + C6621 + C6622) * C141221 +
           (C6629 + C6616 + C6615) * C5863) *
              C141294 * C141277 * C98 +
          ((C6622 + C6621 + C6630) * C5863 +
           (C745 * C5865 + C1525 * C5866 +
            (C713 * C2963 + C3424 + C3424 + C141320 * C3419) * C5867) *
               C141221) *
              C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eexx[37] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C100 * C108 + C127 + C127 + C89 * C120 + C102 * C109 +
                      C128 + C128 + C90 * C121 + C104 * C110 + C129 + C129 +
                      C91 * C122 + C106 * C111 + C130 + C130 + C92 * C123) *
                         C141320 * C141309 * C141294 * C816 -
                     (C106 * C820 + C836 + C836 + C92 * C830 + C104 * C821 +
                      C837 + C837 + C91 * C831 + C102 * C822 + C838 + C838 +
                      C90 * C832 + C100 * C823 + C839 + C839 + C89 * C833) *
                         C141320 * C141309 * C141294 * C141485) *
                        C818 +
                    ((C100 * C822 + C840 + C840 + C89 * C832 + C102 * C821 +
                      C841 + C841 + C90 * C831 + C104 * C820 + C842 + C842 +
                      C91 * C830 + C106 * C824 + C843 + C843 + C92 * C834) *
                         C141320 * C141309 * C141294 * C141485 -
                     (C106 * C112 + C131 + C131 + C92 * C124 + C104 * C111 +
                      C132 + C132 + C91 * C123 + C102 * C110 + C133 + C133 +
                      C90 * C122 + C100 * C109 + C134 + C134 + C89 * C121) *
                         C141320 * C141309 * C141294 * C816) *
                        C141483)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C5868 * C108 + C5873 + C5873 + C5863 * C120 +
                       C5870 * C109 + C5874 + C5874 + C141221 * C121) *
                          C141320 * C5865 +
                      (C6774 + C6775) * C141320 * C5866 +
                      (C6776 + C6777) * C141320 * C5867) *
                         C141294 * C816 -
                     ((C5870 * C6728 + C6746 + C6746 + C141221 * C6734 +
                       C5868 * C6729 + C6747 + C6747 + C5863 * C6735) *
                          C141320 * C5867 +
                      (C6777 + C6776) * C141320 * C5866 +
                      (C6775 + C6774) * C141320 * C5865) *
                         C141294 * C141485) *
                        C818 +
                    (((C6778 + C6779) * C141320 * C5865 +
                      (C6780 + C6781) * C141320 * C5866 +
                      (C5868 * C6728 + C6756 + C6756 + C5863 * C6734 +
                       C5870 * C6730 + C6757 + C6757 + C141221 * C6736) *
                          C141320 * C5867) *
                         C141294 * C141485 -
                     ((C6781 + C6780) * C141320 * C5867 +
                      (C6779 + C6778) * C141320 * C5866 +
                      (C5870 * C110 + C5883 + C5883 + C141221 * C122 +
                       C5868 * C109 + C5884 + C5884 + C5863 * C121) *
                          C141320 * C5865) *
                         C141294 * C816) *
                        C141483)) /
                      (p * q * std::sqrt(p + q));
    d2eexy[37] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141309 * C189) * C101 +
            (C188 * C114 + C141309 * C195) * C89 + C218 * C103 + C219 * C90 +
            C220 * C105 + C221 * C91 + C222 * C107 + C223 * C92) *
               C141320 * C141294 * C816 -
           (C932 * C92 + C933 * C107 + C934 * C91 + C935 * C105 + C936 * C90 +
            C937 * C103 + (C188 * C828 + C141309 * C917) * C89 +
            (C188 * C823 + C141309 * C912) * C101) *
               C141320 * C141294 * C141485) *
              C818 +
          ((C937 * C101 + C936 * C89 + C935 * C103 + C934 * C90 + C933 * C105 +
            C932 * C91 + (C188 * C824 + C141309 * C913) * C107 +
            (C188 * C829 + C141309 * C918) * C92) *
               C141320 * C141294 * C141485 -
           (C224 * C92 + C225 * C107 + C223 * C91 + C222 * C105 + C221 * C90 +
            C220 * C103 + C219 * C89 + C218 * C101) *
               C141320 * C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5964 * C108 + C5865 * C189 + C5965 * C823 + C5866 * C912 +
             C5966 * C2960 + C5867 * C3026) *
                C5869 +
            (C5964 * C114 + C5865 * C195 + C5965 * C828 + C5866 * C917 +
             C5966 * C2964 + C5867 * C3030) *
                C5863 +
            (C5992 + C5993 + C5994) * C5871 +
            (C5995 + C5996 + C5997) * C141221) *
               C141320 * C141294 * C816 -
           ((C6898 + C6899 + C6900) * C141221 +
            (C6901 + C6902 + C6903) * C5871 +
            (C5966 * C6732 + C5867 * C6883 + C5965 * C2964 + C5866 * C3030 +
             C5964 * C828 + C5865 * C917) *
                C5863 +
            (C5966 * C6729 + C5867 * C6880 + C5965 * C2960 + C5866 * C3026 +
             C5964 * C823 + C5865 * C912) *
                C5869) *
               C141320 * C141294 * C141485) *
              C818 +
          (((C6903 + C6902 + C6901) * C5869 + (C6900 + C6899 + C6898) * C5863 +
            (C5964 * C821 + C5865 * C910 + C5965 * C2962 + C5866 * C3028 +
             C5966 * C6730 + C5867 * C6881) *
                C5871 +
            (C5964 * C826 + C5865 * C915 + C5965 * C2966 + C5866 * C3032 +
             C5966 * C6733 + C5867 * C6884) *
                C141221) *
               C141320 * C141294 * C141485 -
           ((C5998 + C5999 + C6000) * C141221 +
            (C6001 + C6002 + C6003) * C5871 + (C5997 + C5996 + C5995) * C5863 +
            (C5994 + C5993 + C5992) * C5869) *
               C141320 * C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q));
    d2eexz[37] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141320 * C276) * C101 +
            (C275 * C114 + C141320 * C282) * C89 + C305 * C103 + C306 * C90 +
            C307 * C105 + C308 * C91 + C309 * C107 + C310 * C92) *
               C141309 * C141294 * C816 -
           (C1026 * C92 + C1027 * C107 + C1028 * C91 + C1029 * C105 +
            C1030 * C90 + C1031 * C103 + (C275 * C828 + C141320 * C1011) * C89 +
            (C275 * C823 + C141320 * C1006) * C101) *
               C141309 * C141294 * C141485) *
              C818 +
          ((C1031 * C101 + C1030 * C89 + C1029 * C103 + C1028 * C90 +
            C1027 * C105 + C1026 * C91 +
            (C275 * C824 + C141320 * C1007) * C107 +
            (C275 * C829 + C141320 * C1012) * C92) *
               C141309 * C141294 * C141485 -
           (C311 * C92 + C312 * C107 + C310 * C91 + C309 * C105 + C308 * C90 +
            C307 * C103 + C306 * C89 + C305 * C101) *
               C141309 * C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141320 * C276) * C5869 +
             (C275 * C114 + C141320 * C282) * C5863 + C305 * C5871 +
             C306 * C141221) *
                C5865 +
            (C7038 + C7039 + C7012 + C7013) * C5866 +
            (C7040 + C7041 + C7018 + C7019) * C5867) *
               C141294 * C816 -
           ((C7036 * C141221 + C7037 * C5871 +
             (C275 * C6732 + C141320 * C7005) * C5863 +
             (C275 * C6729 + C141320 * C7002) * C5869) *
                C5867 +
            (C7019 + C7018 + C7041 + C7040) * C5866 +
            (C7013 + C7012 + C7039 + C7038) * C5865) *
               C141294 * C141485) *
              C818 +
          (((C7024 + C7025 + C7026 + C7027) * C5865 +
            (C7028 + C7029 + C7030 + C7031) * C5866 +
            (C7037 * C5869 + C7036 * C5863 +
             (C275 * C6730 + C141320 * C7003) * C5871 +
             (C275 * C6733 + C141320 * C7006) * C141221) *
                C5867) *
               C141294 * C141485 -
           ((C7031 + C7030 + C7029 + C7028) * C5867 +
            (C7027 + C7026 + C7025 + C7024) * C5866 +
            (C308 * C141221 + C307 * C5871 + C306 * C5863 + C305 * C5869) *
                C5865) *
               C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[37] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
             C91 * C116 + C107 * C111 + C92 * C117) *
                C188 +
            (C101 * C189 + C89 * C362 + C103 * C190 + C90 * C363 + C105 * C191 +
             C91 * C364 + C107 * C192 + C92 * C365) *
                C141309) *
               C141320 * C141294 * C816 -
           ((C107 * C909 + C92 * C1097 + C105 * C910 + C91 * C1098 +
             C103 * C911 + C90 * C1099 + C101 * C912 + C89 * C1100) *
                C141309 +
            (C107 * C820 + C92 * C825 + C105 * C821 + C91 * C826 + C103 * C822 +
             C90 * C827 + C101 * C823 + C89 * C828) *
                C188) *
               C141320 * C141294 * C141485) *
              C818 +
          (((C101 * C822 + C89 * C827 + C103 * C821 + C90 * C826 + C105 * C820 +
             C91 * C825 + C107 * C824 + C92 * C829) *
                C188 +
            (C101 * C911 + C89 * C1099 + C103 * C910 + C90 * C1098 +
             C105 * C909 + C91 * C1097 + C107 * C913 + C92 * C1101) *
                C141309) *
               C141320 * C141294 * C141485 -
           ((C107 * C193 + C92 * C366 + C105 * C192 + C91 * C365 + C103 * C191 +
             C90 * C364 + C101 * C190 + C89 * C363) *
                C141309 +
            (C107 * C112 + C92 * C118 + C105 * C111 + C91 * C117 + C103 * C110 +
             C90 * C116 + C101 * C109 + C89 * C115) *
                C188) *
               C141320 * C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C141221 * C115) *
                C5964 +
            (C5869 * C189 + C5863 * C362 + C5871 * C190 + C141221 * C363) *
                C5865 +
            (C7175 + C7176) * C5965 + (C7177 + C7178) * C5866 +
            (C7179 + C7180) * C5966 + (C7181 + C7182) * C5867) *
               C141320 * C141294 * C816 -
           ((C5871 * C6879 + C141221 * C7139 + C5869 * C6880 + C5863 * C7140) *
                C5867 +
            (C5871 * C6728 + C141221 * C6731 + C5869 * C6729 + C5863 * C6732) *
                C5966 +
            (C7182 + C7181) * C5866 + (C7180 + C7179) * C5965 +
            (C7178 + C7177) * C5865 + (C7176 + C7175) * C5964) *
               C141320 * C141294 * C141485) *
              C818 +
          (((C7183 + C7184) * C5964 + (C7185 + C7186) * C5865 +
            (C7187 + C7188) * C5965 + (C7189 + C7190) * C5866 +
            (C5869 * C6728 + C5863 * C6731 + C5871 * C6730 + C141221 * C6733) *
                C5966 +
            (C5869 * C6879 + C5863 * C7139 + C5871 * C6881 + C141221 * C7141) *
                C5867) *
               C141320 * C141294 * C141485 -
           ((C7190 + C7189) * C5867 + (C7188 + C7187) * C5966 +
            (C7186 + C7185) * C5866 + (C7184 + C7183) * C5965 +
            (C5871 * C191 + C141221 * C364 + C5869 * C190 + C5863 * C363) *
                C5865 +
            (C5871 * C110 + C141221 * C116 + C5869 * C109 + C5863 * C115) *
                C5964) *
               C141320 * C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[37] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C418 * C108 + C426 + C426 + C141309 * C419) * C89 +
                      C448 * C90 + C449 * C91 + C450 * C92) *
                         C141320 * C141294 * C816 -
                     (C1191 * C92 + C1192 * C91 + C1193 * C90 +
                      (C418 * C823 + C1183 + C1183 + C141309 * C1171) * C89) *
                         C141320 * C141294 * C141485) *
                        C818 +
                    ((C1193 * C89 + C1192 * C90 + C1191 * C91 +
                      (C418 * C824 + C1184 + C1184 + C141309 * C1172) * C92) *
                         C141320 * C141294 * C141485 -
                     (C451 * C92 + C450 * C91 + C449 * C90 + C448 * C89) *
                         C141320 * C141294 * C816) *
                        C141483)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C6237 * C108 + C6241 + C6241 + C5865 * C419 +
                       C6238 * C823 + C6242 + C6242 + C5866 * C1171 +
                       C6239 * C2960 + C6243 + C6243 + C5867 * C3196) *
                          C5863 +
                      (C6277 + C6278 + C6279) * C141221) *
                         C141320 * C141294 * C816 -
                     ((C7313 + C7314 + C7315) * C141221 +
                      (C6239 * C6729 + C7301 + C7301 + C5867 * C7289 +
                       C6238 * C2960 + C7302 + C7302 + C5866 * C3196 +
                       C6237 * C823 + C7303 + C7303 + C5865 * C1171) *
                          C5863) *
                         C141320 * C141294 * C141485) *
                        C818 +
                    (((C7315 + C7314 + C7313) * C5863 +
                      (C6237 * C821 + C7304 + C7304 + C5865 * C1169 +
                       C6238 * C2962 + C7305 + C7305 + C5866 * C3198 +
                       C6239 * C6730 + C7306 + C7306 + C5867 * C7290) *
                          C141221) *
                         C141320 * C141294 * C141485 -
                     ((C6280 + C6281 + C6282) * C141221 +
                      (C6279 + C6278 + C6277) * C5863) *
                         C141320 * C141294 * C816) *
                        C141483)) /
                      (p * q * std::sqrt(p + q));
    d2eeyz[37] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141320 * C276) * C188 +
             (C275 * C189 + C141320 * C501) * C141309) *
                C89 +
            (C508 + C524) * C90 + C528 * C91 + C529 * C92) *
               C141294 * C816 -
           ((C1277 + C1267) * C92 + (C1278 + C1270) * C91 +
            (C1279 + C1273) * C90 +
            ((C275 * C912 + C141320 * C1262) * C141309 +
             (C275 * C823 + C141320 * C1006) * C188) *
                C89) *
               C141294 * C141485) *
              C818 +
          (((C1273 + C1279) * C89 + (C1270 + C1278) * C90 +
            (C1267 + C1277) * C91 +
            ((C275 * C824 + C141320 * C1007) * C188 +
             (C275 * C913 + C141320 * C1263) * C141309) *
                C92) *
               C141294 * C141485 -
           ((C527 + C519) * C92 + (C526 + C514) * C91 + (C525 + C511) * C90 +
            (C524 + C508) * C89) *
               C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141320 * C276) * C5964 +
             (C275 * C189 + C141320 * C501) * C5865 + C7032 * C5965 +
             C7428 * C5866 + C7034 * C5966 + C7429 * C5867) *
                C5863 +
            (C6357 + C6358 + C6359 + C6360 + C6361 + C6373) * C141221) *
               C141294 * C816 -
           ((C7431 + C7423 + C7424 + C7425 + C7426 + C7427) * C141221 +
            ((C275 * C6880 + C141320 * C7414) * C5867 +
             (C275 * C6729 + C141320 * C7002) * C5966 + C7429 * C5866 +
             C7034 * C5965 + C7428 * C5865 + C7032 * C5964) *
                C5863) *
               C141294 * C141485) *
              C818 +
          (((C7427 + C7426 + C7425 + C7424 + C7423 + C7431) * C5863 +
            (C1029 * C5964 + C1275 * C5865 + C6089 * C5965 + C6372 * C5866 +
             (C275 * C6730 + C141320 * C7003) * C5966 +
             (C275 * C6881 + C141320 * C7415) * C5867) *
                C141221) *
               C141294 * C141485 -
           ((C6374 + C6366 + C6367 + C6368 + C6369 + C6370) * C141221 +
            (C6373 + C6361 + C6360 + C6359 + C6358 + C6357) * C5863) *
               C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q));
    d2eezx[37] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
             C91 * C116 + C107 * C111 + C92 * C117) *
                C275 +
            (C101 * C276 + C89 * C579 + C103 * C277 + C90 * C580 + C105 * C278 +
             C91 * C581 + C107 * C279 + C92 * C582) *
                C141320) *
               C141309 * C141294 * C816 -
           ((C107 * C1003 + C92 * C1345 + C105 * C1004 + C91 * C1346 +
             C103 * C1005 + C90 * C1347 + C101 * C1006 + C89 * C1348) *
                C141320 +
            (C107 * C820 + C92 * C825 + C105 * C821 + C91 * C826 + C103 * C822 +
             C90 * C827 + C101 * C823 + C89 * C828) *
                C275) *
               C141309 * C141294 * C141485) *
              C818 +
          (((C101 * C822 + C89 * C827 + C103 * C821 + C90 * C826 + C105 * C820 +
             C91 * C825 + C107 * C824 + C92 * C829) *
                C275 +
            (C101 * C1005 + C89 * C1347 + C103 * C1004 + C90 * C1346 +
             C105 * C1003 + C91 * C1345 + C107 * C1007 + C92 * C1349) *
                C141320) *
               C141309 * C141294 * C141485 -
           ((C107 * C280 + C92 * C583 + C105 * C279 + C91 * C582 + C103 * C278 +
             C90 * C581 + C101 * C277 + C89 * C580) *
                C141320 +
            (C107 * C112 + C92 * C118 + C105 * C111 + C91 * C117 + C103 * C110 +
             C90 * C116 + C101 * C109 + C89 * C115) *
                C275) *
               C141309 * C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C141221 * C115) *
                 C275 +
             (C5869 * C276 + C5863 * C579 + C5871 * C277 + C141221 * C580) *
                 C141320) *
                C5865 +
            ((C7175 + C7176) * C275 + (C7549 + C7550) * C141320) * C5866 +
            ((C7179 + C7180) * C275 + (C7551 + C7552) * C141320) * C5867) *
               C141294 * C816 -
           (((C5871 * C7001 + C141221 * C7529 + C5869 * C7002 + C5863 * C7530) *
                 C141320 +
             (C5871 * C6728 + C141221 * C6731 + C5869 * C6729 + C5863 * C6732) *
                 C275) *
                C5867 +
            ((C7552 + C7551) * C141320 + (C7180 + C7179) * C275) * C5866 +
            ((C7550 + C7549) * C141320 + (C7176 + C7175) * C275) * C5865) *
               C141294 * C141485) *
              C818 +
          ((((C7183 + C7184) * C275 + (C7553 + C7554) * C141320) * C5865 +
            ((C7187 + C7188) * C275 + (C7555 + C7556) * C141320) * C5866 +
            ((C5869 * C6728 + C5863 * C6731 + C5871 * C6730 + C141221 * C6733) *
                 C275 +
             (C5869 * C7001 + C5863 * C7529 + C5871 * C7003 + C141221 * C7531) *
                 C141320) *
                C5867) *
               C141294 * C141485 -
           (((C7556 + C7555) * C141320 + (C7188 + C7187) * C275) * C5867 +
            ((C7554 + C7553) * C141320 + (C7184 + C7183) * C275) * C5866 +
            ((C5871 * C278 + C141221 * C581 + C5869 * C277 + C5863 * C580) *
                 C141320 +
             (C5871 * C110 + C141221 * C116 + C5869 * C109 + C5863 * C115) *
                 C275) *
                C5865) *
               C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q));
    d2eezy[37] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C188 * C108 + C141309 * C189) * C275 +
                       (C188 * C276 + C141309 * C635) * C141320) *
                          C89 +
                      (C642 + C658) * C90 + C662 * C91 + C663 * C92) *
                         C141294 * C816 -
                     ((C1434 + C1424) * C92 + (C1435 + C1427) * C91 +
                      (C1436 + C1430) * C90 +
                      ((C188 * C1006 + C141309 * C1419) * C141320 +
                       (C188 * C823 + C141309 * C912) * C275) *
                          C89) *
                         C141294 * C141485) *
                        C818 +
                    (((C1430 + C1436) * C89 + (C1427 + C1435) * C90 +
                      (C1424 + C1434) * C91 +
                      ((C188 * C824 + C141309 * C913) * C275 +
                       (C188 * C1007 + C141309 * C1420) * C141320) *
                          C92) *
                         C141294 * C141485 -
                     ((C661 + C653) * C92 + (C660 + C648) * C91 +
                      (C659 + C645) * C90 + (C658 + C642) * C89) *
                         C141294 * C816) *
                        C141483)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C5964 * C108 + C5865 * C189 + C5965 * C823 +
                        C5866 * C912 + C5966 * C2960 + C5867 * C3026) *
                           C275 +
                       (C5964 * C276 + C5865 * C635 + C5965 * C1006 +
                        C5866 * C1419 + C5966 * C3084 + C5867 * C3362) *
                           C141320) *
                          C5863 +
                      ((C5992 + C5993 + C5994) * C275 +
                       (C6535 + C6536 + C6537) * C141320) *
                          C141221) *
                         C141294 * C816 -
                     (((C7664 + C7665 + C7666) * C141320 +
                       (C6901 + C6902 + C6903) * C275) *
                          C141221 +
                      ((C5966 * C7002 + C5867 * C7655 + C5965 * C3084 +
                        C5866 * C3362 + C5964 * C1006 + C5865 * C1419) *
                           C141320 +
                       (C5966 * C6729 + C5867 * C6880 + C5965 * C2960 +
                        C5866 * C3026 + C5964 * C823 + C5865 * C912) *
                           C275) *
                          C5863) *
                         C141294 * C141485) *
                        C818 +
                    ((((C6903 + C6902 + C6901) * C275 +
                       (C7666 + C7665 + C7664) * C141320) *
                          C5863 +
                      ((C5964 * C821 + C5865 * C910 + C5965 * C2962 +
                        C5866 * C3028 + C5966 * C6730 + C5867 * C6881) *
                           C275 +
                       (C5964 * C1004 + C5865 * C1417 + C5965 * C3086 +
                        C5866 * C3364 + C5966 * C7003 + C5867 * C7656) *
                           C141320) *
                          C141221) *
                         C141294 * C141485 -
                     (((C6538 + C6539 + C6540) * C141320 +
                       (C6001 + C6002 + C6003) * C275) *
                          C141221 +
                      ((C6537 + C6536 + C6535) * C141320 +
                       (C5994 + C5993 + C5992) * C275) *
                          C5863) *
                         C141294 * C816) *
                        C141483)) /
                      (p * q * std::sqrt(p + q));
    d2eezz[37] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C141320 * C714) * C141309 * C89 +
            C747 * C90 + C748 * C91 + C749 * C92) *
               C141294 * C816 -
           (C1528 * C92 + C1529 * C91 + C1530 * C90 +
            (C713 * C823 + C1517 + C1517 + C141320 * C1505) * C141309 * C89) *
               C141294 * C141485) *
              C818 +
          ((C1530 * C89 + C1529 * C90 + C1528 * C91 +
            (C713 * C824 + C1518 + C1518 + C141320 * C1506) * C141309 * C92) *
               C141294 * C141485 -
           (C750 * C92 + C749 * C91 + C748 * C90 + C747 * C89) * C141294 *
               C816) *
              C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C713 * C108 + C721 + C721 + C141320 * C714) * C5865 +
             C7785 * C5866 + C7786 * C5867) *
                C5863 +
            (C6615 + C6616 + C6629) * C141221) *
               C141294 * C816 -
           ((C7788 + C7775 + C7776) * C141221 +
            ((C713 * C6729 + C7777 + C7777 + C141320 * C7765) * C5867 +
             C7786 * C5866 + C7785 * C5865) *
                C5863) *
               C141294 * C141485) *
              C818 +
          (((C7776 + C7775 + C7788) * C5863 +
            (C1526 * C5865 + C6628 * C5866 +
             (C713 * C6730 + C7778 + C7778 + C141320 * C7766) * C5867) *
                C141221) *
               C141294 * C141485 -
           ((C6630 + C6621 + C6622) * C141221 +
            (C6629 + C6616 + C6615) * C5863) *
               C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q));
    d2eexx[38] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C108 + C127 + C127 + C89 * C120 + C102 * C109 + C128 + C128 +
            C90 * C121 + C104 * C110 + C129 + C129 + C91 * C122 + C106 * C111 +
            C130 + C130 + C92 * C123) *
               C141320 * C141309 * C1596 -
           (C106 * C1598 + C1614 + C1614 + C92 * C1608 + C104 * C1599 + C1615 +
            C1615 + C91 * C1609 + C102 * C1600 + C1616 + C1616 + C90 * C1610 +
            C100 * C1601 + C1617 + C1617 + C89 * C1611) *
               C141320 * C141309 * C141487) *
              C141277 * C818 +
          ((C100 * C1600 + C1618 + C1618 + C89 * C1610 + C102 * C1599 + C1619 +
            C1619 + C90 * C1609 + C104 * C1598 + C1620 + C1620 + C91 * C1608 +
            C106 * C1602 + C1621 + C1621 + C92 * C1612) *
               C141320 * C141309 * C141487 -
           (C106 * C112 + C131 + C131 + C92 * C124 + C104 * C111 + C132 + C132 +
            C91 * C123 + C102 * C110 + C133 + C133 + C90 * C122 + C100 * C109 +
            C134 + C134 + C89 * C121) *
               C141320 * C141309 * C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5868 * C108 + C5873 + C5873 + C5863 * C120 + C5870 * C109 +
             C5874 + C5874 + C141221 * C121) *
                C141320 * C5865 +
            (C6774 + C6775) * C141320 * C5866 +
            (C6776 + C6777) * C141320 * C5867) *
               C1596 -
           ((C5870 * C7886 + C7896 + C7896 + C141221 * C7892 + C5868 * C7887 +
             C7897 + C7897 + C5863 * C7893) *
                C141320 * C5867 +
            (C5870 * C3491 + C7898 + C7898 + C141221 * C3499 + C5868 * C3490 +
             C7899 + C7899 + C5863 * C3498) *
                C141320 * C5866 +
            (C5870 * C1600 + C7900 + C7900 + C141221 * C1610 + C5868 * C1601 +
             C7901 + C7901 + C5863 * C1611) *
                C141320 * C5865) *
               C141487) *
              C141277 * C818 +
          (((C5868 * C1600 + C7902 + C7902 + C5863 * C1610 + C5870 * C1599 +
             C7903 + C7903 + C141221 * C1609) *
                C141320 * C5865 +
            (C5868 * C3491 + C7904 + C7904 + C5863 * C3499 + C5870 * C3492 +
             C7905 + C7905 + C141221 * C3500) *
                C141320 * C5866 +
            (C5868 * C7886 + C7906 + C7906 + C5863 * C7892 + C5870 * C7888 +
             C7907 + C7907 + C141221 * C7894) *
                C141320 * C5867) *
               C141487 -
           ((C6781 + C6780) * C141320 * C5867 +
            (C6779 + C6778) * C141320 * C5866 +
            (C5870 * C110 + C5883 + C5883 + C141221 * C122 + C5868 * C109 +
             C5884 + C5884 + C5863 * C121) *
                C141320 * C5865) *
               C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eexy[38] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141309 * C189) * C101 +
            (C188 * C114 + C141309 * C195) * C89 + C218 * C103 + C219 * C90 +
            C220 * C105 + C221 * C91 + C222 * C107 + C223 * C92) *
               C141320 * C1596 -
           (C1710 * C92 + C1711 * C107 + C1712 * C91 + C1713 * C105 +
            C1714 * C90 + C1715 * C103 +
            (C188 * C1606 + C141309 * C1695) * C89 +
            (C188 * C1601 + C141309 * C1690) * C101) *
               C141320 * C141487) *
              C141277 * C818 +
          ((C1715 * C101 + C1714 * C89 + C1713 * C103 + C1712 * C90 +
            C1711 * C105 + C1710 * C91 +
            (C188 * C1602 + C141309 * C1691) * C107 +
            (C188 * C1607 + C141309 * C1696) * C92) *
               C141320 * C141487 -
           (C224 * C92 + C225 * C107 + C223 * C91 + C222 * C105 + C221 * C90 +
            C220 * C103 + C219 * C89 + C218 * C101) *
               C141320 * C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5964 * C108 + C5865 * C189 + C5965 * C823 + C5866 * C912 +
             C5966 * C2960 + C5867 * C3026) *
                C5869 +
            (C5964 * C114 + C5865 * C195 + C5965 * C828 + C5866 * C917 +
             C5966 * C2964 + C5867 * C3030) *
                C5863 +
            (C5992 + C5993 + C5994) * C5871 +
            (C5995 + C5996 + C5997) * C141221) *
               C141320 * C1596 -
           ((C8024 + C8025 + C8026) * C141221 +
            (C8027 + C8028 + C8029) * C5871 +
            (C5966 * C7890 + C5867 * C8009 + C5965 * C3494 + C5866 * C3576 +
             C5964 * C1606 + C5865 * C1695) *
                C5863 +
            (C5966 * C7887 + C5867 * C8006 + C5965 * C3490 + C5866 * C3572 +
             C5964 * C1601 + C5865 * C1690) *
                C5869) *
               C141320 * C141487) *
              C141277 * C818 +
          (((C8029 + C8028 + C8027) * C5869 + (C8026 + C8025 + C8024) * C5863 +
            (C5964 * C1599 + C5865 * C1688 + C5965 * C3492 + C5866 * C3574 +
             C5966 * C7888 + C5867 * C8007) *
                C5871 +
            (C5964 * C1604 + C5865 * C1693 + C5965 * C3496 + C5866 * C3578 +
             C5966 * C7891 + C5867 * C8010) *
                C141221) *
               C141320 * C141487 -
           ((C5998 + C5999 + C6000) * C141221 +
            (C6001 + C6002 + C6003) * C5871 + (C5997 + C5996 + C5995) * C5863 +
            (C5994 + C5993 + C5992) * C5869) *
               C141320 * C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eexz[38] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141320 * C276) * C101 +
            (C275 * C114 + C141320 * C282) * C89 + C305 * C103 + C306 * C90 +
            C307 * C105 + C308 * C91 + C309 * C107 + C310 * C92) *
               C141309 * C1596 -
           (C1804 * C92 + C1805 * C107 + C1806 * C91 + C1807 * C105 +
            C1808 * C90 + C1809 * C103 +
            (C275 * C1606 + C141320 * C1789) * C89 +
            (C275 * C1601 + C141320 * C1784) * C101) *
               C141309 * C141487) *
              C141277 * C818 +
          ((C1809 * C101 + C1808 * C89 + C1807 * C103 + C1806 * C90 +
            C1805 * C105 + C1804 * C91 +
            (C275 * C1602 + C141320 * C1785) * C107 +
            (C275 * C1607 + C141320 * C1790) * C92) *
               C141309 * C141487 -
           (C311 * C92 + C312 * C107 + C310 * C91 + C309 * C105 + C308 * C90 +
            C307 * C103 + C306 * C89 + C305 * C101) *
               C141309 * C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141320 * C276) * C5869 +
             (C275 * C114 + C141320 * C282) * C5863 + C305 * C5871 +
             C306 * C141221) *
                C5865 +
            (C7038 + C7039 + C7012 + C7013) * C5866 +
            (C7040 + C7041 + C7018 + C7019) * C5867) *
               C1596 -
           ((C8142 * C141221 + C8143 * C5871 +
             (C275 * C7890 + C141320 * C8131) * C5863 +
             (C275 * C7887 + C141320 * C8128) * C5869) *
                C5867 +
            (C8144 * C141221 + C8145 * C5871 +
             (C275 * C3494 + C141320 * C3650) * C5863 +
             (C275 * C3490 + C141320 * C3646) * C5869) *
                C5866 +
            (C1808 * C141221 + C1809 * C5871 +
             (C275 * C1606 + C141320 * C1789) * C5863 +
             (C275 * C1601 + C141320 * C1784) * C5869) *
                C5865) *
               C141487) *
              C141277 * C818 +
          (((C1809 * C5869 + C1808 * C5863 + C1807 * C5871 + C1806 * C141221) *
                C5865 +
            (C8145 * C5869 + C8144 * C5863 +
             (C275 * C3492 + C141320 * C3648) * C5871 +
             (C275 * C3496 + C141320 * C3652) * C141221) *
                C5866 +
            (C8143 * C5869 + C8142 * C5863 +
             (C275 * C7888 + C141320 * C8129) * C5871 +
             (C275 * C7891 + C141320 * C8132) * C141221) *
                C5867) *
               C141487 -
           ((C7031 + C7030 + C7029 + C7028) * C5867 +
            (C7027 + C7026 + C7025 + C7024) * C5866 +
            (C308 * C141221 + C307 * C5871 + C306 * C5863 + C305 * C5869) *
                C5865) *
               C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[38] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
             C91 * C116 + C107 * C111 + C92 * C117) *
                C188 +
            (C101 * C189 + C89 * C362 + C103 * C190 + C90 * C363 + C105 * C191 +
             C91 * C364 + C107 * C192 + C92 * C365) *
                C141309) *
               C141320 * C1596 -
           ((C107 * C1687 + C92 * C1875 + C105 * C1688 + C91 * C1876 +
             C103 * C1689 + C90 * C1877 + C101 * C1690 + C89 * C1878) *
                C141309 +
            (C107 * C1598 + C92 * C1603 + C105 * C1599 + C91 * C1604 +
             C103 * C1600 + C90 * C1605 + C101 * C1601 + C89 * C1606) *
                C188) *
               C141320 * C141487) *
              C141277 * C818 +
          (((C101 * C1600 + C89 * C1605 + C103 * C1599 + C90 * C1604 +
             C105 * C1598 + C91 * C1603 + C107 * C1602 + C92 * C1607) *
                C188 +
            (C101 * C1689 + C89 * C1877 + C103 * C1688 + C90 * C1876 +
             C105 * C1687 + C91 * C1875 + C107 * C1691 + C92 * C1879) *
                C141309) *
               C141320 * C141487 -
           ((C107 * C193 + C92 * C366 + C105 * C192 + C91 * C365 + C103 * C191 +
             C90 * C364 + C101 * C190 + C89 * C363) *
                C141309 +
            (C107 * C112 + C92 * C118 + C105 * C111 + C91 * C117 + C103 * C110 +
             C90 * C116 + C101 * C109 + C89 * C115) *
                C188) *
               C141320 * C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C141221 * C115) *
                C5964 +
            (C5869 * C189 + C5863 * C362 + C5871 * C190 + C141221 * C363) *
                C5865 +
            (C7175 + C7176) * C5965 + (C7177 + C7178) * C5866 +
            (C7179 + C7180) * C5966 + (C7181 + C7182) * C5867) *
               C141320 * C1596 -
           ((C5871 * C8005 + C141221 * C8243 + C5869 * C8006 + C5863 * C8244) *
                C5867 +
            (C5871 * C7886 + C141221 * C7889 + C5869 * C7887 + C5863 * C7890) *
                C5966 +
            (C5871 * C3573 + C141221 * C3721 + C5869 * C3572 + C5863 * C3720) *
                C5866 +
            (C5871 * C3491 + C141221 * C3495 + C5869 * C3490 + C5863 * C3494) *
                C5965 +
            (C5871 * C1689 + C141221 * C1877 + C5869 * C1690 + C5863 * C1878) *
                C5865 +
            (C5871 * C1600 + C141221 * C1605 + C5869 * C1601 + C5863 * C1606) *
                C5964) *
               C141320 * C141487) *
              C141277 * C818 +
          (((C5869 * C1600 + C5863 * C1605 + C5871 * C1599 + C141221 * C1604) *
                C5964 +
            (C5869 * C1689 + C5863 * C1877 + C5871 * C1688 + C141221 * C1876) *
                C5865 +
            (C5869 * C3491 + C5863 * C3495 + C5871 * C3492 + C141221 * C3496) *
                C5965 +
            (C5869 * C3573 + C5863 * C3721 + C5871 * C3574 + C141221 * C3722) *
                C5866 +
            (C5869 * C7886 + C5863 * C7889 + C5871 * C7888 + C141221 * C7891) *
                C5966 +
            (C5869 * C8005 + C5863 * C8243 + C5871 * C8007 + C141221 * C8245) *
                C5867) *
               C141320 * C141487 -
           ((C7190 + C7189) * C5867 + (C7188 + C7187) * C5966 +
            (C7186 + C7185) * C5866 + (C7184 + C7183) * C5965 +
            (C5871 * C191 + C141221 * C364 + C5869 * C190 + C5863 * C363) *
                C5865 +
            (C5871 * C110 + C141221 * C116 + C5869 * C109 + C5863 * C115) *
                C5964) *
               C141320 * C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[38] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C418 * C108 + C426 + C426 + C141309 * C419) * C89 +
                      C448 * C90 + C449 * C91 + C450 * C92) *
                         C141320 * C1596 -
                     (C1969 * C92 + C1970 * C91 + C1971 * C90 +
                      (C418 * C1601 + C1961 + C1961 + C141309 * C1949) * C89) *
                         C141320 * C141487) *
                        C141277 * C818 +
                    ((C1971 * C89 + C1970 * C90 + C1969 * C91 +
                      (C418 * C1602 + C1962 + C1962 + C141309 * C1950) * C92) *
                         C141320 * C141487 -
                     (C451 * C92 + C450 * C91 + C449 * C90 + C448 * C89) *
                         C141320 * C1596) *
                        C141277 * C141483)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C6237 * C108 + C6241 + C6241 + C5865 * C419 +
                       C6238 * C823 + C6242 + C6242 + C5866 * C1171 +
                       C6239 * C2960 + C6243 + C6243 + C5867 * C3196) *
                          C5863 +
                      (C6277 + C6278 + C6279) * C141221) *
                         C141320 * C1596 -
                     ((C8369 + C8370 + C8371) * C141221 +
                      (C6239 * C7887 + C8357 + C8357 + C5867 * C8345 +
                       C6238 * C3490 + C8358 + C8358 + C5866 * C3790 +
                       C6237 * C1601 + C8359 + C8359 + C5865 * C1949) *
                          C5863) *
                         C141320 * C141487) *
                        C141277 * C818 +
                    (((C8371 + C8370 + C8369) * C5863 +
                      (C6237 * C1599 + C8360 + C8360 + C5865 * C1947 +
                       C6238 * C3492 + C8361 + C8361 + C5866 * C3792 +
                       C6239 * C7888 + C8362 + C8362 + C5867 * C8346) *
                          C141221) *
                         C141320 * C141487 -
                     ((C6280 + C6281 + C6282) * C141221 +
                      (C6279 + C6278 + C6277) * C5863) *
                         C141320 * C1596) *
                        C141277 * C141483)) /
                      (p * q * std::sqrt(p + q));
    d2eeyz[38] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141320 * C276) * C188 +
             (C275 * C189 + C141320 * C501) * C141309) *
                C89 +
            (C508 + C524) * C90 + C528 * C91 + C529 * C92) *
               C1596 -
           ((C2055 + C2045) * C92 + (C2056 + C2048) * C91 +
            (C2057 + C2051) * C90 +
            ((C275 * C1690 + C141320 * C2040) * C141309 +
             (C275 * C1601 + C141320 * C1784) * C188) *
                C89) *
               C141487) *
              C141277 * C818 +
          (((C2051 + C2057) * C89 + (C2048 + C2056) * C90 +
            (C2045 + C2055) * C91 +
            ((C275 * C1602 + C141320 * C1785) * C188 +
             (C275 * C1691 + C141320 * C2041) * C141309) *
                C92) *
               C141487 -
           ((C527 + C519) * C92 + (C526 + C514) * C91 + (C525 + C511) * C90 +
            (C524 + C508) * C89) *
               C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141320 * C276) * C5964 +
             (C275 * C189 + C141320 * C501) * C5865 + C7032 * C5965 +
             C7428 * C5866 + C7034 * C5966 + C7429 * C5867) *
                C5863 +
            (C6357 + C6358 + C6359 + C6360 + C6361 + C6373) * C141221) *
               C1596 -
           ((C8483 + C8475 + C8484 + C8478 + C8479 + C8480) * C141221 +
            ((C275 * C8006 + C141320 * C8470) * C5867 +
             (C275 * C7887 + C141320 * C8128) * C5966 +
             (C275 * C3572 + C141320 * C3864) * C5866 +
             (C275 * C3490 + C141320 * C3646) * C5965 +
             (C275 * C1690 + C141320 * C2040) * C5865 +
             (C275 * C1601 + C141320 * C1784) * C5964) *
                C5863) *
               C141487) *
              C141277 * C818 +
          (((C8480 + C8479 + C8478 + C8484 + C8475 + C8483) * C5863 +
            (C1807 * C5964 + C2053 * C5865 +
             (C275 * C3492 + C141320 * C3648) * C5965 +
             (C275 * C3574 + C141320 * C3866) * C5866 +
             (C275 * C7888 + C141320 * C8129) * C5966 +
             (C275 * C8007 + C141320 * C8471) * C5867) *
                C141221) *
               C141487 -
           ((C6374 + C6366 + C6367 + C6368 + C6369 + C6370) * C141221 +
            (C6373 + C6361 + C6360 + C6359 + C6358 + C6357) * C5863) *
               C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eezx[38] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
             C91 * C116 + C107 * C111 + C92 * C117) *
                C275 +
            (C101 * C276 + C89 * C579 + C103 * C277 + C90 * C580 + C105 * C278 +
             C91 * C581 + C107 * C279 + C92 * C582) *
                C141320) *
               C141309 * C1596 -
           ((C107 * C1781 + C92 * C2123 + C105 * C1782 + C91 * C2124 +
             C103 * C1783 + C90 * C2125 + C101 * C1784 + C89 * C2126) *
                C141320 +
            (C107 * C1598 + C92 * C1603 + C105 * C1599 + C91 * C1604 +
             C103 * C1600 + C90 * C1605 + C101 * C1601 + C89 * C1606) *
                C275) *
               C141309 * C141487) *
              C141277 * C818 +
          (((C101 * C1600 + C89 * C1605 + C103 * C1599 + C90 * C1604 +
             C105 * C1598 + C91 * C1603 + C107 * C1602 + C92 * C1607) *
                C275 +
            (C101 * C1783 + C89 * C2125 + C103 * C1782 + C90 * C2124 +
             C105 * C1781 + C91 * C2123 + C107 * C1785 + C92 * C2127) *
                C141320) *
               C141309 * C141487 -
           ((C107 * C280 + C92 * C583 + C105 * C279 + C91 * C582 + C103 * C278 +
             C90 * C581 + C101 * C277 + C89 * C580) *
                C141320 +
            (C107 * C112 + C92 * C118 + C105 * C111 + C91 * C117 + C103 * C110 +
             C90 * C116 + C101 * C109 + C89 * C115) *
                C275) *
               C141309 * C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C141221 * C115) *
                 C275 +
             (C5869 * C276 + C5863 * C579 + C5871 * C277 + C141221 * C580) *
                 C141320) *
                C5865 +
            ((C7175 + C7176) * C275 + (C7549 + C7550) * C141320) * C5866 +
            ((C7179 + C7180) * C275 + (C7551 + C7552) * C141320) * C5867) *
               C1596 -
           (((C5871 * C8127 + C141221 * C8582 + C5869 * C8128 + C5863 * C8583) *
                 C141320 +
             (C5871 * C7886 + C141221 * C7889 + C5869 * C7887 + C5863 * C7890) *
                 C275) *
                C5867 +
            ((C5871 * C3647 + C141221 * C3935 + C5869 * C3646 + C5863 * C3934) *
                 C141320 +
             (C5871 * C3491 + C141221 * C3495 + C5869 * C3490 + C5863 * C3494) *
                 C275) *
                C5866 +
            ((C5871 * C1783 + C141221 * C2125 + C5869 * C1784 + C5863 * C2126) *
                 C141320 +
             (C5871 * C1600 + C141221 * C1605 + C5869 * C1601 + C5863 * C1606) *
                 C275) *
                C5865) *
               C141487) *
              C141277 * C818 +
          ((((C5869 * C1600 + C5863 * C1605 + C5871 * C1599 + C141221 * C1604) *
                 C275 +
             (C5869 * C1783 + C5863 * C2125 + C5871 * C1782 + C141221 * C2124) *
                 C141320) *
                C5865 +
            ((C5869 * C3491 + C5863 * C3495 + C5871 * C3492 + C141221 * C3496) *
                 C275 +
             (C5869 * C3647 + C5863 * C3935 + C5871 * C3648 + C141221 * C3936) *
                 C141320) *
                C5866 +
            ((C5869 * C7886 + C5863 * C7889 + C5871 * C7888 + C141221 * C7891) *
                 C275 +
             (C5869 * C8127 + C5863 * C8582 + C5871 * C8129 + C141221 * C8584) *
                 C141320) *
                C5867) *
               C141487 -
           (((C7556 + C7555) * C141320 + (C7188 + C7187) * C275) * C5867 +
            ((C7554 + C7553) * C141320 + (C7184 + C7183) * C275) * C5866 +
            ((C5871 * C278 + C141221 * C581 + C5869 * C277 + C5863 * C580) *
                 C141320 +
             (C5871 * C110 + C141221 * C116 + C5869 * C109 + C5863 * C115) *
                 C275) *
                C5865) *
               C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eezy[38] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C188 * C108 + C141309 * C189) * C275 +
                       (C188 * C276 + C141309 * C635) * C141320) *
                          C89 +
                      (C642 + C658) * C90 + C662 * C91 + C663 * C92) *
                         C1596 -
                     ((C2212 + C2202) * C92 + (C2213 + C2205) * C91 +
                      (C2214 + C2208) * C90 +
                      ((C188 * C1784 + C141309 * C2197) * C141320 +
                       (C188 * C1601 + C141309 * C1690) * C275) *
                          C89) *
                         C141487) *
                        C141277 * C818 +
                    (((C2208 + C2214) * C89 + (C2205 + C2213) * C90 +
                      (C2202 + C2212) * C91 +
                      ((C188 * C1602 + C141309 * C1691) * C275 +
                       (C188 * C1785 + C141309 * C2198) * C141320) *
                          C92) *
                         C141487 -
                     ((C661 + C653) * C92 + (C660 + C648) * C91 +
                      (C659 + C645) * C90 + (C658 + C642) * C89) *
                         C1596) *
                        C141277 * C141483)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C5964 * C108 + C5865 * C189 + C5965 * C823 +
                        C5866 * C912 + C5966 * C2960 + C5867 * C3026) *
                           C275 +
                       (C5964 * C276 + C5865 * C635 + C5965 * C1006 +
                        C5866 * C1419 + C5966 * C3084 + C5867 * C3362) *
                           C141320) *
                          C5863 +
                      ((C5992 + C5993 + C5994) * C275 +
                       (C6535 + C6536 + C6537) * C141320) *
                          C141221) *
                         C1596 -
                     (((C8693 + C8694 + C8695) * C141320 +
                       (C8027 + C8028 + C8029) * C275) *
                          C141221 +
                      ((C5966 * C8128 + C5867 * C8684 + C5965 * C3646 +
                        C5866 * C4004 + C5964 * C1784 + C5865 * C2197) *
                           C141320 +
                       (C5966 * C7887 + C5867 * C8006 + C5965 * C3490 +
                        C5866 * C3572 + C5964 * C1601 + C5865 * C1690) *
                           C275) *
                          C5863) *
                         C141487) *
                        C141277 * C818 +
                    ((((C8029 + C8028 + C8027) * C275 +
                       (C8695 + C8694 + C8693) * C141320) *
                          C5863 +
                      ((C5964 * C1599 + C5865 * C1688 + C5965 * C3492 +
                        C5866 * C3574 + C5966 * C7888 + C5867 * C8007) *
                           C275 +
                       (C5964 * C1782 + C5865 * C2195 + C5965 * C3648 +
                        C5866 * C4006 + C5966 * C8129 + C5867 * C8685) *
                           C141320) *
                          C141221) *
                         C141487 -
                     (((C6538 + C6539 + C6540) * C141320 +
                       (C6001 + C6002 + C6003) * C275) *
                          C141221 +
                      ((C6537 + C6536 + C6535) * C141320 +
                       (C5994 + C5993 + C5992) * C275) *
                          C5863) *
                         C1596) *
                        C141277 * C141483)) /
                      (p * q * std::sqrt(p + q));
    d2eezz[38] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C141320 * C714) * C141309 * C89 +
            C747 * C90 + C748 * C91 + C749 * C92) *
               C1596 -
           (C2306 * C92 + C2307 * C91 + C2308 * C90 +
            (C713 * C1601 + C2295 + C2295 + C141320 * C2283) * C141309 * C89) *
               C141487) *
              C141277 * C818 +
          ((C2308 * C89 + C2307 * C90 + C2306 * C91 +
            (C713 * C1602 + C2296 + C2296 + C141320 * C2284) * C141309 * C92) *
               C141487 -
           (C750 * C92 + C749 * C91 + C748 * C90 + C747 * C89) * C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C713 * C108 + C721 + C721 + C141320 * C714) * C5865 +
             C7785 * C5866 + C7786 * C5867) *
                C5863 +
            (C6615 + C6616 + C6629) * C141221) *
               C1596 -
           ((C8811 + C8812 + C8802) * C141221 +
            ((C713 * C7887 + C8803 + C8803 + C141320 * C8794) * C5867 +
             (C713 * C3490 + C4079 + C4079 + C141320 * C4074) * C5866 +
             (C713 * C1601 + C2295 + C2295 + C141320 * C2283) * C5865) *
                C5863) *
               C141487) *
              C141277 * C818 +
          (((C8802 + C8812 + C8811) * C5863 +
            (C2304 * C5865 +
             (C713 * C3492 + C4081 + C4081 + C141320 * C4076) * C5866 +
             (C713 * C7888 + C8804 + C8804 + C141320 * C8795) * C5867) *
                C141221) *
               C141487 -
           ((C6630 + C6621 + C6622) * C141221 +
            (C6629 + C6616 + C6615) * C5863) *
               C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eexx[39] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C100 * C108 + C127 + C127 + C89 * C120 + C102 * C109 +
                      C128 + C128 + C90 * C121 + C104 * C110 + C129 + C129 +
                      C91 * C122 + C106 * C111 + C130 + C130 + C92 * C123) *
                         C141320 * C141309 * C141294 * C2374 -
                     (C106 * C820 + C836 + C836 + C92 * C830 + C104 * C821 +
                      C837 + C837 + C91 * C831 + C102 * C822 + C838 + C838 +
                      C90 * C832 + C100 * C823 + C839 + C839 + C89 * C833) *
                         C141320 * C141309 * C141294 * C141485) *
                        C2376 +
                    ((C100 * C822 + C840 + C840 + C89 * C832 + C102 * C821 +
                      C841 + C841 + C90 * C831 + C104 * C820 + C842 + C842 +
                      C91 * C830 + C106 * C824 + C843 + C843 + C92 * C834) *
                         C141320 * C141309 * C141294 * C141485 -
                     (C106 * C112 + C131 + C131 + C92 * C124 + C104 * C111 +
                      C132 + C132 + C91 * C123 + C102 * C110 + C133 + C133 +
                      C90 * C122 + C100 * C109 + C134 + C134 + C89 * C121) *
                         C141320 * C141309 * C141294 * C2374) *
                        C141483)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C5868 * C108 + C5873 + C5873 + C5863 * C120 +
                       C5870 * C109 + C5874 + C5874 + C141221 * C121) *
                          C141320 * C5865 +
                      (C6774 + C6775) * C141320 * C5866 +
                      (C6776 + C6777) * C141320 * C5867) *
                         C141294 * C2374 -
                     ((C5870 * C6728 + C6746 + C6746 + C141221 * C6734 +
                       C5868 * C6729 + C6747 + C6747 + C5863 * C6735) *
                          C141320 * C5867 +
                      (C6777 + C6776) * C141320 * C5866 +
                      (C6775 + C6774) * C141320 * C5865) *
                         C141294 * C141485) *
                        C2376 +
                    (((C6778 + C6779) * C141320 * C5865 +
                      (C6780 + C6781) * C141320 * C5866 +
                      (C5868 * C6728 + C6756 + C6756 + C5863 * C6734 +
                       C5870 * C6730 + C6757 + C6757 + C141221 * C6736) *
                          C141320 * C5867) *
                         C141294 * C141485 -
                     ((C6781 + C6780) * C141320 * C5867 +
                      (C6779 + C6778) * C141320 * C5866 +
                      (C5870 * C110 + C5883 + C5883 + C141221 * C122 +
                       C5868 * C109 + C5884 + C5884 + C5863 * C121) *
                          C141320 * C5865) *
                         C141294 * C2374) *
                        C141483)) /
                      (p * q * std::sqrt(p + q));
    d2eexy[39] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141309 * C189) * C101 +
            (C188 * C114 + C141309 * C195) * C89 + C218 * C103 + C219 * C90 +
            C220 * C105 + C221 * C91 + C222 * C107 + C223 * C92) *
               C141320 * C141294 * C2374 -
           (C932 * C92 + C933 * C107 + C934 * C91 + C935 * C105 + C936 * C90 +
            C937 * C103 + (C188 * C828 + C141309 * C917) * C89 +
            (C188 * C823 + C141309 * C912) * C101) *
               C141320 * C141294 * C141485) *
              C2376 +
          ((C937 * C101 + C936 * C89 + C935 * C103 + C934 * C90 + C933 * C105 +
            C932 * C91 + (C188 * C824 + C141309 * C913) * C107 +
            (C188 * C829 + C141309 * C918) * C92) *
               C141320 * C141294 * C141485 -
           (C224 * C92 + C225 * C107 + C223 * C91 + C222 * C105 + C221 * C90 +
            C220 * C103 + C219 * C89 + C218 * C101) *
               C141320 * C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5964 * C108 + C5865 * C189 + C5965 * C823 + C5866 * C912 +
             C5966 * C2960 + C5867 * C3026) *
                C5869 +
            (C5964 * C114 + C5865 * C195 + C5965 * C828 + C5866 * C917 +
             C5966 * C2964 + C5867 * C3030) *
                C5863 +
            (C5992 + C5993 + C5994) * C5871 +
            (C5995 + C5996 + C5997) * C141221) *
               C141320 * C141294 * C2374 -
           ((C6898 + C6899 + C6900) * C141221 +
            (C6901 + C6902 + C6903) * C5871 +
            (C5966 * C6732 + C5867 * C6883 + C5965 * C2964 + C5866 * C3030 +
             C5964 * C828 + C5865 * C917) *
                C5863 +
            (C5966 * C6729 + C5867 * C6880 + C5965 * C2960 + C5866 * C3026 +
             C5964 * C823 + C5865 * C912) *
                C5869) *
               C141320 * C141294 * C141485) *
              C2376 +
          (((C6903 + C6902 + C6901) * C5869 + (C6900 + C6899 + C6898) * C5863 +
            (C5964 * C821 + C5865 * C910 + C5965 * C2962 + C5866 * C3028 +
             C5966 * C6730 + C5867 * C6881) *
                C5871 +
            (C5964 * C826 + C5865 * C915 + C5965 * C2966 + C5866 * C3032 +
             C5966 * C6733 + C5867 * C6884) *
                C141221) *
               C141320 * C141294 * C141485 -
           ((C5998 + C5999 + C6000) * C141221 +
            (C6001 + C6002 + C6003) * C5871 + (C5997 + C5996 + C5995) * C5863 +
            (C5994 + C5993 + C5992) * C5869) *
               C141320 * C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q));
    d2eexz[39] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141320 * C276) * C101 +
            (C275 * C114 + C141320 * C282) * C89 + C305 * C103 + C306 * C90 +
            C307 * C105 + C308 * C91 + C309 * C107 + C310 * C92) *
               C141309 * C141294 * C2374 -
           (C1026 * C92 + C1027 * C107 + C1028 * C91 + C1029 * C105 +
            C1030 * C90 + C1031 * C103 + (C275 * C828 + C141320 * C1011) * C89 +
            (C275 * C823 + C141320 * C1006) * C101) *
               C141309 * C141294 * C141485) *
              C2376 +
          ((C1031 * C101 + C1030 * C89 + C1029 * C103 + C1028 * C90 +
            C1027 * C105 + C1026 * C91 +
            (C275 * C824 + C141320 * C1007) * C107 +
            (C275 * C829 + C141320 * C1012) * C92) *
               C141309 * C141294 * C141485 -
           (C311 * C92 + C312 * C107 + C310 * C91 + C309 * C105 + C308 * C90 +
            C307 * C103 + C306 * C89 + C305 * C101) *
               C141309 * C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141320 * C276) * C5869 +
             (C275 * C114 + C141320 * C282) * C5863 + C305 * C5871 +
             C306 * C141221) *
                C5865 +
            (C7038 + C7039 + C7012 + C7013) * C5866 +
            (C7040 + C7041 + C7018 + C7019) * C5867) *
               C141294 * C2374 -
           ((C7036 * C141221 + C7037 * C5871 +
             (C275 * C6732 + C141320 * C7005) * C5863 +
             (C275 * C6729 + C141320 * C7002) * C5869) *
                C5867 +
            (C7019 + C7018 + C7041 + C7040) * C5866 +
            (C7013 + C7012 + C7039 + C7038) * C5865) *
               C141294 * C141485) *
              C2376 +
          (((C7024 + C7025 + C7026 + C7027) * C5865 +
            (C7028 + C7029 + C7030 + C7031) * C5866 +
            (C7037 * C5869 + C7036 * C5863 +
             (C275 * C6730 + C141320 * C7003) * C5871 +
             (C275 * C6733 + C141320 * C7006) * C141221) *
                C5867) *
               C141294 * C141485 -
           ((C7031 + C7030 + C7029 + C7028) * C5867 +
            (C7027 + C7026 + C7025 + C7024) * C5866 +
            (C308 * C141221 + C307 * C5871 + C306 * C5863 + C305 * C5869) *
                C5865) *
               C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[39] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
             C91 * C116 + C107 * C111 + C92 * C117) *
                C188 +
            (C101 * C189 + C89 * C362 + C103 * C190 + C90 * C363 + C105 * C191 +
             C91 * C364 + C107 * C192 + C92 * C365) *
                C141309) *
               C141320 * C141294 * C2374 -
           ((C107 * C909 + C92 * C1097 + C105 * C910 + C91 * C1098 +
             C103 * C911 + C90 * C1099 + C101 * C912 + C89 * C1100) *
                C141309 +
            (C107 * C820 + C92 * C825 + C105 * C821 + C91 * C826 + C103 * C822 +
             C90 * C827 + C101 * C823 + C89 * C828) *
                C188) *
               C141320 * C141294 * C141485) *
              C2376 +
          (((C101 * C822 + C89 * C827 + C103 * C821 + C90 * C826 + C105 * C820 +
             C91 * C825 + C107 * C824 + C92 * C829) *
                C188 +
            (C101 * C911 + C89 * C1099 + C103 * C910 + C90 * C1098 +
             C105 * C909 + C91 * C1097 + C107 * C913 + C92 * C1101) *
                C141309) *
               C141320 * C141294 * C141485 -
           ((C107 * C193 + C92 * C366 + C105 * C192 + C91 * C365 + C103 * C191 +
             C90 * C364 + C101 * C190 + C89 * C363) *
                C141309 +
            (C107 * C112 + C92 * C118 + C105 * C111 + C91 * C117 + C103 * C110 +
             C90 * C116 + C101 * C109 + C89 * C115) *
                C188) *
               C141320 * C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C141221 * C115) *
                C5964 +
            (C5869 * C189 + C5863 * C362 + C5871 * C190 + C141221 * C363) *
                C5865 +
            (C7175 + C7176) * C5965 + (C7177 + C7178) * C5866 +
            (C7179 + C7180) * C5966 + (C7181 + C7182) * C5867) *
               C141320 * C141294 * C2374 -
           ((C5871 * C6879 + C141221 * C7139 + C5869 * C6880 + C5863 * C7140) *
                C5867 +
            (C5871 * C6728 + C141221 * C6731 + C5869 * C6729 + C5863 * C6732) *
                C5966 +
            (C7182 + C7181) * C5866 + (C7180 + C7179) * C5965 +
            (C7178 + C7177) * C5865 + (C7176 + C7175) * C5964) *
               C141320 * C141294 * C141485) *
              C2376 +
          (((C7183 + C7184) * C5964 + (C7185 + C7186) * C5865 +
            (C7187 + C7188) * C5965 + (C7189 + C7190) * C5866 +
            (C5869 * C6728 + C5863 * C6731 + C5871 * C6730 + C141221 * C6733) *
                C5966 +
            (C5869 * C6879 + C5863 * C7139 + C5871 * C6881 + C141221 * C7141) *
                C5867) *
               C141320 * C141294 * C141485 -
           ((C7190 + C7189) * C5867 + (C7188 + C7187) * C5966 +
            (C7186 + C7185) * C5866 + (C7184 + C7183) * C5965 +
            (C5871 * C191 + C141221 * C364 + C5869 * C190 + C5863 * C363) *
                C5865 +
            (C5871 * C110 + C141221 * C116 + C5869 * C109 + C5863 * C115) *
                C5964) *
               C141320 * C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[39] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C418 * C108 + C426 + C426 + C141309 * C419) * C89 +
                      C448 * C90 + C449 * C91 + C450 * C92) *
                         C141320 * C141294 * C2374 -
                     (C1191 * C92 + C1192 * C91 + C1193 * C90 +
                      (C418 * C823 + C1183 + C1183 + C141309 * C1171) * C89) *
                         C141320 * C141294 * C141485) *
                        C2376 +
                    ((C1193 * C89 + C1192 * C90 + C1191 * C91 +
                      (C418 * C824 + C1184 + C1184 + C141309 * C1172) * C92) *
                         C141320 * C141294 * C141485 -
                     (C451 * C92 + C450 * C91 + C449 * C90 + C448 * C89) *
                         C141320 * C141294 * C2374) *
                        C141483)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C6237 * C108 + C6241 + C6241 + C5865 * C419 +
                       C6238 * C823 + C6242 + C6242 + C5866 * C1171 +
                       C6239 * C2960 + C6243 + C6243 + C5867 * C3196) *
                          C5863 +
                      (C6277 + C6278 + C6279) * C141221) *
                         C141320 * C141294 * C2374 -
                     ((C7313 + C7314 + C7315) * C141221 +
                      (C6239 * C6729 + C7301 + C7301 + C5867 * C7289 +
                       C6238 * C2960 + C7302 + C7302 + C5866 * C3196 +
                       C6237 * C823 + C7303 + C7303 + C5865 * C1171) *
                          C5863) *
                         C141320 * C141294 * C141485) *
                        C2376 +
                    (((C7315 + C7314 + C7313) * C5863 +
                      (C6237 * C821 + C7304 + C7304 + C5865 * C1169 +
                       C6238 * C2962 + C7305 + C7305 + C5866 * C3198 +
                       C6239 * C6730 + C7306 + C7306 + C5867 * C7290) *
                          C141221) *
                         C141320 * C141294 * C141485 -
                     ((C6280 + C6281 + C6282) * C141221 +
                      (C6279 + C6278 + C6277) * C5863) *
                         C141320 * C141294 * C2374) *
                        C141483)) /
                      (p * q * std::sqrt(p + q));
    d2eeyz[39] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141320 * C276) * C188 +
             (C275 * C189 + C141320 * C501) * C141309) *
                C89 +
            (C508 + C524) * C90 + C528 * C91 + C529 * C92) *
               C141294 * C2374 -
           ((C1277 + C1267) * C92 + (C1278 + C1270) * C91 +
            (C1279 + C1273) * C90 +
            ((C275 * C912 + C141320 * C1262) * C141309 +
             (C275 * C823 + C141320 * C1006) * C188) *
                C89) *
               C141294 * C141485) *
              C2376 +
          (((C1273 + C1279) * C89 + (C1270 + C1278) * C90 +
            (C1267 + C1277) * C91 +
            ((C275 * C824 + C141320 * C1007) * C188 +
             (C275 * C913 + C141320 * C1263) * C141309) *
                C92) *
               C141294 * C141485 -
           ((C527 + C519) * C92 + (C526 + C514) * C91 + (C525 + C511) * C90 +
            (C524 + C508) * C89) *
               C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141320 * C276) * C5964 +
             (C275 * C189 + C141320 * C501) * C5865 + C7032 * C5965 +
             C7428 * C5866 + C7034 * C5966 + C7429 * C5867) *
                C5863 +
            (C6357 + C6358 + C6359 + C6360 + C6361 + C6373) * C141221) *
               C141294 * C2374 -
           ((C7431 + C7423 + C7424 + C7425 + C7426 + C7427) * C141221 +
            ((C275 * C6880 + C141320 * C7414) * C5867 +
             (C275 * C6729 + C141320 * C7002) * C5966 + C7429 * C5866 +
             C7034 * C5965 + C7428 * C5865 + C7032 * C5964) *
                C5863) *
               C141294 * C141485) *
              C2376 +
          (((C7427 + C7426 + C7425 + C7424 + C7423 + C7431) * C5863 +
            (C1029 * C5964 + C1275 * C5865 + C6089 * C5965 + C6372 * C5866 +
             (C275 * C6730 + C141320 * C7003) * C5966 +
             (C275 * C6881 + C141320 * C7415) * C5867) *
                C141221) *
               C141294 * C141485 -
           ((C6374 + C6366 + C6367 + C6368 + C6369 + C6370) * C141221 +
            (C6373 + C6361 + C6360 + C6359 + C6358 + C6357) * C5863) *
               C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q));
    d2eezx[39] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
             C91 * C116 + C107 * C111 + C92 * C117) *
                C275 +
            (C101 * C276 + C89 * C579 + C103 * C277 + C90 * C580 + C105 * C278 +
             C91 * C581 + C107 * C279 + C92 * C582) *
                C141320) *
               C141309 * C141294 * C2374 -
           ((C107 * C1003 + C92 * C1345 + C105 * C1004 + C91 * C1346 +
             C103 * C1005 + C90 * C1347 + C101 * C1006 + C89 * C1348) *
                C141320 +
            (C107 * C820 + C92 * C825 + C105 * C821 + C91 * C826 + C103 * C822 +
             C90 * C827 + C101 * C823 + C89 * C828) *
                C275) *
               C141309 * C141294 * C141485) *
              C2376 +
          (((C101 * C822 + C89 * C827 + C103 * C821 + C90 * C826 + C105 * C820 +
             C91 * C825 + C107 * C824 + C92 * C829) *
                C275 +
            (C101 * C1005 + C89 * C1347 + C103 * C1004 + C90 * C1346 +
             C105 * C1003 + C91 * C1345 + C107 * C1007 + C92 * C1349) *
                C141320) *
               C141309 * C141294 * C141485 -
           ((C107 * C280 + C92 * C583 + C105 * C279 + C91 * C582 + C103 * C278 +
             C90 * C581 + C101 * C277 + C89 * C580) *
                C141320 +
            (C107 * C112 + C92 * C118 + C105 * C111 + C91 * C117 + C103 * C110 +
             C90 * C116 + C101 * C109 + C89 * C115) *
                C275) *
               C141309 * C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C141221 * C115) *
                 C275 +
             (C5869 * C276 + C5863 * C579 + C5871 * C277 + C141221 * C580) *
                 C141320) *
                C5865 +
            ((C7175 + C7176) * C275 + (C7549 + C7550) * C141320) * C5866 +
            ((C7179 + C7180) * C275 + (C7551 + C7552) * C141320) * C5867) *
               C141294 * C2374 -
           (((C5871 * C7001 + C141221 * C7529 + C5869 * C7002 + C5863 * C7530) *
                 C141320 +
             (C5871 * C6728 + C141221 * C6731 + C5869 * C6729 + C5863 * C6732) *
                 C275) *
                C5867 +
            ((C7552 + C7551) * C141320 + (C7180 + C7179) * C275) * C5866 +
            ((C7550 + C7549) * C141320 + (C7176 + C7175) * C275) * C5865) *
               C141294 * C141485) *
              C2376 +
          ((((C7183 + C7184) * C275 + (C7553 + C7554) * C141320) * C5865 +
            ((C7187 + C7188) * C275 + (C7555 + C7556) * C141320) * C5866 +
            ((C5869 * C6728 + C5863 * C6731 + C5871 * C6730 + C141221 * C6733) *
                 C275 +
             (C5869 * C7001 + C5863 * C7529 + C5871 * C7003 + C141221 * C7531) *
                 C141320) *
                C5867) *
               C141294 * C141485 -
           (((C7556 + C7555) * C141320 + (C7188 + C7187) * C275) * C5867 +
            ((C7554 + C7553) * C141320 + (C7184 + C7183) * C275) * C5866 +
            ((C5871 * C278 + C141221 * C581 + C5869 * C277 + C5863 * C580) *
                 C141320 +
             (C5871 * C110 + C141221 * C116 + C5869 * C109 + C5863 * C115) *
                 C275) *
                C5865) *
               C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q));
    d2eezy[39] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C188 * C108 + C141309 * C189) * C275 +
                       (C188 * C276 + C141309 * C635) * C141320) *
                          C89 +
                      (C642 + C658) * C90 + C662 * C91 + C663 * C92) *
                         C141294 * C2374 -
                     ((C1434 + C1424) * C92 + (C1435 + C1427) * C91 +
                      (C1436 + C1430) * C90 +
                      ((C188 * C1006 + C141309 * C1419) * C141320 +
                       (C188 * C823 + C141309 * C912) * C275) *
                          C89) *
                         C141294 * C141485) *
                        C2376 +
                    (((C1430 + C1436) * C89 + (C1427 + C1435) * C90 +
                      (C1424 + C1434) * C91 +
                      ((C188 * C824 + C141309 * C913) * C275 +
                       (C188 * C1007 + C141309 * C1420) * C141320) *
                          C92) *
                         C141294 * C141485 -
                     ((C661 + C653) * C92 + (C660 + C648) * C91 +
                      (C659 + C645) * C90 + (C658 + C642) * C89) *
                         C141294 * C2374) *
                        C141483)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C5964 * C108 + C5865 * C189 + C5965 * C823 +
                        C5866 * C912 + C5966 * C2960 + C5867 * C3026) *
                           C275 +
                       (C5964 * C276 + C5865 * C635 + C5965 * C1006 +
                        C5866 * C1419 + C5966 * C3084 + C5867 * C3362) *
                           C141320) *
                          C5863 +
                      ((C5992 + C5993 + C5994) * C275 +
                       (C6535 + C6536 + C6537) * C141320) *
                          C141221) *
                         C141294 * C2374 -
                     (((C7664 + C7665 + C7666) * C141320 +
                       (C6901 + C6902 + C6903) * C275) *
                          C141221 +
                      ((C5966 * C7002 + C5867 * C7655 + C5965 * C3084 +
                        C5866 * C3362 + C5964 * C1006 + C5865 * C1419) *
                           C141320 +
                       (C5966 * C6729 + C5867 * C6880 + C5965 * C2960 +
                        C5866 * C3026 + C5964 * C823 + C5865 * C912) *
                           C275) *
                          C5863) *
                         C141294 * C141485) *
                        C2376 +
                    ((((C6903 + C6902 + C6901) * C275 +
                       (C7666 + C7665 + C7664) * C141320) *
                          C5863 +
                      ((C5964 * C821 + C5865 * C910 + C5965 * C2962 +
                        C5866 * C3028 + C5966 * C6730 + C5867 * C6881) *
                           C275 +
                       (C5964 * C1004 + C5865 * C1417 + C5965 * C3086 +
                        C5866 * C3364 + C5966 * C7003 + C5867 * C7656) *
                           C141320) *
                          C141221) *
                         C141294 * C141485 -
                     (((C6538 + C6539 + C6540) * C141320 +
                       (C6001 + C6002 + C6003) * C275) *
                          C141221 +
                      ((C6537 + C6536 + C6535) * C141320 +
                       (C5994 + C5993 + C5992) * C275) *
                          C5863) *
                         C141294 * C2374) *
                        C141483)) /
                      (p * q * std::sqrt(p + q));
    d2eezz[39] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C141320 * C714) * C141309 * C89 +
            C747 * C90 + C748 * C91 + C749 * C92) *
               C141294 * C2374 -
           (C1528 * C92 + C1529 * C91 + C1530 * C90 +
            (C713 * C823 + C1517 + C1517 + C141320 * C1505) * C141309 * C89) *
               C141294 * C141485) *
              C2376 +
          ((C1530 * C89 + C1529 * C90 + C1528 * C91 +
            (C713 * C824 + C1518 + C1518 + C141320 * C1506) * C141309 * C92) *
               C141294 * C141485 -
           (C750 * C92 + C749 * C91 + C748 * C90 + C747 * C89) * C141294 *
               C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C713 * C108 + C721 + C721 + C141320 * C714) * C5865 +
             C7785 * C5866 + C7786 * C5867) *
                C5863 +
            (C6615 + C6616 + C6629) * C141221) *
               C141294 * C2374 -
           ((C7788 + C7775 + C7776) * C141221 +
            ((C713 * C6729 + C7777 + C7777 + C141320 * C7765) * C5867 +
             C7786 * C5866 + C7785 * C5865) *
                C5863) *
               C141294 * C141485) *
              C2376 +
          (((C7776 + C7775 + C7788) * C5863 +
            (C1526 * C5865 + C6628 * C5866 +
             (C713 * C6730 + C7778 + C7778 + C141320 * C7766) * C5867) *
                C141221) *
               C141294 * C141485 -
           ((C6630 + C6621 + C6622) * C141221 +
            (C6629 + C6616 + C6615) * C5863) *
               C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q));
    d2eexx[40] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((C100 * C108 + C127 + C127 + C89 * C120 + C102 * C109 + C128 + C128 +
           C90 * C121 + C104 * C110 + C129 + C129 + C91 * C122 + C106 * C111 +
           C130 + C130 + C92 * C123) *
              C141320 * C141309 * C141294 * C2956 -
          (C106 * C820 + C836 + C836 + C92 * C830 + C104 * C821 + C837 + C837 +
           C91 * C831 + C102 * C822 + C838 + C838 + C90 * C832 + C100 * C823 +
           C839 + C839 + C89 * C833) *
              C141320 * C141309 * C141294 * C2957 +
          (C100 * C2960 + C2973 + C2973 + C89 * C2968 + C102 * C2961 + C2974 +
           C2974 + C90 * C2969 + C104 * C2962 + C2975 + C2975 + C91 * C2970 +
           C106 * C2963 + C2976 + C2976 + C92 * C2971) *
              C141320 * C141309 * C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C5868 * C108 + C5873 + C5873 + C5863 * C120 + C5870 * C109 + C5874 +
            C5874 + C141221 * C121) *
               C141320 * C5865 +
           (C6774 + C6775) * C141320 * C5866 + C9782 * C5867) *
              C141294 * C2956 -
          ((C9787 + C9788) * C141320 * C5867 +
           (C6777 + C6776) * C141320 * C5866 +
           (C6775 + C6774) * C141320 * C5865) *
              C141294 * C2957 +
          (C9782 * C5865 + (C9788 + C9787) * C141320 * C5866 +
           (C5868 * C9768 + C9780 + C9780 + C5863 * C9772 + C5870 * C9769 +
            C9781 + C9781 + C141221 * C9773) *
               C141320 * C5867) *
              C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eexy[40] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C188 * C108 + C141309 * C189) * C101 +
           (C188 * C114 + C141309 * C195) * C89 + C218 * C103 + C219 * C90 +
           C220 * C105 + C221 * C91 + C222 * C107 + C223 * C92) *
              C141320 * C141294 * C2956 -
          (C932 * C92 + C933 * C107 + C934 * C91 + C935 * C105 + C936 * C90 +
           C937 * C103 + (C188 * C828 + C141309 * C917) * C89 +
           (C188 * C823 + C141309 * C912) * C101) *
              C141320 * C141294 * C2957 +
          ((C188 * C2960 + C141309 * C3026) * C101 +
           (C188 * C2964 + C141309 * C3030) * C89 +
           (C188 * C2961 + C141309 * C3027) * C103 +
           (C188 * C2965 + C141309 * C3031) * C90 +
           (C188 * C2962 + C141309 * C3028) * C105 +
           (C188 * C2966 + C141309 * C3032) * C91 +
           (C188 * C2963 + C141309 * C3029) * C107 +
           (C188 * C2967 + C141309 * C3033) * C92) *
              C141320 * C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C5964 * C108 + C5865 * C189 + C5965 * C823 + C5866 * C912 +
            C5966 * C2960 + C5867 * C3026) *
               C5869 +
           (C5964 * C114 + C5865 * C195 + C5965 * C828 + C5866 * C917 +
            C5966 * C2964 + C5867 * C3030) *
               C5863 +
           (C5992 + C5993 + C5994) * C5871 +
           (C5995 + C5996 + C5997) * C141221) *
              C141320 * C141294 * C2956 -
          ((C6898 + C6899 + C6900) * C141221 + (C6901 + C6902 + C6903) * C5871 +
           (C5966 * C6732 + C5867 * C6883 + C5965 * C2964 + C5866 * C3030 +
            C5964 * C828 + C5865 * C917) *
               C5863 +
           (C5966 * C6729 + C5867 * C6880 + C5965 * C2960 + C5866 * C3026 +
            C5964 * C823 + C5865 * C912) *
               C5869) *
              C141320 * C141294 * C2957 +
          ((C5964 * C2960 + C5865 * C3026 + C5965 * C6729 + C5866 * C6880 +
            C5966 * C9768 + C5867 * C9862) *
               C5869 +
           (C5964 * C2964 + C5865 * C3030 + C5965 * C6732 + C5866 * C6883 +
            C5966 * C9770 + C5867 * C9864) *
               C5863 +
           (C5964 * C2961 + C5865 * C3027 + C5965 * C6728 + C5866 * C6879 +
            C5966 * C9769 + C5867 * C9863) *
               C5871 +
           (C5964 * C2965 + C5865 * C3031 + C5965 * C6731 + C5866 * C6882 +
            C5966 * C9771 + C5867 * C9865) *
               C141221) *
              C141320 * C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eexz[40] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C275 * C108 + C141320 * C276) * C101 +
           (C275 * C114 + C141320 * C282) * C89 + C305 * C103 + C306 * C90 +
           C307 * C105 + C308 * C91 + C309 * C107 + C310 * C92) *
              C141309 * C141294 * C2956 -
          (C1026 * C92 + C1027 * C107 + C1028 * C91 + C1029 * C105 +
           C1030 * C90 + C1031 * C103 + (C275 * C828 + C141320 * C1011) * C89 +
           (C275 * C823 + C141320 * C1006) * C101) *
              C141309 * C141294 * C2957 +
          ((C275 * C2960 + C141320 * C3084) * C101 +
           (C275 * C2964 + C141320 * C3088) * C89 +
           (C275 * C2961 + C141320 * C3085) * C103 +
           (C275 * C2965 + C141320 * C3089) * C90 +
           (C275 * C2962 + C141320 * C3086) * C105 +
           (C275 * C2966 + C141320 * C3090) * C91 +
           (C275 * C2963 + C141320 * C3087) * C107 +
           (C275 * C2967 + C141320 * C3091) * C92) *
              C141309 * C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141320 * C276) * C5869 +
            (C275 * C114 + C141320 * C282) * C5863 + C305 * C5871 +
            C306 * C141221) *
               C5865 +
           (C7038 + C7039 + C7012 + C7013) * C5866 + C9955 * C5867) *
              C141294 * C2956 -
          ((C9946 + C9947 + C9956 + C9957) * C5867 +
           (C7019 + C7018 + C7041 + C7040) * C5866 +
           (C7013 + C7012 + C7039 + C7038) * C5865) *
              C141294 * C2957 +
          (C9955 * C5865 + (C9957 + C9956 + C9947 + C9946) * C5866 +
           ((C275 * C9768 + C141320 * C9940) * C5869 +
            (C275 * C9770 + C141320 * C9942) * C5863 +
            (C275 * C9769 + C141320 * C9941) * C5871 +
            (C275 * C9771 + C141320 * C9943) * C141221) *
               C5867) *
              C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eeyx[40] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
            C91 * C116 + C107 * C111 + C92 * C117) *
               C188 +
           (C101 * C189 + C89 * C362 + C103 * C190 + C90 * C363 + C105 * C191 +
            C91 * C364 + C107 * C192 + C92 * C365) *
               C141309) *
              C141320 * C141294 * C2956 -
          ((C107 * C909 + C92 * C1097 + C105 * C910 + C91 * C1098 +
            C103 * C911 + C90 * C1099 + C101 * C912 + C89 * C1100) *
               C141309 +
           (C107 * C820 + C92 * C825 + C105 * C821 + C91 * C826 + C103 * C822 +
            C90 * C827 + C101 * C823 + C89 * C828) *
               C188) *
              C141320 * C141294 * C2957 +
          ((C101 * C2960 + C89 * C2964 + C103 * C2961 + C90 * C2965 +
            C105 * C2962 + C91 * C2966 + C107 * C2963 + C92 * C2967) *
               C188 +
           (C101 * C3026 + C89 * C3142 + C103 * C3027 + C90 * C3143 +
            C105 * C3028 + C91 * C3144 + C107 * C3029 + C92 * C3145) *
               C141309) *
              C141320 * C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C5869 * C108 + C5863 * C114 + C5871 * C109 + C141221 * C115) *
               C5964 +
           (C5869 * C189 + C5863 * C362 + C5871 * C190 + C141221 * C363) *
               C5865 +
           (C7175 + C7176) * C5965 + (C7177 + C7178) * C5866 + C10034 * C5966 +
           C10035 * C5867) *
              C141320 * C141294 * C2956 -
          ((C10044 + C10045) * C5867 + (C10046 + C10047) * C5966 +
           (C7182 + C7181) * C5866 + (C7180 + C7179) * C5965 +
           (C7178 + C7177) * C5865 + (C7176 + C7175) * C5964) *
              C141320 * C141294 * C2957 +
          (C10034 * C5964 + C10035 * C5865 + (C10047 + C10046) * C5965 +
           (C10045 + C10044) * C5866 +
           (C5869 * C9768 + C5863 * C9770 + C5871 * C9769 + C141221 * C9771) *
               C5966 +
           (C5869 * C9862 + C5863 * C10031 + C5871 * C9863 + C141221 * C10032) *
               C5867) *
              C141320 * C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eeyy[40] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C418 * C108 + C426 + C426 + C141309 * C419) * C89 +
                     C448 * C90 + C449 * C91 + C450 * C92) *
                        C141320 * C141294 * C2956 -
                    (C1191 * C92 + C1192 * C91 + C1193 * C90 +
                     (C418 * C823 + C1183 + C1183 + C141309 * C1171) * C89) *
                        C141320 * C141294 * C2957 +
                    ((C418 * C2960 + C3201 + C3201 + C141309 * C3196) * C89 +
                     (C418 * C2961 + C3202 + C3202 + C141309 * C3197) * C90 +
                     (C418 * C2962 + C3203 + C3203 + C141309 * C3198) * C91 +
                     (C418 * C2963 + C3204 + C3204 + C141309 * C3199) * C92) *
                        C141320 * C141294 * C2958) *
                   C141243) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C6237 * C108 + C6241 + C6241 + C5865 * C419 +
                      C6238 * C823 + C6242 + C6242 + C5866 * C1171 +
                      C6239 * C2960 + C6243 + C6243 + C5867 * C3196) *
                         C5863 +
                     (C6277 + C6278 + C6279) * C141221) *
                        C141320 * C141294 * C2956 -
                    ((C7313 + C7314 + C7315) * C141221 +
                     (C6239 * C6729 + C7301 + C7301 + C5867 * C7289 +
                      C6238 * C2960 + C7302 + C7302 + C5866 * C3196 +
                      C6237 * C823 + C7303 + C7303 + C5865 * C1171) *
                         C5863) *
                        C141320 * C141294 * C2957 +
                    ((C6237 * C2960 + C10124 + C10124 + C5865 * C3196 +
                      C6238 * C6729 + C10125 + C10125 + C5866 * C7289 +
                      C6239 * C9768 + C10126 + C10126 + C5867 * C10121) *
                         C5863 +
                     (C6237 * C2961 + C10127 + C10127 + C5865 * C3197 +
                      C6238 * C6728 + C10128 + C10128 + C5866 * C7288 +
                      C6239 * C9769 + C10129 + C10129 + C5867 * C10122) *
                         C141221) *
                        C141320 * C141294 * C2958) *
                   C141243) /
                      (p * q * std::sqrt(p + q));
    d2eeyz[40] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141320 * C276) * C188 +
            (C275 * C189 + C141320 * C501) * C141309) *
               C89 +
           (C508 + C524) * C90 + C528 * C91 + C529 * C92) *
              C141294 * C2956 -
          ((C1277 + C1267) * C92 + (C1278 + C1270) * C91 +
           (C1279 + C1273) * C90 +
           ((C275 * C912 + C141320 * C1262) * C141309 +
            (C275 * C823 + C141320 * C1006) * C188) *
               C89) *
              C141294 * C2957 +
          (((C275 * C2960 + C141320 * C3084) * C188 +
            (C275 * C3026 + C141320 * C3254) * C141309) *
               C89 +
           ((C275 * C2961 + C141320 * C3085) * C188 +
            (C275 * C3027 + C141320 * C3255) * C141309) *
               C90 +
           ((C275 * C2962 + C141320 * C3086) * C188 +
            (C275 * C3028 + C141320 * C3256) * C141309) *
               C91 +
           ((C275 * C2963 + C141320 * C3087) * C188 +
            (C275 * C3029 + C141320 * C3257) * C141309) *
               C92) *
              C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141320 * C276) * C5964 +
            (C275 * C189 + C141320 * C501) * C5865 + C7032 * C5965 +
            C7428 * C5866 + C7034 * C5966 + C7429 * C5867) *
               C5863 +
           (C6357 + C6358 + C6359 + C6360 + C6361 + C6373) * C141221) *
              C141294 * C2956 -
          ((C7431 + C7423 + C7424 + C7425 + C7426 + C7427) * C141221 +
           (C10208 * C5867 + C9954 * C5966 + C7429 * C5866 + C7034 * C5965 +
            C7428 * C5865 + C7032 * C5964) *
               C5863) *
              C141294 * C2957 +
          ((C7034 * C5964 + C7429 * C5865 + C9954 * C5965 + C10208 * C5866 +
            (C275 * C9768 + C141320 * C9940) * C5966 +
            (C275 * C9862 + C141320 * C10203) * C5867) *
               C5863 +
           (C6086 * C5964 + C6371 * C5865 + C7037 * C5965 + C7430 * C5866 +
            (C275 * C9769 + C141320 * C9941) * C5966 +
            (C275 * C9863 + C141320 * C10204) * C5867) *
               C141221) *
              C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eezx[40] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
            C91 * C116 + C107 * C111 + C92 * C117) *
               C275 +
           (C101 * C276 + C89 * C579 + C103 * C277 + C90 * C580 + C105 * C278 +
            C91 * C581 + C107 * C279 + C92 * C582) *
               C141320) *
              C141309 * C141294 * C2956 -
          ((C107 * C1003 + C92 * C1345 + C105 * C1004 + C91 * C1346 +
            C103 * C1005 + C90 * C1347 + C101 * C1006 + C89 * C1348) *
               C141320 +
           (C107 * C820 + C92 * C825 + C105 * C821 + C91 * C826 + C103 * C822 +
            C90 * C827 + C101 * C823 + C89 * C828) *
               C275) *
              C141309 * C141294 * C2957 +
          ((C101 * C2960 + C89 * C2964 + C103 * C2961 + C90 * C2965 +
            C105 * C2962 + C91 * C2966 + C107 * C2963 + C92 * C2967) *
               C275 +
           (C101 * C3084 + C89 * C3308 + C103 * C3085 + C90 * C3309 +
            C105 * C3086 + C91 * C3310 + C107 * C3087 + C92 * C3311) *
               C141320) *
              C141309 * C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C141221 * C115) *
                C275 +
            (C5869 * C276 + C5863 * C579 + C5871 * C277 + C141221 * C580) *
                C141320) *
               C5865 +
           ((C7175 + C7176) * C275 + (C7549 + C7550) * C141320) * C5866 +
           C10294 * C5867) *
              C141294 * C2956 -
          (((C10292 + C10293) * C141320 + (C10046 + C10047) * C275) * C5867 +
           ((C7552 + C7551) * C141320 + (C7180 + C7179) * C275) * C5866 +
           ((C7550 + C7549) * C141320 + (C7176 + C7175) * C275) * C5865) *
              C141294 * C2957 +
          (C10294 * C5865 +
           ((C10047 + C10046) * C275 + (C10293 + C10292) * C141320) * C5866 +
           ((C5869 * C9768 + C5863 * C9770 + C5871 * C9769 + C141221 * C9771) *
                C275 +
            (C5869 * C9940 + C5863 * C10282 + C5871 * C9941 +
             C141221 * C10283) *
                C141320) *
               C5867) *
              C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eezy[40] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C188 * C108 + C141309 * C189) * C275 +
                      (C188 * C276 + C141309 * C635) * C141320) *
                         C89 +
                     (C642 + C658) * C90 + C662 * C91 + C663 * C92) *
                        C141294 * C2956 -
                    ((C1434 + C1424) * C92 + (C1435 + C1427) * C91 +
                     (C1436 + C1430) * C90 +
                     ((C188 * C1006 + C141309 * C1419) * C141320 +
                      (C188 * C823 + C141309 * C912) * C275) *
                         C89) *
                        C141294 * C2957 +
                    (((C188 * C2960 + C141309 * C3026) * C275 +
                      (C188 * C3084 + C141309 * C3362) * C141320) *
                         C89 +
                     ((C188 * C2961 + C141309 * C3027) * C275 +
                      (C188 * C3085 + C141309 * C3363) * C141320) *
                         C90 +
                     ((C188 * C2962 + C141309 * C3028) * C275 +
                      (C188 * C3086 + C141309 * C3364) * C141320) *
                         C91 +
                     ((C188 * C2963 + C141309 * C3029) * C275 +
                      (C188 * C3087 + C141309 * C3365) * C141320) *
                         C92) *
                        C141294 * C2958) *
                   C141243) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C5964 * C108 + C5865 * C189 + C5965 * C823 +
                       C5866 * C912 + C5966 * C2960 + C5867 * C3026) *
                          C275 +
                      (C5964 * C276 + C5865 * C635 + C5965 * C1006 +
                       C5866 * C1419 + C5966 * C3084 + C5867 * C3362) *
                          C141320) *
                         C5863 +
                     ((C5992 + C5993 + C5994) * C275 +
                      (C6535 + C6536 + C6537) * C141320) *
                         C141221) *
                        C141294 * C2956 -
                    (((C7664 + C7665 + C7666) * C141320 +
                      (C6901 + C6902 + C6903) * C275) *
                         C141221 +
                     ((C5966 * C7002 + C5867 * C7655 + C5965 * C3084 +
                       C5866 * C3362 + C5964 * C1006 + C5865 * C1419) *
                          C141320 +
                      (C5966 * C6729 + C5867 * C6880 + C5965 * C2960 +
                       C5866 * C3026 + C5964 * C823 + C5865 * C912) *
                          C275) *
                         C5863) *
                        C141294 * C2957 +
                    (((C5964 * C2960 + C5865 * C3026 + C5965 * C6729 +
                       C5866 * C6880 + C5966 * C9768 + C5867 * C9862) *
                          C275 +
                      (C5964 * C3084 + C5865 * C3362 + C5965 * C7002 +
                       C5866 * C7655 + C5966 * C9940 + C5867 * C10368) *
                          C141320) *
                         C5863 +
                     ((C5964 * C2961 + C5865 * C3027 + C5965 * C6728 +
                       C5866 * C6879 + C5966 * C9769 + C5867 * C9863) *
                          C275 +
                      (C5964 * C3085 + C5865 * C3363 + C5965 * C7001 +
                       C5866 * C7654 + C5966 * C9941 + C5867 * C10369) *
                          C141320) *
                         C141221) *
                        C141294 * C2958) *
                   C141243) /
                      (p * q * std::sqrt(p + q));
    d2eezz[40] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C713 * C108 + C721 + C721 + C141320 * C714) * C141309 * C89 +
           C747 * C90 + C748 * C91 + C749 * C92) *
              C141294 * C2956 -
          (C1528 * C92 + C1529 * C91 + C1530 * C90 +
           (C713 * C823 + C1517 + C1517 + C141320 * C1505) * C141309 * C89) *
              C141294 * C2957 +
          ((C713 * C2960 + C3421 + C3421 + C141320 * C3416) * C141309 * C89 +
           (C713 * C2961 + C3422 + C3422 + C141320 * C3417) * C141309 * C90 +
           (C713 * C2962 + C3423 + C3423 + C141320 * C3418) * C141309 * C91 +
           (C713 * C2963 + C3424 + C3424 + C141320 * C3419) * C141309 * C92) *
              C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C141320 * C714) * C5865 +
            C7785 * C5866 + C7786 * C5867) *
               C5863 +
           (C6615 + C6616 + C6629) * C141221) *
              C141294 * C2956 -
          ((C7788 + C7775 + C7776) * C141221 +
           (C10453 * C5867 + C7786 * C5866 + C7785 * C5865) * C5863) *
              C141294 * C2957 +
          ((C7786 * C5865 + C10453 * C5866 +
            (C713 * C9768 + C10449 + C10449 + C141320 * C10444) * C5867) *
               C5863 +
           (C6627 * C5865 + C7787 * C5866 +
            (C713 * C9769 + C10450 + C10450 + C141320 * C10445) * C5867) *
               C141221) *
              C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eexx[41] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C108 + C127 + C127 + C89 * C120 + C102 * C109 + C128 + C128 +
            C90 * C121 + C104 * C110 + C129 + C129 + C91 * C122 + C106 * C111 +
            C130 + C130 + C92 * C123) *
               C141320 * C141309 * C1596 -
           (C106 * C1598 + C1614 + C1614 + C92 * C1608 + C104 * C1599 + C1615 +
            C1615 + C91 * C1609 + C102 * C1600 + C1616 + C1616 + C90 * C1610 +
            C100 * C1601 + C1617 + C1617 + C89 * C1611) *
               C141320 * C141309 * C141487) *
              C2374 +
          ((C100 * C3490 + C3503 + C3503 + C89 * C3498 + C102 * C3491 + C3504 +
            C3504 + C90 * C3499 + C104 * C3492 + C3505 + C3505 + C91 * C3500 +
            C106 * C3493 + C3506 + C3506 + C92 * C3501) *
               C141320 * C141309 * C141487 -
           (C106 * C820 + C836 + C836 + C92 * C830 + C104 * C821 + C837 + C837 +
            C91 * C831 + C102 * C822 + C838 + C838 + C90 * C832 + C100 * C823 +
            C839 + C839 + C89 * C833) *
               C141320 * C141309 * C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5868 * C108 + C5873 + C5873 + C5863 * C120 + C5870 * C109 +
             C5874 + C5874 + C141221 * C121) *
                C141320 * C5865 +
            (C6774 + C6775) * C141320 * C5866 + C9782 * C5867) *
               C1596 -
           ((C10576 + C10577) * C141320 * C5867 +
            (C10578 + C10579) * C141320 * C5866 +
            (C5870 * C1600 + C7900 + C7900 + C141221 * C1610 + C5868 * C1601 +
             C7901 + C7901 + C5863 * C1611) *
                C141320 * C5865) *
               C141487) *
              C2374 +
          (((C10579 + C10578) * C141320 * C5865 +
            (C10577 + C10576) * C141320 * C5866 +
            (C5868 * C10551 + C10566 + C10566 + C5863 * C10555 +
             C5870 * C10552 + C10567 + C10567 + C141221 * C10556) *
                C141320 * C5867) *
               C141487 -
           ((C9787 + C9788) * C141320 * C5867 +
            (C6777 + C6776) * C141320 * C5866 +
            (C6775 + C6774) * C141320 * C5865) *
               C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eexy[41] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141309 * C189) * C101 +
            (C188 * C114 + C141309 * C195) * C89 + C218 * C103 + C219 * C90 +
            C220 * C105 + C221 * C91 + C222 * C107 + C223 * C92) *
               C141320 * C1596 -
           (C1710 * C92 + C1711 * C107 + C1712 * C91 + C1713 * C105 +
            C1714 * C90 + C1715 * C103 +
            (C188 * C1606 + C141309 * C1695) * C89 +
            (C188 * C1601 + C141309 * C1690) * C101) *
               C141320 * C141487) *
              C2374 +
          (((C188 * C3490 + C141309 * C3572) * C101 +
            (C188 * C3494 + C141309 * C3576) * C89 +
            (C188 * C3491 + C141309 * C3573) * C103 +
            (C188 * C3495 + C141309 * C3577) * C90 +
            (C188 * C3492 + C141309 * C3574) * C105 +
            (C188 * C3496 + C141309 * C3578) * C91 +
            (C188 * C3493 + C141309 * C3575) * C107 +
            (C188 * C3497 + C141309 * C3579) * C92) *
               C141320 * C141487 -
           (C932 * C92 + C933 * C107 + C934 * C91 + C935 * C105 + C936 * C90 +
            C937 * C103 + (C188 * C828 + C141309 * C917) * C89 +
            (C188 * C823 + C141309 * C912) * C101) *
               C141320 * C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5964 * C108 + C5865 * C189 + C5965 * C823 + C5866 * C912 +
             C5966 * C2960 + C5867 * C3026) *
                C5869 +
            (C5964 * C114 + C5865 * C195 + C5965 * C828 + C5866 * C917 +
             C5966 * C2964 + C5867 * C3030) *
                C5863 +
            (C5992 + C5993 + C5994) * C5871 +
            (C5995 + C5996 + C5997) * C141221) *
               C141320 * C1596 -
           ((C8024 + C8025 + C8026) * C141221 +
            (C8027 + C8028 + C8029) * C5871 +
            (C5966 * C7890 + C5867 * C8009 + C5965 * C3494 + C5866 * C3576 +
             C5964 * C1606 + C5865 * C1695) *
                C5863 +
            (C5966 * C7887 + C5867 * C8006 + C5965 * C3490 + C5866 * C3572 +
             C5964 * C1601 + C5865 * C1690) *
                C5869) *
               C141320 * C141487) *
              C2374 +
          (((C5964 * C3490 + C5865 * C3572 + C5965 * C7887 + C5866 * C8006 +
             C5966 * C10551 + C5867 * C10677) *
                C5869 +
            (C5964 * C3494 + C5865 * C3576 + C5965 * C7890 + C5866 * C8009 +
             C5966 * C10553 + C5867 * C10679) *
                C5863 +
            (C5964 * C3491 + C5865 * C3573 + C5965 * C7886 + C5866 * C8005 +
             C5966 * C10552 + C5867 * C10678) *
                C5871 +
            (C5964 * C3495 + C5865 * C3577 + C5965 * C7889 + C5866 * C8008 +
             C5966 * C10554 + C5867 * C10680) *
                C141221) *
               C141320 * C141487 -
           ((C6898 + C6899 + C6900) * C141221 +
            (C6901 + C6902 + C6903) * C5871 +
            (C5966 * C6732 + C5867 * C6883 + C5965 * C2964 + C5866 * C3030 +
             C5964 * C828 + C5865 * C917) *
                C5863 +
            (C5966 * C6729 + C5867 * C6880 + C5965 * C2960 + C5866 * C3026 +
             C5964 * C823 + C5865 * C912) *
                C5869) *
               C141320 * C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eexz[41] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141320 * C276) * C101 +
            (C275 * C114 + C141320 * C282) * C89 + C305 * C103 + C306 * C90 +
            C307 * C105 + C308 * C91 + C309 * C107 + C310 * C92) *
               C141309 * C1596 -
           (C1804 * C92 + C1805 * C107 + C1806 * C91 + C1807 * C105 +
            C1808 * C90 + C1809 * C103 +
            (C275 * C1606 + C141320 * C1789) * C89 +
            (C275 * C1601 + C141320 * C1784) * C101) *
               C141309 * C141487) *
              C2374 +
          (((C275 * C3490 + C141320 * C3646) * C101 +
            (C275 * C3494 + C141320 * C3650) * C89 +
            (C275 * C3491 + C141320 * C3647) * C103 +
            (C275 * C3495 + C141320 * C3651) * C90 +
            (C275 * C3492 + C141320 * C3648) * C105 +
            (C275 * C3496 + C141320 * C3652) * C91 +
            (C275 * C3493 + C141320 * C3649) * C107 +
            (C275 * C3497 + C141320 * C3653) * C92) *
               C141309 * C141487 -
           (C1026 * C92 + C1027 * C107 + C1028 * C91 + C1029 * C105 +
            C1030 * C90 + C1031 * C103 + (C275 * C828 + C141320 * C1011) * C89 +
            (C275 * C823 + C141320 * C1006) * C101) *
               C141309 * C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141320 * C276) * C5869 +
             (C275 * C114 + C141320 * C282) * C5863 + C305 * C5871 +
             C306 * C141221) *
                C5865 +
            (C7038 + C7039 + C7012 + C7013) * C5866 + C9955 * C5867) *
               C1596 -
           ((C10784 + C10785 + C10800 + C10801) * C5867 +
            (C10790 + C10791 + C10802 + C10803) * C5866 +
            (C1808 * C141221 + C1809 * C5871 +
             (C275 * C1606 + C141320 * C1789) * C5863 +
             (C275 * C1601 + C141320 * C1784) * C5869) *
                C5865) *
               C141487) *
              C2374 +
          (((C10803 + C10802 + C10791 + C10790) * C5865 +
            (C10801 + C10800 + C10785 + C10784) * C5866 +
            ((C275 * C10551 + C141320 * C10779) * C5869 +
             (C275 * C10553 + C141320 * C10781) * C5863 +
             (C275 * C10552 + C141320 * C10780) * C5871 +
             (C275 * C10554 + C141320 * C10782) * C141221) *
                C5867) *
               C141487 -
           ((C9946 + C9947 + C9956 + C9957) * C5867 +
            (C7019 + C7018 + C7041 + C7040) * C5866 +
            (C7013 + C7012 + C7039 + C7038) * C5865) *
               C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eeyx[41] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
             C91 * C116 + C107 * C111 + C92 * C117) *
                C188 +
            (C101 * C189 + C89 * C362 + C103 * C190 + C90 * C363 + C105 * C191 +
             C91 * C364 + C107 * C192 + C92 * C365) *
                C141309) *
               C141320 * C1596 -
           ((C107 * C1687 + C92 * C1875 + C105 * C1688 + C91 * C1876 +
             C103 * C1689 + C90 * C1877 + C101 * C1690 + C89 * C1878) *
                C141309 +
            (C107 * C1598 + C92 * C1603 + C105 * C1599 + C91 * C1604 +
             C103 * C1600 + C90 * C1605 + C101 * C1601 + C89 * C1606) *
                C188) *
               C141320 * C141487) *
              C2374 +
          (((C101 * C3490 + C89 * C3494 + C103 * C3491 + C90 * C3495 +
             C105 * C3492 + C91 * C3496 + C107 * C3493 + C92 * C3497) *
                C188 +
            (C101 * C3572 + C89 * C3720 + C103 * C3573 + C90 * C3721 +
             C105 * C3574 + C91 * C3722 + C107 * C3575 + C92 * C3723) *
                C141309) *
               C141320 * C141487 -
           ((C107 * C909 + C92 * C1097 + C105 * C910 + C91 * C1098 +
             C103 * C911 + C90 * C1099 + C101 * C912 + C89 * C1100) *
                C141309 +
            (C107 * C820 + C92 * C825 + C105 * C821 + C91 * C826 + C103 * C822 +
             C90 * C827 + C101 * C823 + C89 * C828) *
                C188) *
               C141320 * C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C141221 * C115) *
                C5964 +
            (C5869 * C189 + C5863 * C362 + C5871 * C190 + C141221 * C363) *
                C5865 +
            (C7175 + C7176) * C5965 + (C7177 + C7178) * C5866 + C10034 * C5966 +
            C10035 * C5867) *
               C141320 * C1596 -
           ((C10920 + C10921) * C5867 + (C10922 + C10923) * C5966 +
            (C10924 + C10925) * C5866 + (C10926 + C10927) * C5965 +
            (C5871 * C1689 + C141221 * C1877 + C5869 * C1690 + C5863 * C1878) *
                C5865 +
            (C5871 * C1600 + C141221 * C1605 + C5869 * C1601 + C5863 * C1606) *
                C5964) *
               C141320 * C141487) *
              C2374 +
          (((C10927 + C10926) * C5964 + (C10925 + C10924) * C5865 +
            (C10923 + C10922) * C5965 + (C10921 + C10920) * C5866 +
            (C5869 * C10551 + C5863 * C10553 + C5871 * C10552 +
             C141221 * C10554) *
                C5966 +
            (C5869 * C10677 + C5863 * C10901 + C5871 * C10678 +
             C141221 * C10902) *
                C5867) *
               C141320 * C141487 -
           ((C10044 + C10045) * C5867 + (C10046 + C10047) * C5966 +
            (C7182 + C7181) * C5866 + (C7180 + C7179) * C5965 +
            (C7178 + C7177) * C5865 + (C7176 + C7175) * C5964) *
               C141320 * C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eeyy[41] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C418 * C108 + C426 + C426 + C141309 * C419) * C89 +
                      C448 * C90 + C449 * C91 + C450 * C92) *
                         C141320 * C1596 -
                     (C1969 * C92 + C1970 * C91 + C1971 * C90 +
                      (C418 * C1601 + C1961 + C1961 + C141309 * C1949) * C89) *
                         C141320 * C141487) *
                        C2374 +
                    (((C418 * C3490 + C3795 + C3795 + C141309 * C3790) * C89 +
                      (C418 * C3491 + C3796 + C3796 + C141309 * C3791) * C90 +
                      (C418 * C3492 + C3797 + C3797 + C141309 * C3792) * C91 +
                      (C418 * C3493 + C3798 + C3798 + C141309 * C3793) * C92) *
                         C141320 * C141487 -
                     (C1191 * C92 + C1192 * C91 + C1193 * C90 +
                      (C418 * C823 + C1183 + C1183 + C141309 * C1171) * C89) *
                         C141320 * C1596) *
                        C141485) *
                   C141243) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C6237 * C108 + C6241 + C6241 + C5865 * C419 +
                       C6238 * C823 + C6242 + C6242 + C5866 * C1171 +
                       C6239 * C2960 + C6243 + C6243 + C5867 * C3196) *
                          C5863 +
                      (C6277 + C6278 + C6279) * C141221) *
                         C141320 * C1596 -
                     ((C8369 + C8370 + C8371) * C141221 +
                      (C6239 * C7887 + C8357 + C8357 + C5867 * C8345 +
                       C6238 * C3490 + C8358 + C8358 + C5866 * C3790 +
                       C6237 * C1601 + C8359 + C8359 + C5865 * C1949) *
                          C5863) *
                         C141320 * C141487) *
                        C2374 +
                    (((C6237 * C3490 + C11028 + C11028 + C5865 * C3790 +
                       C6238 * C7887 + C11029 + C11029 + C5866 * C8345 +
                       C6239 * C10551 + C11030 + C11030 + C5867 * C11025) *
                          C5863 +
                      (C6237 * C3491 + C11031 + C11031 + C5865 * C3791 +
                       C6238 * C7886 + C11032 + C11032 + C5866 * C8344 +
                       C6239 * C10552 + C11033 + C11033 + C5867 * C11026) *
                          C141221) *
                         C141320 * C141487 -
                     ((C7313 + C7314 + C7315) * C141221 +
                      (C6239 * C6729 + C7301 + C7301 + C5867 * C7289 +
                       C6238 * C2960 + C7302 + C7302 + C5866 * C3196 +
                       C6237 * C823 + C7303 + C7303 + C5865 * C1171) *
                          C5863) *
                         C141320 * C1596) *
                        C141485) *
                   C141243) /
                      (p * q * std::sqrt(p + q));
    d2eeyz[41] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141320 * C276) * C188 +
             (C275 * C189 + C141320 * C501) * C141309) *
                C89 +
            (C508 + C524) * C90 + C528 * C91 + C529 * C92) *
               C1596 -
           ((C2055 + C2045) * C92 + (C2056 + C2048) * C91 +
            (C2057 + C2051) * C90 +
            ((C275 * C1690 + C141320 * C2040) * C141309 +
             (C275 * C1601 + C141320 * C1784) * C188) *
                C89) *
               C141487) *
              C2374 +
          ((((C275 * C3490 + C141320 * C3646) * C188 +
             (C275 * C3572 + C141320 * C3864) * C141309) *
                C89 +
            ((C275 * C3491 + C141320 * C3647) * C188 +
             (C275 * C3573 + C141320 * C3865) * C141309) *
                C90 +
            ((C275 * C3492 + C141320 * C3648) * C188 +
             (C275 * C3574 + C141320 * C3866) * C141309) *
                C91 +
            ((C275 * C3493 + C141320 * C3649) * C188 +
             (C275 * C3575 + C141320 * C3867) * C141309) *
                C92) *
               C141487 -
           ((C1277 + C1267) * C92 + (C1278 + C1270) * C91 +
            (C1279 + C1273) * C90 +
            ((C275 * C912 + C141320 * C1262) * C141309 +
             (C275 * C823 + C141320 * C1006) * C188) *
                C89) *
               C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141320 * C276) * C5964 +
             (C275 * C189 + C141320 * C501) * C5865 + C7032 * C5965 +
             C7428 * C5866 + C7034 * C5966 + C7429 * C5867) *
                C5863 +
            (C6357 + C6358 + C6359 + C6360 + C6361 + C6373) * C141221) *
               C1596 -
           ((C8483 + C8475 + C8484 + C8478 + C8479 + C8480) * C141221 +
            (C11138 * C5867 + C10797 * C5966 + C11139 * C5866 + C10799 * C5965 +
             (C275 * C1690 + C141320 * C2040) * C5865 +
             (C275 * C1601 + C141320 * C1784) * C5964) *
                C5863) *
               C141487) *
              C2374 +
          (((C10799 * C5964 + C11139 * C5865 + C10797 * C5965 + C11138 * C5866 +
             (C275 * C10551 + C141320 * C10779) * C5966 +
             (C275 * C10677 + C141320 * C11131) * C5867) *
                C5863 +
            (C8145 * C5964 + C8482 * C5865 + C8143 * C5965 + C8481 * C5866 +
             (C275 * C10552 + C141320 * C10780) * C5966 +
             (C275 * C10678 + C141320 * C11132) * C5867) *
                C141221) *
               C141487 -
           ((C7431 + C7423 + C7424 + C7425 + C7426 + C7427) * C141221 +
            (C10208 * C5867 + C9954 * C5966 + C7429 * C5866 + C7034 * C5965 +
             C7428 * C5865 + C7032 * C5964) *
                C5863) *
               C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eezx[41] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
             C91 * C116 + C107 * C111 + C92 * C117) *
                C275 +
            (C101 * C276 + C89 * C579 + C103 * C277 + C90 * C580 + C105 * C278 +
             C91 * C581 + C107 * C279 + C92 * C582) *
                C141320) *
               C141309 * C1596 -
           ((C107 * C1781 + C92 * C2123 + C105 * C1782 + C91 * C2124 +
             C103 * C1783 + C90 * C2125 + C101 * C1784 + C89 * C2126) *
                C141320 +
            (C107 * C1598 + C92 * C1603 + C105 * C1599 + C91 * C1604 +
             C103 * C1600 + C90 * C1605 + C101 * C1601 + C89 * C1606) *
                C275) *
               C141309 * C141487) *
              C2374 +
          (((C101 * C3490 + C89 * C3494 + C103 * C3491 + C90 * C3495 +
             C105 * C3492 + C91 * C3496 + C107 * C3493 + C92 * C3497) *
                C275 +
            (C101 * C3646 + C89 * C3934 + C103 * C3647 + C90 * C3935 +
             C105 * C3648 + C91 * C3936 + C107 * C3649 + C92 * C3937) *
                C141320) *
               C141309 * C141487 -
           ((C107 * C1003 + C92 * C1345 + C105 * C1004 + C91 * C1346 +
             C103 * C1005 + C90 * C1347 + C101 * C1006 + C89 * C1348) *
                C141320 +
            (C107 * C820 + C92 * C825 + C105 * C821 + C91 * C826 + C103 * C822 +
             C90 * C827 + C101 * C823 + C89 * C828) *
                C275) *
               C141309 * C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C141221 * C115) *
                 C275 +
             (C5869 * C276 + C5863 * C579 + C5871 * C277 + C141221 * C580) *
                 C141320) *
                C5865 +
            ((C7175 + C7176) * C275 + (C7549 + C7550) * C141320) * C5866 +
            C10294 * C5867) *
               C1596 -
           (((C11248 + C11249) * C141320 + (C10922 + C10923) * C275) * C5867 +
            ((C11250 + C11251) * C141320 + (C10926 + C10927) * C275) * C5866 +
            ((C5871 * C1783 + C141221 * C2125 + C5869 * C1784 + C5863 * C2126) *
                 C141320 +
             (C5871 * C1600 + C141221 * C1605 + C5869 * C1601 + C5863 * C1606) *
                 C275) *
                C5865) *
               C141487) *
              C2374 +
          ((((C10927 + C10926) * C275 + (C11251 + C11250) * C141320) * C5865 +
            ((C10923 + C10922) * C275 + (C11249 + C11248) * C141320) * C5866 +
            ((C5869 * C10551 + C5863 * C10553 + C5871 * C10552 +
              C141221 * C10554) *
                 C275 +
             (C5869 * C10779 + C5863 * C11237 + C5871 * C10780 +
              C141221 * C11238) *
                 C141320) *
                C5867) *
               C141487 -
           (((C10292 + C10293) * C141320 + (C10046 + C10047) * C275) * C5867 +
            ((C7552 + C7551) * C141320 + (C7180 + C7179) * C275) * C5866 +
            ((C7550 + C7549) * C141320 + (C7176 + C7175) * C275) * C5865) *
               C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eezy[41] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C188 * C108 + C141309 * C189) * C275 +
                       (C188 * C276 + C141309 * C635) * C141320) *
                          C89 +
                      (C642 + C658) * C90 + C662 * C91 + C663 * C92) *
                         C1596 -
                     ((C2212 + C2202) * C92 + (C2213 + C2205) * C91 +
                      (C2214 + C2208) * C90 +
                      ((C188 * C1784 + C141309 * C2197) * C141320 +
                       (C188 * C1601 + C141309 * C1690) * C275) *
                          C89) *
                         C141487) *
                        C2374 +
                    ((((C188 * C3490 + C141309 * C3572) * C275 +
                       (C188 * C3646 + C141309 * C4004) * C141320) *
                          C89 +
                      ((C188 * C3491 + C141309 * C3573) * C275 +
                       (C188 * C3647 + C141309 * C4005) * C141320) *
                          C90 +
                      ((C188 * C3492 + C141309 * C3574) * C275 +
                       (C188 * C3648 + C141309 * C4006) * C141320) *
                          C91 +
                      ((C188 * C3493 + C141309 * C3575) * C275 +
                       (C188 * C3649 + C141309 * C4007) * C141320) *
                          C92) *
                         C141487 -
                     ((C1434 + C1424) * C92 + (C1435 + C1427) * C91 +
                      (C1436 + C1430) * C90 +
                      ((C188 * C1006 + C141309 * C1419) * C141320 +
                       (C188 * C823 + C141309 * C912) * C275) *
                          C89) *
                         C1596) *
                        C141485) *
                   C141243) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C5964 * C108 + C5865 * C189 + C5965 * C823 +
                        C5866 * C912 + C5966 * C2960 + C5867 * C3026) *
                           C275 +
                       (C5964 * C276 + C5865 * C635 + C5965 * C1006 +
                        C5866 * C1419 + C5966 * C3084 + C5867 * C3362) *
                           C141320) *
                          C5863 +
                      ((C5992 + C5993 + C5994) * C275 +
                       (C6535 + C6536 + C6537) * C141320) *
                          C141221) *
                         C1596 -
                     (((C8693 + C8694 + C8695) * C141320 +
                       (C8027 + C8028 + C8029) * C275) *
                          C141221 +
                      ((C5966 * C8128 + C5867 * C8684 + C5965 * C3646 +
                        C5866 * C4004 + C5964 * C1784 + C5865 * C2197) *
                           C141320 +
                       (C5966 * C7887 + C5867 * C8006 + C5965 * C3490 +
                        C5866 * C3572 + C5964 * C1601 + C5865 * C1690) *
                           C275) *
                          C5863) *
                         C141487) *
                        C2374 +
                    ((((C5964 * C3490 + C5865 * C3572 + C5965 * C7887 +
                        C5866 * C8006 + C5966 * C10551 + C5867 * C10677) *
                           C275 +
                       (C5964 * C3646 + C5865 * C4004 + C5965 * C8128 +
                        C5866 * C8684 + C5966 * C10779 + C5867 * C11349) *
                           C141320) *
                          C5863 +
                      ((C5964 * C3491 + C5865 * C3573 + C5965 * C7886 +
                        C5866 * C8005 + C5966 * C10552 + C5867 * C10678) *
                           C275 +
                       (C5964 * C3647 + C5865 * C4005 + C5965 * C8127 +
                        C5866 * C8683 + C5966 * C10780 + C5867 * C11350) *
                           C141320) *
                          C141221) *
                         C141487 -
                     (((C7664 + C7665 + C7666) * C141320 +
                       (C6901 + C6902 + C6903) * C275) *
                          C141221 +
                      ((C5966 * C7002 + C5867 * C7655 + C5965 * C3084 +
                        C5866 * C3362 + C5964 * C1006 + C5865 * C1419) *
                           C141320 +
                       (C5966 * C6729 + C5867 * C6880 + C5965 * C2960 +
                        C5866 * C3026 + C5964 * C823 + C5865 * C912) *
                           C275) *
                          C5863) *
                         C1596) *
                        C141485) *
                   C141243) /
                      (p * q * std::sqrt(p + q));
    d2eezz[41] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C141320 * C714) * C141309 * C89 +
            C747 * C90 + C748 * C91 + C749 * C92) *
               C1596 -
           (C2306 * C92 + C2307 * C91 + C2308 * C90 +
            (C713 * C1601 + C2295 + C2295 + C141320 * C2283) * C141309 * C89) *
               C141487) *
              C2374 +
          (((C713 * C3490 + C4079 + C4079 + C141320 * C4074) * C141309 * C89 +
            (C713 * C3491 + C4080 + C4080 + C141320 * C4075) * C141309 * C90 +
            (C713 * C3492 + C4081 + C4081 + C141320 * C4076) * C141309 * C91 +
            (C713 * C3493 + C4082 + C4082 + C141320 * C4077) * C141309 * C92) *
               C141487 -
           (C1528 * C92 + C1529 * C91 + C1530 * C90 +
            (C713 * C823 + C1517 + C1517 + C141320 * C1505) * C141309 * C89) *
               C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C713 * C108 + C721 + C721 + C141320 * C714) * C5865 +
             C7785 * C5866 + C7786 * C5867) *
                C5863 +
            (C6615 + C6616 + C6629) * C141221) *
               C1596 -
           ((C8811 + C8812 + C8802) * C141221 +
            (C11462 * C5867 + C11463 * C5866 +
             (C713 * C1601 + C2295 + C2295 + C141320 * C2283) * C5865) *
                C5863) *
               C141487) *
              C2374 +
          (((C11463 * C5865 + C11462 * C5866 +
             (C713 * C10551 + C11456 + C11456 + C141320 * C11449) * C5867) *
                C5863 +
            (C8810 * C5865 + C8809 * C5866 +
             (C713 * C10552 + C11457 + C11457 + C141320 * C11450) * C5867) *
                C141221) *
               C141487 -
           ((C7788 + C7775 + C7776) * C141221 +
            (C10453 * C5867 + C7786 * C5866 + C7785 * C5865) * C5863) *
               C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eexx[42] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C108 + C127 + C127 + C89 * C120 + C102 * C109 + C128 + C128 +
            C90 * C121 + C104 * C110 + C129 + C129 + C91 * C122 + C106 * C111 +
            C130 + C130 + C92 * C123) *
               C141320 * C141309 * C4148 -
           (C106 * C1598 + C1614 + C1614 + C92 * C1608 + C104 * C1599 + C1615 +
            C1615 + C91 * C1609 + C102 * C1600 + C1616 + C1616 + C90 * C1610 +
            C100 * C1601 + C1617 + C1617 + C89 * C1611) *
               C141320 * C141309 * C141487) *
              C141277 * C2376 +
          ((C100 * C1600 + C1618 + C1618 + C89 * C1610 + C102 * C1599 + C1619 +
            C1619 + C90 * C1609 + C104 * C1598 + C1620 + C1620 + C91 * C1608 +
            C106 * C1602 + C1621 + C1621 + C92 * C1612) *
               C141320 * C141309 * C141487 -
           (C106 * C112 + C131 + C131 + C92 * C124 + C104 * C111 + C132 + C132 +
            C91 * C123 + C102 * C110 + C133 + C133 + C90 * C122 + C100 * C109 +
            C134 + C134 + C89 * C121) *
               C141320 * C141309 * C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5868 * C108 + C5873 + C5873 + C5863 * C120 + C5870 * C109 +
             C5874 + C5874 + C141221 * C121) *
                C141320 * C5865 +
            (C6774 + C6775) * C141320 * C5866 + C9782 * C5867) *
               C4148 -
           ((C10576 + C10577) * C141320 * C5867 +
            (C10578 + C10579) * C141320 * C5866 +
            (C5870 * C1600 + C7900 + C7900 + C141221 * C1610 + C5868 * C1601 +
             C7901 + C7901 + C5863 * C1611) *
                C141320 * C5865) *
               C141487) *
              C141277 * C2376 +
          (((C5868 * C1600 + C7902 + C7902 + C5863 * C1610 + C5870 * C1599 +
             C7903 + C7903 + C141221 * C1609) *
                C141320 * C5865 +
            (C5868 * C3491 + C7904 + C7904 + C5863 * C3499 + C5870 * C3492 +
             C7905 + C7905 + C141221 * C3500) *
                C141320 * C5866 +
            (C5868 * C7886 + C7906 + C7906 + C5863 * C7892 + C5870 * C7888 +
             C7907 + C7907 + C141221 * C7894) *
                C141320 * C5867) *
               C141487 -
           ((C6781 + C6780) * C141320 * C5867 +
            (C6779 + C6778) * C141320 * C5866 +
            (C5870 * C110 + C5883 + C5883 + C141221 * C122 + C5868 * C109 +
             C5884 + C5884 + C5863 * C121) *
                C141320 * C5865) *
               C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eexy[42] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141309 * C189) * C101 +
            (C188 * C114 + C141309 * C195) * C89 + C218 * C103 + C219 * C90 +
            C220 * C105 + C221 * C91 + C222 * C107 + C223 * C92) *
               C141320 * C4148 -
           (C1710 * C92 + C1711 * C107 + C1712 * C91 + C1713 * C105 +
            C1714 * C90 + C1715 * C103 +
            (C188 * C1606 + C141309 * C1695) * C89 +
            (C188 * C1601 + C141309 * C1690) * C101) *
               C141320 * C141487) *
              C141277 * C2376 +
          ((C1715 * C101 + C1714 * C89 + C1713 * C103 + C1712 * C90 +
            C1711 * C105 + C1710 * C91 +
            (C188 * C1602 + C141309 * C1691) * C107 +
            (C188 * C1607 + C141309 * C1696) * C92) *
               C141320 * C141487 -
           (C224 * C92 + C225 * C107 + C223 * C91 + C222 * C105 + C221 * C90 +
            C220 * C103 + C219 * C89 + C218 * C101) *
               C141320 * C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5964 * C108 + C5865 * C189 + C5965 * C823 + C5866 * C912 +
             C5966 * C2960 + C5867 * C3026) *
                C5869 +
            (C5964 * C114 + C5865 * C195 + C5965 * C828 + C5866 * C917 +
             C5966 * C2964 + C5867 * C3030) *
                C5863 +
            (C5992 + C5993 + C5994) * C5871 +
            (C5995 + C5996 + C5997) * C141221) *
               C141320 * C4148 -
           ((C8024 + C8025 + C8026) * C141221 +
            (C8027 + C8028 + C8029) * C5871 +
            (C5966 * C7890 + C5867 * C8009 + C5965 * C3494 + C5866 * C3576 +
             C5964 * C1606 + C5865 * C1695) *
                C5863 +
            (C5966 * C7887 + C5867 * C8006 + C5965 * C3490 + C5866 * C3572 +
             C5964 * C1601 + C5865 * C1690) *
                C5869) *
               C141320 * C141487) *
              C141277 * C2376 +
          (((C8029 + C8028 + C8027) * C5869 + (C8026 + C8025 + C8024) * C5863 +
            (C5964 * C1599 + C5865 * C1688 + C5965 * C3492 + C5866 * C3574 +
             C5966 * C7888 + C5867 * C8007) *
                C5871 +
            (C5964 * C1604 + C5865 * C1693 + C5965 * C3496 + C5866 * C3578 +
             C5966 * C7891 + C5867 * C8010) *
                C141221) *
               C141320 * C141487 -
           ((C5998 + C5999 + C6000) * C141221 +
            (C6001 + C6002 + C6003) * C5871 + (C5997 + C5996 + C5995) * C5863 +
            (C5994 + C5993 + C5992) * C5869) *
               C141320 * C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eexz[42] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141320 * C276) * C101 +
            (C275 * C114 + C141320 * C282) * C89 + C305 * C103 + C306 * C90 +
            C307 * C105 + C308 * C91 + C309 * C107 + C310 * C92) *
               C141309 * C4148 -
           (C1804 * C92 + C1805 * C107 + C1806 * C91 + C1807 * C105 +
            C1808 * C90 + C1809 * C103 +
            (C275 * C1606 + C141320 * C1789) * C89 +
            (C275 * C1601 + C141320 * C1784) * C101) *
               C141309 * C141487) *
              C141277 * C2376 +
          ((C1809 * C101 + C1808 * C89 + C1807 * C103 + C1806 * C90 +
            C1805 * C105 + C1804 * C91 +
            (C275 * C1602 + C141320 * C1785) * C107 +
            (C275 * C1607 + C141320 * C1790) * C92) *
               C141309 * C141487 -
           (C311 * C92 + C312 * C107 + C310 * C91 + C309 * C105 + C308 * C90 +
            C307 * C103 + C306 * C89 + C305 * C101) *
               C141309 * C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141320 * C276) * C5869 +
             (C275 * C114 + C141320 * C282) * C5863 + C305 * C5871 +
             C306 * C141221) *
                C5865 +
            (C7038 + C7039 + C7012 + C7013) * C5866 + C9955 * C5867) *
               C4148 -
           ((C10784 + C10785 + C10800 + C10801) * C5867 +
            (C10790 + C10791 + C10802 + C10803) * C5866 +
            (C1808 * C141221 + C1809 * C5871 +
             (C275 * C1606 + C141320 * C1789) * C5863 +
             (C275 * C1601 + C141320 * C1784) * C5869) *
                C5865) *
               C141487) *
              C141277 * C2376 +
          (((C1809 * C5869 + C1808 * C5863 + C1807 * C5871 + C1806 * C141221) *
                C5865 +
            (C8145 * C5869 + C8144 * C5863 +
             (C275 * C3492 + C141320 * C3648) * C5871 +
             (C275 * C3496 + C141320 * C3652) * C141221) *
                C5866 +
            (C8143 * C5869 + C8142 * C5863 +
             (C275 * C7888 + C141320 * C8129) * C5871 +
             (C275 * C7891 + C141320 * C8132) * C141221) *
                C5867) *
               C141487 -
           ((C7031 + C7030 + C7029 + C7028) * C5867 +
            (C7027 + C7026 + C7025 + C7024) * C5866 +
            (C308 * C141221 + C307 * C5871 + C306 * C5863 + C305 * C5869) *
                C5865) *
               C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[42] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
             C91 * C116 + C107 * C111 + C92 * C117) *
                C188 +
            (C101 * C189 + C89 * C362 + C103 * C190 + C90 * C363 + C105 * C191 +
             C91 * C364 + C107 * C192 + C92 * C365) *
                C141309) *
               C141320 * C4148 -
           ((C107 * C1687 + C92 * C1875 + C105 * C1688 + C91 * C1876 +
             C103 * C1689 + C90 * C1877 + C101 * C1690 + C89 * C1878) *
                C141309 +
            (C107 * C1598 + C92 * C1603 + C105 * C1599 + C91 * C1604 +
             C103 * C1600 + C90 * C1605 + C101 * C1601 + C89 * C1606) *
                C188) *
               C141320 * C141487) *
              C141277 * C2376 +
          (((C101 * C1600 + C89 * C1605 + C103 * C1599 + C90 * C1604 +
             C105 * C1598 + C91 * C1603 + C107 * C1602 + C92 * C1607) *
                C188 +
            (C101 * C1689 + C89 * C1877 + C103 * C1688 + C90 * C1876 +
             C105 * C1687 + C91 * C1875 + C107 * C1691 + C92 * C1879) *
                C141309) *
               C141320 * C141487 -
           ((C107 * C193 + C92 * C366 + C105 * C192 + C91 * C365 + C103 * C191 +
             C90 * C364 + C101 * C190 + C89 * C363) *
                C141309 +
            (C107 * C112 + C92 * C118 + C105 * C111 + C91 * C117 + C103 * C110 +
             C90 * C116 + C101 * C109 + C89 * C115) *
                C188) *
               C141320 * C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C141221 * C115) *
                C5964 +
            (C5869 * C189 + C5863 * C362 + C5871 * C190 + C141221 * C363) *
                C5865 +
            (C7175 + C7176) * C5965 + (C7177 + C7178) * C5866 + C10034 * C5966 +
            C10035 * C5867) *
               C141320 * C4148 -
           ((C10920 + C10921) * C5867 + (C10922 + C10923) * C5966 +
            (C10924 + C10925) * C5866 + (C10926 + C10927) * C5965 +
            (C5871 * C1689 + C141221 * C1877 + C5869 * C1690 + C5863 * C1878) *
                C5865 +
            (C5871 * C1600 + C141221 * C1605 + C5869 * C1601 + C5863 * C1606) *
                C5964) *
               C141320 * C141487) *
              C141277 * C2376 +
          (((C5869 * C1600 + C5863 * C1605 + C5871 * C1599 + C141221 * C1604) *
                C5964 +
            (C5869 * C1689 + C5863 * C1877 + C5871 * C1688 + C141221 * C1876) *
                C5865 +
            (C5869 * C3491 + C5863 * C3495 + C5871 * C3492 + C141221 * C3496) *
                C5965 +
            (C5869 * C3573 + C5863 * C3721 + C5871 * C3574 + C141221 * C3722) *
                C5866 +
            (C5869 * C7886 + C5863 * C7889 + C5871 * C7888 + C141221 * C7891) *
                C5966 +
            (C5869 * C8005 + C5863 * C8243 + C5871 * C8007 + C141221 * C8245) *
                C5867) *
               C141320 * C141487 -
           ((C7190 + C7189) * C5867 + (C7188 + C7187) * C5966 +
            (C7186 + C7185) * C5866 + (C7184 + C7183) * C5965 +
            (C5871 * C191 + C141221 * C364 + C5869 * C190 + C5863 * C363) *
                C5865 +
            (C5871 * C110 + C141221 * C116 + C5869 * C109 + C5863 * C115) *
                C5964) *
               C141320 * C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[42] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C418 * C108 + C426 + C426 + C141309 * C419) * C89 +
                      C448 * C90 + C449 * C91 + C450 * C92) *
                         C141320 * C4148 -
                     (C1969 * C92 + C1970 * C91 + C1971 * C90 +
                      (C418 * C1601 + C1961 + C1961 + C141309 * C1949) * C89) *
                         C141320 * C141487) *
                        C141277 * C2376 +
                    ((C1971 * C89 + C1970 * C90 + C1969 * C91 +
                      (C418 * C1602 + C1962 + C1962 + C141309 * C1950) * C92) *
                         C141320 * C141487 -
                     (C451 * C92 + C450 * C91 + C449 * C90 + C448 * C89) *
                         C141320 * C4148) *
                        C141277 * C141483)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C6237 * C108 + C6241 + C6241 + C5865 * C419 +
                       C6238 * C823 + C6242 + C6242 + C5866 * C1171 +
                       C6239 * C2960 + C6243 + C6243 + C5867 * C3196) *
                          C5863 +
                      (C6277 + C6278 + C6279) * C141221) *
                         C141320 * C4148 -
                     ((C8369 + C8370 + C8371) * C141221 +
                      (C6239 * C7887 + C8357 + C8357 + C5867 * C8345 +
                       C6238 * C3490 + C8358 + C8358 + C5866 * C3790 +
                       C6237 * C1601 + C8359 + C8359 + C5865 * C1949) *
                          C5863) *
                         C141320 * C141487) *
                        C141277 * C2376 +
                    (((C8371 + C8370 + C8369) * C5863 +
                      (C6237 * C1599 + C8360 + C8360 + C5865 * C1947 +
                       C6238 * C3492 + C8361 + C8361 + C5866 * C3792 +
                       C6239 * C7888 + C8362 + C8362 + C5867 * C8346) *
                          C141221) *
                         C141320 * C141487 -
                     ((C6280 + C6281 + C6282) * C141221 +
                      (C6279 + C6278 + C6277) * C5863) *
                         C141320 * C4148) *
                        C141277 * C141483)) /
                      (p * q * std::sqrt(p + q));
    d2eeyz[42] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141320 * C276) * C188 +
             (C275 * C189 + C141320 * C501) * C141309) *
                C89 +
            (C508 + C524) * C90 + C528 * C91 + C529 * C92) *
               C4148 -
           ((C2055 + C2045) * C92 + (C2056 + C2048) * C91 +
            (C2057 + C2051) * C90 +
            ((C275 * C1690 + C141320 * C2040) * C141309 +
             (C275 * C1601 + C141320 * C1784) * C188) *
                C89) *
               C141487) *
              C141277 * C2376 +
          (((C2051 + C2057) * C89 + (C2048 + C2056) * C90 +
            (C2045 + C2055) * C91 +
            ((C275 * C1602 + C141320 * C1785) * C188 +
             (C275 * C1691 + C141320 * C2041) * C141309) *
                C92) *
               C141487 -
           ((C527 + C519) * C92 + (C526 + C514) * C91 + (C525 + C511) * C90 +
            (C524 + C508) * C89) *
               C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141320 * C276) * C5964 +
             (C275 * C189 + C141320 * C501) * C5865 + C7032 * C5965 +
             C7428 * C5866 + C7034 * C5966 + C7429 * C5867) *
                C5863 +
            (C6357 + C6358 + C6359 + C6360 + C6361 + C6373) * C141221) *
               C4148 -
           ((C8483 + C8475 + C8484 + C8478 + C8479 + C8480) * C141221 +
            (C11138 * C5867 + C10797 * C5966 + C11139 * C5866 + C10799 * C5965 +
             (C275 * C1690 + C141320 * C2040) * C5865 +
             (C275 * C1601 + C141320 * C1784) * C5964) *
                C5863) *
               C141487) *
              C141277 * C2376 +
          (((C8480 + C8479 + C8478 + C8484 + C8475 + C8483) * C5863 +
            (C1807 * C5964 + C2053 * C5865 +
             (C275 * C3492 + C141320 * C3648) * C5965 +
             (C275 * C3574 + C141320 * C3866) * C5866 +
             (C275 * C7888 + C141320 * C8129) * C5966 +
             (C275 * C8007 + C141320 * C8471) * C5867) *
                C141221) *
               C141487 -
           ((C6374 + C6366 + C6367 + C6368 + C6369 + C6370) * C141221 +
            (C6373 + C6361 + C6360 + C6359 + C6358 + C6357) * C5863) *
               C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eezx[42] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
             C91 * C116 + C107 * C111 + C92 * C117) *
                C275 +
            (C101 * C276 + C89 * C579 + C103 * C277 + C90 * C580 + C105 * C278 +
             C91 * C581 + C107 * C279 + C92 * C582) *
                C141320) *
               C141309 * C4148 -
           ((C107 * C1781 + C92 * C2123 + C105 * C1782 + C91 * C2124 +
             C103 * C1783 + C90 * C2125 + C101 * C1784 + C89 * C2126) *
                C141320 +
            (C107 * C1598 + C92 * C1603 + C105 * C1599 + C91 * C1604 +
             C103 * C1600 + C90 * C1605 + C101 * C1601 + C89 * C1606) *
                C275) *
               C141309 * C141487) *
              C141277 * C2376 +
          (((C101 * C1600 + C89 * C1605 + C103 * C1599 + C90 * C1604 +
             C105 * C1598 + C91 * C1603 + C107 * C1602 + C92 * C1607) *
                C275 +
            (C101 * C1783 + C89 * C2125 + C103 * C1782 + C90 * C2124 +
             C105 * C1781 + C91 * C2123 + C107 * C1785 + C92 * C2127) *
                C141320) *
               C141309 * C141487 -
           ((C107 * C280 + C92 * C583 + C105 * C279 + C91 * C582 + C103 * C278 +
             C90 * C581 + C101 * C277 + C89 * C580) *
                C141320 +
            (C107 * C112 + C92 * C118 + C105 * C111 + C91 * C117 + C103 * C110 +
             C90 * C116 + C101 * C109 + C89 * C115) *
                C275) *
               C141309 * C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C141221 * C115) *
                 C275 +
             (C5869 * C276 + C5863 * C579 + C5871 * C277 + C141221 * C580) *
                 C141320) *
                C5865 +
            ((C7175 + C7176) * C275 + (C7549 + C7550) * C141320) * C5866 +
            C10294 * C5867) *
               C4148 -
           (((C11248 + C11249) * C141320 + (C10922 + C10923) * C275) * C5867 +
            ((C11250 + C11251) * C141320 + (C10926 + C10927) * C275) * C5866 +
            ((C5871 * C1783 + C141221 * C2125 + C5869 * C1784 + C5863 * C2126) *
                 C141320 +
             (C5871 * C1600 + C141221 * C1605 + C5869 * C1601 + C5863 * C1606) *
                 C275) *
                C5865) *
               C141487) *
              C141277 * C2376 +
          ((((C5869 * C1600 + C5863 * C1605 + C5871 * C1599 + C141221 * C1604) *
                 C275 +
             (C5869 * C1783 + C5863 * C2125 + C5871 * C1782 + C141221 * C2124) *
                 C141320) *
                C5865 +
            ((C5869 * C3491 + C5863 * C3495 + C5871 * C3492 + C141221 * C3496) *
                 C275 +
             (C5869 * C3647 + C5863 * C3935 + C5871 * C3648 + C141221 * C3936) *
                 C141320) *
                C5866 +
            ((C5869 * C7886 + C5863 * C7889 + C5871 * C7888 + C141221 * C7891) *
                 C275 +
             (C5869 * C8127 + C5863 * C8582 + C5871 * C8129 + C141221 * C8584) *
                 C141320) *
                C5867) *
               C141487 -
           (((C7556 + C7555) * C141320 + (C7188 + C7187) * C275) * C5867 +
            ((C7554 + C7553) * C141320 + (C7184 + C7183) * C275) * C5866 +
            ((C5871 * C278 + C141221 * C581 + C5869 * C277 + C5863 * C580) *
                 C141320 +
             (C5871 * C110 + C141221 * C116 + C5869 * C109 + C5863 * C115) *
                 C275) *
                C5865) *
               C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eezy[42] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C188 * C108 + C141309 * C189) * C275 +
                       (C188 * C276 + C141309 * C635) * C141320) *
                          C89 +
                      (C642 + C658) * C90 + C662 * C91 + C663 * C92) *
                         C4148 -
                     ((C2212 + C2202) * C92 + (C2213 + C2205) * C91 +
                      (C2214 + C2208) * C90 +
                      ((C188 * C1784 + C141309 * C2197) * C141320 +
                       (C188 * C1601 + C141309 * C1690) * C275) *
                          C89) *
                         C141487) *
                        C141277 * C2376 +
                    (((C2208 + C2214) * C89 + (C2205 + C2213) * C90 +
                      (C2202 + C2212) * C91 +
                      ((C188 * C1602 + C141309 * C1691) * C275 +
                       (C188 * C1785 + C141309 * C2198) * C141320) *
                          C92) *
                         C141487 -
                     ((C661 + C653) * C92 + (C660 + C648) * C91 +
                      (C659 + C645) * C90 + (C658 + C642) * C89) *
                         C4148) *
                        C141277 * C141483)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C5964 * C108 + C5865 * C189 + C5965 * C823 +
                        C5866 * C912 + C5966 * C2960 + C5867 * C3026) *
                           C275 +
                       (C5964 * C276 + C5865 * C635 + C5965 * C1006 +
                        C5866 * C1419 + C5966 * C3084 + C5867 * C3362) *
                           C141320) *
                          C5863 +
                      ((C5992 + C5993 + C5994) * C275 +
                       (C6535 + C6536 + C6537) * C141320) *
                          C141221) *
                         C4148 -
                     (((C8693 + C8694 + C8695) * C141320 +
                       (C8027 + C8028 + C8029) * C275) *
                          C141221 +
                      ((C5966 * C8128 + C5867 * C8684 + C5965 * C3646 +
                        C5866 * C4004 + C5964 * C1784 + C5865 * C2197) *
                           C141320 +
                       (C5966 * C7887 + C5867 * C8006 + C5965 * C3490 +
                        C5866 * C3572 + C5964 * C1601 + C5865 * C1690) *
                           C275) *
                          C5863) *
                         C141487) *
                        C141277 * C2376 +
                    ((((C8029 + C8028 + C8027) * C275 +
                       (C8695 + C8694 + C8693) * C141320) *
                          C5863 +
                      ((C5964 * C1599 + C5865 * C1688 + C5965 * C3492 +
                        C5866 * C3574 + C5966 * C7888 + C5867 * C8007) *
                           C275 +
                       (C5964 * C1782 + C5865 * C2195 + C5965 * C3648 +
                        C5866 * C4006 + C5966 * C8129 + C5867 * C8685) *
                           C141320) *
                          C141221) *
                         C141487 -
                     (((C6538 + C6539 + C6540) * C141320 +
                       (C6001 + C6002 + C6003) * C275) *
                          C141221 +
                      ((C6537 + C6536 + C6535) * C141320 +
                       (C5994 + C5993 + C5992) * C275) *
                          C5863) *
                         C4148) *
                        C141277 * C141483)) /
                      (p * q * std::sqrt(p + q));
    d2eezz[42] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C141320 * C714) * C141309 * C89 +
            C747 * C90 + C748 * C91 + C749 * C92) *
               C4148 -
           (C2306 * C92 + C2307 * C91 + C2308 * C90 +
            (C713 * C1601 + C2295 + C2295 + C141320 * C2283) * C141309 * C89) *
               C141487) *
              C141277 * C2376 +
          ((C2308 * C89 + C2307 * C90 + C2306 * C91 +
            (C713 * C1602 + C2296 + C2296 + C141320 * C2284) * C141309 * C92) *
               C141487 -
           (C750 * C92 + C749 * C91 + C748 * C90 + C747 * C89) * C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C713 * C108 + C721 + C721 + C141320 * C714) * C5865 +
             C7785 * C5866 + C7786 * C5867) *
                C5863 +
            (C6615 + C6616 + C6629) * C141221) *
               C4148 -
           ((C8811 + C8812 + C8802) * C141221 +
            (C11462 * C5867 + C11463 * C5866 +
             (C713 * C1601 + C2295 + C2295 + C141320 * C2283) * C5865) *
                C5863) *
               C141487) *
              C141277 * C2376 +
          (((C8802 + C8812 + C8811) * C5863 +
            (C2304 * C5865 +
             (C713 * C3492 + C4081 + C4081 + C141320 * C4076) * C5866 +
             (C713 * C7888 + C8804 + C8804 + C141320 * C8795) * C5867) *
                C141221) *
               C141487 -
           ((C6630 + C6621 + C6622) * C141221 +
            (C6629 + C6616 + C6615) * C5863) *
               C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eexx[43] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C108 + C127 + C127 + C89 * C120 + C102 * C109 + C128 + C128 +
            C90 * C121 + C104 * C110 + C129 + C129 + C91 * C122 + C106 * C111 +
            C130 + C130 + C92 * C123) *
               C141320 * C141309 * C4148 -
           (C106 * C1598 + C1614 + C1614 + C92 * C1608 + C104 * C1599 + C1615 +
            C1615 + C91 * C1609 + C102 * C1600 + C1616 + C1616 + C90 * C1610 +
            C100 * C1601 + C1617 + C1617 + C89 * C1611) *
               C141320 * C141309 * C141487) *
              C816 +
          ((C100 * C3490 + C3503 + C3503 + C89 * C3498 + C102 * C3491 + C3504 +
            C3504 + C90 * C3499 + C104 * C3492 + C3505 + C3505 + C91 * C3500 +
            C106 * C3493 + C3506 + C3506 + C92 * C3501) *
               C141320 * C141309 * C141487 -
           (C106 * C820 + C836 + C836 + C92 * C830 + C104 * C821 + C837 + C837 +
            C91 * C831 + C102 * C822 + C838 + C838 + C90 * C832 + C100 * C823 +
            C839 + C839 + C89 * C833) *
               C141320 * C141309 * C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5868 * C108 + C5873 + C5873 + C5863 * C120 + C5870 * C109 +
             C5874 + C5874 + C141221 * C121) *
                C141320 * C5865 +
            (C6774 + C6775) * C141320 * C5866 + C9782 * C5867) *
               C4148 -
           ((C10576 + C10577) * C141320 * C5867 +
            (C10578 + C10579) * C141320 * C5866 +
            (C5870 * C1600 + C7900 + C7900 + C141221 * C1610 + C5868 * C1601 +
             C7901 + C7901 + C5863 * C1611) *
                C141320 * C5865) *
               C141487) *
              C816 +
          (((C10579 + C10578) * C141320 * C5865 +
            (C10577 + C10576) * C141320 * C5866 +
            (C5868 * C10551 + C10566 + C10566 + C5863 * C10555 +
             C5870 * C10552 + C10567 + C10567 + C141221 * C10556) *
                C141320 * C5867) *
               C141487 -
           ((C9787 + C9788) * C141320 * C5867 +
            (C6777 + C6776) * C141320 * C5866 +
            (C6775 + C6774) * C141320 * C5865) *
               C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eexy[43] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141309 * C189) * C101 +
            (C188 * C114 + C141309 * C195) * C89 + C218 * C103 + C219 * C90 +
            C220 * C105 + C221 * C91 + C222 * C107 + C223 * C92) *
               C141320 * C4148 -
           (C1710 * C92 + C1711 * C107 + C1712 * C91 + C1713 * C105 +
            C1714 * C90 + C1715 * C103 +
            (C188 * C1606 + C141309 * C1695) * C89 +
            (C188 * C1601 + C141309 * C1690) * C101) *
               C141320 * C141487) *
              C816 +
          (((C188 * C3490 + C141309 * C3572) * C101 +
            (C188 * C3494 + C141309 * C3576) * C89 +
            (C188 * C3491 + C141309 * C3573) * C103 +
            (C188 * C3495 + C141309 * C3577) * C90 +
            (C188 * C3492 + C141309 * C3574) * C105 +
            (C188 * C3496 + C141309 * C3578) * C91 +
            (C188 * C3493 + C141309 * C3575) * C107 +
            (C188 * C3497 + C141309 * C3579) * C92) *
               C141320 * C141487 -
           (C932 * C92 + C933 * C107 + C934 * C91 + C935 * C105 + C936 * C90 +
            C937 * C103 + (C188 * C828 + C141309 * C917) * C89 +
            (C188 * C823 + C141309 * C912) * C101) *
               C141320 * C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5964 * C108 + C5865 * C189 + C5965 * C823 + C5866 * C912 +
             C5966 * C2960 + C5867 * C3026) *
                C5869 +
            (C5964 * C114 + C5865 * C195 + C5965 * C828 + C5866 * C917 +
             C5966 * C2964 + C5867 * C3030) *
                C5863 +
            (C5992 + C5993 + C5994) * C5871 +
            (C5995 + C5996 + C5997) * C141221) *
               C141320 * C4148 -
           ((C8024 + C8025 + C8026) * C141221 +
            (C8027 + C8028 + C8029) * C5871 +
            (C5966 * C7890 + C5867 * C8009 + C5965 * C3494 + C5866 * C3576 +
             C5964 * C1606 + C5865 * C1695) *
                C5863 +
            (C5966 * C7887 + C5867 * C8006 + C5965 * C3490 + C5866 * C3572 +
             C5964 * C1601 + C5865 * C1690) *
                C5869) *
               C141320 * C141487) *
              C816 +
          (((C5964 * C3490 + C5865 * C3572 + C5965 * C7887 + C5866 * C8006 +
             C5966 * C10551 + C5867 * C10677) *
                C5869 +
            (C5964 * C3494 + C5865 * C3576 + C5965 * C7890 + C5866 * C8009 +
             C5966 * C10553 + C5867 * C10679) *
                C5863 +
            (C5964 * C3491 + C5865 * C3573 + C5965 * C7886 + C5866 * C8005 +
             C5966 * C10552 + C5867 * C10678) *
                C5871 +
            (C5964 * C3495 + C5865 * C3577 + C5965 * C7889 + C5866 * C8008 +
             C5966 * C10554 + C5867 * C10680) *
                C141221) *
               C141320 * C141487 -
           ((C6898 + C6899 + C6900) * C141221 +
            (C6901 + C6902 + C6903) * C5871 +
            (C5966 * C6732 + C5867 * C6883 + C5965 * C2964 + C5866 * C3030 +
             C5964 * C828 + C5865 * C917) *
                C5863 +
            (C5966 * C6729 + C5867 * C6880 + C5965 * C2960 + C5866 * C3026 +
             C5964 * C823 + C5865 * C912) *
                C5869) *
               C141320 * C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eexz[43] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141320 * C276) * C101 +
            (C275 * C114 + C141320 * C282) * C89 + C305 * C103 + C306 * C90 +
            C307 * C105 + C308 * C91 + C309 * C107 + C310 * C92) *
               C141309 * C4148 -
           (C1804 * C92 + C1805 * C107 + C1806 * C91 + C1807 * C105 +
            C1808 * C90 + C1809 * C103 +
            (C275 * C1606 + C141320 * C1789) * C89 +
            (C275 * C1601 + C141320 * C1784) * C101) *
               C141309 * C141487) *
              C816 +
          (((C275 * C3490 + C141320 * C3646) * C101 +
            (C275 * C3494 + C141320 * C3650) * C89 +
            (C275 * C3491 + C141320 * C3647) * C103 +
            (C275 * C3495 + C141320 * C3651) * C90 +
            (C275 * C3492 + C141320 * C3648) * C105 +
            (C275 * C3496 + C141320 * C3652) * C91 +
            (C275 * C3493 + C141320 * C3649) * C107 +
            (C275 * C3497 + C141320 * C3653) * C92) *
               C141309 * C141487 -
           (C1026 * C92 + C1027 * C107 + C1028 * C91 + C1029 * C105 +
            C1030 * C90 + C1031 * C103 + (C275 * C828 + C141320 * C1011) * C89 +
            (C275 * C823 + C141320 * C1006) * C101) *
               C141309 * C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141320 * C276) * C5869 +
             (C275 * C114 + C141320 * C282) * C5863 + C305 * C5871 +
             C306 * C141221) *
                C5865 +
            (C7038 + C7039 + C7012 + C7013) * C5866 + C9955 * C5867) *
               C4148 -
           ((C10784 + C10785 + C10800 + C10801) * C5867 +
            (C10790 + C10791 + C10802 + C10803) * C5866 +
            (C1808 * C141221 + C1809 * C5871 +
             (C275 * C1606 + C141320 * C1789) * C5863 +
             (C275 * C1601 + C141320 * C1784) * C5869) *
                C5865) *
               C141487) *
              C816 +
          (((C10803 + C10802 + C10791 + C10790) * C5865 +
            (C10801 + C10800 + C10785 + C10784) * C5866 +
            ((C275 * C10551 + C141320 * C10779) * C5869 +
             (C275 * C10553 + C141320 * C10781) * C5863 +
             (C275 * C10552 + C141320 * C10780) * C5871 +
             (C275 * C10554 + C141320 * C10782) * C141221) *
                C5867) *
               C141487 -
           ((C9946 + C9947 + C9956 + C9957) * C5867 +
            (C7019 + C7018 + C7041 + C7040) * C5866 +
            (C7013 + C7012 + C7039 + C7038) * C5865) *
               C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eeyx[43] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
             C91 * C116 + C107 * C111 + C92 * C117) *
                C188 +
            (C101 * C189 + C89 * C362 + C103 * C190 + C90 * C363 + C105 * C191 +
             C91 * C364 + C107 * C192 + C92 * C365) *
                C141309) *
               C141320 * C4148 -
           ((C107 * C1687 + C92 * C1875 + C105 * C1688 + C91 * C1876 +
             C103 * C1689 + C90 * C1877 + C101 * C1690 + C89 * C1878) *
                C141309 +
            (C107 * C1598 + C92 * C1603 + C105 * C1599 + C91 * C1604 +
             C103 * C1600 + C90 * C1605 + C101 * C1601 + C89 * C1606) *
                C188) *
               C141320 * C141487) *
              C816 +
          (((C101 * C3490 + C89 * C3494 + C103 * C3491 + C90 * C3495 +
             C105 * C3492 + C91 * C3496 + C107 * C3493 + C92 * C3497) *
                C188 +
            (C101 * C3572 + C89 * C3720 + C103 * C3573 + C90 * C3721 +
             C105 * C3574 + C91 * C3722 + C107 * C3575 + C92 * C3723) *
                C141309) *
               C141320 * C141487 -
           ((C107 * C909 + C92 * C1097 + C105 * C910 + C91 * C1098 +
             C103 * C911 + C90 * C1099 + C101 * C912 + C89 * C1100) *
                C141309 +
            (C107 * C820 + C92 * C825 + C105 * C821 + C91 * C826 + C103 * C822 +
             C90 * C827 + C101 * C823 + C89 * C828) *
                C188) *
               C141320 * C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C141221 * C115) *
                C5964 +
            (C5869 * C189 + C5863 * C362 + C5871 * C190 + C141221 * C363) *
                C5865 +
            (C7175 + C7176) * C5965 + (C7177 + C7178) * C5866 + C10034 * C5966 +
            C10035 * C5867) *
               C141320 * C4148 -
           ((C10920 + C10921) * C5867 + (C10922 + C10923) * C5966 +
            (C10924 + C10925) * C5866 + (C10926 + C10927) * C5965 +
            (C5871 * C1689 + C141221 * C1877 + C5869 * C1690 + C5863 * C1878) *
                C5865 +
            (C5871 * C1600 + C141221 * C1605 + C5869 * C1601 + C5863 * C1606) *
                C5964) *
               C141320 * C141487) *
              C816 +
          (((C10927 + C10926) * C5964 + (C10925 + C10924) * C5865 +
            (C10923 + C10922) * C5965 + (C10921 + C10920) * C5866 +
            (C5869 * C10551 + C5863 * C10553 + C5871 * C10552 +
             C141221 * C10554) *
                C5966 +
            (C5869 * C10677 + C5863 * C10901 + C5871 * C10678 +
             C141221 * C10902) *
                C5867) *
               C141320 * C141487 -
           ((C10044 + C10045) * C5867 + (C10046 + C10047) * C5966 +
            (C7182 + C7181) * C5866 + (C7180 + C7179) * C5965 +
            (C7178 + C7177) * C5865 + (C7176 + C7175) * C5964) *
               C141320 * C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eeyy[43] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C418 * C108 + C426 + C426 + C141309 * C419) * C89 +
                      C448 * C90 + C449 * C91 + C450 * C92) *
                         C141320 * C4148 -
                     (C1969 * C92 + C1970 * C91 + C1971 * C90 +
                      (C418 * C1601 + C1961 + C1961 + C141309 * C1949) * C89) *
                         C141320 * C141487) *
                        C816 +
                    (((C418 * C3490 + C3795 + C3795 + C141309 * C3790) * C89 +
                      (C418 * C3491 + C3796 + C3796 + C141309 * C3791) * C90 +
                      (C418 * C3492 + C3797 + C3797 + C141309 * C3792) * C91 +
                      (C418 * C3493 + C3798 + C3798 + C141309 * C3793) * C92) *
                         C141320 * C141487 -
                     (C1191 * C92 + C1192 * C91 + C1193 * C90 +
                      (C418 * C823 + C1183 + C1183 + C141309 * C1171) * C89) *
                         C141320 * C4148) *
                        C141485) *
                   C141243) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C6237 * C108 + C6241 + C6241 + C5865 * C419 +
                       C6238 * C823 + C6242 + C6242 + C5866 * C1171 +
                       C6239 * C2960 + C6243 + C6243 + C5867 * C3196) *
                          C5863 +
                      (C6277 + C6278 + C6279) * C141221) *
                         C141320 * C4148 -
                     ((C8369 + C8370 + C8371) * C141221 +
                      (C6239 * C7887 + C8357 + C8357 + C5867 * C8345 +
                       C6238 * C3490 + C8358 + C8358 + C5866 * C3790 +
                       C6237 * C1601 + C8359 + C8359 + C5865 * C1949) *
                          C5863) *
                         C141320 * C141487) *
                        C816 +
                    (((C6237 * C3490 + C11028 + C11028 + C5865 * C3790 +
                       C6238 * C7887 + C11029 + C11029 + C5866 * C8345 +
                       C6239 * C10551 + C11030 + C11030 + C5867 * C11025) *
                          C5863 +
                      (C6237 * C3491 + C11031 + C11031 + C5865 * C3791 +
                       C6238 * C7886 + C11032 + C11032 + C5866 * C8344 +
                       C6239 * C10552 + C11033 + C11033 + C5867 * C11026) *
                          C141221) *
                         C141320 * C141487 -
                     ((C7313 + C7314 + C7315) * C141221 +
                      (C6239 * C6729 + C7301 + C7301 + C5867 * C7289 +
                       C6238 * C2960 + C7302 + C7302 + C5866 * C3196 +
                       C6237 * C823 + C7303 + C7303 + C5865 * C1171) *
                          C5863) *
                         C141320 * C4148) *
                        C141485) *
                   C141243) /
                      (p * q * std::sqrt(p + q));
    d2eeyz[43] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141320 * C276) * C188 +
             (C275 * C189 + C141320 * C501) * C141309) *
                C89 +
            (C508 + C524) * C90 + C528 * C91 + C529 * C92) *
               C4148 -
           ((C2055 + C2045) * C92 + (C2056 + C2048) * C91 +
            (C2057 + C2051) * C90 +
            ((C275 * C1690 + C141320 * C2040) * C141309 +
             (C275 * C1601 + C141320 * C1784) * C188) *
                C89) *
               C141487) *
              C816 +
          ((((C275 * C3490 + C141320 * C3646) * C188 +
             (C275 * C3572 + C141320 * C3864) * C141309) *
                C89 +
            ((C275 * C3491 + C141320 * C3647) * C188 +
             (C275 * C3573 + C141320 * C3865) * C141309) *
                C90 +
            ((C275 * C3492 + C141320 * C3648) * C188 +
             (C275 * C3574 + C141320 * C3866) * C141309) *
                C91 +
            ((C275 * C3493 + C141320 * C3649) * C188 +
             (C275 * C3575 + C141320 * C3867) * C141309) *
                C92) *
               C141487 -
           ((C1277 + C1267) * C92 + (C1278 + C1270) * C91 +
            (C1279 + C1273) * C90 +
            ((C275 * C912 + C141320 * C1262) * C141309 +
             (C275 * C823 + C141320 * C1006) * C188) *
                C89) *
               C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141320 * C276) * C5964 +
             (C275 * C189 + C141320 * C501) * C5865 + C7032 * C5965 +
             C7428 * C5866 + C7034 * C5966 + C7429 * C5867) *
                C5863 +
            (C6357 + C6358 + C6359 + C6360 + C6361 + C6373) * C141221) *
               C4148 -
           ((C8483 + C8475 + C8484 + C8478 + C8479 + C8480) * C141221 +
            (C11138 * C5867 + C10797 * C5966 + C11139 * C5866 + C10799 * C5965 +
             (C275 * C1690 + C141320 * C2040) * C5865 +
             (C275 * C1601 + C141320 * C1784) * C5964) *
                C5863) *
               C141487) *
              C816 +
          (((C10799 * C5964 + C11139 * C5865 + C10797 * C5965 + C11138 * C5866 +
             (C275 * C10551 + C141320 * C10779) * C5966 +
             (C275 * C10677 + C141320 * C11131) * C5867) *
                C5863 +
            (C8145 * C5964 + C8482 * C5865 + C8143 * C5965 + C8481 * C5866 +
             (C275 * C10552 + C141320 * C10780) * C5966 +
             (C275 * C10678 + C141320 * C11132) * C5867) *
                C141221) *
               C141487 -
           ((C7431 + C7423 + C7424 + C7425 + C7426 + C7427) * C141221 +
            (C10208 * C5867 + C9954 * C5966 + C7429 * C5866 + C7034 * C5965 +
             C7428 * C5865 + C7032 * C5964) *
                C5863) *
               C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eezx[43] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
             C91 * C116 + C107 * C111 + C92 * C117) *
                C275 +
            (C101 * C276 + C89 * C579 + C103 * C277 + C90 * C580 + C105 * C278 +
             C91 * C581 + C107 * C279 + C92 * C582) *
                C141320) *
               C141309 * C4148 -
           ((C107 * C1781 + C92 * C2123 + C105 * C1782 + C91 * C2124 +
             C103 * C1783 + C90 * C2125 + C101 * C1784 + C89 * C2126) *
                C141320 +
            (C107 * C1598 + C92 * C1603 + C105 * C1599 + C91 * C1604 +
             C103 * C1600 + C90 * C1605 + C101 * C1601 + C89 * C1606) *
                C275) *
               C141309 * C141487) *
              C816 +
          (((C101 * C3490 + C89 * C3494 + C103 * C3491 + C90 * C3495 +
             C105 * C3492 + C91 * C3496 + C107 * C3493 + C92 * C3497) *
                C275 +
            (C101 * C3646 + C89 * C3934 + C103 * C3647 + C90 * C3935 +
             C105 * C3648 + C91 * C3936 + C107 * C3649 + C92 * C3937) *
                C141320) *
               C141309 * C141487 -
           ((C107 * C1003 + C92 * C1345 + C105 * C1004 + C91 * C1346 +
             C103 * C1005 + C90 * C1347 + C101 * C1006 + C89 * C1348) *
                C141320 +
            (C107 * C820 + C92 * C825 + C105 * C821 + C91 * C826 + C103 * C822 +
             C90 * C827 + C101 * C823 + C89 * C828) *
                C275) *
               C141309 * C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C141221 * C115) *
                 C275 +
             (C5869 * C276 + C5863 * C579 + C5871 * C277 + C141221 * C580) *
                 C141320) *
                C5865 +
            ((C7175 + C7176) * C275 + (C7549 + C7550) * C141320) * C5866 +
            C10294 * C5867) *
               C4148 -
           (((C11248 + C11249) * C141320 + (C10922 + C10923) * C275) * C5867 +
            ((C11250 + C11251) * C141320 + (C10926 + C10927) * C275) * C5866 +
            ((C5871 * C1783 + C141221 * C2125 + C5869 * C1784 + C5863 * C2126) *
                 C141320 +
             (C5871 * C1600 + C141221 * C1605 + C5869 * C1601 + C5863 * C1606) *
                 C275) *
                C5865) *
               C141487) *
              C816 +
          ((((C10927 + C10926) * C275 + (C11251 + C11250) * C141320) * C5865 +
            ((C10923 + C10922) * C275 + (C11249 + C11248) * C141320) * C5866 +
            ((C5869 * C10551 + C5863 * C10553 + C5871 * C10552 +
              C141221 * C10554) *
                 C275 +
             (C5869 * C10779 + C5863 * C11237 + C5871 * C10780 +
              C141221 * C11238) *
                 C141320) *
                C5867) *
               C141487 -
           (((C10292 + C10293) * C141320 + (C10046 + C10047) * C275) * C5867 +
            ((C7552 + C7551) * C141320 + (C7180 + C7179) * C275) * C5866 +
            ((C7550 + C7549) * C141320 + (C7176 + C7175) * C275) * C5865) *
               C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eezy[43] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C188 * C108 + C141309 * C189) * C275 +
                       (C188 * C276 + C141309 * C635) * C141320) *
                          C89 +
                      (C642 + C658) * C90 + C662 * C91 + C663 * C92) *
                         C4148 -
                     ((C2212 + C2202) * C92 + (C2213 + C2205) * C91 +
                      (C2214 + C2208) * C90 +
                      ((C188 * C1784 + C141309 * C2197) * C141320 +
                       (C188 * C1601 + C141309 * C1690) * C275) *
                          C89) *
                         C141487) *
                        C816 +
                    ((((C188 * C3490 + C141309 * C3572) * C275 +
                       (C188 * C3646 + C141309 * C4004) * C141320) *
                          C89 +
                      ((C188 * C3491 + C141309 * C3573) * C275 +
                       (C188 * C3647 + C141309 * C4005) * C141320) *
                          C90 +
                      ((C188 * C3492 + C141309 * C3574) * C275 +
                       (C188 * C3648 + C141309 * C4006) * C141320) *
                          C91 +
                      ((C188 * C3493 + C141309 * C3575) * C275 +
                       (C188 * C3649 + C141309 * C4007) * C141320) *
                          C92) *
                         C141487 -
                     ((C1434 + C1424) * C92 + (C1435 + C1427) * C91 +
                      (C1436 + C1430) * C90 +
                      ((C188 * C1006 + C141309 * C1419) * C141320 +
                       (C188 * C823 + C141309 * C912) * C275) *
                          C89) *
                         C4148) *
                        C141485) *
                   C141243) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C5964 * C108 + C5865 * C189 + C5965 * C823 +
                        C5866 * C912 + C5966 * C2960 + C5867 * C3026) *
                           C275 +
                       (C5964 * C276 + C5865 * C635 + C5965 * C1006 +
                        C5866 * C1419 + C5966 * C3084 + C5867 * C3362) *
                           C141320) *
                          C5863 +
                      ((C5992 + C5993 + C5994) * C275 +
                       (C6535 + C6536 + C6537) * C141320) *
                          C141221) *
                         C4148 -
                     (((C8693 + C8694 + C8695) * C141320 +
                       (C8027 + C8028 + C8029) * C275) *
                          C141221 +
                      ((C5966 * C8128 + C5867 * C8684 + C5965 * C3646 +
                        C5866 * C4004 + C5964 * C1784 + C5865 * C2197) *
                           C141320 +
                       (C5966 * C7887 + C5867 * C8006 + C5965 * C3490 +
                        C5866 * C3572 + C5964 * C1601 + C5865 * C1690) *
                           C275) *
                          C5863) *
                         C141487) *
                        C816 +
                    ((((C5964 * C3490 + C5865 * C3572 + C5965 * C7887 +
                        C5866 * C8006 + C5966 * C10551 + C5867 * C10677) *
                           C275 +
                       (C5964 * C3646 + C5865 * C4004 + C5965 * C8128 +
                        C5866 * C8684 + C5966 * C10779 + C5867 * C11349) *
                           C141320) *
                          C5863 +
                      ((C5964 * C3491 + C5865 * C3573 + C5965 * C7886 +
                        C5866 * C8005 + C5966 * C10552 + C5867 * C10678) *
                           C275 +
                       (C5964 * C3647 + C5865 * C4005 + C5965 * C8127 +
                        C5866 * C8683 + C5966 * C10780 + C5867 * C11350) *
                           C141320) *
                          C141221) *
                         C141487 -
                     (((C7664 + C7665 + C7666) * C141320 +
                       (C6901 + C6902 + C6903) * C275) *
                          C141221 +
                      ((C5966 * C7002 + C5867 * C7655 + C5965 * C3084 +
                        C5866 * C3362 + C5964 * C1006 + C5865 * C1419) *
                           C141320 +
                       (C5966 * C6729 + C5867 * C6880 + C5965 * C2960 +
                        C5866 * C3026 + C5964 * C823 + C5865 * C912) *
                           C275) *
                          C5863) *
                         C4148) *
                        C141485) *
                   C141243) /
                      (p * q * std::sqrt(p + q));
    d2eezz[43] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C141320 * C714) * C141309 * C89 +
            C747 * C90 + C748 * C91 + C749 * C92) *
               C4148 -
           (C2306 * C92 + C2307 * C91 + C2308 * C90 +
            (C713 * C1601 + C2295 + C2295 + C141320 * C2283) * C141309 * C89) *
               C141487) *
              C816 +
          (((C713 * C3490 + C4079 + C4079 + C141320 * C4074) * C141309 * C89 +
            (C713 * C3491 + C4080 + C4080 + C141320 * C4075) * C141309 * C90 +
            (C713 * C3492 + C4081 + C4081 + C141320 * C4076) * C141309 * C91 +
            (C713 * C3493 + C4082 + C4082 + C141320 * C4077) * C141309 * C92) *
               C141487 -
           (C1528 * C92 + C1529 * C91 + C1530 * C90 +
            (C713 * C823 + C1517 + C1517 + C141320 * C1505) * C141309 * C89) *
               C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C713 * C108 + C721 + C721 + C141320 * C714) * C5865 +
             C7785 * C5866 + C7786 * C5867) *
                C5863 +
            (C6615 + C6616 + C6629) * C141221) *
               C4148 -
           ((C8811 + C8812 + C8802) * C141221 +
            (C11462 * C5867 + C11463 * C5866 +
             (C713 * C1601 + C2295 + C2295 + C141320 * C2283) * C5865) *
                C5863) *
               C141487) *
              C816 +
          (((C11463 * C5865 + C11462 * C5866 +
             (C713 * C10551 + C11456 + C11456 + C141320 * C11449) * C5867) *
                C5863 +
            (C8810 * C5865 + C8809 * C5866 +
             (C713 * C10552 + C11457 + C11457 + C141320 * C11450) * C5867) *
                C141221) *
               C141487 -
           ((C7788 + C7775 + C7776) * C141221 +
            (C10453 * C5867 + C7786 * C5866 + C7785 * C5865) * C5863) *
               C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eexx[44] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((C100 * C108 + C127 + C127 + C89 * C120 + C102 * C109 + C128 + C128 +
           C90 * C121 + C104 * C110 + C129 + C129 + C91 * C122 + C106 * C111 +
           C130 + C130 + C92 * C123) *
              C141320 * C141309 * C5322 -
          (C106 * C1598 + C1614 + C1614 + C92 * C1608 + C104 * C1599 + C1615 +
           C1615 + C91 * C1609 + C102 * C1600 + C1616 + C1616 + C90 * C1610 +
           C100 * C1601 + C1617 + C1617 + C89 * C1611) *
              C141320 * C141309 * C5323 +
          (C100 * C5325 + C5338 + C5338 + C89 * C5333 + C102 * C5326 + C5339 +
           C5339 + C90 * C5334 + C104 * C5327 + C5340 + C5340 + C91 * C5335 +
           C106 * C5328 + C5341 + C5341 + C92 * C5336) *
              C141320 * C141309 * C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C5868 * C108 + C5873 + C5873 + C5863 * C120 + C5870 * C109 + C5874 +
            C5874 + C141221 * C121) *
               C141320 * C5865 +
           (C6774 + C6775) * C141320 * C5866 + C9782 * C5867) *
              C5322 -
          ((C10576 + C10577) * C141320 * C5867 +
           (C10578 + C10579) * C141320 * C5866 +
           (C5870 * C1600 + C7900 + C7900 + C141221 * C1610 + C5868 * C1601 +
            C7901 + C7901 + C5863 * C1611) *
               C141320 * C5865) *
              C5323 +
          ((C5868 * C5325 + C13314 + C13314 + C5863 * C5333 + C5870 * C5326 +
            C13315 + C13315 + C141221 * C5334) *
               C141320 * C5865 +
           (C5868 * C13301 + C13316 + C13316 + C5863 * C13309 + C5870 * C13302 +
            C13317 + C13317 + C141221 * C13310) *
               C141320 * C5866 +
           (C5868 * C13303 + C13318 + C13318 + C5863 * C13311 + C5870 * C13304 +
            C13319 + C13319 + C141221 * C13312) *
               C141320 * C5867) *
              C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q));
    d2eexy[44] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C188 * C108 + C141309 * C189) * C101 +
           (C188 * C114 + C141309 * C195) * C89 + C218 * C103 + C219 * C90 +
           C220 * C105 + C221 * C91 + C222 * C107 + C223 * C92) *
              C141320 * C5322 -
          (C1710 * C92 + C1711 * C107 + C1712 * C91 + C1713 * C105 +
           C1714 * C90 + C1715 * C103 + (C188 * C1606 + C141309 * C1695) * C89 +
           (C188 * C1601 + C141309 * C1690) * C101) *
              C141320 * C5323 +
          ((C188 * C5325 + C141309 * C5391) * C101 +
           (C188 * C5329 + C141309 * C5395) * C89 +
           (C188 * C5326 + C141309 * C5392) * C103 +
           (C188 * C5330 + C141309 * C5396) * C90 +
           (C188 * C5327 + C141309 * C5393) * C105 +
           (C188 * C5331 + C141309 * C5397) * C91 +
           (C188 * C5328 + C141309 * C5394) * C107 +
           (C188 * C5332 + C141309 * C5398) * C92) *
              C141320 * C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C5964 * C108 + C5865 * C189 + C5965 * C823 + C5866 * C912 +
            C5966 * C2960 + C5867 * C3026) *
               C5869 +
           (C5964 * C114 + C5865 * C195 + C5965 * C828 + C5866 * C917 +
            C5966 * C2964 + C5867 * C3030) *
               C5863 +
           (C5992 + C5993 + C5994) * C5871 +
           (C5995 + C5996 + C5997) * C141221) *
              C141320 * C5322 -
          ((C8024 + C8025 + C8026) * C141221 + (C8027 + C8028 + C8029) * C5871 +
           (C5966 * C7890 + C5867 * C8009 + C5965 * C3494 + C5866 * C3576 +
            C5964 * C1606 + C5865 * C1695) *
               C5863 +
           (C5966 * C7887 + C5867 * C8006 + C5965 * C3490 + C5866 * C3572 +
            C5964 * C1601 + C5865 * C1690) *
               C5869) *
              C141320 * C5323 +
          ((C5964 * C5325 + C5865 * C5391 + C5965 * C13301 + C5866 * C13393 +
            C5966 * C13303 + C5867 * C13394) *
               C5869 +
           (C5964 * C5329 + C5865 * C5395 + C5965 * C13305 + C5866 * C13397 +
            C5966 * C13307 + C5867 * C13398) *
               C5863 +
           (C5964 * C5326 + C5865 * C5392 + C5965 * C13302 + C5866 * C13395 +
            C5966 * C13304 + C5867 * C13396) *
               C5871 +
           (C5964 * C5330 + C5865 * C5396 + C5965 * C13306 + C5866 * C13399 +
            C5966 * C13308 + C5867 * C13400) *
               C141221) *
              C141320 * C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q));
    d2eexz[44] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C275 * C108 + C141320 * C276) * C101 +
           (C275 * C114 + C141320 * C282) * C89 + C305 * C103 + C306 * C90 +
           C307 * C105 + C308 * C91 + C309 * C107 + C310 * C92) *
              C141309 * C5322 -
          (C1804 * C92 + C1805 * C107 + C1806 * C91 + C1807 * C105 +
           C1808 * C90 + C1809 * C103 + (C275 * C1606 + C141320 * C1789) * C89 +
           (C275 * C1601 + C141320 * C1784) * C101) *
              C141309 * C5323 +
          ((C275 * C5325 + C141320 * C5449) * C101 +
           (C275 * C5329 + C141320 * C5453) * C89 +
           (C275 * C5326 + C141320 * C5450) * C103 +
           (C275 * C5330 + C141320 * C5454) * C90 +
           (C275 * C5327 + C141320 * C5451) * C105 +
           (C275 * C5331 + C141320 * C5455) * C91 +
           (C275 * C5328 + C141320 * C5452) * C107 +
           (C275 * C5332 + C141320 * C5456) * C92) *
              C141309 * C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141320 * C276) * C5869 +
            (C275 * C114 + C141320 * C282) * C5863 + C305 * C5871 +
            C306 * C141221) *
               C5865 +
           (C7038 + C7039 + C7012 + C7013) * C5866 + C9955 * C5867) *
              C5322 -
          ((C10784 + C10785 + C10800 + C10801) * C5867 +
           (C10790 + C10791 + C10802 + C10803) * C5866 +
           (C1808 * C141221 + C1809 * C5871 +
            (C275 * C1606 + C141320 * C1789) * C5863 +
            (C275 * C1601 + C141320 * C1784) * C5869) *
               C5865) *
              C5323 +
          (((C275 * C5325 + C141320 * C5449) * C5869 +
            (C275 * C5329 + C141320 * C5453) * C5863 +
            (C275 * C5326 + C141320 * C5450) * C5871 +
            (C275 * C5330 + C141320 * C5454) * C141221) *
               C5865 +
           ((C275 * C13301 + C141320 * C13475) * C5869 +
            (C275 * C13305 + C141320 * C13479) * C5863 +
            (C275 * C13302 + C141320 * C13476) * C5871 +
            (C275 * C13306 + C141320 * C13480) * C141221) *
               C5866 +
           ((C275 * C13303 + C141320 * C13477) * C5869 +
            (C275 * C13307 + C141320 * C13481) * C5863 +
            (C275 * C13304 + C141320 * C13478) * C5871 +
            (C275 * C13308 + C141320 * C13482) * C141221) *
               C5867) *
              C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q));
    d2eeyx[44] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
            C91 * C116 + C107 * C111 + C92 * C117) *
               C188 +
           (C101 * C189 + C89 * C362 + C103 * C190 + C90 * C363 + C105 * C191 +
            C91 * C364 + C107 * C192 + C92 * C365) *
               C141309) *
              C141320 * C5322 -
          ((C107 * C1687 + C92 * C1875 + C105 * C1688 + C91 * C1876 +
            C103 * C1689 + C90 * C1877 + C101 * C1690 + C89 * C1878) *
               C141309 +
           (C107 * C1598 + C92 * C1603 + C105 * C1599 + C91 * C1604 +
            C103 * C1600 + C90 * C1605 + C101 * C1601 + C89 * C1606) *
               C188) *
              C141320 * C5323 +
          ((C101 * C5325 + C89 * C5329 + C103 * C5326 + C90 * C5330 +
            C105 * C5327 + C91 * C5331 + C107 * C5328 + C92 * C5332) *
               C188 +
           (C101 * C5391 + C89 * C5507 + C103 * C5392 + C90 * C5508 +
            C105 * C5393 + C91 * C5509 + C107 * C5394 + C92 * C5510) *
               C141309) *
              C141320 * C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C5869 * C108 + C5863 * C114 + C5871 * C109 + C141221 * C115) *
               C5964 +
           (C5869 * C189 + C5863 * C362 + C5871 * C190 + C141221 * C363) *
               C5865 +
           (C7175 + C7176) * C5965 + (C7177 + C7178) * C5866 + C10034 * C5966 +
           C10035 * C5867) *
              C141320 * C5322 -
          ((C10920 + C10921) * C5867 + (C10922 + C10923) * C5966 +
           (C10924 + C10925) * C5866 + (C10926 + C10927) * C5965 +
           (C5871 * C1689 + C141221 * C1877 + C5869 * C1690 + C5863 * C1878) *
               C5865 +
           (C5871 * C1600 + C141221 * C1605 + C5869 * C1601 + C5863 * C1606) *
               C5964) *
              C141320 * C5323 +
          ((C5869 * C5325 + C5863 * C5329 + C5871 * C5326 + C141221 * C5330) *
               C5964 +
           (C5869 * C5391 + C5863 * C5507 + C5871 * C5392 + C141221 * C5508) *
               C5865 +
           (C5869 * C13301 + C5863 * C13305 + C5871 * C13302 +
            C141221 * C13306) *
               C5965 +
           (C5869 * C13393 + C5863 * C13557 + C5871 * C13395 +
            C141221 * C13558) *
               C5866 +
           (C5869 * C13303 + C5863 * C13307 + C5871 * C13304 +
            C141221 * C13308) *
               C5966 +
           (C5869 * C13394 + C5863 * C13559 + C5871 * C13396 +
            C141221 * C13560) *
               C5867) *
              C141320 * C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q));
    d2eeyy[44] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C418 * C108 + C426 + C426 + C141309 * C419) * C89 +
                     C448 * C90 + C449 * C91 + C450 * C92) *
                        C141320 * C5322 -
                    (C1969 * C92 + C1970 * C91 + C1971 * C90 +
                     (C418 * C1601 + C1961 + C1961 + C141309 * C1949) * C89) *
                        C141320 * C5323 +
                    ((C418 * C5325 + C5566 + C5566 + C141309 * C5561) * C89 +
                     (C418 * C5326 + C5567 + C5567 + C141309 * C5562) * C90 +
                     (C418 * C5327 + C5568 + C5568 + C141309 * C5563) * C91 +
                     (C418 * C5328 + C5569 + C5569 + C141309 * C5564) * C92) *
                        C141320 * C5324) *
                   C141277 * C141243) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C6237 * C108 + C6241 + C6241 + C5865 * C419 +
                      C6238 * C823 + C6242 + C6242 + C5866 * C1171 +
                      C6239 * C2960 + C6243 + C6243 + C5867 * C3196) *
                         C5863 +
                     (C6277 + C6278 + C6279) * C141221) *
                        C141320 * C5322 -
                    ((C8369 + C8370 + C8371) * C141221 +
                     (C6239 * C7887 + C8357 + C8357 + C5867 * C8345 +
                      C6238 * C3490 + C8358 + C8358 + C5866 * C3790 +
                      C6237 * C1601 + C8359 + C8359 + C5865 * C1949) *
                         C5863) *
                        C141320 * C5323 +
                    ((C6237 * C5325 + C13640 + C13640 + C5865 * C5561 +
                      C6238 * C13301 + C13641 + C13641 + C5866 * C13635 +
                      C6239 * C13303 + C13642 + C13642 + C5867 * C13636) *
                         C5863 +
                     (C6237 * C5326 + C13643 + C13643 + C5865 * C5562 +
                      C6238 * C13302 + C13644 + C13644 + C5866 * C13637 +
                      C6239 * C13304 + C13645 + C13645 + C5867 * C13638) *
                         C141221) *
                        C141320 * C5324) *
                   C141277 * C141243) /
                      (p * q * std::sqrt(p + q));
    d2eeyz[44] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141320 * C276) * C188 +
            (C275 * C189 + C141320 * C501) * C141309) *
               C89 +
           (C508 + C524) * C90 + C528 * C91 + C529 * C92) *
              C5322 -
          ((C2055 + C2045) * C92 + (C2056 + C2048) * C91 +
           (C2057 + C2051) * C90 +
           ((C275 * C1690 + C141320 * C2040) * C141309 +
            (C275 * C1601 + C141320 * C1784) * C188) *
               C89) *
              C5323 +
          (((C275 * C5325 + C141320 * C5449) * C188 +
            (C275 * C5391 + C141320 * C5619) * C141309) *
               C89 +
           ((C275 * C5326 + C141320 * C5450) * C188 +
            (C275 * C5392 + C141320 * C5620) * C141309) *
               C90 +
           ((C275 * C5327 + C141320 * C5451) * C188 +
            (C275 * C5393 + C141320 * C5621) * C141309) *
               C91 +
           ((C275 * C5328 + C141320 * C5452) * C188 +
            (C275 * C5394 + C141320 * C5622) * C141309) *
               C92) *
              C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141320 * C276) * C5964 +
            (C275 * C189 + C141320 * C501) * C5865 + C7032 * C5965 +
            C7428 * C5866 + C7034 * C5966 + C7429 * C5867) *
               C5863 +
           (C6357 + C6358 + C6359 + C6360 + C6361 + C6373) * C141221) *
              C5322 -
          ((C8483 + C8475 + C8484 + C8478 + C8479 + C8480) * C141221 +
           (C11138 * C5867 + C10797 * C5966 + C11139 * C5866 + C10799 * C5965 +
            (C275 * C1690 + C141320 * C2040) * C5865 +
            (C275 * C1601 + C141320 * C1784) * C5964) *
               C5863) *
              C5323 +
          (((C275 * C5325 + C141320 * C5449) * C5964 +
            (C275 * C5391 + C141320 * C5619) * C5865 +
            (C275 * C13301 + C141320 * C13475) * C5965 +
            (C275 * C13393 + C141320 * C13719) * C5866 +
            (C275 * C13303 + C141320 * C13477) * C5966 +
            (C275 * C13394 + C141320 * C13720) * C5867) *
               C5863 +
           ((C275 * C5326 + C141320 * C5450) * C5964 +
            (C275 * C5392 + C141320 * C5620) * C5865 +
            (C275 * C13302 + C141320 * C13476) * C5965 +
            (C275 * C13395 + C141320 * C13721) * C5866 +
            (C275 * C13304 + C141320 * C13478) * C5966 +
            (C275 * C13396 + C141320 * C13722) * C5867) *
               C141221) *
              C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q));
    d2eezx[44] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
            C91 * C116 + C107 * C111 + C92 * C117) *
               C275 +
           (C101 * C276 + C89 * C579 + C103 * C277 + C90 * C580 + C105 * C278 +
            C91 * C581 + C107 * C279 + C92 * C582) *
               C141320) *
              C141309 * C5322 -
          ((C107 * C1781 + C92 * C2123 + C105 * C1782 + C91 * C2124 +
            C103 * C1783 + C90 * C2125 + C101 * C1784 + C89 * C2126) *
               C141320 +
           (C107 * C1598 + C92 * C1603 + C105 * C1599 + C91 * C1604 +
            C103 * C1600 + C90 * C1605 + C101 * C1601 + C89 * C1606) *
               C275) *
              C141309 * C5323 +
          ((C101 * C5325 + C89 * C5329 + C103 * C5326 + C90 * C5330 +
            C105 * C5327 + C91 * C5331 + C107 * C5328 + C92 * C5332) *
               C275 +
           (C101 * C5449 + C89 * C5673 + C103 * C5450 + C90 * C5674 +
            C105 * C5451 + C91 * C5675 + C107 * C5452 + C92 * C5676) *
               C141320) *
              C141309 * C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C141221 * C115) *
                C275 +
            (C5869 * C276 + C5863 * C579 + C5871 * C277 + C141221 * C580) *
                C141320) *
               C5865 +
           ((C7175 + C7176) * C275 + (C7549 + C7550) * C141320) * C5866 +
           C10294 * C5867) *
              C5322 -
          (((C11248 + C11249) * C141320 + (C10922 + C10923) * C275) * C5867 +
           ((C11250 + C11251) * C141320 + (C10926 + C10927) * C275) * C5866 +
           ((C5871 * C1783 + C141221 * C2125 + C5869 * C1784 + C5863 * C2126) *
                C141320 +
            (C5871 * C1600 + C141221 * C1605 + C5869 * C1601 + C5863 * C1606) *
                C275) *
               C5865) *
              C5323 +
          (((C5869 * C5325 + C5863 * C5329 + C5871 * C5326 + C141221 * C5330) *
                C275 +
            (C5869 * C5449 + C5863 * C5673 + C5871 * C5450 + C141221 * C5674) *
                C141320) *
               C5865 +
           ((C5869 * C13301 + C5863 * C13305 + C5871 * C13302 +
             C141221 * C13306) *
                C275 +
            (C5869 * C13475 + C5863 * C13797 + C5871 * C13476 +
             C141221 * C13798) *
                C141320) *
               C5866 +
           ((C5869 * C13303 + C5863 * C13307 + C5871 * C13304 +
             C141221 * C13308) *
                C275 +
            (C5869 * C13477 + C5863 * C13799 + C5871 * C13478 +
             C141221 * C13800) *
                C141320) *
               C5867) *
              C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q));
    d2eezy[44] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C188 * C108 + C141309 * C189) * C275 +
                      (C188 * C276 + C141309 * C635) * C141320) *
                         C89 +
                     (C642 + C658) * C90 + C662 * C91 + C663 * C92) *
                        C5322 -
                    ((C2212 + C2202) * C92 + (C2213 + C2205) * C91 +
                     (C2214 + C2208) * C90 +
                     ((C188 * C1784 + C141309 * C2197) * C141320 +
                      (C188 * C1601 + C141309 * C1690) * C275) *
                         C89) *
                        C5323 +
                    (((C188 * C5325 + C141309 * C5391) * C275 +
                      (C188 * C5449 + C141309 * C5727) * C141320) *
                         C89 +
                     ((C188 * C5326 + C141309 * C5392) * C275 +
                      (C188 * C5450 + C141309 * C5728) * C141320) *
                         C90 +
                     ((C188 * C5327 + C141309 * C5393) * C275 +
                      (C188 * C5451 + C141309 * C5729) * C141320) *
                         C91 +
                     ((C188 * C5328 + C141309 * C5394) * C275 +
                      (C188 * C5452 + C141309 * C5730) * C141320) *
                         C92) *
                        C5324) *
                   C141277 * C141243) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C5964 * C108 + C5865 * C189 + C5965 * C823 +
                       C5866 * C912 + C5966 * C2960 + C5867 * C3026) *
                          C275 +
                      (C5964 * C276 + C5865 * C635 + C5965 * C1006 +
                       C5866 * C1419 + C5966 * C3084 + C5867 * C3362) *
                          C141320) *
                         C5863 +
                     ((C5992 + C5993 + C5994) * C275 +
                      (C6535 + C6536 + C6537) * C141320) *
                         C141221) *
                        C5322 -
                    (((C8693 + C8694 + C8695) * C141320 +
                      (C8027 + C8028 + C8029) * C275) *
                         C141221 +
                     ((C5966 * C8128 + C5867 * C8684 + C5965 * C3646 +
                       C5866 * C4004 + C5964 * C1784 + C5865 * C2197) *
                          C141320 +
                      (C5966 * C7887 + C5867 * C8006 + C5965 * C3490 +
                       C5866 * C3572 + C5964 * C1601 + C5865 * C1690) *
                          C275) *
                         C5863) *
                        C5323 +
                    (((C5964 * C5325 + C5865 * C5391 + C5965 * C13301 +
                       C5866 * C13393 + C5966 * C13303 + C5867 * C13394) *
                          C275 +
                      (C5964 * C5449 + C5865 * C5727 + C5965 * C13475 +
                       C5866 * C13875 + C5966 * C13477 + C5867 * C13876) *
                          C141320) *
                         C5863 +
                     ((C5964 * C5326 + C5865 * C5392 + C5965 * C13302 +
                       C5866 * C13395 + C5966 * C13304 + C5867 * C13396) *
                          C275 +
                      (C5964 * C5450 + C5865 * C5728 + C5965 * C13476 +
                       C5866 * C13877 + C5966 * C13478 + C5867 * C13878) *
                          C141320) *
                         C141221) *
                        C5324) *
                   C141277 * C141243) /
                      (p * q * std::sqrt(p + q));
    d2eezz[44] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C713 * C108 + C721 + C721 + C141320 * C714) * C141309 * C89 +
           C747 * C90 + C748 * C91 + C749 * C92) *
              C5322 -
          (C2306 * C92 + C2307 * C91 + C2308 * C90 +
           (C713 * C1601 + C2295 + C2295 + C141320 * C2283) * C141309 * C89) *
              C5323 +
          ((C713 * C5325 + C5786 + C5786 + C141320 * C5781) * C141309 * C89 +
           (C713 * C5326 + C5787 + C5787 + C141320 * C5782) * C141309 * C90 +
           (C713 * C5327 + C5788 + C5788 + C141320 * C5783) * C141309 * C91 +
           (C713 * C5328 + C5789 + C5789 + C141320 * C5784) * C141309 * C92) *
              C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C141320 * C714) * C5865 +
            C7785 * C5866 + C7786 * C5867) *
               C5863 +
           (C6615 + C6616 + C6629) * C141221) *
              C5322 -
          ((C8811 + C8812 + C8802) * C141221 +
           (C11462 * C5867 + C11463 * C5866 +
            (C713 * C1601 + C2295 + C2295 + C141320 * C2283) * C5865) *
               C5863) *
              C5323 +
          (((C713 * C5325 + C5786 + C5786 + C141320 * C5781) * C5865 +
            (C713 * C13301 + C13958 + C13958 + C141320 * C13953) * C5866 +
            (C713 * C13303 + C13959 + C13959 + C141320 * C13954) * C5867) *
               C5863 +
           ((C713 * C5326 + C5787 + C5787 + C141320 * C5782) * C5865 +
            (C713 * C13302 + C13960 + C13960 + C141320 * C13955) * C5866 +
            (C713 * C13304 + C13961 + C13961 + C141320 * C13956) * C5867) *
               C141221) *
              C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q));
    d2eexx[45] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C68675 * C108 + C68680 + C68680 + C141452 * C120 +
                      C68677 * C109 + C68681 + C68681 + C141221 * C121) *
                         C141320 * C141496 +
                     (C68675 * C823 + C68682 + C68682 + C141452 * C833 +
                      C68677 * C822 + C68683 + C68683 + C141221 * C832) *
                         C141320 * C141497 +
                     (C68675 * C2960 + C68684 + C68684 + C141452 * C2968 +
                      C68677 * C2961 + C68685 + C68685 + C141221 * C2969) *
                         C141320 * C68674) *
                        C141294 * C141277 * C97 -
                    ((C68677 * C2962 + C68686 + C68686 + C141221 * C2970 +
                      C68675 * C2961 + C68687 + C68687 + C141452 * C2969) *
                         C141320 * C68674 +
                     (C68677 * C821 + C68688 + C68688 + C141221 * C831 +
                      C68675 * C822 + C68689 + C68689 + C141452 * C832) *
                         C141320 * C141497 +
                     (C68677 * C110 + C68690 + C68690 + C141221 * C122 +
                      C68675 * C109 + C68691 + C68691 + C141452 * C121) *
                         C141320 * C141496) *
                        C141294 * C141277 * C98 +
                    ((C68675 * C110 + C68692 + C68692 + C141452 * C122 +
                      C68677 * C111 + C68693 + C68693 + C141221 * C123) *
                         C141320 * C141496 +
                     (C68675 * C821 + C68694 + C68694 + C141452 * C831 +
                      C68677 * C820 + C68695 + C68695 + C141221 * C830) *
                         C141320 * C141497 +
                     (C68675 * C2962 + C68696 + C68696 + C141452 * C2970 +
                      C68677 * C2963 + C68697 + C68697 + C141221 * C2971) *
                         C141320 * C68674) *
                        C141294 * C141277 * C99)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[45] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C68771 * C108 + C141496 * C189 + C68772 * C823 +
                      C141497 * C912 + C68773 * C2960 + C68674 * C3026) *
                         C139366 +
                     (C68771 * C114 + C141496 * C195 + C68772 * C828 +
                      C141497 * C917 + C68773 * C2964 + C68674 * C3030) *
                         C141452 +
                     (C68799 + C68800 + C68801) * C139356 +
                     (C68802 + C68803 + C68804) * C141221) *
                        C141320 * C141294 * C141277 * C97 -
                    ((C68805 + C68806 + C68807) * C141221 +
                     (C68808 + C68809 + C68810) * C139356 +
                     (C68804 + C68803 + C68802) * C141452 +
                     (C68801 + C68800 + C68799) * C139366) *
                        C141320 * C141294 * C141277 * C98 +
                    ((C68810 + C68809 + C68808) * C139366 +
                     (C68807 + C68806 + C68805) * C141452 +
                     (C68771 * C111 + C141496 * C192 + C68772 * C820 +
                      C141497 * C909 + C68773 * C2963 + C68674 * C3029) *
                         C139356 +
                     (C68771 * C117 + C141496 * C198 + C68772 * C825 +
                      C141497 * C914 + C68773 * C2967 + C68674 * C3033) *
                         C141221) *
                        C141320 * C141294 * C141277 * C99)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[45] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141320 * C276) * C139366 +
            (C275 * C114 + C141320 * C282) * C141452 + C305 * C139356 +
            C306 * C141221) *
               C141496 +
           (C7032 * C139366 + C7033 * C141452 + C1031 * C139356 +
            C1030 * C141221) *
               C141497 +
           (C7034 * C139366 + C7035 * C141452 + C6086 * C139356 +
            C6087 * C141221) *
               C68674) *
              C141294 * C141277 * C97 -
          ((C6088 * C141221 + C6089 * C139356 + C6087 * C141452 +
            C6086 * C139366) *
               C68674 +
           (C1028 * C141221 + C1029 * C139356 + C1030 * C141452 +
            C1031 * C139366) *
               C141497 +
           (C308 * C141221 + C307 * C139356 + C306 * C141452 + C305 * C139366) *
               C141496) *
              C141294 * C141277 * C98 +
          ((C307 * C139366 + C308 * C141452 + C309 * C139356 + C310 * C141221) *
               C141496 +
           (C1029 * C139366 + C1028 * C141452 + C1027 * C139356 +
            C1026 * C141221) *
               C141497 +
           (C6089 * C139366 + C6088 * C141452 +
            (C275 * C2963 + C141320 * C3087) * C139356 +
            (C275 * C2967 + C141320 * C3091) * C141221) *
               C68674) *
              C141294 * C141277 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[45] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C139366 * C108 + C141452 * C114 + C139356 * C109 + C141221 * C115) *
               C68771 +
           (C139366 * C189 + C141452 * C362 + C139356 * C190 + C141221 * C363) *
               C141496 +
           (C139366 * C823 + C141452 * C828 + C139356 * C822 + C141221 * C827) *
               C68772 +
           (C139366 * C912 + C141452 * C1100 + C139356 * C911 +
            C141221 * C1099) *
               C141497 +
           (C139366 * C2960 + C141452 * C2964 + C139356 * C2961 +
            C141221 * C2965) *
               C68773 +
           (C139366 * C3026 + C141452 * C3142 + C139356 * C3027 +
            C141221 * C3143) *
               C68674) *
              C141320 * C141294 * C141277 * C97 -
          ((C139356 * C3028 + C141221 * C3144 + C139366 * C3027 +
            C141452 * C3143) *
               C68674 +
           (C139356 * C2962 + C141221 * C2966 + C139366 * C2961 +
            C141452 * C2965) *
               C68773 +
           (C139356 * C910 + C141221 * C1098 + C139366 * C911 +
            C141452 * C1099) *
               C141497 +
           (C139356 * C821 + C141221 * C826 + C139366 * C822 + C141452 * C827) *
               C68772 +
           (C139356 * C191 + C141221 * C364 + C139366 * C190 + C141452 * C363) *
               C141496 +
           (C139356 * C110 + C141221 * C116 + C139366 * C109 + C141452 * C115) *
               C68771) *
              C141320 * C141294 * C141277 * C98 +
          ((C139366 * C110 + C141452 * C116 + C139356 * C111 + C141221 * C117) *
               C68771 +
           (C139366 * C191 + C141452 * C364 + C139356 * C192 + C141221 * C365) *
               C141496 +
           (C139366 * C821 + C141452 * C826 + C139356 * C820 + C141221 * C825) *
               C68772 +
           (C139366 * C910 + C141452 * C1098 + C139356 * C909 +
            C141221 * C1097) *
               C141497 +
           (C139366 * C2962 + C141452 * C2966 + C139356 * C2963 +
            C141221 * C2967) *
               C68773 +
           (C139366 * C3028 + C141452 * C3144 + C139356 * C3029 +
            C141221 * C3145) *
               C68674) *
              C141320 * C141294 * C141277 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[45] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C69032 * C108 + C69036 + C69036 + C141496 * C419 +
                      C69033 * C823 + C69037 + C69037 + C141497 * C1171 +
                      C69034 * C2960 + C69038 + C69038 + C68674 * C3196) *
                         C141452 +
                     (C69072 + C69073 + C69074) * C141221) *
                        C141320 * C141294 * C141277 * C97 -
                    ((C69075 + C69076 + C69077) * C141221 +
                     (C69074 + C69073 + C69072) * C141452) *
                        C141320 * C141294 * C141277 * C98 +
                    ((C69077 + C69076 + C69075) * C141452 +
                     (C69032 * C111 + C69057 + C69057 + C141496 * C422 +
                      C69033 * C820 + C69058 + C69058 + C141497 * C1168 +
                      C69034 * C2963 + C69059 + C69059 + C68674 * C3199) *
                         C141221) *
                        C141320 * C141294 * C141277 * C99)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[45] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141320 * C276) * C68771 +
            (C275 * C189 + C141320 * C501) * C141496 + C7032 * C68772 +
            C7428 * C141497 + C7034 * C68773 + C7429 * C68674) *
               C141452 +
           (C69152 + C69153 + C69154 + C69155 + C69156 + C69157) * C141221) *
              C141294 * C141277 * C97 -
          ((C69158 + C69159 + C69160 + C69161 + C69162 + C69163) * C141221 +
           (C69157 + C69156 + C69155 + C69154 + C69153 + C69152) * C141452) *
              C141294 * C141277 * C98 +
          ((C69163 + C69162 + C69161 + C69160 + C69159 + C69158) * C141452 +
           (C309 * C68771 + C522 * C141496 + C1027 * C68772 + C1274 * C141497 +
            (C275 * C2963 + C141320 * C3087) * C68773 +
            (C275 * C3029 + C141320 * C3257) * C68674) *
               C141221) *
              C141294 * C141277 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eezx[45] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C139366 * C108 + C141452 * C114 + C139356 * C109 +
                       C141221 * C115) *
                          C275 +
                      (C139366 * C276 + C141452 * C579 + C139356 * C277 +
                       C141221 * C580) *
                          C141320) *
                         C141496 +
                     ((C139366 * C823 + C141452 * C828 + C139356 * C822 +
                       C141221 * C827) *
                          C275 +
                      (C139366 * C1006 + C141452 * C1348 + C139356 * C1005 +
                       C141221 * C1347) *
                          C141320) *
                         C141497 +
                     ((C139366 * C2960 + C141452 * C2964 + C139356 * C2961 +
                       C141221 * C2965) *
                          C275 +
                      (C139366 * C3084 + C141452 * C3308 + C139356 * C3085 +
                       C141221 * C3309) *
                          C141320) *
                         C68674) *
                        C141294 * C141277 * C97 -
                    (((C139356 * C3086 + C141221 * C3310 + C139366 * C3085 +
                       C141452 * C3309) *
                          C141320 +
                      (C139356 * C2962 + C141221 * C2966 + C139366 * C2961 +
                       C141452 * C2965) *
                          C275) *
                         C68674 +
                     ((C139356 * C1004 + C141221 * C1346 + C139366 * C1005 +
                       C141452 * C1347) *
                          C141320 +
                      (C139356 * C821 + C141221 * C826 + C139366 * C822 +
                       C141452 * C827) *
                          C275) *
                         C141497 +
                     ((C139356 * C278 + C141221 * C581 + C139366 * C277 +
                       C141452 * C580) *
                          C141320 +
                      (C139356 * C110 + C141221 * C116 + C139366 * C109 +
                       C141452 * C115) *
                          C275) *
                         C141496) *
                        C141294 * C141277 * C98 +
                    (((C139366 * C110 + C141452 * C116 + C139356 * C111 +
                       C141221 * C117) *
                          C275 +
                      (C139366 * C278 + C141452 * C581 + C139356 * C279 +
                       C141221 * C582) *
                          C141320) *
                         C141496 +
                     ((C139366 * C821 + C141452 * C826 + C139356 * C820 +
                       C141221 * C825) *
                          C275 +
                      (C139366 * C1004 + C141452 * C1346 + C139356 * C1003 +
                       C141221 * C1345) *
                          C141320) *
                         C141497 +
                     ((C139366 * C2962 + C141452 * C2966 + C139356 * C2963 +
                       C141221 * C2967) *
                          C275 +
                      (C139366 * C3086 + C141452 * C3310 + C139356 * C3087 +
                       C141221 * C3311) *
                          C141320) *
                         C68674) *
                        C141294 * C141277 * C99)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[45] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C68771 * C108 + C141496 * C189 + C68772 * C823 +
                       C141497 * C912 + C68773 * C2960 + C68674 * C3026) *
                          C275 +
                      (C68771 * C276 + C141496 * C635 + C68772 * C1006 +
                       C141497 * C1419 + C68773 * C3084 + C68674 * C3362) *
                          C141320) *
                         C141452 +
                     ((C68799 + C68800 + C68801) * C275 +
                      (C69324 + C69325 + C69326) * C141320) *
                         C141221) *
                        C141294 * C141277 * C97 -
                    (((C69327 + C69328 + C69329) * C141320 +
                      (C68808 + C68809 + C68810) * C275) *
                         C141221 +
                     ((C69326 + C69325 + C69324) * C141320 +
                      (C68801 + C68800 + C68799) * C275) *
                         C141452) *
                        C141294 * C141277 * C98 +
                    (((C68810 + C68809 + C68808) * C275 +
                      (C69329 + C69328 + C69327) * C141320) *
                         C141452 +
                     ((C68771 * C111 + C141496 * C192 + C68772 * C820 +
                       C141497 * C909 + C68773 * C2963 + C68674 * C3029) *
                          C275 +
                      (C68771 * C279 + C141496 * C638 + C68772 * C1003 +
                       C141497 * C1416 + C68773 * C3087 + C68674 * C3365) *
                          C141320) *
                         C141221) *
                        C141294 * C141277 * C99)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[45] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C141320 * C714) * C141496 +
            C7785 * C141497 + C7786 * C68674) *
               C141452 +
           (C69404 + C69405 + C69406) * C141221) *
              C141294 * C141277 * C97 -
          ((C69407 + C69408 + C69409) * C141221 +
           (C69406 + C69405 + C69404) * C141452) *
              C141294 * C141277 * C98 +
          ((C69409 + C69408 + C69407) * C141452 +
           (C745 * C141496 + C1525 * C141497 +
            (C713 * C2963 + C3424 + C3424 + C141320 * C3419) * C68674) *
               C141221) *
              C141294 * C141277 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eexx[46] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C68675 * C108 + C68680 + C68680 + C141452 * C120 +
                       C68677 * C109 + C68681 + C68681 + C141221 * C121) *
                          C141320 * C141496 +
                      (C69544 + C69545) * C141320 * C141497 +
                      (C69546 + C69547) * C141320 * C68674) *
                         C141294 * C816 -
                     ((C68677 * C6728 + C69516 + C69516 + C141221 * C6734 +
                       C68675 * C6729 + C69517 + C69517 + C141452 * C6735) *
                          C141320 * C68674 +
                      (C69547 + C69546) * C141320 * C141497 +
                      (C69545 + C69544) * C141320 * C141496) *
                         C141294 * C141485) *
                        C818 +
                    (((C69548 + C69549) * C141320 * C141496 +
                      (C69550 + C69551) * C141320 * C141497 +
                      (C68675 * C6728 + C69526 + C69526 + C141452 * C6734 +
                       C68677 * C6730 + C69527 + C69527 + C141221 * C6736) *
                          C141320 * C68674) *
                         C141294 * C141485 -
                     ((C69551 + C69550) * C141320 * C68674 +
                      (C69549 + C69548) * C141320 * C141497 +
                      (C68677 * C110 + C68690 + C68690 + C141221 * C122 +
                       C68675 * C109 + C68691 + C68691 + C141452 * C121) *
                          C141320 * C141496) *
                         C141294 * C816) *
                        C141483)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[46] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C68771 * C108 + C141496 * C189 + C68772 * C823 +
                       C141497 * C912 + C68773 * C2960 + C68674 * C3026) *
                          C139366 +
                      (C68771 * C114 + C141496 * C195 + C68772 * C828 +
                       C141497 * C917 + C68773 * C2964 + C68674 * C3030) *
                          C141452 +
                      (C68799 + C68800 + C68801) * C139356 +
                      (C68802 + C68803 + C68804) * C141221) *
                         C141320 * C141294 * C816 -
                     ((C69662 + C69663 + C69664) * C141221 +
                      (C69665 + C69666 + C69667) * C139356 +
                      (C68773 * C6732 + C68674 * C6883 + C68772 * C2964 +
                       C141497 * C3030 + C68771 * C828 + C141496 * C917) *
                          C141452 +
                      (C68773 * C6729 + C68674 * C6880 + C68772 * C2960 +
                       C141497 * C3026 + C68771 * C823 + C141496 * C912) *
                          C139366) *
                         C141320 * C141294 * C141485) *
                        C818 +
                    (((C69667 + C69666 + C69665) * C139366 +
                      (C69664 + C69663 + C69662) * C141452 +
                      (C68771 * C821 + C141496 * C910 + C68772 * C2962 +
                       C141497 * C3028 + C68773 * C6730 + C68674 * C6881) *
                          C139356 +
                      (C68771 * C826 + C141496 * C915 + C68772 * C2966 +
                       C141497 * C3032 + C68773 * C6733 + C68674 * C6884) *
                          C141221) *
                         C141320 * C141294 * C141485 -
                     ((C68805 + C68806 + C68807) * C141221 +
                      (C68808 + C68809 + C68810) * C139356 +
                      (C68804 + C68803 + C68802) * C141452 +
                      (C68801 + C68800 + C68799) * C139366) *
                         C141320 * C141294 * C816) *
                        C141483)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[46] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C275 * C108 + C141320 * C276) * C139366 +
                       (C275 * C114 + C141320 * C282) * C141452 +
                       C305 * C139356 + C306 * C141221) *
                          C141496 +
                      (C69766 + C69767 + C69768 + C69769) * C141497 +
                      (C69770 + C69771 + C69772 + C69773) * C68674) *
                         C141294 * C816 -
                     ((C7036 * C141221 + C7037 * C139356 + C9953 * C141452 +
                       C9954 * C139366) *
                          C68674 +
                      (C69773 + C69772 + C69771 + C69770) * C141497 +
                      (C69769 + C69768 + C69767 + C69766) * C141496) *
                         C141294 * C141485) *
                        C818 +
                    (((C69774 + C69775 + C69776 + C69777) * C141496 +
                      (C69778 + C69779 + C69780 + C69781) * C141497 +
                      (C7037 * C139366 + C7036 * C141452 +
                       (C275 * C6730 + C141320 * C7003) * C139356 +
                       (C275 * C6733 + C141320 * C7006) * C141221) *
                          C68674) *
                         C141294 * C141485 -
                     ((C69781 + C69780 + C69779 + C69778) * C68674 +
                      (C69777 + C69776 + C69775 + C69774) * C141497 +
                      (C308 * C141221 + C307 * C139356 + C306 * C141452 +
                       C305 * C139366) *
                          C141496) *
                         C141294 * C816) *
                        C141483)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[46] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139366 * C108 + C141452 * C114 + C139356 * C109 +
             C141221 * C115) *
                C68771 +
            (C139366 * C189 + C141452 * C362 + C139356 * C190 +
             C141221 * C363) *
                C141496 +
            (C69912 + C69913) * C68772 + (C69914 + C69915) * C141497 +
            (C69916 + C69917) * C68773 + (C69918 + C69919) * C68674) *
               C141320 * C141294 * C816 -
           ((C139356 * C6879 + C141221 * C7139 + C139366 * C6880 +
             C141452 * C7140) *
                C68674 +
            (C139356 * C6728 + C141221 * C6731 + C139366 * C6729 +
             C141452 * C6732) *
                C68773 +
            (C69919 + C69918) * C141497 + (C69917 + C69916) * C68772 +
            (C69915 + C69914) * C141496 + (C69913 + C69912) * C68771) *
               C141320 * C141294 * C141485) *
              C818 +
          (((C69920 + C69921) * C68771 + (C69922 + C69923) * C141496 +
            (C69924 + C69925) * C68772 + (C69926 + C69927) * C141497 +
            (C139366 * C6728 + C141452 * C6731 + C139356 * C6730 +
             C141221 * C6733) *
                C68773 +
            (C139366 * C6879 + C141452 * C7139 + C139356 * C6881 +
             C141221 * C7141) *
                C68674) *
               C141320 * C141294 * C141485 -
           ((C69927 + C69926) * C68674 + (C69925 + C69924) * C68773 +
            (C69923 + C69922) * C141497 + (C69921 + C69920) * C68772 +
            (C139356 * C191 + C141221 * C364 + C139366 * C190 +
             C141452 * C363) *
                C141496 +
            (C139356 * C110 + C141221 * C116 + C139366 * C109 +
             C141452 * C115) *
                C68771) *
               C141320 * C141294 * C816) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[46] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C69032 * C108 + C69036 + C69036 + C141496 * C419 +
                       C69033 * C823 + C69037 + C69037 + C141497 * C1171 +
                       C69034 * C2960 + C69038 + C69038 + C68674 * C3196) *
                          C141452 +
                      (C69072 + C69073 + C69074) * C141221) *
                         C141320 * C141294 * C816 -
                     ((C70047 + C70048 + C70049) * C141221 +
                      (C69034 * C6729 + C70035 + C70035 + C68674 * C7289 +
                       C69033 * C2960 + C70036 + C70036 + C141497 * C3196 +
                       C69032 * C823 + C70037 + C70037 + C141496 * C1171) *
                          C141452) *
                         C141320 * C141294 * C141485) *
                        C818 +
                    (((C70049 + C70048 + C70047) * C141452 +
                      (C69032 * C821 + C70038 + C70038 + C141496 * C1169 +
                       C69033 * C2962 + C70039 + C70039 + C141497 * C3198 +
                       C69034 * C6730 + C70040 + C70040 + C68674 * C7290) *
                          C141221) *
                         C141320 * C141294 * C141485 -
                     ((C69075 + C69076 + C69077) * C141221 +
                      (C69074 + C69073 + C69072) * C141452) *
                         C141320 * C141294 * C816) *
                        C141483)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[46] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141320 * C276) * C68771 +
             (C275 * C189 + C141320 * C501) * C141496 + C7032 * C68772 +
             C7428 * C141497 + C7034 * C68773 + C7429 * C68674) *
                C141452 +
            (C69152 + C69153 + C69154 + C69155 + C69156 + C69157) * C141221) *
               C141294 * C816 -
           ((C70148 + C70149 + C70150 + C70151 + C70152 + C70153) * C141221 +
            (C10208 * C68674 + C9954 * C68773 + C7429 * C141497 +
             C7034 * C68772 + C7428 * C141496 + C7032 * C68771) *
                C141452) *
               C141294 * C141485) *
              C818 +
          (((C70153 + C70152 + C70151 + C70150 + C70149 + C70148) * C141452 +
            (C1029 * C68771 + C1275 * C141496 + C6089 * C68772 +
             C6372 * C141497 + (C275 * C6730 + C141320 * C7003) * C68773 +
             (C275 * C6881 + C141320 * C7415) * C68674) *
                C141221) *
               C141294 * C141485 -
           ((C69158 + C69159 + C69160 + C69161 + C69162 + C69163) * C141221 +
            (C69157 + C69156 + C69155 + C69154 + C69153 + C69152) * C141452) *
               C141294 * C816) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eezx[46] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139366 * C108 + C141452 * C114 + C139356 * C109 +
              C141221 * C115) *
                 C275 +
             (C139366 * C276 + C141452 * C579 + C139356 * C277 +
              C141221 * C580) *
                 C141320) *
                C141496 +
            ((C69912 + C69913) * C275 + (C70268 + C70269) * C141320) * C141497 +
            ((C69916 + C69917) * C275 + (C70270 + C70271) * C141320) * C68674) *
               C141294 * C816 -
           (((C139356 * C7001 + C141221 * C7529 + C139366 * C7002 +
              C141452 * C7530) *
                 C141320 +
             (C139356 * C6728 + C141221 * C6731 + C139366 * C6729 +
              C141452 * C6732) *
                 C275) *
                C68674 +
            ((C70271 + C70270) * C141320 + (C69917 + C69916) * C275) * C141497 +
            ((C70269 + C70268) * C141320 + (C69913 + C69912) * C275) *
                C141496) *
               C141294 * C141485) *
              C818 +
          ((((C69920 + C69921) * C275 + (C70272 + C70273) * C141320) * C141496 +
            ((C69924 + C69925) * C275 + (C70274 + C70275) * C141320) * C141497 +
            ((C139366 * C6728 + C141452 * C6731 + C139356 * C6730 +
              C141221 * C6733) *
                 C275 +
             (C139366 * C7001 + C141452 * C7529 + C139356 * C7003 +
              C141221 * C7531) *
                 C141320) *
                C68674) *
               C141294 * C141485 -
           (((C70275 + C70274) * C141320 + (C69925 + C69924) * C275) * C68674 +
            ((C70273 + C70272) * C141320 + (C69921 + C69920) * C275) * C141497 +
            ((C139356 * C278 + C141221 * C581 + C139366 * C277 +
              C141452 * C580) *
                 C141320 +
             (C139356 * C110 + C141221 * C116 + C139366 * C109 +
              C141452 * C115) *
                 C275) *
                C141496) *
               C141294 * C816) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eezy[46] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C68771 * C108 + C141496 * C189 + C68772 * C823 +
                        C141497 * C912 + C68773 * C2960 + C68674 * C3026) *
                           C275 +
                       (C68771 * C276 + C141496 * C635 + C68772 * C1006 +
                        C141497 * C1419 + C68773 * C3084 + C68674 * C3362) *
                           C141320) *
                          C141452 +
                      ((C68799 + C68800 + C68801) * C275 +
                       (C69324 + C69325 + C69326) * C141320) *
                          C141221) *
                         C141294 * C816 -
                     (((C70380 + C70381 + C70382) * C141320 +
                       (C69665 + C69666 + C69667) * C275) *
                          C141221 +
                      ((C68773 * C7002 + C68674 * C7655 + C68772 * C3084 +
                        C141497 * C3362 + C68771 * C1006 + C141496 * C1419) *
                           C141320 +
                       (C68773 * C6729 + C68674 * C6880 + C68772 * C2960 +
                        C141497 * C3026 + C68771 * C823 + C141496 * C912) *
                           C275) *
                          C141452) *
                         C141294 * C141485) *
                        C818 +
                    ((((C69667 + C69666 + C69665) * C275 +
                       (C70382 + C70381 + C70380) * C141320) *
                          C141452 +
                      ((C68771 * C821 + C141496 * C910 + C68772 * C2962 +
                        C141497 * C3028 + C68773 * C6730 + C68674 * C6881) *
                           C275 +
                       (C68771 * C1004 + C141496 * C1417 + C68772 * C3086 +
                        C141497 * C3364 + C68773 * C7003 + C68674 * C7656) *
                           C141320) *
                          C141221) *
                         C141294 * C141485 -
                     (((C69327 + C69328 + C69329) * C141320 +
                       (C68808 + C68809 + C68810) * C275) *
                          C141221 +
                      ((C69326 + C69325 + C69324) * C141320 +
                       (C68801 + C68800 + C68799) * C275) *
                          C141452) *
                         C141294 * C816) *
                        C141483)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[46] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C713 * C108 + C721 + C721 + C141320 * C714) * C141496 +
             C7785 * C141497 + C7786 * C68674) *
                C141452 +
            (C69404 + C69405 + C69406) * C141221) *
               C141294 * C816 -
           ((C70481 + C70482 + C70483) * C141221 +
            (C10453 * C68674 + C7786 * C141497 + C7785 * C141496) * C141452) *
               C141294 * C141485) *
              C818 +
          (((C70483 + C70482 + C70481) * C141452 +
            (C1526 * C141496 + C6628 * C141497 +
             (C713 * C6730 + C7778 + C7778 + C141320 * C7766) * C68674) *
                C141221) *
               C141294 * C141485 -
           ((C69407 + C69408 + C69409) * C141221 +
            (C69406 + C69405 + C69404) * C141452) *
               C141294 * C816) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eexx[47] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C68675 * C108 + C68680 + C68680 + C141452 * C120 +
                       C68677 * C109 + C68681 + C68681 + C141221 * C121) *
                          C141320 * C141496 +
                      (C69544 + C69545) * C141320 * C141497 +
                      (C69546 + C69547) * C141320 * C68674) *
                         C1596 -
                     ((C68677 * C7886 + C70582 + C70582 + C141221 * C7892 +
                       C68675 * C7887 + C70583 + C70583 + C141452 * C7893) *
                          C141320 * C68674 +
                      (C68677 * C3491 + C70584 + C70584 + C141221 * C3499 +
                       C68675 * C3490 + C70585 + C70585 + C141452 * C3498) *
                          C141320 * C141497 +
                      (C68677 * C1600 + C70586 + C70586 + C141221 * C1610 +
                       C68675 * C1601 + C70587 + C70587 + C141452 * C1611) *
                          C141320 * C141496) *
                         C141487) *
                        C141277 * C818 +
                    (((C68675 * C1600 + C70588 + C70588 + C141452 * C1610 +
                       C68677 * C1599 + C70589 + C70589 + C141221 * C1609) *
                          C141320 * C141496 +
                      (C68675 * C3491 + C70590 + C70590 + C141452 * C3499 +
                       C68677 * C3492 + C70591 + C70591 + C141221 * C3500) *
                          C141320 * C141497 +
                      (C68675 * C7886 + C70592 + C70592 + C141452 * C7892 +
                       C68677 * C7888 + C70593 + C70593 + C141221 * C7894) *
                          C141320 * C68674) *
                         C141487 -
                     ((C69551 + C69550) * C141320 * C68674 +
                      (C69549 + C69548) * C141320 * C141497 +
                      (C68677 * C110 + C68690 + C68690 + C141221 * C122 +
                       C68675 * C109 + C68691 + C68691 + C141452 * C121) *
                          C141320 * C141496) *
                         C1596) *
                        C141277 * C141483)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[47] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C68771 * C108 + C141496 * C189 + C68772 * C823 +
                       C141497 * C912 + C68773 * C2960 + C68674 * C3026) *
                          C139366 +
                      (C68771 * C114 + C141496 * C195 + C68772 * C828 +
                       C141497 * C917 + C68773 * C2964 + C68674 * C3030) *
                          C141452 +
                      (C68799 + C68800 + C68801) * C139356 +
                      (C68802 + C68803 + C68804) * C141221) *
                         C141320 * C1596 -
                     ((C70704 + C70705 + C70706) * C141221 +
                      (C70707 + C70708 + C70709) * C139356 +
                      (C68773 * C7890 + C68674 * C8009 + C68772 * C3494 +
                       C141497 * C3576 + C68771 * C1606 + C141496 * C1695) *
                          C141452 +
                      (C68773 * C7887 + C68674 * C8006 + C68772 * C3490 +
                       C141497 * C3572 + C68771 * C1601 + C141496 * C1690) *
                          C139366) *
                         C141320 * C141487) *
                        C141277 * C818 +
                    (((C70709 + C70708 + C70707) * C139366 +
                      (C70706 + C70705 + C70704) * C141452 +
                      (C68771 * C1599 + C141496 * C1688 + C68772 * C3492 +
                       C141497 * C3574 + C68773 * C7888 + C68674 * C8007) *
                          C139356 +
                      (C68771 * C1604 + C141496 * C1693 + C68772 * C3496 +
                       C141497 * C3578 + C68773 * C7891 + C68674 * C8010) *
                          C141221) *
                         C141320 * C141487 -
                     ((C68805 + C68806 + C68807) * C141221 +
                      (C68808 + C68809 + C68810) * C139356 +
                      (C68804 + C68803 + C68802) * C141452 +
                      (C68801 + C68800 + C68799) * C139366) *
                         C141320 * C1596) *
                        C141277 * C141483)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[47] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C275 * C108 + C141320 * C276) * C139366 +
                       (C275 * C114 + C141320 * C282) * C141452 +
                       C305 * C139356 + C306 * C141221) *
                          C141496 +
                      (C69766 + C69767 + C69768 + C69769) * C141497 +
                      (C69770 + C69771 + C69772 + C69773) * C68674) *
                         C1596 -
                     ((C8142 * C141221 + C8143 * C139356 + C10796 * C141452 +
                       C10797 * C139366) *
                          C68674 +
                      (C8144 * C141221 + C8145 * C139356 + C10798 * C141452 +
                       C10799 * C139366) *
                          C141497 +
                      (C1808 * C141221 + C1809 * C139356 +
                       (C275 * C1606 + C141320 * C1789) * C141452 +
                       (C275 * C1601 + C141320 * C1784) * C139366) *
                          C141496) *
                         C141487) *
                        C141277 * C818 +
                    (((C1809 * C139366 + C1808 * C141452 + C1807 * C139356 +
                       C1806 * C141221) *
                          C141496 +
                      (C8145 * C139366 + C8144 * C141452 + C24213 * C139356 +
                       C24212 * C141221) *
                          C141497 +
                      (C8143 * C139366 + C8142 * C141452 +
                       (C275 * C7888 + C141320 * C8129) * C139356 +
                       (C275 * C7891 + C141320 * C8132) * C141221) *
                          C68674) *
                         C141487 -
                     ((C69781 + C69780 + C69779 + C69778) * C68674 +
                      (C69777 + C69776 + C69775 + C69774) * C141497 +
                      (C308 * C141221 + C307 * C139356 + C306 * C141452 +
                       C305 * C139366) *
                          C141496) *
                         C1596) *
                        C141277 * C141483)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[47] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C139366 * C108 + C141452 * C114 + C139356 * C109 +
                       C141221 * C115) *
                          C68771 +
                      (C139366 * C189 + C141452 * C362 + C139356 * C190 +
                       C141221 * C363) *
                          C141496 +
                      (C69912 + C69913) * C68772 + (C69914 + C69915) * C141497 +
                      (C69916 + C69917) * C68773 + (C69918 + C69919) * C68674) *
                         C141320 * C1596 -
                     ((C139356 * C8005 + C141221 * C8243 + C139366 * C8006 +
                       C141452 * C8244) *
                          C68674 +
                      (C139356 * C7886 + C141221 * C7889 + C139366 * C7887 +
                       C141452 * C7890) *
                          C68773 +
                      (C139356 * C3573 + C141221 * C3721 + C139366 * C3572 +
                       C141452 * C3720) *
                          C141497 +
                      (C139356 * C3491 + C141221 * C3495 + C139366 * C3490 +
                       C141452 * C3494) *
                          C68772 +
                      (C139356 * C1689 + C141221 * C1877 + C139366 * C1690 +
                       C141452 * C1878) *
                          C141496 +
                      (C139356 * C1600 + C141221 * C1605 + C139366 * C1601 +
                       C141452 * C1606) *
                          C68771) *
                         C141320 * C141487) *
                        C141277 * C818 +
                    (((C139366 * C1600 + C141452 * C1605 + C139356 * C1599 +
                       C141221 * C1604) *
                          C68771 +
                      (C139366 * C1689 + C141452 * C1877 + C139356 * C1688 +
                       C141221 * C1876) *
                          C141496 +
                      (C139366 * C3491 + C141452 * C3495 + C139356 * C3492 +
                       C141221 * C3496) *
                          C68772 +
                      (C139366 * C3573 + C141452 * C3721 + C139356 * C3574 +
                       C141221 * C3722) *
                          C141497 +
                      (C139366 * C7886 + C141452 * C7889 + C139356 * C7888 +
                       C141221 * C7891) *
                          C68773 +
                      (C139366 * C8005 + C141452 * C8243 + C139356 * C8007 +
                       C141221 * C8245) *
                          C68674) *
                         C141320 * C141487 -
                     ((C69927 + C69926) * C68674 + (C69925 + C69924) * C68773 +
                      (C69923 + C69922) * C141497 + (C69921 + C69920) * C68772 +
                      (C139356 * C191 + C141221 * C364 + C139366 * C190 +
                       C141452 * C363) *
                          C141496 +
                      (C139356 * C110 + C141221 * C116 + C139366 * C109 +
                       C141452 * C115) *
                          C68771) *
                         C141320 * C1596) *
                        C141277 * C141483)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[47] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C69032 * C108 + C69036 + C69036 + C141496 * C419 +
                       C69033 * C823 + C69037 + C69037 + C141497 * C1171 +
                       C69034 * C2960 + C69038 + C69038 + C68674 * C3196) *
                          C141452 +
                      (C69072 + C69073 + C69074) * C141221) *
                         C141320 * C1596 -
                     ((C71025 + C71026 + C71027) * C141221 +
                      (C69034 * C7887 + C71013 + C71013 + C68674 * C8345 +
                       C69033 * C3490 + C71014 + C71014 + C141497 * C3790 +
                       C69032 * C1601 + C71015 + C71015 + C141496 * C1949) *
                          C141452) *
                         C141320 * C141487) *
                        C141277 * C818 +
                    (((C71027 + C71026 + C71025) * C141452 +
                      (C69032 * C1599 + C71016 + C71016 + C141496 * C1947 +
                       C69033 * C3492 + C71017 + C71017 + C141497 * C3792 +
                       C69034 * C7888 + C71018 + C71018 + C68674 * C8346) *
                          C141221) *
                         C141320 * C141487 -
                     ((C69075 + C69076 + C69077) * C141221 +
                      (C69074 + C69073 + C69072) * C141452) *
                         C141320 * C1596) *
                        C141277 * C141483)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[47] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141320 * C276) * C68771 +
             (C275 * C189 + C141320 * C501) * C141496 + C7032 * C68772 +
             C7428 * C141497 + C7034 * C68773 + C7429 * C68674) *
                C141452 +
            (C69152 + C69153 + C69154 + C69155 + C69156 + C69157) * C141221) *
               C1596 -
           ((C71126 + C71127 + C71128 + C71129 + C71130 + C71131) * C141221 +
            (C11138 * C68674 + C10797 * C68773 + C11139 * C141497 +
             C10799 * C68772 + (C275 * C1690 + C141320 * C2040) * C141496 +
             (C275 * C1601 + C141320 * C1784) * C68771) *
                C141452) *
               C141487) *
              C141277 * C818 +
          (((C71131 + C71130 + C71129 + C71128 + C71127 + C71126) * C141452 +
            (C1807 * C68771 + C2053 * C141496 + C24213 * C68772 +
             C24545 * C141497 + (C275 * C7888 + C141320 * C8129) * C68773 +
             (C275 * C8007 + C141320 * C8471) * C68674) *
                C141221) *
               C141487 -
           ((C69158 + C69159 + C69160 + C69161 + C69162 + C69163) * C141221 +
            (C69157 + C69156 + C69155 + C69154 + C69153 + C69152) * C141452) *
               C1596) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eezx[47] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139366 * C108 + C141452 * C114 + C139356 * C109 +
              C141221 * C115) *
                 C275 +
             (C139366 * C276 + C141452 * C579 + C139356 * C277 +
              C141221 * C580) *
                 C141320) *
                C141496 +
            ((C69912 + C69913) * C275 + (C70268 + C70269) * C141320) * C141497 +
            ((C69916 + C69917) * C275 + (C70270 + C70271) * C141320) * C68674) *
               C1596 -
           (((C139356 * C8127 + C141221 * C8582 + C139366 * C8128 +
              C141452 * C8583) *
                 C141320 +
             (C139356 * C7886 + C141221 * C7889 + C139366 * C7887 +
              C141452 * C7890) *
                 C275) *
                C68674 +
            ((C139356 * C3647 + C141221 * C3935 + C139366 * C3646 +
              C141452 * C3934) *
                 C141320 +
             (C139356 * C3491 + C141221 * C3495 + C139366 * C3490 +
              C141452 * C3494) *
                 C275) *
                C141497 +
            ((C139356 * C1783 + C141221 * C2125 + C139366 * C1784 +
              C141452 * C2126) *
                 C141320 +
             (C139356 * C1600 + C141221 * C1605 + C139366 * C1601 +
              C141452 * C1606) *
                 C275) *
                C141496) *
               C141487) *
              C141277 * C818 +
          ((((C139366 * C1600 + C141452 * C1605 + C139356 * C1599 +
              C141221 * C1604) *
                 C275 +
             (C139366 * C1783 + C141452 * C2125 + C139356 * C1782 +
              C141221 * C2124) *
                 C141320) *
                C141496 +
            ((C139366 * C3491 + C141452 * C3495 + C139356 * C3492 +
              C141221 * C3496) *
                 C275 +
             (C139366 * C3647 + C141452 * C3935 + C139356 * C3648 +
              C141221 * C3936) *
                 C141320) *
                C141497 +
            ((C139366 * C7886 + C141452 * C7889 + C139356 * C7888 +
              C141221 * C7891) *
                 C275 +
             (C139366 * C8127 + C141452 * C8582 + C139356 * C8129 +
              C141221 * C8584) *
                 C141320) *
                C68674) *
               C141487 -
           (((C70275 + C70274) * C141320 + (C69925 + C69924) * C275) * C68674 +
            ((C70273 + C70272) * C141320 + (C69921 + C69920) * C275) * C141497 +
            ((C139356 * C278 + C141221 * C581 + C139366 * C277 +
              C141452 * C580) *
                 C141320 +
             (C139356 * C110 + C141221 * C116 + C139366 * C109 +
              C141452 * C115) *
                 C275) *
                C141496) *
               C1596) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eezy[47] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C68771 * C108 + C141496 * C189 + C68772 * C823 +
                        C141497 * C912 + C68773 * C2960 + C68674 * C3026) *
                           C275 +
                       (C68771 * C276 + C141496 * C635 + C68772 * C1006 +
                        C141497 * C1419 + C68773 * C3084 + C68674 * C3362) *
                           C141320) *
                          C141452 +
                      ((C68799 + C68800 + C68801) * C275 +
                       (C69324 + C69325 + C69326) * C141320) *
                          C141221) *
                         C1596 -
                     (((C71334 + C71335 + C71336) * C141320 +
                       (C70707 + C70708 + C70709) * C275) *
                          C141221 +
                      ((C68773 * C8128 + C68674 * C8684 + C68772 * C3646 +
                        C141497 * C4004 + C68771 * C1784 + C141496 * C2197) *
                           C141320 +
                       (C68773 * C7887 + C68674 * C8006 + C68772 * C3490 +
                        C141497 * C3572 + C68771 * C1601 + C141496 * C1690) *
                           C275) *
                          C141452) *
                         C141487) *
                        C141277 * C818 +
                    ((((C70709 + C70708 + C70707) * C275 +
                       (C71336 + C71335 + C71334) * C141320) *
                          C141452 +
                      ((C68771 * C1599 + C141496 * C1688 + C68772 * C3492 +
                        C141497 * C3574 + C68773 * C7888 + C68674 * C8007) *
                           C275 +
                       (C68771 * C1782 + C141496 * C2195 + C68772 * C3648 +
                        C141497 * C4006 + C68773 * C8129 + C68674 * C8685) *
                           C141320) *
                          C141221) *
                         C141487 -
                     (((C69327 + C69328 + C69329) * C141320 +
                       (C68808 + C68809 + C68810) * C275) *
                          C141221 +
                      ((C69326 + C69325 + C69324) * C141320 +
                       (C68801 + C68800 + C68799) * C275) *
                          C141452) *
                         C1596) *
                        C141277 * C141483)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[47] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C713 * C108 + C721 + C721 + C141320 * C714) * C141496 +
             C7785 * C141497 + C7786 * C68674) *
                C141452 +
            (C69404 + C69405 + C69406) * C141221) *
               C1596 -
           ((C71435 + C71436 + C71437) * C141221 +
            (C11462 * C68674 + C11463 * C141497 +
             (C713 * C1601 + C2295 + C2295 + C141320 * C2283) * C141496) *
                C141452) *
               C141487) *
              C141277 * C818 +
          (((C71437 + C71436 + C71435) * C141452 +
            (C2304 * C141496 + C24860 * C141497 +
             (C713 * C7888 + C8804 + C8804 + C141320 * C8795) * C68674) *
                C141221) *
               C141487 -
           ((C69407 + C69408 + C69409) * C141221 +
            (C69406 + C69405 + C69404) * C141452) *
               C1596) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eexx[48] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C68675 * C108 + C68680 + C68680 + C141452 * C120 +
                       C68677 * C109 + C68681 + C68681 + C141221 * C121) *
                          C141320 * C141496 +
                      (C69544 + C69545) * C141320 * C141497 +
                      (C69546 + C69547) * C141320 * C68674) *
                         C141294 * C2374 -
                     ((C68677 * C6728 + C69516 + C69516 + C141221 * C6734 +
                       C68675 * C6729 + C69517 + C69517 + C141452 * C6735) *
                          C141320 * C68674 +
                      (C69547 + C69546) * C141320 * C141497 +
                      (C69545 + C69544) * C141320 * C141496) *
                         C141294 * C141485) *
                        C2376 +
                    (((C69548 + C69549) * C141320 * C141496 +
                      (C69550 + C69551) * C141320 * C141497 +
                      (C68675 * C6728 + C69526 + C69526 + C141452 * C6734 +
                       C68677 * C6730 + C69527 + C69527 + C141221 * C6736) *
                          C141320 * C68674) *
                         C141294 * C141485 -
                     ((C69551 + C69550) * C141320 * C68674 +
                      (C69549 + C69548) * C141320 * C141497 +
                      (C68677 * C110 + C68690 + C68690 + C141221 * C122 +
                       C68675 * C109 + C68691 + C68691 + C141452 * C121) *
                          C141320 * C141496) *
                         C141294 * C2374) *
                        C141483)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[48] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C68771 * C108 + C141496 * C189 + C68772 * C823 +
                       C141497 * C912 + C68773 * C2960 + C68674 * C3026) *
                          C139366 +
                      (C68771 * C114 + C141496 * C195 + C68772 * C828 +
                       C141497 * C917 + C68773 * C2964 + C68674 * C3030) *
                          C141452 +
                      (C68799 + C68800 + C68801) * C139356 +
                      (C68802 + C68803 + C68804) * C141221) *
                         C141320 * C141294 * C2374 -
                     ((C69662 + C69663 + C69664) * C141221 +
                      (C69665 + C69666 + C69667) * C139356 +
                      (C68773 * C6732 + C68674 * C6883 + C68772 * C2964 +
                       C141497 * C3030 + C68771 * C828 + C141496 * C917) *
                          C141452 +
                      (C68773 * C6729 + C68674 * C6880 + C68772 * C2960 +
                       C141497 * C3026 + C68771 * C823 + C141496 * C912) *
                          C139366) *
                         C141320 * C141294 * C141485) *
                        C2376 +
                    (((C69667 + C69666 + C69665) * C139366 +
                      (C69664 + C69663 + C69662) * C141452 +
                      (C68771 * C821 + C141496 * C910 + C68772 * C2962 +
                       C141497 * C3028 + C68773 * C6730 + C68674 * C6881) *
                          C139356 +
                      (C68771 * C826 + C141496 * C915 + C68772 * C2966 +
                       C141497 * C3032 + C68773 * C6733 + C68674 * C6884) *
                          C141221) *
                         C141320 * C141294 * C141485 -
                     ((C68805 + C68806 + C68807) * C141221 +
                      (C68808 + C68809 + C68810) * C139356 +
                      (C68804 + C68803 + C68802) * C141452 +
                      (C68801 + C68800 + C68799) * C139366) *
                         C141320 * C141294 * C2374) *
                        C141483)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[48] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C275 * C108 + C141320 * C276) * C139366 +
                       (C275 * C114 + C141320 * C282) * C141452 +
                       C305 * C139356 + C306 * C141221) *
                          C141496 +
                      (C69766 + C69767 + C69768 + C69769) * C141497 +
                      (C69770 + C69771 + C69772 + C69773) * C68674) *
                         C141294 * C2374 -
                     ((C7036 * C141221 + C7037 * C139356 + C9953 * C141452 +
                       C9954 * C139366) *
                          C68674 +
                      (C69773 + C69772 + C69771 + C69770) * C141497 +
                      (C69769 + C69768 + C69767 + C69766) * C141496) *
                         C141294 * C141485) *
                        C2376 +
                    (((C69774 + C69775 + C69776 + C69777) * C141496 +
                      (C69778 + C69779 + C69780 + C69781) * C141497 +
                      (C7037 * C139366 + C7036 * C141452 +
                       (C275 * C6730 + C141320 * C7003) * C139356 +
                       (C275 * C6733 + C141320 * C7006) * C141221) *
                          C68674) *
                         C141294 * C141485 -
                     ((C69781 + C69780 + C69779 + C69778) * C68674 +
                      (C69777 + C69776 + C69775 + C69774) * C141497 +
                      (C308 * C141221 + C307 * C139356 + C306 * C141452 +
                       C305 * C139366) *
                          C141496) *
                         C141294 * C2374) *
                        C141483)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[48] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139366 * C108 + C141452 * C114 + C139356 * C109 +
             C141221 * C115) *
                C68771 +
            (C139366 * C189 + C141452 * C362 + C139356 * C190 +
             C141221 * C363) *
                C141496 +
            (C69912 + C69913) * C68772 + (C69914 + C69915) * C141497 +
            (C69916 + C69917) * C68773 + (C69918 + C69919) * C68674) *
               C141320 * C141294 * C2374 -
           ((C139356 * C6879 + C141221 * C7139 + C139366 * C6880 +
             C141452 * C7140) *
                C68674 +
            (C139356 * C6728 + C141221 * C6731 + C139366 * C6729 +
             C141452 * C6732) *
                C68773 +
            (C69919 + C69918) * C141497 + (C69917 + C69916) * C68772 +
            (C69915 + C69914) * C141496 + (C69913 + C69912) * C68771) *
               C141320 * C141294 * C141485) *
              C2376 +
          (((C69920 + C69921) * C68771 + (C69922 + C69923) * C141496 +
            (C69924 + C69925) * C68772 + (C69926 + C69927) * C141497 +
            (C139366 * C6728 + C141452 * C6731 + C139356 * C6730 +
             C141221 * C6733) *
                C68773 +
            (C139366 * C6879 + C141452 * C7139 + C139356 * C6881 +
             C141221 * C7141) *
                C68674) *
               C141320 * C141294 * C141485 -
           ((C69927 + C69926) * C68674 + (C69925 + C69924) * C68773 +
            (C69923 + C69922) * C141497 + (C69921 + C69920) * C68772 +
            (C139356 * C191 + C141221 * C364 + C139366 * C190 +
             C141452 * C363) *
                C141496 +
            (C139356 * C110 + C141221 * C116 + C139366 * C109 +
             C141452 * C115) *
                C68771) *
               C141320 * C141294 * C2374) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[48] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C69032 * C108 + C69036 + C69036 + C141496 * C419 +
                       C69033 * C823 + C69037 + C69037 + C141497 * C1171 +
                       C69034 * C2960 + C69038 + C69038 + C68674 * C3196) *
                          C141452 +
                      (C69072 + C69073 + C69074) * C141221) *
                         C141320 * C141294 * C2374 -
                     ((C70047 + C70048 + C70049) * C141221 +
                      (C69034 * C6729 + C70035 + C70035 + C68674 * C7289 +
                       C69033 * C2960 + C70036 + C70036 + C141497 * C3196 +
                       C69032 * C823 + C70037 + C70037 + C141496 * C1171) *
                          C141452) *
                         C141320 * C141294 * C141485) *
                        C2376 +
                    (((C70049 + C70048 + C70047) * C141452 +
                      (C69032 * C821 + C70038 + C70038 + C141496 * C1169 +
                       C69033 * C2962 + C70039 + C70039 + C141497 * C3198 +
                       C69034 * C6730 + C70040 + C70040 + C68674 * C7290) *
                          C141221) *
                         C141320 * C141294 * C141485 -
                     ((C69075 + C69076 + C69077) * C141221 +
                      (C69074 + C69073 + C69072) * C141452) *
                         C141320 * C141294 * C2374) *
                        C141483)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[48] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141320 * C276) * C68771 +
             (C275 * C189 + C141320 * C501) * C141496 + C7032 * C68772 +
             C7428 * C141497 + C7034 * C68773 + C7429 * C68674) *
                C141452 +
            (C69152 + C69153 + C69154 + C69155 + C69156 + C69157) * C141221) *
               C141294 * C2374 -
           ((C70148 + C70149 + C70150 + C70151 + C70152 + C70153) * C141221 +
            (C10208 * C68674 + C9954 * C68773 + C7429 * C141497 +
             C7034 * C68772 + C7428 * C141496 + C7032 * C68771) *
                C141452) *
               C141294 * C141485) *
              C2376 +
          (((C70153 + C70152 + C70151 + C70150 + C70149 + C70148) * C141452 +
            (C1029 * C68771 + C1275 * C141496 + C6089 * C68772 +
             C6372 * C141497 + (C275 * C6730 + C141320 * C7003) * C68773 +
             (C275 * C6881 + C141320 * C7415) * C68674) *
                C141221) *
               C141294 * C141485 -
           ((C69158 + C69159 + C69160 + C69161 + C69162 + C69163) * C141221 +
            (C69157 + C69156 + C69155 + C69154 + C69153 + C69152) * C141452) *
               C141294 * C2374) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eezx[48] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139366 * C108 + C141452 * C114 + C139356 * C109 +
              C141221 * C115) *
                 C275 +
             (C139366 * C276 + C141452 * C579 + C139356 * C277 +
              C141221 * C580) *
                 C141320) *
                C141496 +
            ((C69912 + C69913) * C275 + (C70268 + C70269) * C141320) * C141497 +
            ((C69916 + C69917) * C275 + (C70270 + C70271) * C141320) * C68674) *
               C141294 * C2374 -
           (((C139356 * C7001 + C141221 * C7529 + C139366 * C7002 +
              C141452 * C7530) *
                 C141320 +
             (C139356 * C6728 + C141221 * C6731 + C139366 * C6729 +
              C141452 * C6732) *
                 C275) *
                C68674 +
            ((C70271 + C70270) * C141320 + (C69917 + C69916) * C275) * C141497 +
            ((C70269 + C70268) * C141320 + (C69913 + C69912) * C275) *
                C141496) *
               C141294 * C141485) *
              C2376 +
          ((((C69920 + C69921) * C275 + (C70272 + C70273) * C141320) * C141496 +
            ((C69924 + C69925) * C275 + (C70274 + C70275) * C141320) * C141497 +
            ((C139366 * C6728 + C141452 * C6731 + C139356 * C6730 +
              C141221 * C6733) *
                 C275 +
             (C139366 * C7001 + C141452 * C7529 + C139356 * C7003 +
              C141221 * C7531) *
                 C141320) *
                C68674) *
               C141294 * C141485 -
           (((C70275 + C70274) * C141320 + (C69925 + C69924) * C275) * C68674 +
            ((C70273 + C70272) * C141320 + (C69921 + C69920) * C275) * C141497 +
            ((C139356 * C278 + C141221 * C581 + C139366 * C277 +
              C141452 * C580) *
                 C141320 +
             (C139356 * C110 + C141221 * C116 + C139366 * C109 +
              C141452 * C115) *
                 C275) *
                C141496) *
               C141294 * C2374) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eezy[48] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C68771 * C108 + C141496 * C189 + C68772 * C823 +
                        C141497 * C912 + C68773 * C2960 + C68674 * C3026) *
                           C275 +
                       (C68771 * C276 + C141496 * C635 + C68772 * C1006 +
                        C141497 * C1419 + C68773 * C3084 + C68674 * C3362) *
                           C141320) *
                          C141452 +
                      ((C68799 + C68800 + C68801) * C275 +
                       (C69324 + C69325 + C69326) * C141320) *
                          C141221) *
                         C141294 * C2374 -
                     (((C70380 + C70381 + C70382) * C141320 +
                       (C69665 + C69666 + C69667) * C275) *
                          C141221 +
                      ((C68773 * C7002 + C68674 * C7655 + C68772 * C3084 +
                        C141497 * C3362 + C68771 * C1006 + C141496 * C1419) *
                           C141320 +
                       (C68773 * C6729 + C68674 * C6880 + C68772 * C2960 +
                        C141497 * C3026 + C68771 * C823 + C141496 * C912) *
                           C275) *
                          C141452) *
                         C141294 * C141485) *
                        C2376 +
                    ((((C69667 + C69666 + C69665) * C275 +
                       (C70382 + C70381 + C70380) * C141320) *
                          C141452 +
                      ((C68771 * C821 + C141496 * C910 + C68772 * C2962 +
                        C141497 * C3028 + C68773 * C6730 + C68674 * C6881) *
                           C275 +
                       (C68771 * C1004 + C141496 * C1417 + C68772 * C3086 +
                        C141497 * C3364 + C68773 * C7003 + C68674 * C7656) *
                           C141320) *
                          C141221) *
                         C141294 * C141485 -
                     (((C69327 + C69328 + C69329) * C141320 +
                       (C68808 + C68809 + C68810) * C275) *
                          C141221 +
                      ((C69326 + C69325 + C69324) * C141320 +
                       (C68801 + C68800 + C68799) * C275) *
                          C141452) *
                         C141294 * C2374) *
                        C141483)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[48] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C713 * C108 + C721 + C721 + C141320 * C714) * C141496 +
             C7785 * C141497 + C7786 * C68674) *
                C141452 +
            (C69404 + C69405 + C69406) * C141221) *
               C141294 * C2374 -
           ((C70481 + C70482 + C70483) * C141221 +
            (C10453 * C68674 + C7786 * C141497 + C7785 * C141496) * C141452) *
               C141294 * C141485) *
              C2376 +
          (((C70483 + C70482 + C70481) * C141452 +
            (C1526 * C141496 + C6628 * C141497 +
             (C713 * C6730 + C7778 + C7778 + C141320 * C7766) * C68674) *
                C141221) *
               C141294 * C141485 -
           ((C69407 + C69408 + C69409) * C141221 +
            (C69406 + C69405 + C69404) * C141452) *
               C141294 * C2374) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eexx[49] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C68675 * C108 + C68680 + C68680 + C141452 * C120 +
                      C68677 * C109 + C68681 + C68681 + C141221 * C121) *
                         C141320 * C141496 +
                     (C69544 + C69545) * C141320 * C141497 + C72401 * C68674) *
                        C141294 * C2956 -
                    ((C72406 + C72407) * C141320 * C68674 +
                     (C69547 + C69546) * C141320 * C141497 +
                     (C69545 + C69544) * C141320 * C141496) *
                        C141294 * C2957 +
                    (C72401 * C141496 + (C72407 + C72406) * C141320 * C141497 +
                     (C68675 * C9768 + C72399 + C72399 + C141452 * C9772 +
                      C68677 * C9769 + C72400 + C72400 + C141221 * C9773) *
                         C141320 * C68674) *
                        C141294 * C2958) *
                   C141243) /
                  (p * q * std::sqrt(p + q));
    d2eexy[49] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C68771 * C108 + C141496 * C189 + C68772 * C823 +
                      C141497 * C912 + C68773 * C2960 + C68674 * C3026) *
                         C139366 +
                     (C68771 * C114 + C141496 * C195 + C68772 * C828 +
                      C141497 * C917 + C68773 * C2964 + C68674 * C3030) *
                         C141452 +
                     (C68799 + C68800 + C68801) * C139356 +
                     (C68802 + C68803 + C68804) * C141221) *
                        C141320 * C141294 * C2956 -
                    ((C69662 + C69663 + C69664) * C141221 +
                     (C69665 + C69666 + C69667) * C139356 +
                     (C68773 * C6732 + C68674 * C6883 + C68772 * C2964 +
                      C141497 * C3030 + C68771 * C828 + C141496 * C917) *
                         C141452 +
                     (C68773 * C6729 + C68674 * C6880 + C68772 * C2960 +
                      C141497 * C3026 + C68771 * C823 + C141496 * C912) *
                         C139366) *
                        C141320 * C141294 * C2957 +
                    ((C68771 * C2960 + C141496 * C3026 + C68772 * C6729 +
                      C141497 * C6880 + C68773 * C9768 + C68674 * C9862) *
                         C139366 +
                     (C68771 * C2964 + C141496 * C3030 + C68772 * C6732 +
                      C141497 * C6883 + C68773 * C9770 + C68674 * C9864) *
                         C141452 +
                     (C68771 * C2961 + C141496 * C3027 + C68772 * C6728 +
                      C141497 * C6879 + C68773 * C9769 + C68674 * C9863) *
                         C139356 +
                     (C68771 * C2965 + C141496 * C3031 + C68772 * C6731 +
                      C141497 * C6882 + C68773 * C9771 + C68674 * C9865) *
                         C141221) *
                        C141320 * C141294 * C2958) *
                   C141243) /
                  (p * q * std::sqrt(p + q));
    d2eexz[49] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141320 * C276) * C139366 +
            (C275 * C114 + C141320 * C282) * C141452 + C305 * C139356 +
            C306 * C141221) *
               C141496 +
           (C69766 + C69767 + C69768 + C69769) * C141497 + C72562 * C68674) *
              C141294 * C2956 -
          ((C72557 + C72558 + C72559 + C72560) * C68674 +
           (C69773 + C69772 + C69771 + C69770) * C141497 +
           (C69769 + C69768 + C69767 + C69766) * C141496) *
              C141294 * C2957 +
          (C72562 * C141496 + (C72560 + C72559 + C72558 + C72557) * C141497 +
           (C58054 * C139366 + C58053 * C141452 +
            (C275 * C9769 + C141320 * C9941) * C139356 +
            (C275 * C9771 + C141320 * C9943) * C141221) *
               C68674) *
              C141294 * C2958) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eeyx[49] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C139366 * C108 + C141452 * C114 + C139356 * C109 + C141221 * C115) *
               C68771 +
           (C139366 * C189 + C141452 * C362 + C139356 * C190 + C141221 * C363) *
               C141496 +
           (C69912 + C69913) * C68772 + (C69914 + C69915) * C141497 +
           C72637 * C68773 + C72638 * C68674) *
              C141320 * C141294 * C2956 -
          ((C72647 + C72648) * C68674 + (C72649 + C72650) * C68773 +
           (C69919 + C69918) * C141497 + (C69917 + C69916) * C68772 +
           (C69915 + C69914) * C141496 + (C69913 + C69912) * C68771) *
              C141320 * C141294 * C2957 +
          (C72637 * C68771 + C72638 * C141496 + (C72650 + C72649) * C68772 +
           (C72648 + C72647) * C141497 +
           (C139366 * C9768 + C141452 * C9770 + C139356 * C9769 +
            C141221 * C9771) *
               C68773 +
           (C139366 * C9862 + C141452 * C10031 + C139356 * C9863 +
            C141221 * C10032) *
               C68674) *
              C141320 * C141294 * C2958) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eeyy[49] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C69032 * C108 + C69036 + C69036 + C141496 * C419 +
                      C69033 * C823 + C69037 + C69037 + C141497 * C1171 +
                      C69034 * C2960 + C69038 + C69038 + C68674 * C3196) *
                         C141452 +
                     (C69072 + C69073 + C69074) * C141221) *
                        C141320 * C141294 * C2956 -
                    ((C70047 + C70048 + C70049) * C141221 +
                     (C69034 * C6729 + C70035 + C70035 + C68674 * C7289 +
                      C69033 * C2960 + C70036 + C70036 + C141497 * C3196 +
                      C69032 * C823 + C70037 + C70037 + C141496 * C1171) *
                         C141452) *
                        C141320 * C141294 * C2957 +
                    ((C69032 * C2960 + C72725 + C72725 + C141496 * C3196 +
                      C69033 * C6729 + C72726 + C72726 + C141497 * C7289 +
                      C69034 * C9768 + C72727 + C72727 + C68674 * C10121) *
                         C141452 +
                     (C69032 * C2961 + C72728 + C72728 + C141496 * C3197 +
                      C69033 * C6728 + C72729 + C72729 + C141497 * C7288 +
                      C69034 * C9769 + C72730 + C72730 + C68674 * C10122) *
                         C141221) *
                        C141320 * C141294 * C2958) *
                   C141243) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[49] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141320 * C276) * C68771 +
            (C275 * C189 + C141320 * C501) * C141496 + C7032 * C68772 +
            C7428 * C141497 + C7034 * C68773 + C7429 * C68674) *
               C141452 +
           (C69152 + C69153 + C69154 + C69155 + C69156 + C69157) * C141221) *
              C141294 * C2956 -
          ((C70148 + C70149 + C70150 + C70151 + C70152 + C70153) * C141221 +
           (C10208 * C68674 + C9954 * C68773 + C7429 * C141497 +
            C7034 * C68772 + C7428 * C141496 + C7032 * C68771) *
               C141452) *
              C141294 * C2957 +
          ((C7034 * C68771 + C7429 * C141496 + C9954 * C68772 +
            C10208 * C141497 + C58054 * C68773 + C58222 * C68674) *
               C141452 +
           (C6086 * C68771 + C6371 * C141496 + C7037 * C68772 +
            C7430 * C141497 + (C275 * C9769 + C141320 * C9941) * C68773 +
            (C275 * C9863 + C141320 * C10204) * C68674) *
               C141221) *
              C141294 * C2958) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eezx[49] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139366 * C108 + C141452 * C114 + C139356 * C109 +
             C141221 * C115) *
                C275 +
            (C139366 * C276 + C141452 * C579 + C139356 * C277 +
             C141221 * C580) *
                C141320) *
               C141496 +
           ((C69912 + C69913) * C275 + (C70268 + C70269) * C141320) * C141497 +
           C72888 * C68674) *
              C141294 * C2956 -
          (((C72886 + C72887) * C141320 + (C72649 + C72650) * C275) * C68674 +
           ((C70271 + C70270) * C141320 + (C69917 + C69916) * C275) * C141497 +
           ((C70269 + C70268) * C141320 + (C69913 + C69912) * C275) * C141496) *
              C141294 * C2957 +
          (C72888 * C141496 +
           ((C72650 + C72649) * C275 + (C72887 + C72886) * C141320) * C141497 +
           ((C139366 * C9768 + C141452 * C9770 + C139356 * C9769 +
             C141221 * C9771) *
                C275 +
            (C139366 * C9940 + C141452 * C10282 + C139356 * C9941 +
             C141221 * C10283) *
                C141320) *
               C68674) *
              C141294 * C2958) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eezy[49] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C68771 * C108 + C141496 * C189 + C68772 * C823 +
                       C141497 * C912 + C68773 * C2960 + C68674 * C3026) *
                          C275 +
                      (C68771 * C276 + C141496 * C635 + C68772 * C1006 +
                       C141497 * C1419 + C68773 * C3084 + C68674 * C3362) *
                          C141320) *
                         C141452 +
                     ((C68799 + C68800 + C68801) * C275 +
                      (C69324 + C69325 + C69326) * C141320) *
                         C141221) *
                        C141294 * C2956 -
                    (((C70380 + C70381 + C70382) * C141320 +
                      (C69665 + C69666 + C69667) * C275) *
                         C141221 +
                     ((C68773 * C7002 + C68674 * C7655 + C68772 * C3084 +
                       C141497 * C3362 + C68771 * C1006 + C141496 * C1419) *
                          C141320 +
                      (C68773 * C6729 + C68674 * C6880 + C68772 * C2960 +
                       C141497 * C3026 + C68771 * C823 + C141496 * C912) *
                          C275) *
                         C141452) *
                        C141294 * C2957 +
                    (((C68771 * C2960 + C141496 * C3026 + C68772 * C6729 +
                       C141497 * C6880 + C68773 * C9768 + C68674 * C9862) *
                          C275 +
                      (C68771 * C3084 + C141496 * C3362 + C68772 * C7002 +
                       C141497 * C7655 + C68773 * C9940 + C68674 * C10368) *
                          C141320) *
                         C141452 +
                     ((C68771 * C2961 + C141496 * C3027 + C68772 * C6728 +
                       C141497 * C6879 + C68773 * C9769 + C68674 * C9863) *
                          C275 +
                      (C68771 * C3085 + C141496 * C3363 + C68772 * C7001 +
                       C141497 * C7654 + C68773 * C9941 + C68674 * C10369) *
                          C141320) *
                         C141221) *
                        C141294 * C2958) *
                   C141243) /
                  (p * q * std::sqrt(p + q));
    d2eezz[49] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C141320 * C714) * C141496 +
            C7785 * C141497 + C7786 * C68674) *
               C141452 +
           (C69404 + C69405 + C69406) * C141221) *
              C141294 * C2956 -
          ((C70481 + C70482 + C70483) * C141221 +
           (C10453 * C68674 + C7786 * C141497 + C7785 * C141496) * C141452) *
              C141294 * C2957 +
          ((C7786 * C141496 + C10453 * C141497 + C58388 * C68674) * C141452 +
           (C6627 * C141496 + C7787 * C141497 +
            (C713 * C9769 + C10450 + C10450 + C141320 * C10445) * C68674) *
               C141221) *
              C141294 * C2958) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eexx[50] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C68675 * C108 + C68680 + C68680 + C141452 * C120 +
                       C68677 * C109 + C68681 + C68681 + C141221 * C121) *
                          C141320 * C141496 +
                      (C69544 + C69545) * C141320 * C141497 + C72401 * C68674) *
                         C1596 -
                     ((C73153 + C73154) * C141320 * C68674 +
                      (C73155 + C73156) * C141320 * C141497 +
                      (C68677 * C1600 + C70586 + C70586 + C141221 * C1610 +
                       C68675 * C1601 + C70587 + C70587 + C141452 * C1611) *
                          C141320 * C141496) *
                         C141487) *
                        C2374 +
                    (((C73156 + C73155) * C141320 * C141496 +
                      (C73154 + C73153) * C141320 * C141497 +
                      (C68675 * C10551 + C73143 + C73143 + C141452 * C10555 +
                       C68677 * C10552 + C73144 + C73144 + C141221 * C10556) *
                          C141320 * C68674) *
                         C141487 -
                     ((C72406 + C72407) * C141320 * C68674 +
                      (C69547 + C69546) * C141320 * C141497 +
                      (C69545 + C69544) * C141320 * C141496) *
                         C1596) *
                        C141485) *
                   C141243) /
                  (p * q * std::sqrt(p + q));
    d2eexy[50] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C68771 * C108 + C141496 * C189 + C68772 * C823 +
                       C141497 * C912 + C68773 * C2960 + C68674 * C3026) *
                          C139366 +
                      (C68771 * C114 + C141496 * C195 + C68772 * C828 +
                       C141497 * C917 + C68773 * C2964 + C68674 * C3030) *
                          C141452 +
                      (C68799 + C68800 + C68801) * C139356 +
                      (C68802 + C68803 + C68804) * C141221) *
                         C141320 * C1596 -
                     ((C70704 + C70705 + C70706) * C141221 +
                      (C70707 + C70708 + C70709) * C139356 +
                      (C68773 * C7890 + C68674 * C8009 + C68772 * C3494 +
                       C141497 * C3576 + C68771 * C1606 + C141496 * C1695) *
                          C141452 +
                      (C68773 * C7887 + C68674 * C8006 + C68772 * C3490 +
                       C141497 * C3572 + C68771 * C1601 + C141496 * C1690) *
                          C139366) *
                         C141320 * C141487) *
                        C2374 +
                    (((C68771 * C3490 + C141496 * C3572 + C68772 * C7887 +
                       C141497 * C8006 + C68773 * C10551 + C68674 * C10677) *
                          C139366 +
                      (C68771 * C3494 + C141496 * C3576 + C68772 * C7890 +
                       C141497 * C8009 + C68773 * C10553 + C68674 * C10679) *
                          C141452 +
                      (C68771 * C3491 + C141496 * C3573 + C68772 * C7886 +
                       C141497 * C8005 + C68773 * C10552 + C68674 * C10678) *
                          C139356 +
                      (C68771 * C3495 + C141496 * C3577 + C68772 * C7889 +
                       C141497 * C8008 + C68773 * C10554 + C68674 * C10680) *
                          C141221) *
                         C141320 * C141487 -
                     ((C69662 + C69663 + C69664) * C141221 +
                      (C69665 + C69666 + C69667) * C139356 +
                      (C68773 * C6732 + C68674 * C6883 + C68772 * C2964 +
                       C141497 * C3030 + C68771 * C828 + C141496 * C917) *
                          C141452 +
                      (C68773 * C6729 + C68674 * C6880 + C68772 * C2960 +
                       C141497 * C3026 + C68771 * C823 + C141496 * C912) *
                          C139366) *
                         C141320 * C1596) *
                        C141485) *
                   C141243) /
                  (p * q * std::sqrt(p + q));
    d2eexz[50] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141320 * C276) * C139366 +
             (C275 * C114 + C141320 * C282) * C141452 + C305 * C139356 +
             C306 * C141221) *
                C141496 +
            (C69766 + C69767 + C69768 + C69769) * C141497 + C72562 * C68674) *
               C1596 -
           ((C73353 + C73354 + C73355 + C73356) * C68674 +
            (C73357 + C73358 + C73359 + C73360) * C141497 +
            (C1808 * C141221 + C1809 * C139356 +
             (C275 * C1606 + C141320 * C1789) * C141452 +
             (C275 * C1601 + C141320 * C1784) * C139366) *
                C141496) *
               C141487) *
              C2374 +
          (((C73360 + C73359 + C73358 + C73357) * C141496 +
            (C73356 + C73355 + C73354 + C73353) * C141497 +
            (C58622 * C139366 + C58621 * C141452 +
             (C275 * C10552 + C141320 * C10780) * C139356 +
             (C275 * C10554 + C141320 * C10782) * C141221) *
                C68674) *
               C141487 -
           ((C72557 + C72558 + C72559 + C72560) * C68674 +
            (C69773 + C69772 + C69771 + C69770) * C141497 +
            (C69769 + C69768 + C69767 + C69766) * C141496) *
               C1596) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eeyx[50] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139366 * C108 + C141452 * C114 + C139356 * C109 +
             C141221 * C115) *
                C68771 +
            (C139366 * C189 + C141452 * C362 + C139356 * C190 +
             C141221 * C363) *
                C141496 +
            (C69912 + C69913) * C68772 + (C69914 + C69915) * C141497 +
            C72637 * C68773 + C72638 * C68674) *
               C141320 * C1596 -
           ((C73475 + C73476) * C68674 + (C73477 + C73478) * C68773 +
            (C73479 + C73480) * C141497 + (C73481 + C73482) * C68772 +
            (C139356 * C1689 + C141221 * C1877 + C139366 * C1690 +
             C141452 * C1878) *
                C141496 +
            (C139356 * C1600 + C141221 * C1605 + C139366 * C1601 +
             C141452 * C1606) *
                C68771) *
               C141320 * C141487) *
              C2374 +
          (((C73482 + C73481) * C68771 + (C73480 + C73479) * C141496 +
            (C73478 + C73477) * C68772 + (C73476 + C73475) * C141497 +
            (C139366 * C10551 + C141452 * C10553 + C139356 * C10552 +
             C141221 * C10554) *
                C68773 +
            (C139366 * C10677 + C141452 * C10901 + C139356 * C10678 +
             C141221 * C10902) *
                C68674) *
               C141320 * C141487 -
           ((C72647 + C72648) * C68674 + (C72649 + C72650) * C68773 +
            (C69919 + C69918) * C141497 + (C69917 + C69916) * C68772 +
            (C69915 + C69914) * C141496 + (C69913 + C69912) * C68771) *
               C141320 * C1596) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eeyy[50] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C69032 * C108 + C69036 + C69036 + C141496 * C419 +
                       C69033 * C823 + C69037 + C69037 + C141497 * C1171 +
                       C69034 * C2960 + C69038 + C69038 + C68674 * C3196) *
                          C141452 +
                      (C69072 + C69073 + C69074) * C141221) *
                         C141320 * C1596 -
                     ((C71025 + C71026 + C71027) * C141221 +
                      (C69034 * C7887 + C71013 + C71013 + C68674 * C8345 +
                       C69033 * C3490 + C71014 + C71014 + C141497 * C3790 +
                       C69032 * C1601 + C71015 + C71015 + C141496 * C1949) *
                          C141452) *
                         C141320 * C141487) *
                        C2374 +
                    (((C69032 * C3490 + C73581 + C73581 + C141496 * C3790 +
                       C69033 * C7887 + C73582 + C73582 + C141497 * C8345 +
                       C69034 * C10551 + C73583 + C73583 + C68674 * C11025) *
                          C141452 +
                      (C69032 * C3491 + C73584 + C73584 + C141496 * C3791 +
                       C69033 * C7886 + C73585 + C73585 + C141497 * C8344 +
                       C69034 * C10552 + C73586 + C73586 + C68674 * C11026) *
                          C141221) *
                         C141320 * C141487 -
                     ((C70047 + C70048 + C70049) * C141221 +
                      (C69034 * C6729 + C70035 + C70035 + C68674 * C7289 +
                       C69033 * C2960 + C70036 + C70036 + C141497 * C3196 +
                       C69032 * C823 + C70037 + C70037 + C141496 * C1171) *
                          C141452) *
                         C141320 * C1596) *
                        C141485) *
                   C141243) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[50] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141320 * C276) * C68771 +
             (C275 * C189 + C141320 * C501) * C141496 + C7032 * C68772 +
             C7428 * C141497 + C7034 * C68773 + C7429 * C68674) *
                C141452 +
            (C69152 + C69153 + C69154 + C69155 + C69156 + C69157) * C141221) *
               C1596 -
           ((C71126 + C71127 + C71128 + C71129 + C71130 + C71131) * C141221 +
            (C11138 * C68674 + C10797 * C68773 + C11139 * C141497 +
             C10799 * C68772 + (C275 * C1690 + C141320 * C2040) * C141496 +
             (C275 * C1601 + C141320 * C1784) * C68771) *
                C141452) *
               C141487) *
              C2374 +
          (((C10799 * C68771 + C11139 * C141496 + C10797 * C68772 +
             C11138 * C141497 + C58622 * C68773 + C58850 * C68674) *
                C141452 +
            (C8145 * C68771 + C8482 * C141496 + C8143 * C68772 +
             C8481 * C141497 + (C275 * C10552 + C141320 * C10780) * C68773 +
             (C275 * C10678 + C141320 * C11132) * C68674) *
                C141221) *
               C141487 -
           ((C70148 + C70149 + C70150 + C70151 + C70152 + C70153) * C141221 +
            (C10208 * C68674 + C9954 * C68773 + C7429 * C141497 +
             C7034 * C68772 + C7428 * C141496 + C7032 * C68771) *
                C141452) *
               C1596) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eezx[50] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139366 * C108 + C141452 * C114 + C139356 * C109 +
              C141221 * C115) *
                 C275 +
             (C139366 * C276 + C141452 * C579 + C139356 * C277 +
              C141221 * C580) *
                 C141320) *
                C141496 +
            ((C69912 + C69913) * C275 + (C70268 + C70269) * C141320) * C141497 +
            C72888 * C68674) *
               C1596 -
           (((C73791 + C73792) * C141320 + (C73477 + C73478) * C275) * C68674 +
            ((C73793 + C73794) * C141320 + (C73481 + C73482) * C275) * C141497 +
            ((C139356 * C1783 + C141221 * C2125 + C139366 * C1784 +
              C141452 * C2126) *
                 C141320 +
             (C139356 * C1600 + C141221 * C1605 + C139366 * C1601 +
              C141452 * C1606) *
                 C275) *
                C141496) *
               C141487) *
              C2374 +
          ((((C73482 + C73481) * C275 + (C73794 + C73793) * C141320) * C141496 +
            ((C73478 + C73477) * C275 + (C73792 + C73791) * C141320) * C141497 +
            ((C139366 * C10551 + C141452 * C10553 + C139356 * C10552 +
              C141221 * C10554) *
                 C275 +
             (C139366 * C10779 + C141452 * C11237 + C139356 * C10780 +
              C141221 * C11238) *
                 C141320) *
                C68674) *
               C141487 -
           (((C72886 + C72887) * C141320 + (C72649 + C72650) * C275) * C68674 +
            ((C70271 + C70270) * C141320 + (C69917 + C69916) * C275) * C141497 +
            ((C70269 + C70268) * C141320 + (C69913 + C69912) * C275) *
                C141496) *
               C1596) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eezy[50] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C68771 * C108 + C141496 * C189 + C68772 * C823 +
                        C141497 * C912 + C68773 * C2960 + C68674 * C3026) *
                           C275 +
                       (C68771 * C276 + C141496 * C635 + C68772 * C1006 +
                        C141497 * C1419 + C68773 * C3084 + C68674 * C3362) *
                           C141320) *
                          C141452 +
                      ((C68799 + C68800 + C68801) * C275 +
                       (C69324 + C69325 + C69326) * C141320) *
                          C141221) *
                         C1596 -
                     (((C71334 + C71335 + C71336) * C141320 +
                       (C70707 + C70708 + C70709) * C275) *
                          C141221 +
                      ((C68773 * C8128 + C68674 * C8684 + C68772 * C3646 +
                        C141497 * C4004 + C68771 * C1784 + C141496 * C2197) *
                           C141320 +
                       (C68773 * C7887 + C68674 * C8006 + C68772 * C3490 +
                        C141497 * C3572 + C68771 * C1601 + C141496 * C1690) *
                           C275) *
                          C141452) *
                         C141487) *
                        C2374 +
                    ((((C68771 * C3490 + C141496 * C3572 + C68772 * C7887 +
                        C141497 * C8006 + C68773 * C10551 + C68674 * C10677) *
                           C275 +
                       (C68771 * C3646 + C141496 * C4004 + C68772 * C8128 +
                        C141497 * C8684 + C68773 * C10779 + C68674 * C11349) *
                           C141320) *
                          C141452 +
                      ((C68771 * C3491 + C141496 * C3573 + C68772 * C7886 +
                        C141497 * C8005 + C68773 * C10552 + C68674 * C10678) *
                           C275 +
                       (C68771 * C3647 + C141496 * C4005 + C68772 * C8127 +
                        C141497 * C8683 + C68773 * C10780 + C68674 * C11350) *
                           C141320) *
                          C141221) *
                         C141487 -
                     (((C70380 + C70381 + C70382) * C141320 +
                       (C69665 + C69666 + C69667) * C275) *
                          C141221 +
                      ((C68773 * C7002 + C68674 * C7655 + C68772 * C3084 +
                        C141497 * C3362 + C68771 * C1006 + C141496 * C1419) *
                           C141320 +
                       (C68773 * C6729 + C68674 * C6880 + C68772 * C2960 +
                        C141497 * C3026 + C68771 * C823 + C141496 * C912) *
                           C275) *
                          C141452) *
                         C1596) *
                        C141485) *
                   C141243) /
                  (p * q * std::sqrt(p + q));
    d2eezz[50] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C713 * C108 + C721 + C721 + C141320 * C714) * C141496 +
             C7785 * C141497 + C7786 * C68674) *
                C141452 +
            (C69404 + C69405 + C69406) * C141221) *
               C1596 -
           ((C71435 + C71436 + C71437) * C141221 +
            (C11462 * C68674 + C11463 * C141497 +
             (C713 * C1601 + C2295 + C2295 + C141320 * C2283) * C141496) *
                C141452) *
               C141487) *
              C2374 +
          (((C11463 * C141496 + C11462 * C141497 + C59072 * C68674) * C141452 +
            (C8810 * C141496 + C8809 * C141497 +
             (C713 * C10552 + C11457 + C11457 + C141320 * C11450) * C68674) *
                C141221) *
               C141487 -
           ((C70481 + C70482 + C70483) * C141221 +
            (C10453 * C68674 + C7786 * C141497 + C7785 * C141496) * C141452) *
               C1596) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eexx[51] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C68675 * C108 + C68680 + C68680 + C141452 * C120 +
                       C68677 * C109 + C68681 + C68681 + C141221 * C121) *
                          C141320 * C141496 +
                      (C69544 + C69545) * C141320 * C141497 + C72401 * C68674) *
                         C4148 -
                     ((C73153 + C73154) * C141320 * C68674 +
                      (C73155 + C73156) * C141320 * C141497 +
                      (C68677 * C1600 + C70586 + C70586 + C141221 * C1610 +
                       C68675 * C1601 + C70587 + C70587 + C141452 * C1611) *
                          C141320 * C141496) *
                         C141487) *
                        C141277 * C2376 +
                    (((C68675 * C1600 + C70588 + C70588 + C141452 * C1610 +
                       C68677 * C1599 + C70589 + C70589 + C141221 * C1609) *
                          C141320 * C141496 +
                      (C68675 * C3491 + C70590 + C70590 + C141452 * C3499 +
                       C68677 * C3492 + C70591 + C70591 + C141221 * C3500) *
                          C141320 * C141497 +
                      (C68675 * C7886 + C70592 + C70592 + C141452 * C7892 +
                       C68677 * C7888 + C70593 + C70593 + C141221 * C7894) *
                          C141320 * C68674) *
                         C141487 -
                     ((C69551 + C69550) * C141320 * C68674 +
                      (C69549 + C69548) * C141320 * C141497 +
                      (C68677 * C110 + C68690 + C68690 + C141221 * C122 +
                       C68675 * C109 + C68691 + C68691 + C141452 * C121) *
                          C141320 * C141496) *
                         C4148) *
                        C141277 * C141483)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[51] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C68771 * C108 + C141496 * C189 + C68772 * C823 +
                       C141497 * C912 + C68773 * C2960 + C68674 * C3026) *
                          C139366 +
                      (C68771 * C114 + C141496 * C195 + C68772 * C828 +
                       C141497 * C917 + C68773 * C2964 + C68674 * C3030) *
                          C141452 +
                      (C68799 + C68800 + C68801) * C139356 +
                      (C68802 + C68803 + C68804) * C141221) *
                         C141320 * C4148 -
                     ((C70704 + C70705 + C70706) * C141221 +
                      (C70707 + C70708 + C70709) * C139356 +
                      (C68773 * C7890 + C68674 * C8009 + C68772 * C3494 +
                       C141497 * C3576 + C68771 * C1606 + C141496 * C1695) *
                          C141452 +
                      (C68773 * C7887 + C68674 * C8006 + C68772 * C3490 +
                       C141497 * C3572 + C68771 * C1601 + C141496 * C1690) *
                          C139366) *
                         C141320 * C141487) *
                        C141277 * C2376 +
                    (((C70709 + C70708 + C70707) * C139366 +
                      (C70706 + C70705 + C70704) * C141452 +
                      (C68771 * C1599 + C141496 * C1688 + C68772 * C3492 +
                       C141497 * C3574 + C68773 * C7888 + C68674 * C8007) *
                          C139356 +
                      (C68771 * C1604 + C141496 * C1693 + C68772 * C3496 +
                       C141497 * C3578 + C68773 * C7891 + C68674 * C8010) *
                          C141221) *
                         C141320 * C141487 -
                     ((C68805 + C68806 + C68807) * C141221 +
                      (C68808 + C68809 + C68810) * C139356 +
                      (C68804 + C68803 + C68802) * C141452 +
                      (C68801 + C68800 + C68799) * C139366) *
                         C141320 * C4148) *
                        C141277 * C141483)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[51] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141320 * C276) * C139366 +
             (C275 * C114 + C141320 * C282) * C141452 + C305 * C139356 +
             C306 * C141221) *
                C141496 +
            (C69766 + C69767 + C69768 + C69769) * C141497 + C72562 * C68674) *
               C4148 -
           ((C73353 + C73354 + C73355 + C73356) * C68674 +
            (C73357 + C73358 + C73359 + C73360) * C141497 +
            (C1808 * C141221 + C1809 * C139356 +
             (C275 * C1606 + C141320 * C1789) * C141452 +
             (C275 * C1601 + C141320 * C1784) * C139366) *
                C141496) *
               C141487) *
              C141277 * C2376 +
          (((C1809 * C139366 + C1808 * C141452 + C1807 * C139356 +
             C1806 * C141221) *
                C141496 +
            (C8145 * C139366 + C8144 * C141452 + C24213 * C139356 +
             C24212 * C141221) *
                C141497 +
            (C8143 * C139366 + C8142 * C141452 +
             (C275 * C7888 + C141320 * C8129) * C139356 +
             (C275 * C7891 + C141320 * C8132) * C141221) *
                C68674) *
               C141487 -
           ((C69781 + C69780 + C69779 + C69778) * C68674 +
            (C69777 + C69776 + C69775 + C69774) * C141497 +
            (C308 * C141221 + C307 * C139356 + C306 * C141452 +
             C305 * C139366) *
                C141496) *
               C4148) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[51] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C139366 * C108 + C141452 * C114 + C139356 * C109 +
                       C141221 * C115) *
                          C68771 +
                      (C139366 * C189 + C141452 * C362 + C139356 * C190 +
                       C141221 * C363) *
                          C141496 +
                      (C69912 + C69913) * C68772 + (C69914 + C69915) * C141497 +
                      C72637 * C68773 + C72638 * C68674) *
                         C141320 * C4148 -
                     ((C73475 + C73476) * C68674 + (C73477 + C73478) * C68773 +
                      (C73479 + C73480) * C141497 + (C73481 + C73482) * C68772 +
                      (C139356 * C1689 + C141221 * C1877 + C139366 * C1690 +
                       C141452 * C1878) *
                          C141496 +
                      (C139356 * C1600 + C141221 * C1605 + C139366 * C1601 +
                       C141452 * C1606) *
                          C68771) *
                         C141320 * C141487) *
                        C141277 * C2376 +
                    (((C139366 * C1600 + C141452 * C1605 + C139356 * C1599 +
                       C141221 * C1604) *
                          C68771 +
                      (C139366 * C1689 + C141452 * C1877 + C139356 * C1688 +
                       C141221 * C1876) *
                          C141496 +
                      (C139366 * C3491 + C141452 * C3495 + C139356 * C3492 +
                       C141221 * C3496) *
                          C68772 +
                      (C139366 * C3573 + C141452 * C3721 + C139356 * C3574 +
                       C141221 * C3722) *
                          C141497 +
                      (C139366 * C7886 + C141452 * C7889 + C139356 * C7888 +
                       C141221 * C7891) *
                          C68773 +
                      (C139366 * C8005 + C141452 * C8243 + C139356 * C8007 +
                       C141221 * C8245) *
                          C68674) *
                         C141320 * C141487 -
                     ((C69927 + C69926) * C68674 + (C69925 + C69924) * C68773 +
                      (C69923 + C69922) * C141497 + (C69921 + C69920) * C68772 +
                      (C139356 * C191 + C141221 * C364 + C139366 * C190 +
                       C141452 * C363) *
                          C141496 +
                      (C139356 * C110 + C141221 * C116 + C139366 * C109 +
                       C141452 * C115) *
                          C68771) *
                         C141320 * C4148) *
                        C141277 * C141483)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[51] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C69032 * C108 + C69036 + C69036 + C141496 * C419 +
                       C69033 * C823 + C69037 + C69037 + C141497 * C1171 +
                       C69034 * C2960 + C69038 + C69038 + C68674 * C3196) *
                          C141452 +
                      (C69072 + C69073 + C69074) * C141221) *
                         C141320 * C4148 -
                     ((C71025 + C71026 + C71027) * C141221 +
                      (C69034 * C7887 + C71013 + C71013 + C68674 * C8345 +
                       C69033 * C3490 + C71014 + C71014 + C141497 * C3790 +
                       C69032 * C1601 + C71015 + C71015 + C141496 * C1949) *
                          C141452) *
                         C141320 * C141487) *
                        C141277 * C2376 +
                    (((C71027 + C71026 + C71025) * C141452 +
                      (C69032 * C1599 + C71016 + C71016 + C141496 * C1947 +
                       C69033 * C3492 + C71017 + C71017 + C141497 * C3792 +
                       C69034 * C7888 + C71018 + C71018 + C68674 * C8346) *
                          C141221) *
                         C141320 * C141487 -
                     ((C69075 + C69076 + C69077) * C141221 +
                      (C69074 + C69073 + C69072) * C141452) *
                         C141320 * C4148) *
                        C141277 * C141483)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[51] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141320 * C276) * C68771 +
             (C275 * C189 + C141320 * C501) * C141496 + C7032 * C68772 +
             C7428 * C141497 + C7034 * C68773 + C7429 * C68674) *
                C141452 +
            (C69152 + C69153 + C69154 + C69155 + C69156 + C69157) * C141221) *
               C4148 -
           ((C71126 + C71127 + C71128 + C71129 + C71130 + C71131) * C141221 +
            (C11138 * C68674 + C10797 * C68773 + C11139 * C141497 +
             C10799 * C68772 + (C275 * C1690 + C141320 * C2040) * C141496 +
             (C275 * C1601 + C141320 * C1784) * C68771) *
                C141452) *
               C141487) *
              C141277 * C2376 +
          (((C71131 + C71130 + C71129 + C71128 + C71127 + C71126) * C141452 +
            (C1807 * C68771 + C2053 * C141496 + C24213 * C68772 +
             C24545 * C141497 + (C275 * C7888 + C141320 * C8129) * C68773 +
             (C275 * C8007 + C141320 * C8471) * C68674) *
                C141221) *
               C141487 -
           ((C69158 + C69159 + C69160 + C69161 + C69162 + C69163) * C141221 +
            (C69157 + C69156 + C69155 + C69154 + C69153 + C69152) * C141452) *
               C4148) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eezx[51] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139366 * C108 + C141452 * C114 + C139356 * C109 +
              C141221 * C115) *
                 C275 +
             (C139366 * C276 + C141452 * C579 + C139356 * C277 +
              C141221 * C580) *
                 C141320) *
                C141496 +
            ((C69912 + C69913) * C275 + (C70268 + C70269) * C141320) * C141497 +
            C72888 * C68674) *
               C4148 -
           (((C73791 + C73792) * C141320 + (C73477 + C73478) * C275) * C68674 +
            ((C73793 + C73794) * C141320 + (C73481 + C73482) * C275) * C141497 +
            ((C139356 * C1783 + C141221 * C2125 + C139366 * C1784 +
              C141452 * C2126) *
                 C141320 +
             (C139356 * C1600 + C141221 * C1605 + C139366 * C1601 +
              C141452 * C1606) *
                 C275) *
                C141496) *
               C141487) *
              C141277 * C2376 +
          ((((C139366 * C1600 + C141452 * C1605 + C139356 * C1599 +
              C141221 * C1604) *
                 C275 +
             (C139366 * C1783 + C141452 * C2125 + C139356 * C1782 +
              C141221 * C2124) *
                 C141320) *
                C141496 +
            ((C139366 * C3491 + C141452 * C3495 + C139356 * C3492 +
              C141221 * C3496) *
                 C275 +
             (C139366 * C3647 + C141452 * C3935 + C139356 * C3648 +
              C141221 * C3936) *
                 C141320) *
                C141497 +
            ((C139366 * C7886 + C141452 * C7889 + C139356 * C7888 +
              C141221 * C7891) *
                 C275 +
             (C139366 * C8127 + C141452 * C8582 + C139356 * C8129 +
              C141221 * C8584) *
                 C141320) *
                C68674) *
               C141487 -
           (((C70275 + C70274) * C141320 + (C69925 + C69924) * C275) * C68674 +
            ((C70273 + C70272) * C141320 + (C69921 + C69920) * C275) * C141497 +
            ((C139356 * C278 + C141221 * C581 + C139366 * C277 +
              C141452 * C580) *
                 C141320 +
             (C139356 * C110 + C141221 * C116 + C139366 * C109 +
              C141452 * C115) *
                 C275) *
                C141496) *
               C4148) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eezy[51] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C68771 * C108 + C141496 * C189 + C68772 * C823 +
                        C141497 * C912 + C68773 * C2960 + C68674 * C3026) *
                           C275 +
                       (C68771 * C276 + C141496 * C635 + C68772 * C1006 +
                        C141497 * C1419 + C68773 * C3084 + C68674 * C3362) *
                           C141320) *
                          C141452 +
                      ((C68799 + C68800 + C68801) * C275 +
                       (C69324 + C69325 + C69326) * C141320) *
                          C141221) *
                         C4148 -
                     (((C71334 + C71335 + C71336) * C141320 +
                       (C70707 + C70708 + C70709) * C275) *
                          C141221 +
                      ((C68773 * C8128 + C68674 * C8684 + C68772 * C3646 +
                        C141497 * C4004 + C68771 * C1784 + C141496 * C2197) *
                           C141320 +
                       (C68773 * C7887 + C68674 * C8006 + C68772 * C3490 +
                        C141497 * C3572 + C68771 * C1601 + C141496 * C1690) *
                           C275) *
                          C141452) *
                         C141487) *
                        C141277 * C2376 +
                    ((((C70709 + C70708 + C70707) * C275 +
                       (C71336 + C71335 + C71334) * C141320) *
                          C141452 +
                      ((C68771 * C1599 + C141496 * C1688 + C68772 * C3492 +
                        C141497 * C3574 + C68773 * C7888 + C68674 * C8007) *
                           C275 +
                       (C68771 * C1782 + C141496 * C2195 + C68772 * C3648 +
                        C141497 * C4006 + C68773 * C8129 + C68674 * C8685) *
                           C141320) *
                          C141221) *
                         C141487 -
                     (((C69327 + C69328 + C69329) * C141320 +
                       (C68808 + C68809 + C68810) * C275) *
                          C141221 +
                      ((C69326 + C69325 + C69324) * C141320 +
                       (C68801 + C68800 + C68799) * C275) *
                          C141452) *
                         C4148) *
                        C141277 * C141483)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[51] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C713 * C108 + C721 + C721 + C141320 * C714) * C141496 +
             C7785 * C141497 + C7786 * C68674) *
                C141452 +
            (C69404 + C69405 + C69406) * C141221) *
               C4148 -
           ((C71435 + C71436 + C71437) * C141221 +
            (C11462 * C68674 + C11463 * C141497 +
             (C713 * C1601 + C2295 + C2295 + C141320 * C2283) * C141496) *
                C141452) *
               C141487) *
              C141277 * C2376 +
          (((C71437 + C71436 + C71435) * C141452 +
            (C2304 * C141496 + C24860 * C141497 +
             (C713 * C7888 + C8804 + C8804 + C141320 * C8795) * C68674) *
                C141221) *
               C141487 -
           ((C69407 + C69408 + C69409) * C141221 +
            (C69406 + C69405 + C69404) * C141452) *
               C4148) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eexx[52] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C68675 * C108 + C68680 + C68680 + C141452 * C120 +
                       C68677 * C109 + C68681 + C68681 + C141221 * C121) *
                          C141320 * C141496 +
                      (C69544 + C69545) * C141320 * C141497 + C72401 * C68674) *
                         C4148 -
                     ((C73153 + C73154) * C141320 * C68674 +
                      (C73155 + C73156) * C141320 * C141497 +
                      (C68677 * C1600 + C70586 + C70586 + C141221 * C1610 +
                       C68675 * C1601 + C70587 + C70587 + C141452 * C1611) *
                          C141320 * C141496) *
                         C141487) *
                        C816 +
                    (((C73156 + C73155) * C141320 * C141496 +
                      (C73154 + C73153) * C141320 * C141497 +
                      (C68675 * C10551 + C73143 + C73143 + C141452 * C10555 +
                       C68677 * C10552 + C73144 + C73144 + C141221 * C10556) *
                          C141320 * C68674) *
                         C141487 -
                     ((C72406 + C72407) * C141320 * C68674 +
                      (C69547 + C69546) * C141320 * C141497 +
                      (C69545 + C69544) * C141320 * C141496) *
                         C4148) *
                        C141485) *
                   C141243) /
                  (p * q * std::sqrt(p + q));
    d2eexy[52] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C68771 * C108 + C141496 * C189 + C68772 * C823 +
                       C141497 * C912 + C68773 * C2960 + C68674 * C3026) *
                          C139366 +
                      (C68771 * C114 + C141496 * C195 + C68772 * C828 +
                       C141497 * C917 + C68773 * C2964 + C68674 * C3030) *
                          C141452 +
                      (C68799 + C68800 + C68801) * C139356 +
                      (C68802 + C68803 + C68804) * C141221) *
                         C141320 * C4148 -
                     ((C70704 + C70705 + C70706) * C141221 +
                      (C70707 + C70708 + C70709) * C139356 +
                      (C68773 * C7890 + C68674 * C8009 + C68772 * C3494 +
                       C141497 * C3576 + C68771 * C1606 + C141496 * C1695) *
                          C141452 +
                      (C68773 * C7887 + C68674 * C8006 + C68772 * C3490 +
                       C141497 * C3572 + C68771 * C1601 + C141496 * C1690) *
                          C139366) *
                         C141320 * C141487) *
                        C816 +
                    (((C68771 * C3490 + C141496 * C3572 + C68772 * C7887 +
                       C141497 * C8006 + C68773 * C10551 + C68674 * C10677) *
                          C139366 +
                      (C68771 * C3494 + C141496 * C3576 + C68772 * C7890 +
                       C141497 * C8009 + C68773 * C10553 + C68674 * C10679) *
                          C141452 +
                      (C68771 * C3491 + C141496 * C3573 + C68772 * C7886 +
                       C141497 * C8005 + C68773 * C10552 + C68674 * C10678) *
                          C139356 +
                      (C68771 * C3495 + C141496 * C3577 + C68772 * C7889 +
                       C141497 * C8008 + C68773 * C10554 + C68674 * C10680) *
                          C141221) *
                         C141320 * C141487 -
                     ((C69662 + C69663 + C69664) * C141221 +
                      (C69665 + C69666 + C69667) * C139356 +
                      (C68773 * C6732 + C68674 * C6883 + C68772 * C2964 +
                       C141497 * C3030 + C68771 * C828 + C141496 * C917) *
                          C141452 +
                      (C68773 * C6729 + C68674 * C6880 + C68772 * C2960 +
                       C141497 * C3026 + C68771 * C823 + C141496 * C912) *
                          C139366) *
                         C141320 * C4148) *
                        C141485) *
                   C141243) /
                  (p * q * std::sqrt(p + q));
    d2eexz[52] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141320 * C276) * C139366 +
             (C275 * C114 + C141320 * C282) * C141452 + C305 * C139356 +
             C306 * C141221) *
                C141496 +
            (C69766 + C69767 + C69768 + C69769) * C141497 + C72562 * C68674) *
               C4148 -
           ((C73353 + C73354 + C73355 + C73356) * C68674 +
            (C73357 + C73358 + C73359 + C73360) * C141497 +
            (C1808 * C141221 + C1809 * C139356 +
             (C275 * C1606 + C141320 * C1789) * C141452 +
             (C275 * C1601 + C141320 * C1784) * C139366) *
                C141496) *
               C141487) *
              C816 +
          (((C73360 + C73359 + C73358 + C73357) * C141496 +
            (C73356 + C73355 + C73354 + C73353) * C141497 +
            (C58622 * C139366 + C58621 * C141452 +
             (C275 * C10552 + C141320 * C10780) * C139356 +
             (C275 * C10554 + C141320 * C10782) * C141221) *
                C68674) *
               C141487 -
           ((C72557 + C72558 + C72559 + C72560) * C68674 +
            (C69773 + C69772 + C69771 + C69770) * C141497 +
            (C69769 + C69768 + C69767 + C69766) * C141496) *
               C4148) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eeyx[52] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139366 * C108 + C141452 * C114 + C139356 * C109 +
             C141221 * C115) *
                C68771 +
            (C139366 * C189 + C141452 * C362 + C139356 * C190 +
             C141221 * C363) *
                C141496 +
            (C69912 + C69913) * C68772 + (C69914 + C69915) * C141497 +
            C72637 * C68773 + C72638 * C68674) *
               C141320 * C4148 -
           ((C73475 + C73476) * C68674 + (C73477 + C73478) * C68773 +
            (C73479 + C73480) * C141497 + (C73481 + C73482) * C68772 +
            (C139356 * C1689 + C141221 * C1877 + C139366 * C1690 +
             C141452 * C1878) *
                C141496 +
            (C139356 * C1600 + C141221 * C1605 + C139366 * C1601 +
             C141452 * C1606) *
                C68771) *
               C141320 * C141487) *
              C816 +
          (((C73482 + C73481) * C68771 + (C73480 + C73479) * C141496 +
            (C73478 + C73477) * C68772 + (C73476 + C73475) * C141497 +
            (C139366 * C10551 + C141452 * C10553 + C139356 * C10552 +
             C141221 * C10554) *
                C68773 +
            (C139366 * C10677 + C141452 * C10901 + C139356 * C10678 +
             C141221 * C10902) *
                C68674) *
               C141320 * C141487 -
           ((C72647 + C72648) * C68674 + (C72649 + C72650) * C68773 +
            (C69919 + C69918) * C141497 + (C69917 + C69916) * C68772 +
            (C69915 + C69914) * C141496 + (C69913 + C69912) * C68771) *
               C141320 * C4148) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eeyy[52] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C69032 * C108 + C69036 + C69036 + C141496 * C419 +
                       C69033 * C823 + C69037 + C69037 + C141497 * C1171 +
                       C69034 * C2960 + C69038 + C69038 + C68674 * C3196) *
                          C141452 +
                      (C69072 + C69073 + C69074) * C141221) *
                         C141320 * C4148 -
                     ((C71025 + C71026 + C71027) * C141221 +
                      (C69034 * C7887 + C71013 + C71013 + C68674 * C8345 +
                       C69033 * C3490 + C71014 + C71014 + C141497 * C3790 +
                       C69032 * C1601 + C71015 + C71015 + C141496 * C1949) *
                          C141452) *
                         C141320 * C141487) *
                        C816 +
                    (((C69032 * C3490 + C73581 + C73581 + C141496 * C3790 +
                       C69033 * C7887 + C73582 + C73582 + C141497 * C8345 +
                       C69034 * C10551 + C73583 + C73583 + C68674 * C11025) *
                          C141452 +
                      (C69032 * C3491 + C73584 + C73584 + C141496 * C3791 +
                       C69033 * C7886 + C73585 + C73585 + C141497 * C8344 +
                       C69034 * C10552 + C73586 + C73586 + C68674 * C11026) *
                          C141221) *
                         C141320 * C141487 -
                     ((C70047 + C70048 + C70049) * C141221 +
                      (C69034 * C6729 + C70035 + C70035 + C68674 * C7289 +
                       C69033 * C2960 + C70036 + C70036 + C141497 * C3196 +
                       C69032 * C823 + C70037 + C70037 + C141496 * C1171) *
                          C141452) *
                         C141320 * C4148) *
                        C141485) *
                   C141243) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[52] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141320 * C276) * C68771 +
             (C275 * C189 + C141320 * C501) * C141496 + C7032 * C68772 +
             C7428 * C141497 + C7034 * C68773 + C7429 * C68674) *
                C141452 +
            (C69152 + C69153 + C69154 + C69155 + C69156 + C69157) * C141221) *
               C4148 -
           ((C71126 + C71127 + C71128 + C71129 + C71130 + C71131) * C141221 +
            (C11138 * C68674 + C10797 * C68773 + C11139 * C141497 +
             C10799 * C68772 + (C275 * C1690 + C141320 * C2040) * C141496 +
             (C275 * C1601 + C141320 * C1784) * C68771) *
                C141452) *
               C141487) *
              C816 +
          (((C10799 * C68771 + C11139 * C141496 + C10797 * C68772 +
             C11138 * C141497 + C58622 * C68773 + C58850 * C68674) *
                C141452 +
            (C8145 * C68771 + C8482 * C141496 + C8143 * C68772 +
             C8481 * C141497 + (C275 * C10552 + C141320 * C10780) * C68773 +
             (C275 * C10678 + C141320 * C11132) * C68674) *
                C141221) *
               C141487 -
           ((C70148 + C70149 + C70150 + C70151 + C70152 + C70153) * C141221 +
            (C10208 * C68674 + C9954 * C68773 + C7429 * C141497 +
             C7034 * C68772 + C7428 * C141496 + C7032 * C68771) *
                C141452) *
               C4148) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eezx[52] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139366 * C108 + C141452 * C114 + C139356 * C109 +
              C141221 * C115) *
                 C275 +
             (C139366 * C276 + C141452 * C579 + C139356 * C277 +
              C141221 * C580) *
                 C141320) *
                C141496 +
            ((C69912 + C69913) * C275 + (C70268 + C70269) * C141320) * C141497 +
            C72888 * C68674) *
               C4148 -
           (((C73791 + C73792) * C141320 + (C73477 + C73478) * C275) * C68674 +
            ((C73793 + C73794) * C141320 + (C73481 + C73482) * C275) * C141497 +
            ((C139356 * C1783 + C141221 * C2125 + C139366 * C1784 +
              C141452 * C2126) *
                 C141320 +
             (C139356 * C1600 + C141221 * C1605 + C139366 * C1601 +
              C141452 * C1606) *
                 C275) *
                C141496) *
               C141487) *
              C816 +
          ((((C73482 + C73481) * C275 + (C73794 + C73793) * C141320) * C141496 +
            ((C73478 + C73477) * C275 + (C73792 + C73791) * C141320) * C141497 +
            ((C139366 * C10551 + C141452 * C10553 + C139356 * C10552 +
              C141221 * C10554) *
                 C275 +
             (C139366 * C10779 + C141452 * C11237 + C139356 * C10780 +
              C141221 * C11238) *
                 C141320) *
                C68674) *
               C141487 -
           (((C72886 + C72887) * C141320 + (C72649 + C72650) * C275) * C68674 +
            ((C70271 + C70270) * C141320 + (C69917 + C69916) * C275) * C141497 +
            ((C70269 + C70268) * C141320 + (C69913 + C69912) * C275) *
                C141496) *
               C4148) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eezy[52] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C68771 * C108 + C141496 * C189 + C68772 * C823 +
                        C141497 * C912 + C68773 * C2960 + C68674 * C3026) *
                           C275 +
                       (C68771 * C276 + C141496 * C635 + C68772 * C1006 +
                        C141497 * C1419 + C68773 * C3084 + C68674 * C3362) *
                           C141320) *
                          C141452 +
                      ((C68799 + C68800 + C68801) * C275 +
                       (C69324 + C69325 + C69326) * C141320) *
                          C141221) *
                         C4148 -
                     (((C71334 + C71335 + C71336) * C141320 +
                       (C70707 + C70708 + C70709) * C275) *
                          C141221 +
                      ((C68773 * C8128 + C68674 * C8684 + C68772 * C3646 +
                        C141497 * C4004 + C68771 * C1784 + C141496 * C2197) *
                           C141320 +
                       (C68773 * C7887 + C68674 * C8006 + C68772 * C3490 +
                        C141497 * C3572 + C68771 * C1601 + C141496 * C1690) *
                           C275) *
                          C141452) *
                         C141487) *
                        C816 +
                    ((((C68771 * C3490 + C141496 * C3572 + C68772 * C7887 +
                        C141497 * C8006 + C68773 * C10551 + C68674 * C10677) *
                           C275 +
                       (C68771 * C3646 + C141496 * C4004 + C68772 * C8128 +
                        C141497 * C8684 + C68773 * C10779 + C68674 * C11349) *
                           C141320) *
                          C141452 +
                      ((C68771 * C3491 + C141496 * C3573 + C68772 * C7886 +
                        C141497 * C8005 + C68773 * C10552 + C68674 * C10678) *
                           C275 +
                       (C68771 * C3647 + C141496 * C4005 + C68772 * C8127 +
                        C141497 * C8683 + C68773 * C10780 + C68674 * C11350) *
                           C141320) *
                          C141221) *
                         C141487 -
                     (((C70380 + C70381 + C70382) * C141320 +
                       (C69665 + C69666 + C69667) * C275) *
                          C141221 +
                      ((C68773 * C7002 + C68674 * C7655 + C68772 * C3084 +
                        C141497 * C3362 + C68771 * C1006 + C141496 * C1419) *
                           C141320 +
                       (C68773 * C6729 + C68674 * C6880 + C68772 * C2960 +
                        C141497 * C3026 + C68771 * C823 + C141496 * C912) *
                           C275) *
                          C141452) *
                         C4148) *
                        C141485) *
                   C141243) /
                  (p * q * std::sqrt(p + q));
    d2eezz[52] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C713 * C108 + C721 + C721 + C141320 * C714) * C141496 +
             C7785 * C141497 + C7786 * C68674) *
                C141452 +
            (C69404 + C69405 + C69406) * C141221) *
               C4148 -
           ((C71435 + C71436 + C71437) * C141221 +
            (C11462 * C68674 + C11463 * C141497 +
             (C713 * C1601 + C2295 + C2295 + C141320 * C2283) * C141496) *
                C141452) *
               C141487) *
              C816 +
          (((C11463 * C141496 + C11462 * C141497 + C59072 * C68674) * C141452 +
            (C8810 * C141496 + C8809 * C141497 +
             (C713 * C10552 + C11457 + C11457 + C141320 * C11450) * C68674) *
                C141221) *
               C141487 -
           ((C70481 + C70482 + C70483) * C141221 +
            (C10453 * C68674 + C7786 * C141497 + C7785 * C141496) * C141452) *
               C4148) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eexx[53] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C68675 * C108 + C68680 + C68680 + C141452 * C120 +
                      C68677 * C109 + C68681 + C68681 + C141221 * C121) *
                         C141320 * C141496 +
                     (C69544 + C69545) * C141320 * C141497 + C72401 * C68674) *
                        C5322 -
                    ((C73153 + C73154) * C141320 * C68674 +
                     (C73155 + C73156) * C141320 * C141497 +
                     (C68677 * C1600 + C70586 + C70586 + C141221 * C1610 +
                      C68675 * C1601 + C70587 + C70587 + C141452 * C1611) *
                         C141320 * C141496) *
                        C5323 +
                    ((C68675 * C5325 + C75829 + C75829 + C141452 * C5333 +
                      C68677 * C5326 + C75830 + C75830 + C141221 * C5334) *
                         C141320 * C141496 +
                     (C68675 * C13301 + C75831 + C75831 + C141452 * C13309 +
                      C68677 * C13302 + C75832 + C75832 + C141221 * C13310) *
                         C141320 * C141497 +
                     (C68675 * C13303 + C75833 + C75833 + C141452 * C13311 +
                      C68677 * C13304 + C75834 + C75834 + C141221 * C13312) *
                         C141320 * C68674) *
                        C5324) *
                   C141277 * C141243) /
                  (p * q * std::sqrt(p + q));
    d2eexy[53] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C68771 * C108 + C141496 * C189 + C68772 * C823 +
                      C141497 * C912 + C68773 * C2960 + C68674 * C3026) *
                         C139366 +
                     (C68771 * C114 + C141496 * C195 + C68772 * C828 +
                      C141497 * C917 + C68773 * C2964 + C68674 * C3030) *
                         C141452 +
                     (C68799 + C68800 + C68801) * C139356 +
                     (C68802 + C68803 + C68804) * C141221) *
                        C141320 * C5322 -
                    ((C70704 + C70705 + C70706) * C141221 +
                     (C70707 + C70708 + C70709) * C139356 +
                     (C68773 * C7890 + C68674 * C8009 + C68772 * C3494 +
                      C141497 * C3576 + C68771 * C1606 + C141496 * C1695) *
                         C141452 +
                     (C68773 * C7887 + C68674 * C8006 + C68772 * C3490 +
                      C141497 * C3572 + C68771 * C1601 + C141496 * C1690) *
                         C139366) *
                        C141320 * C5323 +
                    ((C68771 * C5325 + C141496 * C5391 + C68772 * C13301 +
                      C141497 * C13393 + C68773 * C13303 + C68674 * C13394) *
                         C139366 +
                     (C68771 * C5329 + C141496 * C5395 + C68772 * C13305 +
                      C141497 * C13397 + C68773 * C13307 + C68674 * C13398) *
                         C141452 +
                     (C68771 * C5326 + C141496 * C5392 + C68772 * C13302 +
                      C141497 * C13395 + C68773 * C13304 + C68674 * C13396) *
                         C139356 +
                     (C68771 * C5330 + C141496 * C5396 + C68772 * C13306 +
                      C141497 * C13399 + C68773 * C13308 + C68674 * C13400) *
                         C141221) *
                        C141320 * C5324) *
                   C141277 * C141243) /
                  (p * q * std::sqrt(p + q));
    d2eexz[53] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141320 * C276) * C139366 +
            (C275 * C114 + C141320 * C282) * C141452 + C305 * C139356 +
            C306 * C141221) *
               C141496 +
           (C69766 + C69767 + C69768 + C69769) * C141497 + C72562 * C68674) *
              C5322 -
          ((C73353 + C73354 + C73355 + C73356) * C68674 +
           (C73357 + C73358 + C73359 + C73360) * C141497 +
           (C1808 * C141221 + C1809 * C139356 +
            (C275 * C1606 + C141320 * C1789) * C141452 +
            (C275 * C1601 + C141320 * C1784) * C139366) *
               C141496) *
              C5323 +
          (((C275 * C5325 + C141320 * C5449) * C139366 +
            (C275 * C5329 + C141320 * C5453) * C141452 +
            (C275 * C5326 + C141320 * C5450) * C139356 +
            (C275 * C5330 + C141320 * C5454) * C141221) *
               C141496 +
           ((C275 * C13301 + C141320 * C13475) * C139366 +
            (C275 * C13305 + C141320 * C13479) * C141452 +
            (C275 * C13302 + C141320 * C13476) * C139356 +
            (C275 * C13306 + C141320 * C13480) * C141221) *
               C141497 +
           ((C275 * C13303 + C141320 * C13477) * C139366 +
            (C275 * C13307 + C141320 * C13481) * C141452 +
            (C275 * C13304 + C141320 * C13478) * C139356 +
            (C275 * C13308 + C141320 * C13482) * C141221) *
               C68674) *
              C5324) *
         C141277 * C141243) /
        (p * q * std::sqrt(p + q));
    d2eeyx[53] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C139366 * C108 + C141452 * C114 + C139356 * C109 + C141221 * C115) *
               C68771 +
           (C139366 * C189 + C141452 * C362 + C139356 * C190 + C141221 * C363) *
               C141496 +
           (C69912 + C69913) * C68772 + (C69914 + C69915) * C141497 +
           C72637 * C68773 + C72638 * C68674) *
              C141320 * C5322 -
          ((C73475 + C73476) * C68674 + (C73477 + C73478) * C68773 +
           (C73479 + C73480) * C141497 + (C73481 + C73482) * C68772 +
           (C139356 * C1689 + C141221 * C1877 + C139366 * C1690 +
            C141452 * C1878) *
               C141496 +
           (C139356 * C1600 + C141221 * C1605 + C139366 * C1601 +
            C141452 * C1606) *
               C68771) *
              C141320 * C5323 +
          ((C139366 * C5325 + C141452 * C5329 + C139356 * C5326 +
            C141221 * C5330) *
               C68771 +
           (C139366 * C5391 + C141452 * C5507 + C139356 * C5392 +
            C141221 * C5508) *
               C141496 +
           (C139366 * C13301 + C141452 * C13305 + C139356 * C13302 +
            C141221 * C13306) *
               C68772 +
           (C139366 * C13393 + C141452 * C13557 + C139356 * C13395 +
            C141221 * C13558) *
               C141497 +
           (C139366 * C13303 + C141452 * C13307 + C139356 * C13304 +
            C141221 * C13308) *
               C68773 +
           (C139366 * C13394 + C141452 * C13559 + C139356 * C13396 +
            C141221 * C13560) *
               C68674) *
              C141320 * C5324) *
         C141277 * C141243) /
        (p * q * std::sqrt(p + q));
    d2eeyy[53] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C69032 * C108 + C69036 + C69036 + C141496 * C419 +
                      C69033 * C823 + C69037 + C69037 + C141497 * C1171 +
                      C69034 * C2960 + C69038 + C69038 + C68674 * C3196) *
                         C141452 +
                     (C69072 + C69073 + C69074) * C141221) *
                        C141320 * C5322 -
                    ((C71025 + C71026 + C71027) * C141221 +
                     (C69034 * C7887 + C71013 + C71013 + C68674 * C8345 +
                      C69033 * C3490 + C71014 + C71014 + C141497 * C3790 +
                      C69032 * C1601 + C71015 + C71015 + C141496 * C1949) *
                         C141452) *
                        C141320 * C5323 +
                    ((C69032 * C5325 + C76131 + C76131 + C141496 * C5561 +
                      C69033 * C13301 + C76132 + C76132 + C141497 * C13635 +
                      C69034 * C13303 + C76133 + C76133 + C68674 * C13636) *
                         C141452 +
                     (C69032 * C5326 + C76134 + C76134 + C141496 * C5562 +
                      C69033 * C13302 + C76135 + C76135 + C141497 * C13637 +
                      C69034 * C13304 + C76136 + C76136 + C68674 * C13638) *
                         C141221) *
                        C141320 * C5324) *
                   C141277 * C141243) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[53] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141320 * C276) * C68771 +
            (C275 * C189 + C141320 * C501) * C141496 + C7032 * C68772 +
            C7428 * C141497 + C7034 * C68773 + C7429 * C68674) *
               C141452 +
           (C69152 + C69153 + C69154 + C69155 + C69156 + C69157) * C141221) *
              C5322 -
          ((C71126 + C71127 + C71128 + C71129 + C71130 + C71131) * C141221 +
           (C11138 * C68674 + C10797 * C68773 + C11139 * C141497 +
            C10799 * C68772 + (C275 * C1690 + C141320 * C2040) * C141496 +
            (C275 * C1601 + C141320 * C1784) * C68771) *
               C141452) *
              C5323 +
          (((C275 * C5325 + C141320 * C5449) * C68771 +
            (C275 * C5391 + C141320 * C5619) * C141496 +
            (C275 * C13301 + C141320 * C13475) * C68772 +
            (C275 * C13393 + C141320 * C13719) * C141497 +
            (C275 * C13303 + C141320 * C13477) * C68773 +
            (C275 * C13394 + C141320 * C13720) * C68674) *
               C141452 +
           ((C275 * C5326 + C141320 * C5450) * C68771 +
            (C275 * C5392 + C141320 * C5620) * C141496 +
            (C275 * C13302 + C141320 * C13476) * C68772 +
            (C275 * C13395 + C141320 * C13721) * C141497 +
            (C275 * C13304 + C141320 * C13478) * C68773 +
            (C275 * C13396 + C141320 * C13722) * C68674) *
               C141221) *
              C5324) *
         C141277 * C141243) /
        (p * q * std::sqrt(p + q));
    d2eezx[53] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139366 * C108 + C141452 * C114 + C139356 * C109 +
             C141221 * C115) *
                C275 +
            (C139366 * C276 + C141452 * C579 + C139356 * C277 +
             C141221 * C580) *
                C141320) *
               C141496 +
           ((C69912 + C69913) * C275 + (C70268 + C70269) * C141320) * C141497 +
           C72888 * C68674) *
              C5322 -
          (((C73791 + C73792) * C141320 + (C73477 + C73478) * C275) * C68674 +
           ((C73793 + C73794) * C141320 + (C73481 + C73482) * C275) * C141497 +
           ((C139356 * C1783 + C141221 * C2125 + C139366 * C1784 +
             C141452 * C2126) *
                C141320 +
            (C139356 * C1600 + C141221 * C1605 + C139366 * C1601 +
             C141452 * C1606) *
                C275) *
               C141496) *
              C5323 +
          (((C139366 * C5325 + C141452 * C5329 + C139356 * C5326 +
             C141221 * C5330) *
                C275 +
            (C139366 * C5449 + C141452 * C5673 + C139356 * C5450 +
             C141221 * C5674) *
                C141320) *
               C141496 +
           ((C139366 * C13301 + C141452 * C13305 + C139356 * C13302 +
             C141221 * C13306) *
                C275 +
            (C139366 * C13475 + C141452 * C13797 + C139356 * C13476 +
             C141221 * C13798) *
                C141320) *
               C141497 +
           ((C139366 * C13303 + C141452 * C13307 + C139356 * C13304 +
             C141221 * C13308) *
                C275 +
            (C139366 * C13477 + C141452 * C13799 + C139356 * C13478 +
             C141221 * C13800) *
                C141320) *
               C68674) *
              C5324) *
         C141277 * C141243) /
        (p * q * std::sqrt(p + q));
    d2eezy[53] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C68771 * C108 + C141496 * C189 + C68772 * C823 +
                       C141497 * C912 + C68773 * C2960 + C68674 * C3026) *
                          C275 +
                      (C68771 * C276 + C141496 * C635 + C68772 * C1006 +
                       C141497 * C1419 + C68773 * C3084 + C68674 * C3362) *
                          C141320) *
                         C141452 +
                     ((C68799 + C68800 + C68801) * C275 +
                      (C69324 + C69325 + C69326) * C141320) *
                         C141221) *
                        C5322 -
                    (((C71334 + C71335 + C71336) * C141320 +
                      (C70707 + C70708 + C70709) * C275) *
                         C141221 +
                     ((C68773 * C8128 + C68674 * C8684 + C68772 * C3646 +
                       C141497 * C4004 + C68771 * C1784 + C141496 * C2197) *
                          C141320 +
                      (C68773 * C7887 + C68674 * C8006 + C68772 * C3490 +
                       C141497 * C3572 + C68771 * C1601 + C141496 * C1690) *
                          C275) *
                         C141452) *
                        C5323 +
                    (((C68771 * C5325 + C141496 * C5391 + C68772 * C13301 +
                       C141497 * C13393 + C68773 * C13303 + C68674 * C13394) *
                          C275 +
                      (C68771 * C5449 + C141496 * C5727 + C68772 * C13475 +
                       C141497 * C13875 + C68773 * C13477 + C68674 * C13876) *
                          C141320) *
                         C141452 +
                     ((C68771 * C5326 + C141496 * C5392 + C68772 * C13302 +
                       C141497 * C13395 + C68773 * C13304 + C68674 * C13396) *
                          C275 +
                      (C68771 * C5450 + C141496 * C5728 + C68772 * C13476 +
                       C141497 * C13877 + C68773 * C13478 + C68674 * C13878) *
                          C141320) *
                         C141221) *
                        C5324) *
                   C141277 * C141243) /
                  (p * q * std::sqrt(p + q));
    d2eezz[53] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C141320 * C714) * C141496 +
            C7785 * C141497 + C7786 * C68674) *
               C141452 +
           (C69404 + C69405 + C69406) * C141221) *
              C5322 -
          ((C71435 + C71436 + C71437) * C141221 +
           (C11462 * C68674 + C11463 * C141497 +
            (C713 * C1601 + C2295 + C2295 + C141320 * C2283) * C141496) *
               C141452) *
              C5323 +
          (((C713 * C5325 + C5786 + C5786 + C141320 * C5781) * C141496 +
            (C713 * C13301 + C13958 + C13958 + C141320 * C13953) * C141497 +
            (C713 * C13303 + C13959 + C13959 + C141320 * C13954) * C68674) *
               C141452 +
           ((C713 * C5326 + C5787 + C5787 + C141320 * C5782) * C141496 +
            (C713 * C13302 + C13960 + C13960 + C141320 * C13955) * C141497 +
            (C713 * C13304 + C13961 + C13961 + C141320 * C13956) * C68674) *
               C141221) *
              C5324) *
         C141277 * C141243) /
        (p * q * std::sqrt(p + q));
    d2eexx[54] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C55526 * C108 + C55529 + C55529 + C141216 * C120) * C141469 +
            C62512 * C141384) *
               C141496 +
           (C56053 * C141469 + C58473 * C141384) * C141497 +
           (C56054 * C141469 + C58472 * C141384) * C68674) *
              C141294 * C141277 * C97 -
          (((C55526 * C7886 + C56751 + C56751 + C141216 * C7892) * C141384 +
            C56057 * C141469) *
               C68674 +
           (C61520 * C141384 + C56056 * C141469) * C141497 +
           (C62514 * C141384 +
            (C55526 * C109 + C55536 + C55536 + C141216 * C121) * C141469) *
               C141496) *
              C141294 * C141277 * C98 +
          (((C55526 * C110 + C55537 + C55537 + C141216 * C122) * C141469 +
            (C55526 * C1599 + C60809 + C60809 + C141216 * C1609) * C141384) *
               C141496 +
           ((C55526 * C821 + C55538 + C55538 + C141216 * C831) * C141469 +
            (C55526 * C3492 + C60811 + C60811 + C141216 * C3500) * C141384) *
               C141497 +
           ((C55526 * C2962 + C55539 + C55539 + C141216 * C2970) * C141469 +
            (C55526 * C7888 + C86371 + C86371 + C141216 * C7894) * C141384) *
               C68674) *
              C141294 * C141277 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eexy[54] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C68771 * C108 + C141496 * C189 + C68772 * C823 +
                       C141497 * C912 + C68773 * C2960 + C68674 * C3026) *
                          C55527 +
                      (C68771 * C114 + C141496 * C195 + C68772 * C828 +
                       C141497 * C917 + C68773 * C2964 + C68674 * C3030) *
                          C141216) *
                         C141469 +
                     ((C68771 * C1601 + C141496 * C1690 + C68772 * C3490 +
                       C141497 * C3572 + C68773 * C7887 + C68674 * C8006) *
                          C55527 +
                      (C68771 * C1606 + C141496 * C1695 + C68772 * C3494 +
                       C141497 * C3576 + C68773 * C7890 + C68674 * C8009) *
                          C141216) *
                         C141384) *
                        C141294 * C141277 * C97 -
                    (((C70704 + C70705 + C70706) * C141216 +
                      (C70707 + C70708 + C70709) * C55527) *
                         C141384 +
                     ((C68804 + C68803 + C68802) * C141216 +
                      (C68801 + C68800 + C68799) * C55527) *
                         C141469) *
                        C141294 * C141277 * C98 +
                    (((C68810 + C68809 + C68808) * C55527 +
                      (C68807 + C68806 + C68805) * C141216) *
                         C141469 +
                     ((C68771 * C1599 + C141496 * C1688 + C68772 * C3492 +
                       C141497 * C3574 + C68773 * C7888 + C68674 * C8007) *
                          C55527 +
                      (C68771 * C1604 + C141496 * C1693 + C68772 * C3496 +
                       C141497 * C3578 + C68773 * C7891 + C68674 * C8010) *
                          C141216) *
                         C141384) *
                        C141294 * C141277 * C99)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[54] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30075 * C108 + C141469 * C276 + C30076 * C1601 +
             C141384 * C1784) *
                C55527 +
            (C30075 * C114 + C141469 * C282 + C30076 * C1606 +
             C141384 * C1789) *
                C141216) *
               C141496 +
           ((C38926 + C38927) * C55527 + (C38928 + C38929) * C141216) *
               C141497 +
           ((C42521 + C42520) * C55527 + (C42519 + C42518) * C141216) *
               C68674) *
              C141294 * C141277 * C97 -
          (((C38930 + C38931) * C141216 + (C38932 + C38933) * C55527) * C68674 +
           (C38924 * C141216 + C38925 * C55527) * C141497 +
           ((C30105 + C30104) * C141216 + (C30103 + C30102) * C55527) *
               C141496) *
              C141294 * C141277 * C98 +
          ((C30114 * C55527 + C30115 * C141216) * C141496 +
           ((C30960 + C30959) * C55527 + (C30958 + C30957) * C141216) *
               C141497 +
           ((C30075 * C2962 + C141469 * C3086 + C30076 * C7888 +
             C141384 * C8129) *
                C55527 +
            (C30075 * C2966 + C141469 * C3090 + C30076 * C7891 +
             C141384 * C8132) *
                C141216) *
               C68674) *
              C141294 * C141277 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[54] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C55527 * C108 + C141216 * C114) * C68771 +
            (C55527 * C189 + C141216 * C362) * C141496 + C56299 * C68772 +
            C56300 * C141497 + C56301 * C68773 + C56302 * C68674) *
               C141469 +
           (C62870 * C68771 + C62871 * C141496 + C58709 * C68772 +
            C58708 * C141497 + C58707 * C68773 + C58706 * C68674) *
               C141384) *
              C141294 * C141277 * C97 -
          (((C55527 * C8005 + C141216 * C8243) * C68674 +
            (C55527 * C7886 + C141216 * C7889) * C68773 + C61852 * C141497 +
            C61851 * C68772 + C62875 * C141496 + C62874 * C68771) *
               C141384 +
           (C56308 * C68674 + C56307 * C68773 + C56306 * C141497 +
            C56305 * C68772 + (C55527 * C190 + C141216 * C363) * C141496 +
            (C55527 * C109 + C141216 * C115) * C68771) *
               C141469) *
              C141294 * C141277 * C98 +
          (((C55527 * C110 + C141216 * C116) * C68771 +
            (C55527 * C191 + C141216 * C364) * C141496 +
            (C55527 * C821 + C141216 * C826) * C68772 +
            (C55527 * C910 + C141216 * C1098) * C141497 +
            (C55527 * C2962 + C141216 * C2966) * C68773 +
            (C55527 * C3028 + C141216 * C3144) * C68674) *
               C141469 +
           ((C55527 * C1599 + C141216 * C1604) * C68771 +
            (C55527 * C1688 + C141216 * C1876) * C141496 +
            (C55527 * C3492 + C141216 * C3496) * C68772 +
            (C55527 * C3574 + C141216 * C3722) * C141497 +
            (C55527 * C7888 + C141216 * C7891) * C68773 +
            (C55527 * C8007 + C141216 * C8245) * C68674) *
               C141384) *
              C141294 * C141277 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[54] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C69032 * C108 + C69036 + C69036 + C141496 * C419 +
                      C69033 * C823 + C69037 + C69037 + C141497 * C1171 +
                      C69034 * C2960 + C69038 + C69038 + C68674 * C3196) *
                         C141216 * C141469 +
                     (C69032 * C1601 + C71015 + C71015 + C141496 * C1949 +
                      C69033 * C3490 + C71014 + C71014 + C141497 * C3790 +
                      C69034 * C7887 + C71013 + C71013 + C68674 * C8345) *
                         C141216 * C141384) *
                        C141294 * C141277 * C97 -
                    ((C71025 + C71026 + C71027) * C141216 * C141384 +
                     (C69074 + C69073 + C69072) * C141216 * C141469) *
                        C141294 * C141277 * C98 +
                    ((C69077 + C69076 + C69075) * C141216 * C141469 +
                     (C69032 * C1599 + C71016 + C71016 + C141496 * C1947 +
                      C69033 * C3492 + C71017 + C71017 + C141497 * C3792 +
                      C69034 * C7888 + C71018 + C71018 + C68674 * C8346) *
                         C141216 * C141384) *
                        C141294 * C141277 * C99)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[54] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C30075 * C108 + C141469 * C276 + C30076 * C1601 + C141384 * C1784) *
               C68771 +
           (C30075 * C189 + C141469 * C501 + C30076 * C1690 + C141384 * C2040) *
               C141496 +
           (C38926 + C38927) * C68772 + (C39356 + C39357) * C141497 +
           (C42521 + C42520) * C68773 + (C42825 + C42824) * C68674) *
              C141216 * C141294 * C141277 * C97 -
          ((C39358 + C39359) * C68674 + (C38932 + C38933) * C68773 +
           C39355 * C141497 + C38925 * C68772 + (C30352 + C30351) * C141496 +
           (C30103 + C30102) * C68771) *
              C141216 * C141294 * C141277 * C98 +
          (C30114 * C68771 + C30357 * C141496 + (C30960 + C30959) * C68772 +
           (C31273 + C31272) * C141497 +
           (C30075 * C2962 + C141469 * C3086 + C30076 * C7888 +
            C141384 * C8129) *
               C68773 +
           (C30075 * C3028 + C141469 * C3256 + C30076 * C8007 +
            C141384 * C8471) *
               C68674) *
              C141216 * C141294 * C141277 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eezx[54] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C55527 * C108 + C141216 * C114) * C30075 +
                      (C55527 * C276 + C141216 * C579) * C141469 +
                      C62870 * C30076 + C63222 * C141384) *
                         C141496 +
                     (C56299 * C30075 + C56535 * C141469 + C58709 * C30076 +
                      C58929 * C141384) *
                         C141497 +
                     (C56301 * C30075 + C56536 * C141469 + C58707 * C30076 +
                      C58928 * C141384) *
                         C68674) *
                        C141294 * C141277 * C97 -
                    (((C55527 * C8127 + C141216 * C8582) * C141384 +
                      (C55527 * C7886 + C141216 * C7889) * C30076 +
                      C56539 * C141469 + C56307 * C30075) *
                         C68674 +
                     (C62178 * C141384 + C61851 * C30076 + C56538 * C141469 +
                      C56305 * C30075) *
                         C141497 +
                     (C63224 * C141384 + C62874 * C30076 +
                      (C55527 * C277 + C141216 * C580) * C141469 +
                      (C55527 * C109 + C141216 * C115) * C30075) *
                         C141496) *
                        C141294 * C141277 * C98 +
                    (((C55527 * C110 + C141216 * C116) * C30075 +
                      (C55527 * C278 + C141216 * C581) * C141469 +
                      (C55527 * C1599 + C141216 * C1604) * C30076 +
                      (C55527 * C1782 + C141216 * C2124) * C141384) *
                         C141496 +
                     ((C55527 * C821 + C141216 * C826) * C30075 +
                      (C55527 * C1004 + C141216 * C1346) * C141469 +
                      (C55527 * C3492 + C141216 * C3496) * C30076 +
                      (C55527 * C3648 + C141216 * C3936) * C141384) *
                         C141497 +
                     ((C55527 * C2962 + C141216 * C2966) * C30075 +
                      (C55527 * C3086 + C141216 * C3310) * C141469 +
                      (C55527 * C7888 + C141216 * C7891) * C30076 +
                      (C55527 * C8129 + C141216 * C8584) * C141384) *
                         C68674) *
                        C141294 * C141277 * C99)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[54] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C68771 * C108 + C141496 * C189 + C68772 * C823 +
                      C141497 * C912 + C68773 * C2960 + C68674 * C3026) *
                         C30075 +
                     (C68771 * C276 + C141496 * C635 + C68772 * C1006 +
                      C141497 * C1419 + C68773 * C3084 + C68674 * C3362) *
                         C141469 +
                     (C68771 * C1601 + C141496 * C1690 + C68772 * C3490 +
                      C141497 * C3572 + C68773 * C7887 + C68674 * C8006) *
                         C30076 +
                     (C68771 * C1784 + C141496 * C2197 + C68772 * C3646 +
                      C141497 * C4004 + C68773 * C8128 + C68674 * C8684) *
                         C141384) *
                        C141216 * C141294 * C141277 * C97 -
                    ((C71334 + C71335 + C71336) * C141384 +
                     (C70707 + C70708 + C70709) * C30076 +
                     (C69326 + C69325 + C69324) * C141469 +
                     (C68801 + C68800 + C68799) * C30075) *
                        C141216 * C141294 * C141277 * C98 +
                    ((C68810 + C68809 + C68808) * C30075 +
                     (C69329 + C69328 + C69327) * C141469 +
                     (C68771 * C1599 + C141496 * C1688 + C68772 * C3492 +
                      C141497 * C3574 + C68773 * C7888 + C68674 * C8007) *
                         C30076 +
                     (C68771 * C1782 + C141496 * C2195 + C68772 * C3648 +
                      C141497 * C4006 + C68773 * C8129 + C68674 * C8685) *
                         C141384) *
                        C141216 * C141294 * C141277 * C99)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[54] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C30596 * C108 + C30599 + C30599 + C141469 * C714 +
                      C30597 * C1601 + C30600 + C30600 + C141384 * C2283) *
                         C141496 +
                     (C39780 + C39781) * C141497 + (C43133 + C43132) * C68674) *
                        C141216 * C141294 * C141277 * C97 -
                    ((C39782 + C39783) * C68674 + C39771 * C141497 +
                     (C30634 + C30633) * C141496) *
                        C141216 * C141294 * C141277 * C98 +
                    (C30639 * C141496 + (C31606 + C31605) * C141497 +
                     (C30596 * C2962 + C34221 + C34221 + C141469 * C3418 +
                      C30597 * C7888 + C34222 + C34222 + C141384 * C8795) *
                         C68674) *
                        C141216 * C141294 * C141277 * C99)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[55] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C55526 * C108 + C55529 + C55529 + C141216 * C120) * C141469 +
             C62512 * C141384) *
                C141496 +
            (C87062 + C87063) * C141497 + (C87064 + C87065) * C68674) *
               C141294 * C816 -
           ((C58471 * C141384 + C56055 * C141469) * C68674 +
            (C87065 + C87064) * C141497 + (C87063 + C87062) * C141496) *
               C141294 * C141485) *
              C818 +
          (((C87066 + C87067) * C141496 + (C87068 + C87074) * C141497 +
            (C56058 * C141469 +
             (C55526 * C10552 + C56752 + C56752 + C141216 * C10556) * C141384) *
                C68674) *
               C141294 * C141485 -
           ((C87074 + C87068) * C68674 + (C87067 + C87066) * C141497 +
            (C62514 * C141384 +
             (C55526 * C109 + C55536 + C55536 + C141216 * C121) * C141469) *
                C141496) *
               C141294 * C816) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eexy[55] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C68771 * C108 + C141496 * C189 + C68772 * C823 +
                        C141497 * C912 + C68773 * C2960 + C68674 * C3026) *
                           C55527 +
                       (C68771 * C114 + C141496 * C195 + C68772 * C828 +
                        C141497 * C917 + C68773 * C2964 + C68674 * C3030) *
                           C141216) *
                          C141469 +
                      ((C68771 * C1601 + C141496 * C1690 + C68772 * C3490 +
                        C141497 * C3572 + C68773 * C7887 + C68674 * C8006) *
                           C55527 +
                       (C68771 * C1606 + C141496 * C1695 + C68772 * C3494 +
                        C141497 * C3576 + C68773 * C7890 + C68674 * C8009) *
                           C141216) *
                          C141384) *
                         C141294 * C816 -
                     (((C68773 * C10553 + C68674 * C10679 + C68772 * C7890 +
                        C141497 * C8009 + C68771 * C3494 + C141496 * C3576) *
                           C141216 +
                       (C68773 * C10551 + C68674 * C10677 + C68772 * C7887 +
                        C141497 * C8006 + C68771 * C3490 + C141496 * C3572) *
                           C55527) *
                          C141384 +
                      ((C68773 * C6732 + C68674 * C6883 + C68772 * C2964 +
                        C141497 * C3030 + C68771 * C828 + C141496 * C917) *
                           C141216 +
                       (C68773 * C6729 + C68674 * C6880 + C68772 * C2960 +
                        C141497 * C3026 + C68771 * C823 + C141496 * C912) *
                           C55527) *
                          C141469) *
                         C141294 * C141485) *
                        C818 +
                    ((((C69667 + C69666 + C69665) * C55527 +
                       (C69664 + C69663 + C69662) * C141216) *
                          C141469 +
                      ((C68771 * C3491 + C141496 * C3573 + C68772 * C7886 +
                        C141497 * C8005 + C68773 * C10552 + C68674 * C10678) *
                           C55527 +
                       (C68771 * C3495 + C141496 * C3577 + C68772 * C7889 +
                        C141497 * C8008 + C68773 * C10554 + C68674 * C10680) *
                           C141216) *
                          C141384) *
                         C141294 * C141485 -
                     (((C70704 + C70705 + C70706) * C141216 +
                       (C70707 + C70708 + C70709) * C55527) *
                          C141384 +
                      ((C68804 + C68803 + C68802) * C141216 +
                       (C68801 + C68800 + C68799) * C55527) *
                          C141469) *
                         C141294 * C816) *
                        C141483)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[55] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30075 * C108 + C141469 * C276 + C30076 * C1601 +
              C141384 * C1784) *
                 C55527 +
             (C30075 * C114 + C141469 * C282 + C30076 * C1606 +
              C141384 * C1789) *
                 C141216) *
                C141496 +
            ((C38926 + C38927) * C55527 + (C38928 + C38929) * C141216) *
                C141497 +
            ((C42521 + C42520) * C55527 + (C42519 + C42518) * C141216) *
                C68674) *
               C141294 * C816 -
           (((C30076 * C10553 + C141384 * C10781 + C30075 * C6732 +
              C141469 * C7005) *
                 C141216 +
             (C30076 * C10551 + C141384 * C10779 + C30075 * C6729 +
              C141469 * C7002) *
                 C55527) *
                C68674 +
            ((C42518 + C42519) * C141216 + (C42520 + C42521) * C55527) *
                C141497 +
            ((C38929 + C38928) * C141216 + (C38927 + C38926) * C55527) *
                C141496) *
               C141294 * C141485) *
              C818 +
          (((C38914 * C55527 + C38915 * C141216) * C141496 +
            ((C38933 + C38932) * C55527 + (C38931 + C38930) * C141216) *
                C141497 +
            ((C30075 * C6728 + C141469 * C7001 + C30076 * C10552 +
              C141384 * C10780) *
                 C55527 +
             (C30075 * C6731 + C141469 * C7004 + C30076 * C10554 +
              C141384 * C10782) *
                 C141216) *
                C68674) *
               C141294 * C141485 -
           (((C38930 + C38931) * C141216 + (C38932 + C38933) * C55527) *
                C68674 +
            (C38924 * C141216 + C38925 * C55527) * C141497 +
            ((C30105 + C30104) * C141216 + (C30103 + C30102) * C55527) *
                C141496) *
               C141294 * C816) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[55] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C55527 * C108 + C141216 * C114) * C68771 +
             (C55527 * C189 + C141216 * C362) * C141496 + C56299 * C68772 +
             C56300 * C141497 + C56301 * C68773 + C56302 * C68674) *
                C141469 +
            (C62870 * C68771 + C62871 * C141496 + C58709 * C68772 +
             C58708 * C141497 + C58707 * C68773 + C58706 * C68674) *
                C141384) *
               C141294 * C816 -
           ((C58704 * C68674 + C58705 * C68773 + C58706 * C141497 +
             C58707 * C68772 + C58708 * C141496 + C58709 * C68771) *
                C141384 +
            (C56304 * C68674 + C56303 * C68773 + C56302 * C141497 +
             C56301 * C68772 + C56300 * C141496 + C56299 * C68771) *
                C141469) *
               C141294 * C141485) *
              C818 +
          (((C56305 * C68771 + C56306 * C141496 + C56307 * C68772 +
             C56308 * C141497 + C56309 * C68773 + C56310 * C68674) *
                C141469 +
            (C61851 * C68771 + C61852 * C141496 + C87373 * C68772 +
             C87374 * C141497 + (C55527 * C10552 + C141216 * C10554) * C68773 +
             (C55527 * C10678 + C141216 * C10902) * C68674) *
                C141384) *
               C141294 * C141485 -
           ((C87374 * C68674 + C87373 * C68773 + C61852 * C141497 +
             C61851 * C68772 + C62875 * C141496 + C62874 * C68771) *
                C141384 +
            (C56308 * C68674 + C56307 * C68773 + C56306 * C141497 +
             C56305 * C68772 + (C55527 * C190 + C141216 * C363) * C141496 +
             (C55527 * C109 + C141216 * C115) * C68771) *
                C141469) *
               C141294 * C816) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[55] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C69032 * C108 + C69036 + C69036 + C141496 * C419 +
                       C69033 * C823 + C69037 + C69037 + C141497 * C1171 +
                       C69034 * C2960 + C69038 + C69038 + C68674 * C3196) *
                          C141216 * C141469 +
                      (C69032 * C1601 + C71015 + C71015 + C141496 * C1949 +
                       C69033 * C3490 + C71014 + C71014 + C141497 * C3790 +
                       C69034 * C7887 + C71013 + C71013 + C68674 * C8345) *
                          C141216 * C141384) *
                         C141294 * C816 -
                     ((C69034 * C10551 + C73583 + C73583 + C68674 * C11025 +
                       C69033 * C7887 + C73582 + C73582 + C141497 * C8345 +
                       C69032 * C3490 + C73581 + C73581 + C141496 * C3790) *
                          C141216 * C141384 +
                      (C69034 * C6729 + C70035 + C70035 + C68674 * C7289 +
                       C69033 * C2960 + C70036 + C70036 + C141497 * C3196 +
                       C69032 * C823 + C70037 + C70037 + C141496 * C1171) *
                          C141216 * C141469) *
                         C141294 * C141485) *
                        C818 +
                    (((C70049 + C70048 + C70047) * C141216 * C141469 +
                      (C69032 * C3491 + C73584 + C73584 + C141496 * C3791 +
                       C69033 * C7886 + C73585 + C73585 + C141497 * C8344 +
                       C69034 * C10552 + C73586 + C73586 + C68674 * C11026) *
                          C141216 * C141384) *
                         C141294 * C141485 -
                     ((C71025 + C71026 + C71027) * C141216 * C141384 +
                      (C69074 + C69073 + C69072) * C141216 * C141469) *
                         C141294 * C816) *
                        C141483)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[55] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30075 * C108 + C141469 * C276 + C30076 * C1601 +
             C141384 * C1784) *
                C68771 +
            (C30075 * C189 + C141469 * C501 + C30076 * C1690 +
             C141384 * C2040) *
                C141496 +
            (C38926 + C38927) * C68772 + (C39356 + C39357) * C141497 +
            (C42521 + C42520) * C68773 + (C42825 + C42824) * C68674) *
               C141216 * C141294 * C816 -
           ((C30076 * C10677 + C141384 * C11131 + C30075 * C6880 +
             C141469 * C7414) *
                C68674 +
            (C30076 * C10551 + C141384 * C10779 + C30075 * C6729 +
             C141469 * C7002) *
                C68773 +
            (C42824 + C42825) * C141497 + (C42520 + C42521) * C68772 +
            (C39357 + C39356) * C141496 + (C38927 + C38926) * C68771) *
               C141216 * C141294 * C141485) *
              C818 +
          ((C38914 * C68771 + C39350 * C141496 + (C38933 + C38932) * C68772 +
            (C39359 + C39358) * C141497 +
            (C30075 * C6728 + C141469 * C7001 + C30076 * C10552 +
             C141384 * C10780) *
                C68773 +
            (C30075 * C6879 + C141469 * C7413 + C30076 * C10678 +
             C141384 * C11132) *
                C68674) *
               C141216 * C141294 * C141485 -
           ((C39358 + C39359) * C68674 + (C38932 + C38933) * C68773 +
            C39355 * C141497 + C38925 * C68772 + (C30352 + C30351) * C141496 +
            (C30103 + C30102) * C68771) *
               C141216 * C141294 * C816) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eezx[55] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C55527 * C108 + C141216 * C114) * C30075 +
                       (C55527 * C276 + C141216 * C579) * C141469 +
                       C62870 * C30076 + C63222 * C141384) *
                          C141496 +
                      (C87669 + C87670 + C87671 + C87672) * C141497 +
                      (C87673 + C87674 + C87675 + C87676) * C68674) *
                         C141294 * C816 -
                     ((C58927 * C141384 + C58705 * C30076 + C56537 * C141469 +
                       C56303 * C30075) *
                          C68674 +
                      (C87676 + C87675 + C87674 + C87673) * C141497 +
                      (C87672 + C87671 + C87670 + C87669) * C141496) *
                         C141294 * C141485) *
                        C818 +
                    (((C87677 + C87678 + C87679 + C87680) * C141496 +
                      (C87681 + C87682 + C87683 + C87687) * C141497 +
                      (C56309 * C30075 + C56540 * C141469 +
                       (C55527 * C10552 + C141216 * C10554) * C30076 +
                       (C55527 * C10780 + C141216 * C11238) * C141384) *
                          C68674) *
                         C141294 * C141485 -
                     ((C87687 + C87683 + C87682 + C87681) * C68674 +
                      (C87680 + C87679 + C87678 + C87677) * C141497 +
                      (C63224 * C141384 + C62874 * C30076 +
                       (C55527 * C277 + C141216 * C580) * C141469 +
                       (C55527 * C109 + C141216 * C115) * C30075) *
                          C141496) *
                         C141294 * C816) *
                        C141483)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[55] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C68771 * C108 + C141496 * C189 + C68772 * C823 +
                       C141497 * C912 + C68773 * C2960 + C68674 * C3026) *
                          C30075 +
                      (C68771 * C276 + C141496 * C635 + C68772 * C1006 +
                       C141497 * C1419 + C68773 * C3084 + C68674 * C3362) *
                          C141469 +
                      (C68771 * C1601 + C141496 * C1690 + C68772 * C3490 +
                       C141497 * C3572 + C68773 * C7887 + C68674 * C8006) *
                          C30076 +
                      (C68771 * C1784 + C141496 * C2197 + C68772 * C3646 +
                       C141497 * C4004 + C68773 * C8128 + C68674 * C8684) *
                          C141384) *
                         C141216 * C141294 * C816 -
                     ((C68773 * C10779 + C68674 * C11349 + C68772 * C8128 +
                       C141497 * C8684 + C68771 * C3646 + C141496 * C4004) *
                          C141384 +
                      (C68773 * C10551 + C68674 * C10677 + C68772 * C7887 +
                       C141497 * C8006 + C68771 * C3490 + C141496 * C3572) *
                          C30076 +
                      (C68773 * C7002 + C68674 * C7655 + C68772 * C3084 +
                       C141497 * C3362 + C68771 * C1006 + C141496 * C1419) *
                          C141469 +
                      (C68773 * C6729 + C68674 * C6880 + C68772 * C2960 +
                       C141497 * C3026 + C68771 * C823 + C141496 * C912) *
                          C30075) *
                         C141216 * C141294 * C141485) *
                        C818 +
                    (((C69667 + C69666 + C69665) * C30075 +
                      (C70382 + C70381 + C70380) * C141469 +
                      (C68771 * C3491 + C141496 * C3573 + C68772 * C7886 +
                       C141497 * C8005 + C68773 * C10552 + C68674 * C10678) *
                          C30076 +
                      (C68771 * C3647 + C141496 * C4005 + C68772 * C8127 +
                       C141497 * C8683 + C68773 * C10780 + C68674 * C11350) *
                          C141384) *
                         C141216 * C141294 * C141485 -
                     ((C71334 + C71335 + C71336) * C141384 +
                      (C70707 + C70708 + C70709) * C30076 +
                      (C69326 + C69325 + C69324) * C141469 +
                      (C68801 + C68800 + C68799) * C30075) *
                         C141216 * C141294 * C816) *
                        C141483)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[55] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30596 * C108 + C30599 + C30599 + C141469 * C714 + C30597 * C1601 +
             C30600 + C30600 + C141384 * C2283) *
                C141496 +
            (C39780 + C39781) * C141497 + (C43133 + C43132) * C68674) *
               C141216 * C141294 * C816 -
           ((C30597 * C10551 + C43125 + C43125 + C141384 * C11449 +
             C30596 * C6729 + C43124 + C43124 + C141469 * C7765) *
                C68674 +
            (C43132 + C43133) * C141497 + (C39781 + C39780) * C141496) *
               C141216 * C141294 * C141485) *
              C818 +
          ((C39766 * C141496 + (C39783 + C39782) * C141497 +
            (C30596 * C6728 + C43126 + C43126 + C141469 * C7764 +
             C30597 * C10552 + C43127 + C43127 + C141384 * C11450) *
                C68674) *
               C141216 * C141294 * C141485 -
           ((C39782 + C39783) * C68674 + C39771 * C141497 +
            (C30634 + C30633) * C141496) *
               C141216 * C141294 * C816) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eexx[56] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C55526 * C108 + C55529 + C55529 + C141216 * C120) * C141469 +
             C62512 * C141384) *
                C141496 +
            (C87062 + C87063) * C141497 + (C87064 + C87065) * C68674) *
               C1596 -
           ((C64402 * C141384 + C58472 * C141469) * C68674 +
            (C61519 * C141384 + C58473 * C141469) * C141497 +
            (C62513 * C141384 + C62512 * C141469) * C141496) *
               C141487) *
              C141277 * C818 +
          (((C62514 * C141469 + C62515 * C141384) * C141496 +
            (C61520 * C141469 + C61521 * C141384) * C141497 +
            (C87073 * C141469 +
             (C55526 * C13304 + C61512 + C61512 + C141216 * C13312) * C141384) *
                C68674) *
               C141487 -
           ((C87074 + C87068) * C68674 + (C87067 + C87066) * C141497 +
            (C62514 * C141384 +
             (C55526 * C109 + C55536 + C55536 + C141216 * C121) * C141469) *
                C141496) *
               C1596) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eexy[56] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C68771 * C108 + C141496 * C189 + C68772 * C823 +
                        C141497 * C912 + C68773 * C2960 + C68674 * C3026) *
                           C55527 +
                       (C68771 * C114 + C141496 * C195 + C68772 * C828 +
                        C141497 * C917 + C68773 * C2964 + C68674 * C3030) *
                           C141216) *
                          C141469 +
                      ((C88092 + C88093 + C88094) * C55527 +
                       (C88095 + C88096 + C88097) * C141216) *
                          C141384) *
                         C1596 -
                     (((C68773 * C13307 + C68674 * C13398 + C68772 * C13305 +
                        C141497 * C13397 + C68771 * C5329 + C141496 * C5395) *
                           C141216 +
                       (C68773 * C13303 + C68674 * C13394 + C68772 * C13301 +
                        C141497 * C13393 + C68771 * C5325 + C141496 * C5391) *
                           C55527) *
                          C141384 +
                      ((C88097 + C88096 + C88095) * C141216 +
                       (C88094 + C88093 + C88092) * C55527) *
                          C141469) *
                         C141487) *
                        C141277 * C818 +
                    ((((C70709 + C70708 + C70707) * C55527 +
                       (C70706 + C70705 + C70704) * C141216) *
                          C141469 +
                      ((C68771 * C5326 + C141496 * C5392 + C68772 * C13302 +
                        C141497 * C13395 + C68773 * C13304 + C68674 * C13396) *
                           C55527 +
                       (C68771 * C5330 + C141496 * C5396 + C68772 * C13306 +
                        C141497 * C13399 + C68773 * C13308 + C68674 * C13400) *
                           C141216) *
                          C141384) *
                         C141487 -
                     (((C70704 + C70705 + C70706) * C141216 +
                       (C70707 + C70708 + C70709) * C55527) *
                          C141384 +
                      ((C68804 + C68803 + C68802) * C141216 +
                       (C68801 + C68800 + C68799) * C55527) *
                          C141469) *
                         C1596) *
                        C141277 * C141483)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[56] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30075 * C108 + C141469 * C276 + C30076 * C1601 +
              C141384 * C1784) *
                 C55527 +
             (C30075 * C114 + C141469 * C282 + C30076 * C1606 +
              C141384 * C1789) *
                 C141216) *
                C141496 +
            ((C38926 + C38927) * C55527 + (C38928 + C38929) * C141216) *
                C141497 +
            ((C42521 + C42520) * C55527 + (C42519 + C42518) * C141216) *
                C68674) *
               C1596 -
           (((C30076 * C13307 + C141384 * C13481 + C30075 * C7890 +
              C141469 * C8131) *
                 C141216 +
             (C30076 * C13303 + C141384 * C13477 + C30075 * C7887 +
              C141469 * C8128) *
                 C55527) *
                C68674 +
            ((C43546 + C43547) * C141216 + (C43548 + C43549) * C55527) *
                C141497 +
            ((C30076 * C5329 + C141384 * C5453 + C30075 * C1606 +
              C141469 * C1789) *
                 C141216 +
             (C30076 * C5325 + C141384 * C5449 + C30075 * C1601 +
              C141469 * C1784) *
                 C55527) *
                C141496) *
               C141487) *
              C141277 * C818 +
          ((((C31971 + C31970) * C55527 + (C31969 + C31968) * C141216) *
                C141496 +
            ((C40213 + C40212) * C55527 + (C40211 + C40210) * C141216) *
                C141497 +
            ((C30075 * C7886 + C141469 * C8127 + C30076 * C13304 +
              C141384 * C13478) *
                 C55527 +
             (C30075 * C7889 + C141469 * C8130 + C30076 * C13308 +
              C141384 * C13482) *
                 C141216) *
                C68674) *
               C141487 -
           (((C38930 + C38931) * C141216 + (C38932 + C38933) * C55527) *
                C68674 +
            (C38924 * C141216 + C38925 * C55527) * C141497 +
            ((C30105 + C30104) * C141216 + (C30103 + C30102) * C55527) *
                C141496) *
               C1596) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[56] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C55527 * C108 + C141216 * C114) * C68771 +
             (C55527 * C189 + C141216 * C362) * C141496 + C56299 * C68772 +
             C56300 * C141497 + C56301 * C68773 + C56302 * C68674) *
                C141469 +
            (C88294 + C88295 + C88296 + C88297 + C88298 + C88299) * C141384) *
               C1596 -
           ((C64648 * C68674 + C64649 * C68773 + C61850 * C141497 +
             C61849 * C68772 + C62873 * C141496 + C62872 * C68771) *
                C141384 +
            (C88299 + C88298 + C88297 + C88296 + C88295 + C88294) * C141469) *
               C141487) *
              C141277 * C818 +
          (((C88300 + C88301 + C88302 + C88303 + C88304 + C88305) * C141469 +
            (C62876 * C68771 + C62877 * C141496 + C61853 * C68772 +
             C61854 * C141497 + (C55527 * C13304 + C141216 * C13308) * C68773 +
             (C55527 * C13396 + C141216 * C13560) * C68674) *
                C141384) *
               C141487 -
           ((C88305 + C88304 + C88303 + C88302 + C88301 + C88300) * C141384 +
            (C56308 * C68674 + C56307 * C68773 + C56306 * C141497 +
             C56305 * C68772 + (C55527 * C190 + C141216 * C363) * C141496 +
             (C55527 * C109 + C141216 * C115) * C68771) *
                C141469) *
               C1596) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[56] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C69032 * C108 + C69036 + C69036 + C141496 * C419 +
                       C69033 * C823 + C69037 + C69037 + C141497 * C1171 +
                       C69034 * C2960 + C69038 + C69038 + C68674 * C3196) *
                          C141216 * C141469 +
                      (C88416 + C88417 + C88418) * C141216 * C141384) *
                         C1596 -
                     ((C69034 * C13303 + C76133 + C76133 + C68674 * C13636 +
                       C69033 * C13301 + C76132 + C76132 + C141497 * C13635 +
                       C69032 * C5325 + C76131 + C76131 + C141496 * C5561) *
                          C141216 * C141384 +
                      (C88418 + C88417 + C88416) * C141216 * C141469) *
                         C141487) *
                        C141277 * C818 +
                    (((C71027 + C71026 + C71025) * C141216 * C141469 +
                      (C69032 * C5326 + C76134 + C76134 + C141496 * C5562 +
                       C69033 * C13302 + C76135 + C76135 + C141497 * C13637 +
                       C69034 * C13304 + C76136 + C76136 + C68674 * C13638) *
                          C141216 * C141384) *
                         C141487 -
                     ((C71025 + C71026 + C71027) * C141216 * C141384 +
                      (C69074 + C69073 + C69072) * C141216 * C141469) *
                         C1596) *
                        C141277 * C141483)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[56] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30075 * C108 + C141469 * C276 + C30076 * C1601 +
             C141384 * C1784) *
                C68771 +
            (C30075 * C189 + C141469 * C501 + C30076 * C1690 +
             C141384 * C2040) *
                C141496 +
            (C38926 + C38927) * C68772 + (C39356 + C39357) * C141497 +
            (C42521 + C42520) * C68773 + (C42825 + C42824) * C68674) *
               C141216 * C1596 -
           ((C30076 * C13394 + C141384 * C13720 + C30075 * C8006 +
             C141469 * C8470) *
                C68674 +
            (C30076 * C13303 + C141384 * C13477 + C30075 * C7887 +
             C141469 * C8128) *
                C68773 +
            (C43962 + C43963) * C141497 + (C43548 + C43549) * C68772 +
            (C30076 * C5391 + C141384 * C5619 + C30075 * C1690 +
             C141469 * C2040) *
                C141496 +
            (C30076 * C5325 + C141384 * C5449 + C30075 * C1601 +
             C141469 * C1784) *
                C68771) *
               C141216 * C141487) *
              C141277 * C818 +
          (((C31971 + C31970) * C68771 + (C32319 + C32318) * C141496 +
            (C40213 + C40212) * C68772 + (C40631 + C40630) * C141497 +
            (C30075 * C7886 + C141469 * C8127 + C30076 * C13304 +
             C141384 * C13478) *
                C68773 +
            (C30075 * C8005 + C141469 * C8469 + C30076 * C13396 +
             C141384 * C13722) *
                C68674) *
               C141216 * C141487 -
           ((C39358 + C39359) * C68674 + (C38932 + C38933) * C68773 +
            C39355 * C141497 + C38925 * C68772 + (C30352 + C30351) * C141496 +
            (C30103 + C30102) * C68771) *
               C141216 * C1596) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eezx[56] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C55527 * C108 + C141216 * C114) * C30075 +
                       (C55527 * C276 + C141216 * C579) * C141469 +
                       C62870 * C30076 + C63222 * C141384) *
                          C141496 +
                      (C87669 + C87670 + C87671 + C87672) * C141497 +
                      (C87673 + C87674 + C87675 + C87676) * C68674) *
                         C1596 -
                     ((C64892 * C141384 + C64649 * C30076 + C58928 * C141469 +
                       C58707 * C30075) *
                          C68674 +
                      (C62177 * C141384 + C61849 * C30076 + C58929 * C141469 +
                       C58709 * C30075) *
                          C141497 +
                      (C63223 * C141384 + C62872 * C30076 + C63222 * C141469 +
                       C62870 * C30075) *
                          C141496) *
                         C141487) *
                        C141277 * C818 +
                    (((C62874 * C30075 + C63224 * C141469 + C62876 * C30076 +
                       C63225 * C141384) *
                          C141496 +
                      (C61851 * C30075 + C62178 * C141469 + C61853 * C30076 +
                       C62179 * C141384) *
                          C141497 +
                      (C87373 * C30075 + C87686 * C141469 +
                       (C55527 * C13304 + C141216 * C13308) * C30076 +
                       (C55527 * C13478 + C141216 * C13800) * C141384) *
                          C68674) *
                         C141487 -
                     ((C87687 + C87683 + C87682 + C87681) * C68674 +
                      (C87680 + C87679 + C87678 + C87677) * C141497 +
                      (C63224 * C141384 + C62874 * C30076 +
                       (C55527 * C277 + C141216 * C580) * C141469 +
                       (C55527 * C109 + C141216 * C115) * C30075) *
                          C141496) *
                         C1596) *
                        C141277 * C141483)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[56] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C68771 * C108 + C141496 * C189 + C68772 * C823 +
                       C141497 * C912 + C68773 * C2960 + C68674 * C3026) *
                          C30075 +
                      (C68771 * C276 + C141496 * C635 + C68772 * C1006 +
                       C141497 * C1419 + C68773 * C3084 + C68674 * C3362) *
                          C141469 +
                      (C88092 + C88093 + C88094) * C30076 +
                      (C88719 + C88720 + C88721) * C141384) *
                         C141216 * C1596 -
                     ((C68773 * C13477 + C68674 * C13876 + C68772 * C13475 +
                       C141497 * C13875 + C68771 * C5449 + C141496 * C5727) *
                          C141384 +
                      (C68773 * C13303 + C68674 * C13394 + C68772 * C13301 +
                       C141497 * C13393 + C68771 * C5325 + C141496 * C5391) *
                          C30076 +
                      (C88721 + C88720 + C88719) * C141469 +
                      (C88094 + C88093 + C88092) * C30075) *
                         C141216 * C141487) *
                        C141277 * C818 +
                    (((C70709 + C70708 + C70707) * C30075 +
                      (C71336 + C71335 + C71334) * C141469 +
                      (C68771 * C5326 + C141496 * C5392 + C68772 * C13302 +
                       C141497 * C13395 + C68773 * C13304 + C68674 * C13396) *
                          C30076 +
                      (C68771 * C5450 + C141496 * C5728 + C68772 * C13476 +
                       C141497 * C13877 + C68773 * C13478 + C68674 * C13878) *
                          C141384) *
                         C141216 * C141487 -
                     ((C71334 + C71335 + C71336) * C141384 +
                      (C70707 + C70708 + C70709) * C30076 +
                      (C69326 + C69325 + C69324) * C141469 +
                      (C68801 + C68800 + C68799) * C30075) *
                         C141216 * C1596) *
                        C141277 * C141483)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[56] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30596 * C108 + C30599 + C30599 + C141469 * C714 + C30597 * C1601 +
             C30600 + C30600 + C141384 * C2283) *
                C141496 +
            (C39780 + C39781) * C141497 + (C43133 + C43132) * C68674) *
               C141216 * C1596 -
           ((C30597 * C13303 + C44367 + C44367 + C141384 * C13954 +
             C30596 * C7887 + C44366 + C44366 + C141469 * C8794) *
                C68674 +
            (C44374 + C44375) * C141497 +
            (C30597 * C5325 + C32652 + C32652 + C141384 * C5781 +
             C30596 * C1601 + C32653 + C32653 + C141469 * C2283) *
                C141496) *
               C141216 * C141487) *
              C141277 * C818 +
          (((C32667 + C32666) * C141496 + (C41045 + C41044) * C141497 +
            (C30596 * C7886 + C44368 + C44368 + C141469 * C8793 +
             C30597 * C13304 + C44369 + C44369 + C141384 * C13956) *
                C68674) *
               C141216 * C141487 -
           ((C39782 + C39783) * C68674 + C39771 * C141497 +
            (C30634 + C30633) * C141496) *
               C141216 * C1596) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eexx[57] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C55526 * C108 + C55529 + C55529 + C141216 * C120) * C141469 +
             C62512 * C141384) *
                C141496 +
            (C87062 + C87063) * C141497 + (C87064 + C87065) * C68674) *
               C141294 * C2374 -
           ((C58471 * C141384 + C56055 * C141469) * C68674 +
            (C87065 + C87064) * C141497 + (C87063 + C87062) * C141496) *
               C141294 * C141485) *
              C2376 +
          (((C87066 + C87067) * C141496 + (C87068 + C87074) * C141497 +
            (C56058 * C141469 +
             (C55526 * C10552 + C56752 + C56752 + C141216 * C10556) * C141384) *
                C68674) *
               C141294 * C141485 -
           ((C87074 + C87068) * C68674 + (C87067 + C87066) * C141497 +
            (C62514 * C141384 +
             (C55526 * C109 + C55536 + C55536 + C141216 * C121) * C141469) *
                C141496) *
               C141294 * C2374) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eexy[57] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C68771 * C108 + C141496 * C189 + C68772 * C823 +
                        C141497 * C912 + C68773 * C2960 + C68674 * C3026) *
                           C55527 +
                       (C68771 * C114 + C141496 * C195 + C68772 * C828 +
                        C141497 * C917 + C68773 * C2964 + C68674 * C3030) *
                           C141216) *
                          C141469 +
                      ((C88092 + C88093 + C88094) * C55527 +
                       (C88095 + C88096 + C88097) * C141216) *
                          C141384) *
                         C141294 * C2374 -
                     (((C68773 * C10553 + C68674 * C10679 + C68772 * C7890 +
                        C141497 * C8009 + C68771 * C3494 + C141496 * C3576) *
                           C141216 +
                       (C68773 * C10551 + C68674 * C10677 + C68772 * C7887 +
                        C141497 * C8006 + C68771 * C3490 + C141496 * C3572) *
                           C55527) *
                          C141384 +
                      ((C68773 * C6732 + C68674 * C6883 + C68772 * C2964 +
                        C141497 * C3030 + C68771 * C828 + C141496 * C917) *
                           C141216 +
                       (C68773 * C6729 + C68674 * C6880 + C68772 * C2960 +
                        C141497 * C3026 + C68771 * C823 + C141496 * C912) *
                           C55527) *
                          C141469) *
                         C141294 * C141485) *
                        C2376 +
                    ((((C69667 + C69666 + C69665) * C55527 +
                       (C69664 + C69663 + C69662) * C141216) *
                          C141469 +
                      ((C68771 * C3491 + C141496 * C3573 + C68772 * C7886 +
                        C141497 * C8005 + C68773 * C10552 + C68674 * C10678) *
                           C55527 +
                       (C68771 * C3495 + C141496 * C3577 + C68772 * C7889 +
                        C141497 * C8008 + C68773 * C10554 + C68674 * C10680) *
                           C141216) *
                          C141384) *
                         C141294 * C141485 -
                     (((C70704 + C70705 + C70706) * C141216 +
                       (C70707 + C70708 + C70709) * C55527) *
                          C141384 +
                      ((C68804 + C68803 + C68802) * C141216 +
                       (C68801 + C68800 + C68799) * C55527) *
                          C141469) *
                         C141294 * C2374) *
                        C141483)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[57] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30075 * C108 + C141469 * C276 + C30076 * C1601 +
              C141384 * C1784) *
                 C55527 +
             (C30075 * C114 + C141469 * C282 + C30076 * C1606 +
              C141384 * C1789) *
                 C141216) *
                C141496 +
            ((C38926 + C38927) * C55527 + (C38928 + C38929) * C141216) *
                C141497 +
            ((C42521 + C42520) * C55527 + (C42519 + C42518) * C141216) *
                C68674) *
               C141294 * C2374 -
           (((C30076 * C10553 + C141384 * C10781 + C30075 * C6732 +
              C141469 * C7005) *
                 C141216 +
             (C30076 * C10551 + C141384 * C10779 + C30075 * C6729 +
              C141469 * C7002) *
                 C55527) *
                C68674 +
            ((C42518 + C42519) * C141216 + (C42520 + C42521) * C55527) *
                C141497 +
            ((C38929 + C38928) * C141216 + (C38927 + C38926) * C55527) *
                C141496) *
               C141294 * C141485) *
              C2376 +
          (((C38914 * C55527 + C38915 * C141216) * C141496 +
            ((C38933 + C38932) * C55527 + (C38931 + C38930) * C141216) *
                C141497 +
            ((C30075 * C6728 + C141469 * C7001 + C30076 * C10552 +
              C141384 * C10780) *
                 C55527 +
             (C30075 * C6731 + C141469 * C7004 + C30076 * C10554 +
              C141384 * C10782) *
                 C141216) *
                C68674) *
               C141294 * C141485 -
           (((C38930 + C38931) * C141216 + (C38932 + C38933) * C55527) *
                C68674 +
            (C38924 * C141216 + C38925 * C55527) * C141497 +
            ((C30105 + C30104) * C141216 + (C30103 + C30102) * C55527) *
                C141496) *
               C141294 * C2374) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[57] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C55527 * C108 + C141216 * C114) * C68771 +
             (C55527 * C189 + C141216 * C362) * C141496 + C56299 * C68772 +
             C56300 * C141497 + C56301 * C68773 + C56302 * C68674) *
                C141469 +
            (C88294 + C88295 + C88296 + C88297 + C88298 + C88299) * C141384) *
               C141294 * C2374 -
           ((C58704 * C68674 + C58705 * C68773 + C58706 * C141497 +
             C58707 * C68772 + C58708 * C141496 + C58709 * C68771) *
                C141384 +
            (C56304 * C68674 + C56303 * C68773 + C56302 * C141497 +
             C56301 * C68772 + C56300 * C141496 + C56299 * C68771) *
                C141469) *
               C141294 * C141485) *
              C2376 +
          (((C56305 * C68771 + C56306 * C141496 + C56307 * C68772 +
             C56308 * C141497 + C56309 * C68773 + C56310 * C68674) *
                C141469 +
            (C61851 * C68771 + C61852 * C141496 + C87373 * C68772 +
             C87374 * C141497 + (C55527 * C10552 + C141216 * C10554) * C68773 +
             (C55527 * C10678 + C141216 * C10902) * C68674) *
                C141384) *
               C141294 * C141485 -
           ((C88305 + C88304 + C88303 + C88302 + C88301 + C88300) * C141384 +
            (C56308 * C68674 + C56307 * C68773 + C56306 * C141497 +
             C56305 * C68772 + (C55527 * C190 + C141216 * C363) * C141496 +
             (C55527 * C109 + C141216 * C115) * C68771) *
                C141469) *
               C141294 * C2374) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[57] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C69032 * C108 + C69036 + C69036 + C141496 * C419 +
                       C69033 * C823 + C69037 + C69037 + C141497 * C1171 +
                       C69034 * C2960 + C69038 + C69038 + C68674 * C3196) *
                          C141216 * C141469 +
                      (C88416 + C88417 + C88418) * C141216 * C141384) *
                         C141294 * C2374 -
                     ((C69034 * C10551 + C73583 + C73583 + C68674 * C11025 +
                       C69033 * C7887 + C73582 + C73582 + C141497 * C8345 +
                       C69032 * C3490 + C73581 + C73581 + C141496 * C3790) *
                          C141216 * C141384 +
                      (C69034 * C6729 + C70035 + C70035 + C68674 * C7289 +
                       C69033 * C2960 + C70036 + C70036 + C141497 * C3196 +
                       C69032 * C823 + C70037 + C70037 + C141496 * C1171) *
                          C141216 * C141469) *
                         C141294 * C141485) *
                        C2376 +
                    (((C70049 + C70048 + C70047) * C141216 * C141469 +
                      (C69032 * C3491 + C73584 + C73584 + C141496 * C3791 +
                       C69033 * C7886 + C73585 + C73585 + C141497 * C8344 +
                       C69034 * C10552 + C73586 + C73586 + C68674 * C11026) *
                          C141216 * C141384) *
                         C141294 * C141485 -
                     ((C71025 + C71026 + C71027) * C141216 * C141384 +
                      (C69074 + C69073 + C69072) * C141216 * C141469) *
                         C141294 * C2374) *
                        C141483)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[57] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30075 * C108 + C141469 * C276 + C30076 * C1601 +
             C141384 * C1784) *
                C68771 +
            (C30075 * C189 + C141469 * C501 + C30076 * C1690 +
             C141384 * C2040) *
                C141496 +
            (C38926 + C38927) * C68772 + (C39356 + C39357) * C141497 +
            (C42521 + C42520) * C68773 + (C42825 + C42824) * C68674) *
               C141216 * C141294 * C2374 -
           ((C30076 * C10677 + C141384 * C11131 + C30075 * C6880 +
             C141469 * C7414) *
                C68674 +
            (C30076 * C10551 + C141384 * C10779 + C30075 * C6729 +
             C141469 * C7002) *
                C68773 +
            (C42824 + C42825) * C141497 + (C42520 + C42521) * C68772 +
            (C39357 + C39356) * C141496 + (C38927 + C38926) * C68771) *
               C141216 * C141294 * C141485) *
              C2376 +
          ((C38914 * C68771 + C39350 * C141496 + (C38933 + C38932) * C68772 +
            (C39359 + C39358) * C141497 +
            (C30075 * C6728 + C141469 * C7001 + C30076 * C10552 +
             C141384 * C10780) *
                C68773 +
            (C30075 * C6879 + C141469 * C7413 + C30076 * C10678 +
             C141384 * C11132) *
                C68674) *
               C141216 * C141294 * C141485 -
           ((C39358 + C39359) * C68674 + (C38932 + C38933) * C68773 +
            C39355 * C141497 + C38925 * C68772 + (C30352 + C30351) * C141496 +
            (C30103 + C30102) * C68771) *
               C141216 * C141294 * C2374) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eezx[57] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C55527 * C108 + C141216 * C114) * C30075 +
                       (C55527 * C276 + C141216 * C579) * C141469 +
                       C62870 * C30076 + C63222 * C141384) *
                          C141496 +
                      (C87669 + C87670 + C87671 + C87672) * C141497 +
                      (C87673 + C87674 + C87675 + C87676) * C68674) *
                         C141294 * C2374 -
                     ((C58927 * C141384 + C58705 * C30076 + C56537 * C141469 +
                       C56303 * C30075) *
                          C68674 +
                      (C87676 + C87675 + C87674 + C87673) * C141497 +
                      (C87672 + C87671 + C87670 + C87669) * C141496) *
                         C141294 * C141485) *
                        C2376 +
                    (((C87677 + C87678 + C87679 + C87680) * C141496 +
                      (C87681 + C87682 + C87683 + C87687) * C141497 +
                      (C56309 * C30075 + C56540 * C141469 +
                       (C55527 * C10552 + C141216 * C10554) * C30076 +
                       (C55527 * C10780 + C141216 * C11238) * C141384) *
                          C68674) *
                         C141294 * C141485 -
                     ((C87687 + C87683 + C87682 + C87681) * C68674 +
                      (C87680 + C87679 + C87678 + C87677) * C141497 +
                      (C63224 * C141384 + C62874 * C30076 +
                       (C55527 * C277 + C141216 * C580) * C141469 +
                       (C55527 * C109 + C141216 * C115) * C30075) *
                          C141496) *
                         C141294 * C2374) *
                        C141483)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[57] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C68771 * C108 + C141496 * C189 + C68772 * C823 +
                       C141497 * C912 + C68773 * C2960 + C68674 * C3026) *
                          C30075 +
                      (C68771 * C276 + C141496 * C635 + C68772 * C1006 +
                       C141497 * C1419 + C68773 * C3084 + C68674 * C3362) *
                          C141469 +
                      (C88092 + C88093 + C88094) * C30076 +
                      (C88719 + C88720 + C88721) * C141384) *
                         C141216 * C141294 * C2374 -
                     ((C68773 * C10779 + C68674 * C11349 + C68772 * C8128 +
                       C141497 * C8684 + C68771 * C3646 + C141496 * C4004) *
                          C141384 +
                      (C68773 * C10551 + C68674 * C10677 + C68772 * C7887 +
                       C141497 * C8006 + C68771 * C3490 + C141496 * C3572) *
                          C30076 +
                      (C68773 * C7002 + C68674 * C7655 + C68772 * C3084 +
                       C141497 * C3362 + C68771 * C1006 + C141496 * C1419) *
                          C141469 +
                      (C68773 * C6729 + C68674 * C6880 + C68772 * C2960 +
                       C141497 * C3026 + C68771 * C823 + C141496 * C912) *
                          C30075) *
                         C141216 * C141294 * C141485) *
                        C2376 +
                    (((C69667 + C69666 + C69665) * C30075 +
                      (C70382 + C70381 + C70380) * C141469 +
                      (C68771 * C3491 + C141496 * C3573 + C68772 * C7886 +
                       C141497 * C8005 + C68773 * C10552 + C68674 * C10678) *
                          C30076 +
                      (C68771 * C3647 + C141496 * C4005 + C68772 * C8127 +
                       C141497 * C8683 + C68773 * C10780 + C68674 * C11350) *
                          C141384) *
                         C141216 * C141294 * C141485 -
                     ((C71334 + C71335 + C71336) * C141384 +
                      (C70707 + C70708 + C70709) * C30076 +
                      (C69326 + C69325 + C69324) * C141469 +
                      (C68801 + C68800 + C68799) * C30075) *
                         C141216 * C141294 * C2374) *
                        C141483)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[57] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30596 * C108 + C30599 + C30599 + C141469 * C714 + C30597 * C1601 +
             C30600 + C30600 + C141384 * C2283) *
                C141496 +
            (C39780 + C39781) * C141497 + (C43133 + C43132) * C68674) *
               C141216 * C141294 * C2374 -
           ((C30597 * C10551 + C43125 + C43125 + C141384 * C11449 +
             C30596 * C6729 + C43124 + C43124 + C141469 * C7765) *
                C68674 +
            (C43132 + C43133) * C141497 + (C39781 + C39780) * C141496) *
               C141216 * C141294 * C141485) *
              C2376 +
          ((C39766 * C141496 + (C39783 + C39782) * C141497 +
            (C30596 * C6728 + C43126 + C43126 + C141469 * C7764 +
             C30597 * C10552 + C43127 + C43127 + C141384 * C11450) *
                C68674) *
               C141216 * C141294 * C141485 -
           ((C39782 + C39783) * C68674 + C39771 * C141497 +
            (C30634 + C30633) * C141496) *
               C141216 * C141294 * C2374) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eexx[58] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C55526 * C108 + C55529 + C55529 + C141216 * C120) * C141469 +
            C62512 * C141384) *
               C141496 +
           (C87062 + C87063) * C141497 + C89776 * C68674) *
              C141294 * C2956 -
          ((C89777 + C89778) * C68674 + (C87065 + C87064) * C141497 +
           (C87063 + C87062) * C141496) *
              C141294 * C2957 +
          (C89776 * C141496 + (C89778 + C89777) * C141497 +
           (C57941 * C141469 +
            (C55526 * C58454 + C58464 + C58464 + C141216 * C58456) * C141384) *
               C68674) *
              C141294 * C2958) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eexy[58] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C68771 * C108 + C141496 * C189 + C68772 * C823 +
                       C141497 * C912 + C68773 * C2960 + C68674 * C3026) *
                          C55527 +
                      (C68771 * C114 + C141496 * C195 + C68772 * C828 +
                       C141497 * C917 + C68773 * C2964 + C68674 * C3030) *
                          C141216) *
                         C141469 +
                     ((C88092 + C88093 + C88094) * C55527 +
                      (C88095 + C88096 + C88097) * C141216) *
                         C141384) *
                        C141294 * C2956 -
                    (((C68773 * C10553 + C68674 * C10679 + C68772 * C7890 +
                       C141497 * C8009 + C68771 * C3494 + C141496 * C3576) *
                          C141216 +
                      (C68773 * C10551 + C68674 * C10677 + C68772 * C7887 +
                       C141497 * C8006 + C68771 * C3490 + C141496 * C3572) *
                          C55527) *
                         C141384 +
                     ((C68773 * C6732 + C68674 * C6883 + C68772 * C2964 +
                       C141497 * C3030 + C68771 * C828 + C141496 * C917) *
                          C141216 +
                      (C68773 * C6729 + C68674 * C6880 + C68772 * C2960 +
                       C141497 * C3026 + C68771 * C823 + C141496 * C912) *
                          C55527) *
                         C141469) *
                        C141294 * C2957 +
                    (((C68771 * C2960 + C141496 * C3026 + C68772 * C6729 +
                       C141497 * C6880 + C68773 * C9768 + C68674 * C9862) *
                          C55527 +
                      (C68771 * C2964 + C141496 * C3030 + C68772 * C6732 +
                       C141497 * C6883 + C68773 * C9770 + C68674 * C9864) *
                          C141216) *
                         C141469 +
                     ((C68771 * C7887 + C141496 * C8006 + C68772 * C10551 +
                       C141497 * C10677 + C68773 * C58454 + C68674 * C58542) *
                          C55527 +
                      (C68771 * C7890 + C141496 * C8009 + C68772 * C10553 +
                       C141497 * C10679 + C68773 * C58455 + C68674 * C58543) *
                          C141216) *
                         C141384) *
                        C141294 * C2958) *
                   C141243) /
                  (p * q * std::sqrt(p + q));
    d2eexz[58] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30075 * C108 + C141469 * C276 + C30076 * C1601 +
             C141384 * C1784) *
                C55527 +
            (C30075 * C114 + C141469 * C282 + C30076 * C1606 +
             C141384 * C1789) *
                C141216) *
               C141496 +
           ((C38926 + C38927) * C55527 + (C38928 + C38929) * C141216) *
               C141497 +
           C89943 * C68674) *
              C141294 * C2956 -
          (((C89939 + C89940) * C141216 + (C89941 + C89942) * C55527) * C68674 +
           ((C42518 + C42519) * C141216 + (C42520 + C42521) * C55527) *
               C141497 +
           ((C38929 + C38928) * C141216 + (C38927 + C38926) * C55527) *
               C141496) *
              C141294 * C2957 +
          (C89943 * C141496 +
           ((C89942 + C89941) * C55527 + (C89940 + C89939) * C141216) *
               C141497 +
           ((C30075 * C9768 + C141469 * C9940 + C30076 * C58454 +
             C141384 * C58610) *
                C55527 +
            (C30075 * C9770 + C141469 * C9942 + C30076 * C58455 +
             C141384 * C58611) *
                C141216) *
               C68674) *
              C141294 * C2958) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eeyx[58] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C55527 * C108 + C141216 * C114) * C68771 +
            (C55527 * C189 + C141216 * C362) * C141496 + C56299 * C68772 +
            C56300 * C141497 + C56301 * C68773 + C56302 * C68674) *
               C141469 +
           (C88294 + C88295 + C88296 + C88297 + C88298 + C88299) * C141384) *
              C141294 * C2956 -
          ((C58704 * C68674 + C58705 * C68773 + C58706 * C141497 +
            C58707 * C68772 + C58708 * C141496 + C58709 * C68771) *
               C141384 +
           (C56304 * C68674 + C56303 * C68773 + C56302 * C141497 +
            C56301 * C68772 + C56300 * C141496 + C56299 * C68771) *
               C141469) *
              C141294 * C2957 +
          ((C56301 * C68771 + C56302 * C141496 + C56303 * C68772 +
            C56304 * C141497 + C58113 * C68773 + C58112 * C68674) *
               C141469 +
           (C58707 * C68771 + C58706 * C141496 + C58705 * C68772 +
            C58704 * C141497 + (C55527 * C58454 + C141216 * C58455) * C68773 +
            (C55527 * C58542 + C141216 * C58690) * C68674) *
               C141384) *
              C141294 * C2958) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eeyy[58] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C69032 * C108 + C69036 + C69036 + C141496 * C419 +
                      C69033 * C823 + C69037 + C69037 + C141497 * C1171 +
                      C69034 * C2960 + C69038 + C69038 + C68674 * C3196) *
                         C141216 * C141469 +
                     (C88416 + C88417 + C88418) * C141216 * C141384) *
                        C141294 * C2956 -
                    ((C69034 * C10551 + C73583 + C73583 + C68674 * C11025 +
                      C69033 * C7887 + C73582 + C73582 + C141497 * C8345 +
                      C69032 * C3490 + C73581 + C73581 + C141496 * C3790) *
                         C141216 * C141384 +
                     (C69034 * C6729 + C70035 + C70035 + C68674 * C7289 +
                      C69033 * C2960 + C70036 + C70036 + C141497 * C3196 +
                      C69032 * C823 + C70037 + C70037 + C141496 * C1171) *
                         C141216 * C141469) *
                        C141294 * C2957 +
                    ((C69032 * C2960 + C72725 + C72725 + C141496 * C3196 +
                      C69033 * C6729 + C72726 + C72726 + C141497 * C7289 +
                      C69034 * C9768 + C72727 + C72727 + C68674 * C10121) *
                         C141216 * C141469 +
                     (C69032 * C7887 + C90092 + C90092 + C141496 * C8345 +
                      C69033 * C10551 + C90093 + C90093 + C141497 * C11025 +
                      C69034 * C58454 + C90094 + C90094 + C68674 * C58775) *
                         C141216 * C141384) *
                        C141294 * C2958) *
                   C141243) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[58] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C30075 * C108 + C141469 * C276 + C30076 * C1601 + C141384 * C1784) *
               C68771 +
           (C30075 * C189 + C141469 * C501 + C30076 * C1690 + C141384 * C2040) *
               C141496 +
           (C38926 + C38927) * C68772 + (C39356 + C39357) * C141497 +
           C89927 * C68773 + C90169 * C68674) *
              C141216 * C141294 * C2956 -
          ((C90174 + C90175) * C68674 + (C89941 + C89942) * C68773 +
           (C42824 + C42825) * C141497 + (C42520 + C42521) * C68772 +
           (C39357 + C39356) * C141496 + (C38927 + C38926) * C68771) *
              C141216 * C141294 * C2957 +
          (C89927 * C68771 + C90169 * C141496 + (C89942 + C89941) * C68772 +
           (C90175 + C90174) * C141497 +
           (C30075 * C9768 + C141469 * C9940 + C30076 * C58454 +
            C141384 * C58610) *
               C68773 +
           (C30075 * C9862 + C141469 * C10203 + C30076 * C58542 +
            C141384 * C58846) *
               C68674) *
              C141216 * C141294 * C2958) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eezx[58] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C55527 * C108 + C141216 * C114) * C30075 +
            (C55527 * C276 + C141216 * C579) * C141469 + C62870 * C30076 +
            C63222 * C141384) *
               C141496 +
           (C87669 + C87670 + C87671 + C87672) * C141497 + C90256 * C68674) *
              C141294 * C2956 -
          ((C90251 + C90252 + C90253 + C90254) * C68674 +
           (C87676 + C87675 + C87674 + C87673) * C141497 +
           (C87672 + C87671 + C87670 + C87669) * C141496) *
              C141294 * C2957 +
          (C90256 * C141496 + (C90254 + C90253 + C90252 + C90251) * C141497 +
           (C58113 * C30075 + C58279 * C141469 +
            (C55527 * C58454 + C141216 * C58455) * C30076 +
            (C55527 * C58610 + C141216 * C58916) * C141384) *
               C68674) *
              C141294 * C2958) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eezy[58] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C68771 * C108 + C141496 * C189 + C68772 * C823 +
                      C141497 * C912 + C68773 * C2960 + C68674 * C3026) *
                         C30075 +
                     (C68771 * C276 + C141496 * C635 + C68772 * C1006 +
                      C141497 * C1419 + C68773 * C3084 + C68674 * C3362) *
                         C141469 +
                     (C88092 + C88093 + C88094) * C30076 +
                     (C88719 + C88720 + C88721) * C141384) *
                        C141216 * C141294 * C2956 -
                    ((C68773 * C10779 + C68674 * C11349 + C68772 * C8128 +
                      C141497 * C8684 + C68771 * C3646 + C141496 * C4004) *
                         C141384 +
                     (C68773 * C10551 + C68674 * C10677 + C68772 * C7887 +
                      C141497 * C8006 + C68771 * C3490 + C141496 * C3572) *
                         C30076 +
                     (C68773 * C7002 + C68674 * C7655 + C68772 * C3084 +
                      C141497 * C3362 + C68771 * C1006 + C141496 * C1419) *
                         C141469 +
                     (C68773 * C6729 + C68674 * C6880 + C68772 * C2960 +
                      C141497 * C3026 + C68771 * C823 + C141496 * C912) *
                         C30075) *
                        C141216 * C141294 * C2957 +
                    ((C68771 * C2960 + C141496 * C3026 + C68772 * C6729 +
                      C141497 * C6880 + C68773 * C9768 + C68674 * C9862) *
                         C30075 +
                     (C68771 * C3084 + C141496 * C3362 + C68772 * C7002 +
                      C141497 * C7655 + C68773 * C9940 + C68674 * C10368) *
                         C141469 +
                     (C68771 * C7887 + C141496 * C8006 + C68772 * C10551 +
                      C141497 * C10677 + C68773 * C58454 + C68674 * C58542) *
                         C30076 +
                     (C68771 * C8128 + C141496 * C8684 + C68772 * C10779 +
                      C141497 * C11349 + C68773 * C58610 + C68674 * C58998) *
                         C141384) *
                        C141216 * C141294 * C2958) *
                   C141243) /
                  (p * q * std::sqrt(p + q));
    d2eezz[58] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C30596 * C108 + C30599 + C30599 + C141469 * C714 +
                      C30597 * C1601 + C30600 + C30600 + C141384 * C2283) *
                         C141496 +
                     (C39780 + C39781) * C141497 + C90405 * C68674) *
                        C141216 * C141294 * C2956 -
                    ((C90416 + C90417) * C68674 + (C43132 + C43133) * C141497 +
                     (C39781 + C39780) * C141496) *
                        C141216 * C141294 * C2957 +
                    (C90405 * C141496 + (C90417 + C90416) * C141497 +
                     (C30596 * C9768 + C90410 + C90410 + C141469 * C10444 +
                      C30597 * C58454 + C90411 + C90411 + C141384 * C59065) *
                         C68674) *
                        C141216 * C141294 * C2958) *
                   C141243) /
                  (p * q * std::sqrt(p + q));
    d2eexx[59] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C55526 * C108 + C55529 + C55529 + C141216 * C120) * C141469 +
             C62512 * C141384) *
                C141496 +
            (C87062 + C87063) * C141497 + C89776 * C68674) *
               C1596 -
           ((C90516 + C90517) * C68674 + (C90518 + C90519) * C141497 +
            (C62513 * C141384 + C62512 * C141469) * C141496) *
               C141487) *
              C2374 +
          (((C90519 + C90518) * C141496 + (C90517 + C90516) * C141497 +
            (C58471 * C141469 +
             (C55526 * C60310 + C60317 + C60317 + C141216 * C60312) * C141384) *
                C68674) *
               C141487 -
           ((C89777 + C89778) * C68674 + (C87065 + C87064) * C141497 +
            (C87063 + C87062) * C141496) *
               C1596) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eexy[59] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C68771 * C108 + C141496 * C189 + C68772 * C823 +
                        C141497 * C912 + C68773 * C2960 + C68674 * C3026) *
                           C55527 +
                       (C68771 * C114 + C141496 * C195 + C68772 * C828 +
                        C141497 * C917 + C68773 * C2964 + C68674 * C3030) *
                           C141216) *
                          C141469 +
                      ((C88092 + C88093 + C88094) * C55527 +
                       (C88095 + C88096 + C88097) * C141216) *
                          C141384) *
                         C1596 -
                     (((C68773 * C13307 + C68674 * C13398 + C68772 * C13305 +
                        C141497 * C13397 + C68771 * C5329 + C141496 * C5395) *
                           C141216 +
                       (C68773 * C13303 + C68674 * C13394 + C68772 * C13301 +
                        C141497 * C13393 + C68771 * C5325 + C141496 * C5391) *
                           C55527) *
                          C141384 +
                      ((C88097 + C88096 + C88095) * C141216 +
                       (C88094 + C88093 + C88092) * C55527) *
                          C141469) *
                         C141487) *
                        C2374 +
                    ((((C90630 + C90631 + C90632) * C55527 +
                       (C90633 + C90634 + C90635) * C141216) *
                          C141469 +
                      ((C68771 * C13301 + C141496 * C13393 + C68772 * C13303 +
                        C141497 * C13394 + C68773 * C60310 + C68674 * C60367) *
                           C55527 +
                       (C68771 * C13305 + C141496 * C13397 + C68772 * C13307 +
                        C141497 * C13398 + C68773 * C60311 + C68674 * C60368) *
                           C141216) *
                          C141384) *
                         C141487 -
                     (((C90635 + C90634 + C90633) * C141216 +
                       (C90632 + C90631 + C90630) * C55527) *
                          C141384 +
                      ((C68773 * C6732 + C68674 * C6883 + C68772 * C2964 +
                        C141497 * C3030 + C68771 * C828 + C141496 * C917) *
                           C141216 +
                       (C68773 * C6729 + C68674 * C6880 + C68772 * C2960 +
                        C141497 * C3026 + C68771 * C823 + C141496 * C912) *
                           C55527) *
                          C141469) *
                         C1596) *
                        C141485) *
                   C141243) /
                  (p * q * std::sqrt(p + q));
    d2eexz[59] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30075 * C108 + C141469 * C276 + C30076 * C1601 +
              C141384 * C1784) *
                 C55527 +
             (C30075 * C114 + C141469 * C282 + C30076 * C1606 +
              C141384 * C1789) *
                 C141216) *
                C141496 +
            ((C38926 + C38927) * C55527 + (C38928 + C38929) * C141216) *
                C141497 +
            C89943 * C68674) *
               C1596 -
           (((C90742 + C90743) * C141216 + (C90744 + C90745) * C55527) *
                C68674 +
            ((C43546 + C43547) * C141216 + (C43548 + C43549) * C55527) *
                C141497 +
            ((C30076 * C5329 + C141384 * C5453 + C30075 * C1606 +
              C141469 * C1789) *
                 C141216 +
             (C30076 * C5325 + C141384 * C5449 + C30075 * C1601 +
              C141469 * C1784) *
                 C55527) *
                C141496) *
               C141487) *
              C2374 +
          ((((C43549 + C43548) * C55527 + (C43547 + C43546) * C141216) *
                C141496 +
            ((C90745 + C90744) * C55527 + (C90743 + C90742) * C141216) *
                C141497 +
            ((C30075 * C10551 + C141469 * C10779 + C30076 * C60310 +
              C141384 * C60419) *
                 C55527 +
             (C30075 * C10553 + C141469 * C10781 + C30076 * C60311 +
              C141384 * C60420) *
                 C141216) *
                C68674) *
               C141487 -
           (((C89939 + C89940) * C141216 + (C89941 + C89942) * C55527) *
                C68674 +
            ((C42518 + C42519) * C141216 + (C42520 + C42521) * C55527) *
                C141497 +
            ((C38929 + C38928) * C141216 + (C38927 + C38926) * C55527) *
                C141496) *
               C1596) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eeyx[59] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C55527 * C108 + C141216 * C114) * C68771 +
             (C55527 * C189 + C141216 * C362) * C141496 + C56299 * C68772 +
             C56300 * C141497 + C56301 * C68773 + C56302 * C68674) *
                C141469 +
            (C88294 + C88295 + C88296 + C88297 + C88298 + C88299) * C141384) *
               C1596 -
           ((C64648 * C68674 + C64649 * C68773 + C61850 * C141497 +
             C61849 * C68772 + C62873 * C141496 + C62872 * C68771) *
                C141384 +
            (C88299 + C88298 + C88297 + C88296 + C88295 + C88294) * C141469) *
               C141487) *
              C2374 +
          (((C90844 + C90845 + C90846 + C90847 + C90848 + C90849) * C141469 +
            (C61849 * C68771 + C61850 * C141496 + C64649 * C68772 +
             C64648 * C141497 + (C55527 * C60310 + C141216 * C60311) * C68773 +
             (C55527 * C60367 + C141216 * C60471) * C68674) *
                C141384) *
               C141487 -
           ((C90849 + C90848 + C90847 + C90846 + C90845 + C90844) * C141384 +
            (C56304 * C68674 + C56303 * C68773 + C56302 * C141497 +
             C56301 * C68772 + C56300 * C141496 + C56299 * C68771) *
                C141469) *
               C1596) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eeyy[59] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C69032 * C108 + C69036 + C69036 + C141496 * C419 +
                       C69033 * C823 + C69037 + C69037 + C141497 * C1171 +
                       C69034 * C2960 + C69038 + C69038 + C68674 * C3196) *
                          C141216 * C141469 +
                      (C88416 + C88417 + C88418) * C141216 * C141384) *
                         C1596 -
                     ((C69034 * C13303 + C76133 + C76133 + C68674 * C13636 +
                       C69033 * C13301 + C76132 + C76132 + C141497 * C13635 +
                       C69032 * C5325 + C76131 + C76131 + C141496 * C5561) *
                          C141216 * C141384 +
                      (C88418 + C88417 + C88416) * C141216 * C141469) *
                         C141487) *
                        C2374 +
                    (((C90963 + C90964 + C90965) * C141216 * C141469 +
                      (C69032 * C13301 + C90954 + C90954 + C141496 * C13635 +
                       C69033 * C13303 + C90955 + C90955 + C141497 * C13636 +
                       C69034 * C60310 + C90956 + C90956 + C68674 * C60522) *
                          C141216 * C141384) *
                         C141487 -
                     ((C90965 + C90964 + C90963) * C141216 * C141384 +
                      (C69034 * C6729 + C70035 + C70035 + C68674 * C7289 +
                       C69033 * C2960 + C70036 + C70036 + C141497 * C3196 +
                       C69032 * C823 + C70037 + C70037 + C141496 * C1171) *
                          C141216 * C141469) *
                         C1596) *
                        C141485) *
                   C141243) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[59] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30075 * C108 + C141469 * C276 + C30076 * C1601 +
             C141384 * C1784) *
                C68771 +
            (C30075 * C189 + C141469 * C501 + C30076 * C1690 +
             C141384 * C2040) *
                C141496 +
            (C38926 + C38927) * C68772 + (C39356 + C39357) * C141497 +
            C89927 * C68773 + C90169 * C68674) *
               C141216 * C1596 -
           ((C91068 + C91069) * C68674 + (C90744 + C90745) * C68773 +
            (C43962 + C43963) * C141497 + (C43548 + C43549) * C68772 +
            (C30076 * C5391 + C141384 * C5619 + C30075 * C1690 +
             C141469 * C2040) *
                C141496 +
            (C30076 * C5325 + C141384 * C5449 + C30075 * C1601 +
             C141469 * C1784) *
                C68771) *
               C141216 * C141487) *
              C2374 +
          (((C43549 + C43548) * C68771 + (C43963 + C43962) * C141496 +
            (C90745 + C90744) * C68772 + (C91069 + C91068) * C141497 +
            (C30075 * C10551 + C141469 * C10779 + C30076 * C60310 +
             C141384 * C60419) *
                C68773 +
            (C30075 * C10677 + C141469 * C11131 + C30076 * C60367 +
             C141384 * C60577) *
                C68674) *
               C141216 * C141487 -
           ((C90174 + C90175) * C68674 + (C89941 + C89942) * C68773 +
            (C42824 + C42825) * C141497 + (C42520 + C42521) * C68772 +
            (C39357 + C39356) * C141496 + (C38927 + C38926) * C68771) *
               C141216 * C1596) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eezx[59] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C55527 * C108 + C141216 * C114) * C30075 +
             (C55527 * C276 + C141216 * C579) * C141469 + C62870 * C30076 +
             C63222 * C141384) *
                C141496 +
            (C87669 + C87670 + C87671 + C87672) * C141497 + C90256 * C68674) *
               C1596 -
           ((C91168 + C91169 + C91170 + C91171) * C68674 +
            (C91172 + C91173 + C91174 + C91175) * C141497 +
            (C63223 * C141384 + C62872 * C30076 + C63222 * C141469 +
             C62870 * C30075) *
                C141496) *
               C141487) *
              C2374 +
          (((C91175 + C91174 + C91173 + C91172) * C141496 +
            (C91171 + C91170 + C91169 + C91168) * C141497 +
            (C58705 * C30075 + C58927 * C141469 +
             (C55527 * C60310 + C141216 * C60311) * C30076 +
             (C55527 * C60419 + C141216 * C60628) * C141384) *
                C68674) *
               C141487 -
           ((C90251 + C90252 + C90253 + C90254) * C68674 +
            (C87676 + C87675 + C87674 + C87673) * C141497 +
            (C87672 + C87671 + C87670 + C87669) * C141496) *
               C1596) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eezy[59] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C68771 * C108 + C141496 * C189 + C68772 * C823 +
                       C141497 * C912 + C68773 * C2960 + C68674 * C3026) *
                          C30075 +
                      (C68771 * C276 + C141496 * C635 + C68772 * C1006 +
                       C141497 * C1419 + C68773 * C3084 + C68674 * C3362) *
                          C141469 +
                      (C88092 + C88093 + C88094) * C30076 +
                      (C88719 + C88720 + C88721) * C141384) *
                         C141216 * C1596 -
                     ((C68773 * C13477 + C68674 * C13876 + C68772 * C13475 +
                       C141497 * C13875 + C68771 * C5449 + C141496 * C5727) *
                          C141384 +
                      (C68773 * C13303 + C68674 * C13394 + C68772 * C13301 +
                       C141497 * C13393 + C68771 * C5325 + C141496 * C5391) *
                          C30076 +
                      (C88721 + C88720 + C88719) * C141469 +
                      (C88094 + C88093 + C88092) * C30075) *
                         C141216 * C141487) *
                        C2374 +
                    (((C90630 + C90631 + C90632) * C30075 +
                      (C91280 + C91281 + C91282) * C141469 +
                      (C68771 * C13301 + C141496 * C13393 + C68772 * C13303 +
                       C141497 * C13394 + C68773 * C60310 + C68674 * C60367) *
                          C30076 +
                      (C68771 * C13475 + C141496 * C13875 + C68772 * C13477 +
                       C141497 * C13876 + C68773 * C60419 + C68674 * C60679) *
                          C141384) *
                         C141216 * C141487 -
                     ((C91282 + C91281 + C91280) * C141384 +
                      (C90632 + C90631 + C90630) * C30076 +
                      (C68773 * C7002 + C68674 * C7655 + C68772 * C3084 +
                       C141497 * C3362 + C68771 * C1006 + C141496 * C1419) *
                          C141469 +
                      (C68773 * C6729 + C68674 * C6880 + C68772 * C2960 +
                       C141497 * C3026 + C68771 * C823 + C141496 * C912) *
                          C30075) *
                         C141216 * C1596) *
                        C141485) *
                   C141243) /
                  (p * q * std::sqrt(p + q));
    d2eezz[59] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30596 * C108 + C30599 + C30599 + C141469 * C714 + C30597 * C1601 +
             C30600 + C30600 + C141384 * C2283) *
                C141496 +
            (C39780 + C39781) * C141497 + C90405 * C68674) *
               C141216 * C1596 -
           ((C91391 + C91392) * C68674 + (C44374 + C44375) * C141497 +
            (C30597 * C5325 + C32652 + C32652 + C141384 * C5781 +
             C30596 * C1601 + C32653 + C32653 + C141469 * C2283) *
                C141496) *
               C141216 * C141487) *
              C2374 +
          (((C44375 + C44374) * C141496 + (C91392 + C91391) * C141497 +
            (C30596 * C10551 + C91385 + C91385 + C141469 * C11449 +
             C30597 * C60310 + C91386 + C91386 + C141384 * C60730) *
                C68674) *
               C141216 * C141487 -
           ((C90416 + C90417) * C68674 + (C43132 + C43133) * C141497 +
            (C39781 + C39780) * C141496) *
               C141216 * C1596) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eexx[60] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C55526 * C108 + C55529 + C55529 + C141216 * C120) * C141469 +
             C62512 * C141384) *
                C141496 +
            (C87062 + C87063) * C141497 + C89776 * C68674) *
               C4148 -
           ((C90516 + C90517) * C68674 + (C90518 + C90519) * C141497 +
            (C62513 * C141384 + C62512 * C141469) * C141496) *
               C141487) *
              C141277 * C2376 +
          (((C62514 * C141469 + C62515 * C141384) * C141496 +
            (C61520 * C141469 + C61521 * C141384) * C141497 +
            (C87073 * C141469 +
             (C55526 * C13304 + C61512 + C61512 + C141216 * C13312) * C141384) *
                C68674) *
               C141487 -
           ((C87074 + C87068) * C68674 + (C87067 + C87066) * C141497 +
            (C62514 * C141384 +
             (C55526 * C109 + C55536 + C55536 + C141216 * C121) * C141469) *
                C141496) *
               C4148) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eexy[60] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C68771 * C108 + C141496 * C189 + C68772 * C823 +
                        C141497 * C912 + C68773 * C2960 + C68674 * C3026) *
                           C55527 +
                       (C68771 * C114 + C141496 * C195 + C68772 * C828 +
                        C141497 * C917 + C68773 * C2964 + C68674 * C3030) *
                           C141216) *
                          C141469 +
                      ((C88092 + C88093 + C88094) * C55527 +
                       (C88095 + C88096 + C88097) * C141216) *
                          C141384) *
                         C4148 -
                     (((C68773 * C13307 + C68674 * C13398 + C68772 * C13305 +
                        C141497 * C13397 + C68771 * C5329 + C141496 * C5395) *
                           C141216 +
                       (C68773 * C13303 + C68674 * C13394 + C68772 * C13301 +
                        C141497 * C13393 + C68771 * C5325 + C141496 * C5391) *
                           C55527) *
                          C141384 +
                      ((C88097 + C88096 + C88095) * C141216 +
                       (C88094 + C88093 + C88092) * C55527) *
                          C141469) *
                         C141487) *
                        C141277 * C2376 +
                    ((((C70709 + C70708 + C70707) * C55527 +
                       (C70706 + C70705 + C70704) * C141216) *
                          C141469 +
                      ((C68771 * C5326 + C141496 * C5392 + C68772 * C13302 +
                        C141497 * C13395 + C68773 * C13304 + C68674 * C13396) *
                           C55527 +
                       (C68771 * C5330 + C141496 * C5396 + C68772 * C13306 +
                        C141497 * C13399 + C68773 * C13308 + C68674 * C13400) *
                           C141216) *
                          C141384) *
                         C141487 -
                     (((C70704 + C70705 + C70706) * C141216 +
                       (C70707 + C70708 + C70709) * C55527) *
                          C141384 +
                      ((C68804 + C68803 + C68802) * C141216 +
                       (C68801 + C68800 + C68799) * C55527) *
                          C141469) *
                         C4148) *
                        C141277 * C141483)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[60] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30075 * C108 + C141469 * C276 + C30076 * C1601 +
              C141384 * C1784) *
                 C55527 +
             (C30075 * C114 + C141469 * C282 + C30076 * C1606 +
              C141384 * C1789) *
                 C141216) *
                C141496 +
            ((C38926 + C38927) * C55527 + (C38928 + C38929) * C141216) *
                C141497 +
            C89943 * C68674) *
               C4148 -
           (((C90742 + C90743) * C141216 + (C90744 + C90745) * C55527) *
                C68674 +
            ((C43546 + C43547) * C141216 + (C43548 + C43549) * C55527) *
                C141497 +
            ((C30076 * C5329 + C141384 * C5453 + C30075 * C1606 +
              C141469 * C1789) *
                 C141216 +
             (C30076 * C5325 + C141384 * C5449 + C30075 * C1601 +
              C141469 * C1784) *
                 C55527) *
                C141496) *
               C141487) *
              C141277 * C2376 +
          ((((C31971 + C31970) * C55527 + (C31969 + C31968) * C141216) *
                C141496 +
            ((C40213 + C40212) * C55527 + (C40211 + C40210) * C141216) *
                C141497 +
            ((C30075 * C7886 + C141469 * C8127 + C30076 * C13304 +
              C141384 * C13478) *
                 C55527 +
             (C30075 * C7889 + C141469 * C8130 + C30076 * C13308 +
              C141384 * C13482) *
                 C141216) *
                C68674) *
               C141487 -
           (((C38930 + C38931) * C141216 + (C38932 + C38933) * C55527) *
                C68674 +
            (C38924 * C141216 + C38925 * C55527) * C141497 +
            ((C30105 + C30104) * C141216 + (C30103 + C30102) * C55527) *
                C141496) *
               C4148) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[60] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C55527 * C108 + C141216 * C114) * C68771 +
             (C55527 * C189 + C141216 * C362) * C141496 + C56299 * C68772 +
             C56300 * C141497 + C56301 * C68773 + C56302 * C68674) *
                C141469 +
            (C88294 + C88295 + C88296 + C88297 + C88298 + C88299) * C141384) *
               C4148 -
           ((C64648 * C68674 + C64649 * C68773 + C61850 * C141497 +
             C61849 * C68772 + C62873 * C141496 + C62872 * C68771) *
                C141384 +
            (C88299 + C88298 + C88297 + C88296 + C88295 + C88294) * C141469) *
               C141487) *
              C141277 * C2376 +
          (((C88300 + C88301 + C88302 + C88303 + C88304 + C88305) * C141469 +
            (C62876 * C68771 + C62877 * C141496 + C61853 * C68772 +
             C61854 * C141497 + (C55527 * C13304 + C141216 * C13308) * C68773 +
             (C55527 * C13396 + C141216 * C13560) * C68674) *
                C141384) *
               C141487 -
           ((C88305 + C88304 + C88303 + C88302 + C88301 + C88300) * C141384 +
            (C56308 * C68674 + C56307 * C68773 + C56306 * C141497 +
             C56305 * C68772 + (C55527 * C190 + C141216 * C363) * C141496 +
             (C55527 * C109 + C141216 * C115) * C68771) *
                C141469) *
               C4148) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[60] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C69032 * C108 + C69036 + C69036 + C141496 * C419 +
                       C69033 * C823 + C69037 + C69037 + C141497 * C1171 +
                       C69034 * C2960 + C69038 + C69038 + C68674 * C3196) *
                          C141216 * C141469 +
                      (C88416 + C88417 + C88418) * C141216 * C141384) *
                         C4148 -
                     ((C69034 * C13303 + C76133 + C76133 + C68674 * C13636 +
                       C69033 * C13301 + C76132 + C76132 + C141497 * C13635 +
                       C69032 * C5325 + C76131 + C76131 + C141496 * C5561) *
                          C141216 * C141384 +
                      (C88418 + C88417 + C88416) * C141216 * C141469) *
                         C141487) *
                        C141277 * C2376 +
                    (((C71027 + C71026 + C71025) * C141216 * C141469 +
                      (C69032 * C5326 + C76134 + C76134 + C141496 * C5562 +
                       C69033 * C13302 + C76135 + C76135 + C141497 * C13637 +
                       C69034 * C13304 + C76136 + C76136 + C68674 * C13638) *
                          C141216 * C141384) *
                         C141487 -
                     ((C71025 + C71026 + C71027) * C141216 * C141384 +
                      (C69074 + C69073 + C69072) * C141216 * C141469) *
                         C4148) *
                        C141277 * C141483)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[60] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30075 * C108 + C141469 * C276 + C30076 * C1601 +
             C141384 * C1784) *
                C68771 +
            (C30075 * C189 + C141469 * C501 + C30076 * C1690 +
             C141384 * C2040) *
                C141496 +
            (C38926 + C38927) * C68772 + (C39356 + C39357) * C141497 +
            C89927 * C68773 + C90169 * C68674) *
               C141216 * C4148 -
           ((C91068 + C91069) * C68674 + (C90744 + C90745) * C68773 +
            (C43962 + C43963) * C141497 + (C43548 + C43549) * C68772 +
            (C30076 * C5391 + C141384 * C5619 + C30075 * C1690 +
             C141469 * C2040) *
                C141496 +
            (C30076 * C5325 + C141384 * C5449 + C30075 * C1601 +
             C141469 * C1784) *
                C68771) *
               C141216 * C141487) *
              C141277 * C2376 +
          (((C31971 + C31970) * C68771 + (C32319 + C32318) * C141496 +
            (C40213 + C40212) * C68772 + (C40631 + C40630) * C141497 +
            (C30075 * C7886 + C141469 * C8127 + C30076 * C13304 +
             C141384 * C13478) *
                C68773 +
            (C30075 * C8005 + C141469 * C8469 + C30076 * C13396 +
             C141384 * C13722) *
                C68674) *
               C141216 * C141487 -
           ((C39358 + C39359) * C68674 + (C38932 + C38933) * C68773 +
            C39355 * C141497 + C38925 * C68772 + (C30352 + C30351) * C141496 +
            (C30103 + C30102) * C68771) *
               C141216 * C4148) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eezx[60] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C55527 * C108 + C141216 * C114) * C30075 +
             (C55527 * C276 + C141216 * C579) * C141469 + C62870 * C30076 +
             C63222 * C141384) *
                C141496 +
            (C87669 + C87670 + C87671 + C87672) * C141497 + C90256 * C68674) *
               C4148 -
           ((C91168 + C91169 + C91170 + C91171) * C68674 +
            (C91172 + C91173 + C91174 + C91175) * C141497 +
            (C63223 * C141384 + C62872 * C30076 + C63222 * C141469 +
             C62870 * C30075) *
                C141496) *
               C141487) *
              C141277 * C2376 +
          (((C62874 * C30075 + C63224 * C141469 + C62876 * C30076 +
             C63225 * C141384) *
                C141496 +
            (C61851 * C30075 + C62178 * C141469 + C61853 * C30076 +
             C62179 * C141384) *
                C141497 +
            (C87373 * C30075 + C87686 * C141469 +
             (C55527 * C13304 + C141216 * C13308) * C30076 +
             (C55527 * C13478 + C141216 * C13800) * C141384) *
                C68674) *
               C141487 -
           ((C87687 + C87683 + C87682 + C87681) * C68674 +
            (C87680 + C87679 + C87678 + C87677) * C141497 +
            (C63224 * C141384 + C62874 * C30076 +
             (C55527 * C277 + C141216 * C580) * C141469 +
             (C55527 * C109 + C141216 * C115) * C30075) *
                C141496) *
               C4148) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eezy[60] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C68771 * C108 + C141496 * C189 + C68772 * C823 +
                       C141497 * C912 + C68773 * C2960 + C68674 * C3026) *
                          C30075 +
                      (C68771 * C276 + C141496 * C635 + C68772 * C1006 +
                       C141497 * C1419 + C68773 * C3084 + C68674 * C3362) *
                          C141469 +
                      (C88092 + C88093 + C88094) * C30076 +
                      (C88719 + C88720 + C88721) * C141384) *
                         C141216 * C4148 -
                     ((C68773 * C13477 + C68674 * C13876 + C68772 * C13475 +
                       C141497 * C13875 + C68771 * C5449 + C141496 * C5727) *
                          C141384 +
                      (C68773 * C13303 + C68674 * C13394 + C68772 * C13301 +
                       C141497 * C13393 + C68771 * C5325 + C141496 * C5391) *
                          C30076 +
                      (C88721 + C88720 + C88719) * C141469 +
                      (C88094 + C88093 + C88092) * C30075) *
                         C141216 * C141487) *
                        C141277 * C2376 +
                    (((C70709 + C70708 + C70707) * C30075 +
                      (C71336 + C71335 + C71334) * C141469 +
                      (C68771 * C5326 + C141496 * C5392 + C68772 * C13302 +
                       C141497 * C13395 + C68773 * C13304 + C68674 * C13396) *
                          C30076 +
                      (C68771 * C5450 + C141496 * C5728 + C68772 * C13476 +
                       C141497 * C13877 + C68773 * C13478 + C68674 * C13878) *
                          C141384) *
                         C141216 * C141487 -
                     ((C71334 + C71335 + C71336) * C141384 +
                      (C70707 + C70708 + C70709) * C30076 +
                      (C69326 + C69325 + C69324) * C141469 +
                      (C68801 + C68800 + C68799) * C30075) *
                         C141216 * C4148) *
                        C141277 * C141483)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[60] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30596 * C108 + C30599 + C30599 + C141469 * C714 + C30597 * C1601 +
             C30600 + C30600 + C141384 * C2283) *
                C141496 +
            (C39780 + C39781) * C141497 + C90405 * C68674) *
               C141216 * C4148 -
           ((C91391 + C91392) * C68674 + (C44374 + C44375) * C141497 +
            (C30597 * C5325 + C32652 + C32652 + C141384 * C5781 +
             C30596 * C1601 + C32653 + C32653 + C141469 * C2283) *
                C141496) *
               C141216 * C141487) *
              C141277 * C2376 +
          (((C32667 + C32666) * C141496 + (C41045 + C41044) * C141497 +
            (C30596 * C7886 + C44368 + C44368 + C141469 * C8793 +
             C30597 * C13304 + C44369 + C44369 + C141384 * C13956) *
                C68674) *
               C141216 * C141487 -
           ((C39782 + C39783) * C68674 + C39771 * C141497 +
            (C30634 + C30633) * C141496) *
               C141216 * C4148) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eexx[61] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C55526 * C108 + C55529 + C55529 + C141216 * C120) * C141469 +
             C62512 * C141384) *
                C141496 +
            (C87062 + C87063) * C141497 + C89776 * C68674) *
               C4148 -
           ((C90516 + C90517) * C68674 + (C90518 + C90519) * C141497 +
            (C62513 * C141384 + C62512 * C141469) * C141496) *
               C141487) *
              C816 +
          (((C90519 + C90518) * C141496 + (C90517 + C90516) * C141497 +
            (C58471 * C141469 +
             (C55526 * C60310 + C60317 + C60317 + C141216 * C60312) * C141384) *
                C68674) *
               C141487 -
           ((C89777 + C89778) * C68674 + (C87065 + C87064) * C141497 +
            (C87063 + C87062) * C141496) *
               C4148) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eexy[61] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C68771 * C108 + C141496 * C189 + C68772 * C823 +
                        C141497 * C912 + C68773 * C2960 + C68674 * C3026) *
                           C55527 +
                       (C68771 * C114 + C141496 * C195 + C68772 * C828 +
                        C141497 * C917 + C68773 * C2964 + C68674 * C3030) *
                           C141216) *
                          C141469 +
                      ((C88092 + C88093 + C88094) * C55527 +
                       (C88095 + C88096 + C88097) * C141216) *
                          C141384) *
                         C4148 -
                     (((C68773 * C13307 + C68674 * C13398 + C68772 * C13305 +
                        C141497 * C13397 + C68771 * C5329 + C141496 * C5395) *
                           C141216 +
                       (C68773 * C13303 + C68674 * C13394 + C68772 * C13301 +
                        C141497 * C13393 + C68771 * C5325 + C141496 * C5391) *
                           C55527) *
                          C141384 +
                      ((C88097 + C88096 + C88095) * C141216 +
                       (C88094 + C88093 + C88092) * C55527) *
                          C141469) *
                         C141487) *
                        C816 +
                    ((((C90630 + C90631 + C90632) * C55527 +
                       (C90633 + C90634 + C90635) * C141216) *
                          C141469 +
                      ((C68771 * C13301 + C141496 * C13393 + C68772 * C13303 +
                        C141497 * C13394 + C68773 * C60310 + C68674 * C60367) *
                           C55527 +
                       (C68771 * C13305 + C141496 * C13397 + C68772 * C13307 +
                        C141497 * C13398 + C68773 * C60311 + C68674 * C60368) *
                           C141216) *
                          C141384) *
                         C141487 -
                     (((C90635 + C90634 + C90633) * C141216 +
                       (C90632 + C90631 + C90630) * C55527) *
                          C141384 +
                      ((C68773 * C6732 + C68674 * C6883 + C68772 * C2964 +
                        C141497 * C3030 + C68771 * C828 + C141496 * C917) *
                           C141216 +
                       (C68773 * C6729 + C68674 * C6880 + C68772 * C2960 +
                        C141497 * C3026 + C68771 * C823 + C141496 * C912) *
                           C55527) *
                          C141469) *
                         C4148) *
                        C141485) *
                   C141243) /
                  (p * q * std::sqrt(p + q));
    d2eexz[61] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30075 * C108 + C141469 * C276 + C30076 * C1601 +
              C141384 * C1784) *
                 C55527 +
             (C30075 * C114 + C141469 * C282 + C30076 * C1606 +
              C141384 * C1789) *
                 C141216) *
                C141496 +
            ((C38926 + C38927) * C55527 + (C38928 + C38929) * C141216) *
                C141497 +
            C89943 * C68674) *
               C4148 -
           (((C90742 + C90743) * C141216 + (C90744 + C90745) * C55527) *
                C68674 +
            ((C43546 + C43547) * C141216 + (C43548 + C43549) * C55527) *
                C141497 +
            ((C30076 * C5329 + C141384 * C5453 + C30075 * C1606 +
              C141469 * C1789) *
                 C141216 +
             (C30076 * C5325 + C141384 * C5449 + C30075 * C1601 +
              C141469 * C1784) *
                 C55527) *
                C141496) *
               C141487) *
              C816 +
          ((((C43549 + C43548) * C55527 + (C43547 + C43546) * C141216) *
                C141496 +
            ((C90745 + C90744) * C55527 + (C90743 + C90742) * C141216) *
                C141497 +
            ((C30075 * C10551 + C141469 * C10779 + C30076 * C60310 +
              C141384 * C60419) *
                 C55527 +
             (C30075 * C10553 + C141469 * C10781 + C30076 * C60311 +
              C141384 * C60420) *
                 C141216) *
                C68674) *
               C141487 -
           (((C89939 + C89940) * C141216 + (C89941 + C89942) * C55527) *
                C68674 +
            ((C42518 + C42519) * C141216 + (C42520 + C42521) * C55527) *
                C141497 +
            ((C38929 + C38928) * C141216 + (C38927 + C38926) * C55527) *
                C141496) *
               C4148) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eeyx[61] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C55527 * C108 + C141216 * C114) * C68771 +
             (C55527 * C189 + C141216 * C362) * C141496 + C56299 * C68772 +
             C56300 * C141497 + C56301 * C68773 + C56302 * C68674) *
                C141469 +
            (C88294 + C88295 + C88296 + C88297 + C88298 + C88299) * C141384) *
               C4148 -
           ((C64648 * C68674 + C64649 * C68773 + C61850 * C141497 +
             C61849 * C68772 + C62873 * C141496 + C62872 * C68771) *
                C141384 +
            (C88299 + C88298 + C88297 + C88296 + C88295 + C88294) * C141469) *
               C141487) *
              C816 +
          (((C90844 + C90845 + C90846 + C90847 + C90848 + C90849) * C141469 +
            (C61849 * C68771 + C61850 * C141496 + C64649 * C68772 +
             C64648 * C141497 + (C55527 * C60310 + C141216 * C60311) * C68773 +
             (C55527 * C60367 + C141216 * C60471) * C68674) *
                C141384) *
               C141487 -
           ((C90849 + C90848 + C90847 + C90846 + C90845 + C90844) * C141384 +
            (C56304 * C68674 + C56303 * C68773 + C56302 * C141497 +
             C56301 * C68772 + C56300 * C141496 + C56299 * C68771) *
                C141469) *
               C4148) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eeyy[61] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C69032 * C108 + C69036 + C69036 + C141496 * C419 +
                       C69033 * C823 + C69037 + C69037 + C141497 * C1171 +
                       C69034 * C2960 + C69038 + C69038 + C68674 * C3196) *
                          C141216 * C141469 +
                      (C88416 + C88417 + C88418) * C141216 * C141384) *
                         C4148 -
                     ((C69034 * C13303 + C76133 + C76133 + C68674 * C13636 +
                       C69033 * C13301 + C76132 + C76132 + C141497 * C13635 +
                       C69032 * C5325 + C76131 + C76131 + C141496 * C5561) *
                          C141216 * C141384 +
                      (C88418 + C88417 + C88416) * C141216 * C141469) *
                         C141487) *
                        C816 +
                    (((C90963 + C90964 + C90965) * C141216 * C141469 +
                      (C69032 * C13301 + C90954 + C90954 + C141496 * C13635 +
                       C69033 * C13303 + C90955 + C90955 + C141497 * C13636 +
                       C69034 * C60310 + C90956 + C90956 + C68674 * C60522) *
                          C141216 * C141384) *
                         C141487 -
                     ((C90965 + C90964 + C90963) * C141216 * C141384 +
                      (C69034 * C6729 + C70035 + C70035 + C68674 * C7289 +
                       C69033 * C2960 + C70036 + C70036 + C141497 * C3196 +
                       C69032 * C823 + C70037 + C70037 + C141496 * C1171) *
                          C141216 * C141469) *
                         C4148) *
                        C141485) *
                   C141243) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[61] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30075 * C108 + C141469 * C276 + C30076 * C1601 +
             C141384 * C1784) *
                C68771 +
            (C30075 * C189 + C141469 * C501 + C30076 * C1690 +
             C141384 * C2040) *
                C141496 +
            (C38926 + C38927) * C68772 + (C39356 + C39357) * C141497 +
            C89927 * C68773 + C90169 * C68674) *
               C141216 * C4148 -
           ((C91068 + C91069) * C68674 + (C90744 + C90745) * C68773 +
            (C43962 + C43963) * C141497 + (C43548 + C43549) * C68772 +
            (C30076 * C5391 + C141384 * C5619 + C30075 * C1690 +
             C141469 * C2040) *
                C141496 +
            (C30076 * C5325 + C141384 * C5449 + C30075 * C1601 +
             C141469 * C1784) *
                C68771) *
               C141216 * C141487) *
              C816 +
          (((C43549 + C43548) * C68771 + (C43963 + C43962) * C141496 +
            (C90745 + C90744) * C68772 + (C91069 + C91068) * C141497 +
            (C30075 * C10551 + C141469 * C10779 + C30076 * C60310 +
             C141384 * C60419) *
                C68773 +
            (C30075 * C10677 + C141469 * C11131 + C30076 * C60367 +
             C141384 * C60577) *
                C68674) *
               C141216 * C141487 -
           ((C90174 + C90175) * C68674 + (C89941 + C89942) * C68773 +
            (C42824 + C42825) * C141497 + (C42520 + C42521) * C68772 +
            (C39357 + C39356) * C141496 + (C38927 + C38926) * C68771) *
               C141216 * C4148) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eezx[61] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C55527 * C108 + C141216 * C114) * C30075 +
             (C55527 * C276 + C141216 * C579) * C141469 + C62870 * C30076 +
             C63222 * C141384) *
                C141496 +
            (C87669 + C87670 + C87671 + C87672) * C141497 + C90256 * C68674) *
               C4148 -
           ((C91168 + C91169 + C91170 + C91171) * C68674 +
            (C91172 + C91173 + C91174 + C91175) * C141497 +
            (C63223 * C141384 + C62872 * C30076 + C63222 * C141469 +
             C62870 * C30075) *
                C141496) *
               C141487) *
              C816 +
          (((C91175 + C91174 + C91173 + C91172) * C141496 +
            (C91171 + C91170 + C91169 + C91168) * C141497 +
            (C58705 * C30075 + C58927 * C141469 +
             (C55527 * C60310 + C141216 * C60311) * C30076 +
             (C55527 * C60419 + C141216 * C60628) * C141384) *
                C68674) *
               C141487 -
           ((C90251 + C90252 + C90253 + C90254) * C68674 +
            (C87676 + C87675 + C87674 + C87673) * C141497 +
            (C87672 + C87671 + C87670 + C87669) * C141496) *
               C4148) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eezy[61] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C68771 * C108 + C141496 * C189 + C68772 * C823 +
                       C141497 * C912 + C68773 * C2960 + C68674 * C3026) *
                          C30075 +
                      (C68771 * C276 + C141496 * C635 + C68772 * C1006 +
                       C141497 * C1419 + C68773 * C3084 + C68674 * C3362) *
                          C141469 +
                      (C88092 + C88093 + C88094) * C30076 +
                      (C88719 + C88720 + C88721) * C141384) *
                         C141216 * C4148 -
                     ((C68773 * C13477 + C68674 * C13876 + C68772 * C13475 +
                       C141497 * C13875 + C68771 * C5449 + C141496 * C5727) *
                          C141384 +
                      (C68773 * C13303 + C68674 * C13394 + C68772 * C13301 +
                       C141497 * C13393 + C68771 * C5325 + C141496 * C5391) *
                          C30076 +
                      (C88721 + C88720 + C88719) * C141469 +
                      (C88094 + C88093 + C88092) * C30075) *
                         C141216 * C141487) *
                        C816 +
                    (((C90630 + C90631 + C90632) * C30075 +
                      (C91280 + C91281 + C91282) * C141469 +
                      (C68771 * C13301 + C141496 * C13393 + C68772 * C13303 +
                       C141497 * C13394 + C68773 * C60310 + C68674 * C60367) *
                          C30076 +
                      (C68771 * C13475 + C141496 * C13875 + C68772 * C13477 +
                       C141497 * C13876 + C68773 * C60419 + C68674 * C60679) *
                          C141384) *
                         C141216 * C141487 -
                     ((C91282 + C91281 + C91280) * C141384 +
                      (C90632 + C90631 + C90630) * C30076 +
                      (C68773 * C7002 + C68674 * C7655 + C68772 * C3084 +
                       C141497 * C3362 + C68771 * C1006 + C141496 * C1419) *
                          C141469 +
                      (C68773 * C6729 + C68674 * C6880 + C68772 * C2960 +
                       C141497 * C3026 + C68771 * C823 + C141496 * C912) *
                          C30075) *
                         C141216 * C4148) *
                        C141485) *
                   C141243) /
                  (p * q * std::sqrt(p + q));
    d2eezz[61] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30596 * C108 + C30599 + C30599 + C141469 * C714 + C30597 * C1601 +
             C30600 + C30600 + C141384 * C2283) *
                C141496 +
            (C39780 + C39781) * C141497 + C90405 * C68674) *
               C141216 * C4148 -
           ((C91391 + C91392) * C68674 + (C44374 + C44375) * C141497 +
            (C30597 * C5325 + C32652 + C32652 + C141384 * C5781 +
             C30596 * C1601 + C32653 + C32653 + C141469 * C2283) *
                C141496) *
               C141216 * C141487) *
              C816 +
          (((C44375 + C44374) * C141496 + (C91392 + C91391) * C141497 +
            (C30596 * C10551 + C91385 + C91385 + C141469 * C11449 +
             C30597 * C60310 + C91386 + C91386 + C141384 * C60730) *
                C68674) *
               C141216 * C141487 -
           ((C90416 + C90417) * C68674 + (C43132 + C43133) * C141497 +
            (C39781 + C39780) * C141496) *
               C141216 * C4148) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eexx[62] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C55526 * C108 + C55529 + C55529 + C141216 * C120) * C141469 +
            C62512 * C141384) *
               C141496 +
           (C87062 + C87063) * C141497 + C89776 * C68674) *
              C5322 -
          ((C90516 + C90517) * C68674 + (C90518 + C90519) * C141497 +
           (C62513 * C141384 + C62512 * C141469) * C141496) *
              C5323 +
          ((C62513 * C141469 + C67937 * C141384) * C141496 +
           (C61519 * C141469 + C65168 * C141384) * C141497 +
           (C64402 * C141469 +
            (C55526 * C65157 + C65165 + C65165 + C141216 * C65159) * C141384) *
               C68674) *
              C5324) *
         C141277 * C141243) /
        (p * q * std::sqrt(p + q));
    d2eexy[62] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C68771 * C108 + C141496 * C189 + C68772 * C823 +
                       C141497 * C912 + C68773 * C2960 + C68674 * C3026) *
                          C55527 +
                      (C68771 * C114 + C141496 * C195 + C68772 * C828 +
                       C141497 * C917 + C68773 * C2964 + C68674 * C3030) *
                          C141216) *
                         C141469 +
                     ((C88092 + C88093 + C88094) * C55527 +
                      (C88095 + C88096 + C88097) * C141216) *
                         C141384) *
                        C5322 -
                    (((C93317 + C93318 + C93319) * C141216 +
                      (C93320 + C93321 + C93322) * C55527) *
                         C141384 +
                     ((C88097 + C88096 + C88095) * C141216 +
                      (C88094 + C88093 + C88092) * C55527) *
                         C141469) *
                        C5323 +
                    (((C93322 + C93321 + C93320) * C55527 +
                      (C93319 + C93318 + C93317) * C141216) *
                         C141469 +
                     ((C68771 * C15862 + C141496 * C16013 + C68772 * C18582 +
                       C141497 * C18698 + C68773 * C65157 + C68674 * C65267) *
                          C55527 +
                      (C68771 * C15865 + C141496 * C16016 + C68772 * C18584 +
                       C141497 * C18700 + C68773 * C65158 + C68674 * C65268) *
                          C141216) *
                         C141384) *
                        C5324) *
                   C141277 * C141243) /
                  (p * q * std::sqrt(p + q));
    d2eexz[62] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30075 * C108 + C141469 * C276 + C30076 * C1601 +
             C141384 * C1784) *
                C55527 +
            (C30075 * C114 + C141469 * C282 + C30076 * C1606 +
             C141384 * C1789) *
                C141216) *
               C141496 +
           ((C38926 + C38927) * C55527 + (C38928 + C38929) * C141216) *
               C141497 +
           C89943 * C68674) *
              C5322 -
          (((C90742 + C90743) * C141216 + (C90744 + C90745) * C55527) * C68674 +
           ((C43546 + C43547) * C141216 + (C43548 + C43549) * C55527) *
               C141497 +
           ((C30076 * C5329 + C141384 * C5453 + C30075 * C1606 +
             C141469 * C1789) *
                C141216 +
            (C30076 * C5325 + C141384 * C5449 + C30075 * C1601 +
             C141469 * C1784) *
                C55527) *
               C141496) *
              C5323 +
          (((C30075 * C5325 + C141469 * C5449 + C30076 * C15862 +
             C141384 * C16151) *
                C55527 +
            (C30075 * C5329 + C141469 * C5453 + C30076 * C15865 +
             C141384 * C16154) *
                C141216) *
               C141496 +
           ((C30075 * C13301 + C141469 * C13475 + C30076 * C18582 +
             C141384 * C18820) *
                C55527 +
            (C30075 * C13305 + C141469 * C13479 + C30076 * C18584 +
             C141384 * C18822) *
                C141216) *
               C141497 +
           ((C30075 * C13303 + C141469 * C13477 + C30076 * C65157 +
             C141384 * C65391) *
                C55527 +
            (C30075 * C13307 + C141469 * C13481 + C30076 * C65158 +
             C141384 * C65392) *
                C141216) *
               C68674) *
              C5324) *
         C141277 * C141243) /
        (p * q * std::sqrt(p + q));
    d2eeyx[62] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C55527 * C108 + C141216 * C114) * C68771 +
            (C55527 * C189 + C141216 * C362) * C141496 + C56299 * C68772 +
            C56300 * C141497 + C56301 * C68773 + C56302 * C68674) *
               C141469 +
           (C88294 + C88295 + C88296 + C88297 + C88298 + C88299) * C141384) *
              C5322 -
          ((C93471 + C93472 + C93473 + C93474 + C93475 + C93476) * C141384 +
           (C88299 + C88298 + C88297 + C88296 + C88295 + C88294) * C141469) *
              C5323 +
          ((C93476 + C93475 + C93474 + C93473 + C93472 + C93471) * C141469 +
           (C68191 * C68771 + C68190 * C141496 + C65524 * C68772 +
            C65523 * C141497 + (C55527 * C65157 + C141216 * C65158) * C68773 +
            (C55527 * C65267 + C141216 * C65509) * C68674) *
               C141384) *
              C5324) *
         C141277 * C141243) /
        (p * q * std::sqrt(p + q));
    d2eeyy[62] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C69032 * C108 + C69036 + C69036 + C141496 * C419 +
                      C69033 * C823 + C69037 + C69037 + C141497 * C1171 +
                      C69034 * C2960 + C69038 + C69038 + C68674 * C3196) *
                         C141216 * C141469 +
                     (C88416 + C88417 + C88418) * C141216 * C141384) *
                        C5322 -
                    ((C93566 + C93567 + C93568) * C141216 * C141384 +
                     (C88418 + C88417 + C88416) * C141216 * C141469) *
                        C5323 +
                    ((C93568 + C93567 + C93566) * C141216 * C141469 +
                     (C69032 * C15862 + C93557 + C93557 + C141496 * C16422 +
                      C69033 * C18582 + C93558 + C93558 + C141497 * C19034 +
                      C69034 * C65157 + C93559 + C93559 + C68674 * C65622) *
                         C141216 * C141384) *
                        C5324) *
                   C141277 * C141243) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[62] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C30075 * C108 + C141469 * C276 + C30076 * C1601 + C141384 * C1784) *
               C68771 +
           (C30075 * C189 + C141469 * C501 + C30076 * C1690 + C141384 * C2040) *
               C141496 +
           (C38926 + C38927) * C68772 + (C39356 + C39357) * C141497 +
           C89927 * C68773 + C90169 * C68674) *
              C141216 * C5322 -
          ((C91068 + C91069) * C68674 + (C90744 + C90745) * C68773 +
           (C43962 + C43963) * C141497 + (C43548 + C43549) * C68772 +
           (C30076 * C5391 + C141384 * C5619 + C30075 * C1690 +
            C141469 * C2040) *
               C141496 +
           (C30076 * C5325 + C141384 * C5449 + C30075 * C1601 +
            C141469 * C1784) *
               C68771) *
              C141216 * C5323 +
          ((C30075 * C5325 + C141469 * C5449 + C30076 * C15862 +
            C141384 * C16151) *
               C68771 +
           (C30075 * C5391 + C141469 * C5619 + C30076 * C16013 +
            C141384 * C16549) *
               C141496 +
           (C30075 * C13301 + C141469 * C13475 + C30076 * C18582 +
            C141384 * C18820) *
               C68772 +
           (C30075 * C13393 + C141469 * C13719 + C30076 * C18698 +
            C141384 * C19150) *
               C141497 +
           (C30075 * C13303 + C141469 * C13477 + C30076 * C65157 +
            C141384 * C65391) *
               C68773 +
           (C30075 * C13394 + C141469 * C13720 + C30076 * C65267 +
            C141384 * C65743) *
               C68674) *
              C141216 * C5324) *
         C141277 * C141243) /
        (p * q * std::sqrt(p + q));
    d2eezx[62] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C55527 * C108 + C141216 * C114) * C30075 +
            (C55527 * C276 + C141216 * C579) * C141469 + C62870 * C30076 +
            C63222 * C141384) *
               C141496 +
           (C87669 + C87670 + C87671 + C87672) * C141497 + C90256 * C68674) *
              C5322 -
          ((C91168 + C91169 + C91170 + C91171) * C68674 +
           (C91172 + C91173 + C91174 + C91175) * C141497 +
           (C63223 * C141384 + C62872 * C30076 + C63222 * C141469 +
            C62870 * C30075) *
               C141496) *
              C5323 +
          ((C62872 * C30075 + C63223 * C141469 + C68191 * C30076 +
            C68436 * C141384) *
               C141496 +
           (C61849 * C30075 + C62177 * C141469 + C65524 * C30076 +
            C65860 * C141384) *
               C141497 +
           (C64649 * C30075 + C64892 * C141469 +
            (C55527 * C65157 + C141216 * C65158) * C30076 +
            (C55527 * C65391 + C141216 * C65851) * C141384) *
               C68674) *
              C5324) *
         C141277 * C141243) /
        (p * q * std::sqrt(p + q));
    d2eezy[62] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C68771 * C108 + C141496 * C189 + C68772 * C823 +
                      C141497 * C912 + C68773 * C2960 + C68674 * C3026) *
                         C30075 +
                     (C68771 * C276 + C141496 * C635 + C68772 * C1006 +
                      C141497 * C1419 + C68773 * C3084 + C68674 * C3362) *
                         C141469 +
                     (C88092 + C88093 + C88094) * C30076 +
                     (C88719 + C88720 + C88721) * C141384) *
                        C141216 * C5322 -
                    ((C93797 + C93798 + C93799) * C141384 +
                     (C93320 + C93321 + C93322) * C30076 +
                     (C88721 + C88720 + C88719) * C141469 +
                     (C88094 + C88093 + C88092) * C30075) *
                        C141216 * C5323 +
                    ((C93322 + C93321 + C93320) * C30075 +
                     (C93799 + C93798 + C93797) * C141469 +
                     (C68771 * C15862 + C141496 * C16013 + C68772 * C18582 +
                      C141497 * C18698 + C68773 * C65157 + C68674 * C65267) *
                         C30076 +
                     (C68771 * C16151 + C141496 * C16784 + C68772 * C18820 +
                      C141497 * C19356 + C68773 * C65391 + C68674 * C65959) *
                         C141384) *
                        C141216 * C5324) *
                   C141277 * C141243) /
                  (p * q * std::sqrt(p + q));
    d2eezz[62] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C30596 * C108 + C30599 + C30599 + C141469 * C714 +
                      C30597 * C1601 + C30600 + C30600 + C141384 * C2283) *
                         C141496 +
                     (C39780 + C39781) * C141497 + C90405 * C68674) *
                        C141216 * C5322 -
                    ((C91391 + C91392) * C68674 + (C44374 + C44375) * C141497 +
                     (C30597 * C5325 + C32652 + C32652 + C141384 * C5781 +
                      C30596 * C1601 + C32653 + C32653 + C141469 * C2283) *
                         C141496) *
                        C141216 * C5323 +
                    ((C30596 * C5325 + C37604 + C37604 + C141469 * C5781 +
                      C30597 * C15862 + C37605 + C37605 + C141384 * C16900) *
                         C141496 +
                     (C30596 * C13301 + C47630 + C47630 + C141469 * C13953 +
                      C30597 * C18582 + C47631 + C47631 + C141384 * C19462) *
                         C141497 +
                     (C30596 * C13303 + C93874 + C93874 + C141469 * C13954 +
                      C30597 * C65157 + C93875 + C93875 + C141384 * C66070) *
                         C68674) *
                        C141216 * C5324) *
                   C141277 * C141243) /
                  (p * q * std::sqrt(p + q));
    d2eexx[63] +=
        (-std::pow(Pi, 2.5) *
         (((C55526 * C108 + C55529 + C55529 + C141216 * C120) * C141320 *
               C55522 +
           (C55526 * C823 + C55530 + C55530 + C141216 * C833) * C141320 *
               C55523 +
           (C55526 * C2960 + C55531 + C55531 + C141216 * C2968) * C141320 *
               C55524 +
           (C55526 * C6729 + C55532 + C55532 + C141216 * C6735) * C141320 *
               C55525) *
              C141294 * C141277 * C97 -
          ((C55526 * C6728 + C55533 + C55533 + C141216 * C6734) * C141320 *
               C55525 +
           (C55526 * C2961 + C55534 + C55534 + C141216 * C2969) * C141320 *
               C55524 +
           (C55526 * C822 + C55535 + C55535 + C141216 * C832) * C141320 *
               C55523 +
           (C55526 * C109 + C55536 + C55536 + C141216 * C121) * C141320 *
               C55522) *
              C141294 * C141277 * C98 +
          ((C55526 * C110 + C55537 + C55537 + C141216 * C122) * C141320 *
               C55522 +
           (C55526 * C821 + C55538 + C55538 + C141216 * C831) * C141320 *
               C55523 +
           (C55526 * C2962 + C55539 + C55539 + C141216 * C2970) * C141320 *
               C55524 +
           (C55526 * C6730 + C55540 + C55540 + C141216 * C6736) * C141320 *
               C55525) *
              C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C47712 * C108 + C47719 + C47719 + C47707 * C120 + C47714 * C109 +
            C47720 + C47720 + C47708 * C121 + C47716 * C110 + C47721 + C47721 +
            C47709 * C122) *
               C141320 * C47710 +
           (C47712 * C823 + C47722 + C47722 + C47707 * C833 + C47714 * C822 +
            C47723 + C47723 + C47708 * C832 + C47716 * C821 + C47724 + C47724 +
            C47709 * C831) *
               C141320 * C141358) *
              C141294 * C141277 * C97 -
          ((C47716 * C820 + C47725 + C47725 + C47709 * C830 + C47714 * C821 +
            C47726 + C47726 + C47708 * C831 + C47712 * C822 + C47727 + C47727 +
            C47707 * C832) *
               C141320 * C141358 +
           (C47716 * C111 + C47728 + C47728 + C47709 * C123 + C47714 * C110 +
            C47729 + C47729 + C47708 * C122 + C47712 * C109 + C47730 + C47730 +
            C47707 * C121) *
               C141320 * C47710) *
              C141294 * C141277 * C98 +
          ((C47712 * C110 + C47731 + C47731 + C47707 * C122 + C47714 * C111 +
            C47732 + C47732 + C47708 * C123 + C47716 * C112 + C47733 + C47733 +
            C47709 * C124) *
               C141320 * C47710 +
           (C47712 * C821 + C47734 + C47734 + C47707 * C831 + C47714 * C820 +
            C47735 + C47735 + C47708 * C830 + C47716 * C824 + C47736 + C47736 +
            C47709 * C834) *
               C141320 * C141358) *
              C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C55526 * C108 + C55529 + C55529 + C141216 * C120) * C14035 +
            (C55526 * C1601 + C56748 + C56748 + C141216 * C1611) * C14036 +
            (C55526 * C5325 + C60314 + C60314 + C141216 * C5333) * C14037) *
               C47710 +
           (C56053 * C14035 + C58473 * C14036 +
            (C55526 * C13301 + C60315 + C60315 + C141216 * C13309) * C14037) *
               C141358) *
              C141294 * C141277 * C97 -
          (((C55526 * C13302 + C60807 + C60807 + C141216 * C13310) * C14037 +
            (C55526 * C3491 + C56750 + C56750 + C141216 * C3499) * C14036 +
            C56056 * C14035) *
               C141358 +
           ((C55526 * C5326 + C60808 + C60808 + C141216 * C5334) * C14037 +
            (C55526 * C1600 + C56749 + C56749 + C141216 * C1610) * C14036 +
            (C55526 * C109 + C55536 + C55536 + C141216 * C121) * C14035) *
               C47710) *
              C141294 * C141277 * C98 +
          (((C55526 * C110 + C55537 + C55537 + C141216 * C122) * C14035 +
            (C55526 * C1599 + C60809 + C60809 + C141216 * C1609) * C14036 +
            (C55526 * C5327 + C60810 + C60810 + C141216 * C5335) * C14037) *
               C47710 +
           ((C55526 * C821 + C55538 + C55538 + C141216 * C831) * C14035 +
            (C55526 * C3492 + C60811 + C60811 + C141216 * C3500) * C14036 +
            (C55526 * C14876 + C60812 + C60812 + C141216 * C14878) * C14037) *
               C141358) *
              C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eexy[63] +=
        (-std::pow(Pi, 2.5) *
         (((C55590 * C108 + C55522 * C189 + C55591 * C823 + C55523 * C912 +
            C55592 * C2960 + C55524 * C3026 + C55593 * C6729 + C55525 * C6880) *
               C55527 +
           (C55590 * C114 + C55522 * C195 + C55591 * C828 + C55523 * C917 +
            C55592 * C2964 + C55524 * C3030 + C55593 * C6732 + C55525 * C6883) *
               C141216) *
              C141320 * C141294 * C141277 * C97 -
          ((C55593 * C6731 + C55525 * C6882 + C55592 * C2965 + C55524 * C3031 +
            C55591 * C827 + C55523 * C916 + C55590 * C115 + C55522 * C196) *
               C141216 +
           (C55593 * C6728 + C55525 * C6879 + C55592 * C2961 + C55524 * C3027 +
            C55591 * C822 + C55523 * C911 + C55590 * C109 + C55522 * C190) *
               C55527) *
              C141320 * C141294 * C141277 * C98 +
          ((C55590 * C110 + C55522 * C191 + C55591 * C821 + C55523 * C910 +
            C55592 * C2962 + C55524 * C3028 + C55593 * C6730 + C55525 * C6881) *
               C55527 +
           (C55590 * C116 + C55522 * C197 + C55591 * C826 + C55523 * C915 +
            C55592 * C2966 + C55524 * C3032 + C55593 * C6733 + C55525 * C6884) *
               C141216) *
              C141320 * C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C47810 * C108 + C47710 * C189 + C47811 * C823 + C141358 * C912) *
               C47713 +
           (C47810 * C114 + C47710 * C195 + C47811 * C828 + C141358 * C917) *
               C47707 +
           (C47837 + C47838) * C47715 + (C47839 + C47840) * C47708 +
           C47849 * C47717 + C47850 * C47709) *
              C141320 * C141294 * C141277 * C97 -
          ((C47845 + C47846) * C47709 + (C47847 + C47848) * C47717 +
           (C47844 + C47843) * C47708 + (C47842 + C47841) * C47715 +
           (C47840 + C47839) * C47707 + (C47838 + C47837) * C47713) *
              C141320 * C141294 * C141277 * C98 +
          (C47849 * C47713 + C47850 * C47707 + (C47848 + C47847) * C47715 +
           (C47846 + C47845) * C47708 +
           (C47810 * C112 + C47710 * C193 + C47811 * C824 + C141358 * C913) *
               C47717 +
           (C47810 * C118 + C47710 * C199 + C47811 * C829 + C141358 * C918) *
               C47709) *
              C141320 * C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47810 * C108 + C47710 * C189 + C47811 * C823 + C141358 * C912) *
                C55527 +
            (C47810 * C114 + C47710 * C195 + C47811 * C828 + C141358 * C917) *
                C141216) *
               C14035 +
           ((C47810 * C1601 + C47710 * C1690 + C47811 * C3490 +
             C141358 * C3572) *
                C55527 +
            (C47810 * C1606 + C47710 * C1695 + C47811 * C3494 +
             C141358 * C3576) *
                C141216) *
               C14036 +
           ((C47810 * C5325 + C47710 * C5391 + C47811 * C13301 +
             C141358 * C13393) *
                C55527 +
            (C47810 * C5329 + C47710 * C5395 + C47811 * C13305 +
             C141358 * C13397) *
                C141216) *
               C14037) *
              C141294 * C141277 * C97 -
          (((C47811 * C13306 + C141358 * C13399 + C47810 * C5330 +
             C47710 * C5396) *
                C141216 +
            (C47811 * C13302 + C141358 * C13395 + C47810 * C5326 +
             C47710 * C5392) *
                C55527) *
               C14037 +
           ((C49744 + C49745) * C141216 + (C49746 + C49747) * C55527) * C14036 +
           ((C47840 + C47839) * C141216 + (C47838 + C47837) * C55527) *
               C14035) *
              C141294 * C141277 * C98 +
          ((C47849 * C55527 + C47850 * C141216) * C14035 +
           ((C49743 + C49742) * C55527 + (C49741 + C49740) * C141216) * C14036 +
           ((C47810 * C5327 + C47710 * C5393 + C47811 * C14876 +
             C141358 * C14979) *
                C55527 +
            (C47810 * C5331 + C47710 * C5397 + C47811 * C14877 +
             C141358 * C14980) *
                C141216) *
               C14037) *
              C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eexz[63] +=
        (-std::pow(Pi, 2.5) * ((((C275 * C108 + C141320 * C276) * C55527 +
                                 (C275 * C114 + C141320 * C282) * C141216) *
                                    C55522 +
                                (C7032 * C55527 + C7033 * C141216) * C55523 +
                                (C7034 * C55527 + C7035 * C141216) * C55524 +
                                (C9954 * C55527 + C9953 * C141216) * C55525) *
                                   C141294 * C141277 * C97 -
                               ((C7036 * C141216 + C7037 * C55527) * C55525 +
                                (C6087 * C141216 + C6086 * C55527) * C55524 +
                                (C1030 * C141216 + C1031 * C55527) * C55523 +
                                (C306 * C141216 + C305 * C55527) * C55522) *
                                   C141294 * C141277 * C98 +
                               ((C307 * C55527 + C308 * C141216) * C55522 +
                                (C1029 * C55527 + C1028 * C141216) * C55523 +
                                (C6089 * C55527 + C6088 * C141216) * C55524 +
                                ((C275 * C6730 + C141320 * C7003) * C55527 +
                                 (C275 * C6733 + C141320 * C7006) * C141216) *
                                    C55525) *
                                   C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141320 * C276) * C47713 +
            (C275 * C114 + C141320 * C282) * C47707 + C305 * C47715 +
            C306 * C47708 + C307 * C47717 + C308 * C47709) *
               C47710 +
           (C7032 * C47713 + C7033 * C47707 + C1031 * C47715 + C1030 * C47708 +
            C1029 * C47717 + C1028 * C47709) *
               C141358) *
              C141294 * C141277 * C97 -
          ((C1026 * C47709 + C1027 * C47717 + C1028 * C47708 + C1029 * C47715 +
            C1030 * C47707 + C1031 * C47713) *
               C141358 +
           (C310 * C47709 + C309 * C47717 + C308 * C47708 + C307 * C47715 +
            C306 * C47707 + C305 * C47713) *
               C47710) *
              C141294 * C141277 * C98 +
          ((C307 * C47713 + C308 * C47707 + C309 * C47715 + C310 * C47708 +
            C312 * C47717 + C311 * C47709) *
               C47710 +
           (C1029 * C47713 + C1028 * C47707 + C1027 * C47715 + C1026 * C47708 +
            (C275 * C824 + C141320 * C1007) * C47717 +
            (C275 * C829 + C141320 * C1012) * C47709) *
               C141358) *
              C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C14204 * C108 + C14035 * C276 + C14205 * C1601 + C14036 * C1784 +
             C14206 * C5325 + C14037 * C5449) *
                C55527 +
            (C14204 * C114 + C14035 * C282 + C14205 * C1606 + C14036 * C1789 +
             C14206 * C5329 + C14037 * C5453) *
                C141216) *
               C47710 +
           ((C14204 * C823 + C14035 * C1006 + C14205 * C3490 + C14036 * C3646 +
             C14206 * C13301 + C14037 * C13475) *
                C55527 +
            (C14204 * C828 + C14035 * C1011 + C14205 * C3494 + C14036 * C3650 +
             C14206 * C13305 + C14037 * C13479) *
                C141216) *
               C141358) *
              C141294 * C141277 * C97 -
          (((C15106 + C15107 + C15108) * C141216 +
            (C15109 + C15110 + C15111) * C55527) *
               C141358 +
           ((C14237 + C14236 + C14235) * C141216 +
            (C14234 + C14233 + C14232) * C55527) *
               C47710) *
              C141294 * C141277 * C98 +
          (((C14243 + C14242 + C14241) * C55527 +
            (C14240 + C14239 + C14238) * C141216) *
               C47710 +
           ((C14204 * C821 + C14035 * C1004 + C14205 * C3492 + C14036 * C3648 +
             C14206 * C14876 + C14037 * C15091) *
                C55527 +
            (C14204 * C826 + C14035 * C1009 + C14205 * C3496 + C14036 * C3652 +
             C14206 * C14877 + C14037 * C15092) *
                C141216) *
               C141358) *
              C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[63] +=
        (-std::pow(Pi, 2.5) * (((C55527 * C108 + C141216 * C114) * C55590 +
                                (C55527 * C189 + C141216 * C362) * C55522 +
                                (C55527 * C823 + C141216 * C828) * C55591 +
                                (C55527 * C912 + C141216 * C1100) * C55523 +
                                (C55527 * C2960 + C141216 * C2964) * C55592 +
                                (C55527 * C3026 + C141216 * C3142) * C55524 +
                                (C55527 * C6729 + C141216 * C6732) * C55593 +
                                (C55527 * C6880 + C141216 * C7140) * C55525) *
                                   C141320 * C141294 * C141277 * C97 -
                               ((C55527 * C6879 + C141216 * C7139) * C55525 +
                                (C55527 * C6728 + C141216 * C6731) * C55593 +
                                (C55527 * C3027 + C141216 * C3143) * C55524 +
                                (C55527 * C2961 + C141216 * C2965) * C55592 +
                                (C55527 * C911 + C141216 * C1099) * C55523 +
                                (C55527 * C822 + C141216 * C827) * C55591 +
                                (C55527 * C190 + C141216 * C363) * C55522 +
                                (C55527 * C109 + C141216 * C115) * C55590) *
                                   C141320 * C141294 * C141277 * C98 +
                               ((C55527 * C110 + C141216 * C116) * C55590 +
                                (C55527 * C191 + C141216 * C364) * C55522 +
                                (C55527 * C821 + C141216 * C826) * C55591 +
                                (C55527 * C910 + C141216 * C1098) * C55523 +
                                (C55527 * C2962 + C141216 * C2966) * C55592 +
                                (C55527 * C3028 + C141216 * C3144) * C55524 +
                                (C55527 * C6730 + C141216 * C6733) * C55593 +
                                (C55527 * C6881 + C141216 * C7141) * C55525) *
                                   C141320 * C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C47713 * C108 + C47707 * C114 + C47715 * C109 + C47708 * C115 +
            C47717 * C110 + C47709 * C116) *
               C47810 +
           (C47713 * C189 + C47707 * C362 + C47715 * C190 + C47708 * C363 +
            C47717 * C191 + C47709 * C364) *
               C47710 +
           (C47713 * C823 + C47707 * C828 + C47715 * C822 + C47708 * C827 +
            C47717 * C821 + C47709 * C826) *
               C47811 +
           (C47713 * C912 + C47707 * C1100 + C47715 * C911 + C47708 * C1099 +
            C47717 * C910 + C47709 * C1098) *
               C141358) *
              C141320 * C141294 * C141277 * C97 -
          ((C47717 * C909 + C47709 * C1097 + C47715 * C910 + C47708 * C1098 +
            C47713 * C911 + C47707 * C1099) *
               C141358 +
           (C47717 * C820 + C47709 * C825 + C47715 * C821 + C47708 * C826 +
            C47713 * C822 + C47707 * C827) *
               C47811 +
           (C47717 * C192 + C47709 * C365 + C47715 * C191 + C47708 * C364 +
            C47713 * C190 + C47707 * C363) *
               C47710 +
           (C47717 * C111 + C47709 * C117 + C47715 * C110 + C47708 * C116 +
            C47713 * C109 + C47707 * C115) *
               C47810) *
              C141320 * C141294 * C141277 * C98 +
          ((C47713 * C110 + C47707 * C116 + C47715 * C111 + C47708 * C117 +
            C47717 * C112 + C47709 * C118) *
               C47810 +
           (C47713 * C191 + C47707 * C364 + C47715 * C192 + C47708 * C365 +
            C47717 * C193 + C47709 * C366) *
               C47710 +
           (C47713 * C821 + C47707 * C826 + C47715 * C820 + C47708 * C825 +
            C47717 * C824 + C47709 * C829) *
               C47811 +
           (C47713 * C910 + C47707 * C1098 + C47715 * C909 + C47708 * C1097 +
            C47717 * C913 + C47709 * C1101) *
               C141358) *
              C141320 * C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C55527 * C108 + C141216 * C114) * C47810 +
            (C55527 * C189 + C141216 * C362) * C47710 + C56299 * C47811 +
            C56300 * C141358) *
               C14035 +
           ((C55527 * C1601 + C141216 * C1606) * C47810 +
            (C55527 * C1690 + C141216 * C1878) * C47710 + C58709 * C47811 +
            C58708 * C141358) *
               C14036 +
           ((C55527 * C5325 + C141216 * C5329) * C47810 +
            (C55527 * C5391 + C141216 * C5507) * C47710 +
            (C55527 * C13301 + C141216 * C13305) * C47811 +
            (C55527 * C13393 + C141216 * C13557) * C141358) *
               C14037) *
              C141294 * C141277 * C97 -
          (((C55527 * C13395 + C141216 * C13558) * C141358 +
            (C55527 * C13302 + C141216 * C13306) * C47811 +
            (C55527 * C5392 + C141216 * C5508) * C47710 +
            (C55527 * C5326 + C141216 * C5330) * C47810) *
               C14037 +
           ((C55527 * C3573 + C141216 * C3721) * C141358 +
            (C55527 * C3491 + C141216 * C3495) * C47811 +
            (C55527 * C1689 + C141216 * C1877) * C47710 +
            (C55527 * C1600 + C141216 * C1605) * C47810) *
               C14036 +
           (C56306 * C141358 + C56305 * C47811 +
            (C55527 * C190 + C141216 * C363) * C47710 +
            (C55527 * C109 + C141216 * C115) * C47810) *
               C14035) *
              C141294 * C141277 * C98 +
          (((C55527 * C110 + C141216 * C116) * C47810 +
            (C55527 * C191 + C141216 * C364) * C47710 +
            (C55527 * C821 + C141216 * C826) * C47811 +
            (C55527 * C910 + C141216 * C1098) * C141358) *
               C14035 +
           ((C55527 * C1599 + C141216 * C1604) * C47810 +
            (C55527 * C1688 + C141216 * C1876) * C47710 +
            (C55527 * C3492 + C141216 * C3496) * C47811 +
            (C55527 * C3574 + C141216 * C3722) * C141358) *
               C14036 +
           ((C55527 * C5327 + C141216 * C5331) * C47810 +
            (C55527 * C5393 + C141216 * C5509) * C47710 +
            (C55527 * C14876 + C141216 * C14877) * C47811 +
            (C55527 * C14979 + C141216 * C15209) * C141358) *
               C14037) *
              C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[63] +=
        (-std::pow(Pi, 2.5) *
         ((C55744 * C108 + C55749 + C55749 + C55522 * C419 + C55745 * C823 +
           C55750 + C55750 + C55523 * C1171 + C55746 * C2960 + C55751 + C55751 +
           C55524 * C3196 + C55747 * C6729 + C55752 + C55752 + C55525 * C7289) *
              C141216 * C141320 * C141294 * C141277 * C97 -
          (C55747 * C6728 + C55753 + C55753 + C55525 * C7288 + C55746 * C2961 +
           C55754 + C55754 + C55524 * C3197 + C55745 * C822 + C55755 + C55755 +
           C55523 * C1170 + C55744 * C109 + C55756 + C55756 + C55522 * C420) *
              C141216 * C141320 * C141294 * C141277 * C98 +
          (C55744 * C110 + C55757 + C55757 + C55522 * C421 + C55745 * C821 +
           C55758 + C55758 + C55523 * C1169 + C55746 * C2962 + C55759 + C55759 +
           C55524 * C3198 + C55747 * C6730 + C55760 + C55760 + C55525 * C7290) *
              C141216 * C141320 * C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C48072 * C108 + C48075 + C48075 + C47710 * C419 + C48073 * C823 +
            C48076 + C48076 + C141358 * C1171) *
               C47707 +
           (C48109 + C48110) * C47708 + C48115 * C47709) *
              C141320 * C141294 * C141277 * C97 -
          ((C48113 + C48114) * C47709 + (C48112 + C48111) * C47708 +
           (C48110 + C48109) * C47707) *
              C141320 * C141294 * C141277 * C98 +
          (C48115 * C47707 + (C48114 + C48113) * C47708 +
           (C48072 * C112 + C48095 + C48095 + C47710 * C423 + C48073 * C824 +
            C48096 + C48096 + C141358 * C1172) *
               C47709) *
              C141320 * C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C48072 * C108 + C48075 + C48075 + C47710 * C419 + C48073 * C823 +
            C48076 + C48076 + C141358 * C1171) *
               C141216 * C14035 +
           (C48072 * C1601 + C50055 + C50055 + C47710 * C1949 + C48073 * C3490 +
            C50054 + C50054 + C141358 * C3790) *
               C141216 * C14036 +
           (C48072 * C5325 + C55170 + C55170 + C47710 * C5561 +
            C48073 * C13301 + C55171 + C55171 + C141358 * C13635) *
               C141216 * C14037) *
              C141294 * C141277 * C97 -
          ((C48073 * C13302 + C55173 + C55173 + C141358 * C13637 +
            C48072 * C5326 + C55172 + C55172 + C47710 * C5562) *
               C141216 * C14037 +
           (C50068 + C50069) * C141216 * C14036 +
           (C48110 + C48109) * C141216 * C14035) *
              C141294 * C141277 * C98 +
          (C48115 * C141216 * C14035 + (C50067 + C50066) * C141216 * C14036 +
           (C48072 * C5327 + C55174 + C55174 + C47710 * C5563 +
            C48073 * C14876 + C55175 + C55175 + C141358 * C15308) *
               C141216 * C14037) *
              C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[63] +=
        (-std::pow(Pi, 2.5) *
         (((C275 * C108 + C141320 * C276) * C55590 +
           (C275 * C189 + C141320 * C501) * C55522 + C7032 * C55591 +
           C7428 * C55523 + C7034 * C55592 + C7429 * C55524 + C9954 * C55593 +
           C10208 * C55525) *
              C141216 * C141294 * C141277 * C97 -
          (C7430 * C55525 + C7037 * C55593 + C6371 * C55524 + C6086 * C55592 +
           C1276 * C55523 + C1031 * C55591 + C520 * C55522 + C305 * C55590) *
              C141216 * C141294 * C141277 * C98 +
          (C307 * C55590 + C521 * C55522 + C1029 * C55591 + C1275 * C55523 +
           C6089 * C55592 + C6372 * C55524 +
           (C275 * C6730 + C141320 * C7003) * C55593 +
           (C275 * C6881 + C141320 * C7415) * C55525) *
              C141216 * C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141320 * C276) * C47810 +
            (C275 * C189 + C141320 * C501) * C47710 + C7032 * C47811 +
            C7428 * C141358) *
               C47707 +
           (C48190 + C48191 + C48192 + C48193) * C47708 + C48204 * C47709) *
              C141294 * C141277 * C97 -
          ((C48198 + C48199 + C48200 + C48201) * C47709 +
           (C48197 + C48196 + C48195 + C48194) * C47708 +
           (C48193 + C48192 + C48191 + C48190) * C47707) *
              C141294 * C141277 * C98 +
          (C48204 * C47707 + (C48201 + C48200 + C48199 + C48198) * C47708 +
           (C312 * C47810 + C523 * C47710 +
            (C275 * C824 + C141320 * C1007) * C47811 +
            (C275 * C913 + C141320 * C1263) * C141358) *
               C47709) *
              C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C14204 * C108 + C14035 * C276 + C14205 * C1601 + C14036 * C1784 +
            C14206 * C5325 + C14037 * C5449) *
               C47810 +
           (C14204 * C189 + C14035 * C501 + C14205 * C1690 + C14036 * C2040 +
            C14206 * C5391 + C14037 * C5619) *
               C47710 +
           (C14204 * C823 + C14035 * C1006 + C14205 * C3490 + C14036 * C3646 +
            C14206 * C13301 + C14037 * C13475) *
               C47811 +
           (C14204 * C912 + C14035 * C1262 + C14205 * C3572 + C14036 * C3864 +
            C14206 * C13393 + C14037 * C13719) *
               C141358) *
              C141216 * C141294 * C141277 * C97 -
          ((C15428 + C15429 + C15430) * C141358 +
           (C15109 + C15110 + C15111) * C47811 +
           (C14490 + C14489 + C14488) * C47710 +
           (C14234 + C14233 + C14232) * C47810) *
              C141216 * C141294 * C141277 * C98 +
          ((C14243 + C14242 + C14241) * C47810 +
           (C14493 + C14492 + C14491) * C47710 +
           (C14204 * C821 + C14035 * C1004 + C14205 * C3492 + C14036 * C3648 +
            C14206 * C14876 + C14037 * C15091) *
               C47811 +
           (C14204 * C910 + C14035 * C1260 + C14205 * C3574 + C14036 * C3866 +
            C14206 * C14979 + C14037 * C15420) *
               C141358) *
              C141216 * C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eezx[63] +=
        (-std::pow(Pi, 2.5) * ((((C55527 * C108 + C141216 * C114) * C275 +
                                 (C55527 * C276 + C141216 * C579) * C141320) *
                                    C55522 +
                                ((C55527 * C823 + C141216 * C828) * C275 +
                                 (C55527 * C1006 + C141216 * C1348) * C141320) *
                                    C55523 +
                                ((C55527 * C2960 + C141216 * C2964) * C275 +
                                 (C55527 * C3084 + C141216 * C3308) * C141320) *
                                    C55524 +
                                ((C55527 * C6729 + C141216 * C6732) * C275 +
                                 (C55527 * C7002 + C141216 * C7530) * C141320) *
                                    C55525) *
                                   C141294 * C141277 * C97 -
                               (((C55527 * C7001 + C141216 * C7529) * C141320 +
                                 (C55527 * C6728 + C141216 * C6731) * C275) *
                                    C55525 +
                                ((C55527 * C3085 + C141216 * C3309) * C141320 +
                                 (C55527 * C2961 + C141216 * C2965) * C275) *
                                    C55524 +
                                ((C55527 * C1005 + C141216 * C1347) * C141320 +
                                 (C55527 * C822 + C141216 * C827) * C275) *
                                    C55523 +
                                ((C55527 * C277 + C141216 * C580) * C141320 +
                                 (C55527 * C109 + C141216 * C115) * C275) *
                                    C55522) *
                                   C141294 * C141277 * C98 +
                               (((C55527 * C110 + C141216 * C116) * C275 +
                                 (C55527 * C278 + C141216 * C581) * C141320) *
                                    C55522 +
                                ((C55527 * C821 + C141216 * C826) * C275 +
                                 (C55527 * C1004 + C141216 * C1346) * C141320) *
                                    C55523 +
                                ((C55527 * C2962 + C141216 * C2966) * C275 +
                                 (C55527 * C3086 + C141216 * C3310) * C141320) *
                                    C55524 +
                                ((C55527 * C6730 + C141216 * C6733) * C275 +
                                 (C55527 * C7003 + C141216 * C7531) * C141320) *
                                    C55525) *
                                   C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47713 * C108 + C47707 * C114 + C47715 * C109 + C47708 * C115 +
             C47717 * C110 + C47709 * C116) *
                C275 +
            (C47713 * C276 + C47707 * C579 + C47715 * C277 + C47708 * C580 +
             C47717 * C278 + C47709 * C581) *
                C141320) *
               C47710 +
           ((C47713 * C823 + C47707 * C828 + C47715 * C822 + C47708 * C827 +
             C47717 * C821 + C47709 * C826) *
                C275 +
            (C47713 * C1006 + C47707 * C1348 + C47715 * C1005 + C47708 * C1347 +
             C47717 * C1004 + C47709 * C1346) *
                C141320) *
               C141358) *
              C141294 * C141277 * C97 -
          (((C47717 * C1003 + C47709 * C1345 + C47715 * C1004 + C47708 * C1346 +
             C47713 * C1005 + C47707 * C1347) *
                C141320 +
            (C47717 * C820 + C47709 * C825 + C47715 * C821 + C47708 * C826 +
             C47713 * C822 + C47707 * C827) *
                C275) *
               C141358 +
           ((C47717 * C279 + C47709 * C582 + C47715 * C278 + C47708 * C581 +
             C47713 * C277 + C47707 * C580) *
                C141320 +
            (C47717 * C111 + C47709 * C117 + C47715 * C110 + C47708 * C116 +
             C47713 * C109 + C47707 * C115) *
                C275) *
               C47710) *
              C141294 * C141277 * C98 +
          (((C47713 * C110 + C47707 * C116 + C47715 * C111 + C47708 * C117 +
             C47717 * C112 + C47709 * C118) *
                C275 +
            (C47713 * C278 + C47707 * C581 + C47715 * C279 + C47708 * C582 +
             C47717 * C280 + C47709 * C583) *
                C141320) *
               C47710 +
           ((C47713 * C821 + C47707 * C826 + C47715 * C820 + C47708 * C825 +
             C47717 * C824 + C47709 * C829) *
                C275 +
            (C47713 * C1004 + C47707 * C1346 + C47715 * C1003 + C47708 * C1345 +
             C47717 * C1007 + C47709 * C1349) *
                C141320) *
               C141358) *
              C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C55527 * C108 + C141216 * C114) * C14204 +
            (C55527 * C276 + C141216 * C579) * C14035 +
            (C55527 * C1601 + C141216 * C1606) * C14205 +
            (C55527 * C1784 + C141216 * C2126) * C14036 +
            (C55527 * C5325 + C141216 * C5329) * C14206 +
            (C55527 * C5449 + C141216 * C5673) * C14037) *
               C47710 +
           (C56299 * C14204 + C56535 * C14035 + C58709 * C14205 +
            C58929 * C14036 + (C55527 * C13301 + C141216 * C13305) * C14206 +
            (C55527 * C13475 + C141216 * C13797) * C14037) *
               C141358) *
              C141294 * C141277 * C97 -
          (((C55527 * C13476 + C141216 * C13798) * C14037 +
            (C55527 * C13302 + C141216 * C13306) * C14206 +
            (C55527 * C3647 + C141216 * C3935) * C14036 +
            (C55527 * C3491 + C141216 * C3495) * C14205 + C56538 * C14035 +
            C56305 * C14204) *
               C141358 +
           ((C55527 * C5450 + C141216 * C5674) * C14037 +
            (C55527 * C5326 + C141216 * C5330) * C14206 +
            (C55527 * C1783 + C141216 * C2125) * C14036 +
            (C55527 * C1600 + C141216 * C1605) * C14205 +
            (C55527 * C277 + C141216 * C580) * C14035 +
            (C55527 * C109 + C141216 * C115) * C14204) *
               C47710) *
              C141294 * C141277 * C98 +
          (((C55527 * C110 + C141216 * C116) * C14204 +
            (C55527 * C278 + C141216 * C581) * C14035 +
            (C55527 * C1599 + C141216 * C1604) * C14205 +
            (C55527 * C1782 + C141216 * C2124) * C14036 +
            (C55527 * C5327 + C141216 * C5331) * C14206 +
            (C55527 * C5451 + C141216 * C5675) * C14037) *
               C47710 +
           ((C55527 * C821 + C141216 * C826) * C14204 +
            (C55527 * C1004 + C141216 * C1346) * C14035 +
            (C55527 * C3492 + C141216 * C3496) * C14205 +
            (C55527 * C3648 + C141216 * C3936) * C14036 +
            (C55527 * C14876 + C141216 * C14877) * C14206 +
            (C55527 * C15091 + C141216 * C15528) * C14037) *
               C141358) *
              C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eezy[63] +=
        (-std::pow(Pi, 2.5) *
         (((C55590 * C108 + C55522 * C189 + C55591 * C823 + C55523 * C912 +
            C55592 * C2960 + C55524 * C3026 + C55593 * C6729 + C55525 * C6880) *
               C275 +
           (C55590 * C276 + C55522 * C635 + C55591 * C1006 + C55523 * C1419 +
            C55592 * C3084 + C55524 * C3362 + C55593 * C7002 + C55525 * C7655) *
               C141320) *
              C141216 * C141294 * C141277 * C97 -
          ((C55593 * C7001 + C55525 * C7654 + C55592 * C3085 + C55524 * C3363 +
            C55591 * C1005 + C55523 * C1418 + C55590 * C277 + C55522 * C636) *
               C141320 +
           (C55593 * C6728 + C55525 * C6879 + C55592 * C2961 + C55524 * C3027 +
            C55591 * C822 + C55523 * C911 + C55590 * C109 + C55522 * C190) *
               C275) *
              C141216 * C141294 * C141277 * C98 +
          ((C55590 * C110 + C55522 * C191 + C55591 * C821 + C55523 * C910 +
            C55592 * C2962 + C55524 * C3028 + C55593 * C6730 + C55525 * C6881) *
               C275 +
           (C55590 * C278 + C55522 * C637 + C55591 * C1004 + C55523 * C1417 +
            C55592 * C3086 + C55524 * C3364 + C55593 * C7003 + C55525 * C7656) *
               C141320) *
              C141216 * C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47810 * C108 + C47710 * C189 + C47811 * C823 + C141358 * C912) *
                C275 +
            (C47810 * C276 + C47710 * C635 + C47811 * C1006 + C141358 * C1419) *
                C141320) *
               C47707 +
           ((C47837 + C47838) * C275 + (C48366 + C48367) * C141320) * C47708 +
           C48374 * C47709) *
              C141294 * C141277 * C97 -
          (((C48370 + C48371) * C141320 + (C47847 + C47848) * C275) * C47709 +
           ((C48369 + C48368) * C141320 + (C47842 + C47841) * C275) * C47708 +
           ((C48367 + C48366) * C141320 + (C47838 + C47837) * C275) * C47707) *
              C141294 * C141277 * C98 +
          (C48374 * C47707 +
           ((C47848 + C47847) * C275 + (C48371 + C48370) * C141320) * C47708 +
           ((C47810 * C112 + C47710 * C193 + C47811 * C824 + C141358 * C913) *
                C275 +
            (C47810 * C280 + C47710 * C639 + C47811 * C1007 + C141358 * C1420) *
                C141320) *
               C47709) *
              C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C47810 * C108 + C47710 * C189 + C47811 * C823 + C141358 * C912) *
               C14204 +
           (C47810 * C276 + C47710 * C635 + C47811 * C1006 + C141358 * C1419) *
               C14035 +
           (C47810 * C1601 + C47710 * C1690 + C47811 * C3490 +
            C141358 * C3572) *
               C14205 +
           (C47810 * C1784 + C47710 * C2197 + C47811 * C3646 +
            C141358 * C4004) *
               C14036 +
           (C47810 * C5325 + C47710 * C5391 + C47811 * C13301 +
            C141358 * C13393) *
               C14206 +
           (C47810 * C5449 + C47710 * C5727 + C47811 * C13475 +
            C141358 * C13875) *
               C14037) *
              C141216 * C141294 * C141277 * C97 -
          ((C47811 * C13476 + C141358 * C13877 + C47810 * C5450 +
            C47710 * C5728) *
               C14037 +
           (C47811 * C13302 + C141358 * C13395 + C47810 * C5326 +
            C47710 * C5392) *
               C14206 +
           (C50382 + C50383) * C14036 + (C49746 + C49747) * C14205 +
           (C48367 + C48366) * C14035 + (C47838 + C47837) * C14204) *
              C141216 * C141294 * C141277 * C98 +
          (C47849 * C14204 + C48372 * C14035 + (C49743 + C49742) * C14205 +
           (C50381 + C50380) * C14036 +
           (C47810 * C5327 + C47710 * C5393 + C47811 * C14876 +
            C141358 * C14979) *
               C14206 +
           (C47810 * C5451 + C47710 * C5729 + C47811 * C15091 +
            C141358 * C15627) *
               C14037) *
              C141216 * C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eezz[63] +=
        (-std::pow(Pi, 2.5) *
         (((C713 * C108 + C721 + C721 + C141320 * C714) * C55522 +
           C7785 * C55523 + C7786 * C55524 + C10453 * C55525) *
              C141216 * C141294 * C141277 * C97 -
          (C7787 * C55525 + C6627 * C55524 + C1527 * C55523 + C743 * C55522) *
              C141216 * C141294 * C141277 * C98 +
          (C744 * C55522 + C1526 * C55523 + C6628 * C55524 +
           (C713 * C6730 + C7778 + C7778 + C141320 * C7766) * C55525) *
              C141216 * C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C141320 * C714) * C47710 +
            C7785 * C141358) *
               C47707 +
           (C48449 + C48450) * C47708 + C48455 * C47709) *
              C141294 * C141277 * C97 -
          ((C48453 + C48454) * C47709 + (C48452 + C48451) * C47708 +
           (C48450 + C48449) * C47707) *
              C141294 * C141277 * C98 +
          (C48455 * C47707 + (C48454 + C48453) * C47708 +
           (C746 * C47710 +
            (C713 * C824 + C1518 + C1518 + C141320 * C1506) * C141358) *
               C47709) *
              C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C14733 * C108 + C14737 + C14737 + C14035 * C714 + C14734 * C1601 +
            C14738 + C14738 + C14036 * C2283 + C14735 * C5325 + C14739 +
            C14739 + C14037 * C5781) *
               C47710 +
           (C14733 * C823 + C15751 + C15751 + C14035 * C1505 + C14734 * C3490 +
            C15750 + C15750 + C14036 * C4074 + C14735 * C13301 + C15749 +
            C15749 + C14037 * C13953) *
               C141358) *
              C141216 * C141294 * C141277 * C97 -
          ((C15761 + C15762 + C15763) * C141358 +
           (C14775 + C14774 + C14773) * C47710) *
              C141216 * C141294 * C141277 * C98 +
          ((C14778 + C14777 + C14776) * C47710 +
           (C14733 * C821 + C15752 + C15752 + C14035 * C1503 + C14734 * C3492 +
            C15753 + C15753 + C14036 * C4076 + C14735 * C14876 + C15754 +
            C15754 + C14037 * C15738) *
               C141358) *
              C141216 * C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eexx[64] +=
        (-std::pow(Pi, 2.5) *
         ((((C55526 * C108 + C55529 + C55529 + C141216 * C120) * C141320 *
                C55522 +
            C56059 * C55523 + C56060 * C55524 + C56061 * C55525) *
               C141294 * C816 -
           ((C55526 * C9768 + C56033 + C56033 + C141216 * C9772) * C141320 *
                C55525 +
            C56061 * C55524 + C56060 * C55523 + C56059 * C55522) *
               C141294 * C141485) *
              C818 +
          ((C56062 * C55522 + C56063 * C55523 + C56064 * C55524 +
            (C55526 * C9769 + C56040 + C56040 + C141216 * C9773) * C141320 *
                C55525) *
               C141294 * C141485 -
           (C56064 * C55525 + C56063 * C55524 + C56062 * C55523 +
            (C55526 * C109 + C55536 + C55536 + C141216 * C121) * C141320 *
                C55522) *
               C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47712 * C108 + C47719 + C47719 + C47707 * C120 + C47714 * C109 +
             C47720 + C47720 + C47708 * C121 + C47716 * C110 + C47721 + C47721 +
             C47709 * C122) *
                C141320 * C47710 +
            (C48584 + C48585 + C48586) * C141320 * C141358) *
               C141294 * C816 -
           ((C47716 * C2962 + C48560 + C48560 + C47709 * C2970 +
             C47714 * C2961 + C48561 + C48561 + C47708 * C2969 +
             C47712 * C2960 + C48562 + C48562 + C47707 * C2968) *
                C141320 * C141358 +
            (C48586 + C48585 + C48584) * C141320 * C47710) *
               C141294 * C141485) *
              C818 +
          (((C48587 + C48588 + C48589) * C141320 * C47710 +
            (C47712 * C2961 + C48569 + C48569 + C47707 * C2969 +
             C47714 * C2962 + C48570 + C48570 + C47708 * C2970 +
             C47716 * C2963 + C48571 + C48571 + C47709 * C2971) *
                C141320 * C141358) *
               C141294 * C141485 -
           ((C48589 + C48588 + C48587) * C141320 * C141358 +
            (C47716 * C111 + C47728 + C47728 + C47709 * C123 + C47714 * C110 +
             C47729 + C47729 + C47708 * C122 + C47712 * C109 + C47730 + C47730 +
             C47707 * C121) *
                C141320 * C47710) *
               C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C55526 * C108 + C55529 + C55529 + C141216 * C120) * C14035 +
             (C55526 * C1601 + C56748 + C56748 + C141216 * C1611) * C14036 +
             (C55526 * C5325 + C60314 + C60314 + C141216 * C5333) * C14037) *
                C47710 +
            (C61503 + C61504 + C61522) * C141358) *
               C141294 * C816 -
           (((C55526 * C13303 + C60316 + C60316 + C141216 * C13311) * C14037 +
             C58472 * C14036 + C56054 * C14035) *
                C141358 +
            (C61522 + C61504 + C61503) * C47710) *
               C141294 * C141485) *
              C818 +
          (((C61507 + C61523 + C61524) * C47710 +
            (C56057 * C14035 +
             (C55526 * C7886 + C56751 + C56751 + C141216 * C7892) * C14036 +
             (C55526 * C13304 + C61512 + C61512 + C141216 * C13312) * C14037) *
                C141358) *
               C141294 * C141485 -
           ((C61524 + C61523 + C61507) * C141358 +
            ((C55526 * C5326 + C60808 + C60808 + C141216 * C5334) * C14037 +
             (C55526 * C1600 + C56749 + C56749 + C141216 * C1610) * C14036 +
             (C55526 * C109 + C55536 + C55536 + C141216 * C121) * C14035) *
                C47710) *
               C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q));
    d2eexy[64] +=
        (-std::pow(Pi, 2.5) *
         ((((C55590 * C108 + C55522 * C189 + C55591 * C823 + C55523 * C912 +
             C55592 * C2960 + C55524 * C3026 + C55593 * C6729 +
             C55525 * C6880) *
                C55527 +
            (C55590 * C114 + C55522 * C195 + C55591 * C828 + C55523 * C917 +
             C55592 * C2964 + C55524 * C3030 + C55593 * C6732 +
             C55525 * C6883) *
                C141216) *
               C141320 * C141294 * C816 -
           ((C55593 * C9770 + C55525 * C9864 + C55592 * C6732 + C55524 * C6883 +
             C55591 * C2964 + C55523 * C3030 + C55590 * C828 + C55522 * C917) *
                C141216 +
            (C55593 * C9768 + C55525 * C9862 + C55592 * C6729 + C55524 * C6880 +
             C55591 * C2960 + C55523 * C3026 + C55590 * C823 + C55522 * C912) *
                C55527) *
               C141320 * C141294 * C141485) *
              C818 +
          (((C55590 * C822 + C55522 * C911 + C55591 * C2961 + C55523 * C3027 +
             C55592 * C6728 + C55524 * C6879 + C55593 * C9769 +
             C55525 * C9863) *
                C55527 +
            (C55590 * C827 + C55522 * C916 + C55591 * C2965 + C55523 * C3031 +
             C55592 * C6731 + C55524 * C6882 + C55593 * C9771 +
             C55525 * C9865) *
                C141216) *
               C141320 * C141294 * C141485 -
           ((C55593 * C6731 + C55525 * C6882 + C55592 * C2965 + C55524 * C3031 +
             C55591 * C827 + C55523 * C916 + C55590 * C115 + C55522 * C196) *
                C141216 +
            (C55593 * C6728 + C55525 * C6879 + C55592 * C2961 + C55524 * C3027 +
             C55591 * C822 + C55523 * C911 + C55590 * C109 + C55522 * C190) *
                C55527) *
               C141320 * C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47810 * C108 + C47710 * C189 + C47811 * C823 + C141358 * C912) *
                C47713 +
            (C47810 * C114 + C47710 * C195 + C47811 * C828 + C141358 * C917) *
                C47707 +
            (C47837 + C47838) * C47715 + (C47839 + C47840) * C47708 +
            C47849 * C47717 + C47850 * C47709) *
               C141320 * C141294 * C816 -
           ((C48704 + C48705) * C47709 + (C48706 + C48707) * C47717 +
            (C48708 + C48709) * C47708 + (C48710 + C48711) * C47715 +
            (C47811 * C2964 + C141358 * C3030 + C47810 * C828 + C47710 * C917) *
                C47707 +
            (C47811 * C2960 + C141358 * C3026 + C47810 * C823 + C47710 * C912) *
                C47713) *
               C141320 * C141294 * C141485) *
              C818 +
          (((C48711 + C48710) * C47713 + (C48709 + C48708) * C47707 +
            (C48707 + C48706) * C47715 + (C48705 + C48704) * C47708 +
            (C47810 * C820 + C47710 * C909 + C47811 * C2963 + C141358 * C3029) *
                C47717 +
            (C47810 * C825 + C47710 * C914 + C47811 * C2967 + C141358 * C3033) *
                C47709) *
               C141320 * C141294 * C141485 -
           ((C47845 + C47846) * C47709 + (C47847 + C47848) * C47717 +
            (C47844 + C47843) * C47708 + (C47842 + C47841) * C47715 +
            (C47840 + C47839) * C47707 + (C47838 + C47837) * C47713) *
               C141320 * C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C47810 * C108 + C47710 * C189 + C47811 * C823 + C141358 * C912) *
                 C55527 +
             (C47810 * C114 + C47710 * C195 + C47811 * C828 + C141358 * C917) *
                 C141216) *
                C14035 +
            ((C47810 * C1601 + C47710 * C1690 + C47811 * C3490 +
              C141358 * C3572) *
                 C55527 +
             (C47810 * C1606 + C47710 * C1695 + C47811 * C3494 +
              C141358 * C3576) *
                 C141216) *
                C14036 +
            ((C47810 * C5325 + C47710 * C5391 + C47811 * C13301 +
              C141358 * C13393) *
                 C55527 +
             (C47810 * C5329 + C47710 * C5395 + C47811 * C13305 +
              C141358 * C13397) *
                 C141216) *
                C14037) *
               C141294 * C816 -
           (((C47811 * C13307 + C141358 * C13398 + C47810 * C13305 +
              C47710 * C13397) *
                 C141216 +
             (C47811 * C13303 + C141358 * C13394 + C47810 * C13301 +
              C47710 * C13393) *
                 C55527) *
                C14037 +
            ((C47811 * C7890 + C141358 * C8009 + C47810 * C3494 +
              C47710 * C3576) *
                 C141216 +
             (C47811 * C7887 + C141358 * C8006 + C47810 * C3490 +
              C47710 * C3572) *
                 C55527) *
                C14036 +
            ((C47811 * C2964 + C141358 * C3030 + C47810 * C828 +
              C47710 * C917) *
                 C141216 +
             (C47811 * C2960 + C141358 * C3026 + C47810 * C823 +
              C47710 * C912) *
                 C55527) *
                C14035) *
               C141294 * C141485) *
              C818 +
          ((((C48711 + C48710) * C55527 + (C48709 + C48708) * C141216) *
                C14035 +
            ((C47810 * C3491 + C47710 * C3573 + C47811 * C7886 +
              C141358 * C8005) *
                 C55527 +
             (C47810 * C3495 + C47710 * C3577 + C47811 * C7889 +
              C141358 * C8008) *
                 C141216) *
                C14036 +
            ((C47810 * C13302 + C47710 * C13395 + C47811 * C13304 +
              C141358 * C13396) *
                 C55527 +
             (C47810 * C13306 + C47710 * C13399 + C47811 * C13308 +
              C141358 * C13400) *
                 C141216) *
                C14037) *
               C141294 * C141485 -
           (((C47811 * C13306 + C141358 * C13399 + C47810 * C5330 +
              C47710 * C5396) *
                 C141216 +
             (C47811 * C13302 + C141358 * C13395 + C47810 * C5326 +
              C47710 * C5392) *
                 C55527) *
                C14037 +
            ((C49744 + C49745) * C141216 + (C49746 + C49747) * C55527) *
                C14036 +
            ((C47840 + C47839) * C141216 + (C47838 + C47837) * C55527) *
                C14035) *
               C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q));
    d2eexz[64] +=
        (-std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141320 * C276) * C55527 +
             (C275 * C114 + C141320 * C282) * C141216) *
                C55522 +
            (C56197 + C56198) * C55523 + (C56199 + C56200) * C55524 +
            (C56201 + C56202) * C55525) *
               C141294 * C816 -
           (((C275 * C9770 + C141320 * C9942) * C141216 +
             (C275 * C9768 + C141320 * C9940) * C55527) *
                C55525 +
            (C56202 + C56201) * C55524 + (C56200 + C56199) * C55523 +
            (C56198 + C56197) * C55522) *
               C141294 * C141485) *
              C818 +
          (((C56203 + C56204) * C55522 + (C56205 + C56206) * C55523 +
            (C56207 + C56208) * C55524 +
            ((C275 * C9769 + C141320 * C9941) * C55527 +
             (C275 * C9771 + C141320 * C9943) * C141216) *
                C55525) *
               C141294 * C141485 -
           ((C56208 + C56207) * C55525 + (C56206 + C56205) * C55524 +
            (C56204 + C56203) * C55523 +
            (C306 * C141216 + C305 * C55527) * C55522) *
               C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141320 * C276) * C47713 +
             (C275 * C114 + C141320 * C282) * C47707 + C305 * C47715 +
             C306 * C47708 + C307 * C47717 + C308 * C47709) *
                C47710 +
            (C48810 + C48811 + C48812 + C48813 + C48814 + C48815) * C141358) *
               C141294 * C816 -
           ((C6088 * C47709 + C6089 * C47717 + C6087 * C47708 + C6086 * C47715 +
             C7035 * C47707 + C7034 * C47713) *
                C141358 +
            (C48815 + C48814 + C48813 + C48812 + C48811 + C48810) * C47710) *
               C141294 * C141485) *
              C818 +
          (((C48816 + C48817 + C48818 + C48819 + C48820 + C48821) * C47710 +
            (C6086 * C47713 + C6087 * C47707 + C6089 * C47715 + C6088 * C47708 +
             (C275 * C2963 + C141320 * C3087) * C47717 +
             (C275 * C2967 + C141320 * C3091) * C47709) *
                C141358) *
               C141294 * C141485 -
           ((C48821 + C48820 + C48819 + C48818 + C48817 + C48816) * C141358 +
            (C310 * C47709 + C309 * C47717 + C308 * C47708 + C307 * C47715 +
             C306 * C47707 + C305 * C47713) *
                C47710) *
               C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C14204 * C108 + C14035 * C276 + C14205 * C1601 + C14036 * C1784 +
              C14206 * C5325 + C14037 * C5449) *
                 C55527 +
             (C14204 * C114 + C14035 * C282 + C14205 * C1606 + C14036 * C1789 +
              C14206 * C5329 + C14037 * C5453) *
                 C141216) *
                C47710 +
            ((C61733 + C61734 + C61735) * C55527 +
             (C61736 + C61737 + C61738) * C141216) *
                C141358) *
               C141294 * C816 -
           (((C14206 * C13307 + C14037 * C13481 + C14205 * C7890 +
              C14036 * C8131 + C14204 * C2964 + C14035 * C3088) *
                 C141216 +
             (C14206 * C13303 + C14037 * C13477 + C14205 * C7887 +
              C14036 * C8128 + C14204 * C2960 + C14035 * C3084) *
                 C55527) *
                C141358 +
            ((C61738 + C61737 + C61736) * C141216 +
             (C61735 + C61734 + C61733) * C55527) *
                C47710) *
               C141294 * C141485) *
              C818 +
          ((((C15111 + C15110 + C15109) * C55527 +
             (C15108 + C15107 + C15106) * C141216) *
                C47710 +
            ((C14204 * C2961 + C14035 * C3085 + C14205 * C7886 +
              C14036 * C8127 + C14206 * C13304 + C14037 * C13478) *
                 C55527 +
             (C14204 * C2965 + C14035 * C3089 + C14205 * C7889 +
              C14036 * C8130 + C14206 * C13308 + C14037 * C13482) *
                 C141216) *
                C141358) *
               C141294 * C141485 -
           (((C15106 + C15107 + C15108) * C141216 +
             (C15109 + C15110 + C15111) * C55527) *
                C141358 +
            ((C14237 + C14236 + C14235) * C141216 +
             (C14234 + C14233 + C14232) * C55527) *
                C47710) *
               C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[64] += (-std::pow(Pi, 2.5) *
                   ((((C55527 * C108 + C141216 * C114) * C55590 +
                      (C55527 * C189 + C141216 * C362) * C55522 +
                      C56299 * C55591 + C56300 * C55523 + C56301 * C55592 +
                      C56302 * C55524 + C56303 * C55593 + C56304 * C55525) *
                         C141320 * C141294 * C816 -
                     ((C55527 * C9862 + C141216 * C10031) * C55525 +
                      (C55527 * C9768 + C141216 * C9770) * C55593 +
                      C56304 * C55524 + C56303 * C55592 + C56302 * C55523 +
                      C56301 * C55591 + C56300 * C55522 + C56299 * C55590) *
                         C141320 * C141294 * C141485) *
                        C818 +
                    ((C56305 * C55590 + C56306 * C55522 + C56307 * C55591 +
                      C56308 * C55523 + C56309 * C55592 + C56310 * C55524 +
                      (C55527 * C9769 + C141216 * C9771) * C55593 +
                      (C55527 * C9863 + C141216 * C10032) * C55525) *
                         C141320 * C141294 * C141485 -
                     (C56310 * C55525 + C56309 * C55593 + C56308 * C55524 +
                      C56307 * C55592 + C56306 * C55523 + C56305 * C55591 +
                      (C55527 * C190 + C141216 * C363) * C55522 +
                      (C55527 * C109 + C141216 * C115) * C55590) *
                         C141320 * C141294 * C816) *
                        C141483)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   ((((C47713 * C108 + C47707 * C114 + C47715 * C109 +
                       C47708 * C115 + C47717 * C110 + C47709 * C116) *
                          C47810 +
                      (C47713 * C189 + C47707 * C362 + C47715 * C190 +
                       C47708 * C363 + C47717 * C191 + C47709 * C364) *
                          C47710 +
                      (C48944 + C48945 + C48946) * C47811 +
                      (C48947 + C48948 + C48949) * C141358) *
                         C141320 * C141294 * C816 -
                     ((C47717 * C3028 + C47709 * C3144 + C47715 * C3027 +
                       C47708 * C3143 + C47713 * C3026 + C47707 * C3142) *
                          C141358 +
                      (C47717 * C2962 + C47709 * C2966 + C47715 * C2961 +
                       C47708 * C2965 + C47713 * C2960 + C47707 * C2964) *
                          C47811 +
                      (C48949 + C48948 + C48947) * C47710 +
                      (C48946 + C48945 + C48944) * C47810) *
                         C141320 * C141294 * C141485) *
                        C818 +
                    (((C48950 + C48951 + C48952) * C47810 +
                      (C48953 + C48954 + C48955) * C47710 +
                      (C47713 * C2961 + C47707 * C2965 + C47715 * C2962 +
                       C47708 * C2966 + C47717 * C2963 + C47709 * C2967) *
                          C47811 +
                      (C47713 * C3027 + C47707 * C3143 + C47715 * C3028 +
                       C47708 * C3144 + C47717 * C3029 + C47709 * C3145) *
                          C141358) *
                         C141320 * C141294 * C141485 -
                     ((C48955 + C48954 + C48953) * C141358 +
                      (C48952 + C48951 + C48950) * C47811 +
                      (C47717 * C192 + C47709 * C365 + C47715 * C191 +
                       C47708 * C364 + C47713 * C190 + C47707 * C363) *
                          C47710 +
                      (C47717 * C111 + C47709 * C117 + C47715 * C110 +
                       C47708 * C116 + C47713 * C109 + C47707 * C115) *
                          C47810) *
                         C141320 * C141294 * C816) *
                        C141483)) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   (((((C55527 * C108 + C141216 * C114) * C47810 +
                       (C55527 * C189 + C141216 * C362) * C47710 +
                       C56299 * C47811 + C56300 * C141358) *
                          C14035 +
                      ((C55527 * C1601 + C141216 * C1606) * C47810 +
                       (C55527 * C1690 + C141216 * C1878) * C47710 +
                       C58709 * C47811 + C58708 * C141358) *
                          C14036 +
                      ((C55527 * C5325 + C141216 * C5329) * C47810 +
                       (C55527 * C5391 + C141216 * C5507) * C47710 +
                       C61849 * C47811 + C61850 * C141358) *
                          C14037) *
                         C141294 * C816 -
                     (((C55527 * C13394 + C141216 * C13559) * C141358 +
                       (C55527 * C13303 + C141216 * C13307) * C47811 +
                       C61850 * C47710 + C61849 * C47810) *
                          C14037 +
                      (C58706 * C141358 + C58707 * C47811 + C58708 * C47710 +
                       C58709 * C47810) *
                          C14036 +
                      (C56302 * C141358 + C56301 * C47811 + C56300 * C47710 +
                       C56299 * C47810) *
                          C14035) *
                         C141294 * C141485) *
                        C818 +
                    (((C56305 * C47810 + C56306 * C47710 + C56307 * C47811 +
                       C56308 * C141358) *
                          C14035 +
                      (C61851 * C47810 + C61852 * C47710 +
                       (C55527 * C7886 + C141216 * C7889) * C47811 +
                       (C55527 * C8005 + C141216 * C8243) * C141358) *
                          C14036 +
                      (C61853 * C47810 + C61854 * C47710 +
                       (C55527 * C13304 + C141216 * C13308) * C47811 +
                       (C55527 * C13396 + C141216 * C13560) * C141358) *
                          C14037) *
                         C141294 * C141485 -
                     ((C61854 * C141358 + C61853 * C47811 +
                       (C55527 * C5392 + C141216 * C5508) * C47710 +
                       (C55527 * C5326 + C141216 * C5330) * C47810) *
                          C14037 +
                      (C61852 * C141358 + C61851 * C47811 +
                       (C55527 * C1689 + C141216 * C1877) * C47710 +
                       (C55527 * C1600 + C141216 * C1605) * C47810) *
                          C14036 +
                      (C56306 * C141358 + C56305 * C47811 +
                       (C55527 * C190 + C141216 * C363) * C47710 +
                       (C55527 * C109 + C141216 * C115) * C47810) *
                          C14035) *
                         C141294 * C816) *
                        C141483)) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[64] +=
        (-std::pow(Pi, 2.5) *
         (((C55744 * C108 + C55749 + C55749 + C55522 * C419 + C55745 * C823 +
            C55750 + C55750 + C55523 * C1171 + C55746 * C2960 + C55751 +
            C55751 + C55524 * C3196 + C55747 * C6729 + C55752 + C55752 +
            C55525 * C7289) *
               C141216 * C141320 * C141294 * C816 -
           (C55747 * C9768 + C56377 + C56377 + C55525 * C10121 +
            C55746 * C6729 + C56378 + C56378 + C55524 * C7289 + C55745 * C2960 +
            C56379 + C56379 + C55523 * C3196 + C55744 * C823 + C56380 + C56380 +
            C55522 * C1171) *
               C141216 * C141320 * C141294 * C141485) *
              C818 +
          ((C55744 * C822 + C56381 + C56381 + C55522 * C1170 + C55745 * C2961 +
            C56382 + C56382 + C55523 * C3197 + C55746 * C6728 + C56383 +
            C56383 + C55524 * C7288 + C55747 * C9769 + C56384 + C56384 +
            C55525 * C10122) *
               C141216 * C141320 * C141294 * C141485 -
           (C55747 * C6728 + C55753 + C55753 + C55525 * C7288 + C55746 * C2961 +
            C55754 + C55754 + C55524 * C3197 + C55745 * C822 + C55755 + C55755 +
            C55523 * C1170 + C55744 * C109 + C55756 + C55756 + C55522 * C420) *
               C141216 * C141320 * C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C48072 * C108 + C48075 + C48075 + C47710 * C419 + C48073 * C823 +
             C48076 + C48076 + C141358 * C1171) *
                C47707 +
            (C48109 + C48110) * C47708 + C48115 * C47709) *
               C141320 * C141294 * C816 -
           ((C49078 + C49079) * C47709 + (C49080 + C49081) * C47708 +
            (C48073 * C2960 + C49066 + C49066 + C141358 * C3196 +
             C48072 * C823 + C49067 + C49067 + C47710 * C1171) *
                C47707) *
               C141320 * C141294 * C141485) *
              C818 +
          (((C49081 + C49080) * C47707 + (C49079 + C49078) * C47708 +
            (C48072 * C820 + C49068 + C49068 + C47710 * C1168 + C48073 * C2963 +
             C49069 + C49069 + C141358 * C3199) *
                C47709) *
               C141320 * C141294 * C141485 -
           ((C48113 + C48114) * C47709 + (C48112 + C48111) * C47708 +
            (C48110 + C48109) * C47707) *
               C141320 * C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C48072 * C108 + C48075 + C48075 + C47710 * C419 + C48073 * C823 +
             C48076 + C48076 + C141358 * C1171) *
                C141216 * C14035 +
            (C48072 * C1601 + C50055 + C50055 + C47710 * C1949 +
             C48073 * C3490 + C50054 + C50054 + C141358 * C3790) *
                C141216 * C14036 +
            (C48072 * C5325 + C55170 + C55170 + C47710 * C5561 +
             C48073 * C13301 + C55171 + C55171 + C141358 * C13635) *
                C141216 * C14037) *
               C141294 * C816 -
           ((C48073 * C13303 + C61953 + C61953 + C141358 * C13636 +
             C48072 * C13301 + C61954 + C61954 + C47710 * C13635) *
                C141216 * C14037 +
            (C48073 * C7887 + C52624 + C52624 + C141358 * C8345 +
             C48072 * C3490 + C52623 + C52623 + C47710 * C3790) *
                C141216 * C14036 +
            (C48073 * C2960 + C49066 + C49066 + C141358 * C3196 +
             C48072 * C823 + C49067 + C49067 + C47710 * C1171) *
                C141216 * C14035) *
               C141294 * C141485) *
              C818 +
          (((C49081 + C49080) * C141216 * C14035 +
            (C48072 * C3491 + C52625 + C52625 + C47710 * C3791 +
             C48073 * C7886 + C52626 + C52626 + C141358 * C8344) *
                C141216 * C14036 +
            (C48072 * C13302 + C61955 + C61955 + C47710 * C13637 +
             C48073 * C13304 + C61956 + C61956 + C141358 * C13638) *
                C141216 * C14037) *
               C141294 * C141485 -
           ((C48073 * C13302 + C55173 + C55173 + C141358 * C13637 +
             C48072 * C5326 + C55172 + C55172 + C47710 * C5562) *
                C141216 * C14037 +
            (C50068 + C50069) * C141216 * C14036 +
            (C48110 + C48109) * C141216 * C14035) *
               C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[64] +=
        (-std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141320 * C276) * C55590 +
            (C275 * C189 + C141320 * C501) * C55522 + C7032 * C55591 +
            C7428 * C55523 + C7034 * C55592 + C7429 * C55524 + C9954 * C55593 +
            C10208 * C55525) *
               C141216 * C141294 * C816 -
           ((C275 * C9862 + C141320 * C10203) * C55525 +
            (C275 * C9768 + C141320 * C9940) * C55593 + C10208 * C55524 +
            C9954 * C55592 + C7429 * C55523 + C7034 * C55591 + C7428 * C55522 +
            C7032 * C55590) *
               C141216 * C141294 * C141485) *
              C818 +
          ((C1031 * C55590 + C1276 * C55522 + C6086 * C55591 + C6371 * C55523 +
            C7037 * C55592 + C7430 * C55524 +
            (C275 * C9769 + C141320 * C9941) * C55593 +
            (C275 * C9863 + C141320 * C10204) * C55525) *
               C141216 * C141294 * C141485 -
           (C7430 * C55525 + C7037 * C55593 + C6371 * C55524 + C6086 * C55592 +
            C1276 * C55523 + C1031 * C55591 + C520 * C55522 + C305 * C55590) *
               C141216 * C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141320 * C276) * C47810 +
             (C275 * C189 + C141320 * C501) * C47710 + C7032 * C47811 +
             C7428 * C141358) *
                C47707 +
            (C48190 + C48191 + C48192 + C48193) * C47708 + C48204 * C47709) *
               C141294 * C816 -
           ((C49180 + C49181 + C49182 + C49183) * C47709 +
            (C49184 + C49185 + C49186 + C49187) * C47708 +
            (C7429 * C141358 + C7034 * C47811 + C7428 * C47710 +
             C7032 * C47810) *
                C47707) *
               C141294 * C141485) *
              C818 +
          (((C49187 + C49186 + C49185 + C49184) * C47707 +
            (C49183 + C49182 + C49181 + C49180) * C47708 +
            (C1027 * C47810 + C1274 * C47710 +
             (C275 * C2963 + C141320 * C3087) * C47811 +
             (C275 * C3029 + C141320 * C3257) * C141358) *
                C47709) *
               C141294 * C141485 -
           ((C48198 + C48199 + C48200 + C48201) * C47709 +
            (C48197 + C48196 + C48195 + C48194) * C47708 +
            (C48193 + C48192 + C48191 + C48190) * C47707) *
               C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C14204 * C108 + C14035 * C276 + C14205 * C1601 + C14036 * C1784 +
             C14206 * C5325 + C14037 * C5449) *
                C47810 +
            (C14204 * C189 + C14035 * C501 + C14205 * C1690 + C14036 * C2040 +
             C14206 * C5391 + C14037 * C5619) *
                C47710 +
            (C61733 + C61734 + C61735) * C47811 +
            (C62061 + C62062 + C62063) * C141358) *
               C141216 * C141294 * C816 -
           ((C14206 * C13394 + C14037 * C13720 + C14205 * C8006 +
             C14036 * C8470 + C14204 * C3026 + C14035 * C3254) *
                C141358 +
            (C14206 * C13303 + C14037 * C13477 + C14205 * C7887 +
             C14036 * C8128 + C14204 * C2960 + C14035 * C3084) *
                C47811 +
            (C62063 + C62062 + C62061) * C47710 +
            (C61735 + C61734 + C61733) * C47810) *
               C141216 * C141294 * C141485) *
              C818 +
          (((C15111 + C15110 + C15109) * C47810 +
            (C15430 + C15429 + C15428) * C47710 +
            (C14204 * C2961 + C14035 * C3085 + C14205 * C7886 + C14036 * C8127 +
             C14206 * C13304 + C14037 * C13478) *
                C47811 +
            (C14204 * C3027 + C14035 * C3255 + C14205 * C8005 + C14036 * C8469 +
             C14206 * C13396 + C14037 * C13722) *
                C141358) *
               C141216 * C141294 * C141485 -
           ((C15428 + C15429 + C15430) * C141358 +
            (C15109 + C15110 + C15111) * C47811 +
            (C14490 + C14489 + C14488) * C47710 +
            (C14234 + C14233 + C14232) * C47810) *
               C141216 * C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q));
    d2eezx[64] +=
        (-std::pow(Pi, 2.5) *
         (((((C55527 * C108 + C141216 * C114) * C275 +
             (C55527 * C276 + C141216 * C579) * C141320) *
                C55522 +
            (C56517 + C56541) * C55523 + (C56520 + C56542) * C55524 +
            (C56523 + C56543) * C55525) *
               C141294 * C816 -
           (((C55527 * C9940 + C141216 * C10282) * C141320 +
             (C55527 * C9768 + C141216 * C9770) * C275) *
                C55525 +
            (C56543 + C56523) * C55524 + (C56542 + C56520) * C55523 +
            (C56541 + C56517) * C55522) *
               C141294 * C141485) *
              C818 +
          (((C56526 + C56544) * C55522 + (C56529 + C56545) * C55523 +
            (C56532 + C56546) * C55524 +
            ((C55527 * C9769 + C141216 * C9771) * C275 +
             (C55527 * C9941 + C141216 * C10283) * C141320) *
                C55525) *
               C141294 * C141485 -
           ((C56546 + C56532) * C55525 + (C56545 + C56529) * C55524 +
            (C56544 + C56526) * C55523 +
            ((C55527 * C277 + C141216 * C580) * C141320 +
             (C55527 * C109 + C141216 * C115) * C275) *
                C55522) *
               C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47713 * C108 + C47707 * C114 + C47715 * C109 + C47708 * C115 +
              C47717 * C110 + C47709 * C116) *
                 C275 +
             (C47713 * C276 + C47707 * C579 + C47715 * C277 + C47708 * C580 +
              C47717 * C278 + C47709 * C581) *
                 C141320) *
                C47710 +
            ((C48944 + C48945 + C48946) * C275 +
             (C49298 + C49299 + C49300) * C141320) *
                C141358) *
               C141294 * C816 -
           (((C47717 * C3086 + C47709 * C3310 + C47715 * C3085 +
              C47708 * C3309 + C47713 * C3084 + C47707 * C3308) *
                 C141320 +
             (C47717 * C2962 + C47709 * C2966 + C47715 * C2961 +
              C47708 * C2965 + C47713 * C2960 + C47707 * C2964) *
                 C275) *
                C141358 +
            ((C49300 + C49299 + C49298) * C141320 +
             (C48946 + C48945 + C48944) * C275) *
                C47710) *
               C141294 * C141485) *
              C818 +
          ((((C48950 + C48951 + C48952) * C275 +
             (C49301 + C49302 + C49303) * C141320) *
                C47710 +
            ((C47713 * C2961 + C47707 * C2965 + C47715 * C2962 +
              C47708 * C2966 + C47717 * C2963 + C47709 * C2967) *
                 C275 +
             (C47713 * C3085 + C47707 * C3309 + C47715 * C3086 +
              C47708 * C3310 + C47717 * C3087 + C47709 * C3311) *
                 C141320) *
                C141358) *
               C141294 * C141485 -
           (((C49303 + C49302 + C49301) * C141320 +
             (C48952 + C48951 + C48950) * C275) *
                C141358 +
            ((C47717 * C279 + C47709 * C582 + C47715 * C278 + C47708 * C581 +
              C47713 * C277 + C47707 * C580) *
                 C141320 +
             (C47717 * C111 + C47709 * C117 + C47715 * C110 + C47708 * C116 +
              C47713 * C109 + C47707 * C115) *
                 C275) *
                C47710) *
               C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C55527 * C108 + C141216 * C114) * C14204 +
             (C55527 * C276 + C141216 * C579) * C14035 +
             (C55527 * C1601 + C141216 * C1606) * C14205 +
             (C55527 * C1784 + C141216 * C2126) * C14036 +
             (C55527 * C5325 + C141216 * C5329) * C14206 +
             (C55527 * C5449 + C141216 * C5673) * C14037) *
                C47710 +
            (C62162 + C62163 + C62164 + C62165 + C62166 + C62180) * C141358) *
               C141294 * C816 -
           (((C55527 * C13477 + C141216 * C13799) * C14037 +
             (C55527 * C13303 + C141216 * C13307) * C14206 + C58928 * C14036 +
             C58707 * C14205 + C56536 * C14035 + C56301 * C14204) *
                C141358 +
            (C62180 + C62166 + C62165 + C62164 + C62163 + C62162) * C47710) *
               C141294 * C141485) *
              C818 +
          (((C62169 + C62170 + C62171 + C62181 + C62174 + C62182) * C47710 +
            (C56307 * C14204 + C56539 * C14035 +
             (C55527 * C7886 + C141216 * C7889) * C14205 +
             (C55527 * C8127 + C141216 * C8582) * C14036 +
             (C55527 * C13304 + C141216 * C13308) * C14206 +
             (C55527 * C13478 + C141216 * C13800) * C14037) *
                C141358) *
               C141294 * C141485 -
           ((C62182 + C62174 + C62181 + C62171 + C62170 + C62169) * C141358 +
            ((C55527 * C5450 + C141216 * C5674) * C14037 +
             (C55527 * C5326 + C141216 * C5330) * C14206 +
             (C55527 * C1783 + C141216 * C2125) * C14036 +
             (C55527 * C1600 + C141216 * C1605) * C14205 +
             (C55527 * C277 + C141216 * C580) * C14035 +
             (C55527 * C109 + C141216 * C115) * C14204) *
                C47710) *
               C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q));
    d2eezy[64] +=
        (-std::pow(Pi, 2.5) *
         ((((C55590 * C108 + C55522 * C189 + C55591 * C823 + C55523 * C912 +
             C55592 * C2960 + C55524 * C3026 + C55593 * C6729 +
             C55525 * C6880) *
                C275 +
            (C55590 * C276 + C55522 * C635 + C55591 * C1006 + C55523 * C1419 +
             C55592 * C3084 + C55524 * C3362 + C55593 * C7002 +
             C55525 * C7655) *
                C141320) *
               C141216 * C141294 * C816 -
           ((C55593 * C9940 + C55525 * C10368 + C55592 * C7002 +
             C55524 * C7655 + C55591 * C3084 + C55523 * C3362 + C55590 * C1006 +
             C55522 * C1419) *
                C141320 +
            (C55593 * C9768 + C55525 * C9862 + C55592 * C6729 + C55524 * C6880 +
             C55591 * C2960 + C55523 * C3026 + C55590 * C823 + C55522 * C912) *
                C275) *
               C141216 * C141294 * C141485) *
              C818 +
          (((C55590 * C822 + C55522 * C911 + C55591 * C2961 + C55523 * C3027 +
             C55592 * C6728 + C55524 * C6879 + C55593 * C9769 +
             C55525 * C9863) *
                C275 +
            (C55590 * C1005 + C55522 * C1418 + C55591 * C3085 + C55523 * C3363 +
             C55592 * C7001 + C55524 * C7654 + C55593 * C9941 +
             C55525 * C10369) *
                C141320) *
               C141216 * C141294 * C141485 -
           ((C55593 * C7001 + C55525 * C7654 + C55592 * C3085 + C55524 * C3363 +
             C55591 * C1005 + C55523 * C1418 + C55590 * C277 + C55522 * C636) *
                C141320 +
            (C55593 * C6728 + C55525 * C6879 + C55592 * C2961 + C55524 * C3027 +
             C55591 * C822 + C55523 * C911 + C55590 * C109 + C55522 * C190) *
                C275) *
               C141216 * C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47810 * C108 + C47710 * C189 + C47811 * C823 + C141358 * C912) *
                 C275 +
             (C47810 * C276 + C47710 * C635 + C47811 * C1006 +
              C141358 * C1419) *
                 C141320) *
                C47707 +
            ((C47837 + C47838) * C275 + (C48366 + C48367) * C141320) * C47708 +
            C48374 * C47709) *
               C141294 * C816 -
           (((C49410 + C49411) * C141320 + (C48706 + C48707) * C275) * C47709 +
            ((C49412 + C49413) * C141320 + (C48710 + C48711) * C275) * C47708 +
            ((C47811 * C3084 + C141358 * C3362 + C47810 * C1006 +
              C47710 * C1419) *
                 C141320 +
             (C47811 * C2960 + C141358 * C3026 + C47810 * C823 +
              C47710 * C912) *
                 C275) *
                C47707) *
               C141294 * C141485) *
              C818 +
          ((((C48711 + C48710) * C275 + (C49413 + C49412) * C141320) * C47707 +
            ((C48707 + C48706) * C275 + (C49411 + C49410) * C141320) * C47708 +
            ((C47810 * C820 + C47710 * C909 + C47811 * C2963 +
              C141358 * C3029) *
                 C275 +
             (C47810 * C1003 + C47710 * C1416 + C47811 * C3087 +
              C141358 * C3365) *
                 C141320) *
                C47709) *
               C141294 * C141485 -
           (((C48370 + C48371) * C141320 + (C47847 + C47848) * C275) * C47709 +
            ((C48369 + C48368) * C141320 + (C47842 + C47841) * C275) * C47708 +
            ((C48367 + C48366) * C141320 + (C47838 + C47837) * C275) * C47707) *
               C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47810 * C108 + C47710 * C189 + C47811 * C823 + C141358 * C912) *
                C14204 +
            (C47810 * C276 + C47710 * C635 + C47811 * C1006 + C141358 * C1419) *
                C14035 +
            (C47810 * C1601 + C47710 * C1690 + C47811 * C3490 +
             C141358 * C3572) *
                C14205 +
            (C47810 * C1784 + C47710 * C2197 + C47811 * C3646 +
             C141358 * C4004) *
                C14036 +
            (C47810 * C5325 + C47710 * C5391 + C47811 * C13301 +
             C141358 * C13393) *
                C14206 +
            (C47810 * C5449 + C47710 * C5727 + C47811 * C13475 +
             C141358 * C13875) *
                C14037) *
               C141216 * C141294 * C816 -
           ((C47811 * C13477 + C141358 * C13876 + C47810 * C13475 +
             C47710 * C13875) *
                C14037 +
            (C47811 * C13303 + C141358 * C13394 + C47810 * C13301 +
             C47710 * C13393) *
                C14206 +
            (C47811 * C8128 + C141358 * C8684 + C47810 * C3646 +
             C47710 * C4004) *
                C14036 +
            (C47811 * C7887 + C141358 * C8006 + C47810 * C3490 +
             C47710 * C3572) *
                C14205 +
            (C47811 * C3084 + C141358 * C3362 + C47810 * C1006 +
             C47710 * C1419) *
                C14035 +
            (C47811 * C2960 + C141358 * C3026 + C47810 * C823 + C47710 * C912) *
                C14204) *
               C141216 * C141294 * C141485) *
              C818 +
          (((C48711 + C48710) * C14204 + (C49413 + C49412) * C14035 +
            (C47810 * C3491 + C47710 * C3573 + C47811 * C7886 +
             C141358 * C8005) *
                C14205 +
            (C47810 * C3647 + C47710 * C4005 + C47811 * C8127 +
             C141358 * C8683) *
                C14036 +
            (C47810 * C13302 + C47710 * C13395 + C47811 * C13304 +
             C141358 * C13396) *
                C14206 +
            (C47810 * C13476 + C47710 * C13877 + C47811 * C13478 +
             C141358 * C13878) *
                C14037) *
               C141216 * C141294 * C141485 -
           ((C47811 * C13476 + C141358 * C13877 + C47810 * C5450 +
             C47710 * C5728) *
                C14037 +
            (C47811 * C13302 + C141358 * C13395 + C47810 * C5326 +
             C47710 * C5392) *
                C14206 +
            (C50382 + C50383) * C14036 + (C49746 + C49747) * C14205 +
            (C48367 + C48366) * C14035 + (C47838 + C47837) * C14204) *
               C141216 * C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q));
    d2eezz[64] +=
        (-std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C141320 * C714) * C55522 +
            C7785 * C55523 + C7786 * C55524 + C10453 * C55525) *
               C141216 * C141294 * C816 -
           ((C713 * C9768 + C10449 + C10449 + C141320 * C10444) * C55525 +
            C10453 * C55524 + C7786 * C55523 + C7785 * C55522) *
               C141216 * C141294 * C141485) *
              C818 +
          ((C1527 * C55522 + C6627 * C55523 + C7787 * C55524 +
            (C713 * C9769 + C10450 + C10450 + C141320 * C10445) * C55525) *
               C141216 * C141294 * C141485 -
           (C7787 * C55525 + C6627 * C55524 + C1527 * C55523 + C743 * C55522) *
               C141216 * C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C713 * C108 + C721 + C721 + C141320 * C714) * C47710 +
             C7785 * C141358) *
                C47707 +
            (C48449 + C48450) * C47708 + C48455 * C47709) *
               C141294 * C816 -
           ((C49512 + C49513) * C47709 + (C49514 + C49515) * C47708 +
            (C7786 * C141358 + C7785 * C47710) * C47707) *
               C141294 * C141485) *
              C818 +
          (((C49515 + C49514) * C47707 + (C49513 + C49512) * C47708 +
            (C1525 * C47710 +
             (C713 * C2963 + C3424 + C3424 + C141320 * C3419) * C141358) *
                C47709) *
               C141294 * C141485 -
           ((C48453 + C48454) * C47709 + (C48452 + C48451) * C47708 +
            (C48450 + C48449) * C47707) *
               C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C14733 * C108 + C14737 + C14737 + C14035 * C714 + C14734 * C1601 +
             C14738 + C14738 + C14036 * C2283 + C14735 * C5325 + C14739 +
             C14739 + C14037 * C5781) *
                C47710 +
            (C62391 + C62392 + C62393) * C141358) *
               C141216 * C141294 * C816 -
           ((C14735 * C13303 + C18481 + C18481 + C14037 * C13954 +
             C14734 * C7887 + C18480 + C18480 + C14036 * C8794 +
             C14733 * C2960 + C18479 + C18479 + C14035 * C3416) *
                C141358 +
            (C62393 + C62392 + C62391) * C47710) *
               C141216 * C141294 * C141485) *
              C818 +
          (((C15763 + C15762 + C15761) * C47710 +
            (C14733 * C2961 + C18482 + C18482 + C14035 * C3417 +
             C14734 * C7886 + C18483 + C18483 + C14036 * C8793 +
             C14735 * C13304 + C18484 + C18484 + C14037 * C13956) *
                C141358) *
               C141216 * C141294 * C141485 -
           ((C15761 + C15762 + C15763) * C141358 +
            (C14775 + C14774 + C14773) * C47710) *
               C141216 * C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q));
    d2eexx[65] +=
        (-std::pow(Pi, 2.5) *
         ((((C55526 * C108 + C55529 + C55529 + C141216 * C120) * C141320 *
                C55522 +
            C56059 * C55523 + C56060 * C55524 + C56061 * C55525) *
               C1596 -
           ((C55526 * C10551 + C56745 + C56745 + C141216 * C10555) * C141320 *
                C55525 +
            (C55526 * C7887 + C56746 + C56746 + C141216 * C7893) * C141320 *
                C55524 +
            (C55526 * C3490 + C56747 + C56747 + C141216 * C3498) * C141320 *
                C55523 +
            (C55526 * C1601 + C56748 + C56748 + C141216 * C1611) * C141320 *
                C55522) *
               C141487) *
              C141277 * C818 +
          (((C55526 * C1600 + C56749 + C56749 + C141216 * C1610) * C141320 *
                C55522 +
            (C55526 * C3491 + C56750 + C56750 + C141216 * C3499) * C141320 *
                C55523 +
            (C55526 * C7886 + C56751 + C56751 + C141216 * C7892) * C141320 *
                C55524 +
            (C55526 * C10552 + C56752 + C56752 + C141216 * C10556) * C141320 *
                C55525) *
               C141487 -
           (C56064 * C55525 + C56063 * C55524 + C56062 * C55523 +
            (C55526 * C109 + C55536 + C55536 + C141216 * C121) * C141320 *
                C55522) *
               C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47712 * C108 + C47719 + C47719 + C47707 * C120 + C47714 * C109 +
             C47720 + C47720 + C47708 * C121 + C47716 * C110 + C47721 + C47721 +
             C47709 * C122) *
                C141320 * C47710 +
            (C48584 + C48585 + C48586) * C141320 * C141358) *
               C1596 -
           ((C47716 * C3492 + C49614 + C49614 + C47709 * C3500 +
             C47714 * C3491 + C49615 + C49615 + C47708 * C3499 +
             C47712 * C3490 + C49616 + C49616 + C47707 * C3498) *
                C141320 * C141358 +
            (C47716 * C1599 + C49617 + C49617 + C47709 * C1609 +
             C47714 * C1600 + C49618 + C49618 + C47708 * C1610 +
             C47712 * C1601 + C49619 + C49619 + C47707 * C1611) *
                C141320 * C47710) *
               C141487) *
              C141277 * C818 +
          (((C47712 * C1600 + C49620 + C49620 + C47707 * C1610 +
             C47714 * C1599 + C49621 + C49621 + C47708 * C1609 +
             C47716 * C1598 + C49622 + C49622 + C47709 * C1608) *
                C141320 * C47710 +
            (C47712 * C3491 + C49623 + C49623 + C47707 * C3499 +
             C47714 * C3492 + C49624 + C49624 + C47708 * C3500 +
             C47716 * C3493 + C49625 + C49625 + C47709 * C3501) *
                C141320 * C141358) *
               C141487 -
           ((C48589 + C48588 + C48587) * C141320 * C141358 +
            (C47716 * C111 + C47728 + C47728 + C47709 * C123 + C47714 * C110 +
             C47729 + C47729 + C47708 * C122 + C47712 * C109 + C47730 + C47730 +
             C47707 * C121) *
                C141320 * C47710) *
               C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C55526 * C108 + C55529 + C55529 + C141216 * C120) * C14035 +
             C62512 * C14036 + C62513 * C14037) *
                C47710 +
            (C61503 + C61504 + C61522) * C141358) *
               C1596 -
           (((C55526 * C18582 + C62496 + C62496 + C141216 * C18586) * C14037 +
             C61519 * C14036 + C58473 * C14035) *
                C141358 +
            ((C55526 * C15862 + C62497 + C62497 + C141216 * C15868) * C14037 +
             C62513 * C14036 + C62512 * C14035) *
                C47710) *
               C141487) *
              C141277 * C818 +
          (((C62514 * C14035 + C62515 * C14036 +
             (C55526 * C15861 + C62502 + C62502 + C141216 * C15867) * C14037) *
                C47710 +
            (C61520 * C14035 + C61521 * C14036 +
             (C55526 * C18583 + C62503 + C62503 + C141216 * C18587) * C14037) *
                C141358) *
               C141487 -
           ((C61524 + C61523 + C61507) * C141358 +
            (C62515 * C14037 + C62514 * C14036 +
             (C55526 * C109 + C55536 + C55536 + C141216 * C121) * C14035) *
                C47710) *
               C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eexy[65] +=
        (-std::pow(Pi, 2.5) *
         ((((C55590 * C108 + C55522 * C189 + C55591 * C823 + C55523 * C912 +
             C55592 * C2960 + C55524 * C3026 + C55593 * C6729 +
             C55525 * C6880) *
                C55527 +
            (C55590 * C114 + C55522 * C195 + C55591 * C828 + C55523 * C917 +
             C55592 * C2964 + C55524 * C3030 + C55593 * C6732 +
             C55525 * C6883) *
                C141216) *
               C141320 * C1596 -
           ((C55593 * C10553 + C55525 * C10679 + C55592 * C7890 +
             C55524 * C8009 + C55591 * C3494 + C55523 * C3576 + C55590 * C1606 +
             C55522 * C1695) *
                C141216 +
            (C55593 * C10551 + C55525 * C10677 + C55592 * C7887 +
             C55524 * C8006 + C55591 * C3490 + C55523 * C3572 + C55590 * C1601 +
             C55522 * C1690) *
                C55527) *
               C141320 * C141487) *
              C141277 * C818 +
          (((C55590 * C1600 + C55522 * C1689 + C55591 * C3491 + C55523 * C3573 +
             C55592 * C7886 + C55524 * C8005 + C55593 * C10552 +
             C55525 * C10678) *
                C55527 +
            (C55590 * C1605 + C55522 * C1694 + C55591 * C3495 + C55523 * C3577 +
             C55592 * C7889 + C55524 * C8008 + C55593 * C10554 +
             C55525 * C10680) *
                C141216) *
               C141320 * C141487 -
           ((C55593 * C6731 + C55525 * C6882 + C55592 * C2965 + C55524 * C3031 +
             C55591 * C827 + C55523 * C916 + C55590 * C115 + C55522 * C196) *
                C141216 +
            (C55593 * C6728 + C55525 * C6879 + C55592 * C2961 + C55524 * C3027 +
             C55591 * C822 + C55523 * C911 + C55590 * C109 + C55522 * C190) *
                C55527) *
               C141320 * C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47810 * C108 + C47710 * C189 + C47811 * C823 + C141358 * C912) *
                C47713 +
            (C47810 * C114 + C47710 * C195 + C47811 * C828 + C141358 * C917) *
                C47707 +
            (C47837 + C47838) * C47715 + (C47839 + C47840) * C47708 +
            C47849 * C47717 + C47850 * C47709) *
               C141320 * C1596 -
           ((C49740 + C49741) * C47709 + (C49742 + C49743) * C47717 +
            (C49744 + C49745) * C47708 + (C49746 + C49747) * C47715 +
            (C47811 * C3494 + C141358 * C3576 + C47810 * C1606 +
             C47710 * C1695) *
                C47707 +
            (C47811 * C3490 + C141358 * C3572 + C47810 * C1601 +
             C47710 * C1690) *
                C47713) *
               C141320 * C141487) *
              C141277 * C818 +
          (((C49747 + C49746) * C47713 + (C49745 + C49744) * C47707 +
            (C49743 + C49742) * C47715 + (C49741 + C49740) * C47708 +
            (C47810 * C1598 + C47710 * C1687 + C47811 * C3493 +
             C141358 * C3575) *
                C47717 +
            (C47810 * C1603 + C47710 * C1692 + C47811 * C3497 +
             C141358 * C3579) *
                C47709) *
               C141320 * C141487 -
           ((C47845 + C47846) * C47709 + (C47847 + C47848) * C47717 +
            (C47844 + C47843) * C47708 + (C47842 + C47841) * C47715 +
            (C47840 + C47839) * C47707 + (C47838 + C47837) * C47713) *
               C141320 * C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C47810 * C108 + C47710 * C189 + C47811 * C823 + C141358 * C912) *
                 C55527 +
             (C47810 * C114 + C47710 * C195 + C47811 * C828 + C141358 * C917) *
                 C141216) *
                C14035 +
            ((C62638 + C62639) * C55527 + (C62640 + C62641) * C141216) *
                C14036 +
            ((C62642 + C62643) * C55527 + (C62644 + C62645) * C141216) *
                C14037) *
               C1596 -
           (((C47811 * C18584 + C141358 * C18700 + C47810 * C15865 +
              C47710 * C16016) *
                 C141216 +
             (C47811 * C18582 + C141358 * C18698 + C47810 * C15862 +
              C47710 * C16013) *
                 C55527) *
                C14037 +
            ((C62645 + C62644) * C141216 + (C62643 + C62642) * C55527) *
                C14036 +
            ((C62641 + C62640) * C141216 + (C62639 + C62638) * C55527) *
                C14035) *
               C141487) *
              C141277 * C818 +
          ((((C49747 + C49746) * C55527 + (C49745 + C49744) * C141216) *
                C14035 +
            ((C62646 + C62647) * C55527 + (C62648 + C62649) * C141216) *
                C14036 +
            ((C47810 * C15861 + C47710 * C16012 + C47811 * C18583 +
              C141358 * C18699) *
                 C55527 +
             (C47810 * C15864 + C47710 * C16015 + C47811 * C18585 +
              C141358 * C18701) *
                 C141216) *
                C14037) *
               C141487 -
           (((C62649 + C62648) * C141216 + (C62647 + C62646) * C55527) *
                C14037 +
            ((C49744 + C49745) * C141216 + (C49746 + C49747) * C55527) *
                C14036 +
            ((C47840 + C47839) * C141216 + (C47838 + C47837) * C55527) *
                C14035) *
               C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eexz[65] +=
        (-std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141320 * C276) * C55527 +
             (C275 * C114 + C141320 * C282) * C141216) *
                C55522 +
            (C56197 + C56198) * C55523 + (C56199 + C56200) * C55524 +
            (C56201 + C56202) * C55525) *
               C1596 -
           (((C275 * C10553 + C141320 * C10781) * C141216 +
             (C275 * C10551 + C141320 * C10779) * C55527) *
                C55525 +
            (C10796 * C141216 + C10797 * C55527) * C55524 +
            (C10798 * C141216 + C10799 * C55527) * C55523 +
            ((C275 * C1606 + C141320 * C1789) * C141216 +
             (C275 * C1601 + C141320 * C1784) * C55527) *
                C55522) *
               C141487) *
              C141277 * C818 +
          (((C1809 * C55527 + C1808 * C141216) * C55522 +
            (C8145 * C55527 + C8144 * C141216) * C55523 +
            (C8143 * C55527 + C8142 * C141216) * C55524 +
            ((C275 * C10552 + C141320 * C10780) * C55527 +
             (C275 * C10554 + C141320 * C10782) * C141216) *
                C55525) *
               C141487 -
           ((C56208 + C56207) * C55525 + (C56206 + C56205) * C55524 +
            (C56204 + C56203) * C55523 +
            (C306 * C141216 + C305 * C55527) * C55522) *
               C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141320 * C276) * C47713 +
             (C275 * C114 + C141320 * C282) * C47707 + C305 * C47715 +
             C306 * C47708 + C307 * C47717 + C308 * C47709) *
                C47710 +
            (C48810 + C48811 + C48812 + C48813 + C48814 + C48815) * C141358) *
               C1596 -
           ((C24212 * C47709 + C24213 * C47717 + C8144 * C47708 +
             C8145 * C47715 + C10798 * C47707 + C10799 * C47713) *
                C141358 +
            (C1806 * C47709 + C1807 * C47717 + C1808 * C47708 + C1809 * C47715 +
             (C275 * C1606 + C141320 * C1789) * C47707 +
             (C275 * C1601 + C141320 * C1784) * C47713) *
                C47710) *
               C141487) *
              C141277 * C818 +
          (((C1809 * C47713 + C1808 * C47707 + C1807 * C47715 + C1806 * C47708 +
             C1805 * C47717 + C1804 * C47709) *
                C47710 +
            (C8145 * C47713 + C8144 * C47707 + C24213 * C47715 +
             C24212 * C47708 + (C275 * C3493 + C141320 * C3649) * C47717 +
             (C275 * C3497 + C141320 * C3653) * C47709) *
                C141358) *
               C141487 -
           ((C48821 + C48820 + C48819 + C48818 + C48817 + C48816) * C141358 +
            (C310 * C47709 + C309 * C47717 + C308 * C47708 + C307 * C47715 +
             C306 * C47707 + C305 * C47713) *
                C47710) *
               C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C14204 * C108 + C14035 * C276 + C14205 * C1601 + C14036 * C1784 +
              C14206 * C5325 + C14037 * C5449) *
                 C55527 +
             (C14204 * C114 + C14035 * C282 + C14205 * C1606 + C14036 * C1789 +
              C14206 * C5329 + C14037 * C5453) *
                 C141216) *
                C47710 +
            ((C61733 + C61734 + C61735) * C55527 +
             (C61736 + C61737 + C61738) * C141216) *
                C141358) *
               C1596 -
           (((C14206 * C18584 + C14037 * C18822 + C14205 * C13305 +
              C14036 * C13479 + C14204 * C3494 + C14035 * C3650) *
                 C141216 +
             (C14206 * C18582 + C14037 * C18820 + C14205 * C13301 +
              C14036 * C13475 + C14204 * C3490 + C14035 * C3646) *
                 C55527) *
                C141358 +
            ((C14206 * C15865 + C14037 * C16154 + C14205 * C5329 +
              C14036 * C5453 + C14204 * C1606 + C14035 * C1789) *
                 C141216 +
             (C14206 * C15862 + C14037 * C16151 + C14205 * C5325 +
              C14036 * C5449 + C14204 * C1601 + C14035 * C1784) *
                 C55527) *
                C47710) *
               C141487) *
              C141277 * C818 +
          ((((C16174 + C16173 + C16172) * C55527 +
             (C16171 + C16170 + C16169) * C141216) *
                C47710 +
            ((C14204 * C3491 + C14035 * C3647 + C14205 * C13302 +
              C14036 * C13476 + C14206 * C18583 + C14037 * C18821) *
                 C55527 +
             (C14204 * C3495 + C14035 * C3651 + C14205 * C13306 +
              C14036 * C13480 + C14206 * C18585 + C14037 * C18823) *
                 C141216) *
                C141358) *
               C141487 -
           (((C15106 + C15107 + C15108) * C141216 +
             (C15109 + C15110 + C15111) * C55527) *
                C141358 +
            ((C14237 + C14236 + C14235) * C141216 +
             (C14234 + C14233 + C14232) * C55527) *
                C47710) *
               C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[65] += (-std::pow(Pi, 2.5) *
                   ((((C55527 * C108 + C141216 * C114) * C55590 +
                      (C55527 * C189 + C141216 * C362) * C55522 +
                      C56299 * C55591 + C56300 * C55523 + C56301 * C55592 +
                      C56302 * C55524 + C56303 * C55593 + C56304 * C55525) *
                         C141320 * C1596 -
                     ((C55527 * C10677 + C141216 * C10901) * C55525 +
                      (C55527 * C10551 + C141216 * C10553) * C55593 +
                      (C55527 * C8006 + C141216 * C8244) * C55524 +
                      (C55527 * C7887 + C141216 * C7890) * C55592 +
                      (C55527 * C3572 + C141216 * C3720) * C55523 +
                      (C55527 * C3490 + C141216 * C3494) * C55591 +
                      (C55527 * C1690 + C141216 * C1878) * C55522 +
                      (C55527 * C1601 + C141216 * C1606) * C55590) *
                         C141320 * C141487) *
                        C141277 * C818 +
                    (((C55527 * C1600 + C141216 * C1605) * C55590 +
                      (C55527 * C1689 + C141216 * C1877) * C55522 +
                      (C55527 * C3491 + C141216 * C3495) * C55591 +
                      (C55527 * C3573 + C141216 * C3721) * C55523 +
                      (C55527 * C7886 + C141216 * C7889) * C55592 +
                      (C55527 * C8005 + C141216 * C8243) * C55524 +
                      (C55527 * C10552 + C141216 * C10554) * C55593 +
                      (C55527 * C10678 + C141216 * C10902) * C55525) *
                         C141320 * C141487 -
                     (C56310 * C55525 + C56309 * C55593 + C56308 * C55524 +
                      C56307 * C55592 + C56306 * C55523 + C56305 * C55591 +
                      (C55527 * C190 + C141216 * C363) * C55522 +
                      (C55527 * C109 + C141216 * C115) * C55590) *
                         C141320 * C1596) *
                        C141277 * C141483)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   ((((C47713 * C108 + C47707 * C114 + C47715 * C109 +
                       C47708 * C115 + C47717 * C110 + C47709 * C116) *
                          C47810 +
                      (C47713 * C189 + C47707 * C362 + C47715 * C190 +
                       C47708 * C363 + C47717 * C191 + C47709 * C364) *
                          C47710 +
                      (C48944 + C48945 + C48946) * C47811 +
                      (C48947 + C48948 + C48949) * C141358) *
                         C141320 * C1596 -
                     ((C47717 * C3574 + C47709 * C3722 + C47715 * C3573 +
                       C47708 * C3721 + C47713 * C3572 + C47707 * C3720) *
                          C141358 +
                      (C47717 * C3492 + C47709 * C3496 + C47715 * C3491 +
                       C47708 * C3495 + C47713 * C3490 + C47707 * C3494) *
                          C47811 +
                      (C47717 * C1688 + C47709 * C1876 + C47715 * C1689 +
                       C47708 * C1877 + C47713 * C1690 + C47707 * C1878) *
                          C47710 +
                      (C47717 * C1599 + C47709 * C1604 + C47715 * C1600 +
                       C47708 * C1605 + C47713 * C1601 + C47707 * C1606) *
                          C47810) *
                         C141320 * C141487) *
                        C141277 * C818 +
                    (((C47713 * C1600 + C47707 * C1605 + C47715 * C1599 +
                       C47708 * C1604 + C47717 * C1598 + C47709 * C1603) *
                          C47810 +
                      (C47713 * C1689 + C47707 * C1877 + C47715 * C1688 +
                       C47708 * C1876 + C47717 * C1687 + C47709 * C1875) *
                          C47710 +
                      (C47713 * C3491 + C47707 * C3495 + C47715 * C3492 +
                       C47708 * C3496 + C47717 * C3493 + C47709 * C3497) *
                          C47811 +
                      (C47713 * C3573 + C47707 * C3721 + C47715 * C3574 +
                       C47708 * C3722 + C47717 * C3575 + C47709 * C3723) *
                          C141358) *
                         C141320 * C141487 -
                     ((C48955 + C48954 + C48953) * C141358 +
                      (C48952 + C48951 + C48950) * C47811 +
                      (C47717 * C192 + C47709 * C365 + C47715 * C191 +
                       C47708 * C364 + C47713 * C190 + C47707 * C363) *
                          C47710 +
                      (C47717 * C111 + C47709 * C117 + C47715 * C110 +
                       C47708 * C116 + C47713 * C109 + C47707 * C115) *
                          C47810) *
                         C141320 * C1596) *
                        C141277 * C141483)) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   (((((C55527 * C108 + C141216 * C114) * C47810 +
                       (C55527 * C189 + C141216 * C362) * C47710 +
                       C56299 * C47811 + C56300 * C141358) *
                          C14035 +
                      (C62878 + C62879 + C62850 + C62851) * C14036 +
                      (C62880 + C62881 + C62856 + C62857) * C14037) *
                         C1596 -
                     (((C55527 * C18698 + C141216 * C18922) * C141358 +
                       (C55527 * C18582 + C141216 * C18584) * C47811 +
                       (C55527 * C16013 + C141216 * C16273) * C47710 +
                       (C55527 * C15862 + C141216 * C15865) * C47810) *
                          C14037 +
                      (C62857 + C62856 + C62881 + C62880) * C14036 +
                      (C62851 + C62850 + C62879 + C62878) * C14035) *
                         C141487) *
                        C141277 * C818 +
                    (((C62882 + C62883 + C62862 + C62863) * C14035 +
                      (C62884 + C62885 + C62868 + C62869) * C14036 +
                      ((C55527 * C15861 + C141216 * C15864) * C47810 +
                       (C55527 * C16012 + C141216 * C16272) * C47710 +
                       (C55527 * C18583 + C141216 * C18585) * C47811 +
                       (C55527 * C18699 + C141216 * C18923) * C141358) *
                          C14037) *
                         C141487 -
                     ((C62869 + C62868 + C62885 + C62884) * C14037 +
                      (C62863 + C62862 + C62883 + C62882) * C14036 +
                      (C56306 * C141358 + C56305 * C47811 +
                       (C55527 * C190 + C141216 * C363) * C47710 +
                       (C55527 * C109 + C141216 * C115) * C47810) *
                          C14035) *
                         C1596) *
                        C141277 * C141483)) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[65] +=
        (-std::pow(Pi, 2.5) *
         (((C55744 * C108 + C55749 + C55749 + C55522 * C419 + C55745 * C823 +
            C55750 + C55750 + C55523 * C1171 + C55746 * C2960 + C55751 +
            C55751 + C55524 * C3196 + C55747 * C6729 + C55752 + C55752 +
            C55525 * C7289) *
               C141216 * C141320 * C1596 -
           (C55747 * C10551 + C57017 + C57017 + C55525 * C11025 +
            C55746 * C7887 + C57018 + C57018 + C55524 * C8345 + C55745 * C3490 +
            C57019 + C57019 + C55523 * C3790 + C55744 * C1601 + C57020 +
            C57020 + C55522 * C1949) *
               C141216 * C141320 * C141487) *
              C141277 * C818 +
          ((C55744 * C1600 + C57021 + C57021 + C55522 * C1948 + C55745 * C3491 +
            C57022 + C57022 + C55523 * C3791 + C55746 * C7886 + C57023 +
            C57023 + C55524 * C8344 + C55747 * C10552 + C57024 + C57024 +
            C55525 * C11026) *
               C141216 * C141320 * C141487 -
           (C55747 * C6728 + C55753 + C55753 + C55525 * C7288 + C55746 * C2961 +
            C55754 + C55754 + C55524 * C3197 + C55745 * C822 + C55755 + C55755 +
            C55523 * C1170 + C55744 * C109 + C55756 + C55756 + C55522 * C420) *
               C141216 * C141320 * C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C48072 * C108 + C48075 + C48075 + C47710 * C419 + C48073 * C823 +
             C48076 + C48076 + C141358 * C1171) *
                C47707 +
            (C48109 + C48110) * C47708 + C48115 * C47709) *
               C141320 * C1596 -
           ((C50066 + C50067) * C47709 + (C50068 + C50069) * C47708 +
            (C48073 * C3490 + C50054 + C50054 + C141358 * C3790 +
             C48072 * C1601 + C50055 + C50055 + C47710 * C1949) *
                C47707) *
               C141320 * C141487) *
              C141277 * C818 +
          (((C50069 + C50068) * C47707 + (C50067 + C50066) * C47708 +
            (C48072 * C1598 + C50056 + C50056 + C47710 * C1946 +
             C48073 * C3493 + C50057 + C50057 + C141358 * C3793) *
                C47709) *
               C141320 * C141487 -
           ((C48113 + C48114) * C47709 + (C48112 + C48111) * C47708 +
            (C48110 + C48109) * C47707) *
               C141320 * C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C48072 * C108 + C48075 + C48075 + C47710 * C419 + C48073 * C823 +
             C48076 + C48076 + C141358 * C1171) *
                C141216 * C14035 +
            (C63012 + C63013) * C141216 * C14036 +
            (C63014 + C63015) * C141216 * C14037) *
               C1596 -
           ((C48073 * C18582 + C62992 + C62992 + C141358 * C19034 +
             C48072 * C15862 + C62993 + C62993 + C47710 * C16422) *
                C141216 * C14037 +
            (C63015 + C63014) * C141216 * C14036 +
            (C63013 + C63012) * C141216 * C14035) *
               C141487) *
              C141277 * C818 +
          (((C50069 + C50068) * C141216 * C14035 +
            (C63016 + C63017) * C141216 * C14036 +
            (C48072 * C15861 + C62998 + C62998 + C47710 * C16421 +
             C48073 * C18583 + C62999 + C62999 + C141358 * C19035) *
                C141216 * C14037) *
               C141487 -
           ((C63017 + C63016) * C141216 * C14037 +
            (C50068 + C50069) * C141216 * C14036 +
            (C48110 + C48109) * C141216 * C14035) *
               C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[65] +=
        (-std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141320 * C276) * C55590 +
            (C275 * C189 + C141320 * C501) * C55522 + C7032 * C55591 +
            C7428 * C55523 + C7034 * C55592 + C7429 * C55524 + C9954 * C55593 +
            C10208 * C55525) *
               C141216 * C1596 -
           ((C275 * C10677 + C141320 * C11131) * C55525 +
            (C275 * C10551 + C141320 * C10779) * C55593 + C11138 * C55524 +
            C10797 * C55592 + C11139 * C55523 + C10799 * C55591 +
            (C275 * C1690 + C141320 * C2040) * C55522 +
            (C275 * C1601 + C141320 * C1784) * C55590) *
               C141216 * C141487) *
              C141277 * C818 +
          ((C1809 * C55590 + C2054 * C55522 + C8145 * C55591 + C8482 * C55523 +
            C8143 * C55592 + C8481 * C55524 +
            (C275 * C10552 + C141320 * C10780) * C55593 +
            (C275 * C10678 + C141320 * C11132) * C55525) *
               C141216 * C141487 -
           (C7430 * C55525 + C7037 * C55593 + C6371 * C55524 + C6086 * C55592 +
            C1276 * C55523 + C1031 * C55591 + C520 * C55522 + C305 * C55590) *
               C141216 * C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141320 * C276) * C47810 +
             (C275 * C189 + C141320 * C501) * C47710 + C7032 * C47811 +
             C7428 * C141358) *
                C47707 +
            (C48190 + C48191 + C48192 + C48193) * C47708 + C48204 * C47709) *
               C1596 -
           ((C50168 + C50169 + C50170 + C50171) * C47709 +
            (C50172 + C50173 + C50174 + C50175) * C47708 +
            (C11139 * C141358 + C10799 * C47811 +
             (C275 * C1690 + C141320 * C2040) * C47710 +
             (C275 * C1601 + C141320 * C1784) * C47810) *
                C47707) *
               C141487) *
              C141277 * C818 +
          (((C50175 + C50174 + C50173 + C50172) * C47707 +
            (C50171 + C50170 + C50169 + C50168) * C47708 +
            (C1805 * C47810 + C2052 * C47710 +
             (C275 * C3493 + C141320 * C3649) * C47811 +
             (C275 * C3575 + C141320 * C3867) * C141358) *
                C47709) *
               C141487 -
           ((C48198 + C48199 + C48200 + C48201) * C47709 +
            (C48197 + C48196 + C48195 + C48194) * C47708 +
            (C48193 + C48192 + C48191 + C48190) * C47707) *
               C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C14204 * C108 + C14035 * C276 + C14205 * C1601 + C14036 * C1784 +
             C14206 * C5325 + C14037 * C5449) *
                C47810 +
            (C14204 * C189 + C14035 * C501 + C14205 * C1690 + C14036 * C2040 +
             C14206 * C5391 + C14037 * C5619) *
                C47710 +
            (C61733 + C61734 + C61735) * C47811 +
            (C62061 + C62062 + C62063) * C141358) *
               C141216 * C1596 -
           ((C14206 * C18698 + C14037 * C19150 + C14205 * C13393 +
             C14036 * C13719 + C14204 * C3572 + C14035 * C3864) *
                C141358 +
            (C14206 * C18582 + C14037 * C18820 + C14205 * C13301 +
             C14036 * C13475 + C14204 * C3490 + C14035 * C3646) *
                C47811 +
            (C14206 * C16013 + C14037 * C16549 + C14205 * C5391 +
             C14036 * C5619 + C14204 * C1690 + C14035 * C2040) *
                C47710 +
            (C14206 * C15862 + C14037 * C16151 + C14205 * C5325 +
             C14036 * C5449 + C14204 * C1601 + C14035 * C1784) *
                C47810) *
               C141216 * C141487) *
              C141277 * C818 +
          (((C16174 + C16173 + C16172) * C47810 +
            (C16560 + C16559 + C16558) * C47710 +
            (C14204 * C3491 + C14035 * C3647 + C14205 * C13302 +
             C14036 * C13476 + C14206 * C18583 + C14037 * C18821) *
                C47811 +
            (C14204 * C3573 + C14035 * C3865 + C14205 * C13395 +
             C14036 * C13721 + C14206 * C18699 + C14037 * C19151) *
                C141358) *
               C141216 * C141487 -
           ((C15428 + C15429 + C15430) * C141358 +
            (C15109 + C15110 + C15111) * C47811 +
            (C14490 + C14489 + C14488) * C47710 +
            (C14234 + C14233 + C14232) * C47810) *
               C141216 * C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eezx[65] +=
        (-std::pow(Pi, 2.5) *
         (((((C55527 * C108 + C141216 * C114) * C275 +
             (C55527 * C276 + C141216 * C579) * C141320) *
                C55522 +
            (C56517 + C56541) * C55523 + (C56520 + C56542) * C55524 +
            (C56523 + C56543) * C55525) *
               C1596 -
           (((C55527 * C10779 + C141216 * C11237) * C141320 +
             (C55527 * C10551 + C141216 * C10553) * C275) *
                C55525 +
            ((C55527 * C8128 + C141216 * C8583) * C141320 +
             (C55527 * C7887 + C141216 * C7890) * C275) *
                C55524 +
            ((C55527 * C3646 + C141216 * C3934) * C141320 +
             (C55527 * C3490 + C141216 * C3494) * C275) *
                C55523 +
            ((C55527 * C1784 + C141216 * C2126) * C141320 +
             (C55527 * C1601 + C141216 * C1606) * C275) *
                C55522) *
               C141487) *
              C141277 * C818 +
          ((((C55527 * C1600 + C141216 * C1605) * C275 +
             (C55527 * C1783 + C141216 * C2125) * C141320) *
                C55522 +
            ((C55527 * C3491 + C141216 * C3495) * C275 +
             (C55527 * C3647 + C141216 * C3935) * C141320) *
                C55523 +
            ((C55527 * C7886 + C141216 * C7889) * C275 +
             (C55527 * C8127 + C141216 * C8582) * C141320) *
                C55524 +
            ((C55527 * C10552 + C141216 * C10554) * C275 +
             (C55527 * C10780 + C141216 * C11238) * C141320) *
                C55525) *
               C141487 -
           ((C56546 + C56532) * C55525 + (C56545 + C56529) * C55524 +
            (C56544 + C56526) * C55523 +
            ((C55527 * C277 + C141216 * C580) * C141320 +
             (C55527 * C109 + C141216 * C115) * C275) *
                C55522) *
               C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47713 * C108 + C47707 * C114 + C47715 * C109 + C47708 * C115 +
              C47717 * C110 + C47709 * C116) *
                 C275 +
             (C47713 * C276 + C47707 * C579 + C47715 * C277 + C47708 * C580 +
              C47717 * C278 + C47709 * C581) *
                 C141320) *
                C47710 +
            ((C48944 + C48945 + C48946) * C275 +
             (C49298 + C49299 + C49300) * C141320) *
                C141358) *
               C1596 -
           (((C47717 * C3648 + C47709 * C3936 + C47715 * C3647 +
              C47708 * C3935 + C47713 * C3646 + C47707 * C3934) *
                 C141320 +
             (C47717 * C3492 + C47709 * C3496 + C47715 * C3491 +
              C47708 * C3495 + C47713 * C3490 + C47707 * C3494) *
                 C275) *
                C141358 +
            ((C47717 * C1782 + C47709 * C2124 + C47715 * C1783 +
              C47708 * C2125 + C47713 * C1784 + C47707 * C2126) *
                 C141320 +
             (C47717 * C1599 + C47709 * C1604 + C47715 * C1600 +
              C47708 * C1605 + C47713 * C1601 + C47707 * C1606) *
                 C275) *
                C47710) *
               C141487) *
              C141277 * C818 +
          ((((C47713 * C1600 + C47707 * C1605 + C47715 * C1599 +
              C47708 * C1604 + C47717 * C1598 + C47709 * C1603) *
                 C275 +
             (C47713 * C1783 + C47707 * C2125 + C47715 * C1782 +
              C47708 * C2124 + C47717 * C1781 + C47709 * C2123) *
                 C141320) *
                C47710 +
            ((C47713 * C3491 + C47707 * C3495 + C47715 * C3492 +
              C47708 * C3496 + C47717 * C3493 + C47709 * C3497) *
                 C275 +
             (C47713 * C3647 + C47707 * C3935 + C47715 * C3648 +
              C47708 * C3936 + C47717 * C3649 + C47709 * C3937) *
                 C141320) *
                C141358) *
               C141487 -
           (((C49303 + C49302 + C49301) * C141320 +
             (C48952 + C48951 + C48950) * C275) *
                C141358 +
            ((C47717 * C279 + C47709 * C582 + C47715 * C278 + C47708 * C581 +
              C47713 * C277 + C47707 * C580) *
                 C141320 +
             (C47717 * C111 + C47709 * C117 + C47715 * C110 + C47708 * C116 +
              C47713 * C109 + C47707 * C115) *
                 C275) *
                C47710) *
               C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C55527 * C108 + C141216 * C114) * C14204 +
             (C55527 * C276 + C141216 * C579) * C14035 + C62870 * C14205 +
             C63222 * C14036 + C62872 * C14206 + C63223 * C14037) *
                C47710 +
            (C62162 + C62163 + C62164 + C62165 + C62166 + C62180) * C141358) *
               C1596 -
           (((C55527 * C18820 + C141216 * C19250) * C14037 +
             (C55527 * C18582 + C141216 * C18584) * C14206 + C62177 * C14036 +
             C61849 * C14205 + C58929 * C14035 + C58709 * C14204) *
                C141358 +
            ((C55527 * C16151 + C141216 * C16659) * C14037 +
             (C55527 * C15862 + C141216 * C15865) * C14206 + C63223 * C14036 +
             C62872 * C14205 + C63222 * C14035 + C62870 * C14204) *
                C47710) *
               C141487) *
              C141277 * C818 +
          (((C62874 * C14204 + C63224 * C14035 + C62876 * C14205 +
             C63225 * C14036 + (C55527 * C15861 + C141216 * C15864) * C14206 +
             (C55527 * C16150 + C141216 * C16658) * C14037) *
                C47710 +
            (C61851 * C14204 + C62178 * C14035 + C61853 * C14205 +
             C62179 * C14036 + (C55527 * C18583 + C141216 * C18585) * C14206 +
             (C55527 * C18821 + C141216 * C19251) * C14037) *
                C141358) *
               C141487 -
           ((C62182 + C62174 + C62181 + C62171 + C62170 + C62169) * C141358 +
            (C63225 * C14037 + C62876 * C14206 + C63224 * C14036 +
             C62874 * C14205 + (C55527 * C277 + C141216 * C580) * C14035 +
             (C55527 * C109 + C141216 * C115) * C14204) *
                C47710) *
               C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eezy[65] +=
        (-std::pow(Pi, 2.5) *
         ((((C55590 * C108 + C55522 * C189 + C55591 * C823 + C55523 * C912 +
             C55592 * C2960 + C55524 * C3026 + C55593 * C6729 +
             C55525 * C6880) *
                C275 +
            (C55590 * C276 + C55522 * C635 + C55591 * C1006 + C55523 * C1419 +
             C55592 * C3084 + C55524 * C3362 + C55593 * C7002 +
             C55525 * C7655) *
                C141320) *
               C141216 * C1596 -
           ((C55593 * C10779 + C55525 * C11349 + C55592 * C8128 +
             C55524 * C8684 + C55591 * C3646 + C55523 * C4004 + C55590 * C1784 +
             C55522 * C2197) *
                C141320 +
            (C55593 * C10551 + C55525 * C10677 + C55592 * C7887 +
             C55524 * C8006 + C55591 * C3490 + C55523 * C3572 + C55590 * C1601 +
             C55522 * C1690) *
                C275) *
               C141216 * C141487) *
              C141277 * C818 +
          (((C55590 * C1600 + C55522 * C1689 + C55591 * C3491 + C55523 * C3573 +
             C55592 * C7886 + C55524 * C8005 + C55593 * C10552 +
             C55525 * C10678) *
                C275 +
            (C55590 * C1783 + C55522 * C2196 + C55591 * C3647 + C55523 * C4005 +
             C55592 * C8127 + C55524 * C8683 + C55593 * C10780 +
             C55525 * C11350) *
                C141320) *
               C141216 * C141487 -
           ((C55593 * C7001 + C55525 * C7654 + C55592 * C3085 + C55524 * C3363 +
             C55591 * C1005 + C55523 * C1418 + C55590 * C277 + C55522 * C636) *
                C141320 +
            (C55593 * C6728 + C55525 * C6879 + C55592 * C2961 + C55524 * C3027 +
             C55591 * C822 + C55523 * C911 + C55590 * C109 + C55522 * C190) *
                C275) *
               C141216 * C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47810 * C108 + C47710 * C189 + C47811 * C823 + C141358 * C912) *
                 C275 +
             (C47810 * C276 + C47710 * C635 + C47811 * C1006 +
              C141358 * C1419) *
                 C141320) *
                C47707 +
            ((C47837 + C47838) * C275 + (C48366 + C48367) * C141320) * C47708 +
            C48374 * C47709) *
               C1596 -
           (((C50380 + C50381) * C141320 + (C49742 + C49743) * C275) * C47709 +
            ((C50382 + C50383) * C141320 + (C49746 + C49747) * C275) * C47708 +
            ((C47811 * C3646 + C141358 * C4004 + C47810 * C1784 +
              C47710 * C2197) *
                 C141320 +
             (C47811 * C3490 + C141358 * C3572 + C47810 * C1601 +
              C47710 * C1690) *
                 C275) *
                C47707) *
               C141487) *
              C141277 * C818 +
          ((((C49747 + C49746) * C275 + (C50383 + C50382) * C141320) * C47707 +
            ((C49743 + C49742) * C275 + (C50381 + C50380) * C141320) * C47708 +
            ((C47810 * C1598 + C47710 * C1687 + C47811 * C3493 +
              C141358 * C3575) *
                 C275 +
             (C47810 * C1781 + C47710 * C2194 + C47811 * C3649 +
              C141358 * C4007) *
                 C141320) *
                C47709) *
               C141487 -
           (((C48370 + C48371) * C141320 + (C47847 + C47848) * C275) * C47709 +
            ((C48369 + C48368) * C141320 + (C47842 + C47841) * C275) * C47708 +
            ((C48367 + C48366) * C141320 + (C47838 + C47837) * C275) * C47707) *
               C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47810 * C108 + C47710 * C189 + C47811 * C823 + C141358 * C912) *
                C14204 +
            (C47810 * C276 + C47710 * C635 + C47811 * C1006 + C141358 * C1419) *
                C14035 +
            (C62638 + C62639) * C14205 + (C63336 + C63337) * C14036 +
            (C62642 + C62643) * C14206 + (C63338 + C63339) * C14037) *
               C141216 * C1596 -
           ((C47811 * C18820 + C141358 * C19356 + C47810 * C16151 +
             C47710 * C16784) *
                C14037 +
            (C47811 * C18582 + C141358 * C18698 + C47810 * C15862 +
             C47710 * C16013) *
                C14206 +
            (C63339 + C63338) * C14036 + (C62643 + C62642) * C14205 +
            (C63337 + C63336) * C14035 + (C62639 + C62638) * C14204) *
               C141216 * C141487) *
              C141277 * C818 +
          (((C49747 + C49746) * C14204 + (C50383 + C50382) * C14035 +
            (C62646 + C62647) * C14205 + (C63340 + C63341) * C14036 +
            (C47810 * C15861 + C47710 * C16012 + C47811 * C18583 +
             C141358 * C18699) *
                C14206 +
            (C47810 * C16150 + C47710 * C16783 + C47811 * C18821 +
             C141358 * C19357) *
                C14037) *
               C141216 * C141487 -
           ((C63341 + C63340) * C14037 + (C62647 + C62646) * C14206 +
            (C50382 + C50383) * C14036 + (C49746 + C49747) * C14205 +
            (C48367 + C48366) * C14035 + (C47838 + C47837) * C14204) *
               C141216 * C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eezz[65] +=
        (-std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C141320 * C714) * C55522 +
            C7785 * C55523 + C7786 * C55524 + C10453 * C55525) *
               C141216 * C1596 -
           ((C713 * C10551 + C11456 + C11456 + C141320 * C11449) * C55525 +
            C11462 * C55524 + C11463 * C55523 +
            (C713 * C1601 + C2295 + C2295 + C141320 * C2283) * C55522) *
               C141216 * C141487) *
              C141277 * C818 +
          ((C2305 * C55522 + C8810 * C55523 + C8809 * C55524 +
            (C713 * C10552 + C11457 + C11457 + C141320 * C11450) * C55525) *
               C141216 * C141487 -
           (C7787 * C55525 + C6627 * C55524 + C1527 * C55523 + C743 * C55522) *
               C141216 * C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C713 * C108 + C721 + C721 + C141320 * C714) * C47710 +
             C7785 * C141358) *
                C47707 +
            (C48449 + C48450) * C47708 + C48455 * C47709) *
               C1596 -
           ((C50482 + C50483) * C47709 + (C50484 + C50485) * C47708 +
            (C11463 * C141358 +
             (C713 * C1601 + C2295 + C2295 + C141320 * C2283) * C47710) *
                C47707) *
               C141487) *
              C141277 * C818 +
          (((C50485 + C50484) * C47707 + (C50483 + C50482) * C47708 +
            (C2303 * C47710 +
             (C713 * C3493 + C4082 + C4082 + C141320 * C4077) * C141358) *
                C47709) *
               C141487 -
           ((C48453 + C48454) * C47709 + (C48452 + C48451) * C47708 +
            (C48450 + C48449) * C47707) *
               C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C14733 * C108 + C14737 + C14737 + C14035 * C714 + C14734 * C1601 +
             C14738 + C14738 + C14036 * C2283 + C14735 * C5325 + C14739 +
             C14739 + C14037 * C5781) *
                C47710 +
            (C62391 + C62392 + C62393) * C141358) *
               C141216 * C1596 -
           ((C14735 * C18582 + C19467 + C19467 + C14037 * C19462 +
             C14734 * C13301 + C19466 + C19466 + C14036 * C13953 +
             C14733 * C3490 + C19465 + C19465 + C14035 * C4074) *
                C141358 +
            (C14735 * C15862 + C16912 + C16912 + C14037 * C16900 +
             C14734 * C5325 + C16913 + C16913 + C14036 * C5781 +
             C14733 * C1601 + C16914 + C16914 + C14035 * C2283) *
                C47710) *
               C141216 * C141487) *
              C141277 * C818 +
          (((C16926 + C16925 + C16924) * C47710 +
            (C14733 * C3491 + C19468 + C19468 + C14035 * C4075 +
             C14734 * C13302 + C19469 + C19469 + C14036 * C13955 +
             C14735 * C18583 + C19470 + C19470 + C14037 * C19463) *
                C141358) *
               C141216 * C141487 -
           ((C15761 + C15762 + C15763) * C141358 +
            (C14775 + C14774 + C14773) * C47710) *
               C141216 * C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eexx[66] +=
        (-std::pow(Pi, 2.5) *
         ((((C55526 * C108 + C55529 + C55529 + C141216 * C120) * C141320 *
                C55522 +
            C56059 * C55523 + C56060 * C55524 + C56061 * C55525) *
               C141294 * C2374 -
           ((C55526 * C9768 + C56033 + C56033 + C141216 * C9772) * C141320 *
                C55525 +
            C56061 * C55524 + C56060 * C55523 + C56059 * C55522) *
               C141294 * C141485) *
              C2376 +
          ((C56062 * C55522 + C56063 * C55523 + C56064 * C55524 +
            (C55526 * C9769 + C56040 + C56040 + C141216 * C9773) * C141320 *
                C55525) *
               C141294 * C141485 -
           (C56064 * C55525 + C56063 * C55524 + C56062 * C55523 +
            (C55526 * C109 + C55536 + C55536 + C141216 * C121) * C141320 *
                C55522) *
               C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47712 * C108 + C47719 + C47719 + C47707 * C120 + C47714 * C109 +
             C47720 + C47720 + C47708 * C121 + C47716 * C110 + C47721 + C47721 +
             C47709 * C122) *
                C141320 * C47710 +
            (C48584 + C48585 + C48586) * C141320 * C141358) *
               C141294 * C2374 -
           ((C47716 * C2962 + C48560 + C48560 + C47709 * C2970 +
             C47714 * C2961 + C48561 + C48561 + C47708 * C2969 +
             C47712 * C2960 + C48562 + C48562 + C47707 * C2968) *
                C141320 * C141358 +
            (C48586 + C48585 + C48584) * C141320 * C47710) *
               C141294 * C141485) *
              C2376 +
          (((C48587 + C48588 + C48589) * C141320 * C47710 +
            (C47712 * C2961 + C48569 + C48569 + C47707 * C2969 +
             C47714 * C2962 + C48570 + C48570 + C47708 * C2970 +
             C47716 * C2963 + C48571 + C48571 + C47709 * C2971) *
                C141320 * C141358) *
               C141294 * C141485 -
           ((C48589 + C48588 + C48587) * C141320 * C141358 +
            (C47716 * C111 + C47728 + C47728 + C47709 * C123 + C47714 * C110 +
             C47729 + C47729 + C47708 * C122 + C47712 * C109 + C47730 + C47730 +
             C47707 * C121) *
                C141320 * C47710) *
               C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C55526 * C108 + C55529 + C55529 + C141216 * C120) * C14035 +
             C62512 * C14036 + C62513 * C14037) *
                C47710 +
            (C61503 + C61504 + C61522) * C141358) *
               C141294 * C2374 -
           (((C55526 * C13303 + C60316 + C60316 + C141216 * C13311) * C14037 +
             C58472 * C14036 + C56054 * C14035) *
                C141358 +
            (C61522 + C61504 + C61503) * C47710) *
               C141294 * C141485) *
              C2376 +
          (((C61507 + C61523 + C61524) * C47710 +
            (C56057 * C14035 +
             (C55526 * C7886 + C56751 + C56751 + C141216 * C7892) * C14036 +
             (C55526 * C13304 + C61512 + C61512 + C141216 * C13312) * C14037) *
                C141358) *
               C141294 * C141485 -
           ((C61524 + C61523 + C61507) * C141358 +
            (C62515 * C14037 + C62514 * C14036 +
             (C55526 * C109 + C55536 + C55536 + C141216 * C121) * C14035) *
                C47710) *
               C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q));
    d2eexy[66] +=
        (-std::pow(Pi, 2.5) *
         ((((C55590 * C108 + C55522 * C189 + C55591 * C823 + C55523 * C912 +
             C55592 * C2960 + C55524 * C3026 + C55593 * C6729 +
             C55525 * C6880) *
                C55527 +
            (C55590 * C114 + C55522 * C195 + C55591 * C828 + C55523 * C917 +
             C55592 * C2964 + C55524 * C3030 + C55593 * C6732 +
             C55525 * C6883) *
                C141216) *
               C141320 * C141294 * C2374 -
           ((C55593 * C9770 + C55525 * C9864 + C55592 * C6732 + C55524 * C6883 +
             C55591 * C2964 + C55523 * C3030 + C55590 * C828 + C55522 * C917) *
                C141216 +
            (C55593 * C9768 + C55525 * C9862 + C55592 * C6729 + C55524 * C6880 +
             C55591 * C2960 + C55523 * C3026 + C55590 * C823 + C55522 * C912) *
                C55527) *
               C141320 * C141294 * C141485) *
              C2376 +
          (((C55590 * C822 + C55522 * C911 + C55591 * C2961 + C55523 * C3027 +
             C55592 * C6728 + C55524 * C6879 + C55593 * C9769 +
             C55525 * C9863) *
                C55527 +
            (C55590 * C827 + C55522 * C916 + C55591 * C2965 + C55523 * C3031 +
             C55592 * C6731 + C55524 * C6882 + C55593 * C9771 +
             C55525 * C9865) *
                C141216) *
               C141320 * C141294 * C141485 -
           ((C55593 * C6731 + C55525 * C6882 + C55592 * C2965 + C55524 * C3031 +
             C55591 * C827 + C55523 * C916 + C55590 * C115 + C55522 * C196) *
                C141216 +
            (C55593 * C6728 + C55525 * C6879 + C55592 * C2961 + C55524 * C3027 +
             C55591 * C822 + C55523 * C911 + C55590 * C109 + C55522 * C190) *
                C55527) *
               C141320 * C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47810 * C108 + C47710 * C189 + C47811 * C823 + C141358 * C912) *
                C47713 +
            (C47810 * C114 + C47710 * C195 + C47811 * C828 + C141358 * C917) *
                C47707 +
            (C47837 + C47838) * C47715 + (C47839 + C47840) * C47708 +
            C47849 * C47717 + C47850 * C47709) *
               C141320 * C141294 * C2374 -
           ((C48704 + C48705) * C47709 + (C48706 + C48707) * C47717 +
            (C48708 + C48709) * C47708 + (C48710 + C48711) * C47715 +
            (C47811 * C2964 + C141358 * C3030 + C47810 * C828 + C47710 * C917) *
                C47707 +
            (C47811 * C2960 + C141358 * C3026 + C47810 * C823 + C47710 * C912) *
                C47713) *
               C141320 * C141294 * C141485) *
              C2376 +
          (((C48711 + C48710) * C47713 + (C48709 + C48708) * C47707 +
            (C48707 + C48706) * C47715 + (C48705 + C48704) * C47708 +
            (C47810 * C820 + C47710 * C909 + C47811 * C2963 + C141358 * C3029) *
                C47717 +
            (C47810 * C825 + C47710 * C914 + C47811 * C2967 + C141358 * C3033) *
                C47709) *
               C141320 * C141294 * C141485 -
           ((C47845 + C47846) * C47709 + (C47847 + C47848) * C47717 +
            (C47844 + C47843) * C47708 + (C47842 + C47841) * C47715 +
            (C47840 + C47839) * C47707 + (C47838 + C47837) * C47713) *
               C141320 * C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C47810 * C108 + C47710 * C189 + C47811 * C823 + C141358 * C912) *
                 C55527 +
             (C47810 * C114 + C47710 * C195 + C47811 * C828 + C141358 * C917) *
                 C141216) *
                C14035 +
            ((C62638 + C62639) * C55527 + (C62640 + C62641) * C141216) *
                C14036 +
            ((C62642 + C62643) * C55527 + (C62644 + C62645) * C141216) *
                C14037) *
               C141294 * C2374 -
           (((C47811 * C13307 + C141358 * C13398 + C47810 * C13305 +
              C47710 * C13397) *
                 C141216 +
             (C47811 * C13303 + C141358 * C13394 + C47810 * C13301 +
              C47710 * C13393) *
                 C55527) *
                C14037 +
            ((C47811 * C7890 + C141358 * C8009 + C47810 * C3494 +
              C47710 * C3576) *
                 C141216 +
             (C47811 * C7887 + C141358 * C8006 + C47810 * C3490 +
              C47710 * C3572) *
                 C55527) *
                C14036 +
            ((C47811 * C2964 + C141358 * C3030 + C47810 * C828 +
              C47710 * C917) *
                 C141216 +
             (C47811 * C2960 + C141358 * C3026 + C47810 * C823 +
              C47710 * C912) *
                 C55527) *
                C14035) *
               C141294 * C141485) *
              C2376 +
          ((((C48711 + C48710) * C55527 + (C48709 + C48708) * C141216) *
                C14035 +
            ((C47810 * C3491 + C47710 * C3573 + C47811 * C7886 +
              C141358 * C8005) *
                 C55527 +
             (C47810 * C3495 + C47710 * C3577 + C47811 * C7889 +
              C141358 * C8008) *
                 C141216) *
                C14036 +
            ((C47810 * C13302 + C47710 * C13395 + C47811 * C13304 +
              C141358 * C13396) *
                 C55527 +
             (C47810 * C13306 + C47710 * C13399 + C47811 * C13308 +
              C141358 * C13400) *
                 C141216) *
                C14037) *
               C141294 * C141485 -
           (((C62649 + C62648) * C141216 + (C62647 + C62646) * C55527) *
                C14037 +
            ((C49744 + C49745) * C141216 + (C49746 + C49747) * C55527) *
                C14036 +
            ((C47840 + C47839) * C141216 + (C47838 + C47837) * C55527) *
                C14035) *
               C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q));
    d2eexz[66] +=
        (-std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141320 * C276) * C55527 +
             (C275 * C114 + C141320 * C282) * C141216) *
                C55522 +
            (C56197 + C56198) * C55523 + (C56199 + C56200) * C55524 +
            (C56201 + C56202) * C55525) *
               C141294 * C2374 -
           (((C275 * C9770 + C141320 * C9942) * C141216 +
             (C275 * C9768 + C141320 * C9940) * C55527) *
                C55525 +
            (C56202 + C56201) * C55524 + (C56200 + C56199) * C55523 +
            (C56198 + C56197) * C55522) *
               C141294 * C141485) *
              C2376 +
          (((C56203 + C56204) * C55522 + (C56205 + C56206) * C55523 +
            (C56207 + C56208) * C55524 +
            ((C275 * C9769 + C141320 * C9941) * C55527 +
             (C275 * C9771 + C141320 * C9943) * C141216) *
                C55525) *
               C141294 * C141485 -
           ((C56208 + C56207) * C55525 + (C56206 + C56205) * C55524 +
            (C56204 + C56203) * C55523 +
            (C306 * C141216 + C305 * C55527) * C55522) *
               C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141320 * C276) * C47713 +
             (C275 * C114 + C141320 * C282) * C47707 + C305 * C47715 +
             C306 * C47708 + C307 * C47717 + C308 * C47709) *
                C47710 +
            (C48810 + C48811 + C48812 + C48813 + C48814 + C48815) * C141358) *
               C141294 * C2374 -
           ((C6088 * C47709 + C6089 * C47717 + C6087 * C47708 + C6086 * C47715 +
             C7035 * C47707 + C7034 * C47713) *
                C141358 +
            (C48815 + C48814 + C48813 + C48812 + C48811 + C48810) * C47710) *
               C141294 * C141485) *
              C2376 +
          (((C48816 + C48817 + C48818 + C48819 + C48820 + C48821) * C47710 +
            (C6086 * C47713 + C6087 * C47707 + C6089 * C47715 + C6088 * C47708 +
             (C275 * C2963 + C141320 * C3087) * C47717 +
             (C275 * C2967 + C141320 * C3091) * C47709) *
                C141358) *
               C141294 * C141485 -
           ((C48821 + C48820 + C48819 + C48818 + C48817 + C48816) * C141358 +
            (C310 * C47709 + C309 * C47717 + C308 * C47708 + C307 * C47715 +
             C306 * C47707 + C305 * C47713) *
                C47710) *
               C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C14204 * C108 + C14035 * C276 + C14205 * C1601 + C14036 * C1784 +
              C14206 * C5325 + C14037 * C5449) *
                 C55527 +
             (C14204 * C114 + C14035 * C282 + C14205 * C1606 + C14036 * C1789 +
              C14206 * C5329 + C14037 * C5453) *
                 C141216) *
                C47710 +
            ((C61733 + C61734 + C61735) * C55527 +
             (C61736 + C61737 + C61738) * C141216) *
                C141358) *
               C141294 * C2374 -
           (((C14206 * C13307 + C14037 * C13481 + C14205 * C7890 +
              C14036 * C8131 + C14204 * C2964 + C14035 * C3088) *
                 C141216 +
             (C14206 * C13303 + C14037 * C13477 + C14205 * C7887 +
              C14036 * C8128 + C14204 * C2960 + C14035 * C3084) *
                 C55527) *
                C141358 +
            ((C61738 + C61737 + C61736) * C141216 +
             (C61735 + C61734 + C61733) * C55527) *
                C47710) *
               C141294 * C141485) *
              C2376 +
          ((((C15111 + C15110 + C15109) * C55527 +
             (C15108 + C15107 + C15106) * C141216) *
                C47710 +
            ((C14204 * C2961 + C14035 * C3085 + C14205 * C7886 +
              C14036 * C8127 + C14206 * C13304 + C14037 * C13478) *
                 C55527 +
             (C14204 * C2965 + C14035 * C3089 + C14205 * C7889 +
              C14036 * C8130 + C14206 * C13308 + C14037 * C13482) *
                 C141216) *
                C141358) *
               C141294 * C141485 -
           (((C15106 + C15107 + C15108) * C141216 +
             (C15109 + C15110 + C15111) * C55527) *
                C141358 +
            ((C14237 + C14236 + C14235) * C141216 +
             (C14234 + C14233 + C14232) * C55527) *
                C47710) *
               C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[66] += (-std::pow(Pi, 2.5) *
                   ((((C55527 * C108 + C141216 * C114) * C55590 +
                      (C55527 * C189 + C141216 * C362) * C55522 +
                      C56299 * C55591 + C56300 * C55523 + C56301 * C55592 +
                      C56302 * C55524 + C56303 * C55593 + C56304 * C55525) *
                         C141320 * C141294 * C2374 -
                     ((C55527 * C9862 + C141216 * C10031) * C55525 +
                      (C55527 * C9768 + C141216 * C9770) * C55593 +
                      C56304 * C55524 + C56303 * C55592 + C56302 * C55523 +
                      C56301 * C55591 + C56300 * C55522 + C56299 * C55590) *
                         C141320 * C141294 * C141485) *
                        C2376 +
                    ((C56305 * C55590 + C56306 * C55522 + C56307 * C55591 +
                      C56308 * C55523 + C56309 * C55592 + C56310 * C55524 +
                      (C55527 * C9769 + C141216 * C9771) * C55593 +
                      (C55527 * C9863 + C141216 * C10032) * C55525) *
                         C141320 * C141294 * C141485 -
                     (C56310 * C55525 + C56309 * C55593 + C56308 * C55524 +
                      C56307 * C55592 + C56306 * C55523 + C56305 * C55591 +
                      (C55527 * C190 + C141216 * C363) * C55522 +
                      (C55527 * C109 + C141216 * C115) * C55590) *
                         C141320 * C141294 * C2374) *
                        C141483)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   ((((C47713 * C108 + C47707 * C114 + C47715 * C109 +
                       C47708 * C115 + C47717 * C110 + C47709 * C116) *
                          C47810 +
                      (C47713 * C189 + C47707 * C362 + C47715 * C190 +
                       C47708 * C363 + C47717 * C191 + C47709 * C364) *
                          C47710 +
                      (C48944 + C48945 + C48946) * C47811 +
                      (C48947 + C48948 + C48949) * C141358) *
                         C141320 * C141294 * C2374 -
                     ((C47717 * C3028 + C47709 * C3144 + C47715 * C3027 +
                       C47708 * C3143 + C47713 * C3026 + C47707 * C3142) *
                          C141358 +
                      (C47717 * C2962 + C47709 * C2966 + C47715 * C2961 +
                       C47708 * C2965 + C47713 * C2960 + C47707 * C2964) *
                          C47811 +
                      (C48949 + C48948 + C48947) * C47710 +
                      (C48946 + C48945 + C48944) * C47810) *
                         C141320 * C141294 * C141485) *
                        C2376 +
                    (((C48950 + C48951 + C48952) * C47810 +
                      (C48953 + C48954 + C48955) * C47710 +
                      (C47713 * C2961 + C47707 * C2965 + C47715 * C2962 +
                       C47708 * C2966 + C47717 * C2963 + C47709 * C2967) *
                          C47811 +
                      (C47713 * C3027 + C47707 * C3143 + C47715 * C3028 +
                       C47708 * C3144 + C47717 * C3029 + C47709 * C3145) *
                          C141358) *
                         C141320 * C141294 * C141485 -
                     ((C48955 + C48954 + C48953) * C141358 +
                      (C48952 + C48951 + C48950) * C47811 +
                      (C47717 * C192 + C47709 * C365 + C47715 * C191 +
                       C47708 * C364 + C47713 * C190 + C47707 * C363) *
                          C47710 +
                      (C47717 * C111 + C47709 * C117 + C47715 * C110 +
                       C47708 * C116 + C47713 * C109 + C47707 * C115) *
                          C47810) *
                         C141320 * C141294 * C2374) *
                        C141483)) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   (((((C55527 * C108 + C141216 * C114) * C47810 +
                       (C55527 * C189 + C141216 * C362) * C47710 +
                       C56299 * C47811 + C56300 * C141358) *
                          C14035 +
                      (C62878 + C62879 + C62850 + C62851) * C14036 +
                      (C62880 + C62881 + C62856 + C62857) * C14037) *
                         C141294 * C2374 -
                     (((C55527 * C13394 + C141216 * C13559) * C141358 +
                       (C55527 * C13303 + C141216 * C13307) * C47811 +
                       C61850 * C47710 + C61849 * C47810) *
                          C14037 +
                      (C58706 * C141358 + C58707 * C47811 + C58708 * C47710 +
                       C58709 * C47810) *
                          C14036 +
                      (C56302 * C141358 + C56301 * C47811 + C56300 * C47710 +
                       C56299 * C47810) *
                          C14035) *
                         C141294 * C141485) *
                        C2376 +
                    (((C56305 * C47810 + C56306 * C47710 + C56307 * C47811 +
                       C56308 * C141358) *
                          C14035 +
                      (C61851 * C47810 + C61852 * C47710 +
                       (C55527 * C7886 + C141216 * C7889) * C47811 +
                       (C55527 * C8005 + C141216 * C8243) * C141358) *
                          C14036 +
                      (C61853 * C47810 + C61854 * C47710 +
                       (C55527 * C13304 + C141216 * C13308) * C47811 +
                       (C55527 * C13396 + C141216 * C13560) * C141358) *
                          C14037) *
                         C141294 * C141485 -
                     ((C62869 + C62868 + C62885 + C62884) * C14037 +
                      (C62863 + C62862 + C62883 + C62882) * C14036 +
                      (C56306 * C141358 + C56305 * C47811 +
                       (C55527 * C190 + C141216 * C363) * C47710 +
                       (C55527 * C109 + C141216 * C115) * C47810) *
                          C14035) *
                         C141294 * C2374) *
                        C141483)) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[66] +=
        (-std::pow(Pi, 2.5) *
         (((C55744 * C108 + C55749 + C55749 + C55522 * C419 + C55745 * C823 +
            C55750 + C55750 + C55523 * C1171 + C55746 * C2960 + C55751 +
            C55751 + C55524 * C3196 + C55747 * C6729 + C55752 + C55752 +
            C55525 * C7289) *
               C141216 * C141320 * C141294 * C2374 -
           (C55747 * C9768 + C56377 + C56377 + C55525 * C10121 +
            C55746 * C6729 + C56378 + C56378 + C55524 * C7289 + C55745 * C2960 +
            C56379 + C56379 + C55523 * C3196 + C55744 * C823 + C56380 + C56380 +
            C55522 * C1171) *
               C141216 * C141320 * C141294 * C141485) *
              C2376 +
          ((C55744 * C822 + C56381 + C56381 + C55522 * C1170 + C55745 * C2961 +
            C56382 + C56382 + C55523 * C3197 + C55746 * C6728 + C56383 +
            C56383 + C55524 * C7288 + C55747 * C9769 + C56384 + C56384 +
            C55525 * C10122) *
               C141216 * C141320 * C141294 * C141485 -
           (C55747 * C6728 + C55753 + C55753 + C55525 * C7288 + C55746 * C2961 +
            C55754 + C55754 + C55524 * C3197 + C55745 * C822 + C55755 + C55755 +
            C55523 * C1170 + C55744 * C109 + C55756 + C55756 + C55522 * C420) *
               C141216 * C141320 * C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C48072 * C108 + C48075 + C48075 + C47710 * C419 + C48073 * C823 +
             C48076 + C48076 + C141358 * C1171) *
                C47707 +
            (C48109 + C48110) * C47708 + C48115 * C47709) *
               C141320 * C141294 * C2374 -
           ((C49078 + C49079) * C47709 + (C49080 + C49081) * C47708 +
            (C48073 * C2960 + C49066 + C49066 + C141358 * C3196 +
             C48072 * C823 + C49067 + C49067 + C47710 * C1171) *
                C47707) *
               C141320 * C141294 * C141485) *
              C2376 +
          (((C49081 + C49080) * C47707 + (C49079 + C49078) * C47708 +
            (C48072 * C820 + C49068 + C49068 + C47710 * C1168 + C48073 * C2963 +
             C49069 + C49069 + C141358 * C3199) *
                C47709) *
               C141320 * C141294 * C141485 -
           ((C48113 + C48114) * C47709 + (C48112 + C48111) * C47708 +
            (C48110 + C48109) * C47707) *
               C141320 * C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C48072 * C108 + C48075 + C48075 + C47710 * C419 + C48073 * C823 +
             C48076 + C48076 + C141358 * C1171) *
                C141216 * C14035 +
            (C63012 + C63013) * C141216 * C14036 +
            (C63014 + C63015) * C141216 * C14037) *
               C141294 * C2374 -
           ((C48073 * C13303 + C61953 + C61953 + C141358 * C13636 +
             C48072 * C13301 + C61954 + C61954 + C47710 * C13635) *
                C141216 * C14037 +
            (C48073 * C7887 + C52624 + C52624 + C141358 * C8345 +
             C48072 * C3490 + C52623 + C52623 + C47710 * C3790) *
                C141216 * C14036 +
            (C48073 * C2960 + C49066 + C49066 + C141358 * C3196 +
             C48072 * C823 + C49067 + C49067 + C47710 * C1171) *
                C141216 * C14035) *
               C141294 * C141485) *
              C2376 +
          (((C49081 + C49080) * C141216 * C14035 +
            (C48072 * C3491 + C52625 + C52625 + C47710 * C3791 +
             C48073 * C7886 + C52626 + C52626 + C141358 * C8344) *
                C141216 * C14036 +
            (C48072 * C13302 + C61955 + C61955 + C47710 * C13637 +
             C48073 * C13304 + C61956 + C61956 + C141358 * C13638) *
                C141216 * C14037) *
               C141294 * C141485 -
           ((C63017 + C63016) * C141216 * C14037 +
            (C50068 + C50069) * C141216 * C14036 +
            (C48110 + C48109) * C141216 * C14035) *
               C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[66] +=
        (-std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141320 * C276) * C55590 +
            (C275 * C189 + C141320 * C501) * C55522 + C7032 * C55591 +
            C7428 * C55523 + C7034 * C55592 + C7429 * C55524 + C9954 * C55593 +
            C10208 * C55525) *
               C141216 * C141294 * C2374 -
           ((C275 * C9862 + C141320 * C10203) * C55525 +
            (C275 * C9768 + C141320 * C9940) * C55593 + C10208 * C55524 +
            C9954 * C55592 + C7429 * C55523 + C7034 * C55591 + C7428 * C55522 +
            C7032 * C55590) *
               C141216 * C141294 * C141485) *
              C2376 +
          ((C1031 * C55590 + C1276 * C55522 + C6086 * C55591 + C6371 * C55523 +
            C7037 * C55592 + C7430 * C55524 +
            (C275 * C9769 + C141320 * C9941) * C55593 +
            (C275 * C9863 + C141320 * C10204) * C55525) *
               C141216 * C141294 * C141485 -
           (C7430 * C55525 + C7037 * C55593 + C6371 * C55524 + C6086 * C55592 +
            C1276 * C55523 + C1031 * C55591 + C520 * C55522 + C305 * C55590) *
               C141216 * C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141320 * C276) * C47810 +
             (C275 * C189 + C141320 * C501) * C47710 + C7032 * C47811 +
             C7428 * C141358) *
                C47707 +
            (C48190 + C48191 + C48192 + C48193) * C47708 + C48204 * C47709) *
               C141294 * C2374 -
           ((C49180 + C49181 + C49182 + C49183) * C47709 +
            (C49184 + C49185 + C49186 + C49187) * C47708 +
            (C7429 * C141358 + C7034 * C47811 + C7428 * C47710 +
             C7032 * C47810) *
                C47707) *
               C141294 * C141485) *
              C2376 +
          (((C49187 + C49186 + C49185 + C49184) * C47707 +
            (C49183 + C49182 + C49181 + C49180) * C47708 +
            (C1027 * C47810 + C1274 * C47710 +
             (C275 * C2963 + C141320 * C3087) * C47811 +
             (C275 * C3029 + C141320 * C3257) * C141358) *
                C47709) *
               C141294 * C141485 -
           ((C48198 + C48199 + C48200 + C48201) * C47709 +
            (C48197 + C48196 + C48195 + C48194) * C47708 +
            (C48193 + C48192 + C48191 + C48190) * C47707) *
               C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C14204 * C108 + C14035 * C276 + C14205 * C1601 + C14036 * C1784 +
             C14206 * C5325 + C14037 * C5449) *
                C47810 +
            (C14204 * C189 + C14035 * C501 + C14205 * C1690 + C14036 * C2040 +
             C14206 * C5391 + C14037 * C5619) *
                C47710 +
            (C61733 + C61734 + C61735) * C47811 +
            (C62061 + C62062 + C62063) * C141358) *
               C141216 * C141294 * C2374 -
           ((C14206 * C13394 + C14037 * C13720 + C14205 * C8006 +
             C14036 * C8470 + C14204 * C3026 + C14035 * C3254) *
                C141358 +
            (C14206 * C13303 + C14037 * C13477 + C14205 * C7887 +
             C14036 * C8128 + C14204 * C2960 + C14035 * C3084) *
                C47811 +
            (C62063 + C62062 + C62061) * C47710 +
            (C61735 + C61734 + C61733) * C47810) *
               C141216 * C141294 * C141485) *
              C2376 +
          (((C15111 + C15110 + C15109) * C47810 +
            (C15430 + C15429 + C15428) * C47710 +
            (C14204 * C2961 + C14035 * C3085 + C14205 * C7886 + C14036 * C8127 +
             C14206 * C13304 + C14037 * C13478) *
                C47811 +
            (C14204 * C3027 + C14035 * C3255 + C14205 * C8005 + C14036 * C8469 +
             C14206 * C13396 + C14037 * C13722) *
                C141358) *
               C141216 * C141294 * C141485 -
           ((C15428 + C15429 + C15430) * C141358 +
            (C15109 + C15110 + C15111) * C47811 +
            (C14490 + C14489 + C14488) * C47710 +
            (C14234 + C14233 + C14232) * C47810) *
               C141216 * C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q));
    d2eezx[66] +=
        (-std::pow(Pi, 2.5) *
         (((((C55527 * C108 + C141216 * C114) * C275 +
             (C55527 * C276 + C141216 * C579) * C141320) *
                C55522 +
            (C56517 + C56541) * C55523 + (C56520 + C56542) * C55524 +
            (C56523 + C56543) * C55525) *
               C141294 * C2374 -
           (((C55527 * C9940 + C141216 * C10282) * C141320 +
             (C55527 * C9768 + C141216 * C9770) * C275) *
                C55525 +
            (C56543 + C56523) * C55524 + (C56542 + C56520) * C55523 +
            (C56541 + C56517) * C55522) *
               C141294 * C141485) *
              C2376 +
          (((C56526 + C56544) * C55522 + (C56529 + C56545) * C55523 +
            (C56532 + C56546) * C55524 +
            ((C55527 * C9769 + C141216 * C9771) * C275 +
             (C55527 * C9941 + C141216 * C10283) * C141320) *
                C55525) *
               C141294 * C141485 -
           ((C56546 + C56532) * C55525 + (C56545 + C56529) * C55524 +
            (C56544 + C56526) * C55523 +
            ((C55527 * C277 + C141216 * C580) * C141320 +
             (C55527 * C109 + C141216 * C115) * C275) *
                C55522) *
               C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47713 * C108 + C47707 * C114 + C47715 * C109 + C47708 * C115 +
              C47717 * C110 + C47709 * C116) *
                 C275 +
             (C47713 * C276 + C47707 * C579 + C47715 * C277 + C47708 * C580 +
              C47717 * C278 + C47709 * C581) *
                 C141320) *
                C47710 +
            ((C48944 + C48945 + C48946) * C275 +
             (C49298 + C49299 + C49300) * C141320) *
                C141358) *
               C141294 * C2374 -
           (((C47717 * C3086 + C47709 * C3310 + C47715 * C3085 +
              C47708 * C3309 + C47713 * C3084 + C47707 * C3308) *
                 C141320 +
             (C47717 * C2962 + C47709 * C2966 + C47715 * C2961 +
              C47708 * C2965 + C47713 * C2960 + C47707 * C2964) *
                 C275) *
                C141358 +
            ((C49300 + C49299 + C49298) * C141320 +
             (C48946 + C48945 + C48944) * C275) *
                C47710) *
               C141294 * C141485) *
              C2376 +
          ((((C48950 + C48951 + C48952) * C275 +
             (C49301 + C49302 + C49303) * C141320) *
                C47710 +
            ((C47713 * C2961 + C47707 * C2965 + C47715 * C2962 +
              C47708 * C2966 + C47717 * C2963 + C47709 * C2967) *
                 C275 +
             (C47713 * C3085 + C47707 * C3309 + C47715 * C3086 +
              C47708 * C3310 + C47717 * C3087 + C47709 * C3311) *
                 C141320) *
                C141358) *
               C141294 * C141485 -
           (((C49303 + C49302 + C49301) * C141320 +
             (C48952 + C48951 + C48950) * C275) *
                C141358 +
            ((C47717 * C279 + C47709 * C582 + C47715 * C278 + C47708 * C581 +
              C47713 * C277 + C47707 * C580) *
                 C141320 +
             (C47717 * C111 + C47709 * C117 + C47715 * C110 + C47708 * C116 +
              C47713 * C109 + C47707 * C115) *
                 C275) *
                C47710) *
               C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C55527 * C108 + C141216 * C114) * C14204 +
             (C55527 * C276 + C141216 * C579) * C14035 + C62870 * C14205 +
             C63222 * C14036 + C62872 * C14206 + C63223 * C14037) *
                C47710 +
            (C62162 + C62163 + C62164 + C62165 + C62166 + C62180) * C141358) *
               C141294 * C2374 -
           (((C55527 * C13477 + C141216 * C13799) * C14037 +
             (C55527 * C13303 + C141216 * C13307) * C14206 + C58928 * C14036 +
             C58707 * C14205 + C56536 * C14035 + C56301 * C14204) *
                C141358 +
            (C62180 + C62166 + C62165 + C62164 + C62163 + C62162) * C47710) *
               C141294 * C141485) *
              C2376 +
          (((C62169 + C62170 + C62171 + C62181 + C62174 + C62182) * C47710 +
            (C56307 * C14204 + C56539 * C14035 +
             (C55527 * C7886 + C141216 * C7889) * C14205 +
             (C55527 * C8127 + C141216 * C8582) * C14036 +
             (C55527 * C13304 + C141216 * C13308) * C14206 +
             (C55527 * C13478 + C141216 * C13800) * C14037) *
                C141358) *
               C141294 * C141485 -
           ((C62182 + C62174 + C62181 + C62171 + C62170 + C62169) * C141358 +
            (C63225 * C14037 + C62876 * C14206 + C63224 * C14036 +
             C62874 * C14205 + (C55527 * C277 + C141216 * C580) * C14035 +
             (C55527 * C109 + C141216 * C115) * C14204) *
                C47710) *
               C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q));
    d2eezy[66] +=
        (-std::pow(Pi, 2.5) *
         ((((C55590 * C108 + C55522 * C189 + C55591 * C823 + C55523 * C912 +
             C55592 * C2960 + C55524 * C3026 + C55593 * C6729 +
             C55525 * C6880) *
                C275 +
            (C55590 * C276 + C55522 * C635 + C55591 * C1006 + C55523 * C1419 +
             C55592 * C3084 + C55524 * C3362 + C55593 * C7002 +
             C55525 * C7655) *
                C141320) *
               C141216 * C141294 * C2374 -
           ((C55593 * C9940 + C55525 * C10368 + C55592 * C7002 +
             C55524 * C7655 + C55591 * C3084 + C55523 * C3362 + C55590 * C1006 +
             C55522 * C1419) *
                C141320 +
            (C55593 * C9768 + C55525 * C9862 + C55592 * C6729 + C55524 * C6880 +
             C55591 * C2960 + C55523 * C3026 + C55590 * C823 + C55522 * C912) *
                C275) *
               C141216 * C141294 * C141485) *
              C2376 +
          (((C55590 * C822 + C55522 * C911 + C55591 * C2961 + C55523 * C3027 +
             C55592 * C6728 + C55524 * C6879 + C55593 * C9769 +
             C55525 * C9863) *
                C275 +
            (C55590 * C1005 + C55522 * C1418 + C55591 * C3085 + C55523 * C3363 +
             C55592 * C7001 + C55524 * C7654 + C55593 * C9941 +
             C55525 * C10369) *
                C141320) *
               C141216 * C141294 * C141485 -
           ((C55593 * C7001 + C55525 * C7654 + C55592 * C3085 + C55524 * C3363 +
             C55591 * C1005 + C55523 * C1418 + C55590 * C277 + C55522 * C636) *
                C141320 +
            (C55593 * C6728 + C55525 * C6879 + C55592 * C2961 + C55524 * C3027 +
             C55591 * C822 + C55523 * C911 + C55590 * C109 + C55522 * C190) *
                C275) *
               C141216 * C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47810 * C108 + C47710 * C189 + C47811 * C823 + C141358 * C912) *
                 C275 +
             (C47810 * C276 + C47710 * C635 + C47811 * C1006 +
              C141358 * C1419) *
                 C141320) *
                C47707 +
            ((C47837 + C47838) * C275 + (C48366 + C48367) * C141320) * C47708 +
            C48374 * C47709) *
               C141294 * C2374 -
           (((C49410 + C49411) * C141320 + (C48706 + C48707) * C275) * C47709 +
            ((C49412 + C49413) * C141320 + (C48710 + C48711) * C275) * C47708 +
            ((C47811 * C3084 + C141358 * C3362 + C47810 * C1006 +
              C47710 * C1419) *
                 C141320 +
             (C47811 * C2960 + C141358 * C3026 + C47810 * C823 +
              C47710 * C912) *
                 C275) *
                C47707) *
               C141294 * C141485) *
              C2376 +
          ((((C48711 + C48710) * C275 + (C49413 + C49412) * C141320) * C47707 +
            ((C48707 + C48706) * C275 + (C49411 + C49410) * C141320) * C47708 +
            ((C47810 * C820 + C47710 * C909 + C47811 * C2963 +
              C141358 * C3029) *
                 C275 +
             (C47810 * C1003 + C47710 * C1416 + C47811 * C3087 +
              C141358 * C3365) *
                 C141320) *
                C47709) *
               C141294 * C141485 -
           (((C48370 + C48371) * C141320 + (C47847 + C47848) * C275) * C47709 +
            ((C48369 + C48368) * C141320 + (C47842 + C47841) * C275) * C47708 +
            ((C48367 + C48366) * C141320 + (C47838 + C47837) * C275) * C47707) *
               C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47810 * C108 + C47710 * C189 + C47811 * C823 + C141358 * C912) *
                C14204 +
            (C47810 * C276 + C47710 * C635 + C47811 * C1006 + C141358 * C1419) *
                C14035 +
            (C62638 + C62639) * C14205 + (C63336 + C63337) * C14036 +
            (C62642 + C62643) * C14206 + (C63338 + C63339) * C14037) *
               C141216 * C141294 * C2374 -
           ((C47811 * C13477 + C141358 * C13876 + C47810 * C13475 +
             C47710 * C13875) *
                C14037 +
            (C47811 * C13303 + C141358 * C13394 + C47810 * C13301 +
             C47710 * C13393) *
                C14206 +
            (C47811 * C8128 + C141358 * C8684 + C47810 * C3646 +
             C47710 * C4004) *
                C14036 +
            (C47811 * C7887 + C141358 * C8006 + C47810 * C3490 +
             C47710 * C3572) *
                C14205 +
            (C47811 * C3084 + C141358 * C3362 + C47810 * C1006 +
             C47710 * C1419) *
                C14035 +
            (C47811 * C2960 + C141358 * C3026 + C47810 * C823 + C47710 * C912) *
                C14204) *
               C141216 * C141294 * C141485) *
              C2376 +
          (((C48711 + C48710) * C14204 + (C49413 + C49412) * C14035 +
            (C47810 * C3491 + C47710 * C3573 + C47811 * C7886 +
             C141358 * C8005) *
                C14205 +
            (C47810 * C3647 + C47710 * C4005 + C47811 * C8127 +
             C141358 * C8683) *
                C14036 +
            (C47810 * C13302 + C47710 * C13395 + C47811 * C13304 +
             C141358 * C13396) *
                C14206 +
            (C47810 * C13476 + C47710 * C13877 + C47811 * C13478 +
             C141358 * C13878) *
                C14037) *
               C141216 * C141294 * C141485 -
           ((C63341 + C63340) * C14037 + (C62647 + C62646) * C14206 +
            (C50382 + C50383) * C14036 + (C49746 + C49747) * C14205 +
            (C48367 + C48366) * C14035 + (C47838 + C47837) * C14204) *
               C141216 * C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q));
    d2eezz[66] +=
        (-std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C141320 * C714) * C55522 +
            C7785 * C55523 + C7786 * C55524 + C10453 * C55525) *
               C141216 * C141294 * C2374 -
           ((C713 * C9768 + C10449 + C10449 + C141320 * C10444) * C55525 +
            C10453 * C55524 + C7786 * C55523 + C7785 * C55522) *
               C141216 * C141294 * C141485) *
              C2376 +
          ((C1527 * C55522 + C6627 * C55523 + C7787 * C55524 +
            (C713 * C9769 + C10450 + C10450 + C141320 * C10445) * C55525) *
               C141216 * C141294 * C141485 -
           (C7787 * C55525 + C6627 * C55524 + C1527 * C55523 + C743 * C55522) *
               C141216 * C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C713 * C108 + C721 + C721 + C141320 * C714) * C47710 +
             C7785 * C141358) *
                C47707 +
            (C48449 + C48450) * C47708 + C48455 * C47709) *
               C141294 * C2374 -
           ((C49512 + C49513) * C47709 + (C49514 + C49515) * C47708 +
            (C7786 * C141358 + C7785 * C47710) * C47707) *
               C141294 * C141485) *
              C2376 +
          (((C49515 + C49514) * C47707 + (C49513 + C49512) * C47708 +
            (C1525 * C47710 +
             (C713 * C2963 + C3424 + C3424 + C141320 * C3419) * C141358) *
                C47709) *
               C141294 * C141485 -
           ((C48453 + C48454) * C47709 + (C48452 + C48451) * C47708 +
            (C48450 + C48449) * C47707) *
               C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C14733 * C108 + C14737 + C14737 + C14035 * C714 + C14734 * C1601 +
             C14738 + C14738 + C14036 * C2283 + C14735 * C5325 + C14739 +
             C14739 + C14037 * C5781) *
                C47710 +
            (C62391 + C62392 + C62393) * C141358) *
               C141216 * C141294 * C2374 -
           ((C14735 * C13303 + C18481 + C18481 + C14037 * C13954 +
             C14734 * C7887 + C18480 + C18480 + C14036 * C8794 +
             C14733 * C2960 + C18479 + C18479 + C14035 * C3416) *
                C141358 +
            (C62393 + C62392 + C62391) * C47710) *
               C141216 * C141294 * C141485) *
              C2376 +
          (((C15763 + C15762 + C15761) * C47710 +
            (C14733 * C2961 + C18482 + C18482 + C14035 * C3417 +
             C14734 * C7886 + C18483 + C18483 + C14036 * C8793 +
             C14735 * C13304 + C18484 + C18484 + C14037 * C13956) *
                C141358) *
               C141216 * C141294 * C141485 -
           ((C15761 + C15762 + C15763) * C141358 +
            (C14775 + C14774 + C14773) * C47710) *
               C141216 * C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q));
    d2eexx[67] +=
        (-std::pow(Pi, 2.5) *
         (((C55526 * C108 + C55529 + C55529 + C141216 * C120) * C141320 *
               C55522 +
           C56059 * C55523 + C56060 * C55524 + C56061 * C55525) *
              C141294 * C2956 -
          (C57942 * C55525 + C56061 * C55524 + C56060 * C55523 +
           C56059 * C55522) *
              C141294 * C2957 +
          (C56060 * C55522 + C56061 * C55523 + C57942 * C55524 +
           (C55526 * C57932 + C57938 + C57938 + C141216 * C57934) * C141320 *
               C55525) *
              C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C47712 * C108 + C47719 + C47719 + C47707 * C120 + C47714 * C109 +
            C47720 + C47720 + C47708 * C121 + C47716 * C110 + C47721 + C47721 +
            C47709 * C122) *
               C141320 * C47710 +
           (C48584 + C48585 + C48586) * C141320 * C141358) *
              C141294 * C2956 -
          ((C51457 + C51458 + C51459) * C141320 * C141358 +
           (C48586 + C48585 + C48584) * C141320 * C47710) *
              C141294 * C2957 +
          ((C51459 + C51458 + C51457) * C141320 * C47710 +
           (C47712 * C6729 + C51448 + C51448 + C47707 * C6735 + C47714 * C6728 +
            C51449 + C51449 + C47708 * C6734 + C47716 * C6730 + C51450 +
            C51450 + C47709 * C6736) *
               C141320 * C141358) *
              C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C55526 * C108 + C55529 + C55529 + C141216 * C120) * C14035 +
            C62512 * C14036 + C62513 * C14037) *
               C47710 +
           (C61503 + C61504 + C61522) * C141358) *
              C141294 * C2956 -
          ((C64403 + C64398 + C64399) * C141358 +
           (C61522 + C61504 + C61503) * C47710) *
              C141294 * C2957 +
          ((C64399 + C64398 + C64403) * C47710 +
           (C56055 * C14035 + C58471 * C14036 +
            (C55526 * C60310 + C60317 + C60317 + C141216 * C60312) * C14037) *
               C141358) *
              C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eexy[67] +=
        (-std::pow(Pi, 2.5) *
         (((C55590 * C108 + C55522 * C189 + C55591 * C823 + C55523 * C912 +
            C55592 * C2960 + C55524 * C3026 + C55593 * C6729 + C55525 * C6880) *
               C55527 +
           (C55590 * C114 + C55522 * C195 + C55591 * C828 + C55523 * C917 +
            C55592 * C2964 + C55524 * C3030 + C55593 * C6732 + C55525 * C6883) *
               C141216) *
              C141320 * C141294 * C2956 -
          ((C55593 * C9770 + C55525 * C9864 + C55592 * C6732 + C55524 * C6883 +
            C55591 * C2964 + C55523 * C3030 + C55590 * C828 + C55522 * C917) *
               C141216 +
           (C55593 * C9768 + C55525 * C9862 + C55592 * C6729 + C55524 * C6880 +
            C55591 * C2960 + C55523 * C3026 + C55590 * C823 + C55522 * C912) *
               C55527) *
              C141320 * C141294 * C2957 +
          ((C55590 * C2960 + C55522 * C3026 + C55591 * C6729 + C55523 * C6880 +
            C55592 * C9768 + C55524 * C9862 + C55593 * C57932 +
            C55525 * C57992) *
               C55527 +
           (C55590 * C2964 + C55522 * C3030 + C55591 * C6732 + C55523 * C6883 +
            C55592 * C9770 + C55524 * C9864 + C55593 * C57933 +
            C55525 * C57993) *
               C141216) *
              C141320 * C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C47810 * C108 + C47710 * C189 + C47811 * C823 + C141358 * C912) *
               C47713 +
           (C47810 * C114 + C47710 * C195 + C47811 * C828 + C141358 * C917) *
               C47707 +
           (C47837 + C47838) * C47715 + (C47839 + C47840) * C47708 +
           C47849 * C47717 + C47850 * C47709) *
              C141320 * C141294 * C2956 -
          ((C48704 + C48705) * C47709 + (C48706 + C48707) * C47717 +
           (C48708 + C48709) * C47708 + (C48710 + C48711) * C47715 +
           (C47811 * C2964 + C141358 * C3030 + C47810 * C828 + C47710 * C917) *
               C47707 +
           (C47811 * C2960 + C141358 * C3026 + C47810 * C823 + C47710 * C912) *
               C47713) *
              C141320 * C141294 * C2957 +
          ((C47810 * C2960 + C47710 * C3026 + C47811 * C6729 +
            C141358 * C6880) *
               C47713 +
           (C47810 * C2964 + C47710 * C3030 + C47811 * C6732 +
            C141358 * C6883) *
               C47707 +
           (C47810 * C2961 + C47710 * C3027 + C47811 * C6728 +
            C141358 * C6879) *
               C47715 +
           (C47810 * C2965 + C47710 * C3031 + C47811 * C6731 +
            C141358 * C6882) *
               C47708 +
           (C47810 * C2962 + C47710 * C3028 + C47811 * C6730 +
            C141358 * C6881) *
               C47717 +
           (C47810 * C2966 + C47710 * C3032 + C47811 * C6733 +
            C141358 * C6884) *
               C47709) *
              C141320 * C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47810 * C108 + C47710 * C189 + C47811 * C823 + C141358 * C912) *
                C55527 +
            (C47810 * C114 + C47710 * C195 + C47811 * C828 + C141358 * C917) *
                C141216) *
               C14035 +
           ((C62638 + C62639) * C55527 + (C62640 + C62641) * C141216) * C14036 +
           ((C62642 + C62643) * C55527 + (C62644 + C62645) * C141216) *
               C14037) *
              C141294 * C2956 -
          (((C47811 * C13307 + C141358 * C13398 + C47810 * C13305 +
             C47710 * C13397) *
                C141216 +
            (C47811 * C13303 + C141358 * C13394 + C47810 * C13301 +
             C47710 * C13393) *
                C55527) *
               C14037 +
           ((C47811 * C7890 + C141358 * C8009 + C47810 * C3494 +
             C47710 * C3576) *
                C141216 +
            (C47811 * C7887 + C141358 * C8006 + C47810 * C3490 +
             C47710 * C3572) *
                C55527) *
               C14036 +
           ((C47811 * C2964 + C141358 * C3030 + C47810 * C828 + C47710 * C917) *
                C141216 +
            (C47811 * C2960 + C141358 * C3026 + C47810 * C823 + C47710 * C912) *
                C55527) *
               C14035) *
              C141294 * C2957 +
          (((C47810 * C2960 + C47710 * C3026 + C47811 * C6729 +
             C141358 * C6880) *
                C55527 +
            (C47810 * C2964 + C47710 * C3030 + C47811 * C6732 +
             C141358 * C6883) *
                C141216) *
               C14035 +
           ((C47810 * C7887 + C47710 * C8006 + C47811 * C10551 +
             C141358 * C10677) *
                C55527 +
            (C47810 * C7890 + C47710 * C8009 + C47811 * C10553 +
             C141358 * C10679) *
                C141216) *
               C14036 +
           ((C47810 * C13303 + C47710 * C13394 + C47811 * C60310 +
             C141358 * C60367) *
                C55527 +
            (C47810 * C13307 + C47710 * C13398 + C47811 * C60311 +
             C141358 * C60368) *
                C141216) *
               C14037) *
              C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eexz[67] +=
        (-std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141320 * C276) * C55527 +
            (C275 * C114 + C141320 * C282) * C141216) *
               C55522 +
           (C56197 + C56198) * C55523 + C58047 * C55524 + C58048 * C55525) *
              C141294 * C2956 -
          ((C58055 + C58056) * C55525 + (C56202 + C56201) * C55524 +
           (C56200 + C56199) * C55523 + (C56198 + C56197) * C55522) *
              C141294 * C2957 +
          (C58047 * C55522 + C58048 * C55523 + (C58056 + C58055) * C55524 +
           ((C275 * C57932 + C141320 * C58044) * C55527 +
            (C275 * C57933 + C141320 * C58045) * C141216) *
               C55525) *
              C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141320 * C276) * C47713 +
            (C275 * C114 + C141320 * C282) * C47707 + C305 * C47715 +
            C306 * C47708 + C307 * C47717 + C308 * C47709) *
               C47710 +
           (C48810 + C48811 + C48812 + C48813 + C48814 + C48815) * C141358) *
              C141294 * C2956 -
          ((C51608 + C51609 + C51610 + C51611 + C51612 + C51613) * C141358 +
           (C48815 + C48814 + C48813 + C48812 + C48811 + C48810) * C47710) *
              C141294 * C2957 +
          ((C51613 + C51612 + C51611 + C51610 + C51609 + C51608) * C47710 +
           (C9954 * C47713 + C9953 * C47707 + C7037 * C47715 + C7036 * C47708 +
            (C275 * C6730 + C141320 * C7003) * C47717 +
            (C275 * C6733 + C141320 * C7006) * C47709) *
               C141358) *
              C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C14204 * C108 + C14035 * C276 + C14205 * C1601 + C14036 * C1784 +
             C14206 * C5325 + C14037 * C5449) *
                C55527 +
            (C14204 * C114 + C14035 * C282 + C14205 * C1606 + C14036 * C1789 +
             C14206 * C5329 + C14037 * C5453) *
                C141216) *
               C47710 +
           ((C61733 + C61734 + C61735) * C55527 +
            (C61736 + C61737 + C61738) * C141216) *
               C141358) *
              C141294 * C2956 -
          (((C64564 + C64565 + C64566) * C141216 +
            (C64567 + C64568 + C64569) * C55527) *
               C141358 +
           ((C61738 + C61737 + C61736) * C141216 +
            (C61735 + C61734 + C61733) * C55527) *
               C47710) *
              C141294 * C2957 +
          (((C64569 + C64568 + C64567) * C55527 +
            (C64566 + C64565 + C64564) * C141216) *
               C47710 +
           ((C14204 * C6729 + C14035 * C7002 + C14205 * C10551 +
             C14036 * C10779 + C14206 * C60310 + C14037 * C60419) *
                C55527 +
            (C14204 * C6732 + C14035 * C7005 + C14205 * C10553 +
             C14036 * C10781 + C14206 * C60311 + C14037 * C60420) *
                C141216) *
               C141358) *
              C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eeyx[67] += (-std::pow(Pi, 2.5) *
                   (((C55527 * C108 + C141216 * C114) * C55590 +
                     (C55527 * C189 + C141216 * C362) * C55522 +
                     C56299 * C55591 + C56300 * C55523 + C56301 * C55592 +
                     C56302 * C55524 + C56303 * C55593 + C56304 * C55525) *
                        C141320 * C141294 * C2956 -
                    (C58112 * C55525 + C58113 * C55593 + C56304 * C55524 +
                     C56303 * C55592 + C56302 * C55523 + C56301 * C55591 +
                     C56300 * C55522 + C56299 * C55590) *
                        C141320 * C141294 * C2957 +
                    (C56301 * C55590 + C56302 * C55522 + C56303 * C55591 +
                     C56304 * C55523 + C58113 * C55592 + C58112 * C55524 +
                     (C55527 * C57932 + C141216 * C57933) * C55593 +
                     (C55527 * C57992 + C141216 * C58106) * C55525) *
                        C141320 * C141294 * C2958) *
                   C141243) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   (((C47713 * C108 + C47707 * C114 + C47715 * C109 +
                      C47708 * C115 + C47717 * C110 + C47709 * C116) *
                         C47810 +
                     (C47713 * C189 + C47707 * C362 + C47715 * C190 +
                      C47708 * C363 + C47717 * C191 + C47709 * C364) *
                         C47710 +
                     (C48944 + C48945 + C48946) * C47811 +
                     (C48947 + C48948 + C48949) * C141358) *
                        C141320 * C141294 * C2956 -
                    ((C51700 + C51701 + C51702) * C141358 +
                     (C51703 + C51704 + C51705) * C47811 +
                     (C48949 + C48948 + C48947) * C47710 +
                     (C48946 + C48945 + C48944) * C47810) *
                        C141320 * C141294 * C2957 +
                    ((C51705 + C51704 + C51703) * C47810 +
                     (C51702 + C51701 + C51700) * C47710 +
                     (C47713 * C6729 + C47707 * C6732 + C47715 * C6728 +
                      C47708 * C6731 + C47717 * C6730 + C47709 * C6733) *
                         C47811 +
                     (C47713 * C6880 + C47707 * C7140 + C47715 * C6879 +
                      C47708 * C7139 + C47717 * C6881 + C47709 * C7141) *
                         C141358) *
                        C141320 * C141294 * C2958) *
                   C141243) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   ((((C55527 * C108 + C141216 * C114) * C47810 +
                      (C55527 * C189 + C141216 * C362) * C47710 +
                      C56299 * C47811 + C56300 * C141358) *
                         C14035 +
                     (C62878 + C62879 + C62850 + C62851) * C14036 +
                     (C62880 + C62881 + C62856 + C62857) * C14037) *
                        C141294 * C2956 -
                    ((C64648 * C141358 + C64649 * C47811 + C61850 * C47710 +
                      C61849 * C47810) *
                         C14037 +
                     (C58706 * C141358 + C58707 * C47811 + C58708 * C47710 +
                      C58709 * C47810) *
                         C14036 +
                     (C56302 * C141358 + C56301 * C47811 + C56300 * C47710 +
                      C56299 * C47810) *
                         C14035) *
                        C141294 * C2957 +
                    ((C56301 * C47810 + C56302 * C47710 + C56303 * C47811 +
                      C56304 * C141358) *
                         C14035 +
                     (C58707 * C47810 + C58706 * C47710 + C58705 * C47811 +
                      C58704 * C141358) *
                         C14036 +
                     (C64649 * C47810 + C64648 * C47710 +
                      (C55527 * C60310 + C141216 * C60311) * C47811 +
                      (C55527 * C60367 + C141216 * C60471) * C141358) *
                         C14037) *
                        C141294 * C2958) *
                   C141243) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[67] +=
        (-std::pow(Pi, 2.5) *
         ((C55744 * C108 + C55749 + C55749 + C55522 * C419 + C55745 * C823 +
           C55750 + C55750 + C55523 * C1171 + C55746 * C2960 + C55751 + C55751 +
           C55524 * C3196 + C55747 * C6729 + C55752 + C55752 + C55525 * C7289) *
              C141216 * C141320 * C141294 * C2956 -
          (C55747 * C9768 + C56377 + C56377 + C55525 * C10121 + C55746 * C6729 +
           C56378 + C56378 + C55524 * C7289 + C55745 * C2960 + C56379 + C56379 +
           C55523 * C3196 + C55744 * C823 + C56380 + C56380 + C55522 * C1171) *
              C141216 * C141320 * C141294 * C2957 +
          (C55744 * C2960 + C58165 + C58165 + C55522 * C3196 + C55745 * C6729 +
           C58166 + C58166 + C55523 * C7289 + C55746 * C9768 + C58167 + C58167 +
           C55524 * C10121 + C55747 * C57932 + C58168 + C58168 +
           C55525 * C58163) *
              C141216 * C141320 * C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C48072 * C108 + C48075 + C48075 + C47710 * C419 + C48073 * C823 +
            C48076 + C48076 + C141358 * C1171) *
               C47707 +
           (C48109 + C48110) * C47708 + C48115 * C47709) *
              C141320 * C141294 * C2956 -
          ((C49078 + C49079) * C47709 + (C49080 + C49081) * C47708 +
           (C48073 * C2960 + C49066 + C49066 + C141358 * C3196 + C48072 * C823 +
            C49067 + C49067 + C47710 * C1171) *
               C47707) *
              C141320 * C141294 * C2957 +
          ((C48072 * C2960 + C51780 + C51780 + C47710 * C3196 + C48073 * C6729 +
            C51781 + C51781 + C141358 * C7289) *
               C47707 +
           (C48072 * C2961 + C51782 + C51782 + C47710 * C3197 + C48073 * C6728 +
            C51783 + C51783 + C141358 * C7288) *
               C47708 +
           (C48072 * C2962 + C51784 + C51784 + C47710 * C3198 + C48073 * C6730 +
            C51785 + C51785 + C141358 * C7290) *
               C47709) *
              C141320 * C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C48072 * C108 + C48075 + C48075 + C47710 * C419 + C48073 * C823 +
            C48076 + C48076 + C141358 * C1171) *
               C141216 * C14035 +
           (C63012 + C63013) * C141216 * C14036 +
           (C63014 + C63015) * C141216 * C14037) *
              C141294 * C2956 -
          ((C48073 * C13303 + C61953 + C61953 + C141358 * C13636 +
            C48072 * C13301 + C61954 + C61954 + C47710 * C13635) *
               C141216 * C14037 +
           (C48073 * C7887 + C52624 + C52624 + C141358 * C8345 +
            C48072 * C3490 + C52623 + C52623 + C47710 * C3790) *
               C141216 * C14036 +
           (C48073 * C2960 + C49066 + C49066 + C141358 * C3196 + C48072 * C823 +
            C49067 + C49067 + C47710 * C1171) *
               C141216 * C14035) *
              C141294 * C2957 +
          ((C48072 * C2960 + C51780 + C51780 + C47710 * C3196 + C48073 * C6729 +
            C51781 + C51781 + C141358 * C7289) *
               C141216 * C14035 +
           (C48072 * C7887 + C64724 + C64724 + C47710 * C8345 +
            C48073 * C10551 + C64725 + C64725 + C141358 * C11025) *
               C141216 * C14036 +
           (C48072 * C13303 + C64726 + C64726 + C47710 * C13636 +
            C48073 * C60310 + C64727 + C64727 + C141358 * C60522) *
               C141216 * C14037) *
              C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eeyz[67] +=
        (-std::pow(Pi, 2.5) *
         (((C275 * C108 + C141320 * C276) * C55590 +
           (C275 * C189 + C141320 * C501) * C55522 + C7032 * C55591 +
           C7428 * C55523 + C7034 * C55592 + C7429 * C55524 + C9954 * C55593 +
           C10208 * C55525) *
              C141216 * C141294 * C2956 -
          (C58222 * C55525 + C58054 * C55593 + C10208 * C55524 +
           C9954 * C55592 + C7429 * C55523 + C7034 * C55591 + C7428 * C55522 +
           C7032 * C55590) *
              C141216 * C141294 * C2957 +
          (C7034 * C55590 + C7429 * C55522 + C9954 * C55591 + C10208 * C55523 +
           C58054 * C55592 + C58222 * C55524 +
           (C275 * C57932 + C141320 * C58044) * C55593 +
           (C275 * C57992 + C141320 * C58218) * C55525) *
              C141216 * C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141320 * C276) * C47810 +
            (C275 * C189 + C141320 * C501) * C47710 + C7032 * C47811 +
            C7428 * C141358) *
               C47707 +
           (C48190 + C48191 + C48192 + C48193) * C47708 + C48204 * C47709) *
              C141294 * C2956 -
          ((C49180 + C49181 + C49182 + C49183) * C47709 +
           (C49184 + C49185 + C49186 + C49187) * C47708 +
           (C7429 * C141358 + C7034 * C47811 + C7428 * C47710 +
            C7032 * C47810) *
               C47707) *
              C141294 * C2957 +
          ((C7034 * C47810 + C7429 * C47710 + C9954 * C47811 +
            C10208 * C141358) *
               C47707 +
           (C6086 * C47810 + C6371 * C47710 + C7037 * C47811 +
            C7430 * C141358) *
               C47708 +
           (C6089 * C47810 + C6372 * C47710 +
            (C275 * C6730 + C141320 * C7003) * C47811 +
            (C275 * C6881 + C141320 * C7415) * C141358) *
               C47709) *
              C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C14204 * C108 + C14035 * C276 + C14205 * C1601 + C14036 * C1784 +
            C14206 * C5325 + C14037 * C5449) *
               C47810 +
           (C14204 * C189 + C14035 * C501 + C14205 * C1690 + C14036 * C2040 +
            C14206 * C5391 + C14037 * C5619) *
               C47710 +
           (C61733 + C61734 + C61735) * C47811 +
           (C62061 + C62062 + C62063) * C141358) *
              C141216 * C141294 * C2956 -
          ((C64808 + C64809 + C64810) * C141358 +
           (C64567 + C64568 + C64569) * C47811 +
           (C62063 + C62062 + C62061) * C47710 +
           (C61735 + C61734 + C61733) * C47810) *
              C141216 * C141294 * C2957 +
          ((C64569 + C64568 + C64567) * C47810 +
           (C64810 + C64809 + C64808) * C47710 +
           (C14204 * C6729 + C14035 * C7002 + C14205 * C10551 +
            C14036 * C10779 + C14206 * C60310 + C14037 * C60419) *
               C47811 +
           (C14204 * C6880 + C14035 * C7414 + C14205 * C10677 +
            C14036 * C11131 + C14206 * C60367 + C14037 * C60577) *
               C141358) *
              C141216 * C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eezx[67] +=
        (-std::pow(Pi, 2.5) *
         ((((C55527 * C108 + C141216 * C114) * C275 +
            (C55527 * C276 + C141216 * C579) * C141320) *
               C55522 +
           (C56517 + C56541) * C55523 + C58274 * C55524 + C58275 * C55525) *
              C141294 * C2956 -
          ((C58280 + C58278) * C55525 + (C56543 + C56523) * C55524 +
           (C56542 + C56520) * C55523 + (C56541 + C56517) * C55522) *
              C141294 * C2957 +
          (C58274 * C55522 + C58275 * C55523 + (C58278 + C58280) * C55524 +
           ((C55527 * C57932 + C141216 * C57933) * C275 +
            (C55527 * C58044 + C141216 * C58272) * C141320) *
               C55525) *
              C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47713 * C108 + C47707 * C114 + C47715 * C109 + C47708 * C115 +
             C47717 * C110 + C47709 * C116) *
                C275 +
            (C47713 * C276 + C47707 * C579 + C47715 * C277 + C47708 * C580 +
             C47717 * C278 + C47709 * C581) *
                C141320) *
               C47710 +
           ((C48944 + C48945 + C48946) * C275 +
            (C49298 + C49299 + C49300) * C141320) *
               C141358) *
              C141294 * C2956 -
          (((C51940 + C51941 + C51942) * C141320 +
            (C51703 + C51704 + C51705) * C275) *
               C141358 +
           ((C49300 + C49299 + C49298) * C141320 +
            (C48946 + C48945 + C48944) * C275) *
               C47710) *
              C141294 * C2957 +
          (((C51705 + C51704 + C51703) * C275 +
            (C51942 + C51941 + C51940) * C141320) *
               C47710 +
           ((C47713 * C6729 + C47707 * C6732 + C47715 * C6728 + C47708 * C6731 +
             C47717 * C6730 + C47709 * C6733) *
                C275 +
            (C47713 * C7002 + C47707 * C7530 + C47715 * C7001 + C47708 * C7529 +
             C47717 * C7003 + C47709 * C7531) *
                C141320) *
               C141358) *
              C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C55527 * C108 + C141216 * C114) * C14204 +
            (C55527 * C276 + C141216 * C579) * C14035 + C62870 * C14205 +
            C63222 * C14036 + C62872 * C14206 + C63223 * C14037) *
               C47710 +
           (C62162 + C62163 + C62164 + C62165 + C62166 + C62180) * C141358) *
              C141294 * C2956 -
          ((C64893 + C64887 + C64888 + C64889 + C64890 + C64891) * C141358 +
           (C62180 + C62166 + C62165 + C62164 + C62163 + C62162) * C47710) *
              C141294 * C2957 +
          ((C64891 + C64890 + C64889 + C64888 + C64887 + C64893) * C47710 +
           (C56303 * C14204 + C56537 * C14035 + C58705 * C14205 +
            C58927 * C14036 + (C55527 * C60310 + C141216 * C60311) * C14206 +
            (C55527 * C60419 + C141216 * C60628) * C14037) *
               C141358) *
              C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eezy[67] +=
        (-std::pow(Pi, 2.5) *
         (((C55590 * C108 + C55522 * C189 + C55591 * C823 + C55523 * C912 +
            C55592 * C2960 + C55524 * C3026 + C55593 * C6729 + C55525 * C6880) *
               C275 +
           (C55590 * C276 + C55522 * C635 + C55591 * C1006 + C55523 * C1419 +
            C55592 * C3084 + C55524 * C3362 + C55593 * C7002 + C55525 * C7655) *
               C141320) *
              C141216 * C141294 * C2956 -
          ((C55593 * C9940 + C55525 * C10368 + C55592 * C7002 + C55524 * C7655 +
            C55591 * C3084 + C55523 * C3362 + C55590 * C1006 + C55522 * C1419) *
               C141320 +
           (C55593 * C9768 + C55525 * C9862 + C55592 * C6729 + C55524 * C6880 +
            C55591 * C2960 + C55523 * C3026 + C55590 * C823 + C55522 * C912) *
               C275) *
              C141216 * C141294 * C2957 +
          ((C55590 * C2960 + C55522 * C3026 + C55591 * C6729 + C55523 * C6880 +
            C55592 * C9768 + C55524 * C9862 + C55593 * C57932 +
            C55525 * C57992) *
               C275 +
           (C55590 * C3084 + C55522 * C3362 + C55591 * C7002 + C55523 * C7655 +
            C55592 * C9940 + C55524 * C10368 + C55593 * C58044 +
            C55525 * C58330) *
               C141320) *
              C141216 * C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47810 * C108 + C47710 * C189 + C47811 * C823 + C141358 * C912) *
                C275 +
            (C47810 * C276 + C47710 * C635 + C47811 * C1006 + C141358 * C1419) *
                C141320) *
               C47707 +
           ((C47837 + C47838) * C275 + (C48366 + C48367) * C141320) * C47708 +
           C48374 * C47709) *
              C141294 * C2956 -
          (((C49410 + C49411) * C141320 + (C48706 + C48707) * C275) * C47709 +
           ((C49412 + C49413) * C141320 + (C48710 + C48711) * C275) * C47708 +
           ((C47811 * C3084 + C141358 * C3362 + C47810 * C1006 +
             C47710 * C1419) *
                C141320 +
            (C47811 * C2960 + C141358 * C3026 + C47810 * C823 + C47710 * C912) *
                C275) *
               C47707) *
              C141294 * C2957 +
          (((C47810 * C2960 + C47710 * C3026 + C47811 * C6729 +
             C141358 * C6880) *
                C275 +
            (C47810 * C3084 + C47710 * C3362 + C47811 * C7002 +
             C141358 * C7655) *
                C141320) *
               C47707 +
           ((C47810 * C2961 + C47710 * C3027 + C47811 * C6728 +
             C141358 * C6879) *
                C275 +
            (C47810 * C3085 + C47710 * C3363 + C47811 * C7001 +
             C141358 * C7654) *
                C141320) *
               C47708 +
           ((C47810 * C2962 + C47710 * C3028 + C47811 * C6730 +
             C141358 * C6881) *
                C275 +
            (C47810 * C3086 + C47710 * C3364 + C47811 * C7003 +
             C141358 * C7656) *
                C141320) *
               C47709) *
              C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C47810 * C108 + C47710 * C189 + C47811 * C823 + C141358 * C912) *
               C14204 +
           (C47810 * C276 + C47710 * C635 + C47811 * C1006 + C141358 * C1419) *
               C14035 +
           (C62638 + C62639) * C14205 + (C63336 + C63337) * C14036 +
           (C62642 + C62643) * C14206 + (C63338 + C63339) * C14037) *
              C141216 * C141294 * C2956 -
          ((C47811 * C13477 + C141358 * C13876 + C47810 * C13475 +
            C47710 * C13875) *
               C14037 +
           (C47811 * C13303 + C141358 * C13394 + C47810 * C13301 +
            C47710 * C13393) *
               C14206 +
           (C47811 * C8128 + C141358 * C8684 + C47810 * C3646 +
            C47710 * C4004) *
               C14036 +
           (C47811 * C7887 + C141358 * C8006 + C47810 * C3490 +
            C47710 * C3572) *
               C14205 +
           (C47811 * C3084 + C141358 * C3362 + C47810 * C1006 +
            C47710 * C1419) *
               C14035 +
           (C47811 * C2960 + C141358 * C3026 + C47810 * C823 + C47710 * C912) *
               C14204) *
              C141216 * C141294 * C2957 +
          ((C47810 * C2960 + C47710 * C3026 + C47811 * C6729 +
            C141358 * C6880) *
               C14204 +
           (C47810 * C3084 + C47710 * C3362 + C47811 * C7002 +
            C141358 * C7655) *
               C14035 +
           (C47810 * C7887 + C47710 * C8006 + C47811 * C10551 +
            C141358 * C10677) *
               C14205 +
           (C47810 * C8128 + C47710 * C8684 + C47811 * C10779 +
            C141358 * C11349) *
               C14036 +
           (C47810 * C13303 + C47710 * C13394 + C47811 * C60310 +
            C141358 * C60367) *
               C14206 +
           (C47810 * C13477 + C47710 * C13876 + C47811 * C60419 +
            C141358 * C60679) *
               C14037) *
              C141216 * C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eezz[67] +=
        (-std::pow(Pi, 2.5) *
         (((C713 * C108 + C721 + C721 + C141320 * C714) * C55522 +
           C7785 * C55523 + C7786 * C55524 + C10453 * C55525) *
              C141216 * C141294 * C2956 -
          (C58388 * C55525 + C10453 * C55524 + C7786 * C55523 +
           C7785 * C55522) *
              C141216 * C141294 * C2957 +
          (C7786 * C55522 + C10453 * C55523 + C58388 * C55524 +
           (C713 * C57932 + C58385 + C58385 + C141320 * C58381) * C55525) *
              C141216 * C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C141320 * C714) * C47710 +
            C7785 * C141358) *
               C47707 +
           (C48449 + C48450) * C47708 + C48455 * C47709) *
              C141294 * C2956 -
          ((C49512 + C49513) * C47709 + (C49514 + C49515) * C47708 +
           (C7786 * C141358 + C7785 * C47710) * C47707) *
              C141294 * C2957 +
          ((C7786 * C47710 + C10453 * C141358) * C47707 +
           (C6627 * C47710 + C7787 * C141358) * C47708 +
           (C6628 * C47710 +
            (C713 * C6730 + C7778 + C7778 + C141320 * C7766) * C141358) *
               C47709) *
              C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C14733 * C108 + C14737 + C14737 + C14035 * C714 + C14734 * C1601 +
            C14738 + C14738 + C14036 * C2283 + C14735 * C5325 + C14739 +
            C14739 + C14037 * C5781) *
               C47710 +
           (C62391 + C62392 + C62393) * C141358) *
              C141216 * C141294 * C2956 -
          ((C65057 + C65058 + C65059) * C141358 +
           (C62393 + C62392 + C62391) * C47710) *
              C141216 * C141294 * C2957 +
          ((C65059 + C65058 + C65057) * C47710 +
           (C14733 * C6729 + C65048 + C65048 + C14035 * C7765 +
            C14734 * C10551 + C65049 + C65049 + C14036 * C11449 +
            C14735 * C60310 + C65050 + C65050 + C14037 * C60730) *
               C141358) *
              C141216 * C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eexx[68] +=
        (-std::pow(Pi, 2.5) *
         ((((C55526 * C108 + C55529 + C55529 + C141216 * C120) * C141320 *
                C55522 +
            C56059 * C55523 + C56060 * C55524 + C56061 * C55525) *
               C1596 -
           (C58474 * C55525 + C58475 * C55524 + C58476 * C55523 +
            (C55526 * C1601 + C56748 + C56748 + C141216 * C1611) * C141320 *
                C55522) *
               C141487) *
              C2374 +
          ((C58476 * C55522 + C58475 * C55523 + C58474 * C55524 +
            (C55526 * C58454 + C58464 + C58464 + C141216 * C58456) * C141320 *
                C55525) *
               C141487 -
           (C57942 * C55525 + C56061 * C55524 + C56060 * C55523 +
            C56059 * C55522) *
               C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47712 * C108 + C47719 + C47719 + C47707 * C120 + C47714 * C109 +
             C47720 + C47720 + C47708 * C121 + C47716 * C110 + C47721 + C47721 +
             C47709 * C122) *
                C141320 * C47710 +
            (C48584 + C48585 + C48586) * C141320 * C141358) *
               C1596 -
           ((C52204 + C52205 + C52206) * C141320 * C141358 +
            (C47716 * C1599 + C49617 + C49617 + C47709 * C1609 +
             C47714 * C1600 + C49618 + C49618 + C47708 * C1610 +
             C47712 * C1601 + C49619 + C49619 + C47707 * C1611) *
                C141320 * C47710) *
               C141487) *
              C2374 +
          (((C52206 + C52205 + C52204) * C141320 * C47710 +
            (C47712 * C7887 + C52195 + C52195 + C47707 * C7893 +
             C47714 * C7886 + C52196 + C52196 + C47708 * C7892 +
             C47716 * C7888 + C52197 + C52197 + C47709 * C7894) *
                C141320 * C141358) *
               C141487 -
           ((C51457 + C51458 + C51459) * C141320 * C141358 +
            (C48586 + C48585 + C48584) * C141320 * C47710) *
               C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C55526 * C108 + C55529 + C55529 + C141216 * C120) * C14035 +
             C62512 * C14036 + C62513 * C14037) *
                C47710 +
            (C61503 + C61504 + C61522) * C141358) *
               C1596 -
           ((C65169 + C65163 + C65164) * C141358 +
            ((C55526 * C15862 + C62497 + C62497 + C141216 * C15868) * C14037 +
             C62513 * C14036 + C62512 * C14035) *
                C47710) *
               C141487) *
              C2374 +
          (((C65164 + C65163 + C65169) * C47710 +
            (C58472 * C14035 + C64402 * C14036 +
             (C55526 * C65157 + C65165 + C65165 + C141216 * C65159) * C14037) *
                C141358) *
               C141487 -
           ((C64403 + C64398 + C64399) * C141358 +
            (C61522 + C61504 + C61503) * C47710) *
               C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eexy[68] +=
        (-std::pow(Pi, 2.5) *
         ((((C55590 * C108 + C55522 * C189 + C55591 * C823 + C55523 * C912 +
             C55592 * C2960 + C55524 * C3026 + C55593 * C6729 +
             C55525 * C6880) *
                C55527 +
            (C55590 * C114 + C55522 * C195 + C55591 * C828 + C55523 * C917 +
             C55592 * C2964 + C55524 * C3030 + C55593 * C6732 +
             C55525 * C6883) *
                C141216) *
               C141320 * C1596 -
           ((C55593 * C10553 + C55525 * C10679 + C55592 * C7890 +
             C55524 * C8009 + C55591 * C3494 + C55523 * C3576 + C55590 * C1606 +
             C55522 * C1695) *
                C141216 +
            (C55593 * C10551 + C55525 * C10677 + C55592 * C7887 +
             C55524 * C8006 + C55591 * C3490 + C55523 * C3572 + C55590 * C1601 +
             C55522 * C1690) *
                C55527) *
               C141320 * C141487) *
              C2374 +
          (((C55590 * C3490 + C55522 * C3572 + C55591 * C7887 + C55523 * C8006 +
             C55592 * C10551 + C55524 * C10677 + C55593 * C58454 +
             C55525 * C58542) *
                C55527 +
            (C55590 * C3494 + C55522 * C3576 + C55591 * C7890 + C55523 * C8009 +
             C55592 * C10553 + C55524 * C10679 + C55593 * C58455 +
             C55525 * C58543) *
                C141216) *
               C141320 * C141487 -
           ((C55593 * C9770 + C55525 * C9864 + C55592 * C6732 + C55524 * C6883 +
             C55591 * C2964 + C55523 * C3030 + C55590 * C828 + C55522 * C917) *
                C141216 +
            (C55593 * C9768 + C55525 * C9862 + C55592 * C6729 + C55524 * C6880 +
             C55591 * C2960 + C55523 * C3026 + C55590 * C823 + C55522 * C912) *
                C55527) *
               C141320 * C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47810 * C108 + C47710 * C189 + C47811 * C823 + C141358 * C912) *
                C47713 +
            (C47810 * C114 + C47710 * C195 + C47811 * C828 + C141358 * C917) *
                C47707 +
            (C47837 + C47838) * C47715 + (C47839 + C47840) * C47708 +
            C47849 * C47717 + C47850 * C47709) *
               C141320 * C1596 -
           ((C49740 + C49741) * C47709 + (C49742 + C49743) * C47717 +
            (C49744 + C49745) * C47708 + (C49746 + C49747) * C47715 +
            (C47811 * C3494 + C141358 * C3576 + C47810 * C1606 +
             C47710 * C1695) *
                C47707 +
            (C47811 * C3490 + C141358 * C3572 + C47810 * C1601 +
             C47710 * C1690) *
                C47713) *
               C141320 * C141487) *
              C2374 +
          (((C47810 * C3490 + C47710 * C3572 + C47811 * C7887 +
             C141358 * C8006) *
                C47713 +
            (C47810 * C3494 + C47710 * C3576 + C47811 * C7890 +
             C141358 * C8009) *
                C47707 +
            (C47810 * C3491 + C47710 * C3573 + C47811 * C7886 +
             C141358 * C8005) *
                C47715 +
            (C47810 * C3495 + C47710 * C3577 + C47811 * C7889 +
             C141358 * C8008) *
                C47708 +
            (C47810 * C3492 + C47710 * C3574 + C47811 * C7888 +
             C141358 * C8007) *
                C47717 +
            (C47810 * C3496 + C47710 * C3578 + C47811 * C7891 +
             C141358 * C8010) *
                C47709) *
               C141320 * C141487 -
           ((C48704 + C48705) * C47709 + (C48706 + C48707) * C47717 +
            (C48708 + C48709) * C47708 + (C48710 + C48711) * C47715 +
            (C47811 * C2964 + C141358 * C3030 + C47810 * C828 + C47710 * C917) *
                C47707 +
            (C47811 * C2960 + C141358 * C3026 + C47810 * C823 + C47710 * C912) *
                C47713) *
               C141320 * C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C47810 * C108 + C47710 * C189 + C47811 * C823 + C141358 * C912) *
                 C55527 +
             (C47810 * C114 + C47710 * C195 + C47811 * C828 + C141358 * C917) *
                 C141216) *
                C14035 +
            ((C62638 + C62639) * C55527 + (C62640 + C62641) * C141216) *
                C14036 +
            ((C62642 + C62643) * C55527 + (C62644 + C62645) * C141216) *
                C14037) *
               C1596 -
           (((C47811 * C18584 + C141358 * C18700 + C47810 * C15865 +
              C47710 * C16016) *
                 C141216 +
             (C47811 * C18582 + C141358 * C18698 + C47810 * C15862 +
              C47710 * C16013) *
                 C55527) *
                C14037 +
            ((C62645 + C62644) * C141216 + (C62643 + C62642) * C55527) *
                C14036 +
            ((C62641 + C62640) * C141216 + (C62639 + C62638) * C55527) *
                C14035) *
               C141487) *
              C2374 +
          ((((C65286 + C65287) * C55527 + (C65288 + C65289) * C141216) *
                C14035 +
            ((C65290 + C65291) * C55527 + (C65292 + C65293) * C141216) *
                C14036 +
            ((C47810 * C18582 + C47710 * C18698 + C47811 * C65157 +
              C141358 * C65267) *
                 C55527 +
             (C47810 * C18584 + C47710 * C18700 + C47811 * C65158 +
              C141358 * C65268) *
                 C141216) *
                C14037) *
               C141487 -
           (((C65293 + C65292) * C141216 + (C65291 + C65290) * C55527) *
                C14037 +
            ((C65289 + C65288) * C141216 + (C65287 + C65286) * C55527) *
                C14036 +
            ((C47811 * C2964 + C141358 * C3030 + C47810 * C828 +
              C47710 * C917) *
                 C141216 +
             (C47811 * C2960 + C141358 * C3026 + C47810 * C823 +
              C47710 * C912) *
                 C55527) *
                C14035) *
               C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eexz[68] +=
        (-std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141320 * C276) * C55527 +
             (C275 * C114 + C141320 * C282) * C141216) *
                C55522 +
            (C56197 + C56198) * C55523 + C58047 * C55524 + C58048 * C55525) *
               C1596 -
           ((C58623 + C58624) * C55525 + (C58617 + C58618) * C55524 +
            (C58619 + C58620) * C55523 +
            ((C275 * C1606 + C141320 * C1789) * C141216 +
             (C275 * C1601 + C141320 * C1784) * C55527) *
                C55522) *
               C141487) *
              C2374 +
          (((C58620 + C58619) * C55522 + (C58618 + C58617) * C55523 +
            (C58624 + C58623) * C55524 +
            ((C275 * C58454 + C141320 * C58610) * C55527 +
             (C275 * C58455 + C141320 * C58611) * C141216) *
                C55525) *
               C141487 -
           ((C58055 + C58056) * C55525 + (C56202 + C56201) * C55524 +
            (C56200 + C56199) * C55523 + (C56198 + C56197) * C55522) *
               C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141320 * C276) * C47713 +
             (C275 * C114 + C141320 * C282) * C47707 + C305 * C47715 +
             C306 * C47708 + C307 * C47717 + C308 * C47709) *
                C47710 +
            (C48810 + C48811 + C48812 + C48813 + C48814 + C48815) * C141358) *
               C1596 -
           ((C52403 + C52404 + C52405 + C52406 + C52407 + C52408) * C141358 +
            (C1806 * C47709 + C1807 * C47717 + C1808 * C47708 + C1809 * C47715 +
             (C275 * C1606 + C141320 * C1789) * C47707 +
             (C275 * C1601 + C141320 * C1784) * C47713) *
                C47710) *
               C141487) *
              C2374 +
          (((C52408 + C52407 + C52406 + C52405 + C52404 + C52403) * C47710 +
            (C10797 * C47713 + C10796 * C47707 + C8143 * C47715 +
             C8142 * C47708 + (C275 * C7888 + C141320 * C8129) * C47717 +
             (C275 * C7891 + C141320 * C8132) * C47709) *
                C141358) *
               C141487 -
           ((C51608 + C51609 + C51610 + C51611 + C51612 + C51613) * C141358 +
            (C48815 + C48814 + C48813 + C48812 + C48811 + C48810) * C47710) *
               C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C14204 * C108 + C14035 * C276 + C14205 * C1601 + C14036 * C1784 +
              C14206 * C5325 + C14037 * C5449) *
                 C55527 +
             (C14204 * C114 + C14035 * C282 + C14205 * C1606 + C14036 * C1789 +
              C14206 * C5329 + C14037 * C5453) *
                 C141216) *
                C47710 +
            ((C61733 + C61734 + C61735) * C55527 +
             (C61736 + C61737 + C61738) * C141216) *
                C141358) *
               C1596 -
           (((C65406 + C65407 + C65408) * C141216 +
             (C65409 + C65410 + C65411) * C55527) *
                C141358 +
            ((C14206 * C15865 + C14037 * C16154 + C14205 * C5329 +
              C14036 * C5453 + C14204 * C1606 + C14035 * C1789) *
                 C141216 +
             (C14206 * C15862 + C14037 * C16151 + C14205 * C5325 +
              C14036 * C5449 + C14204 * C1601 + C14035 * C1784) *
                 C55527) *
                C47710) *
               C141487) *
              C2374 +
          ((((C65411 + C65410 + C65409) * C55527 +
             (C65408 + C65407 + C65406) * C141216) *
                C47710 +
            ((C14204 * C7887 + C14035 * C8128 + C14205 * C13303 +
              C14036 * C13477 + C14206 * C65157 + C14037 * C65391) *
                 C55527 +
             (C14204 * C7890 + C14035 * C8131 + C14205 * C13307 +
              C14036 * C13481 + C14206 * C65158 + C14037 * C65392) *
                 C141216) *
                C141358) *
               C141487 -
           (((C64564 + C64565 + C64566) * C141216 +
             (C64567 + C64568 + C64569) * C55527) *
                C141358 +
            ((C61738 + C61737 + C61736) * C141216 +
             (C61735 + C61734 + C61733) * C55527) *
                C47710) *
               C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eeyx[68] += (-std::pow(Pi, 2.5) *
                   ((((C55527 * C108 + C141216 * C114) * C55590 +
                      (C55527 * C189 + C141216 * C362) * C55522 +
                      C56299 * C55591 + C56300 * C55523 + C56301 * C55592 +
                      C56302 * C55524 + C56303 * C55593 + C56304 * C55525) *
                         C141320 * C1596 -
                     (C58704 * C55525 + C58705 * C55593 + C58706 * C55524 +
                      C58707 * C55592 + C58708 * C55523 + C58709 * C55591 +
                      (C55527 * C1690 + C141216 * C1878) * C55522 +
                      (C55527 * C1601 + C141216 * C1606) * C55590) *
                         C141320 * C141487) *
                        C2374 +
                    ((C58709 * C55590 + C58708 * C55522 + C58707 * C55591 +
                      C58706 * C55523 + C58705 * C55592 + C58704 * C55524 +
                      (C55527 * C58454 + C141216 * C58455) * C55593 +
                      (C55527 * C58542 + C141216 * C58690) * C55525) *
                         C141320 * C141487 -
                     (C58112 * C55525 + C58113 * C55593 + C56304 * C55524 +
                      C56303 * C55592 + C56302 * C55523 + C56301 * C55591 +
                      C56300 * C55522 + C56299 * C55590) *
                         C141320 * C1596) *
                        C141485) *
                   C141243) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   ((((C47713 * C108 + C47707 * C114 + C47715 * C109 +
                       C47708 * C115 + C47717 * C110 + C47709 * C116) *
                          C47810 +
                      (C47713 * C189 + C47707 * C362 + C47715 * C190 +
                       C47708 * C363 + C47717 * C191 + C47709 * C364) *
                          C47710 +
                      (C48944 + C48945 + C48946) * C47811 +
                      (C48947 + C48948 + C48949) * C141358) *
                         C141320 * C1596 -
                     ((C52519 + C52520 + C52521) * C141358 +
                      (C52522 + C52523 + C52524) * C47811 +
                      (C47717 * C1688 + C47709 * C1876 + C47715 * C1689 +
                       C47708 * C1877 + C47713 * C1690 + C47707 * C1878) *
                          C47710 +
                      (C47717 * C1599 + C47709 * C1604 + C47715 * C1600 +
                       C47708 * C1605 + C47713 * C1601 + C47707 * C1606) *
                          C47810) *
                         C141320 * C141487) *
                        C2374 +
                    (((C52524 + C52523 + C52522) * C47810 +
                      (C52521 + C52520 + C52519) * C47710 +
                      (C47713 * C7887 + C47707 * C7890 + C47715 * C7886 +
                       C47708 * C7889 + C47717 * C7888 + C47709 * C7891) *
                          C47811 +
                      (C47713 * C8006 + C47707 * C8244 + C47715 * C8005 +
                       C47708 * C8243 + C47717 * C8007 + C47709 * C8245) *
                          C141358) *
                         C141320 * C141487 -
                     ((C51700 + C51701 + C51702) * C141358 +
                      (C51703 + C51704 + C51705) * C47811 +
                      (C48949 + C48948 + C48947) * C47710 +
                      (C48946 + C48945 + C48944) * C47810) *
                         C141320 * C1596) *
                        C141485) *
                   C141243) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   (((((C55527 * C108 + C141216 * C114) * C47810 +
                       (C55527 * C189 + C141216 * C362) * C47710 +
                       C56299 * C47811 + C56300 * C141358) *
                          C14035 +
                      (C62878 + C62879 + C62850 + C62851) * C14036 +
                      (C62880 + C62881 + C62856 + C62857) * C14037) *
                         C1596 -
                     ((C65523 * C141358 + C65524 * C47811 +
                       (C55527 * C16013 + C141216 * C16273) * C47710 +
                       (C55527 * C15862 + C141216 * C15865) * C47810) *
                          C14037 +
                      (C62857 + C62856 + C62881 + C62880) * C14036 +
                      (C62851 + C62850 + C62879 + C62878) * C14035) *
                         C141487) *
                        C2374 +
                    (((C65515 + C65516 + C65517 + C65518) * C14035 +
                      (C65519 + C65520 + C65521 + C65522) * C14036 +
                      (C65524 * C47810 + C65523 * C47710 +
                       (C55527 * C65157 + C141216 * C65158) * C47811 +
                       (C55527 * C65267 + C141216 * C65509) * C141358) *
                          C14037) *
                         C141487 -
                     ((C65522 + C65521 + C65520 + C65519) * C14037 +
                      (C65518 + C65517 + C65516 + C65515) * C14036 +
                      (C56302 * C141358 + C56301 * C47811 + C56300 * C47710 +
                       C56299 * C47810) *
                          C14035) *
                         C1596) *
                        C141485) *
                   C141243) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[68] += (-std::pow(Pi, 2.5) *
                   (((C55744 * C108 + C55749 + C55749 + C55522 * C419 +
                      C55745 * C823 + C55750 + C55750 + C55523 * C1171 +
                      C55746 * C2960 + C55751 + C55751 + C55524 * C3196 +
                      C55747 * C6729 + C55752 + C55752 + C55525 * C7289) *
                         C141216 * C141320 * C1596 -
                     (C55747 * C10551 + C57017 + C57017 + C55525 * C11025 +
                      C55746 * C7887 + C57018 + C57018 + C55524 * C8345 +
                      C55745 * C3490 + C57019 + C57019 + C55523 * C3790 +
                      C55744 * C1601 + C57020 + C57020 + C55522 * C1949) *
                         C141216 * C141320 * C141487) *
                        C2374 +
                    ((C55744 * C3490 + C58777 + C58777 + C55522 * C3790 +
                      C55745 * C7887 + C58778 + C58778 + C55523 * C8345 +
                      C55746 * C10551 + C58779 + C58779 + C55524 * C11025 +
                      C55747 * C58454 + C58780 + C58780 + C55525 * C58775) *
                         C141216 * C141320 * C141487 -
                     (C55747 * C9768 + C56377 + C56377 + C55525 * C10121 +
                      C55746 * C6729 + C56378 + C56378 + C55524 * C7289 +
                      C55745 * C2960 + C56379 + C56379 + C55523 * C3196 +
                      C55744 * C823 + C56380 + C56380 + C55522 * C1171) *
                         C141216 * C141320 * C1596) *
                        C141485) *
                   C141243) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   ((((C48072 * C108 + C48075 + C48075 + C47710 * C419 +
                       C48073 * C823 + C48076 + C48076 + C141358 * C1171) *
                          C47707 +
                      (C48109 + C48110) * C47708 + C48115 * C47709) *
                         C141320 * C1596 -
                     ((C50066 + C50067) * C47709 + (C50068 + C50069) * C47708 +
                      (C48073 * C3490 + C50054 + C50054 + C141358 * C3790 +
                       C48072 * C1601 + C50055 + C50055 + C47710 * C1949) *
                          C47707) *
                         C141320 * C141487) *
                        C2374 +
                    (((C48072 * C3490 + C52623 + C52623 + C47710 * C3790 +
                       C48073 * C7887 + C52624 + C52624 + C141358 * C8345) *
                          C47707 +
                      (C48072 * C3491 + C52625 + C52625 + C47710 * C3791 +
                       C48073 * C7886 + C52626 + C52626 + C141358 * C8344) *
                          C47708 +
                      (C48072 * C3492 + C52627 + C52627 + C47710 * C3792 +
                       C48073 * C7888 + C52628 + C52628 + C141358 * C8346) *
                          C47709) *
                         C141320 * C141487 -
                     ((C49078 + C49079) * C47709 + (C49080 + C49081) * C47708 +
                      (C48073 * C2960 + C49066 + C49066 + C141358 * C3196 +
                       C48072 * C823 + C49067 + C49067 + C47710 * C1171) *
                          C47707) *
                         C141320 * C1596) *
                        C141485) *
                   C141243) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   ((((C48072 * C108 + C48075 + C48075 + C47710 * C419 +
                       C48073 * C823 + C48076 + C48076 + C141358 * C1171) *
                          C141216 * C14035 +
                      (C63012 + C63013) * C141216 * C14036 +
                      (C63014 + C63015) * C141216 * C14037) *
                         C1596 -
                     ((C48073 * C18582 + C62992 + C62992 + C141358 * C19034 +
                       C48072 * C15862 + C62993 + C62993 + C47710 * C16422) *
                          C141216 * C14037 +
                      (C63015 + C63014) * C141216 * C14036 +
                      (C63013 + C63012) * C141216 * C14035) *
                         C141487) *
                        C2374 +
                    (((C65642 + C65643) * C141216 * C14035 +
                      (C65644 + C65645) * C141216 * C14036 +
                      (C48072 * C18582 + C65632 + C65632 + C47710 * C19034 +
                       C48073 * C65157 + C65633 + C65633 + C141358 * C65622) *
                          C141216 * C14037) *
                         C141487 -
                     ((C65645 + C65644) * C141216 * C14037 +
                      (C65643 + C65642) * C141216 * C14036 +
                      (C48073 * C2960 + C49066 + C49066 + C141358 * C3196 +
                       C48072 * C823 + C49067 + C49067 + C47710 * C1171) *
                          C141216 * C14035) *
                         C1596) *
                        C141485) *
                   C141243) /
                      (p * q * std::sqrt(p + q));
    d2eeyz[68] +=
        (-std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141320 * C276) * C55590 +
            (C275 * C189 + C141320 * C501) * C55522 + C7032 * C55591 +
            C7428 * C55523 + C7034 * C55592 + C7429 * C55524 + C9954 * C55593 +
            C10208 * C55525) *
               C141216 * C1596 -
           (C58850 * C55525 + C58622 * C55593 + C11138 * C55524 +
            C10797 * C55592 + C11139 * C55523 + C10799 * C55591 +
            (C275 * C1690 + C141320 * C2040) * C55522 +
            (C275 * C1601 + C141320 * C1784) * C55590) *
               C141216 * C141487) *
              C2374 +
          ((C10799 * C55590 + C11139 * C55522 + C10797 * C55591 +
            C11138 * C55523 + C58622 * C55592 + C58850 * C55524 +
            (C275 * C58454 + C141320 * C58610) * C55593 +
            (C275 * C58542 + C141320 * C58846) * C55525) *
               C141216 * C141487 -
           (C58222 * C55525 + C58054 * C55593 + C10208 * C55524 +
            C9954 * C55592 + C7429 * C55523 + C7034 * C55591 + C7428 * C55522 +
            C7032 * C55590) *
               C141216 * C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141320 * C276) * C47810 +
             (C275 * C189 + C141320 * C501) * C47710 + C7032 * C47811 +
             C7428 * C141358) *
                C47707 +
            (C48190 + C48191 + C48192 + C48193) * C47708 + C48204 * C47709) *
               C1596 -
           ((C50168 + C50169 + C50170 + C50171) * C47709 +
            (C50172 + C50173 + C50174 + C50175) * C47708 +
            (C11139 * C141358 + C10799 * C47811 +
             (C275 * C1690 + C141320 * C2040) * C47710 +
             (C275 * C1601 + C141320 * C1784) * C47810) *
                C47707) *
               C141487) *
              C2374 +
          (((C10799 * C47810 + C11139 * C47710 + C10797 * C47811 +
             C11138 * C141358) *
                C47707 +
            (C8145 * C47810 + C8482 * C47710 + C8143 * C47811 +
             C8481 * C141358) *
                C47708 +
            (C24213 * C47810 + C24545 * C47710 +
             (C275 * C7888 + C141320 * C8129) * C47811 +
             (C275 * C8007 + C141320 * C8471) * C141358) *
                C47709) *
               C141487 -
           ((C49180 + C49181 + C49182 + C49183) * C47709 +
            (C49184 + C49185 + C49186 + C49187) * C47708 +
            (C7429 * C141358 + C7034 * C47811 + C7428 * C47710 +
             C7032 * C47810) *
                C47707) *
               C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C14204 * C108 + C14035 * C276 + C14205 * C1601 + C14036 * C1784 +
             C14206 * C5325 + C14037 * C5449) *
                C47810 +
            (C14204 * C189 + C14035 * C501 + C14205 * C1690 + C14036 * C2040 +
             C14206 * C5391 + C14037 * C5619) *
                C47710 +
            (C61733 + C61734 + C61735) * C47811 +
            (C62061 + C62062 + C62063) * C141358) *
               C141216 * C1596 -
           ((C65751 + C65752 + C65753) * C141358 +
            (C65409 + C65410 + C65411) * C47811 +
            (C14206 * C16013 + C14037 * C16549 + C14205 * C5391 +
             C14036 * C5619 + C14204 * C1690 + C14035 * C2040) *
                C47710 +
            (C14206 * C15862 + C14037 * C16151 + C14205 * C5325 +
             C14036 * C5449 + C14204 * C1601 + C14035 * C1784) *
                C47810) *
               C141216 * C141487) *
              C2374 +
          (((C65411 + C65410 + C65409) * C47810 +
            (C65753 + C65752 + C65751) * C47710 +
            (C14204 * C7887 + C14035 * C8128 + C14205 * C13303 +
             C14036 * C13477 + C14206 * C65157 + C14037 * C65391) *
                C47811 +
            (C14204 * C8006 + C14035 * C8470 + C14205 * C13394 +
             C14036 * C13720 + C14206 * C65267 + C14037 * C65743) *
                C141358) *
               C141216 * C141487 -
           ((C64808 + C64809 + C64810) * C141358 +
            (C64567 + C64568 + C64569) * C47811 +
            (C62063 + C62062 + C62061) * C47710 +
            (C61735 + C61734 + C61733) * C47810) *
               C141216 * C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eezx[68] +=
        (-std::pow(Pi, 2.5) *
         (((((C55527 * C108 + C141216 * C114) * C275 +
             (C55527 * C276 + C141216 * C579) * C141320) *
                C55522 +
            (C56517 + C56541) * C55523 + C58274 * C55524 + C58275 * C55525) *
               C1596 -
           ((C58930 + C58920) * C55525 + (C58931 + C58923) * C55524 +
            (C58932 + C58926) * C55523 +
            ((C55527 * C1784 + C141216 * C2126) * C141320 +
             (C55527 * C1601 + C141216 * C1606) * C275) *
                C55522) *
               C141487) *
              C2374 +
          (((C58926 + C58932) * C55522 + (C58923 + C58931) * C55523 +
            (C58920 + C58930) * C55524 +
            ((C55527 * C58454 + C141216 * C58455) * C275 +
             (C55527 * C58610 + C141216 * C58916) * C141320) *
                C55525) *
               C141487 -
           ((C58280 + C58278) * C55525 + (C56543 + C56523) * C55524 +
            (C56542 + C56520) * C55523 + (C56541 + C56517) * C55522) *
               C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47713 * C108 + C47707 * C114 + C47715 * C109 + C47708 * C115 +
              C47717 * C110 + C47709 * C116) *
                 C275 +
             (C47713 * C276 + C47707 * C579 + C47715 * C277 + C47708 * C580 +
              C47717 * C278 + C47709 * C581) *
                 C141320) *
                C47710 +
            ((C48944 + C48945 + C48946) * C275 +
             (C49298 + C49299 + C49300) * C141320) *
                C141358) *
               C1596 -
           (((C52831 + C52832 + C52833) * C141320 +
             (C52522 + C52523 + C52524) * C275) *
                C141358 +
            ((C47717 * C1782 + C47709 * C2124 + C47715 * C1783 +
              C47708 * C2125 + C47713 * C1784 + C47707 * C2126) *
                 C141320 +
             (C47717 * C1599 + C47709 * C1604 + C47715 * C1600 +
              C47708 * C1605 + C47713 * C1601 + C47707 * C1606) *
                 C275) *
                C47710) *
               C141487) *
              C2374 +
          ((((C52524 + C52523 + C52522) * C275 +
             (C52833 + C52832 + C52831) * C141320) *
                C47710 +
            ((C47713 * C7887 + C47707 * C7890 + C47715 * C7886 +
              C47708 * C7889 + C47717 * C7888 + C47709 * C7891) *
                 C275 +
             (C47713 * C8128 + C47707 * C8583 + C47715 * C8127 +
              C47708 * C8582 + C47717 * C8129 + C47709 * C8584) *
                 C141320) *
                C141358) *
               C141487 -
           (((C51940 + C51941 + C51942) * C141320 +
             (C51703 + C51704 + C51705) * C275) *
                C141358 +
            ((C49300 + C49299 + C49298) * C141320 +
             (C48946 + C48945 + C48944) * C275) *
                C47710) *
               C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C55527 * C108 + C141216 * C114) * C14204 +
             (C55527 * C276 + C141216 * C579) * C14035 + C62870 * C14205 +
             C63222 * C14036 + C62872 * C14206 + C63223 * C14037) *
                C47710 +
            (C62162 + C62163 + C62164 + C62165 + C62166 + C62180) * C141358) *
               C1596 -
           ((C65861 + C65855 + C65856 + C65857 + C65858 + C65859) * C141358 +
            ((C55527 * C16151 + C141216 * C16659) * C14037 +
             (C55527 * C15862 + C141216 * C15865) * C14206 + C63223 * C14036 +
             C62872 * C14205 + C63222 * C14035 + C62870 * C14204) *
                C47710) *
               C141487) *
              C2374 +
          (((C65859 + C65858 + C65857 + C65856 + C65855 + C65861) * C47710 +
            (C58707 * C14204 + C58928 * C14035 + C64649 * C14205 +
             C64892 * C14036 + (C55527 * C65157 + C141216 * C65158) * C14206 +
             (C55527 * C65391 + C141216 * C65851) * C14037) *
                C141358) *
               C141487 -
           ((C64893 + C64887 + C64888 + C64889 + C64890 + C64891) * C141358 +
            (C62180 + C62166 + C62165 + C62164 + C62163 + C62162) * C47710) *
               C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eezy[68] +=
        (-std::pow(Pi, 2.5) *
         ((((C55590 * C108 + C55522 * C189 + C55591 * C823 + C55523 * C912 +
             C55592 * C2960 + C55524 * C3026 + C55593 * C6729 +
             C55525 * C6880) *
                C275 +
            (C55590 * C276 + C55522 * C635 + C55591 * C1006 + C55523 * C1419 +
             C55592 * C3084 + C55524 * C3362 + C55593 * C7002 +
             C55525 * C7655) *
                C141320) *
               C141216 * C1596 -
           ((C55593 * C10779 + C55525 * C11349 + C55592 * C8128 +
             C55524 * C8684 + C55591 * C3646 + C55523 * C4004 + C55590 * C1784 +
             C55522 * C2197) *
                C141320 +
            (C55593 * C10551 + C55525 * C10677 + C55592 * C7887 +
             C55524 * C8006 + C55591 * C3490 + C55523 * C3572 + C55590 * C1601 +
             C55522 * C1690) *
                C275) *
               C141216 * C141487) *
              C2374 +
          (((C55590 * C3490 + C55522 * C3572 + C55591 * C7887 + C55523 * C8006 +
             C55592 * C10551 + C55524 * C10677 + C55593 * C58454 +
             C55525 * C58542) *
                C275 +
            (C55590 * C3646 + C55522 * C4004 + C55591 * C8128 + C55523 * C8684 +
             C55592 * C10779 + C55524 * C11349 + C55593 * C58610 +
             C55525 * C58998) *
                C141320) *
               C141216 * C141487 -
           ((C55593 * C9940 + C55525 * C10368 + C55592 * C7002 +
             C55524 * C7655 + C55591 * C3084 + C55523 * C3362 + C55590 * C1006 +
             C55522 * C1419) *
                C141320 +
            (C55593 * C9768 + C55525 * C9862 + C55592 * C6729 + C55524 * C6880 +
             C55591 * C2960 + C55523 * C3026 + C55590 * C823 + C55522 * C912) *
                C275) *
               C141216 * C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47810 * C108 + C47710 * C189 + C47811 * C823 + C141358 * C912) *
                 C275 +
             (C47810 * C276 + C47710 * C635 + C47811 * C1006 +
              C141358 * C1419) *
                 C141320) *
                C47707 +
            ((C47837 + C47838) * C275 + (C48366 + C48367) * C141320) * C47708 +
            C48374 * C47709) *
               C1596 -
           (((C50380 + C50381) * C141320 + (C49742 + C49743) * C275) * C47709 +
            ((C50382 + C50383) * C141320 + (C49746 + C49747) * C275) * C47708 +
            ((C47811 * C3646 + C141358 * C4004 + C47810 * C1784 +
              C47710 * C2197) *
                 C141320 +
             (C47811 * C3490 + C141358 * C3572 + C47810 * C1601 +
              C47710 * C1690) *
                 C275) *
                C47707) *
               C141487) *
              C2374 +
          ((((C47810 * C3490 + C47710 * C3572 + C47811 * C7887 +
              C141358 * C8006) *
                 C275 +
             (C47810 * C3646 + C47710 * C4004 + C47811 * C8128 +
              C141358 * C8684) *
                 C141320) *
                C47707 +
            ((C47810 * C3491 + C47710 * C3573 + C47811 * C7886 +
              C141358 * C8005) *
                 C275 +
             (C47810 * C3647 + C47710 * C4005 + C47811 * C8127 +
              C141358 * C8683) *
                 C141320) *
                C47708 +
            ((C47810 * C3492 + C47710 * C3574 + C47811 * C7888 +
              C141358 * C8007) *
                 C275 +
             (C47810 * C3648 + C47710 * C4006 + C47811 * C8129 +
              C141358 * C8685) *
                 C141320) *
                C47709) *
               C141487 -
           (((C49410 + C49411) * C141320 + (C48706 + C48707) * C275) * C47709 +
            ((C49412 + C49413) * C141320 + (C48710 + C48711) * C275) * C47708 +
            ((C47811 * C3084 + C141358 * C3362 + C47810 * C1006 +
              C47710 * C1419) *
                 C141320 +
             (C47811 * C2960 + C141358 * C3026 + C47810 * C823 +
              C47710 * C912) *
                 C275) *
                C47707) *
               C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47810 * C108 + C47710 * C189 + C47811 * C823 + C141358 * C912) *
                C14204 +
            (C47810 * C276 + C47710 * C635 + C47811 * C1006 + C141358 * C1419) *
                C14035 +
            (C62638 + C62639) * C14205 + (C63336 + C63337) * C14036 +
            (C62642 + C62643) * C14206 + (C63338 + C63339) * C14037) *
               C141216 * C1596 -
           ((C47811 * C18820 + C141358 * C19356 + C47810 * C16151 +
             C47710 * C16784) *
                C14037 +
            (C47811 * C18582 + C141358 * C18698 + C47810 * C15862 +
             C47710 * C16013) *
                C14206 +
            (C63339 + C63338) * C14036 + (C62643 + C62642) * C14205 +
            (C63337 + C63336) * C14035 + (C62639 + C62638) * C14204) *
               C141216 * C141487) *
              C2374 +
          (((C65286 + C65287) * C14204 + (C65969 + C65970) * C14035 +
            (C65290 + C65291) * C14205 + (C65971 + C65972) * C14036 +
            (C47810 * C18582 + C47710 * C18698 + C47811 * C65157 +
             C141358 * C65267) *
                C14206 +
            (C47810 * C18820 + C47710 * C19356 + C47811 * C65391 +
             C141358 * C65959) *
                C14037) *
               C141216 * C141487 -
           ((C65972 + C65971) * C14037 + (C65291 + C65290) * C14206 +
            (C65970 + C65969) * C14036 + (C65287 + C65286) * C14205 +
            (C47811 * C3084 + C141358 * C3362 + C47810 * C1006 +
             C47710 * C1419) *
                C14035 +
            (C47811 * C2960 + C141358 * C3026 + C47810 * C823 + C47710 * C912) *
                C14204) *
               C141216 * C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eezz[68] +=
        (-std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C141320 * C714) * C55522 +
            C7785 * C55523 + C7786 * C55524 + C10453 * C55525) *
               C141216 * C1596 -
           (C59072 * C55525 + C11462 * C55524 + C11463 * C55523 +
            (C713 * C1601 + C2295 + C2295 + C141320 * C2283) * C55522) *
               C141216 * C141487) *
              C2374 +
          ((C11463 * C55522 + C11462 * C55523 + C59072 * C55524 +
            (C713 * C58454 + C59069 + C59069 + C141320 * C59065) * C55525) *
               C141216 * C141487 -
           (C58388 * C55525 + C10453 * C55524 + C7786 * C55523 +
            C7785 * C55522) *
               C141216 * C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C713 * C108 + C721 + C721 + C141320 * C714) * C47710 +
             C7785 * C141358) *
                C47707 +
            (C48449 + C48450) * C47708 + C48455 * C47709) *
               C1596 -
           ((C50482 + C50483) * C47709 + (C50484 + C50485) * C47708 +
            (C11463 * C141358 +
             (C713 * C1601 + C2295 + C2295 + C141320 * C2283) * C47710) *
                C47707) *
               C141487) *
              C2374 +
          (((C11463 * C47710 + C11462 * C141358) * C47707 +
            (C8810 * C47710 + C8809 * C141358) * C47708 +
            (C24860 * C47710 +
             (C713 * C7888 + C8804 + C8804 + C141320 * C8795) * C141358) *
                C47709) *
               C141487 -
           ((C49512 + C49513) * C47709 + (C49514 + C49515) * C47708 +
            (C7786 * C141358 + C7785 * C47710) * C47707) *
               C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C14733 * C108 + C14737 + C14737 + C14035 * C714 + C14734 * C1601 +
             C14738 + C14738 + C14036 * C2283 + C14735 * C5325 + C14739 +
             C14739 + C14037 * C5781) *
                C47710 +
            (C62391 + C62392 + C62393) * C141358) *
               C141216 * C1596 -
           ((C66087 + C66088 + C66089) * C141358 +
            (C14735 * C15862 + C16912 + C16912 + C14037 * C16900 +
             C14734 * C5325 + C16913 + C16913 + C14036 * C5781 +
             C14733 * C1601 + C16914 + C16914 + C14035 * C2283) *
                C47710) *
               C141216 * C141487) *
              C2374 +
          (((C66089 + C66088 + C66087) * C47710 +
            (C14733 * C7887 + C66078 + C66078 + C14035 * C8794 +
             C14734 * C13303 + C66079 + C66079 + C14036 * C13954 +
             C14735 * C65157 + C66080 + C66080 + C14037 * C66070) *
                C141358) *
               C141216 * C141487 -
           ((C65057 + C65058 + C65059) * C141358 +
            (C62393 + C62392 + C62391) * C47710) *
               C141216 * C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eexx[69] +=
        (-std::pow(Pi, 2.5) *
         ((((C55526 * C108 + C55529 + C55529 + C141216 * C120) * C141320 *
                C55522 +
            C56059 * C55523 + C56060 * C55524 + C56061 * C55525) *
               C4148 -
           (C58474 * C55525 + C58475 * C55524 + C58476 * C55523 +
            (C55526 * C1601 + C56748 + C56748 + C141216 * C1611) * C141320 *
                C55522) *
               C141487) *
              C141277 * C2376 +
          (((C55526 * C1600 + C56749 + C56749 + C141216 * C1610) * C141320 *
                C55522 +
            (C55526 * C3491 + C56750 + C56750 + C141216 * C3499) * C141320 *
                C55523 +
            (C55526 * C7886 + C56751 + C56751 + C141216 * C7892) * C141320 *
                C55524 +
            (C55526 * C10552 + C56752 + C56752 + C141216 * C10556) * C141320 *
                C55525) *
               C141487 -
           (C56064 * C55525 + C56063 * C55524 + C56062 * C55523 +
            (C55526 * C109 + C55536 + C55536 + C141216 * C121) * C141320 *
                C55522) *
               C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47712 * C108 + C47719 + C47719 + C47707 * C120 + C47714 * C109 +
             C47720 + C47720 + C47708 * C121 + C47716 * C110 + C47721 + C47721 +
             C47709 * C122) *
                C141320 * C47710 +
            (C48584 + C48585 + C48586) * C141320 * C141358) *
               C4148 -
           ((C52204 + C52205 + C52206) * C141320 * C141358 +
            (C47716 * C1599 + C49617 + C49617 + C47709 * C1609 +
             C47714 * C1600 + C49618 + C49618 + C47708 * C1610 +
             C47712 * C1601 + C49619 + C49619 + C47707 * C1611) *
                C141320 * C47710) *
               C141487) *
              C141277 * C2376 +
          (((C47712 * C1600 + C49620 + C49620 + C47707 * C1610 +
             C47714 * C1599 + C49621 + C49621 + C47708 * C1609 +
             C47716 * C1598 + C49622 + C49622 + C47709 * C1608) *
                C141320 * C47710 +
            (C47712 * C3491 + C49623 + C49623 + C47707 * C3499 +
             C47714 * C3492 + C49624 + C49624 + C47708 * C3500 +
             C47716 * C3493 + C49625 + C49625 + C47709 * C3501) *
                C141320 * C141358) *
               C141487 -
           ((C48589 + C48588 + C48587) * C141320 * C141358 +
            (C47716 * C111 + C47728 + C47728 + C47709 * C123 + C47714 * C110 +
             C47729 + C47729 + C47708 * C122 + C47712 * C109 + C47730 + C47730 +
             C47707 * C121) *
                C141320 * C47710) *
               C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C55526 * C108 + C55529 + C55529 + C141216 * C120) * C14035 +
             C62512 * C14036 + C62513 * C14037) *
                C47710 +
            (C61503 + C61504 + C61522) * C141358) *
               C4148 -
           ((C65169 + C65163 + C65164) * C141358 +
            ((C55526 * C15862 + C62497 + C62497 + C141216 * C15868) * C14037 +
             C62513 * C14036 + C62512 * C14035) *
                C47710) *
               C141487) *
              C141277 * C2376 +
          (((C62514 * C14035 + C62515 * C14036 +
             (C55526 * C15861 + C62502 + C62502 + C141216 * C15867) * C14037) *
                C47710 +
            (C61520 * C14035 + C61521 * C14036 +
             (C55526 * C18583 + C62503 + C62503 + C141216 * C18587) * C14037) *
                C141358) *
               C141487 -
           ((C61524 + C61523 + C61507) * C141358 +
            (C62515 * C14037 + C62514 * C14036 +
             (C55526 * C109 + C55536 + C55536 + C141216 * C121) * C14035) *
                C47710) *
               C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eexy[69] +=
        (-std::pow(Pi, 2.5) *
         ((((C55590 * C108 + C55522 * C189 + C55591 * C823 + C55523 * C912 +
             C55592 * C2960 + C55524 * C3026 + C55593 * C6729 +
             C55525 * C6880) *
                C55527 +
            (C55590 * C114 + C55522 * C195 + C55591 * C828 + C55523 * C917 +
             C55592 * C2964 + C55524 * C3030 + C55593 * C6732 +
             C55525 * C6883) *
                C141216) *
               C141320 * C4148 -
           ((C55593 * C10553 + C55525 * C10679 + C55592 * C7890 +
             C55524 * C8009 + C55591 * C3494 + C55523 * C3576 + C55590 * C1606 +
             C55522 * C1695) *
                C141216 +
            (C55593 * C10551 + C55525 * C10677 + C55592 * C7887 +
             C55524 * C8006 + C55591 * C3490 + C55523 * C3572 + C55590 * C1601 +
             C55522 * C1690) *
                C55527) *
               C141320 * C141487) *
              C141277 * C2376 +
          (((C55590 * C1600 + C55522 * C1689 + C55591 * C3491 + C55523 * C3573 +
             C55592 * C7886 + C55524 * C8005 + C55593 * C10552 +
             C55525 * C10678) *
                C55527 +
            (C55590 * C1605 + C55522 * C1694 + C55591 * C3495 + C55523 * C3577 +
             C55592 * C7889 + C55524 * C8008 + C55593 * C10554 +
             C55525 * C10680) *
                C141216) *
               C141320 * C141487 -
           ((C55593 * C6731 + C55525 * C6882 + C55592 * C2965 + C55524 * C3031 +
             C55591 * C827 + C55523 * C916 + C55590 * C115 + C55522 * C196) *
                C141216 +
            (C55593 * C6728 + C55525 * C6879 + C55592 * C2961 + C55524 * C3027 +
             C55591 * C822 + C55523 * C911 + C55590 * C109 + C55522 * C190) *
                C55527) *
               C141320 * C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47810 * C108 + C47710 * C189 + C47811 * C823 + C141358 * C912) *
                C47713 +
            (C47810 * C114 + C47710 * C195 + C47811 * C828 + C141358 * C917) *
                C47707 +
            (C47837 + C47838) * C47715 + (C47839 + C47840) * C47708 +
            C47849 * C47717 + C47850 * C47709) *
               C141320 * C4148 -
           ((C49740 + C49741) * C47709 + (C49742 + C49743) * C47717 +
            (C49744 + C49745) * C47708 + (C49746 + C49747) * C47715 +
            (C47811 * C3494 + C141358 * C3576 + C47810 * C1606 +
             C47710 * C1695) *
                C47707 +
            (C47811 * C3490 + C141358 * C3572 + C47810 * C1601 +
             C47710 * C1690) *
                C47713) *
               C141320 * C141487) *
              C141277 * C2376 +
          (((C49747 + C49746) * C47713 + (C49745 + C49744) * C47707 +
            (C49743 + C49742) * C47715 + (C49741 + C49740) * C47708 +
            (C47810 * C1598 + C47710 * C1687 + C47811 * C3493 +
             C141358 * C3575) *
                C47717 +
            (C47810 * C1603 + C47710 * C1692 + C47811 * C3497 +
             C141358 * C3579) *
                C47709) *
               C141320 * C141487 -
           ((C47845 + C47846) * C47709 + (C47847 + C47848) * C47717 +
            (C47844 + C47843) * C47708 + (C47842 + C47841) * C47715 +
            (C47840 + C47839) * C47707 + (C47838 + C47837) * C47713) *
               C141320 * C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C47810 * C108 + C47710 * C189 + C47811 * C823 + C141358 * C912) *
                 C55527 +
             (C47810 * C114 + C47710 * C195 + C47811 * C828 + C141358 * C917) *
                 C141216) *
                C14035 +
            ((C62638 + C62639) * C55527 + (C62640 + C62641) * C141216) *
                C14036 +
            ((C62642 + C62643) * C55527 + (C62644 + C62645) * C141216) *
                C14037) *
               C4148 -
           (((C47811 * C18584 + C141358 * C18700 + C47810 * C15865 +
              C47710 * C16016) *
                 C141216 +
             (C47811 * C18582 + C141358 * C18698 + C47810 * C15862 +
              C47710 * C16013) *
                 C55527) *
                C14037 +
            ((C62645 + C62644) * C141216 + (C62643 + C62642) * C55527) *
                C14036 +
            ((C62641 + C62640) * C141216 + (C62639 + C62638) * C55527) *
                C14035) *
               C141487) *
              C141277 * C2376 +
          ((((C49747 + C49746) * C55527 + (C49745 + C49744) * C141216) *
                C14035 +
            ((C62646 + C62647) * C55527 + (C62648 + C62649) * C141216) *
                C14036 +
            ((C47810 * C15861 + C47710 * C16012 + C47811 * C18583 +
              C141358 * C18699) *
                 C55527 +
             (C47810 * C15864 + C47710 * C16015 + C47811 * C18585 +
              C141358 * C18701) *
                 C141216) *
                C14037) *
               C141487 -
           (((C62649 + C62648) * C141216 + (C62647 + C62646) * C55527) *
                C14037 +
            ((C49744 + C49745) * C141216 + (C49746 + C49747) * C55527) *
                C14036 +
            ((C47840 + C47839) * C141216 + (C47838 + C47837) * C55527) *
                C14035) *
               C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eexz[69] +=
        (-std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141320 * C276) * C55527 +
             (C275 * C114 + C141320 * C282) * C141216) *
                C55522 +
            (C56197 + C56198) * C55523 + C58047 * C55524 + C58048 * C55525) *
               C4148 -
           ((C58623 + C58624) * C55525 + (C58617 + C58618) * C55524 +
            (C58619 + C58620) * C55523 +
            ((C275 * C1606 + C141320 * C1789) * C141216 +
             (C275 * C1601 + C141320 * C1784) * C55527) *
                C55522) *
               C141487) *
              C141277 * C2376 +
          (((C1809 * C55527 + C1808 * C141216) * C55522 +
            (C8145 * C55527 + C8144 * C141216) * C55523 +
            (C8143 * C55527 + C8142 * C141216) * C55524 +
            ((C275 * C10552 + C141320 * C10780) * C55527 +
             (C275 * C10554 + C141320 * C10782) * C141216) *
                C55525) *
               C141487 -
           ((C56208 + C56207) * C55525 + (C56206 + C56205) * C55524 +
            (C56204 + C56203) * C55523 +
            (C306 * C141216 + C305 * C55527) * C55522) *
               C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141320 * C276) * C47713 +
             (C275 * C114 + C141320 * C282) * C47707 + C305 * C47715 +
             C306 * C47708 + C307 * C47717 + C308 * C47709) *
                C47710 +
            (C48810 + C48811 + C48812 + C48813 + C48814 + C48815) * C141358) *
               C4148 -
           ((C52403 + C52404 + C52405 + C52406 + C52407 + C52408) * C141358 +
            (C1806 * C47709 + C1807 * C47717 + C1808 * C47708 + C1809 * C47715 +
             (C275 * C1606 + C141320 * C1789) * C47707 +
             (C275 * C1601 + C141320 * C1784) * C47713) *
                C47710) *
               C141487) *
              C141277 * C2376 +
          (((C1809 * C47713 + C1808 * C47707 + C1807 * C47715 + C1806 * C47708 +
             C1805 * C47717 + C1804 * C47709) *
                C47710 +
            (C8145 * C47713 + C8144 * C47707 + C24213 * C47715 +
             C24212 * C47708 + (C275 * C3493 + C141320 * C3649) * C47717 +
             (C275 * C3497 + C141320 * C3653) * C47709) *
                C141358) *
               C141487 -
           ((C48821 + C48820 + C48819 + C48818 + C48817 + C48816) * C141358 +
            (C310 * C47709 + C309 * C47717 + C308 * C47708 + C307 * C47715 +
             C306 * C47707 + C305 * C47713) *
                C47710) *
               C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C14204 * C108 + C14035 * C276 + C14205 * C1601 + C14036 * C1784 +
              C14206 * C5325 + C14037 * C5449) *
                 C55527 +
             (C14204 * C114 + C14035 * C282 + C14205 * C1606 + C14036 * C1789 +
              C14206 * C5329 + C14037 * C5453) *
                 C141216) *
                C47710 +
            ((C61733 + C61734 + C61735) * C55527 +
             (C61736 + C61737 + C61738) * C141216) *
                C141358) *
               C4148 -
           (((C65406 + C65407 + C65408) * C141216 +
             (C65409 + C65410 + C65411) * C55527) *
                C141358 +
            ((C14206 * C15865 + C14037 * C16154 + C14205 * C5329 +
              C14036 * C5453 + C14204 * C1606 + C14035 * C1789) *
                 C141216 +
             (C14206 * C15862 + C14037 * C16151 + C14205 * C5325 +
              C14036 * C5449 + C14204 * C1601 + C14035 * C1784) *
                 C55527) *
                C47710) *
               C141487) *
              C141277 * C2376 +
          ((((C16174 + C16173 + C16172) * C55527 +
             (C16171 + C16170 + C16169) * C141216) *
                C47710 +
            ((C14204 * C3491 + C14035 * C3647 + C14205 * C13302 +
              C14036 * C13476 + C14206 * C18583 + C14037 * C18821) *
                 C55527 +
             (C14204 * C3495 + C14035 * C3651 + C14205 * C13306 +
              C14036 * C13480 + C14206 * C18585 + C14037 * C18823) *
                 C141216) *
                C141358) *
               C141487 -
           (((C15106 + C15107 + C15108) * C141216 +
             (C15109 + C15110 + C15111) * C55527) *
                C141358 +
            ((C14237 + C14236 + C14235) * C141216 +
             (C14234 + C14233 + C14232) * C55527) *
                C47710) *
               C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[69] += (-std::pow(Pi, 2.5) *
                   ((((C55527 * C108 + C141216 * C114) * C55590 +
                      (C55527 * C189 + C141216 * C362) * C55522 +
                      C56299 * C55591 + C56300 * C55523 + C56301 * C55592 +
                      C56302 * C55524 + C56303 * C55593 + C56304 * C55525) *
                         C141320 * C4148 -
                     (C58704 * C55525 + C58705 * C55593 + C58706 * C55524 +
                      C58707 * C55592 + C58708 * C55523 + C58709 * C55591 +
                      (C55527 * C1690 + C141216 * C1878) * C55522 +
                      (C55527 * C1601 + C141216 * C1606) * C55590) *
                         C141320 * C141487) *
                        C141277 * C2376 +
                    (((C55527 * C1600 + C141216 * C1605) * C55590 +
                      (C55527 * C1689 + C141216 * C1877) * C55522 +
                      (C55527 * C3491 + C141216 * C3495) * C55591 +
                      (C55527 * C3573 + C141216 * C3721) * C55523 +
                      (C55527 * C7886 + C141216 * C7889) * C55592 +
                      (C55527 * C8005 + C141216 * C8243) * C55524 +
                      (C55527 * C10552 + C141216 * C10554) * C55593 +
                      (C55527 * C10678 + C141216 * C10902) * C55525) *
                         C141320 * C141487 -
                     (C56310 * C55525 + C56309 * C55593 + C56308 * C55524 +
                      C56307 * C55592 + C56306 * C55523 + C56305 * C55591 +
                      (C55527 * C190 + C141216 * C363) * C55522 +
                      (C55527 * C109 + C141216 * C115) * C55590) *
                         C141320 * C4148) *
                        C141277 * C141483)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   ((((C47713 * C108 + C47707 * C114 + C47715 * C109 +
                       C47708 * C115 + C47717 * C110 + C47709 * C116) *
                          C47810 +
                      (C47713 * C189 + C47707 * C362 + C47715 * C190 +
                       C47708 * C363 + C47717 * C191 + C47709 * C364) *
                          C47710 +
                      (C48944 + C48945 + C48946) * C47811 +
                      (C48947 + C48948 + C48949) * C141358) *
                         C141320 * C4148 -
                     ((C52519 + C52520 + C52521) * C141358 +
                      (C52522 + C52523 + C52524) * C47811 +
                      (C47717 * C1688 + C47709 * C1876 + C47715 * C1689 +
                       C47708 * C1877 + C47713 * C1690 + C47707 * C1878) *
                          C47710 +
                      (C47717 * C1599 + C47709 * C1604 + C47715 * C1600 +
                       C47708 * C1605 + C47713 * C1601 + C47707 * C1606) *
                          C47810) *
                         C141320 * C141487) *
                        C141277 * C2376 +
                    (((C47713 * C1600 + C47707 * C1605 + C47715 * C1599 +
                       C47708 * C1604 + C47717 * C1598 + C47709 * C1603) *
                          C47810 +
                      (C47713 * C1689 + C47707 * C1877 + C47715 * C1688 +
                       C47708 * C1876 + C47717 * C1687 + C47709 * C1875) *
                          C47710 +
                      (C47713 * C3491 + C47707 * C3495 + C47715 * C3492 +
                       C47708 * C3496 + C47717 * C3493 + C47709 * C3497) *
                          C47811 +
                      (C47713 * C3573 + C47707 * C3721 + C47715 * C3574 +
                       C47708 * C3722 + C47717 * C3575 + C47709 * C3723) *
                          C141358) *
                         C141320 * C141487 -
                     ((C48955 + C48954 + C48953) * C141358 +
                      (C48952 + C48951 + C48950) * C47811 +
                      (C47717 * C192 + C47709 * C365 + C47715 * C191 +
                       C47708 * C364 + C47713 * C190 + C47707 * C363) *
                          C47710 +
                      (C47717 * C111 + C47709 * C117 + C47715 * C110 +
                       C47708 * C116 + C47713 * C109 + C47707 * C115) *
                          C47810) *
                         C141320 * C4148) *
                        C141277 * C141483)) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   (((((C55527 * C108 + C141216 * C114) * C47810 +
                       (C55527 * C189 + C141216 * C362) * C47710 +
                       C56299 * C47811 + C56300 * C141358) *
                          C14035 +
                      (C62878 + C62879 + C62850 + C62851) * C14036 +
                      (C62880 + C62881 + C62856 + C62857) * C14037) *
                         C4148 -
                     ((C65523 * C141358 + C65524 * C47811 +
                       (C55527 * C16013 + C141216 * C16273) * C47710 +
                       (C55527 * C15862 + C141216 * C15865) * C47810) *
                          C14037 +
                      (C62857 + C62856 + C62881 + C62880) * C14036 +
                      (C62851 + C62850 + C62879 + C62878) * C14035) *
                         C141487) *
                        C141277 * C2376 +
                    (((C62882 + C62883 + C62862 + C62863) * C14035 +
                      (C62884 + C62885 + C62868 + C62869) * C14036 +
                      ((C55527 * C15861 + C141216 * C15864) * C47810 +
                       (C55527 * C16012 + C141216 * C16272) * C47710 +
                       (C55527 * C18583 + C141216 * C18585) * C47811 +
                       (C55527 * C18699 + C141216 * C18923) * C141358) *
                          C14037) *
                         C141487 -
                     ((C62869 + C62868 + C62885 + C62884) * C14037 +
                      (C62863 + C62862 + C62883 + C62882) * C14036 +
                      (C56306 * C141358 + C56305 * C47811 +
                       (C55527 * C190 + C141216 * C363) * C47710 +
                       (C55527 * C109 + C141216 * C115) * C47810) *
                          C14035) *
                         C4148) *
                        C141277 * C141483)) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[69] +=
        (-std::pow(Pi, 2.5) *
         (((C55744 * C108 + C55749 + C55749 + C55522 * C419 + C55745 * C823 +
            C55750 + C55750 + C55523 * C1171 + C55746 * C2960 + C55751 +
            C55751 + C55524 * C3196 + C55747 * C6729 + C55752 + C55752 +
            C55525 * C7289) *
               C141216 * C141320 * C4148 -
           (C55747 * C10551 + C57017 + C57017 + C55525 * C11025 +
            C55746 * C7887 + C57018 + C57018 + C55524 * C8345 + C55745 * C3490 +
            C57019 + C57019 + C55523 * C3790 + C55744 * C1601 + C57020 +
            C57020 + C55522 * C1949) *
               C141216 * C141320 * C141487) *
              C141277 * C2376 +
          ((C55744 * C1600 + C57021 + C57021 + C55522 * C1948 + C55745 * C3491 +
            C57022 + C57022 + C55523 * C3791 + C55746 * C7886 + C57023 +
            C57023 + C55524 * C8344 + C55747 * C10552 + C57024 + C57024 +
            C55525 * C11026) *
               C141216 * C141320 * C141487 -
           (C55747 * C6728 + C55753 + C55753 + C55525 * C7288 + C55746 * C2961 +
            C55754 + C55754 + C55524 * C3197 + C55745 * C822 + C55755 + C55755 +
            C55523 * C1170 + C55744 * C109 + C55756 + C55756 + C55522 * C420) *
               C141216 * C141320 * C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C48072 * C108 + C48075 + C48075 + C47710 * C419 + C48073 * C823 +
             C48076 + C48076 + C141358 * C1171) *
                C47707 +
            (C48109 + C48110) * C47708 + C48115 * C47709) *
               C141320 * C4148 -
           ((C50066 + C50067) * C47709 + (C50068 + C50069) * C47708 +
            (C48073 * C3490 + C50054 + C50054 + C141358 * C3790 +
             C48072 * C1601 + C50055 + C50055 + C47710 * C1949) *
                C47707) *
               C141320 * C141487) *
              C141277 * C2376 +
          (((C50069 + C50068) * C47707 + (C50067 + C50066) * C47708 +
            (C48072 * C1598 + C50056 + C50056 + C47710 * C1946 +
             C48073 * C3493 + C50057 + C50057 + C141358 * C3793) *
                C47709) *
               C141320 * C141487 -
           ((C48113 + C48114) * C47709 + (C48112 + C48111) * C47708 +
            (C48110 + C48109) * C47707) *
               C141320 * C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C48072 * C108 + C48075 + C48075 + C47710 * C419 + C48073 * C823 +
             C48076 + C48076 + C141358 * C1171) *
                C141216 * C14035 +
            (C63012 + C63013) * C141216 * C14036 +
            (C63014 + C63015) * C141216 * C14037) *
               C4148 -
           ((C48073 * C18582 + C62992 + C62992 + C141358 * C19034 +
             C48072 * C15862 + C62993 + C62993 + C47710 * C16422) *
                C141216 * C14037 +
            (C63015 + C63014) * C141216 * C14036 +
            (C63013 + C63012) * C141216 * C14035) *
               C141487) *
              C141277 * C2376 +
          (((C50069 + C50068) * C141216 * C14035 +
            (C63016 + C63017) * C141216 * C14036 +
            (C48072 * C15861 + C62998 + C62998 + C47710 * C16421 +
             C48073 * C18583 + C62999 + C62999 + C141358 * C19035) *
                C141216 * C14037) *
               C141487 -
           ((C63017 + C63016) * C141216 * C14037 +
            (C50068 + C50069) * C141216 * C14036 +
            (C48110 + C48109) * C141216 * C14035) *
               C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[69] +=
        (-std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141320 * C276) * C55590 +
            (C275 * C189 + C141320 * C501) * C55522 + C7032 * C55591 +
            C7428 * C55523 + C7034 * C55592 + C7429 * C55524 + C9954 * C55593 +
            C10208 * C55525) *
               C141216 * C4148 -
           (C58850 * C55525 + C58622 * C55593 + C11138 * C55524 +
            C10797 * C55592 + C11139 * C55523 + C10799 * C55591 +
            (C275 * C1690 + C141320 * C2040) * C55522 +
            (C275 * C1601 + C141320 * C1784) * C55590) *
               C141216 * C141487) *
              C141277 * C2376 +
          ((C1809 * C55590 + C2054 * C55522 + C8145 * C55591 + C8482 * C55523 +
            C8143 * C55592 + C8481 * C55524 +
            (C275 * C10552 + C141320 * C10780) * C55593 +
            (C275 * C10678 + C141320 * C11132) * C55525) *
               C141216 * C141487 -
           (C7430 * C55525 + C7037 * C55593 + C6371 * C55524 + C6086 * C55592 +
            C1276 * C55523 + C1031 * C55591 + C520 * C55522 + C305 * C55590) *
               C141216 * C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141320 * C276) * C47810 +
             (C275 * C189 + C141320 * C501) * C47710 + C7032 * C47811 +
             C7428 * C141358) *
                C47707 +
            (C48190 + C48191 + C48192 + C48193) * C47708 + C48204 * C47709) *
               C4148 -
           ((C50168 + C50169 + C50170 + C50171) * C47709 +
            (C50172 + C50173 + C50174 + C50175) * C47708 +
            (C11139 * C141358 + C10799 * C47811 +
             (C275 * C1690 + C141320 * C2040) * C47710 +
             (C275 * C1601 + C141320 * C1784) * C47810) *
                C47707) *
               C141487) *
              C141277 * C2376 +
          (((C50175 + C50174 + C50173 + C50172) * C47707 +
            (C50171 + C50170 + C50169 + C50168) * C47708 +
            (C1805 * C47810 + C2052 * C47710 +
             (C275 * C3493 + C141320 * C3649) * C47811 +
             (C275 * C3575 + C141320 * C3867) * C141358) *
                C47709) *
               C141487 -
           ((C48198 + C48199 + C48200 + C48201) * C47709 +
            (C48197 + C48196 + C48195 + C48194) * C47708 +
            (C48193 + C48192 + C48191 + C48190) * C47707) *
               C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C14204 * C108 + C14035 * C276 + C14205 * C1601 + C14036 * C1784 +
             C14206 * C5325 + C14037 * C5449) *
                C47810 +
            (C14204 * C189 + C14035 * C501 + C14205 * C1690 + C14036 * C2040 +
             C14206 * C5391 + C14037 * C5619) *
                C47710 +
            (C61733 + C61734 + C61735) * C47811 +
            (C62061 + C62062 + C62063) * C141358) *
               C141216 * C4148 -
           ((C65751 + C65752 + C65753) * C141358 +
            (C65409 + C65410 + C65411) * C47811 +
            (C14206 * C16013 + C14037 * C16549 + C14205 * C5391 +
             C14036 * C5619 + C14204 * C1690 + C14035 * C2040) *
                C47710 +
            (C14206 * C15862 + C14037 * C16151 + C14205 * C5325 +
             C14036 * C5449 + C14204 * C1601 + C14035 * C1784) *
                C47810) *
               C141216 * C141487) *
              C141277 * C2376 +
          (((C16174 + C16173 + C16172) * C47810 +
            (C16560 + C16559 + C16558) * C47710 +
            (C14204 * C3491 + C14035 * C3647 + C14205 * C13302 +
             C14036 * C13476 + C14206 * C18583 + C14037 * C18821) *
                C47811 +
            (C14204 * C3573 + C14035 * C3865 + C14205 * C13395 +
             C14036 * C13721 + C14206 * C18699 + C14037 * C19151) *
                C141358) *
               C141216 * C141487 -
           ((C15428 + C15429 + C15430) * C141358 +
            (C15109 + C15110 + C15111) * C47811 +
            (C14490 + C14489 + C14488) * C47710 +
            (C14234 + C14233 + C14232) * C47810) *
               C141216 * C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eezx[69] +=
        (-std::pow(Pi, 2.5) *
         (((((C55527 * C108 + C141216 * C114) * C275 +
             (C55527 * C276 + C141216 * C579) * C141320) *
                C55522 +
            (C56517 + C56541) * C55523 + C58274 * C55524 + C58275 * C55525) *
               C4148 -
           ((C58930 + C58920) * C55525 + (C58931 + C58923) * C55524 +
            (C58932 + C58926) * C55523 +
            ((C55527 * C1784 + C141216 * C2126) * C141320 +
             (C55527 * C1601 + C141216 * C1606) * C275) *
                C55522) *
               C141487) *
              C141277 * C2376 +
          ((((C55527 * C1600 + C141216 * C1605) * C275 +
             (C55527 * C1783 + C141216 * C2125) * C141320) *
                C55522 +
            ((C55527 * C3491 + C141216 * C3495) * C275 +
             (C55527 * C3647 + C141216 * C3935) * C141320) *
                C55523 +
            ((C55527 * C7886 + C141216 * C7889) * C275 +
             (C55527 * C8127 + C141216 * C8582) * C141320) *
                C55524 +
            ((C55527 * C10552 + C141216 * C10554) * C275 +
             (C55527 * C10780 + C141216 * C11238) * C141320) *
                C55525) *
               C141487 -
           ((C56546 + C56532) * C55525 + (C56545 + C56529) * C55524 +
            (C56544 + C56526) * C55523 +
            ((C55527 * C277 + C141216 * C580) * C141320 +
             (C55527 * C109 + C141216 * C115) * C275) *
                C55522) *
               C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47713 * C108 + C47707 * C114 + C47715 * C109 + C47708 * C115 +
              C47717 * C110 + C47709 * C116) *
                 C275 +
             (C47713 * C276 + C47707 * C579 + C47715 * C277 + C47708 * C580 +
              C47717 * C278 + C47709 * C581) *
                 C141320) *
                C47710 +
            ((C48944 + C48945 + C48946) * C275 +
             (C49298 + C49299 + C49300) * C141320) *
                C141358) *
               C4148 -
           (((C52831 + C52832 + C52833) * C141320 +
             (C52522 + C52523 + C52524) * C275) *
                C141358 +
            ((C47717 * C1782 + C47709 * C2124 + C47715 * C1783 +
              C47708 * C2125 + C47713 * C1784 + C47707 * C2126) *
                 C141320 +
             (C47717 * C1599 + C47709 * C1604 + C47715 * C1600 +
              C47708 * C1605 + C47713 * C1601 + C47707 * C1606) *
                 C275) *
                C47710) *
               C141487) *
              C141277 * C2376 +
          ((((C47713 * C1600 + C47707 * C1605 + C47715 * C1599 +
              C47708 * C1604 + C47717 * C1598 + C47709 * C1603) *
                 C275 +
             (C47713 * C1783 + C47707 * C2125 + C47715 * C1782 +
              C47708 * C2124 + C47717 * C1781 + C47709 * C2123) *
                 C141320) *
                C47710 +
            ((C47713 * C3491 + C47707 * C3495 + C47715 * C3492 +
              C47708 * C3496 + C47717 * C3493 + C47709 * C3497) *
                 C275 +
             (C47713 * C3647 + C47707 * C3935 + C47715 * C3648 +
              C47708 * C3936 + C47717 * C3649 + C47709 * C3937) *
                 C141320) *
                C141358) *
               C141487 -
           (((C49303 + C49302 + C49301) * C141320 +
             (C48952 + C48951 + C48950) * C275) *
                C141358 +
            ((C47717 * C279 + C47709 * C582 + C47715 * C278 + C47708 * C581 +
              C47713 * C277 + C47707 * C580) *
                 C141320 +
             (C47717 * C111 + C47709 * C117 + C47715 * C110 + C47708 * C116 +
              C47713 * C109 + C47707 * C115) *
                 C275) *
                C47710) *
               C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C55527 * C108 + C141216 * C114) * C14204 +
             (C55527 * C276 + C141216 * C579) * C14035 + C62870 * C14205 +
             C63222 * C14036 + C62872 * C14206 + C63223 * C14037) *
                C47710 +
            (C62162 + C62163 + C62164 + C62165 + C62166 + C62180) * C141358) *
               C4148 -
           ((C65861 + C65855 + C65856 + C65857 + C65858 + C65859) * C141358 +
            ((C55527 * C16151 + C141216 * C16659) * C14037 +
             (C55527 * C15862 + C141216 * C15865) * C14206 + C63223 * C14036 +
             C62872 * C14205 + C63222 * C14035 + C62870 * C14204) *
                C47710) *
               C141487) *
              C141277 * C2376 +
          (((C62874 * C14204 + C63224 * C14035 + C62876 * C14205 +
             C63225 * C14036 + (C55527 * C15861 + C141216 * C15864) * C14206 +
             (C55527 * C16150 + C141216 * C16658) * C14037) *
                C47710 +
            (C61851 * C14204 + C62178 * C14035 + C61853 * C14205 +
             C62179 * C14036 + (C55527 * C18583 + C141216 * C18585) * C14206 +
             (C55527 * C18821 + C141216 * C19251) * C14037) *
                C141358) *
               C141487 -
           ((C62182 + C62174 + C62181 + C62171 + C62170 + C62169) * C141358 +
            (C63225 * C14037 + C62876 * C14206 + C63224 * C14036 +
             C62874 * C14205 + (C55527 * C277 + C141216 * C580) * C14035 +
             (C55527 * C109 + C141216 * C115) * C14204) *
                C47710) *
               C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eezy[69] +=
        (-std::pow(Pi, 2.5) *
         ((((C55590 * C108 + C55522 * C189 + C55591 * C823 + C55523 * C912 +
             C55592 * C2960 + C55524 * C3026 + C55593 * C6729 +
             C55525 * C6880) *
                C275 +
            (C55590 * C276 + C55522 * C635 + C55591 * C1006 + C55523 * C1419 +
             C55592 * C3084 + C55524 * C3362 + C55593 * C7002 +
             C55525 * C7655) *
                C141320) *
               C141216 * C4148 -
           ((C55593 * C10779 + C55525 * C11349 + C55592 * C8128 +
             C55524 * C8684 + C55591 * C3646 + C55523 * C4004 + C55590 * C1784 +
             C55522 * C2197) *
                C141320 +
            (C55593 * C10551 + C55525 * C10677 + C55592 * C7887 +
             C55524 * C8006 + C55591 * C3490 + C55523 * C3572 + C55590 * C1601 +
             C55522 * C1690) *
                C275) *
               C141216 * C141487) *
              C141277 * C2376 +
          (((C55590 * C1600 + C55522 * C1689 + C55591 * C3491 + C55523 * C3573 +
             C55592 * C7886 + C55524 * C8005 + C55593 * C10552 +
             C55525 * C10678) *
                C275 +
            (C55590 * C1783 + C55522 * C2196 + C55591 * C3647 + C55523 * C4005 +
             C55592 * C8127 + C55524 * C8683 + C55593 * C10780 +
             C55525 * C11350) *
                C141320) *
               C141216 * C141487 -
           ((C55593 * C7001 + C55525 * C7654 + C55592 * C3085 + C55524 * C3363 +
             C55591 * C1005 + C55523 * C1418 + C55590 * C277 + C55522 * C636) *
                C141320 +
            (C55593 * C6728 + C55525 * C6879 + C55592 * C2961 + C55524 * C3027 +
             C55591 * C822 + C55523 * C911 + C55590 * C109 + C55522 * C190) *
                C275) *
               C141216 * C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47810 * C108 + C47710 * C189 + C47811 * C823 + C141358 * C912) *
                 C275 +
             (C47810 * C276 + C47710 * C635 + C47811 * C1006 +
              C141358 * C1419) *
                 C141320) *
                C47707 +
            ((C47837 + C47838) * C275 + (C48366 + C48367) * C141320) * C47708 +
            C48374 * C47709) *
               C4148 -
           (((C50380 + C50381) * C141320 + (C49742 + C49743) * C275) * C47709 +
            ((C50382 + C50383) * C141320 + (C49746 + C49747) * C275) * C47708 +
            ((C47811 * C3646 + C141358 * C4004 + C47810 * C1784 +
              C47710 * C2197) *
                 C141320 +
             (C47811 * C3490 + C141358 * C3572 + C47810 * C1601 +
              C47710 * C1690) *
                 C275) *
                C47707) *
               C141487) *
              C141277 * C2376 +
          ((((C49747 + C49746) * C275 + (C50383 + C50382) * C141320) * C47707 +
            ((C49743 + C49742) * C275 + (C50381 + C50380) * C141320) * C47708 +
            ((C47810 * C1598 + C47710 * C1687 + C47811 * C3493 +
              C141358 * C3575) *
                 C275 +
             (C47810 * C1781 + C47710 * C2194 + C47811 * C3649 +
              C141358 * C4007) *
                 C141320) *
                C47709) *
               C141487 -
           (((C48370 + C48371) * C141320 + (C47847 + C47848) * C275) * C47709 +
            ((C48369 + C48368) * C141320 + (C47842 + C47841) * C275) * C47708 +
            ((C48367 + C48366) * C141320 + (C47838 + C47837) * C275) * C47707) *
               C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47810 * C108 + C47710 * C189 + C47811 * C823 + C141358 * C912) *
                C14204 +
            (C47810 * C276 + C47710 * C635 + C47811 * C1006 + C141358 * C1419) *
                C14035 +
            (C62638 + C62639) * C14205 + (C63336 + C63337) * C14036 +
            (C62642 + C62643) * C14206 + (C63338 + C63339) * C14037) *
               C141216 * C4148 -
           ((C47811 * C18820 + C141358 * C19356 + C47810 * C16151 +
             C47710 * C16784) *
                C14037 +
            (C47811 * C18582 + C141358 * C18698 + C47810 * C15862 +
             C47710 * C16013) *
                C14206 +
            (C63339 + C63338) * C14036 + (C62643 + C62642) * C14205 +
            (C63337 + C63336) * C14035 + (C62639 + C62638) * C14204) *
               C141216 * C141487) *
              C141277 * C2376 +
          (((C49747 + C49746) * C14204 + (C50383 + C50382) * C14035 +
            (C62646 + C62647) * C14205 + (C63340 + C63341) * C14036 +
            (C47810 * C15861 + C47710 * C16012 + C47811 * C18583 +
             C141358 * C18699) *
                C14206 +
            (C47810 * C16150 + C47710 * C16783 + C47811 * C18821 +
             C141358 * C19357) *
                C14037) *
               C141216 * C141487 -
           ((C63341 + C63340) * C14037 + (C62647 + C62646) * C14206 +
            (C50382 + C50383) * C14036 + (C49746 + C49747) * C14205 +
            (C48367 + C48366) * C14035 + (C47838 + C47837) * C14204) *
               C141216 * C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eezz[69] +=
        (-std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C141320 * C714) * C55522 +
            C7785 * C55523 + C7786 * C55524 + C10453 * C55525) *
               C141216 * C4148 -
           (C59072 * C55525 + C11462 * C55524 + C11463 * C55523 +
            (C713 * C1601 + C2295 + C2295 + C141320 * C2283) * C55522) *
               C141216 * C141487) *
              C141277 * C2376 +
          ((C2305 * C55522 + C8810 * C55523 + C8809 * C55524 +
            (C713 * C10552 + C11457 + C11457 + C141320 * C11450) * C55525) *
               C141216 * C141487 -
           (C7787 * C55525 + C6627 * C55524 + C1527 * C55523 + C743 * C55522) *
               C141216 * C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C713 * C108 + C721 + C721 + C141320 * C714) * C47710 +
             C7785 * C141358) *
                C47707 +
            (C48449 + C48450) * C47708 + C48455 * C47709) *
               C4148 -
           ((C50482 + C50483) * C47709 + (C50484 + C50485) * C47708 +
            (C11463 * C141358 +
             (C713 * C1601 + C2295 + C2295 + C141320 * C2283) * C47710) *
                C47707) *
               C141487) *
              C141277 * C2376 +
          (((C50485 + C50484) * C47707 + (C50483 + C50482) * C47708 +
            (C2303 * C47710 +
             (C713 * C3493 + C4082 + C4082 + C141320 * C4077) * C141358) *
                C47709) *
               C141487 -
           ((C48453 + C48454) * C47709 + (C48452 + C48451) * C47708 +
            (C48450 + C48449) * C47707) *
               C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C14733 * C108 + C14737 + C14737 + C14035 * C714 + C14734 * C1601 +
             C14738 + C14738 + C14036 * C2283 + C14735 * C5325 + C14739 +
             C14739 + C14037 * C5781) *
                C47710 +
            (C62391 + C62392 + C62393) * C141358) *
               C141216 * C4148 -
           ((C66087 + C66088 + C66089) * C141358 +
            (C14735 * C15862 + C16912 + C16912 + C14037 * C16900 +
             C14734 * C5325 + C16913 + C16913 + C14036 * C5781 +
             C14733 * C1601 + C16914 + C16914 + C14035 * C2283) *
                C47710) *
               C141216 * C141487) *
              C141277 * C2376 +
          (((C16926 + C16925 + C16924) * C47710 +
            (C14733 * C3491 + C19468 + C19468 + C14035 * C4075 +
             C14734 * C13302 + C19469 + C19469 + C14036 * C13955 +
             C14735 * C18583 + C19470 + C19470 + C14037 * C19463) *
                C141358) *
               C141216 * C141487 -
           ((C15761 + C15762 + C15763) * C141358 +
            (C14775 + C14774 + C14773) * C47710) *
               C141216 * C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eexx[70] +=
        (-std::pow(Pi, 2.5) *
         ((((C55526 * C108 + C55529 + C55529 + C141216 * C120) * C141320 *
                C55522 +
            C56059 * C55523 + C56060 * C55524 + C56061 * C55525) *
               C4148 -
           (C58474 * C55525 + C58475 * C55524 + C58476 * C55523 +
            (C55526 * C1601 + C56748 + C56748 + C141216 * C1611) * C141320 *
                C55522) *
               C141487) *
              C816 +
          ((C58476 * C55522 + C58475 * C55523 + C58474 * C55524 +
            (C55526 * C58454 + C58464 + C58464 + C141216 * C58456) * C141320 *
                C55525) *
               C141487 -
           (C57942 * C55525 + C56061 * C55524 + C56060 * C55523 +
            C56059 * C55522) *
               C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47712 * C108 + C47719 + C47719 + C47707 * C120 + C47714 * C109 +
             C47720 + C47720 + C47708 * C121 + C47716 * C110 + C47721 + C47721 +
             C47709 * C122) *
                C141320 * C47710 +
            (C48584 + C48585 + C48586) * C141320 * C141358) *
               C4148 -
           ((C52204 + C52205 + C52206) * C141320 * C141358 +
            (C47716 * C1599 + C49617 + C49617 + C47709 * C1609 +
             C47714 * C1600 + C49618 + C49618 + C47708 * C1610 +
             C47712 * C1601 + C49619 + C49619 + C47707 * C1611) *
                C141320 * C47710) *
               C141487) *
              C816 +
          (((C52206 + C52205 + C52204) * C141320 * C47710 +
            (C47712 * C7887 + C52195 + C52195 + C47707 * C7893 +
             C47714 * C7886 + C52196 + C52196 + C47708 * C7892 +
             C47716 * C7888 + C52197 + C52197 + C47709 * C7894) *
                C141320 * C141358) *
               C141487 -
           ((C51457 + C51458 + C51459) * C141320 * C141358 +
            (C48586 + C48585 + C48584) * C141320 * C47710) *
               C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C55526 * C108 + C55529 + C55529 + C141216 * C120) * C14035 +
             C62512 * C14036 + C62513 * C14037) *
                C47710 +
            (C61503 + C61504 + C61522) * C141358) *
               C4148 -
           ((C65169 + C65163 + C65164) * C141358 +
            ((C55526 * C15862 + C62497 + C62497 + C141216 * C15868) * C14037 +
             C62513 * C14036 + C62512 * C14035) *
                C47710) *
               C141487) *
              C816 +
          (((C65164 + C65163 + C65169) * C47710 +
            (C58472 * C14035 + C64402 * C14036 +
             (C55526 * C65157 + C65165 + C65165 + C141216 * C65159) * C14037) *
                C141358) *
               C141487 -
           ((C64403 + C64398 + C64399) * C141358 +
            (C61522 + C61504 + C61503) * C47710) *
               C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eexy[70] +=
        (-std::pow(Pi, 2.5) *
         ((((C55590 * C108 + C55522 * C189 + C55591 * C823 + C55523 * C912 +
             C55592 * C2960 + C55524 * C3026 + C55593 * C6729 +
             C55525 * C6880) *
                C55527 +
            (C55590 * C114 + C55522 * C195 + C55591 * C828 + C55523 * C917 +
             C55592 * C2964 + C55524 * C3030 + C55593 * C6732 +
             C55525 * C6883) *
                C141216) *
               C141320 * C4148 -
           ((C55593 * C10553 + C55525 * C10679 + C55592 * C7890 +
             C55524 * C8009 + C55591 * C3494 + C55523 * C3576 + C55590 * C1606 +
             C55522 * C1695) *
                C141216 +
            (C55593 * C10551 + C55525 * C10677 + C55592 * C7887 +
             C55524 * C8006 + C55591 * C3490 + C55523 * C3572 + C55590 * C1601 +
             C55522 * C1690) *
                C55527) *
               C141320 * C141487) *
              C816 +
          (((C55590 * C3490 + C55522 * C3572 + C55591 * C7887 + C55523 * C8006 +
             C55592 * C10551 + C55524 * C10677 + C55593 * C58454 +
             C55525 * C58542) *
                C55527 +
            (C55590 * C3494 + C55522 * C3576 + C55591 * C7890 + C55523 * C8009 +
             C55592 * C10553 + C55524 * C10679 + C55593 * C58455 +
             C55525 * C58543) *
                C141216) *
               C141320 * C141487 -
           ((C55593 * C9770 + C55525 * C9864 + C55592 * C6732 + C55524 * C6883 +
             C55591 * C2964 + C55523 * C3030 + C55590 * C828 + C55522 * C917) *
                C141216 +
            (C55593 * C9768 + C55525 * C9862 + C55592 * C6729 + C55524 * C6880 +
             C55591 * C2960 + C55523 * C3026 + C55590 * C823 + C55522 * C912) *
                C55527) *
               C141320 * C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47810 * C108 + C47710 * C189 + C47811 * C823 + C141358 * C912) *
                C47713 +
            (C47810 * C114 + C47710 * C195 + C47811 * C828 + C141358 * C917) *
                C47707 +
            (C47837 + C47838) * C47715 + (C47839 + C47840) * C47708 +
            C47849 * C47717 + C47850 * C47709) *
               C141320 * C4148 -
           ((C49740 + C49741) * C47709 + (C49742 + C49743) * C47717 +
            (C49744 + C49745) * C47708 + (C49746 + C49747) * C47715 +
            (C47811 * C3494 + C141358 * C3576 + C47810 * C1606 +
             C47710 * C1695) *
                C47707 +
            (C47811 * C3490 + C141358 * C3572 + C47810 * C1601 +
             C47710 * C1690) *
                C47713) *
               C141320 * C141487) *
              C816 +
          (((C47810 * C3490 + C47710 * C3572 + C47811 * C7887 +
             C141358 * C8006) *
                C47713 +
            (C47810 * C3494 + C47710 * C3576 + C47811 * C7890 +
             C141358 * C8009) *
                C47707 +
            (C47810 * C3491 + C47710 * C3573 + C47811 * C7886 +
             C141358 * C8005) *
                C47715 +
            (C47810 * C3495 + C47710 * C3577 + C47811 * C7889 +
             C141358 * C8008) *
                C47708 +
            (C47810 * C3492 + C47710 * C3574 + C47811 * C7888 +
             C141358 * C8007) *
                C47717 +
            (C47810 * C3496 + C47710 * C3578 + C47811 * C7891 +
             C141358 * C8010) *
                C47709) *
               C141320 * C141487 -
           ((C48704 + C48705) * C47709 + (C48706 + C48707) * C47717 +
            (C48708 + C48709) * C47708 + (C48710 + C48711) * C47715 +
            (C47811 * C2964 + C141358 * C3030 + C47810 * C828 + C47710 * C917) *
                C47707 +
            (C47811 * C2960 + C141358 * C3026 + C47810 * C823 + C47710 * C912) *
                C47713) *
               C141320 * C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C47810 * C108 + C47710 * C189 + C47811 * C823 + C141358 * C912) *
                 C55527 +
             (C47810 * C114 + C47710 * C195 + C47811 * C828 + C141358 * C917) *
                 C141216) *
                C14035 +
            ((C62638 + C62639) * C55527 + (C62640 + C62641) * C141216) *
                C14036 +
            ((C62642 + C62643) * C55527 + (C62644 + C62645) * C141216) *
                C14037) *
               C4148 -
           (((C47811 * C18584 + C141358 * C18700 + C47810 * C15865 +
              C47710 * C16016) *
                 C141216 +
             (C47811 * C18582 + C141358 * C18698 + C47810 * C15862 +
              C47710 * C16013) *
                 C55527) *
                C14037 +
            ((C62645 + C62644) * C141216 + (C62643 + C62642) * C55527) *
                C14036 +
            ((C62641 + C62640) * C141216 + (C62639 + C62638) * C55527) *
                C14035) *
               C141487) *
              C816 +
          ((((C65286 + C65287) * C55527 + (C65288 + C65289) * C141216) *
                C14035 +
            ((C65290 + C65291) * C55527 + (C65292 + C65293) * C141216) *
                C14036 +
            ((C47810 * C18582 + C47710 * C18698 + C47811 * C65157 +
              C141358 * C65267) *
                 C55527 +
             (C47810 * C18584 + C47710 * C18700 + C47811 * C65158 +
              C141358 * C65268) *
                 C141216) *
                C14037) *
               C141487 -
           (((C65293 + C65292) * C141216 + (C65291 + C65290) * C55527) *
                C14037 +
            ((C65289 + C65288) * C141216 + (C65287 + C65286) * C55527) *
                C14036 +
            ((C47811 * C2964 + C141358 * C3030 + C47810 * C828 +
              C47710 * C917) *
                 C141216 +
             (C47811 * C2960 + C141358 * C3026 + C47810 * C823 +
              C47710 * C912) *
                 C55527) *
                C14035) *
               C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eexz[70] +=
        (-std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141320 * C276) * C55527 +
             (C275 * C114 + C141320 * C282) * C141216) *
                C55522 +
            (C56197 + C56198) * C55523 + C58047 * C55524 + C58048 * C55525) *
               C4148 -
           ((C58623 + C58624) * C55525 + (C58617 + C58618) * C55524 +
            (C58619 + C58620) * C55523 +
            ((C275 * C1606 + C141320 * C1789) * C141216 +
             (C275 * C1601 + C141320 * C1784) * C55527) *
                C55522) *
               C141487) *
              C816 +
          (((C58620 + C58619) * C55522 + (C58618 + C58617) * C55523 +
            (C58624 + C58623) * C55524 +
            ((C275 * C58454 + C141320 * C58610) * C55527 +
             (C275 * C58455 + C141320 * C58611) * C141216) *
                C55525) *
               C141487 -
           ((C58055 + C58056) * C55525 + (C56202 + C56201) * C55524 +
            (C56200 + C56199) * C55523 + (C56198 + C56197) * C55522) *
               C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141320 * C276) * C47713 +
             (C275 * C114 + C141320 * C282) * C47707 + C305 * C47715 +
             C306 * C47708 + C307 * C47717 + C308 * C47709) *
                C47710 +
            (C48810 + C48811 + C48812 + C48813 + C48814 + C48815) * C141358) *
               C4148 -
           ((C52403 + C52404 + C52405 + C52406 + C52407 + C52408) * C141358 +
            (C1806 * C47709 + C1807 * C47717 + C1808 * C47708 + C1809 * C47715 +
             (C275 * C1606 + C141320 * C1789) * C47707 +
             (C275 * C1601 + C141320 * C1784) * C47713) *
                C47710) *
               C141487) *
              C816 +
          (((C52408 + C52407 + C52406 + C52405 + C52404 + C52403) * C47710 +
            (C10797 * C47713 + C10796 * C47707 + C8143 * C47715 +
             C8142 * C47708 + (C275 * C7888 + C141320 * C8129) * C47717 +
             (C275 * C7891 + C141320 * C8132) * C47709) *
                C141358) *
               C141487 -
           ((C51608 + C51609 + C51610 + C51611 + C51612 + C51613) * C141358 +
            (C48815 + C48814 + C48813 + C48812 + C48811 + C48810) * C47710) *
               C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C14204 * C108 + C14035 * C276 + C14205 * C1601 + C14036 * C1784 +
              C14206 * C5325 + C14037 * C5449) *
                 C55527 +
             (C14204 * C114 + C14035 * C282 + C14205 * C1606 + C14036 * C1789 +
              C14206 * C5329 + C14037 * C5453) *
                 C141216) *
                C47710 +
            ((C61733 + C61734 + C61735) * C55527 +
             (C61736 + C61737 + C61738) * C141216) *
                C141358) *
               C4148 -
           (((C65406 + C65407 + C65408) * C141216 +
             (C65409 + C65410 + C65411) * C55527) *
                C141358 +
            ((C14206 * C15865 + C14037 * C16154 + C14205 * C5329 +
              C14036 * C5453 + C14204 * C1606 + C14035 * C1789) *
                 C141216 +
             (C14206 * C15862 + C14037 * C16151 + C14205 * C5325 +
              C14036 * C5449 + C14204 * C1601 + C14035 * C1784) *
                 C55527) *
                C47710) *
               C141487) *
              C816 +
          ((((C65411 + C65410 + C65409) * C55527 +
             (C65408 + C65407 + C65406) * C141216) *
                C47710 +
            ((C14204 * C7887 + C14035 * C8128 + C14205 * C13303 +
              C14036 * C13477 + C14206 * C65157 + C14037 * C65391) *
                 C55527 +
             (C14204 * C7890 + C14035 * C8131 + C14205 * C13307 +
              C14036 * C13481 + C14206 * C65158 + C14037 * C65392) *
                 C141216) *
                C141358) *
               C141487 -
           (((C64564 + C64565 + C64566) * C141216 +
             (C64567 + C64568 + C64569) * C55527) *
                C141358 +
            ((C61738 + C61737 + C61736) * C141216 +
             (C61735 + C61734 + C61733) * C55527) *
                C47710) *
               C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eeyx[70] += (-std::pow(Pi, 2.5) *
                   ((((C55527 * C108 + C141216 * C114) * C55590 +
                      (C55527 * C189 + C141216 * C362) * C55522 +
                      C56299 * C55591 + C56300 * C55523 + C56301 * C55592 +
                      C56302 * C55524 + C56303 * C55593 + C56304 * C55525) *
                         C141320 * C4148 -
                     (C58704 * C55525 + C58705 * C55593 + C58706 * C55524 +
                      C58707 * C55592 + C58708 * C55523 + C58709 * C55591 +
                      (C55527 * C1690 + C141216 * C1878) * C55522 +
                      (C55527 * C1601 + C141216 * C1606) * C55590) *
                         C141320 * C141487) *
                        C816 +
                    ((C58709 * C55590 + C58708 * C55522 + C58707 * C55591 +
                      C58706 * C55523 + C58705 * C55592 + C58704 * C55524 +
                      (C55527 * C58454 + C141216 * C58455) * C55593 +
                      (C55527 * C58542 + C141216 * C58690) * C55525) *
                         C141320 * C141487 -
                     (C58112 * C55525 + C58113 * C55593 + C56304 * C55524 +
                      C56303 * C55592 + C56302 * C55523 + C56301 * C55591 +
                      C56300 * C55522 + C56299 * C55590) *
                         C141320 * C4148) *
                        C141485) *
                   C141243) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   ((((C47713 * C108 + C47707 * C114 + C47715 * C109 +
                       C47708 * C115 + C47717 * C110 + C47709 * C116) *
                          C47810 +
                      (C47713 * C189 + C47707 * C362 + C47715 * C190 +
                       C47708 * C363 + C47717 * C191 + C47709 * C364) *
                          C47710 +
                      (C48944 + C48945 + C48946) * C47811 +
                      (C48947 + C48948 + C48949) * C141358) *
                         C141320 * C4148 -
                     ((C52519 + C52520 + C52521) * C141358 +
                      (C52522 + C52523 + C52524) * C47811 +
                      (C47717 * C1688 + C47709 * C1876 + C47715 * C1689 +
                       C47708 * C1877 + C47713 * C1690 + C47707 * C1878) *
                          C47710 +
                      (C47717 * C1599 + C47709 * C1604 + C47715 * C1600 +
                       C47708 * C1605 + C47713 * C1601 + C47707 * C1606) *
                          C47810) *
                         C141320 * C141487) *
                        C816 +
                    (((C52524 + C52523 + C52522) * C47810 +
                      (C52521 + C52520 + C52519) * C47710 +
                      (C47713 * C7887 + C47707 * C7890 + C47715 * C7886 +
                       C47708 * C7889 + C47717 * C7888 + C47709 * C7891) *
                          C47811 +
                      (C47713 * C8006 + C47707 * C8244 + C47715 * C8005 +
                       C47708 * C8243 + C47717 * C8007 + C47709 * C8245) *
                          C141358) *
                         C141320 * C141487 -
                     ((C51700 + C51701 + C51702) * C141358 +
                      (C51703 + C51704 + C51705) * C47811 +
                      (C48949 + C48948 + C48947) * C47710 +
                      (C48946 + C48945 + C48944) * C47810) *
                         C141320 * C4148) *
                        C141485) *
                   C141243) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   (((((C55527 * C108 + C141216 * C114) * C47810 +
                       (C55527 * C189 + C141216 * C362) * C47710 +
                       C56299 * C47811 + C56300 * C141358) *
                          C14035 +
                      (C62878 + C62879 + C62850 + C62851) * C14036 +
                      (C62880 + C62881 + C62856 + C62857) * C14037) *
                         C4148 -
                     ((C65523 * C141358 + C65524 * C47811 +
                       (C55527 * C16013 + C141216 * C16273) * C47710 +
                       (C55527 * C15862 + C141216 * C15865) * C47810) *
                          C14037 +
                      (C62857 + C62856 + C62881 + C62880) * C14036 +
                      (C62851 + C62850 + C62879 + C62878) * C14035) *
                         C141487) *
                        C816 +
                    (((C65515 + C65516 + C65517 + C65518) * C14035 +
                      (C65519 + C65520 + C65521 + C65522) * C14036 +
                      (C65524 * C47810 + C65523 * C47710 +
                       (C55527 * C65157 + C141216 * C65158) * C47811 +
                       (C55527 * C65267 + C141216 * C65509) * C141358) *
                          C14037) *
                         C141487 -
                     ((C65522 + C65521 + C65520 + C65519) * C14037 +
                      (C65518 + C65517 + C65516 + C65515) * C14036 +
                      (C56302 * C141358 + C56301 * C47811 + C56300 * C47710 +
                       C56299 * C47810) *
                          C14035) *
                         C4148) *
                        C141485) *
                   C141243) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[70] += (-std::pow(Pi, 2.5) *
                   (((C55744 * C108 + C55749 + C55749 + C55522 * C419 +
                      C55745 * C823 + C55750 + C55750 + C55523 * C1171 +
                      C55746 * C2960 + C55751 + C55751 + C55524 * C3196 +
                      C55747 * C6729 + C55752 + C55752 + C55525 * C7289) *
                         C141216 * C141320 * C4148 -
                     (C55747 * C10551 + C57017 + C57017 + C55525 * C11025 +
                      C55746 * C7887 + C57018 + C57018 + C55524 * C8345 +
                      C55745 * C3490 + C57019 + C57019 + C55523 * C3790 +
                      C55744 * C1601 + C57020 + C57020 + C55522 * C1949) *
                         C141216 * C141320 * C141487) *
                        C816 +
                    ((C55744 * C3490 + C58777 + C58777 + C55522 * C3790 +
                      C55745 * C7887 + C58778 + C58778 + C55523 * C8345 +
                      C55746 * C10551 + C58779 + C58779 + C55524 * C11025 +
                      C55747 * C58454 + C58780 + C58780 + C55525 * C58775) *
                         C141216 * C141320 * C141487 -
                     (C55747 * C9768 + C56377 + C56377 + C55525 * C10121 +
                      C55746 * C6729 + C56378 + C56378 + C55524 * C7289 +
                      C55745 * C2960 + C56379 + C56379 + C55523 * C3196 +
                      C55744 * C823 + C56380 + C56380 + C55522 * C1171) *
                         C141216 * C141320 * C4148) *
                        C141485) *
                   C141243) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   ((((C48072 * C108 + C48075 + C48075 + C47710 * C419 +
                       C48073 * C823 + C48076 + C48076 + C141358 * C1171) *
                          C47707 +
                      (C48109 + C48110) * C47708 + C48115 * C47709) *
                         C141320 * C4148 -
                     ((C50066 + C50067) * C47709 + (C50068 + C50069) * C47708 +
                      (C48073 * C3490 + C50054 + C50054 + C141358 * C3790 +
                       C48072 * C1601 + C50055 + C50055 + C47710 * C1949) *
                          C47707) *
                         C141320 * C141487) *
                        C816 +
                    (((C48072 * C3490 + C52623 + C52623 + C47710 * C3790 +
                       C48073 * C7887 + C52624 + C52624 + C141358 * C8345) *
                          C47707 +
                      (C48072 * C3491 + C52625 + C52625 + C47710 * C3791 +
                       C48073 * C7886 + C52626 + C52626 + C141358 * C8344) *
                          C47708 +
                      (C48072 * C3492 + C52627 + C52627 + C47710 * C3792 +
                       C48073 * C7888 + C52628 + C52628 + C141358 * C8346) *
                          C47709) *
                         C141320 * C141487 -
                     ((C49078 + C49079) * C47709 + (C49080 + C49081) * C47708 +
                      (C48073 * C2960 + C49066 + C49066 + C141358 * C3196 +
                       C48072 * C823 + C49067 + C49067 + C47710 * C1171) *
                          C47707) *
                         C141320 * C4148) *
                        C141485) *
                   C141243) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   ((((C48072 * C108 + C48075 + C48075 + C47710 * C419 +
                       C48073 * C823 + C48076 + C48076 + C141358 * C1171) *
                          C141216 * C14035 +
                      (C63012 + C63013) * C141216 * C14036 +
                      (C63014 + C63015) * C141216 * C14037) *
                         C4148 -
                     ((C48073 * C18582 + C62992 + C62992 + C141358 * C19034 +
                       C48072 * C15862 + C62993 + C62993 + C47710 * C16422) *
                          C141216 * C14037 +
                      (C63015 + C63014) * C141216 * C14036 +
                      (C63013 + C63012) * C141216 * C14035) *
                         C141487) *
                        C816 +
                    (((C65642 + C65643) * C141216 * C14035 +
                      (C65644 + C65645) * C141216 * C14036 +
                      (C48072 * C18582 + C65632 + C65632 + C47710 * C19034 +
                       C48073 * C65157 + C65633 + C65633 + C141358 * C65622) *
                          C141216 * C14037) *
                         C141487 -
                     ((C65645 + C65644) * C141216 * C14037 +
                      (C65643 + C65642) * C141216 * C14036 +
                      (C48073 * C2960 + C49066 + C49066 + C141358 * C3196 +
                       C48072 * C823 + C49067 + C49067 + C47710 * C1171) *
                          C141216 * C14035) *
                         C4148) *
                        C141485) *
                   C141243) /
                      (p * q * std::sqrt(p + q));
    d2eeyz[70] +=
        (-std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141320 * C276) * C55590 +
            (C275 * C189 + C141320 * C501) * C55522 + C7032 * C55591 +
            C7428 * C55523 + C7034 * C55592 + C7429 * C55524 + C9954 * C55593 +
            C10208 * C55525) *
               C141216 * C4148 -
           (C58850 * C55525 + C58622 * C55593 + C11138 * C55524 +
            C10797 * C55592 + C11139 * C55523 + C10799 * C55591 +
            (C275 * C1690 + C141320 * C2040) * C55522 +
            (C275 * C1601 + C141320 * C1784) * C55590) *
               C141216 * C141487) *
              C816 +
          ((C10799 * C55590 + C11139 * C55522 + C10797 * C55591 +
            C11138 * C55523 + C58622 * C55592 + C58850 * C55524 +
            (C275 * C58454 + C141320 * C58610) * C55593 +
            (C275 * C58542 + C141320 * C58846) * C55525) *
               C141216 * C141487 -
           (C58222 * C55525 + C58054 * C55593 + C10208 * C55524 +
            C9954 * C55592 + C7429 * C55523 + C7034 * C55591 + C7428 * C55522 +
            C7032 * C55590) *
               C141216 * C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141320 * C276) * C47810 +
             (C275 * C189 + C141320 * C501) * C47710 + C7032 * C47811 +
             C7428 * C141358) *
                C47707 +
            (C48190 + C48191 + C48192 + C48193) * C47708 + C48204 * C47709) *
               C4148 -
           ((C50168 + C50169 + C50170 + C50171) * C47709 +
            (C50172 + C50173 + C50174 + C50175) * C47708 +
            (C11139 * C141358 + C10799 * C47811 +
             (C275 * C1690 + C141320 * C2040) * C47710 +
             (C275 * C1601 + C141320 * C1784) * C47810) *
                C47707) *
               C141487) *
              C816 +
          (((C10799 * C47810 + C11139 * C47710 + C10797 * C47811 +
             C11138 * C141358) *
                C47707 +
            (C8145 * C47810 + C8482 * C47710 + C8143 * C47811 +
             C8481 * C141358) *
                C47708 +
            (C24213 * C47810 + C24545 * C47710 +
             (C275 * C7888 + C141320 * C8129) * C47811 +
             (C275 * C8007 + C141320 * C8471) * C141358) *
                C47709) *
               C141487 -
           ((C49180 + C49181 + C49182 + C49183) * C47709 +
            (C49184 + C49185 + C49186 + C49187) * C47708 +
            (C7429 * C141358 + C7034 * C47811 + C7428 * C47710 +
             C7032 * C47810) *
                C47707) *
               C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C14204 * C108 + C14035 * C276 + C14205 * C1601 + C14036 * C1784 +
             C14206 * C5325 + C14037 * C5449) *
                C47810 +
            (C14204 * C189 + C14035 * C501 + C14205 * C1690 + C14036 * C2040 +
             C14206 * C5391 + C14037 * C5619) *
                C47710 +
            (C61733 + C61734 + C61735) * C47811 +
            (C62061 + C62062 + C62063) * C141358) *
               C141216 * C4148 -
           ((C65751 + C65752 + C65753) * C141358 +
            (C65409 + C65410 + C65411) * C47811 +
            (C14206 * C16013 + C14037 * C16549 + C14205 * C5391 +
             C14036 * C5619 + C14204 * C1690 + C14035 * C2040) *
                C47710 +
            (C14206 * C15862 + C14037 * C16151 + C14205 * C5325 +
             C14036 * C5449 + C14204 * C1601 + C14035 * C1784) *
                C47810) *
               C141216 * C141487) *
              C816 +
          (((C65411 + C65410 + C65409) * C47810 +
            (C65753 + C65752 + C65751) * C47710 +
            (C14204 * C7887 + C14035 * C8128 + C14205 * C13303 +
             C14036 * C13477 + C14206 * C65157 + C14037 * C65391) *
                C47811 +
            (C14204 * C8006 + C14035 * C8470 + C14205 * C13394 +
             C14036 * C13720 + C14206 * C65267 + C14037 * C65743) *
                C141358) *
               C141216 * C141487 -
           ((C64808 + C64809 + C64810) * C141358 +
            (C64567 + C64568 + C64569) * C47811 +
            (C62063 + C62062 + C62061) * C47710 +
            (C61735 + C61734 + C61733) * C47810) *
               C141216 * C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eezx[70] +=
        (-std::pow(Pi, 2.5) *
         (((((C55527 * C108 + C141216 * C114) * C275 +
             (C55527 * C276 + C141216 * C579) * C141320) *
                C55522 +
            (C56517 + C56541) * C55523 + C58274 * C55524 + C58275 * C55525) *
               C4148 -
           ((C58930 + C58920) * C55525 + (C58931 + C58923) * C55524 +
            (C58932 + C58926) * C55523 +
            ((C55527 * C1784 + C141216 * C2126) * C141320 +
             (C55527 * C1601 + C141216 * C1606) * C275) *
                C55522) *
               C141487) *
              C816 +
          (((C58926 + C58932) * C55522 + (C58923 + C58931) * C55523 +
            (C58920 + C58930) * C55524 +
            ((C55527 * C58454 + C141216 * C58455) * C275 +
             (C55527 * C58610 + C141216 * C58916) * C141320) *
                C55525) *
               C141487 -
           ((C58280 + C58278) * C55525 + (C56543 + C56523) * C55524 +
            (C56542 + C56520) * C55523 + (C56541 + C56517) * C55522) *
               C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47713 * C108 + C47707 * C114 + C47715 * C109 + C47708 * C115 +
              C47717 * C110 + C47709 * C116) *
                 C275 +
             (C47713 * C276 + C47707 * C579 + C47715 * C277 + C47708 * C580 +
              C47717 * C278 + C47709 * C581) *
                 C141320) *
                C47710 +
            ((C48944 + C48945 + C48946) * C275 +
             (C49298 + C49299 + C49300) * C141320) *
                C141358) *
               C4148 -
           (((C52831 + C52832 + C52833) * C141320 +
             (C52522 + C52523 + C52524) * C275) *
                C141358 +
            ((C47717 * C1782 + C47709 * C2124 + C47715 * C1783 +
              C47708 * C2125 + C47713 * C1784 + C47707 * C2126) *
                 C141320 +
             (C47717 * C1599 + C47709 * C1604 + C47715 * C1600 +
              C47708 * C1605 + C47713 * C1601 + C47707 * C1606) *
                 C275) *
                C47710) *
               C141487) *
              C816 +
          ((((C52524 + C52523 + C52522) * C275 +
             (C52833 + C52832 + C52831) * C141320) *
                C47710 +
            ((C47713 * C7887 + C47707 * C7890 + C47715 * C7886 +
              C47708 * C7889 + C47717 * C7888 + C47709 * C7891) *
                 C275 +
             (C47713 * C8128 + C47707 * C8583 + C47715 * C8127 +
              C47708 * C8582 + C47717 * C8129 + C47709 * C8584) *
                 C141320) *
                C141358) *
               C141487 -
           (((C51940 + C51941 + C51942) * C141320 +
             (C51703 + C51704 + C51705) * C275) *
                C141358 +
            ((C49300 + C49299 + C49298) * C141320 +
             (C48946 + C48945 + C48944) * C275) *
                C47710) *
               C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C55527 * C108 + C141216 * C114) * C14204 +
             (C55527 * C276 + C141216 * C579) * C14035 + C62870 * C14205 +
             C63222 * C14036 + C62872 * C14206 + C63223 * C14037) *
                C47710 +
            (C62162 + C62163 + C62164 + C62165 + C62166 + C62180) * C141358) *
               C4148 -
           ((C65861 + C65855 + C65856 + C65857 + C65858 + C65859) * C141358 +
            ((C55527 * C16151 + C141216 * C16659) * C14037 +
             (C55527 * C15862 + C141216 * C15865) * C14206 + C63223 * C14036 +
             C62872 * C14205 + C63222 * C14035 + C62870 * C14204) *
                C47710) *
               C141487) *
              C816 +
          (((C65859 + C65858 + C65857 + C65856 + C65855 + C65861) * C47710 +
            (C58707 * C14204 + C58928 * C14035 + C64649 * C14205 +
             C64892 * C14036 + (C55527 * C65157 + C141216 * C65158) * C14206 +
             (C55527 * C65391 + C141216 * C65851) * C14037) *
                C141358) *
               C141487 -
           ((C64893 + C64887 + C64888 + C64889 + C64890 + C64891) * C141358 +
            (C62180 + C62166 + C62165 + C62164 + C62163 + C62162) * C47710) *
               C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eezy[70] +=
        (-std::pow(Pi, 2.5) *
         ((((C55590 * C108 + C55522 * C189 + C55591 * C823 + C55523 * C912 +
             C55592 * C2960 + C55524 * C3026 + C55593 * C6729 +
             C55525 * C6880) *
                C275 +
            (C55590 * C276 + C55522 * C635 + C55591 * C1006 + C55523 * C1419 +
             C55592 * C3084 + C55524 * C3362 + C55593 * C7002 +
             C55525 * C7655) *
                C141320) *
               C141216 * C4148 -
           ((C55593 * C10779 + C55525 * C11349 + C55592 * C8128 +
             C55524 * C8684 + C55591 * C3646 + C55523 * C4004 + C55590 * C1784 +
             C55522 * C2197) *
                C141320 +
            (C55593 * C10551 + C55525 * C10677 + C55592 * C7887 +
             C55524 * C8006 + C55591 * C3490 + C55523 * C3572 + C55590 * C1601 +
             C55522 * C1690) *
                C275) *
               C141216 * C141487) *
              C816 +
          (((C55590 * C3490 + C55522 * C3572 + C55591 * C7887 + C55523 * C8006 +
             C55592 * C10551 + C55524 * C10677 + C55593 * C58454 +
             C55525 * C58542) *
                C275 +
            (C55590 * C3646 + C55522 * C4004 + C55591 * C8128 + C55523 * C8684 +
             C55592 * C10779 + C55524 * C11349 + C55593 * C58610 +
             C55525 * C58998) *
                C141320) *
               C141216 * C141487 -
           ((C55593 * C9940 + C55525 * C10368 + C55592 * C7002 +
             C55524 * C7655 + C55591 * C3084 + C55523 * C3362 + C55590 * C1006 +
             C55522 * C1419) *
                C141320 +
            (C55593 * C9768 + C55525 * C9862 + C55592 * C6729 + C55524 * C6880 +
             C55591 * C2960 + C55523 * C3026 + C55590 * C823 + C55522 * C912) *
                C275) *
               C141216 * C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47810 * C108 + C47710 * C189 + C47811 * C823 + C141358 * C912) *
                 C275 +
             (C47810 * C276 + C47710 * C635 + C47811 * C1006 +
              C141358 * C1419) *
                 C141320) *
                C47707 +
            ((C47837 + C47838) * C275 + (C48366 + C48367) * C141320) * C47708 +
            C48374 * C47709) *
               C4148 -
           (((C50380 + C50381) * C141320 + (C49742 + C49743) * C275) * C47709 +
            ((C50382 + C50383) * C141320 + (C49746 + C49747) * C275) * C47708 +
            ((C47811 * C3646 + C141358 * C4004 + C47810 * C1784 +
              C47710 * C2197) *
                 C141320 +
             (C47811 * C3490 + C141358 * C3572 + C47810 * C1601 +
              C47710 * C1690) *
                 C275) *
                C47707) *
               C141487) *
              C816 +
          ((((C47810 * C3490 + C47710 * C3572 + C47811 * C7887 +
              C141358 * C8006) *
                 C275 +
             (C47810 * C3646 + C47710 * C4004 + C47811 * C8128 +
              C141358 * C8684) *
                 C141320) *
                C47707 +
            ((C47810 * C3491 + C47710 * C3573 + C47811 * C7886 +
              C141358 * C8005) *
                 C275 +
             (C47810 * C3647 + C47710 * C4005 + C47811 * C8127 +
              C141358 * C8683) *
                 C141320) *
                C47708 +
            ((C47810 * C3492 + C47710 * C3574 + C47811 * C7888 +
              C141358 * C8007) *
                 C275 +
             (C47810 * C3648 + C47710 * C4006 + C47811 * C8129 +
              C141358 * C8685) *
                 C141320) *
                C47709) *
               C141487 -
           (((C49410 + C49411) * C141320 + (C48706 + C48707) * C275) * C47709 +
            ((C49412 + C49413) * C141320 + (C48710 + C48711) * C275) * C47708 +
            ((C47811 * C3084 + C141358 * C3362 + C47810 * C1006 +
              C47710 * C1419) *
                 C141320 +
             (C47811 * C2960 + C141358 * C3026 + C47810 * C823 +
              C47710 * C912) *
                 C275) *
                C47707) *
               C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47810 * C108 + C47710 * C189 + C47811 * C823 + C141358 * C912) *
                C14204 +
            (C47810 * C276 + C47710 * C635 + C47811 * C1006 + C141358 * C1419) *
                C14035 +
            (C62638 + C62639) * C14205 + (C63336 + C63337) * C14036 +
            (C62642 + C62643) * C14206 + (C63338 + C63339) * C14037) *
               C141216 * C4148 -
           ((C47811 * C18820 + C141358 * C19356 + C47810 * C16151 +
             C47710 * C16784) *
                C14037 +
            (C47811 * C18582 + C141358 * C18698 + C47810 * C15862 +
             C47710 * C16013) *
                C14206 +
            (C63339 + C63338) * C14036 + (C62643 + C62642) * C14205 +
            (C63337 + C63336) * C14035 + (C62639 + C62638) * C14204) *
               C141216 * C141487) *
              C816 +
          (((C65286 + C65287) * C14204 + (C65969 + C65970) * C14035 +
            (C65290 + C65291) * C14205 + (C65971 + C65972) * C14036 +
            (C47810 * C18582 + C47710 * C18698 + C47811 * C65157 +
             C141358 * C65267) *
                C14206 +
            (C47810 * C18820 + C47710 * C19356 + C47811 * C65391 +
             C141358 * C65959) *
                C14037) *
               C141216 * C141487 -
           ((C65972 + C65971) * C14037 + (C65291 + C65290) * C14206 +
            (C65970 + C65969) * C14036 + (C65287 + C65286) * C14205 +
            (C47811 * C3084 + C141358 * C3362 + C47810 * C1006 +
             C47710 * C1419) *
                C14035 +
            (C47811 * C2960 + C141358 * C3026 + C47810 * C823 + C47710 * C912) *
                C14204) *
               C141216 * C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eezz[70] +=
        (-std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C141320 * C714) * C55522 +
            C7785 * C55523 + C7786 * C55524 + C10453 * C55525) *
               C141216 * C4148 -
           (C59072 * C55525 + C11462 * C55524 + C11463 * C55523 +
            (C713 * C1601 + C2295 + C2295 + C141320 * C2283) * C55522) *
               C141216 * C141487) *
              C816 +
          ((C11463 * C55522 + C11462 * C55523 + C59072 * C55524 +
            (C713 * C58454 + C59069 + C59069 + C141320 * C59065) * C55525) *
               C141216 * C141487 -
           (C58388 * C55525 + C10453 * C55524 + C7786 * C55523 +
            C7785 * C55522) *
               C141216 * C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C713 * C108 + C721 + C721 + C141320 * C714) * C47710 +
             C7785 * C141358) *
                C47707 +
            (C48449 + C48450) * C47708 + C48455 * C47709) *
               C4148 -
           ((C50482 + C50483) * C47709 + (C50484 + C50485) * C47708 +
            (C11463 * C141358 +
             (C713 * C1601 + C2295 + C2295 + C141320 * C2283) * C47710) *
                C47707) *
               C141487) *
              C816 +
          (((C11463 * C47710 + C11462 * C141358) * C47707 +
            (C8810 * C47710 + C8809 * C141358) * C47708 +
            (C24860 * C47710 +
             (C713 * C7888 + C8804 + C8804 + C141320 * C8795) * C141358) *
                C47709) *
               C141487 -
           ((C49512 + C49513) * C47709 + (C49514 + C49515) * C47708 +
            (C7786 * C141358 + C7785 * C47710) * C47707) *
               C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C14733 * C108 + C14737 + C14737 + C14035 * C714 + C14734 * C1601 +
             C14738 + C14738 + C14036 * C2283 + C14735 * C5325 + C14739 +
             C14739 + C14037 * C5781) *
                C47710 +
            (C62391 + C62392 + C62393) * C141358) *
               C141216 * C4148 -
           ((C66087 + C66088 + C66089) * C141358 +
            (C14735 * C15862 + C16912 + C16912 + C14037 * C16900 +
             C14734 * C5325 + C16913 + C16913 + C14036 * C5781 +
             C14733 * C1601 + C16914 + C16914 + C14035 * C2283) *
                C47710) *
               C141216 * C141487) *
              C816 +
          (((C66089 + C66088 + C66087) * C47710 +
            (C14733 * C7887 + C66078 + C66078 + C14035 * C8794 +
             C14734 * C13303 + C66079 + C66079 + C14036 * C13954 +
             C14735 * C65157 + C66080 + C66080 + C14037 * C66070) *
                C141358) *
               C141216 * C141487 -
           ((C65057 + C65058 + C65059) * C141358 +
            (C62393 + C62392 + C62391) * C47710) *
               C141216 * C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eexx[71] +=
        (-std::pow(Pi, 2.5) *
         (((C55526 * C108 + C55529 + C55529 + C141216 * C120) * C141320 *
               C55522 +
           C56059 * C55523 + C56060 * C55524 + C56061 * C55525) *
              C5322 -
          (C58474 * C55525 + C58475 * C55524 + C58476 * C55523 +
           (C55526 * C1601 + C56748 + C56748 + C141216 * C1611) * C141320 *
               C55522) *
              C5323 +
          ((C55526 * C5325 + C60314 + C60314 + C141216 * C5333) * C141320 *
               C55522 +
           (C55526 * C13301 + C60315 + C60315 + C141216 * C13309) * C141320 *
               C55523 +
           (C55526 * C13303 + C60316 + C60316 + C141216 * C13311) * C141320 *
               C55524 +
           (C55526 * C60310 + C60317 + C60317 + C141216 * C60312) * C141320 *
               C55525) *
              C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C47712 * C108 + C47719 + C47719 + C47707 * C120 + C47714 * C109 +
            C47720 + C47720 + C47708 * C121 + C47716 * C110 + C47721 + C47721 +
            C47709 * C122) *
               C141320 * C47710 +
           (C48584 + C48585 + C48586) * C141320 * C141358) *
              C5322 -
          ((C52204 + C52205 + C52206) * C141320 * C141358 +
           (C47716 * C1599 + C49617 + C49617 + C47709 * C1609 + C47714 * C1600 +
            C49618 + C49618 + C47708 * C1610 + C47712 * C1601 + C49619 +
            C49619 + C47707 * C1611) *
               C141320 * C47710) *
              C5323 +
          ((C47712 * C5325 + C54868 + C54868 + C47707 * C5333 + C47714 * C5326 +
            C54869 + C54869 + C47708 * C5334 + C47716 * C5327 + C54870 +
            C54870 + C47709 * C5335) *
               C141320 * C47710 +
           (C47712 * C13301 + C54871 + C54871 + C47707 * C13309 +
            C47714 * C13302 + C54872 + C54872 + C47708 * C13310 +
            C47716 * C14876 + C54873 + C54873 + C47709 * C14878) *
               C141320 * C141358) *
              C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C55526 * C108 + C55529 + C55529 + C141216 * C120) * C14035 +
            C62512 * C14036 + C62513 * C14037) *
               C47710 +
           (C61503 + C61504 + C61522) * C141358) *
              C5322 -
          ((C65169 + C65163 + C65164) * C141358 +
           (C67937 * C14037 + C62513 * C14036 + C62512 * C14035) * C47710) *
              C5323 +
          ((C62513 * C14035 + C67937 * C14036 +
            (C55526 * C21308 + C67933 + C67933 + C141216 * C21312) * C14037) *
               C47710 +
           (C61519 * C14035 + C65168 * C14036 +
            (C55526 * C67927 + C67934 + C67934 + C141216 * C67929) * C14037) *
               C141358) *
              C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q));
    d2eexy[71] +=
        (-std::pow(Pi, 2.5) *
         (((C55590 * C108 + C55522 * C189 + C55591 * C823 + C55523 * C912 +
            C55592 * C2960 + C55524 * C3026 + C55593 * C6729 + C55525 * C6880) *
               C55527 +
           (C55590 * C114 + C55522 * C195 + C55591 * C828 + C55523 * C917 +
            C55592 * C2964 + C55524 * C3030 + C55593 * C6732 + C55525 * C6883) *
               C141216) *
              C141320 * C5322 -
          ((C55593 * C10553 + C55525 * C10679 + C55592 * C7890 +
            C55524 * C8009 + C55591 * C3494 + C55523 * C3576 + C55590 * C1606 +
            C55522 * C1695) *
               C141216 +
           (C55593 * C10551 + C55525 * C10677 + C55592 * C7887 +
            C55524 * C8006 + C55591 * C3490 + C55523 * C3572 + C55590 * C1601 +
            C55522 * C1690) *
               C55527) *
              C141320 * C5323 +
          ((C55590 * C5325 + C55522 * C5391 + C55591 * C13301 +
            C55523 * C13393 + C55592 * C13303 + C55524 * C13394 +
            C55593 * C60310 + C55525 * C60367) *
               C55527 +
           (C55590 * C5329 + C55522 * C5395 + C55591 * C13305 +
            C55523 * C13397 + C55592 * C13307 + C55524 * C13398 +
            C55593 * C60311 + C55525 * C60368) *
               C141216) *
              C141320 * C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C47810 * C108 + C47710 * C189 + C47811 * C823 + C141358 * C912) *
               C47713 +
           (C47810 * C114 + C47710 * C195 + C47811 * C828 + C141358 * C917) *
               C47707 +
           (C47837 + C47838) * C47715 + (C47839 + C47840) * C47708 +
           C47849 * C47717 + C47850 * C47709) *
              C141320 * C5322 -
          ((C49740 + C49741) * C47709 + (C49742 + C49743) * C47717 +
           (C49744 + C49745) * C47708 + (C49746 + C49747) * C47715 +
           (C47811 * C3494 + C141358 * C3576 + C47810 * C1606 +
            C47710 * C1695) *
               C47707 +
           (C47811 * C3490 + C141358 * C3572 + C47810 * C1601 +
            C47710 * C1690) *
               C47713) *
              C141320 * C5323 +
          ((C47810 * C5325 + C47710 * C5391 + C47811 * C13301 +
            C141358 * C13393) *
               C47713 +
           (C47810 * C5329 + C47710 * C5395 + C47811 * C13305 +
            C141358 * C13397) *
               C47707 +
           (C47810 * C5326 + C47710 * C5392 + C47811 * C13302 +
            C141358 * C13395) *
               C47715 +
           (C47810 * C5330 + C47710 * C5396 + C47811 * C13306 +
            C141358 * C13399) *
               C47708 +
           (C47810 * C5327 + C47710 * C5393 + C47811 * C14876 +
            C141358 * C14979) *
               C47717 +
           (C47810 * C5331 + C47710 * C5397 + C47811 * C14877 +
            C141358 * C14980) *
               C47709) *
              C141320 * C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47810 * C108 + C47710 * C189 + C47811 * C823 + C141358 * C912) *
                C55527 +
            (C47810 * C114 + C47710 * C195 + C47811 * C828 + C141358 * C917) *
                C141216) *
               C14035 +
           ((C62638 + C62639) * C55527 + (C62640 + C62641) * C141216) * C14036 +
           C68030 * C14037) *
              C5322 -
          (((C68026 + C68027) * C141216 + (C68028 + C68029) * C55527) * C14037 +
           ((C62645 + C62644) * C141216 + (C62643 + C62642) * C55527) * C14036 +
           ((C62641 + C62640) * C141216 + (C62639 + C62638) * C55527) *
               C14035) *
              C5323 +
          (C68030 * C14035 +
           ((C68029 + C68028) * C55527 + (C68027 + C68026) * C141216) * C14036 +
           ((C47810 * C21308 + C47710 * C21401 + C47811 * C67927 +
             C141358 * C68011) *
                C55527 +
            (C47810 * C21310 + C47710 * C21403 + C47811 * C67928 +
             C141358 * C68012) *
                C141216) *
               C14037) *
              C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q));
    d2eexz[71] +=
        (-std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141320 * C276) * C55527 +
            (C275 * C114 + C141320 * C282) * C141216) *
               C55522 +
           (C56197 + C56198) * C55523 + C58047 * C55524 + C58048 * C55525) *
              C5322 -
          ((C58623 + C58624) * C55525 + (C58617 + C58618) * C55524 +
           (C58619 + C58620) * C55523 +
           ((C275 * C1606 + C141320 * C1789) * C141216 +
            (C275 * C1601 + C141320 * C1784) * C55527) *
               C55522) *
              C5323 +
          (((C275 * C5325 + C141320 * C5449) * C55527 +
            (C275 * C5329 + C141320 * C5453) * C141216) *
               C55522 +
           ((C275 * C13301 + C141320 * C13475) * C55527 +
            (C275 * C13305 + C141320 * C13479) * C141216) *
               C55523 +
           ((C275 * C13303 + C141320 * C13477) * C55527 +
            (C275 * C13307 + C141320 * C13481) * C141216) *
               C55524 +
           ((C275 * C60310 + C141320 * C60419) * C55527 +
            (C275 * C60311 + C141320 * C60420) * C141216) *
               C55525) *
              C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141320 * C276) * C47713 +
            (C275 * C114 + C141320 * C282) * C47707 + C305 * C47715 +
            C306 * C47708 + C307 * C47717 + C308 * C47709) *
               C47710 +
           (C48810 + C48811 + C48812 + C48813 + C48814 + C48815) * C141358) *
              C5322 -
          ((C52403 + C52404 + C52405 + C52406 + C52407 + C52408) * C141358 +
           (C1806 * C47709 + C1807 * C47717 + C1808 * C47708 + C1809 * C47715 +
            (C275 * C1606 + C141320 * C1789) * C47707 +
            (C275 * C1601 + C141320 * C1784) * C47713) *
               C47710) *
              C5323 +
          (((C275 * C5325 + C141320 * C5449) * C47713 +
            (C275 * C5329 + C141320 * C5453) * C47707 +
            (C275 * C5326 + C141320 * C5450) * C47715 +
            (C275 * C5330 + C141320 * C5454) * C47708 +
            (C275 * C5327 + C141320 * C5451) * C47717 +
            (C275 * C5331 + C141320 * C5455) * C47709) *
               C47710 +
           ((C275 * C13301 + C141320 * C13475) * C47713 +
            (C275 * C13305 + C141320 * C13479) * C47707 +
            (C275 * C13302 + C141320 * C13476) * C47715 +
            (C275 * C13306 + C141320 * C13480) * C47708 +
            (C275 * C14876 + C141320 * C15091) * C47717 +
            (C275 * C14877 + C141320 * C15092) * C47709) *
               C141358) *
              C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C14204 * C108 + C14035 * C276 + C14205 * C1601 + C14036 * C1784 +
             C14206 * C5325 + C14037 * C5449) *
                C55527 +
            (C14204 * C114 + C14035 * C282 + C14205 * C1606 + C14036 * C1789 +
             C14206 * C5329 + C14037 * C5453) *
                C141216) *
               C47710 +
           ((C61733 + C61734 + C61735) * C55527 +
            (C61736 + C61737 + C61738) * C141216) *
               C141358) *
              C5322 -
          (((C65406 + C65407 + C65408) * C141216 +
            (C65409 + C65410 + C65411) * C55527) *
               C141358 +
           ((C14206 * C15865 + C14037 * C16154 + C14205 * C5329 +
             C14036 * C5453 + C14204 * C1606 + C14035 * C1789) *
                C141216 +
            (C14206 * C15862 + C14037 * C16151 + C14205 * C5325 +
             C14036 * C5449 + C14204 * C1601 + C14035 * C1784) *
                C55527) *
               C47710) *
              C5323 +
          (((C14204 * C5325 + C14035 * C5449 + C14205 * C15862 +
             C14036 * C16151 + C14206 * C21308 + C14037 * C21492) *
                C55527 +
            (C14204 * C5329 + C14035 * C5453 + C14205 * C15865 +
             C14036 * C16154 + C14206 * C21310 + C14037 * C21494) *
                C141216) *
               C47710 +
           ((C14204 * C13301 + C14035 * C13475 + C14205 * C18582 +
             C14036 * C18820 + C14206 * C67927 + C14037 * C68104) *
                C55527 +
            (C14204 * C13305 + C14035 * C13479 + C14205 * C18584 +
             C14036 * C18822 + C14206 * C67928 + C14037 * C68105) *
                C141216) *
               C141358) *
              C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q));
    d2eeyx[71] +=
        (-std::pow(Pi, 2.5) *
         (((C55527 * C108 + C141216 * C114) * C55590 +
           (C55527 * C189 + C141216 * C362) * C55522 + C56299 * C55591 +
           C56300 * C55523 + C56301 * C55592 + C56302 * C55524 +
           C56303 * C55593 + C56304 * C55525) *
              C141320 * C5322 -
          (C58704 * C55525 + C58705 * C55593 + C58706 * C55524 +
           C58707 * C55592 + C58708 * C55523 + C58709 * C55591 +
           (C55527 * C1690 + C141216 * C1878) * C55522 +
           (C55527 * C1601 + C141216 * C1606) * C55590) *
              C141320 * C5323 +
          ((C55527 * C5325 + C141216 * C5329) * C55590 +
           (C55527 * C5391 + C141216 * C5507) * C55522 +
           (C55527 * C13301 + C141216 * C13305) * C55591 +
           (C55527 * C13393 + C141216 * C13557) * C55523 +
           (C55527 * C13303 + C141216 * C13307) * C55592 +
           (C55527 * C13394 + C141216 * C13559) * C55524 +
           (C55527 * C60310 + C141216 * C60311) * C55593 +
           (C55527 * C60367 + C141216 * C60471) * C55525) *
              C141320 * C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C47713 * C108 + C47707 * C114 + C47715 * C109 + C47708 * C115 +
            C47717 * C110 + C47709 * C116) *
               C47810 +
           (C47713 * C189 + C47707 * C362 + C47715 * C190 + C47708 * C363 +
            C47717 * C191 + C47709 * C364) *
               C47710 +
           (C48944 + C48945 + C48946) * C47811 +
           (C48947 + C48948 + C48949) * C141358) *
              C141320 * C5322 -
          ((C52519 + C52520 + C52521) * C141358 +
           (C52522 + C52523 + C52524) * C47811 +
           (C47717 * C1688 + C47709 * C1876 + C47715 * C1689 + C47708 * C1877 +
            C47713 * C1690 + C47707 * C1878) *
               C47710 +
           (C47717 * C1599 + C47709 * C1604 + C47715 * C1600 + C47708 * C1605 +
            C47713 * C1601 + C47707 * C1606) *
               C47810) *
              C141320 * C5323 +
          ((C47713 * C5325 + C47707 * C5329 + C47715 * C5326 + C47708 * C5330 +
            C47717 * C5327 + C47709 * C5331) *
               C47810 +
           (C47713 * C5391 + C47707 * C5507 + C47715 * C5392 + C47708 * C5508 +
            C47717 * C5393 + C47709 * C5509) *
               C47710 +
           (C47713 * C13301 + C47707 * C13305 + C47715 * C13302 +
            C47708 * C13306 + C47717 * C14876 + C47709 * C14877) *
               C47811 +
           (C47713 * C13393 + C47707 * C13557 + C47715 * C13395 +
            C47708 * C13558 + C47717 * C14979 + C47709 * C15209) *
               C141358) *
              C141320 * C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C55527 * C108 + C141216 * C114) * C47810 +
            (C55527 * C189 + C141216 * C362) * C47710 + C56299 * C47811 +
            C56300 * C141358) *
               C14035 +
           (C62878 + C62879 + C62850 + C62851) * C14036 + C68192 * C14037) *
              C5322 -
          ((C68183 + C68184 + C68193 + C68194) * C14037 +
           (C62857 + C62856 + C62881 + C62880) * C14036 +
           (C62851 + C62850 + C62879 + C62878) * C14035) *
              C5323 +
          (C68192 * C14035 + (C68194 + C68193 + C68184 + C68183) * C14036 +
           ((C55527 * C21308 + C141216 * C21310) * C47810 +
            (C55527 * C21401 + C141216 * C21570) * C47710 +
            (C55527 * C67927 + C141216 * C67928) * C47811 +
            (C55527 * C68011 + C141216 * C68180) * C141358) *
               C14037) *
              C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q));
    d2eeyy[71] +=
        (-std::pow(Pi, 2.5) *
         ((C55744 * C108 + C55749 + C55749 + C55522 * C419 + C55745 * C823 +
           C55750 + C55750 + C55523 * C1171 + C55746 * C2960 + C55751 + C55751 +
           C55524 * C3196 + C55747 * C6729 + C55752 + C55752 + C55525 * C7289) *
              C141216 * C141320 * C5322 -
          (C55747 * C10551 + C57017 + C57017 + C55525 * C11025 +
           C55746 * C7887 + C57018 + C57018 + C55524 * C8345 + C55745 * C3490 +
           C57019 + C57019 + C55523 * C3790 + C55744 * C1601 + C57020 + C57020 +
           C55522 * C1949) *
              C141216 * C141320 * C5323 +
          (C55744 * C5325 + C60524 + C60524 + C55522 * C5561 + C55745 * C13301 +
           C60525 + C60525 + C55523 * C13635 + C55746 * C13303 + C60526 +
           C60526 + C55524 * C13636 + C55747 * C60310 + C60527 + C60527 +
           C55525 * C60522) *
              C141216 * C141320 * C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C48072 * C108 + C48075 + C48075 + C47710 * C419 + C48073 * C823 +
            C48076 + C48076 + C141358 * C1171) *
               C47707 +
           (C48109 + C48110) * C47708 + C48115 * C47709) *
              C141320 * C5322 -
          ((C50066 + C50067) * C47709 + (C50068 + C50069) * C47708 +
           (C48073 * C3490 + C50054 + C50054 + C141358 * C3790 +
            C48072 * C1601 + C50055 + C50055 + C47710 * C1949) *
               C47707) *
              C141320 * C5323 +
          ((C48072 * C5325 + C55170 + C55170 + C47710 * C5561 +
            C48073 * C13301 + C55171 + C55171 + C141358 * C13635) *
               C47707 +
           (C48072 * C5326 + C55172 + C55172 + C47710 * C5562 +
            C48073 * C13302 + C55173 + C55173 + C141358 * C13637) *
               C47708 +
           (C48072 * C5327 + C55174 + C55174 + C47710 * C5563 +
            C48073 * C14876 + C55175 + C55175 + C141358 * C15308) *
               C47709) *
              C141320 * C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C48072 * C108 + C48075 + C48075 + C47710 * C419 + C48073 * C823 +
            C48076 + C48076 + C141358 * C1171) *
               C141216 * C14035 +
           (C63012 + C63013) * C141216 * C14036 + C68277 * C14037) *
              C5322 -
          ((C68282 + C68283) * C141216 * C14037 +
           (C63015 + C63014) * C141216 * C14036 +
           (C63013 + C63012) * C141216 * C14035) *
              C5323 +
          (C68277 * C14035 + (C68283 + C68282) * C141216 * C14036 +
           (C48072 * C21308 + C68275 + C68275 + C47710 * C21663 +
            C48073 * C67927 + C68276 + C68276 + C141358 * C68268) *
               C141216 * C14037) *
              C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q));
    d2eeyz[71] +=
        (-std::pow(Pi, 2.5) *
         (((C275 * C108 + C141320 * C276) * C55590 +
           (C275 * C189 + C141320 * C501) * C55522 + C7032 * C55591 +
           C7428 * C55523 + C7034 * C55592 + C7429 * C55524 + C9954 * C55593 +
           C10208 * C55525) *
              C141216 * C5322 -
          (C58850 * C55525 + C58622 * C55593 + C11138 * C55524 +
           C10797 * C55592 + C11139 * C55523 + C10799 * C55591 +
           (C275 * C1690 + C141320 * C2040) * C55522 +
           (C275 * C1601 + C141320 * C1784) * C55590) *
              C141216 * C5323 +
          ((C275 * C5325 + C141320 * C5449) * C55590 +
           (C275 * C5391 + C141320 * C5619) * C55522 +
           (C275 * C13301 + C141320 * C13475) * C55591 +
           (C275 * C13393 + C141320 * C13719) * C55523 +
           (C275 * C13303 + C141320 * C13477) * C55592 +
           (C275 * C13394 + C141320 * C13720) * C55524 +
           (C275 * C60310 + C141320 * C60419) * C55593 +
           (C275 * C60367 + C141320 * C60577) * C55525) *
              C141216 * C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141320 * C276) * C47810 +
            (C275 * C189 + C141320 * C501) * C47710 + C7032 * C47811 +
            C7428 * C141358) *
               C47707 +
           (C48190 + C48191 + C48192 + C48193) * C47708 + C48204 * C47709) *
              C5322 -
          ((C50168 + C50169 + C50170 + C50171) * C47709 +
           (C50172 + C50173 + C50174 + C50175) * C47708 +
           (C11139 * C141358 + C10799 * C47811 +
            (C275 * C1690 + C141320 * C2040) * C47710 +
            (C275 * C1601 + C141320 * C1784) * C47810) *
               C47707) *
              C5323 +
          (((C275 * C5325 + C141320 * C5449) * C47810 +
            (C275 * C5391 + C141320 * C5619) * C47710 +
            (C275 * C13301 + C141320 * C13475) * C47811 +
            (C275 * C13393 + C141320 * C13719) * C141358) *
               C47707 +
           ((C275 * C5326 + C141320 * C5450) * C47810 +
            (C275 * C5392 + C141320 * C5620) * C47710 +
            (C275 * C13302 + C141320 * C13476) * C47811 +
            (C275 * C13395 + C141320 * C13721) * C141358) *
               C47708 +
           ((C275 * C5327 + C141320 * C5451) * C47810 +
            (C275 * C5393 + C141320 * C5621) * C47710 +
            (C275 * C14876 + C141320 * C15091) * C47811 +
            (C275 * C14979 + C141320 * C15420) * C141358) *
               C47709) *
              C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C14204 * C108 + C14035 * C276 + C14205 * C1601 + C14036 * C1784 +
            C14206 * C5325 + C14037 * C5449) *
               C47810 +
           (C14204 * C189 + C14035 * C501 + C14205 * C1690 + C14036 * C2040 +
            C14206 * C5391 + C14037 * C5619) *
               C47710 +
           (C61733 + C61734 + C61735) * C47811 +
           (C62061 + C62062 + C62063) * C141358) *
              C141216 * C5322 -
          ((C65751 + C65752 + C65753) * C141358 +
           (C65409 + C65410 + C65411) * C47811 +
           (C14206 * C16013 + C14037 * C16549 + C14205 * C5391 +
            C14036 * C5619 + C14204 * C1690 + C14035 * C2040) *
               C47710 +
           (C14206 * C15862 + C14037 * C16151 + C14205 * C5325 +
            C14036 * C5449 + C14204 * C1601 + C14035 * C1784) *
               C47810) *
              C141216 * C5323 +
          ((C14204 * C5325 + C14035 * C5449 + C14205 * C15862 +
            C14036 * C16151 + C14206 * C21308 + C14037 * C21492) *
               C47810 +
           (C14204 * C5391 + C14035 * C5619 + C14205 * C16013 +
            C14036 * C16549 + C14206 * C21401 + C14037 * C21749) *
               C47710 +
           (C14204 * C13301 + C14035 * C13475 + C14205 * C18582 +
            C14036 * C18820 + C14206 * C67927 + C14037 * C68104) *
               C47811 +
           (C14204 * C13393 + C14035 * C13719 + C14205 * C18698 +
            C14036 * C19150 + C14206 * C68011 + C14037 * C68357) *
               C141358) *
              C141216 * C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q));
    d2eezx[71] +=
        (-std::pow(Pi, 2.5) *
         ((((C55527 * C108 + C141216 * C114) * C275 +
            (C55527 * C276 + C141216 * C579) * C141320) *
               C55522 +
           (C56517 + C56541) * C55523 + C58274 * C55524 + C58275 * C55525) *
              C5322 -
          ((C58930 + C58920) * C55525 + (C58931 + C58923) * C55524 +
           (C58932 + C58926) * C55523 +
           ((C55527 * C1784 + C141216 * C2126) * C141320 +
            (C55527 * C1601 + C141216 * C1606) * C275) *
               C55522) *
              C5323 +
          (((C55527 * C5325 + C141216 * C5329) * C275 +
            (C55527 * C5449 + C141216 * C5673) * C141320) *
               C55522 +
           ((C55527 * C13301 + C141216 * C13305) * C275 +
            (C55527 * C13475 + C141216 * C13797) * C141320) *
               C55523 +
           ((C55527 * C13303 + C141216 * C13307) * C275 +
            (C55527 * C13477 + C141216 * C13799) * C141320) *
               C55524 +
           ((C55527 * C60310 + C141216 * C60311) * C275 +
            (C55527 * C60419 + C141216 * C60628) * C141320) *
               C55525) *
              C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47713 * C108 + C47707 * C114 + C47715 * C109 + C47708 * C115 +
             C47717 * C110 + C47709 * C116) *
                C275 +
            (C47713 * C276 + C47707 * C579 + C47715 * C277 + C47708 * C580 +
             C47717 * C278 + C47709 * C581) *
                C141320) *
               C47710 +
           ((C48944 + C48945 + C48946) * C275 +
            (C49298 + C49299 + C49300) * C141320) *
               C141358) *
              C5322 -
          (((C52831 + C52832 + C52833) * C141320 +
            (C52522 + C52523 + C52524) * C275) *
               C141358 +
           ((C47717 * C1782 + C47709 * C2124 + C47715 * C1783 + C47708 * C2125 +
             C47713 * C1784 + C47707 * C2126) *
                C141320 +
            (C47717 * C1599 + C47709 * C1604 + C47715 * C1600 + C47708 * C1605 +
             C47713 * C1601 + C47707 * C1606) *
                C275) *
               C47710) *
              C5323 +
          (((C47713 * C5325 + C47707 * C5329 + C47715 * C5326 + C47708 * C5330 +
             C47717 * C5327 + C47709 * C5331) *
                C275 +
            (C47713 * C5449 + C47707 * C5673 + C47715 * C5450 + C47708 * C5674 +
             C47717 * C5451 + C47709 * C5675) *
                C141320) *
               C47710 +
           ((C47713 * C13301 + C47707 * C13305 + C47715 * C13302 +
             C47708 * C13306 + C47717 * C14876 + C47709 * C14877) *
                C275 +
            (C47713 * C13475 + C47707 * C13797 + C47715 * C13476 +
             C47708 * C13798 + C47717 * C15091 + C47709 * C15528) *
                C141320) *
               C141358) *
              C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C55527 * C108 + C141216 * C114) * C14204 +
            (C55527 * C276 + C141216 * C579) * C14035 + C62870 * C14205 +
            C63222 * C14036 + C62872 * C14206 + C63223 * C14037) *
               C47710 +
           (C62162 + C62163 + C62164 + C62165 + C62166 + C62180) * C141358) *
              C5322 -
          ((C65861 + C65855 + C65856 + C65857 + C65858 + C65859) * C141358 +
           (C68436 * C14037 + C68191 * C14206 + C63223 * C14036 +
            C62872 * C14205 + C63222 * C14035 + C62870 * C14204) *
               C47710) *
              C5323 +
          ((C62872 * C14204 + C63223 * C14035 + C68191 * C14205 +
            C68436 * C14036 + (C55527 * C21308 + C141216 * C21310) * C14206 +
            (C55527 * C21492 + C141216 * C21825) * C14037) *
               C47710 +
           (C61849 * C14204 + C62177 * C14035 + C65524 * C14205 +
            C65860 * C14036 + (C55527 * C67927 + C141216 * C67928) * C14206 +
            (C55527 * C68104 + C141216 * C68432) * C14037) *
               C141358) *
              C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q));
    d2eezy[71] +=
        (-std::pow(Pi, 2.5) *
         (((C55590 * C108 + C55522 * C189 + C55591 * C823 + C55523 * C912 +
            C55592 * C2960 + C55524 * C3026 + C55593 * C6729 + C55525 * C6880) *
               C275 +
           (C55590 * C276 + C55522 * C635 + C55591 * C1006 + C55523 * C1419 +
            C55592 * C3084 + C55524 * C3362 + C55593 * C7002 + C55525 * C7655) *
               C141320) *
              C141216 * C5322 -
          ((C55593 * C10779 + C55525 * C11349 + C55592 * C8128 +
            C55524 * C8684 + C55591 * C3646 + C55523 * C4004 + C55590 * C1784 +
            C55522 * C2197) *
               C141320 +
           (C55593 * C10551 + C55525 * C10677 + C55592 * C7887 +
            C55524 * C8006 + C55591 * C3490 + C55523 * C3572 + C55590 * C1601 +
            C55522 * C1690) *
               C275) *
              C141216 * C5323 +
          ((C55590 * C5325 + C55522 * C5391 + C55591 * C13301 +
            C55523 * C13393 + C55592 * C13303 + C55524 * C13394 +
            C55593 * C60310 + C55525 * C60367) *
               C275 +
           (C55590 * C5449 + C55522 * C5727 + C55591 * C13475 +
            C55523 * C13875 + C55592 * C13477 + C55524 * C13876 +
            C55593 * C60419 + C55525 * C60679) *
               C141320) *
              C141216 * C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47810 * C108 + C47710 * C189 + C47811 * C823 + C141358 * C912) *
                C275 +
            (C47810 * C276 + C47710 * C635 + C47811 * C1006 + C141358 * C1419) *
                C141320) *
               C47707 +
           ((C47837 + C47838) * C275 + (C48366 + C48367) * C141320) * C47708 +
           C48374 * C47709) *
              C5322 -
          (((C50380 + C50381) * C141320 + (C49742 + C49743) * C275) * C47709 +
           ((C50382 + C50383) * C141320 + (C49746 + C49747) * C275) * C47708 +
           ((C47811 * C3646 + C141358 * C4004 + C47810 * C1784 +
             C47710 * C2197) *
                C141320 +
            (C47811 * C3490 + C141358 * C3572 + C47810 * C1601 +
             C47710 * C1690) *
                C275) *
               C47707) *
              C5323 +
          (((C47810 * C5325 + C47710 * C5391 + C47811 * C13301 +
             C141358 * C13393) *
                C275 +
            (C47810 * C5449 + C47710 * C5727 + C47811 * C13475 +
             C141358 * C13875) *
                C141320) *
               C47707 +
           ((C47810 * C5326 + C47710 * C5392 + C47811 * C13302 +
             C141358 * C13395) *
                C275 +
            (C47810 * C5450 + C47710 * C5728 + C47811 * C13476 +
             C141358 * C13877) *
                C141320) *
               C47708 +
           ((C47810 * C5327 + C47710 * C5393 + C47811 * C14876 +
             C141358 * C14979) *
                C275 +
            (C47810 * C5451 + C47710 * C5729 + C47811 * C15091 +
             C141358 * C15627) *
                C141320) *
               C47709) *
              C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C47810 * C108 + C47710 * C189 + C47811 * C823 + C141358 * C912) *
               C14204 +
           (C47810 * C276 + C47710 * C635 + C47811 * C1006 + C141358 * C1419) *
               C14035 +
           (C62638 + C62639) * C14205 + (C63336 + C63337) * C14036 +
           C68014 * C14206 + C68512 * C14037) *
              C141216 * C5322 -
          ((C68517 + C68518) * C14037 + (C68028 + C68029) * C14206 +
           (C63339 + C63338) * C14036 + (C62643 + C62642) * C14205 +
           (C63337 + C63336) * C14035 + (C62639 + C62638) * C14204) *
              C141216 * C5323 +
          (C68014 * C14204 + C68512 * C14035 + (C68029 + C68028) * C14205 +
           (C68518 + C68517) * C14036 +
           (C47810 * C21308 + C47710 * C21401 + C47811 * C67927 +
            C141358 * C68011) *
               C14206 +
           (C47810 * C21492 + C47710 * C21908 + C47811 * C68104 +
            C141358 * C68510) *
               C14037) *
              C141216 * C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q));
    d2eezz[71] +=
        (-std::pow(Pi, 2.5) *
         (((C713 * C108 + C721 + C721 + C141320 * C714) * C55522 +
           C7785 * C55523 + C7786 * C55524 + C10453 * C55525) *
              C141216 * C5322 -
          (C59072 * C55525 + C11462 * C55524 + C11463 * C55523 +
           (C713 * C1601 + C2295 + C2295 + C141320 * C2283) * C55522) *
              C141216 * C5323 +
          ((C713 * C5325 + C5786 + C5786 + C141320 * C5781) * C55522 +
           (C713 * C13301 + C13958 + C13958 + C141320 * C13953) * C55523 +
           (C713 * C13303 + C13959 + C13959 + C141320 * C13954) * C55524 +
           (C713 * C60310 + C60732 + C60732 + C141320 * C60730) * C55525) *
              C141216 * C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C141320 * C714) * C47710 +
            C7785 * C141358) *
               C47707 +
           (C48449 + C48450) * C47708 + C48455 * C47709) *
              C5322 -
          ((C50482 + C50483) * C47709 + (C50484 + C50485) * C47708 +
           (C11463 * C141358 +
            (C713 * C1601 + C2295 + C2295 + C141320 * C2283) * C47710) *
               C47707) *
              C5323 +
          (((C713 * C5325 + C5786 + C5786 + C141320 * C5781) * C47710 +
            (C713 * C13301 + C13958 + C13958 + C141320 * C13953) * C141358) *
               C47707 +
           ((C713 * C5326 + C5787 + C5787 + C141320 * C5782) * C47710 +
            (C713 * C13302 + C13960 + C13960 + C141320 * C13955) * C141358) *
               C47708 +
           ((C713 * C5327 + C5788 + C5788 + C141320 * C5783) * C47710 +
            (C713 * C14876 + C29848 + C29848 + C141320 * C15738) * C141358) *
               C47709) *
              C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C14733 * C108 + C14737 + C14737 + C14035 * C714 + C14734 * C1601 +
            C14738 + C14738 + C14036 * C2283 + C14735 * C5325 + C14739 +
            C14739 + C14037 * C5781) *
               C47710 +
           (C62391 + C62392 + C62393) * C141358) *
              C141216 * C5322 -
          ((C66087 + C66088 + C66089) * C141358 +
           (C14735 * C15862 + C16912 + C16912 + C14037 * C16900 +
            C14734 * C5325 + C16913 + C16913 + C14036 * C5781 + C14733 * C1601 +
            C16914 + C16914 + C14035 * C2283) *
               C47710) *
              C141216 * C5323 +
          ((C14733 * C5325 + C21990 + C21990 + C14035 * C5781 +
            C14734 * C15862 + C21991 + C21991 + C14036 * C16900 +
            C14735 * C21308 + C21992 + C21992 + C14037 * C21987) *
               C47710 +
           (C14733 * C13301 + C68594 + C68594 + C14035 * C13953 +
            C14734 * C18582 + C68595 + C68595 + C14036 * C19462 +
            C14735 * C67927 + C68596 + C68596 + C14037 * C68592) *
               C141358) *
              C141216 * C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q));
    d2eexx[72] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C68675 * C108 + C68680 + C68680 + C141452 * C120 + C68677 * C109 +
             C68681 + C68681 + C141221 * C121) *
                C141469 +
            (C68675 * C1601 + C70587 + C70587 + C141452 * C1611 +
             C68677 * C1600 + C70586 + C70586 + C141221 * C1610) *
                C141384) *
               C47710 +
           ((C69544 + C69545) * C141469 + (C73156 + C73155) * C141384) *
               C141358) *
              C141294 * C141277 * C97 -
          (((C68677 * C3492 + C70591 + C70591 + C141221 * C3500 +
             C68675 * C3491 + C70590 + C70590 + C141452 * C3499) *
                C141384 +
            (C69549 + C69548) * C141469) *
               C141358 +
           ((C68677 * C1599 + C70589 + C70589 + C141221 * C1609 +
             C68675 * C1600 + C70588 + C70588 + C141452 * C1610) *
                C141384 +
            (C68677 * C110 + C68690 + C68690 + C141221 * C122 + C68675 * C109 +
             C68691 + C68691 + C141452 * C121) *
                C141469) *
               C47710) *
              C141294 * C141277 * C98 +
          (((C68675 * C110 + C68692 + C68692 + C141452 * C122 + C68677 * C111 +
             C68693 + C68693 + C141221 * C123) *
                C141469 +
            (C68675 * C1599 + C76531 + C76531 + C141452 * C1609 +
             C68677 * C1598 + C76532 + C76532 + C141221 * C1608) *
                C141384) *
               C47710 +
           ((C68675 * C821 + C68694 + C68694 + C141452 * C831 + C68677 * C820 +
             C68695 + C68695 + C141221 * C830) *
                C141469 +
            (C68675 * C3492 + C76533 + C76533 + C141452 * C3500 +
             C68677 * C3493 + C76534 + C76534 + C141221 * C3501) *
                C141384) *
               C141358) *
              C141294 * C141277 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eexy[72] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47810 * C108 + C47710 * C189 + C47811 * C823 + C141358 * C912) *
                C139366 +
            (C47810 * C114 + C47710 * C195 + C47811 * C828 + C141358 * C917) *
                C141452 +
            (C47837 + C47838) * C139356 + (C47839 + C47840) * C141221) *
               C141469 +
           ((C62638 + C62639) * C139366 + (C62640 + C62641) * C141452 +
            (C49747 + C49746) * C139356 + (C49745 + C49744) * C141221) *
               C141384) *
              C141294 * C141277 * C97 -
          (((C49740 + C49741) * C141221 + (C49742 + C49743) * C139356 +
            (C49744 + C49745) * C141452 + (C49746 + C49747) * C139366) *
               C141384 +
           ((C47844 + C47843) * C141221 + (C47842 + C47841) * C139356 +
            (C47840 + C47839) * C141452 + (C47838 + C47837) * C139366) *
               C141469) *
              C141294 * C141277 * C98 +
          ((C47849 * C139366 + C47850 * C141452 + (C47848 + C47847) * C139356 +
            (C47846 + C47845) * C141221) *
               C141469 +
           ((C49743 + C49742) * C139366 + (C49741 + C49740) * C141452 +
            (C47810 * C1598 + C47710 * C1687 + C47811 * C3493 +
             C141358 * C3575) *
                C139356 +
            (C47810 * C1603 + C47710 * C1692 + C47811 * C3497 +
             C141358 * C3579) *
                C141221) *
               C141384) *
              C141294 * C141277 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eexz[72] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30075 * C108 + C141469 * C276 + C30076 * C1601 +
             C141384 * C1784) *
                C139366 +
            (C30075 * C114 + C141469 * C282 + C30076 * C1606 +
             C141384 * C1789) *
                C141452 +
            (C30102 + C30103) * C139356 + (C30104 + C30105) * C141221) *
               C47710 +
           ((C38926 + C38927) * C139366 + (C38928 + C38929) * C141452 +
            C38914 * C139356 + C38915 * C141221) *
               C141358) *
              C141294 * C141277 * C97 -
          (((C30957 + C30958) * C141221 + (C30959 + C30960) * C139356 +
            C38924 * C141452 + C38925 * C139366) *
               C141358 +
           ((C30109 + C30108) * C141221 + (C30107 + C30106) * C139356 +
            (C30105 + C30104) * C141452 + (C30103 + C30102) * C139366) *
               C47710) *
              C141294 * C141277 * C98 +
          ((C30114 * C139366 + C30115 * C141452 + (C30113 + C30112) * C139356 +
            (C30111 + C30110) * C141221) *
               C47710 +
           ((C30960 + C30959) * C139366 + (C30958 + C30957) * C141452 +
            (C30075 * C820 + C141469 * C1003 + C30076 * C3493 +
             C141384 * C3649) *
                C139356 +
            (C30075 * C825 + C141469 * C1008 + C30076 * C3497 +
             C141384 * C3653) *
                C141221) *
               C141358) *
              C141294 * C141277 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[72] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139366 * C108 + C141452 * C114 + C139356 * C109 +
             C141221 * C115) *
                C47810 +
            (C139366 * C189 + C141452 * C362 + C139356 * C190 +
             C141221 * C363) *
                C47710 +
            (C69912 + C69913) * C47811 + (C69914 + C69915) * C141358) *
               C141469 +
           ((C139366 * C1601 + C141452 * C1606 + C139356 * C1600 +
             C141221 * C1605) *
                C47810 +
            (C139366 * C1690 + C141452 * C1878 + C139356 * C1689 +
             C141221 * C1877) *
                C47710 +
            (C73482 + C73481) * C47811 + (C73480 + C73479) * C141358) *
               C141384) *
              C141294 * C141277 * C97 -
          (((C139356 * C3574 + C141221 * C3722 + C139366 * C3573 +
             C141452 * C3721) *
                C141358 +
            (C139356 * C3492 + C141221 * C3496 + C139366 * C3491 +
             C141452 * C3495) *
                C47811 +
            (C139356 * C1688 + C141221 * C1876 + C139366 * C1689 +
             C141452 * C1877) *
                C47710 +
            (C139356 * C1599 + C141221 * C1604 + C139366 * C1600 +
             C141452 * C1605) *
                C47810) *
               C141384 +
           ((C69923 + C69922) * C141358 + (C69921 + C69920) * C47811 +
            (C139356 * C191 + C141221 * C364 + C139366 * C190 +
             C141452 * C363) *
                C47710 +
            (C139356 * C110 + C141221 * C116 + C139366 * C109 +
             C141452 * C115) *
                C47810) *
               C141469) *
              C141294 * C141277 * C98 +
          (((C139366 * C110 + C141452 * C116 + C139356 * C111 +
             C141221 * C117) *
                C47810 +
            (C139366 * C191 + C141452 * C364 + C139356 * C192 +
             C141221 * C365) *
                C47710 +
            (C139366 * C821 + C141452 * C826 + C139356 * C820 +
             C141221 * C825) *
                C47811 +
            (C139366 * C910 + C141452 * C1098 + C139356 * C909 +
             C141221 * C1097) *
                C141358) *
               C141469 +
           ((C139366 * C1599 + C141452 * C1604 + C139356 * C1598 +
             C141221 * C1603) *
                C47810 +
            (C139366 * C1688 + C141452 * C1876 + C139356 * C1687 +
             C141221 * C1875) *
                C47710 +
            (C139366 * C3492 + C141452 * C3496 + C139356 * C3493 +
             C141221 * C3497) *
                C47811 +
            (C139366 * C3574 + C141452 * C3722 + C139356 * C3575 +
             C141221 * C3723) *
                C141358) *
               C141384) *
              C141294 * C141277 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[72] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C48072 * C108 + C48075 + C48075 + C47710 * C419 + C48073 * C823 +
             C48076 + C48076 + C141358 * C1171) *
                C141452 +
            (C48109 + C48110) * C141221) *
               C141469 +
           ((C63012 + C63013) * C141452 + (C50069 + C50068) * C141221) *
               C141384) *
              C141294 * C141277 * C97 -
          (((C50066 + C50067) * C141221 + (C50068 + C50069) * C141452) *
               C141384 +
           ((C48112 + C48111) * C141221 + (C48110 + C48109) * C141452) *
               C141469) *
              C141294 * C141277 * C98 +
          ((C48115 * C141452 + (C48114 + C48113) * C141221) * C141469 +
           ((C50067 + C50066) * C141452 +
            (C48072 * C1598 + C50056 + C50056 + C47710 * C1946 +
             C48073 * C3493 + C50057 + C50057 + C141358 * C3793) *
                C141221) *
               C141384) *
              C141294 * C141277 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[72] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30075 * C108 + C141469 * C276 + C30076 * C1601 +
             C141384 * C1784) *
                C47810 +
            (C30075 * C189 + C141469 * C501 + C30076 * C1690 +
             C141384 * C2040) *
                C47710 +
            (C38926 + C38927) * C47811 + (C39356 + C39357) * C141358) *
               C141452 +
           ((C30102 + C30103) * C47810 + (C30351 + C30352) * C47710 +
            C38914 * C47811 + C39350 * C141358) *
               C141221) *
              C141294 * C141277 * C97 -
          (((C31272 + C31273) * C141358 + (C30959 + C30960) * C47811 +
            (C30354 + C30353) * C47710 + (C30107 + C30106) * C47810) *
               C141221 +
           (C39355 * C141358 + C38925 * C47811 + (C30352 + C30351) * C47710 +
            (C30103 + C30102) * C47810) *
               C141452) *
              C141294 * C141277 * C98 +
          ((C30114 * C47810 + C30357 * C47710 + (C30960 + C30959) * C47811 +
            (C31273 + C31272) * C141358) *
               C141452 +
           ((C30113 + C30112) * C47810 + (C30356 + C30355) * C47710 +
            (C30075 * C820 + C141469 * C1003 + C30076 * C3493 +
             C141384 * C3649) *
                C47811 +
            (C30075 * C909 + C141469 * C1259 + C30076 * C3575 +
             C141384 * C3867) *
                C141358) *
               C141221) *
              C141294 * C141277 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eezx[72] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139366 * C108 + C141452 * C114 + C139356 * C109 +
             C141221 * C115) *
                C30075 +
            (C139366 * C276 + C141452 * C579 + C139356 * C277 +
             C141221 * C580) *
                C141469 +
            (C139366 * C1601 + C141452 * C1606 + C139356 * C1600 +
             C141221 * C1605) *
                C30076 +
            (C139366 * C1784 + C141452 * C2126 + C139356 * C1783 +
             C141221 * C2125) *
                C141384) *
               C47710 +
           ((C69912 + C69913) * C30075 + (C70268 + C70269) * C141469 +
            (C73482 + C73481) * C30076 + (C73794 + C73793) * C141384) *
               C141358) *
              C141294 * C141277 * C97 -
          (((C139356 * C3648 + C141221 * C3936 + C139366 * C3647 +
             C141452 * C3935) *
                C141384 +
            (C139356 * C3492 + C141221 * C3496 + C139366 * C3491 +
             C141452 * C3495) *
                C30076 +
            (C70273 + C70272) * C141469 + (C69921 + C69920) * C30075) *
               C141358 +
           ((C139356 * C1782 + C141221 * C2124 + C139366 * C1783 +
             C141452 * C2125) *
                C141384 +
            (C139356 * C1599 + C141221 * C1604 + C139366 * C1600 +
             C141452 * C1605) *
                C30076 +
            (C139356 * C278 + C141221 * C581 + C139366 * C277 +
             C141452 * C580) *
                C141469 +
            (C139356 * C110 + C141221 * C116 + C139366 * C109 +
             C141452 * C115) *
                C30075) *
               C47710) *
              C141294 * C141277 * C98 +
          (((C139366 * C110 + C141452 * C116 + C139356 * C111 +
             C141221 * C117) *
                C30075 +
            (C139366 * C278 + C141452 * C581 + C139356 * C279 +
             C141221 * C582) *
                C141469 +
            (C139366 * C1599 + C141452 * C1604 + C139356 * C1598 +
             C141221 * C1603) *
                C30076 +
            (C139366 * C1782 + C141452 * C2124 + C139356 * C1781 +
             C141221 * C2123) *
                C141384) *
               C47710 +
           ((C139366 * C821 + C141452 * C826 + C139356 * C820 +
             C141221 * C825) *
                C30075 +
            (C139366 * C1004 + C141452 * C1346 + C139356 * C1003 +
             C141221 * C1345) *
                C141469 +
            (C139366 * C3492 + C141452 * C3496 + C139356 * C3493 +
             C141221 * C3497) *
                C30076 +
            (C139366 * C3648 + C141452 * C3936 + C139356 * C3649 +
             C141221 * C3937) *
                C141384) *
               C141358) *
              C141294 * C141277 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eezy[72] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47810 * C108 + C47710 * C189 + C47811 * C823 + C141358 * C912) *
                C30075 +
            (C47810 * C276 + C47710 * C635 + C47811 * C1006 + C141358 * C1419) *
                C141469 +
            (C62638 + C62639) * C30076 + (C63336 + C63337) * C141384) *
               C141452 +
           ((C47837 + C47838) * C30075 + (C48366 + C48367) * C141469 +
            (C49747 + C49746) * C30076 + (C50383 + C50382) * C141384) *
               C141221) *
              C141294 * C141277 * C97 -
          (((C50380 + C50381) * C141384 + (C49742 + C49743) * C30076 +
            (C48369 + C48368) * C141469 + (C47842 + C47841) * C30075) *
               C141221 +
           ((C50382 + C50383) * C141384 + (C49746 + C49747) * C30076 +
            (C48367 + C48366) * C141469 + (C47838 + C47837) * C30075) *
               C141452) *
              C141294 * C141277 * C98 +
          ((C47849 * C30075 + C48372 * C141469 + (C49743 + C49742) * C30076 +
            (C50381 + C50380) * C141384) *
               C141452 +
           ((C47848 + C47847) * C30075 + (C48371 + C48370) * C141469 +
            (C47810 * C1598 + C47710 * C1687 + C47811 * C3493 +
             C141358 * C3575) *
                C30076 +
            (C47810 * C1781 + C47710 * C2194 + C47811 * C3649 +
             C141358 * C4007) *
                C141384) *
               C141221) *
              C141294 * C141277 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eezz[72] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30596 * C108 + C30599 + C30599 + C141469 * C714 + C30597 * C1601 +
             C30600 + C30600 + C141384 * C2283) *
                C47710 +
            (C39780 + C39781) * C141358) *
               C141452 +
           ((C30633 + C30634) * C47710 + C39766 * C141358) * C141221) *
              C141294 * C141277 * C97 -
          (((C31605 + C31606) * C141358 + (C30636 + C30635) * C47710) *
               C141221 +
           (C39771 * C141358 + (C30634 + C30633) * C47710) * C141452) *
              C141294 * C141277 * C98 +
          ((C30639 * C47710 + (C31606 + C31605) * C141358) * C141452 +
           ((C30638 + C30637) * C47710 +
            (C30596 * C820 + C31595 + C31595 + C141469 * C1502 +
             C30597 * C3493 + C31596 + C31596 + C141384 * C4077) *
                C141358) *
               C141221) *
              C141294 * C141277 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eexx[73] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C68675 * C108 + C68680 + C68680 + C141452 * C120 + C68677 * C109 +
              C68681 + C68681 + C141221 * C121) *
                 C141469 +
             (C68675 * C1601 + C70587 + C70587 + C141452 * C1611 +
              C68677 * C1600 + C70586 + C70586 + C141221 * C1610) *
                 C141384) *
                C47710 +
            ((C69544 + C69545) * C141469 + (C73156 + C73155) * C141384) *
                C141358) *
               C141294 * C816 -
           (((C73153 + C73154) * C141384 + (C69547 + C69546) * C141469) *
                C141358 +
            ((C73155 + C73156) * C141384 + (C69545 + C69544) * C141469) *
                C47710) *
               C141294 * C141485) *
              C818 +
          ((((C69548 + C69549) * C141469 + (C77457 + C77458) * C141384) *
                C47710 +
            ((C69550 + C69551) * C141469 +
             (C68675 * C7886 + C70592 + C70592 + C141452 * C7892 +
              C68677 * C7888 + C70593 + C70593 + C141221 * C7894) *
                 C141384) *
                C141358) *
               C141294 * C141485 -
           (((C77458 + C77457) * C141384 + (C69549 + C69548) * C141469) *
                C141358 +
            ((C68677 * C1599 + C70589 + C70589 + C141221 * C1609 +
              C68675 * C1600 + C70588 + C70588 + C141452 * C1610) *
                 C141384 +
             (C68677 * C110 + C68690 + C68690 + C141221 * C122 + C68675 * C109 +
              C68691 + C68691 + C141452 * C121) *
                 C141469) *
                C47710) *
               C141294 * C816) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eexy[73] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47810 * C108 + C47710 * C189 + C47811 * C823 + C141358 * C912) *
                 C139366 +
             (C47810 * C114 + C47710 * C195 + C47811 * C828 + C141358 * C917) *
                 C141452 +
             (C47837 + C47838) * C139356 + (C47839 + C47840) * C141221) *
                C141469 +
            ((C62638 + C62639) * C139366 + (C62640 + C62641) * C141452 +
             (C49747 + C49746) * C139356 + (C49745 + C49744) * C141221) *
                C141384) *
               C141294 * C816 -
           (((C77597 + C77598) * C141221 + (C77599 + C77600) * C139356 +
             (C65289 + C65288) * C141452 + (C65287 + C65286) * C139366) *
                C141384 +
            ((C48708 + C48709) * C141221 + (C48710 + C48711) * C139356 +
             (C47811 * C2964 + C141358 * C3030 + C47810 * C828 +
              C47710 * C917) *
                 C141452 +
             (C47811 * C2960 + C141358 * C3026 + C47810 * C823 +
              C47710 * C912) *
                 C139366) *
                C141469) *
               C141294 * C141485) *
              C818 +
          ((((C48711 + C48710) * C139366 + (C48709 + C48708) * C141452 +
             (C48707 + C48706) * C139356 + (C48705 + C48704) * C141221) *
                C141469 +
            ((C77600 + C77599) * C139366 + (C77598 + C77597) * C141452 +
             (C47810 * C3492 + C47710 * C3574 + C47811 * C7888 +
              C141358 * C8007) *
                 C139356 +
             (C47810 * C3496 + C47710 * C3578 + C47811 * C7891 +
              C141358 * C8010) *
                 C141221) *
                C141384) *
               C141294 * C141485 -
           (((C49740 + C49741) * C141221 + (C49742 + C49743) * C139356 +
             (C49744 + C49745) * C141452 + (C49746 + C49747) * C139366) *
                C141384 +
            ((C47844 + C47843) * C141221 + (C47842 + C47841) * C139356 +
             (C47840 + C47839) * C141452 + (C47838 + C47837) * C139366) *
                C141469) *
               C141294 * C816) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eexz[73] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30075 * C108 + C141469 * C276 + C30076 * C1601 +
              C141384 * C1784) *
                 C139366 +
             (C30075 * C114 + C141469 * C282 + C30076 * C1606 +
              C141384 * C1789) *
                 C141452 +
             (C30102 + C30103) * C139356 + (C30104 + C30105) * C141221) *
                C47710 +
            ((C38926 + C38927) * C139366 + (C38928 + C38929) * C141452 +
             C38914 * C139356 + C38915 * C141221) *
                C141358) *
               C141294 * C816 -
           (((C38930 + C38931) * C141221 + (C38932 + C38933) * C139356 +
             (C42518 + C42519) * C141452 + (C42520 + C42521) * C139366) *
                C141358 +
            (C38924 * C141221 + C38925 * C139356 + (C38929 + C38928) * C141452 +
             (C38927 + C38926) * C139366) *
                C47710) *
               C141294 * C141485) *
              C818 +
          (((C38914 * C139366 + C38915 * C141452 + (C30960 + C30959) * C139356 +
             (C30958 + C30957) * C141221) *
                C47710 +
            ((C38933 + C38932) * C139366 + (C38931 + C38930) * C141452 +
             (C30075 * C2962 + C141469 * C3086 + C30076 * C7888 +
              C141384 * C8129) *
                 C139356 +
             (C30075 * C2966 + C141469 * C3090 + C30076 * C7891 +
              C141384 * C8132) *
                 C141221) *
                C141358) *
               C141294 * C141485 -
           (((C30957 + C30958) * C141221 + (C30959 + C30960) * C139356 +
             C38924 * C141452 + C38925 * C139366) *
                C141358 +
            ((C30109 + C30108) * C141221 + (C30107 + C30106) * C139356 +
             (C30105 + C30104) * C141452 + (C30103 + C30102) * C139366) *
                C47710) *
               C141294 * C816) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[73] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139366 * C108 + C141452 * C114 + C139356 * C109 +
              C141221 * C115) *
                 C47810 +
             (C139366 * C189 + C141452 * C362 + C139356 * C190 +
              C141221 * C363) *
                 C47710 +
             (C69912 + C69913) * C47811 + (C69914 + C69915) * C141358) *
                C141469 +
            ((C139366 * C1601 + C141452 * C1606 + C139356 * C1600 +
              C141221 * C1605) *
                 C47810 +
             (C139366 * C1690 + C141452 * C1878 + C139356 * C1689 +
              C141221 * C1877) *
                 C47710 +
             (C73482 + C73481) * C47811 + (C73480 + C73479) * C141358) *
                C141384) *
               C141294 * C816 -
           (((C73475 + C73476) * C141358 + (C73477 + C73478) * C47811 +
             (C73479 + C73480) * C47710 + (C73481 + C73482) * C47810) *
                C141384 +
            ((C69919 + C69918) * C141358 + (C69917 + C69916) * C47811 +
             (C69915 + C69914) * C47710 + (C69913 + C69912) * C47810) *
                C141469) *
               C141294 * C141485) *
              C818 +
          ((((C69920 + C69921) * C47810 + (C69922 + C69923) * C47710 +
             (C69924 + C69925) * C47811 + (C69926 + C69927) * C141358) *
                C141469 +
            ((C77869 + C77870) * C47810 + (C77871 + C77872) * C47710 +
             (C139366 * C7886 + C141452 * C7889 + C139356 * C7888 +
              C141221 * C7891) *
                 C47811 +
             (C139366 * C8005 + C141452 * C8243 + C139356 * C8007 +
              C141221 * C8245) *
                 C141358) *
                C141384) *
               C141294 * C141485 -
           (((C77872 + C77871) * C141358 + (C77870 + C77869) * C47811 +
             (C139356 * C1688 + C141221 * C1876 + C139366 * C1689 +
              C141452 * C1877) *
                 C47710 +
             (C139356 * C1599 + C141221 * C1604 + C139366 * C1600 +
              C141452 * C1605) *
                 C47810) *
                C141384 +
            ((C69923 + C69922) * C141358 + (C69921 + C69920) * C47811 +
             (C139356 * C191 + C141221 * C364 + C139366 * C190 +
              C141452 * C363) *
                 C47710 +
             (C139356 * C110 + C141221 * C116 + C139366 * C109 +
              C141452 * C115) *
                 C47810) *
                C141469) *
               C141294 * C816) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[73] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48072 * C108 + C48075 + C48075 + C47710 * C419 + C48073 * C823 +
              C48076 + C48076 + C141358 * C1171) *
                 C141452 +
             (C48109 + C48110) * C141221) *
                C141469 +
            ((C63012 + C63013) * C141452 + (C50069 + C50068) * C141221) *
                C141384) *
               C141294 * C816 -
           (((C78011 + C78012) * C141221 + (C65643 + C65642) * C141452) *
                C141384 +
            ((C49080 + C49081) * C141221 +
             (C48073 * C2960 + C49066 + C49066 + C141358 * C3196 +
              C48072 * C823 + C49067 + C49067 + C47710 * C1171) *
                 C141452) *
                C141469) *
               C141294 * C141485) *
              C818 +
          ((((C49081 + C49080) * C141452 + (C49079 + C49078) * C141221) *
                C141469 +
            ((C78012 + C78011) * C141452 +
             (C48072 * C3492 + C52627 + C52627 + C47710 * C3792 +
              C48073 * C7888 + C52628 + C52628 + C141358 * C8346) *
                 C141221) *
                C141384) *
               C141294 * C141485 -
           (((C50066 + C50067) * C141221 + (C50068 + C50069) * C141452) *
                C141384 +
            ((C48112 + C48111) * C141221 + (C48110 + C48109) * C141452) *
                C141469) *
               C141294 * C816) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[73] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30075 * C108 + C141469 * C276 + C30076 * C1601 +
              C141384 * C1784) *
                 C47810 +
             (C30075 * C189 + C141469 * C501 + C30076 * C1690 +
              C141384 * C2040) *
                 C47710 +
             (C38926 + C38927) * C47811 + (C39356 + C39357) * C141358) *
                C141452 +
            ((C30102 + C30103) * C47810 + (C30351 + C30352) * C47710 +
             C38914 * C47811 + C39350 * C141358) *
                C141221) *
               C141294 * C816 -
           (((C39358 + C39359) * C141358 + (C38932 + C38933) * C47811 +
             C39355 * C47710 + C38925 * C47810) *
                C141221 +
            ((C42824 + C42825) * C141358 + (C42520 + C42521) * C47811 +
             (C39357 + C39356) * C47710 + (C38927 + C38926) * C47810) *
                C141452) *
               C141294 * C141485) *
              C818 +
          (((C38914 * C47810 + C39350 * C47710 + (C38933 + C38932) * C47811 +
             (C39359 + C39358) * C141358) *
                C141452 +
            ((C30960 + C30959) * C47810 + (C31273 + C31272) * C47710 +
             (C30075 * C2962 + C141469 * C3086 + C30076 * C7888 +
              C141384 * C8129) *
                 C47811 +
             (C30075 * C3028 + C141469 * C3256 + C30076 * C8007 +
              C141384 * C8471) *
                 C141358) *
                C141221) *
               C141294 * C141485 -
           (((C31272 + C31273) * C141358 + (C30959 + C30960) * C47811 +
             (C30354 + C30353) * C47710 + (C30107 + C30106) * C47810) *
                C141221 +
            (C39355 * C141358 + C38925 * C47811 + (C30352 + C30351) * C47710 +
             (C30103 + C30102) * C47810) *
                C141452) *
               C141294 * C816) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eezx[73] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139366 * C108 + C141452 * C114 + C139356 * C109 +
              C141221 * C115) *
                 C30075 +
             (C139366 * C276 + C141452 * C579 + C139356 * C277 +
              C141221 * C580) *
                 C141469 +
             (C139366 * C1601 + C141452 * C1606 + C139356 * C1600 +
              C141221 * C1605) *
                 C30076 +
             (C139366 * C1784 + C141452 * C2126 + C139356 * C1783 +
              C141221 * C2125) *
                 C141384) *
                C47710 +
            ((C69912 + C69913) * C30075 + (C70268 + C70269) * C141469 +
             (C73482 + C73481) * C30076 + (C73794 + C73793) * C141384) *
                C141358) *
               C141294 * C816 -
           (((C73791 + C73792) * C141384 + (C73477 + C73478) * C30076 +
             (C70271 + C70270) * C141469 + (C69917 + C69916) * C30075) *
                C141358 +
            ((C73793 + C73794) * C141384 + (C73481 + C73482) * C30076 +
             (C70269 + C70268) * C141469 + (C69913 + C69912) * C30075) *
                C47710) *
               C141294 * C141485) *
              C818 +
          ((((C69920 + C69921) * C30075 + (C70272 + C70273) * C141469 +
             (C77869 + C77870) * C30076 + (C78277 + C78278) * C141384) *
                C47710 +
            ((C69924 + C69925) * C30075 + (C70274 + C70275) * C141469 +
             (C139366 * C7886 + C141452 * C7889 + C139356 * C7888 +
              C141221 * C7891) *
                 C30076 +
             (C139366 * C8127 + C141452 * C8582 + C139356 * C8129 +
              C141221 * C8584) *
                 C141384) *
                C141358) *
               C141294 * C141485 -
           (((C78278 + C78277) * C141384 + (C77870 + C77869) * C30076 +
             (C70273 + C70272) * C141469 + (C69921 + C69920) * C30075) *
                C141358 +
            ((C139356 * C1782 + C141221 * C2124 + C139366 * C1783 +
              C141452 * C2125) *
                 C141384 +
             (C139356 * C1599 + C141221 * C1604 + C139366 * C1600 +
              C141452 * C1605) *
                 C30076 +
             (C139356 * C278 + C141221 * C581 + C139366 * C277 +
              C141452 * C580) *
                 C141469 +
             (C139356 * C110 + C141221 * C116 + C139366 * C109 +
              C141452 * C115) *
                 C30075) *
                C47710) *
               C141294 * C816) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eezy[73] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47810 * C108 + C47710 * C189 + C47811 * C823 + C141358 * C912) *
                 C30075 +
             (C47810 * C276 + C47710 * C635 + C47811 * C1006 +
              C141358 * C1419) *
                 C141469 +
             (C62638 + C62639) * C30076 + (C63336 + C63337) * C141384) *
                C141452 +
            ((C47837 + C47838) * C30075 + (C48366 + C48367) * C141469 +
             (C49747 + C49746) * C30076 + (C50383 + C50382) * C141384) *
                C141221) *
               C141294 * C816 -
           (((C78413 + C78414) * C141384 + (C77599 + C77600) * C30076 +
             (C49412 + C49413) * C141469 + (C48710 + C48711) * C30075) *
                C141221 +
            ((C65970 + C65969) * C141384 + (C65287 + C65286) * C30076 +
             (C47811 * C3084 + C141358 * C3362 + C47810 * C1006 +
              C47710 * C1419) *
                 C141469 +
             (C47811 * C2960 + C141358 * C3026 + C47810 * C823 +
              C47710 * C912) *
                 C30075) *
                C141452) *
               C141294 * C141485) *
              C818 +
          ((((C48711 + C48710) * C30075 + (C49413 + C49412) * C141469 +
             (C77600 + C77599) * C30076 + (C78414 + C78413) * C141384) *
                C141452 +
            ((C48707 + C48706) * C30075 + (C49411 + C49410) * C141469 +
             (C47810 * C3492 + C47710 * C3574 + C47811 * C7888 +
              C141358 * C8007) *
                 C30076 +
             (C47810 * C3648 + C47710 * C4006 + C47811 * C8129 +
              C141358 * C8685) *
                 C141384) *
                C141221) *
               C141294 * C141485 -
           (((C50380 + C50381) * C141384 + (C49742 + C49743) * C30076 +
             (C48369 + C48368) * C141469 + (C47842 + C47841) * C30075) *
                C141221 +
            ((C50382 + C50383) * C141384 + (C49746 + C49747) * C30076 +
             (C48367 + C48366) * C141469 + (C47838 + C47837) * C30075) *
                C141452) *
               C141294 * C816) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eezz[73] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30596 * C108 + C30599 + C30599 + C141469 * C714 +
              C30597 * C1601 + C30600 + C30600 + C141384 * C2283) *
                 C47710 +
             (C39780 + C39781) * C141358) *
                C141452 +
            ((C30633 + C30634) * C47710 + C39766 * C141358) * C141221) *
               C141294 * C816 -
           (((C39782 + C39783) * C141358 + C39771 * C47710) * C141221 +
            ((C43132 + C43133) * C141358 + (C39781 + C39780) * C47710) *
                C141452) *
               C141294 * C141485) *
              C818 +
          (((C39766 * C47710 + (C39783 + C39782) * C141358) * C141452 +
            ((C31606 + C31605) * C47710 +
             (C30596 * C2962 + C34221 + C34221 + C141469 * C3418 +
              C30597 * C7888 + C34222 + C34222 + C141384 * C8795) *
                 C141358) *
                C141221) *
               C141294 * C141485 -
           (((C31605 + C31606) * C141358 + (C30636 + C30635) * C47710) *
                C141221 +
            (C39771 * C141358 + (C30634 + C30633) * C47710) * C141452) *
               C141294 * C816) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eexx[74] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C68675 * C108 + C68680 + C68680 + C141452 * C120 + C68677 * C109 +
              C68681 + C68681 + C141221 * C121) *
                 C141469 +
             (C78695 + C78696) * C141384) *
                C47710 +
            ((C69544 + C69545) * C141469 + (C73156 + C73155) * C141384) *
                C141358) *
               C1596 -
           (((C68677 * C13302 + C75832 + C75832 + C141221 * C13310 +
              C68675 * C13301 + C75831 + C75831 + C141452 * C13309) *
                 C141384 +
             (C73155 + C73156) * C141469) *
                C141358 +
            ((C68677 * C5326 + C75830 + C75830 + C141221 * C5334 +
              C68675 * C5325 + C75829 + C75829 + C141452 * C5333) *
                 C141384 +
             (C78696 + C78695) * C141469) *
                C47710) *
               C141487) *
              C141277 * C818 +
          ((((C78697 + C78698) * C141469 +
             (C68675 * C5326 + C78683 + C78683 + C141452 * C5334 +
              C68677 * C5327 + C78684 + C78684 + C141221 * C5335) *
                 C141384) *
                C47710 +
            ((C77457 + C77458) * C141469 +
             (C68675 * C13302 + C78685 + C78685 + C141452 * C13310 +
              C68677 * C14876 + C78686 + C78686 + C141221 * C14878) *
                 C141384) *
                C141358) *
               C141487 -
           (((C77458 + C77457) * C141384 + (C69549 + C69548) * C141469) *
                C141358 +
            ((C78698 + C78697) * C141384 +
             (C68677 * C110 + C68690 + C68690 + C141221 * C122 + C68675 * C109 +
              C68691 + C68691 + C141452 * C121) *
                 C141469) *
                C47710) *
               C1596) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eexy[74] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47810 * C108 + C47710 * C189 + C47811 * C823 + C141358 * C912) *
                 C139366 +
             (C47810 * C114 + C47710 * C195 + C47811 * C828 + C141358 * C917) *
                 C141452 +
             (C47837 + C47838) * C139356 + (C47839 + C47840) * C141221) *
                C141469 +
            ((C62638 + C62639) * C139366 + (C62640 + C62641) * C141452 +
             C78829 * C139356 + C78830 * C141221) *
                C141384) *
               C1596 -
           (((C62649 + C62648) * C141221 + (C62647 + C62646) * C139356 +
             (C62645 + C62644) * C141452 + (C62643 + C62642) * C139366) *
                C141384 +
            (C78831 * C141221 + C78832 * C139356 + (C62641 + C62640) * C141452 +
             (C62639 + C62638) * C139366) *
                C141469) *
               C141487) *
              C141277 * C818 +
          (((C78829 * C139366 + C78830 * C141452 + (C49743 + C49742) * C139356 +
             (C49741 + C49740) * C141221) *
                C141469 +
            ((C62646 + C62647) * C139366 + (C62648 + C62649) * C141452 +
             (C47810 * C5327 + C47710 * C5393 + C47811 * C14876 +
              C141358 * C14979) *
                 C139356 +
             (C47810 * C5331 + C47710 * C5397 + C47811 * C14877 +
              C141358 * C14980) *
                 C141221) *
                C141384) *
               C141487 -
           (((C49740 + C49741) * C141221 + (C49742 + C49743) * C139356 +
             C78831 * C141452 + C78832 * C139366) *
                C141384 +
            ((C47844 + C47843) * C141221 + (C47842 + C47841) * C139356 +
             (C47840 + C47839) * C141452 + (C47838 + C47837) * C139366) *
                C141469) *
               C1596) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eexz[74] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30075 * C108 + C141469 * C276 + C30076 * C1601 +
              C141384 * C1784) *
                 C139366 +
             (C30075 * C114 + C141469 * C282 + C30076 * C1606 +
              C141384 * C1789) *
                 C141452 +
             (C30102 + C30103) * C139356 + (C30104 + C30105) * C141221) *
                C47710 +
            ((C38926 + C38927) * C139366 + (C38928 + C38929) * C141452 +
             C38914 * C139356 + C38915 * C141221) *
                C141358) *
               C1596 -
           (((C40210 + C40211) * C141221 + (C40212 + C40213) * C139356 +
             (C43546 + C43547) * C141452 + (C43548 + C43549) * C139366) *
                C141358 +
            ((C31968 + C31969) * C141221 + (C31970 + C31971) * C139356 +
             (C30076 * C5329 + C141384 * C5453 + C30075 * C1606 +
              C141469 * C1789) *
                 C141452 +
             (C30076 * C5325 + C141384 * C5449 + C30075 * C1601 +
              C141469 * C1784) *
                 C139366) *
                C47710) *
               C141487) *
              C141277 * C818 +
          ((((C31971 + C31970) * C139366 + (C31969 + C31968) * C141452 +
             (C31967 + C31966) * C139356 + (C31965 + C31964) * C141221) *
                C47710 +
            ((C40213 + C40212) * C139366 + (C40211 + C40210) * C141452 +
             (C30075 * C3492 + C141469 * C3648 + C30076 * C14876 +
              C141384 * C15091) *
                 C139356 +
             (C30075 * C3496 + C141469 * C3652 + C30076 * C14877 +
              C141384 * C15092) *
                 C141221) *
                C141358) *
               C141487 -
           (((C30957 + C30958) * C141221 + (C30959 + C30960) * C139356 +
             C38924 * C141452 + C38925 * C139366) *
                C141358 +
            ((C30109 + C30108) * C141221 + (C30107 + C30106) * C139356 +
             (C30105 + C30104) * C141452 + (C30103 + C30102) * C139366) *
                C47710) *
               C1596) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[74] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139366 * C108 + C141452 * C114 + C139356 * C109 +
              C141221 * C115) *
                 C47810 +
             (C139366 * C189 + C141452 * C362 + C139356 * C190 +
              C141221 * C363) *
                 C47710 +
             (C69912 + C69913) * C47811 + (C69914 + C69915) * C141358) *
                C141469 +
            ((C79109 + C79110) * C47810 + (C79111 + C79112) * C47710 +
             (C73482 + C73481) * C47811 + (C73480 + C73479) * C141358) *
                C141384) *
               C1596 -
           (((C139356 * C13395 + C141221 * C13558 + C139366 * C13393 +
              C141452 * C13557) *
                 C141358 +
             (C139356 * C13302 + C141221 * C13306 + C139366 * C13301 +
              C141452 * C13305) *
                 C47811 +
             (C139356 * C5392 + C141221 * C5508 + C139366 * C5391 +
              C141452 * C5507) *
                 C47710 +
             (C139356 * C5326 + C141221 * C5330 + C139366 * C5325 +
              C141452 * C5329) *
                 C47810) *
                C141384 +
            ((C73479 + C73480) * C141358 + (C73481 + C73482) * C47811 +
             (C79112 + C79111) * C47710 + (C79110 + C79109) * C47810) *
                C141469) *
               C141487) *
              C141277 * C818 +
          ((((C79113 + C79114) * C47810 + (C79115 + C79116) * C47710 +
             (C77869 + C77870) * C47811 + (C77871 + C77872) * C141358) *
                C141469 +
            ((C139366 * C5326 + C141452 * C5330 + C139356 * C5327 +
              C141221 * C5331) *
                 C47810 +
             (C139366 * C5392 + C141452 * C5508 + C139356 * C5393 +
              C141221 * C5509) *
                 C47710 +
             (C139366 * C13302 + C141452 * C13306 + C139356 * C14876 +
              C141221 * C14877) *
                 C47811 +
             (C139366 * C13395 + C141452 * C13558 + C139356 * C14979 +
              C141221 * C15209) *
                 C141358) *
                C141384) *
               C141487 -
           (((C77872 + C77871) * C141358 + (C77870 + C77869) * C47811 +
             (C79116 + C79115) * C47710 + (C79114 + C79113) * C47810) *
                C141384 +
            ((C69923 + C69922) * C141358 + (C69921 + C69920) * C47811 +
             (C139356 * C191 + C141221 * C364 + C139366 * C190 +
              C141452 * C363) *
                 C47710 +
             (C139356 * C110 + C141221 * C116 + C139366 * C109 +
              C141452 * C115) *
                 C47810) *
                C141469) *
               C1596) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[74] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48072 * C108 + C48075 + C48075 + C47710 * C419 + C48073 * C823 +
              C48076 + C48076 + C141358 * C1171) *
                 C141452 +
             (C48109 + C48110) * C141221) *
                C141469 +
            ((C63012 + C63013) * C141452 + C79247 * C141221) * C141384) *
               C1596 -
           (((C63017 + C63016) * C141221 + (C63015 + C63014) * C141452) *
                C141384 +
            (C79248 * C141221 + (C63013 + C63012) * C141452) * C141469) *
               C141487) *
              C141277 * C818 +
          (((C79247 * C141452 + (C50067 + C50066) * C141221) * C141469 +
            ((C63016 + C63017) * C141452 +
             (C48072 * C5327 + C55174 + C55174 + C47710 * C5563 +
              C48073 * C14876 + C55175 + C55175 + C141358 * C15308) *
                 C141221) *
                C141384) *
               C141487 -
           (((C50066 + C50067) * C141221 + C79248 * C141452) * C141384 +
            ((C48112 + C48111) * C141221 + (C48110 + C48109) * C141452) *
                C141469) *
               C1596) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[74] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30075 * C108 + C141469 * C276 + C30076 * C1601 +
              C141384 * C1784) *
                 C47810 +
             (C30075 * C189 + C141469 * C501 + C30076 * C1690 +
              C141384 * C2040) *
                 C47710 +
             (C38926 + C38927) * C47811 + (C39356 + C39357) * C141358) *
                C141452 +
            ((C30102 + C30103) * C47810 + (C30351 + C30352) * C47710 +
             C38914 * C47811 + C39350 * C141358) *
                C141221) *
               C1596 -
           (((C40630 + C40631) * C141358 + (C40212 + C40213) * C47811 +
             (C32318 + C32319) * C47710 + (C31970 + C31971) * C47810) *
                C141221 +
            ((C43962 + C43963) * C141358 + (C43548 + C43549) * C47811 +
             (C30076 * C5391 + C141384 * C5619 + C30075 * C1690 +
              C141469 * C2040) *
                 C47710 +
             (C30076 * C5325 + C141384 * C5449 + C30075 * C1601 +
              C141469 * C1784) *
                 C47810) *
                C141452) *
               C141487) *
              C141277 * C818 +
          ((((C31971 + C31970) * C47810 + (C32319 + C32318) * C47710 +
             (C40213 + C40212) * C47811 + (C40631 + C40630) * C141358) *
                C141452 +
            ((C31967 + C31966) * C47810 + (C32317 + C32316) * C47710 +
             (C30075 * C3492 + C141469 * C3648 + C30076 * C14876 +
              C141384 * C15091) *
                 C47811 +
             (C30075 * C3574 + C141469 * C3866 + C30076 * C14979 +
              C141384 * C15420) *
                 C141358) *
                C141221) *
               C141487 -
           (((C31272 + C31273) * C141358 + (C30959 + C30960) * C47811 +
             (C30354 + C30353) * C47710 + (C30107 + C30106) * C47810) *
                C141221 +
            (C39355 * C141358 + C38925 * C47811 + (C30352 + C30351) * C47710 +
             (C30103 + C30102) * C47810) *
                C141452) *
               C1596) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eezx[74] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139366 * C108 + C141452 * C114 + C139356 * C109 +
              C141221 * C115) *
                 C30075 +
             (C139366 * C276 + C141452 * C579 + C139356 * C277 +
              C141221 * C580) *
                 C141469 +
             (C79109 + C79110) * C30076 + (C79517 + C79518) * C141384) *
                C47710 +
            ((C69912 + C69913) * C30075 + (C70268 + C70269) * C141469 +
             (C73482 + C73481) * C30076 + (C73794 + C73793) * C141384) *
                C141358) *
               C1596 -
           (((C139356 * C13476 + C141221 * C13798 + C139366 * C13475 +
              C141452 * C13797) *
                 C141384 +
             (C139356 * C13302 + C141221 * C13306 + C139366 * C13301 +
              C141452 * C13305) *
                 C30076 +
             (C73793 + C73794) * C141469 + (C73481 + C73482) * C30075) *
                C141358 +
            ((C139356 * C5450 + C141221 * C5674 + C139366 * C5449 +
              C141452 * C5673) *
                 C141384 +
             (C139356 * C5326 + C141221 * C5330 + C139366 * C5325 +
              C141452 * C5329) *
                 C30076 +
             (C79518 + C79517) * C141469 + (C79110 + C79109) * C30075) *
                C47710) *
               C141487) *
              C141277 * C818 +
          ((((C79113 + C79114) * C30075 + (C79519 + C79520) * C141469 +
             (C139366 * C5326 + C141452 * C5330 + C139356 * C5327 +
              C141221 * C5331) *
                 C30076 +
             (C139366 * C5450 + C141452 * C5674 + C139356 * C5451 +
              C141221 * C5675) *
                 C141384) *
                C47710 +
            ((C77869 + C77870) * C30075 + (C78277 + C78278) * C141469 +
             (C139366 * C13302 + C141452 * C13306 + C139356 * C14876 +
              C141221 * C14877) *
                 C30076 +
             (C139366 * C13476 + C141452 * C13798 + C139356 * C15091 +
              C141221 * C15528) *
                 C141384) *
                C141358) *
               C141487 -
           (((C78278 + C78277) * C141384 + (C77870 + C77869) * C30076 +
             (C70273 + C70272) * C141469 + (C69921 + C69920) * C30075) *
                C141358 +
            ((C79520 + C79519) * C141384 + (C79114 + C79113) * C30076 +
             (C139356 * C278 + C141221 * C581 + C139366 * C277 +
              C141452 * C580) *
                 C141469 +
             (C139356 * C110 + C141221 * C116 + C139366 * C109 +
              C141452 * C115) *
                 C30075) *
                C47710) *
               C1596) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eezy[74] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47810 * C108 + C47710 * C189 + C47811 * C823 + C141358 * C912) *
                 C30075 +
             (C47810 * C276 + C47710 * C635 + C47811 * C1006 +
              C141358 * C1419) *
                 C141469 +
             (C62638 + C62639) * C30076 + (C63336 + C63337) * C141384) *
                C141452 +
            ((C47837 + C47838) * C30075 + (C48366 + C48367) * C141469 +
             C78829 * C30076 + C79651 * C141384) *
                C141221) *
               C1596 -
           (((C63341 + C63340) * C141384 + (C62647 + C62646) * C30076 +
             C79652 * C141469 + C78832 * C30075) *
                C141221 +
            ((C63339 + C63338) * C141384 + (C62643 + C62642) * C30076 +
             (C63337 + C63336) * C141469 + (C62639 + C62638) * C30075) *
                C141452) *
               C141487) *
              C141277 * C818 +
          (((C78829 * C30075 + C79651 * C141469 + (C62646 + C62647) * C30076 +
             (C63340 + C63341) * C141384) *
                C141452 +
            ((C49743 + C49742) * C30075 + (C50381 + C50380) * C141469 +
             (C47810 * C5327 + C47710 * C5393 + C47811 * C14876 +
              C141358 * C14979) *
                 C30076 +
             (C47810 * C5451 + C47710 * C5729 + C47811 * C15091 +
              C141358 * C15627) *
                 C141384) *
                C141221) *
               C141487 -
           (((C50380 + C50381) * C141384 + (C49742 + C49743) * C30076 +
             (C48369 + C48368) * C141469 + (C47842 + C47841) * C30075) *
                C141221 +
            (C79652 * C141384 + C78832 * C30076 + (C48367 + C48366) * C141469 +
             (C47838 + C47837) * C30075) *
                C141452) *
               C1596) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eezz[74] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30596 * C108 + C30599 + C30599 + C141469 * C714 +
              C30597 * C1601 + C30600 + C30600 + C141384 * C2283) *
                 C47710 +
             (C39780 + C39781) * C141358) *
                C141452 +
            ((C30633 + C30634) * C47710 + C39766 * C141358) * C141221) *
               C1596 -
           (((C41044 + C41045) * C141358 + (C32666 + C32667) * C47710) *
                C141221 +
            ((C44374 + C44375) * C141358 +
             (C30597 * C5325 + C32652 + C32652 + C141384 * C5781 +
              C30596 * C1601 + C32653 + C32653 + C141469 * C2283) *
                 C47710) *
                C141452) *
               C141487) *
              C141277 * C818 +
          ((((C32667 + C32666) * C47710 + (C41045 + C41044) * C141358) *
                C141452 +
            ((C32665 + C32664) * C47710 +
             (C30596 * C3492 + C35118 + C35118 + C141469 * C4076 +
              C30597 * C14876 + C35119 + C35119 + C141384 * C15738) *
                 C141358) *
                C141221) *
               C141487 -
           (((C31605 + C31606) * C141358 + (C30636 + C30635) * C47710) *
                C141221 +
            (C39771 * C141358 + (C30634 + C30633) * C47710) * C141452) *
               C1596) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eexx[75] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C68675 * C108 + C68680 + C68680 + C141452 * C120 + C68677 * C109 +
              C68681 + C68681 + C141221 * C121) *
                 C141469 +
             (C78695 + C78696) * C141384) *
                C47710 +
            ((C69544 + C69545) * C141469 + (C73156 + C73155) * C141384) *
                C141358) *
               C141294 * C2374 -
           (((C73153 + C73154) * C141384 + (C69547 + C69546) * C141469) *
                C141358 +
            ((C73155 + C73156) * C141384 + (C69545 + C69544) * C141469) *
                C47710) *
               C141294 * C141485) *
              C2376 +
          ((((C69548 + C69549) * C141469 + (C77457 + C77458) * C141384) *
                C47710 +
            ((C69550 + C69551) * C141469 +
             (C68675 * C7886 + C70592 + C70592 + C141452 * C7892 +
              C68677 * C7888 + C70593 + C70593 + C141221 * C7894) *
                 C141384) *
                C141358) *
               C141294 * C141485 -
           (((C77458 + C77457) * C141384 + (C69549 + C69548) * C141469) *
                C141358 +
            ((C78698 + C78697) * C141384 +
             (C68677 * C110 + C68690 + C68690 + C141221 * C122 + C68675 * C109 +
              C68691 + C68691 + C141452 * C121) *
                 C141469) *
                C47710) *
               C141294 * C2374) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eexy[75] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47810 * C108 + C47710 * C189 + C47811 * C823 + C141358 * C912) *
                 C139366 +
             (C47810 * C114 + C47710 * C195 + C47811 * C828 + C141358 * C917) *
                 C141452 +
             (C47837 + C47838) * C139356 + (C47839 + C47840) * C141221) *
                C141469 +
            ((C62638 + C62639) * C139366 + (C62640 + C62641) * C141452 +
             C78829 * C139356 + C78830 * C141221) *
                C141384) *
               C141294 * C2374 -
           (((C77597 + C77598) * C141221 + (C77599 + C77600) * C139356 +
             (C65289 + C65288) * C141452 + (C65287 + C65286) * C139366) *
                C141384 +
            ((C48708 + C48709) * C141221 + (C48710 + C48711) * C139356 +
             (C47811 * C2964 + C141358 * C3030 + C47810 * C828 +
              C47710 * C917) *
                 C141452 +
             (C47811 * C2960 + C141358 * C3026 + C47810 * C823 +
              C47710 * C912) *
                 C139366) *
                C141469) *
               C141294 * C141485) *
              C2376 +
          ((((C48711 + C48710) * C139366 + (C48709 + C48708) * C141452 +
             (C48707 + C48706) * C139356 + (C48705 + C48704) * C141221) *
                C141469 +
            ((C77600 + C77599) * C139366 + (C77598 + C77597) * C141452 +
             (C47810 * C3492 + C47710 * C3574 + C47811 * C7888 +
              C141358 * C8007) *
                 C139356 +
             (C47810 * C3496 + C47710 * C3578 + C47811 * C7891 +
              C141358 * C8010) *
                 C141221) *
                C141384) *
               C141294 * C141485 -
           (((C49740 + C49741) * C141221 + (C49742 + C49743) * C139356 +
             C78831 * C141452 + C78832 * C139366) *
                C141384 +
            ((C47844 + C47843) * C141221 + (C47842 + C47841) * C139356 +
             (C47840 + C47839) * C141452 + (C47838 + C47837) * C139366) *
                C141469) *
               C141294 * C2374) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eexz[75] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30075 * C108 + C141469 * C276 + C30076 * C1601 +
              C141384 * C1784) *
                 C139366 +
             (C30075 * C114 + C141469 * C282 + C30076 * C1606 +
              C141384 * C1789) *
                 C141452 +
             (C30102 + C30103) * C139356 + (C30104 + C30105) * C141221) *
                C47710 +
            ((C38926 + C38927) * C139366 + (C38928 + C38929) * C141452 +
             C38914 * C139356 + C38915 * C141221) *
                C141358) *
               C141294 * C2374 -
           (((C38930 + C38931) * C141221 + (C38932 + C38933) * C139356 +
             (C42518 + C42519) * C141452 + (C42520 + C42521) * C139366) *
                C141358 +
            (C38924 * C141221 + C38925 * C139356 + (C38929 + C38928) * C141452 +
             (C38927 + C38926) * C139366) *
                C47710) *
               C141294 * C141485) *
              C2376 +
          (((C38914 * C139366 + C38915 * C141452 + (C30960 + C30959) * C139356 +
             (C30958 + C30957) * C141221) *
                C47710 +
            ((C38933 + C38932) * C139366 + (C38931 + C38930) * C141452 +
             (C30075 * C2962 + C141469 * C3086 + C30076 * C7888 +
              C141384 * C8129) *
                 C139356 +
             (C30075 * C2966 + C141469 * C3090 + C30076 * C7891 +
              C141384 * C8132) *
                 C141221) *
                C141358) *
               C141294 * C141485 -
           (((C30957 + C30958) * C141221 + (C30959 + C30960) * C139356 +
             C38924 * C141452 + C38925 * C139366) *
                C141358 +
            ((C30109 + C30108) * C141221 + (C30107 + C30106) * C139356 +
             (C30105 + C30104) * C141452 + (C30103 + C30102) * C139366) *
                C47710) *
               C141294 * C2374) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[75] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139366 * C108 + C141452 * C114 + C139356 * C109 +
              C141221 * C115) *
                 C47810 +
             (C139366 * C189 + C141452 * C362 + C139356 * C190 +
              C141221 * C363) *
                 C47710 +
             (C69912 + C69913) * C47811 + (C69914 + C69915) * C141358) *
                C141469 +
            ((C79109 + C79110) * C47810 + (C79111 + C79112) * C47710 +
             (C73482 + C73481) * C47811 + (C73480 + C73479) * C141358) *
                C141384) *
               C141294 * C2374 -
           (((C73475 + C73476) * C141358 + (C73477 + C73478) * C47811 +
             (C73479 + C73480) * C47710 + (C73481 + C73482) * C47810) *
                C141384 +
            ((C69919 + C69918) * C141358 + (C69917 + C69916) * C47811 +
             (C69915 + C69914) * C47710 + (C69913 + C69912) * C47810) *
                C141469) *
               C141294 * C141485) *
              C2376 +
          ((((C69920 + C69921) * C47810 + (C69922 + C69923) * C47710 +
             (C69924 + C69925) * C47811 + (C69926 + C69927) * C141358) *
                C141469 +
            ((C77869 + C77870) * C47810 + (C77871 + C77872) * C47710 +
             (C139366 * C7886 + C141452 * C7889 + C139356 * C7888 +
              C141221 * C7891) *
                 C47811 +
             (C139366 * C8005 + C141452 * C8243 + C139356 * C8007 +
              C141221 * C8245) *
                 C141358) *
                C141384) *
               C141294 * C141485 -
           (((C77872 + C77871) * C141358 + (C77870 + C77869) * C47811 +
             (C79116 + C79115) * C47710 + (C79114 + C79113) * C47810) *
                C141384 +
            ((C69923 + C69922) * C141358 + (C69921 + C69920) * C47811 +
             (C139356 * C191 + C141221 * C364 + C139366 * C190 +
              C141452 * C363) *
                 C47710 +
             (C139356 * C110 + C141221 * C116 + C139366 * C109 +
              C141452 * C115) *
                 C47810) *
                C141469) *
               C141294 * C2374) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[75] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48072 * C108 + C48075 + C48075 + C47710 * C419 + C48073 * C823 +
              C48076 + C48076 + C141358 * C1171) *
                 C141452 +
             (C48109 + C48110) * C141221) *
                C141469 +
            ((C63012 + C63013) * C141452 + C79247 * C141221) * C141384) *
               C141294 * C2374 -
           (((C78011 + C78012) * C141221 + (C65643 + C65642) * C141452) *
                C141384 +
            ((C49080 + C49081) * C141221 +
             (C48073 * C2960 + C49066 + C49066 + C141358 * C3196 +
              C48072 * C823 + C49067 + C49067 + C47710 * C1171) *
                 C141452) *
                C141469) *
               C141294 * C141485) *
              C2376 +
          ((((C49081 + C49080) * C141452 + (C49079 + C49078) * C141221) *
                C141469 +
            ((C78012 + C78011) * C141452 +
             (C48072 * C3492 + C52627 + C52627 + C47710 * C3792 +
              C48073 * C7888 + C52628 + C52628 + C141358 * C8346) *
                 C141221) *
                C141384) *
               C141294 * C141485 -
           (((C50066 + C50067) * C141221 + C79248 * C141452) * C141384 +
            ((C48112 + C48111) * C141221 + (C48110 + C48109) * C141452) *
                C141469) *
               C141294 * C2374) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[75] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30075 * C108 + C141469 * C276 + C30076 * C1601 +
              C141384 * C1784) *
                 C47810 +
             (C30075 * C189 + C141469 * C501 + C30076 * C1690 +
              C141384 * C2040) *
                 C47710 +
             (C38926 + C38927) * C47811 + (C39356 + C39357) * C141358) *
                C141452 +
            ((C30102 + C30103) * C47810 + (C30351 + C30352) * C47710 +
             C38914 * C47811 + C39350 * C141358) *
                C141221) *
               C141294 * C2374 -
           (((C39358 + C39359) * C141358 + (C38932 + C38933) * C47811 +
             C39355 * C47710 + C38925 * C47810) *
                C141221 +
            ((C42824 + C42825) * C141358 + (C42520 + C42521) * C47811 +
             (C39357 + C39356) * C47710 + (C38927 + C38926) * C47810) *
                C141452) *
               C141294 * C141485) *
              C2376 +
          (((C38914 * C47810 + C39350 * C47710 + (C38933 + C38932) * C47811 +
             (C39359 + C39358) * C141358) *
                C141452 +
            ((C30960 + C30959) * C47810 + (C31273 + C31272) * C47710 +
             (C30075 * C2962 + C141469 * C3086 + C30076 * C7888 +
              C141384 * C8129) *
                 C47811 +
             (C30075 * C3028 + C141469 * C3256 + C30076 * C8007 +
              C141384 * C8471) *
                 C141358) *
                C141221) *
               C141294 * C141485 -
           (((C31272 + C31273) * C141358 + (C30959 + C30960) * C47811 +
             (C30354 + C30353) * C47710 + (C30107 + C30106) * C47810) *
                C141221 +
            (C39355 * C141358 + C38925 * C47811 + (C30352 + C30351) * C47710 +
             (C30103 + C30102) * C47810) *
                C141452) *
               C141294 * C2374) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eezx[75] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139366 * C108 + C141452 * C114 + C139356 * C109 +
              C141221 * C115) *
                 C30075 +
             (C139366 * C276 + C141452 * C579 + C139356 * C277 +
              C141221 * C580) *
                 C141469 +
             (C79109 + C79110) * C30076 + (C79517 + C79518) * C141384) *
                C47710 +
            ((C69912 + C69913) * C30075 + (C70268 + C70269) * C141469 +
             (C73482 + C73481) * C30076 + (C73794 + C73793) * C141384) *
                C141358) *
               C141294 * C2374 -
           (((C73791 + C73792) * C141384 + (C73477 + C73478) * C30076 +
             (C70271 + C70270) * C141469 + (C69917 + C69916) * C30075) *
                C141358 +
            ((C73793 + C73794) * C141384 + (C73481 + C73482) * C30076 +
             (C70269 + C70268) * C141469 + (C69913 + C69912) * C30075) *
                C47710) *
               C141294 * C141485) *
              C2376 +
          ((((C69920 + C69921) * C30075 + (C70272 + C70273) * C141469 +
             (C77869 + C77870) * C30076 + (C78277 + C78278) * C141384) *
                C47710 +
            ((C69924 + C69925) * C30075 + (C70274 + C70275) * C141469 +
             (C139366 * C7886 + C141452 * C7889 + C139356 * C7888 +
              C141221 * C7891) *
                 C30076 +
             (C139366 * C8127 + C141452 * C8582 + C139356 * C8129 +
              C141221 * C8584) *
                 C141384) *
                C141358) *
               C141294 * C141485 -
           (((C78278 + C78277) * C141384 + (C77870 + C77869) * C30076 +
             (C70273 + C70272) * C141469 + (C69921 + C69920) * C30075) *
                C141358 +
            ((C79520 + C79519) * C141384 + (C79114 + C79113) * C30076 +
             (C139356 * C278 + C141221 * C581 + C139366 * C277 +
              C141452 * C580) *
                 C141469 +
             (C139356 * C110 + C141221 * C116 + C139366 * C109 +
              C141452 * C115) *
                 C30075) *
                C47710) *
               C141294 * C2374) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eezy[75] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47810 * C108 + C47710 * C189 + C47811 * C823 + C141358 * C912) *
                 C30075 +
             (C47810 * C276 + C47710 * C635 + C47811 * C1006 +
              C141358 * C1419) *
                 C141469 +
             (C62638 + C62639) * C30076 + (C63336 + C63337) * C141384) *
                C141452 +
            ((C47837 + C47838) * C30075 + (C48366 + C48367) * C141469 +
             C78829 * C30076 + C79651 * C141384) *
                C141221) *
               C141294 * C2374 -
           (((C78413 + C78414) * C141384 + (C77599 + C77600) * C30076 +
             (C49412 + C49413) * C141469 + (C48710 + C48711) * C30075) *
                C141221 +
            ((C65970 + C65969) * C141384 + (C65287 + C65286) * C30076 +
             (C47811 * C3084 + C141358 * C3362 + C47810 * C1006 +
              C47710 * C1419) *
                 C141469 +
             (C47811 * C2960 + C141358 * C3026 + C47810 * C823 +
              C47710 * C912) *
                 C30075) *
                C141452) *
               C141294 * C141485) *
              C2376 +
          ((((C48711 + C48710) * C30075 + (C49413 + C49412) * C141469 +
             (C77600 + C77599) * C30076 + (C78414 + C78413) * C141384) *
                C141452 +
            ((C48707 + C48706) * C30075 + (C49411 + C49410) * C141469 +
             (C47810 * C3492 + C47710 * C3574 + C47811 * C7888 +
              C141358 * C8007) *
                 C30076 +
             (C47810 * C3648 + C47710 * C4006 + C47811 * C8129 +
              C141358 * C8685) *
                 C141384) *
                C141221) *
               C141294 * C141485 -
           (((C50380 + C50381) * C141384 + (C49742 + C49743) * C30076 +
             (C48369 + C48368) * C141469 + (C47842 + C47841) * C30075) *
                C141221 +
            (C79652 * C141384 + C78832 * C30076 + (C48367 + C48366) * C141469 +
             (C47838 + C47837) * C30075) *
                C141452) *
               C141294 * C2374) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eezz[75] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30596 * C108 + C30599 + C30599 + C141469 * C714 +
              C30597 * C1601 + C30600 + C30600 + C141384 * C2283) *
                 C47710 +
             (C39780 + C39781) * C141358) *
                C141452 +
            ((C30633 + C30634) * C47710 + C39766 * C141358) * C141221) *
               C141294 * C2374 -
           (((C39782 + C39783) * C141358 + C39771 * C47710) * C141221 +
            ((C43132 + C43133) * C141358 + (C39781 + C39780) * C47710) *
                C141452) *
               C141294 * C141485) *
              C2376 +
          (((C39766 * C47710 + (C39783 + C39782) * C141358) * C141452 +
            ((C31606 + C31605) * C47710 +
             (C30596 * C2962 + C34221 + C34221 + C141469 * C3418 +
              C30597 * C7888 + C34222 + C34222 + C141384 * C8795) *
                 C141358) *
                C141221) *
               C141294 * C141485 -
           (((C31605 + C31606) * C141358 + (C30636 + C30635) * C47710) *
                C141221 +
            (C39771 * C141358 + (C30634 + C30633) * C47710) * C141452) *
               C141294 * C2374) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eexx[76] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C68675 * C108 + C68680 + C68680 + C141452 * C120 + C68677 * C109 +
             C68681 + C68681 + C141221 * C121) *
                C141469 +
            (C78695 + C78696) * C141384) *
               C47710 +
           ((C69544 + C69545) * C141469 + (C73156 + C73155) * C141384) *
               C141358) *
              C141294 * C2956 -
          (((C73153 + C73154) * C141384 + (C69547 + C69546) * C141469) *
               C141358 +
           ((C73155 + C73156) * C141384 + (C69545 + C69544) * C141469) *
               C47710) *
              C141294 * C2957 +
          ((C72394 * C141469 + (C73154 + C73153) * C141384) * C47710 +
           ((C72407 + C72406) * C141469 +
            (C68675 * C10551 + C73143 + C73143 + C141452 * C10555 +
             C68677 * C10552 + C73144 + C73144 + C141221 * C10556) *
                C141384) *
               C141358) *
              C141294 * C2958) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eexy[76] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47810 * C108 + C47710 * C189 + C47811 * C823 + C141358 * C912) *
                C139366 +
            (C47810 * C114 + C47710 * C195 + C47811 * C828 + C141358 * C917) *
                C141452 +
            (C47837 + C47838) * C139356 + (C47839 + C47840) * C141221) *
               C141469 +
           ((C62638 + C62639) * C139366 + (C62640 + C62641) * C141452 +
            C78829 * C139356 + C78830 * C141221) *
               C141384) *
              C141294 * C2956 -
          (((C77597 + C77598) * C141221 + (C77599 + C77600) * C139356 +
            (C65289 + C65288) * C141452 + (C65287 + C65286) * C139366) *
               C141384 +
           ((C48708 + C48709) * C141221 + (C48710 + C48711) * C139356 +
            (C47811 * C2964 + C141358 * C3030 + C47810 * C828 + C47710 * C917) *
                C141452 +
            (C47811 * C2960 + C141358 * C3026 + C47810 * C823 + C47710 * C912) *
                C139366) *
               C141469) *
              C141294 * C2957 +
          (((C47810 * C2960 + C47710 * C3026 + C47811 * C6729 +
             C141358 * C6880) *
                C139366 +
            (C47810 * C2964 + C47710 * C3030 + C47811 * C6732 +
             C141358 * C6883) *
                C141452 +
            (C47810 * C2961 + C47710 * C3027 + C47811 * C6728 +
             C141358 * C6879) *
                C139356 +
            (C47810 * C2965 + C47710 * C3031 + C47811 * C6731 +
             C141358 * C6882) *
                C141221) *
               C141469 +
           ((C47810 * C7887 + C47710 * C8006 + C47811 * C10551 +
             C141358 * C10677) *
                C139366 +
            (C47810 * C7890 + C47710 * C8009 + C47811 * C10553 +
             C141358 * C10679) *
                C141452 +
            (C47810 * C7886 + C47710 * C8005 + C47811 * C10552 +
             C141358 * C10678) *
                C139356 +
            (C47810 * C7889 + C47710 * C8008 + C47811 * C10554 +
             C141358 * C10680) *
                C141221) *
               C141384) *
              C141294 * C2958) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eexz[76] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30075 * C108 + C141469 * C276 + C30076 * C1601 +
             C141384 * C1784) *
                C139366 +
            (C30075 * C114 + C141469 * C282 + C30076 * C1606 +
             C141384 * C1789) *
                C141452 +
            (C30102 + C30103) * C139356 + (C30104 + C30105) * C141221) *
               C47710 +
           ((C38926 + C38927) * C139366 + (C38928 + C38929) * C141452 +
            C38914 * C139356 + C38915 * C141221) *
               C141358) *
              C141294 * C2956 -
          (((C38930 + C38931) * C141221 + (C38932 + C38933) * C139356 +
            (C42518 + C42519) * C141452 + (C42520 + C42521) * C139366) *
               C141358 +
           (C38924 * C141221 + C38925 * C139356 + (C38929 + C38928) * C141452 +
            (C38927 + C38926) * C139366) *
               C47710) *
              C141294 * C2957 +
          (((C42521 + C42520) * C139366 + (C42519 + C42518) * C141452 +
            (C38933 + C38932) * C139356 + (C38931 + C38930) * C141221) *
               C47710 +
           ((C30075 * C6729 + C141469 * C7002 + C30076 * C10551 +
             C141384 * C10779) *
                C139366 +
            (C30075 * C6732 + C141469 * C7005 + C30076 * C10553 +
             C141384 * C10781) *
                C141452 +
            (C30075 * C6728 + C141469 * C7001 + C30076 * C10552 +
             C141384 * C10780) *
                C139356 +
            (C30075 * C6731 + C141469 * C7004 + C30076 * C10554 +
             C141384 * C10782) *
                C141221) *
               C141358) *
              C141294 * C2958) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eeyx[76] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139366 * C108 + C141452 * C114 + C139356 * C109 +
             C141221 * C115) *
                C47810 +
            (C139366 * C189 + C141452 * C362 + C139356 * C190 +
             C141221 * C363) *
                C47710 +
            (C69912 + C69913) * C47811 + (C69914 + C69915) * C141358) *
               C141469 +
           ((C79109 + C79110) * C47810 + (C79111 + C79112) * C47710 +
            (C73482 + C73481) * C47811 + (C73480 + C73479) * C141358) *
               C141384) *
              C141294 * C2956 -
          (((C73475 + C73476) * C141358 + (C73477 + C73478) * C47811 +
            (C73479 + C73480) * C47710 + (C73481 + C73482) * C47810) *
               C141384 +
           ((C69919 + C69918) * C141358 + (C69917 + C69916) * C47811 +
            (C69915 + C69914) * C47710 + (C69913 + C69912) * C47810) *
               C141469) *
              C141294 * C2957 +
          ((C72637 * C47810 + C72638 * C47710 + (C72650 + C72649) * C47811 +
            (C72648 + C72647) * C141358) *
               C141469 +
           ((C73478 + C73477) * C47810 + (C73476 + C73475) * C47710 +
            (C139366 * C10551 + C141452 * C10553 + C139356 * C10552 +
             C141221 * C10554) *
                C47811 +
            (C139366 * C10677 + C141452 * C10901 + C139356 * C10678 +
             C141221 * C10902) *
                C141358) *
               C141384) *
              C141294 * C2958) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eeyy[76] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C48072 * C108 + C48075 + C48075 + C47710 * C419 + C48073 * C823 +
             C48076 + C48076 + C141358 * C1171) *
                C141452 +
            (C48109 + C48110) * C141221) *
               C141469 +
           ((C63012 + C63013) * C141452 + C79247 * C141221) * C141384) *
              C141294 * C2956 -
          (((C78011 + C78012) * C141221 + (C65643 + C65642) * C141452) *
               C141384 +
           ((C49080 + C49081) * C141221 +
            (C48073 * C2960 + C49066 + C49066 + C141358 * C3196 +
             C48072 * C823 + C49067 + C49067 + C47710 * C1171) *
                C141452) *
               C141469) *
              C141294 * C2957 +
          (((C48072 * C2960 + C51780 + C51780 + C47710 * C3196 +
             C48073 * C6729 + C51781 + C51781 + C141358 * C7289) *
                C141452 +
            (C48072 * C2961 + C51782 + C51782 + C47710 * C3197 +
             C48073 * C6728 + C51783 + C51783 + C141358 * C7288) *
                C141221) *
               C141469 +
           ((C48072 * C7887 + C64724 + C64724 + C47710 * C8345 +
             C48073 * C10551 + C64725 + C64725 + C141358 * C11025) *
                C141452 +
            (C48072 * C7886 + C81443 + C81443 + C47710 * C8344 +
             C48073 * C10552 + C81444 + C81444 + C141358 * C11026) *
                C141221) *
               C141384) *
              C141294 * C2958) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eeyz[76] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30075 * C108 + C141469 * C276 + C30076 * C1601 +
             C141384 * C1784) *
                C47810 +
            (C30075 * C189 + C141469 * C501 + C30076 * C1690 +
             C141384 * C2040) *
                C47710 +
            (C38926 + C38927) * C47811 + (C39356 + C39357) * C141358) *
               C141452 +
           ((C30102 + C30103) * C47810 + (C30351 + C30352) * C47710 +
            C38914 * C47811 + C39350 * C141358) *
               C141221) *
              C141294 * C2956 -
          (((C39358 + C39359) * C141358 + (C38932 + C38933) * C47811 +
            C39355 * C47710 + C38925 * C47810) *
               C141221 +
           ((C42824 + C42825) * C141358 + (C42520 + C42521) * C47811 +
            (C39357 + C39356) * C47710 + (C38927 + C38926) * C47810) *
               C141452) *
              C141294 * C2957 +
          (((C42521 + C42520) * C47810 + (C42825 + C42824) * C47710 +
            (C30075 * C6729 + C141469 * C7002 + C30076 * C10551 +
             C141384 * C10779) *
                C47811 +
            (C30075 * C6880 + C141469 * C7414 + C30076 * C10677 +
             C141384 * C11131) *
                C141358) *
               C141452 +
           ((C38933 + C38932) * C47810 + (C39359 + C39358) * C47710 +
            (C30075 * C6728 + C141469 * C7001 + C30076 * C10552 +
             C141384 * C10780) *
                C47811 +
            (C30075 * C6879 + C141469 * C7413 + C30076 * C10678 +
             C141384 * C11132) *
                C141358) *
               C141221) *
              C141294 * C2958) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eezx[76] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139366 * C108 + C141452 * C114 + C139356 * C109 +
             C141221 * C115) *
                C30075 +
            (C139366 * C276 + C141452 * C579 + C139356 * C277 +
             C141221 * C580) *
                C141469 +
            (C79109 + C79110) * C30076 + (C79517 + C79518) * C141384) *
               C47710 +
           ((C69912 + C69913) * C30075 + (C70268 + C70269) * C141469 +
            (C73482 + C73481) * C30076 + (C73794 + C73793) * C141384) *
               C141358) *
              C141294 * C2956 -
          (((C73791 + C73792) * C141384 + (C73477 + C73478) * C30076 +
            (C70271 + C70270) * C141469 + (C69917 + C69916) * C30075) *
               C141358 +
           ((C73793 + C73794) * C141384 + (C73481 + C73482) * C30076 +
            (C70269 + C70268) * C141469 + (C69913 + C69912) * C30075) *
               C47710) *
              C141294 * C2957 +
          ((C72637 * C30075 + C72880 * C141469 + (C73478 + C73477) * C30076 +
            (C73792 + C73791) * C141384) *
               C47710 +
           ((C72650 + C72649) * C30075 + (C72887 + C72886) * C141469 +
            (C139366 * C10551 + C141452 * C10553 + C139356 * C10552 +
             C141221 * C10554) *
                C30076 +
            (C139366 * C10779 + C141452 * C11237 + C139356 * C10780 +
             C141221 * C11238) *
                C141384) *
               C141358) *
              C141294 * C2958) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eezy[76] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47810 * C108 + C47710 * C189 + C47811 * C823 + C141358 * C912) *
                C30075 +
            (C47810 * C276 + C47710 * C635 + C47811 * C1006 + C141358 * C1419) *
                C141469 +
            (C62638 + C62639) * C30076 + (C63336 + C63337) * C141384) *
               C141452 +
           ((C47837 + C47838) * C30075 + (C48366 + C48367) * C141469 +
            C78829 * C30076 + C79651 * C141384) *
               C141221) *
              C141294 * C2956 -
          (((C78413 + C78414) * C141384 + (C77599 + C77600) * C30076 +
            (C49412 + C49413) * C141469 + (C48710 + C48711) * C30075) *
               C141221 +
           ((C65970 + C65969) * C141384 + (C65287 + C65286) * C30076 +
            (C47811 * C3084 + C141358 * C3362 + C47810 * C1006 +
             C47710 * C1419) *
                C141469 +
            (C47811 * C2960 + C141358 * C3026 + C47810 * C823 + C47710 * C912) *
                C30075) *
               C141452) *
              C141294 * C2957 +
          (((C47810 * C2960 + C47710 * C3026 + C47811 * C6729 +
             C141358 * C6880) *
                C30075 +
            (C47810 * C3084 + C47710 * C3362 + C47811 * C7002 +
             C141358 * C7655) *
                C141469 +
            (C47810 * C7887 + C47710 * C8006 + C47811 * C10551 +
             C141358 * C10677) *
                C30076 +
            (C47810 * C8128 + C47710 * C8684 + C47811 * C10779 +
             C141358 * C11349) *
                C141384) *
               C141452 +
           ((C47810 * C2961 + C47710 * C3027 + C47811 * C6728 +
             C141358 * C6879) *
                C30075 +
            (C47810 * C3085 + C47710 * C3363 + C47811 * C7001 +
             C141358 * C7654) *
                C141469 +
            (C47810 * C7886 + C47710 * C8005 + C47811 * C10552 +
             C141358 * C10678) *
                C30076 +
            (C47810 * C8127 + C47710 * C8683 + C47811 * C10780 +
             C141358 * C11350) *
                C141384) *
               C141221) *
              C141294 * C2958) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eezz[76] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30596 * C108 + C30599 + C30599 + C141469 * C714 + C30597 * C1601 +
             C30600 + C30600 + C141384 * C2283) *
                C47710 +
            (C39780 + C39781) * C141358) *
               C141452 +
           ((C30633 + C30634) * C47710 + C39766 * C141358) * C141221) *
              C141294 * C2956 -
          (((C39782 + C39783) * C141358 + C39771 * C47710) * C141221 +
           ((C43132 + C43133) * C141358 + (C39781 + C39780) * C47710) *
               C141452) *
              C141294 * C2957 +
          (((C43133 + C43132) * C47710 +
            (C30596 * C6729 + C43124 + C43124 + C141469 * C7765 +
             C30597 * C10551 + C43125 + C43125 + C141384 * C11449) *
                C141358) *
               C141452 +
           ((C39783 + C39782) * C47710 +
            (C30596 * C6728 + C43126 + C43126 + C141469 * C7764 +
             C30597 * C10552 + C43127 + C43127 + C141384 * C11450) *
                C141358) *
               C141221) *
              C141294 * C2958) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eexx[77] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C68675 * C108 + C68680 + C68680 + C141452 * C120 + C68677 * C109 +
              C68681 + C68681 + C141221 * C121) *
                 C141469 +
             (C78695 + C78696) * C141384) *
                C47710 +
            ((C69544 + C69545) * C141469 + C81967 * C141384) * C141358) *
               C1596 -
           (((C81977 + C81978) * C141384 + C81972 * C141469) * C141358 +
            ((C68677 * C5326 + C75830 + C75830 + C141221 * C5334 +
              C68675 * C5325 + C75829 + C75829 + C141452 * C5333) *
                 C141384 +
             (C78696 + C78695) * C141469) *
                C47710) *
               C141487) *
              C2374 +
          (((C81967 * C141469 + (C81978 + C81977) * C141384) * C47710 +
            ((C73154 + C73153) * C141469 +
             (C68675 * C13303 + C75833 + C75833 + C141452 * C13311 +
              C68677 * C13304 + C75834 + C75834 + C141221 * C13312) *
                 C141384) *
                C141358) *
               C141487 -
           (((C73153 + C73154) * C141384 + (C69547 + C69546) * C141469) *
                C141358 +
            (C81972 * C141384 + (C69545 + C69544) * C141469) * C47710) *
               C1596) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eexy[77] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47810 * C108 + C47710 * C189 + C47811 * C823 + C141358 * C912) *
                 C139366 +
             (C47810 * C114 + C47710 * C195 + C47811 * C828 + C141358 * C917) *
                 C141452 +
             (C47837 + C47838) * C139356 + (C47839 + C47840) * C141221) *
                C141469 +
            ((C62638 + C62639) * C139366 + (C62640 + C62641) * C141452 +
             C78829 * C139356 + C78830 * C141221) *
                C141384) *
               C1596 -
           (((C62649 + C62648) * C141221 + (C62647 + C62646) * C139356 +
             (C62645 + C62644) * C141452 + (C62643 + C62642) * C139366) *
                C141384 +
            (C78831 * C141221 + C78832 * C139356 + (C62641 + C62640) * C141452 +
             (C62639 + C62638) * C139366) *
                C141469) *
               C141487) *
              C2374 +
          ((((C65286 + C65287) * C139366 + (C65288 + C65289) * C141452 +
             (C77600 + C77599) * C139356 + (C77598 + C77597) * C141221) *
                C141469 +
            ((C65290 + C65291) * C139366 + (C65292 + C65293) * C141452 +
             (C47810 * C13302 + C47710 * C13395 + C47811 * C13304 +
              C141358 * C13396) *
                 C139356 +
             (C47810 * C13306 + C47710 * C13399 + C47811 * C13308 +
              C141358 * C13400) *
                 C141221) *
                C141384) *
               C141487 -
           (((C77597 + C77598) * C141221 + (C77599 + C77600) * C139356 +
             (C65289 + C65288) * C141452 + (C65287 + C65286) * C139366) *
                C141384 +
            ((C48708 + C48709) * C141221 + (C48710 + C48711) * C139356 +
             (C47811 * C2964 + C141358 * C3030 + C47810 * C828 +
              C47710 * C917) *
                 C141452 +
             (C47811 * C2960 + C141358 * C3026 + C47810 * C823 +
              C47710 * C912) *
                 C139366) *
                C141469) *
               C1596) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eexz[77] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30075 * C108 + C141469 * C276 + C30076 * C1601 +
              C141384 * C1784) *
                 C139366 +
             (C30075 * C114 + C141469 * C282 + C30076 * C1606 +
              C141384 * C1789) *
                 C141452 +
             (C30102 + C30103) * C139356 + (C30104 + C30105) * C141221) *
                C47710 +
            ((C38926 + C38927) * C139366 + (C38928 + C38929) * C141452 +
             C38914 * C139356 + C38915 * C141221) *
                C141358) *
               C1596 -
           (((C40210 + C40211) * C141221 + (C40212 + C40213) * C139356 +
             (C43546 + C43547) * C141452 + (C43548 + C43549) * C139366) *
                C141358 +
            ((C31968 + C31969) * C141221 + (C31970 + C31971) * C139356 +
             (C30076 * C5329 + C141384 * C5453 + C30075 * C1606 +
              C141469 * C1789) *
                 C141452 +
             (C30076 * C5325 + C141384 * C5449 + C30075 * C1601 +
              C141469 * C1784) *
                 C139366) *
                C47710) *
               C141487) *
              C2374 +
          ((((C43549 + C43548) * C139366 + (C43547 + C43546) * C141452 +
             (C40213 + C40212) * C139356 + (C40211 + C40210) * C141221) *
                C47710 +
            ((C30075 * C7887 + C141469 * C8128 + C30076 * C13303 +
              C141384 * C13477) *
                 C139366 +
             (C30075 * C7890 + C141469 * C8131 + C30076 * C13307 +
              C141384 * C13481) *
                 C141452 +
             (C30075 * C7886 + C141469 * C8127 + C30076 * C13304 +
              C141384 * C13478) *
                 C139356 +
             (C30075 * C7889 + C141469 * C8130 + C30076 * C13308 +
              C141384 * C13482) *
                 C141221) *
                C141358) *
               C141487 -
           (((C38930 + C38931) * C141221 + (C38932 + C38933) * C139356 +
             (C42518 + C42519) * C141452 + (C42520 + C42521) * C139366) *
                C141358 +
            (C38924 * C141221 + C38925 * C139356 + (C38929 + C38928) * C141452 +
             (C38927 + C38926) * C139366) *
                C47710) *
               C1596) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eeyx[77] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139366 * C108 + C141452 * C114 + C139356 * C109 +
              C141221 * C115) *
                 C47810 +
             (C139366 * C189 + C141452 * C362 + C139356 * C190 +
              C141221 * C363) *
                 C47710 +
             (C69912 + C69913) * C47811 + (C69914 + C69915) * C141358) *
                C141469 +
            ((C79109 + C79110) * C47810 + (C79111 + C79112) * C47710 +
             C82369 * C47811 + C82370 * C141358) *
                C141384) *
               C1596 -
           (((C82381 + C82382) * C141358 + (C82383 + C82384) * C47811 +
             (C139356 * C5392 + C141221 * C5508 + C139366 * C5391 +
              C141452 * C5507) *
                 C47710 +
             (C139356 * C5326 + C141221 * C5330 + C139366 * C5325 +
              C141452 * C5329) *
                 C47810) *
                C141384 +
            (C82379 * C141358 + C82380 * C47811 + (C79112 + C79111) * C47710 +
             (C79110 + C79109) * C47810) *
                C141469) *
               C141487) *
              C2374 +
          (((C82369 * C47810 + C82370 * C47710 + (C73478 + C73477) * C47811 +
             (C73476 + C73475) * C141358) *
                C141469 +
            ((C82384 + C82383) * C47810 + (C82382 + C82381) * C47710 +
             (C139366 * C13303 + C141452 * C13307 + C139356 * C13304 +
              C141221 * C13308) *
                 C47811 +
             (C139366 * C13394 + C141452 * C13559 + C139356 * C13396 +
              C141221 * C13560) *
                 C141358) *
                C141384) *
               C141487 -
           (((C73475 + C73476) * C141358 + (C73477 + C73478) * C47811 +
             C82379 * C47710 + C82380 * C47810) *
                C141384 +
            ((C69919 + C69918) * C141358 + (C69917 + C69916) * C47811 +
             (C69915 + C69914) * C47710 + (C69913 + C69912) * C47810) *
                C141469) *
               C1596) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eeyy[77] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48072 * C108 + C48075 + C48075 + C47710 * C419 + C48073 * C823 +
              C48076 + C48076 + C141358 * C1171) *
                 C141452 +
             (C48109 + C48110) * C141221) *
                C141469 +
            ((C63012 + C63013) * C141452 + C79247 * C141221) * C141384) *
               C1596 -
           (((C63017 + C63016) * C141221 + (C63015 + C63014) * C141452) *
                C141384 +
            (C79248 * C141221 + (C63013 + C63012) * C141452) * C141469) *
               C141487) *
              C2374 +
          ((((C65642 + C65643) * C141452 + (C78012 + C78011) * C141221) *
                C141469 +
            ((C65644 + C65645) * C141452 +
             (C48072 * C13302 + C61955 + C61955 + C47710 * C13637 +
              C48073 * C13304 + C61956 + C61956 + C141358 * C13638) *
                 C141221) *
                C141384) *
               C141487 -
           (((C78011 + C78012) * C141221 + (C65643 + C65642) * C141452) *
                C141384 +
            ((C49080 + C49081) * C141221 +
             (C48073 * C2960 + C49066 + C49066 + C141358 * C3196 +
              C48072 * C823 + C49067 + C49067 + C47710 * C1171) *
                 C141452) *
                C141469) *
               C1596) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eeyz[77] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30075 * C108 + C141469 * C276 + C30076 * C1601 +
              C141384 * C1784) *
                 C47810 +
             (C30075 * C189 + C141469 * C501 + C30076 * C1690 +
              C141384 * C2040) *
                 C47710 +
             (C38926 + C38927) * C47811 + (C39356 + C39357) * C141358) *
                C141452 +
            ((C30102 + C30103) * C47810 + (C30351 + C30352) * C47710 +
             C38914 * C47811 + C39350 * C141358) *
                C141221) *
               C1596 -
           (((C40630 + C40631) * C141358 + (C40212 + C40213) * C47811 +
             (C32318 + C32319) * C47710 + (C31970 + C31971) * C47810) *
                C141221 +
            ((C43962 + C43963) * C141358 + (C43548 + C43549) * C47811 +
             (C30076 * C5391 + C141384 * C5619 + C30075 * C1690 +
              C141469 * C2040) *
                 C47710 +
             (C30076 * C5325 + C141384 * C5449 + C30075 * C1601 +
              C141469 * C1784) *
                 C47810) *
                C141452) *
               C141487) *
              C2374 +
          ((((C43549 + C43548) * C47810 + (C43963 + C43962) * C47710 +
             (C30075 * C7887 + C141469 * C8128 + C30076 * C13303 +
              C141384 * C13477) *
                 C47811 +
             (C30075 * C8006 + C141469 * C8470 + C30076 * C13394 +
              C141384 * C13720) *
                 C141358) *
                C141452 +
            ((C40213 + C40212) * C47810 + (C40631 + C40630) * C47710 +
             (C30075 * C7886 + C141469 * C8127 + C30076 * C13304 +
              C141384 * C13478) *
                 C47811 +
             (C30075 * C8005 + C141469 * C8469 + C30076 * C13396 +
              C141384 * C13722) *
                 C141358) *
                C141221) *
               C141487 -
           (((C39358 + C39359) * C141358 + (C38932 + C38933) * C47811 +
             C39355 * C47710 + C38925 * C47810) *
                C141221 +
            ((C42824 + C42825) * C141358 + (C42520 + C42521) * C47811 +
             (C39357 + C39356) * C47710 + (C38927 + C38926) * C47810) *
                C141452) *
               C1596) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eezx[77] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139366 * C108 + C141452 * C114 + C139356 * C109 +
              C141221 * C115) *
                 C30075 +
             (C139366 * C276 + C141452 * C579 + C139356 * C277 +
              C141221 * C580) *
                 C141469 +
             (C79109 + C79110) * C30076 + (C79517 + C79518) * C141384) *
                C47710 +
            ((C69912 + C69913) * C30075 + (C70268 + C70269) * C141469 +
             C82369 * C30076 + C82775 * C141384) *
                C141358) *
               C1596 -
           (((C82781 + C82782) * C141384 + (C82383 + C82384) * C30076 +
             C82780 * C141469 + C82380 * C30075) *
                C141358 +
            ((C139356 * C5450 + C141221 * C5674 + C139366 * C5449 +
              C141452 * C5673) *
                 C141384 +
             (C139356 * C5326 + C141221 * C5330 + C139366 * C5325 +
              C141452 * C5329) *
                 C30076 +
             (C79518 + C79517) * C141469 + (C79110 + C79109) * C30075) *
                C47710) *
               C141487) *
              C2374 +
          (((C82369 * C30075 + C82775 * C141469 + (C82384 + C82383) * C30076 +
             (C82782 + C82781) * C141384) *
                C47710 +
            ((C73478 + C73477) * C30075 + (C73792 + C73791) * C141469 +
             (C139366 * C13303 + C141452 * C13307 + C139356 * C13304 +
              C141221 * C13308) *
                 C30076 +
             (C139366 * C13477 + C141452 * C13799 + C139356 * C13478 +
              C141221 * C13800) *
                 C141384) *
                C141358) *
               C141487 -
           (((C73791 + C73792) * C141384 + (C73477 + C73478) * C30076 +
             (C70271 + C70270) * C141469 + (C69917 + C69916) * C30075) *
                C141358 +
            (C82780 * C141384 + C82380 * C30076 + (C70269 + C70268) * C141469 +
             (C69913 + C69912) * C30075) *
                C47710) *
               C1596) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eezy[77] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47810 * C108 + C47710 * C189 + C47811 * C823 + C141358 * C912) *
                 C30075 +
             (C47810 * C276 + C47710 * C635 + C47811 * C1006 +
              C141358 * C1419) *
                 C141469 +
             (C62638 + C62639) * C30076 + (C63336 + C63337) * C141384) *
                C141452 +
            ((C47837 + C47838) * C30075 + (C48366 + C48367) * C141469 +
             C78829 * C30076 + C79651 * C141384) *
                C141221) *
               C1596 -
           (((C63341 + C63340) * C141384 + (C62647 + C62646) * C30076 +
             C79652 * C141469 + C78832 * C30075) *
                C141221 +
            ((C63339 + C63338) * C141384 + (C62643 + C62642) * C30076 +
             (C63337 + C63336) * C141469 + (C62639 + C62638) * C30075) *
                C141452) *
               C141487) *
              C2374 +
          ((((C65286 + C65287) * C30075 + (C65969 + C65970) * C141469 +
             (C65290 + C65291) * C30076 + (C65971 + C65972) * C141384) *
                C141452 +
            ((C77600 + C77599) * C30075 + (C78414 + C78413) * C141469 +
             (C47810 * C13302 + C47710 * C13395 + C47811 * C13304 +
              C141358 * C13396) *
                 C30076 +
             (C47810 * C13476 + C47710 * C13877 + C47811 * C13478 +
              C141358 * C13878) *
                 C141384) *
                C141221) *
               C141487 -
           (((C78413 + C78414) * C141384 + (C77599 + C77600) * C30076 +
             (C49412 + C49413) * C141469 + (C48710 + C48711) * C30075) *
                C141221 +
            ((C65970 + C65969) * C141384 + (C65287 + C65286) * C30076 +
             (C47811 * C3084 + C141358 * C3362 + C47810 * C1006 +
              C47710 * C1419) *
                 C141469 +
             (C47811 * C2960 + C141358 * C3026 + C47810 * C823 +
              C47710 * C912) *
                 C30075) *
                C141452) *
               C1596) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eezz[77] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30596 * C108 + C30599 + C30599 + C141469 * C714 +
              C30597 * C1601 + C30600 + C30600 + C141384 * C2283) *
                 C47710 +
             (C39780 + C39781) * C141358) *
                C141452 +
            ((C30633 + C30634) * C47710 + C39766 * C141358) * C141221) *
               C1596 -
           (((C41044 + C41045) * C141358 + (C32666 + C32667) * C47710) *
                C141221 +
            ((C44374 + C44375) * C141358 +
             (C30597 * C5325 + C32652 + C32652 + C141384 * C5781 +
              C30596 * C1601 + C32653 + C32653 + C141469 * C2283) *
                 C47710) *
                C141452) *
               C141487) *
              C2374 +
          ((((C44375 + C44374) * C47710 +
             (C30596 * C7887 + C44366 + C44366 + C141469 * C8794 +
              C30597 * C13303 + C44367 + C44367 + C141384 * C13954) *
                 C141358) *
                C141452 +
            ((C41045 + C41044) * C47710 +
             (C30596 * C7886 + C44368 + C44368 + C141469 * C8793 +
              C30597 * C13304 + C44369 + C44369 + C141384 * C13956) *
                 C141358) *
                C141221) *
               C141487 -
           (((C39782 + C39783) * C141358 + C39771 * C47710) * C141221 +
            ((C43132 + C43133) * C141358 + (C39781 + C39780) * C47710) *
                C141452) *
               C1596) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eexx[78] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C68675 * C108 + C68680 + C68680 + C141452 * C120 + C68677 * C109 +
              C68681 + C68681 + C141221 * C121) *
                 C141469 +
             (C78695 + C78696) * C141384) *
                C47710 +
            ((C69544 + C69545) * C141469 + C81967 * C141384) * C141358) *
               C4148 -
           (((C81977 + C81978) * C141384 + C81972 * C141469) * C141358 +
            ((C68677 * C5326 + C75830 + C75830 + C141221 * C5334 +
              C68675 * C5325 + C75829 + C75829 + C141452 * C5333) *
                 C141384 +
             (C78696 + C78695) * C141469) *
                C47710) *
               C141487) *
              C141277 * C2376 +
          ((((C78697 + C78698) * C141469 +
             (C68675 * C5326 + C78683 + C78683 + C141452 * C5334 +
              C68677 * C5327 + C78684 + C78684 + C141221 * C5335) *
                 C141384) *
                C47710 +
            ((C77457 + C77458) * C141469 +
             (C68675 * C13302 + C78685 + C78685 + C141452 * C13310 +
              C68677 * C14876 + C78686 + C78686 + C141221 * C14878) *
                 C141384) *
                C141358) *
               C141487 -
           (((C77458 + C77457) * C141384 + (C69549 + C69548) * C141469) *
                C141358 +
            ((C78698 + C78697) * C141384 +
             (C68677 * C110 + C68690 + C68690 + C141221 * C122 + C68675 * C109 +
              C68691 + C68691 + C141452 * C121) *
                 C141469) *
                C47710) *
               C4148) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eexy[78] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47810 * C108 + C47710 * C189 + C47811 * C823 + C141358 * C912) *
                 C139366 +
             (C47810 * C114 + C47710 * C195 + C47811 * C828 + C141358 * C917) *
                 C141452 +
             (C47837 + C47838) * C139356 + (C47839 + C47840) * C141221) *
                C141469 +
            ((C62638 + C62639) * C139366 + (C62640 + C62641) * C141452 +
             C78829 * C139356 + C78830 * C141221) *
                C141384) *
               C4148 -
           (((C62649 + C62648) * C141221 + (C62647 + C62646) * C139356 +
             (C62645 + C62644) * C141452 + (C62643 + C62642) * C139366) *
                C141384 +
            (C78831 * C141221 + C78832 * C139356 + (C62641 + C62640) * C141452 +
             (C62639 + C62638) * C139366) *
                C141469) *
               C141487) *
              C141277 * C2376 +
          (((C78829 * C139366 + C78830 * C141452 + (C49743 + C49742) * C139356 +
             (C49741 + C49740) * C141221) *
                C141469 +
            ((C62646 + C62647) * C139366 + (C62648 + C62649) * C141452 +
             (C47810 * C5327 + C47710 * C5393 + C47811 * C14876 +
              C141358 * C14979) *
                 C139356 +
             (C47810 * C5331 + C47710 * C5397 + C47811 * C14877 +
              C141358 * C14980) *
                 C141221) *
                C141384) *
               C141487 -
           (((C49740 + C49741) * C141221 + (C49742 + C49743) * C139356 +
             C78831 * C141452 + C78832 * C139366) *
                C141384 +
            ((C47844 + C47843) * C141221 + (C47842 + C47841) * C139356 +
             (C47840 + C47839) * C141452 + (C47838 + C47837) * C139366) *
                C141469) *
               C4148) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eexz[78] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30075 * C108 + C141469 * C276 + C30076 * C1601 +
              C141384 * C1784) *
                 C139366 +
             (C30075 * C114 + C141469 * C282 + C30076 * C1606 +
              C141384 * C1789) *
                 C141452 +
             (C30102 + C30103) * C139356 + (C30104 + C30105) * C141221) *
                C47710 +
            ((C38926 + C38927) * C139366 + (C38928 + C38929) * C141452 +
             C38914 * C139356 + C38915 * C141221) *
                C141358) *
               C4148 -
           (((C40210 + C40211) * C141221 + (C40212 + C40213) * C139356 +
             (C43546 + C43547) * C141452 + (C43548 + C43549) * C139366) *
                C141358 +
            ((C31968 + C31969) * C141221 + (C31970 + C31971) * C139356 +
             (C30076 * C5329 + C141384 * C5453 + C30075 * C1606 +
              C141469 * C1789) *
                 C141452 +
             (C30076 * C5325 + C141384 * C5449 + C30075 * C1601 +
              C141469 * C1784) *
                 C139366) *
                C47710) *
               C141487) *
              C141277 * C2376 +
          ((((C31971 + C31970) * C139366 + (C31969 + C31968) * C141452 +
             (C31967 + C31966) * C139356 + (C31965 + C31964) * C141221) *
                C47710 +
            ((C40213 + C40212) * C139366 + (C40211 + C40210) * C141452 +
             (C30075 * C3492 + C141469 * C3648 + C30076 * C14876 +
              C141384 * C15091) *
                 C139356 +
             (C30075 * C3496 + C141469 * C3652 + C30076 * C14877 +
              C141384 * C15092) *
                 C141221) *
                C141358) *
               C141487 -
           (((C30957 + C30958) * C141221 + (C30959 + C30960) * C139356 +
             C38924 * C141452 + C38925 * C139366) *
                C141358 +
            ((C30109 + C30108) * C141221 + (C30107 + C30106) * C139356 +
             (C30105 + C30104) * C141452 + (C30103 + C30102) * C139366) *
                C47710) *
               C4148) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[78] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139366 * C108 + C141452 * C114 + C139356 * C109 +
              C141221 * C115) *
                 C47810 +
             (C139366 * C189 + C141452 * C362 + C139356 * C190 +
              C141221 * C363) *
                 C47710 +
             (C69912 + C69913) * C47811 + (C69914 + C69915) * C141358) *
                C141469 +
            ((C79109 + C79110) * C47810 + (C79111 + C79112) * C47710 +
             C82369 * C47811 + C82370 * C141358) *
                C141384) *
               C4148 -
           (((C82381 + C82382) * C141358 + (C82383 + C82384) * C47811 +
             (C139356 * C5392 + C141221 * C5508 + C139366 * C5391 +
              C141452 * C5507) *
                 C47710 +
             (C139356 * C5326 + C141221 * C5330 + C139366 * C5325 +
              C141452 * C5329) *
                 C47810) *
                C141384 +
            (C82379 * C141358 + C82380 * C47811 + (C79112 + C79111) * C47710 +
             (C79110 + C79109) * C47810) *
                C141469) *
               C141487) *
              C141277 * C2376 +
          ((((C79113 + C79114) * C47810 + (C79115 + C79116) * C47710 +
             (C77869 + C77870) * C47811 + (C77871 + C77872) * C141358) *
                C141469 +
            ((C139366 * C5326 + C141452 * C5330 + C139356 * C5327 +
              C141221 * C5331) *
                 C47810 +
             (C139366 * C5392 + C141452 * C5508 + C139356 * C5393 +
              C141221 * C5509) *
                 C47710 +
             (C139366 * C13302 + C141452 * C13306 + C139356 * C14876 +
              C141221 * C14877) *
                 C47811 +
             (C139366 * C13395 + C141452 * C13558 + C139356 * C14979 +
              C141221 * C15209) *
                 C141358) *
                C141384) *
               C141487 -
           (((C77872 + C77871) * C141358 + (C77870 + C77869) * C47811 +
             (C79116 + C79115) * C47710 + (C79114 + C79113) * C47810) *
                C141384 +
            ((C69923 + C69922) * C141358 + (C69921 + C69920) * C47811 +
             (C139356 * C191 + C141221 * C364 + C139366 * C190 +
              C141452 * C363) *
                 C47710 +
             (C139356 * C110 + C141221 * C116 + C139366 * C109 +
              C141452 * C115) *
                 C47810) *
                C141469) *
               C4148) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[78] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48072 * C108 + C48075 + C48075 + C47710 * C419 + C48073 * C823 +
              C48076 + C48076 + C141358 * C1171) *
                 C141452 +
             (C48109 + C48110) * C141221) *
                C141469 +
            ((C63012 + C63013) * C141452 + C79247 * C141221) * C141384) *
               C4148 -
           (((C63017 + C63016) * C141221 + (C63015 + C63014) * C141452) *
                C141384 +
            (C79248 * C141221 + (C63013 + C63012) * C141452) * C141469) *
               C141487) *
              C141277 * C2376 +
          (((C79247 * C141452 + (C50067 + C50066) * C141221) * C141469 +
            ((C63016 + C63017) * C141452 +
             (C48072 * C5327 + C55174 + C55174 + C47710 * C5563 +
              C48073 * C14876 + C55175 + C55175 + C141358 * C15308) *
                 C141221) *
                C141384) *
               C141487 -
           (((C50066 + C50067) * C141221 + C79248 * C141452) * C141384 +
            ((C48112 + C48111) * C141221 + (C48110 + C48109) * C141452) *
                C141469) *
               C4148) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[78] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30075 * C108 + C141469 * C276 + C30076 * C1601 +
              C141384 * C1784) *
                 C47810 +
             (C30075 * C189 + C141469 * C501 + C30076 * C1690 +
              C141384 * C2040) *
                 C47710 +
             (C38926 + C38927) * C47811 + (C39356 + C39357) * C141358) *
                C141452 +
            ((C30102 + C30103) * C47810 + (C30351 + C30352) * C47710 +
             C38914 * C47811 + C39350 * C141358) *
                C141221) *
               C4148 -
           (((C40630 + C40631) * C141358 + (C40212 + C40213) * C47811 +
             (C32318 + C32319) * C47710 + (C31970 + C31971) * C47810) *
                C141221 +
            ((C43962 + C43963) * C141358 + (C43548 + C43549) * C47811 +
             (C30076 * C5391 + C141384 * C5619 + C30075 * C1690 +
              C141469 * C2040) *
                 C47710 +
             (C30076 * C5325 + C141384 * C5449 + C30075 * C1601 +
              C141469 * C1784) *
                 C47810) *
                C141452) *
               C141487) *
              C141277 * C2376 +
          ((((C31971 + C31970) * C47810 + (C32319 + C32318) * C47710 +
             (C40213 + C40212) * C47811 + (C40631 + C40630) * C141358) *
                C141452 +
            ((C31967 + C31966) * C47810 + (C32317 + C32316) * C47710 +
             (C30075 * C3492 + C141469 * C3648 + C30076 * C14876 +
              C141384 * C15091) *
                 C47811 +
             (C30075 * C3574 + C141469 * C3866 + C30076 * C14979 +
              C141384 * C15420) *
                 C141358) *
                C141221) *
               C141487 -
           (((C31272 + C31273) * C141358 + (C30959 + C30960) * C47811 +
             (C30354 + C30353) * C47710 + (C30107 + C30106) * C47810) *
                C141221 +
            (C39355 * C141358 + C38925 * C47811 + (C30352 + C30351) * C47710 +
             (C30103 + C30102) * C47810) *
                C141452) *
               C4148) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eezx[78] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139366 * C108 + C141452 * C114 + C139356 * C109 +
              C141221 * C115) *
                 C30075 +
             (C139366 * C276 + C141452 * C579 + C139356 * C277 +
              C141221 * C580) *
                 C141469 +
             (C79109 + C79110) * C30076 + (C79517 + C79518) * C141384) *
                C47710 +
            ((C69912 + C69913) * C30075 + (C70268 + C70269) * C141469 +
             C82369 * C30076 + C82775 * C141384) *
                C141358) *
               C4148 -
           (((C82781 + C82782) * C141384 + (C82383 + C82384) * C30076 +
             C82780 * C141469 + C82380 * C30075) *
                C141358 +
            ((C139356 * C5450 + C141221 * C5674 + C139366 * C5449 +
              C141452 * C5673) *
                 C141384 +
             (C139356 * C5326 + C141221 * C5330 + C139366 * C5325 +
              C141452 * C5329) *
                 C30076 +
             (C79518 + C79517) * C141469 + (C79110 + C79109) * C30075) *
                C47710) *
               C141487) *
              C141277 * C2376 +
          ((((C79113 + C79114) * C30075 + (C79519 + C79520) * C141469 +
             (C139366 * C5326 + C141452 * C5330 + C139356 * C5327 +
              C141221 * C5331) *
                 C30076 +
             (C139366 * C5450 + C141452 * C5674 + C139356 * C5451 +
              C141221 * C5675) *
                 C141384) *
                C47710 +
            ((C77869 + C77870) * C30075 + (C78277 + C78278) * C141469 +
             (C139366 * C13302 + C141452 * C13306 + C139356 * C14876 +
              C141221 * C14877) *
                 C30076 +
             (C139366 * C13476 + C141452 * C13798 + C139356 * C15091 +
              C141221 * C15528) *
                 C141384) *
                C141358) *
               C141487 -
           (((C78278 + C78277) * C141384 + (C77870 + C77869) * C30076 +
             (C70273 + C70272) * C141469 + (C69921 + C69920) * C30075) *
                C141358 +
            ((C79520 + C79519) * C141384 + (C79114 + C79113) * C30076 +
             (C139356 * C278 + C141221 * C581 + C139366 * C277 +
              C141452 * C580) *
                 C141469 +
             (C139356 * C110 + C141221 * C116 + C139366 * C109 +
              C141452 * C115) *
                 C30075) *
                C47710) *
               C4148) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eezy[78] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47810 * C108 + C47710 * C189 + C47811 * C823 + C141358 * C912) *
                 C30075 +
             (C47810 * C276 + C47710 * C635 + C47811 * C1006 +
              C141358 * C1419) *
                 C141469 +
             (C62638 + C62639) * C30076 + (C63336 + C63337) * C141384) *
                C141452 +
            ((C47837 + C47838) * C30075 + (C48366 + C48367) * C141469 +
             C78829 * C30076 + C79651 * C141384) *
                C141221) *
               C4148 -
           (((C63341 + C63340) * C141384 + (C62647 + C62646) * C30076 +
             C79652 * C141469 + C78832 * C30075) *
                C141221 +
            ((C63339 + C63338) * C141384 + (C62643 + C62642) * C30076 +
             (C63337 + C63336) * C141469 + (C62639 + C62638) * C30075) *
                C141452) *
               C141487) *
              C141277 * C2376 +
          (((C78829 * C30075 + C79651 * C141469 + (C62646 + C62647) * C30076 +
             (C63340 + C63341) * C141384) *
                C141452 +
            ((C49743 + C49742) * C30075 + (C50381 + C50380) * C141469 +
             (C47810 * C5327 + C47710 * C5393 + C47811 * C14876 +
              C141358 * C14979) *
                 C30076 +
             (C47810 * C5451 + C47710 * C5729 + C47811 * C15091 +
              C141358 * C15627) *
                 C141384) *
                C141221) *
               C141487 -
           (((C50380 + C50381) * C141384 + (C49742 + C49743) * C30076 +
             (C48369 + C48368) * C141469 + (C47842 + C47841) * C30075) *
                C141221 +
            (C79652 * C141384 + C78832 * C30076 + (C48367 + C48366) * C141469 +
             (C47838 + C47837) * C30075) *
                C141452) *
               C4148) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eezz[78] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30596 * C108 + C30599 + C30599 + C141469 * C714 +
              C30597 * C1601 + C30600 + C30600 + C141384 * C2283) *
                 C47710 +
             (C39780 + C39781) * C141358) *
                C141452 +
            ((C30633 + C30634) * C47710 + C39766 * C141358) * C141221) *
               C4148 -
           (((C41044 + C41045) * C141358 + (C32666 + C32667) * C47710) *
                C141221 +
            ((C44374 + C44375) * C141358 +
             (C30597 * C5325 + C32652 + C32652 + C141384 * C5781 +
              C30596 * C1601 + C32653 + C32653 + C141469 * C2283) *
                 C47710) *
                C141452) *
               C141487) *
              C141277 * C2376 +
          ((((C32667 + C32666) * C47710 + (C41045 + C41044) * C141358) *
                C141452 +
            ((C32665 + C32664) * C47710 +
             (C30596 * C3492 + C35118 + C35118 + C141469 * C4076 +
              C30597 * C14876 + C35119 + C35119 + C141384 * C15738) *
                 C141358) *
                C141221) *
               C141487 -
           (((C31605 + C31606) * C141358 + (C30636 + C30635) * C47710) *
                C141221 +
            (C39771 * C141358 + (C30634 + C30633) * C47710) * C141452) *
               C4148) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eexx[79] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C68675 * C108 + C68680 + C68680 + C141452 * C120 + C68677 * C109 +
              C68681 + C68681 + C141221 * C121) *
                 C141469 +
             (C78695 + C78696) * C141384) *
                C47710 +
            ((C69544 + C69545) * C141469 + C81967 * C141384) * C141358) *
               C4148 -
           (((C81977 + C81978) * C141384 + C81972 * C141469) * C141358 +
            ((C68677 * C5326 + C75830 + C75830 + C141221 * C5334 +
              C68675 * C5325 + C75829 + C75829 + C141452 * C5333) *
                 C141384 +
             (C78696 + C78695) * C141469) *
                C47710) *
               C141487) *
              C816 +
          (((C81967 * C141469 + (C81978 + C81977) * C141384) * C47710 +
            ((C73154 + C73153) * C141469 +
             (C68675 * C13303 + C75833 + C75833 + C141452 * C13311 +
              C68677 * C13304 + C75834 + C75834 + C141221 * C13312) *
                 C141384) *
                C141358) *
               C141487 -
           (((C73153 + C73154) * C141384 + (C69547 + C69546) * C141469) *
                C141358 +
            (C81972 * C141384 + (C69545 + C69544) * C141469) * C47710) *
               C4148) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eexy[79] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47810 * C108 + C47710 * C189 + C47811 * C823 + C141358 * C912) *
                 C139366 +
             (C47810 * C114 + C47710 * C195 + C47811 * C828 + C141358 * C917) *
                 C141452 +
             (C47837 + C47838) * C139356 + (C47839 + C47840) * C141221) *
                C141469 +
            ((C62638 + C62639) * C139366 + (C62640 + C62641) * C141452 +
             C78829 * C139356 + C78830 * C141221) *
                C141384) *
               C4148 -
           (((C62649 + C62648) * C141221 + (C62647 + C62646) * C139356 +
             (C62645 + C62644) * C141452 + (C62643 + C62642) * C139366) *
                C141384 +
            (C78831 * C141221 + C78832 * C139356 + (C62641 + C62640) * C141452 +
             (C62639 + C62638) * C139366) *
                C141469) *
               C141487) *
              C816 +
          ((((C65286 + C65287) * C139366 + (C65288 + C65289) * C141452 +
             (C77600 + C77599) * C139356 + (C77598 + C77597) * C141221) *
                C141469 +
            ((C65290 + C65291) * C139366 + (C65292 + C65293) * C141452 +
             (C47810 * C13302 + C47710 * C13395 + C47811 * C13304 +
              C141358 * C13396) *
                 C139356 +
             (C47810 * C13306 + C47710 * C13399 + C47811 * C13308 +
              C141358 * C13400) *
                 C141221) *
                C141384) *
               C141487 -
           (((C77597 + C77598) * C141221 + (C77599 + C77600) * C139356 +
             (C65289 + C65288) * C141452 + (C65287 + C65286) * C139366) *
                C141384 +
            ((C48708 + C48709) * C141221 + (C48710 + C48711) * C139356 +
             (C47811 * C2964 + C141358 * C3030 + C47810 * C828 +
              C47710 * C917) *
                 C141452 +
             (C47811 * C2960 + C141358 * C3026 + C47810 * C823 +
              C47710 * C912) *
                 C139366) *
                C141469) *
               C4148) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eexz[79] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30075 * C108 + C141469 * C276 + C30076 * C1601 +
              C141384 * C1784) *
                 C139366 +
             (C30075 * C114 + C141469 * C282 + C30076 * C1606 +
              C141384 * C1789) *
                 C141452 +
             (C30102 + C30103) * C139356 + (C30104 + C30105) * C141221) *
                C47710 +
            ((C38926 + C38927) * C139366 + (C38928 + C38929) * C141452 +
             C38914 * C139356 + C38915 * C141221) *
                C141358) *
               C4148 -
           (((C40210 + C40211) * C141221 + (C40212 + C40213) * C139356 +
             (C43546 + C43547) * C141452 + (C43548 + C43549) * C139366) *
                C141358 +
            ((C31968 + C31969) * C141221 + (C31970 + C31971) * C139356 +
             (C30076 * C5329 + C141384 * C5453 + C30075 * C1606 +
              C141469 * C1789) *
                 C141452 +
             (C30076 * C5325 + C141384 * C5449 + C30075 * C1601 +
              C141469 * C1784) *
                 C139366) *
                C47710) *
               C141487) *
              C816 +
          ((((C43549 + C43548) * C139366 + (C43547 + C43546) * C141452 +
             (C40213 + C40212) * C139356 + (C40211 + C40210) * C141221) *
                C47710 +
            ((C30075 * C7887 + C141469 * C8128 + C30076 * C13303 +
              C141384 * C13477) *
                 C139366 +
             (C30075 * C7890 + C141469 * C8131 + C30076 * C13307 +
              C141384 * C13481) *
                 C141452 +
             (C30075 * C7886 + C141469 * C8127 + C30076 * C13304 +
              C141384 * C13478) *
                 C139356 +
             (C30075 * C7889 + C141469 * C8130 + C30076 * C13308 +
              C141384 * C13482) *
                 C141221) *
                C141358) *
               C141487 -
           (((C38930 + C38931) * C141221 + (C38932 + C38933) * C139356 +
             (C42518 + C42519) * C141452 + (C42520 + C42521) * C139366) *
                C141358 +
            (C38924 * C141221 + C38925 * C139356 + (C38929 + C38928) * C141452 +
             (C38927 + C38926) * C139366) *
                C47710) *
               C4148) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eeyx[79] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139366 * C108 + C141452 * C114 + C139356 * C109 +
              C141221 * C115) *
                 C47810 +
             (C139366 * C189 + C141452 * C362 + C139356 * C190 +
              C141221 * C363) *
                 C47710 +
             (C69912 + C69913) * C47811 + (C69914 + C69915) * C141358) *
                C141469 +
            ((C79109 + C79110) * C47810 + (C79111 + C79112) * C47710 +
             C82369 * C47811 + C82370 * C141358) *
                C141384) *
               C4148 -
           (((C82381 + C82382) * C141358 + (C82383 + C82384) * C47811 +
             (C139356 * C5392 + C141221 * C5508 + C139366 * C5391 +
              C141452 * C5507) *
                 C47710 +
             (C139356 * C5326 + C141221 * C5330 + C139366 * C5325 +
              C141452 * C5329) *
                 C47810) *
                C141384 +
            (C82379 * C141358 + C82380 * C47811 + (C79112 + C79111) * C47710 +
             (C79110 + C79109) * C47810) *
                C141469) *
               C141487) *
              C816 +
          (((C82369 * C47810 + C82370 * C47710 + (C73478 + C73477) * C47811 +
             (C73476 + C73475) * C141358) *
                C141469 +
            ((C82384 + C82383) * C47810 + (C82382 + C82381) * C47710 +
             (C139366 * C13303 + C141452 * C13307 + C139356 * C13304 +
              C141221 * C13308) *
                 C47811 +
             (C139366 * C13394 + C141452 * C13559 + C139356 * C13396 +
              C141221 * C13560) *
                 C141358) *
                C141384) *
               C141487 -
           (((C73475 + C73476) * C141358 + (C73477 + C73478) * C47811 +
             C82379 * C47710 + C82380 * C47810) *
                C141384 +
            ((C69919 + C69918) * C141358 + (C69917 + C69916) * C47811 +
             (C69915 + C69914) * C47710 + (C69913 + C69912) * C47810) *
                C141469) *
               C4148) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eeyy[79] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48072 * C108 + C48075 + C48075 + C47710 * C419 + C48073 * C823 +
              C48076 + C48076 + C141358 * C1171) *
                 C141452 +
             (C48109 + C48110) * C141221) *
                C141469 +
            ((C63012 + C63013) * C141452 + C79247 * C141221) * C141384) *
               C4148 -
           (((C63017 + C63016) * C141221 + (C63015 + C63014) * C141452) *
                C141384 +
            (C79248 * C141221 + (C63013 + C63012) * C141452) * C141469) *
               C141487) *
              C816 +
          ((((C65642 + C65643) * C141452 + (C78012 + C78011) * C141221) *
                C141469 +
            ((C65644 + C65645) * C141452 +
             (C48072 * C13302 + C61955 + C61955 + C47710 * C13637 +
              C48073 * C13304 + C61956 + C61956 + C141358 * C13638) *
                 C141221) *
                C141384) *
               C141487 -
           (((C78011 + C78012) * C141221 + (C65643 + C65642) * C141452) *
                C141384 +
            ((C49080 + C49081) * C141221 +
             (C48073 * C2960 + C49066 + C49066 + C141358 * C3196 +
              C48072 * C823 + C49067 + C49067 + C47710 * C1171) *
                 C141452) *
                C141469) *
               C4148) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eeyz[79] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30075 * C108 + C141469 * C276 + C30076 * C1601 +
              C141384 * C1784) *
                 C47810 +
             (C30075 * C189 + C141469 * C501 + C30076 * C1690 +
              C141384 * C2040) *
                 C47710 +
             (C38926 + C38927) * C47811 + (C39356 + C39357) * C141358) *
                C141452 +
            ((C30102 + C30103) * C47810 + (C30351 + C30352) * C47710 +
             C38914 * C47811 + C39350 * C141358) *
                C141221) *
               C4148 -
           (((C40630 + C40631) * C141358 + (C40212 + C40213) * C47811 +
             (C32318 + C32319) * C47710 + (C31970 + C31971) * C47810) *
                C141221 +
            ((C43962 + C43963) * C141358 + (C43548 + C43549) * C47811 +
             (C30076 * C5391 + C141384 * C5619 + C30075 * C1690 +
              C141469 * C2040) *
                 C47710 +
             (C30076 * C5325 + C141384 * C5449 + C30075 * C1601 +
              C141469 * C1784) *
                 C47810) *
                C141452) *
               C141487) *
              C816 +
          ((((C43549 + C43548) * C47810 + (C43963 + C43962) * C47710 +
             (C30075 * C7887 + C141469 * C8128 + C30076 * C13303 +
              C141384 * C13477) *
                 C47811 +
             (C30075 * C8006 + C141469 * C8470 + C30076 * C13394 +
              C141384 * C13720) *
                 C141358) *
                C141452 +
            ((C40213 + C40212) * C47810 + (C40631 + C40630) * C47710 +
             (C30075 * C7886 + C141469 * C8127 + C30076 * C13304 +
              C141384 * C13478) *
                 C47811 +
             (C30075 * C8005 + C141469 * C8469 + C30076 * C13396 +
              C141384 * C13722) *
                 C141358) *
                C141221) *
               C141487 -
           (((C39358 + C39359) * C141358 + (C38932 + C38933) * C47811 +
             C39355 * C47710 + C38925 * C47810) *
                C141221 +
            ((C42824 + C42825) * C141358 + (C42520 + C42521) * C47811 +
             (C39357 + C39356) * C47710 + (C38927 + C38926) * C47810) *
                C141452) *
               C4148) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eezx[79] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139366 * C108 + C141452 * C114 + C139356 * C109 +
              C141221 * C115) *
                 C30075 +
             (C139366 * C276 + C141452 * C579 + C139356 * C277 +
              C141221 * C580) *
                 C141469 +
             (C79109 + C79110) * C30076 + (C79517 + C79518) * C141384) *
                C47710 +
            ((C69912 + C69913) * C30075 + (C70268 + C70269) * C141469 +
             C82369 * C30076 + C82775 * C141384) *
                C141358) *
               C4148 -
           (((C82781 + C82782) * C141384 + (C82383 + C82384) * C30076 +
             C82780 * C141469 + C82380 * C30075) *
                C141358 +
            ((C139356 * C5450 + C141221 * C5674 + C139366 * C5449 +
              C141452 * C5673) *
                 C141384 +
             (C139356 * C5326 + C141221 * C5330 + C139366 * C5325 +
              C141452 * C5329) *
                 C30076 +
             (C79518 + C79517) * C141469 + (C79110 + C79109) * C30075) *
                C47710) *
               C141487) *
              C816 +
          (((C82369 * C30075 + C82775 * C141469 + (C82384 + C82383) * C30076 +
             (C82782 + C82781) * C141384) *
                C47710 +
            ((C73478 + C73477) * C30075 + (C73792 + C73791) * C141469 +
             (C139366 * C13303 + C141452 * C13307 + C139356 * C13304 +
              C141221 * C13308) *
                 C30076 +
             (C139366 * C13477 + C141452 * C13799 + C139356 * C13478 +
              C141221 * C13800) *
                 C141384) *
                C141358) *
               C141487 -
           (((C73791 + C73792) * C141384 + (C73477 + C73478) * C30076 +
             (C70271 + C70270) * C141469 + (C69917 + C69916) * C30075) *
                C141358 +
            (C82780 * C141384 + C82380 * C30076 + (C70269 + C70268) * C141469 +
             (C69913 + C69912) * C30075) *
                C47710) *
               C4148) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eezy[79] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47810 * C108 + C47710 * C189 + C47811 * C823 + C141358 * C912) *
                 C30075 +
             (C47810 * C276 + C47710 * C635 + C47811 * C1006 +
              C141358 * C1419) *
                 C141469 +
             (C62638 + C62639) * C30076 + (C63336 + C63337) * C141384) *
                C141452 +
            ((C47837 + C47838) * C30075 + (C48366 + C48367) * C141469 +
             C78829 * C30076 + C79651 * C141384) *
                C141221) *
               C4148 -
           (((C63341 + C63340) * C141384 + (C62647 + C62646) * C30076 +
             C79652 * C141469 + C78832 * C30075) *
                C141221 +
            ((C63339 + C63338) * C141384 + (C62643 + C62642) * C30076 +
             (C63337 + C63336) * C141469 + (C62639 + C62638) * C30075) *
                C141452) *
               C141487) *
              C816 +
          ((((C65286 + C65287) * C30075 + (C65969 + C65970) * C141469 +
             (C65290 + C65291) * C30076 + (C65971 + C65972) * C141384) *
                C141452 +
            ((C77600 + C77599) * C30075 + (C78414 + C78413) * C141469 +
             (C47810 * C13302 + C47710 * C13395 + C47811 * C13304 +
              C141358 * C13396) *
                 C30076 +
             (C47810 * C13476 + C47710 * C13877 + C47811 * C13478 +
              C141358 * C13878) *
                 C141384) *
                C141221) *
               C141487 -
           (((C78413 + C78414) * C141384 + (C77599 + C77600) * C30076 +
             (C49412 + C49413) * C141469 + (C48710 + C48711) * C30075) *
                C141221 +
            ((C65970 + C65969) * C141384 + (C65287 + C65286) * C30076 +
             (C47811 * C3084 + C141358 * C3362 + C47810 * C1006 +
              C47710 * C1419) *
                 C141469 +
             (C47811 * C2960 + C141358 * C3026 + C47810 * C823 +
              C47710 * C912) *
                 C30075) *
                C141452) *
               C4148) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eezz[79] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30596 * C108 + C30599 + C30599 + C141469 * C714 +
              C30597 * C1601 + C30600 + C30600 + C141384 * C2283) *
                 C47710 +
             (C39780 + C39781) * C141358) *
                C141452 +
            ((C30633 + C30634) * C47710 + C39766 * C141358) * C141221) *
               C4148 -
           (((C41044 + C41045) * C141358 + (C32666 + C32667) * C47710) *
                C141221 +
            ((C44374 + C44375) * C141358 +
             (C30597 * C5325 + C32652 + C32652 + C141384 * C5781 +
              C30596 * C1601 + C32653 + C32653 + C141469 * C2283) *
                 C47710) *
                C141452) *
               C141487) *
              C816 +
          ((((C44375 + C44374) * C47710 +
             (C30596 * C7887 + C44366 + C44366 + C141469 * C8794 +
              C30597 * C13303 + C44367 + C44367 + C141384 * C13954) *
                 C141358) *
                C141452 +
            ((C41045 + C41044) * C47710 +
             (C30596 * C7886 + C44368 + C44368 + C141469 * C8793 +
              C30597 * C13304 + C44369 + C44369 + C141384 * C13956) *
                 C141358) *
                C141221) *
               C141487 -
           (((C39782 + C39783) * C141358 + C39771 * C47710) * C141221 +
            ((C43132 + C43133) * C141358 + (C39781 + C39780) * C47710) *
                C141452) *
               C4148) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eexx[80] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C68675 * C108 + C68680 + C68680 + C141452 * C120 + C68677 * C109 +
             C68681 + C68681 + C141221 * C121) *
                C141469 +
            (C78695 + C78696) * C141384) *
               C47710 +
           ((C69544 + C69545) * C141469 + C81967 * C141384) * C141358) *
              C5322 -
          (((C81977 + C81978) * C141384 + C81972 * C141469) * C141358 +
           ((C85493 + C85494) * C141384 + (C78696 + C78695) * C141469) *
               C47710) *
              C5323 +
          (((C85494 + C85493) * C141469 +
            (C68675 * C15862 + C85485 + C85485 + C141452 * C15868 +
             C68677 * C15861 + C85486 + C85486 + C141221 * C15867) *
                C141384) *
               C47710 +
           ((C81978 + C81977) * C141469 +
            (C68675 * C18582 + C85487 + C85487 + C141452 * C18586 +
             C68677 * C18583 + C85488 + C85488 + C141221 * C18587) *
                C141384) *
               C141358) *
              C5324) *
         C141277 * C141243) /
        (p * q * std::sqrt(p + q));
    d2eexy[80] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47810 * C108 + C47710 * C189 + C47811 * C823 + C141358 * C912) *
                C139366 +
            (C47810 * C114 + C47710 * C195 + C47811 * C828 + C141358 * C917) *
                C141452 +
            (C47837 + C47838) * C139356 + (C47839 + C47840) * C141221) *
               C141469 +
           ((C62638 + C62639) * C139366 + (C62640 + C62641) * C141452 +
            C78829 * C139356 + C78830 * C141221) *
               C141384) *
              C5322 -
          (((C62649 + C62648) * C141221 + (C62647 + C62646) * C139356 +
            (C62645 + C62644) * C141452 + (C62643 + C62642) * C139366) *
               C141384 +
           (C78831 * C141221 + C78832 * C139356 + (C62641 + C62640) * C141452 +
            (C62639 + C62638) * C139366) *
               C141469) *
              C5323 +
          ((C68014 * C139366 + C68015 * C141452 + (C62646 + C62647) * C139356 +
            (C62648 + C62649) * C141221) *
               C141469 +
           ((C68029 + C68028) * C139366 + (C68027 + C68026) * C141452 +
            (C47810 * C15861 + C47710 * C16012 + C47811 * C18583 +
             C141358 * C18699) *
                C139356 +
            (C47810 * C15864 + C47710 * C16015 + C47811 * C18585 +
             C141358 * C18701) *
                C141221) *
               C141384) *
              C5324) *
         C141277 * C141243) /
        (p * q * std::sqrt(p + q));
    d2eexz[80] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30075 * C108 + C141469 * C276 + C30076 * C1601 +
             C141384 * C1784) *
                C139366 +
            (C30075 * C114 + C141469 * C282 + C30076 * C1606 +
             C141384 * C1789) *
                C141452 +
            (C30102 + C30103) * C139356 + (C30104 + C30105) * C141221) *
               C47710 +
           ((C38926 + C38927) * C139366 + (C38928 + C38929) * C141452 +
            C38914 * C139356 + C38915 * C141221) *
               C141358) *
              C5322 -
          (((C40210 + C40211) * C141221 + (C40212 + C40213) * C139356 +
            (C43546 + C43547) * C141452 + (C43548 + C43549) * C139366) *
               C141358 +
           ((C31968 + C31969) * C141221 + (C31970 + C31971) * C139356 +
            (C30076 * C5329 + C141384 * C5453 + C30075 * C1606 +
             C141469 * C1789) *
                C141452 +
            (C30076 * C5325 + C141384 * C5449 + C30075 * C1601 +
             C141469 * C1784) *
                C139366) *
               C47710) *
              C5323 +
          (((C30075 * C5325 + C141469 * C5449 + C30076 * C15862 +
             C141384 * C16151) *
                C139366 +
            (C30075 * C5329 + C141469 * C5453 + C30076 * C15865 +
             C141384 * C16154) *
                C141452 +
            (C30075 * C5326 + C141469 * C5450 + C30076 * C15861 +
             C141384 * C16150) *
                C139356 +
            (C30075 * C5330 + C141469 * C5454 + C30076 * C15864 +
             C141384 * C16153) *
                C141221) *
               C47710 +
           ((C30075 * C13301 + C141469 * C13475 + C30076 * C18582 +
             C141384 * C18820) *
                C139366 +
            (C30075 * C13305 + C141469 * C13479 + C30076 * C18584 +
             C141384 * C18822) *
                C141452 +
            (C30075 * C13302 + C141469 * C13476 + C30076 * C18583 +
             C141384 * C18821) *
                C139356 +
            (C30075 * C13306 + C141469 * C13480 + C30076 * C18585 +
             C141384 * C18823) *
                C141221) *
               C141358) *
              C5324) *
         C141277 * C141243) /
        (p * q * std::sqrt(p + q));
    d2eeyx[80] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139366 * C108 + C141452 * C114 + C139356 * C109 +
             C141221 * C115) *
                C47810 +
            (C139366 * C189 + C141452 * C362 + C139356 * C190 +
             C141221 * C363) *
                C47710 +
            (C69912 + C69913) * C47811 + (C69914 + C69915) * C141358) *
               C141469 +
           ((C79109 + C79110) * C47810 + (C79111 + C79112) * C47710 +
            C82369 * C47811 + C82370 * C141358) *
               C141384) *
              C5322 -
          (((C82381 + C82382) * C141358 + (C82383 + C82384) * C47811 +
            (C85797 + C85798) * C47710 + (C85799 + C85800) * C47810) *
               C141384 +
           (C82379 * C141358 + C82380 * C47811 + (C79112 + C79111) * C47710 +
            (C79110 + C79109) * C47810) *
               C141469) *
              C5323 +
          (((C85800 + C85799) * C47810 + (C85798 + C85797) * C47710 +
            (C82384 + C82383) * C47811 + (C82382 + C82381) * C141358) *
               C141469 +
           ((C139366 * C15862 + C141452 * C15865 + C139356 * C15861 +
             C141221 * C15864) *
                C47810 +
            (C139366 * C16013 + C141452 * C16273 + C139356 * C16012 +
             C141221 * C16272) *
                C47710 +
            (C139366 * C18582 + C141452 * C18584 + C139356 * C18583 +
             C141221 * C18585) *
                C47811 +
            (C139366 * C18698 + C141452 * C18922 + C139356 * C18699 +
             C141221 * C18923) *
                C141358) *
               C141384) *
              C5324) *
         C141277 * C141243) /
        (p * q * std::sqrt(p + q));
    d2eeyy[80] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C48072 * C108 + C48075 + C48075 + C47710 * C419 + C48073 * C823 +
             C48076 + C48076 + C141358 * C1171) *
                C141452 +
            (C48109 + C48110) * C141221) *
               C141469 +
           ((C63012 + C63013) * C141452 + C79247 * C141221) * C141384) *
              C5322 -
          (((C63017 + C63016) * C141221 + (C63015 + C63014) * C141452) *
               C141384 +
           (C79248 * C141221 + (C63013 + C63012) * C141452) * C141469) *
              C5323 +
          ((C68270 * C141452 + (C63016 + C63017) * C141221) * C141469 +
           ((C68283 + C68282) * C141452 +
            (C48072 * C15861 + C62998 + C62998 + C47710 * C16421 +
             C48073 * C18583 + C62999 + C62999 + C141358 * C19035) *
                C141221) *
               C141384) *
              C5324) *
         C141277 * C141243) /
        (p * q * std::sqrt(p + q));
    d2eeyz[80] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30075 * C108 + C141469 * C276 + C30076 * C1601 +
             C141384 * C1784) *
                C47810 +
            (C30075 * C189 + C141469 * C501 + C30076 * C1690 +
             C141384 * C2040) *
                C47710 +
            (C38926 + C38927) * C47811 + (C39356 + C39357) * C141358) *
               C141452 +
           ((C30102 + C30103) * C47810 + (C30351 + C30352) * C47710 +
            C38914 * C47811 + C39350 * C141358) *
               C141221) *
              C5322 -
          (((C40630 + C40631) * C141358 + (C40212 + C40213) * C47811 +
            (C32318 + C32319) * C47710 + (C31970 + C31971) * C47810) *
               C141221 +
           ((C43962 + C43963) * C141358 + (C43548 + C43549) * C47811 +
            (C30076 * C5391 + C141384 * C5619 + C30075 * C1690 +
             C141469 * C2040) *
                C47710 +
            (C30076 * C5325 + C141384 * C5449 + C30075 * C1601 +
             C141469 * C1784) *
                C47810) *
               C141452) *
              C5323 +
          (((C30075 * C5325 + C141469 * C5449 + C30076 * C15862 +
             C141384 * C16151) *
                C47810 +
            (C30075 * C5391 + C141469 * C5619 + C30076 * C16013 +
             C141384 * C16549) *
                C47710 +
            (C30075 * C13301 + C141469 * C13475 + C30076 * C18582 +
             C141384 * C18820) *
                C47811 +
            (C30075 * C13393 + C141469 * C13719 + C30076 * C18698 +
             C141384 * C19150) *
                C141358) *
               C141452 +
           ((C30075 * C5326 + C141469 * C5450 + C30076 * C15861 +
             C141384 * C16150) *
                C47810 +
            (C30075 * C5392 + C141469 * C5620 + C30076 * C16012 +
             C141384 * C16548) *
                C47710 +
            (C30075 * C13302 + C141469 * C13476 + C30076 * C18583 +
             C141384 * C18821) *
                C47811 +
            (C30075 * C13395 + C141469 * C13721 + C30076 * C18699 +
             C141384 * C19151) *
                C141358) *
               C141221) *
              C5324) *
         C141277 * C141243) /
        (p * q * std::sqrt(p + q));
    d2eezx[80] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139366 * C108 + C141452 * C114 + C139356 * C109 +
             C141221 * C115) *
                C30075 +
            (C139366 * C276 + C141452 * C579 + C139356 * C277 +
             C141221 * C580) *
                C141469 +
            (C79109 + C79110) * C30076 + (C79517 + C79518) * C141384) *
               C47710 +
           ((C69912 + C69913) * C30075 + (C70268 + C70269) * C141469 +
            C82369 * C30076 + C82775 * C141384) *
               C141358) *
              C5322 -
          (((C82781 + C82782) * C141384 + (C82383 + C82384) * C30076 +
            C82780 * C141469 + C82380 * C30075) *
               C141358 +
           ((C86099 + C86100) * C141384 + (C85799 + C85800) * C30076 +
            (C79518 + C79517) * C141469 + (C79110 + C79109) * C30075) *
               C47710) *
              C5323 +
          (((C85800 + C85799) * C30075 + (C86100 + C86099) * C141469 +
            (C139366 * C15862 + C141452 * C15865 + C139356 * C15861 +
             C141221 * C15864) *
                C30076 +
            (C139366 * C16151 + C141452 * C16659 + C139356 * C16150 +
             C141221 * C16658) *
                C141384) *
               C47710 +
           ((C82384 + C82383) * C30075 + (C82782 + C82781) * C141469 +
            (C139366 * C18582 + C141452 * C18584 + C139356 * C18583 +
             C141221 * C18585) *
                C30076 +
            (C139366 * C18820 + C141452 * C19250 + C139356 * C18821 +
             C141221 * C19251) *
                C141384) *
               C141358) *
              C5324) *
         C141277 * C141243) /
        (p * q * std::sqrt(p + q));
    d2eezy[80] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47810 * C108 + C47710 * C189 + C47811 * C823 + C141358 * C912) *
                C30075 +
            (C47810 * C276 + C47710 * C635 + C47811 * C1006 + C141358 * C1419) *
                C141469 +
            (C62638 + C62639) * C30076 + (C63336 + C63337) * C141384) *
               C141452 +
           ((C47837 + C47838) * C30075 + (C48366 + C48367) * C141469 +
            C78829 * C30076 + C79651 * C141384) *
               C141221) *
              C5322 -
          (((C63341 + C63340) * C141384 + (C62647 + C62646) * C30076 +
            C79652 * C141469 + C78832 * C30075) *
               C141221 +
           ((C63339 + C63338) * C141384 + (C62643 + C62642) * C30076 +
            (C63337 + C63336) * C141469 + (C62639 + C62638) * C30075) *
               C141452) *
              C5323 +
          ((C68014 * C30075 + C68512 * C141469 + (C68029 + C68028) * C30076 +
            (C68518 + C68517) * C141384) *
               C141452 +
           ((C62646 + C62647) * C30075 + (C63340 + C63341) * C141469 +
            (C47810 * C15861 + C47710 * C16012 + C47811 * C18583 +
             C141358 * C18699) *
                C30076 +
            (C47810 * C16150 + C47710 * C16783 + C47811 * C18821 +
             C141358 * C19357) *
                C141384) *
               C141221) *
              C5324) *
         C141277 * C141243) /
        (p * q * std::sqrt(p + q));
    d2eezz[80] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30596 * C108 + C30599 + C30599 + C141469 * C714 + C30597 * C1601 +
             C30600 + C30600 + C141384 * C2283) *
                C47710 +
            (C39780 + C39781) * C141358) *
               C141452 +
           ((C30633 + C30634) * C47710 + C39766 * C141358) * C141221) *
              C5322 -
          (((C41044 + C41045) * C141358 + (C32666 + C32667) * C47710) *
               C141221 +
           ((C44374 + C44375) * C141358 +
            (C30597 * C5325 + C32652 + C32652 + C141384 * C5781 +
             C30596 * C1601 + C32653 + C32653 + C141469 * C2283) *
                C47710) *
               C141452) *
              C5323 +
          (((C30596 * C5325 + C37604 + C37604 + C141469 * C5781 +
             C30597 * C15862 + C37605 + C37605 + C141384 * C16900) *
                C47710 +
            (C30596 * C13301 + C47630 + C47630 + C141469 * C13953 +
             C30597 * C18582 + C47631 + C47631 + C141384 * C19462) *
                C141358) *
               C141452 +
           ((C30596 * C5326 + C37606 + C37606 + C141469 * C5782 +
             C30597 * C15861 + C37607 + C37607 + C141384 * C16899) *
                C47710 +
            (C30596 * C13302 + C47632 + C47632 + C141469 * C13955 +
             C30597 * C18583 + C47633 + C47633 + C141384 * C19463) *
                C141358) *
               C141221) *
              C5324) *
         C141277 * C141243) /
        (p * q * std::sqrt(p + q));
    d2eexx[81] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C47712 * C108 + C47719 + C47719 + C47707 * C120 +
                      C47714 * C109 + C47720 + C47720 + C47708 * C121 +
                      C47716 * C110 + C47721 + C47721 + C47709 * C122) *
                         C141320 * C47710 +
                     (C47712 * C823 + C47722 + C47722 + C47707 * C833 +
                      C47714 * C822 + C47723 + C47723 + C47708 * C832 +
                      C47716 * C821 + C47724 + C47724 + C47709 * C831) *
                         C141320 * C141358) *
                        C141294 * C141277 * C97 -
                    ((C47716 * C820 + C47725 + C47725 + C47709 * C830 +
                      C47714 * C821 + C47726 + C47726 + C47708 * C831 +
                      C47712 * C822 + C47727 + C47727 + C47707 * C832) *
                         C141320 * C141358 +
                     (C47716 * C111 + C47728 + C47728 + C47709 * C123 +
                      C47714 * C110 + C47729 + C47729 + C47708 * C122 +
                      C47712 * C109 + C47730 + C47730 + C47707 * C121) *
                         C141320 * C47710) *
                        C141294 * C141277 * C98 +
                    ((C47712 * C110 + C47731 + C47731 + C47707 * C122 +
                      C47714 * C111 + C47732 + C47732 + C47708 * C123 +
                      C47716 * C112 + C47733 + C47733 + C47709 * C124) *
                         C141320 * C47710 +
                     (C47712 * C821 + C47734 + C47734 + C47707 * C831 +
                      C47714 * C820 + C47735 + C47735 + C47708 * C830 +
                      C47716 * C824 + C47736 + C47736 + C47709 * C834) *
                         C141320 * C141358) *
                        C141294 * C141277 * C99)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C55526 * C108 + C55529 + C55529 + C141216 * C120) *
                         C141320 * C55522 +
                     (C55526 * C823 + C55530 + C55530 + C141216 * C833) *
                         C141320 * C55523 +
                     (C55526 * C2960 + C55531 + C55531 + C141216 * C2968) *
                         C141320 * C55524 +
                     (C55526 * C6729 + C55532 + C55532 + C141216 * C6735) *
                         C141320 * C55525) *
                        C141294 * C141277 * C97 -
                    ((C55526 * C6728 + C55533 + C55533 + C141216 * C6734) *
                         C141320 * C55525 +
                     (C55526 * C2961 + C55534 + C55534 + C141216 * C2969) *
                         C141320 * C55524 +
                     (C55526 * C822 + C55535 + C55535 + C141216 * C832) *
                         C141320 * C55523 +
                     (C55526 * C109 + C55536 + C55536 + C141216 * C121) *
                         C141320 * C55522) *
                        C141294 * C141277 * C98 +
                    ((C55526 * C110 + C55537 + C55537 + C141216 * C122) *
                         C141320 * C55522 +
                     (C55526 * C821 + C55538 + C55538 + C141216 * C831) *
                         C141320 * C55523 +
                     (C55526 * C2962 + C55539 + C55539 + C141216 * C2970) *
                         C141320 * C55524 +
                     (C55526 * C6730 + C55540 + C55540 + C141216 * C6736) *
                         C141320 * C55525) *
                        C141294 * C141277 * C99)) /
                      (p * q * std::sqrt(p + q));
    d2eexy[81] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C47810 * C108 + C47710 * C189 + C47811 * C823 + C141358 * C912) *
               C47713 +
           (C47810 * C114 + C47710 * C195 + C47811 * C828 + C141358 * C917) *
               C47707 +
           (C47837 + C47838) * C47715 + (C47839 + C47840) * C47708 +
           C47849 * C47717 + C47850 * C47709) *
              C141320 * C141294 * C141277 * C97 -
          ((C47845 + C47846) * C47709 + (C47847 + C47848) * C47717 +
           (C47844 + C47843) * C47708 + (C47842 + C47841) * C47715 +
           (C47840 + C47839) * C47707 + (C47838 + C47837) * C47713) *
              C141320 * C141294 * C141277 * C98 +
          (C47849 * C47713 + C47850 * C47707 + (C47848 + C47847) * C47715 +
           (C47846 + C47845) * C47708 +
           (C47810 * C112 + C47710 * C193 + C47811 * C824 + C141358 * C913) *
               C47717 +
           (C47810 * C118 + C47710 * C199 + C47811 * C829 + C141358 * C918) *
               C47709) *
              C141320 * C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C55590 * C108 + C55522 * C189 + C55591 * C823 + C55523 * C912 +
            C55592 * C2960 + C55524 * C3026 + C55593 * C6729 + C55525 * C6880) *
               C55527 +
           (C55590 * C114 + C55522 * C195 + C55591 * C828 + C55523 * C917 +
            C55592 * C2964 + C55524 * C3030 + C55593 * C6732 + C55525 * C6883) *
               C141216) *
              C141320 * C141294 * C141277 * C97 -
          ((C55593 * C6731 + C55525 * C6882 + C55592 * C2965 + C55524 * C3031 +
            C55591 * C827 + C55523 * C916 + C55590 * C115 + C55522 * C196) *
               C141216 +
           (C55593 * C6728 + C55525 * C6879 + C55592 * C2961 + C55524 * C3027 +
            C55591 * C822 + C55523 * C911 + C55590 * C109 + C55522 * C190) *
               C55527) *
              C141320 * C141294 * C141277 * C98 +
          ((C55590 * C110 + C55522 * C191 + C55591 * C821 + C55523 * C910 +
            C55592 * C2962 + C55524 * C3028 + C55593 * C6730 + C55525 * C6881) *
               C55527 +
           (C55590 * C116 + C55522 * C197 + C55591 * C826 + C55523 * C915 +
            C55592 * C2966 + C55524 * C3032 + C55593 * C6733 + C55525 * C6884) *
               C141216) *
              C141320 * C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eexz[81] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141320 * C276) * C47713 +
            (C275 * C114 + C141320 * C282) * C47707 + C305 * C47715 +
            C306 * C47708 + C307 * C47717 + C308 * C47709) *
               C47710 +
           (C7032 * C47713 + C7033 * C47707 + C1031 * C47715 + C1030 * C47708 +
            C1029 * C47717 + C1028 * C47709) *
               C141358) *
              C141294 * C141277 * C97 -
          ((C1026 * C47709 + C1027 * C47717 + C1028 * C47708 + C1029 * C47715 +
            C1030 * C47707 + C1031 * C47713) *
               C141358 +
           (C310 * C47709 + C309 * C47717 + C308 * C47708 + C307 * C47715 +
            C306 * C47707 + C305 * C47713) *
               C47710) *
              C141294 * C141277 * C98 +
          ((C307 * C47713 + C308 * C47707 + C309 * C47715 + C310 * C47708 +
            C312 * C47717 + C311 * C47709) *
               C47710 +
           (C1029 * C47713 + C1028 * C47707 + C1027 * C47715 + C1026 * C47708 +
            (C275 * C824 + C141320 * C1007) * C47717 +
            (C275 * C829 + C141320 * C1012) * C47709) *
               C141358) *
              C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141320 * C276) * C55527 +
            (C275 * C114 + C141320 * C282) * C141216) *
               C55522 +
           (C7032 * C55527 + C7033 * C141216) * C55523 +
           (C7034 * C55527 + C7035 * C141216) * C55524 +
           (C9954 * C55527 + C9953 * C141216) * C55525) *
              C141294 * C141277 * C97 -
          ((C7036 * C141216 + C7037 * C55527) * C55525 +
           (C6087 * C141216 + C6086 * C55527) * C55524 +
           (C1030 * C141216 + C1031 * C55527) * C55523 +
           (C306 * C141216 + C305 * C55527) * C55522) *
              C141294 * C141277 * C98 +
          ((C307 * C55527 + C308 * C141216) * C55522 +
           (C1029 * C55527 + C1028 * C141216) * C55523 +
           (C6089 * C55527 + C6088 * C141216) * C55524 +
           ((C275 * C6730 + C141320 * C7003) * C55527 +
            (C275 * C6733 + C141320 * C7006) * C141216) *
               C55525) *
              C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[81] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C47713 * C108 + C47707 * C114 + C47715 * C109 +
                      C47708 * C115 + C47717 * C110 + C47709 * C116) *
                         C47810 +
                     (C47713 * C189 + C47707 * C362 + C47715 * C190 +
                      C47708 * C363 + C47717 * C191 + C47709 * C364) *
                         C47710 +
                     (C47713 * C823 + C47707 * C828 + C47715 * C822 +
                      C47708 * C827 + C47717 * C821 + C47709 * C826) *
                         C47811 +
                     (C47713 * C912 + C47707 * C1100 + C47715 * C911 +
                      C47708 * C1099 + C47717 * C910 + C47709 * C1098) *
                         C141358) *
                        C141320 * C141294 * C141277 * C97 -
                    ((C47717 * C909 + C47709 * C1097 + C47715 * C910 +
                      C47708 * C1098 + C47713 * C911 + C47707 * C1099) *
                         C141358 +
                     (C47717 * C820 + C47709 * C825 + C47715 * C821 +
                      C47708 * C826 + C47713 * C822 + C47707 * C827) *
                         C47811 +
                     (C47717 * C192 + C47709 * C365 + C47715 * C191 +
                      C47708 * C364 + C47713 * C190 + C47707 * C363) *
                         C47710 +
                     (C47717 * C111 + C47709 * C117 + C47715 * C110 +
                      C47708 * C116 + C47713 * C109 + C47707 * C115) *
                         C47810) *
                        C141320 * C141294 * C141277 * C98 +
                    ((C47713 * C110 + C47707 * C116 + C47715 * C111 +
                      C47708 * C117 + C47717 * C112 + C47709 * C118) *
                         C47810 +
                     (C47713 * C191 + C47707 * C364 + C47715 * C192 +
                      C47708 * C365 + C47717 * C193 + C47709 * C366) *
                         C47710 +
                     (C47713 * C821 + C47707 * C826 + C47715 * C820 +
                      C47708 * C825 + C47717 * C824 + C47709 * C829) *
                         C47811 +
                     (C47713 * C910 + C47707 * C1098 + C47715 * C909 +
                      C47708 * C1097 + C47717 * C913 + C47709 * C1101) *
                         C141358) *
                        C141320 * C141294 * C141277 * C99)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C55527 * C108 + C141216 * C114) * C55590 +
                     (C55527 * C189 + C141216 * C362) * C55522 +
                     (C55527 * C823 + C141216 * C828) * C55591 +
                     (C55527 * C912 + C141216 * C1100) * C55523 +
                     (C55527 * C2960 + C141216 * C2964) * C55592 +
                     (C55527 * C3026 + C141216 * C3142) * C55524 +
                     (C55527 * C6729 + C141216 * C6732) * C55593 +
                     (C55527 * C6880 + C141216 * C7140) * C55525) *
                        C141320 * C141294 * C141277 * C97 -
                    ((C55527 * C6879 + C141216 * C7139) * C55525 +
                     (C55527 * C6728 + C141216 * C6731) * C55593 +
                     (C55527 * C3027 + C141216 * C3143) * C55524 +
                     (C55527 * C2961 + C141216 * C2965) * C55592 +
                     (C55527 * C911 + C141216 * C1099) * C55523 +
                     (C55527 * C822 + C141216 * C827) * C55591 +
                     (C55527 * C190 + C141216 * C363) * C55522 +
                     (C55527 * C109 + C141216 * C115) * C55590) *
                        C141320 * C141294 * C141277 * C98 +
                    ((C55527 * C110 + C141216 * C116) * C55590 +
                     (C55527 * C191 + C141216 * C364) * C55522 +
                     (C55527 * C821 + C141216 * C826) * C55591 +
                     (C55527 * C910 + C141216 * C1098) * C55523 +
                     (C55527 * C2962 + C141216 * C2966) * C55592 +
                     (C55527 * C3028 + C141216 * C3144) * C55524 +
                     (C55527 * C6730 + C141216 * C6733) * C55593 +
                     (C55527 * C6881 + C141216 * C7141) * C55525) *
                        C141320 * C141294 * C141277 * C99)) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[81] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C48072 * C108 + C48075 + C48075 + C47710 * C419 + C48073 * C823 +
            C48076 + C48076 + C141358 * C1171) *
               C47707 +
           (C48109 + C48110) * C47708 + C48115 * C47709) *
              C141320 * C141294 * C141277 * C97 -
          ((C48113 + C48114) * C47709 + (C48112 + C48111) * C47708 +
           (C48110 + C48109) * C47707) *
              C141320 * C141294 * C141277 * C98 +
          (C48115 * C47707 + (C48114 + C48113) * C47708 +
           (C48072 * C112 + C48095 + C48095 + C47710 * C423 + C48073 * C824 +
            C48096 + C48096 + C141358 * C1172) *
               C47709) *
              C141320 * C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((C55744 * C108 + C55749 + C55749 + C55522 * C419 + C55745 * C823 +
           C55750 + C55750 + C55523 * C1171 + C55746 * C2960 + C55751 + C55751 +
           C55524 * C3196 + C55747 * C6729 + C55752 + C55752 + C55525 * C7289) *
              C141216 * C141320 * C141294 * C141277 * C97 -
          (C55747 * C6728 + C55753 + C55753 + C55525 * C7288 + C55746 * C2961 +
           C55754 + C55754 + C55524 * C3197 + C55745 * C822 + C55755 + C55755 +
           C55523 * C1170 + C55744 * C109 + C55756 + C55756 + C55522 * C420) *
              C141216 * C141320 * C141294 * C141277 * C98 +
          (C55744 * C110 + C55757 + C55757 + C55522 * C421 + C55745 * C821 +
           C55758 + C55758 + C55523 * C1169 + C55746 * C2962 + C55759 + C55759 +
           C55524 * C3198 + C55747 * C6730 + C55760 + C55760 + C55525 * C7290) *
              C141216 * C141320 * C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[81] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141320 * C276) * C47810 +
            (C275 * C189 + C141320 * C501) * C47710 + C7032 * C47811 +
            C7428 * C141358) *
               C47707 +
           (C48190 + C48191 + C48192 + C48193) * C47708 + C48204 * C47709) *
              C141294 * C141277 * C97 -
          ((C48198 + C48199 + C48200 + C48201) * C47709 +
           (C48197 + C48196 + C48195 + C48194) * C47708 +
           (C48193 + C48192 + C48191 + C48190) * C47707) *
              C141294 * C141277 * C98 +
          (C48204 * C47707 + (C48201 + C48200 + C48199 + C48198) * C47708 +
           (C312 * C47810 + C523 * C47710 +
            (C275 * C824 + C141320 * C1007) * C47811 +
            (C275 * C913 + C141320 * C1263) * C141358) *
               C47709) *
              C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C275 * C108 + C141320 * C276) * C55590 +
           (C275 * C189 + C141320 * C501) * C55522 + C7032 * C55591 +
           C7428 * C55523 + C7034 * C55592 + C7429 * C55524 + C9954 * C55593 +
           C10208 * C55525) *
              C141216 * C141294 * C141277 * C97 -
          (C7430 * C55525 + C7037 * C55593 + C6371 * C55524 + C6086 * C55592 +
           C1276 * C55523 + C1031 * C55591 + C520 * C55522 + C305 * C55590) *
              C141216 * C141294 * C141277 * C98 +
          (C307 * C55590 + C521 * C55522 + C1029 * C55591 + C1275 * C55523 +
           C6089 * C55592 + C6372 * C55524 +
           (C275 * C6730 + C141320 * C7003) * C55593 +
           (C275 * C6881 + C141320 * C7415) * C55525) *
              C141216 * C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eezx[81] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C47713 * C108 + C47707 * C114 + C47715 * C109 +
                       C47708 * C115 + C47717 * C110 + C47709 * C116) *
                          C275 +
                      (C47713 * C276 + C47707 * C579 + C47715 * C277 +
                       C47708 * C580 + C47717 * C278 + C47709 * C581) *
                          C141320) *
                         C47710 +
                     ((C47713 * C823 + C47707 * C828 + C47715 * C822 +
                       C47708 * C827 + C47717 * C821 + C47709 * C826) *
                          C275 +
                      (C47713 * C1006 + C47707 * C1348 + C47715 * C1005 +
                       C47708 * C1347 + C47717 * C1004 + C47709 * C1346) *
                          C141320) *
                         C141358) *
                        C141294 * C141277 * C97 -
                    (((C47717 * C1003 + C47709 * C1345 + C47715 * C1004 +
                       C47708 * C1346 + C47713 * C1005 + C47707 * C1347) *
                          C141320 +
                      (C47717 * C820 + C47709 * C825 + C47715 * C821 +
                       C47708 * C826 + C47713 * C822 + C47707 * C827) *
                          C275) *
                         C141358 +
                     ((C47717 * C279 + C47709 * C582 + C47715 * C278 +
                       C47708 * C581 + C47713 * C277 + C47707 * C580) *
                          C141320 +
                      (C47717 * C111 + C47709 * C117 + C47715 * C110 +
                       C47708 * C116 + C47713 * C109 + C47707 * C115) *
                          C275) *
                         C47710) *
                        C141294 * C141277 * C98 +
                    (((C47713 * C110 + C47707 * C116 + C47715 * C111 +
                       C47708 * C117 + C47717 * C112 + C47709 * C118) *
                          C275 +
                      (C47713 * C278 + C47707 * C581 + C47715 * C279 +
                       C47708 * C582 + C47717 * C280 + C47709 * C583) *
                          C141320) *
                         C47710 +
                     ((C47713 * C821 + C47707 * C826 + C47715 * C820 +
                       C47708 * C825 + C47717 * C824 + C47709 * C829) *
                          C275 +
                      (C47713 * C1004 + C47707 * C1346 + C47715 * C1003 +
                       C47708 * C1345 + C47717 * C1007 + C47709 * C1349) *
                          C141320) *
                         C141358) *
                        C141294 * C141277 * C99)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C55527 * C108 + C141216 * C114) * C275 +
                      (C55527 * C276 + C141216 * C579) * C141320) *
                         C55522 +
                     ((C55527 * C823 + C141216 * C828) * C275 +
                      (C55527 * C1006 + C141216 * C1348) * C141320) *
                         C55523 +
                     ((C55527 * C2960 + C141216 * C2964) * C275 +
                      (C55527 * C3084 + C141216 * C3308) * C141320) *
                         C55524 +
                     ((C55527 * C6729 + C141216 * C6732) * C275 +
                      (C55527 * C7002 + C141216 * C7530) * C141320) *
                         C55525) *
                        C141294 * C141277 * C97 -
                    (((C55527 * C7001 + C141216 * C7529) * C141320 +
                      (C55527 * C6728 + C141216 * C6731) * C275) *
                         C55525 +
                     ((C55527 * C3085 + C141216 * C3309) * C141320 +
                      (C55527 * C2961 + C141216 * C2965) * C275) *
                         C55524 +
                     ((C55527 * C1005 + C141216 * C1347) * C141320 +
                      (C55527 * C822 + C141216 * C827) * C275) *
                         C55523 +
                     ((C55527 * C277 + C141216 * C580) * C141320 +
                      (C55527 * C109 + C141216 * C115) * C275) *
                         C55522) *
                        C141294 * C141277 * C98 +
                    (((C55527 * C110 + C141216 * C116) * C275 +
                      (C55527 * C278 + C141216 * C581) * C141320) *
                         C55522 +
                     ((C55527 * C821 + C141216 * C826) * C275 +
                      (C55527 * C1004 + C141216 * C1346) * C141320) *
                         C55523 +
                     ((C55527 * C2962 + C141216 * C2966) * C275 +
                      (C55527 * C3086 + C141216 * C3310) * C141320) *
                         C55524 +
                     ((C55527 * C6730 + C141216 * C6733) * C275 +
                      (C55527 * C7003 + C141216 * C7531) * C141320) *
                         C55525) *
                        C141294 * C141277 * C99)) /
                      (p * q * std::sqrt(p + q));
    d2eezy[81] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47810 * C108 + C47710 * C189 + C47811 * C823 + C141358 * C912) *
                C275 +
            (C47810 * C276 + C47710 * C635 + C47811 * C1006 + C141358 * C1419) *
                C141320) *
               C47707 +
           ((C47837 + C47838) * C275 + (C48366 + C48367) * C141320) * C47708 +
           C48374 * C47709) *
              C141294 * C141277 * C97 -
          (((C48370 + C48371) * C141320 + (C47847 + C47848) * C275) * C47709 +
           ((C48369 + C48368) * C141320 + (C47842 + C47841) * C275) * C47708 +
           ((C48367 + C48366) * C141320 + (C47838 + C47837) * C275) * C47707) *
              C141294 * C141277 * C98 +
          (C48374 * C47707 +
           ((C47848 + C47847) * C275 + (C48371 + C48370) * C141320) * C47708 +
           ((C47810 * C112 + C47710 * C193 + C47811 * C824 + C141358 * C913) *
                C275 +
            (C47810 * C280 + C47710 * C639 + C47811 * C1007 + C141358 * C1420) *
                C141320) *
               C47709) *
              C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C55590 * C108 + C55522 * C189 + C55591 * C823 + C55523 * C912 +
            C55592 * C2960 + C55524 * C3026 + C55593 * C6729 + C55525 * C6880) *
               C275 +
           (C55590 * C276 + C55522 * C635 + C55591 * C1006 + C55523 * C1419 +
            C55592 * C3084 + C55524 * C3362 + C55593 * C7002 + C55525 * C7655) *
               C141320) *
              C141216 * C141294 * C141277 * C97 -
          ((C55593 * C7001 + C55525 * C7654 + C55592 * C3085 + C55524 * C3363 +
            C55591 * C1005 + C55523 * C1418 + C55590 * C277 + C55522 * C636) *
               C141320 +
           (C55593 * C6728 + C55525 * C6879 + C55592 * C2961 + C55524 * C3027 +
            C55591 * C822 + C55523 * C911 + C55590 * C109 + C55522 * C190) *
               C275) *
              C141216 * C141294 * C141277 * C98 +
          ((C55590 * C110 + C55522 * C191 + C55591 * C821 + C55523 * C910 +
            C55592 * C2962 + C55524 * C3028 + C55593 * C6730 + C55525 * C6881) *
               C275 +
           (C55590 * C278 + C55522 * C637 + C55591 * C1004 + C55523 * C1417 +
            C55592 * C3086 + C55524 * C3364 + C55593 * C7003 + C55525 * C7656) *
               C141320) *
              C141216 * C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eezz[81] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C141320 * C714) * C47710 +
            C7785 * C141358) *
               C47707 +
           (C48449 + C48450) * C47708 + C48455 * C47709) *
              C141294 * C141277 * C97 -
          ((C48453 + C48454) * C47709 + (C48452 + C48451) * C47708 +
           (C48450 + C48449) * C47707) *
              C141294 * C141277 * C98 +
          (C48455 * C47707 + (C48454 + C48453) * C47708 +
           (C746 * C47710 +
            (C713 * C824 + C1518 + C1518 + C141320 * C1506) * C141358) *
               C47709) *
              C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C713 * C108 + C721 + C721 + C141320 * C714) * C55522 +
           C7785 * C55523 + C7786 * C55524 + C10453 * C55525) *
              C141216 * C141294 * C141277 * C97 -
          (C7787 * C55525 + C6627 * C55524 + C1527 * C55523 + C743 * C55522) *
              C141216 * C141294 * C141277 * C98 +
          (C744 * C55522 + C1526 * C55523 + C6628 * C55524 +
           (C713 * C6730 + C7778 + C7778 + C141320 * C7766) * C55525) *
              C141216 * C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eexx[82] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C47712 * C108 + C47719 + C47719 + C47707 * C120 +
                       C47714 * C109 + C47720 + C47720 + C47708 * C121 +
                       C47716 * C110 + C47721 + C47721 + C47709 * C122) *
                          C141320 * C47710 +
                      (C48584 + C48585 + C48586) * C141320 * C141358) *
                         C141294 * C816 -
                     ((C47716 * C2962 + C48560 + C48560 + C47709 * C2970 +
                       C47714 * C2961 + C48561 + C48561 + C47708 * C2969 +
                       C47712 * C2960 + C48562 + C48562 + C47707 * C2968) *
                          C141320 * C141358 +
                      (C48586 + C48585 + C48584) * C141320 * C47710) *
                         C141294 * C141485) *
                        C818 +
                    (((C48587 + C48588 + C48589) * C141320 * C47710 +
                      (C47712 * C2961 + C48569 + C48569 + C47707 * C2969 +
                       C47714 * C2962 + C48570 + C48570 + C47708 * C2970 +
                       C47716 * C2963 + C48571 + C48571 + C47709 * C2971) *
                          C141320 * C141358) *
                         C141294 * C141485 -
                     ((C48589 + C48588 + C48587) * C141320 * C141358 +
                      (C47716 * C111 + C47728 + C47728 + C47709 * C123 +
                       C47714 * C110 + C47729 + C47729 + C47708 * C122 +
                       C47712 * C109 + C47730 + C47730 + C47707 * C121) *
                          C141320 * C47710) *
                         C141294 * C816) *
                        C141483)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C55526 * C108 + C55529 + C55529 + C141216 * C120) *
                          C141320 * C55522 +
                      C56059 * C55523 + C56060 * C55524 + C56061 * C55525) *
                         C141294 * C816 -
                     ((C55526 * C9768 + C56033 + C56033 + C141216 * C9772) *
                          C141320 * C55525 +
                      C56061 * C55524 + C56060 * C55523 + C56059 * C55522) *
                         C141294 * C141485) *
                        C818 +
                    ((C56062 * C55522 + C56063 * C55523 + C56064 * C55524 +
                      (C55526 * C9769 + C56040 + C56040 + C141216 * C9773) *
                          C141320 * C55525) *
                         C141294 * C141485 -
                     (C56064 * C55525 + C56063 * C55524 + C56062 * C55523 +
                      (C55526 * C109 + C55536 + C55536 + C141216 * C121) *
                          C141320 * C55522) *
                         C141294 * C816) *
                        C141483)) /
                      (p * q * std::sqrt(p + q));
    d2eexy[82] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47810 * C108 + C47710 * C189 + C47811 * C823 + C141358 * C912) *
                C47713 +
            (C47810 * C114 + C47710 * C195 + C47811 * C828 + C141358 * C917) *
                C47707 +
            (C47837 + C47838) * C47715 + (C47839 + C47840) * C47708 +
            C47849 * C47717 + C47850 * C47709) *
               C141320 * C141294 * C816 -
           ((C48704 + C48705) * C47709 + (C48706 + C48707) * C47717 +
            (C48708 + C48709) * C47708 + (C48710 + C48711) * C47715 +
            (C47811 * C2964 + C141358 * C3030 + C47810 * C828 + C47710 * C917) *
                C47707 +
            (C47811 * C2960 + C141358 * C3026 + C47810 * C823 + C47710 * C912) *
                C47713) *
               C141320 * C141294 * C141485) *
              C818 +
          (((C48711 + C48710) * C47713 + (C48709 + C48708) * C47707 +
            (C48707 + C48706) * C47715 + (C48705 + C48704) * C47708 +
            (C47810 * C820 + C47710 * C909 + C47811 * C2963 + C141358 * C3029) *
                C47717 +
            (C47810 * C825 + C47710 * C914 + C47811 * C2967 + C141358 * C3033) *
                C47709) *
               C141320 * C141294 * C141485 -
           ((C47845 + C47846) * C47709 + (C47847 + C47848) * C47717 +
            (C47844 + C47843) * C47708 + (C47842 + C47841) * C47715 +
            (C47840 + C47839) * C47707 + (C47838 + C47837) * C47713) *
               C141320 * C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C55590 * C108 + C55522 * C189 + C55591 * C823 + C55523 * C912 +
             C55592 * C2960 + C55524 * C3026 + C55593 * C6729 +
             C55525 * C6880) *
                C55527 +
            (C55590 * C114 + C55522 * C195 + C55591 * C828 + C55523 * C917 +
             C55592 * C2964 + C55524 * C3030 + C55593 * C6732 +
             C55525 * C6883) *
                C141216) *
               C141320 * C141294 * C816 -
           ((C55593 * C9770 + C55525 * C9864 + C55592 * C6732 + C55524 * C6883 +
             C55591 * C2964 + C55523 * C3030 + C55590 * C828 + C55522 * C917) *
                C141216 +
            (C55593 * C9768 + C55525 * C9862 + C55592 * C6729 + C55524 * C6880 +
             C55591 * C2960 + C55523 * C3026 + C55590 * C823 + C55522 * C912) *
                C55527) *
               C141320 * C141294 * C141485) *
              C818 +
          (((C55590 * C822 + C55522 * C911 + C55591 * C2961 + C55523 * C3027 +
             C55592 * C6728 + C55524 * C6879 + C55593 * C9769 +
             C55525 * C9863) *
                C55527 +
            (C55590 * C827 + C55522 * C916 + C55591 * C2965 + C55523 * C3031 +
             C55592 * C6731 + C55524 * C6882 + C55593 * C9771 +
             C55525 * C9865) *
                C141216) *
               C141320 * C141294 * C141485 -
           ((C55593 * C6731 + C55525 * C6882 + C55592 * C2965 + C55524 * C3031 +
             C55591 * C827 + C55523 * C916 + C55590 * C115 + C55522 * C196) *
                C141216 +
            (C55593 * C6728 + C55525 * C6879 + C55592 * C2961 + C55524 * C3027 +
             C55591 * C822 + C55523 * C911 + C55590 * C109 + C55522 * C190) *
                C55527) *
               C141320 * C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q));
    d2eexz[82] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141320 * C276) * C47713 +
             (C275 * C114 + C141320 * C282) * C47707 + C305 * C47715 +
             C306 * C47708 + C307 * C47717 + C308 * C47709) *
                C47710 +
            (C48810 + C48811 + C48812 + C48813 + C48814 + C48815) * C141358) *
               C141294 * C816 -
           ((C6088 * C47709 + C6089 * C47717 + C6087 * C47708 + C6086 * C47715 +
             C7035 * C47707 + C7034 * C47713) *
                C141358 +
            (C48815 + C48814 + C48813 + C48812 + C48811 + C48810) * C47710) *
               C141294 * C141485) *
              C818 +
          (((C48816 + C48817 + C48818 + C48819 + C48820 + C48821) * C47710 +
            (C6086 * C47713 + C6087 * C47707 + C6089 * C47715 + C6088 * C47708 +
             (C275 * C2963 + C141320 * C3087) * C47717 +
             (C275 * C2967 + C141320 * C3091) * C47709) *
                C141358) *
               C141294 * C141485 -
           ((C48821 + C48820 + C48819 + C48818 + C48817 + C48816) * C141358 +
            (C310 * C47709 + C309 * C47717 + C308 * C47708 + C307 * C47715 +
             C306 * C47707 + C305 * C47713) *
                C47710) *
               C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141320 * C276) * C55527 +
             (C275 * C114 + C141320 * C282) * C141216) *
                C55522 +
            (C56197 + C56198) * C55523 + (C56199 + C56200) * C55524 +
            (C56201 + C56202) * C55525) *
               C141294 * C816 -
           (((C275 * C9770 + C141320 * C9942) * C141216 +
             (C275 * C9768 + C141320 * C9940) * C55527) *
                C55525 +
            (C56202 + C56201) * C55524 + (C56200 + C56199) * C55523 +
            (C56198 + C56197) * C55522) *
               C141294 * C141485) *
              C818 +
          (((C56203 + C56204) * C55522 + (C56205 + C56206) * C55523 +
            (C56207 + C56208) * C55524 +
            ((C275 * C9769 + C141320 * C9941) * C55527 +
             (C275 * C9771 + C141320 * C9943) * C141216) *
                C55525) *
               C141294 * C141485 -
           ((C56208 + C56207) * C55525 + (C56206 + C56205) * C55524 +
            (C56204 + C56203) * C55523 +
            (C306 * C141216 + C305 * C55527) * C55522) *
               C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[82] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C47713 * C108 + C47707 * C114 + C47715 * C109 +
                       C47708 * C115 + C47717 * C110 + C47709 * C116) *
                          C47810 +
                      (C47713 * C189 + C47707 * C362 + C47715 * C190 +
                       C47708 * C363 + C47717 * C191 + C47709 * C364) *
                          C47710 +
                      (C48944 + C48945 + C48946) * C47811 +
                      (C48947 + C48948 + C48949) * C141358) *
                         C141320 * C141294 * C816 -
                     ((C47717 * C3028 + C47709 * C3144 + C47715 * C3027 +
                       C47708 * C3143 + C47713 * C3026 + C47707 * C3142) *
                          C141358 +
                      (C47717 * C2962 + C47709 * C2966 + C47715 * C2961 +
                       C47708 * C2965 + C47713 * C2960 + C47707 * C2964) *
                          C47811 +
                      (C48949 + C48948 + C48947) * C47710 +
                      (C48946 + C48945 + C48944) * C47810) *
                         C141320 * C141294 * C141485) *
                        C818 +
                    (((C48950 + C48951 + C48952) * C47810 +
                      (C48953 + C48954 + C48955) * C47710 +
                      (C47713 * C2961 + C47707 * C2965 + C47715 * C2962 +
                       C47708 * C2966 + C47717 * C2963 + C47709 * C2967) *
                          C47811 +
                      (C47713 * C3027 + C47707 * C3143 + C47715 * C3028 +
                       C47708 * C3144 + C47717 * C3029 + C47709 * C3145) *
                          C141358) *
                         C141320 * C141294 * C141485 -
                     ((C48955 + C48954 + C48953) * C141358 +
                      (C48952 + C48951 + C48950) * C47811 +
                      (C47717 * C192 + C47709 * C365 + C47715 * C191 +
                       C47708 * C364 + C47713 * C190 + C47707 * C363) *
                          C47710 +
                      (C47717 * C111 + C47709 * C117 + C47715 * C110 +
                       C47708 * C116 + C47713 * C109 + C47707 * C115) *
                          C47810) *
                         C141320 * C141294 * C816) *
                        C141483)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C55527 * C108 + C141216 * C114) * C55590 +
                      (C55527 * C189 + C141216 * C362) * C55522 +
                      C56299 * C55591 + C56300 * C55523 + C56301 * C55592 +
                      C56302 * C55524 + C56303 * C55593 + C56304 * C55525) *
                         C141320 * C141294 * C816 -
                     ((C55527 * C9862 + C141216 * C10031) * C55525 +
                      (C55527 * C9768 + C141216 * C9770) * C55593 +
                      C56304 * C55524 + C56303 * C55592 + C56302 * C55523 +
                      C56301 * C55591 + C56300 * C55522 + C56299 * C55590) *
                         C141320 * C141294 * C141485) *
                        C818 +
                    ((C56305 * C55590 + C56306 * C55522 + C56307 * C55591 +
                      C56308 * C55523 + C56309 * C55592 + C56310 * C55524 +
                      (C55527 * C9769 + C141216 * C9771) * C55593 +
                      (C55527 * C9863 + C141216 * C10032) * C55525) *
                         C141320 * C141294 * C141485 -
                     (C56310 * C55525 + C56309 * C55593 + C56308 * C55524 +
                      C56307 * C55592 + C56306 * C55523 + C56305 * C55591 +
                      (C55527 * C190 + C141216 * C363) * C55522 +
                      (C55527 * C109 + C141216 * C115) * C55590) *
                         C141320 * C141294 * C816) *
                        C141483)) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[82] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48072 * C108 + C48075 + C48075 + C47710 * C419 + C48073 * C823 +
             C48076 + C48076 + C141358 * C1171) *
                C47707 +
            (C48109 + C48110) * C47708 + C48115 * C47709) *
               C141320 * C141294 * C816 -
           ((C49078 + C49079) * C47709 + (C49080 + C49081) * C47708 +
            (C48073 * C2960 + C49066 + C49066 + C141358 * C3196 +
             C48072 * C823 + C49067 + C49067 + C47710 * C1171) *
                C47707) *
               C141320 * C141294 * C141485) *
              C818 +
          (((C49081 + C49080) * C47707 + (C49079 + C49078) * C47708 +
            (C48072 * C820 + C49068 + C49068 + C47710 * C1168 + C48073 * C2963 +
             C49069 + C49069 + C141358 * C3199) *
                C47709) *
               C141320 * C141294 * C141485 -
           ((C48113 + C48114) * C47709 + (C48112 + C48111) * C47708 +
            (C48110 + C48109) * C47707) *
               C141320 * C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C55744 * C108 + C55749 + C55749 + C55522 * C419 + C55745 * C823 +
            C55750 + C55750 + C55523 * C1171 + C55746 * C2960 + C55751 +
            C55751 + C55524 * C3196 + C55747 * C6729 + C55752 + C55752 +
            C55525 * C7289) *
               C141216 * C141320 * C141294 * C816 -
           (C55747 * C9768 + C56377 + C56377 + C55525 * C10121 +
            C55746 * C6729 + C56378 + C56378 + C55524 * C7289 + C55745 * C2960 +
            C56379 + C56379 + C55523 * C3196 + C55744 * C823 + C56380 + C56380 +
            C55522 * C1171) *
               C141216 * C141320 * C141294 * C141485) *
              C818 +
          ((C55744 * C822 + C56381 + C56381 + C55522 * C1170 + C55745 * C2961 +
            C56382 + C56382 + C55523 * C3197 + C55746 * C6728 + C56383 +
            C56383 + C55524 * C7288 + C55747 * C9769 + C56384 + C56384 +
            C55525 * C10122) *
               C141216 * C141320 * C141294 * C141485 -
           (C55747 * C6728 + C55753 + C55753 + C55525 * C7288 + C55746 * C2961 +
            C55754 + C55754 + C55524 * C3197 + C55745 * C822 + C55755 + C55755 +
            C55523 * C1170 + C55744 * C109 + C55756 + C55756 + C55522 * C420) *
               C141216 * C141320 * C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[82] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141320 * C276) * C47810 +
             (C275 * C189 + C141320 * C501) * C47710 + C7032 * C47811 +
             C7428 * C141358) *
                C47707 +
            (C48190 + C48191 + C48192 + C48193) * C47708 + C48204 * C47709) *
               C141294 * C816 -
           ((C49180 + C49181 + C49182 + C49183) * C47709 +
            (C49184 + C49185 + C49186 + C49187) * C47708 +
            (C7429 * C141358 + C7034 * C47811 + C7428 * C47710 +
             C7032 * C47810) *
                C47707) *
               C141294 * C141485) *
              C818 +
          (((C49187 + C49186 + C49185 + C49184) * C47707 +
            (C49183 + C49182 + C49181 + C49180) * C47708 +
            (C1027 * C47810 + C1274 * C47710 +
             (C275 * C2963 + C141320 * C3087) * C47811 +
             (C275 * C3029 + C141320 * C3257) * C141358) *
                C47709) *
               C141294 * C141485 -
           ((C48198 + C48199 + C48200 + C48201) * C47709 +
            (C48197 + C48196 + C48195 + C48194) * C47708 +
            (C48193 + C48192 + C48191 + C48190) * C47707) *
               C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141320 * C276) * C55590 +
            (C275 * C189 + C141320 * C501) * C55522 + C7032 * C55591 +
            C7428 * C55523 + C7034 * C55592 + C7429 * C55524 + C9954 * C55593 +
            C10208 * C55525) *
               C141216 * C141294 * C816 -
           ((C275 * C9862 + C141320 * C10203) * C55525 +
            (C275 * C9768 + C141320 * C9940) * C55593 + C10208 * C55524 +
            C9954 * C55592 + C7429 * C55523 + C7034 * C55591 + C7428 * C55522 +
            C7032 * C55590) *
               C141216 * C141294 * C141485) *
              C818 +
          ((C1031 * C55590 + C1276 * C55522 + C6086 * C55591 + C6371 * C55523 +
            C7037 * C55592 + C7430 * C55524 +
            (C275 * C9769 + C141320 * C9941) * C55593 +
            (C275 * C9863 + C141320 * C10204) * C55525) *
               C141216 * C141294 * C141485 -
           (C7430 * C55525 + C7037 * C55593 + C6371 * C55524 + C6086 * C55592 +
            C1276 * C55523 + C1031 * C55591 + C520 * C55522 + C305 * C55590) *
               C141216 * C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q));
    d2eezx[82] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C47713 * C108 + C47707 * C114 + C47715 * C109 +
                        C47708 * C115 + C47717 * C110 + C47709 * C116) *
                           C275 +
                       (C47713 * C276 + C47707 * C579 + C47715 * C277 +
                        C47708 * C580 + C47717 * C278 + C47709 * C581) *
                           C141320) *
                          C47710 +
                      ((C48944 + C48945 + C48946) * C275 +
                       (C49298 + C49299 + C49300) * C141320) *
                          C141358) *
                         C141294 * C816 -
                     (((C47717 * C3086 + C47709 * C3310 + C47715 * C3085 +
                        C47708 * C3309 + C47713 * C3084 + C47707 * C3308) *
                           C141320 +
                       (C47717 * C2962 + C47709 * C2966 + C47715 * C2961 +
                        C47708 * C2965 + C47713 * C2960 + C47707 * C2964) *
                           C275) *
                          C141358 +
                      ((C49300 + C49299 + C49298) * C141320 +
                       (C48946 + C48945 + C48944) * C275) *
                          C47710) *
                         C141294 * C141485) *
                        C818 +
                    ((((C48950 + C48951 + C48952) * C275 +
                       (C49301 + C49302 + C49303) * C141320) *
                          C47710 +
                      ((C47713 * C2961 + C47707 * C2965 + C47715 * C2962 +
                        C47708 * C2966 + C47717 * C2963 + C47709 * C2967) *
                           C275 +
                       (C47713 * C3085 + C47707 * C3309 + C47715 * C3086 +
                        C47708 * C3310 + C47717 * C3087 + C47709 * C3311) *
                           C141320) *
                          C141358) *
                         C141294 * C141485 -
                     (((C49303 + C49302 + C49301) * C141320 +
                       (C48952 + C48951 + C48950) * C275) *
                          C141358 +
                      ((C47717 * C279 + C47709 * C582 + C47715 * C278 +
                        C47708 * C581 + C47713 * C277 + C47707 * C580) *
                           C141320 +
                       (C47717 * C111 + C47709 * C117 + C47715 * C110 +
                        C47708 * C116 + C47713 * C109 + C47707 * C115) *
                           C275) *
                          C47710) *
                         C141294 * C816) *
                        C141483)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C55527 * C108 + C141216 * C114) * C275 +
                       (C55527 * C276 + C141216 * C579) * C141320) *
                          C55522 +
                      (C56517 + C56541) * C55523 + (C56520 + C56542) * C55524 +
                      (C56523 + C56543) * C55525) *
                         C141294 * C816 -
                     (((C55527 * C9940 + C141216 * C10282) * C141320 +
                       (C55527 * C9768 + C141216 * C9770) * C275) *
                          C55525 +
                      (C56543 + C56523) * C55524 + (C56542 + C56520) * C55523 +
                      (C56541 + C56517) * C55522) *
                         C141294 * C141485) *
                        C818 +
                    (((C56526 + C56544) * C55522 + (C56529 + C56545) * C55523 +
                      (C56532 + C56546) * C55524 +
                      ((C55527 * C9769 + C141216 * C9771) * C275 +
                       (C55527 * C9941 + C141216 * C10283) * C141320) *
                          C55525) *
                         C141294 * C141485 -
                     ((C56546 + C56532) * C55525 + (C56545 + C56529) * C55524 +
                      (C56544 + C56526) * C55523 +
                      ((C55527 * C277 + C141216 * C580) * C141320 +
                       (C55527 * C109 + C141216 * C115) * C275) *
                          C55522) *
                         C141294 * C816) *
                        C141483)) /
                      (p * q * std::sqrt(p + q));
    d2eezy[82] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47810 * C108 + C47710 * C189 + C47811 * C823 + C141358 * C912) *
                 C275 +
             (C47810 * C276 + C47710 * C635 + C47811 * C1006 +
              C141358 * C1419) *
                 C141320) *
                C47707 +
            ((C47837 + C47838) * C275 + (C48366 + C48367) * C141320) * C47708 +
            C48374 * C47709) *
               C141294 * C816 -
           (((C49410 + C49411) * C141320 + (C48706 + C48707) * C275) * C47709 +
            ((C49412 + C49413) * C141320 + (C48710 + C48711) * C275) * C47708 +
            ((C47811 * C3084 + C141358 * C3362 + C47810 * C1006 +
              C47710 * C1419) *
                 C141320 +
             (C47811 * C2960 + C141358 * C3026 + C47810 * C823 +
              C47710 * C912) *
                 C275) *
                C47707) *
               C141294 * C141485) *
              C818 +
          ((((C48711 + C48710) * C275 + (C49413 + C49412) * C141320) * C47707 +
            ((C48707 + C48706) * C275 + (C49411 + C49410) * C141320) * C47708 +
            ((C47810 * C820 + C47710 * C909 + C47811 * C2963 +
              C141358 * C3029) *
                 C275 +
             (C47810 * C1003 + C47710 * C1416 + C47811 * C3087 +
              C141358 * C3365) *
                 C141320) *
                C47709) *
               C141294 * C141485 -
           (((C48370 + C48371) * C141320 + (C47847 + C47848) * C275) * C47709 +
            ((C48369 + C48368) * C141320 + (C47842 + C47841) * C275) * C47708 +
            ((C48367 + C48366) * C141320 + (C47838 + C47837) * C275) * C47707) *
               C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C55590 * C108 + C55522 * C189 + C55591 * C823 + C55523 * C912 +
             C55592 * C2960 + C55524 * C3026 + C55593 * C6729 +
             C55525 * C6880) *
                C275 +
            (C55590 * C276 + C55522 * C635 + C55591 * C1006 + C55523 * C1419 +
             C55592 * C3084 + C55524 * C3362 + C55593 * C7002 +
             C55525 * C7655) *
                C141320) *
               C141216 * C141294 * C816 -
           ((C55593 * C9940 + C55525 * C10368 + C55592 * C7002 +
             C55524 * C7655 + C55591 * C3084 + C55523 * C3362 + C55590 * C1006 +
             C55522 * C1419) *
                C141320 +
            (C55593 * C9768 + C55525 * C9862 + C55592 * C6729 + C55524 * C6880 +
             C55591 * C2960 + C55523 * C3026 + C55590 * C823 + C55522 * C912) *
                C275) *
               C141216 * C141294 * C141485) *
              C818 +
          (((C55590 * C822 + C55522 * C911 + C55591 * C2961 + C55523 * C3027 +
             C55592 * C6728 + C55524 * C6879 + C55593 * C9769 +
             C55525 * C9863) *
                C275 +
            (C55590 * C1005 + C55522 * C1418 + C55591 * C3085 + C55523 * C3363 +
             C55592 * C7001 + C55524 * C7654 + C55593 * C9941 +
             C55525 * C10369) *
                C141320) *
               C141216 * C141294 * C141485 -
           ((C55593 * C7001 + C55525 * C7654 + C55592 * C3085 + C55524 * C3363 +
             C55591 * C1005 + C55523 * C1418 + C55590 * C277 + C55522 * C636) *
                C141320 +
            (C55593 * C6728 + C55525 * C6879 + C55592 * C2961 + C55524 * C3027 +
             C55591 * C822 + C55523 * C911 + C55590 * C109 + C55522 * C190) *
                C275) *
               C141216 * C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q));
    d2eezz[82] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C713 * C108 + C721 + C721 + C141320 * C714) * C47710 +
             C7785 * C141358) *
                C47707 +
            (C48449 + C48450) * C47708 + C48455 * C47709) *
               C141294 * C816 -
           ((C49512 + C49513) * C47709 + (C49514 + C49515) * C47708 +
            (C7786 * C141358 + C7785 * C47710) * C47707) *
               C141294 * C141485) *
              C818 +
          (((C49515 + C49514) * C47707 + (C49513 + C49512) * C47708 +
            (C1525 * C47710 +
             (C713 * C2963 + C3424 + C3424 + C141320 * C3419) * C141358) *
                C47709) *
               C141294 * C141485 -
           ((C48453 + C48454) * C47709 + (C48452 + C48451) * C47708 +
            (C48450 + C48449) * C47707) *
               C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C141320 * C714) * C55522 +
            C7785 * C55523 + C7786 * C55524 + C10453 * C55525) *
               C141216 * C141294 * C816 -
           ((C713 * C9768 + C10449 + C10449 + C141320 * C10444) * C55525 +
            C10453 * C55524 + C7786 * C55523 + C7785 * C55522) *
               C141216 * C141294 * C141485) *
              C818 +
          ((C1527 * C55522 + C6627 * C55523 + C7787 * C55524 +
            (C713 * C9769 + C10450 + C10450 + C141320 * C10445) * C55525) *
               C141216 * C141294 * C141485 -
           (C7787 * C55525 + C6627 * C55524 + C1527 * C55523 + C743 * C55522) *
               C141216 * C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q));
    d2eexx[83] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C47712 * C108 + C47719 + C47719 + C47707 * C120 +
                       C47714 * C109 + C47720 + C47720 + C47708 * C121 +
                       C47716 * C110 + C47721 + C47721 + C47709 * C122) *
                          C141320 * C47710 +
                      (C48584 + C48585 + C48586) * C141320 * C141358) *
                         C1596 -
                     ((C47716 * C3492 + C49614 + C49614 + C47709 * C3500 +
                       C47714 * C3491 + C49615 + C49615 + C47708 * C3499 +
                       C47712 * C3490 + C49616 + C49616 + C47707 * C3498) *
                          C141320 * C141358 +
                      (C47716 * C1599 + C49617 + C49617 + C47709 * C1609 +
                       C47714 * C1600 + C49618 + C49618 + C47708 * C1610 +
                       C47712 * C1601 + C49619 + C49619 + C47707 * C1611) *
                          C141320 * C47710) *
                         C141487) *
                        C141277 * C818 +
                    (((C47712 * C1600 + C49620 + C49620 + C47707 * C1610 +
                       C47714 * C1599 + C49621 + C49621 + C47708 * C1609 +
                       C47716 * C1598 + C49622 + C49622 + C47709 * C1608) *
                          C141320 * C47710 +
                      (C47712 * C3491 + C49623 + C49623 + C47707 * C3499 +
                       C47714 * C3492 + C49624 + C49624 + C47708 * C3500 +
                       C47716 * C3493 + C49625 + C49625 + C47709 * C3501) *
                          C141320 * C141358) *
                         C141487 -
                     ((C48589 + C48588 + C48587) * C141320 * C141358 +
                      (C47716 * C111 + C47728 + C47728 + C47709 * C123 +
                       C47714 * C110 + C47729 + C47729 + C47708 * C122 +
                       C47712 * C109 + C47730 + C47730 + C47707 * C121) *
                          C141320 * C47710) *
                         C1596) *
                        C141277 * C141483)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C55526 * C108 + C55529 + C55529 + C141216 * C120) *
                          C141320 * C55522 +
                      C56059 * C55523 + C56060 * C55524 + C56061 * C55525) *
                         C1596 -
                     ((C55526 * C10551 + C56745 + C56745 + C141216 * C10555) *
                          C141320 * C55525 +
                      (C55526 * C7887 + C56746 + C56746 + C141216 * C7893) *
                          C141320 * C55524 +
                      (C55526 * C3490 + C56747 + C56747 + C141216 * C3498) *
                          C141320 * C55523 +
                      (C55526 * C1601 + C56748 + C56748 + C141216 * C1611) *
                          C141320 * C55522) *
                         C141487) *
                        C141277 * C818 +
                    (((C55526 * C1600 + C56749 + C56749 + C141216 * C1610) *
                          C141320 * C55522 +
                      (C55526 * C3491 + C56750 + C56750 + C141216 * C3499) *
                          C141320 * C55523 +
                      (C55526 * C7886 + C56751 + C56751 + C141216 * C7892) *
                          C141320 * C55524 +
                      (C55526 * C10552 + C56752 + C56752 + C141216 * C10556) *
                          C141320 * C55525) *
                         C141487 -
                     (C56064 * C55525 + C56063 * C55524 + C56062 * C55523 +
                      (C55526 * C109 + C55536 + C55536 + C141216 * C121) *
                          C141320 * C55522) *
                         C1596) *
                        C141277 * C141483)) /
                      (p * q * std::sqrt(p + q));
    d2eexy[83] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47810 * C108 + C47710 * C189 + C47811 * C823 + C141358 * C912) *
                C47713 +
            (C47810 * C114 + C47710 * C195 + C47811 * C828 + C141358 * C917) *
                C47707 +
            (C47837 + C47838) * C47715 + (C47839 + C47840) * C47708 +
            C47849 * C47717 + C47850 * C47709) *
               C141320 * C1596 -
           ((C49740 + C49741) * C47709 + (C49742 + C49743) * C47717 +
            (C49744 + C49745) * C47708 + (C49746 + C49747) * C47715 +
            (C47811 * C3494 + C141358 * C3576 + C47810 * C1606 +
             C47710 * C1695) *
                C47707 +
            (C47811 * C3490 + C141358 * C3572 + C47810 * C1601 +
             C47710 * C1690) *
                C47713) *
               C141320 * C141487) *
              C141277 * C818 +
          (((C49747 + C49746) * C47713 + (C49745 + C49744) * C47707 +
            (C49743 + C49742) * C47715 + (C49741 + C49740) * C47708 +
            (C47810 * C1598 + C47710 * C1687 + C47811 * C3493 +
             C141358 * C3575) *
                C47717 +
            (C47810 * C1603 + C47710 * C1692 + C47811 * C3497 +
             C141358 * C3579) *
                C47709) *
               C141320 * C141487 -
           ((C47845 + C47846) * C47709 + (C47847 + C47848) * C47717 +
            (C47844 + C47843) * C47708 + (C47842 + C47841) * C47715 +
            (C47840 + C47839) * C47707 + (C47838 + C47837) * C47713) *
               C141320 * C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C55590 * C108 + C55522 * C189 + C55591 * C823 + C55523 * C912 +
             C55592 * C2960 + C55524 * C3026 + C55593 * C6729 +
             C55525 * C6880) *
                C55527 +
            (C55590 * C114 + C55522 * C195 + C55591 * C828 + C55523 * C917 +
             C55592 * C2964 + C55524 * C3030 + C55593 * C6732 +
             C55525 * C6883) *
                C141216) *
               C141320 * C1596 -
           ((C55593 * C10553 + C55525 * C10679 + C55592 * C7890 +
             C55524 * C8009 + C55591 * C3494 + C55523 * C3576 + C55590 * C1606 +
             C55522 * C1695) *
                C141216 +
            (C55593 * C10551 + C55525 * C10677 + C55592 * C7887 +
             C55524 * C8006 + C55591 * C3490 + C55523 * C3572 + C55590 * C1601 +
             C55522 * C1690) *
                C55527) *
               C141320 * C141487) *
              C141277 * C818 +
          (((C55590 * C1600 + C55522 * C1689 + C55591 * C3491 + C55523 * C3573 +
             C55592 * C7886 + C55524 * C8005 + C55593 * C10552 +
             C55525 * C10678) *
                C55527 +
            (C55590 * C1605 + C55522 * C1694 + C55591 * C3495 + C55523 * C3577 +
             C55592 * C7889 + C55524 * C8008 + C55593 * C10554 +
             C55525 * C10680) *
                C141216) *
               C141320 * C141487 -
           ((C55593 * C6731 + C55525 * C6882 + C55592 * C2965 + C55524 * C3031 +
             C55591 * C827 + C55523 * C916 + C55590 * C115 + C55522 * C196) *
                C141216 +
            (C55593 * C6728 + C55525 * C6879 + C55592 * C2961 + C55524 * C3027 +
             C55591 * C822 + C55523 * C911 + C55590 * C109 + C55522 * C190) *
                C55527) *
               C141320 * C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eexz[83] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141320 * C276) * C47713 +
             (C275 * C114 + C141320 * C282) * C47707 + C305 * C47715 +
             C306 * C47708 + C307 * C47717 + C308 * C47709) *
                C47710 +
            (C48810 + C48811 + C48812 + C48813 + C48814 + C48815) * C141358) *
               C1596 -
           ((C24212 * C47709 + C24213 * C47717 + C8144 * C47708 +
             C8145 * C47715 + C10798 * C47707 + C10799 * C47713) *
                C141358 +
            (C1806 * C47709 + C1807 * C47717 + C1808 * C47708 + C1809 * C47715 +
             (C275 * C1606 + C141320 * C1789) * C47707 +
             (C275 * C1601 + C141320 * C1784) * C47713) *
                C47710) *
               C141487) *
              C141277 * C818 +
          (((C1809 * C47713 + C1808 * C47707 + C1807 * C47715 + C1806 * C47708 +
             C1805 * C47717 + C1804 * C47709) *
                C47710 +
            (C8145 * C47713 + C8144 * C47707 + C24213 * C47715 +
             C24212 * C47708 + (C275 * C3493 + C141320 * C3649) * C47717 +
             (C275 * C3497 + C141320 * C3653) * C47709) *
                C141358) *
               C141487 -
           ((C48821 + C48820 + C48819 + C48818 + C48817 + C48816) * C141358 +
            (C310 * C47709 + C309 * C47717 + C308 * C47708 + C307 * C47715 +
             C306 * C47707 + C305 * C47713) *
                C47710) *
               C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141320 * C276) * C55527 +
             (C275 * C114 + C141320 * C282) * C141216) *
                C55522 +
            (C56197 + C56198) * C55523 + (C56199 + C56200) * C55524 +
            (C56201 + C56202) * C55525) *
               C1596 -
           (((C275 * C10553 + C141320 * C10781) * C141216 +
             (C275 * C10551 + C141320 * C10779) * C55527) *
                C55525 +
            (C10796 * C141216 + C10797 * C55527) * C55524 +
            (C10798 * C141216 + C10799 * C55527) * C55523 +
            ((C275 * C1606 + C141320 * C1789) * C141216 +
             (C275 * C1601 + C141320 * C1784) * C55527) *
                C55522) *
               C141487) *
              C141277 * C818 +
          (((C1809 * C55527 + C1808 * C141216) * C55522 +
            (C8145 * C55527 + C8144 * C141216) * C55523 +
            (C8143 * C55527 + C8142 * C141216) * C55524 +
            ((C275 * C10552 + C141320 * C10780) * C55527 +
             (C275 * C10554 + C141320 * C10782) * C141216) *
                C55525) *
               C141487 -
           ((C56208 + C56207) * C55525 + (C56206 + C56205) * C55524 +
            (C56204 + C56203) * C55523 +
            (C306 * C141216 + C305 * C55527) * C55522) *
               C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[83] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C47713 * C108 + C47707 * C114 + C47715 * C109 +
                       C47708 * C115 + C47717 * C110 + C47709 * C116) *
                          C47810 +
                      (C47713 * C189 + C47707 * C362 + C47715 * C190 +
                       C47708 * C363 + C47717 * C191 + C47709 * C364) *
                          C47710 +
                      (C48944 + C48945 + C48946) * C47811 +
                      (C48947 + C48948 + C48949) * C141358) *
                         C141320 * C1596 -
                     ((C47717 * C3574 + C47709 * C3722 + C47715 * C3573 +
                       C47708 * C3721 + C47713 * C3572 + C47707 * C3720) *
                          C141358 +
                      (C47717 * C3492 + C47709 * C3496 + C47715 * C3491 +
                       C47708 * C3495 + C47713 * C3490 + C47707 * C3494) *
                          C47811 +
                      (C47717 * C1688 + C47709 * C1876 + C47715 * C1689 +
                       C47708 * C1877 + C47713 * C1690 + C47707 * C1878) *
                          C47710 +
                      (C47717 * C1599 + C47709 * C1604 + C47715 * C1600 +
                       C47708 * C1605 + C47713 * C1601 + C47707 * C1606) *
                          C47810) *
                         C141320 * C141487) *
                        C141277 * C818 +
                    (((C47713 * C1600 + C47707 * C1605 + C47715 * C1599 +
                       C47708 * C1604 + C47717 * C1598 + C47709 * C1603) *
                          C47810 +
                      (C47713 * C1689 + C47707 * C1877 + C47715 * C1688 +
                       C47708 * C1876 + C47717 * C1687 + C47709 * C1875) *
                          C47710 +
                      (C47713 * C3491 + C47707 * C3495 + C47715 * C3492 +
                       C47708 * C3496 + C47717 * C3493 + C47709 * C3497) *
                          C47811 +
                      (C47713 * C3573 + C47707 * C3721 + C47715 * C3574 +
                       C47708 * C3722 + C47717 * C3575 + C47709 * C3723) *
                          C141358) *
                         C141320 * C141487 -
                     ((C48955 + C48954 + C48953) * C141358 +
                      (C48952 + C48951 + C48950) * C47811 +
                      (C47717 * C192 + C47709 * C365 + C47715 * C191 +
                       C47708 * C364 + C47713 * C190 + C47707 * C363) *
                          C47710 +
                      (C47717 * C111 + C47709 * C117 + C47715 * C110 +
                       C47708 * C116 + C47713 * C109 + C47707 * C115) *
                          C47810) *
                         C141320 * C1596) *
                        C141277 * C141483)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C55527 * C108 + C141216 * C114) * C55590 +
                      (C55527 * C189 + C141216 * C362) * C55522 +
                      C56299 * C55591 + C56300 * C55523 + C56301 * C55592 +
                      C56302 * C55524 + C56303 * C55593 + C56304 * C55525) *
                         C141320 * C1596 -
                     ((C55527 * C10677 + C141216 * C10901) * C55525 +
                      (C55527 * C10551 + C141216 * C10553) * C55593 +
                      (C55527 * C8006 + C141216 * C8244) * C55524 +
                      (C55527 * C7887 + C141216 * C7890) * C55592 +
                      (C55527 * C3572 + C141216 * C3720) * C55523 +
                      (C55527 * C3490 + C141216 * C3494) * C55591 +
                      (C55527 * C1690 + C141216 * C1878) * C55522 +
                      (C55527 * C1601 + C141216 * C1606) * C55590) *
                         C141320 * C141487) *
                        C141277 * C818 +
                    (((C55527 * C1600 + C141216 * C1605) * C55590 +
                      (C55527 * C1689 + C141216 * C1877) * C55522 +
                      (C55527 * C3491 + C141216 * C3495) * C55591 +
                      (C55527 * C3573 + C141216 * C3721) * C55523 +
                      (C55527 * C7886 + C141216 * C7889) * C55592 +
                      (C55527 * C8005 + C141216 * C8243) * C55524 +
                      (C55527 * C10552 + C141216 * C10554) * C55593 +
                      (C55527 * C10678 + C141216 * C10902) * C55525) *
                         C141320 * C141487 -
                     (C56310 * C55525 + C56309 * C55593 + C56308 * C55524 +
                      C56307 * C55592 + C56306 * C55523 + C56305 * C55591 +
                      (C55527 * C190 + C141216 * C363) * C55522 +
                      (C55527 * C109 + C141216 * C115) * C55590) *
                         C141320 * C1596) *
                        C141277 * C141483)) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[83] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48072 * C108 + C48075 + C48075 + C47710 * C419 + C48073 * C823 +
             C48076 + C48076 + C141358 * C1171) *
                C47707 +
            (C48109 + C48110) * C47708 + C48115 * C47709) *
               C141320 * C1596 -
           ((C50066 + C50067) * C47709 + (C50068 + C50069) * C47708 +
            (C48073 * C3490 + C50054 + C50054 + C141358 * C3790 +
             C48072 * C1601 + C50055 + C50055 + C47710 * C1949) *
                C47707) *
               C141320 * C141487) *
              C141277 * C818 +
          (((C50069 + C50068) * C47707 + (C50067 + C50066) * C47708 +
            (C48072 * C1598 + C50056 + C50056 + C47710 * C1946 +
             C48073 * C3493 + C50057 + C50057 + C141358 * C3793) *
                C47709) *
               C141320 * C141487 -
           ((C48113 + C48114) * C47709 + (C48112 + C48111) * C47708 +
            (C48110 + C48109) * C47707) *
               C141320 * C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C55744 * C108 + C55749 + C55749 + C55522 * C419 + C55745 * C823 +
            C55750 + C55750 + C55523 * C1171 + C55746 * C2960 + C55751 +
            C55751 + C55524 * C3196 + C55747 * C6729 + C55752 + C55752 +
            C55525 * C7289) *
               C141216 * C141320 * C1596 -
           (C55747 * C10551 + C57017 + C57017 + C55525 * C11025 +
            C55746 * C7887 + C57018 + C57018 + C55524 * C8345 + C55745 * C3490 +
            C57019 + C57019 + C55523 * C3790 + C55744 * C1601 + C57020 +
            C57020 + C55522 * C1949) *
               C141216 * C141320 * C141487) *
              C141277 * C818 +
          ((C55744 * C1600 + C57021 + C57021 + C55522 * C1948 + C55745 * C3491 +
            C57022 + C57022 + C55523 * C3791 + C55746 * C7886 + C57023 +
            C57023 + C55524 * C8344 + C55747 * C10552 + C57024 + C57024 +
            C55525 * C11026) *
               C141216 * C141320 * C141487 -
           (C55747 * C6728 + C55753 + C55753 + C55525 * C7288 + C55746 * C2961 +
            C55754 + C55754 + C55524 * C3197 + C55745 * C822 + C55755 + C55755 +
            C55523 * C1170 + C55744 * C109 + C55756 + C55756 + C55522 * C420) *
               C141216 * C141320 * C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[83] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141320 * C276) * C47810 +
             (C275 * C189 + C141320 * C501) * C47710 + C7032 * C47811 +
             C7428 * C141358) *
                C47707 +
            (C48190 + C48191 + C48192 + C48193) * C47708 + C48204 * C47709) *
               C1596 -
           ((C50168 + C50169 + C50170 + C50171) * C47709 +
            (C50172 + C50173 + C50174 + C50175) * C47708 +
            (C11139 * C141358 + C10799 * C47811 +
             (C275 * C1690 + C141320 * C2040) * C47710 +
             (C275 * C1601 + C141320 * C1784) * C47810) *
                C47707) *
               C141487) *
              C141277 * C818 +
          (((C50175 + C50174 + C50173 + C50172) * C47707 +
            (C50171 + C50170 + C50169 + C50168) * C47708 +
            (C1805 * C47810 + C2052 * C47710 +
             (C275 * C3493 + C141320 * C3649) * C47811 +
             (C275 * C3575 + C141320 * C3867) * C141358) *
                C47709) *
               C141487 -
           ((C48198 + C48199 + C48200 + C48201) * C47709 +
            (C48197 + C48196 + C48195 + C48194) * C47708 +
            (C48193 + C48192 + C48191 + C48190) * C47707) *
               C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141320 * C276) * C55590 +
            (C275 * C189 + C141320 * C501) * C55522 + C7032 * C55591 +
            C7428 * C55523 + C7034 * C55592 + C7429 * C55524 + C9954 * C55593 +
            C10208 * C55525) *
               C141216 * C1596 -
           ((C275 * C10677 + C141320 * C11131) * C55525 +
            (C275 * C10551 + C141320 * C10779) * C55593 + C11138 * C55524 +
            C10797 * C55592 + C11139 * C55523 + C10799 * C55591 +
            (C275 * C1690 + C141320 * C2040) * C55522 +
            (C275 * C1601 + C141320 * C1784) * C55590) *
               C141216 * C141487) *
              C141277 * C818 +
          ((C1809 * C55590 + C2054 * C55522 + C8145 * C55591 + C8482 * C55523 +
            C8143 * C55592 + C8481 * C55524 +
            (C275 * C10552 + C141320 * C10780) * C55593 +
            (C275 * C10678 + C141320 * C11132) * C55525) *
               C141216 * C141487 -
           (C7430 * C55525 + C7037 * C55593 + C6371 * C55524 + C6086 * C55592 +
            C1276 * C55523 + C1031 * C55591 + C520 * C55522 + C305 * C55590) *
               C141216 * C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eezx[83] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C47713 * C108 + C47707 * C114 + C47715 * C109 +
                        C47708 * C115 + C47717 * C110 + C47709 * C116) *
                           C275 +
                       (C47713 * C276 + C47707 * C579 + C47715 * C277 +
                        C47708 * C580 + C47717 * C278 + C47709 * C581) *
                           C141320) *
                          C47710 +
                      ((C48944 + C48945 + C48946) * C275 +
                       (C49298 + C49299 + C49300) * C141320) *
                          C141358) *
                         C1596 -
                     (((C47717 * C3648 + C47709 * C3936 + C47715 * C3647 +
                        C47708 * C3935 + C47713 * C3646 + C47707 * C3934) *
                           C141320 +
                       (C47717 * C3492 + C47709 * C3496 + C47715 * C3491 +
                        C47708 * C3495 + C47713 * C3490 + C47707 * C3494) *
                           C275) *
                          C141358 +
                      ((C47717 * C1782 + C47709 * C2124 + C47715 * C1783 +
                        C47708 * C2125 + C47713 * C1784 + C47707 * C2126) *
                           C141320 +
                       (C47717 * C1599 + C47709 * C1604 + C47715 * C1600 +
                        C47708 * C1605 + C47713 * C1601 + C47707 * C1606) *
                           C275) *
                          C47710) *
                         C141487) *
                        C141277 * C818 +
                    ((((C47713 * C1600 + C47707 * C1605 + C47715 * C1599 +
                        C47708 * C1604 + C47717 * C1598 + C47709 * C1603) *
                           C275 +
                       (C47713 * C1783 + C47707 * C2125 + C47715 * C1782 +
                        C47708 * C2124 + C47717 * C1781 + C47709 * C2123) *
                           C141320) *
                          C47710 +
                      ((C47713 * C3491 + C47707 * C3495 + C47715 * C3492 +
                        C47708 * C3496 + C47717 * C3493 + C47709 * C3497) *
                           C275 +
                       (C47713 * C3647 + C47707 * C3935 + C47715 * C3648 +
                        C47708 * C3936 + C47717 * C3649 + C47709 * C3937) *
                           C141320) *
                          C141358) *
                         C141487 -
                     (((C49303 + C49302 + C49301) * C141320 +
                       (C48952 + C48951 + C48950) * C275) *
                          C141358 +
                      ((C47717 * C279 + C47709 * C582 + C47715 * C278 +
                        C47708 * C581 + C47713 * C277 + C47707 * C580) *
                           C141320 +
                       (C47717 * C111 + C47709 * C117 + C47715 * C110 +
                        C47708 * C116 + C47713 * C109 + C47707 * C115) *
                           C275) *
                          C47710) *
                         C1596) *
                        C141277 * C141483)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C55527 * C108 + C141216 * C114) * C275 +
                       (C55527 * C276 + C141216 * C579) * C141320) *
                          C55522 +
                      (C56517 + C56541) * C55523 + (C56520 + C56542) * C55524 +
                      (C56523 + C56543) * C55525) *
                         C1596 -
                     (((C55527 * C10779 + C141216 * C11237) * C141320 +
                       (C55527 * C10551 + C141216 * C10553) * C275) *
                          C55525 +
                      ((C55527 * C8128 + C141216 * C8583) * C141320 +
                       (C55527 * C7887 + C141216 * C7890) * C275) *
                          C55524 +
                      ((C55527 * C3646 + C141216 * C3934) * C141320 +
                       (C55527 * C3490 + C141216 * C3494) * C275) *
                          C55523 +
                      ((C55527 * C1784 + C141216 * C2126) * C141320 +
                       (C55527 * C1601 + C141216 * C1606) * C275) *
                          C55522) *
                         C141487) *
                        C141277 * C818 +
                    ((((C55527 * C1600 + C141216 * C1605) * C275 +
                       (C55527 * C1783 + C141216 * C2125) * C141320) *
                          C55522 +
                      ((C55527 * C3491 + C141216 * C3495) * C275 +
                       (C55527 * C3647 + C141216 * C3935) * C141320) *
                          C55523 +
                      ((C55527 * C7886 + C141216 * C7889) * C275 +
                       (C55527 * C8127 + C141216 * C8582) * C141320) *
                          C55524 +
                      ((C55527 * C10552 + C141216 * C10554) * C275 +
                       (C55527 * C10780 + C141216 * C11238) * C141320) *
                          C55525) *
                         C141487 -
                     ((C56546 + C56532) * C55525 + (C56545 + C56529) * C55524 +
                      (C56544 + C56526) * C55523 +
                      ((C55527 * C277 + C141216 * C580) * C141320 +
                       (C55527 * C109 + C141216 * C115) * C275) *
                          C55522) *
                         C1596) *
                        C141277 * C141483)) /
                      (p * q * std::sqrt(p + q));
    d2eezy[83] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47810 * C108 + C47710 * C189 + C47811 * C823 + C141358 * C912) *
                 C275 +
             (C47810 * C276 + C47710 * C635 + C47811 * C1006 +
              C141358 * C1419) *
                 C141320) *
                C47707 +
            ((C47837 + C47838) * C275 + (C48366 + C48367) * C141320) * C47708 +
            C48374 * C47709) *
               C1596 -
           (((C50380 + C50381) * C141320 + (C49742 + C49743) * C275) * C47709 +
            ((C50382 + C50383) * C141320 + (C49746 + C49747) * C275) * C47708 +
            ((C47811 * C3646 + C141358 * C4004 + C47810 * C1784 +
              C47710 * C2197) *
                 C141320 +
             (C47811 * C3490 + C141358 * C3572 + C47810 * C1601 +
              C47710 * C1690) *
                 C275) *
                C47707) *
               C141487) *
              C141277 * C818 +
          ((((C49747 + C49746) * C275 + (C50383 + C50382) * C141320) * C47707 +
            ((C49743 + C49742) * C275 + (C50381 + C50380) * C141320) * C47708 +
            ((C47810 * C1598 + C47710 * C1687 + C47811 * C3493 +
              C141358 * C3575) *
                 C275 +
             (C47810 * C1781 + C47710 * C2194 + C47811 * C3649 +
              C141358 * C4007) *
                 C141320) *
                C47709) *
               C141487 -
           (((C48370 + C48371) * C141320 + (C47847 + C47848) * C275) * C47709 +
            ((C48369 + C48368) * C141320 + (C47842 + C47841) * C275) * C47708 +
            ((C48367 + C48366) * C141320 + (C47838 + C47837) * C275) * C47707) *
               C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C55590 * C108 + C55522 * C189 + C55591 * C823 + C55523 * C912 +
             C55592 * C2960 + C55524 * C3026 + C55593 * C6729 +
             C55525 * C6880) *
                C275 +
            (C55590 * C276 + C55522 * C635 + C55591 * C1006 + C55523 * C1419 +
             C55592 * C3084 + C55524 * C3362 + C55593 * C7002 +
             C55525 * C7655) *
                C141320) *
               C141216 * C1596 -
           ((C55593 * C10779 + C55525 * C11349 + C55592 * C8128 +
             C55524 * C8684 + C55591 * C3646 + C55523 * C4004 + C55590 * C1784 +
             C55522 * C2197) *
                C141320 +
            (C55593 * C10551 + C55525 * C10677 + C55592 * C7887 +
             C55524 * C8006 + C55591 * C3490 + C55523 * C3572 + C55590 * C1601 +
             C55522 * C1690) *
                C275) *
               C141216 * C141487) *
              C141277 * C818 +
          (((C55590 * C1600 + C55522 * C1689 + C55591 * C3491 + C55523 * C3573 +
             C55592 * C7886 + C55524 * C8005 + C55593 * C10552 +
             C55525 * C10678) *
                C275 +
            (C55590 * C1783 + C55522 * C2196 + C55591 * C3647 + C55523 * C4005 +
             C55592 * C8127 + C55524 * C8683 + C55593 * C10780 +
             C55525 * C11350) *
                C141320) *
               C141216 * C141487 -
           ((C55593 * C7001 + C55525 * C7654 + C55592 * C3085 + C55524 * C3363 +
             C55591 * C1005 + C55523 * C1418 + C55590 * C277 + C55522 * C636) *
                C141320 +
            (C55593 * C6728 + C55525 * C6879 + C55592 * C2961 + C55524 * C3027 +
             C55591 * C822 + C55523 * C911 + C55590 * C109 + C55522 * C190) *
                C275) *
               C141216 * C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eezz[83] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C713 * C108 + C721 + C721 + C141320 * C714) * C47710 +
             C7785 * C141358) *
                C47707 +
            (C48449 + C48450) * C47708 + C48455 * C47709) *
               C1596 -
           ((C50482 + C50483) * C47709 + (C50484 + C50485) * C47708 +
            (C11463 * C141358 +
             (C713 * C1601 + C2295 + C2295 + C141320 * C2283) * C47710) *
                C47707) *
               C141487) *
              C141277 * C818 +
          (((C50485 + C50484) * C47707 + (C50483 + C50482) * C47708 +
            (C2303 * C47710 +
             (C713 * C3493 + C4082 + C4082 + C141320 * C4077) * C141358) *
                C47709) *
               C141487 -
           ((C48453 + C48454) * C47709 + (C48452 + C48451) * C47708 +
            (C48450 + C48449) * C47707) *
               C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C141320 * C714) * C55522 +
            C7785 * C55523 + C7786 * C55524 + C10453 * C55525) *
               C141216 * C1596 -
           ((C713 * C10551 + C11456 + C11456 + C141320 * C11449) * C55525 +
            C11462 * C55524 + C11463 * C55523 +
            (C713 * C1601 + C2295 + C2295 + C141320 * C2283) * C55522) *
               C141216 * C141487) *
              C141277 * C818 +
          ((C2305 * C55522 + C8810 * C55523 + C8809 * C55524 +
            (C713 * C10552 + C11457 + C11457 + C141320 * C11450) * C55525) *
               C141216 * C141487 -
           (C7787 * C55525 + C6627 * C55524 + C1527 * C55523 + C743 * C55522) *
               C141216 * C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eexx[84] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C47712 * C108 + C47719 + C47719 + C47707 * C120 +
                       C47714 * C109 + C47720 + C47720 + C47708 * C121 +
                       C47716 * C110 + C47721 + C47721 + C47709 * C122) *
                          C141320 * C47710 +
                      (C48584 + C48585 + C48586) * C141320 * C141358) *
                         C141294 * C2374 -
                     ((C47716 * C2962 + C48560 + C48560 + C47709 * C2970 +
                       C47714 * C2961 + C48561 + C48561 + C47708 * C2969 +
                       C47712 * C2960 + C48562 + C48562 + C47707 * C2968) *
                          C141320 * C141358 +
                      (C48586 + C48585 + C48584) * C141320 * C47710) *
                         C141294 * C141485) *
                        C2376 +
                    (((C48587 + C48588 + C48589) * C141320 * C47710 +
                      (C47712 * C2961 + C48569 + C48569 + C47707 * C2969 +
                       C47714 * C2962 + C48570 + C48570 + C47708 * C2970 +
                       C47716 * C2963 + C48571 + C48571 + C47709 * C2971) *
                          C141320 * C141358) *
                         C141294 * C141485 -
                     ((C48589 + C48588 + C48587) * C141320 * C141358 +
                      (C47716 * C111 + C47728 + C47728 + C47709 * C123 +
                       C47714 * C110 + C47729 + C47729 + C47708 * C122 +
                       C47712 * C109 + C47730 + C47730 + C47707 * C121) *
                          C141320 * C47710) *
                         C141294 * C2374) *
                        C141483)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C55526 * C108 + C55529 + C55529 + C141216 * C120) *
                          C141320 * C55522 +
                      C56059 * C55523 + C56060 * C55524 + C56061 * C55525) *
                         C141294 * C2374 -
                     ((C55526 * C9768 + C56033 + C56033 + C141216 * C9772) *
                          C141320 * C55525 +
                      C56061 * C55524 + C56060 * C55523 + C56059 * C55522) *
                         C141294 * C141485) *
                        C2376 +
                    ((C56062 * C55522 + C56063 * C55523 + C56064 * C55524 +
                      (C55526 * C9769 + C56040 + C56040 + C141216 * C9773) *
                          C141320 * C55525) *
                         C141294 * C141485 -
                     (C56064 * C55525 + C56063 * C55524 + C56062 * C55523 +
                      (C55526 * C109 + C55536 + C55536 + C141216 * C121) *
                          C141320 * C55522) *
                         C141294 * C2374) *
                        C141483)) /
                      (p * q * std::sqrt(p + q));
    d2eexy[84] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47810 * C108 + C47710 * C189 + C47811 * C823 + C141358 * C912) *
                C47713 +
            (C47810 * C114 + C47710 * C195 + C47811 * C828 + C141358 * C917) *
                C47707 +
            (C47837 + C47838) * C47715 + (C47839 + C47840) * C47708 +
            C47849 * C47717 + C47850 * C47709) *
               C141320 * C141294 * C2374 -
           ((C48704 + C48705) * C47709 + (C48706 + C48707) * C47717 +
            (C48708 + C48709) * C47708 + (C48710 + C48711) * C47715 +
            (C47811 * C2964 + C141358 * C3030 + C47810 * C828 + C47710 * C917) *
                C47707 +
            (C47811 * C2960 + C141358 * C3026 + C47810 * C823 + C47710 * C912) *
                C47713) *
               C141320 * C141294 * C141485) *
              C2376 +
          (((C48711 + C48710) * C47713 + (C48709 + C48708) * C47707 +
            (C48707 + C48706) * C47715 + (C48705 + C48704) * C47708 +
            (C47810 * C820 + C47710 * C909 + C47811 * C2963 + C141358 * C3029) *
                C47717 +
            (C47810 * C825 + C47710 * C914 + C47811 * C2967 + C141358 * C3033) *
                C47709) *
               C141320 * C141294 * C141485 -
           ((C47845 + C47846) * C47709 + (C47847 + C47848) * C47717 +
            (C47844 + C47843) * C47708 + (C47842 + C47841) * C47715 +
            (C47840 + C47839) * C47707 + (C47838 + C47837) * C47713) *
               C141320 * C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C55590 * C108 + C55522 * C189 + C55591 * C823 + C55523 * C912 +
             C55592 * C2960 + C55524 * C3026 + C55593 * C6729 +
             C55525 * C6880) *
                C55527 +
            (C55590 * C114 + C55522 * C195 + C55591 * C828 + C55523 * C917 +
             C55592 * C2964 + C55524 * C3030 + C55593 * C6732 +
             C55525 * C6883) *
                C141216) *
               C141320 * C141294 * C2374 -
           ((C55593 * C9770 + C55525 * C9864 + C55592 * C6732 + C55524 * C6883 +
             C55591 * C2964 + C55523 * C3030 + C55590 * C828 + C55522 * C917) *
                C141216 +
            (C55593 * C9768 + C55525 * C9862 + C55592 * C6729 + C55524 * C6880 +
             C55591 * C2960 + C55523 * C3026 + C55590 * C823 + C55522 * C912) *
                C55527) *
               C141320 * C141294 * C141485) *
              C2376 +
          (((C55590 * C822 + C55522 * C911 + C55591 * C2961 + C55523 * C3027 +
             C55592 * C6728 + C55524 * C6879 + C55593 * C9769 +
             C55525 * C9863) *
                C55527 +
            (C55590 * C827 + C55522 * C916 + C55591 * C2965 + C55523 * C3031 +
             C55592 * C6731 + C55524 * C6882 + C55593 * C9771 +
             C55525 * C9865) *
                C141216) *
               C141320 * C141294 * C141485 -
           ((C55593 * C6731 + C55525 * C6882 + C55592 * C2965 + C55524 * C3031 +
             C55591 * C827 + C55523 * C916 + C55590 * C115 + C55522 * C196) *
                C141216 +
            (C55593 * C6728 + C55525 * C6879 + C55592 * C2961 + C55524 * C3027 +
             C55591 * C822 + C55523 * C911 + C55590 * C109 + C55522 * C190) *
                C55527) *
               C141320 * C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q));
    d2eexz[84] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141320 * C276) * C47713 +
             (C275 * C114 + C141320 * C282) * C47707 + C305 * C47715 +
             C306 * C47708 + C307 * C47717 + C308 * C47709) *
                C47710 +
            (C48810 + C48811 + C48812 + C48813 + C48814 + C48815) * C141358) *
               C141294 * C2374 -
           ((C6088 * C47709 + C6089 * C47717 + C6087 * C47708 + C6086 * C47715 +
             C7035 * C47707 + C7034 * C47713) *
                C141358 +
            (C48815 + C48814 + C48813 + C48812 + C48811 + C48810) * C47710) *
               C141294 * C141485) *
              C2376 +
          (((C48816 + C48817 + C48818 + C48819 + C48820 + C48821) * C47710 +
            (C6086 * C47713 + C6087 * C47707 + C6089 * C47715 + C6088 * C47708 +
             (C275 * C2963 + C141320 * C3087) * C47717 +
             (C275 * C2967 + C141320 * C3091) * C47709) *
                C141358) *
               C141294 * C141485 -
           ((C48821 + C48820 + C48819 + C48818 + C48817 + C48816) * C141358 +
            (C310 * C47709 + C309 * C47717 + C308 * C47708 + C307 * C47715 +
             C306 * C47707 + C305 * C47713) *
                C47710) *
               C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141320 * C276) * C55527 +
             (C275 * C114 + C141320 * C282) * C141216) *
                C55522 +
            (C56197 + C56198) * C55523 + (C56199 + C56200) * C55524 +
            (C56201 + C56202) * C55525) *
               C141294 * C2374 -
           (((C275 * C9770 + C141320 * C9942) * C141216 +
             (C275 * C9768 + C141320 * C9940) * C55527) *
                C55525 +
            (C56202 + C56201) * C55524 + (C56200 + C56199) * C55523 +
            (C56198 + C56197) * C55522) *
               C141294 * C141485) *
              C2376 +
          (((C56203 + C56204) * C55522 + (C56205 + C56206) * C55523 +
            (C56207 + C56208) * C55524 +
            ((C275 * C9769 + C141320 * C9941) * C55527 +
             (C275 * C9771 + C141320 * C9943) * C141216) *
                C55525) *
               C141294 * C141485 -
           ((C56208 + C56207) * C55525 + (C56206 + C56205) * C55524 +
            (C56204 + C56203) * C55523 +
            (C306 * C141216 + C305 * C55527) * C55522) *
               C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[84] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C47713 * C108 + C47707 * C114 + C47715 * C109 +
                       C47708 * C115 + C47717 * C110 + C47709 * C116) *
                          C47810 +
                      (C47713 * C189 + C47707 * C362 + C47715 * C190 +
                       C47708 * C363 + C47717 * C191 + C47709 * C364) *
                          C47710 +
                      (C48944 + C48945 + C48946) * C47811 +
                      (C48947 + C48948 + C48949) * C141358) *
                         C141320 * C141294 * C2374 -
                     ((C47717 * C3028 + C47709 * C3144 + C47715 * C3027 +
                       C47708 * C3143 + C47713 * C3026 + C47707 * C3142) *
                          C141358 +
                      (C47717 * C2962 + C47709 * C2966 + C47715 * C2961 +
                       C47708 * C2965 + C47713 * C2960 + C47707 * C2964) *
                          C47811 +
                      (C48949 + C48948 + C48947) * C47710 +
                      (C48946 + C48945 + C48944) * C47810) *
                         C141320 * C141294 * C141485) *
                        C2376 +
                    (((C48950 + C48951 + C48952) * C47810 +
                      (C48953 + C48954 + C48955) * C47710 +
                      (C47713 * C2961 + C47707 * C2965 + C47715 * C2962 +
                       C47708 * C2966 + C47717 * C2963 + C47709 * C2967) *
                          C47811 +
                      (C47713 * C3027 + C47707 * C3143 + C47715 * C3028 +
                       C47708 * C3144 + C47717 * C3029 + C47709 * C3145) *
                          C141358) *
                         C141320 * C141294 * C141485 -
                     ((C48955 + C48954 + C48953) * C141358 +
                      (C48952 + C48951 + C48950) * C47811 +
                      (C47717 * C192 + C47709 * C365 + C47715 * C191 +
                       C47708 * C364 + C47713 * C190 + C47707 * C363) *
                          C47710 +
                      (C47717 * C111 + C47709 * C117 + C47715 * C110 +
                       C47708 * C116 + C47713 * C109 + C47707 * C115) *
                          C47810) *
                         C141320 * C141294 * C2374) *
                        C141483)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C55527 * C108 + C141216 * C114) * C55590 +
                      (C55527 * C189 + C141216 * C362) * C55522 +
                      C56299 * C55591 + C56300 * C55523 + C56301 * C55592 +
                      C56302 * C55524 + C56303 * C55593 + C56304 * C55525) *
                         C141320 * C141294 * C2374 -
                     ((C55527 * C9862 + C141216 * C10031) * C55525 +
                      (C55527 * C9768 + C141216 * C9770) * C55593 +
                      C56304 * C55524 + C56303 * C55592 + C56302 * C55523 +
                      C56301 * C55591 + C56300 * C55522 + C56299 * C55590) *
                         C141320 * C141294 * C141485) *
                        C2376 +
                    ((C56305 * C55590 + C56306 * C55522 + C56307 * C55591 +
                      C56308 * C55523 + C56309 * C55592 + C56310 * C55524 +
                      (C55527 * C9769 + C141216 * C9771) * C55593 +
                      (C55527 * C9863 + C141216 * C10032) * C55525) *
                         C141320 * C141294 * C141485 -
                     (C56310 * C55525 + C56309 * C55593 + C56308 * C55524 +
                      C56307 * C55592 + C56306 * C55523 + C56305 * C55591 +
                      (C55527 * C190 + C141216 * C363) * C55522 +
                      (C55527 * C109 + C141216 * C115) * C55590) *
                         C141320 * C141294 * C2374) *
                        C141483)) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[84] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48072 * C108 + C48075 + C48075 + C47710 * C419 + C48073 * C823 +
             C48076 + C48076 + C141358 * C1171) *
                C47707 +
            (C48109 + C48110) * C47708 + C48115 * C47709) *
               C141320 * C141294 * C2374 -
           ((C49078 + C49079) * C47709 + (C49080 + C49081) * C47708 +
            (C48073 * C2960 + C49066 + C49066 + C141358 * C3196 +
             C48072 * C823 + C49067 + C49067 + C47710 * C1171) *
                C47707) *
               C141320 * C141294 * C141485) *
              C2376 +
          (((C49081 + C49080) * C47707 + (C49079 + C49078) * C47708 +
            (C48072 * C820 + C49068 + C49068 + C47710 * C1168 + C48073 * C2963 +
             C49069 + C49069 + C141358 * C3199) *
                C47709) *
               C141320 * C141294 * C141485 -
           ((C48113 + C48114) * C47709 + (C48112 + C48111) * C47708 +
            (C48110 + C48109) * C47707) *
               C141320 * C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C55744 * C108 + C55749 + C55749 + C55522 * C419 + C55745 * C823 +
            C55750 + C55750 + C55523 * C1171 + C55746 * C2960 + C55751 +
            C55751 + C55524 * C3196 + C55747 * C6729 + C55752 + C55752 +
            C55525 * C7289) *
               C141216 * C141320 * C141294 * C2374 -
           (C55747 * C9768 + C56377 + C56377 + C55525 * C10121 +
            C55746 * C6729 + C56378 + C56378 + C55524 * C7289 + C55745 * C2960 +
            C56379 + C56379 + C55523 * C3196 + C55744 * C823 + C56380 + C56380 +
            C55522 * C1171) *
               C141216 * C141320 * C141294 * C141485) *
              C2376 +
          ((C55744 * C822 + C56381 + C56381 + C55522 * C1170 + C55745 * C2961 +
            C56382 + C56382 + C55523 * C3197 + C55746 * C6728 + C56383 +
            C56383 + C55524 * C7288 + C55747 * C9769 + C56384 + C56384 +
            C55525 * C10122) *
               C141216 * C141320 * C141294 * C141485 -
           (C55747 * C6728 + C55753 + C55753 + C55525 * C7288 + C55746 * C2961 +
            C55754 + C55754 + C55524 * C3197 + C55745 * C822 + C55755 + C55755 +
            C55523 * C1170 + C55744 * C109 + C55756 + C55756 + C55522 * C420) *
               C141216 * C141320 * C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[84] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141320 * C276) * C47810 +
             (C275 * C189 + C141320 * C501) * C47710 + C7032 * C47811 +
             C7428 * C141358) *
                C47707 +
            (C48190 + C48191 + C48192 + C48193) * C47708 + C48204 * C47709) *
               C141294 * C2374 -
           ((C49180 + C49181 + C49182 + C49183) * C47709 +
            (C49184 + C49185 + C49186 + C49187) * C47708 +
            (C7429 * C141358 + C7034 * C47811 + C7428 * C47710 +
             C7032 * C47810) *
                C47707) *
               C141294 * C141485) *
              C2376 +
          (((C49187 + C49186 + C49185 + C49184) * C47707 +
            (C49183 + C49182 + C49181 + C49180) * C47708 +
            (C1027 * C47810 + C1274 * C47710 +
             (C275 * C2963 + C141320 * C3087) * C47811 +
             (C275 * C3029 + C141320 * C3257) * C141358) *
                C47709) *
               C141294 * C141485 -
           ((C48198 + C48199 + C48200 + C48201) * C47709 +
            (C48197 + C48196 + C48195 + C48194) * C47708 +
            (C48193 + C48192 + C48191 + C48190) * C47707) *
               C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141320 * C276) * C55590 +
            (C275 * C189 + C141320 * C501) * C55522 + C7032 * C55591 +
            C7428 * C55523 + C7034 * C55592 + C7429 * C55524 + C9954 * C55593 +
            C10208 * C55525) *
               C141216 * C141294 * C2374 -
           ((C275 * C9862 + C141320 * C10203) * C55525 +
            (C275 * C9768 + C141320 * C9940) * C55593 + C10208 * C55524 +
            C9954 * C55592 + C7429 * C55523 + C7034 * C55591 + C7428 * C55522 +
            C7032 * C55590) *
               C141216 * C141294 * C141485) *
              C2376 +
          ((C1031 * C55590 + C1276 * C55522 + C6086 * C55591 + C6371 * C55523 +
            C7037 * C55592 + C7430 * C55524 +
            (C275 * C9769 + C141320 * C9941) * C55593 +
            (C275 * C9863 + C141320 * C10204) * C55525) *
               C141216 * C141294 * C141485 -
           (C7430 * C55525 + C7037 * C55593 + C6371 * C55524 + C6086 * C55592 +
            C1276 * C55523 + C1031 * C55591 + C520 * C55522 + C305 * C55590) *
               C141216 * C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q));
    d2eezx[84] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C47713 * C108 + C47707 * C114 + C47715 * C109 +
                        C47708 * C115 + C47717 * C110 + C47709 * C116) *
                           C275 +
                       (C47713 * C276 + C47707 * C579 + C47715 * C277 +
                        C47708 * C580 + C47717 * C278 + C47709 * C581) *
                           C141320) *
                          C47710 +
                      ((C48944 + C48945 + C48946) * C275 +
                       (C49298 + C49299 + C49300) * C141320) *
                          C141358) *
                         C141294 * C2374 -
                     (((C47717 * C3086 + C47709 * C3310 + C47715 * C3085 +
                        C47708 * C3309 + C47713 * C3084 + C47707 * C3308) *
                           C141320 +
                       (C47717 * C2962 + C47709 * C2966 + C47715 * C2961 +
                        C47708 * C2965 + C47713 * C2960 + C47707 * C2964) *
                           C275) *
                          C141358 +
                      ((C49300 + C49299 + C49298) * C141320 +
                       (C48946 + C48945 + C48944) * C275) *
                          C47710) *
                         C141294 * C141485) *
                        C2376 +
                    ((((C48950 + C48951 + C48952) * C275 +
                       (C49301 + C49302 + C49303) * C141320) *
                          C47710 +
                      ((C47713 * C2961 + C47707 * C2965 + C47715 * C2962 +
                        C47708 * C2966 + C47717 * C2963 + C47709 * C2967) *
                           C275 +
                       (C47713 * C3085 + C47707 * C3309 + C47715 * C3086 +
                        C47708 * C3310 + C47717 * C3087 + C47709 * C3311) *
                           C141320) *
                          C141358) *
                         C141294 * C141485 -
                     (((C49303 + C49302 + C49301) * C141320 +
                       (C48952 + C48951 + C48950) * C275) *
                          C141358 +
                      ((C47717 * C279 + C47709 * C582 + C47715 * C278 +
                        C47708 * C581 + C47713 * C277 + C47707 * C580) *
                           C141320 +
                       (C47717 * C111 + C47709 * C117 + C47715 * C110 +
                        C47708 * C116 + C47713 * C109 + C47707 * C115) *
                           C275) *
                          C47710) *
                         C141294 * C2374) *
                        C141483)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C55527 * C108 + C141216 * C114) * C275 +
                       (C55527 * C276 + C141216 * C579) * C141320) *
                          C55522 +
                      (C56517 + C56541) * C55523 + (C56520 + C56542) * C55524 +
                      (C56523 + C56543) * C55525) *
                         C141294 * C2374 -
                     (((C55527 * C9940 + C141216 * C10282) * C141320 +
                       (C55527 * C9768 + C141216 * C9770) * C275) *
                          C55525 +
                      (C56543 + C56523) * C55524 + (C56542 + C56520) * C55523 +
                      (C56541 + C56517) * C55522) *
                         C141294 * C141485) *
                        C2376 +
                    (((C56526 + C56544) * C55522 + (C56529 + C56545) * C55523 +
                      (C56532 + C56546) * C55524 +
                      ((C55527 * C9769 + C141216 * C9771) * C275 +
                       (C55527 * C9941 + C141216 * C10283) * C141320) *
                          C55525) *
                         C141294 * C141485 -
                     ((C56546 + C56532) * C55525 + (C56545 + C56529) * C55524 +
                      (C56544 + C56526) * C55523 +
                      ((C55527 * C277 + C141216 * C580) * C141320 +
                       (C55527 * C109 + C141216 * C115) * C275) *
                          C55522) *
                         C141294 * C2374) *
                        C141483)) /
                      (p * q * std::sqrt(p + q));
    d2eezy[84] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47810 * C108 + C47710 * C189 + C47811 * C823 + C141358 * C912) *
                 C275 +
             (C47810 * C276 + C47710 * C635 + C47811 * C1006 +
              C141358 * C1419) *
                 C141320) *
                C47707 +
            ((C47837 + C47838) * C275 + (C48366 + C48367) * C141320) * C47708 +
            C48374 * C47709) *
               C141294 * C2374 -
           (((C49410 + C49411) * C141320 + (C48706 + C48707) * C275) * C47709 +
            ((C49412 + C49413) * C141320 + (C48710 + C48711) * C275) * C47708 +
            ((C47811 * C3084 + C141358 * C3362 + C47810 * C1006 +
              C47710 * C1419) *
                 C141320 +
             (C47811 * C2960 + C141358 * C3026 + C47810 * C823 +
              C47710 * C912) *
                 C275) *
                C47707) *
               C141294 * C141485) *
              C2376 +
          ((((C48711 + C48710) * C275 + (C49413 + C49412) * C141320) * C47707 +
            ((C48707 + C48706) * C275 + (C49411 + C49410) * C141320) * C47708 +
            ((C47810 * C820 + C47710 * C909 + C47811 * C2963 +
              C141358 * C3029) *
                 C275 +
             (C47810 * C1003 + C47710 * C1416 + C47811 * C3087 +
              C141358 * C3365) *
                 C141320) *
                C47709) *
               C141294 * C141485 -
           (((C48370 + C48371) * C141320 + (C47847 + C47848) * C275) * C47709 +
            ((C48369 + C48368) * C141320 + (C47842 + C47841) * C275) * C47708 +
            ((C48367 + C48366) * C141320 + (C47838 + C47837) * C275) * C47707) *
               C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C55590 * C108 + C55522 * C189 + C55591 * C823 + C55523 * C912 +
             C55592 * C2960 + C55524 * C3026 + C55593 * C6729 +
             C55525 * C6880) *
                C275 +
            (C55590 * C276 + C55522 * C635 + C55591 * C1006 + C55523 * C1419 +
             C55592 * C3084 + C55524 * C3362 + C55593 * C7002 +
             C55525 * C7655) *
                C141320) *
               C141216 * C141294 * C2374 -
           ((C55593 * C9940 + C55525 * C10368 + C55592 * C7002 +
             C55524 * C7655 + C55591 * C3084 + C55523 * C3362 + C55590 * C1006 +
             C55522 * C1419) *
                C141320 +
            (C55593 * C9768 + C55525 * C9862 + C55592 * C6729 + C55524 * C6880 +
             C55591 * C2960 + C55523 * C3026 + C55590 * C823 + C55522 * C912) *
                C275) *
               C141216 * C141294 * C141485) *
              C2376 +
          (((C55590 * C822 + C55522 * C911 + C55591 * C2961 + C55523 * C3027 +
             C55592 * C6728 + C55524 * C6879 + C55593 * C9769 +
             C55525 * C9863) *
                C275 +
            (C55590 * C1005 + C55522 * C1418 + C55591 * C3085 + C55523 * C3363 +
             C55592 * C7001 + C55524 * C7654 + C55593 * C9941 +
             C55525 * C10369) *
                C141320) *
               C141216 * C141294 * C141485 -
           ((C55593 * C7001 + C55525 * C7654 + C55592 * C3085 + C55524 * C3363 +
             C55591 * C1005 + C55523 * C1418 + C55590 * C277 + C55522 * C636) *
                C141320 +
            (C55593 * C6728 + C55525 * C6879 + C55592 * C2961 + C55524 * C3027 +
             C55591 * C822 + C55523 * C911 + C55590 * C109 + C55522 * C190) *
                C275) *
               C141216 * C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q));
    d2eezz[84] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C713 * C108 + C721 + C721 + C141320 * C714) * C47710 +
             C7785 * C141358) *
                C47707 +
            (C48449 + C48450) * C47708 + C48455 * C47709) *
               C141294 * C2374 -
           ((C49512 + C49513) * C47709 + (C49514 + C49515) * C47708 +
            (C7786 * C141358 + C7785 * C47710) * C47707) *
               C141294 * C141485) *
              C2376 +
          (((C49515 + C49514) * C47707 + (C49513 + C49512) * C47708 +
            (C1525 * C47710 +
             (C713 * C2963 + C3424 + C3424 + C141320 * C3419) * C141358) *
                C47709) *
               C141294 * C141485 -
           ((C48453 + C48454) * C47709 + (C48452 + C48451) * C47708 +
            (C48450 + C48449) * C47707) *
               C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C141320 * C714) * C55522 +
            C7785 * C55523 + C7786 * C55524 + C10453 * C55525) *
               C141216 * C141294 * C2374 -
           ((C713 * C9768 + C10449 + C10449 + C141320 * C10444) * C55525 +
            C10453 * C55524 + C7786 * C55523 + C7785 * C55522) *
               C141216 * C141294 * C141485) *
              C2376 +
          ((C1527 * C55522 + C6627 * C55523 + C7787 * C55524 +
            (C713 * C9769 + C10450 + C10450 + C141320 * C10445) * C55525) *
               C141216 * C141294 * C141485 -
           (C7787 * C55525 + C6627 * C55524 + C1527 * C55523 + C743 * C55522) *
               C141216 * C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q));
    d2eexx[85] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C47712 * C108 + C47719 + C47719 + C47707 * C120 +
                      C47714 * C109 + C47720 + C47720 + C47708 * C121 +
                      C47716 * C110 + C47721 + C47721 + C47709 * C122) *
                         C141320 * C47710 +
                     (C48584 + C48585 + C48586) * C141320 * C141358) *
                        C141294 * C2956 -
                    ((C51457 + C51458 + C51459) * C141320 * C141358 +
                     (C48586 + C48585 + C48584) * C141320 * C47710) *
                        C141294 * C2957 +
                    ((C51459 + C51458 + C51457) * C141320 * C47710 +
                     (C47712 * C6729 + C51448 + C51448 + C47707 * C6735 +
                      C47714 * C6728 + C51449 + C51449 + C47708 * C6734 +
                      C47716 * C6730 + C51450 + C51450 + C47709 * C6736) *
                         C141320 * C141358) *
                        C141294 * C2958) *
                   C141243) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C55526 * C108 + C55529 + C55529 + C141216 * C120) *
                         C141320 * C55522 +
                     C56059 * C55523 + C56060 * C55524 + C56061 * C55525) *
                        C141294 * C2956 -
                    (C57942 * C55525 + C56061 * C55524 + C56060 * C55523 +
                     C56059 * C55522) *
                        C141294 * C2957 +
                    (C56060 * C55522 + C56061 * C55523 + C57942 * C55524 +
                     (C55526 * C57932 + C57938 + C57938 + C141216 * C57934) *
                         C141320 * C55525) *
                        C141294 * C2958) *
                   C141243) /
                      (p * q * std::sqrt(p + q));
    d2eexy[85] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C47810 * C108 + C47710 * C189 + C47811 * C823 + C141358 * C912) *
               C47713 +
           (C47810 * C114 + C47710 * C195 + C47811 * C828 + C141358 * C917) *
               C47707 +
           (C47837 + C47838) * C47715 + (C47839 + C47840) * C47708 +
           C47849 * C47717 + C47850 * C47709) *
              C141320 * C141294 * C2956 -
          ((C48704 + C48705) * C47709 + (C48706 + C48707) * C47717 +
           (C48708 + C48709) * C47708 + (C48710 + C48711) * C47715 +
           (C47811 * C2964 + C141358 * C3030 + C47810 * C828 + C47710 * C917) *
               C47707 +
           (C47811 * C2960 + C141358 * C3026 + C47810 * C823 + C47710 * C912) *
               C47713) *
              C141320 * C141294 * C2957 +
          ((C47810 * C2960 + C47710 * C3026 + C47811 * C6729 +
            C141358 * C6880) *
               C47713 +
           (C47810 * C2964 + C47710 * C3030 + C47811 * C6732 +
            C141358 * C6883) *
               C47707 +
           (C47810 * C2961 + C47710 * C3027 + C47811 * C6728 +
            C141358 * C6879) *
               C47715 +
           (C47810 * C2965 + C47710 * C3031 + C47811 * C6731 +
            C141358 * C6882) *
               C47708 +
           (C47810 * C2962 + C47710 * C3028 + C47811 * C6730 +
            C141358 * C6881) *
               C47717 +
           (C47810 * C2966 + C47710 * C3032 + C47811 * C6733 +
            C141358 * C6884) *
               C47709) *
              C141320 * C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C55590 * C108 + C55522 * C189 + C55591 * C823 + C55523 * C912 +
            C55592 * C2960 + C55524 * C3026 + C55593 * C6729 + C55525 * C6880) *
               C55527 +
           (C55590 * C114 + C55522 * C195 + C55591 * C828 + C55523 * C917 +
            C55592 * C2964 + C55524 * C3030 + C55593 * C6732 + C55525 * C6883) *
               C141216) *
              C141320 * C141294 * C2956 -
          ((C55593 * C9770 + C55525 * C9864 + C55592 * C6732 + C55524 * C6883 +
            C55591 * C2964 + C55523 * C3030 + C55590 * C828 + C55522 * C917) *
               C141216 +
           (C55593 * C9768 + C55525 * C9862 + C55592 * C6729 + C55524 * C6880 +
            C55591 * C2960 + C55523 * C3026 + C55590 * C823 + C55522 * C912) *
               C55527) *
              C141320 * C141294 * C2957 +
          ((C55590 * C2960 + C55522 * C3026 + C55591 * C6729 + C55523 * C6880 +
            C55592 * C9768 + C55524 * C9862 + C55593 * C57932 +
            C55525 * C57992) *
               C55527 +
           (C55590 * C2964 + C55522 * C3030 + C55591 * C6732 + C55523 * C6883 +
            C55592 * C9770 + C55524 * C9864 + C55593 * C57933 +
            C55525 * C57993) *
               C141216) *
              C141320 * C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eexz[85] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141320 * C276) * C47713 +
            (C275 * C114 + C141320 * C282) * C47707 + C305 * C47715 +
            C306 * C47708 + C307 * C47717 + C308 * C47709) *
               C47710 +
           (C48810 + C48811 + C48812 + C48813 + C48814 + C48815) * C141358) *
              C141294 * C2956 -
          ((C51608 + C51609 + C51610 + C51611 + C51612 + C51613) * C141358 +
           (C48815 + C48814 + C48813 + C48812 + C48811 + C48810) * C47710) *
              C141294 * C2957 +
          ((C51613 + C51612 + C51611 + C51610 + C51609 + C51608) * C47710 +
           (C9954 * C47713 + C9953 * C47707 + C7037 * C47715 + C7036 * C47708 +
            (C275 * C6730 + C141320 * C7003) * C47717 +
            (C275 * C6733 + C141320 * C7006) * C47709) *
               C141358) *
              C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141320 * C276) * C55527 +
            (C275 * C114 + C141320 * C282) * C141216) *
               C55522 +
           (C56197 + C56198) * C55523 + C58047 * C55524 + C58048 * C55525) *
              C141294 * C2956 -
          ((C58055 + C58056) * C55525 + (C56202 + C56201) * C55524 +
           (C56200 + C56199) * C55523 + (C56198 + C56197) * C55522) *
              C141294 * C2957 +
          (C58047 * C55522 + C58048 * C55523 + (C58056 + C58055) * C55524 +
           ((C275 * C57932 + C141320 * C58044) * C55527 +
            (C275 * C57933 + C141320 * C58045) * C141216) *
               C55525) *
              C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eeyx[85] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C47713 * C108 + C47707 * C114 + C47715 * C109 +
                      C47708 * C115 + C47717 * C110 + C47709 * C116) *
                         C47810 +
                     (C47713 * C189 + C47707 * C362 + C47715 * C190 +
                      C47708 * C363 + C47717 * C191 + C47709 * C364) *
                         C47710 +
                     (C48944 + C48945 + C48946) * C47811 +
                     (C48947 + C48948 + C48949) * C141358) *
                        C141320 * C141294 * C2956 -
                    ((C51700 + C51701 + C51702) * C141358 +
                     (C51703 + C51704 + C51705) * C47811 +
                     (C48949 + C48948 + C48947) * C47710 +
                     (C48946 + C48945 + C48944) * C47810) *
                        C141320 * C141294 * C2957 +
                    ((C51705 + C51704 + C51703) * C47810 +
                     (C51702 + C51701 + C51700) * C47710 +
                     (C47713 * C6729 + C47707 * C6732 + C47715 * C6728 +
                      C47708 * C6731 + C47717 * C6730 + C47709 * C6733) *
                         C47811 +
                     (C47713 * C6880 + C47707 * C7140 + C47715 * C6879 +
                      C47708 * C7139 + C47717 * C6881 + C47709 * C7141) *
                         C141358) *
                        C141320 * C141294 * C2958) *
                   C141243) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C55527 * C108 + C141216 * C114) * C55590 +
                     (C55527 * C189 + C141216 * C362) * C55522 +
                     C56299 * C55591 + C56300 * C55523 + C56301 * C55592 +
                     C56302 * C55524 + C56303 * C55593 + C56304 * C55525) *
                        C141320 * C141294 * C2956 -
                    (C58112 * C55525 + C58113 * C55593 + C56304 * C55524 +
                     C56303 * C55592 + C56302 * C55523 + C56301 * C55591 +
                     C56300 * C55522 + C56299 * C55590) *
                        C141320 * C141294 * C2957 +
                    (C56301 * C55590 + C56302 * C55522 + C56303 * C55591 +
                     C56304 * C55523 + C58113 * C55592 + C58112 * C55524 +
                     (C55527 * C57932 + C141216 * C57933) * C55593 +
                     (C55527 * C57992 + C141216 * C58106) * C55525) *
                        C141320 * C141294 * C2958) *
                   C141243) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[85] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C48072 * C108 + C48075 + C48075 + C47710 * C419 + C48073 * C823 +
            C48076 + C48076 + C141358 * C1171) *
               C47707 +
           (C48109 + C48110) * C47708 + C48115 * C47709) *
              C141320 * C141294 * C2956 -
          ((C49078 + C49079) * C47709 + (C49080 + C49081) * C47708 +
           (C48073 * C2960 + C49066 + C49066 + C141358 * C3196 + C48072 * C823 +
            C49067 + C49067 + C47710 * C1171) *
               C47707) *
              C141320 * C141294 * C2957 +
          ((C48072 * C2960 + C51780 + C51780 + C47710 * C3196 + C48073 * C6729 +
            C51781 + C51781 + C141358 * C7289) *
               C47707 +
           (C48072 * C2961 + C51782 + C51782 + C47710 * C3197 + C48073 * C6728 +
            C51783 + C51783 + C141358 * C7288) *
               C47708 +
           (C48072 * C2962 + C51784 + C51784 + C47710 * C3198 + C48073 * C6730 +
            C51785 + C51785 + C141358 * C7290) *
               C47709) *
              C141320 * C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((C55744 * C108 + C55749 + C55749 + C55522 * C419 + C55745 * C823 +
           C55750 + C55750 + C55523 * C1171 + C55746 * C2960 + C55751 + C55751 +
           C55524 * C3196 + C55747 * C6729 + C55752 + C55752 + C55525 * C7289) *
              C141216 * C141320 * C141294 * C2956 -
          (C55747 * C9768 + C56377 + C56377 + C55525 * C10121 + C55746 * C6729 +
           C56378 + C56378 + C55524 * C7289 + C55745 * C2960 + C56379 + C56379 +
           C55523 * C3196 + C55744 * C823 + C56380 + C56380 + C55522 * C1171) *
              C141216 * C141320 * C141294 * C2957 +
          (C55744 * C2960 + C58165 + C58165 + C55522 * C3196 + C55745 * C6729 +
           C58166 + C58166 + C55523 * C7289 + C55746 * C9768 + C58167 + C58167 +
           C55524 * C10121 + C55747 * C57932 + C58168 + C58168 +
           C55525 * C58163) *
              C141216 * C141320 * C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eeyz[85] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141320 * C276) * C47810 +
            (C275 * C189 + C141320 * C501) * C47710 + C7032 * C47811 +
            C7428 * C141358) *
               C47707 +
           (C48190 + C48191 + C48192 + C48193) * C47708 + C48204 * C47709) *
              C141294 * C2956 -
          ((C49180 + C49181 + C49182 + C49183) * C47709 +
           (C49184 + C49185 + C49186 + C49187) * C47708 +
           (C7429 * C141358 + C7034 * C47811 + C7428 * C47710 +
            C7032 * C47810) *
               C47707) *
              C141294 * C2957 +
          ((C7034 * C47810 + C7429 * C47710 + C9954 * C47811 +
            C10208 * C141358) *
               C47707 +
           (C6086 * C47810 + C6371 * C47710 + C7037 * C47811 +
            C7430 * C141358) *
               C47708 +
           (C6089 * C47810 + C6372 * C47710 +
            (C275 * C6730 + C141320 * C7003) * C47811 +
            (C275 * C6881 + C141320 * C7415) * C141358) *
               C47709) *
              C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C275 * C108 + C141320 * C276) * C55590 +
           (C275 * C189 + C141320 * C501) * C55522 + C7032 * C55591 +
           C7428 * C55523 + C7034 * C55592 + C7429 * C55524 + C9954 * C55593 +
           C10208 * C55525) *
              C141216 * C141294 * C2956 -
          (C58222 * C55525 + C58054 * C55593 + C10208 * C55524 +
           C9954 * C55592 + C7429 * C55523 + C7034 * C55591 + C7428 * C55522 +
           C7032 * C55590) *
              C141216 * C141294 * C2957 +
          (C7034 * C55590 + C7429 * C55522 + C9954 * C55591 + C10208 * C55523 +
           C58054 * C55592 + C58222 * C55524 +
           (C275 * C57932 + C141320 * C58044) * C55593 +
           (C275 * C57992 + C141320 * C58218) * C55525) *
              C141216 * C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eezx[85] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47713 * C108 + C47707 * C114 + C47715 * C109 + C47708 * C115 +
             C47717 * C110 + C47709 * C116) *
                C275 +
            (C47713 * C276 + C47707 * C579 + C47715 * C277 + C47708 * C580 +
             C47717 * C278 + C47709 * C581) *
                C141320) *
               C47710 +
           ((C48944 + C48945 + C48946) * C275 +
            (C49298 + C49299 + C49300) * C141320) *
               C141358) *
              C141294 * C2956 -
          (((C51940 + C51941 + C51942) * C141320 +
            (C51703 + C51704 + C51705) * C275) *
               C141358 +
           ((C49300 + C49299 + C49298) * C141320 +
            (C48946 + C48945 + C48944) * C275) *
               C47710) *
              C141294 * C2957 +
          (((C51705 + C51704 + C51703) * C275 +
            (C51942 + C51941 + C51940) * C141320) *
               C47710 +
           ((C47713 * C6729 + C47707 * C6732 + C47715 * C6728 + C47708 * C6731 +
             C47717 * C6730 + C47709 * C6733) *
                C275 +
            (C47713 * C7002 + C47707 * C7530 + C47715 * C7001 + C47708 * C7529 +
             C47717 * C7003 + C47709 * C7531) *
                C141320) *
               C141358) *
              C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C55527 * C108 + C141216 * C114) * C275 +
            (C55527 * C276 + C141216 * C579) * C141320) *
               C55522 +
           (C56517 + C56541) * C55523 + C58274 * C55524 + C58275 * C55525) *
              C141294 * C2956 -
          ((C58280 + C58278) * C55525 + (C56543 + C56523) * C55524 +
           (C56542 + C56520) * C55523 + (C56541 + C56517) * C55522) *
              C141294 * C2957 +
          (C58274 * C55522 + C58275 * C55523 + (C58278 + C58280) * C55524 +
           ((C55527 * C57932 + C141216 * C57933) * C275 +
            (C55527 * C58044 + C141216 * C58272) * C141320) *
               C55525) *
              C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eezy[85] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47810 * C108 + C47710 * C189 + C47811 * C823 + C141358 * C912) *
                C275 +
            (C47810 * C276 + C47710 * C635 + C47811 * C1006 + C141358 * C1419) *
                C141320) *
               C47707 +
           ((C47837 + C47838) * C275 + (C48366 + C48367) * C141320) * C47708 +
           C48374 * C47709) *
              C141294 * C2956 -
          (((C49410 + C49411) * C141320 + (C48706 + C48707) * C275) * C47709 +
           ((C49412 + C49413) * C141320 + (C48710 + C48711) * C275) * C47708 +
           ((C47811 * C3084 + C141358 * C3362 + C47810 * C1006 +
             C47710 * C1419) *
                C141320 +
            (C47811 * C2960 + C141358 * C3026 + C47810 * C823 + C47710 * C912) *
                C275) *
               C47707) *
              C141294 * C2957 +
          (((C47810 * C2960 + C47710 * C3026 + C47811 * C6729 +
             C141358 * C6880) *
                C275 +
            (C47810 * C3084 + C47710 * C3362 + C47811 * C7002 +
             C141358 * C7655) *
                C141320) *
               C47707 +
           ((C47810 * C2961 + C47710 * C3027 + C47811 * C6728 +
             C141358 * C6879) *
                C275 +
            (C47810 * C3085 + C47710 * C3363 + C47811 * C7001 +
             C141358 * C7654) *
                C141320) *
               C47708 +
           ((C47810 * C2962 + C47710 * C3028 + C47811 * C6730 +
             C141358 * C6881) *
                C275 +
            (C47810 * C3086 + C47710 * C3364 + C47811 * C7003 +
             C141358 * C7656) *
                C141320) *
               C47709) *
              C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C55590 * C108 + C55522 * C189 + C55591 * C823 + C55523 * C912 +
            C55592 * C2960 + C55524 * C3026 + C55593 * C6729 + C55525 * C6880) *
               C275 +
           (C55590 * C276 + C55522 * C635 + C55591 * C1006 + C55523 * C1419 +
            C55592 * C3084 + C55524 * C3362 + C55593 * C7002 + C55525 * C7655) *
               C141320) *
              C141216 * C141294 * C2956 -
          ((C55593 * C9940 + C55525 * C10368 + C55592 * C7002 + C55524 * C7655 +
            C55591 * C3084 + C55523 * C3362 + C55590 * C1006 + C55522 * C1419) *
               C141320 +
           (C55593 * C9768 + C55525 * C9862 + C55592 * C6729 + C55524 * C6880 +
            C55591 * C2960 + C55523 * C3026 + C55590 * C823 + C55522 * C912) *
               C275) *
              C141216 * C141294 * C2957 +
          ((C55590 * C2960 + C55522 * C3026 + C55591 * C6729 + C55523 * C6880 +
            C55592 * C9768 + C55524 * C9862 + C55593 * C57932 +
            C55525 * C57992) *
               C275 +
           (C55590 * C3084 + C55522 * C3362 + C55591 * C7002 + C55523 * C7655 +
            C55592 * C9940 + C55524 * C10368 + C55593 * C58044 +
            C55525 * C58330) *
               C141320) *
              C141216 * C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eezz[85] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C141320 * C714) * C47710 +
            C7785 * C141358) *
               C47707 +
           (C48449 + C48450) * C47708 + C48455 * C47709) *
              C141294 * C2956 -
          ((C49512 + C49513) * C47709 + (C49514 + C49515) * C47708 +
           (C7786 * C141358 + C7785 * C47710) * C47707) *
              C141294 * C2957 +
          ((C7786 * C47710 + C10453 * C141358) * C47707 +
           (C6627 * C47710 + C7787 * C141358) * C47708 +
           (C6628 * C47710 +
            (C713 * C6730 + C7778 + C7778 + C141320 * C7766) * C141358) *
               C47709) *
              C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C713 * C108 + C721 + C721 + C141320 * C714) * C55522 +
           C7785 * C55523 + C7786 * C55524 + C10453 * C55525) *
              C141216 * C141294 * C2956 -
          (C58388 * C55525 + C10453 * C55524 + C7786 * C55523 +
           C7785 * C55522) *
              C141216 * C141294 * C2957 +
          (C7786 * C55522 + C10453 * C55523 + C58388 * C55524 +
           (C713 * C57932 + C58385 + C58385 + C141320 * C58381) * C55525) *
              C141216 * C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eexx[86] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C47712 * C108 + C47719 + C47719 + C47707 * C120 +
                       C47714 * C109 + C47720 + C47720 + C47708 * C121 +
                       C47716 * C110 + C47721 + C47721 + C47709 * C122) *
                          C141320 * C47710 +
                      (C48584 + C48585 + C48586) * C141320 * C141358) *
                         C1596 -
                     ((C52204 + C52205 + C52206) * C141320 * C141358 +
                      (C47716 * C1599 + C49617 + C49617 + C47709 * C1609 +
                       C47714 * C1600 + C49618 + C49618 + C47708 * C1610 +
                       C47712 * C1601 + C49619 + C49619 + C47707 * C1611) *
                          C141320 * C47710) *
                         C141487) *
                        C2374 +
                    (((C52206 + C52205 + C52204) * C141320 * C47710 +
                      (C47712 * C7887 + C52195 + C52195 + C47707 * C7893 +
                       C47714 * C7886 + C52196 + C52196 + C47708 * C7892 +
                       C47716 * C7888 + C52197 + C52197 + C47709 * C7894) *
                          C141320 * C141358) *
                         C141487 -
                     ((C51457 + C51458 + C51459) * C141320 * C141358 +
                      (C48586 + C48585 + C48584) * C141320 * C47710) *
                         C1596) *
                        C141485) *
                   C141243) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C55526 * C108 + C55529 + C55529 + C141216 * C120) *
                          C141320 * C55522 +
                      C56059 * C55523 + C56060 * C55524 + C56061 * C55525) *
                         C1596 -
                     (C58474 * C55525 + C58475 * C55524 + C58476 * C55523 +
                      (C55526 * C1601 + C56748 + C56748 + C141216 * C1611) *
                          C141320 * C55522) *
                         C141487) *
                        C2374 +
                    ((C58476 * C55522 + C58475 * C55523 + C58474 * C55524 +
                      (C55526 * C58454 + C58464 + C58464 + C141216 * C58456) *
                          C141320 * C55525) *
                         C141487 -
                     (C57942 * C55525 + C56061 * C55524 + C56060 * C55523 +
                      C56059 * C55522) *
                         C1596) *
                        C141485) *
                   C141243) /
                      (p * q * std::sqrt(p + q));
    d2eexy[86] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47810 * C108 + C47710 * C189 + C47811 * C823 + C141358 * C912) *
                C47713 +
            (C47810 * C114 + C47710 * C195 + C47811 * C828 + C141358 * C917) *
                C47707 +
            (C47837 + C47838) * C47715 + (C47839 + C47840) * C47708 +
            C47849 * C47717 + C47850 * C47709) *
               C141320 * C1596 -
           ((C49740 + C49741) * C47709 + (C49742 + C49743) * C47717 +
            (C49744 + C49745) * C47708 + (C49746 + C49747) * C47715 +
            (C47811 * C3494 + C141358 * C3576 + C47810 * C1606 +
             C47710 * C1695) *
                C47707 +
            (C47811 * C3490 + C141358 * C3572 + C47810 * C1601 +
             C47710 * C1690) *
                C47713) *
               C141320 * C141487) *
              C2374 +
          (((C47810 * C3490 + C47710 * C3572 + C47811 * C7887 +
             C141358 * C8006) *
                C47713 +
            (C47810 * C3494 + C47710 * C3576 + C47811 * C7890 +
             C141358 * C8009) *
                C47707 +
            (C47810 * C3491 + C47710 * C3573 + C47811 * C7886 +
             C141358 * C8005) *
                C47715 +
            (C47810 * C3495 + C47710 * C3577 + C47811 * C7889 +
             C141358 * C8008) *
                C47708 +
            (C47810 * C3492 + C47710 * C3574 + C47811 * C7888 +
             C141358 * C8007) *
                C47717 +
            (C47810 * C3496 + C47710 * C3578 + C47811 * C7891 +
             C141358 * C8010) *
                C47709) *
               C141320 * C141487 -
           ((C48704 + C48705) * C47709 + (C48706 + C48707) * C47717 +
            (C48708 + C48709) * C47708 + (C48710 + C48711) * C47715 +
            (C47811 * C2964 + C141358 * C3030 + C47810 * C828 + C47710 * C917) *
                C47707 +
            (C47811 * C2960 + C141358 * C3026 + C47810 * C823 + C47710 * C912) *
                C47713) *
               C141320 * C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C55590 * C108 + C55522 * C189 + C55591 * C823 + C55523 * C912 +
             C55592 * C2960 + C55524 * C3026 + C55593 * C6729 +
             C55525 * C6880) *
                C55527 +
            (C55590 * C114 + C55522 * C195 + C55591 * C828 + C55523 * C917 +
             C55592 * C2964 + C55524 * C3030 + C55593 * C6732 +
             C55525 * C6883) *
                C141216) *
               C141320 * C1596 -
           ((C55593 * C10553 + C55525 * C10679 + C55592 * C7890 +
             C55524 * C8009 + C55591 * C3494 + C55523 * C3576 + C55590 * C1606 +
             C55522 * C1695) *
                C141216 +
            (C55593 * C10551 + C55525 * C10677 + C55592 * C7887 +
             C55524 * C8006 + C55591 * C3490 + C55523 * C3572 + C55590 * C1601 +
             C55522 * C1690) *
                C55527) *
               C141320 * C141487) *
              C2374 +
          (((C55590 * C3490 + C55522 * C3572 + C55591 * C7887 + C55523 * C8006 +
             C55592 * C10551 + C55524 * C10677 + C55593 * C58454 +
             C55525 * C58542) *
                C55527 +
            (C55590 * C3494 + C55522 * C3576 + C55591 * C7890 + C55523 * C8009 +
             C55592 * C10553 + C55524 * C10679 + C55593 * C58455 +
             C55525 * C58543) *
                C141216) *
               C141320 * C141487 -
           ((C55593 * C9770 + C55525 * C9864 + C55592 * C6732 + C55524 * C6883 +
             C55591 * C2964 + C55523 * C3030 + C55590 * C828 + C55522 * C917) *
                C141216 +
            (C55593 * C9768 + C55525 * C9862 + C55592 * C6729 + C55524 * C6880 +
             C55591 * C2960 + C55523 * C3026 + C55590 * C823 + C55522 * C912) *
                C55527) *
               C141320 * C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eexz[86] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141320 * C276) * C47713 +
             (C275 * C114 + C141320 * C282) * C47707 + C305 * C47715 +
             C306 * C47708 + C307 * C47717 + C308 * C47709) *
                C47710 +
            (C48810 + C48811 + C48812 + C48813 + C48814 + C48815) * C141358) *
               C1596 -
           ((C52403 + C52404 + C52405 + C52406 + C52407 + C52408) * C141358 +
            (C1806 * C47709 + C1807 * C47717 + C1808 * C47708 + C1809 * C47715 +
             (C275 * C1606 + C141320 * C1789) * C47707 +
             (C275 * C1601 + C141320 * C1784) * C47713) *
                C47710) *
               C141487) *
              C2374 +
          (((C52408 + C52407 + C52406 + C52405 + C52404 + C52403) * C47710 +
            (C10797 * C47713 + C10796 * C47707 + C8143 * C47715 +
             C8142 * C47708 + (C275 * C7888 + C141320 * C8129) * C47717 +
             (C275 * C7891 + C141320 * C8132) * C47709) *
                C141358) *
               C141487 -
           ((C51608 + C51609 + C51610 + C51611 + C51612 + C51613) * C141358 +
            (C48815 + C48814 + C48813 + C48812 + C48811 + C48810) * C47710) *
               C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141320 * C276) * C55527 +
             (C275 * C114 + C141320 * C282) * C141216) *
                C55522 +
            (C56197 + C56198) * C55523 + C58047 * C55524 + C58048 * C55525) *
               C1596 -
           ((C58623 + C58624) * C55525 + (C58617 + C58618) * C55524 +
            (C58619 + C58620) * C55523 +
            ((C275 * C1606 + C141320 * C1789) * C141216 +
             (C275 * C1601 + C141320 * C1784) * C55527) *
                C55522) *
               C141487) *
              C2374 +
          (((C58620 + C58619) * C55522 + (C58618 + C58617) * C55523 +
            (C58624 + C58623) * C55524 +
            ((C275 * C58454 + C141320 * C58610) * C55527 +
             (C275 * C58455 + C141320 * C58611) * C141216) *
                C55525) *
               C141487 -
           ((C58055 + C58056) * C55525 + (C56202 + C56201) * C55524 +
            (C56200 + C56199) * C55523 + (C56198 + C56197) * C55522) *
               C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eeyx[86] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C47713 * C108 + C47707 * C114 + C47715 * C109 +
                       C47708 * C115 + C47717 * C110 + C47709 * C116) *
                          C47810 +
                      (C47713 * C189 + C47707 * C362 + C47715 * C190 +
                       C47708 * C363 + C47717 * C191 + C47709 * C364) *
                          C47710 +
                      (C48944 + C48945 + C48946) * C47811 +
                      (C48947 + C48948 + C48949) * C141358) *
                         C141320 * C1596 -
                     ((C52519 + C52520 + C52521) * C141358 +
                      (C52522 + C52523 + C52524) * C47811 +
                      (C47717 * C1688 + C47709 * C1876 + C47715 * C1689 +
                       C47708 * C1877 + C47713 * C1690 + C47707 * C1878) *
                          C47710 +
                      (C47717 * C1599 + C47709 * C1604 + C47715 * C1600 +
                       C47708 * C1605 + C47713 * C1601 + C47707 * C1606) *
                          C47810) *
                         C141320 * C141487) *
                        C2374 +
                    (((C52524 + C52523 + C52522) * C47810 +
                      (C52521 + C52520 + C52519) * C47710 +
                      (C47713 * C7887 + C47707 * C7890 + C47715 * C7886 +
                       C47708 * C7889 + C47717 * C7888 + C47709 * C7891) *
                          C47811 +
                      (C47713 * C8006 + C47707 * C8244 + C47715 * C8005 +
                       C47708 * C8243 + C47717 * C8007 + C47709 * C8245) *
                          C141358) *
                         C141320 * C141487 -
                     ((C51700 + C51701 + C51702) * C141358 +
                      (C51703 + C51704 + C51705) * C47811 +
                      (C48949 + C48948 + C48947) * C47710 +
                      (C48946 + C48945 + C48944) * C47810) *
                         C141320 * C1596) *
                        C141485) *
                   C141243) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C55527 * C108 + C141216 * C114) * C55590 +
                      (C55527 * C189 + C141216 * C362) * C55522 +
                      C56299 * C55591 + C56300 * C55523 + C56301 * C55592 +
                      C56302 * C55524 + C56303 * C55593 + C56304 * C55525) *
                         C141320 * C1596 -
                     (C58704 * C55525 + C58705 * C55593 + C58706 * C55524 +
                      C58707 * C55592 + C58708 * C55523 + C58709 * C55591 +
                      (C55527 * C1690 + C141216 * C1878) * C55522 +
                      (C55527 * C1601 + C141216 * C1606) * C55590) *
                         C141320 * C141487) *
                        C2374 +
                    ((C58709 * C55590 + C58708 * C55522 + C58707 * C55591 +
                      C58706 * C55523 + C58705 * C55592 + C58704 * C55524 +
                      (C55527 * C58454 + C141216 * C58455) * C55593 +
                      (C55527 * C58542 + C141216 * C58690) * C55525) *
                         C141320 * C141487 -
                     (C58112 * C55525 + C58113 * C55593 + C56304 * C55524 +
                      C56303 * C55592 + C56302 * C55523 + C56301 * C55591 +
                      C56300 * C55522 + C56299 * C55590) *
                         C141320 * C1596) *
                        C141485) *
                   C141243) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[86] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C48072 * C108 + C48075 + C48075 + C47710 * C419 +
                       C48073 * C823 + C48076 + C48076 + C141358 * C1171) *
                          C47707 +
                      (C48109 + C48110) * C47708 + C48115 * C47709) *
                         C141320 * C1596 -
                     ((C50066 + C50067) * C47709 + (C50068 + C50069) * C47708 +
                      (C48073 * C3490 + C50054 + C50054 + C141358 * C3790 +
                       C48072 * C1601 + C50055 + C50055 + C47710 * C1949) *
                          C47707) *
                         C141320 * C141487) *
                        C2374 +
                    (((C48072 * C3490 + C52623 + C52623 + C47710 * C3790 +
                       C48073 * C7887 + C52624 + C52624 + C141358 * C8345) *
                          C47707 +
                      (C48072 * C3491 + C52625 + C52625 + C47710 * C3791 +
                       C48073 * C7886 + C52626 + C52626 + C141358 * C8344) *
                          C47708 +
                      (C48072 * C3492 + C52627 + C52627 + C47710 * C3792 +
                       C48073 * C7888 + C52628 + C52628 + C141358 * C8346) *
                          C47709) *
                         C141320 * C141487 -
                     ((C49078 + C49079) * C47709 + (C49080 + C49081) * C47708 +
                      (C48073 * C2960 + C49066 + C49066 + C141358 * C3196 +
                       C48072 * C823 + C49067 + C49067 + C47710 * C1171) *
                          C47707) *
                         C141320 * C1596) *
                        C141485) *
                   C141243) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C55744 * C108 + C55749 + C55749 + C55522 * C419 +
                      C55745 * C823 + C55750 + C55750 + C55523 * C1171 +
                      C55746 * C2960 + C55751 + C55751 + C55524 * C3196 +
                      C55747 * C6729 + C55752 + C55752 + C55525 * C7289) *
                         C141216 * C141320 * C1596 -
                     (C55747 * C10551 + C57017 + C57017 + C55525 * C11025 +
                      C55746 * C7887 + C57018 + C57018 + C55524 * C8345 +
                      C55745 * C3490 + C57019 + C57019 + C55523 * C3790 +
                      C55744 * C1601 + C57020 + C57020 + C55522 * C1949) *
                         C141216 * C141320 * C141487) *
                        C2374 +
                    ((C55744 * C3490 + C58777 + C58777 + C55522 * C3790 +
                      C55745 * C7887 + C58778 + C58778 + C55523 * C8345 +
                      C55746 * C10551 + C58779 + C58779 + C55524 * C11025 +
                      C55747 * C58454 + C58780 + C58780 + C55525 * C58775) *
                         C141216 * C141320 * C141487 -
                     (C55747 * C9768 + C56377 + C56377 + C55525 * C10121 +
                      C55746 * C6729 + C56378 + C56378 + C55524 * C7289 +
                      C55745 * C2960 + C56379 + C56379 + C55523 * C3196 +
                      C55744 * C823 + C56380 + C56380 + C55522 * C1171) *
                         C141216 * C141320 * C1596) *
                        C141485) *
                   C141243) /
                      (p * q * std::sqrt(p + q));
    d2eeyz[86] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141320 * C276) * C47810 +
             (C275 * C189 + C141320 * C501) * C47710 + C7032 * C47811 +
             C7428 * C141358) *
                C47707 +
            (C48190 + C48191 + C48192 + C48193) * C47708 + C48204 * C47709) *
               C1596 -
           ((C50168 + C50169 + C50170 + C50171) * C47709 +
            (C50172 + C50173 + C50174 + C50175) * C47708 +
            (C11139 * C141358 + C10799 * C47811 +
             (C275 * C1690 + C141320 * C2040) * C47710 +
             (C275 * C1601 + C141320 * C1784) * C47810) *
                C47707) *
               C141487) *
              C2374 +
          (((C10799 * C47810 + C11139 * C47710 + C10797 * C47811 +
             C11138 * C141358) *
                C47707 +
            (C8145 * C47810 + C8482 * C47710 + C8143 * C47811 +
             C8481 * C141358) *
                C47708 +
            (C24213 * C47810 + C24545 * C47710 +
             (C275 * C7888 + C141320 * C8129) * C47811 +
             (C275 * C8007 + C141320 * C8471) * C141358) *
                C47709) *
               C141487 -
           ((C49180 + C49181 + C49182 + C49183) * C47709 +
            (C49184 + C49185 + C49186 + C49187) * C47708 +
            (C7429 * C141358 + C7034 * C47811 + C7428 * C47710 +
             C7032 * C47810) *
                C47707) *
               C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141320 * C276) * C55590 +
            (C275 * C189 + C141320 * C501) * C55522 + C7032 * C55591 +
            C7428 * C55523 + C7034 * C55592 + C7429 * C55524 + C9954 * C55593 +
            C10208 * C55525) *
               C141216 * C1596 -
           (C58850 * C55525 + C58622 * C55593 + C11138 * C55524 +
            C10797 * C55592 + C11139 * C55523 + C10799 * C55591 +
            (C275 * C1690 + C141320 * C2040) * C55522 +
            (C275 * C1601 + C141320 * C1784) * C55590) *
               C141216 * C141487) *
              C2374 +
          ((C10799 * C55590 + C11139 * C55522 + C10797 * C55591 +
            C11138 * C55523 + C58622 * C55592 + C58850 * C55524 +
            (C275 * C58454 + C141320 * C58610) * C55593 +
            (C275 * C58542 + C141320 * C58846) * C55525) *
               C141216 * C141487 -
           (C58222 * C55525 + C58054 * C55593 + C10208 * C55524 +
            C9954 * C55592 + C7429 * C55523 + C7034 * C55591 + C7428 * C55522 +
            C7032 * C55590) *
               C141216 * C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eezx[86] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47713 * C108 + C47707 * C114 + C47715 * C109 + C47708 * C115 +
              C47717 * C110 + C47709 * C116) *
                 C275 +
             (C47713 * C276 + C47707 * C579 + C47715 * C277 + C47708 * C580 +
              C47717 * C278 + C47709 * C581) *
                 C141320) *
                C47710 +
            ((C48944 + C48945 + C48946) * C275 +
             (C49298 + C49299 + C49300) * C141320) *
                C141358) *
               C1596 -
           (((C52831 + C52832 + C52833) * C141320 +
             (C52522 + C52523 + C52524) * C275) *
                C141358 +
            ((C47717 * C1782 + C47709 * C2124 + C47715 * C1783 +
              C47708 * C2125 + C47713 * C1784 + C47707 * C2126) *
                 C141320 +
             (C47717 * C1599 + C47709 * C1604 + C47715 * C1600 +
              C47708 * C1605 + C47713 * C1601 + C47707 * C1606) *
                 C275) *
                C47710) *
               C141487) *
              C2374 +
          ((((C52524 + C52523 + C52522) * C275 +
             (C52833 + C52832 + C52831) * C141320) *
                C47710 +
            ((C47713 * C7887 + C47707 * C7890 + C47715 * C7886 +
              C47708 * C7889 + C47717 * C7888 + C47709 * C7891) *
                 C275 +
             (C47713 * C8128 + C47707 * C8583 + C47715 * C8127 +
              C47708 * C8582 + C47717 * C8129 + C47709 * C8584) *
                 C141320) *
                C141358) *
               C141487 -
           (((C51940 + C51941 + C51942) * C141320 +
             (C51703 + C51704 + C51705) * C275) *
                C141358 +
            ((C49300 + C49299 + C49298) * C141320 +
             (C48946 + C48945 + C48944) * C275) *
                C47710) *
               C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C55527 * C108 + C141216 * C114) * C275 +
             (C55527 * C276 + C141216 * C579) * C141320) *
                C55522 +
            (C56517 + C56541) * C55523 + C58274 * C55524 + C58275 * C55525) *
               C1596 -
           ((C58930 + C58920) * C55525 + (C58931 + C58923) * C55524 +
            (C58932 + C58926) * C55523 +
            ((C55527 * C1784 + C141216 * C2126) * C141320 +
             (C55527 * C1601 + C141216 * C1606) * C275) *
                C55522) *
               C141487) *
              C2374 +
          (((C58926 + C58932) * C55522 + (C58923 + C58931) * C55523 +
            (C58920 + C58930) * C55524 +
            ((C55527 * C58454 + C141216 * C58455) * C275 +
             (C55527 * C58610 + C141216 * C58916) * C141320) *
                C55525) *
               C141487 -
           ((C58280 + C58278) * C55525 + (C56543 + C56523) * C55524 +
            (C56542 + C56520) * C55523 + (C56541 + C56517) * C55522) *
               C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eezy[86] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47810 * C108 + C47710 * C189 + C47811 * C823 + C141358 * C912) *
                 C275 +
             (C47810 * C276 + C47710 * C635 + C47811 * C1006 +
              C141358 * C1419) *
                 C141320) *
                C47707 +
            ((C47837 + C47838) * C275 + (C48366 + C48367) * C141320) * C47708 +
            C48374 * C47709) *
               C1596 -
           (((C50380 + C50381) * C141320 + (C49742 + C49743) * C275) * C47709 +
            ((C50382 + C50383) * C141320 + (C49746 + C49747) * C275) * C47708 +
            ((C47811 * C3646 + C141358 * C4004 + C47810 * C1784 +
              C47710 * C2197) *
                 C141320 +
             (C47811 * C3490 + C141358 * C3572 + C47810 * C1601 +
              C47710 * C1690) *
                 C275) *
                C47707) *
               C141487) *
              C2374 +
          ((((C47810 * C3490 + C47710 * C3572 + C47811 * C7887 +
              C141358 * C8006) *
                 C275 +
             (C47810 * C3646 + C47710 * C4004 + C47811 * C8128 +
              C141358 * C8684) *
                 C141320) *
                C47707 +
            ((C47810 * C3491 + C47710 * C3573 + C47811 * C7886 +
              C141358 * C8005) *
                 C275 +
             (C47810 * C3647 + C47710 * C4005 + C47811 * C8127 +
              C141358 * C8683) *
                 C141320) *
                C47708 +
            ((C47810 * C3492 + C47710 * C3574 + C47811 * C7888 +
              C141358 * C8007) *
                 C275 +
             (C47810 * C3648 + C47710 * C4006 + C47811 * C8129 +
              C141358 * C8685) *
                 C141320) *
                C47709) *
               C141487 -
           (((C49410 + C49411) * C141320 + (C48706 + C48707) * C275) * C47709 +
            ((C49412 + C49413) * C141320 + (C48710 + C48711) * C275) * C47708 +
            ((C47811 * C3084 + C141358 * C3362 + C47810 * C1006 +
              C47710 * C1419) *
                 C141320 +
             (C47811 * C2960 + C141358 * C3026 + C47810 * C823 +
              C47710 * C912) *
                 C275) *
                C47707) *
               C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C55590 * C108 + C55522 * C189 + C55591 * C823 + C55523 * C912 +
             C55592 * C2960 + C55524 * C3026 + C55593 * C6729 +
             C55525 * C6880) *
                C275 +
            (C55590 * C276 + C55522 * C635 + C55591 * C1006 + C55523 * C1419 +
             C55592 * C3084 + C55524 * C3362 + C55593 * C7002 +
             C55525 * C7655) *
                C141320) *
               C141216 * C1596 -
           ((C55593 * C10779 + C55525 * C11349 + C55592 * C8128 +
             C55524 * C8684 + C55591 * C3646 + C55523 * C4004 + C55590 * C1784 +
             C55522 * C2197) *
                C141320 +
            (C55593 * C10551 + C55525 * C10677 + C55592 * C7887 +
             C55524 * C8006 + C55591 * C3490 + C55523 * C3572 + C55590 * C1601 +
             C55522 * C1690) *
                C275) *
               C141216 * C141487) *
              C2374 +
          (((C55590 * C3490 + C55522 * C3572 + C55591 * C7887 + C55523 * C8006 +
             C55592 * C10551 + C55524 * C10677 + C55593 * C58454 +
             C55525 * C58542) *
                C275 +
            (C55590 * C3646 + C55522 * C4004 + C55591 * C8128 + C55523 * C8684 +
             C55592 * C10779 + C55524 * C11349 + C55593 * C58610 +
             C55525 * C58998) *
                C141320) *
               C141216 * C141487 -
           ((C55593 * C9940 + C55525 * C10368 + C55592 * C7002 +
             C55524 * C7655 + C55591 * C3084 + C55523 * C3362 + C55590 * C1006 +
             C55522 * C1419) *
                C141320 +
            (C55593 * C9768 + C55525 * C9862 + C55592 * C6729 + C55524 * C6880 +
             C55591 * C2960 + C55523 * C3026 + C55590 * C823 + C55522 * C912) *
                C275) *
               C141216 * C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eezz[86] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C713 * C108 + C721 + C721 + C141320 * C714) * C47710 +
             C7785 * C141358) *
                C47707 +
            (C48449 + C48450) * C47708 + C48455 * C47709) *
               C1596 -
           ((C50482 + C50483) * C47709 + (C50484 + C50485) * C47708 +
            (C11463 * C141358 +
             (C713 * C1601 + C2295 + C2295 + C141320 * C2283) * C47710) *
                C47707) *
               C141487) *
              C2374 +
          (((C11463 * C47710 + C11462 * C141358) * C47707 +
            (C8810 * C47710 + C8809 * C141358) * C47708 +
            (C24860 * C47710 +
             (C713 * C7888 + C8804 + C8804 + C141320 * C8795) * C141358) *
                C47709) *
               C141487 -
           ((C49512 + C49513) * C47709 + (C49514 + C49515) * C47708 +
            (C7786 * C141358 + C7785 * C47710) * C47707) *
               C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C141320 * C714) * C55522 +
            C7785 * C55523 + C7786 * C55524 + C10453 * C55525) *
               C141216 * C1596 -
           (C59072 * C55525 + C11462 * C55524 + C11463 * C55523 +
            (C713 * C1601 + C2295 + C2295 + C141320 * C2283) * C55522) *
               C141216 * C141487) *
              C2374 +
          ((C11463 * C55522 + C11462 * C55523 + C59072 * C55524 +
            (C713 * C58454 + C59069 + C59069 + C141320 * C59065) * C55525) *
               C141216 * C141487 -
           (C58388 * C55525 + C10453 * C55524 + C7786 * C55523 +
            C7785 * C55522) *
               C141216 * C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eexx[87] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C47712 * C108 + C47719 + C47719 + C47707 * C120 +
                       C47714 * C109 + C47720 + C47720 + C47708 * C121 +
                       C47716 * C110 + C47721 + C47721 + C47709 * C122) *
                          C141320 * C47710 +
                      (C48584 + C48585 + C48586) * C141320 * C141358) *
                         C4148 -
                     ((C52204 + C52205 + C52206) * C141320 * C141358 +
                      (C47716 * C1599 + C49617 + C49617 + C47709 * C1609 +
                       C47714 * C1600 + C49618 + C49618 + C47708 * C1610 +
                       C47712 * C1601 + C49619 + C49619 + C47707 * C1611) *
                          C141320 * C47710) *
                         C141487) *
                        C141277 * C2376 +
                    (((C47712 * C1600 + C49620 + C49620 + C47707 * C1610 +
                       C47714 * C1599 + C49621 + C49621 + C47708 * C1609 +
                       C47716 * C1598 + C49622 + C49622 + C47709 * C1608) *
                          C141320 * C47710 +
                      (C47712 * C3491 + C49623 + C49623 + C47707 * C3499 +
                       C47714 * C3492 + C49624 + C49624 + C47708 * C3500 +
                       C47716 * C3493 + C49625 + C49625 + C47709 * C3501) *
                          C141320 * C141358) *
                         C141487 -
                     ((C48589 + C48588 + C48587) * C141320 * C141358 +
                      (C47716 * C111 + C47728 + C47728 + C47709 * C123 +
                       C47714 * C110 + C47729 + C47729 + C47708 * C122 +
                       C47712 * C109 + C47730 + C47730 + C47707 * C121) *
                          C141320 * C47710) *
                         C4148) *
                        C141277 * C141483)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C55526 * C108 + C55529 + C55529 + C141216 * C120) *
                          C141320 * C55522 +
                      C56059 * C55523 + C56060 * C55524 + C56061 * C55525) *
                         C4148 -
                     (C58474 * C55525 + C58475 * C55524 + C58476 * C55523 +
                      (C55526 * C1601 + C56748 + C56748 + C141216 * C1611) *
                          C141320 * C55522) *
                         C141487) *
                        C141277 * C2376 +
                    (((C55526 * C1600 + C56749 + C56749 + C141216 * C1610) *
                          C141320 * C55522 +
                      (C55526 * C3491 + C56750 + C56750 + C141216 * C3499) *
                          C141320 * C55523 +
                      (C55526 * C7886 + C56751 + C56751 + C141216 * C7892) *
                          C141320 * C55524 +
                      (C55526 * C10552 + C56752 + C56752 + C141216 * C10556) *
                          C141320 * C55525) *
                         C141487 -
                     (C56064 * C55525 + C56063 * C55524 + C56062 * C55523 +
                      (C55526 * C109 + C55536 + C55536 + C141216 * C121) *
                          C141320 * C55522) *
                         C4148) *
                        C141277 * C141483)) /
                      (p * q * std::sqrt(p + q));
    d2eexy[87] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47810 * C108 + C47710 * C189 + C47811 * C823 + C141358 * C912) *
                C47713 +
            (C47810 * C114 + C47710 * C195 + C47811 * C828 + C141358 * C917) *
                C47707 +
            (C47837 + C47838) * C47715 + (C47839 + C47840) * C47708 +
            C47849 * C47717 + C47850 * C47709) *
               C141320 * C4148 -
           ((C49740 + C49741) * C47709 + (C49742 + C49743) * C47717 +
            (C49744 + C49745) * C47708 + (C49746 + C49747) * C47715 +
            (C47811 * C3494 + C141358 * C3576 + C47810 * C1606 +
             C47710 * C1695) *
                C47707 +
            (C47811 * C3490 + C141358 * C3572 + C47810 * C1601 +
             C47710 * C1690) *
                C47713) *
               C141320 * C141487) *
              C141277 * C2376 +
          (((C49747 + C49746) * C47713 + (C49745 + C49744) * C47707 +
            (C49743 + C49742) * C47715 + (C49741 + C49740) * C47708 +
            (C47810 * C1598 + C47710 * C1687 + C47811 * C3493 +
             C141358 * C3575) *
                C47717 +
            (C47810 * C1603 + C47710 * C1692 + C47811 * C3497 +
             C141358 * C3579) *
                C47709) *
               C141320 * C141487 -
           ((C47845 + C47846) * C47709 + (C47847 + C47848) * C47717 +
            (C47844 + C47843) * C47708 + (C47842 + C47841) * C47715 +
            (C47840 + C47839) * C47707 + (C47838 + C47837) * C47713) *
               C141320 * C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C55590 * C108 + C55522 * C189 + C55591 * C823 + C55523 * C912 +
             C55592 * C2960 + C55524 * C3026 + C55593 * C6729 +
             C55525 * C6880) *
                C55527 +
            (C55590 * C114 + C55522 * C195 + C55591 * C828 + C55523 * C917 +
             C55592 * C2964 + C55524 * C3030 + C55593 * C6732 +
             C55525 * C6883) *
                C141216) *
               C141320 * C4148 -
           ((C55593 * C10553 + C55525 * C10679 + C55592 * C7890 +
             C55524 * C8009 + C55591 * C3494 + C55523 * C3576 + C55590 * C1606 +
             C55522 * C1695) *
                C141216 +
            (C55593 * C10551 + C55525 * C10677 + C55592 * C7887 +
             C55524 * C8006 + C55591 * C3490 + C55523 * C3572 + C55590 * C1601 +
             C55522 * C1690) *
                C55527) *
               C141320 * C141487) *
              C141277 * C2376 +
          (((C55590 * C1600 + C55522 * C1689 + C55591 * C3491 + C55523 * C3573 +
             C55592 * C7886 + C55524 * C8005 + C55593 * C10552 +
             C55525 * C10678) *
                C55527 +
            (C55590 * C1605 + C55522 * C1694 + C55591 * C3495 + C55523 * C3577 +
             C55592 * C7889 + C55524 * C8008 + C55593 * C10554 +
             C55525 * C10680) *
                C141216) *
               C141320 * C141487 -
           ((C55593 * C6731 + C55525 * C6882 + C55592 * C2965 + C55524 * C3031 +
             C55591 * C827 + C55523 * C916 + C55590 * C115 + C55522 * C196) *
                C141216 +
            (C55593 * C6728 + C55525 * C6879 + C55592 * C2961 + C55524 * C3027 +
             C55591 * C822 + C55523 * C911 + C55590 * C109 + C55522 * C190) *
                C55527) *
               C141320 * C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eexz[87] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141320 * C276) * C47713 +
             (C275 * C114 + C141320 * C282) * C47707 + C305 * C47715 +
             C306 * C47708 + C307 * C47717 + C308 * C47709) *
                C47710 +
            (C48810 + C48811 + C48812 + C48813 + C48814 + C48815) * C141358) *
               C4148 -
           ((C52403 + C52404 + C52405 + C52406 + C52407 + C52408) * C141358 +
            (C1806 * C47709 + C1807 * C47717 + C1808 * C47708 + C1809 * C47715 +
             (C275 * C1606 + C141320 * C1789) * C47707 +
             (C275 * C1601 + C141320 * C1784) * C47713) *
                C47710) *
               C141487) *
              C141277 * C2376 +
          (((C1809 * C47713 + C1808 * C47707 + C1807 * C47715 + C1806 * C47708 +
             C1805 * C47717 + C1804 * C47709) *
                C47710 +
            (C8145 * C47713 + C8144 * C47707 + C24213 * C47715 +
             C24212 * C47708 + (C275 * C3493 + C141320 * C3649) * C47717 +
             (C275 * C3497 + C141320 * C3653) * C47709) *
                C141358) *
               C141487 -
           ((C48821 + C48820 + C48819 + C48818 + C48817 + C48816) * C141358 +
            (C310 * C47709 + C309 * C47717 + C308 * C47708 + C307 * C47715 +
             C306 * C47707 + C305 * C47713) *
                C47710) *
               C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141320 * C276) * C55527 +
             (C275 * C114 + C141320 * C282) * C141216) *
                C55522 +
            (C56197 + C56198) * C55523 + C58047 * C55524 + C58048 * C55525) *
               C4148 -
           ((C58623 + C58624) * C55525 + (C58617 + C58618) * C55524 +
            (C58619 + C58620) * C55523 +
            ((C275 * C1606 + C141320 * C1789) * C141216 +
             (C275 * C1601 + C141320 * C1784) * C55527) *
                C55522) *
               C141487) *
              C141277 * C2376 +
          (((C1809 * C55527 + C1808 * C141216) * C55522 +
            (C8145 * C55527 + C8144 * C141216) * C55523 +
            (C8143 * C55527 + C8142 * C141216) * C55524 +
            ((C275 * C10552 + C141320 * C10780) * C55527 +
             (C275 * C10554 + C141320 * C10782) * C141216) *
                C55525) *
               C141487 -
           ((C56208 + C56207) * C55525 + (C56206 + C56205) * C55524 +
            (C56204 + C56203) * C55523 +
            (C306 * C141216 + C305 * C55527) * C55522) *
               C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[87] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C47713 * C108 + C47707 * C114 + C47715 * C109 +
                       C47708 * C115 + C47717 * C110 + C47709 * C116) *
                          C47810 +
                      (C47713 * C189 + C47707 * C362 + C47715 * C190 +
                       C47708 * C363 + C47717 * C191 + C47709 * C364) *
                          C47710 +
                      (C48944 + C48945 + C48946) * C47811 +
                      (C48947 + C48948 + C48949) * C141358) *
                         C141320 * C4148 -
                     ((C52519 + C52520 + C52521) * C141358 +
                      (C52522 + C52523 + C52524) * C47811 +
                      (C47717 * C1688 + C47709 * C1876 + C47715 * C1689 +
                       C47708 * C1877 + C47713 * C1690 + C47707 * C1878) *
                          C47710 +
                      (C47717 * C1599 + C47709 * C1604 + C47715 * C1600 +
                       C47708 * C1605 + C47713 * C1601 + C47707 * C1606) *
                          C47810) *
                         C141320 * C141487) *
                        C141277 * C2376 +
                    (((C47713 * C1600 + C47707 * C1605 + C47715 * C1599 +
                       C47708 * C1604 + C47717 * C1598 + C47709 * C1603) *
                          C47810 +
                      (C47713 * C1689 + C47707 * C1877 + C47715 * C1688 +
                       C47708 * C1876 + C47717 * C1687 + C47709 * C1875) *
                          C47710 +
                      (C47713 * C3491 + C47707 * C3495 + C47715 * C3492 +
                       C47708 * C3496 + C47717 * C3493 + C47709 * C3497) *
                          C47811 +
                      (C47713 * C3573 + C47707 * C3721 + C47715 * C3574 +
                       C47708 * C3722 + C47717 * C3575 + C47709 * C3723) *
                          C141358) *
                         C141320 * C141487 -
                     ((C48955 + C48954 + C48953) * C141358 +
                      (C48952 + C48951 + C48950) * C47811 +
                      (C47717 * C192 + C47709 * C365 + C47715 * C191 +
                       C47708 * C364 + C47713 * C190 + C47707 * C363) *
                          C47710 +
                      (C47717 * C111 + C47709 * C117 + C47715 * C110 +
                       C47708 * C116 + C47713 * C109 + C47707 * C115) *
                          C47810) *
                         C141320 * C4148) *
                        C141277 * C141483)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C55527 * C108 + C141216 * C114) * C55590 +
                      (C55527 * C189 + C141216 * C362) * C55522 +
                      C56299 * C55591 + C56300 * C55523 + C56301 * C55592 +
                      C56302 * C55524 + C56303 * C55593 + C56304 * C55525) *
                         C141320 * C4148 -
                     (C58704 * C55525 + C58705 * C55593 + C58706 * C55524 +
                      C58707 * C55592 + C58708 * C55523 + C58709 * C55591 +
                      (C55527 * C1690 + C141216 * C1878) * C55522 +
                      (C55527 * C1601 + C141216 * C1606) * C55590) *
                         C141320 * C141487) *
                        C141277 * C2376 +
                    (((C55527 * C1600 + C141216 * C1605) * C55590 +
                      (C55527 * C1689 + C141216 * C1877) * C55522 +
                      (C55527 * C3491 + C141216 * C3495) * C55591 +
                      (C55527 * C3573 + C141216 * C3721) * C55523 +
                      (C55527 * C7886 + C141216 * C7889) * C55592 +
                      (C55527 * C8005 + C141216 * C8243) * C55524 +
                      (C55527 * C10552 + C141216 * C10554) * C55593 +
                      (C55527 * C10678 + C141216 * C10902) * C55525) *
                         C141320 * C141487 -
                     (C56310 * C55525 + C56309 * C55593 + C56308 * C55524 +
                      C56307 * C55592 + C56306 * C55523 + C56305 * C55591 +
                      (C55527 * C190 + C141216 * C363) * C55522 +
                      (C55527 * C109 + C141216 * C115) * C55590) *
                         C141320 * C4148) *
                        C141277 * C141483)) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[87] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48072 * C108 + C48075 + C48075 + C47710 * C419 + C48073 * C823 +
             C48076 + C48076 + C141358 * C1171) *
                C47707 +
            (C48109 + C48110) * C47708 + C48115 * C47709) *
               C141320 * C4148 -
           ((C50066 + C50067) * C47709 + (C50068 + C50069) * C47708 +
            (C48073 * C3490 + C50054 + C50054 + C141358 * C3790 +
             C48072 * C1601 + C50055 + C50055 + C47710 * C1949) *
                C47707) *
               C141320 * C141487) *
              C141277 * C2376 +
          (((C50069 + C50068) * C47707 + (C50067 + C50066) * C47708 +
            (C48072 * C1598 + C50056 + C50056 + C47710 * C1946 +
             C48073 * C3493 + C50057 + C50057 + C141358 * C3793) *
                C47709) *
               C141320 * C141487 -
           ((C48113 + C48114) * C47709 + (C48112 + C48111) * C47708 +
            (C48110 + C48109) * C47707) *
               C141320 * C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C55744 * C108 + C55749 + C55749 + C55522 * C419 + C55745 * C823 +
            C55750 + C55750 + C55523 * C1171 + C55746 * C2960 + C55751 +
            C55751 + C55524 * C3196 + C55747 * C6729 + C55752 + C55752 +
            C55525 * C7289) *
               C141216 * C141320 * C4148 -
           (C55747 * C10551 + C57017 + C57017 + C55525 * C11025 +
            C55746 * C7887 + C57018 + C57018 + C55524 * C8345 + C55745 * C3490 +
            C57019 + C57019 + C55523 * C3790 + C55744 * C1601 + C57020 +
            C57020 + C55522 * C1949) *
               C141216 * C141320 * C141487) *
              C141277 * C2376 +
          ((C55744 * C1600 + C57021 + C57021 + C55522 * C1948 + C55745 * C3491 +
            C57022 + C57022 + C55523 * C3791 + C55746 * C7886 + C57023 +
            C57023 + C55524 * C8344 + C55747 * C10552 + C57024 + C57024 +
            C55525 * C11026) *
               C141216 * C141320 * C141487 -
           (C55747 * C6728 + C55753 + C55753 + C55525 * C7288 + C55746 * C2961 +
            C55754 + C55754 + C55524 * C3197 + C55745 * C822 + C55755 + C55755 +
            C55523 * C1170 + C55744 * C109 + C55756 + C55756 + C55522 * C420) *
               C141216 * C141320 * C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[87] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141320 * C276) * C47810 +
             (C275 * C189 + C141320 * C501) * C47710 + C7032 * C47811 +
             C7428 * C141358) *
                C47707 +
            (C48190 + C48191 + C48192 + C48193) * C47708 + C48204 * C47709) *
               C4148 -
           ((C50168 + C50169 + C50170 + C50171) * C47709 +
            (C50172 + C50173 + C50174 + C50175) * C47708 +
            (C11139 * C141358 + C10799 * C47811 +
             (C275 * C1690 + C141320 * C2040) * C47710 +
             (C275 * C1601 + C141320 * C1784) * C47810) *
                C47707) *
               C141487) *
              C141277 * C2376 +
          (((C50175 + C50174 + C50173 + C50172) * C47707 +
            (C50171 + C50170 + C50169 + C50168) * C47708 +
            (C1805 * C47810 + C2052 * C47710 +
             (C275 * C3493 + C141320 * C3649) * C47811 +
             (C275 * C3575 + C141320 * C3867) * C141358) *
                C47709) *
               C141487 -
           ((C48198 + C48199 + C48200 + C48201) * C47709 +
            (C48197 + C48196 + C48195 + C48194) * C47708 +
            (C48193 + C48192 + C48191 + C48190) * C47707) *
               C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141320 * C276) * C55590 +
            (C275 * C189 + C141320 * C501) * C55522 + C7032 * C55591 +
            C7428 * C55523 + C7034 * C55592 + C7429 * C55524 + C9954 * C55593 +
            C10208 * C55525) *
               C141216 * C4148 -
           (C58850 * C55525 + C58622 * C55593 + C11138 * C55524 +
            C10797 * C55592 + C11139 * C55523 + C10799 * C55591 +
            (C275 * C1690 + C141320 * C2040) * C55522 +
            (C275 * C1601 + C141320 * C1784) * C55590) *
               C141216 * C141487) *
              C141277 * C2376 +
          ((C1809 * C55590 + C2054 * C55522 + C8145 * C55591 + C8482 * C55523 +
            C8143 * C55592 + C8481 * C55524 +
            (C275 * C10552 + C141320 * C10780) * C55593 +
            (C275 * C10678 + C141320 * C11132) * C55525) *
               C141216 * C141487 -
           (C7430 * C55525 + C7037 * C55593 + C6371 * C55524 + C6086 * C55592 +
            C1276 * C55523 + C1031 * C55591 + C520 * C55522 + C305 * C55590) *
               C141216 * C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eezx[87] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47713 * C108 + C47707 * C114 + C47715 * C109 + C47708 * C115 +
              C47717 * C110 + C47709 * C116) *
                 C275 +
             (C47713 * C276 + C47707 * C579 + C47715 * C277 + C47708 * C580 +
              C47717 * C278 + C47709 * C581) *
                 C141320) *
                C47710 +
            ((C48944 + C48945 + C48946) * C275 +
             (C49298 + C49299 + C49300) * C141320) *
                C141358) *
               C4148 -
           (((C52831 + C52832 + C52833) * C141320 +
             (C52522 + C52523 + C52524) * C275) *
                C141358 +
            ((C47717 * C1782 + C47709 * C2124 + C47715 * C1783 +
              C47708 * C2125 + C47713 * C1784 + C47707 * C2126) *
                 C141320 +
             (C47717 * C1599 + C47709 * C1604 + C47715 * C1600 +
              C47708 * C1605 + C47713 * C1601 + C47707 * C1606) *
                 C275) *
                C47710) *
               C141487) *
              C141277 * C2376 +
          ((((C47713 * C1600 + C47707 * C1605 + C47715 * C1599 +
              C47708 * C1604 + C47717 * C1598 + C47709 * C1603) *
                 C275 +
             (C47713 * C1783 + C47707 * C2125 + C47715 * C1782 +
              C47708 * C2124 + C47717 * C1781 + C47709 * C2123) *
                 C141320) *
                C47710 +
            ((C47713 * C3491 + C47707 * C3495 + C47715 * C3492 +
              C47708 * C3496 + C47717 * C3493 + C47709 * C3497) *
                 C275 +
             (C47713 * C3647 + C47707 * C3935 + C47715 * C3648 +
              C47708 * C3936 + C47717 * C3649 + C47709 * C3937) *
                 C141320) *
                C141358) *
               C141487 -
           (((C49303 + C49302 + C49301) * C141320 +
             (C48952 + C48951 + C48950) * C275) *
                C141358 +
            ((C47717 * C279 + C47709 * C582 + C47715 * C278 + C47708 * C581 +
              C47713 * C277 + C47707 * C580) *
                 C141320 +
             (C47717 * C111 + C47709 * C117 + C47715 * C110 + C47708 * C116 +
              C47713 * C109 + C47707 * C115) *
                 C275) *
                C47710) *
               C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C55527 * C108 + C141216 * C114) * C275 +
             (C55527 * C276 + C141216 * C579) * C141320) *
                C55522 +
            (C56517 + C56541) * C55523 + C58274 * C55524 + C58275 * C55525) *
               C4148 -
           ((C58930 + C58920) * C55525 + (C58931 + C58923) * C55524 +
            (C58932 + C58926) * C55523 +
            ((C55527 * C1784 + C141216 * C2126) * C141320 +
             (C55527 * C1601 + C141216 * C1606) * C275) *
                C55522) *
               C141487) *
              C141277 * C2376 +
          ((((C55527 * C1600 + C141216 * C1605) * C275 +
             (C55527 * C1783 + C141216 * C2125) * C141320) *
                C55522 +
            ((C55527 * C3491 + C141216 * C3495) * C275 +
             (C55527 * C3647 + C141216 * C3935) * C141320) *
                C55523 +
            ((C55527 * C7886 + C141216 * C7889) * C275 +
             (C55527 * C8127 + C141216 * C8582) * C141320) *
                C55524 +
            ((C55527 * C10552 + C141216 * C10554) * C275 +
             (C55527 * C10780 + C141216 * C11238) * C141320) *
                C55525) *
               C141487 -
           ((C56546 + C56532) * C55525 + (C56545 + C56529) * C55524 +
            (C56544 + C56526) * C55523 +
            ((C55527 * C277 + C141216 * C580) * C141320 +
             (C55527 * C109 + C141216 * C115) * C275) *
                C55522) *
               C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eezy[87] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47810 * C108 + C47710 * C189 + C47811 * C823 + C141358 * C912) *
                 C275 +
             (C47810 * C276 + C47710 * C635 + C47811 * C1006 +
              C141358 * C1419) *
                 C141320) *
                C47707 +
            ((C47837 + C47838) * C275 + (C48366 + C48367) * C141320) * C47708 +
            C48374 * C47709) *
               C4148 -
           (((C50380 + C50381) * C141320 + (C49742 + C49743) * C275) * C47709 +
            ((C50382 + C50383) * C141320 + (C49746 + C49747) * C275) * C47708 +
            ((C47811 * C3646 + C141358 * C4004 + C47810 * C1784 +
              C47710 * C2197) *
                 C141320 +
             (C47811 * C3490 + C141358 * C3572 + C47810 * C1601 +
              C47710 * C1690) *
                 C275) *
                C47707) *
               C141487) *
              C141277 * C2376 +
          ((((C49747 + C49746) * C275 + (C50383 + C50382) * C141320) * C47707 +
            ((C49743 + C49742) * C275 + (C50381 + C50380) * C141320) * C47708 +
            ((C47810 * C1598 + C47710 * C1687 + C47811 * C3493 +
              C141358 * C3575) *
                 C275 +
             (C47810 * C1781 + C47710 * C2194 + C47811 * C3649 +
              C141358 * C4007) *
                 C141320) *
                C47709) *
               C141487 -
           (((C48370 + C48371) * C141320 + (C47847 + C47848) * C275) * C47709 +
            ((C48369 + C48368) * C141320 + (C47842 + C47841) * C275) * C47708 +
            ((C48367 + C48366) * C141320 + (C47838 + C47837) * C275) * C47707) *
               C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C55590 * C108 + C55522 * C189 + C55591 * C823 + C55523 * C912 +
             C55592 * C2960 + C55524 * C3026 + C55593 * C6729 +
             C55525 * C6880) *
                C275 +
            (C55590 * C276 + C55522 * C635 + C55591 * C1006 + C55523 * C1419 +
             C55592 * C3084 + C55524 * C3362 + C55593 * C7002 +
             C55525 * C7655) *
                C141320) *
               C141216 * C4148 -
           ((C55593 * C10779 + C55525 * C11349 + C55592 * C8128 +
             C55524 * C8684 + C55591 * C3646 + C55523 * C4004 + C55590 * C1784 +
             C55522 * C2197) *
                C141320 +
            (C55593 * C10551 + C55525 * C10677 + C55592 * C7887 +
             C55524 * C8006 + C55591 * C3490 + C55523 * C3572 + C55590 * C1601 +
             C55522 * C1690) *
                C275) *
               C141216 * C141487) *
              C141277 * C2376 +
          (((C55590 * C1600 + C55522 * C1689 + C55591 * C3491 + C55523 * C3573 +
             C55592 * C7886 + C55524 * C8005 + C55593 * C10552 +
             C55525 * C10678) *
                C275 +
            (C55590 * C1783 + C55522 * C2196 + C55591 * C3647 + C55523 * C4005 +
             C55592 * C8127 + C55524 * C8683 + C55593 * C10780 +
             C55525 * C11350) *
                C141320) *
               C141216 * C141487 -
           ((C55593 * C7001 + C55525 * C7654 + C55592 * C3085 + C55524 * C3363 +
             C55591 * C1005 + C55523 * C1418 + C55590 * C277 + C55522 * C636) *
                C141320 +
            (C55593 * C6728 + C55525 * C6879 + C55592 * C2961 + C55524 * C3027 +
             C55591 * C822 + C55523 * C911 + C55590 * C109 + C55522 * C190) *
                C275) *
               C141216 * C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eezz[87] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C713 * C108 + C721 + C721 + C141320 * C714) * C47710 +
             C7785 * C141358) *
                C47707 +
            (C48449 + C48450) * C47708 + C48455 * C47709) *
               C4148 -
           ((C50482 + C50483) * C47709 + (C50484 + C50485) * C47708 +
            (C11463 * C141358 +
             (C713 * C1601 + C2295 + C2295 + C141320 * C2283) * C47710) *
                C47707) *
               C141487) *
              C141277 * C2376 +
          (((C50485 + C50484) * C47707 + (C50483 + C50482) * C47708 +
            (C2303 * C47710 +
             (C713 * C3493 + C4082 + C4082 + C141320 * C4077) * C141358) *
                C47709) *
               C141487 -
           ((C48453 + C48454) * C47709 + (C48452 + C48451) * C47708 +
            (C48450 + C48449) * C47707) *
               C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C141320 * C714) * C55522 +
            C7785 * C55523 + C7786 * C55524 + C10453 * C55525) *
               C141216 * C4148 -
           (C59072 * C55525 + C11462 * C55524 + C11463 * C55523 +
            (C713 * C1601 + C2295 + C2295 + C141320 * C2283) * C55522) *
               C141216 * C141487) *
              C141277 * C2376 +
          ((C2305 * C55522 + C8810 * C55523 + C8809 * C55524 +
            (C713 * C10552 + C11457 + C11457 + C141320 * C11450) * C55525) *
               C141216 * C141487 -
           (C7787 * C55525 + C6627 * C55524 + C1527 * C55523 + C743 * C55522) *
               C141216 * C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eexx[88] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C47712 * C108 + C47719 + C47719 + C47707 * C120 +
                       C47714 * C109 + C47720 + C47720 + C47708 * C121 +
                       C47716 * C110 + C47721 + C47721 + C47709 * C122) *
                          C141320 * C47710 +
                      (C48584 + C48585 + C48586) * C141320 * C141358) *
                         C4148 -
                     ((C52204 + C52205 + C52206) * C141320 * C141358 +
                      (C47716 * C1599 + C49617 + C49617 + C47709 * C1609 +
                       C47714 * C1600 + C49618 + C49618 + C47708 * C1610 +
                       C47712 * C1601 + C49619 + C49619 + C47707 * C1611) *
                          C141320 * C47710) *
                         C141487) *
                        C816 +
                    (((C52206 + C52205 + C52204) * C141320 * C47710 +
                      (C47712 * C7887 + C52195 + C52195 + C47707 * C7893 +
                       C47714 * C7886 + C52196 + C52196 + C47708 * C7892 +
                       C47716 * C7888 + C52197 + C52197 + C47709 * C7894) *
                          C141320 * C141358) *
                         C141487 -
                     ((C51457 + C51458 + C51459) * C141320 * C141358 +
                      (C48586 + C48585 + C48584) * C141320 * C47710) *
                         C4148) *
                        C141485) *
                   C141243) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C55526 * C108 + C55529 + C55529 + C141216 * C120) *
                          C141320 * C55522 +
                      C56059 * C55523 + C56060 * C55524 + C56061 * C55525) *
                         C4148 -
                     (C58474 * C55525 + C58475 * C55524 + C58476 * C55523 +
                      (C55526 * C1601 + C56748 + C56748 + C141216 * C1611) *
                          C141320 * C55522) *
                         C141487) *
                        C816 +
                    ((C58476 * C55522 + C58475 * C55523 + C58474 * C55524 +
                      (C55526 * C58454 + C58464 + C58464 + C141216 * C58456) *
                          C141320 * C55525) *
                         C141487 -
                     (C57942 * C55525 + C56061 * C55524 + C56060 * C55523 +
                      C56059 * C55522) *
                         C4148) *
                        C141485) *
                   C141243) /
                      (p * q * std::sqrt(p + q));
    d2eexy[88] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47810 * C108 + C47710 * C189 + C47811 * C823 + C141358 * C912) *
                C47713 +
            (C47810 * C114 + C47710 * C195 + C47811 * C828 + C141358 * C917) *
                C47707 +
            (C47837 + C47838) * C47715 + (C47839 + C47840) * C47708 +
            C47849 * C47717 + C47850 * C47709) *
               C141320 * C4148 -
           ((C49740 + C49741) * C47709 + (C49742 + C49743) * C47717 +
            (C49744 + C49745) * C47708 + (C49746 + C49747) * C47715 +
            (C47811 * C3494 + C141358 * C3576 + C47810 * C1606 +
             C47710 * C1695) *
                C47707 +
            (C47811 * C3490 + C141358 * C3572 + C47810 * C1601 +
             C47710 * C1690) *
                C47713) *
               C141320 * C141487) *
              C816 +
          (((C47810 * C3490 + C47710 * C3572 + C47811 * C7887 +
             C141358 * C8006) *
                C47713 +
            (C47810 * C3494 + C47710 * C3576 + C47811 * C7890 +
             C141358 * C8009) *
                C47707 +
            (C47810 * C3491 + C47710 * C3573 + C47811 * C7886 +
             C141358 * C8005) *
                C47715 +
            (C47810 * C3495 + C47710 * C3577 + C47811 * C7889 +
             C141358 * C8008) *
                C47708 +
            (C47810 * C3492 + C47710 * C3574 + C47811 * C7888 +
             C141358 * C8007) *
                C47717 +
            (C47810 * C3496 + C47710 * C3578 + C47811 * C7891 +
             C141358 * C8010) *
                C47709) *
               C141320 * C141487 -
           ((C48704 + C48705) * C47709 + (C48706 + C48707) * C47717 +
            (C48708 + C48709) * C47708 + (C48710 + C48711) * C47715 +
            (C47811 * C2964 + C141358 * C3030 + C47810 * C828 + C47710 * C917) *
                C47707 +
            (C47811 * C2960 + C141358 * C3026 + C47810 * C823 + C47710 * C912) *
                C47713) *
               C141320 * C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C55590 * C108 + C55522 * C189 + C55591 * C823 + C55523 * C912 +
             C55592 * C2960 + C55524 * C3026 + C55593 * C6729 +
             C55525 * C6880) *
                C55527 +
            (C55590 * C114 + C55522 * C195 + C55591 * C828 + C55523 * C917 +
             C55592 * C2964 + C55524 * C3030 + C55593 * C6732 +
             C55525 * C6883) *
                C141216) *
               C141320 * C4148 -
           ((C55593 * C10553 + C55525 * C10679 + C55592 * C7890 +
             C55524 * C8009 + C55591 * C3494 + C55523 * C3576 + C55590 * C1606 +
             C55522 * C1695) *
                C141216 +
            (C55593 * C10551 + C55525 * C10677 + C55592 * C7887 +
             C55524 * C8006 + C55591 * C3490 + C55523 * C3572 + C55590 * C1601 +
             C55522 * C1690) *
                C55527) *
               C141320 * C141487) *
              C816 +
          (((C55590 * C3490 + C55522 * C3572 + C55591 * C7887 + C55523 * C8006 +
             C55592 * C10551 + C55524 * C10677 + C55593 * C58454 +
             C55525 * C58542) *
                C55527 +
            (C55590 * C3494 + C55522 * C3576 + C55591 * C7890 + C55523 * C8009 +
             C55592 * C10553 + C55524 * C10679 + C55593 * C58455 +
             C55525 * C58543) *
                C141216) *
               C141320 * C141487 -
           ((C55593 * C9770 + C55525 * C9864 + C55592 * C6732 + C55524 * C6883 +
             C55591 * C2964 + C55523 * C3030 + C55590 * C828 + C55522 * C917) *
                C141216 +
            (C55593 * C9768 + C55525 * C9862 + C55592 * C6729 + C55524 * C6880 +
             C55591 * C2960 + C55523 * C3026 + C55590 * C823 + C55522 * C912) *
                C55527) *
               C141320 * C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eexz[88] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141320 * C276) * C47713 +
             (C275 * C114 + C141320 * C282) * C47707 + C305 * C47715 +
             C306 * C47708 + C307 * C47717 + C308 * C47709) *
                C47710 +
            (C48810 + C48811 + C48812 + C48813 + C48814 + C48815) * C141358) *
               C4148 -
           ((C52403 + C52404 + C52405 + C52406 + C52407 + C52408) * C141358 +
            (C1806 * C47709 + C1807 * C47717 + C1808 * C47708 + C1809 * C47715 +
             (C275 * C1606 + C141320 * C1789) * C47707 +
             (C275 * C1601 + C141320 * C1784) * C47713) *
                C47710) *
               C141487) *
              C816 +
          (((C52408 + C52407 + C52406 + C52405 + C52404 + C52403) * C47710 +
            (C10797 * C47713 + C10796 * C47707 + C8143 * C47715 +
             C8142 * C47708 + (C275 * C7888 + C141320 * C8129) * C47717 +
             (C275 * C7891 + C141320 * C8132) * C47709) *
                C141358) *
               C141487 -
           ((C51608 + C51609 + C51610 + C51611 + C51612 + C51613) * C141358 +
            (C48815 + C48814 + C48813 + C48812 + C48811 + C48810) * C47710) *
               C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141320 * C276) * C55527 +
             (C275 * C114 + C141320 * C282) * C141216) *
                C55522 +
            (C56197 + C56198) * C55523 + C58047 * C55524 + C58048 * C55525) *
               C4148 -
           ((C58623 + C58624) * C55525 + (C58617 + C58618) * C55524 +
            (C58619 + C58620) * C55523 +
            ((C275 * C1606 + C141320 * C1789) * C141216 +
             (C275 * C1601 + C141320 * C1784) * C55527) *
                C55522) *
               C141487) *
              C816 +
          (((C58620 + C58619) * C55522 + (C58618 + C58617) * C55523 +
            (C58624 + C58623) * C55524 +
            ((C275 * C58454 + C141320 * C58610) * C55527 +
             (C275 * C58455 + C141320 * C58611) * C141216) *
                C55525) *
               C141487 -
           ((C58055 + C58056) * C55525 + (C56202 + C56201) * C55524 +
            (C56200 + C56199) * C55523 + (C56198 + C56197) * C55522) *
               C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eeyx[88] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C47713 * C108 + C47707 * C114 + C47715 * C109 +
                       C47708 * C115 + C47717 * C110 + C47709 * C116) *
                          C47810 +
                      (C47713 * C189 + C47707 * C362 + C47715 * C190 +
                       C47708 * C363 + C47717 * C191 + C47709 * C364) *
                          C47710 +
                      (C48944 + C48945 + C48946) * C47811 +
                      (C48947 + C48948 + C48949) * C141358) *
                         C141320 * C4148 -
                     ((C52519 + C52520 + C52521) * C141358 +
                      (C52522 + C52523 + C52524) * C47811 +
                      (C47717 * C1688 + C47709 * C1876 + C47715 * C1689 +
                       C47708 * C1877 + C47713 * C1690 + C47707 * C1878) *
                          C47710 +
                      (C47717 * C1599 + C47709 * C1604 + C47715 * C1600 +
                       C47708 * C1605 + C47713 * C1601 + C47707 * C1606) *
                          C47810) *
                         C141320 * C141487) *
                        C816 +
                    (((C52524 + C52523 + C52522) * C47810 +
                      (C52521 + C52520 + C52519) * C47710 +
                      (C47713 * C7887 + C47707 * C7890 + C47715 * C7886 +
                       C47708 * C7889 + C47717 * C7888 + C47709 * C7891) *
                          C47811 +
                      (C47713 * C8006 + C47707 * C8244 + C47715 * C8005 +
                       C47708 * C8243 + C47717 * C8007 + C47709 * C8245) *
                          C141358) *
                         C141320 * C141487 -
                     ((C51700 + C51701 + C51702) * C141358 +
                      (C51703 + C51704 + C51705) * C47811 +
                      (C48949 + C48948 + C48947) * C47710 +
                      (C48946 + C48945 + C48944) * C47810) *
                         C141320 * C4148) *
                        C141485) *
                   C141243) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C55527 * C108 + C141216 * C114) * C55590 +
                      (C55527 * C189 + C141216 * C362) * C55522 +
                      C56299 * C55591 + C56300 * C55523 + C56301 * C55592 +
                      C56302 * C55524 + C56303 * C55593 + C56304 * C55525) *
                         C141320 * C4148 -
                     (C58704 * C55525 + C58705 * C55593 + C58706 * C55524 +
                      C58707 * C55592 + C58708 * C55523 + C58709 * C55591 +
                      (C55527 * C1690 + C141216 * C1878) * C55522 +
                      (C55527 * C1601 + C141216 * C1606) * C55590) *
                         C141320 * C141487) *
                        C816 +
                    ((C58709 * C55590 + C58708 * C55522 + C58707 * C55591 +
                      C58706 * C55523 + C58705 * C55592 + C58704 * C55524 +
                      (C55527 * C58454 + C141216 * C58455) * C55593 +
                      (C55527 * C58542 + C141216 * C58690) * C55525) *
                         C141320 * C141487 -
                     (C58112 * C55525 + C58113 * C55593 + C56304 * C55524 +
                      C56303 * C55592 + C56302 * C55523 + C56301 * C55591 +
                      C56300 * C55522 + C56299 * C55590) *
                         C141320 * C4148) *
                        C141485) *
                   C141243) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[88] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C48072 * C108 + C48075 + C48075 + C47710 * C419 +
                       C48073 * C823 + C48076 + C48076 + C141358 * C1171) *
                          C47707 +
                      (C48109 + C48110) * C47708 + C48115 * C47709) *
                         C141320 * C4148 -
                     ((C50066 + C50067) * C47709 + (C50068 + C50069) * C47708 +
                      (C48073 * C3490 + C50054 + C50054 + C141358 * C3790 +
                       C48072 * C1601 + C50055 + C50055 + C47710 * C1949) *
                          C47707) *
                         C141320 * C141487) *
                        C816 +
                    (((C48072 * C3490 + C52623 + C52623 + C47710 * C3790 +
                       C48073 * C7887 + C52624 + C52624 + C141358 * C8345) *
                          C47707 +
                      (C48072 * C3491 + C52625 + C52625 + C47710 * C3791 +
                       C48073 * C7886 + C52626 + C52626 + C141358 * C8344) *
                          C47708 +
                      (C48072 * C3492 + C52627 + C52627 + C47710 * C3792 +
                       C48073 * C7888 + C52628 + C52628 + C141358 * C8346) *
                          C47709) *
                         C141320 * C141487 -
                     ((C49078 + C49079) * C47709 + (C49080 + C49081) * C47708 +
                      (C48073 * C2960 + C49066 + C49066 + C141358 * C3196 +
                       C48072 * C823 + C49067 + C49067 + C47710 * C1171) *
                          C47707) *
                         C141320 * C4148) *
                        C141485) *
                   C141243) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C55744 * C108 + C55749 + C55749 + C55522 * C419 +
                      C55745 * C823 + C55750 + C55750 + C55523 * C1171 +
                      C55746 * C2960 + C55751 + C55751 + C55524 * C3196 +
                      C55747 * C6729 + C55752 + C55752 + C55525 * C7289) *
                         C141216 * C141320 * C4148 -
                     (C55747 * C10551 + C57017 + C57017 + C55525 * C11025 +
                      C55746 * C7887 + C57018 + C57018 + C55524 * C8345 +
                      C55745 * C3490 + C57019 + C57019 + C55523 * C3790 +
                      C55744 * C1601 + C57020 + C57020 + C55522 * C1949) *
                         C141216 * C141320 * C141487) *
                        C816 +
                    ((C55744 * C3490 + C58777 + C58777 + C55522 * C3790 +
                      C55745 * C7887 + C58778 + C58778 + C55523 * C8345 +
                      C55746 * C10551 + C58779 + C58779 + C55524 * C11025 +
                      C55747 * C58454 + C58780 + C58780 + C55525 * C58775) *
                         C141216 * C141320 * C141487 -
                     (C55747 * C9768 + C56377 + C56377 + C55525 * C10121 +
                      C55746 * C6729 + C56378 + C56378 + C55524 * C7289 +
                      C55745 * C2960 + C56379 + C56379 + C55523 * C3196 +
                      C55744 * C823 + C56380 + C56380 + C55522 * C1171) *
                         C141216 * C141320 * C4148) *
                        C141485) *
                   C141243) /
                      (p * q * std::sqrt(p + q));
    d2eeyz[88] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141320 * C276) * C47810 +
             (C275 * C189 + C141320 * C501) * C47710 + C7032 * C47811 +
             C7428 * C141358) *
                C47707 +
            (C48190 + C48191 + C48192 + C48193) * C47708 + C48204 * C47709) *
               C4148 -
           ((C50168 + C50169 + C50170 + C50171) * C47709 +
            (C50172 + C50173 + C50174 + C50175) * C47708 +
            (C11139 * C141358 + C10799 * C47811 +
             (C275 * C1690 + C141320 * C2040) * C47710 +
             (C275 * C1601 + C141320 * C1784) * C47810) *
                C47707) *
               C141487) *
              C816 +
          (((C10799 * C47810 + C11139 * C47710 + C10797 * C47811 +
             C11138 * C141358) *
                C47707 +
            (C8145 * C47810 + C8482 * C47710 + C8143 * C47811 +
             C8481 * C141358) *
                C47708 +
            (C24213 * C47810 + C24545 * C47710 +
             (C275 * C7888 + C141320 * C8129) * C47811 +
             (C275 * C8007 + C141320 * C8471) * C141358) *
                C47709) *
               C141487 -
           ((C49180 + C49181 + C49182 + C49183) * C47709 +
            (C49184 + C49185 + C49186 + C49187) * C47708 +
            (C7429 * C141358 + C7034 * C47811 + C7428 * C47710 +
             C7032 * C47810) *
                C47707) *
               C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141320 * C276) * C55590 +
            (C275 * C189 + C141320 * C501) * C55522 + C7032 * C55591 +
            C7428 * C55523 + C7034 * C55592 + C7429 * C55524 + C9954 * C55593 +
            C10208 * C55525) *
               C141216 * C4148 -
           (C58850 * C55525 + C58622 * C55593 + C11138 * C55524 +
            C10797 * C55592 + C11139 * C55523 + C10799 * C55591 +
            (C275 * C1690 + C141320 * C2040) * C55522 +
            (C275 * C1601 + C141320 * C1784) * C55590) *
               C141216 * C141487) *
              C816 +
          ((C10799 * C55590 + C11139 * C55522 + C10797 * C55591 +
            C11138 * C55523 + C58622 * C55592 + C58850 * C55524 +
            (C275 * C58454 + C141320 * C58610) * C55593 +
            (C275 * C58542 + C141320 * C58846) * C55525) *
               C141216 * C141487 -
           (C58222 * C55525 + C58054 * C55593 + C10208 * C55524 +
            C9954 * C55592 + C7429 * C55523 + C7034 * C55591 + C7428 * C55522 +
            C7032 * C55590) *
               C141216 * C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eezx[88] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47713 * C108 + C47707 * C114 + C47715 * C109 + C47708 * C115 +
              C47717 * C110 + C47709 * C116) *
                 C275 +
             (C47713 * C276 + C47707 * C579 + C47715 * C277 + C47708 * C580 +
              C47717 * C278 + C47709 * C581) *
                 C141320) *
                C47710 +
            ((C48944 + C48945 + C48946) * C275 +
             (C49298 + C49299 + C49300) * C141320) *
                C141358) *
               C4148 -
           (((C52831 + C52832 + C52833) * C141320 +
             (C52522 + C52523 + C52524) * C275) *
                C141358 +
            ((C47717 * C1782 + C47709 * C2124 + C47715 * C1783 +
              C47708 * C2125 + C47713 * C1784 + C47707 * C2126) *
                 C141320 +
             (C47717 * C1599 + C47709 * C1604 + C47715 * C1600 +
              C47708 * C1605 + C47713 * C1601 + C47707 * C1606) *
                 C275) *
                C47710) *
               C141487) *
              C816 +
          ((((C52524 + C52523 + C52522) * C275 +
             (C52833 + C52832 + C52831) * C141320) *
                C47710 +
            ((C47713 * C7887 + C47707 * C7890 + C47715 * C7886 +
              C47708 * C7889 + C47717 * C7888 + C47709 * C7891) *
                 C275 +
             (C47713 * C8128 + C47707 * C8583 + C47715 * C8127 +
              C47708 * C8582 + C47717 * C8129 + C47709 * C8584) *
                 C141320) *
                C141358) *
               C141487 -
           (((C51940 + C51941 + C51942) * C141320 +
             (C51703 + C51704 + C51705) * C275) *
                C141358 +
            ((C49300 + C49299 + C49298) * C141320 +
             (C48946 + C48945 + C48944) * C275) *
                C47710) *
               C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C55527 * C108 + C141216 * C114) * C275 +
             (C55527 * C276 + C141216 * C579) * C141320) *
                C55522 +
            (C56517 + C56541) * C55523 + C58274 * C55524 + C58275 * C55525) *
               C4148 -
           ((C58930 + C58920) * C55525 + (C58931 + C58923) * C55524 +
            (C58932 + C58926) * C55523 +
            ((C55527 * C1784 + C141216 * C2126) * C141320 +
             (C55527 * C1601 + C141216 * C1606) * C275) *
                C55522) *
               C141487) *
              C816 +
          (((C58926 + C58932) * C55522 + (C58923 + C58931) * C55523 +
            (C58920 + C58930) * C55524 +
            ((C55527 * C58454 + C141216 * C58455) * C275 +
             (C55527 * C58610 + C141216 * C58916) * C141320) *
                C55525) *
               C141487 -
           ((C58280 + C58278) * C55525 + (C56543 + C56523) * C55524 +
            (C56542 + C56520) * C55523 + (C56541 + C56517) * C55522) *
               C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eezy[88] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47810 * C108 + C47710 * C189 + C47811 * C823 + C141358 * C912) *
                 C275 +
             (C47810 * C276 + C47710 * C635 + C47811 * C1006 +
              C141358 * C1419) *
                 C141320) *
                C47707 +
            ((C47837 + C47838) * C275 + (C48366 + C48367) * C141320) * C47708 +
            C48374 * C47709) *
               C4148 -
           (((C50380 + C50381) * C141320 + (C49742 + C49743) * C275) * C47709 +
            ((C50382 + C50383) * C141320 + (C49746 + C49747) * C275) * C47708 +
            ((C47811 * C3646 + C141358 * C4004 + C47810 * C1784 +
              C47710 * C2197) *
                 C141320 +
             (C47811 * C3490 + C141358 * C3572 + C47810 * C1601 +
              C47710 * C1690) *
                 C275) *
                C47707) *
               C141487) *
              C816 +
          ((((C47810 * C3490 + C47710 * C3572 + C47811 * C7887 +
              C141358 * C8006) *
                 C275 +
             (C47810 * C3646 + C47710 * C4004 + C47811 * C8128 +
              C141358 * C8684) *
                 C141320) *
                C47707 +
            ((C47810 * C3491 + C47710 * C3573 + C47811 * C7886 +
              C141358 * C8005) *
                 C275 +
             (C47810 * C3647 + C47710 * C4005 + C47811 * C8127 +
              C141358 * C8683) *
                 C141320) *
                C47708 +
            ((C47810 * C3492 + C47710 * C3574 + C47811 * C7888 +
              C141358 * C8007) *
                 C275 +
             (C47810 * C3648 + C47710 * C4006 + C47811 * C8129 +
              C141358 * C8685) *
                 C141320) *
                C47709) *
               C141487 -
           (((C49410 + C49411) * C141320 + (C48706 + C48707) * C275) * C47709 +
            ((C49412 + C49413) * C141320 + (C48710 + C48711) * C275) * C47708 +
            ((C47811 * C3084 + C141358 * C3362 + C47810 * C1006 +
              C47710 * C1419) *
                 C141320 +
             (C47811 * C2960 + C141358 * C3026 + C47810 * C823 +
              C47710 * C912) *
                 C275) *
                C47707) *
               C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C55590 * C108 + C55522 * C189 + C55591 * C823 + C55523 * C912 +
             C55592 * C2960 + C55524 * C3026 + C55593 * C6729 +
             C55525 * C6880) *
                C275 +
            (C55590 * C276 + C55522 * C635 + C55591 * C1006 + C55523 * C1419 +
             C55592 * C3084 + C55524 * C3362 + C55593 * C7002 +
             C55525 * C7655) *
                C141320) *
               C141216 * C4148 -
           ((C55593 * C10779 + C55525 * C11349 + C55592 * C8128 +
             C55524 * C8684 + C55591 * C3646 + C55523 * C4004 + C55590 * C1784 +
             C55522 * C2197) *
                C141320 +
            (C55593 * C10551 + C55525 * C10677 + C55592 * C7887 +
             C55524 * C8006 + C55591 * C3490 + C55523 * C3572 + C55590 * C1601 +
             C55522 * C1690) *
                C275) *
               C141216 * C141487) *
              C816 +
          (((C55590 * C3490 + C55522 * C3572 + C55591 * C7887 + C55523 * C8006 +
             C55592 * C10551 + C55524 * C10677 + C55593 * C58454 +
             C55525 * C58542) *
                C275 +
            (C55590 * C3646 + C55522 * C4004 + C55591 * C8128 + C55523 * C8684 +
             C55592 * C10779 + C55524 * C11349 + C55593 * C58610 +
             C55525 * C58998) *
                C141320) *
               C141216 * C141487 -
           ((C55593 * C9940 + C55525 * C10368 + C55592 * C7002 +
             C55524 * C7655 + C55591 * C3084 + C55523 * C3362 + C55590 * C1006 +
             C55522 * C1419) *
                C141320 +
            (C55593 * C9768 + C55525 * C9862 + C55592 * C6729 + C55524 * C6880 +
             C55591 * C2960 + C55523 * C3026 + C55590 * C823 + C55522 * C912) *
                C275) *
               C141216 * C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eezz[88] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C713 * C108 + C721 + C721 + C141320 * C714) * C47710 +
             C7785 * C141358) *
                C47707 +
            (C48449 + C48450) * C47708 + C48455 * C47709) *
               C4148 -
           ((C50482 + C50483) * C47709 + (C50484 + C50485) * C47708 +
            (C11463 * C141358 +
             (C713 * C1601 + C2295 + C2295 + C141320 * C2283) * C47710) *
                C47707) *
               C141487) *
              C816 +
          (((C11463 * C47710 + C11462 * C141358) * C47707 +
            (C8810 * C47710 + C8809 * C141358) * C47708 +
            (C24860 * C47710 +
             (C713 * C7888 + C8804 + C8804 + C141320 * C8795) * C141358) *
                C47709) *
               C141487 -
           ((C49512 + C49513) * C47709 + (C49514 + C49515) * C47708 +
            (C7786 * C141358 + C7785 * C47710) * C47707) *
               C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C141320 * C714) * C55522 +
            C7785 * C55523 + C7786 * C55524 + C10453 * C55525) *
               C141216 * C4148 -
           (C59072 * C55525 + C11462 * C55524 + C11463 * C55523 +
            (C713 * C1601 + C2295 + C2295 + C141320 * C2283) * C55522) *
               C141216 * C141487) *
              C816 +
          ((C11463 * C55522 + C11462 * C55523 + C59072 * C55524 +
            (C713 * C58454 + C59069 + C59069 + C141320 * C59065) * C55525) *
               C141216 * C141487 -
           (C58388 * C55525 + C10453 * C55524 + C7786 * C55523 +
            C7785 * C55522) *
               C141216 * C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eexx[89] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C47712 * C108 + C47719 + C47719 + C47707 * C120 +
                      C47714 * C109 + C47720 + C47720 + C47708 * C121 +
                      C47716 * C110 + C47721 + C47721 + C47709 * C122) *
                         C141320 * C47710 +
                     (C48584 + C48585 + C48586) * C141320 * C141358) *
                        C5322 -
                    ((C52204 + C52205 + C52206) * C141320 * C141358 +
                     (C47716 * C1599 + C49617 + C49617 + C47709 * C1609 +
                      C47714 * C1600 + C49618 + C49618 + C47708 * C1610 +
                      C47712 * C1601 + C49619 + C49619 + C47707 * C1611) *
                         C141320 * C47710) *
                        C5323 +
                    ((C47712 * C5325 + C54868 + C54868 + C47707 * C5333 +
                      C47714 * C5326 + C54869 + C54869 + C47708 * C5334 +
                      C47716 * C5327 + C54870 + C54870 + C47709 * C5335) *
                         C141320 * C47710 +
                     (C47712 * C13301 + C54871 + C54871 + C47707 * C13309 +
                      C47714 * C13302 + C54872 + C54872 + C47708 * C13310 +
                      C47716 * C14876 + C54873 + C54873 + C47709 * C14878) *
                         C141320 * C141358) *
                        C5324) *
                   C141277 * C141243) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C55526 * C108 + C55529 + C55529 + C141216 * C120) *
                         C141320 * C55522 +
                     C56059 * C55523 + C56060 * C55524 + C56061 * C55525) *
                        C5322 -
                    (C58474 * C55525 + C58475 * C55524 + C58476 * C55523 +
                     (C55526 * C1601 + C56748 + C56748 + C141216 * C1611) *
                         C141320 * C55522) *
                        C5323 +
                    ((C55526 * C5325 + C60314 + C60314 + C141216 * C5333) *
                         C141320 * C55522 +
                     (C55526 * C13301 + C60315 + C60315 + C141216 * C13309) *
                         C141320 * C55523 +
                     (C55526 * C13303 + C60316 + C60316 + C141216 * C13311) *
                         C141320 * C55524 +
                     (C55526 * C60310 + C60317 + C60317 + C141216 * C60312) *
                         C141320 * C55525) *
                        C5324) *
                   C141277 * C141243) /
                      (p * q * std::sqrt(p + q));
    d2eexy[89] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C47810 * C108 + C47710 * C189 + C47811 * C823 + C141358 * C912) *
               C47713 +
           (C47810 * C114 + C47710 * C195 + C47811 * C828 + C141358 * C917) *
               C47707 +
           (C47837 + C47838) * C47715 + (C47839 + C47840) * C47708 +
           C47849 * C47717 + C47850 * C47709) *
              C141320 * C5322 -
          ((C49740 + C49741) * C47709 + (C49742 + C49743) * C47717 +
           (C49744 + C49745) * C47708 + (C49746 + C49747) * C47715 +
           (C47811 * C3494 + C141358 * C3576 + C47810 * C1606 +
            C47710 * C1695) *
               C47707 +
           (C47811 * C3490 + C141358 * C3572 + C47810 * C1601 +
            C47710 * C1690) *
               C47713) *
              C141320 * C5323 +
          ((C47810 * C5325 + C47710 * C5391 + C47811 * C13301 +
            C141358 * C13393) *
               C47713 +
           (C47810 * C5329 + C47710 * C5395 + C47811 * C13305 +
            C141358 * C13397) *
               C47707 +
           (C47810 * C5326 + C47710 * C5392 + C47811 * C13302 +
            C141358 * C13395) *
               C47715 +
           (C47810 * C5330 + C47710 * C5396 + C47811 * C13306 +
            C141358 * C13399) *
               C47708 +
           (C47810 * C5327 + C47710 * C5393 + C47811 * C14876 +
            C141358 * C14979) *
               C47717 +
           (C47810 * C5331 + C47710 * C5397 + C47811 * C14877 +
            C141358 * C14980) *
               C47709) *
              C141320 * C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C55590 * C108 + C55522 * C189 + C55591 * C823 + C55523 * C912 +
            C55592 * C2960 + C55524 * C3026 + C55593 * C6729 + C55525 * C6880) *
               C55527 +
           (C55590 * C114 + C55522 * C195 + C55591 * C828 + C55523 * C917 +
            C55592 * C2964 + C55524 * C3030 + C55593 * C6732 + C55525 * C6883) *
               C141216) *
              C141320 * C5322 -
          ((C55593 * C10553 + C55525 * C10679 + C55592 * C7890 +
            C55524 * C8009 + C55591 * C3494 + C55523 * C3576 + C55590 * C1606 +
            C55522 * C1695) *
               C141216 +
           (C55593 * C10551 + C55525 * C10677 + C55592 * C7887 +
            C55524 * C8006 + C55591 * C3490 + C55523 * C3572 + C55590 * C1601 +
            C55522 * C1690) *
               C55527) *
              C141320 * C5323 +
          ((C55590 * C5325 + C55522 * C5391 + C55591 * C13301 +
            C55523 * C13393 + C55592 * C13303 + C55524 * C13394 +
            C55593 * C60310 + C55525 * C60367) *
               C55527 +
           (C55590 * C5329 + C55522 * C5395 + C55591 * C13305 +
            C55523 * C13397 + C55592 * C13307 + C55524 * C13398 +
            C55593 * C60311 + C55525 * C60368) *
               C141216) *
              C141320 * C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q));
    d2eexz[89] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141320 * C276) * C47713 +
            (C275 * C114 + C141320 * C282) * C47707 + C305 * C47715 +
            C306 * C47708 + C307 * C47717 + C308 * C47709) *
               C47710 +
           (C48810 + C48811 + C48812 + C48813 + C48814 + C48815) * C141358) *
              C5322 -
          ((C52403 + C52404 + C52405 + C52406 + C52407 + C52408) * C141358 +
           (C1806 * C47709 + C1807 * C47717 + C1808 * C47708 + C1809 * C47715 +
            (C275 * C1606 + C141320 * C1789) * C47707 +
            (C275 * C1601 + C141320 * C1784) * C47713) *
               C47710) *
              C5323 +
          (((C275 * C5325 + C141320 * C5449) * C47713 +
            (C275 * C5329 + C141320 * C5453) * C47707 +
            (C275 * C5326 + C141320 * C5450) * C47715 +
            (C275 * C5330 + C141320 * C5454) * C47708 +
            (C275 * C5327 + C141320 * C5451) * C47717 +
            (C275 * C5331 + C141320 * C5455) * C47709) *
               C47710 +
           ((C275 * C13301 + C141320 * C13475) * C47713 +
            (C275 * C13305 + C141320 * C13479) * C47707 +
            (C275 * C13302 + C141320 * C13476) * C47715 +
            (C275 * C13306 + C141320 * C13480) * C47708 +
            (C275 * C14876 + C141320 * C15091) * C47717 +
            (C275 * C14877 + C141320 * C15092) * C47709) *
               C141358) *
              C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141320 * C276) * C55527 +
            (C275 * C114 + C141320 * C282) * C141216) *
               C55522 +
           (C56197 + C56198) * C55523 + C58047 * C55524 + C58048 * C55525) *
              C5322 -
          ((C58623 + C58624) * C55525 + (C58617 + C58618) * C55524 +
           (C58619 + C58620) * C55523 +
           ((C275 * C1606 + C141320 * C1789) * C141216 +
            (C275 * C1601 + C141320 * C1784) * C55527) *
               C55522) *
              C5323 +
          (((C275 * C5325 + C141320 * C5449) * C55527 +
            (C275 * C5329 + C141320 * C5453) * C141216) *
               C55522 +
           ((C275 * C13301 + C141320 * C13475) * C55527 +
            (C275 * C13305 + C141320 * C13479) * C141216) *
               C55523 +
           ((C275 * C13303 + C141320 * C13477) * C55527 +
            (C275 * C13307 + C141320 * C13481) * C141216) *
               C55524 +
           ((C275 * C60310 + C141320 * C60419) * C55527 +
            (C275 * C60311 + C141320 * C60420) * C141216) *
               C55525) *
              C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q));
    d2eeyx[89] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C47713 * C108 + C47707 * C114 + C47715 * C109 +
                      C47708 * C115 + C47717 * C110 + C47709 * C116) *
                         C47810 +
                     (C47713 * C189 + C47707 * C362 + C47715 * C190 +
                      C47708 * C363 + C47717 * C191 + C47709 * C364) *
                         C47710 +
                     (C48944 + C48945 + C48946) * C47811 +
                     (C48947 + C48948 + C48949) * C141358) *
                        C141320 * C5322 -
                    ((C52519 + C52520 + C52521) * C141358 +
                     (C52522 + C52523 + C52524) * C47811 +
                     (C47717 * C1688 + C47709 * C1876 + C47715 * C1689 +
                      C47708 * C1877 + C47713 * C1690 + C47707 * C1878) *
                         C47710 +
                     (C47717 * C1599 + C47709 * C1604 + C47715 * C1600 +
                      C47708 * C1605 + C47713 * C1601 + C47707 * C1606) *
                         C47810) *
                        C141320 * C5323 +
                    ((C47713 * C5325 + C47707 * C5329 + C47715 * C5326 +
                      C47708 * C5330 + C47717 * C5327 + C47709 * C5331) *
                         C47810 +
                     (C47713 * C5391 + C47707 * C5507 + C47715 * C5392 +
                      C47708 * C5508 + C47717 * C5393 + C47709 * C5509) *
                         C47710 +
                     (C47713 * C13301 + C47707 * C13305 + C47715 * C13302 +
                      C47708 * C13306 + C47717 * C14876 + C47709 * C14877) *
                         C47811 +
                     (C47713 * C13393 + C47707 * C13557 + C47715 * C13395 +
                      C47708 * C13558 + C47717 * C14979 + C47709 * C15209) *
                         C141358) *
                        C141320 * C5324) *
                   C141277 * C141243) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C55527 * C108 + C141216 * C114) * C55590 +
                     (C55527 * C189 + C141216 * C362) * C55522 +
                     C56299 * C55591 + C56300 * C55523 + C56301 * C55592 +
                     C56302 * C55524 + C56303 * C55593 + C56304 * C55525) *
                        C141320 * C5322 -
                    (C58704 * C55525 + C58705 * C55593 + C58706 * C55524 +
                     C58707 * C55592 + C58708 * C55523 + C58709 * C55591 +
                     (C55527 * C1690 + C141216 * C1878) * C55522 +
                     (C55527 * C1601 + C141216 * C1606) * C55590) *
                        C141320 * C5323 +
                    ((C55527 * C5325 + C141216 * C5329) * C55590 +
                     (C55527 * C5391 + C141216 * C5507) * C55522 +
                     (C55527 * C13301 + C141216 * C13305) * C55591 +
                     (C55527 * C13393 + C141216 * C13557) * C55523 +
                     (C55527 * C13303 + C141216 * C13307) * C55592 +
                     (C55527 * C13394 + C141216 * C13559) * C55524 +
                     (C55527 * C60310 + C141216 * C60311) * C55593 +
                     (C55527 * C60367 + C141216 * C60471) * C55525) *
                        C141320 * C5324) *
                   C141277 * C141243) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[89] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C48072 * C108 + C48075 + C48075 + C47710 * C419 + C48073 * C823 +
            C48076 + C48076 + C141358 * C1171) *
               C47707 +
           (C48109 + C48110) * C47708 + C48115 * C47709) *
              C141320 * C5322 -
          ((C50066 + C50067) * C47709 + (C50068 + C50069) * C47708 +
           (C48073 * C3490 + C50054 + C50054 + C141358 * C3790 +
            C48072 * C1601 + C50055 + C50055 + C47710 * C1949) *
               C47707) *
              C141320 * C5323 +
          ((C48072 * C5325 + C55170 + C55170 + C47710 * C5561 +
            C48073 * C13301 + C55171 + C55171 + C141358 * C13635) *
               C47707 +
           (C48072 * C5326 + C55172 + C55172 + C47710 * C5562 +
            C48073 * C13302 + C55173 + C55173 + C141358 * C13637) *
               C47708 +
           (C48072 * C5327 + C55174 + C55174 + C47710 * C5563 +
            C48073 * C14876 + C55175 + C55175 + C141358 * C15308) *
               C47709) *
              C141320 * C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((C55744 * C108 + C55749 + C55749 + C55522 * C419 + C55745 * C823 +
           C55750 + C55750 + C55523 * C1171 + C55746 * C2960 + C55751 + C55751 +
           C55524 * C3196 + C55747 * C6729 + C55752 + C55752 + C55525 * C7289) *
              C141216 * C141320 * C5322 -
          (C55747 * C10551 + C57017 + C57017 + C55525 * C11025 +
           C55746 * C7887 + C57018 + C57018 + C55524 * C8345 + C55745 * C3490 +
           C57019 + C57019 + C55523 * C3790 + C55744 * C1601 + C57020 + C57020 +
           C55522 * C1949) *
              C141216 * C141320 * C5323 +
          (C55744 * C5325 + C60524 + C60524 + C55522 * C5561 + C55745 * C13301 +
           C60525 + C60525 + C55523 * C13635 + C55746 * C13303 + C60526 +
           C60526 + C55524 * C13636 + C55747 * C60310 + C60527 + C60527 +
           C55525 * C60522) *
              C141216 * C141320 * C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q));
    d2eeyz[89] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141320 * C276) * C47810 +
            (C275 * C189 + C141320 * C501) * C47710 + C7032 * C47811 +
            C7428 * C141358) *
               C47707 +
           (C48190 + C48191 + C48192 + C48193) * C47708 + C48204 * C47709) *
              C5322 -
          ((C50168 + C50169 + C50170 + C50171) * C47709 +
           (C50172 + C50173 + C50174 + C50175) * C47708 +
           (C11139 * C141358 + C10799 * C47811 +
            (C275 * C1690 + C141320 * C2040) * C47710 +
            (C275 * C1601 + C141320 * C1784) * C47810) *
               C47707) *
              C5323 +
          (((C275 * C5325 + C141320 * C5449) * C47810 +
            (C275 * C5391 + C141320 * C5619) * C47710 +
            (C275 * C13301 + C141320 * C13475) * C47811 +
            (C275 * C13393 + C141320 * C13719) * C141358) *
               C47707 +
           ((C275 * C5326 + C141320 * C5450) * C47810 +
            (C275 * C5392 + C141320 * C5620) * C47710 +
            (C275 * C13302 + C141320 * C13476) * C47811 +
            (C275 * C13395 + C141320 * C13721) * C141358) *
               C47708 +
           ((C275 * C5327 + C141320 * C5451) * C47810 +
            (C275 * C5393 + C141320 * C5621) * C47710 +
            (C275 * C14876 + C141320 * C15091) * C47811 +
            (C275 * C14979 + C141320 * C15420) * C141358) *
               C47709) *
              C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C275 * C108 + C141320 * C276) * C55590 +
           (C275 * C189 + C141320 * C501) * C55522 + C7032 * C55591 +
           C7428 * C55523 + C7034 * C55592 + C7429 * C55524 + C9954 * C55593 +
           C10208 * C55525) *
              C141216 * C5322 -
          (C58850 * C55525 + C58622 * C55593 + C11138 * C55524 +
           C10797 * C55592 + C11139 * C55523 + C10799 * C55591 +
           (C275 * C1690 + C141320 * C2040) * C55522 +
           (C275 * C1601 + C141320 * C1784) * C55590) *
              C141216 * C5323 +
          ((C275 * C5325 + C141320 * C5449) * C55590 +
           (C275 * C5391 + C141320 * C5619) * C55522 +
           (C275 * C13301 + C141320 * C13475) * C55591 +
           (C275 * C13393 + C141320 * C13719) * C55523 +
           (C275 * C13303 + C141320 * C13477) * C55592 +
           (C275 * C13394 + C141320 * C13720) * C55524 +
           (C275 * C60310 + C141320 * C60419) * C55593 +
           (C275 * C60367 + C141320 * C60577) * C55525) *
              C141216 * C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q));
    d2eezx[89] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47713 * C108 + C47707 * C114 + C47715 * C109 + C47708 * C115 +
             C47717 * C110 + C47709 * C116) *
                C275 +
            (C47713 * C276 + C47707 * C579 + C47715 * C277 + C47708 * C580 +
             C47717 * C278 + C47709 * C581) *
                C141320) *
               C47710 +
           ((C48944 + C48945 + C48946) * C275 +
            (C49298 + C49299 + C49300) * C141320) *
               C141358) *
              C5322 -
          (((C52831 + C52832 + C52833) * C141320 +
            (C52522 + C52523 + C52524) * C275) *
               C141358 +
           ((C47717 * C1782 + C47709 * C2124 + C47715 * C1783 + C47708 * C2125 +
             C47713 * C1784 + C47707 * C2126) *
                C141320 +
            (C47717 * C1599 + C47709 * C1604 + C47715 * C1600 + C47708 * C1605 +
             C47713 * C1601 + C47707 * C1606) *
                C275) *
               C47710) *
              C5323 +
          (((C47713 * C5325 + C47707 * C5329 + C47715 * C5326 + C47708 * C5330 +
             C47717 * C5327 + C47709 * C5331) *
                C275 +
            (C47713 * C5449 + C47707 * C5673 + C47715 * C5450 + C47708 * C5674 +
             C47717 * C5451 + C47709 * C5675) *
                C141320) *
               C47710 +
           ((C47713 * C13301 + C47707 * C13305 + C47715 * C13302 +
             C47708 * C13306 + C47717 * C14876 + C47709 * C14877) *
                C275 +
            (C47713 * C13475 + C47707 * C13797 + C47715 * C13476 +
             C47708 * C13798 + C47717 * C15091 + C47709 * C15528) *
                C141320) *
               C141358) *
              C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C55527 * C108 + C141216 * C114) * C275 +
            (C55527 * C276 + C141216 * C579) * C141320) *
               C55522 +
           (C56517 + C56541) * C55523 + C58274 * C55524 + C58275 * C55525) *
              C5322 -
          ((C58930 + C58920) * C55525 + (C58931 + C58923) * C55524 +
           (C58932 + C58926) * C55523 +
           ((C55527 * C1784 + C141216 * C2126) * C141320 +
            (C55527 * C1601 + C141216 * C1606) * C275) *
               C55522) *
              C5323 +
          (((C55527 * C5325 + C141216 * C5329) * C275 +
            (C55527 * C5449 + C141216 * C5673) * C141320) *
               C55522 +
           ((C55527 * C13301 + C141216 * C13305) * C275 +
            (C55527 * C13475 + C141216 * C13797) * C141320) *
               C55523 +
           ((C55527 * C13303 + C141216 * C13307) * C275 +
            (C55527 * C13477 + C141216 * C13799) * C141320) *
               C55524 +
           ((C55527 * C60310 + C141216 * C60311) * C275 +
            (C55527 * C60419 + C141216 * C60628) * C141320) *
               C55525) *
              C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q));
    d2eezy[89] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47810 * C108 + C47710 * C189 + C47811 * C823 + C141358 * C912) *
                C275 +
            (C47810 * C276 + C47710 * C635 + C47811 * C1006 + C141358 * C1419) *
                C141320) *
               C47707 +
           ((C47837 + C47838) * C275 + (C48366 + C48367) * C141320) * C47708 +
           C48374 * C47709) *
              C5322 -
          (((C50380 + C50381) * C141320 + (C49742 + C49743) * C275) * C47709 +
           ((C50382 + C50383) * C141320 + (C49746 + C49747) * C275) * C47708 +
           ((C47811 * C3646 + C141358 * C4004 + C47810 * C1784 +
             C47710 * C2197) *
                C141320 +
            (C47811 * C3490 + C141358 * C3572 + C47810 * C1601 +
             C47710 * C1690) *
                C275) *
               C47707) *
              C5323 +
          (((C47810 * C5325 + C47710 * C5391 + C47811 * C13301 +
             C141358 * C13393) *
                C275 +
            (C47810 * C5449 + C47710 * C5727 + C47811 * C13475 +
             C141358 * C13875) *
                C141320) *
               C47707 +
           ((C47810 * C5326 + C47710 * C5392 + C47811 * C13302 +
             C141358 * C13395) *
                C275 +
            (C47810 * C5450 + C47710 * C5728 + C47811 * C13476 +
             C141358 * C13877) *
                C141320) *
               C47708 +
           ((C47810 * C5327 + C47710 * C5393 + C47811 * C14876 +
             C141358 * C14979) *
                C275 +
            (C47810 * C5451 + C47710 * C5729 + C47811 * C15091 +
             C141358 * C15627) *
                C141320) *
               C47709) *
              C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C55590 * C108 + C55522 * C189 + C55591 * C823 + C55523 * C912 +
            C55592 * C2960 + C55524 * C3026 + C55593 * C6729 + C55525 * C6880) *
               C275 +
           (C55590 * C276 + C55522 * C635 + C55591 * C1006 + C55523 * C1419 +
            C55592 * C3084 + C55524 * C3362 + C55593 * C7002 + C55525 * C7655) *
               C141320) *
              C141216 * C5322 -
          ((C55593 * C10779 + C55525 * C11349 + C55592 * C8128 +
            C55524 * C8684 + C55591 * C3646 + C55523 * C4004 + C55590 * C1784 +
            C55522 * C2197) *
               C141320 +
           (C55593 * C10551 + C55525 * C10677 + C55592 * C7887 +
            C55524 * C8006 + C55591 * C3490 + C55523 * C3572 + C55590 * C1601 +
            C55522 * C1690) *
               C275) *
              C141216 * C5323 +
          ((C55590 * C5325 + C55522 * C5391 + C55591 * C13301 +
            C55523 * C13393 + C55592 * C13303 + C55524 * C13394 +
            C55593 * C60310 + C55525 * C60367) *
               C275 +
           (C55590 * C5449 + C55522 * C5727 + C55591 * C13475 +
            C55523 * C13875 + C55592 * C13477 + C55524 * C13876 +
            C55593 * C60419 + C55525 * C60679) *
               C141320) *
              C141216 * C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q));
    d2eezz[89] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C141320 * C714) * C47710 +
            C7785 * C141358) *
               C47707 +
           (C48449 + C48450) * C47708 + C48455 * C47709) *
              C5322 -
          ((C50482 + C50483) * C47709 + (C50484 + C50485) * C47708 +
           (C11463 * C141358 +
            (C713 * C1601 + C2295 + C2295 + C141320 * C2283) * C47710) *
               C47707) *
              C5323 +
          (((C713 * C5325 + C5786 + C5786 + C141320 * C5781) * C47710 +
            (C713 * C13301 + C13958 + C13958 + C141320 * C13953) * C141358) *
               C47707 +
           ((C713 * C5326 + C5787 + C5787 + C141320 * C5782) * C47710 +
            (C713 * C13302 + C13960 + C13960 + C141320 * C13955) * C141358) *
               C47708 +
           ((C713 * C5327 + C5788 + C5788 + C141320 * C5783) * C47710 +
            (C713 * C14876 + C29848 + C29848 + C141320 * C15738) * C141358) *
               C47709) *
              C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C713 * C108 + C721 + C721 + C141320 * C714) * C55522 +
           C7785 * C55523 + C7786 * C55524 + C10453 * C55525) *
              C141216 * C5322 -
          (C59072 * C55525 + C11462 * C55524 + C11463 * C55523 +
           (C713 * C1601 + C2295 + C2295 + C141320 * C2283) * C55522) *
              C141216 * C5323 +
          ((C713 * C5325 + C5786 + C5786 + C141320 * C5781) * C55522 +
           (C713 * C13301 + C13958 + C13958 + C141320 * C13953) * C55523 +
           (C713 * C13303 + C13959 + C13959 + C141320 * C13954) * C55524 +
           (C713 * C60310 + C60732 + C60732 + C141320 * C60730) * C55525) *
              C141216 * C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q));
    d2eexx[90] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C68675 * C108 + C68680 + C68680 + C141452 * C120 + C68677 * C109 +
             C68681 + C68681 + C141221 * C121) *
                C93949 +
            (C78695 + C78696) * C141384) *
               C141468 +
           ((C69544 + C69545) * C93949 + C81967 * C141384) * C141358) *
              C141294 * C141277 * C97 -
          (((C77458 + C77457) * C141384 + (C69549 + C69548) * C93949) *
               C141358 +
           ((C78698 + C78697) * C141384 +
            (C68677 * C110 + C68690 + C68690 + C141221 * C122 + C68675 * C109 +
             C68691 + C68691 + C141452 * C121) *
                C93949) *
               C141468) *
              C141294 * C141277 * C98 +
          (((C68675 * C110 + C68692 + C68692 + C141452 * C122 + C68677 * C111 +
             C68693 + C68693 + C141221 * C123) *
                C93949 +
            (C68675 * C1599 + C76531 + C76531 + C141452 * C1609 +
             C68677 * C1598 + C76532 + C76532 + C141221 * C1608) *
                C141384) *
               C141468 +
           ((C68675 * C821 + C68694 + C68694 + C141452 * C831 + C68677 * C820 +
             C68695 + C68695 + C141221 * C830) *
                C93949 +
            (C68675 * C3492 + C76533 + C76533 + C141452 * C3500 +
             C68677 * C3493 + C76534 + C76534 + C141221 * C3501) *
                C141384) *
               C141358) *
              C141294 * C141277 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eexy[90] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C22172 * C108 + C141468 * C189 + C22173 * C823 + C141358 * C912) *
                C139366 +
            (C22172 * C114 + C141468 * C195 + C22173 * C828 + C141358 * C917) *
                C141452 +
            (C22199 + C22200) * C139356 + (C22201 + C22202) * C141221) *
               C93949 +
           ((C40064 + C40065) * C139366 + (C40066 + C40067) * C141452 +
            C40052 * C139356 + C40053 * C141221) *
               C141384) *
              C141294 * C141277 * C97 -
          (((C24102 + C24103) * C141221 + (C24104 + C24105) * C139356 +
            C40062 * C141452 + C40063 * C139366) *
               C141384 +
           ((C22206 + C22205) * C141221 + (C22204 + C22203) * C139356 +
            (C22202 + C22201) * C141452 + (C22200 + C22199) * C139366) *
               C93949) *
              C141294 * C141277 * C98 +
          ((C22211 * C139366 + C22212 * C141452 + (C22210 + C22209) * C139356 +
            (C22208 + C22207) * C141221) *
               C93949 +
           ((C24105 + C24104) * C139366 + (C24103 + C24102) * C141452 +
            (C22172 * C1598 + C141468 * C1687 + C22173 * C3493 +
             C141358 * C3575) *
                C139356 +
            (C22172 * C1603 + C141468 * C1692 + C22173 * C3497 +
             C141358 * C3579) *
                C141221) *
               C141384) *
              C141294 * C141277 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eexz[90] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C94102 * C108 + C93949 * C276 + C94103 * C1601 + C141384 * C1784) *
                C139366 +
            (C94102 * C114 + C93949 * C282 + C94103 * C1606 + C141384 * C1789) *
                C141452 +
            (C94129 + C94130) * C139356 + (C94131 + C94132) * C141221) *
               C141468 +
           ((C102614 + C102615) * C139366 + (C102616 + C102617) * C141452 +
            (C94985 + C94984) * C139356 + (C94983 + C94982) * C141221) *
               C141358) *
              C141294 * C141277 * C97 -
          (((C94978 + C94979) * C141221 + (C94980 + C94981) * C139356 +
            (C94982 + C94983) * C141452 + (C94984 + C94985) * C139366) *
               C141358 +
           ((C94136 + C94135) * C141221 + (C94134 + C94133) * C139356 +
            (C94132 + C94131) * C141452 + (C94130 + C94129) * C139366) *
               C141468) *
              C141294 * C141277 * C98 +
          ((C94141 * C139366 + C94142 * C141452 + (C94140 + C94139) * C139356 +
            (C94138 + C94137) * C141221) *
               C141468 +
           ((C94981 + C94980) * C139366 + (C94979 + C94978) * C141452 +
            (C94102 * C820 + C93949 * C1003 + C94103 * C3493 +
             C141384 * C3649) *
                C139356 +
            (C94102 * C825 + C93949 * C1008 + C94103 * C3497 +
             C141384 * C3653) *
                C141221) *
               C141358) *
              C141294 * C141277 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[90] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139366 * C108 + C141452 * C114 + C139356 * C109 +
             C141221 * C115) *
                C22172 +
            (C139366 * C189 + C141452 * C362 + C139356 * C190 +
             C141221 * C363) *
                C141468 +
            (C69912 + C69913) * C22173 + (C69914 + C69915) * C141358) *
               C93949 +
           ((C79109 + C79110) * C22172 + (C79111 + C79112) * C141468 +
            C82369 * C22173 + C82370 * C141358) *
               C141384) *
              C141294 * C141277 * C97 -
          (((C77872 + C77871) * C141358 + (C77870 + C77869) * C22173 +
            (C79116 + C79115) * C141468 + (C79114 + C79113) * C22172) *
               C141384 +
           ((C69923 + C69922) * C141358 + (C69921 + C69920) * C22173 +
            (C139356 * C191 + C141221 * C364 + C139366 * C190 +
             C141452 * C363) *
                C141468 +
            (C139356 * C110 + C141221 * C116 + C139366 * C109 +
             C141452 * C115) *
                C22172) *
               C93949) *
              C141294 * C141277 * C98 +
          (((C139366 * C110 + C141452 * C116 + C139356 * C111 +
             C141221 * C117) *
                C22172 +
            (C139366 * C191 + C141452 * C364 + C139356 * C192 +
             C141221 * C365) *
                C141468 +
            (C139366 * C821 + C141452 * C826 + C139356 * C820 +
             C141221 * C825) *
                C22173 +
            (C139366 * C910 + C141452 * C1098 + C139356 * C909 +
             C141221 * C1097) *
                C141358) *
               C93949 +
           ((C139366 * C1599 + C141452 * C1604 + C139356 * C1598 +
             C141221 * C1603) *
                C22172 +
            (C139366 * C1688 + C141452 * C1876 + C139356 * C1687 +
             C141221 * C1875) *
                C141468 +
            (C139366 * C3492 + C141452 * C3496 + C139356 * C3493 +
             C141221 * C3497) *
                C22173 +
            (C139366 * C3574 + C141452 * C3722 + C139356 * C3575 +
             C141221 * C3723) *
                C141358) *
               C141384) *
              C141294 * C141277 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[90] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C22434 * C108 + C22437 + C22437 + C141468 * C419 + C22435 * C823 +
             C22438 + C22438 + C141358 * C1171) *
                C141452 +
            (C22471 + C22472) * C141221) *
               C93949 +
           ((C40492 + C40493) * C141452 + C40478 * C141221) * C141384) *
              C141294 * C141277 * C97 -
          (((C24434 + C24435) * C141221 + C40483 * C141452) * C141384 +
           ((C22474 + C22473) * C141221 + (C22472 + C22471) * C141452) *
               C93949) *
              C141294 * C141277 * C98 +
          ((C22477 * C141452 + (C22476 + C22475) * C141221) * C93949 +
           ((C24435 + C24434) * C141452 +
            (C22434 * C1598 + C24424 + C24424 + C141468 * C1946 +
             C22435 * C3493 + C24425 + C24425 + C141358 * C3793) *
                C141221) *
               C141384) *
              C141294 * C141277 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[90] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C94102 * C108 + C93949 * C276 + C94103 * C1601 + C141384 * C1784) *
                C22172 +
            (C94102 * C189 + C93949 * C501 + C94103 * C1690 + C141384 * C2040) *
                C141468 +
            (C102614 + C102615) * C22173 + (C102932 + C102933) * C141358) *
               C141452 +
           ((C94129 + C94130) * C22172 + (C94378 + C94379) * C141468 +
            (C94985 + C94984) * C22173 + (C95291 + C95290) * C141358) *
               C141221) *
              C141294 * C141277 * C97 -
          (((C95288 + C95289) * C141358 + (C94980 + C94981) * C22173 +
            (C94381 + C94380) * C141468 + (C94134 + C94133) * C22172) *
               C141221 +
           ((C95290 + C95291) * C141358 + (C94984 + C94985) * C22173 +
            (C94379 + C94378) * C141468 + (C94130 + C94129) * C22172) *
               C141452) *
              C141294 * C141277 * C98 +
          ((C94141 * C22172 + C94384 * C141468 + (C94981 + C94980) * C22173 +
            (C95289 + C95288) * C141358) *
               C141452 +
           ((C94140 + C94139) * C22172 + (C94383 + C94382) * C141468 +
            (C94102 * C820 + C93949 * C1003 + C94103 * C3493 +
             C141384 * C3649) *
                C22173 +
            (C94102 * C909 + C93949 * C1259 + C94103 * C3575 +
             C141384 * C3867) *
                C141358) *
               C141221) *
              C141294 * C141277 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eezx[90] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139366 * C108 + C141452 * C114 + C139356 * C109 +
             C141221 * C115) *
                C94102 +
            (C139366 * C276 + C141452 * C579 + C139356 * C277 +
             C141221 * C580) *
                C93949 +
            (C79109 + C79110) * C94103 + (C79517 + C79518) * C141384) *
               C141468 +
           ((C69912 + C69913) * C94102 + (C70268 + C70269) * C93949 +
            C82369 * C94103 + C82775 * C141384) *
               C141358) *
              C141294 * C141277 * C97 -
          (((C78278 + C78277) * C141384 + (C77870 + C77869) * C94103 +
            (C70273 + C70272) * C93949 + (C69921 + C69920) * C94102) *
               C141358 +
           ((C79520 + C79519) * C141384 + (C79114 + C79113) * C94103 +
            (C139356 * C278 + C141221 * C581 + C139366 * C277 +
             C141452 * C580) *
                C93949 +
            (C139356 * C110 + C141221 * C116 + C139366 * C109 +
             C141452 * C115) *
                C94102) *
               C141468) *
              C141294 * C141277 * C98 +
          (((C139366 * C110 + C141452 * C116 + C139356 * C111 +
             C141221 * C117) *
                C94102 +
            (C139366 * C278 + C141452 * C581 + C139356 * C279 +
             C141221 * C582) *
                C93949 +
            (C139366 * C1599 + C141452 * C1604 + C139356 * C1598 +
             C141221 * C1603) *
                C94103 +
            (C139366 * C1782 + C141452 * C2124 + C139356 * C1781 +
             C141221 * C2123) *
                C141384) *
               C141468 +
           ((C139366 * C821 + C141452 * C826 + C139356 * C820 +
             C141221 * C825) *
                C94102 +
            (C139366 * C1004 + C141452 * C1346 + C139356 * C1003 +
             C141221 * C1345) *
                C93949 +
            (C139366 * C3492 + C141452 * C3496 + C139356 * C3493 +
             C141221 * C3497) *
                C94103 +
            (C139366 * C3648 + C141452 * C3936 + C139356 * C3649 +
             C141221 * C3937) *
                C141384) *
               C141358) *
              C141294 * C141277 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eezy[90] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C22172 * C108 + C141468 * C189 + C22173 * C823 + C141358 * C912) *
                C94102 +
            (C22172 * C276 + C141468 * C635 + C22173 * C1006 +
             C141358 * C1419) *
                C93949 +
            (C40064 + C40065) * C94103 + (C40902 + C40903) * C141384) *
               C141452 +
           ((C22199 + C22200) * C94102 + (C22728 + C22729) * C93949 +
            C40052 * C94103 + C40896 * C141384) *
               C141221) *
              C141294 * C141277 * C97 -
          (((C24751 + C24752) * C141384 + (C24104 + C24105) * C94103 +
            (C22731 + C22730) * C93949 + (C22204 + C22203) * C94102) *
               C141221 +
           (C40901 * C141384 + C40063 * C94103 + (C22729 + C22728) * C93949 +
            (C22200 + C22199) * C94102) *
               C141452) *
              C141294 * C141277 * C98 +
          ((C22211 * C94102 + C22734 * C93949 + (C24105 + C24104) * C94103 +
            (C24752 + C24751) * C141384) *
               C141452 +
           ((C22210 + C22209) * C94102 + (C22733 + C22732) * C93949 +
            (C22172 * C1598 + C141468 * C1687 + C22173 * C3493 +
             C141358 * C3575) *
                C94103 +
            (C22172 * C1781 + C141468 * C2194 + C22173 * C3649 +
             C141358 * C4007) *
                C141384) *
               C141221) *
              C141294 * C141277 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eezz[90] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C94623 * C108 + C94626 + C94626 + C93949 * C714 + C94624 * C1601 +
             C94627 + C94627 + C141384 * C2283) *
                C141468 +
            (C103276 + C103277) * C141358) *
               C141452 +
           ((C94660 + C94661) * C141468 + (C95621 + C95620) * C141358) *
               C141221) *
              C141294 * C141277 * C97 -
          (((C95618 + C95619) * C141358 + (C94663 + C94662) * C141468) *
               C141221 +
           ((C95620 + C95621) * C141358 + (C94661 + C94660) * C141468) *
               C141452) *
              C141294 * C141277 * C98 +
          ((C94666 * C141468 + (C95619 + C95618) * C141358) * C141452 +
           ((C94665 + C94664) * C141468 +
            (C94623 * C820 + C95608 + C95608 + C93949 * C1502 + C94624 * C3493 +
             C95609 + C95609 + C141384 * C4077) *
                C141358) *
               C141221) *
              C141294 * C141277 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eexx[91] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C68675 * C108 + C68680 + C68680 + C141452 * C120 + C68677 * C109 +
              C68681 + C68681 + C141221 * C121) *
                 C93949 +
             (C78695 + C78696) * C141384) *
                C141468 +
            ((C69544 + C69545) * C93949 + C81967 * C141384) * C141358) *
               C141294 * C816 -
           (((C73153 + C73154) * C141384 + (C69547 + C69546) * C93949) *
                C141358 +
            (C81972 * C141384 + (C69545 + C69544) * C93949) * C141468) *
               C141294 * C141485) *
              C818 +
          ((((C69548 + C69549) * C93949 + (C77457 + C77458) * C141384) *
                C141468 +
            ((C69550 + C69551) * C93949 +
             (C68675 * C7886 + C70592 + C70592 + C141452 * C7892 +
              C68677 * C7888 + C70593 + C70593 + C141221 * C7894) *
                 C141384) *
                C141358) *
               C141294 * C141485 -
           (((C77458 + C77457) * C141384 + (C69549 + C69548) * C93949) *
                C141358 +
            ((C78698 + C78697) * C141384 +
             (C68677 * C110 + C68690 + C68690 + C141221 * C122 + C68675 * C109 +
              C68691 + C68691 + C141452 * C121) *
                 C93949) *
                C141468) *
               C141294 * C816) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eexy[91] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22172 * C108 + C141468 * C189 + C22173 * C823 + C141358 * C912) *
                 C139366 +
             (C22172 * C114 + C141468 * C195 + C22173 * C828 + C141358 * C917) *
                 C141452 +
             (C22199 + C22200) * C139356 + (C22201 + C22202) * C141221) *
                C93949 +
            ((C40064 + C40065) * C139366 + (C40066 + C40067) * C141452 +
             C40052 * C139356 + C40053 * C141221) *
                C141384) *
               C141294 * C816 -
           (((C38772 + C38773) * C141221 + (C38774 + C38775) * C139356 +
             (C43407 + C43406) * C141452 + (C43405 + C43404) * C139366) *
                C141384 +
            ((C23070 + C23071) * C141221 + (C23072 + C23073) * C139356 +
             (C22173 * C2964 + C141358 * C3030 + C22172 * C828 +
              C141468 * C917) *
                 C141452 +
             (C22173 * C2960 + C141358 * C3026 + C22172 * C823 +
              C141468 * C912) *
                 C139366) *
                C93949) *
               C141294 * C141485) *
              C818 +
          ((((C23073 + C23072) * C139366 + (C23071 + C23070) * C141452 +
             (C23069 + C23068) * C139356 + (C23067 + C23066) * C141221) *
                C93949 +
            ((C38775 + C38774) * C139366 + (C38773 + C38772) * C141452 +
             (C22172 * C3492 + C141468 * C3574 + C22173 * C7888 +
              C141358 * C8007) *
                 C139356 +
             (C22172 * C3496 + C141468 * C3578 + C22173 * C7891 +
              C141358 * C8010) *
                 C141221) *
                C141384) *
               C141294 * C141485 -
           (((C24102 + C24103) * C141221 + (C24104 + C24105) * C139356 +
             C40062 * C141452 + C40063 * C139366) *
                C141384 +
            ((C22206 + C22205) * C141221 + (C22204 + C22203) * C139356 +
             (C22202 + C22201) * C141452 + (C22200 + C22199) * C139366) *
                C93949) *
               C141294 * C816) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eexz[91] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C94102 * C108 + C93949 * C276 + C94103 * C1601 +
              C141384 * C1784) *
                 C139366 +
             (C94102 * C114 + C93949 * C282 + C94103 * C1606 +
              C141384 * C1789) *
                 C141452 +
             (C94129 + C94130) * C139356 + (C94131 + C94132) * C141221) *
                C141468 +
            ((C102614 + C102615) * C139366 + (C102616 + C102617) * C141452 +
             C115675 * C139356 + C115676 * C141221) *
                C141358) *
               C141294 * C816 -
           (((C102625 + C102624) * C141221 + (C102623 + C102622) * C139356 +
             (C102621 + C102620) * C141452 + (C102619 + C102618) * C139366) *
                C141358 +
            (C115677 * C141221 + C115678 * C139356 +
             (C102617 + C102616) * C141452 + (C102615 + C102614) * C139366) *
                C141468) *
               C141294 * C141485) *
              C818 +
          (((C115675 * C139366 + C115676 * C141452 +
             (C94981 + C94980) * C139356 + (C94979 + C94978) * C141221) *
                C141468 +
            ((C102622 + C102623) * C139366 + (C102624 + C102625) * C141452 +
             (C94102 * C2962 + C93949 * C3086 + C94103 * C7888 +
              C141384 * C8129) *
                 C139356 +
             (C94102 * C2966 + C93949 * C3090 + C94103 * C7891 +
              C141384 * C8132) *
                 C141221) *
                C141358) *
               C141294 * C141485 -
           (((C94978 + C94979) * C141221 + (C94980 + C94981) * C139356 +
             C115677 * C141452 + C115678 * C139366) *
                C141358 +
            ((C94136 + C94135) * C141221 + (C94134 + C94133) * C139356 +
             (C94132 + C94131) * C141452 + (C94130 + C94129) * C139366) *
                C141468) *
               C141294 * C816) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[91] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139366 * C108 + C141452 * C114 + C139356 * C109 +
              C141221 * C115) *
                 C22172 +
             (C139366 * C189 + C141452 * C362 + C139356 * C190 +
              C141221 * C363) *
                 C141468 +
             (C69912 + C69913) * C22173 + (C69914 + C69915) * C141358) *
                C93949 +
            ((C79109 + C79110) * C22172 + (C79111 + C79112) * C141468 +
             C82369 * C22173 + C82370 * C141358) *
                C141384) *
               C141294 * C816 -
           (((C73475 + C73476) * C141358 + (C73477 + C73478) * C22173 +
             C82379 * C141468 + C82380 * C22172) *
                C141384 +
            ((C69919 + C69918) * C141358 + (C69917 + C69916) * C22173 +
             (C69915 + C69914) * C141468 + (C69913 + C69912) * C22172) *
                C93949) *
               C141294 * C141485) *
              C818 +
          ((((C69920 + C69921) * C22172 + (C69922 + C69923) * C141468 +
             (C69924 + C69925) * C22173 + (C69926 + C69927) * C141358) *
                C93949 +
            ((C77869 + C77870) * C22172 + (C77871 + C77872) * C141468 +
             (C139366 * C7886 + C141452 * C7889 + C139356 * C7888 +
              C141221 * C7891) *
                 C22173 +
             (C139366 * C8005 + C141452 * C8243 + C139356 * C8007 +
              C141221 * C8245) *
                 C141358) *
                C141384) *
               C141294 * C141485 -
           (((C77872 + C77871) * C141358 + (C77870 + C77869) * C22173 +
             (C79116 + C79115) * C141468 + (C79114 + C79113) * C22172) *
                C141384 +
            ((C69923 + C69922) * C141358 + (C69921 + C69920) * C22173 +
             (C139356 * C191 + C141221 * C364 + C139366 * C190 +
              C141452 * C363) *
                 C141468 +
             (C139356 * C110 + C141221 * C116 + C139366 * C109 +
              C141452 * C115) *
                 C22172) *
                C93949) *
               C141294 * C816) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[91] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22434 * C108 + C22437 + C22437 + C141468 * C419 + C22435 * C823 +
              C22438 + C22438 + C141358 * C1171) *
                 C141452 +
             (C22471 + C22472) * C141221) *
                C93949 +
            ((C40492 + C40493) * C141452 + C40478 * C141221) * C141384) *
               C141294 * C816 -
           (((C39214 + C39215) * C141221 + (C43827 + C43826) * C141452) *
                C141384 +
            ((C23442 + C23443) * C141221 +
             (C22435 * C2960 + C23428 + C23428 + C141358 * C3196 +
              C22434 * C823 + C23429 + C23429 + C141468 * C1171) *
                 C141452) *
                C93949) *
               C141294 * C141485) *
              C818 +
          ((((C23443 + C23442) * C141452 + (C23441 + C23440) * C141221) *
                C93949 +
            ((C39215 + C39214) * C141452 +
             (C22434 * C3492 + C27003 + C27003 + C141468 * C3792 +
              C22435 * C7888 + C27004 + C27004 + C141358 * C8346) *
                 C141221) *
                C141384) *
               C141294 * C141485 -
           (((C24434 + C24435) * C141221 + C40483 * C141452) * C141384 +
            ((C22474 + C22473) * C141221 + (C22472 + C22471) * C141452) *
                C93949) *
               C141294 * C816) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[91] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C94102 * C108 + C93949 * C276 + C94103 * C1601 +
              C141384 * C1784) *
                 C22172 +
             (C94102 * C189 + C93949 * C501 + C94103 * C1690 +
              C141384 * C2040) *
                 C141468 +
             (C102614 + C102615) * C22173 + (C102932 + C102933) * C141358) *
                C141452 +
            ((C94129 + C94130) * C22172 + (C94378 + C94379) * C141468 +
             C115675 * C22173 + C116069 * C141358) *
                C141221) *
               C141294 * C816 -
           (((C102937 + C102936) * C141358 + (C102623 + C102622) * C22173 +
             C116070 * C141468 + C115678 * C22172) *
                C141221 +
            ((C102935 + C102934) * C141358 + (C102619 + C102618) * C22173 +
             (C102933 + C102932) * C141468 + (C102615 + C102614) * C22172) *
                C141452) *
               C141294 * C141485) *
              C818 +
          (((C115675 * C22172 + C116069 * C141468 +
             (C102622 + C102623) * C22173 + (C102936 + C102937) * C141358) *
                C141452 +
            ((C94981 + C94980) * C22172 + (C95289 + C95288) * C141468 +
             (C94102 * C2962 + C93949 * C3086 + C94103 * C7888 +
              C141384 * C8129) *
                 C22173 +
             (C94102 * C3028 + C93949 * C3256 + C94103 * C8007 +
              C141384 * C8471) *
                 C141358) *
                C141221) *
               C141294 * C141485 -
           (((C95288 + C95289) * C141358 + (C94980 + C94981) * C22173 +
             (C94381 + C94380) * C141468 + (C94134 + C94133) * C22172) *
                C141221 +
            (C116070 * C141358 + C115678 * C22173 +
             (C94379 + C94378) * C141468 + (C94130 + C94129) * C22172) *
                C141452) *
               C141294 * C816) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eezx[91] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139366 * C108 + C141452 * C114 + C139356 * C109 +
              C141221 * C115) *
                 C94102 +
             (C139366 * C276 + C141452 * C579 + C139356 * C277 +
              C141221 * C580) *
                 C93949 +
             (C79109 + C79110) * C94103 + (C79517 + C79518) * C141384) *
                C141468 +
            ((C69912 + C69913) * C94102 + (C70268 + C70269) * C93949 +
             C82369 * C94103 + C82775 * C141384) *
                C141358) *
               C141294 * C816 -
           (((C73791 + C73792) * C141384 + (C73477 + C73478) * C94103 +
             (C70271 + C70270) * C93949 + (C69917 + C69916) * C94102) *
                C141358 +
            (C82780 * C141384 + C82380 * C94103 + (C70269 + C70268) * C93949 +
             (C69913 + C69912) * C94102) *
                C141468) *
               C141294 * C141485) *
              C818 +
          ((((C69920 + C69921) * C94102 + (C70272 + C70273) * C93949 +
             (C77869 + C77870) * C94103 + (C78277 + C78278) * C141384) *
                C141468 +
            ((C69924 + C69925) * C94102 + (C70274 + C70275) * C93949 +
             (C139366 * C7886 + C141452 * C7889 + C139356 * C7888 +
              C141221 * C7891) *
                 C94103 +
             (C139366 * C8127 + C141452 * C8582 + C139356 * C8129 +
              C141221 * C8584) *
                 C141384) *
                C141358) *
               C141294 * C141485 -
           (((C78278 + C78277) * C141384 + (C77870 + C77869) * C94103 +
             (C70273 + C70272) * C93949 + (C69921 + C69920) * C94102) *
                C141358 +
            ((C79520 + C79519) * C141384 + (C79114 + C79113) * C94103 +
             (C139356 * C278 + C141221 * C581 + C139366 * C277 +
              C141452 * C580) *
                 C93949 +
             (C139356 * C110 + C141221 * C116 + C139366 * C109 +
              C141452 * C115) *
                 C94102) *
                C141468) *
               C141294 * C816) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eezy[91] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22172 * C108 + C141468 * C189 + C22173 * C823 + C141358 * C912) *
                 C94102 +
             (C22172 * C276 + C141468 * C635 + C22173 * C1006 +
              C141358 * C1419) *
                 C93949 +
             (C40064 + C40065) * C94103 + (C40902 + C40903) * C141384) *
                C141452 +
            ((C22199 + C22200) * C94102 + (C22728 + C22729) * C93949 +
             C40052 * C94103 + C40896 * C141384) *
                C141221) *
               C141294 * C816 -
           (((C39630 + C39631) * C141384 + (C38774 + C38775) * C94103 +
             (C23774 + C23775) * C93949 + (C23072 + C23073) * C94102) *
                C141221 +
            ((C44231 + C44230) * C141384 + (C43405 + C43404) * C94103 +
             (C22173 * C3084 + C141358 * C3362 + C22172 * C1006 +
              C141468 * C1419) *
                 C93949 +
             (C22173 * C2960 + C141358 * C3026 + C22172 * C823 +
              C141468 * C912) *
                 C94102) *
                C141452) *
               C141294 * C141485) *
              C818 +
          ((((C23073 + C23072) * C94102 + (C23775 + C23774) * C93949 +
             (C38775 + C38774) * C94103 + (C39631 + C39630) * C141384) *
                C141452 +
            ((C23069 + C23068) * C94102 + (C23773 + C23772) * C93949 +
             (C22172 * C3492 + C141468 * C3574 + C22173 * C7888 +
              C141358 * C8007) *
                 C94103 +
             (C22172 * C3648 + C141468 * C4006 + C22173 * C8129 +
              C141358 * C8685) *
                 C141384) *
                C141221) *
               C141294 * C141485 -
           (((C24751 + C24752) * C141384 + (C24104 + C24105) * C94103 +
             (C22731 + C22730) * C93949 + (C22204 + C22203) * C94102) *
                C141221 +
            (C40901 * C141384 + C40063 * C94103 + (C22729 + C22728) * C93949 +
             (C22200 + C22199) * C94102) *
                C141452) *
               C141294 * C816) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eezz[91] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C94623 * C108 + C94626 + C94626 + C93949 * C714 + C94624 * C1601 +
              C94627 + C94627 + C141384 * C2283) *
                 C141468 +
             (C103276 + C103277) * C141358) *
                C141452 +
            ((C94660 + C94661) * C141468 + C116461 * C141358) * C141221) *
               C141294 * C816 -
           (((C103281 + C103280) * C141358 + C116462 * C141468) * C141221 +
            ((C103279 + C103278) * C141358 + (C103277 + C103276) * C141468) *
                C141452) *
               C141294 * C141485) *
              C818 +
          (((C116461 * C141468 + (C103280 + C103281) * C141358) * C141452 +
            ((C95619 + C95618) * C141468 +
             (C94623 * C2962 + C98233 + C98233 + C93949 * C3418 +
              C94624 * C7888 + C98234 + C98234 + C141384 * C8795) *
                 C141358) *
                C141221) *
               C141294 * C141485 -
           (((C95618 + C95619) * C141358 + (C94663 + C94662) * C141468) *
                C141221 +
            (C116462 * C141358 + (C94661 + C94660) * C141468) * C141452) *
               C141294 * C816) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eexx[92] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C68675 * C108 + C68680 + C68680 + C141452 * C120 + C68677 * C109 +
              C68681 + C68681 + C141221 * C121) *
                 C93949 +
             (C78695 + C78696) * C141384) *
                C141468 +
            ((C69544 + C69545) * C93949 + C81967 * C141384) * C141358) *
               C1596 -
           (((C81977 + C81978) * C141384 + C81972 * C93949) * C141358 +
            ((C85493 + C85494) * C141384 + (C78696 + C78695) * C93949) *
                C141468) *
               C141487) *
              C141277 * C818 +
          ((((C78697 + C78698) * C93949 +
             (C68675 * C5326 + C78683 + C78683 + C141452 * C5334 +
              C68677 * C5327 + C78684 + C78684 + C141221 * C5335) *
                 C141384) *
                C141468 +
            ((C77457 + C77458) * C93949 +
             (C68675 * C13302 + C78685 + C78685 + C141452 * C13310 +
              C68677 * C14876 + C78686 + C78686 + C141221 * C14878) *
                 C141384) *
                C141358) *
               C141487 -
           (((C77458 + C77457) * C141384 + (C69549 + C69548) * C93949) *
                C141358 +
            ((C78698 + C78697) * C141384 +
             (C68677 * C110 + C68690 + C68690 + C141221 * C122 + C68675 * C109 +
              C68691 + C68691 + C141452 * C121) *
                 C93949) *
                C141468) *
               C1596) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eexy[92] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22172 * C108 + C141468 * C189 + C22173 * C823 + C141358 * C912) *
                 C139366 +
             (C22172 * C114 + C141468 * C195 + C22173 * C828 + C141358 * C917) *
                 C141452 +
             (C22199 + C22200) * C139356 + (C22201 + C22202) * C141221) *
                C93949 +
            ((C40064 + C40065) * C139366 + (C40066 + C40067) * C141452 +
             C40052 * C139356 + C40053 * C141221) *
                C141384) *
               C1596 -
           (((C40068 + C40069) * C141221 + (C40070 + C40071) * C139356 +
             (C46920 + C46921) * C141452 + (C46922 + C46923) * C139366) *
                C141384 +
            (C40062 * C141221 + C40063 * C139356 + (C40067 + C40066) * C141452 +
             (C40065 + C40064) * C139366) *
                C93949) *
               C141487) *
              C141277 * C818 +
          (((C40052 * C139366 + C40053 * C141452 + (C24105 + C24104) * C139356 +
             (C24103 + C24102) * C141221) *
                C93949 +
            ((C40071 + C40070) * C139366 + (C40069 + C40068) * C141452 +
             (C22172 * C5327 + C141468 * C5393 + C22173 * C14876 +
              C141358 * C14979) *
                 C139356 +
             (C22172 * C5331 + C141468 * C5397 + C22173 * C14877 +
              C141358 * C14980) *
                 C141221) *
                C141384) *
               C141487 -
           (((C24102 + C24103) * C141221 + (C24104 + C24105) * C139356 +
             C40062 * C141452 + C40063 * C139366) *
                C141384 +
            ((C22206 + C22205) * C141221 + (C22204 + C22203) * C139356 +
             (C22202 + C22201) * C141452 + (C22200 + C22199) * C139366) *
                C93949) *
               C1596) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eexz[92] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C94102 * C108 + C93949 * C276 + C94103 * C1601 +
              C141384 * C1784) *
                 C139366 +
             (C94102 * C114 + C93949 * C282 + C94103 * C1606 +
              C141384 * C1789) *
                 C141452 +
             (C94129 + C94130) * C139356 + (C94131 + C94132) * C141221) *
                C141468 +
            ((C102614 + C102615) * C139366 + (C102616 + C102617) * C141452 +
             C115675 * C139356 + C115676 * C141221) *
                C141358) *
               C1596 -
           (((C116861 + C116862) * C141221 + (C116863 + C116864) * C139356 +
             (C106156 + C106157) * C141452 + (C106158 + C106159) * C139366) *
                C141358 +
            ((C95981 + C95982) * C141221 + (C95983 + C95984) * C139356 +
             (C94103 * C5329 + C141384 * C5453 + C94102 * C1606 +
              C93949 * C1789) *
                 C141452 +
             (C94103 * C5325 + C141384 * C5449 + C94102 * C1601 +
              C93949 * C1784) *
                 C139366) *
                C141468) *
               C141487) *
              C141277 * C818 +
          ((((C95984 + C95983) * C139366 + (C95982 + C95981) * C141452 +
             (C95980 + C95979) * C139356 + (C95978 + C95977) * C141221) *
                C141468 +
            ((C116864 + C116863) * C139366 + (C116862 + C116861) * C141452 +
             (C94102 * C3492 + C93949 * C3648 + C94103 * C14876 +
              C141384 * C15091) *
                 C139356 +
             (C94102 * C3496 + C93949 * C3652 + C94103 * C14877 +
              C141384 * C15092) *
                 C141221) *
                C141358) *
               C141487 -
           (((C94978 + C94979) * C141221 + (C94980 + C94981) * C139356 +
             C115677 * C141452 + C115678 * C139366) *
                C141358 +
            ((C94136 + C94135) * C141221 + (C94134 + C94133) * C139356 +
             (C94132 + C94131) * C141452 + (C94130 + C94129) * C139366) *
                C141468) *
               C1596) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[92] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139366 * C108 + C141452 * C114 + C139356 * C109 +
              C141221 * C115) *
                 C22172 +
             (C139366 * C189 + C141452 * C362 + C139356 * C190 +
              C141221 * C363) *
                 C141468 +
             (C69912 + C69913) * C22173 + (C69914 + C69915) * C141358) *
                C93949 +
            ((C79109 + C79110) * C22172 + (C79111 + C79112) * C141468 +
             C82369 * C22173 + C82370 * C141358) *
                C141384) *
               C1596 -
           (((C82381 + C82382) * C141358 + (C82383 + C82384) * C22173 +
             (C85797 + C85798) * C141468 + (C85799 + C85800) * C22172) *
                C141384 +
            (C82379 * C141358 + C82380 * C22173 + (C79112 + C79111) * C141468 +
             (C79110 + C79109) * C22172) *
                C93949) *
               C141487) *
              C141277 * C818 +
          ((((C79113 + C79114) * C22172 + (C79115 + C79116) * C141468 +
             (C77869 + C77870) * C22173 + (C77871 + C77872) * C141358) *
                C93949 +
            ((C139366 * C5326 + C141452 * C5330 + C139356 * C5327 +
              C141221 * C5331) *
                 C22172 +
             (C139366 * C5392 + C141452 * C5508 + C139356 * C5393 +
              C141221 * C5509) *
                 C141468 +
             (C139366 * C13302 + C141452 * C13306 + C139356 * C14876 +
              C141221 * C14877) *
                 C22173 +
             (C139366 * C13395 + C141452 * C13558 + C139356 * C14979 +
              C141221 * C15209) *
                 C141358) *
                C141384) *
               C141487 -
           (((C77872 + C77871) * C141358 + (C77870 + C77869) * C22173 +
             (C79116 + C79115) * C141468 + (C79114 + C79113) * C22172) *
                C141384 +
            ((C69923 + C69922) * C141358 + (C69921 + C69920) * C22173 +
             (C139356 * C191 + C141221 * C364 + C139366 * C190 +
              C141452 * C363) *
                 C141468 +
             (C139356 * C110 + C141221 * C116 + C139366 * C109 +
              C141452 * C115) *
                 C22172) *
                C93949) *
               C1596) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[92] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22434 * C108 + C22437 + C22437 + C141468 * C419 + C22435 * C823 +
              C22438 + C22438 + C141358 * C1171) *
                 C141452 +
             (C22471 + C22472) * C141221) *
                C93949 +
            ((C40492 + C40493) * C141452 + C40478 * C141221) * C141384) *
               C1596 -
           (((C40494 + C40495) * C141221 + (C47230 + C47231) * C141452) *
                C141384 +
            (C40483 * C141221 + (C40493 + C40492) * C141452) * C93949) *
               C141487) *
              C141277 * C818 +
          (((C40478 * C141452 + (C24435 + C24434) * C141221) * C93949 +
            ((C40495 + C40494) * C141452 +
             (C22434 * C5327 + C29550 + C29550 + C141468 * C5563 +
              C22435 * C14876 + C29551 + C29551 + C141358 * C15308) *
                 C141221) *
                C141384) *
               C141487 -
           (((C24434 + C24435) * C141221 + C40483 * C141452) * C141384 +
            ((C22474 + C22473) * C141221 + (C22472 + C22471) * C141452) *
                C93949) *
               C1596) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[92] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C94102 * C108 + C93949 * C276 + C94103 * C1601 +
              C141384 * C1784) *
                 C22172 +
             (C94102 * C189 + C93949 * C501 + C94103 * C1690 +
              C141384 * C2040) *
                 C141468 +
             (C102614 + C102615) * C22173 + (C102932 + C102933) * C141358) *
                C141452 +
            ((C94129 + C94130) * C22172 + (C94378 + C94379) * C141468 +
             C115675 * C22173 + C116069 * C141358) *
                C141221) *
               C1596 -
           (((C117259 + C117260) * C141358 + (C116863 + C116864) * C22173 +
             (C96331 + C96332) * C141468 + (C95983 + C95984) * C22172) *
                C141221 +
            ((C106488 + C106489) * C141358 + (C106158 + C106159) * C22173 +
             (C94103 * C5391 + C141384 * C5619 + C94102 * C1690 +
              C93949 * C2040) *
                 C141468 +
             (C94103 * C5325 + C141384 * C5449 + C94102 * C1601 +
              C93949 * C1784) *
                 C22172) *
                C141452) *
               C141487) *
              C141277 * C818 +
          ((((C95984 + C95983) * C22172 + (C96332 + C96331) * C141468 +
             (C116864 + C116863) * C22173 + (C117260 + C117259) * C141358) *
                C141452 +
            ((C95980 + C95979) * C22172 + (C96330 + C96329) * C141468 +
             (C94102 * C3492 + C93949 * C3648 + C94103 * C14876 +
              C141384 * C15091) *
                 C22173 +
             (C94102 * C3574 + C93949 * C3866 + C94103 * C14979 +
              C141384 * C15420) *
                 C141358) *
                C141221) *
               C141487 -
           (((C95288 + C95289) * C141358 + (C94980 + C94981) * C22173 +
             (C94381 + C94380) * C141468 + (C94134 + C94133) * C22172) *
                C141221 +
            (C116070 * C141358 + C115678 * C22173 +
             (C94379 + C94378) * C141468 + (C94130 + C94129) * C22172) *
                C141452) *
               C1596) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eezx[92] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139366 * C108 + C141452 * C114 + C139356 * C109 +
              C141221 * C115) *
                 C94102 +
             (C139366 * C276 + C141452 * C579 + C139356 * C277 +
              C141221 * C580) *
                 C93949 +
             (C79109 + C79110) * C94103 + (C79517 + C79518) * C141384) *
                C141468 +
            ((C69912 + C69913) * C94102 + (C70268 + C70269) * C93949 +
             C82369 * C94103 + C82775 * C141384) *
                C141358) *
               C1596 -
           (((C82781 + C82782) * C141384 + (C82383 + C82384) * C94103 +
             C82780 * C93949 + C82380 * C94102) *
                C141358 +
            ((C86099 + C86100) * C141384 + (C85799 + C85800) * C94103 +
             (C79518 + C79517) * C93949 + (C79110 + C79109) * C94102) *
                C141468) *
               C141487) *
              C141277 * C818 +
          ((((C79113 + C79114) * C94102 + (C79519 + C79520) * C93949 +
             (C139366 * C5326 + C141452 * C5330 + C139356 * C5327 +
              C141221 * C5331) *
                 C94103 +
             (C139366 * C5450 + C141452 * C5674 + C139356 * C5451 +
              C141221 * C5675) *
                 C141384) *
                C141468 +
            ((C77869 + C77870) * C94102 + (C78277 + C78278) * C93949 +
             (C139366 * C13302 + C141452 * C13306 + C139356 * C14876 +
              C141221 * C14877) *
                 C94103 +
             (C139366 * C13476 + C141452 * C13798 + C139356 * C15091 +
              C141221 * C15528) *
                 C141384) *
                C141358) *
               C141487 -
           (((C78278 + C78277) * C141384 + (C77870 + C77869) * C94103 +
             (C70273 + C70272) * C93949 + (C69921 + C69920) * C94102) *
                C141358 +
            ((C79520 + C79519) * C141384 + (C79114 + C79113) * C94103 +
             (C139356 * C278 + C141221 * C581 + C139366 * C277 +
              C141452 * C580) *
                 C93949 +
             (C139356 * C110 + C141221 * C116 + C139366 * C109 +
              C141452 * C115) *
                 C94102) *
                C141468) *
               C1596) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eezy[92] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22172 * C108 + C141468 * C189 + C22173 * C823 + C141358 * C912) *
                 C94102 +
             (C22172 * C276 + C141468 * C635 + C22173 * C1006 +
              C141358 * C1419) *
                 C93949 +
             (C40064 + C40065) * C94103 + (C40902 + C40903) * C141384) *
                C141452 +
            ((C22199 + C22200) * C94102 + (C22728 + C22729) * C93949 +
             C40052 * C94103 + C40896 * C141384) *
                C141221) *
               C1596 -
           (((C40904 + C40905) * C141384 + (C40070 + C40071) * C94103 +
             C40901 * C93949 + C40063 * C94102) *
                C141221 +
            ((C47530 + C47531) * C141384 + (C46922 + C46923) * C94103 +
             (C40903 + C40902) * C93949 + (C40065 + C40064) * C94102) *
                C141452) *
               C141487) *
              C141277 * C818 +
          (((C40052 * C94102 + C40896 * C93949 + (C40071 + C40070) * C94103 +
             (C40905 + C40904) * C141384) *
                C141452 +
            ((C24105 + C24104) * C94102 + (C24752 + C24751) * C93949 +
             (C22172 * C5327 + C141468 * C5393 + C22173 * C14876 +
              C141358 * C14979) *
                 C94103 +
             (C22172 * C5451 + C141468 * C5729 + C22173 * C15091 +
              C141358 * C15627) *
                 C141384) *
                C141221) *
               C141487 -
           (((C24751 + C24752) * C141384 + (C24104 + C24105) * C94103 +
             (C22731 + C22730) * C93949 + (C22204 + C22203) * C94102) *
                C141221 +
            (C40901 * C141384 + C40063 * C94103 + (C22729 + C22728) * C93949 +
             (C22200 + C22199) * C94102) *
                C141452) *
               C1596) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eezz[92] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C94623 * C108 + C94626 + C94626 + C93949 * C714 + C94624 * C1601 +
              C94627 + C94627 + C141384 * C2283) *
                 C141468 +
             (C103276 + C103277) * C141358) *
                C141452 +
            ((C94660 + C94661) * C141468 + C116461 * C141358) * C141221) *
               C1596 -
           (((C117659 + C117660) * C141358 + (C96679 + C96680) * C141468) *
                C141221 +
            ((C106821 + C106822) * C141358 +
             (C94624 * C5325 + C96665 + C96665 + C141384 * C5781 +
              C94623 * C1601 + C96666 + C96666 + C93949 * C2283) *
                 C141468) *
                C141452) *
               C141487) *
              C141277 * C818 +
          ((((C96680 + C96679) * C141468 + (C117660 + C117659) * C141358) *
                C141452 +
            ((C96678 + C96677) * C141468 +
             (C94623 * C3492 + C99130 + C99130 + C93949 * C4076 +
              C94624 * C14876 + C99131 + C99131 + C141384 * C15738) *
                 C141358) *
                C141221) *
               C141487 -
           (((C95618 + C95619) * C141358 + (C94663 + C94662) * C141468) *
                C141221 +
            (C116462 * C141358 + (C94661 + C94660) * C141468) * C141452) *
               C1596) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eexx[93] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C68675 * C108 + C68680 + C68680 + C141452 * C120 + C68677 * C109 +
              C68681 + C68681 + C141221 * C121) *
                 C93949 +
             (C78695 + C78696) * C141384) *
                C141468 +
            ((C69544 + C69545) * C93949 + C81967 * C141384) * C141358) *
               C141294 * C2374 -
           (((C73153 + C73154) * C141384 + (C69547 + C69546) * C93949) *
                C141358 +
            (C81972 * C141384 + (C69545 + C69544) * C93949) * C141468) *
               C141294 * C141485) *
              C2376 +
          ((((C69548 + C69549) * C93949 + (C77457 + C77458) * C141384) *
                C141468 +
            ((C69550 + C69551) * C93949 +
             (C68675 * C7886 + C70592 + C70592 + C141452 * C7892 +
              C68677 * C7888 + C70593 + C70593 + C141221 * C7894) *
                 C141384) *
                C141358) *
               C141294 * C141485 -
           (((C77458 + C77457) * C141384 + (C69549 + C69548) * C93949) *
                C141358 +
            ((C78698 + C78697) * C141384 +
             (C68677 * C110 + C68690 + C68690 + C141221 * C122 + C68675 * C109 +
              C68691 + C68691 + C141452 * C121) *
                 C93949) *
                C141468) *
               C141294 * C2374) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eexy[93] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22172 * C108 + C141468 * C189 + C22173 * C823 + C141358 * C912) *
                 C139366 +
             (C22172 * C114 + C141468 * C195 + C22173 * C828 + C141358 * C917) *
                 C141452 +
             (C22199 + C22200) * C139356 + (C22201 + C22202) * C141221) *
                C93949 +
            ((C40064 + C40065) * C139366 + (C40066 + C40067) * C141452 +
             C40052 * C139356 + C40053 * C141221) *
                C141384) *
               C141294 * C2374 -
           (((C38772 + C38773) * C141221 + (C38774 + C38775) * C139356 +
             (C43407 + C43406) * C141452 + (C43405 + C43404) * C139366) *
                C141384 +
            ((C23070 + C23071) * C141221 + (C23072 + C23073) * C139356 +
             (C22173 * C2964 + C141358 * C3030 + C22172 * C828 +
              C141468 * C917) *
                 C141452 +
             (C22173 * C2960 + C141358 * C3026 + C22172 * C823 +
              C141468 * C912) *
                 C139366) *
                C93949) *
               C141294 * C141485) *
              C2376 +
          ((((C23073 + C23072) * C139366 + (C23071 + C23070) * C141452 +
             (C23069 + C23068) * C139356 + (C23067 + C23066) * C141221) *
                C93949 +
            ((C38775 + C38774) * C139366 + (C38773 + C38772) * C141452 +
             (C22172 * C3492 + C141468 * C3574 + C22173 * C7888 +
              C141358 * C8007) *
                 C139356 +
             (C22172 * C3496 + C141468 * C3578 + C22173 * C7891 +
              C141358 * C8010) *
                 C141221) *
                C141384) *
               C141294 * C141485 -
           (((C24102 + C24103) * C141221 + (C24104 + C24105) * C139356 +
             C40062 * C141452 + C40063 * C139366) *
                C141384 +
            ((C22206 + C22205) * C141221 + (C22204 + C22203) * C139356 +
             (C22202 + C22201) * C141452 + (C22200 + C22199) * C139366) *
                C93949) *
               C141294 * C2374) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eexz[93] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C94102 * C108 + C93949 * C276 + C94103 * C1601 +
              C141384 * C1784) *
                 C139366 +
             (C94102 * C114 + C93949 * C282 + C94103 * C1606 +
              C141384 * C1789) *
                 C141452 +
             (C94129 + C94130) * C139356 + (C94131 + C94132) * C141221) *
                C141468 +
            ((C102614 + C102615) * C139366 + (C102616 + C102617) * C141452 +
             C115675 * C139356 + C115676 * C141221) *
                C141358) *
               C141294 * C2374 -
           (((C102625 + C102624) * C141221 + (C102623 + C102622) * C139356 +
             (C102621 + C102620) * C141452 + (C102619 + C102618) * C139366) *
                C141358 +
            (C115677 * C141221 + C115678 * C139356 +
             (C102617 + C102616) * C141452 + (C102615 + C102614) * C139366) *
                C141468) *
               C141294 * C141485) *
              C2376 +
          (((C115675 * C139366 + C115676 * C141452 +
             (C94981 + C94980) * C139356 + (C94979 + C94978) * C141221) *
                C141468 +
            ((C102622 + C102623) * C139366 + (C102624 + C102625) * C141452 +
             (C94102 * C2962 + C93949 * C3086 + C94103 * C7888 +
              C141384 * C8129) *
                 C139356 +
             (C94102 * C2966 + C93949 * C3090 + C94103 * C7891 +
              C141384 * C8132) *
                 C141221) *
                C141358) *
               C141294 * C141485 -
           (((C94978 + C94979) * C141221 + (C94980 + C94981) * C139356 +
             C115677 * C141452 + C115678 * C139366) *
                C141358 +
            ((C94136 + C94135) * C141221 + (C94134 + C94133) * C139356 +
             (C94132 + C94131) * C141452 + (C94130 + C94129) * C139366) *
                C141468) *
               C141294 * C2374) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[93] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139366 * C108 + C141452 * C114 + C139356 * C109 +
              C141221 * C115) *
                 C22172 +
             (C139366 * C189 + C141452 * C362 + C139356 * C190 +
              C141221 * C363) *
                 C141468 +
             (C69912 + C69913) * C22173 + (C69914 + C69915) * C141358) *
                C93949 +
            ((C79109 + C79110) * C22172 + (C79111 + C79112) * C141468 +
             C82369 * C22173 + C82370 * C141358) *
                C141384) *
               C141294 * C2374 -
           (((C73475 + C73476) * C141358 + (C73477 + C73478) * C22173 +
             C82379 * C141468 + C82380 * C22172) *
                C141384 +
            ((C69919 + C69918) * C141358 + (C69917 + C69916) * C22173 +
             (C69915 + C69914) * C141468 + (C69913 + C69912) * C22172) *
                C93949) *
               C141294 * C141485) *
              C2376 +
          ((((C69920 + C69921) * C22172 + (C69922 + C69923) * C141468 +
             (C69924 + C69925) * C22173 + (C69926 + C69927) * C141358) *
                C93949 +
            ((C77869 + C77870) * C22172 + (C77871 + C77872) * C141468 +
             (C139366 * C7886 + C141452 * C7889 + C139356 * C7888 +
              C141221 * C7891) *
                 C22173 +
             (C139366 * C8005 + C141452 * C8243 + C139356 * C8007 +
              C141221 * C8245) *
                 C141358) *
                C141384) *
               C141294 * C141485 -
           (((C77872 + C77871) * C141358 + (C77870 + C77869) * C22173 +
             (C79116 + C79115) * C141468 + (C79114 + C79113) * C22172) *
                C141384 +
            ((C69923 + C69922) * C141358 + (C69921 + C69920) * C22173 +
             (C139356 * C191 + C141221 * C364 + C139366 * C190 +
              C141452 * C363) *
                 C141468 +
             (C139356 * C110 + C141221 * C116 + C139366 * C109 +
              C141452 * C115) *
                 C22172) *
                C93949) *
               C141294 * C2374) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[93] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22434 * C108 + C22437 + C22437 + C141468 * C419 + C22435 * C823 +
              C22438 + C22438 + C141358 * C1171) *
                 C141452 +
             (C22471 + C22472) * C141221) *
                C93949 +
            ((C40492 + C40493) * C141452 + C40478 * C141221) * C141384) *
               C141294 * C2374 -
           (((C39214 + C39215) * C141221 + (C43827 + C43826) * C141452) *
                C141384 +
            ((C23442 + C23443) * C141221 +
             (C22435 * C2960 + C23428 + C23428 + C141358 * C3196 +
              C22434 * C823 + C23429 + C23429 + C141468 * C1171) *
                 C141452) *
                C93949) *
               C141294 * C141485) *
              C2376 +
          ((((C23443 + C23442) * C141452 + (C23441 + C23440) * C141221) *
                C93949 +
            ((C39215 + C39214) * C141452 +
             (C22434 * C3492 + C27003 + C27003 + C141468 * C3792 +
              C22435 * C7888 + C27004 + C27004 + C141358 * C8346) *
                 C141221) *
                C141384) *
               C141294 * C141485 -
           (((C24434 + C24435) * C141221 + C40483 * C141452) * C141384 +
            ((C22474 + C22473) * C141221 + (C22472 + C22471) * C141452) *
                C93949) *
               C141294 * C2374) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[93] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C94102 * C108 + C93949 * C276 + C94103 * C1601 +
              C141384 * C1784) *
                 C22172 +
             (C94102 * C189 + C93949 * C501 + C94103 * C1690 +
              C141384 * C2040) *
                 C141468 +
             (C102614 + C102615) * C22173 + (C102932 + C102933) * C141358) *
                C141452 +
            ((C94129 + C94130) * C22172 + (C94378 + C94379) * C141468 +
             C115675 * C22173 + C116069 * C141358) *
                C141221) *
               C141294 * C2374 -
           (((C102937 + C102936) * C141358 + (C102623 + C102622) * C22173 +
             C116070 * C141468 + C115678 * C22172) *
                C141221 +
            ((C102935 + C102934) * C141358 + (C102619 + C102618) * C22173 +
             (C102933 + C102932) * C141468 + (C102615 + C102614) * C22172) *
                C141452) *
               C141294 * C141485) *
              C2376 +
          (((C115675 * C22172 + C116069 * C141468 +
             (C102622 + C102623) * C22173 + (C102936 + C102937) * C141358) *
                C141452 +
            ((C94981 + C94980) * C22172 + (C95289 + C95288) * C141468 +
             (C94102 * C2962 + C93949 * C3086 + C94103 * C7888 +
              C141384 * C8129) *
                 C22173 +
             (C94102 * C3028 + C93949 * C3256 + C94103 * C8007 +
              C141384 * C8471) *
                 C141358) *
                C141221) *
               C141294 * C141485 -
           (((C95288 + C95289) * C141358 + (C94980 + C94981) * C22173 +
             (C94381 + C94380) * C141468 + (C94134 + C94133) * C22172) *
                C141221 +
            (C116070 * C141358 + C115678 * C22173 +
             (C94379 + C94378) * C141468 + (C94130 + C94129) * C22172) *
                C141452) *
               C141294 * C2374) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eezx[93] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139366 * C108 + C141452 * C114 + C139356 * C109 +
              C141221 * C115) *
                 C94102 +
             (C139366 * C276 + C141452 * C579 + C139356 * C277 +
              C141221 * C580) *
                 C93949 +
             (C79109 + C79110) * C94103 + (C79517 + C79518) * C141384) *
                C141468 +
            ((C69912 + C69913) * C94102 + (C70268 + C70269) * C93949 +
             C82369 * C94103 + C82775 * C141384) *
                C141358) *
               C141294 * C2374 -
           (((C73791 + C73792) * C141384 + (C73477 + C73478) * C94103 +
             (C70271 + C70270) * C93949 + (C69917 + C69916) * C94102) *
                C141358 +
            (C82780 * C141384 + C82380 * C94103 + (C70269 + C70268) * C93949 +
             (C69913 + C69912) * C94102) *
                C141468) *
               C141294 * C141485) *
              C2376 +
          ((((C69920 + C69921) * C94102 + (C70272 + C70273) * C93949 +
             (C77869 + C77870) * C94103 + (C78277 + C78278) * C141384) *
                C141468 +
            ((C69924 + C69925) * C94102 + (C70274 + C70275) * C93949 +
             (C139366 * C7886 + C141452 * C7889 + C139356 * C7888 +
              C141221 * C7891) *
                 C94103 +
             (C139366 * C8127 + C141452 * C8582 + C139356 * C8129 +
              C141221 * C8584) *
                 C141384) *
                C141358) *
               C141294 * C141485 -
           (((C78278 + C78277) * C141384 + (C77870 + C77869) * C94103 +
             (C70273 + C70272) * C93949 + (C69921 + C69920) * C94102) *
                C141358 +
            ((C79520 + C79519) * C141384 + (C79114 + C79113) * C94103 +
             (C139356 * C278 + C141221 * C581 + C139366 * C277 +
              C141452 * C580) *
                 C93949 +
             (C139356 * C110 + C141221 * C116 + C139366 * C109 +
              C141452 * C115) *
                 C94102) *
                C141468) *
               C141294 * C2374) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eezy[93] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22172 * C108 + C141468 * C189 + C22173 * C823 + C141358 * C912) *
                 C94102 +
             (C22172 * C276 + C141468 * C635 + C22173 * C1006 +
              C141358 * C1419) *
                 C93949 +
             (C40064 + C40065) * C94103 + (C40902 + C40903) * C141384) *
                C141452 +
            ((C22199 + C22200) * C94102 + (C22728 + C22729) * C93949 +
             C40052 * C94103 + C40896 * C141384) *
                C141221) *
               C141294 * C2374 -
           (((C39630 + C39631) * C141384 + (C38774 + C38775) * C94103 +
             (C23774 + C23775) * C93949 + (C23072 + C23073) * C94102) *
                C141221 +
            ((C44231 + C44230) * C141384 + (C43405 + C43404) * C94103 +
             (C22173 * C3084 + C141358 * C3362 + C22172 * C1006 +
              C141468 * C1419) *
                 C93949 +
             (C22173 * C2960 + C141358 * C3026 + C22172 * C823 +
              C141468 * C912) *
                 C94102) *
                C141452) *
               C141294 * C141485) *
              C2376 +
          ((((C23073 + C23072) * C94102 + (C23775 + C23774) * C93949 +
             (C38775 + C38774) * C94103 + (C39631 + C39630) * C141384) *
                C141452 +
            ((C23069 + C23068) * C94102 + (C23773 + C23772) * C93949 +
             (C22172 * C3492 + C141468 * C3574 + C22173 * C7888 +
              C141358 * C8007) *
                 C94103 +
             (C22172 * C3648 + C141468 * C4006 + C22173 * C8129 +
              C141358 * C8685) *
                 C141384) *
                C141221) *
               C141294 * C141485 -
           (((C24751 + C24752) * C141384 + (C24104 + C24105) * C94103 +
             (C22731 + C22730) * C93949 + (C22204 + C22203) * C94102) *
                C141221 +
            (C40901 * C141384 + C40063 * C94103 + (C22729 + C22728) * C93949 +
             (C22200 + C22199) * C94102) *
                C141452) *
               C141294 * C2374) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eezz[93] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C94623 * C108 + C94626 + C94626 + C93949 * C714 + C94624 * C1601 +
              C94627 + C94627 + C141384 * C2283) *
                 C141468 +
             (C103276 + C103277) * C141358) *
                C141452 +
            ((C94660 + C94661) * C141468 + C116461 * C141358) * C141221) *
               C141294 * C2374 -
           (((C103281 + C103280) * C141358 + C116462 * C141468) * C141221 +
            ((C103279 + C103278) * C141358 + (C103277 + C103276) * C141468) *
                C141452) *
               C141294 * C141485) *
              C2376 +
          (((C116461 * C141468 + (C103280 + C103281) * C141358) * C141452 +
            ((C95619 + C95618) * C141468 +
             (C94623 * C2962 + C98233 + C98233 + C93949 * C3418 +
              C94624 * C7888 + C98234 + C98234 + C141384 * C8795) *
                 C141358) *
                C141221) *
               C141294 * C141485 -
           (((C95618 + C95619) * C141358 + (C94663 + C94662) * C141468) *
                C141221 +
            (C116462 * C141358 + (C94661 + C94660) * C141468) * C141452) *
               C141294 * C2374) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eexx[94] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C68675 * C108 + C68680 + C68680 + C141452 * C120 + C68677 * C109 +
             C68681 + C68681 + C141221 * C121) *
                C93949 +
            (C78695 + C78696) * C141384) *
               C141468 +
           ((C69544 + C69545) * C93949 + C81967 * C141384) * C141358) *
              C141294 * C2956 -
          (((C73153 + C73154) * C141384 + (C69547 + C69546) * C93949) *
               C141358 +
           (C81972 * C141384 + (C69545 + C69544) * C93949) * C141468) *
              C141294 * C2957 +
          ((C72394 * C93949 + (C73154 + C73153) * C141384) * C141468 +
           ((C72407 + C72406) * C93949 +
            (C68675 * C10551 + C73143 + C73143 + C141452 * C10555 +
             C68677 * C10552 + C73144 + C73144 + C141221 * C10556) *
                C141384) *
               C141358) *
              C141294 * C2958) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eexy[94] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C22172 * C108 + C141468 * C189 + C22173 * C823 + C141358 * C912) *
                C139366 +
            (C22172 * C114 + C141468 * C195 + C22173 * C828 + C141358 * C917) *
                C141452 +
            (C22199 + C22200) * C139356 + (C22201 + C22202) * C141221) *
               C93949 +
           ((C40064 + C40065) * C139366 + (C40066 + C40067) * C141452 +
            C40052 * C139356 + C40053 * C141221) *
               C141384) *
              C141294 * C2956 -
          (((C38772 + C38773) * C141221 + (C38774 + C38775) * C139356 +
            (C43407 + C43406) * C141452 + (C43405 + C43404) * C139366) *
               C141384 +
           ((C23070 + C23071) * C141221 + (C23072 + C23073) * C139356 +
            (C22173 * C2964 + C141358 * C3030 + C22172 * C828 +
             C141468 * C917) *
                C141452 +
            (C22173 * C2960 + C141358 * C3026 + C22172 * C823 +
             C141468 * C912) *
                C139366) *
               C93949) *
              C141294 * C2957 +
          (((C22172 * C2960 + C141468 * C3026 + C22173 * C6729 +
             C141358 * C6880) *
                C139366 +
            (C22172 * C2964 + C141468 * C3030 + C22173 * C6732 +
             C141358 * C6883) *
                C141452 +
            (C22172 * C2961 + C141468 * C3027 + C22173 * C6728 +
             C141358 * C6879) *
                C139356 +
            (C22172 * C2965 + C141468 * C3031 + C22173 * C6731 +
             C141358 * C6882) *
                C141221) *
               C93949 +
           ((C22172 * C7887 + C141468 * C8006 + C22173 * C10551 +
             C141358 * C10677) *
                C139366 +
            (C22172 * C7890 + C141468 * C8009 + C22173 * C10553 +
             C141358 * C10679) *
                C141452 +
            (C22172 * C7886 + C141468 * C8005 + C22173 * C10552 +
             C141358 * C10678) *
                C139356 +
            (C22172 * C7889 + C141468 * C8008 + C22173 * C10554 +
             C141358 * C10680) *
                C141221) *
               C141384) *
              C141294 * C2958) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eexz[94] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C94102 * C108 + C93949 * C276 + C94103 * C1601 + C141384 * C1784) *
                C139366 +
            (C94102 * C114 + C93949 * C282 + C94103 * C1606 + C141384 * C1789) *
                C141452 +
            (C94129 + C94130) * C139356 + (C94131 + C94132) * C141221) *
               C141468 +
           ((C102614 + C102615) * C139366 + (C102616 + C102617) * C141452 +
            C115675 * C139356 + C115676 * C141221) *
               C141358) *
              C141294 * C2956 -
          (((C102625 + C102624) * C141221 + (C102623 + C102622) * C139356 +
            (C102621 + C102620) * C141452 + (C102619 + C102618) * C139366) *
               C141358 +
           (C115677 * C141221 + C115678 * C139356 +
            (C102617 + C102616) * C141452 + (C102615 + C102614) * C139366) *
               C141468) *
              C141294 * C2957 +
          ((C105329 * C139366 + C105330 * C141452 +
            (C102622 + C102623) * C139356 + (C102624 + C102625) * C141221) *
               C141468 +
           ((C105344 + C105343) * C139366 + (C105342 + C105341) * C141452 +
            (C94102 * C6728 + C93949 * C7001 + C94103 * C10552 +
             C141384 * C10780) *
                C139356 +
            (C94102 * C6731 + C93949 * C7004 + C94103 * C10554 +
             C141384 * C10782) *
                C141221) *
               C141358) *
              C141294 * C2958) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eeyx[94] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139366 * C108 + C141452 * C114 + C139356 * C109 +
             C141221 * C115) *
                C22172 +
            (C139366 * C189 + C141452 * C362 + C139356 * C190 +
             C141221 * C363) *
                C141468 +
            (C69912 + C69913) * C22173 + (C69914 + C69915) * C141358) *
               C93949 +
           ((C79109 + C79110) * C22172 + (C79111 + C79112) * C141468 +
            C82369 * C22173 + C82370 * C141358) *
               C141384) *
              C141294 * C2956 -
          (((C73475 + C73476) * C141358 + (C73477 + C73478) * C22173 +
            C82379 * C141468 + C82380 * C22172) *
               C141384 +
           ((C69919 + C69918) * C141358 + (C69917 + C69916) * C22173 +
            (C69915 + C69914) * C141468 + (C69913 + C69912) * C22172) *
               C93949) *
              C141294 * C2957 +
          ((C72637 * C22172 + C72638 * C141468 + (C72650 + C72649) * C22173 +
            (C72648 + C72647) * C141358) *
               C93949 +
           ((C73478 + C73477) * C22172 + (C73476 + C73475) * C141468 +
            (C139366 * C10551 + C141452 * C10553 + C139356 * C10552 +
             C141221 * C10554) *
                C22173 +
            (C139366 * C10677 + C141452 * C10901 + C139356 * C10678 +
             C141221 * C10902) *
                C141358) *
               C141384) *
              C141294 * C2958) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eeyy[94] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C22434 * C108 + C22437 + C22437 + C141468 * C419 + C22435 * C823 +
             C22438 + C22438 + C141358 * C1171) *
                C141452 +
            (C22471 + C22472) * C141221) *
               C93949 +
           ((C40492 + C40493) * C141452 + C40478 * C141221) * C141384) *
              C141294 * C2956 -
          (((C39214 + C39215) * C141221 + (C43827 + C43826) * C141452) *
               C141384 +
           ((C23442 + C23443) * C141221 +
            (C22435 * C2960 + C23428 + C23428 + C141358 * C3196 +
             C22434 * C823 + C23429 + C23429 + C141468 * C1171) *
                C141452) *
               C93949) *
              C141294 * C2957 +
          (((C22434 * C2960 + C26156 + C26156 + C141468 * C3196 +
             C22435 * C6729 + C26157 + C26157 + C141358 * C7289) *
                C141452 +
            (C22434 * C2961 + C26158 + C26158 + C141468 * C3197 +
             C22435 * C6728 + C26159 + C26159 + C141358 * C7288) *
                C141221) *
               C93949 +
           ((C22434 * C7887 + C42718 + C42718 + C141468 * C8345 +
             C22435 * C10551 + C42719 + C42719 + C141358 * C11025) *
                C141452 +
            (C22434 * C7886 + C42720 + C42720 + C141468 * C8344 +
             C22435 * C10552 + C42721 + C42721 + C141358 * C11026) *
                C141221) *
               C141384) *
              C141294 * C2958) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eeyz[94] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C94102 * C108 + C93949 * C276 + C94103 * C1601 + C141384 * C1784) *
                C22172 +
            (C94102 * C189 + C93949 * C501 + C94103 * C1690 + C141384 * C2040) *
                C141468 +
            (C102614 + C102615) * C22173 + (C102932 + C102933) * C141358) *
               C141452 +
           ((C94129 + C94130) * C22172 + (C94378 + C94379) * C141468 +
            C115675 * C22173 + C116069 * C141358) *
               C141221) *
              C141294 * C2956 -
          (((C102937 + C102936) * C141358 + (C102623 + C102622) * C22173 +
            C116070 * C141468 + C115678 * C22172) *
               C141221 +
           ((C102935 + C102934) * C141358 + (C102619 + C102618) * C22173 +
            (C102933 + C102932) * C141468 + (C102615 + C102614) * C22172) *
               C141452) *
              C141294 * C2957 +
          ((C105329 * C22172 + C105571 * C141468 +
            (C105344 + C105343) * C22173 + (C105577 + C105576) * C141358) *
               C141452 +
           ((C102622 + C102623) * C22172 + (C102936 + C102937) * C141468 +
            (C94102 * C6728 + C93949 * C7001 + C94103 * C10552 +
             C141384 * C10780) *
                C22173 +
            (C94102 * C6879 + C93949 * C7413 + C94103 * C10678 +
             C141384 * C11132) *
                C141358) *
               C141221) *
              C141294 * C2958) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eezx[94] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139366 * C108 + C141452 * C114 + C139356 * C109 +
             C141221 * C115) *
                C94102 +
            (C139366 * C276 + C141452 * C579 + C139356 * C277 +
             C141221 * C580) *
                C93949 +
            (C79109 + C79110) * C94103 + (C79517 + C79518) * C141384) *
               C141468 +
           ((C69912 + C69913) * C94102 + (C70268 + C70269) * C93949 +
            C82369 * C94103 + C82775 * C141384) *
               C141358) *
              C141294 * C2956 -
          (((C73791 + C73792) * C141384 + (C73477 + C73478) * C94103 +
            (C70271 + C70270) * C93949 + (C69917 + C69916) * C94102) *
               C141358 +
           (C82780 * C141384 + C82380 * C94103 + (C70269 + C70268) * C93949 +
            (C69913 + C69912) * C94102) *
               C141468) *
              C141294 * C2957 +
          ((C72637 * C94102 + C72880 * C93949 + (C73478 + C73477) * C94103 +
            (C73792 + C73791) * C141384) *
               C141468 +
           ((C72650 + C72649) * C94102 + (C72887 + C72886) * C93949 +
            (C139366 * C10551 + C141452 * C10553 + C139356 * C10552 +
             C141221 * C10554) *
                C94103 +
            (C139366 * C10779 + C141452 * C11237 + C139356 * C10780 +
             C141221 * C11238) *
                C141384) *
               C141358) *
              C141294 * C2958) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eezy[94] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C22172 * C108 + C141468 * C189 + C22173 * C823 + C141358 * C912) *
                C94102 +
            (C22172 * C276 + C141468 * C635 + C22173 * C1006 +
             C141358 * C1419) *
                C93949 +
            (C40064 + C40065) * C94103 + (C40902 + C40903) * C141384) *
               C141452 +
           ((C22199 + C22200) * C94102 + (C22728 + C22729) * C93949 +
            C40052 * C94103 + C40896 * C141384) *
               C141221) *
              C141294 * C2956 -
          (((C39630 + C39631) * C141384 + (C38774 + C38775) * C94103 +
            (C23774 + C23775) * C93949 + (C23072 + C23073) * C94102) *
               C141221 +
           ((C44231 + C44230) * C141384 + (C43405 + C43404) * C94103 +
            (C22173 * C3084 + C141358 * C3362 + C22172 * C1006 +
             C141468 * C1419) *
                C93949 +
            (C22173 * C2960 + C141358 * C3026 + C22172 * C823 +
             C141468 * C912) *
                C94102) *
               C141452) *
              C141294 * C2957 +
          (((C22172 * C2960 + C141468 * C3026 + C22173 * C6729 +
             C141358 * C6880) *
                C94102 +
            (C22172 * C3084 + C141468 * C3362 + C22173 * C7002 +
             C141358 * C7655) *
                C93949 +
            (C22172 * C7887 + C141468 * C8006 + C22173 * C10551 +
             C141358 * C10677) *
                C94103 +
            (C22172 * C8128 + C141468 * C8684 + C22173 * C10779 +
             C141358 * C11349) *
                C141384) *
               C141452 +
           ((C22172 * C2961 + C141468 * C3027 + C22173 * C6728 +
             C141358 * C6879) *
                C94102 +
            (C22172 * C3085 + C141468 * C3363 + C22173 * C7001 +
             C141358 * C7654) *
                C93949 +
            (C22172 * C7886 + C141468 * C8005 + C22173 * C10552 +
             C141358 * C10678) *
                C94103 +
            (C22172 * C8127 + C141468 * C8683 + C22173 * C10780 +
             C141358 * C11350) *
                C141384) *
               C141221) *
              C141294 * C2958) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eezz[94] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C94623 * C108 + C94626 + C94626 + C93949 * C714 + C94624 * C1601 +
             C94627 + C94627 + C141384 * C2283) *
                C141468 +
            (C103276 + C103277) * C141358) *
               C141452 +
           ((C94660 + C94661) * C141468 + C116461 * C141358) * C141221) *
              C141294 * C2956 -
          (((C103281 + C103280) * C141358 + C116462 * C141468) * C141221 +
           ((C103279 + C103278) * C141358 + (C103277 + C103276) * C141468) *
               C141452) *
              C141294 * C2957 +
          ((C105807 * C141468 + (C105819 + C105818) * C141358) * C141452 +
           ((C103280 + C103281) * C141468 +
            (C94623 * C6728 + C103262 + C103262 + C93949 * C7764 +
             C94624 * C10552 + C103263 + C103263 + C141384 * C11450) *
                C141358) *
               C141221) *
              C141294 * C2958) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eexx[95] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C68675 * C108 + C68680 + C68680 + C141452 * C120 + C68677 * C109 +
              C68681 + C68681 + C141221 * C121) *
                 C93949 +
             (C78695 + C78696) * C141384) *
                C141468 +
            ((C69544 + C69545) * C93949 + C81967 * C141384) * C141358) *
               C1596 -
           (((C81977 + C81978) * C141384 + C81972 * C93949) * C141358 +
            ((C85493 + C85494) * C141384 + (C78696 + C78695) * C93949) *
                C141468) *
               C141487) *
              C2374 +
          (((C81967 * C93949 + (C81978 + C81977) * C141384) * C141468 +
            ((C73154 + C73153) * C93949 +
             (C68675 * C13303 + C75833 + C75833 + C141452 * C13311 +
              C68677 * C13304 + C75834 + C75834 + C141221 * C13312) *
                 C141384) *
                C141358) *
               C141487 -
           (((C73153 + C73154) * C141384 + (C69547 + C69546) * C93949) *
                C141358 +
            (C81972 * C141384 + (C69545 + C69544) * C93949) * C141468) *
               C1596) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eexy[95] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22172 * C108 + C141468 * C189 + C22173 * C823 + C141358 * C912) *
                 C139366 +
             (C22172 * C114 + C141468 * C195 + C22173 * C828 + C141358 * C917) *
                 C141452 +
             (C22199 + C22200) * C139356 + (C22201 + C22202) * C141221) *
                C93949 +
            ((C40064 + C40065) * C139366 + (C40066 + C40067) * C141452 +
             C40052 * C139356 + C40053 * C141221) *
                C141384) *
               C1596 -
           (((C40068 + C40069) * C141221 + (C40070 + C40071) * C139356 +
             (C46920 + C46921) * C141452 + (C46922 + C46923) * C139366) *
                C141384 +
            (C40062 * C141221 + C40063 * C139356 + (C40067 + C40066) * C141452 +
             (C40065 + C40064) * C139366) *
                C93949) *
               C141487) *
              C2374 +
          ((((C43404 + C43405) * C139366 + (C43406 + C43407) * C141452 +
             (C38775 + C38774) * C139356 + (C38773 + C38772) * C141221) *
                C93949 +
            ((C22172 * C13301 + C141468 * C13393 + C22173 * C13303 +
              C141358 * C13394) *
                 C139366 +
             (C22172 * C13305 + C141468 * C13397 + C22173 * C13307 +
              C141358 * C13398) *
                 C141452 +
             (C22172 * C13302 + C141468 * C13395 + C22173 * C13304 +
              C141358 * C13396) *
                 C139356 +
             (C22172 * C13306 + C141468 * C13399 + C22173 * C13308 +
              C141358 * C13400) *
                 C141221) *
                C141384) *
               C141487 -
           (((C38772 + C38773) * C141221 + (C38774 + C38775) * C139356 +
             (C43407 + C43406) * C141452 + (C43405 + C43404) * C139366) *
                C141384 +
            ((C23070 + C23071) * C141221 + (C23072 + C23073) * C139356 +
             (C22173 * C2964 + C141358 * C3030 + C22172 * C828 +
              C141468 * C917) *
                 C141452 +
             (C22173 * C2960 + C141358 * C3026 + C22172 * C823 +
              C141468 * C912) *
                 C139366) *
                C93949) *
               C1596) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eexz[95] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C94102 * C108 + C93949 * C276 + C94103 * C1601 +
              C141384 * C1784) *
                 C139366 +
             (C94102 * C114 + C93949 * C282 + C94103 * C1606 +
              C141384 * C1789) *
                 C141452 +
             (C94129 + C94130) * C139356 + (C94131 + C94132) * C141221) *
                C141468 +
            ((C102614 + C102615) * C139366 + (C102616 + C102617) * C141452 +
             C115675 * C139356 + C115676 * C141221) *
                C141358) *
               C1596 -
           (((C116861 + C116862) * C141221 + (C116863 + C116864) * C139356 +
             (C106156 + C106157) * C141452 + (C106158 + C106159) * C139366) *
                C141358 +
            ((C95981 + C95982) * C141221 + (C95983 + C95984) * C139356 +
             (C94103 * C5329 + C141384 * C5453 + C94102 * C1606 +
              C93949 * C1789) *
                 C141452 +
             (C94103 * C5325 + C141384 * C5449 + C94102 * C1601 +
              C93949 * C1784) *
                 C139366) *
                C141468) *
               C141487) *
              C2374 +
          ((((C106159 + C106158) * C139366 + (C106157 + C106156) * C141452 +
             (C116864 + C116863) * C139356 + (C116862 + C116861) * C141221) *
                C141468 +
            ((C106155 + C106154) * C139366 + (C106153 + C106152) * C141452 +
             (C94102 * C7886 + C93949 * C8127 + C94103 * C13304 +
              C141384 * C13478) *
                 C139356 +
             (C94102 * C7889 + C93949 * C8130 + C94103 * C13308 +
              C141384 * C13482) *
                 C141221) *
                C141358) *
               C141487 -
           (((C102625 + C102624) * C141221 + (C102623 + C102622) * C139356 +
             (C102621 + C102620) * C141452 + (C102619 + C102618) * C139366) *
                C141358 +
            (C115677 * C141221 + C115678 * C139356 +
             (C102617 + C102616) * C141452 + (C102615 + C102614) * C139366) *
                C141468) *
               C1596) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eeyx[95] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139366 * C108 + C141452 * C114 + C139356 * C109 +
              C141221 * C115) *
                 C22172 +
             (C139366 * C189 + C141452 * C362 + C139356 * C190 +
              C141221 * C363) *
                 C141468 +
             (C69912 + C69913) * C22173 + (C69914 + C69915) * C141358) *
                C93949 +
            ((C79109 + C79110) * C22172 + (C79111 + C79112) * C141468 +
             C82369 * C22173 + C82370 * C141358) *
                C141384) *
               C1596 -
           (((C82381 + C82382) * C141358 + (C82383 + C82384) * C22173 +
             (C85797 + C85798) * C141468 + (C85799 + C85800) * C22172) *
                C141384 +
            (C82379 * C141358 + C82380 * C22173 + (C79112 + C79111) * C141468 +
             (C79110 + C79109) * C22172) *
                C93949) *
               C141487) *
              C2374 +
          (((C82369 * C22172 + C82370 * C141468 + (C73478 + C73477) * C22173 +
             (C73476 + C73475) * C141358) *
                C93949 +
            ((C82384 + C82383) * C22172 + (C82382 + C82381) * C141468 +
             (C139366 * C13303 + C141452 * C13307 + C139356 * C13304 +
              C141221 * C13308) *
                 C22173 +
             (C139366 * C13394 + C141452 * C13559 + C139356 * C13396 +
              C141221 * C13560) *
                 C141358) *
                C141384) *
               C141487 -
           (((C73475 + C73476) * C141358 + (C73477 + C73478) * C22173 +
             C82379 * C141468 + C82380 * C22172) *
                C141384 +
            ((C69919 + C69918) * C141358 + (C69917 + C69916) * C22173 +
             (C69915 + C69914) * C141468 + (C69913 + C69912) * C22172) *
                C93949) *
               C1596) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eeyy[95] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22434 * C108 + C22437 + C22437 + C141468 * C419 + C22435 * C823 +
              C22438 + C22438 + C141358 * C1171) *
                 C141452 +
             (C22471 + C22472) * C141221) *
                C93949 +
            ((C40492 + C40493) * C141452 + C40478 * C141221) * C141384) *
               C1596 -
           (((C40494 + C40495) * C141221 + (C47230 + C47231) * C141452) *
                C141384 +
            (C40483 * C141221 + (C40493 + C40492) * C141452) * C93949) *
               C141487) *
              C2374 +
          ((((C43826 + C43827) * C141452 + (C39215 + C39214) * C141221) *
                C93949 +
            ((C22434 * C13301 + C43818 + C43818 + C141468 * C13635 +
              C22435 * C13303 + C43819 + C43819 + C141358 * C13636) *
                 C141452 +
             (C22434 * C13302 + C43820 + C43820 + C141468 * C13637 +
              C22435 * C13304 + C43821 + C43821 + C141358 * C13638) *
                 C141221) *
                C141384) *
               C141487 -
           (((C39214 + C39215) * C141221 + (C43827 + C43826) * C141452) *
                C141384 +
            ((C23442 + C23443) * C141221 +
             (C22435 * C2960 + C23428 + C23428 + C141358 * C3196 +
              C22434 * C823 + C23429 + C23429 + C141468 * C1171) *
                 C141452) *
                C93949) *
               C1596) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eeyz[95] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C94102 * C108 + C93949 * C276 + C94103 * C1601 +
              C141384 * C1784) *
                 C22172 +
             (C94102 * C189 + C93949 * C501 + C94103 * C1690 +
              C141384 * C2040) *
                 C141468 +
             (C102614 + C102615) * C22173 + (C102932 + C102933) * C141358) *
                C141452 +
            ((C94129 + C94130) * C22172 + (C94378 + C94379) * C141468 +
             C115675 * C22173 + C116069 * C141358) *
                C141221) *
               C1596 -
           (((C117259 + C117260) * C141358 + (C116863 + C116864) * C22173 +
             (C96331 + C96332) * C141468 + (C95983 + C95984) * C22172) *
                C141221 +
            ((C106488 + C106489) * C141358 + (C106158 + C106159) * C22173 +
             (C94103 * C5391 + C141384 * C5619 + C94102 * C1690 +
              C93949 * C2040) *
                 C141468 +
             (C94103 * C5325 + C141384 * C5449 + C94102 * C1601 +
              C93949 * C1784) *
                 C22172) *
                C141452) *
               C141487) *
              C2374 +
          ((((C106159 + C106158) * C22172 + (C106489 + C106488) * C141468 +
             (C106155 + C106154) * C22173 + (C106487 + C106486) * C141358) *
                C141452 +
            ((C116864 + C116863) * C22172 + (C117260 + C117259) * C141468 +
             (C94102 * C7886 + C93949 * C8127 + C94103 * C13304 +
              C141384 * C13478) *
                 C22173 +
             (C94102 * C8005 + C93949 * C8469 + C94103 * C13396 +
              C141384 * C13722) *
                 C141358) *
                C141221) *
               C141487 -
           (((C102937 + C102936) * C141358 + (C102623 + C102622) * C22173 +
             C116070 * C141468 + C115678 * C22172) *
                C141221 +
            ((C102935 + C102934) * C141358 + (C102619 + C102618) * C22173 +
             (C102933 + C102932) * C141468 + (C102615 + C102614) * C22172) *
                C141452) *
               C1596) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eezx[95] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139366 * C108 + C141452 * C114 + C139356 * C109 +
              C141221 * C115) *
                 C94102 +
             (C139366 * C276 + C141452 * C579 + C139356 * C277 +
              C141221 * C580) *
                 C93949 +
             (C79109 + C79110) * C94103 + (C79517 + C79518) * C141384) *
                C141468 +
            ((C69912 + C69913) * C94102 + (C70268 + C70269) * C93949 +
             C82369 * C94103 + C82775 * C141384) *
                C141358) *
               C1596 -
           (((C82781 + C82782) * C141384 + (C82383 + C82384) * C94103 +
             C82780 * C93949 + C82380 * C94102) *
                C141358 +
            ((C86099 + C86100) * C141384 + (C85799 + C85800) * C94103 +
             (C79518 + C79517) * C93949 + (C79110 + C79109) * C94102) *
                C141468) *
               C141487) *
              C2374 +
          (((C82369 * C94102 + C82775 * C93949 + (C82384 + C82383) * C94103 +
             (C82782 + C82781) * C141384) *
                C141468 +
            ((C73478 + C73477) * C94102 + (C73792 + C73791) * C93949 +
             (C139366 * C13303 + C141452 * C13307 + C139356 * C13304 +
              C141221 * C13308) *
                 C94103 +
             (C139366 * C13477 + C141452 * C13799 + C139356 * C13478 +
              C141221 * C13800) *
                 C141384) *
                C141358) *
               C141487 -
           (((C73791 + C73792) * C141384 + (C73477 + C73478) * C94103 +
             (C70271 + C70270) * C93949 + (C69917 + C69916) * C94102) *
                C141358 +
            (C82780 * C141384 + C82380 * C94103 + (C70269 + C70268) * C93949 +
             (C69913 + C69912) * C94102) *
                C141468) *
               C1596) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eezy[95] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22172 * C108 + C141468 * C189 + C22173 * C823 + C141358 * C912) *
                 C94102 +
             (C22172 * C276 + C141468 * C635 + C22173 * C1006 +
              C141358 * C1419) *
                 C93949 +
             (C40064 + C40065) * C94103 + (C40902 + C40903) * C141384) *
                C141452 +
            ((C22199 + C22200) * C94102 + (C22728 + C22729) * C93949 +
             C40052 * C94103 + C40896 * C141384) *
                C141221) *
               C1596 -
           (((C40904 + C40905) * C141384 + (C40070 + C40071) * C94103 +
             C40901 * C93949 + C40063 * C94102) *
                C141221 +
            ((C47530 + C47531) * C141384 + (C46922 + C46923) * C94103 +
             (C40903 + C40902) * C93949 + (C40065 + C40064) * C94102) *
                C141452) *
               C141487) *
              C2374 +
          ((((C43404 + C43405) * C94102 + (C44230 + C44231) * C93949 +
             (C22172 * C13301 + C141468 * C13393 + C22173 * C13303 +
              C141358 * C13394) *
                 C94103 +
             (C22172 * C13475 + C141468 * C13875 + C22173 * C13477 +
              C141358 * C13876) *
                 C141384) *
                C141452 +
            ((C38775 + C38774) * C94102 + (C39631 + C39630) * C93949 +
             (C22172 * C13302 + C141468 * C13395 + C22173 * C13304 +
              C141358 * C13396) *
                 C94103 +
             (C22172 * C13476 + C141468 * C13877 + C22173 * C13478 +
              C141358 * C13878) *
                 C141384) *
                C141221) *
               C141487 -
           (((C39630 + C39631) * C141384 + (C38774 + C38775) * C94103 +
             (C23774 + C23775) * C93949 + (C23072 + C23073) * C94102) *
                C141221 +
            ((C44231 + C44230) * C141384 + (C43405 + C43404) * C94103 +
             (C22173 * C3084 + C141358 * C3362 + C22172 * C1006 +
              C141468 * C1419) *
                 C93949 +
             (C22173 * C2960 + C141358 * C3026 + C22172 * C823 +
              C141468 * C912) *
                 C94102) *
                C141452) *
               C1596) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eezz[95] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C94623 * C108 + C94626 + C94626 + C93949 * C714 + C94624 * C1601 +
              C94627 + C94627 + C141384 * C2283) *
                 C141468 +
             (C103276 + C103277) * C141358) *
                C141452 +
            ((C94660 + C94661) * C141468 + C116461 * C141358) * C141221) *
               C1596 -
           (((C117659 + C117660) * C141358 + (C96679 + C96680) * C141468) *
                C141221 +
            ((C106821 + C106822) * C141358 +
             (C94624 * C5325 + C96665 + C96665 + C141384 * C5781 +
              C94623 * C1601 + C96666 + C96666 + C93949 * C2283) *
                 C141468) *
                C141452) *
               C141487) *
              C2374 +
          ((((C106822 + C106821) * C141468 + (C106820 + C106819) * C141358) *
                C141452 +
            ((C117660 + C117659) * C141468 +
             (C94623 * C7886 + C104220 + C104220 + C93949 * C8793 +
              C94624 * C13304 + C104221 + C104221 + C141384 * C13956) *
                 C141358) *
                C141221) *
               C141487 -
           (((C103281 + C103280) * C141358 + C116462 * C141468) * C141221 +
            ((C103279 + C103278) * C141358 + (C103277 + C103276) * C141468) *
                C141452) *
               C1596) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eexx[96] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C68675 * C108 + C68680 + C68680 + C141452 * C120 + C68677 * C109 +
              C68681 + C68681 + C141221 * C121) *
                 C93949 +
             (C78695 + C78696) * C141384) *
                C141468 +
            ((C69544 + C69545) * C93949 + C81967 * C141384) * C141358) *
               C4148 -
           (((C81977 + C81978) * C141384 + C81972 * C93949) * C141358 +
            ((C85493 + C85494) * C141384 + (C78696 + C78695) * C93949) *
                C141468) *
               C141487) *
              C141277 * C2376 +
          ((((C78697 + C78698) * C93949 +
             (C68675 * C5326 + C78683 + C78683 + C141452 * C5334 +
              C68677 * C5327 + C78684 + C78684 + C141221 * C5335) *
                 C141384) *
                C141468 +
            ((C77457 + C77458) * C93949 +
             (C68675 * C13302 + C78685 + C78685 + C141452 * C13310 +
              C68677 * C14876 + C78686 + C78686 + C141221 * C14878) *
                 C141384) *
                C141358) *
               C141487 -
           (((C77458 + C77457) * C141384 + (C69549 + C69548) * C93949) *
                C141358 +
            ((C78698 + C78697) * C141384 +
             (C68677 * C110 + C68690 + C68690 + C141221 * C122 + C68675 * C109 +
              C68691 + C68691 + C141452 * C121) *
                 C93949) *
                C141468) *
               C4148) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eexy[96] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22172 * C108 + C141468 * C189 + C22173 * C823 + C141358 * C912) *
                 C139366 +
             (C22172 * C114 + C141468 * C195 + C22173 * C828 + C141358 * C917) *
                 C141452 +
             (C22199 + C22200) * C139356 + (C22201 + C22202) * C141221) *
                C93949 +
            ((C40064 + C40065) * C139366 + (C40066 + C40067) * C141452 +
             C40052 * C139356 + C40053 * C141221) *
                C141384) *
               C4148 -
           (((C40068 + C40069) * C141221 + (C40070 + C40071) * C139356 +
             (C46920 + C46921) * C141452 + (C46922 + C46923) * C139366) *
                C141384 +
            (C40062 * C141221 + C40063 * C139356 + (C40067 + C40066) * C141452 +
             (C40065 + C40064) * C139366) *
                C93949) *
               C141487) *
              C141277 * C2376 +
          (((C40052 * C139366 + C40053 * C141452 + (C24105 + C24104) * C139356 +
             (C24103 + C24102) * C141221) *
                C93949 +
            ((C40071 + C40070) * C139366 + (C40069 + C40068) * C141452 +
             (C22172 * C5327 + C141468 * C5393 + C22173 * C14876 +
              C141358 * C14979) *
                 C139356 +
             (C22172 * C5331 + C141468 * C5397 + C22173 * C14877 +
              C141358 * C14980) *
                 C141221) *
                C141384) *
               C141487 -
           (((C24102 + C24103) * C141221 + (C24104 + C24105) * C139356 +
             C40062 * C141452 + C40063 * C139366) *
                C141384 +
            ((C22206 + C22205) * C141221 + (C22204 + C22203) * C139356 +
             (C22202 + C22201) * C141452 + (C22200 + C22199) * C139366) *
                C93949) *
               C4148) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eexz[96] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C94102 * C108 + C93949 * C276 + C94103 * C1601 +
              C141384 * C1784) *
                 C139366 +
             (C94102 * C114 + C93949 * C282 + C94103 * C1606 +
              C141384 * C1789) *
                 C141452 +
             (C94129 + C94130) * C139356 + (C94131 + C94132) * C141221) *
                C141468 +
            ((C102614 + C102615) * C139366 + (C102616 + C102617) * C141452 +
             C115675 * C139356 + C115676 * C141221) *
                C141358) *
               C4148 -
           (((C116861 + C116862) * C141221 + (C116863 + C116864) * C139356 +
             (C106156 + C106157) * C141452 + (C106158 + C106159) * C139366) *
                C141358 +
            ((C95981 + C95982) * C141221 + (C95983 + C95984) * C139356 +
             (C94103 * C5329 + C141384 * C5453 + C94102 * C1606 +
              C93949 * C1789) *
                 C141452 +
             (C94103 * C5325 + C141384 * C5449 + C94102 * C1601 +
              C93949 * C1784) *
                 C139366) *
                C141468) *
               C141487) *
              C141277 * C2376 +
          ((((C95984 + C95983) * C139366 + (C95982 + C95981) * C141452 +
             (C95980 + C95979) * C139356 + (C95978 + C95977) * C141221) *
                C141468 +
            ((C116864 + C116863) * C139366 + (C116862 + C116861) * C141452 +
             (C94102 * C3492 + C93949 * C3648 + C94103 * C14876 +
              C141384 * C15091) *
                 C139356 +
             (C94102 * C3496 + C93949 * C3652 + C94103 * C14877 +
              C141384 * C15092) *
                 C141221) *
                C141358) *
               C141487 -
           (((C94978 + C94979) * C141221 + (C94980 + C94981) * C139356 +
             C115677 * C141452 + C115678 * C139366) *
                C141358 +
            ((C94136 + C94135) * C141221 + (C94134 + C94133) * C139356 +
             (C94132 + C94131) * C141452 + (C94130 + C94129) * C139366) *
                C141468) *
               C4148) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[96] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139366 * C108 + C141452 * C114 + C139356 * C109 +
              C141221 * C115) *
                 C22172 +
             (C139366 * C189 + C141452 * C362 + C139356 * C190 +
              C141221 * C363) *
                 C141468 +
             (C69912 + C69913) * C22173 + (C69914 + C69915) * C141358) *
                C93949 +
            ((C79109 + C79110) * C22172 + (C79111 + C79112) * C141468 +
             C82369 * C22173 + C82370 * C141358) *
                C141384) *
               C4148 -
           (((C82381 + C82382) * C141358 + (C82383 + C82384) * C22173 +
             (C85797 + C85798) * C141468 + (C85799 + C85800) * C22172) *
                C141384 +
            (C82379 * C141358 + C82380 * C22173 + (C79112 + C79111) * C141468 +
             (C79110 + C79109) * C22172) *
                C93949) *
               C141487) *
              C141277 * C2376 +
          ((((C79113 + C79114) * C22172 + (C79115 + C79116) * C141468 +
             (C77869 + C77870) * C22173 + (C77871 + C77872) * C141358) *
                C93949 +
            ((C139366 * C5326 + C141452 * C5330 + C139356 * C5327 +
              C141221 * C5331) *
                 C22172 +
             (C139366 * C5392 + C141452 * C5508 + C139356 * C5393 +
              C141221 * C5509) *
                 C141468 +
             (C139366 * C13302 + C141452 * C13306 + C139356 * C14876 +
              C141221 * C14877) *
                 C22173 +
             (C139366 * C13395 + C141452 * C13558 + C139356 * C14979 +
              C141221 * C15209) *
                 C141358) *
                C141384) *
               C141487 -
           (((C77872 + C77871) * C141358 + (C77870 + C77869) * C22173 +
             (C79116 + C79115) * C141468 + (C79114 + C79113) * C22172) *
                C141384 +
            ((C69923 + C69922) * C141358 + (C69921 + C69920) * C22173 +
             (C139356 * C191 + C141221 * C364 + C139366 * C190 +
              C141452 * C363) *
                 C141468 +
             (C139356 * C110 + C141221 * C116 + C139366 * C109 +
              C141452 * C115) *
                 C22172) *
                C93949) *
               C4148) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[96] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22434 * C108 + C22437 + C22437 + C141468 * C419 + C22435 * C823 +
              C22438 + C22438 + C141358 * C1171) *
                 C141452 +
             (C22471 + C22472) * C141221) *
                C93949 +
            ((C40492 + C40493) * C141452 + C40478 * C141221) * C141384) *
               C4148 -
           (((C40494 + C40495) * C141221 + (C47230 + C47231) * C141452) *
                C141384 +
            (C40483 * C141221 + (C40493 + C40492) * C141452) * C93949) *
               C141487) *
              C141277 * C2376 +
          (((C40478 * C141452 + (C24435 + C24434) * C141221) * C93949 +
            ((C40495 + C40494) * C141452 +
             (C22434 * C5327 + C29550 + C29550 + C141468 * C5563 +
              C22435 * C14876 + C29551 + C29551 + C141358 * C15308) *
                 C141221) *
                C141384) *
               C141487 -
           (((C24434 + C24435) * C141221 + C40483 * C141452) * C141384 +
            ((C22474 + C22473) * C141221 + (C22472 + C22471) * C141452) *
                C93949) *
               C4148) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[96] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C94102 * C108 + C93949 * C276 + C94103 * C1601 +
              C141384 * C1784) *
                 C22172 +
             (C94102 * C189 + C93949 * C501 + C94103 * C1690 +
              C141384 * C2040) *
                 C141468 +
             (C102614 + C102615) * C22173 + (C102932 + C102933) * C141358) *
                C141452 +
            ((C94129 + C94130) * C22172 + (C94378 + C94379) * C141468 +
             C115675 * C22173 + C116069 * C141358) *
                C141221) *
               C4148 -
           (((C117259 + C117260) * C141358 + (C116863 + C116864) * C22173 +
             (C96331 + C96332) * C141468 + (C95983 + C95984) * C22172) *
                C141221 +
            ((C106488 + C106489) * C141358 + (C106158 + C106159) * C22173 +
             (C94103 * C5391 + C141384 * C5619 + C94102 * C1690 +
              C93949 * C2040) *
                 C141468 +
             (C94103 * C5325 + C141384 * C5449 + C94102 * C1601 +
              C93949 * C1784) *
                 C22172) *
                C141452) *
               C141487) *
              C141277 * C2376 +
          ((((C95984 + C95983) * C22172 + (C96332 + C96331) * C141468 +
             (C116864 + C116863) * C22173 + (C117260 + C117259) * C141358) *
                C141452 +
            ((C95980 + C95979) * C22172 + (C96330 + C96329) * C141468 +
             (C94102 * C3492 + C93949 * C3648 + C94103 * C14876 +
              C141384 * C15091) *
                 C22173 +
             (C94102 * C3574 + C93949 * C3866 + C94103 * C14979 +
              C141384 * C15420) *
                 C141358) *
                C141221) *
               C141487 -
           (((C95288 + C95289) * C141358 + (C94980 + C94981) * C22173 +
             (C94381 + C94380) * C141468 + (C94134 + C94133) * C22172) *
                C141221 +
            (C116070 * C141358 + C115678 * C22173 +
             (C94379 + C94378) * C141468 + (C94130 + C94129) * C22172) *
                C141452) *
               C4148) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eezx[96] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139366 * C108 + C141452 * C114 + C139356 * C109 +
              C141221 * C115) *
                 C94102 +
             (C139366 * C276 + C141452 * C579 + C139356 * C277 +
              C141221 * C580) *
                 C93949 +
             (C79109 + C79110) * C94103 + (C79517 + C79518) * C141384) *
                C141468 +
            ((C69912 + C69913) * C94102 + (C70268 + C70269) * C93949 +
             C82369 * C94103 + C82775 * C141384) *
                C141358) *
               C4148 -
           (((C82781 + C82782) * C141384 + (C82383 + C82384) * C94103 +
             C82780 * C93949 + C82380 * C94102) *
                C141358 +
            ((C86099 + C86100) * C141384 + (C85799 + C85800) * C94103 +
             (C79518 + C79517) * C93949 + (C79110 + C79109) * C94102) *
                C141468) *
               C141487) *
              C141277 * C2376 +
          ((((C79113 + C79114) * C94102 + (C79519 + C79520) * C93949 +
             (C139366 * C5326 + C141452 * C5330 + C139356 * C5327 +
              C141221 * C5331) *
                 C94103 +
             (C139366 * C5450 + C141452 * C5674 + C139356 * C5451 +
              C141221 * C5675) *
                 C141384) *
                C141468 +
            ((C77869 + C77870) * C94102 + (C78277 + C78278) * C93949 +
             (C139366 * C13302 + C141452 * C13306 + C139356 * C14876 +
              C141221 * C14877) *
                 C94103 +
             (C139366 * C13476 + C141452 * C13798 + C139356 * C15091 +
              C141221 * C15528) *
                 C141384) *
                C141358) *
               C141487 -
           (((C78278 + C78277) * C141384 + (C77870 + C77869) * C94103 +
             (C70273 + C70272) * C93949 + (C69921 + C69920) * C94102) *
                C141358 +
            ((C79520 + C79519) * C141384 + (C79114 + C79113) * C94103 +
             (C139356 * C278 + C141221 * C581 + C139366 * C277 +
              C141452 * C580) *
                 C93949 +
             (C139356 * C110 + C141221 * C116 + C139366 * C109 +
              C141452 * C115) *
                 C94102) *
                C141468) *
               C4148) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eezy[96] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22172 * C108 + C141468 * C189 + C22173 * C823 + C141358 * C912) *
                 C94102 +
             (C22172 * C276 + C141468 * C635 + C22173 * C1006 +
              C141358 * C1419) *
                 C93949 +
             (C40064 + C40065) * C94103 + (C40902 + C40903) * C141384) *
                C141452 +
            ((C22199 + C22200) * C94102 + (C22728 + C22729) * C93949 +
             C40052 * C94103 + C40896 * C141384) *
                C141221) *
               C4148 -
           (((C40904 + C40905) * C141384 + (C40070 + C40071) * C94103 +
             C40901 * C93949 + C40063 * C94102) *
                C141221 +
            ((C47530 + C47531) * C141384 + (C46922 + C46923) * C94103 +
             (C40903 + C40902) * C93949 + (C40065 + C40064) * C94102) *
                C141452) *
               C141487) *
              C141277 * C2376 +
          (((C40052 * C94102 + C40896 * C93949 + (C40071 + C40070) * C94103 +
             (C40905 + C40904) * C141384) *
                C141452 +
            ((C24105 + C24104) * C94102 + (C24752 + C24751) * C93949 +
             (C22172 * C5327 + C141468 * C5393 + C22173 * C14876 +
              C141358 * C14979) *
                 C94103 +
             (C22172 * C5451 + C141468 * C5729 + C22173 * C15091 +
              C141358 * C15627) *
                 C141384) *
                C141221) *
               C141487 -
           (((C24751 + C24752) * C141384 + (C24104 + C24105) * C94103 +
             (C22731 + C22730) * C93949 + (C22204 + C22203) * C94102) *
                C141221 +
            (C40901 * C141384 + C40063 * C94103 + (C22729 + C22728) * C93949 +
             (C22200 + C22199) * C94102) *
                C141452) *
               C4148) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eezz[96] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C94623 * C108 + C94626 + C94626 + C93949 * C714 + C94624 * C1601 +
              C94627 + C94627 + C141384 * C2283) *
                 C141468 +
             (C103276 + C103277) * C141358) *
                C141452 +
            ((C94660 + C94661) * C141468 + C116461 * C141358) * C141221) *
               C4148 -
           (((C117659 + C117660) * C141358 + (C96679 + C96680) * C141468) *
                C141221 +
            ((C106821 + C106822) * C141358 +
             (C94624 * C5325 + C96665 + C96665 + C141384 * C5781 +
              C94623 * C1601 + C96666 + C96666 + C93949 * C2283) *
                 C141468) *
                C141452) *
               C141487) *
              C141277 * C2376 +
          ((((C96680 + C96679) * C141468 + (C117660 + C117659) * C141358) *
                C141452 +
            ((C96678 + C96677) * C141468 +
             (C94623 * C3492 + C99130 + C99130 + C93949 * C4076 +
              C94624 * C14876 + C99131 + C99131 + C141384 * C15738) *
                 C141358) *
                C141221) *
               C141487 -
           (((C95618 + C95619) * C141358 + (C94663 + C94662) * C141468) *
                C141221 +
            (C116462 * C141358 + (C94661 + C94660) * C141468) * C141452) *
               C4148) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eexx[97] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C68675 * C108 + C68680 + C68680 + C141452 * C120 + C68677 * C109 +
              C68681 + C68681 + C141221 * C121) *
                 C93949 +
             (C78695 + C78696) * C141384) *
                C141468 +
            ((C69544 + C69545) * C93949 + C81967 * C141384) * C141358) *
               C4148 -
           (((C81977 + C81978) * C141384 + C81972 * C93949) * C141358 +
            ((C85493 + C85494) * C141384 + (C78696 + C78695) * C93949) *
                C141468) *
               C141487) *
              C816 +
          (((C81967 * C93949 + (C81978 + C81977) * C141384) * C141468 +
            ((C73154 + C73153) * C93949 +
             (C68675 * C13303 + C75833 + C75833 + C141452 * C13311 +
              C68677 * C13304 + C75834 + C75834 + C141221 * C13312) *
                 C141384) *
                C141358) *
               C141487 -
           (((C73153 + C73154) * C141384 + (C69547 + C69546) * C93949) *
                C141358 +
            (C81972 * C141384 + (C69545 + C69544) * C93949) * C141468) *
               C4148) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eexy[97] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22172 * C108 + C141468 * C189 + C22173 * C823 + C141358 * C912) *
                 C139366 +
             (C22172 * C114 + C141468 * C195 + C22173 * C828 + C141358 * C917) *
                 C141452 +
             (C22199 + C22200) * C139356 + (C22201 + C22202) * C141221) *
                C93949 +
            ((C40064 + C40065) * C139366 + (C40066 + C40067) * C141452 +
             C40052 * C139356 + C40053 * C141221) *
                C141384) *
               C4148 -
           (((C40068 + C40069) * C141221 + (C40070 + C40071) * C139356 +
             (C46920 + C46921) * C141452 + (C46922 + C46923) * C139366) *
                C141384 +
            (C40062 * C141221 + C40063 * C139356 + (C40067 + C40066) * C141452 +
             (C40065 + C40064) * C139366) *
                C93949) *
               C141487) *
              C816 +
          ((((C43404 + C43405) * C139366 + (C43406 + C43407) * C141452 +
             (C38775 + C38774) * C139356 + (C38773 + C38772) * C141221) *
                C93949 +
            ((C22172 * C13301 + C141468 * C13393 + C22173 * C13303 +
              C141358 * C13394) *
                 C139366 +
             (C22172 * C13305 + C141468 * C13397 + C22173 * C13307 +
              C141358 * C13398) *
                 C141452 +
             (C22172 * C13302 + C141468 * C13395 + C22173 * C13304 +
              C141358 * C13396) *
                 C139356 +
             (C22172 * C13306 + C141468 * C13399 + C22173 * C13308 +
              C141358 * C13400) *
                 C141221) *
                C141384) *
               C141487 -
           (((C38772 + C38773) * C141221 + (C38774 + C38775) * C139356 +
             (C43407 + C43406) * C141452 + (C43405 + C43404) * C139366) *
                C141384 +
            ((C23070 + C23071) * C141221 + (C23072 + C23073) * C139356 +
             (C22173 * C2964 + C141358 * C3030 + C22172 * C828 +
              C141468 * C917) *
                 C141452 +
             (C22173 * C2960 + C141358 * C3026 + C22172 * C823 +
              C141468 * C912) *
                 C139366) *
                C93949) *
               C4148) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eexz[97] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C94102 * C108 + C93949 * C276 + C94103 * C1601 +
              C141384 * C1784) *
                 C139366 +
             (C94102 * C114 + C93949 * C282 + C94103 * C1606 +
              C141384 * C1789) *
                 C141452 +
             (C94129 + C94130) * C139356 + (C94131 + C94132) * C141221) *
                C141468 +
            ((C102614 + C102615) * C139366 + (C102616 + C102617) * C141452 +
             C115675 * C139356 + C115676 * C141221) *
                C141358) *
               C4148 -
           (((C116861 + C116862) * C141221 + (C116863 + C116864) * C139356 +
             (C106156 + C106157) * C141452 + (C106158 + C106159) * C139366) *
                C141358 +
            ((C95981 + C95982) * C141221 + (C95983 + C95984) * C139356 +
             (C94103 * C5329 + C141384 * C5453 + C94102 * C1606 +
              C93949 * C1789) *
                 C141452 +
             (C94103 * C5325 + C141384 * C5449 + C94102 * C1601 +
              C93949 * C1784) *
                 C139366) *
                C141468) *
               C141487) *
              C816 +
          ((((C106159 + C106158) * C139366 + (C106157 + C106156) * C141452 +
             (C116864 + C116863) * C139356 + (C116862 + C116861) * C141221) *
                C141468 +
            ((C106155 + C106154) * C139366 + (C106153 + C106152) * C141452 +
             (C94102 * C7886 + C93949 * C8127 + C94103 * C13304 +
              C141384 * C13478) *
                 C139356 +
             (C94102 * C7889 + C93949 * C8130 + C94103 * C13308 +
              C141384 * C13482) *
                 C141221) *
                C141358) *
               C141487 -
           (((C102625 + C102624) * C141221 + (C102623 + C102622) * C139356 +
             (C102621 + C102620) * C141452 + (C102619 + C102618) * C139366) *
                C141358 +
            (C115677 * C141221 + C115678 * C139356 +
             (C102617 + C102616) * C141452 + (C102615 + C102614) * C139366) *
                C141468) *
               C4148) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eeyx[97] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139366 * C108 + C141452 * C114 + C139356 * C109 +
              C141221 * C115) *
                 C22172 +
             (C139366 * C189 + C141452 * C362 + C139356 * C190 +
              C141221 * C363) *
                 C141468 +
             (C69912 + C69913) * C22173 + (C69914 + C69915) * C141358) *
                C93949 +
            ((C79109 + C79110) * C22172 + (C79111 + C79112) * C141468 +
             C82369 * C22173 + C82370 * C141358) *
                C141384) *
               C4148 -
           (((C82381 + C82382) * C141358 + (C82383 + C82384) * C22173 +
             (C85797 + C85798) * C141468 + (C85799 + C85800) * C22172) *
                C141384 +
            (C82379 * C141358 + C82380 * C22173 + (C79112 + C79111) * C141468 +
             (C79110 + C79109) * C22172) *
                C93949) *
               C141487) *
              C816 +
          (((C82369 * C22172 + C82370 * C141468 + (C73478 + C73477) * C22173 +
             (C73476 + C73475) * C141358) *
                C93949 +
            ((C82384 + C82383) * C22172 + (C82382 + C82381) * C141468 +
             (C139366 * C13303 + C141452 * C13307 + C139356 * C13304 +
              C141221 * C13308) *
                 C22173 +
             (C139366 * C13394 + C141452 * C13559 + C139356 * C13396 +
              C141221 * C13560) *
                 C141358) *
                C141384) *
               C141487 -
           (((C73475 + C73476) * C141358 + (C73477 + C73478) * C22173 +
             C82379 * C141468 + C82380 * C22172) *
                C141384 +
            ((C69919 + C69918) * C141358 + (C69917 + C69916) * C22173 +
             (C69915 + C69914) * C141468 + (C69913 + C69912) * C22172) *
                C93949) *
               C4148) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eeyy[97] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22434 * C108 + C22437 + C22437 + C141468 * C419 + C22435 * C823 +
              C22438 + C22438 + C141358 * C1171) *
                 C141452 +
             (C22471 + C22472) * C141221) *
                C93949 +
            ((C40492 + C40493) * C141452 + C40478 * C141221) * C141384) *
               C4148 -
           (((C40494 + C40495) * C141221 + (C47230 + C47231) * C141452) *
                C141384 +
            (C40483 * C141221 + (C40493 + C40492) * C141452) * C93949) *
               C141487) *
              C816 +
          ((((C43826 + C43827) * C141452 + (C39215 + C39214) * C141221) *
                C93949 +
            ((C22434 * C13301 + C43818 + C43818 + C141468 * C13635 +
              C22435 * C13303 + C43819 + C43819 + C141358 * C13636) *
                 C141452 +
             (C22434 * C13302 + C43820 + C43820 + C141468 * C13637 +
              C22435 * C13304 + C43821 + C43821 + C141358 * C13638) *
                 C141221) *
                C141384) *
               C141487 -
           (((C39214 + C39215) * C141221 + (C43827 + C43826) * C141452) *
                C141384 +
            ((C23442 + C23443) * C141221 +
             (C22435 * C2960 + C23428 + C23428 + C141358 * C3196 +
              C22434 * C823 + C23429 + C23429 + C141468 * C1171) *
                 C141452) *
                C93949) *
               C4148) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eeyz[97] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C94102 * C108 + C93949 * C276 + C94103 * C1601 +
              C141384 * C1784) *
                 C22172 +
             (C94102 * C189 + C93949 * C501 + C94103 * C1690 +
              C141384 * C2040) *
                 C141468 +
             (C102614 + C102615) * C22173 + (C102932 + C102933) * C141358) *
                C141452 +
            ((C94129 + C94130) * C22172 + (C94378 + C94379) * C141468 +
             C115675 * C22173 + C116069 * C141358) *
                C141221) *
               C4148 -
           (((C117259 + C117260) * C141358 + (C116863 + C116864) * C22173 +
             (C96331 + C96332) * C141468 + (C95983 + C95984) * C22172) *
                C141221 +
            ((C106488 + C106489) * C141358 + (C106158 + C106159) * C22173 +
             (C94103 * C5391 + C141384 * C5619 + C94102 * C1690 +
              C93949 * C2040) *
                 C141468 +
             (C94103 * C5325 + C141384 * C5449 + C94102 * C1601 +
              C93949 * C1784) *
                 C22172) *
                C141452) *
               C141487) *
              C816 +
          ((((C106159 + C106158) * C22172 + (C106489 + C106488) * C141468 +
             (C106155 + C106154) * C22173 + (C106487 + C106486) * C141358) *
                C141452 +
            ((C116864 + C116863) * C22172 + (C117260 + C117259) * C141468 +
             (C94102 * C7886 + C93949 * C8127 + C94103 * C13304 +
              C141384 * C13478) *
                 C22173 +
             (C94102 * C8005 + C93949 * C8469 + C94103 * C13396 +
              C141384 * C13722) *
                 C141358) *
                C141221) *
               C141487 -
           (((C102937 + C102936) * C141358 + (C102623 + C102622) * C22173 +
             C116070 * C141468 + C115678 * C22172) *
                C141221 +
            ((C102935 + C102934) * C141358 + (C102619 + C102618) * C22173 +
             (C102933 + C102932) * C141468 + (C102615 + C102614) * C22172) *
                C141452) *
               C4148) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eezx[97] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139366 * C108 + C141452 * C114 + C139356 * C109 +
              C141221 * C115) *
                 C94102 +
             (C139366 * C276 + C141452 * C579 + C139356 * C277 +
              C141221 * C580) *
                 C93949 +
             (C79109 + C79110) * C94103 + (C79517 + C79518) * C141384) *
                C141468 +
            ((C69912 + C69913) * C94102 + (C70268 + C70269) * C93949 +
             C82369 * C94103 + C82775 * C141384) *
                C141358) *
               C4148 -
           (((C82781 + C82782) * C141384 + (C82383 + C82384) * C94103 +
             C82780 * C93949 + C82380 * C94102) *
                C141358 +
            ((C86099 + C86100) * C141384 + (C85799 + C85800) * C94103 +
             (C79518 + C79517) * C93949 + (C79110 + C79109) * C94102) *
                C141468) *
               C141487) *
              C816 +
          (((C82369 * C94102 + C82775 * C93949 + (C82384 + C82383) * C94103 +
             (C82782 + C82781) * C141384) *
                C141468 +
            ((C73478 + C73477) * C94102 + (C73792 + C73791) * C93949 +
             (C139366 * C13303 + C141452 * C13307 + C139356 * C13304 +
              C141221 * C13308) *
                 C94103 +
             (C139366 * C13477 + C141452 * C13799 + C139356 * C13478 +
              C141221 * C13800) *
                 C141384) *
                C141358) *
               C141487 -
           (((C73791 + C73792) * C141384 + (C73477 + C73478) * C94103 +
             (C70271 + C70270) * C93949 + (C69917 + C69916) * C94102) *
                C141358 +
            (C82780 * C141384 + C82380 * C94103 + (C70269 + C70268) * C93949 +
             (C69913 + C69912) * C94102) *
                C141468) *
               C4148) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eezy[97] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22172 * C108 + C141468 * C189 + C22173 * C823 + C141358 * C912) *
                 C94102 +
             (C22172 * C276 + C141468 * C635 + C22173 * C1006 +
              C141358 * C1419) *
                 C93949 +
             (C40064 + C40065) * C94103 + (C40902 + C40903) * C141384) *
                C141452 +
            ((C22199 + C22200) * C94102 + (C22728 + C22729) * C93949 +
             C40052 * C94103 + C40896 * C141384) *
                C141221) *
               C4148 -
           (((C40904 + C40905) * C141384 + (C40070 + C40071) * C94103 +
             C40901 * C93949 + C40063 * C94102) *
                C141221 +
            ((C47530 + C47531) * C141384 + (C46922 + C46923) * C94103 +
             (C40903 + C40902) * C93949 + (C40065 + C40064) * C94102) *
                C141452) *
               C141487) *
              C816 +
          ((((C43404 + C43405) * C94102 + (C44230 + C44231) * C93949 +
             (C22172 * C13301 + C141468 * C13393 + C22173 * C13303 +
              C141358 * C13394) *
                 C94103 +
             (C22172 * C13475 + C141468 * C13875 + C22173 * C13477 +
              C141358 * C13876) *
                 C141384) *
                C141452 +
            ((C38775 + C38774) * C94102 + (C39631 + C39630) * C93949 +
             (C22172 * C13302 + C141468 * C13395 + C22173 * C13304 +
              C141358 * C13396) *
                 C94103 +
             (C22172 * C13476 + C141468 * C13877 + C22173 * C13478 +
              C141358 * C13878) *
                 C141384) *
                C141221) *
               C141487 -
           (((C39630 + C39631) * C141384 + (C38774 + C38775) * C94103 +
             (C23774 + C23775) * C93949 + (C23072 + C23073) * C94102) *
                C141221 +
            ((C44231 + C44230) * C141384 + (C43405 + C43404) * C94103 +
             (C22173 * C3084 + C141358 * C3362 + C22172 * C1006 +
              C141468 * C1419) *
                 C93949 +
             (C22173 * C2960 + C141358 * C3026 + C22172 * C823 +
              C141468 * C912) *
                 C94102) *
                C141452) *
               C4148) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eezz[97] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C94623 * C108 + C94626 + C94626 + C93949 * C714 + C94624 * C1601 +
              C94627 + C94627 + C141384 * C2283) *
                 C141468 +
             (C103276 + C103277) * C141358) *
                C141452 +
            ((C94660 + C94661) * C141468 + C116461 * C141358) * C141221) *
               C4148 -
           (((C117659 + C117660) * C141358 + (C96679 + C96680) * C141468) *
                C141221 +
            ((C106821 + C106822) * C141358 +
             (C94624 * C5325 + C96665 + C96665 + C141384 * C5781 +
              C94623 * C1601 + C96666 + C96666 + C93949 * C2283) *
                 C141468) *
                C141452) *
               C141487) *
              C816 +
          ((((C106822 + C106821) * C141468 + (C106820 + C106819) * C141358) *
                C141452 +
            ((C117660 + C117659) * C141468 +
             (C94623 * C7886 + C104220 + C104220 + C93949 * C8793 +
              C94624 * C13304 + C104221 + C104221 + C141384 * C13956) *
                 C141358) *
                C141221) *
               C141487 -
           (((C103281 + C103280) * C141358 + C116462 * C141468) * C141221 +
            ((C103279 + C103278) * C141358 + (C103277 + C103276) * C141468) *
                C141452) *
               C4148) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eexx[98] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C68675 * C108 + C68680 + C68680 + C141452 * C120 + C68677 * C109 +
             C68681 + C68681 + C141221 * C121) *
                C93949 +
            (C78695 + C78696) * C141384) *
               C141468 +
           ((C69544 + C69545) * C93949 + C81967 * C141384) * C141358) *
              C5322 -
          (((C81977 + C81978) * C141384 + C81972 * C93949) * C141358 +
           ((C85493 + C85494) * C141384 + (C78696 + C78695) * C93949) *
               C141468) *
              C5323 +
          (((C85494 + C85493) * C93949 +
            (C68675 * C15862 + C85485 + C85485 + C141452 * C15868 +
             C68677 * C15861 + C85486 + C85486 + C141221 * C15867) *
                C141384) *
               C141468 +
           ((C81978 + C81977) * C93949 +
            (C68675 * C18582 + C85487 + C85487 + C141452 * C18586 +
             C68677 * C18583 + C85488 + C85488 + C141221 * C18587) *
                C141384) *
               C141358) *
              C5324) *
         C141277 * C141243) /
        (p * q * std::sqrt(p + q));
    d2eexy[98] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C22172 * C108 + C141468 * C189 + C22173 * C823 + C141358 * C912) *
                C139366 +
            (C22172 * C114 + C141468 * C195 + C22173 * C828 + C141358 * C917) *
                C141452 +
            (C22199 + C22200) * C139356 + (C22201 + C22202) * C141221) *
               C93949 +
           ((C40064 + C40065) * C139366 + (C40066 + C40067) * C141452 +
            C40052 * C139356 + C40053 * C141221) *
               C141384) *
              C5322 -
          (((C40068 + C40069) * C141221 + (C40070 + C40071) * C139356 +
            (C46920 + C46921) * C141452 + (C46922 + C46923) * C139366) *
               C141384 +
           (C40062 * C141221 + C40063 * C139356 + (C40067 + C40066) * C141452 +
            (C40065 + C40064) * C139366) *
               C93949) *
              C5323 +
          (((C46923 + C46922) * C139366 + (C46921 + C46920) * C141452 +
            (C40071 + C40070) * C139356 + (C40069 + C40068) * C141221) *
               C93949 +
           ((C22172 * C15862 + C141468 * C16013 + C22173 * C18582 +
             C141358 * C18698) *
                C139366 +
            (C22172 * C15865 + C141468 * C16016 + C22173 * C18584 +
             C141358 * C18700) *
                C141452 +
            (C22172 * C15861 + C141468 * C16012 + C22173 * C18583 +
             C141358 * C18699) *
                C139356 +
            (C22172 * C15864 + C141468 * C16015 + C22173 * C18585 +
             C141358 * C18701) *
                C141221) *
               C141384) *
              C5324) *
         C141277 * C141243) /
        (p * q * std::sqrt(p + q));
    d2eexz[98] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C94102 * C108 + C93949 * C276 + C94103 * C1601 + C141384 * C1784) *
                C139366 +
            (C94102 * C114 + C93949 * C282 + C94103 * C1606 + C141384 * C1789) *
                C141452 +
            (C94129 + C94130) * C139356 + (C94131 + C94132) * C141221) *
               C141468 +
           ((C102614 + C102615) * C139366 + (C102616 + C102617) * C141452 +
            C115675 * C139356 + C115676 * C141221) *
               C141358) *
              C5322 -
          (((C116861 + C116862) * C141221 + (C116863 + C116864) * C139356 +
            (C106156 + C106157) * C141452 + (C106158 + C106159) * C139366) *
               C141358 +
           ((C95981 + C95982) * C141221 + (C95983 + C95984) * C139356 +
            (C94103 * C5329 + C141384 * C5453 + C94102 * C1606 +
             C93949 * C1789) *
                C141452 +
            (C94103 * C5325 + C141384 * C5449 + C94102 * C1601 +
             C93949 * C1784) *
                C139366) *
               C141468) *
              C5323 +
          (((C94102 * C5325 + C93949 * C5449 + C94103 * C15862 +
             C141384 * C16151) *
                C139366 +
            (C94102 * C5329 + C93949 * C5453 + C94103 * C15865 +
             C141384 * C16154) *
                C141452 +
            (C94102 * C5326 + C93949 * C5450 + C94103 * C15861 +
             C141384 * C16150) *
                C139356 +
            (C94102 * C5330 + C93949 * C5454 + C94103 * C15864 +
             C141384 * C16153) *
                C141221) *
               C141468 +
           ((C94102 * C13301 + C93949 * C13475 + C94103 * C18582 +
             C141384 * C18820) *
                C139366 +
            (C94102 * C13305 + C93949 * C13479 + C94103 * C18584 +
             C141384 * C18822) *
                C141452 +
            (C94102 * C13302 + C93949 * C13476 + C94103 * C18583 +
             C141384 * C18821) *
                C139356 +
            (C94102 * C13306 + C93949 * C13480 + C94103 * C18585 +
             C141384 * C18823) *
                C141221) *
               C141358) *
              C5324) *
         C141277 * C141243) /
        (p * q * std::sqrt(p + q));
    d2eeyx[98] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139366 * C108 + C141452 * C114 + C139356 * C109 +
             C141221 * C115) *
                C22172 +
            (C139366 * C189 + C141452 * C362 + C139356 * C190 +
             C141221 * C363) *
                C141468 +
            (C69912 + C69913) * C22173 + (C69914 + C69915) * C141358) *
               C93949 +
           ((C79109 + C79110) * C22172 + (C79111 + C79112) * C141468 +
            C82369 * C22173 + C82370 * C141358) *
               C141384) *
              C5322 -
          (((C82381 + C82382) * C141358 + (C82383 + C82384) * C22173 +
            (C85797 + C85798) * C141468 + (C85799 + C85800) * C22172) *
               C141384 +
           (C82379 * C141358 + C82380 * C22173 + (C79112 + C79111) * C141468 +
            (C79110 + C79109) * C22172) *
               C93949) *
              C5323 +
          (((C85800 + C85799) * C22172 + (C85798 + C85797) * C141468 +
            (C82384 + C82383) * C22173 + (C82382 + C82381) * C141358) *
               C93949 +
           ((C139366 * C15862 + C141452 * C15865 + C139356 * C15861 +
             C141221 * C15864) *
                C22172 +
            (C139366 * C16013 + C141452 * C16273 + C139356 * C16012 +
             C141221 * C16272) *
                C141468 +
            (C139366 * C18582 + C141452 * C18584 + C139356 * C18583 +
             C141221 * C18585) *
                C22173 +
            (C139366 * C18698 + C141452 * C18922 + C139356 * C18699 +
             C141221 * C18923) *
                C141358) *
               C141384) *
              C5324) *
         C141277 * C141243) /
        (p * q * std::sqrt(p + q));
    d2eeyy[98] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C22434 * C108 + C22437 + C22437 + C141468 * C419 + C22435 * C823 +
             C22438 + C22438 + C141358 * C1171) *
                C141452 +
            (C22471 + C22472) * C141221) *
               C93949 +
           ((C40492 + C40493) * C141452 + C40478 * C141221) * C141384) *
              C5322 -
          (((C40494 + C40495) * C141221 + (C47230 + C47231) * C141452) *
               C141384 +
           (C40483 * C141221 + (C40493 + C40492) * C141452) * C93949) *
              C5323 +
          (((C47231 + C47230) * C141452 + (C40495 + C40494) * C141221) *
               C93949 +
           ((C22434 * C15862 + C47222 + C47222 + C141468 * C16422 +
             C22435 * C18582 + C47223 + C47223 + C141358 * C19034) *
                C141452 +
            (C22434 * C15861 + C47224 + C47224 + C141468 * C16421 +
             C22435 * C18583 + C47225 + C47225 + C141358 * C19035) *
                C141221) *
               C141384) *
              C5324) *
         C141277 * C141243) /
        (p * q * std::sqrt(p + q));
    d2eeyz[98] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C94102 * C108 + C93949 * C276 + C94103 * C1601 + C141384 * C1784) *
                C22172 +
            (C94102 * C189 + C93949 * C501 + C94103 * C1690 + C141384 * C2040) *
                C141468 +
            (C102614 + C102615) * C22173 + (C102932 + C102933) * C141358) *
               C141452 +
           ((C94129 + C94130) * C22172 + (C94378 + C94379) * C141468 +
            C115675 * C22173 + C116069 * C141358) *
               C141221) *
              C5322 -
          (((C117259 + C117260) * C141358 + (C116863 + C116864) * C22173 +
            (C96331 + C96332) * C141468 + (C95983 + C95984) * C22172) *
               C141221 +
           ((C106488 + C106489) * C141358 + (C106158 + C106159) * C22173 +
            (C94103 * C5391 + C141384 * C5619 + C94102 * C1690 +
             C93949 * C2040) *
                C141468 +
            (C94103 * C5325 + C141384 * C5449 + C94102 * C1601 +
             C93949 * C1784) *
                C22172) *
               C141452) *
              C5323 +
          (((C94102 * C5325 + C93949 * C5449 + C94103 * C15862 +
             C141384 * C16151) *
                C22172 +
            (C94102 * C5391 + C93949 * C5619 + C94103 * C16013 +
             C141384 * C16549) *
                C141468 +
            (C94102 * C13301 + C93949 * C13475 + C94103 * C18582 +
             C141384 * C18820) *
                C22173 +
            (C94102 * C13393 + C93949 * C13719 + C94103 * C18698 +
             C141384 * C19150) *
                C141358) *
               C141452 +
           ((C94102 * C5326 + C93949 * C5450 + C94103 * C15861 +
             C141384 * C16150) *
                C22172 +
            (C94102 * C5392 + C93949 * C5620 + C94103 * C16012 +
             C141384 * C16548) *
                C141468 +
            (C94102 * C13302 + C93949 * C13476 + C94103 * C18583 +
             C141384 * C18821) *
                C22173 +
            (C94102 * C13395 + C93949 * C13721 + C94103 * C18699 +
             C141384 * C19151) *
                C141358) *
               C141221) *
              C5324) *
         C141277 * C141243) /
        (p * q * std::sqrt(p + q));
    d2eezx[98] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139366 * C108 + C141452 * C114 + C139356 * C109 +
             C141221 * C115) *
                C94102 +
            (C139366 * C276 + C141452 * C579 + C139356 * C277 +
             C141221 * C580) *
                C93949 +
            (C79109 + C79110) * C94103 + (C79517 + C79518) * C141384) *
               C141468 +
           ((C69912 + C69913) * C94102 + (C70268 + C70269) * C93949 +
            C82369 * C94103 + C82775 * C141384) *
               C141358) *
              C5322 -
          (((C82781 + C82782) * C141384 + (C82383 + C82384) * C94103 +
            C82780 * C93949 + C82380 * C94102) *
               C141358 +
           ((C86099 + C86100) * C141384 + (C85799 + C85800) * C94103 +
            (C79518 + C79517) * C93949 + (C79110 + C79109) * C94102) *
               C141468) *
              C5323 +
          (((C85800 + C85799) * C94102 + (C86100 + C86099) * C93949 +
            (C139366 * C15862 + C141452 * C15865 + C139356 * C15861 +
             C141221 * C15864) *
                C94103 +
            (C139366 * C16151 + C141452 * C16659 + C139356 * C16150 +
             C141221 * C16658) *
                C141384) *
               C141468 +
           ((C82384 + C82383) * C94102 + (C82782 + C82781) * C93949 +
            (C139366 * C18582 + C141452 * C18584 + C139356 * C18583 +
             C141221 * C18585) *
                C94103 +
            (C139366 * C18820 + C141452 * C19250 + C139356 * C18821 +
             C141221 * C19251) *
                C141384) *
               C141358) *
              C5324) *
         C141277 * C141243) /
        (p * q * std::sqrt(p + q));
    d2eezy[98] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C22172 * C108 + C141468 * C189 + C22173 * C823 + C141358 * C912) *
                C94102 +
            (C22172 * C276 + C141468 * C635 + C22173 * C1006 +
             C141358 * C1419) *
                C93949 +
            (C40064 + C40065) * C94103 + (C40902 + C40903) * C141384) *
               C141452 +
           ((C22199 + C22200) * C94102 + (C22728 + C22729) * C93949 +
            C40052 * C94103 + C40896 * C141384) *
               C141221) *
              C5322 -
          (((C40904 + C40905) * C141384 + (C40070 + C40071) * C94103 +
            C40901 * C93949 + C40063 * C94102) *
               C141221 +
           ((C47530 + C47531) * C141384 + (C46922 + C46923) * C94103 +
            (C40903 + C40902) * C93949 + (C40065 + C40064) * C94102) *
               C141452) *
              C5323 +
          (((C46923 + C46922) * C94102 + (C47531 + C47530) * C93949 +
            (C22172 * C15862 + C141468 * C16013 + C22173 * C18582 +
             C141358 * C18698) *
                C94103 +
            (C22172 * C16151 + C141468 * C16784 + C22173 * C18820 +
             C141358 * C19356) *
                C141384) *
               C141452 +
           ((C40071 + C40070) * C94102 + (C40905 + C40904) * C93949 +
            (C22172 * C15861 + C141468 * C16012 + C22173 * C18583 +
             C141358 * C18699) *
                C94103 +
            (C22172 * C16150 + C141468 * C16783 + C22173 * C18821 +
             C141358 * C19357) *
                C141384) *
               C141221) *
              C5324) *
         C141277 * C141243) /
        (p * q * std::sqrt(p + q));
    d2eezz[98] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C94623 * C108 + C94626 + C94626 + C93949 * C714 + C94624 * C1601 +
             C94627 + C94627 + C141384 * C2283) *
                C141468 +
            (C103276 + C103277) * C141358) *
               C141452 +
           ((C94660 + C94661) * C141468 + C116461 * C141358) * C141221) *
              C5322 -
          (((C117659 + C117660) * C141358 + (C96679 + C96680) * C141468) *
               C141221 +
           ((C106821 + C106822) * C141358 +
            (C94624 * C5325 + C96665 + C96665 + C141384 * C5781 +
             C94623 * C1601 + C96666 + C96666 + C93949 * C2283) *
                C141468) *
               C141452) *
              C5323 +
          (((C94623 * C5325 + C101616 + C101616 + C93949 * C5781 +
             C94624 * C15862 + C101617 + C101617 + C141384 * C16900) *
                C141468 +
            (C94623 * C13301 + C109304 + C109304 + C93949 * C13953 +
             C94624 * C18582 + C109305 + C109305 + C141384 * C19462) *
                C141358) *
               C141452 +
           ((C94623 * C5326 + C101618 + C101618 + C93949 * C5782 +
             C94624 * C15861 + C101619 + C101619 + C141384 * C16899) *
                C141468 +
            (C94623 * C13302 + C124105 + C124105 + C93949 * C13955 +
             C94624 * C18583 + C124106 + C124106 + C141384 * C19463) *
                C141358) *
               C141221) *
              C5324) *
         C141277 * C141243) /
        (p * q * std::sqrt(p + q));
    d2eexx[99] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C55526 * C108 + C55529 + C55529 + C141216 * C120) * C141498 +
            C62512 * C141499 + C62513 * C124182) *
               C141468 +
           (C56053 * C141498 + C58473 * C141499 + C61519 * C124182) * C141358) *
              C141294 * C141277 * C97 -
          ((C61521 * C124182 + C61520 * C141499 + C56056 * C141498) * C141358 +
           (C62515 * C124182 + C62514 * C141499 +
            (C55526 * C109 + C55536 + C55536 + C141216 * C121) * C141498) *
               C141468) *
              C141294 * C141277 * C98 +
          (((C55526 * C110 + C55537 + C55537 + C141216 * C122) * C141498 +
            (C55526 * C1599 + C60809 + C60809 + C141216 * C1609) * C141499 +
            (C55526 * C5327 + C60810 + C60810 + C141216 * C5335) * C124182) *
               C141468 +
           ((C55526 * C821 + C55538 + C55538 + C141216 * C831) * C141498 +
            (C55526 * C3492 + C60811 + C60811 + C141216 * C3500) * C141499 +
            (C55526 * C14876 + C60812 + C60812 + C141216 * C14878) * C124182) *
               C141358) *
              C141294 * C141277 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eexy[99] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C22172 * C108 + C141468 * C189 + C22173 * C823 + C141358 * C912) *
                C55527 +
            (C22172 * C114 + C141468 * C195 + C22173 * C828 + C141358 * C917) *
                C141216) *
               C141498 +
           ((C40064 + C40065) * C55527 + (C40066 + C40067) * C141216) *
               C141499 +
           ((C46923 + C46922) * C55527 + (C46921 + C46920) * C141216) *
               C124182) *
              C141294 * C141277 * C97 -
          (((C40068 + C40069) * C141216 + (C40070 + C40071) * C55527) *
               C124182 +
           (C40062 * C141216 + C40063 * C55527) * C141499 +
           ((C22202 + C22201) * C141216 + (C22200 + C22199) * C55527) *
               C141498) *
              C141294 * C141277 * C98 +
          ((C22211 * C55527 + C22212 * C141216) * C141498 +
           ((C24105 + C24104) * C55527 + (C24103 + C24102) * C141216) *
               C141499 +
           ((C22172 * C5327 + C141468 * C5393 + C22173 * C14876 +
             C141358 * C14979) *
                C55527 +
            (C22172 * C5331 + C141468 * C5397 + C22173 * C14877 +
             C141358 * C14980) *
                C141216) *
               C124182) *
              C141294 * C141277 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eexz[99] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C124333 * C108 + C141498 * C276 + C124334 * C1601 +
                       C141499 * C1784 + C124335 * C5325 + C124182 * C5449) *
                          C55527 +
                      (C124333 * C114 + C141498 * C282 + C124334 * C1606 +
                       C141499 * C1789 + C124335 * C5329 + C124182 * C5453) *
                          C141216) *
                         C141468 +
                     ((C124333 * C823 + C141498 * C1006 + C124334 * C3490 +
                       C141499 * C3646 + C124335 * C13301 + C124182 * C13475) *
                          C55527 +
                      (C124333 * C828 + C141498 * C1011 + C124334 * C3494 +
                       C141499 * C3650 + C124335 * C13305 + C124182 * C13479) *
                          C141216) *
                         C141358) *
                        C141294 * C141277 * C97 -
                    (((C125198 + C125199 + C125200) * C141216 +
                      (C125201 + C125202 + C125203) * C55527) *
                         C141358 +
                     ((C124366 + C124365 + C124364) * C141216 +
                      (C124363 + C124362 + C124361) * C55527) *
                         C141468) *
                        C141294 * C141277 * C98 +
                    (((C124372 + C124371 + C124370) * C55527 +
                      (C124369 + C124368 + C124367) * C141216) *
                         C141468 +
                     ((C124333 * C821 + C141498 * C1004 + C124334 * C3492 +
                       C141499 * C3648 + C124335 * C14876 + C124182 * C15091) *
                          C55527 +
                      (C124333 * C826 + C141498 * C1009 + C124334 * C3496 +
                       C141499 * C3652 + C124335 * C14877 + C124182 * C15092) *
                          C141216) *
                         C141358) *
                        C141294 * C141277 * C99)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[99] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C55527 * C108 + C141216 * C114) * C22172 +
                      (C55527 * C189 + C141216 * C362) * C141468 +
                      C56299 * C22173 + C56300 * C141358) *
                         C141498 +
                     (C62870 * C22172 + C62871 * C141468 + C58709 * C22173 +
                      C58708 * C141358) *
                         C141499 +
                     (C62872 * C22172 + C62873 * C141468 + C61849 * C22173 +
                      C61850 * C141358) *
                         C124182) *
                        C141294 * C141277 * C97 -
                    ((C61854 * C141358 + C61853 * C22173 + C62877 * C141468 +
                      C62876 * C22172) *
                         C124182 +
                     (C61852 * C141358 + C61851 * C22173 + C62875 * C141468 +
                      C62874 * C22172) *
                         C141499 +
                     (C56306 * C141358 + C56305 * C22173 +
                      (C55527 * C190 + C141216 * C363) * C141468 +
                      (C55527 * C109 + C141216 * C115) * C22172) *
                         C141498) *
                        C141294 * C141277 * C98 +
                    (((C55527 * C110 + C141216 * C116) * C22172 +
                      (C55527 * C191 + C141216 * C364) * C141468 +
                      (C55527 * C821 + C141216 * C826) * C22173 +
                      (C55527 * C910 + C141216 * C1098) * C141358) *
                         C141498 +
                     ((C55527 * C1599 + C141216 * C1604) * C22172 +
                      (C55527 * C1688 + C141216 * C1876) * C141468 +
                      (C55527 * C3492 + C141216 * C3496) * C22173 +
                      (C55527 * C3574 + C141216 * C3722) * C141358) *
                         C141499 +
                     ((C55527 * C5327 + C141216 * C5331) * C22172 +
                      (C55527 * C5393 + C141216 * C5509) * C141468 +
                      (C55527 * C14876 + C141216 * C14877) * C22173 +
                      (C55527 * C14979 + C141216 * C15209) * C141358) *
                         C124182) *
                        C141294 * C141277 * C99)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[99] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C22434 * C108 + C22437 + C22437 + C141468 * C419 + C22435 * C823 +
            C22438 + C22438 + C141358 * C1171) *
               C141216 * C141498 +
           (C40492 + C40493) * C141216 * C141499 +
           (C47231 + C47230) * C141216 * C124182) *
              C141294 * C141277 * C97 -
          ((C40494 + C40495) * C141216 * C124182 + C40483 * C141216 * C141499 +
           (C22472 + C22471) * C141216 * C141498) *
              C141294 * C141277 * C98 +
          (C22477 * C141216 * C141498 + (C24435 + C24434) * C141216 * C141499 +
           (C22434 * C5327 + C29550 + C29550 + C141468 * C5563 +
            C22435 * C14876 + C29551 + C29551 + C141358 * C15308) *
               C141216 * C124182) *
              C141294 * C141277 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[99] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C124333 * C108 + C141498 * C276 + C124334 * C1601 +
                      C141499 * C1784 + C124335 * C5325 + C124182 * C5449) *
                         C22172 +
                     (C124333 * C189 + C141498 * C501 + C124334 * C1690 +
                      C141499 * C2040 + C124335 * C5391 + C124182 * C5619) *
                         C141468 +
                     (C124333 * C823 + C141498 * C1006 + C124334 * C3490 +
                      C141499 * C3646 + C124335 * C13301 + C124182 * C13475) *
                         C22173 +
                     (C124333 * C912 + C141498 * C1262 + C124334 * C3572 +
                      C141499 * C3864 + C124335 * C13393 + C124182 * C13719) *
                         C141358) *
                        C141216 * C141294 * C141277 * C97 -
                    ((C125504 + C125505 + C125506) * C141358 +
                     (C125201 + C125202 + C125203) * C22173 +
                     (C124609 + C124608 + C124607) * C141468 +
                     (C124363 + C124362 + C124361) * C22172) *
                        C141216 * C141294 * C141277 * C98 +
                    ((C124372 + C124371 + C124370) * C22172 +
                     (C124612 + C124611 + C124610) * C141468 +
                     (C124333 * C821 + C141498 * C1004 + C124334 * C3492 +
                      C141499 * C3648 + C124335 * C14876 + C124182 * C15091) *
                         C22173 +
                     (C124333 * C910 + C141498 * C1260 + C124334 * C3574 +
                      C141499 * C3866 + C124335 * C14979 + C124182 * C15420) *
                         C141358) *
                        C141216 * C141294 * C141277 * C99)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[99] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C55527 * C108 + C141216 * C114) * C124333 +
            (C55527 * C276 + C141216 * C579) * C141498 + C62870 * C124334 +
            C63222 * C141499 + C62872 * C124335 + C63223 * C124182) *
               C141468 +
           (C56299 * C124333 + C56535 * C141498 + C58709 * C124334 +
            C58929 * C141499 + C61849 * C124335 + C62177 * C124182) *
               C141358) *
              C141294 * C141277 * C97 -
          ((C62179 * C124182 + C61853 * C124335 + C62178 * C141499 +
            C61851 * C124334 + C56538 * C141498 + C56305 * C124333) *
               C141358 +
           (C63225 * C124182 + C62876 * C124335 + C63224 * C141499 +
            C62874 * C124334 + (C55527 * C277 + C141216 * C580) * C141498 +
            (C55527 * C109 + C141216 * C115) * C124333) *
               C141468) *
              C141294 * C141277 * C98 +
          (((C55527 * C110 + C141216 * C116) * C124333 +
            (C55527 * C278 + C141216 * C581) * C141498 +
            (C55527 * C1599 + C141216 * C1604) * C124334 +
            (C55527 * C1782 + C141216 * C2124) * C141499 +
            (C55527 * C5327 + C141216 * C5331) * C124335 +
            (C55527 * C5451 + C141216 * C5675) * C124182) *
               C141468 +
           ((C55527 * C821 + C141216 * C826) * C124333 +
            (C55527 * C1004 + C141216 * C1346) * C141498 +
            (C55527 * C3492 + C141216 * C3496) * C124334 +
            (C55527 * C3648 + C141216 * C3936) * C141499 +
            (C55527 * C14876 + C141216 * C14877) * C124335 +
            (C55527 * C15091 + C141216 * C15528) * C124182) *
               C141358) *
              C141294 * C141277 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eezy[99] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C22172 * C108 + C141468 * C189 + C22173 * C823 + C141358 * C912) *
               C124333 +
           (C22172 * C276 + C141468 * C635 + C22173 * C1006 + C141358 * C1419) *
               C141498 +
           (C40064 + C40065) * C124334 + (C40902 + C40903) * C141499 +
           (C46923 + C46922) * C124335 + (C47531 + C47530) * C124182) *
              C141216 * C141294 * C141277 * C97 -
          ((C40904 + C40905) * C124182 + (C40070 + C40071) * C124335 +
           C40901 * C141499 + C40063 * C124334 + (C22729 + C22728) * C141498 +
           (C22200 + C22199) * C124333) *
              C141216 * C141294 * C141277 * C98 +
          (C22211 * C124333 + C22734 * C141498 + (C24105 + C24104) * C124334 +
           (C24752 + C24751) * C141499 +
           (C22172 * C5327 + C141468 * C5393 + C22173 * C14876 +
            C141358 * C14979) *
               C124335 +
           (C22172 * C5451 + C141468 * C5729 + C22173 * C15091 +
            C141358 * C15627) *
               C124182) *
              C141216 * C141294 * C141277 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eezz[99] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C124846 * C108 + C124850 + C124850 + C141498 * C714 +
                      C124847 * C1601 + C124851 + C124851 + C141499 * C2283 +
                      C124848 * C5325 + C124852 + C124852 + C124182 * C5781) *
                         C141468 +
                     (C124846 * C823 + C125818 + C125818 + C141498 * C1505 +
                      C124847 * C3490 + C125817 + C125817 + C141499 * C4074 +
                      C124848 * C13301 + C125816 + C125816 + C124182 * C13953) *
                         C141358) *
                        C141216 * C141294 * C141277 * C97 -
                    ((C125828 + C125829 + C125830) * C141358 +
                     (C124888 + C124887 + C124886) * C141468) *
                        C141216 * C141294 * C141277 * C98 +
                    ((C124891 + C124890 + C124889) * C141468 +
                     (C124846 * C821 + C125819 + C125819 + C141498 * C1503 +
                      C124847 * C3492 + C125820 + C125820 + C141499 * C4076 +
                      C124848 * C14876 + C125821 + C125821 + C124182 * C15738) *
                         C141358) *
                        C141216 * C141294 * C141277 * C99)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[100] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C55526 * C108 + C55529 + C55529 + C141216 * C120) * C141498 +
             C62512 * C141499 + C62513 * C124182) *
                C141468 +
            (C132525 + C132526 + C132527) * C141358) *
               C141294 * C816 -
           ((C64402 * C124182 + C58472 * C141499 + C56054 * C141498) * C141358 +
            (C132527 + C132526 + C132525) * C141468) *
               C141294 * C141485) *
              C818 +
          (((C132528 + C132529 + C132530) * C141468 +
            (C56057 * C141498 + C87073 * C141499 +
             (C55526 * C13304 + C61512 + C61512 + C141216 * C13312) * C124182) *
                C141358) *
               C141294 * C141485 -
           ((C132530 + C132529 + C132528) * C141358 +
            (C62515 * C124182 + C62514 * C141499 +
             (C55526 * C109 + C55536 + C55536 + C141216 * C121) * C141498) *
                C141468) *
               C141294 * C816) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eexy[100] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22172 * C108 + C141468 * C189 + C22173 * C823 + C141358 * C912) *
                 C55527 +
             (C22172 * C114 + C141468 * C195 + C22173 * C828 + C141358 * C917) *
                 C141216) *
                C141498 +
            ((C40064 + C40065) * C55527 + (C40066 + C40067) * C141216) *
                C141499 +
            ((C46923 + C46922) * C55527 + (C46921 + C46920) * C141216) *
                C124182) *
               C141294 * C816 -
           (((C22173 * C13307 + C141358 * C13398 + C22172 * C13305 +
              C141468 * C13397) *
                 C141216 +
             (C22173 * C13303 + C141358 * C13394 + C22172 * C13301 +
              C141468 * C13393) *
                 C55527) *
                C124182 +
            ((C43407 + C43406) * C141216 + (C43405 + C43404) * C55527) *
                C141499 +
            ((C22173 * C2964 + C141358 * C3030 + C22172 * C828 +
              C141468 * C917) *
                 C141216 +
             (C22173 * C2960 + C141358 * C3026 + C22172 * C823 +
              C141468 * C912) *
                 C55527) *
                C141498) *
               C141294 * C141485) *
              C818 +
          ((((C23073 + C23072) * C55527 + (C23071 + C23070) * C141216) *
                C141498 +
            ((C38775 + C38774) * C55527 + (C38773 + C38772) * C141216) *
                C141499 +
            ((C22172 * C13302 + C141468 * C13395 + C22173 * C13304 +
              C141358 * C13396) *
                 C55527 +
             (C22172 * C13306 + C141468 * C13399 + C22173 * C13308 +
              C141358 * C13400) *
                 C141216) *
                C124182) *
               C141294 * C141485 -
           (((C40068 + C40069) * C141216 + (C40070 + C40071) * C55527) *
                C124182 +
            (C40062 * C141216 + C40063 * C55527) * C141499 +
            ((C22202 + C22201) * C141216 + (C22200 + C22199) * C55527) *
                C141498) *
               C141294 * C816) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eexz[100] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C124333 * C108 + C141498 * C276 + C124334 * C1601 +
              C141499 * C1784 + C124335 * C5325 + C124182 * C5449) *
                 C55527 +
             (C124333 * C114 + C141498 * C282 + C124334 * C1606 +
              C141499 * C1789 + C124335 * C5329 + C124182 * C5453) *
                 C141216) *
                C141468 +
            ((C132739 + C132740 + C132741) * C55527 +
             (C132742 + C132743 + C132744) * C141216) *
                C141358) *
               C141294 * C816 -
           (((C124335 * C13307 + C124182 * C13481 + C124334 * C7890 +
              C141499 * C8131 + C124333 * C2964 + C141498 * C3088) *
                 C141216 +
             (C124335 * C13303 + C124182 * C13477 + C124334 * C7887 +
              C141499 * C8128 + C124333 * C2960 + C141498 * C3084) *
                 C55527) *
                C141358 +
            ((C132744 + C132743 + C132742) * C141216 +
             (C132741 + C132740 + C132739) * C55527) *
                C141468) *
               C141294 * C141485) *
              C818 +
          ((((C125203 + C125202 + C125201) * C55527 +
             (C125200 + C125199 + C125198) * C141216) *
                C141468 +
            ((C124333 * C2961 + C141498 * C3085 + C124334 * C7886 +
              C141499 * C8127 + C124335 * C13304 + C124182 * C13478) *
                 C55527 +
             (C124333 * C2965 + C141498 * C3089 + C124334 * C7889 +
              C141499 * C8130 + C124335 * C13308 + C124182 * C13482) *
                 C141216) *
                C141358) *
               C141294 * C141485 -
           (((C125198 + C125199 + C125200) * C141216 +
             (C125201 + C125202 + C125203) * C55527) *
                C141358 +
            ((C124366 + C124365 + C124364) * C141216 +
             (C124363 + C124362 + C124361) * C55527) *
                C141468) *
               C141294 * C816) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[100] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((((C55527 * C108 + C141216 * C114) * C22172 +
                        (C55527 * C189 + C141216 * C362) * C141468 +
                        C56299 * C22173 + C56300 * C141358) *
                           C141498 +
                       (C62870 * C22172 + C62871 * C141468 + C58709 * C22173 +
                        C58708 * C141358) *
                           C141499 +
                       (C62872 * C22172 + C62873 * C141468 + C61849 * C22173 +
                        C61850 * C141358) *
                           C124182) *
                          C141294 * C816 -
                      ((C64648 * C141358 + C64649 * C22173 + C61850 * C141468 +
                        C61849 * C22172) *
                           C124182 +
                       (C58706 * C141358 + C58707 * C22173 + C58708 * C141468 +
                        C58709 * C22172) *
                           C141499 +
                       (C56302 * C141358 + C56301 * C22173 + C56300 * C141468 +
                        C56299 * C22172) *
                           C141498) *
                          C141294 * C141485) *
                         C818 +
                     (((C56305 * C22172 + C56306 * C141468 + C56307 * C22173 +
                        C56308 * C141358) *
                           C141498 +
                       (C61851 * C22172 + C61852 * C141468 + C87373 * C22173 +
                        C87374 * C141358) *
                           C141499 +
                       (C61853 * C22172 + C61854 * C141468 +
                        (C55527 * C13304 + C141216 * C13308) * C22173 +
                        (C55527 * C13396 + C141216 * C13560) * C141358) *
                           C124182) *
                          C141294 * C141485 -
                      ((C61854 * C141358 + C61853 * C22173 + C62877 * C141468 +
                        C62876 * C22172) *
                           C124182 +
                       (C61852 * C141358 + C61851 * C22173 + C62875 * C141468 +
                        C62874 * C22172) *
                           C141499 +
                       (C56306 * C141358 + C56305 * C22173 +
                        (C55527 * C190 + C141216 * C363) * C141468 +
                        (C55527 * C109 + C141216 * C115) * C22172) *
                           C141498) *
                          C141294 * C816) *
                         C141483)) /
                   (p * q * std::sqrt(p + q));
    d2eeyy[100] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C22434 * C108 + C22437 + C22437 + C141468 * C419 + C22435 * C823 +
             C22438 + C22438 + C141358 * C1171) *
                C141216 * C141498 +
            (C40492 + C40493) * C141216 * C141499 +
            (C47231 + C47230) * C141216 * C124182) *
               C141294 * C816 -
           ((C22435 * C13303 + C43819 + C43819 + C141358 * C13636 +
             C22434 * C13301 + C43818 + C43818 + C141468 * C13635) *
                C141216 * C124182 +
            (C43827 + C43826) * C141216 * C141499 +
            (C22435 * C2960 + C23428 + C23428 + C141358 * C3196 +
             C22434 * C823 + C23429 + C23429 + C141468 * C1171) *
                C141216 * C141498) *
               C141294 * C141485) *
              C818 +
          (((C23443 + C23442) * C141216 * C141498 +
            (C39215 + C39214) * C141216 * C141499 +
            (C22434 * C13302 + C43820 + C43820 + C141468 * C13637 +
             C22435 * C13304 + C43821 + C43821 + C141358 * C13638) *
                C141216 * C124182) *
               C141294 * C141485 -
           ((C40494 + C40495) * C141216 * C124182 + C40483 * C141216 * C141499 +
            (C22472 + C22471) * C141216 * C141498) *
               C141294 * C816) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[100] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((C124333 * C108 + C141498 * C276 + C124334 * C1601 +
                        C141499 * C1784 + C124335 * C5325 + C124182 * C5449) *
                           C22172 +
                       (C124333 * C189 + C141498 * C501 + C124334 * C1690 +
                        C141499 * C2040 + C124335 * C5391 + C124182 * C5619) *
                           C141468 +
                       (C132739 + C132740 + C132741) * C22173 +
                       (C133045 + C133046 + C133047) * C141358) *
                          C141216 * C141294 * C816 -
                      ((C124335 * C13394 + C124182 * C13720 + C124334 * C8006 +
                        C141499 * C8470 + C124333 * C3026 + C141498 * C3254) *
                           C141358 +
                       (C124335 * C13303 + C124182 * C13477 + C124334 * C7887 +
                        C141499 * C8128 + C124333 * C2960 + C141498 * C3084) *
                           C22173 +
                       (C133047 + C133046 + C133045) * C141468 +
                       (C132741 + C132740 + C132739) * C22172) *
                          C141216 * C141294 * C141485) *
                         C818 +
                     (((C125203 + C125202 + C125201) * C22172 +
                       (C125506 + C125505 + C125504) * C141468 +
                       (C124333 * C2961 + C141498 * C3085 + C124334 * C7886 +
                        C141499 * C8127 + C124335 * C13304 + C124182 * C13478) *
                           C22173 +
                       (C124333 * C3027 + C141498 * C3255 + C124334 * C8005 +
                        C141499 * C8469 + C124335 * C13396 + C124182 * C13722) *
                           C141358) *
                          C141216 * C141294 * C141485 -
                      ((C125504 + C125505 + C125506) * C141358 +
                       (C125201 + C125202 + C125203) * C22173 +
                       (C124609 + C124608 + C124607) * C141468 +
                       (C124363 + C124362 + C124361) * C22172) *
                          C141216 * C141294 * C816) *
                         C141483)) /
                   (p * q * std::sqrt(p + q));
    d2eezx[100] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C55527 * C108 + C141216 * C114) * C124333 +
             (C55527 * C276 + C141216 * C579) * C141498 + C62870 * C124334 +
             C63222 * C141499 + C62872 * C124335 + C63223 * C124182) *
                C141468 +
            (C133146 + C133147 + C133148 + C133149 + C133150 + C133151) *
                C141358) *
               C141294 * C816 -
           ((C64892 * C124182 + C64649 * C124335 + C58928 * C141499 +
             C58707 * C124334 + C56536 * C141498 + C56301 * C124333) *
                C141358 +
            (C133151 + C133150 + C133149 + C133148 + C133147 + C133146) *
                C141468) *
               C141294 * C141485) *
              C818 +
          (((C133152 + C133153 + C133154 + C133155 + C133156 + C133157) *
                C141468 +
            (C56307 * C124333 + C56539 * C141498 + C87373 * C124334 +
             C87686 * C141499 + (C55527 * C13304 + C141216 * C13308) * C124335 +
             (C55527 * C13478 + C141216 * C13800) * C124182) *
                C141358) *
               C141294 * C141485 -
           ((C133157 + C133156 + C133155 + C133154 + C133153 + C133152) *
                C141358 +
            (C63225 * C124182 + C62876 * C124335 + C63224 * C141499 +
             C62874 * C124334 + (C55527 * C277 + C141216 * C580) * C141498 +
             (C55527 * C109 + C141216 * C115) * C124333) *
                C141468) *
               C141294 * C816) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eezy[100] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C22172 * C108 + C141468 * C189 + C22173 * C823 + C141358 * C912) *
                C124333 +
            (C22172 * C276 + C141468 * C635 + C22173 * C1006 +
             C141358 * C1419) *
                C141498 +
            (C40064 + C40065) * C124334 + (C40902 + C40903) * C141499 +
            (C46923 + C46922) * C124335 + (C47531 + C47530) * C124182) *
               C141216 * C141294 * C816 -
           ((C22173 * C13477 + C141358 * C13876 + C22172 * C13475 +
             C141468 * C13875) *
                C124182 +
            (C22173 * C13303 + C141358 * C13394 + C22172 * C13301 +
             C141468 * C13393) *
                C124335 +
            (C44231 + C44230) * C141499 + (C43405 + C43404) * C124334 +
            (C22173 * C3084 + C141358 * C3362 + C22172 * C1006 +
             C141468 * C1419) *
                C141498 +
            (C22173 * C2960 + C141358 * C3026 + C22172 * C823 +
             C141468 * C912) *
                C124333) *
               C141216 * C141294 * C141485) *
              C818 +
          (((C23073 + C23072) * C124333 + (C23775 + C23774) * C141498 +
            (C38775 + C38774) * C124334 + (C39631 + C39630) * C141499 +
            (C22172 * C13302 + C141468 * C13395 + C22173 * C13304 +
             C141358 * C13396) *
                C124335 +
            (C22172 * C13476 + C141468 * C13877 + C22173 * C13478 +
             C141358 * C13878) *
                C124182) *
               C141216 * C141294 * C141485 -
           ((C40904 + C40905) * C124182 + (C40070 + C40071) * C124335 +
            C40901 * C141499 + C40063 * C124334 + (C22729 + C22728) * C141498 +
            (C22200 + C22199) * C124333) *
               C141216 * C141294 * C816) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eezz[100] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C124846 * C108 + C124850 + C124850 + C141498 * C714 +
             C124847 * C1601 + C124851 + C124851 + C141499 * C2283 +
             C124848 * C5325 + C124852 + C124852 + C124182 * C5781) *
                C141468 +
            (C133366 + C133367 + C133368) * C141358) *
               C141216 * C141294 * C816 -
           ((C124848 * C13303 + C128374 + C128374 + C124182 * C13954 +
             C124847 * C7887 + C128373 + C128373 + C141499 * C8794 +
             C124846 * C2960 + C128372 + C128372 + C141498 * C3416) *
                C141358 +
            (C133368 + C133367 + C133366) * C141468) *
               C141216 * C141294 * C141485) *
              C818 +
          (((C125830 + C125829 + C125828) * C141468 +
            (C124846 * C2961 + C128375 + C128375 + C141498 * C3417 +
             C124847 * C7886 + C128376 + C128376 + C141499 * C8793 +
             C124848 * C13304 + C128377 + C128377 + C124182 * C13956) *
                C141358) *
               C141216 * C141294 * C141485 -
           ((C125828 + C125829 + C125830) * C141358 +
            (C124888 + C124887 + C124886) * C141468) *
               C141216 * C141294 * C816) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eexx[101] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C55526 * C108 + C55529 + C55529 + C141216 * C120) * C141498 +
             C62512 * C141499 + C62513 * C124182) *
                C141468 +
            (C132525 + C132526 + C132527) * C141358) *
               C1596 -
           ((C65168 * C124182 + C61519 * C141499 + C58473 * C141498) * C141358 +
            (C67937 * C124182 + C62513 * C141499 + C62512 * C141498) *
                C141468) *
               C141487) *
              C141277 * C818 +
          (((C62514 * C141498 + C62515 * C141499 + C110456 * C124182) *
                C141468 +
            (C61520 * C141498 + C61521 * C141499 +
             (C55526 * C18583 + C62503 + C62503 + C141216 * C18587) * C124182) *
                C141358) *
               C141487 -
           ((C132530 + C132529 + C132528) * C141358 +
            (C62515 * C124182 + C62514 * C141499 +
             (C55526 * C109 + C55536 + C55536 + C141216 * C121) * C141498) *
                C141468) *
               C1596) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eexy[101] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22172 * C108 + C141468 * C189 + C22173 * C823 + C141358 * C912) *
                 C55527 +
             (C22172 * C114 + C141468 * C195 + C22173 * C828 + C141358 * C917) *
                 C141216) *
                C141498 +
            ((C40064 + C40065) * C55527 + (C40066 + C40067) * C141216) *
                C141499 +
            ((C46923 + C46922) * C55527 + (C46921 + C46920) * C141216) *
                C124182) *
               C1596 -
           (((C22173 * C18584 + C141358 * C18700 + C22172 * C15865 +
              C141468 * C16016) *
                 C141216 +
             (C22173 * C18582 + C141358 * C18698 + C22172 * C15862 +
              C141468 * C16013) *
                 C55527) *
                C124182 +
            ((C46920 + C46921) * C141216 + (C46922 + C46923) * C55527) *
                C141499 +
            ((C40067 + C40066) * C141216 + (C40065 + C40064) * C55527) *
                C141498) *
               C141487) *
              C141277 * C818 +
          (((C40052 * C55527 + C40053 * C141216) * C141498 +
            ((C40071 + C40070) * C55527 + (C40069 + C40068) * C141216) *
                C141499 +
            ((C22172 * C15861 + C141468 * C16012 + C22173 * C18583 +
              C141358 * C18699) *
                 C55527 +
             (C22172 * C15864 + C141468 * C16015 + C22173 * C18585 +
              C141358 * C18701) *
                 C141216) *
                C124182) *
               C141487 -
           (((C40068 + C40069) * C141216 + (C40070 + C40071) * C55527) *
                C124182 +
            (C40062 * C141216 + C40063 * C55527) * C141499 +
            ((C22202 + C22201) * C141216 + (C22200 + C22199) * C55527) *
                C141498) *
               C1596) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eexz[101] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C124333 * C108 + C141498 * C276 + C124334 * C1601 +
              C141499 * C1784 + C124335 * C5325 + C124182 * C5449) *
                 C55527 +
             (C124333 * C114 + C141498 * C282 + C124334 * C1606 +
              C141499 * C1789 + C124335 * C5329 + C124182 * C5453) *
                 C141216) *
                C141468 +
            ((C132739 + C132740 + C132741) * C55527 +
             (C132742 + C132743 + C132744) * C141216) *
                C141358) *
               C1596 -
           (((C124335 * C18584 + C124182 * C18822 + C124334 * C13305 +
              C141499 * C13479 + C124333 * C3494 + C141498 * C3650) *
                 C141216 +
             (C124335 * C18582 + C124182 * C18820 + C124334 * C13301 +
              C141499 * C13475 + C124333 * C3490 + C141498 * C3646) *
                 C55527) *
                C141358 +
            ((C124335 * C15865 + C124182 * C16154 + C124334 * C5329 +
              C141499 * C5453 + C124333 * C1606 + C141498 * C1789) *
                 C141216 +
             (C124335 * C15862 + C124182 * C16151 + C124334 * C5325 +
              C141499 * C5449 + C124333 * C1601 + C141498 * C1784) *
                 C55527) *
                C141468) *
               C141487) *
              C141277 * C818 +
          ((((C126170 + C126169 + C126168) * C55527 +
             (C126167 + C126166 + C126165) * C141216) *
                C141468 +
            ((C124333 * C3491 + C141498 * C3647 + C124334 * C13302 +
              C141499 * C13476 + C124335 * C18583 + C124182 * C18821) *
                 C55527 +
             (C124333 * C3495 + C141498 * C3651 + C124334 * C13306 +
              C141499 * C13480 + C124335 * C18585 + C124182 * C18823) *
                 C141216) *
                C141358) *
               C141487 -
           (((C125198 + C125199 + C125200) * C141216 +
             (C125201 + C125202 + C125203) * C55527) *
                C141358 +
            ((C124366 + C124365 + C124364) * C141216 +
             (C124363 + C124362 + C124361) * C55527) *
                C141468) *
               C1596) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[101] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((((C55527 * C108 + C141216 * C114) * C22172 +
                        (C55527 * C189 + C141216 * C362) * C141468 +
                        C56299 * C22173 + C56300 * C141358) *
                           C141498 +
                       (C133761 + C133762 + C133763 + C133764) * C141499 +
                       (C133765 + C133766 + C133767 + C133768) * C124182) *
                          C1596 -
                      ((C65523 * C141358 + C65524 * C22173 + C68190 * C141468 +
                        C68191 * C22172) *
                           C124182 +
                       (C133768 + C133767 + C133766 + C133765) * C141499 +
                       (C133764 + C133763 + C133762 + C133761) * C141498) *
                          C141487) *
                         C141277 * C818 +
                     (((C133769 + C133770 + C133771 + C133772) * C141498 +
                       (C133773 + C133774 + C133775 + C133776) * C141499 +
                       (C110681 * C22172 + C110682 * C141468 +
                        (C55527 * C18583 + C141216 * C18585) * C22173 +
                        (C55527 * C18699 + C141216 * C18923) * C141358) *
                           C124182) *
                          C141487 -
                      ((C133776 + C133775 + C133774 + C133773) * C124182 +
                       (C133772 + C133771 + C133770 + C133769) * C141499 +
                       (C56306 * C141358 + C56305 * C22173 +
                        (C55527 * C190 + C141216 * C363) * C141468 +
                        (C55527 * C109 + C141216 * C115) * C22172) *
                           C141498) *
                          C1596) *
                         C141277 * C141483)) /
                   (p * q * std::sqrt(p + q));
    d2eeyy[101] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C22434 * C108 + C22437 + C22437 + C141468 * C419 + C22435 * C823 +
             C22438 + C22438 + C141358 * C1171) *
                C141216 * C141498 +
            (C40492 + C40493) * C141216 * C141499 +
            (C47231 + C47230) * C141216 * C124182) *
               C1596 -
           ((C22435 * C18582 + C47223 + C47223 + C141358 * C19034 +
             C22434 * C15862 + C47222 + C47222 + C141468 * C16422) *
                C141216 * C124182 +
            (C47230 + C47231) * C141216 * C141499 +
            (C40493 + C40492) * C141216 * C141498) *
               C141487) *
              C141277 * C818 +
          ((C40478 * C141216 * C141498 + (C40495 + C40494) * C141216 * C141499 +
            (C22434 * C15861 + C47224 + C47224 + C141468 * C16421 +
             C22435 * C18583 + C47225 + C47225 + C141358 * C19035) *
                C141216 * C124182) *
               C141487 -
           ((C40494 + C40495) * C141216 * C124182 + C40483 * C141216 * C141499 +
            (C22472 + C22471) * C141216 * C141498) *
               C1596) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[101] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C124333 * C108 + C141498 * C276 + C124334 * C1601 +
             C141499 * C1784 + C124335 * C5325 + C124182 * C5449) *
                C22172 +
            (C124333 * C189 + C141498 * C501 + C124334 * C1690 +
             C141499 * C2040 + C124335 * C5391 + C124182 * C5619) *
                C141468 +
            (C132739 + C132740 + C132741) * C22173 +
            (C133045 + C133046 + C133047) * C141358) *
               C141216 * C1596 -
           ((C124335 * C18698 + C124182 * C19150 + C124334 * C13393 +
             C141499 * C13719 + C124333 * C3572 + C141498 * C3864) *
                C141358 +
            (C124335 * C18582 + C124182 * C18820 + C124334 * C13301 +
             C141499 * C13475 + C124333 * C3490 + C141498 * C3646) *
                C22173 +
            (C124335 * C16013 + C124182 * C16549 + C124334 * C5391 +
             C141499 * C5619 + C124333 * C1690 + C141498 * C2040) *
                C141468 +
            (C124335 * C15862 + C124182 * C16151 + C124334 * C5325 +
             C141499 * C5449 + C124333 * C1601 + C141498 * C1784) *
                C22172) *
               C141216 * C141487) *
              C141277 * C818 +
          (((C126170 + C126169 + C126168) * C22172 +
            (C126493 + C126492 + C126491) * C141468 +
            (C124333 * C3491 + C141498 * C3647 + C124334 * C13302 +
             C141499 * C13476 + C124335 * C18583 + C124182 * C18821) *
                C22173 +
            (C124333 * C3573 + C141498 * C3865 + C124334 * C13395 +
             C141499 * C13721 + C124335 * C18699 + C124182 * C19151) *
                C141358) *
               C141216 * C141487 -
           ((C125504 + C125505 + C125506) * C141358 +
            (C125201 + C125202 + C125203) * C22173 +
            (C124609 + C124608 + C124607) * C141468 +
            (C124363 + C124362 + C124361) * C22172) *
               C141216 * C1596) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eezx[101] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C55527 * C108 + C141216 * C114) * C124333 +
             (C55527 * C276 + C141216 * C579) * C141498 + C62870 * C124334 +
             C63222 * C141499 + C62872 * C124335 + C63223 * C124182) *
                C141468 +
            (C133146 + C133147 + C133148 + C133149 + C133150 + C133151) *
                C141358) *
               C1596 -
           ((C65860 * C124182 + C65524 * C124335 + C62177 * C141499 +
             C61849 * C124334 + C58929 * C141498 + C58709 * C124333) *
                C141358 +
            (C68436 * C124182 + C68191 * C124335 + C63223 * C141499 +
             C62872 * C124334 + C63222 * C141498 + C62870 * C124333) *
                C141468) *
               C141487) *
              C141277 * C818 +
          (((C62874 * C124333 + C63224 * C141498 + C62876 * C124334 +
             C63225 * C141499 + C110681 * C124335 + C110891 * C124182) *
                C141468 +
            (C61851 * C124333 + C62178 * C141498 + C61853 * C124334 +
             C62179 * C141499 + (C55527 * C18583 + C141216 * C18585) * C124335 +
             (C55527 * C18821 + C141216 * C19251) * C124182) *
                C141358) *
               C141487 -
           ((C133157 + C133156 + C133155 + C133154 + C133153 + C133152) *
                C141358 +
            (C63225 * C124182 + C62876 * C124335 + C63224 * C141499 +
             C62874 * C124334 + (C55527 * C277 + C141216 * C580) * C141498 +
             (C55527 * C109 + C141216 * C115) * C124333) *
                C141468) *
               C1596) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eezy[101] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C22172 * C108 + C141468 * C189 + C22173 * C823 + C141358 * C912) *
                C124333 +
            (C22172 * C276 + C141468 * C635 + C22173 * C1006 +
             C141358 * C1419) *
                C141498 +
            (C40064 + C40065) * C124334 + (C40902 + C40903) * C141499 +
            (C46923 + C46922) * C124335 + (C47531 + C47530) * C124182) *
               C141216 * C1596 -
           ((C22173 * C18820 + C141358 * C19356 + C22172 * C16151 +
             C141468 * C16784) *
                C124182 +
            (C22173 * C18582 + C141358 * C18698 + C22172 * C15862 +
             C141468 * C16013) *
                C124335 +
            (C47530 + C47531) * C141499 + (C46922 + C46923) * C124334 +
            (C40903 + C40902) * C141498 + (C40065 + C40064) * C124333) *
               C141216 * C141487) *
              C141277 * C818 +
          ((C40052 * C124333 + C40896 * C141498 + (C40071 + C40070) * C124334 +
            (C40905 + C40904) * C141499 +
            (C22172 * C15861 + C141468 * C16012 + C22173 * C18583 +
             C141358 * C18699) *
                C124335 +
            (C22172 * C16150 + C141468 * C16783 + C22173 * C18821 +
             C141358 * C19357) *
                C124182) *
               C141216 * C141487 -
           ((C40904 + C40905) * C124182 + (C40070 + C40071) * C124335 +
            C40901 * C141499 + C40063 * C124334 + (C22729 + C22728) * C141498 +
            (C22200 + C22199) * C124333) *
               C141216 * C1596) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eezz[101] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C124846 * C108 + C124850 + C124850 + C141498 * C714 +
             C124847 * C1601 + C124851 + C124851 + C141499 * C2283 +
             C124848 * C5325 + C124852 + C124852 + C124182 * C5781) *
                C141468 +
            (C133366 + C133367 + C133368) * C141358) *
               C141216 * C1596 -
           ((C124848 * C18582 + C129274 + C129274 + C124182 * C19462 +
             C124847 * C13301 + C129273 + C129273 + C141499 * C13953 +
             C124846 * C3490 + C129272 + C129272 + C141498 * C4074) *
                C141358 +
            (C124848 * C15862 + C126809 + C126809 + C124182 * C16900 +
             C124847 * C5325 + C126810 + C126810 + C141499 * C5781 +
             C124846 * C1601 + C126811 + C126811 + C141498 * C2283) *
                C141468) *
               C141216 * C141487) *
              C141277 * C818 +
          (((C126823 + C126822 + C126821) * C141468 +
            (C124846 * C3491 + C129275 + C129275 + C141498 * C4075 +
             C124847 * C13302 + C129276 + C129276 + C141499 * C13955 +
             C124848 * C18583 + C129277 + C129277 + C124182 * C19463) *
                C141358) *
               C141216 * C141487 -
           ((C125828 + C125829 + C125830) * C141358 +
            (C124888 + C124887 + C124886) * C141468) *
               C141216 * C1596) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eexx[102] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C55526 * C108 + C55529 + C55529 + C141216 * C120) * C141498 +
             C62512 * C141499 + C62513 * C124182) *
                C141468 +
            (C132525 + C132526 + C132527) * C141358) *
               C141294 * C2374 -
           ((C64402 * C124182 + C58472 * C141499 + C56054 * C141498) * C141358 +
            (C132527 + C132526 + C132525) * C141468) *
               C141294 * C141485) *
              C2376 +
          (((C132528 + C132529 + C132530) * C141468 +
            (C56057 * C141498 + C87073 * C141499 +
             (C55526 * C13304 + C61512 + C61512 + C141216 * C13312) * C124182) *
                C141358) *
               C141294 * C141485 -
           ((C132530 + C132529 + C132528) * C141358 +
            (C62515 * C124182 + C62514 * C141499 +
             (C55526 * C109 + C55536 + C55536 + C141216 * C121) * C141498) *
                C141468) *
               C141294 * C2374) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eexy[102] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22172 * C108 + C141468 * C189 + C22173 * C823 + C141358 * C912) *
                 C55527 +
             (C22172 * C114 + C141468 * C195 + C22173 * C828 + C141358 * C917) *
                 C141216) *
                C141498 +
            ((C40064 + C40065) * C55527 + (C40066 + C40067) * C141216) *
                C141499 +
            ((C46923 + C46922) * C55527 + (C46921 + C46920) * C141216) *
                C124182) *
               C141294 * C2374 -
           (((C22173 * C13307 + C141358 * C13398 + C22172 * C13305 +
              C141468 * C13397) *
                 C141216 +
             (C22173 * C13303 + C141358 * C13394 + C22172 * C13301 +
              C141468 * C13393) *
                 C55527) *
                C124182 +
            ((C43407 + C43406) * C141216 + (C43405 + C43404) * C55527) *
                C141499 +
            ((C22173 * C2964 + C141358 * C3030 + C22172 * C828 +
              C141468 * C917) *
                 C141216 +
             (C22173 * C2960 + C141358 * C3026 + C22172 * C823 +
              C141468 * C912) *
                 C55527) *
                C141498) *
               C141294 * C141485) *
              C2376 +
          ((((C23073 + C23072) * C55527 + (C23071 + C23070) * C141216) *
                C141498 +
            ((C38775 + C38774) * C55527 + (C38773 + C38772) * C141216) *
                C141499 +
            ((C22172 * C13302 + C141468 * C13395 + C22173 * C13304 +
              C141358 * C13396) *
                 C55527 +
             (C22172 * C13306 + C141468 * C13399 + C22173 * C13308 +
              C141358 * C13400) *
                 C141216) *
                C124182) *
               C141294 * C141485 -
           (((C40068 + C40069) * C141216 + (C40070 + C40071) * C55527) *
                C124182 +
            (C40062 * C141216 + C40063 * C55527) * C141499 +
            ((C22202 + C22201) * C141216 + (C22200 + C22199) * C55527) *
                C141498) *
               C141294 * C2374) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eexz[102] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C124333 * C108 + C141498 * C276 + C124334 * C1601 +
              C141499 * C1784 + C124335 * C5325 + C124182 * C5449) *
                 C55527 +
             (C124333 * C114 + C141498 * C282 + C124334 * C1606 +
              C141499 * C1789 + C124335 * C5329 + C124182 * C5453) *
                 C141216) *
                C141468 +
            ((C132739 + C132740 + C132741) * C55527 +
             (C132742 + C132743 + C132744) * C141216) *
                C141358) *
               C141294 * C2374 -
           (((C124335 * C13307 + C124182 * C13481 + C124334 * C7890 +
              C141499 * C8131 + C124333 * C2964 + C141498 * C3088) *
                 C141216 +
             (C124335 * C13303 + C124182 * C13477 + C124334 * C7887 +
              C141499 * C8128 + C124333 * C2960 + C141498 * C3084) *
                 C55527) *
                C141358 +
            ((C132744 + C132743 + C132742) * C141216 +
             (C132741 + C132740 + C132739) * C55527) *
                C141468) *
               C141294 * C141485) *
              C2376 +
          ((((C125203 + C125202 + C125201) * C55527 +
             (C125200 + C125199 + C125198) * C141216) *
                C141468 +
            ((C124333 * C2961 + C141498 * C3085 + C124334 * C7886 +
              C141499 * C8127 + C124335 * C13304 + C124182 * C13478) *
                 C55527 +
             (C124333 * C2965 + C141498 * C3089 + C124334 * C7889 +
              C141499 * C8130 + C124335 * C13308 + C124182 * C13482) *
                 C141216) *
                C141358) *
               C141294 * C141485 -
           (((C125198 + C125199 + C125200) * C141216 +
             (C125201 + C125202 + C125203) * C55527) *
                C141358 +
            ((C124366 + C124365 + C124364) * C141216 +
             (C124363 + C124362 + C124361) * C55527) *
                C141468) *
               C141294 * C2374) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[102] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((((C55527 * C108 + C141216 * C114) * C22172 +
                        (C55527 * C189 + C141216 * C362) * C141468 +
                        C56299 * C22173 + C56300 * C141358) *
                           C141498 +
                       (C133761 + C133762 + C133763 + C133764) * C141499 +
                       (C133765 + C133766 + C133767 + C133768) * C124182) *
                          C141294 * C2374 -
                      ((C64648 * C141358 + C64649 * C22173 + C61850 * C141468 +
                        C61849 * C22172) *
                           C124182 +
                       (C58706 * C141358 + C58707 * C22173 + C58708 * C141468 +
                        C58709 * C22172) *
                           C141499 +
                       (C56302 * C141358 + C56301 * C22173 + C56300 * C141468 +
                        C56299 * C22172) *
                           C141498) *
                          C141294 * C141485) *
                         C2376 +
                     (((C56305 * C22172 + C56306 * C141468 + C56307 * C22173 +
                        C56308 * C141358) *
                           C141498 +
                       (C61851 * C22172 + C61852 * C141468 + C87373 * C22173 +
                        C87374 * C141358) *
                           C141499 +
                       (C61853 * C22172 + C61854 * C141468 +
                        (C55527 * C13304 + C141216 * C13308) * C22173 +
                        (C55527 * C13396 + C141216 * C13560) * C141358) *
                           C124182) *
                          C141294 * C141485 -
                      ((C133776 + C133775 + C133774 + C133773) * C124182 +
                       (C133772 + C133771 + C133770 + C133769) * C141499 +
                       (C56306 * C141358 + C56305 * C22173 +
                        (C55527 * C190 + C141216 * C363) * C141468 +
                        (C55527 * C109 + C141216 * C115) * C22172) *
                           C141498) *
                          C141294 * C2374) *
                         C141483)) /
                   (p * q * std::sqrt(p + q));
    d2eeyy[102] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C22434 * C108 + C22437 + C22437 + C141468 * C419 + C22435 * C823 +
             C22438 + C22438 + C141358 * C1171) *
                C141216 * C141498 +
            (C40492 + C40493) * C141216 * C141499 +
            (C47231 + C47230) * C141216 * C124182) *
               C141294 * C2374 -
           ((C22435 * C13303 + C43819 + C43819 + C141358 * C13636 +
             C22434 * C13301 + C43818 + C43818 + C141468 * C13635) *
                C141216 * C124182 +
            (C43827 + C43826) * C141216 * C141499 +
            (C22435 * C2960 + C23428 + C23428 + C141358 * C3196 +
             C22434 * C823 + C23429 + C23429 + C141468 * C1171) *
                C141216 * C141498) *
               C141294 * C141485) *
              C2376 +
          (((C23443 + C23442) * C141216 * C141498 +
            (C39215 + C39214) * C141216 * C141499 +
            (C22434 * C13302 + C43820 + C43820 + C141468 * C13637 +
             C22435 * C13304 + C43821 + C43821 + C141358 * C13638) *
                C141216 * C124182) *
               C141294 * C141485 -
           ((C40494 + C40495) * C141216 * C124182 + C40483 * C141216 * C141499 +
            (C22472 + C22471) * C141216 * C141498) *
               C141294 * C2374) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[102] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((C124333 * C108 + C141498 * C276 + C124334 * C1601 +
                        C141499 * C1784 + C124335 * C5325 + C124182 * C5449) *
                           C22172 +
                       (C124333 * C189 + C141498 * C501 + C124334 * C1690 +
                        C141499 * C2040 + C124335 * C5391 + C124182 * C5619) *
                           C141468 +
                       (C132739 + C132740 + C132741) * C22173 +
                       (C133045 + C133046 + C133047) * C141358) *
                          C141216 * C141294 * C2374 -
                      ((C124335 * C13394 + C124182 * C13720 + C124334 * C8006 +
                        C141499 * C8470 + C124333 * C3026 + C141498 * C3254) *
                           C141358 +
                       (C124335 * C13303 + C124182 * C13477 + C124334 * C7887 +
                        C141499 * C8128 + C124333 * C2960 + C141498 * C3084) *
                           C22173 +
                       (C133047 + C133046 + C133045) * C141468 +
                       (C132741 + C132740 + C132739) * C22172) *
                          C141216 * C141294 * C141485) *
                         C2376 +
                     (((C125203 + C125202 + C125201) * C22172 +
                       (C125506 + C125505 + C125504) * C141468 +
                       (C124333 * C2961 + C141498 * C3085 + C124334 * C7886 +
                        C141499 * C8127 + C124335 * C13304 + C124182 * C13478) *
                           C22173 +
                       (C124333 * C3027 + C141498 * C3255 + C124334 * C8005 +
                        C141499 * C8469 + C124335 * C13396 + C124182 * C13722) *
                           C141358) *
                          C141216 * C141294 * C141485 -
                      ((C125504 + C125505 + C125506) * C141358 +
                       (C125201 + C125202 + C125203) * C22173 +
                       (C124609 + C124608 + C124607) * C141468 +
                       (C124363 + C124362 + C124361) * C22172) *
                          C141216 * C141294 * C2374) *
                         C141483)) /
                   (p * q * std::sqrt(p + q));
    d2eezx[102] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C55527 * C108 + C141216 * C114) * C124333 +
             (C55527 * C276 + C141216 * C579) * C141498 + C62870 * C124334 +
             C63222 * C141499 + C62872 * C124335 + C63223 * C124182) *
                C141468 +
            (C133146 + C133147 + C133148 + C133149 + C133150 + C133151) *
                C141358) *
               C141294 * C2374 -
           ((C64892 * C124182 + C64649 * C124335 + C58928 * C141499 +
             C58707 * C124334 + C56536 * C141498 + C56301 * C124333) *
                C141358 +
            (C133151 + C133150 + C133149 + C133148 + C133147 + C133146) *
                C141468) *
               C141294 * C141485) *
              C2376 +
          (((C133152 + C133153 + C133154 + C133155 + C133156 + C133157) *
                C141468 +
            (C56307 * C124333 + C56539 * C141498 + C87373 * C124334 +
             C87686 * C141499 + (C55527 * C13304 + C141216 * C13308) * C124335 +
             (C55527 * C13478 + C141216 * C13800) * C124182) *
                C141358) *
               C141294 * C141485 -
           ((C133157 + C133156 + C133155 + C133154 + C133153 + C133152) *
                C141358 +
            (C63225 * C124182 + C62876 * C124335 + C63224 * C141499 +
             C62874 * C124334 + (C55527 * C277 + C141216 * C580) * C141498 +
             (C55527 * C109 + C141216 * C115) * C124333) *
                C141468) *
               C141294 * C2374) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eezy[102] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C22172 * C108 + C141468 * C189 + C22173 * C823 + C141358 * C912) *
                C124333 +
            (C22172 * C276 + C141468 * C635 + C22173 * C1006 +
             C141358 * C1419) *
                C141498 +
            (C40064 + C40065) * C124334 + (C40902 + C40903) * C141499 +
            (C46923 + C46922) * C124335 + (C47531 + C47530) * C124182) *
               C141216 * C141294 * C2374 -
           ((C22173 * C13477 + C141358 * C13876 + C22172 * C13475 +
             C141468 * C13875) *
                C124182 +
            (C22173 * C13303 + C141358 * C13394 + C22172 * C13301 +
             C141468 * C13393) *
                C124335 +
            (C44231 + C44230) * C141499 + (C43405 + C43404) * C124334 +
            (C22173 * C3084 + C141358 * C3362 + C22172 * C1006 +
             C141468 * C1419) *
                C141498 +
            (C22173 * C2960 + C141358 * C3026 + C22172 * C823 +
             C141468 * C912) *
                C124333) *
               C141216 * C141294 * C141485) *
              C2376 +
          (((C23073 + C23072) * C124333 + (C23775 + C23774) * C141498 +
            (C38775 + C38774) * C124334 + (C39631 + C39630) * C141499 +
            (C22172 * C13302 + C141468 * C13395 + C22173 * C13304 +
             C141358 * C13396) *
                C124335 +
            (C22172 * C13476 + C141468 * C13877 + C22173 * C13478 +
             C141358 * C13878) *
                C124182) *
               C141216 * C141294 * C141485 -
           ((C40904 + C40905) * C124182 + (C40070 + C40071) * C124335 +
            C40901 * C141499 + C40063 * C124334 + (C22729 + C22728) * C141498 +
            (C22200 + C22199) * C124333) *
               C141216 * C141294 * C2374) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eezz[102] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C124846 * C108 + C124850 + C124850 + C141498 * C714 +
             C124847 * C1601 + C124851 + C124851 + C141499 * C2283 +
             C124848 * C5325 + C124852 + C124852 + C124182 * C5781) *
                C141468 +
            (C133366 + C133367 + C133368) * C141358) *
               C141216 * C141294 * C2374 -
           ((C124848 * C13303 + C128374 + C128374 + C124182 * C13954 +
             C124847 * C7887 + C128373 + C128373 + C141499 * C8794 +
             C124846 * C2960 + C128372 + C128372 + C141498 * C3416) *
                C141358 +
            (C133368 + C133367 + C133366) * C141468) *
               C141216 * C141294 * C141485) *
              C2376 +
          (((C125830 + C125829 + C125828) * C141468 +
            (C124846 * C2961 + C128375 + C128375 + C141498 * C3417 +
             C124847 * C7886 + C128376 + C128376 + C141499 * C8793 +
             C124848 * C13304 + C128377 + C128377 + C124182 * C13956) *
                C141358) *
               C141216 * C141294 * C141485 -
           ((C125828 + C125829 + C125830) * C141358 +
            (C124888 + C124887 + C124886) * C141468) *
               C141216 * C141294 * C2374) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eexx[103] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C55526 * C108 + C55529 + C55529 + C141216 * C120) * C141498 +
            C62512 * C141499 + C62513 * C124182) *
               C141468 +
           (C132525 + C132526 + C132527) * C141358) *
              C141294 * C2956 -
          ((C135223 + C135224 + C135225) * C141358 +
           (C132527 + C132526 + C132525) * C141468) *
              C141294 * C2957 +
          ((C135225 + C135224 + C135223) * C141468 +
           (C56055 * C141498 + C58471 * C141499 +
            (C55526 * C60310 + C60317 + C60317 + C141216 * C60312) * C124182) *
               C141358) *
              C141294 * C2958) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eexy[103] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C22172 * C108 + C141468 * C189 + C22173 * C823 + C141358 * C912) *
                C55527 +
            (C22172 * C114 + C141468 * C195 + C22173 * C828 + C141358 * C917) *
                C141216) *
               C141498 +
           ((C40064 + C40065) * C55527 + (C40066 + C40067) * C141216) *
               C141499 +
           ((C46923 + C46922) * C55527 + (C46921 + C46920) * C141216) *
               C124182) *
              C141294 * C2956 -
          (((C22173 * C13307 + C141358 * C13398 + C22172 * C13305 +
             C141468 * C13397) *
                C141216 +
            (C22173 * C13303 + C141358 * C13394 + C22172 * C13301 +
             C141468 * C13393) *
                C55527) *
               C124182 +
           ((C43407 + C43406) * C141216 + (C43405 + C43404) * C55527) *
               C141499 +
           ((C22173 * C2964 + C141358 * C3030 + C22172 * C828 +
             C141468 * C917) *
                C141216 +
            (C22173 * C2960 + C141358 * C3026 + C22172 * C823 +
             C141468 * C912) *
                C55527) *
               C141498) *
              C141294 * C2957 +
          (((C22172 * C2960 + C141468 * C3026 + C22173 * C6729 +
             C141358 * C6880) *
                C55527 +
            (C22172 * C2964 + C141468 * C3030 + C22173 * C6732 +
             C141358 * C6883) *
                C141216) *
               C141498 +
           ((C22172 * C7887 + C141468 * C8006 + C22173 * C10551 +
             C141358 * C10677) *
                C55527 +
            (C22172 * C7890 + C141468 * C8009 + C22173 * C10553 +
             C141358 * C10679) *
                C141216) *
               C141499 +
           ((C22172 * C13303 + C141468 * C13394 + C22173 * C60310 +
             C141358 * C60367) *
                C55527 +
            (C22172 * C13307 + C141468 * C13398 + C22173 * C60311 +
             C141358 * C60368) *
                C141216) *
               C124182) *
              C141294 * C2958) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eexz[103] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C124333 * C108 + C141498 * C276 + C124334 * C1601 +
             C141499 * C1784 + C124335 * C5325 + C124182 * C5449) *
                C55527 +
            (C124333 * C114 + C141498 * C282 + C124334 * C1606 +
             C141499 * C1789 + C124335 * C5329 + C124182 * C5453) *
                C141216) *
               C141468 +
           ((C132739 + C132740 + C132741) * C55527 +
            (C132742 + C132743 + C132744) * C141216) *
               C141358) *
              C141294 * C2956 -
          (((C135386 + C135387 + C135388) * C141216 +
            (C135389 + C135390 + C135391) * C55527) *
               C141358 +
           ((C132744 + C132743 + C132742) * C141216 +
            (C132741 + C132740 + C132739) * C55527) *
               C141468) *
              C141294 * C2957 +
          (((C135391 + C135390 + C135389) * C55527 +
            (C135388 + C135387 + C135386) * C141216) *
               C141468 +
           ((C124333 * C6729 + C141498 * C7002 + C124334 * C10551 +
             C141499 * C10779 + C124335 * C60310 + C124182 * C60419) *
                C55527 +
            (C124333 * C6732 + C141498 * C7005 + C124334 * C10553 +
             C141499 * C10781 + C124335 * C60311 + C124182 * C60420) *
                C141216) *
               C141358) *
              C141294 * C2958) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eeyx[103] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((C55527 * C108 + C141216 * C114) * C22172 +
                       (C55527 * C189 + C141216 * C362) * C141468 +
                       C56299 * C22173 + C56300 * C141358) *
                          C141498 +
                      (C133761 + C133762 + C133763 + C133764) * C141499 +
                      (C133765 + C133766 + C133767 + C133768) * C124182) *
                         C141294 * C2956 -
                     ((C64648 * C141358 + C64649 * C22173 + C61850 * C141468 +
                       C61849 * C22172) *
                          C124182 +
                      (C58706 * C141358 + C58707 * C22173 + C58708 * C141468 +
                       C58709 * C22172) *
                          C141499 +
                      (C56302 * C141358 + C56301 * C22173 + C56300 * C141468 +
                       C56299 * C22172) *
                          C141498) *
                         C141294 * C2957 +
                     ((C56301 * C22172 + C56302 * C141468 + C56303 * C22173 +
                       C56304 * C141358) *
                          C141498 +
                      (C58707 * C22172 + C58706 * C141468 + C58705 * C22173 +
                       C58704 * C141358) *
                          C141499 +
                      (C64649 * C22172 + C64648 * C141468 +
                       (C55527 * C60310 + C141216 * C60311) * C22173 +
                       (C55527 * C60367 + C141216 * C60471) * C141358) *
                          C124182) *
                         C141294 * C2958) *
                    C141243) /
                   (p * q * std::sqrt(p + q));
    d2eeyy[103] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((C22434 * C108 + C22437 + C22437 + C141468 * C419 +
                       C22435 * C823 + C22438 + C22438 + C141358 * C1171) *
                          C141216 * C141498 +
                      (C40492 + C40493) * C141216 * C141499 +
                      (C47231 + C47230) * C141216 * C124182) *
                         C141294 * C2956 -
                     ((C22435 * C13303 + C43819 + C43819 + C141358 * C13636 +
                       C22434 * C13301 + C43818 + C43818 + C141468 * C13635) *
                          C141216 * C124182 +
                      (C43827 + C43826) * C141216 * C141499 +
                      (C22435 * C2960 + C23428 + C23428 + C141358 * C3196 +
                       C22434 * C823 + C23429 + C23429 + C141468 * C1171) *
                          C141216 * C141498) *
                         C141294 * C2957 +
                     ((C22434 * C2960 + C26156 + C26156 + C141468 * C3196 +
                       C22435 * C6729 + C26157 + C26157 + C141358 * C7289) *
                          C141216 * C141498 +
                      (C22434 * C7887 + C42718 + C42718 + C141468 * C8345 +
                       C22435 * C10551 + C42719 + C42719 + C141358 * C11025) *
                          C141216 * C141499 +
                      (C22434 * C13303 + C135540 + C135540 + C141468 * C13636 +
                       C22435 * C60310 + C135541 + C135541 + C141358 * C60522) *
                          C141216 * C124182) *
                         C141294 * C2958) *
                    C141243) /
                   (p * q * std::sqrt(p + q));
    d2eeyz[103] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((C124333 * C108 + C141498 * C276 + C124334 * C1601 +
                       C141499 * C1784 + C124335 * C5325 + C124182 * C5449) *
                          C22172 +
                      (C124333 * C189 + C141498 * C501 + C124334 * C1690 +
                       C141499 * C2040 + C124335 * C5391 + C124182 * C5619) *
                          C141468 +
                      (C132739 + C132740 + C132741) * C22173 +
                      (C133045 + C133046 + C133047) * C141358) *
                         C141216 * C141294 * C2956 -
                     ((C135622 + C135623 + C135624) * C141358 +
                      (C135389 + C135390 + C135391) * C22173 +
                      (C133047 + C133046 + C133045) * C141468 +
                      (C132741 + C132740 + C132739) * C22172) *
                         C141216 * C141294 * C2957 +
                     ((C135391 + C135390 + C135389) * C22172 +
                      (C135624 + C135623 + C135622) * C141468 +
                      (C124333 * C6729 + C141498 * C7002 + C124334 * C10551 +
                       C141499 * C10779 + C124335 * C60310 + C124182 * C60419) *
                          C22173 +
                      (C124333 * C6880 + C141498 * C7414 + C124334 * C10677 +
                       C141499 * C11131 + C124335 * C60367 + C124182 * C60577) *
                          C141358) *
                         C141216 * C141294 * C2958) *
                    C141243) /
                   (p * q * std::sqrt(p + q));
    d2eezx[103] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C55527 * C108 + C141216 * C114) * C124333 +
            (C55527 * C276 + C141216 * C579) * C141498 + C62870 * C124334 +
            C63222 * C141499 + C62872 * C124335 + C63223 * C124182) *
               C141468 +
           (C133146 + C133147 + C133148 + C133149 + C133150 + C133151) *
               C141358) *
              C141294 * C2956 -
          ((C135699 + C135700 + C135701 + C135702 + C135703 + C135704) *
               C141358 +
           (C133151 + C133150 + C133149 + C133148 + C133147 + C133146) *
               C141468) *
              C141294 * C2957 +
          ((C135704 + C135703 + C135702 + C135701 + C135700 + C135699) *
               C141468 +
           (C56303 * C124333 + C56537 * C141498 + C58705 * C124334 +
            C58927 * C141499 + (C55527 * C60310 + C141216 * C60311) * C124335 +
            (C55527 * C60419 + C141216 * C60628) * C124182) *
               C141358) *
              C141294 * C2958) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eezy[103] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C22172 * C108 + C141468 * C189 + C22173 * C823 + C141358 * C912) *
               C124333 +
           (C22172 * C276 + C141468 * C635 + C22173 * C1006 + C141358 * C1419) *
               C141498 +
           (C40064 + C40065) * C124334 + (C40902 + C40903) * C141499 +
           (C46923 + C46922) * C124335 + (C47531 + C47530) * C124182) *
              C141216 * C141294 * C2956 -
          ((C22173 * C13477 + C141358 * C13876 + C22172 * C13475 +
            C141468 * C13875) *
               C124182 +
           (C22173 * C13303 + C141358 * C13394 + C22172 * C13301 +
            C141468 * C13393) *
               C124335 +
           (C44231 + C44230) * C141499 + (C43405 + C43404) * C124334 +
           (C22173 * C3084 + C141358 * C3362 + C22172 * C1006 +
            C141468 * C1419) *
               C141498 +
           (C22173 * C2960 + C141358 * C3026 + C22172 * C823 + C141468 * C912) *
               C124333) *
              C141216 * C141294 * C2957 +
          ((C22172 * C2960 + C141468 * C3026 + C22173 * C6729 +
            C141358 * C6880) *
               C124333 +
           (C22172 * C3084 + C141468 * C3362 + C22173 * C7002 +
            C141358 * C7655) *
               C141498 +
           (C22172 * C7887 + C141468 * C8006 + C22173 * C10551 +
            C141358 * C10677) *
               C124334 +
           (C22172 * C8128 + C141468 * C8684 + C22173 * C10779 +
            C141358 * C11349) *
               C141499 +
           (C22172 * C13303 + C141468 * C13394 + C22173 * C60310 +
            C141358 * C60367) *
               C124335 +
           (C22172 * C13477 + C141468 * C13876 + C22173 * C60419 +
            C141358 * C60679) *
               C124182) *
              C141216 * C141294 * C2958) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eezz[103] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C124846 * C108 + C124850 + C124850 + C141498 * C714 +
            C124847 * C1601 + C124851 + C124851 + C141499 * C2283 +
            C124848 * C5325 + C124852 + C124852 + C124182 * C5781) *
               C141468 +
           (C133366 + C133367 + C133368) * C141358) *
              C141216 * C141294 * C2956 -
          ((C135868 + C135869 + C135870) * C141358 +
           (C133368 + C133367 + C133366) * C141468) *
              C141216 * C141294 * C2957 +
          ((C135870 + C135869 + C135868) * C141468 +
           (C124846 * C6729 + C135859 + C135859 + C141498 * C7765 +
            C124847 * C10551 + C135860 + C135860 + C141499 * C11449 +
            C124848 * C60310 + C135861 + C135861 + C124182 * C60730) *
               C141358) *
              C141216 * C141294 * C2958) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eexx[104] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C55526 * C108 + C55529 + C55529 + C141216 * C120) * C141498 +
             C62512 * C141499 + C62513 * C124182) *
                C141468 +
            (C132525 + C132526 + C132527) * C141358) *
               C1596 -
           ((C135969 + C135970 + C135971) * C141358 +
            (C67937 * C124182 + C62513 * C141499 + C62512 * C141498) *
                C141468) *
               C141487) *
              C2374 +
          (((C135971 + C135970 + C135969) * C141468 +
            (C58472 * C141498 + C64402 * C141499 +
             (C55526 * C65157 + C65165 + C65165 + C141216 * C65159) * C124182) *
                C141358) *
               C141487 -
           ((C135223 + C135224 + C135225) * C141358 +
            (C132527 + C132526 + C132525) * C141468) *
               C1596) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eexy[104] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22172 * C108 + C141468 * C189 + C22173 * C823 + C141358 * C912) *
                 C55527 +
             (C22172 * C114 + C141468 * C195 + C22173 * C828 + C141358 * C917) *
                 C141216) *
                C141498 +
            ((C40064 + C40065) * C55527 + (C40066 + C40067) * C141216) *
                C141499 +
            ((C46923 + C46922) * C55527 + (C46921 + C46920) * C141216) *
                C124182) *
               C1596 -
           (((C22173 * C18584 + C141358 * C18700 + C22172 * C15865 +
              C141468 * C16016) *
                 C141216 +
             (C22173 * C18582 + C141358 * C18698 + C22172 * C15862 +
              C141468 * C16013) *
                 C55527) *
                C124182 +
            ((C46920 + C46921) * C141216 + (C46922 + C46923) * C55527) *
                C141499 +
            ((C40067 + C40066) * C141216 + (C40065 + C40064) * C55527) *
                C141498) *
               C141487) *
              C2374 +
          ((((C43404 + C43405) * C55527 + (C43406 + C43407) * C141216) *
                C141498 +
            ((C136078 + C136079) * C55527 + (C136080 + C136081) * C141216) *
                C141499 +
            ((C22172 * C18582 + C141468 * C18698 + C22173 * C65157 +
              C141358 * C65267) *
                 C55527 +
             (C22172 * C18584 + C141468 * C18700 + C22173 * C65158 +
              C141358 * C65268) *
                 C141216) *
                C124182) *
               C141487 -
           (((C136081 + C136080) * C141216 + (C136079 + C136078) * C55527) *
                C124182 +
            ((C43407 + C43406) * C141216 + (C43405 + C43404) * C55527) *
                C141499 +
            ((C22173 * C2964 + C141358 * C3030 + C22172 * C828 +
              C141468 * C917) *
                 C141216 +
             (C22173 * C2960 + C141358 * C3026 + C22172 * C823 +
              C141468 * C912) *
                 C55527) *
                C141498) *
               C1596) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eexz[104] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C124333 * C108 + C141498 * C276 + C124334 * C1601 +
              C141499 * C1784 + C124335 * C5325 + C124182 * C5449) *
                 C55527 +
             (C124333 * C114 + C141498 * C282 + C124334 * C1606 +
              C141499 * C1789 + C124335 * C5329 + C124182 * C5453) *
                 C141216) *
                C141468 +
            ((C132739 + C132740 + C132741) * C55527 +
             (C132742 + C132743 + C132744) * C141216) *
                C141358) *
               C1596 -
           (((C136192 + C136193 + C136194) * C141216 +
             (C136195 + C136196 + C136197) * C55527) *
                C141358 +
            ((C124335 * C15865 + C124182 * C16154 + C124334 * C5329 +
              C141499 * C5453 + C124333 * C1606 + C141498 * C1789) *
                 C141216 +
             (C124335 * C15862 + C124182 * C16151 + C124334 * C5325 +
              C141499 * C5449 + C124333 * C1601 + C141498 * C1784) *
                 C55527) *
                C141468) *
               C141487) *
              C2374 +
          ((((C136197 + C136196 + C136195) * C55527 +
             (C136194 + C136193 + C136192) * C141216) *
                C141468 +
            ((C124333 * C7887 + C141498 * C8128 + C124334 * C13303 +
              C141499 * C13477 + C124335 * C65157 + C124182 * C65391) *
                 C55527 +
             (C124333 * C7890 + C141498 * C8131 + C124334 * C13307 +
              C141499 * C13481 + C124335 * C65158 + C124182 * C65392) *
                 C141216) *
                C141358) *
               C141487 -
           (((C135386 + C135387 + C135388) * C141216 +
             (C135389 + C135390 + C135391) * C55527) *
                C141358 +
            ((C132744 + C132743 + C132742) * C141216 +
             (C132741 + C132740 + C132739) * C55527) *
                C141468) *
               C1596) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eeyx[104] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((((C55527 * C108 + C141216 * C114) * C22172 +
                        (C55527 * C189 + C141216 * C362) * C141468 +
                        C56299 * C22173 + C56300 * C141358) *
                           C141498 +
                       (C133761 + C133762 + C133763 + C133764) * C141499 +
                       (C133765 + C133766 + C133767 + C133768) * C124182) *
                          C1596 -
                      ((C65523 * C141358 + C65524 * C22173 + C68190 * C141468 +
                        C68191 * C22172) *
                           C124182 +
                       (C133768 + C133767 + C133766 + C133765) * C141499 +
                       (C133764 + C133763 + C133762 + C133761) * C141498) *
                          C141487) *
                         C2374 +
                     (((C136296 + C136297 + C136298 + C136299) * C141498 +
                       (C136300 + C136301 + C136302 + C136303) * C141499 +
                       (C65524 * C22172 + C65523 * C141468 +
                        (C55527 * C65157 + C141216 * C65158) * C22173 +
                        (C55527 * C65267 + C141216 * C65509) * C141358) *
                           C124182) *
                          C141487 -
                      ((C136303 + C136302 + C136301 + C136300) * C124182 +
                       (C136299 + C136298 + C136297 + C136296) * C141499 +
                       (C56302 * C141358 + C56301 * C22173 + C56300 * C141468 +
                        C56299 * C22172) *
                           C141498) *
                          C1596) *
                         C141485) *
                    C141243) /
                   (p * q * std::sqrt(p + q));
    d2eeyy[104] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C22434 * C108 + C22437 + C22437 + C141468 * C419 + C22435 * C823 +
             C22438 + C22438 + C141358 * C1171) *
                C141216 * C141498 +
            (C40492 + C40493) * C141216 * C141499 +
            (C47231 + C47230) * C141216 * C124182) *
               C1596 -
           ((C22435 * C18582 + C47223 + C47223 + C141358 * C19034 +
             C22434 * C15862 + C47222 + C47222 + C141468 * C16422) *
                C141216 * C124182 +
            (C47230 + C47231) * C141216 * C141499 +
            (C40493 + C40492) * C141216 * C141498) *
               C141487) *
              C2374 +
          (((C43826 + C43827) * C141216 * C141498 +
            (C136412 + C136413) * C141216 * C141499 +
            (C22434 * C18582 + C136406 + C136406 + C141468 * C19034 +
             C22435 * C65157 + C136407 + C136407 + C141358 * C65622) *
                C141216 * C124182) *
               C141487 -
           ((C136413 + C136412) * C141216 * C124182 +
            (C43827 + C43826) * C141216 * C141499 +
            (C22435 * C2960 + C23428 + C23428 + C141358 * C3196 +
             C22434 * C823 + C23429 + C23429 + C141468 * C1171) *
                C141216 * C141498) *
               C1596) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eeyz[104] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C124333 * C108 + C141498 * C276 + C124334 * C1601 +
             C141499 * C1784 + C124335 * C5325 + C124182 * C5449) *
                C22172 +
            (C124333 * C189 + C141498 * C501 + C124334 * C1690 +
             C141499 * C2040 + C124335 * C5391 + C124182 * C5619) *
                C141468 +
            (C132739 + C132740 + C132741) * C22173 +
            (C133045 + C133046 + C133047) * C141358) *
               C141216 * C1596 -
           ((C136518 + C136519 + C136520) * C141358 +
            (C136195 + C136196 + C136197) * C22173 +
            (C124335 * C16013 + C124182 * C16549 + C124334 * C5391 +
             C141499 * C5619 + C124333 * C1690 + C141498 * C2040) *
                C141468 +
            (C124335 * C15862 + C124182 * C16151 + C124334 * C5325 +
             C141499 * C5449 + C124333 * C1601 + C141498 * C1784) *
                C22172) *
               C141216 * C141487) *
              C2374 +
          (((C136197 + C136196 + C136195) * C22172 +
            (C136520 + C136519 + C136518) * C141468 +
            (C124333 * C7887 + C141498 * C8128 + C124334 * C13303 +
             C141499 * C13477 + C124335 * C65157 + C124182 * C65391) *
                C22173 +
            (C124333 * C8006 + C141498 * C8470 + C124334 * C13394 +
             C141499 * C13720 + C124335 * C65267 + C124182 * C65743) *
                C141358) *
               C141216 * C141487 -
           ((C135622 + C135623 + C135624) * C141358 +
            (C135389 + C135390 + C135391) * C22173 +
            (C133047 + C133046 + C133045) * C141468 +
            (C132741 + C132740 + C132739) * C22172) *
               C141216 * C1596) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eezx[104] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C55527 * C108 + C141216 * C114) * C124333 +
             (C55527 * C276 + C141216 * C579) * C141498 + C62870 * C124334 +
             C63222 * C141499 + C62872 * C124335 + C63223 * C124182) *
                C141468 +
            (C133146 + C133147 + C133148 + C133149 + C133150 + C133151) *
                C141358) *
               C1596 -
           ((C136619 + C136620 + C136621 + C136622 + C136623 + C136624) *
                C141358 +
            (C68436 * C124182 + C68191 * C124335 + C63223 * C141499 +
             C62872 * C124334 + C63222 * C141498 + C62870 * C124333) *
                C141468) *
               C141487) *
              C2374 +
          (((C136624 + C136623 + C136622 + C136621 + C136620 + C136619) *
                C141468 +
            (C58707 * C124333 + C58928 * C141498 + C64649 * C124334 +
             C64892 * C141499 + (C55527 * C65157 + C141216 * C65158) * C124335 +
             (C55527 * C65391 + C141216 * C65851) * C124182) *
                C141358) *
               C141487 -
           ((C135699 + C135700 + C135701 + C135702 + C135703 + C135704) *
                C141358 +
            (C133151 + C133150 + C133149 + C133148 + C133147 + C133146) *
                C141468) *
               C1596) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eezy[104] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C22172 * C108 + C141468 * C189 + C22173 * C823 + C141358 * C912) *
                C124333 +
            (C22172 * C276 + C141468 * C635 + C22173 * C1006 +
             C141358 * C1419) *
                C141498 +
            (C40064 + C40065) * C124334 + (C40902 + C40903) * C141499 +
            (C46923 + C46922) * C124335 + (C47531 + C47530) * C124182) *
               C141216 * C1596 -
           ((C22173 * C18820 + C141358 * C19356 + C22172 * C16151 +
             C141468 * C16784) *
                C124182 +
            (C22173 * C18582 + C141358 * C18698 + C22172 * C15862 +
             C141468 * C16013) *
                C124335 +
            (C47530 + C47531) * C141499 + (C46922 + C46923) * C124334 +
            (C40903 + C40902) * C141498 + (C40065 + C40064) * C124333) *
               C141216 * C141487) *
              C2374 +
          (((C43404 + C43405) * C124333 + (C44230 + C44231) * C141498 +
            (C136078 + C136079) * C124334 + (C136727 + C136728) * C141499 +
            (C22172 * C18582 + C141468 * C18698 + C22173 * C65157 +
             C141358 * C65267) *
                C124335 +
            (C22172 * C18820 + C141468 * C19356 + C22173 * C65391 +
             C141358 * C65959) *
                C124182) *
               C141216 * C141487 -
           ((C136728 + C136727) * C124182 + (C136079 + C136078) * C124335 +
            (C44231 + C44230) * C141499 + (C43405 + C43404) * C124334 +
            (C22173 * C3084 + C141358 * C3362 + C22172 * C1006 +
             C141468 * C1419) *
                C141498 +
            (C22173 * C2960 + C141358 * C3026 + C22172 * C823 +
             C141468 * C912) *
                C124333) *
               C141216 * C1596) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eezz[104] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C124846 * C108 + C124850 + C124850 + C141498 * C714 +
             C124847 * C1601 + C124851 + C124851 + C141499 * C2283 +
             C124848 * C5325 + C124852 + C124852 + C124182 * C5781) *
                C141468 +
            (C133366 + C133367 + C133368) * C141358) *
               C141216 * C1596 -
           ((C136842 + C136843 + C136844) * C141358 +
            (C124848 * C15862 + C126809 + C126809 + C124182 * C16900 +
             C124847 * C5325 + C126810 + C126810 + C141499 * C5781 +
             C124846 * C1601 + C126811 + C126811 + C141498 * C2283) *
                C141468) *
               C141216 * C141487) *
              C2374 +
          (((C136844 + C136843 + C136842) * C141468 +
            (C124846 * C7887 + C136833 + C136833 + C141498 * C8794 +
             C124847 * C13303 + C136834 + C136834 + C141499 * C13954 +
             C124848 * C65157 + C136835 + C136835 + C124182 * C66070) *
                C141358) *
               C141216 * C141487 -
           ((C135868 + C135869 + C135870) * C141358 +
            (C133368 + C133367 + C133366) * C141468) *
               C141216 * C1596) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eexx[105] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C55526 * C108 + C55529 + C55529 + C141216 * C120) * C141498 +
             C62512 * C141499 + C62513 * C124182) *
                C141468 +
            (C132525 + C132526 + C132527) * C141358) *
               C4148 -
           ((C135969 + C135970 + C135971) * C141358 +
            (C67937 * C124182 + C62513 * C141499 + C62512 * C141498) *
                C141468) *
               C141487) *
              C141277 * C2376 +
          (((C62514 * C141498 + C62515 * C141499 + C110456 * C124182) *
                C141468 +
            (C61520 * C141498 + C61521 * C141499 +
             (C55526 * C18583 + C62503 + C62503 + C141216 * C18587) * C124182) *
                C141358) *
               C141487 -
           ((C132530 + C132529 + C132528) * C141358 +
            (C62515 * C124182 + C62514 * C141499 +
             (C55526 * C109 + C55536 + C55536 + C141216 * C121) * C141498) *
                C141468) *
               C4148) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eexy[105] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22172 * C108 + C141468 * C189 + C22173 * C823 + C141358 * C912) *
                 C55527 +
             (C22172 * C114 + C141468 * C195 + C22173 * C828 + C141358 * C917) *
                 C141216) *
                C141498 +
            ((C40064 + C40065) * C55527 + (C40066 + C40067) * C141216) *
                C141499 +
            ((C46923 + C46922) * C55527 + (C46921 + C46920) * C141216) *
                C124182) *
               C4148 -
           (((C22173 * C18584 + C141358 * C18700 + C22172 * C15865 +
              C141468 * C16016) *
                 C141216 +
             (C22173 * C18582 + C141358 * C18698 + C22172 * C15862 +
              C141468 * C16013) *
                 C55527) *
                C124182 +
            ((C46920 + C46921) * C141216 + (C46922 + C46923) * C55527) *
                C141499 +
            ((C40067 + C40066) * C141216 + (C40065 + C40064) * C55527) *
                C141498) *
               C141487) *
              C141277 * C2376 +
          (((C40052 * C55527 + C40053 * C141216) * C141498 +
            ((C40071 + C40070) * C55527 + (C40069 + C40068) * C141216) *
                C141499 +
            ((C22172 * C15861 + C141468 * C16012 + C22173 * C18583 +
              C141358 * C18699) *
                 C55527 +
             (C22172 * C15864 + C141468 * C16015 + C22173 * C18585 +
              C141358 * C18701) *
                 C141216) *
                C124182) *
               C141487 -
           (((C40068 + C40069) * C141216 + (C40070 + C40071) * C55527) *
                C124182 +
            (C40062 * C141216 + C40063 * C55527) * C141499 +
            ((C22202 + C22201) * C141216 + (C22200 + C22199) * C55527) *
                C141498) *
               C4148) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eexz[105] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C124333 * C108 + C141498 * C276 + C124334 * C1601 +
              C141499 * C1784 + C124335 * C5325 + C124182 * C5449) *
                 C55527 +
             (C124333 * C114 + C141498 * C282 + C124334 * C1606 +
              C141499 * C1789 + C124335 * C5329 + C124182 * C5453) *
                 C141216) *
                C141468 +
            ((C132739 + C132740 + C132741) * C55527 +
             (C132742 + C132743 + C132744) * C141216) *
                C141358) *
               C4148 -
           (((C136192 + C136193 + C136194) * C141216 +
             (C136195 + C136196 + C136197) * C55527) *
                C141358 +
            ((C124335 * C15865 + C124182 * C16154 + C124334 * C5329 +
              C141499 * C5453 + C124333 * C1606 + C141498 * C1789) *
                 C141216 +
             (C124335 * C15862 + C124182 * C16151 + C124334 * C5325 +
              C141499 * C5449 + C124333 * C1601 + C141498 * C1784) *
                 C55527) *
                C141468) *
               C141487) *
              C141277 * C2376 +
          ((((C126170 + C126169 + C126168) * C55527 +
             (C126167 + C126166 + C126165) * C141216) *
                C141468 +
            ((C124333 * C3491 + C141498 * C3647 + C124334 * C13302 +
              C141499 * C13476 + C124335 * C18583 + C124182 * C18821) *
                 C55527 +
             (C124333 * C3495 + C141498 * C3651 + C124334 * C13306 +
              C141499 * C13480 + C124335 * C18585 + C124182 * C18823) *
                 C141216) *
                C141358) *
               C141487 -
           (((C125198 + C125199 + C125200) * C141216 +
             (C125201 + C125202 + C125203) * C55527) *
                C141358 +
            ((C124366 + C124365 + C124364) * C141216 +
             (C124363 + C124362 + C124361) * C55527) *
                C141468) *
               C4148) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[105] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((((C55527 * C108 + C141216 * C114) * C22172 +
                        (C55527 * C189 + C141216 * C362) * C141468 +
                        C56299 * C22173 + C56300 * C141358) *
                           C141498 +
                       (C133761 + C133762 + C133763 + C133764) * C141499 +
                       (C133765 + C133766 + C133767 + C133768) * C124182) *
                          C4148 -
                      ((C65523 * C141358 + C65524 * C22173 + C68190 * C141468 +
                        C68191 * C22172) *
                           C124182 +
                       (C133768 + C133767 + C133766 + C133765) * C141499 +
                       (C133764 + C133763 + C133762 + C133761) * C141498) *
                          C141487) *
                         C141277 * C2376 +
                     (((C133769 + C133770 + C133771 + C133772) * C141498 +
                       (C133773 + C133774 + C133775 + C133776) * C141499 +
                       (C110681 * C22172 + C110682 * C141468 +
                        (C55527 * C18583 + C141216 * C18585) * C22173 +
                        (C55527 * C18699 + C141216 * C18923) * C141358) *
                           C124182) *
                          C141487 -
                      ((C133776 + C133775 + C133774 + C133773) * C124182 +
                       (C133772 + C133771 + C133770 + C133769) * C141499 +
                       (C56306 * C141358 + C56305 * C22173 +
                        (C55527 * C190 + C141216 * C363) * C141468 +
                        (C55527 * C109 + C141216 * C115) * C22172) *
                           C141498) *
                          C4148) *
                         C141277 * C141483)) /
                   (p * q * std::sqrt(p + q));
    d2eeyy[105] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C22434 * C108 + C22437 + C22437 + C141468 * C419 + C22435 * C823 +
             C22438 + C22438 + C141358 * C1171) *
                C141216 * C141498 +
            (C40492 + C40493) * C141216 * C141499 +
            (C47231 + C47230) * C141216 * C124182) *
               C4148 -
           ((C22435 * C18582 + C47223 + C47223 + C141358 * C19034 +
             C22434 * C15862 + C47222 + C47222 + C141468 * C16422) *
                C141216 * C124182 +
            (C47230 + C47231) * C141216 * C141499 +
            (C40493 + C40492) * C141216 * C141498) *
               C141487) *
              C141277 * C2376 +
          ((C40478 * C141216 * C141498 + (C40495 + C40494) * C141216 * C141499 +
            (C22434 * C15861 + C47224 + C47224 + C141468 * C16421 +
             C22435 * C18583 + C47225 + C47225 + C141358 * C19035) *
                C141216 * C124182) *
               C141487 -
           ((C40494 + C40495) * C141216 * C124182 + C40483 * C141216 * C141499 +
            (C22472 + C22471) * C141216 * C141498) *
               C4148) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[105] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C124333 * C108 + C141498 * C276 + C124334 * C1601 +
             C141499 * C1784 + C124335 * C5325 + C124182 * C5449) *
                C22172 +
            (C124333 * C189 + C141498 * C501 + C124334 * C1690 +
             C141499 * C2040 + C124335 * C5391 + C124182 * C5619) *
                C141468 +
            (C132739 + C132740 + C132741) * C22173 +
            (C133045 + C133046 + C133047) * C141358) *
               C141216 * C4148 -
           ((C136518 + C136519 + C136520) * C141358 +
            (C136195 + C136196 + C136197) * C22173 +
            (C124335 * C16013 + C124182 * C16549 + C124334 * C5391 +
             C141499 * C5619 + C124333 * C1690 + C141498 * C2040) *
                C141468 +
            (C124335 * C15862 + C124182 * C16151 + C124334 * C5325 +
             C141499 * C5449 + C124333 * C1601 + C141498 * C1784) *
                C22172) *
               C141216 * C141487) *
              C141277 * C2376 +
          (((C126170 + C126169 + C126168) * C22172 +
            (C126493 + C126492 + C126491) * C141468 +
            (C124333 * C3491 + C141498 * C3647 + C124334 * C13302 +
             C141499 * C13476 + C124335 * C18583 + C124182 * C18821) *
                C22173 +
            (C124333 * C3573 + C141498 * C3865 + C124334 * C13395 +
             C141499 * C13721 + C124335 * C18699 + C124182 * C19151) *
                C141358) *
               C141216 * C141487 -
           ((C125504 + C125505 + C125506) * C141358 +
            (C125201 + C125202 + C125203) * C22173 +
            (C124609 + C124608 + C124607) * C141468 +
            (C124363 + C124362 + C124361) * C22172) *
               C141216 * C4148) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eezx[105] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C55527 * C108 + C141216 * C114) * C124333 +
             (C55527 * C276 + C141216 * C579) * C141498 + C62870 * C124334 +
             C63222 * C141499 + C62872 * C124335 + C63223 * C124182) *
                C141468 +
            (C133146 + C133147 + C133148 + C133149 + C133150 + C133151) *
                C141358) *
               C4148 -
           ((C136619 + C136620 + C136621 + C136622 + C136623 + C136624) *
                C141358 +
            (C68436 * C124182 + C68191 * C124335 + C63223 * C141499 +
             C62872 * C124334 + C63222 * C141498 + C62870 * C124333) *
                C141468) *
               C141487) *
              C141277 * C2376 +
          (((C62874 * C124333 + C63224 * C141498 + C62876 * C124334 +
             C63225 * C141499 + C110681 * C124335 + C110891 * C124182) *
                C141468 +
            (C61851 * C124333 + C62178 * C141498 + C61853 * C124334 +
             C62179 * C141499 + (C55527 * C18583 + C141216 * C18585) * C124335 +
             (C55527 * C18821 + C141216 * C19251) * C124182) *
                C141358) *
               C141487 -
           ((C133157 + C133156 + C133155 + C133154 + C133153 + C133152) *
                C141358 +
            (C63225 * C124182 + C62876 * C124335 + C63224 * C141499 +
             C62874 * C124334 + (C55527 * C277 + C141216 * C580) * C141498 +
             (C55527 * C109 + C141216 * C115) * C124333) *
                C141468) *
               C4148) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eezy[105] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C22172 * C108 + C141468 * C189 + C22173 * C823 + C141358 * C912) *
                C124333 +
            (C22172 * C276 + C141468 * C635 + C22173 * C1006 +
             C141358 * C1419) *
                C141498 +
            (C40064 + C40065) * C124334 + (C40902 + C40903) * C141499 +
            (C46923 + C46922) * C124335 + (C47531 + C47530) * C124182) *
               C141216 * C4148 -
           ((C22173 * C18820 + C141358 * C19356 + C22172 * C16151 +
             C141468 * C16784) *
                C124182 +
            (C22173 * C18582 + C141358 * C18698 + C22172 * C15862 +
             C141468 * C16013) *
                C124335 +
            (C47530 + C47531) * C141499 + (C46922 + C46923) * C124334 +
            (C40903 + C40902) * C141498 + (C40065 + C40064) * C124333) *
               C141216 * C141487) *
              C141277 * C2376 +
          ((C40052 * C124333 + C40896 * C141498 + (C40071 + C40070) * C124334 +
            (C40905 + C40904) * C141499 +
            (C22172 * C15861 + C141468 * C16012 + C22173 * C18583 +
             C141358 * C18699) *
                C124335 +
            (C22172 * C16150 + C141468 * C16783 + C22173 * C18821 +
             C141358 * C19357) *
                C124182) *
               C141216 * C141487 -
           ((C40904 + C40905) * C124182 + (C40070 + C40071) * C124335 +
            C40901 * C141499 + C40063 * C124334 + (C22729 + C22728) * C141498 +
            (C22200 + C22199) * C124333) *
               C141216 * C4148) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eezz[105] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C124846 * C108 + C124850 + C124850 + C141498 * C714 +
             C124847 * C1601 + C124851 + C124851 + C141499 * C2283 +
             C124848 * C5325 + C124852 + C124852 + C124182 * C5781) *
                C141468 +
            (C133366 + C133367 + C133368) * C141358) *
               C141216 * C4148 -
           ((C136842 + C136843 + C136844) * C141358 +
            (C124848 * C15862 + C126809 + C126809 + C124182 * C16900 +
             C124847 * C5325 + C126810 + C126810 + C141499 * C5781 +
             C124846 * C1601 + C126811 + C126811 + C141498 * C2283) *
                C141468) *
               C141216 * C141487) *
              C141277 * C2376 +
          (((C126823 + C126822 + C126821) * C141468 +
            (C124846 * C3491 + C129275 + C129275 + C141498 * C4075 +
             C124847 * C13302 + C129276 + C129276 + C141499 * C13955 +
             C124848 * C18583 + C129277 + C129277 + C124182 * C19463) *
                C141358) *
               C141216 * C141487 -
           ((C125828 + C125829 + C125830) * C141358 +
            (C124888 + C124887 + C124886) * C141468) *
               C141216 * C4148) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eexx[106] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C55526 * C108 + C55529 + C55529 + C141216 * C120) * C141498 +
             C62512 * C141499 + C62513 * C124182) *
                C141468 +
            (C132525 + C132526 + C132527) * C141358) *
               C4148 -
           ((C135969 + C135970 + C135971) * C141358 +
            (C67937 * C124182 + C62513 * C141499 + C62512 * C141498) *
                C141468) *
               C141487) *
              C816 +
          (((C135971 + C135970 + C135969) * C141468 +
            (C58472 * C141498 + C64402 * C141499 +
             (C55526 * C65157 + C65165 + C65165 + C141216 * C65159) * C124182) *
                C141358) *
               C141487 -
           ((C135223 + C135224 + C135225) * C141358 +
            (C132527 + C132526 + C132525) * C141468) *
               C4148) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eexy[106] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22172 * C108 + C141468 * C189 + C22173 * C823 + C141358 * C912) *
                 C55527 +
             (C22172 * C114 + C141468 * C195 + C22173 * C828 + C141358 * C917) *
                 C141216) *
                C141498 +
            ((C40064 + C40065) * C55527 + (C40066 + C40067) * C141216) *
                C141499 +
            ((C46923 + C46922) * C55527 + (C46921 + C46920) * C141216) *
                C124182) *
               C4148 -
           (((C22173 * C18584 + C141358 * C18700 + C22172 * C15865 +
              C141468 * C16016) *
                 C141216 +
             (C22173 * C18582 + C141358 * C18698 + C22172 * C15862 +
              C141468 * C16013) *
                 C55527) *
                C124182 +
            ((C46920 + C46921) * C141216 + (C46922 + C46923) * C55527) *
                C141499 +
            ((C40067 + C40066) * C141216 + (C40065 + C40064) * C55527) *
                C141498) *
               C141487) *
              C816 +
          ((((C43404 + C43405) * C55527 + (C43406 + C43407) * C141216) *
                C141498 +
            ((C136078 + C136079) * C55527 + (C136080 + C136081) * C141216) *
                C141499 +
            ((C22172 * C18582 + C141468 * C18698 + C22173 * C65157 +
              C141358 * C65267) *
                 C55527 +
             (C22172 * C18584 + C141468 * C18700 + C22173 * C65158 +
              C141358 * C65268) *
                 C141216) *
                C124182) *
               C141487 -
           (((C136081 + C136080) * C141216 + (C136079 + C136078) * C55527) *
                C124182 +
            ((C43407 + C43406) * C141216 + (C43405 + C43404) * C55527) *
                C141499 +
            ((C22173 * C2964 + C141358 * C3030 + C22172 * C828 +
              C141468 * C917) *
                 C141216 +
             (C22173 * C2960 + C141358 * C3026 + C22172 * C823 +
              C141468 * C912) *
                 C55527) *
                C141498) *
               C4148) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eexz[106] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C124333 * C108 + C141498 * C276 + C124334 * C1601 +
              C141499 * C1784 + C124335 * C5325 + C124182 * C5449) *
                 C55527 +
             (C124333 * C114 + C141498 * C282 + C124334 * C1606 +
              C141499 * C1789 + C124335 * C5329 + C124182 * C5453) *
                 C141216) *
                C141468 +
            ((C132739 + C132740 + C132741) * C55527 +
             (C132742 + C132743 + C132744) * C141216) *
                C141358) *
               C4148 -
           (((C136192 + C136193 + C136194) * C141216 +
             (C136195 + C136196 + C136197) * C55527) *
                C141358 +
            ((C124335 * C15865 + C124182 * C16154 + C124334 * C5329 +
              C141499 * C5453 + C124333 * C1606 + C141498 * C1789) *
                 C141216 +
             (C124335 * C15862 + C124182 * C16151 + C124334 * C5325 +
              C141499 * C5449 + C124333 * C1601 + C141498 * C1784) *
                 C55527) *
                C141468) *
               C141487) *
              C816 +
          ((((C136197 + C136196 + C136195) * C55527 +
             (C136194 + C136193 + C136192) * C141216) *
                C141468 +
            ((C124333 * C7887 + C141498 * C8128 + C124334 * C13303 +
              C141499 * C13477 + C124335 * C65157 + C124182 * C65391) *
                 C55527 +
             (C124333 * C7890 + C141498 * C8131 + C124334 * C13307 +
              C141499 * C13481 + C124335 * C65158 + C124182 * C65392) *
                 C141216) *
                C141358) *
               C141487 -
           (((C135386 + C135387 + C135388) * C141216 +
             (C135389 + C135390 + C135391) * C55527) *
                C141358 +
            ((C132744 + C132743 + C132742) * C141216 +
             (C132741 + C132740 + C132739) * C55527) *
                C141468) *
               C4148) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eeyx[106] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((((C55527 * C108 + C141216 * C114) * C22172 +
                        (C55527 * C189 + C141216 * C362) * C141468 +
                        C56299 * C22173 + C56300 * C141358) *
                           C141498 +
                       (C133761 + C133762 + C133763 + C133764) * C141499 +
                       (C133765 + C133766 + C133767 + C133768) * C124182) *
                          C4148 -
                      ((C65523 * C141358 + C65524 * C22173 + C68190 * C141468 +
                        C68191 * C22172) *
                           C124182 +
                       (C133768 + C133767 + C133766 + C133765) * C141499 +
                       (C133764 + C133763 + C133762 + C133761) * C141498) *
                          C141487) *
                         C816 +
                     (((C136296 + C136297 + C136298 + C136299) * C141498 +
                       (C136300 + C136301 + C136302 + C136303) * C141499 +
                       (C65524 * C22172 + C65523 * C141468 +
                        (C55527 * C65157 + C141216 * C65158) * C22173 +
                        (C55527 * C65267 + C141216 * C65509) * C141358) *
                           C124182) *
                          C141487 -
                      ((C136303 + C136302 + C136301 + C136300) * C124182 +
                       (C136299 + C136298 + C136297 + C136296) * C141499 +
                       (C56302 * C141358 + C56301 * C22173 + C56300 * C141468 +
                        C56299 * C22172) *
                           C141498) *
                          C4148) *
                         C141485) *
                    C141243) /
                   (p * q * std::sqrt(p + q));
    d2eeyy[106] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C22434 * C108 + C22437 + C22437 + C141468 * C419 + C22435 * C823 +
             C22438 + C22438 + C141358 * C1171) *
                C141216 * C141498 +
            (C40492 + C40493) * C141216 * C141499 +
            (C47231 + C47230) * C141216 * C124182) *
               C4148 -
           ((C22435 * C18582 + C47223 + C47223 + C141358 * C19034 +
             C22434 * C15862 + C47222 + C47222 + C141468 * C16422) *
                C141216 * C124182 +
            (C47230 + C47231) * C141216 * C141499 +
            (C40493 + C40492) * C141216 * C141498) *
               C141487) *
              C816 +
          (((C43826 + C43827) * C141216 * C141498 +
            (C136412 + C136413) * C141216 * C141499 +
            (C22434 * C18582 + C136406 + C136406 + C141468 * C19034 +
             C22435 * C65157 + C136407 + C136407 + C141358 * C65622) *
                C141216 * C124182) *
               C141487 -
           ((C136413 + C136412) * C141216 * C124182 +
            (C43827 + C43826) * C141216 * C141499 +
            (C22435 * C2960 + C23428 + C23428 + C141358 * C3196 +
             C22434 * C823 + C23429 + C23429 + C141468 * C1171) *
                C141216 * C141498) *
               C4148) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eeyz[106] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C124333 * C108 + C141498 * C276 + C124334 * C1601 +
             C141499 * C1784 + C124335 * C5325 + C124182 * C5449) *
                C22172 +
            (C124333 * C189 + C141498 * C501 + C124334 * C1690 +
             C141499 * C2040 + C124335 * C5391 + C124182 * C5619) *
                C141468 +
            (C132739 + C132740 + C132741) * C22173 +
            (C133045 + C133046 + C133047) * C141358) *
               C141216 * C4148 -
           ((C136518 + C136519 + C136520) * C141358 +
            (C136195 + C136196 + C136197) * C22173 +
            (C124335 * C16013 + C124182 * C16549 + C124334 * C5391 +
             C141499 * C5619 + C124333 * C1690 + C141498 * C2040) *
                C141468 +
            (C124335 * C15862 + C124182 * C16151 + C124334 * C5325 +
             C141499 * C5449 + C124333 * C1601 + C141498 * C1784) *
                C22172) *
               C141216 * C141487) *
              C816 +
          (((C136197 + C136196 + C136195) * C22172 +
            (C136520 + C136519 + C136518) * C141468 +
            (C124333 * C7887 + C141498 * C8128 + C124334 * C13303 +
             C141499 * C13477 + C124335 * C65157 + C124182 * C65391) *
                C22173 +
            (C124333 * C8006 + C141498 * C8470 + C124334 * C13394 +
             C141499 * C13720 + C124335 * C65267 + C124182 * C65743) *
                C141358) *
               C141216 * C141487 -
           ((C135622 + C135623 + C135624) * C141358 +
            (C135389 + C135390 + C135391) * C22173 +
            (C133047 + C133046 + C133045) * C141468 +
            (C132741 + C132740 + C132739) * C22172) *
               C141216 * C4148) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eezx[106] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C55527 * C108 + C141216 * C114) * C124333 +
             (C55527 * C276 + C141216 * C579) * C141498 + C62870 * C124334 +
             C63222 * C141499 + C62872 * C124335 + C63223 * C124182) *
                C141468 +
            (C133146 + C133147 + C133148 + C133149 + C133150 + C133151) *
                C141358) *
               C4148 -
           ((C136619 + C136620 + C136621 + C136622 + C136623 + C136624) *
                C141358 +
            (C68436 * C124182 + C68191 * C124335 + C63223 * C141499 +
             C62872 * C124334 + C63222 * C141498 + C62870 * C124333) *
                C141468) *
               C141487) *
              C816 +
          (((C136624 + C136623 + C136622 + C136621 + C136620 + C136619) *
                C141468 +
            (C58707 * C124333 + C58928 * C141498 + C64649 * C124334 +
             C64892 * C141499 + (C55527 * C65157 + C141216 * C65158) * C124335 +
             (C55527 * C65391 + C141216 * C65851) * C124182) *
                C141358) *
               C141487 -
           ((C135699 + C135700 + C135701 + C135702 + C135703 + C135704) *
                C141358 +
            (C133151 + C133150 + C133149 + C133148 + C133147 + C133146) *
                C141468) *
               C4148) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eezy[106] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C22172 * C108 + C141468 * C189 + C22173 * C823 + C141358 * C912) *
                C124333 +
            (C22172 * C276 + C141468 * C635 + C22173 * C1006 +
             C141358 * C1419) *
                C141498 +
            (C40064 + C40065) * C124334 + (C40902 + C40903) * C141499 +
            (C46923 + C46922) * C124335 + (C47531 + C47530) * C124182) *
               C141216 * C4148 -
           ((C22173 * C18820 + C141358 * C19356 + C22172 * C16151 +
             C141468 * C16784) *
                C124182 +
            (C22173 * C18582 + C141358 * C18698 + C22172 * C15862 +
             C141468 * C16013) *
                C124335 +
            (C47530 + C47531) * C141499 + (C46922 + C46923) * C124334 +
            (C40903 + C40902) * C141498 + (C40065 + C40064) * C124333) *
               C141216 * C141487) *
              C816 +
          (((C43404 + C43405) * C124333 + (C44230 + C44231) * C141498 +
            (C136078 + C136079) * C124334 + (C136727 + C136728) * C141499 +
            (C22172 * C18582 + C141468 * C18698 + C22173 * C65157 +
             C141358 * C65267) *
                C124335 +
            (C22172 * C18820 + C141468 * C19356 + C22173 * C65391 +
             C141358 * C65959) *
                C124182) *
               C141216 * C141487 -
           ((C136728 + C136727) * C124182 + (C136079 + C136078) * C124335 +
            (C44231 + C44230) * C141499 + (C43405 + C43404) * C124334 +
            (C22173 * C3084 + C141358 * C3362 + C22172 * C1006 +
             C141468 * C1419) *
                C141498 +
            (C22173 * C2960 + C141358 * C3026 + C22172 * C823 +
             C141468 * C912) *
                C124333) *
               C141216 * C4148) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eezz[106] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C124846 * C108 + C124850 + C124850 + C141498 * C714 +
             C124847 * C1601 + C124851 + C124851 + C141499 * C2283 +
             C124848 * C5325 + C124852 + C124852 + C124182 * C5781) *
                C141468 +
            (C133366 + C133367 + C133368) * C141358) *
               C141216 * C4148 -
           ((C136842 + C136843 + C136844) * C141358 +
            (C124848 * C15862 + C126809 + C126809 + C124182 * C16900 +
             C124847 * C5325 + C126810 + C126810 + C141499 * C5781 +
             C124846 * C1601 + C126811 + C126811 + C141498 * C2283) *
                C141468) *
               C141216 * C141487) *
              C816 +
          (((C136844 + C136843 + C136842) * C141468 +
            (C124846 * C7887 + C136833 + C136833 + C141498 * C8794 +
             C124847 * C13303 + C136834 + C136834 + C141499 * C13954 +
             C124848 * C65157 + C136835 + C136835 + C124182 * C66070) *
                C141358) *
               C141216 * C141487 -
           ((C135868 + C135869 + C135870) * C141358 +
            (C133368 + C133367 + C133366) * C141468) *
               C141216 * C4148) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eexx[107] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C55526 * C108 + C55529 + C55529 + C141216 * C120) * C141498 +
            C62512 * C141499 + C62513 * C124182) *
               C141468 +
           (C132525 + C132526 + C132527) * C141358) *
              C5322 -
          ((C135969 + C135970 + C135971) * C141358 +
           (C67937 * C124182 + C62513 * C141499 + C62512 * C141498) * C141468) *
              C5323 +
          ((C62513 * C141498 + C67937 * C141499 + C113955 * C124182) * C141468 +
           (C61519 * C141498 + C65168 * C141499 +
            (C55526 * C67927 + C67934 + C67934 + C141216 * C67929) * C124182) *
               C141358) *
              C5324) *
         C141277 * C141243) /
        (p * q * std::sqrt(p + q));
    d2eexy[107] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C22172 * C108 + C141468 * C189 + C22173 * C823 + C141358 * C912) *
                C55527 +
            (C22172 * C114 + C141468 * C195 + C22173 * C828 + C141358 * C917) *
                C141216) *
               C141498 +
           ((C40064 + C40065) * C55527 + (C40066 + C40067) * C141216) *
               C141499 +
           C138773 * C124182) *
              C5322 -
          (((C138769 + C138770) * C141216 + (C138771 + C138772) * C55527) *
               C124182 +
           ((C46920 + C46921) * C141216 + (C46922 + C46923) * C55527) *
               C141499 +
           ((C40067 + C40066) * C141216 + (C40065 + C40064) * C55527) *
               C141498) *
              C5323 +
          (C138773 * C141498 +
           ((C138772 + C138771) * C55527 + (C138770 + C138769) * C141216) *
               C141499 +
           ((C22172 * C21308 + C141468 * C21401 + C22173 * C67927 +
             C141358 * C68011) *
                C55527 +
            (C22172 * C21310 + C141468 * C21403 + C22173 * C67928 +
             C141358 * C68012) *
                C141216) *
               C124182) *
              C5324) *
         C141277 * C141243) /
        (p * q * std::sqrt(p + q));
    d2eexz[107] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C124333 * C108 + C141498 * C276 + C124334 * C1601 +
             C141499 * C1784 + C124335 * C5325 + C124182 * C5449) *
                C55527 +
            (C124333 * C114 + C141498 * C282 + C124334 * C1606 +
             C141499 * C1789 + C124335 * C5329 + C124182 * C5453) *
                C141216) *
               C141468 +
           ((C132739 + C132740 + C132741) * C55527 +
            (C132742 + C132743 + C132744) * C141216) *
               C141358) *
              C5322 -
          (((C136192 + C136193 + C136194) * C141216 +
            (C136195 + C136196 + C136197) * C55527) *
               C141358 +
           ((C124335 * C15865 + C124182 * C16154 + C124334 * C5329 +
             C141499 * C5453 + C124333 * C1606 + C141498 * C1789) *
                C141216 +
            (C124335 * C15862 + C124182 * C16151 + C124334 * C5325 +
             C141499 * C5449 + C124333 * C1601 + C141498 * C1784) *
                C55527) *
               C141468) *
              C5323 +
          (((C124333 * C5325 + C141498 * C5449 + C124334 * C15862 +
             C141499 * C16151 + C124335 * C21308 + C124182 * C21492) *
                C55527 +
            (C124333 * C5329 + C141498 * C5453 + C124334 * C15865 +
             C141499 * C16154 + C124335 * C21310 + C124182 * C21494) *
                C141216) *
               C141468 +
           ((C124333 * C13301 + C141498 * C13475 + C124334 * C18582 +
             C141499 * C18820 + C124335 * C67927 + C124182 * C68104) *
                C55527 +
            (C124333 * C13305 + C141498 * C13479 + C124334 * C18584 +
             C141499 * C18822 + C124335 * C67928 + C124182 * C68105) *
                C141216) *
               C141358) *
              C5324) *
         C141277 * C141243) /
        (p * q * std::sqrt(p + q));
    d2eeyx[107] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((C55527 * C108 + C141216 * C114) * C22172 +
                       (C55527 * C189 + C141216 * C362) * C141468 +
                       C56299 * C22173 + C56300 * C141358) *
                          C141498 +
                      (C133761 + C133762 + C133763 + C133764) * C141499 +
                      C138928 * C124182) *
                         C5322 -
                     ((C138923 + C138924 + C138925 + C138926) * C124182 +
                      (C133768 + C133767 + C133766 + C133765) * C141499 +
                      (C133764 + C133763 + C133762 + C133761) * C141498) *
                         C5323 +
                     (C138928 * C141498 +
                      (C138926 + C138925 + C138924 + C138923) * C141499 +
                      (C114128 * C22172 + C114127 * C141468 +
                       (C55527 * C67927 + C141216 * C67928) * C22173 +
                       (C55527 * C68011 + C141216 * C68180) * C141358) *
                          C124182) *
                         C5324) *
                    C141277 * C141243) /
                   (p * q * std::sqrt(p + q));
    d2eeyy[107] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C22434 * C108 + C22437 + C22437 + C141468 * C419 + C22435 * C823 +
            C22438 + C22438 + C141358 * C1171) *
               C141216 * C141498 +
           (C40492 + C40493) * C141216 * C141499 + C139010 * C124182) *
              C5322 -
          ((C139015 + C139016) * C141216 * C124182 +
           (C47230 + C47231) * C141216 * C141499 +
           (C40493 + C40492) * C141216 * C141498) *
              C5323 +
          (C139010 * C141498 + (C139016 + C139015) * C141216 * C141499 +
           (C22434 * C21308 + C139008 + C139008 + C141468 * C21663 +
            C22435 * C67927 + C139009 + C139009 + C141358 * C68268) *
               C141216 * C124182) *
              C5324) *
         C141277 * C141243) /
        (p * q * std::sqrt(p + q));
    d2eeyz[107] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((C124333 * C108 + C141498 * C276 + C124334 * C1601 +
                       C141499 * C1784 + C124335 * C5325 + C124182 * C5449) *
                          C22172 +
                      (C124333 * C189 + C141498 * C501 + C124334 * C1690 +
                       C141499 * C2040 + C124335 * C5391 + C124182 * C5619) *
                          C141468 +
                      (C132739 + C132740 + C132741) * C22173 +
                      (C133045 + C133046 + C133047) * C141358) *
                         C141216 * C5322 -
                     ((C136518 + C136519 + C136520) * C141358 +
                      (C136195 + C136196 + C136197) * C22173 +
                      (C124335 * C16013 + C124182 * C16549 + C124334 * C5391 +
                       C141499 * C5619 + C124333 * C1690 + C141498 * C2040) *
                          C141468 +
                      (C124335 * C15862 + C124182 * C16151 + C124334 * C5325 +
                       C141499 * C5449 + C124333 * C1601 + C141498 * C1784) *
                          C22172) *
                         C141216 * C5323 +
                     ((C124333 * C5325 + C141498 * C5449 + C124334 * C15862 +
                       C141499 * C16151 + C124335 * C21308 + C124182 * C21492) *
                          C22172 +
                      (C124333 * C5391 + C141498 * C5619 + C124334 * C16013 +
                       C141499 * C16549 + C124335 * C21401 + C124182 * C21749) *
                          C141468 +
                      (C124333 * C13301 + C141498 * C13475 + C124334 * C18582 +
                       C141499 * C18820 + C124335 * C67927 + C124182 * C68104) *
                          C22173 +
                      (C124333 * C13393 + C141498 * C13719 + C124334 * C18698 +
                       C141499 * C19150 + C124335 * C68011 + C124182 * C68357) *
                          C141358) *
                         C141216 * C5324) *
                    C141277 * C141243) /
                   (p * q * std::sqrt(p + q));
    d2eezx[107] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C55527 * C108 + C141216 * C114) * C124333 +
            (C55527 * C276 + C141216 * C579) * C141498 + C62870 * C124334 +
            C63222 * C141499 + C62872 * C124335 + C63223 * C124182) *
               C141468 +
           (C133146 + C133147 + C133148 + C133149 + C133150 + C133151) *
               C141358) *
              C5322 -
          ((C136619 + C136620 + C136621 + C136622 + C136623 + C136624) *
               C141358 +
           (C68436 * C124182 + C68191 * C124335 + C63223 * C141499 +
            C62872 * C124334 + C63222 * C141498 + C62870 * C124333) *
               C141468) *
              C5323 +
          ((C62872 * C124333 + C63223 * C141498 + C68191 * C124334 +
            C68436 * C141499 + C114128 * C124335 + C114293 * C124182) *
               C141468 +
           (C61849 * C124333 + C62177 * C141498 + C65524 * C124334 +
            C65860 * C141499 + (C55527 * C67927 + C141216 * C67928) * C124335 +
            (C55527 * C68104 + C141216 * C68432) * C124182) *
               C141358) *
              C5324) *
         C141277 * C141243) /
        (p * q * std::sqrt(p + q));
    d2eezy[107] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C22172 * C108 + C141468 * C189 + C22173 * C823 + C141358 * C912) *
               C124333 +
           (C22172 * C276 + C141468 * C635 + C22173 * C1006 + C141358 * C1419) *
               C141498 +
           (C40064 + C40065) * C124334 + (C40902 + C40903) * C141499 +
           C138757 * C124335 + C139239 * C124182) *
              C141216 * C5322 -
          ((C139244 + C139245) * C124182 + (C138771 + C138772) * C124335 +
           (C47530 + C47531) * C141499 + (C46922 + C46923) * C124334 +
           (C40903 + C40902) * C141498 + (C40065 + C40064) * C124333) *
              C141216 * C5323 +
          (C138757 * C124333 + C139239 * C141498 +
           (C138772 + C138771) * C124334 + (C139245 + C139244) * C141499 +
           (C22172 * C21308 + C141468 * C21401 + C22173 * C67927 +
            C141358 * C68011) *
               C124335 +
           (C22172 * C21492 + C141468 * C21908 + C22173 * C68104 +
            C141358 * C68510) *
               C124182) *
              C141216 * C5324) *
         C141277 * C141243) /
        (p * q * std::sqrt(p + q));
    d2eezz[107] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C124846 * C108 + C124850 + C124850 + C141498 * C714 +
            C124847 * C1601 + C124851 + C124851 + C141499 * C2283 +
            C124848 * C5325 + C124852 + C124852 + C124182 * C5781) *
               C141468 +
           (C133366 + C133367 + C133368) * C141358) *
              C141216 * C5322 -
          ((C136842 + C136843 + C136844) * C141358 +
           (C124848 * C15862 + C126809 + C126809 + C124182 * C16900 +
            C124847 * C5325 + C126810 + C126810 + C141499 * C5781 +
            C124846 * C1601 + C126811 + C126811 + C141498 * C2283) *
               C141468) *
              C141216 * C5323 +
          ((C124846 * C5325 + C131755 + C131755 + C141498 * C5781 +
            C124847 * C15862 + C131756 + C131756 + C141499 * C16900 +
            C124848 * C21308 + C131757 + C131757 + C124182 * C21987) *
               C141468 +
           (C124846 * C13301 + C139320 + C139320 + C141498 * C13953 +
            C124847 * C18582 + C139321 + C139321 + C141499 * C19462 +
            C124848 * C67927 + C139322 + C139322 + C124182 * C68592) *
               C141358) *
              C141216 * C5324) *
         C141277 * C141243) /
        (p * q * std::sqrt(p + q));
    d2eexx[108] +=
        (-std::pow(Pi, 2.5) *
         ((((C55526 * C108 + C55529 + C55529 + C141216 * C120) * C93949 +
            C62512 * C141384) *
               C5865 +
           (C56053 * C93949 + C58473 * C141384) * C5866 +
           (C56054 * C93949 + C58472 * C141384) * C5867) *
              C141294 * C141277 * C97 -
          ((C87073 * C141384 + C56057 * C93949) * C5867 +
           (C61520 * C141384 + C56056 * C93949) * C5866 +
           (C62514 * C141384 +
            (C55526 * C109 + C55536 + C55536 + C141216 * C121) * C93949) *
               C5865) *
              C141294 * C141277 * C98 +
          (((C55526 * C110 + C55537 + C55537 + C141216 * C122) * C93949 +
            (C55526 * C1599 + C60809 + C60809 + C141216 * C1609) * C141384) *
               C5865 +
           ((C55526 * C821 + C55538 + C55538 + C141216 * C831) * C93949 +
            (C55526 * C3492 + C60811 + C60811 + C141216 * C3500) * C141384) *
               C5866 +
           ((C55526 * C2962 + C55539 + C55539 + C141216 * C2970) * C93949 +
            (C55526 * C7888 + C86371 + C86371 + C141216 * C7894) * C141384) *
               C5867) *
              C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C47712 * C108 + C47719 + C47719 + C47707 * C120 + C47714 * C109 +
            C47720 + C47720 + C47708 * C121 + C47716 * C110 + C47721 + C47721 +
            C47709 * C122) *
               C93949 +
           (C47712 * C1601 + C49619 + C49619 + C47707 * C1611 + C47714 * C1600 +
            C49618 + C49618 + C47708 * C1610 + C47716 * C1599 + C49617 +
            C49617 + C47709 * C1609) *
               C141384) *
              C141309 * C141294 * C141277 * C97 -
          ((C47716 * C1598 + C49622 + C49622 + C47709 * C1608 + C47714 * C1599 +
            C49621 + C49621 + C47708 * C1609 + C47712 * C1600 + C49620 +
            C49620 + C47707 * C1610) *
               C141384 +
           (C47716 * C111 + C47728 + C47728 + C47709 * C123 + C47714 * C110 +
            C47729 + C47729 + C47708 * C122 + C47712 * C109 + C47730 + C47730 +
            C47707 * C121) *
               C93949) *
              C141309 * C141294 * C141277 * C98 +
          ((C47712 * C110 + C47731 + C47731 + C47707 * C122 + C47714 * C111 +
            C47732 + C47732 + C47708 * C123 + C47716 * C112 + C47733 + C47733 +
            C47709 * C124) *
               C93949 +
           (C47712 * C1599 + C93952 + C93952 + C47707 * C1609 + C47714 * C1598 +
            C93953 + C93953 + C47708 * C1608 + C47716 * C1602 + C93954 +
            C93954 + C47709 * C1612) *
               C141384) *
              C141309 * C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C55526 * C108 + C55529 + C55529 + C141216 * C120) * C109357 +
           C62512 * C109358 + C62513 * C109359 + C67937 * C109360) *
              C141309 * C141294 * C141277 * C97 -
          ((C55526 * C15861 + C62502 + C62502 + C141216 * C15867) * C109360 +
           C62515 * C109359 + C62514 * C109358 +
           (C55526 * C109 + C55536 + C55536 + C141216 * C121) * C109357) *
              C141309 * C141294 * C141277 * C98 +
          ((C55526 * C110 + C55537 + C55537 + C141216 * C122) * C109357 +
           (C55526 * C1599 + C60809 + C60809 + C141216 * C1609) * C109358 +
           (C55526 * C5327 + C60810 + C60810 + C141216 * C5335) * C109359 +
           (C55526 * C15863 + C109362 + C109362 + C141216 * C15869) * C109360) *
              C141309 * C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eexy[108] +=
        (-std::pow(Pi, 2.5) *
         ((((C5964 * C108 + C5865 * C189 + C5965 * C823 + C5866 * C912 +
             C5966 * C2960 + C5867 * C3026) *
                C55527 +
            (C5964 * C114 + C5865 * C195 + C5965 * C828 + C5866 * C917 +
             C5966 * C2964 + C5867 * C3030) *
                C141216) *
               C93949 +
           ((C5964 * C1601 + C5865 * C1690 + C5965 * C3490 + C5866 * C3572 +
             C5966 * C7887 + C5867 * C8006) *
                C55527 +
            (C5964 * C1606 + C5865 * C1695 + C5965 * C3494 + C5866 * C3576 +
             C5966 * C7890 + C5867 * C8009) *
                C141216) *
               C141384) *
              C141294 * C141277 * C97 -
          (((C8024 + C8025 + C8026) * C141216 +
            (C8027 + C8028 + C8029) * C55527) *
               C141384 +
           ((C5997 + C5996 + C5995) * C141216 +
            (C5994 + C5993 + C5992) * C55527) *
               C93949) *
              C141294 * C141277 * C98 +
          (((C6003 + C6002 + C6001) * C55527 +
            (C6000 + C5999 + C5998) * C141216) *
               C93949 +
           ((C5964 * C1599 + C5865 * C1688 + C5965 * C3492 + C5866 * C3574 +
             C5966 * C7888 + C5867 * C8007) *
                C55527 +
            (C5964 * C1604 + C5865 * C1693 + C5965 * C3496 + C5866 * C3578 +
             C5966 * C7891 + C5867 * C8010) *
                C141216) *
               C141384) *
              C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141309 * C189) * C47713 +
            (C188 * C114 + C141309 * C195) * C47707 + C218 * C47715 +
            C219 * C47708 + C220 * C47717 + C221 * C47709) *
               C93949 +
           (C16043 * C47713 + C16044 * C47707 + C1715 * C47715 +
            C1714 * C47708 + C1713 * C47717 + C1712 * C47709) *
               C141384) *
              C141294 * C141277 * C97 -
          ((C1710 * C47709 + C1711 * C47717 + C1712 * C47708 + C1713 * C47715 +
            C1714 * C47707 + C1715 * C47713) *
               C141384 +
           (C223 * C47709 + C222 * C47717 + C221 * C47708 + C220 * C47715 +
            C219 * C47707 + C218 * C47713) *
               C93949) *
              C141294 * C141277 * C98 +
          ((C220 * C47713 + C221 * C47707 + C222 * C47715 + C223 * C47708 +
            C225 * C47717 + C224 * C47709) *
               C93949 +
           (C1713 * C47713 + C1712 * C47707 + C1711 * C47715 + C1710 * C47708 +
            (C188 * C1602 + C141309 * C1691) * C47717 +
            (C188 * C1607 + C141309 * C1696) * C47709) *
               C141384) *
              C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141309 * C189) * C55527 +
            (C188 * C114 + C141309 * C195) * C141216) *
               C109357 +
           (C16043 * C55527 + C16044 * C141216) * C109358 +
           (C16045 * C55527 + C16046 * C141216) * C109359 +
           (C21415 * C55527 + C21414 * C141216) * C109360) *
              C141294 * C141277 * C97 -
          ((C16047 * C141216 + C16048 * C55527) * C109360 +
           (C14128 * C141216 + C14127 * C55527) * C109359 +
           (C1714 * C141216 + C1715 * C55527) * C109358 +
           (C219 * C141216 + C218 * C55527) * C109357) *
              C141294 * C141277 * C98 +
          ((C220 * C55527 + C221 * C141216) * C109357 +
           (C1713 * C55527 + C1712 * C141216) * C109358 +
           (C14130 * C55527 + C14129 * C141216) * C109359 +
           ((C188 * C15863 + C141309 * C16014) * C55527 +
            (C188 * C15866 + C141309 * C16017) * C141216) *
               C109360) *
              C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eexz[108] +=
        (-std::pow(Pi, 2.5) *
         ((((C94102 * C108 + C93949 * C276 + C94103 * C1601 + C141384 * C1784) *
                C55527 +
            (C94102 * C114 + C93949 * C282 + C94103 * C1606 + C141384 * C1789) *
                C141216) *
               C5865 +
           ((C94102 * C823 + C93949 * C1006 + C94103 * C3490 +
             C141384 * C3646) *
                C55527 +
            (C94102 * C828 + C93949 * C1011 + C94103 * C3494 +
             C141384 * C3650) *
                C141216) *
               C5866 +
           ((C94102 * C2960 + C93949 * C3084 + C94103 * C7887 +
             C141384 * C8128) *
                C55527 +
            (C94102 * C2964 + C93949 * C3088 + C94103 * C7890 +
             C141384 * C8131) *
                C141216) *
               C5867) *
              C141294 * C141277 * C97 -
          (((C94103 * C7889 + C141384 * C8130 + C94102 * C2965 +
             C93949 * C3089) *
                C141216 +
            (C94103 * C7886 + C141384 * C8127 + C94102 * C2961 +
             C93949 * C3085) *
                C55527) *
               C5867 +
           ((C94982 + C94983) * C141216 + (C94984 + C94985) * C55527) * C5866 +
           ((C94132 + C94131) * C141216 + (C94130 + C94129) * C55527) * C5865) *
              C141294 * C141277 * C98 +
          ((C94141 * C55527 + C94142 * C141216) * C5865 +
           ((C94981 + C94980) * C55527 + (C94979 + C94978) * C141216) * C5866 +
           ((C94102 * C2962 + C93949 * C3086 + C94103 * C7888 +
             C141384 * C8129) *
                C55527 +
            (C94102 * C2966 + C93949 * C3090 + C94103 * C7891 +
             C141384 * C8132) *
                C141216) *
               C5867) *
              C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C94102 * C108 + C93949 * C276 + C94103 * C1601 + C141384 * C1784) *
               C47713 +
           (C94102 * C114 + C93949 * C282 + C94103 * C1606 + C141384 * C1789) *
               C47707 +
           (C94129 + C94130) * C47715 + (C94131 + C94132) * C47708 +
           C94141 * C47717 + C94142 * C47709) *
              C141309 * C141294 * C141277 * C97 -
          ((C94137 + C94138) * C47709 + (C94139 + C94140) * C47717 +
           (C94136 + C94135) * C47708 + (C94134 + C94133) * C47715 +
           (C94132 + C94131) * C47707 + (C94130 + C94129) * C47713) *
              C141309 * C141294 * C141277 * C98 +
          (C94141 * C47713 + C94142 * C47707 + (C94140 + C94139) * C47715 +
           (C94138 + C94137) * C47708 +
           (C94102 * C112 + C93949 * C280 + C94103 * C1602 + C141384 * C1785) *
               C47717 +
           (C94102 * C118 + C93949 * C286 + C94103 * C1607 + C141384 * C1790) *
               C47709) *
              C141309 * C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C109462 * C108 + C109357 * C276 + C109463 * C1601 +
            C109358 * C1784 + C109464 * C5325 + C109359 * C5449 +
            C109465 * C15862 + C109360 * C16151) *
               C55527 +
           (C109462 * C114 + C109357 * C282 + C109463 * C1606 +
            C109358 * C1789 + C109464 * C5329 + C109359 * C5453 +
            C109465 * C15865 + C109360 * C16154) *
               C141216) *
              C141309 * C141294 * C141277 * C97 -
          ((C109465 * C15864 + C109360 * C16153 + C109464 * C5330 +
            C109359 * C5454 + C109463 * C1605 + C109358 * C1788 +
            C109462 * C115 + C109357 * C283) *
               C141216 +
           (C109465 * C15861 + C109360 * C16150 + C109464 * C5326 +
            C109359 * C5450 + C109463 * C1600 + C109358 * C1783 +
            C109462 * C109 + C109357 * C277) *
               C55527) *
              C141309 * C141294 * C141277 * C98 +
          ((C109462 * C110 + C109357 * C278 + C109463 * C1599 +
            C109358 * C1782 + C109464 * C5327 + C109359 * C5451 +
            C109465 * C15863 + C109360 * C16152) *
               C55527 +
           (C109462 * C116 + C109357 * C284 + C109463 * C1604 +
            C109358 * C1787 + C109464 * C5331 + C109359 * C5455 +
            C109465 * C15866 + C109360 * C16155) *
               C141216) *
              C141309 * C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[108] +=
        (-std::pow(Pi, 2.5) *
         ((((C55527 * C108 + C141216 * C114) * C5964 +
            (C55527 * C189 + C141216 * C362) * C5865 + C56299 * C5965 +
            C56300 * C5866 + C56301 * C5966 + C56302 * C5867) *
               C93949 +
           (C62870 * C5964 + C62871 * C5865 + C58709 * C5965 + C58708 * C5866 +
            C58707 * C5966 + C58706 * C5867) *
               C141384) *
              C141294 * C141277 * C97 -
          ((C87374 * C5867 + C87373 * C5966 + C61852 * C5866 + C61851 * C5965 +
            C62875 * C5865 + C62874 * C5964) *
               C141384 +
           (C56308 * C5867 + C56307 * C5966 + C56306 * C5866 + C56305 * C5965 +
            (C55527 * C190 + C141216 * C363) * C5865 +
            (C55527 * C109 + C141216 * C115) * C5964) *
               C93949) *
              C141294 * C141277 * C98 +
          (((C55527 * C110 + C141216 * C116) * C5964 +
            (C55527 * C191 + C141216 * C364) * C5865 +
            (C55527 * C821 + C141216 * C826) * C5965 +
            (C55527 * C910 + C141216 * C1098) * C5866 +
            (C55527 * C2962 + C141216 * C2966) * C5966 +
            (C55527 * C3028 + C141216 * C3144) * C5867) *
               C93949 +
           ((C55527 * C1599 + C141216 * C1604) * C5964 +
            (C55527 * C1688 + C141216 * C1876) * C5865 +
            (C55527 * C3492 + C141216 * C3496) * C5965 +
            (C55527 * C3574 + C141216 * C3722) * C5866 +
            (C55527 * C7888 + C141216 * C7891) * C5966 +
            (C55527 * C8007 + C141216 * C8245) * C5867) *
               C141384) *
              C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47713 * C108 + C47707 * C114 + C47715 * C109 + C47708 * C115 +
             C47717 * C110 + C47709 * C116) *
                C188 +
            (C47713 * C189 + C47707 * C362 + C47715 * C190 + C47708 * C363 +
             C47717 * C191 + C47709 * C364) *
                C141309) *
               C93949 +
           ((C47713 * C1601 + C47707 * C1606 + C47715 * C1600 + C47708 * C1605 +
             C47717 * C1599 + C47709 * C1604) *
                C188 +
            (C47713 * C1690 + C47707 * C1878 + C47715 * C1689 + C47708 * C1877 +
             C47717 * C1688 + C47709 * C1876) *
                C141309) *
               C141384) *
              C141294 * C141277 * C97 -
          (((C47717 * C1687 + C47709 * C1875 + C47715 * C1688 + C47708 * C1876 +
             C47713 * C1689 + C47707 * C1877) *
                C141309 +
            (C47717 * C1598 + C47709 * C1603 + C47715 * C1599 + C47708 * C1604 +
             C47713 * C1600 + C47707 * C1605) *
                C188) *
               C141384 +
           ((C47717 * C192 + C47709 * C365 + C47715 * C191 + C47708 * C364 +
             C47713 * C190 + C47707 * C363) *
                C141309 +
            (C47717 * C111 + C47709 * C117 + C47715 * C110 + C47708 * C116 +
             C47713 * C109 + C47707 * C115) *
                C188) *
               C93949) *
              C141294 * C141277 * C98 +
          (((C47713 * C110 + C47707 * C116 + C47715 * C111 + C47708 * C117 +
             C47717 * C112 + C47709 * C118) *
                C188 +
            (C47713 * C191 + C47707 * C364 + C47715 * C192 + C47708 * C365 +
             C47717 * C193 + C47709 * C366) *
                C141309) *
               C93949 +
           ((C47713 * C1599 + C47707 * C1604 + C47715 * C1598 + C47708 * C1603 +
             C47717 * C1602 + C47709 * C1607) *
                C188 +
            (C47713 * C1688 + C47707 * C1876 + C47715 * C1687 + C47708 * C1875 +
             C47717 * C1691 + C47709 * C1879) *
                C141309) *
               C141384) *
              C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C55527 * C108 + C141216 * C114) * C188 +
            (C55527 * C189 + C141216 * C362) * C141309) *
               C109357 +
           (C62870 * C188 + C62871 * C141309) * C109358 +
           (C62872 * C188 + C62873 * C141309) * C109359 +
           (C68191 * C188 + C68190 * C141309) * C109360) *
              C141294 * C141277 * C97 -
          (((C55527 * C16012 + C141216 * C16272) * C141309 +
            (C55527 * C15861 + C141216 * C15864) * C188) *
               C109360 +
           (C62877 * C141309 + C62876 * C188) * C109359 +
           (C62875 * C141309 + C62874 * C188) * C109358 +
           ((C55527 * C190 + C141216 * C363) * C141309 +
            (C55527 * C109 + C141216 * C115) * C188) *
               C109357) *
              C141294 * C141277 * C98 +
          (((C55527 * C110 + C141216 * C116) * C188 +
            (C55527 * C191 + C141216 * C364) * C141309) *
               C109357 +
           ((C55527 * C1599 + C141216 * C1604) * C188 +
            (C55527 * C1688 + C141216 * C1876) * C141309) *
               C109358 +
           ((C55527 * C5327 + C141216 * C5331) * C188 +
            (C55527 * C5393 + C141216 * C5509) * C141309) *
               C109359 +
           ((C55527 * C15863 + C141216 * C15866) * C188 +
            (C55527 * C16014 + C141216 * C16274) * C141309) *
               C109360) *
              C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[108] +=
        (-std::pow(Pi, 2.5) *
         (((C6237 * C108 + C6241 + C6241 + C5865 * C419 + C6238 * C823 + C6242 +
            C6242 + C5866 * C1171 + C6239 * C2960 + C6243 + C6243 +
            C5867 * C3196) *
               C141216 * C93949 +
           (C6237 * C1601 + C8359 + C8359 + C5865 * C1949 + C6238 * C3490 +
            C8358 + C8358 + C5866 * C3790 + C6239 * C7887 + C8357 + C8357 +
            C5867 * C8345) *
               C141216 * C141384) *
              C141294 * C141277 * C97 -
          ((C8369 + C8370 + C8371) * C141216 * C141384 +
           (C6279 + C6278 + C6277) * C141216 * C93949) *
              C141294 * C141277 * C98 +
          ((C6282 + C6281 + C6280) * C141216 * C93949 +
           (C6237 * C1599 + C8360 + C8360 + C5865 * C1947 + C6238 * C3492 +
            C8361 + C8361 + C5866 * C3792 + C6239 * C7888 + C8362 + C8362 +
            C5867 * C8346) *
               C141216 * C141384) *
              C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C418 * C108 + C426 + C426 + C141309 * C419) * C47707 +
            C448 * C47708 + C449 * C47709) *
               C93949 +
           (C16446 * C47707 + C1971 * C47708 + C1970 * C47709) * C141384) *
              C141294 * C141277 * C97 -
          ((C1969 * C47709 + C1970 * C47708 + C1971 * C47707) * C141384 +
           (C450 * C47709 + C449 * C47708 + C448 * C47707) * C93949) *
              C141294 * C141277 * C98 +
          ((C449 * C47707 + C450 * C47708 + C451 * C47709) * C93949 +
           (C1970 * C47707 + C1969 * C47708 +
            (C418 * C1602 + C1962 + C1962 + C141309 * C1950) * C47709) *
               C141384) *
              C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C418 * C108 + C426 + C426 + C141309 * C419) * C141216 * C109357 +
           C16446 * C141216 * C109358 + C16447 * C141216 * C109359 +
           C21674 * C141216 * C109360) *
              C141294 * C141277 * C97 -
          (C16448 * C141216 * C109360 + C14400 * C141216 * C109359 +
           C1971 * C141216 * C109358 + C448 * C141216 * C109357) *
              C141294 * C141277 * C98 +
          (C449 * C141216 * C109357 + C1970 * C141216 * C109358 +
           C14401 * C141216 * C109359 +
           (C418 * C15863 + C16439 + C16439 + C141309 * C16423) * C141216 *
               C109360) *
              C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[108] +=
        (-std::pow(Pi, 2.5) *
         (((C94102 * C108 + C93949 * C276 + C94103 * C1601 + C141384 * C1784) *
               C5964 +
           (C94102 * C189 + C93949 * C501 + C94103 * C1690 + C141384 * C2040) *
               C5865 +
           (C94102 * C823 + C93949 * C1006 + C94103 * C3490 + C141384 * C3646) *
               C5965 +
           (C94102 * C912 + C93949 * C1262 + C94103 * C3572 + C141384 * C3864) *
               C5866 +
           (C94102 * C2960 + C93949 * C3084 + C94103 * C7887 +
            C141384 * C8128) *
               C5966 +
           (C94102 * C3026 + C93949 * C3254 + C94103 * C8006 +
            C141384 * C8470) *
               C5867) *
              C141216 * C141294 * C141277 * C97 -
          ((C94103 * C8005 + C141384 * C8469 + C94102 * C3027 +
            C93949 * C3255) *
               C5867 +
           (C94103 * C7886 + C141384 * C8127 + C94102 * C2961 +
            C93949 * C3085) *
               C5966 +
           (C95290 + C95291) * C5866 + (C94984 + C94985) * C5965 +
           (C94379 + C94378) * C5865 + (C94130 + C94129) * C5964) *
              C141216 * C141294 * C141277 * C98 +
          (C94141 * C5964 + C94384 * C5865 + (C94981 + C94980) * C5965 +
           (C95289 + C95288) * C5866 +
           (C94102 * C2962 + C93949 * C3086 + C94103 * C7888 +
            C141384 * C8129) *
               C5966 +
           (C94102 * C3028 + C93949 * C3256 + C94103 * C8007 +
            C141384 * C8471) *
               C5867) *
              C141216 * C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C94102 * C108 + C93949 * C276 + C94103 * C1601 + C141384 * C1784) *
                C188 +
            (C94102 * C189 + C93949 * C501 + C94103 * C1690 + C141384 * C2040) *
                C141309) *
               C47707 +
           ((C94129 + C94130) * C188 + (C94378 + C94379) * C141309) * C47708 +
           C94386 * C47709) *
              C141294 * C141277 * C97 -
          (((C94382 + C94383) * C141309 + (C94139 + C94140) * C188) * C47709 +
           ((C94381 + C94380) * C141309 + (C94134 + C94133) * C188) * C47708 +
           ((C94379 + C94378) * C141309 + (C94130 + C94129) * C188) * C47707) *
              C141294 * C141277 * C98 +
          (C94386 * C47707 +
           ((C94140 + C94139) * C188 + (C94383 + C94382) * C141309) * C47708 +
           ((C94102 * C112 + C93949 * C280 + C94103 * C1602 + C141384 * C1785) *
                C188 +
            (C94102 * C193 + C93949 * C505 + C94103 * C1691 + C141384 * C2041) *
                C141309) *
               C47709) *
              C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C109462 * C108 + C109357 * C276 + C109463 * C1601 +
            C109358 * C1784 + C109464 * C5325 + C109359 * C5449 +
            C109465 * C15862 + C109360 * C16151) *
               C188 +
           (C109462 * C189 + C109357 * C501 + C109463 * C1690 +
            C109358 * C2040 + C109464 * C5391 + C109359 * C5619 +
            C109465 * C16013 + C109360 * C16549) *
               C141309) *
              C141216 * C141294 * C141277 * C97 -
          ((C109465 * C16012 + C109360 * C16548 + C109464 * C5392 +
            C109359 * C5620 + C109463 * C1689 + C109358 * C2039 +
            C109462 * C190 + C109357 * C502) *
               C141309 +
           (C109465 * C15861 + C109360 * C16150 + C109464 * C5326 +
            C109359 * C5450 + C109463 * C1600 + C109358 * C1783 +
            C109462 * C109 + C109357 * C277) *
               C188) *
              C141216 * C141294 * C141277 * C98 +
          ((C109462 * C110 + C109357 * C278 + C109463 * C1599 +
            C109358 * C1782 + C109464 * C5327 + C109359 * C5451 +
            C109465 * C15863 + C109360 * C16152) *
               C188 +
           (C109462 * C191 + C109357 * C503 + C109463 * C1688 +
            C109358 * C2038 + C109464 * C5393 + C109359 * C5621 +
            C109465 * C16014 + C109360 * C16550) *
               C141309) *
              C141216 * C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eezx[108] +=
        (-std::pow(Pi, 2.5) * ((((C55527 * C108 + C141216 * C114) * C94102 +
                                 (C55527 * C276 + C141216 * C579) * C93949 +
                                 C62870 * C94103 + C63222 * C141384) *
                                    C5865 +
                                (C56299 * C94102 + C56535 * C93949 +
                                 C58709 * C94103 + C58929 * C141384) *
                                    C5866 +
                                (C56301 * C94102 + C56536 * C93949 +
                                 C58707 * C94103 + C58928 * C141384) *
                                    C5867) *
                                   C141294 * C141277 * C97 -
                               ((C87686 * C141384 + C87373 * C94103 +
                                 C56539 * C93949 + C56307 * C94102) *
                                    C5867 +
                                (C62178 * C141384 + C61851 * C94103 +
                                 C56538 * C93949 + C56305 * C94102) *
                                    C5866 +
                                (C63224 * C141384 + C62874 * C94103 +
                                 (C55527 * C277 + C141216 * C580) * C93949 +
                                 (C55527 * C109 + C141216 * C115) * C94102) *
                                    C5865) *
                                   C141294 * C141277 * C98 +
                               (((C55527 * C110 + C141216 * C116) * C94102 +
                                 (C55527 * C278 + C141216 * C581) * C93949 +
                                 (C55527 * C1599 + C141216 * C1604) * C94103 +
                                 (C55527 * C1782 + C141216 * C2124) * C141384) *
                                    C5865 +
                                ((C55527 * C821 + C141216 * C826) * C94102 +
                                 (C55527 * C1004 + C141216 * C1346) * C93949 +
                                 (C55527 * C3492 + C141216 * C3496) * C94103 +
                                 (C55527 * C3648 + C141216 * C3936) * C141384) *
                                    C5866 +
                                ((C55527 * C2962 + C141216 * C2966) * C94102 +
                                 (C55527 * C3086 + C141216 * C3310) * C93949 +
                                 (C55527 * C7888 + C141216 * C7891) * C94103 +
                                 (C55527 * C8129 + C141216 * C8584) * C141384) *
                                    C5867) *
                                   C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C47713 * C108 + C47707 * C114 + C47715 * C109 + C47708 * C115 +
            C47717 * C110 + C47709 * C116) *
               C94102 +
           (C47713 * C276 + C47707 * C579 + C47715 * C277 + C47708 * C580 +
            C47717 * C278 + C47709 * C581) *
               C93949 +
           (C47713 * C1601 + C47707 * C1606 + C47715 * C1600 + C47708 * C1605 +
            C47717 * C1599 + C47709 * C1604) *
               C94103 +
           (C47713 * C1784 + C47707 * C2126 + C47715 * C1783 + C47708 * C2125 +
            C47717 * C1782 + C47709 * C2124) *
               C141384) *
              C141309 * C141294 * C141277 * C97 -
          ((C47717 * C1781 + C47709 * C2123 + C47715 * C1782 + C47708 * C2124 +
            C47713 * C1783 + C47707 * C2125) *
               C141384 +
           (C47717 * C1598 + C47709 * C1603 + C47715 * C1599 + C47708 * C1604 +
            C47713 * C1600 + C47707 * C1605) *
               C94103 +
           (C47717 * C279 + C47709 * C582 + C47715 * C278 + C47708 * C581 +
            C47713 * C277 + C47707 * C580) *
               C93949 +
           (C47717 * C111 + C47709 * C117 + C47715 * C110 + C47708 * C116 +
            C47713 * C109 + C47707 * C115) *
               C94102) *
              C141309 * C141294 * C141277 * C98 +
          ((C47713 * C110 + C47707 * C116 + C47715 * C111 + C47708 * C117 +
            C47717 * C112 + C47709 * C118) *
               C94102 +
           (C47713 * C278 + C47707 * C581 + C47715 * C279 + C47708 * C582 +
            C47717 * C280 + C47709 * C583) *
               C93949 +
           (C47713 * C1599 + C47707 * C1604 + C47715 * C1598 + C47708 * C1603 +
            C47717 * C1602 + C47709 * C1607) *
               C94103 +
           (C47713 * C1782 + C47707 * C2124 + C47715 * C1781 + C47708 * C2123 +
            C47717 * C1785 + C47709 * C2127) *
               C141384) *
              C141309 * C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C55527 * C108 + C141216 * C114) * C109462 +
           (C55527 * C276 + C141216 * C579) * C109357 + C62870 * C109463 +
           C63222 * C109358 + C62872 * C109464 + C63223 * C109359 +
           C68191 * C109465 + C68436 * C109360) *
              C141309 * C141294 * C141277 * C97 -
          ((C55527 * C16150 + C141216 * C16658) * C109360 +
           (C55527 * C15861 + C141216 * C15864) * C109465 + C63225 * C109359 +
           C62876 * C109464 + C63224 * C109358 + C62874 * C109463 +
           (C55527 * C277 + C141216 * C580) * C109357 +
           (C55527 * C109 + C141216 * C115) * C109462) *
              C141309 * C141294 * C141277 * C98 +
          ((C55527 * C110 + C141216 * C116) * C109462 +
           (C55527 * C278 + C141216 * C581) * C109357 +
           (C55527 * C1599 + C141216 * C1604) * C109463 +
           (C55527 * C1782 + C141216 * C2124) * C109358 +
           (C55527 * C5327 + C141216 * C5331) * C109464 +
           (C55527 * C5451 + C141216 * C5675) * C109359 +
           (C55527 * C15863 + C141216 * C15866) * C109465 +
           (C55527 * C16152 + C141216 * C16660) * C109360) *
              C141309 * C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eezy[108] +=
        (-std::pow(Pi, 2.5) *
         (((C5964 * C108 + C5865 * C189 + C5965 * C823 + C5866 * C912 +
            C5966 * C2960 + C5867 * C3026) *
               C94102 +
           (C5964 * C276 + C5865 * C635 + C5965 * C1006 + C5866 * C1419 +
            C5966 * C3084 + C5867 * C3362) *
               C93949 +
           (C5964 * C1601 + C5865 * C1690 + C5965 * C3490 + C5866 * C3572 +
            C5966 * C7887 + C5867 * C8006) *
               C94103 +
           (C5964 * C1784 + C5865 * C2197 + C5965 * C3646 + C5866 * C4004 +
            C5966 * C8128 + C5867 * C8684) *
               C141384) *
              C141216 * C141294 * C141277 * C97 -
          ((C8693 + C8694 + C8695) * C141384 +
           (C8027 + C8028 + C8029) * C94103 + (C6537 + C6536 + C6535) * C93949 +
           (C5994 + C5993 + C5992) * C94102) *
              C141216 * C141294 * C141277 * C98 +
          ((C6003 + C6002 + C6001) * C94102 + (C6540 + C6539 + C6538) * C93949 +
           (C5964 * C1599 + C5865 * C1688 + C5965 * C3492 + C5866 * C3574 +
            C5966 * C7888 + C5867 * C8007) *
               C94103 +
           (C5964 * C1782 + C5865 * C2195 + C5965 * C3648 + C5866 * C4006 +
            C5966 * C8129 + C5867 * C8685) *
               C141384) *
              C141216 * C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141309 * C189) * C94102 +
            (C188 * C276 + C141309 * C635) * C93949 + C16043 * C94103 +
            C16798 * C141384) *
               C47707 +
           (C94535 + C94536 + C94537 + C94538) * C47708 + C94549 * C47709) *
              C141294 * C141277 * C97 -
          ((C94543 + C94544 + C94545 + C94546) * C47709 +
           (C94542 + C94541 + C94540 + C94539) * C47708 +
           (C94538 + C94537 + C94536 + C94535) * C47707) *
              C141294 * C141277 * C98 +
          (C94549 * C47707 + (C94546 + C94545 + C94544 + C94543) * C47708 +
           (C225 * C94102 + C657 * C93949 +
            (C188 * C1602 + C141309 * C1691) * C94103 +
            (C188 * C1785 + C141309 * C2198) * C141384) *
               C47709) *
              C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C188 * C108 + C141309 * C189) * C109462 +
           (C188 * C276 + C141309 * C635) * C109357 + C16043 * C109463 +
           C16798 * C109358 + C16045 * C109464 + C16799 * C109359 +
           C21415 * C109465 + C21913 * C109360) *
              C141216 * C141294 * C141277 * C97 -
          (C16800 * C109360 + C16048 * C109465 + C14656 * C109359 +
           C14127 * C109464 + C2211 * C109358 + C1715 * C109463 +
           C654 * C109357 + C218 * C109462) *
              C141216 * C141294 * C141277 * C98 +
          (C220 * C109462 + C655 * C109357 + C1713 * C109463 + C2210 * C109358 +
           C14130 * C109464 + C14657 * C109359 +
           (C188 * C15863 + C141309 * C16014) * C109465 +
           (C188 * C16152 + C141309 * C16785) * C109360) *
              C141216 * C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eezz[108] += (-std::pow(Pi, 2.5) *
                    (((C94623 * C108 + C94626 + C94626 + C93949 * C714 +
                       C94624 * C1601 + C94627 + C94627 + C141384 * C2283) *
                          C5865 +
                      (C94623 * C823 + C95607 + C95607 + C93949 * C1505 +
                       C94624 * C3490 + C95606 + C95606 + C141384 * C4074) *
                          C5866 +
                      (C94623 * C2960 + C98229 + C98229 + C93949 * C3416 +
                       C94624 * C7887 + C98230 + C98230 + C141384 * C8794) *
                          C5867) *
                         C141216 * C141294 * C141277 * C97 -
                     ((C94624 * C7886 + C98232 + C98232 + C141384 * C8793 +
                       C94623 * C2961 + C98231 + C98231 + C93949 * C3417) *
                          C5867 +
                      (C95620 + C95621) * C5866 + (C94661 + C94660) * C5865) *
                         C141216 * C141294 * C141277 * C98 +
                     (C94666 * C5865 + (C95619 + C95618) * C5866 +
                      (C94623 * C2962 + C98233 + C98233 + C93949 * C3418 +
                       C94624 * C7888 + C98234 + C98234 + C141384 * C8795) *
                          C5867) *
                         C141216 * C141294 * C141277 * C99)) /
                       (p * q * std::sqrt(p + q)) -
                   (std::pow(Pi, 2.5) *
                    (((C94623 * C108 + C94626 + C94626 + C93949 * C714 +
                       C94624 * C1601 + C94627 + C94627 + C141384 * C2283) *
                          C141309 * C47707 +
                      (C94660 + C94661) * C141309 * C47708 + C94667 * C47709) *
                         C141294 * C141277 * C97 -
                     ((C94664 + C94665) * C141309 * C47709 +
                      (C94663 + C94662) * C141309 * C47708 +
                      (C94661 + C94660) * C141309 * C47707) *
                         C141294 * C141277 * C98 +
                     (C94667 * C47707 + (C94665 + C94664) * C141309 * C47708 +
                      (C94623 * C112 + C94646 + C94646 + C93949 * C718 +
                       C94624 * C1602 + C94647 + C94647 + C141384 * C2284) *
                          C141309 * C47709) *
                         C141294 * C141277 * C99)) /
                       (p * q * std::sqrt(p + q)) +
                   (2 * std::pow(Pi, 2.5) *
                    ((C109766 * C108 + C109771 + C109771 + C109357 * C714 +
                      C109767 * C1601 + C109772 + C109772 + C109358 * C2283 +
                      C109768 * C5325 + C109773 + C109773 + C109359 * C5781 +
                      C109769 * C15862 + C109774 + C109774 + C109360 * C16900) *
                         C141309 * C141216 * C141294 * C141277 * C97 -
                     (C109769 * C15861 + C109775 + C109775 + C109360 * C16899 +
                      C109768 * C5326 + C109776 + C109776 + C109359 * C5782 +
                      C109767 * C1600 + C109777 + C109777 + C109358 * C2282 +
                      C109766 * C109 + C109778 + C109778 + C109357 * C715) *
                         C141309 * C141216 * C141294 * C141277 * C98 +
                     (C109766 * C110 + C109779 + C109779 + C109357 * C716 +
                      C109767 * C1599 + C109780 + C109780 + C109358 * C2281 +
                      C109768 * C5327 + C109781 + C109781 + C109359 * C5783 +
                      C109769 * C15863 + C109782 + C109782 + C109360 * C16901) *
                         C141309 * C141216 * C141294 * C141277 * C99)) /
                       (p * q * std::sqrt(p + q));
    d2eexx[109] +=
        (-std::pow(Pi, 2.5) *
         (((((C55526 * C108 + C55529 + C55529 + C141216 * C120) * C93949 +
             C62512 * C141384) *
                C5865 +
            (C102386 + C102387) * C5866 + (C102388 + C102389) * C5867) *
               C141294 * C816 -
           ((C58471 * C141384 + C56055 * C93949) * C5867 +
            (C102389 + C102388) * C5866 + (C102387 + C102386) * C5865) *
               C141294 * C141485) *
              C818 +
          (((C102390 + C102391) * C5865 + (C102392 + C102393) * C5866 +
            (C56058 * C93949 +
             (C55526 * C10552 + C56752 + C56752 + C141216 * C10556) * C141384) *
                C5867) *
               C141294 * C141485 -
           ((C102393 + C102392) * C5867 + (C102391 + C102390) * C5866 +
            (C62514 * C141384 +
             (C55526 * C109 + C55536 + C55536 + C141216 * C121) * C93949) *
                C5865) *
               C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47712 * C108 + C47719 + C47719 + C47707 * C120 + C47714 * C109 +
             C47720 + C47720 + C47708 * C121 + C47716 * C110 + C47721 + C47721 +
             C47709 * C122) *
                C93949 +
            (C47712 * C1601 + C49619 + C49619 + C47707 * C1611 +
             C47714 * C1600 + C49618 + C49618 + C47708 * C1610 +
             C47716 * C1599 + C49617 + C49617 + C47709 * C1609) *
                C141384) *
               C141309 * C141294 * C816 -
           ((C52204 + C52205 + C52206) * C141384 +
            (C48586 + C48585 + C48584) * C93949) *
               C141309 * C141294 * C141485) *
              C818 +
          (((C48587 + C48588 + C48589) * C93949 +
            (C47712 * C3491 + C49623 + C49623 + C47707 * C3499 +
             C47714 * C3492 + C49624 + C49624 + C47708 * C3500 +
             C47716 * C3493 + C49625 + C49625 + C47709 * C3501) *
                C141384) *
               C141309 * C141294 * C141485 -
           ((C47716 * C1598 + C49622 + C49622 + C47709 * C1608 +
             C47714 * C1599 + C49621 + C49621 + C47708 * C1609 +
             C47712 * C1600 + C49620 + C49620 + C47707 * C1610) *
                C141384 +
            (C47716 * C111 + C47728 + C47728 + C47709 * C123 + C47714 * C110 +
             C47729 + C47729 + C47708 * C122 + C47712 * C109 + C47730 + C47730 +
             C47707 * C121) *
                C93949) *
               C141309 * C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C55526 * C108 + C55529 + C55529 + C141216 * C120) * C109357 +
            C62512 * C109358 + C62513 * C109359 + C67937 * C109360) *
               C141309 * C141294 * C816 -
           (C65168 * C109360 + C61519 * C109359 + C58473 * C109358 +
            C56053 * C109357) *
               C141309 * C141294 * C141485) *
              C818 +
          ((C56056 * C109357 + C61520 * C109358 + C61521 * C109359 +
            (C55526 * C18583 + C62503 + C62503 + C141216 * C18587) * C109360) *
               C141309 * C141294 * C141485 -
           ((C55526 * C15861 + C62502 + C62502 + C141216 * C15867) * C109360 +
            C62515 * C109359 + C62514 * C109358 +
            (C55526 * C109 + C55536 + C55536 + C141216 * C121) * C109357) *
               C141309 * C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q));
    d2eexy[109] +=
        (-std::pow(Pi, 2.5) *
         (((((C5964 * C108 + C5865 * C189 + C5965 * C823 + C5866 * C912 +
              C5966 * C2960 + C5867 * C3026) *
                 C55527 +
             (C5964 * C114 + C5865 * C195 + C5965 * C828 + C5866 * C917 +
              C5966 * C2964 + C5867 * C3030) *
                 C141216) *
                C93949 +
            ((C5964 * C1601 + C5865 * C1690 + C5965 * C3490 + C5866 * C3572 +
              C5966 * C7887 + C5867 * C8006) *
                 C55527 +
             (C5964 * C1606 + C5865 * C1695 + C5965 * C3494 + C5866 * C3576 +
              C5966 * C7890 + C5867 * C8009) *
                 C141216) *
                C141384) *
               C141294 * C816 -
           (((C5966 * C10553 + C5867 * C10679 + C5965 * C7890 + C5866 * C8009 +
              C5964 * C3494 + C5865 * C3576) *
                 C141216 +
             (C5966 * C10551 + C5867 * C10677 + C5965 * C7887 + C5866 * C8006 +
              C5964 * C3490 + C5865 * C3572) *
                 C55527) *
                C141384 +
            ((C5966 * C6732 + C5867 * C6883 + C5965 * C2964 + C5866 * C3030 +
              C5964 * C828 + C5865 * C917) *
                 C141216 +
             (C5966 * C6729 + C5867 * C6880 + C5965 * C2960 + C5866 * C3026 +
              C5964 * C823 + C5865 * C912) *
                 C55527) *
                C93949) *
               C141294 * C141485) *
              C818 +
          ((((C6903 + C6902 + C6901) * C55527 +
             (C6900 + C6899 + C6898) * C141216) *
                C93949 +
            ((C5964 * C3491 + C5865 * C3573 + C5965 * C7886 + C5866 * C8005 +
              C5966 * C10552 + C5867 * C10678) *
                 C55527 +
             (C5964 * C3495 + C5865 * C3577 + C5965 * C7889 + C5866 * C8008 +
              C5966 * C10554 + C5867 * C10680) *
                 C141216) *
                C141384) *
               C141294 * C141485 -
           (((C8024 + C8025 + C8026) * C141216 +
             (C8027 + C8028 + C8029) * C55527) *
                C141384 +
            ((C5997 + C5996 + C5995) * C141216 +
             (C5994 + C5993 + C5992) * C55527) *
                C93949) *
               C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141309 * C189) * C47713 +
             (C188 * C114 + C141309 * C195) * C47707 + C218 * C47715 +
             C219 * C47708 + C220 * C47717 + C221 * C47709) *
                C93949 +
            (C16043 * C47713 + C16044 * C47707 + C1715 * C47715 +
             C1714 * C47708 + C1713 * C47717 + C1712 * C47709) *
                C141384) *
               C141294 * C816 -
           ((C30841 * C47709 + C30842 * C47717 + C14992 * C47708 +
             C14993 * C47715 + C18716 * C47707 + C18715 * C47713) *
                C141384 +
            (C934 * C47709 + C935 * C47717 + C936 * C47708 + C937 * C47715 +
             (C188 * C828 + C141309 * C917) * C47707 +
             (C188 * C823 + C141309 * C912) * C47713) *
                C93949) *
               C141294 * C141485) *
              C818 +
          (((C937 * C47713 + C936 * C47707 + C935 * C47715 + C934 * C47708 +
             C933 * C47717 + C932 * C47709) *
                C93949 +
            (C14993 * C47713 + C14992 * C47707 + C30842 * C47715 +
             C30841 * C47708 + (C188 * C3493 + C141309 * C3575) * C47717 +
             (C188 * C3497 + C141309 * C3579) * C47709) *
                C141384) *
               C141294 * C141485 -
           ((C1710 * C47709 + C1711 * C47717 + C1712 * C47708 + C1713 * C47715 +
             C1714 * C47707 + C1715 * C47713) *
                C141384 +
            (C223 * C47709 + C222 * C47717 + C221 * C47708 + C220 * C47715 +
             C219 * C47707 + C218 * C47713) *
                C93949) *
               C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141309 * C189) * C55527 +
             (C188 * C114 + C141309 * C195) * C141216) *
                C109357 +
            (C16043 * C55527 + C16044 * C141216) * C109358 +
            (C16045 * C55527 + C16046 * C141216) * C109359 +
            (C21415 * C55527 + C21414 * C141216) * C109360) *
               C141294 * C816 -
           (((C188 * C18584 + C141309 * C18700) * C141216 +
             (C188 * C18582 + C141309 * C18698) * C55527) *
                C109360 +
            (C18718 * C141216 + C18717 * C55527) * C109359 +
            (C18716 * C141216 + C18715 * C55527) * C109358 +
            ((C188 * C828 + C141309 * C917) * C141216 +
             (C188 * C823 + C141309 * C912) * C55527) *
                C109357) *
               C141294 * C141485) *
              C818 +
          (((C937 * C55527 + C936 * C141216) * C109357 +
            (C14993 * C55527 + C14992 * C141216) * C109358 +
            (C14991 * C55527 + C14990 * C141216) * C109359 +
            ((C188 * C18583 + C141309 * C18699) * C55527 +
             (C188 * C18585 + C141309 * C18701) * C141216) *
                C109360) *
               C141294 * C141485 -
           ((C16047 * C141216 + C16048 * C55527) * C109360 +
            (C14128 * C141216 + C14127 * C55527) * C109359 +
            (C1714 * C141216 + C1715 * C55527) * C109358 +
            (C219 * C141216 + C218 * C55527) * C109357) *
               C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q));
    d2eexz[109] +=
        (-std::pow(Pi, 2.5) *
         (((((C94102 * C108 + C93949 * C276 + C94103 * C1601 +
              C141384 * C1784) *
                 C55527 +
             (C94102 * C114 + C93949 * C282 + C94103 * C1606 +
              C141384 * C1789) *
                 C141216) *
                C5865 +
            ((C102614 + C102615) * C55527 + (C102616 + C102617) * C141216) *
                C5866 +
            ((C102618 + C102619) * C55527 + (C102620 + C102621) * C141216) *
                C5867) *
               C141294 * C816 -
           (((C94103 * C10553 + C141384 * C10781 + C94102 * C6732 +
              C93949 * C7005) *
                 C141216 +
             (C94103 * C10551 + C141384 * C10779 + C94102 * C6729 +
              C93949 * C7002) *
                 C55527) *
                C5867 +
            ((C102621 + C102620) * C141216 + (C102619 + C102618) * C55527) *
                C5866 +
            ((C102617 + C102616) * C141216 + (C102615 + C102614) * C55527) *
                C5865) *
               C141294 * C141485) *
              C818 +
          ((((C94985 + C94984) * C55527 + (C94983 + C94982) * C141216) * C5865 +
            ((C102622 + C102623) * C55527 + (C102624 + C102625) * C141216) *
                C5866 +
            ((C94102 * C6728 + C93949 * C7001 + C94103 * C10552 +
              C141384 * C10780) *
                 C55527 +
             (C94102 * C6731 + C93949 * C7004 + C94103 * C10554 +
              C141384 * C10782) *
                 C141216) *
                C5867) *
               C141294 * C141485 -
           (((C102625 + C102624) * C141216 + (C102623 + C102622) * C55527) *
                C5867 +
            ((C94982 + C94983) * C141216 + (C94984 + C94985) * C55527) * C5866 +
            ((C94132 + C94131) * C141216 + (C94130 + C94129) * C55527) *
                C5865) *
               C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C94102 * C108 + C93949 * C276 + C94103 * C1601 + C141384 * C1784) *
                C47713 +
            (C94102 * C114 + C93949 * C282 + C94103 * C1606 + C141384 * C1789) *
                C47707 +
            (C94129 + C94130) * C47715 + (C94131 + C94132) * C47708 +
            C94141 * C47717 + C94142 * C47709) *
               C141309 * C141294 * C816 -
           ((C94978 + C94979) * C47709 + (C94980 + C94981) * C47717 +
            (C94982 + C94983) * C47708 + (C94984 + C94985) * C47715 +
            (C94103 * C3494 + C141384 * C3650 + C94102 * C828 +
             C93949 * C1011) *
                C47707 +
            (C94103 * C3490 + C141384 * C3646 + C94102 * C823 +
             C93949 * C1006) *
                C47713) *
               C141309 * C141294 * C141485) *
              C818 +
          (((C94985 + C94984) * C47713 + (C94983 + C94982) * C47707 +
            (C94981 + C94980) * C47715 + (C94979 + C94978) * C47708 +
            (C94102 * C820 + C93949 * C1003 + C94103 * C3493 +
             C141384 * C3649) *
                C47717 +
            (C94102 * C825 + C93949 * C1008 + C94103 * C3497 +
             C141384 * C3653) *
                C47709) *
               C141309 * C141294 * C141485 -
           ((C94137 + C94138) * C47709 + (C94139 + C94140) * C47717 +
            (C94136 + C94135) * C47708 + (C94134 + C94133) * C47715 +
            (C94132 + C94131) * C47707 + (C94130 + C94129) * C47713) *
               C141309 * C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C109462 * C108 + C109357 * C276 + C109463 * C1601 +
             C109358 * C1784 + C109464 * C5325 + C109359 * C5449 +
             C109465 * C15862 + C109360 * C16151) *
                C55527 +
            (C109462 * C114 + C109357 * C282 + C109463 * C1606 +
             C109358 * C1789 + C109464 * C5329 + C109359 * C5453 +
             C109465 * C15865 + C109360 * C16154) *
                C141216) *
               C141309 * C141294 * C816 -
           ((C109465 * C18584 + C109360 * C18822 + C109464 * C13305 +
             C109359 * C13479 + C109463 * C3494 + C109358 * C3650 +
             C109462 * C828 + C109357 * C1011) *
                C141216 +
            (C109465 * C18582 + C109360 * C18820 + C109464 * C13301 +
             C109359 * C13475 + C109463 * C3490 + C109358 * C3646 +
             C109462 * C823 + C109357 * C1006) *
                C55527) *
               C141309 * C141294 * C141485) *
              C818 +
          (((C109462 * C822 + C109357 * C1005 + C109463 * C3491 +
             C109358 * C3647 + C109464 * C13302 + C109359 * C13476 +
             C109465 * C18583 + C109360 * C18821) *
                C55527 +
            (C109462 * C827 + C109357 * C1010 + C109463 * C3495 +
             C109358 * C3651 + C109464 * C13306 + C109359 * C13480 +
             C109465 * C18585 + C109360 * C18823) *
                C141216) *
               C141309 * C141294 * C141485 -
           ((C109465 * C15864 + C109360 * C16153 + C109464 * C5330 +
             C109359 * C5454 + C109463 * C1605 + C109358 * C1788 +
             C109462 * C115 + C109357 * C283) *
                C141216 +
            (C109465 * C15861 + C109360 * C16150 + C109464 * C5326 +
             C109359 * C5450 + C109463 * C1600 + C109358 * C1783 +
             C109462 * C109 + C109357 * C277) *
                C55527) *
               C141309 * C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[109] +=
        (-std::pow(Pi, 2.5) *
         (((((C55527 * C108 + C141216 * C114) * C5964 +
             (C55527 * C189 + C141216 * C362) * C5865 + C56299 * C5965 +
             C56300 * C5866 + C56301 * C5966 + C56302 * C5867) *
                C93949 +
            (C62870 * C5964 + C62871 * C5865 + C58709 * C5965 + C58708 * C5866 +
             C58707 * C5966 + C58706 * C5867) *
                C141384) *
               C141294 * C816 -
           ((C58704 * C5867 + C58705 * C5966 + C58706 * C5866 + C58707 * C5965 +
             C58708 * C5865 + C58709 * C5964) *
                C141384 +
            (C56304 * C5867 + C56303 * C5966 + C56302 * C5866 + C56301 * C5965 +
             C56300 * C5865 + C56299 * C5964) *
                C93949) *
               C141294 * C141485) *
              C818 +
          (((C56305 * C5964 + C56306 * C5865 + C56307 * C5965 + C56308 * C5866 +
             C56309 * C5966 + C56310 * C5867) *
                C93949 +
            (C61851 * C5964 + C61852 * C5865 + C87373 * C5965 + C87374 * C5866 +
             (C55527 * C10552 + C141216 * C10554) * C5966 +
             (C55527 * C10678 + C141216 * C10902) * C5867) *
                C141384) *
               C141294 * C141485 -
           ((C87374 * C5867 + C87373 * C5966 + C61852 * C5866 + C61851 * C5965 +
             C62875 * C5865 + C62874 * C5964) *
                C141384 +
            (C56308 * C5867 + C56307 * C5966 + C56306 * C5866 + C56305 * C5965 +
             (C55527 * C190 + C141216 * C363) * C5865 +
             (C55527 * C109 + C141216 * C115) * C5964) *
                C93949) *
               C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47713 * C108 + C47707 * C114 + C47715 * C109 + C47708 * C115 +
              C47717 * C110 + C47709 * C116) *
                 C188 +
             (C47713 * C189 + C47707 * C362 + C47715 * C190 + C47708 * C363 +
              C47717 * C191 + C47709 * C364) *
                 C141309) *
                C93949 +
            ((C47713 * C1601 + C47707 * C1606 + C47715 * C1600 +
              C47708 * C1605 + C47717 * C1599 + C47709 * C1604) *
                 C188 +
             (C47713 * C1690 + C47707 * C1878 + C47715 * C1689 +
              C47708 * C1877 + C47717 * C1688 + C47709 * C1876) *
                 C141309) *
                C141384) *
               C141294 * C816 -
           (((C52519 + C52520 + C52521) * C141309 +
             (C52522 + C52523 + C52524) * C188) *
                C141384 +
            ((C48949 + C48948 + C48947) * C141309 +
             (C48946 + C48945 + C48944) * C188) *
                C93949) *
               C141294 * C141485) *
              C818 +
          ((((C48950 + C48951 + C48952) * C188 +
             (C48953 + C48954 + C48955) * C141309) *
                C93949 +
            ((C47713 * C3491 + C47707 * C3495 + C47715 * C3492 +
              C47708 * C3496 + C47717 * C3493 + C47709 * C3497) *
                 C188 +
             (C47713 * C3573 + C47707 * C3721 + C47715 * C3574 +
              C47708 * C3722 + C47717 * C3575 + C47709 * C3723) *
                 C141309) *
                C141384) *
               C141294 * C141485 -
           (((C47717 * C1687 + C47709 * C1875 + C47715 * C1688 +
              C47708 * C1876 + C47713 * C1689 + C47707 * C1877) *
                 C141309 +
             (C47717 * C1598 + C47709 * C1603 + C47715 * C1599 +
              C47708 * C1604 + C47713 * C1600 + C47707 * C1605) *
                 C188) *
                C141384 +
            ((C47717 * C192 + C47709 * C365 + C47715 * C191 + C47708 * C364 +
              C47713 * C190 + C47707 * C363) *
                 C141309 +
             (C47717 * C111 + C47709 * C117 + C47715 * C110 + C47708 * C116 +
              C47713 * C109 + C47707 * C115) *
                 C188) *
                C93949) *
               C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C55527 * C108 + C141216 * C114) * C188 +
             (C55527 * C189 + C141216 * C362) * C141309) *
                C109357 +
            (C62870 * C188 + C62871 * C141309) * C109358 +
            (C62872 * C188 + C62873 * C141309) * C109359 +
            (C68191 * C188 + C68190 * C141309) * C109360) *
               C141294 * C816 -
           ((C65523 * C141309 + C65524 * C188) * C109360 +
            (C61850 * C141309 + C61849 * C188) * C109359 +
            (C58708 * C141309 + C58709 * C188) * C109358 +
            (C56300 * C141309 + C56299 * C188) * C109357) *
               C141294 * C141485) *
              C818 +
          (((C56305 * C188 + C56306 * C141309) * C109357 +
            (C61851 * C188 + C61852 * C141309) * C109358 +
            (C61853 * C188 + C61854 * C141309) * C109359 +
            ((C55527 * C18583 + C141216 * C18585) * C188 +
             (C55527 * C18699 + C141216 * C18923) * C141309) *
                C109360) *
               C141294 * C141485 -
           (((C55527 * C16012 + C141216 * C16272) * C141309 +
             (C55527 * C15861 + C141216 * C15864) * C188) *
                C109360 +
            (C62877 * C141309 + C62876 * C188) * C109359 +
            (C62875 * C141309 + C62874 * C188) * C109358 +
            ((C55527 * C190 + C141216 * C363) * C141309 +
             (C55527 * C109 + C141216 * C115) * C188) *
                C109357) *
               C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[109] +=
        (-std::pow(Pi, 2.5) *
         ((((C6237 * C108 + C6241 + C6241 + C5865 * C419 + C6238 * C823 +
             C6242 + C6242 + C5866 * C1171 + C6239 * C2960 + C6243 + C6243 +
             C5867 * C3196) *
                C141216 * C93949 +
            (C6237 * C1601 + C8359 + C8359 + C5865 * C1949 + C6238 * C3490 +
             C8358 + C8358 + C5866 * C3790 + C6239 * C7887 + C8357 + C8357 +
             C5867 * C8345) *
                C141216 * C141384) *
               C141294 * C816 -
           ((C6239 * C10551 + C11030 + C11030 + C5867 * C11025 + C6238 * C7887 +
             C11029 + C11029 + C5866 * C8345 + C6237 * C3490 + C11028 + C11028 +
             C5865 * C3790) *
                C141216 * C141384 +
            (C6239 * C6729 + C7301 + C7301 + C5867 * C7289 + C6238 * C2960 +
             C7302 + C7302 + C5866 * C3196 + C6237 * C823 + C7303 + C7303 +
             C5865 * C1171) *
                C141216 * C93949) *
               C141294 * C141485) *
              C818 +
          (((C7315 + C7314 + C7313) * C141216 * C93949 +
            (C6237 * C3491 + C11031 + C11031 + C5865 * C3791 + C6238 * C7886 +
             C11032 + C11032 + C5866 * C8344 + C6239 * C10552 + C11033 +
             C11033 + C5867 * C11026) *
                C141216 * C141384) *
               C141294 * C141485 -
           ((C8369 + C8370 + C8371) * C141216 * C141384 +
            (C6279 + C6278 + C6277) * C141216 * C93949) *
               C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C418 * C108 + C426 + C426 + C141309 * C419) * C47707 +
             C448 * C47708 + C449 * C47709) *
                C93949 +
            (C16446 * C47707 + C1971 * C47708 + C1970 * C47709) * C141384) *
               C141294 * C816 -
           ((C31165 * C47709 + C15322 * C47708 + C19049 * C47707) * C141384 +
            (C1192 * C47709 + C1193 * C47708 +
             (C418 * C823 + C1183 + C1183 + C141309 * C1171) * C47707) *
                C93949) *
               C141294 * C141485) *
              C818 +
          (((C1193 * C47707 + C1192 * C47708 + C1191 * C47709) * C93949 +
            (C15322 * C47707 + C31165 * C47708 +
             (C418 * C3493 + C3798 + C3798 + C141309 * C3793) * C47709) *
                C141384) *
               C141294 * C141485 -
           ((C1969 * C47709 + C1970 * C47708 + C1971 * C47707) * C141384 +
            (C450 * C47709 + C449 * C47708 + C448 * C47707) * C93949) *
               C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C418 * C108 + C426 + C426 + C141309 * C419) * C141216 * C109357 +
            C16446 * C141216 * C109358 + C16447 * C141216 * C109359 +
            C21674 * C141216 * C109360) *
               C141294 * C816 -
           ((C418 * C18582 + C19043 + C19043 + C141309 * C19034) * C141216 *
                C109360 +
            C19050 * C141216 * C109359 + C19049 * C141216 * C109358 +
            (C418 * C823 + C1183 + C1183 + C141309 * C1171) * C141216 *
                C109357) *
               C141294 * C141485) *
              C818 +
          ((C1193 * C141216 * C109357 + C15322 * C141216 * C109358 +
            C15321 * C141216 * C109359 +
            (C418 * C18583 + C19044 + C19044 + C141309 * C19035) * C141216 *
                C109360) *
               C141294 * C141485 -
           (C16448 * C141216 * C109360 + C14400 * C141216 * C109359 +
            C1971 * C141216 * C109358 + C448 * C141216 * C109357) *
               C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[109] +=
        (-std::pow(Pi, 2.5) *
         ((((C94102 * C108 + C93949 * C276 + C94103 * C1601 + C141384 * C1784) *
                C5964 +
            (C94102 * C189 + C93949 * C501 + C94103 * C1690 + C141384 * C2040) *
                C5865 +
            (C102614 + C102615) * C5965 + (C102932 + C102933) * C5866 +
            (C102618 + C102619) * C5966 + (C102934 + C102935) * C5867) *
               C141216 * C141294 * C816 -
           ((C94103 * C10677 + C141384 * C11131 + C94102 * C6880 +
             C93949 * C7414) *
                C5867 +
            (C94103 * C10551 + C141384 * C10779 + C94102 * C6729 +
             C93949 * C7002) *
                C5966 +
            (C102935 + C102934) * C5866 + (C102619 + C102618) * C5965 +
            (C102933 + C102932) * C5865 + (C102615 + C102614) * C5964) *
               C141216 * C141294 * C141485) *
              C818 +
          (((C94985 + C94984) * C5964 + (C95291 + C95290) * C5865 +
            (C102622 + C102623) * C5965 + (C102936 + C102937) * C5866 +
            (C94102 * C6728 + C93949 * C7001 + C94103 * C10552 +
             C141384 * C10780) *
                C5966 +
            (C94102 * C6879 + C93949 * C7413 + C94103 * C10678 +
             C141384 * C11132) *
                C5867) *
               C141216 * C141294 * C141485 -
           ((C102937 + C102936) * C5867 + (C102623 + C102622) * C5966 +
            (C95290 + C95291) * C5866 + (C94984 + C94985) * C5965 +
            (C94379 + C94378) * C5865 + (C94130 + C94129) * C5964) *
               C141216 * C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C94102 * C108 + C93949 * C276 + C94103 * C1601 +
              C141384 * C1784) *
                 C188 +
             (C94102 * C189 + C93949 * C501 + C94103 * C1690 +
              C141384 * C2040) *
                 C141309) *
                C47707 +
            ((C94129 + C94130) * C188 + (C94378 + C94379) * C141309) * C47708 +
            C94386 * C47709) *
               C141294 * C816 -
           (((C95288 + C95289) * C141309 + (C94980 + C94981) * C188) * C47709 +
            ((C95290 + C95291) * C141309 + (C94984 + C94985) * C188) * C47708 +
            ((C94103 * C3572 + C141384 * C3864 + C94102 * C912 +
              C93949 * C1262) *
                 C141309 +
             (C94103 * C3490 + C141384 * C3646 + C94102 * C823 +
              C93949 * C1006) *
                 C188) *
                C47707) *
               C141294 * C141485) *
              C818 +
          ((((C94985 + C94984) * C188 + (C95291 + C95290) * C141309) * C47707 +
            ((C94981 + C94980) * C188 + (C95289 + C95288) * C141309) * C47708 +
            ((C94102 * C820 + C93949 * C1003 + C94103 * C3493 +
              C141384 * C3649) *
                 C188 +
             (C94102 * C909 + C93949 * C1259 + C94103 * C3575 +
              C141384 * C3867) *
                 C141309) *
                C47709) *
               C141294 * C141485 -
           (((C94382 + C94383) * C141309 + (C94139 + C94140) * C188) * C47709 +
            ((C94381 + C94380) * C141309 + (C94134 + C94133) * C188) * C47708 +
            ((C94379 + C94378) * C141309 + (C94130 + C94129) * C188) * C47707) *
               C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C109462 * C108 + C109357 * C276 + C109463 * C1601 +
             C109358 * C1784 + C109464 * C5325 + C109359 * C5449 +
             C109465 * C15862 + C109360 * C16151) *
                C188 +
            (C109462 * C189 + C109357 * C501 + C109463 * C1690 +
             C109358 * C2040 + C109464 * C5391 + C109359 * C5619 +
             C109465 * C16013 + C109360 * C16549) *
                C141309) *
               C141216 * C141294 * C816 -
           ((C109465 * C18698 + C109360 * C19150 + C109464 * C13393 +
             C109359 * C13719 + C109463 * C3572 + C109358 * C3864 +
             C109462 * C912 + C109357 * C1262) *
                C141309 +
            (C109465 * C18582 + C109360 * C18820 + C109464 * C13301 +
             C109359 * C13475 + C109463 * C3490 + C109358 * C3646 +
             C109462 * C823 + C109357 * C1006) *
                C188) *
               C141216 * C141294 * C141485) *
              C818 +
          (((C109462 * C822 + C109357 * C1005 + C109463 * C3491 +
             C109358 * C3647 + C109464 * C13302 + C109359 * C13476 +
             C109465 * C18583 + C109360 * C18821) *
                C188 +
            (C109462 * C911 + C109357 * C1261 + C109463 * C3573 +
             C109358 * C3865 + C109464 * C13395 + C109359 * C13721 +
             C109465 * C18699 + C109360 * C19151) *
                C141309) *
               C141216 * C141294 * C141485 -
           ((C109465 * C16012 + C109360 * C16548 + C109464 * C5392 +
             C109359 * C5620 + C109463 * C1689 + C109358 * C2039 +
             C109462 * C190 + C109357 * C502) *
                C141309 +
            (C109465 * C15861 + C109360 * C16150 + C109464 * C5326 +
             C109359 * C5450 + C109463 * C1600 + C109358 * C1783 +
             C109462 * C109 + C109357 * C277) *
                C188) *
               C141216 * C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q));
    d2eezx[109] +=
        (-std::pow(Pi, 2.5) *
         (((((C55527 * C108 + C141216 * C114) * C94102 +
             (C55527 * C276 + C141216 * C579) * C93949 + C62870 * C94103 +
             C63222 * C141384) *
                C5865 +
            (C103036 + C103037 + C103038 + C103039) * C5866 +
            (C103040 + C103041 + C103042 + C103043) * C5867) *
               C141294 * C816 -
           ((C58927 * C141384 + C58705 * C94103 + C56537 * C93949 +
             C56303 * C94102) *
                C5867 +
            (C103043 + C103042 + C103041 + C103040) * C5866 +
            (C103039 + C103038 + C103037 + C103036) * C5865) *
               C141294 * C141485) *
              C818 +
          (((C103044 + C103045 + C103046 + C103047) * C5865 +
            (C103048 + C103049 + C103050 + C103051) * C5866 +
            (C56309 * C94102 + C56540 * C93949 +
             (C55527 * C10552 + C141216 * C10554) * C94103 +
             (C55527 * C10780 + C141216 * C11238) * C141384) *
                C5867) *
               C141294 * C141485 -
           ((C103051 + C103050 + C103049 + C103048) * C5867 +
            (C103047 + C103046 + C103045 + C103044) * C5866 +
            (C63224 * C141384 + C62874 * C94103 +
             (C55527 * C277 + C141216 * C580) * C93949 +
             (C55527 * C109 + C141216 * C115) * C94102) *
                C5865) *
               C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47713 * C108 + C47707 * C114 + C47715 * C109 + C47708 * C115 +
             C47717 * C110 + C47709 * C116) *
                C94102 +
            (C47713 * C276 + C47707 * C579 + C47715 * C277 + C47708 * C580 +
             C47717 * C278 + C47709 * C581) *
                C93949 +
            (C47713 * C1601 + C47707 * C1606 + C47715 * C1600 + C47708 * C1605 +
             C47717 * C1599 + C47709 * C1604) *
                C94103 +
            (C47713 * C1784 + C47707 * C2126 + C47715 * C1783 + C47708 * C2125 +
             C47717 * C1782 + C47709 * C2124) *
                C141384) *
               C141309 * C141294 * C816 -
           ((C52831 + C52832 + C52833) * C141384 +
            (C52522 + C52523 + C52524) * C94103 +
            (C49300 + C49299 + C49298) * C93949 +
            (C48946 + C48945 + C48944) * C94102) *
               C141309 * C141294 * C141485) *
              C818 +
          (((C48950 + C48951 + C48952) * C94102 +
            (C49301 + C49302 + C49303) * C93949 +
            (C47713 * C3491 + C47707 * C3495 + C47715 * C3492 + C47708 * C3496 +
             C47717 * C3493 + C47709 * C3497) *
                C94103 +
            (C47713 * C3647 + C47707 * C3935 + C47715 * C3648 + C47708 * C3936 +
             C47717 * C3649 + C47709 * C3937) *
                C141384) *
               C141309 * C141294 * C141485 -
           ((C47717 * C1781 + C47709 * C2123 + C47715 * C1782 + C47708 * C2124 +
             C47713 * C1783 + C47707 * C2125) *
                C141384 +
            (C47717 * C1598 + C47709 * C1603 + C47715 * C1599 + C47708 * C1604 +
             C47713 * C1600 + C47707 * C1605) *
                C94103 +
            (C47717 * C279 + C47709 * C582 + C47715 * C278 + C47708 * C581 +
             C47713 * C277 + C47707 * C580) *
                C93949 +
            (C47717 * C111 + C47709 * C117 + C47715 * C110 + C47708 * C116 +
             C47713 * C109 + C47707 * C115) *
                C94102) *
               C141309 * C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C55527 * C108 + C141216 * C114) * C109462 +
            (C55527 * C276 + C141216 * C579) * C109357 + C62870 * C109463 +
            C63222 * C109358 + C62872 * C109464 + C63223 * C109359 +
            C68191 * C109465 + C68436 * C109360) *
               C141309 * C141294 * C816 -
           (C65860 * C109360 + C65524 * C109465 + C62177 * C109359 +
            C61849 * C109464 + C58929 * C109358 + C58709 * C109463 +
            C56535 * C109357 + C56299 * C109462) *
               C141309 * C141294 * C141485) *
              C818 +
          ((C56305 * C109462 + C56538 * C109357 + C61851 * C109463 +
            C62178 * C109358 + C61853 * C109464 + C62179 * C109359 +
            (C55527 * C18583 + C141216 * C18585) * C109465 +
            (C55527 * C18821 + C141216 * C19251) * C109360) *
               C141309 * C141294 * C141485 -
           ((C55527 * C16150 + C141216 * C16658) * C109360 +
            (C55527 * C15861 + C141216 * C15864) * C109465 + C63225 * C109359 +
            C62876 * C109464 + C63224 * C109358 + C62874 * C109463 +
            (C55527 * C277 + C141216 * C580) * C109357 +
            (C55527 * C109 + C141216 * C115) * C109462) *
               C141309 * C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q));
    d2eezy[109] +=
        (-std::pow(Pi, 2.5) *
         ((((C5964 * C108 + C5865 * C189 + C5965 * C823 + C5866 * C912 +
             C5966 * C2960 + C5867 * C3026) *
                C94102 +
            (C5964 * C276 + C5865 * C635 + C5965 * C1006 + C5866 * C1419 +
             C5966 * C3084 + C5867 * C3362) *
                C93949 +
            (C5964 * C1601 + C5865 * C1690 + C5965 * C3490 + C5866 * C3572 +
             C5966 * C7887 + C5867 * C8006) *
                C94103 +
            (C5964 * C1784 + C5865 * C2197 + C5965 * C3646 + C5866 * C4004 +
             C5966 * C8128 + C5867 * C8684) *
                C141384) *
               C141216 * C141294 * C816 -
           ((C5966 * C10779 + C5867 * C11349 + C5965 * C8128 + C5866 * C8684 +
             C5964 * C3646 + C5865 * C4004) *
                C141384 +
            (C5966 * C10551 + C5867 * C10677 + C5965 * C7887 + C5866 * C8006 +
             C5964 * C3490 + C5865 * C3572) *
                C94103 +
            (C5966 * C7002 + C5867 * C7655 + C5965 * C3084 + C5866 * C3362 +
             C5964 * C1006 + C5865 * C1419) *
                C93949 +
            (C5966 * C6729 + C5867 * C6880 + C5965 * C2960 + C5866 * C3026 +
             C5964 * C823 + C5865 * C912) *
                C94102) *
               C141216 * C141294 * C141485) *
              C818 +
          (((C6903 + C6902 + C6901) * C94102 +
            (C7666 + C7665 + C7664) * C93949 +
            (C5964 * C3491 + C5865 * C3573 + C5965 * C7886 + C5866 * C8005 +
             C5966 * C10552 + C5867 * C10678) *
                C94103 +
            (C5964 * C3647 + C5865 * C4005 + C5965 * C8127 + C5866 * C8683 +
             C5966 * C10780 + C5867 * C11350) *
                C141384) *
               C141216 * C141294 * C141485 -
           ((C8693 + C8694 + C8695) * C141384 +
            (C8027 + C8028 + C8029) * C94103 +
            (C6537 + C6536 + C6535) * C93949 +
            (C5994 + C5993 + C5992) * C94102) *
               C141216 * C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141309 * C189) * C94102 +
             (C188 * C276 + C141309 * C635) * C93949 + C16043 * C94103 +
             C16798 * C141384) *
                C47707 +
            (C94535 + C94536 + C94537 + C94538) * C47708 + C94549 * C47709) *
               C141294 * C816 -
           ((C95488 + C95489 + C95490 + C95491) * C47709 +
            (C95492 + C95493 + C95494 + C95495) * C47708 +
            (C19363 * C141384 + C18715 * C94103 +
             (C188 * C1006 + C141309 * C1419) * C93949 +
             (C188 * C823 + C141309 * C912) * C94102) *
                C47707) *
               C141294 * C141485) *
              C818 +
          (((C95495 + C95494 + C95493 + C95492) * C47707 +
            (C95491 + C95490 + C95489 + C95488) * C47708 +
            (C933 * C94102 + C1431 * C93949 +
             (C188 * C3493 + C141309 * C3575) * C94103 +
             (C188 * C3649 + C141309 * C4007) * C141384) *
                C47709) *
               C141294 * C141485 -
           ((C94543 + C94544 + C94545 + C94546) * C47709 +
            (C94542 + C94541 + C94540 + C94539) * C47708 +
            (C94538 + C94537 + C94536 + C94535) * C47707) *
               C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141309 * C189) * C109462 +
            (C188 * C276 + C141309 * C635) * C109357 + C16043 * C109463 +
            C16798 * C109358 + C16045 * C109464 + C16799 * C109359 +
            C21415 * C109465 + C21913 * C109360) *
               C141216 * C141294 * C816 -
           ((C188 * C18820 + C141309 * C19356) * C109360 +
            (C188 * C18582 + C141309 * C18698) * C109465 + C19364 * C109359 +
            C18717 * C109464 + C19363 * C109358 + C18715 * C109463 +
            (C188 * C1006 + C141309 * C1419) * C109357 +
            (C188 * C823 + C141309 * C912) * C109462) *
               C141216 * C141294 * C141485) *
              C818 +
          ((C937 * C109462 + C1433 * C109357 + C14993 * C109463 +
            C15638 * C109358 + C14991 * C109464 + C15637 * C109359 +
            (C188 * C18583 + C141309 * C18699) * C109465 +
            (C188 * C18821 + C141309 * C19357) * C109360) *
               C141216 * C141294 * C141485 -
           (C16800 * C109360 + C16048 * C109465 + C14656 * C109359 +
            C14127 * C109464 + C2211 * C109358 + C1715 * C109463 +
            C654 * C109357 + C218 * C109462) *
               C141216 * C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q));
    d2eezz[109] +=
        (-std::pow(Pi, 2.5) *
         ((((C94623 * C108 + C94626 + C94626 + C93949 * C714 + C94624 * C1601 +
             C94627 + C94627 + C141384 * C2283) *
                C5865 +
            (C103276 + C103277) * C5866 + (C103278 + C103279) * C5867) *
               C141216 * C141294 * C816 -
           ((C94624 * C10551 + C103256 + C103256 + C141384 * C11449 +
             C94623 * C6729 + C103257 + C103257 + C93949 * C7765) *
                C5867 +
            (C103279 + C103278) * C5866 + (C103277 + C103276) * C5865) *
               C141216 * C141294 * C141485) *
              C818 +
          (((C95621 + C95620) * C5865 + (C103280 + C103281) * C5866 +
            (C94623 * C6728 + C103262 + C103262 + C93949 * C7764 +
             C94624 * C10552 + C103263 + C103263 + C141384 * C11450) *
                C5867) *
               C141216 * C141294 * C141485 -
           ((C103281 + C103280) * C5867 + (C95620 + C95621) * C5866 +
            (C94661 + C94660) * C5865) *
               C141216 * C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C94623 * C108 + C94626 + C94626 + C93949 * C714 + C94624 * C1601 +
             C94627 + C94627 + C141384 * C2283) *
                C141309 * C47707 +
            (C94660 + C94661) * C141309 * C47708 + C94667 * C47709) *
               C141294 * C816 -
           ((C95618 + C95619) * C141309 * C47709 +
            (C95620 + C95621) * C141309 * C47708 +
            (C94624 * C3490 + C95606 + C95606 + C141384 * C4074 +
             C94623 * C823 + C95607 + C95607 + C93949 * C1505) *
                C141309 * C47707) *
               C141294 * C141485) *
              C818 +
          (((C95621 + C95620) * C141309 * C47707 +
            (C95619 + C95618) * C141309 * C47708 +
            (C94623 * C820 + C95608 + C95608 + C93949 * C1502 + C94624 * C3493 +
             C95609 + C95609 + C141384 * C4077) *
                C141309 * C47709) *
               C141294 * C141485 -
           ((C94664 + C94665) * C141309 * C47709 +
            (C94663 + C94662) * C141309 * C47708 +
            (C94661 + C94660) * C141309 * C47707) *
               C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C109766 * C108 + C109771 + C109771 + C109357 * C714 +
            C109767 * C1601 + C109772 + C109772 + C109358 * C2283 +
            C109768 * C5325 + C109773 + C109773 + C109359 * C5781 +
            C109769 * C15862 + C109774 + C109774 + C109360 * C16900) *
               C141309 * C141216 * C141294 * C816 -
           (C109769 * C18582 + C110377 + C110377 + C109360 * C19462 +
            C109768 * C13301 + C110378 + C110378 + C109359 * C13953 +
            C109767 * C3490 + C110379 + C110379 + C109358 * C4074 +
            C109766 * C823 + C110380 + C110380 + C109357 * C1505) *
               C141309 * C141216 * C141294 * C141485) *
              C818 +
          ((C109766 * C822 + C110381 + C110381 + C109357 * C1504 +
            C109767 * C3491 + C110382 + C110382 + C109358 * C4075 +
            C109768 * C13302 + C110383 + C110383 + C109359 * C13955 +
            C109769 * C18583 + C110384 + C110384 + C109360 * C19463) *
               C141309 * C141216 * C141294 * C141485 -
           (C109769 * C15861 + C109775 + C109775 + C109360 * C16899 +
            C109768 * C5326 + C109776 + C109776 + C109359 * C5782 +
            C109767 * C1600 + C109777 + C109777 + C109358 * C2282 +
            C109766 * C109 + C109778 + C109778 + C109357 * C715) *
               C141309 * C141216 * C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q));
    d2eexx[110] +=
        (-std::pow(Pi, 2.5) *
         (((((C55526 * C108 + C55529 + C55529 + C141216 * C120) * C93949 +
             C62512 * C141384) *
                C5865 +
            (C102386 + C102387) * C5866 + (C102388 + C102389) * C5867) *
               C1596 -
           ((C64402 * C141384 + C58472 * C93949) * C5867 +
            (C61519 * C141384 + C58473 * C93949) * C5866 +
            (C62513 * C141384 + C62512 * C93949) * C5865) *
               C141487) *
              C141277 * C818 +
          (((C62514 * C93949 + C62515 * C141384) * C5865 +
            (C61520 * C93949 + C61521 * C141384) * C5866 +
            (C87073 * C93949 +
             (C55526 * C13304 + C61512 + C61512 + C141216 * C13312) * C141384) *
                C5867) *
               C141487 -
           ((C102393 + C102392) * C5867 + (C102391 + C102390) * C5866 +
            (C62514 * C141384 +
             (C55526 * C109 + C55536 + C55536 + C141216 * C121) * C93949) *
                C5865) *
               C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47712 * C108 + C47719 + C47719 + C47707 * C120 + C47714 * C109 +
             C47720 + C47720 + C47708 * C121 + C47716 * C110 + C47721 + C47721 +
             C47709 * C122) *
                C93949 +
            (C95747 + C95748 + C95749) * C141384) *
               C141309 * C1596 -
           ((C47716 * C5327 + C54870 + C54870 + C47709 * C5335 +
             C47714 * C5326 + C54869 + C54869 + C47708 * C5334 +
             C47712 * C5325 + C54868 + C54868 + C47707 * C5333) *
                C141384 +
            (C95749 + C95748 + C95747) * C93949) *
               C141309 * C141487) *
              C141277 * C818 +
          (((C95750 + C95751 + C95752) * C93949 +
            (C47712 * C5326 + C95732 + C95732 + C47707 * C5334 +
             C47714 * C5327 + C95733 + C95733 + C47708 * C5335 +
             C47716 * C5328 + C95734 + C95734 + C47709 * C5336) *
                C141384) *
               C141309 * C141487 -
           ((C95752 + C95751 + C95750) * C141384 +
            (C47716 * C111 + C47728 + C47728 + C47709 * C123 + C47714 * C110 +
             C47729 + C47729 + C47708 * C122 + C47712 * C109 + C47730 + C47730 +
             C47707 * C121) *
                C93949) *
               C141309 * C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C55526 * C108 + C55529 + C55529 + C141216 * C120) * C109357 +
            C62512 * C109358 + C62513 * C109359 + C67937 * C109360) *
               C141309 * C1596 -
           ((C55526 * C21308 + C67933 + C67933 + C141216 * C21312) * C109360 +
            C67937 * C109359 + C62513 * C109358 + C62512 * C109357) *
               C141309 * C141487) *
              C141277 * C818 +
          ((C62514 * C109357 + C62515 * C109358 + C110456 * C109359 +
            (C55526 * C21309 + C110453 + C110453 + C141216 * C21313) *
                C109360) *
               C141309 * C141487 -
           (C110456 * C109360 + C62515 * C109359 + C62514 * C109358 +
            (C55526 * C109 + C55536 + C55536 + C141216 * C121) * C109357) *
               C141309 * C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eexy[110] +=
        (-std::pow(Pi, 2.5) *
         (((((C5964 * C108 + C5865 * C189 + C5965 * C823 + C5866 * C912 +
              C5966 * C2960 + C5867 * C3026) *
                 C55527 +
             (C5964 * C114 + C5865 * C195 + C5965 * C828 + C5866 * C917 +
              C5966 * C2964 + C5867 * C3030) *
                 C141216) *
                C93949 +
            ((C103490 + C103491 + C103492) * C55527 +
             (C103493 + C103494 + C103495) * C141216) *
                C141384) *
               C1596 -
           (((C5966 * C13307 + C5867 * C13398 + C5965 * C13305 +
              C5866 * C13397 + C5964 * C5329 + C5865 * C5395) *
                 C141216 +
             (C5966 * C13303 + C5867 * C13394 + C5965 * C13301 +
              C5866 * C13393 + C5964 * C5325 + C5865 * C5391) *
                 C55527) *
                C141384 +
            ((C103495 + C103494 + C103493) * C141216 +
             (C103492 + C103491 + C103490) * C55527) *
                C93949) *
               C141487) *
              C141277 * C818 +
          ((((C8029 + C8028 + C8027) * C55527 +
             (C8026 + C8025 + C8024) * C141216) *
                C93949 +
            ((C5964 * C5326 + C5865 * C5392 + C5965 * C13302 + C5866 * C13395 +
              C5966 * C13304 + C5867 * C13396) *
                 C55527 +
             (C5964 * C5330 + C5865 * C5396 + C5965 * C13306 + C5866 * C13399 +
              C5966 * C13308 + C5867 * C13400) *
                 C141216) *
                C141384) *
               C141487 -
           (((C8024 + C8025 + C8026) * C141216 +
             (C8027 + C8028 + C8029) * C55527) *
                C141384 +
            ((C5997 + C5996 + C5995) * C141216 +
             (C5994 + C5993 + C5992) * C55527) *
                C93949) *
               C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141309 * C189) * C47713 +
             (C188 * C114 + C141309 * C195) * C47707 + C218 * C47715 +
             C219 * C47708 + C220 * C47717 + C221 * C47709) *
                C93949 +
            (C95851 + C95852 + C95853 + C95854 + C95855 + C95856) * C141384) *
               C1596 -
           ((C14129 * C47709 + C14130 * C47717 + C14128 * C47708 +
             C14127 * C47715 + C16046 * C47707 + C16045 * C47713) *
                C141384 +
            (C95856 + C95855 + C95854 + C95853 + C95852 + C95851) * C93949) *
               C141487) *
              C141277 * C818 +
          (((C95857 + C95858 + C95859 + C95860 + C95861 + C95862) * C93949 +
            (C14127 * C47713 + C14128 * C47707 + C14130 * C47715 +
             C14129 * C47708 + (C188 * C5328 + C141309 * C5394) * C47717 +
             (C188 * C5332 + C141309 * C5398) * C47709) *
                C141384) *
               C141487 -
           ((C95862 + C95861 + C95860 + C95859 + C95858 + C95857) * C141384 +
            (C223 * C47709 + C222 * C47717 + C221 * C47708 + C220 * C47715 +
             C219 * C47707 + C218 * C47713) *
                C93949) *
               C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141309 * C189) * C55527 +
             (C188 * C114 + C141309 * C195) * C141216) *
                C109357 +
            (C110523 + C110524) * C109358 + (C110525 + C110526) * C109359 +
            (C110527 + C110528) * C109360) *
               C1596 -
           (((C188 * C21310 + C141309 * C21403) * C141216 +
             (C188 * C21308 + C141309 * C21401) * C55527) *
                C109360 +
            (C110528 + C110527) * C109359 + (C110526 + C110525) * C109358 +
            (C110524 + C110523) * C109357) *
               C141487) *
              C141277 * C818 +
          (((C110529 + C110530) * C109357 + (C110531 + C110532) * C109358 +
            (C110533 + C110534) * C109359 +
            ((C188 * C21309 + C141309 * C21402) * C55527 +
             (C188 * C21311 + C141309 * C21404) * C141216) *
                C109360) *
               C141487 -
           ((C110534 + C110533) * C109360 + (C110532 + C110531) * C109359 +
            (C110530 + C110529) * C109358 +
            (C219 * C141216 + C218 * C55527) * C109357) *
               C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eexz[110] +=
        (-std::pow(Pi, 2.5) *
         (((((C94102 * C108 + C93949 * C276 + C94103 * C1601 +
              C141384 * C1784) *
                 C55527 +
             (C94102 * C114 + C93949 * C282 + C94103 * C1606 +
              C141384 * C1789) *
                 C141216) *
                C5865 +
            ((C102614 + C102615) * C55527 + (C102616 + C102617) * C141216) *
                C5866 +
            ((C102618 + C102619) * C55527 + (C102620 + C102621) * C141216) *
                C5867) *
               C1596 -
           (((C94103 * C13307 + C141384 * C13481 + C94102 * C7890 +
              C93949 * C8131) *
                 C141216 +
             (C94103 * C13303 + C141384 * C13477 + C94102 * C7887 +
              C93949 * C8128) *
                 C55527) *
                C5867 +
            ((C94103 * C13305 + C141384 * C13479 + C94102 * C3494 +
              C93949 * C3650) *
                 C141216 +
             (C94103 * C13301 + C141384 * C13475 + C94102 * C3490 +
              C93949 * C3646) *
                 C55527) *
                C5866 +
            ((C94103 * C5329 + C141384 * C5453 + C94102 * C1606 +
              C93949 * C1789) *
                 C141216 +
             (C94103 * C5325 + C141384 * C5449 + C94102 * C1601 +
              C93949 * C1784) *
                 C55527) *
                C5865) *
               C141487) *
              C141277 * C818 +
          ((((C95984 + C95983) * C55527 + (C95982 + C95981) * C141216) * C5865 +
            ((C94102 * C3491 + C93949 * C3647 + C94103 * C13302 +
              C141384 * C13476) *
                 C55527 +
             (C94102 * C3495 + C93949 * C3651 + C94103 * C13306 +
              C141384 * C13480) *
                 C141216) *
                C5866 +
            ((C94102 * C7886 + C93949 * C8127 + C94103 * C13304 +
              C141384 * C13478) *
                 C55527 +
             (C94102 * C7889 + C93949 * C8130 + C94103 * C13308 +
              C141384 * C13482) *
                 C141216) *
                C5867) *
               C141487 -
           (((C102625 + C102624) * C141216 + (C102623 + C102622) * C55527) *
                C5867 +
            ((C94982 + C94983) * C141216 + (C94984 + C94985) * C55527) * C5866 +
            ((C94132 + C94131) * C141216 + (C94130 + C94129) * C55527) *
                C5865) *
               C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C94102 * C108 + C93949 * C276 + C94103 * C1601 + C141384 * C1784) *
                C47713 +
            (C94102 * C114 + C93949 * C282 + C94103 * C1606 + C141384 * C1789) *
                C47707 +
            (C94129 + C94130) * C47715 + (C94131 + C94132) * C47708 +
            C94141 * C47717 + C94142 * C47709) *
               C141309 * C1596 -
           ((C95977 + C95978) * C47709 + (C95979 + C95980) * C47717 +
            (C95981 + C95982) * C47708 + (C95983 + C95984) * C47715 +
            (C94103 * C5329 + C141384 * C5453 + C94102 * C1606 +
             C93949 * C1789) *
                C47707 +
            (C94103 * C5325 + C141384 * C5449 + C94102 * C1601 +
             C93949 * C1784) *
                C47713) *
               C141309 * C141487) *
              C141277 * C818 +
          (((C95984 + C95983) * C47713 + (C95982 + C95981) * C47707 +
            (C95980 + C95979) * C47715 + (C95978 + C95977) * C47708 +
            (C94102 * C1598 + C93949 * C1781 + C94103 * C5328 +
             C141384 * C5452) *
                C47717 +
            (C94102 * C1603 + C93949 * C1786 + C94103 * C5332 +
             C141384 * C5456) *
                C47709) *
               C141309 * C141487 -
           ((C94137 + C94138) * C47709 + (C94139 + C94140) * C47717 +
            (C94136 + C94135) * C47708 + (C94134 + C94133) * C47715 +
            (C94132 + C94131) * C47707 + (C94130 + C94129) * C47713) *
               C141309 * C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C109462 * C108 + C109357 * C276 + C109463 * C1601 +
             C109358 * C1784 + C109464 * C5325 + C109359 * C5449 +
             C109465 * C15862 + C109360 * C16151) *
                C55527 +
            (C109462 * C114 + C109357 * C282 + C109463 * C1606 +
             C109358 * C1789 + C109464 * C5329 + C109359 * C5453 +
             C109465 * C15865 + C109360 * C16154) *
                C141216) *
               C141309 * C1596 -
           ((C109465 * C21310 + C109360 * C21494 + C109464 * C15865 +
             C109359 * C16154 + C109463 * C5329 + C109358 * C5453 +
             C109462 * C1606 + C109357 * C1789) *
                C141216 +
            (C109465 * C21308 + C109360 * C21492 + C109464 * C15862 +
             C109359 * C16151 + C109463 * C5325 + C109358 * C5449 +
             C109462 * C1601 + C109357 * C1784) *
                C55527) *
               C141309 * C141487) *
              C141277 * C818 +
          (((C109462 * C1600 + C109357 * C1783 + C109463 * C5326 +
             C109358 * C5450 + C109464 * C15861 + C109359 * C16150 +
             C109465 * C21309 + C109360 * C21493) *
                C55527 +
            (C109462 * C1605 + C109357 * C1788 + C109463 * C5330 +
             C109358 * C5454 + C109464 * C15864 + C109359 * C16153 +
             C109465 * C21311 + C109360 * C21495) *
                C141216) *
               C141309 * C141487 -
           ((C109465 * C15864 + C109360 * C16153 + C109464 * C5330 +
             C109359 * C5454 + C109463 * C1605 + C109358 * C1788 +
             C109462 * C115 + C109357 * C283) *
                C141216 +
            (C109465 * C15861 + C109360 * C16150 + C109464 * C5326 +
             C109359 * C5450 + C109463 * C1600 + C109358 * C1783 +
             C109462 * C109 + C109357 * C277) *
                C55527) *
               C141309 * C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[110] +=
        (-std::pow(Pi, 2.5) *
         (((((C55527 * C108 + C141216 * C114) * C5964 +
             (C55527 * C189 + C141216 * C362) * C5865 + C56299 * C5965 +
             C56300 * C5866 + C56301 * C5966 + C56302 * C5867) *
                C93949 +
            (C103692 + C103693 + C103694 + C103695 + C103696 + C103697) *
                C141384) *
               C1596 -
           ((C64648 * C5867 + C64649 * C5966 + C61850 * C5866 + C61849 * C5965 +
             C62873 * C5865 + C62872 * C5964) *
                C141384 +
            (C103697 + C103696 + C103695 + C103694 + C103693 + C103692) *
                C93949) *
               C141487) *
              C141277 * C818 +
          (((C103698 + C103699 + C103700 + C103701 + C103702 + C103703) *
                C93949 +
            (C62876 * C5964 + C62877 * C5865 + C61853 * C5965 + C61854 * C5866 +
             (C55527 * C13304 + C141216 * C13308) * C5966 +
             (C55527 * C13396 + C141216 * C13560) * C5867) *
                C141384) *
               C141487 -
           ((C103703 + C103702 + C103701 + C103700 + C103699 + C103698) *
                C141384 +
            (C56308 * C5867 + C56307 * C5966 + C56306 * C5866 + C56305 * C5965 +
             (C55527 * C190 + C141216 * C363) * C5865 +
             (C55527 * C109 + C141216 * C115) * C5964) *
                C93949) *
               C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47713 * C108 + C47707 * C114 + C47715 * C109 + C47708 * C115 +
              C47717 * C110 + C47709 * C116) *
                 C188 +
             (C47713 * C189 + C47707 * C362 + C47715 * C190 + C47708 * C363 +
              C47717 * C191 + C47709 * C364) *
                 C141309) *
                C93949 +
            ((C96107 + C96108 + C96109) * C188 +
             (C96110 + C96111 + C96112) * C141309) *
                C141384) *
               C1596 -
           (((C47717 * C5393 + C47709 * C5509 + C47715 * C5392 +
              C47708 * C5508 + C47713 * C5391 + C47707 * C5507) *
                 C141309 +
             (C47717 * C5327 + C47709 * C5331 + C47715 * C5326 +
              C47708 * C5330 + C47713 * C5325 + C47707 * C5329) *
                 C188) *
                C141384 +
            ((C96112 + C96111 + C96110) * C141309 +
             (C96109 + C96108 + C96107) * C188) *
                C93949) *
               C141487) *
              C141277 * C818 +
          ((((C96113 + C96114 + C96115) * C188 +
             (C96116 + C96117 + C96118) * C141309) *
                C93949 +
            ((C47713 * C5326 + C47707 * C5330 + C47715 * C5327 +
              C47708 * C5331 + C47717 * C5328 + C47709 * C5332) *
                 C188 +
             (C47713 * C5392 + C47707 * C5508 + C47715 * C5393 +
              C47708 * C5509 + C47717 * C5394 + C47709 * C5510) *
                 C141309) *
                C141384) *
               C141487 -
           (((C96118 + C96117 + C96116) * C141309 +
             (C96115 + C96114 + C96113) * C188) *
                C141384 +
            ((C47717 * C192 + C47709 * C365 + C47715 * C191 + C47708 * C364 +
              C47713 * C190 + C47707 * C363) *
                 C141309 +
             (C47717 * C111 + C47709 * C117 + C47715 * C110 + C47708 * C116 +
              C47713 * C109 + C47707 * C115) *
                 C188) *
                C93949) *
               C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C55527 * C108 + C141216 * C114) * C188 +
             (C55527 * C189 + C141216 * C362) * C141309) *
                C109357 +
            (C110667 + C110668) * C109358 + (C110669 + C110670) * C109359 +
            (C110671 + C110672) * C109360) *
               C1596 -
           (((C55527 * C21401 + C141216 * C21570) * C141309 +
             (C55527 * C21308 + C141216 * C21310) * C188) *
                C109360 +
            (C110672 + C110671) * C109359 + (C110670 + C110669) * C109358 +
            (C110668 + C110667) * C109357) *
               C141487) *
              C141277 * C818 +
          (((C110673 + C110674) * C109357 + (C110675 + C110676) * C109358 +
            (C110683 + C110684) * C109359 +
            ((C55527 * C21309 + C141216 * C21311) * C188 +
             (C55527 * C21402 + C141216 * C21571) * C141309) *
                C109360) *
               C141487 -
           ((C110684 + C110683) * C109360 + (C110676 + C110675) * C109359 +
            (C110674 + C110673) * C109358 +
            ((C55527 * C190 + C141216 * C363) * C141309 +
             (C55527 * C109 + C141216 * C115) * C188) *
                C109357) *
               C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[110] +=
        (-std::pow(Pi, 2.5) *
         ((((C6237 * C108 + C6241 + C6241 + C5865 * C419 + C6238 * C823 +
             C6242 + C6242 + C5866 * C1171 + C6239 * C2960 + C6243 + C6243 +
             C5867 * C3196) *
                C141216 * C93949 +
            (C103814 + C103815 + C103816) * C141216 * C141384) *
               C1596 -
           ((C6239 * C13303 + C13642 + C13642 + C5867 * C13636 +
             C6238 * C13301 + C13641 + C13641 + C5866 * C13635 + C6237 * C5325 +
             C13640 + C13640 + C5865 * C5561) *
                C141216 * C141384 +
            (C103816 + C103815 + C103814) * C141216 * C93949) *
               C141487) *
              C141277 * C818 +
          (((C8371 + C8370 + C8369) * C141216 * C93949 +
            (C6237 * C5326 + C13643 + C13643 + C5865 * C5562 + C6238 * C13302 +
             C13644 + C13644 + C5866 * C13637 + C6239 * C13304 + C13645 +
             C13645 + C5867 * C13638) *
                C141216 * C141384) *
               C141487 -
           ((C8369 + C8370 + C8371) * C141216 * C141384 +
            (C6279 + C6278 + C6277) * C141216 * C93949) *
               C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C418 * C108 + C426 + C426 + C141309 * C419) * C47707 +
             C448 * C47708 + C449 * C47709) *
                C93949 +
            (C96217 + C96218 + C96219) * C141384) *
               C1596 -
           ((C14401 * C47709 + C14400 * C47708 + C16447 * C47707) * C141384 +
            (C96219 + C96218 + C96217) * C93949) *
               C141487) *
              C141277 * C818 +
          (((C96220 + C96221 + C96222) * C93949 +
            (C14400 * C47707 + C14401 * C47708 +
             (C418 * C5328 + C5569 + C5569 + C141309 * C5564) * C47709) *
                C141384) *
               C141487 -
           ((C96222 + C96221 + C96220) * C141384 +
            (C450 * C47709 + C449 * C47708 + C448 * C47707) * C93949) *
               C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C418 * C108 + C426 + C426 + C141309 * C419) * C141216 * C109357 +
            C110751 * C109358 + C110752 * C109359 + C110753 * C109360) *
               C1596 -
           ((C418 * C21308 + C21670 + C21670 + C141309 * C21663) * C141216 *
                C109360 +
            C110753 * C109359 + C110752 * C109358 + C110751 * C109357) *
               C141487) *
              C141277 * C818 +
          ((C110754 * C109357 + C110755 * C109358 + C110756 * C109359 +
            (C418 * C21309 + C21671 + C21671 + C141309 * C21664) * C141216 *
                C109360) *
               C141487 -
           (C110756 * C109360 + C110755 * C109359 + C110754 * C109358 +
            C448 * C141216 * C109357) *
               C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[110] +=
        (-std::pow(Pi, 2.5) *
         ((((C94102 * C108 + C93949 * C276 + C94103 * C1601 + C141384 * C1784) *
                C5964 +
            (C94102 * C189 + C93949 * C501 + C94103 * C1690 + C141384 * C2040) *
                C5865 +
            (C102614 + C102615) * C5965 + (C102932 + C102933) * C5866 +
            (C102618 + C102619) * C5966 + (C102934 + C102935) * C5867) *
               C141216 * C1596 -
           ((C94103 * C13394 + C141384 * C13720 + C94102 * C8006 +
             C93949 * C8470) *
                C5867 +
            (C94103 * C13303 + C141384 * C13477 + C94102 * C7887 +
             C93949 * C8128) *
                C5966 +
            (C94103 * C13393 + C141384 * C13719 + C94102 * C3572 +
             C93949 * C3864) *
                C5866 +
            (C94103 * C13301 + C141384 * C13475 + C94102 * C3490 +
             C93949 * C3646) *
                C5965 +
            (C94103 * C5391 + C141384 * C5619 + C94102 * C1690 +
             C93949 * C2040) *
                C5865 +
            (C94103 * C5325 + C141384 * C5449 + C94102 * C1601 +
             C93949 * C1784) *
                C5964) *
               C141216 * C141487) *
              C141277 * C818 +
          (((C95984 + C95983) * C5964 + (C96332 + C96331) * C5865 +
            (C94102 * C3491 + C93949 * C3647 + C94103 * C13302 +
             C141384 * C13476) *
                C5965 +
            (C94102 * C3573 + C93949 * C3865 + C94103 * C13395 +
             C141384 * C13721) *
                C5866 +
            (C94102 * C7886 + C93949 * C8127 + C94103 * C13304 +
             C141384 * C13478) *
                C5966 +
            (C94102 * C8005 + C93949 * C8469 + C94103 * C13396 +
             C141384 * C13722) *
                C5867) *
               C141216 * C141487 -
           ((C102937 + C102936) * C5867 + (C102623 + C102622) * C5966 +
            (C95290 + C95291) * C5866 + (C94984 + C94985) * C5965 +
            (C94379 + C94378) * C5865 + (C94130 + C94129) * C5964) *
               C141216 * C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C94102 * C108 + C93949 * C276 + C94103 * C1601 +
              C141384 * C1784) *
                 C188 +
             (C94102 * C189 + C93949 * C501 + C94103 * C1690 +
              C141384 * C2040) *
                 C141309) *
                C47707 +
            ((C94129 + C94130) * C188 + (C94378 + C94379) * C141309) * C47708 +
            C94386 * C47709) *
               C1596 -
           (((C96329 + C96330) * C141309 + (C95979 + C95980) * C188) * C47709 +
            ((C96331 + C96332) * C141309 + (C95983 + C95984) * C188) * C47708 +
            ((C94103 * C5391 + C141384 * C5619 + C94102 * C1690 +
              C93949 * C2040) *
                 C141309 +
             (C94103 * C5325 + C141384 * C5449 + C94102 * C1601 +
              C93949 * C1784) *
                 C188) *
                C47707) *
               C141487) *
              C141277 * C818 +
          ((((C95984 + C95983) * C188 + (C96332 + C96331) * C141309) * C47707 +
            ((C95980 + C95979) * C188 + (C96330 + C96329) * C141309) * C47708 +
            ((C94102 * C1598 + C93949 * C1781 + C94103 * C5328 +
              C141384 * C5452) *
                 C188 +
             (C94102 * C1687 + C93949 * C2037 + C94103 * C5394 +
              C141384 * C5622) *
                 C141309) *
                C47709) *
               C141487 -
           (((C94382 + C94383) * C141309 + (C94139 + C94140) * C188) * C47709 +
            ((C94381 + C94380) * C141309 + (C94134 + C94133) * C188) * C47708 +
            ((C94379 + C94378) * C141309 + (C94130 + C94129) * C188) * C47707) *
               C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C109462 * C108 + C109357 * C276 + C109463 * C1601 +
             C109358 * C1784 + C109464 * C5325 + C109359 * C5449 +
             C109465 * C15862 + C109360 * C16151) *
                C188 +
            (C109462 * C189 + C109357 * C501 + C109463 * C1690 +
             C109358 * C2040 + C109464 * C5391 + C109359 * C5619 +
             C109465 * C16013 + C109360 * C16549) *
                C141309) *
               C141216 * C1596 -
           ((C109465 * C21401 + C109360 * C21749 + C109464 * C16013 +
             C109359 * C16549 + C109463 * C5391 + C109358 * C5619 +
             C109462 * C1690 + C109357 * C2040) *
                C141309 +
            (C109465 * C21308 + C109360 * C21492 + C109464 * C15862 +
             C109359 * C16151 + C109463 * C5325 + C109358 * C5449 +
             C109462 * C1601 + C109357 * C1784) *
                C188) *
               C141216 * C141487) *
              C141277 * C818 +
          (((C109462 * C1600 + C109357 * C1783 + C109463 * C5326 +
             C109358 * C5450 + C109464 * C15861 + C109359 * C16150 +
             C109465 * C21309 + C109360 * C21493) *
                C188 +
            (C109462 * C1689 + C109357 * C2039 + C109463 * C5392 +
             C109358 * C5620 + C109464 * C16012 + C109359 * C16548 +
             C109465 * C21402 + C109360 * C21750) *
                C141309) *
               C141216 * C141487 -
           ((C109465 * C16012 + C109360 * C16548 + C109464 * C5392 +
             C109359 * C5620 + C109463 * C1689 + C109358 * C2039 +
             C109462 * C190 + C109357 * C502) *
                C141309 +
            (C109465 * C15861 + C109360 * C16150 + C109464 * C5326 +
             C109359 * C5450 + C109463 * C1600 + C109358 * C1783 +
             C109462 * C109 + C109357 * C277) *
                C188) *
               C141216 * C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eezx[110] +=
        (-std::pow(Pi, 2.5) *
         (((((C55527 * C108 + C141216 * C114) * C94102 +
             (C55527 * C276 + C141216 * C579) * C93949 + C62870 * C94103 +
             C63222 * C141384) *
                C5865 +
            (C103036 + C103037 + C103038 + C103039) * C5866 +
            (C103040 + C103041 + C103042 + C103043) * C5867) *
               C1596 -
           ((C64892 * C141384 + C64649 * C94103 + C58928 * C93949 +
             C58707 * C94102) *
                C5867 +
            (C62177 * C141384 + C61849 * C94103 + C58929 * C93949 +
             C58709 * C94102) *
                C5866 +
            (C63223 * C141384 + C62872 * C94103 + C63222 * C93949 +
             C62870 * C94102) *
                C5865) *
               C141487) *
              C141277 * C818 +
          (((C62874 * C94102 + C63224 * C93949 + C62876 * C94103 +
             C63225 * C141384) *
                C5865 +
            (C61851 * C94102 + C62178 * C93949 + C61853 * C94103 +
             C62179 * C141384) *
                C5866 +
            (C87373 * C94102 + C87686 * C93949 +
             (C55527 * C13304 + C141216 * C13308) * C94103 +
             (C55527 * C13478 + C141216 * C13800) * C141384) *
                C5867) *
               C141487 -
           ((C103051 + C103050 + C103049 + C103048) * C5867 +
            (C103047 + C103046 + C103045 + C103044) * C5866 +
            (C63224 * C141384 + C62874 * C94103 +
             (C55527 * C277 + C141216 * C580) * C93949 +
             (C55527 * C109 + C141216 * C115) * C94102) *
                C5865) *
               C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47713 * C108 + C47707 * C114 + C47715 * C109 + C47708 * C115 +
             C47717 * C110 + C47709 * C116) *
                C94102 +
            (C47713 * C276 + C47707 * C579 + C47715 * C277 + C47708 * C580 +
             C47717 * C278 + C47709 * C581) *
                C93949 +
            (C96107 + C96108 + C96109) * C94103 +
            (C96443 + C96444 + C96445) * C141384) *
               C141309 * C1596 -
           ((C47717 * C5451 + C47709 * C5675 + C47715 * C5450 + C47708 * C5674 +
             C47713 * C5449 + C47707 * C5673) *
                C141384 +
            (C47717 * C5327 + C47709 * C5331 + C47715 * C5326 + C47708 * C5330 +
             C47713 * C5325 + C47707 * C5329) *
                C94103 +
            (C96445 + C96444 + C96443) * C93949 +
            (C96109 + C96108 + C96107) * C94102) *
               C141309 * C141487) *
              C141277 * C818 +
          (((C96113 + C96114 + C96115) * C94102 +
            (C96446 + C96447 + C96448) * C93949 +
            (C47713 * C5326 + C47707 * C5330 + C47715 * C5327 + C47708 * C5331 +
             C47717 * C5328 + C47709 * C5332) *
                C94103 +
            (C47713 * C5450 + C47707 * C5674 + C47715 * C5451 + C47708 * C5675 +
             C47717 * C5452 + C47709 * C5676) *
                C141384) *
               C141309 * C141487 -
           ((C96448 + C96447 + C96446) * C141384 +
            (C96115 + C96114 + C96113) * C94103 +
            (C47717 * C279 + C47709 * C582 + C47715 * C278 + C47708 * C581 +
             C47713 * C277 + C47707 * C580) *
                C93949 +
            (C47717 * C111 + C47709 * C117 + C47715 * C110 + C47708 * C116 +
             C47713 * C109 + C47707 * C115) *
                C94102) *
               C141309 * C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C55527 * C108 + C141216 * C114) * C109462 +
            (C55527 * C276 + C141216 * C579) * C109357 + C62870 * C109463 +
            C63222 * C109358 + C62872 * C109464 + C63223 * C109359 +
            C68191 * C109465 + C68436 * C109360) *
               C141309 * C1596 -
           ((C55527 * C21492 + C141216 * C21825) * C109360 +
            (C55527 * C21308 + C141216 * C21310) * C109465 + C68436 * C109359 +
            C68191 * C109464 + C63223 * C109358 + C62872 * C109463 +
            C63222 * C109357 + C62870 * C109462) *
               C141309 * C141487) *
              C141277 * C818 +
          ((C62874 * C109462 + C63224 * C109357 + C62876 * C109463 +
            C63225 * C109358 + C110681 * C109464 + C110891 * C109359 +
            (C55527 * C21309 + C141216 * C21311) * C109465 +
            (C55527 * C21493 + C141216 * C21826) * C109360) *
               C141309 * C141487 -
           (C110891 * C109360 + C110681 * C109465 + C63225 * C109359 +
            C62876 * C109464 + C63224 * C109358 + C62874 * C109463 +
            (C55527 * C277 + C141216 * C580) * C109357 +
            (C55527 * C109 + C141216 * C115) * C109462) *
               C141309 * C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eezy[110] +=
        (-std::pow(Pi, 2.5) *
         ((((C5964 * C108 + C5865 * C189 + C5965 * C823 + C5866 * C912 +
             C5966 * C2960 + C5867 * C3026) *
                C94102 +
            (C5964 * C276 + C5865 * C635 + C5965 * C1006 + C5866 * C1419 +
             C5966 * C3084 + C5867 * C3362) *
                C93949 +
            (C103490 + C103491 + C103492) * C94103 +
            (C104117 + C104118 + C104119) * C141384) *
               C141216 * C1596 -
           ((C5966 * C13477 + C5867 * C13876 + C5965 * C13475 + C5866 * C13875 +
             C5964 * C5449 + C5865 * C5727) *
                C141384 +
            (C5966 * C13303 + C5867 * C13394 + C5965 * C13301 + C5866 * C13393 +
             C5964 * C5325 + C5865 * C5391) *
                C94103 +
            (C104119 + C104118 + C104117) * C93949 +
            (C103492 + C103491 + C103490) * C94102) *
               C141216 * C141487) *
              C141277 * C818 +
          (((C8029 + C8028 + C8027) * C94102 +
            (C8695 + C8694 + C8693) * C93949 +
            (C5964 * C5326 + C5865 * C5392 + C5965 * C13302 + C5866 * C13395 +
             C5966 * C13304 + C5867 * C13396) *
                C94103 +
            (C5964 * C5450 + C5865 * C5728 + C5965 * C13476 + C5866 * C13877 +
             C5966 * C13478 + C5867 * C13878) *
                C141384) *
               C141216 * C141487 -
           ((C8693 + C8694 + C8695) * C141384 +
            (C8027 + C8028 + C8029) * C94103 +
            (C6537 + C6536 + C6535) * C93949 +
            (C5994 + C5993 + C5992) * C94102) *
               C141216 * C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141309 * C189) * C94102 +
             (C188 * C276 + C141309 * C635) * C93949 + C16043 * C94103 +
             C16798 * C141384) *
                C47707 +
            (C94535 + C94536 + C94537 + C94538) * C47708 + C94549 * C47709) *
               C1596 -
           ((C96547 + C96548 + C96549 + C96550) * C47709 +
            (C96551 + C96552 + C96553 + C96554) * C47708 +
            (C16799 * C141384 + C16045 * C94103 + C16798 * C93949 +
             C16043 * C94102) *
                C47707) *
               C141487) *
              C141277 * C818 +
          (((C96554 + C96553 + C96552 + C96551) * C47707 +
            (C96550 + C96549 + C96548 + C96547) * C47708 +
            (C1711 * C94102 + C2209 * C93949 +
             (C188 * C5328 + C141309 * C5394) * C94103 +
             (C188 * C5452 + C141309 * C5730) * C141384) *
                C47709) *
               C141487 -
           ((C94543 + C94544 + C94545 + C94546) * C47709 +
            (C94542 + C94541 + C94540 + C94539) * C47708 +
            (C94538 + C94537 + C94536 + C94535) * C47707) *
               C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141309 * C189) * C109462 +
            (C188 * C276 + C141309 * C635) * C109357 + C16043 * C109463 +
            C16798 * C109358 + C16045 * C109464 + C16799 * C109359 +
            C21415 * C109465 + C21913 * C109360) *
               C141216 * C1596 -
           ((C188 * C21492 + C141309 * C21908) * C109360 +
            (C188 * C21308 + C141309 * C21401) * C109465 + C21913 * C109359 +
            C21415 * C109464 + C16799 * C109358 + C16045 * C109463 +
            C16798 * C109357 + C16043 * C109462) *
               C141216 * C141487) *
              C141277 * C818 +
          ((C1715 * C109462 + C2211 * C109357 + C14127 * C109463 +
            C14656 * C109358 + C16048 * C109464 + C16800 * C109359 +
            (C188 * C21309 + C141309 * C21402) * C109465 +
            (C188 * C21493 + C141309 * C21909) * C109360) *
               C141216 * C141487 -
           (C16800 * C109360 + C16048 * C109465 + C14656 * C109359 +
            C14127 * C109464 + C2211 * C109358 + C1715 * C109463 +
            C654 * C109357 + C218 * C109462) *
               C141216 * C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eezz[110] +=
        (-std::pow(Pi, 2.5) *
         ((((C94623 * C108 + C94626 + C94626 + C93949 * C714 + C94624 * C1601 +
             C94627 + C94627 + C141384 * C2283) *
                C5865 +
            (C103276 + C103277) * C5866 + (C103278 + C103279) * C5867) *
               C141216 * C1596 -
           ((C94624 * C13303 + C104218 + C104218 + C141384 * C13954 +
             C94623 * C7887 + C104219 + C104219 + C93949 * C8794) *
                C5867 +
            (C94624 * C13301 + C99127 + C99127 + C141384 * C13953 +
             C94623 * C3490 + C99126 + C99126 + C93949 * C4074) *
                C5866 +
            (C94624 * C5325 + C96665 + C96665 + C141384 * C5781 +
             C94623 * C1601 + C96666 + C96666 + C93949 * C2283) *
                C5865) *
               C141216 * C141487) *
              C141277 * C818 +
          (((C96680 + C96679) * C5865 +
            (C94623 * C3491 + C99128 + C99128 + C93949 * C4075 +
             C94624 * C13302 + C99129 + C99129 + C141384 * C13955) *
                C5866 +
            (C94623 * C7886 + C104220 + C104220 + C93949 * C8793 +
             C94624 * C13304 + C104221 + C104221 + C141384 * C13956) *
                C5867) *
               C141216 * C141487 -
           ((C103281 + C103280) * C5867 + (C95620 + C95621) * C5866 +
            (C94661 + C94660) * C5865) *
               C141216 * C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C94623 * C108 + C94626 + C94626 + C93949 * C714 + C94624 * C1601 +
             C94627 + C94627 + C141384 * C2283) *
                C141309 * C47707 +
            (C94660 + C94661) * C141309 * C47708 + C94667 * C47709) *
               C1596 -
           ((C96677 + C96678) * C141309 * C47709 +
            (C96679 + C96680) * C141309 * C47708 +
            (C94624 * C5325 + C96665 + C96665 + C141384 * C5781 +
             C94623 * C1601 + C96666 + C96666 + C93949 * C2283) *
                C141309 * C47707) *
               C141487) *
              C141277 * C818 +
          (((C96680 + C96679) * C141309 * C47707 +
            (C96678 + C96677) * C141309 * C47708 +
            (C94623 * C1598 + C96667 + C96667 + C93949 * C2280 +
             C94624 * C5328 + C96668 + C96668 + C141384 * C5784) *
                C141309 * C47709) *
               C141487 -
           ((C94664 + C94665) * C141309 * C47709 +
            (C94663 + C94662) * C141309 * C47708 +
            (C94661 + C94660) * C141309 * C47707) *
               C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C109766 * C108 + C109771 + C109771 + C109357 * C714 +
            C109767 * C1601 + C109772 + C109772 + C109358 * C2283 +
            C109768 * C5325 + C109773 + C109773 + C109359 * C5781 +
            C109769 * C15862 + C109774 + C109774 + C109360 * C16900) *
               C141309 * C141216 * C1596 -
           (C109769 * C21308 + C111024 + C111024 + C109360 * C21987 +
            C109768 * C15862 + C111025 + C111025 + C109359 * C16900 +
            C109767 * C5325 + C111026 + C111026 + C109358 * C5781 +
            C109766 * C1601 + C111027 + C111027 + C109357 * C2283) *
               C141309 * C141216 * C141487) *
              C141277 * C818 +
          ((C109766 * C1600 + C111028 + C111028 + C109357 * C2282 +
            C109767 * C5326 + C111029 + C111029 + C109358 * C5782 +
            C109768 * C15861 + C111030 + C111030 + C109359 * C16899 +
            C109769 * C21309 + C111031 + C111031 + C109360 * C21988) *
               C141309 * C141216 * C141487 -
           (C109769 * C15861 + C109775 + C109775 + C109360 * C16899 +
            C109768 * C5326 + C109776 + C109776 + C109359 * C5782 +
            C109767 * C1600 + C109777 + C109777 + C109358 * C2282 +
            C109766 * C109 + C109778 + C109778 + C109357 * C715) *
               C141309 * C141216 * C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eexx[111] +=
        (-std::pow(Pi, 2.5) *
         (((((C55526 * C108 + C55529 + C55529 + C141216 * C120) * C93949 +
             C62512 * C141384) *
                C5865 +
            (C102386 + C102387) * C5866 + (C102388 + C102389) * C5867) *
               C141294 * C2374 -
           ((C58471 * C141384 + C56055 * C93949) * C5867 +
            (C102389 + C102388) * C5866 + (C102387 + C102386) * C5865) *
               C141294 * C141485) *
              C2376 +
          (((C102390 + C102391) * C5865 + (C102392 + C102393) * C5866 +
            (C56058 * C93949 +
             (C55526 * C10552 + C56752 + C56752 + C141216 * C10556) * C141384) *
                C5867) *
               C141294 * C141485 -
           ((C102393 + C102392) * C5867 + (C102391 + C102390) * C5866 +
            (C62514 * C141384 +
             (C55526 * C109 + C55536 + C55536 + C141216 * C121) * C93949) *
                C5865) *
               C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47712 * C108 + C47719 + C47719 + C47707 * C120 + C47714 * C109 +
             C47720 + C47720 + C47708 * C121 + C47716 * C110 + C47721 + C47721 +
             C47709 * C122) *
                C93949 +
            (C95747 + C95748 + C95749) * C141384) *
               C141309 * C141294 * C2374 -
           ((C52204 + C52205 + C52206) * C141384 +
            (C48586 + C48585 + C48584) * C93949) *
               C141309 * C141294 * C141485) *
              C2376 +
          (((C48587 + C48588 + C48589) * C93949 +
            (C47712 * C3491 + C49623 + C49623 + C47707 * C3499 +
             C47714 * C3492 + C49624 + C49624 + C47708 * C3500 +
             C47716 * C3493 + C49625 + C49625 + C47709 * C3501) *
                C141384) *
               C141309 * C141294 * C141485 -
           ((C95752 + C95751 + C95750) * C141384 +
            (C47716 * C111 + C47728 + C47728 + C47709 * C123 + C47714 * C110 +
             C47729 + C47729 + C47708 * C122 + C47712 * C109 + C47730 + C47730 +
             C47707 * C121) *
                C93949) *
               C141309 * C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C55526 * C108 + C55529 + C55529 + C141216 * C120) * C109357 +
            C62512 * C109358 + C62513 * C109359 + C67937 * C109360) *
               C141309 * C141294 * C2374 -
           (C65168 * C109360 + C61519 * C109359 + C58473 * C109358 +
            C56053 * C109357) *
               C141309 * C141294 * C141485) *
              C2376 +
          ((C56056 * C109357 + C61520 * C109358 + C61521 * C109359 +
            (C55526 * C18583 + C62503 + C62503 + C141216 * C18587) * C109360) *
               C141309 * C141294 * C141485 -
           (C110456 * C109360 + C62515 * C109359 + C62514 * C109358 +
            (C55526 * C109 + C55536 + C55536 + C141216 * C121) * C109357) *
               C141309 * C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q));
    d2eexy[111] +=
        (-std::pow(Pi, 2.5) *
         (((((C5964 * C108 + C5865 * C189 + C5965 * C823 + C5866 * C912 +
              C5966 * C2960 + C5867 * C3026) *
                 C55527 +
             (C5964 * C114 + C5865 * C195 + C5965 * C828 + C5866 * C917 +
              C5966 * C2964 + C5867 * C3030) *
                 C141216) *
                C93949 +
            ((C103490 + C103491 + C103492) * C55527 +
             (C103493 + C103494 + C103495) * C141216) *
                C141384) *
               C141294 * C2374 -
           (((C5966 * C10553 + C5867 * C10679 + C5965 * C7890 + C5866 * C8009 +
              C5964 * C3494 + C5865 * C3576) *
                 C141216 +
             (C5966 * C10551 + C5867 * C10677 + C5965 * C7887 + C5866 * C8006 +
              C5964 * C3490 + C5865 * C3572) *
                 C55527) *
                C141384 +
            ((C5966 * C6732 + C5867 * C6883 + C5965 * C2964 + C5866 * C3030 +
              C5964 * C828 + C5865 * C917) *
                 C141216 +
             (C5966 * C6729 + C5867 * C6880 + C5965 * C2960 + C5866 * C3026 +
              C5964 * C823 + C5865 * C912) *
                 C55527) *
                C93949) *
               C141294 * C141485) *
              C2376 +
          ((((C6903 + C6902 + C6901) * C55527 +
             (C6900 + C6899 + C6898) * C141216) *
                C93949 +
            ((C5964 * C3491 + C5865 * C3573 + C5965 * C7886 + C5866 * C8005 +
              C5966 * C10552 + C5867 * C10678) *
                 C55527 +
             (C5964 * C3495 + C5865 * C3577 + C5965 * C7889 + C5866 * C8008 +
              C5966 * C10554 + C5867 * C10680) *
                 C141216) *
                C141384) *
               C141294 * C141485 -
           (((C8024 + C8025 + C8026) * C141216 +
             (C8027 + C8028 + C8029) * C55527) *
                C141384 +
            ((C5997 + C5996 + C5995) * C141216 +
             (C5994 + C5993 + C5992) * C55527) *
                C93949) *
               C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141309 * C189) * C47713 +
             (C188 * C114 + C141309 * C195) * C47707 + C218 * C47715 +
             C219 * C47708 + C220 * C47717 + C221 * C47709) *
                C93949 +
            (C95851 + C95852 + C95853 + C95854 + C95855 + C95856) * C141384) *
               C141294 * C2374 -
           ((C30841 * C47709 + C30842 * C47717 + C14992 * C47708 +
             C14993 * C47715 + C18716 * C47707 + C18715 * C47713) *
                C141384 +
            (C934 * C47709 + C935 * C47717 + C936 * C47708 + C937 * C47715 +
             (C188 * C828 + C141309 * C917) * C47707 +
             (C188 * C823 + C141309 * C912) * C47713) *
                C93949) *
               C141294 * C141485) *
              C2376 +
          (((C937 * C47713 + C936 * C47707 + C935 * C47715 + C934 * C47708 +
             C933 * C47717 + C932 * C47709) *
                C93949 +
            (C14993 * C47713 + C14992 * C47707 + C30842 * C47715 +
             C30841 * C47708 + (C188 * C3493 + C141309 * C3575) * C47717 +
             (C188 * C3497 + C141309 * C3579) * C47709) *
                C141384) *
               C141294 * C141485 -
           ((C95862 + C95861 + C95860 + C95859 + C95858 + C95857) * C141384 +
            (C223 * C47709 + C222 * C47717 + C221 * C47708 + C220 * C47715 +
             C219 * C47707 + C218 * C47713) *
                C93949) *
               C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141309 * C189) * C55527 +
             (C188 * C114 + C141309 * C195) * C141216) *
                C109357 +
            (C110523 + C110524) * C109358 + (C110525 + C110526) * C109359 +
            (C110527 + C110528) * C109360) *
               C141294 * C2374 -
           (((C188 * C18584 + C141309 * C18700) * C141216 +
             (C188 * C18582 + C141309 * C18698) * C55527) *
                C109360 +
            (C18718 * C141216 + C18717 * C55527) * C109359 +
            (C18716 * C141216 + C18715 * C55527) * C109358 +
            ((C188 * C828 + C141309 * C917) * C141216 +
             (C188 * C823 + C141309 * C912) * C55527) *
                C109357) *
               C141294 * C141485) *
              C2376 +
          (((C937 * C55527 + C936 * C141216) * C109357 +
            (C14993 * C55527 + C14992 * C141216) * C109358 +
            (C14991 * C55527 + C14990 * C141216) * C109359 +
            ((C188 * C18583 + C141309 * C18699) * C55527 +
             (C188 * C18585 + C141309 * C18701) * C141216) *
                C109360) *
               C141294 * C141485 -
           ((C110534 + C110533) * C109360 + (C110532 + C110531) * C109359 +
            (C110530 + C110529) * C109358 +
            (C219 * C141216 + C218 * C55527) * C109357) *
               C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q));
    d2eexz[111] +=
        (-std::pow(Pi, 2.5) *
         (((((C94102 * C108 + C93949 * C276 + C94103 * C1601 +
              C141384 * C1784) *
                 C55527 +
             (C94102 * C114 + C93949 * C282 + C94103 * C1606 +
              C141384 * C1789) *
                 C141216) *
                C5865 +
            ((C102614 + C102615) * C55527 + (C102616 + C102617) * C141216) *
                C5866 +
            ((C102618 + C102619) * C55527 + (C102620 + C102621) * C141216) *
                C5867) *
               C141294 * C2374 -
           (((C94103 * C10553 + C141384 * C10781 + C94102 * C6732 +
              C93949 * C7005) *
                 C141216 +
             (C94103 * C10551 + C141384 * C10779 + C94102 * C6729 +
              C93949 * C7002) *
                 C55527) *
                C5867 +
            ((C102621 + C102620) * C141216 + (C102619 + C102618) * C55527) *
                C5866 +
            ((C102617 + C102616) * C141216 + (C102615 + C102614) * C55527) *
                C5865) *
               C141294 * C141485) *
              C2376 +
          ((((C94985 + C94984) * C55527 + (C94983 + C94982) * C141216) * C5865 +
            ((C102622 + C102623) * C55527 + (C102624 + C102625) * C141216) *
                C5866 +
            ((C94102 * C6728 + C93949 * C7001 + C94103 * C10552 +
              C141384 * C10780) *
                 C55527 +
             (C94102 * C6731 + C93949 * C7004 + C94103 * C10554 +
              C141384 * C10782) *
                 C141216) *
                C5867) *
               C141294 * C141485 -
           (((C102625 + C102624) * C141216 + (C102623 + C102622) * C55527) *
                C5867 +
            ((C94982 + C94983) * C141216 + (C94984 + C94985) * C55527) * C5866 +
            ((C94132 + C94131) * C141216 + (C94130 + C94129) * C55527) *
                C5865) *
               C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C94102 * C108 + C93949 * C276 + C94103 * C1601 + C141384 * C1784) *
                C47713 +
            (C94102 * C114 + C93949 * C282 + C94103 * C1606 + C141384 * C1789) *
                C47707 +
            (C94129 + C94130) * C47715 + (C94131 + C94132) * C47708 +
            C94141 * C47717 + C94142 * C47709) *
               C141309 * C141294 * C2374 -
           ((C94978 + C94979) * C47709 + (C94980 + C94981) * C47717 +
            (C94982 + C94983) * C47708 + (C94984 + C94985) * C47715 +
            (C94103 * C3494 + C141384 * C3650 + C94102 * C828 +
             C93949 * C1011) *
                C47707 +
            (C94103 * C3490 + C141384 * C3646 + C94102 * C823 +
             C93949 * C1006) *
                C47713) *
               C141309 * C141294 * C141485) *
              C2376 +
          (((C94985 + C94984) * C47713 + (C94983 + C94982) * C47707 +
            (C94981 + C94980) * C47715 + (C94979 + C94978) * C47708 +
            (C94102 * C820 + C93949 * C1003 + C94103 * C3493 +
             C141384 * C3649) *
                C47717 +
            (C94102 * C825 + C93949 * C1008 + C94103 * C3497 +
             C141384 * C3653) *
                C47709) *
               C141309 * C141294 * C141485 -
           ((C94137 + C94138) * C47709 + (C94139 + C94140) * C47717 +
            (C94136 + C94135) * C47708 + (C94134 + C94133) * C47715 +
            (C94132 + C94131) * C47707 + (C94130 + C94129) * C47713) *
               C141309 * C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C109462 * C108 + C109357 * C276 + C109463 * C1601 +
             C109358 * C1784 + C109464 * C5325 + C109359 * C5449 +
             C109465 * C15862 + C109360 * C16151) *
                C55527 +
            (C109462 * C114 + C109357 * C282 + C109463 * C1606 +
             C109358 * C1789 + C109464 * C5329 + C109359 * C5453 +
             C109465 * C15865 + C109360 * C16154) *
                C141216) *
               C141309 * C141294 * C2374 -
           ((C109465 * C18584 + C109360 * C18822 + C109464 * C13305 +
             C109359 * C13479 + C109463 * C3494 + C109358 * C3650 +
             C109462 * C828 + C109357 * C1011) *
                C141216 +
            (C109465 * C18582 + C109360 * C18820 + C109464 * C13301 +
             C109359 * C13475 + C109463 * C3490 + C109358 * C3646 +
             C109462 * C823 + C109357 * C1006) *
                C55527) *
               C141309 * C141294 * C141485) *
              C2376 +
          (((C109462 * C822 + C109357 * C1005 + C109463 * C3491 +
             C109358 * C3647 + C109464 * C13302 + C109359 * C13476 +
             C109465 * C18583 + C109360 * C18821) *
                C55527 +
            (C109462 * C827 + C109357 * C1010 + C109463 * C3495 +
             C109358 * C3651 + C109464 * C13306 + C109359 * C13480 +
             C109465 * C18585 + C109360 * C18823) *
                C141216) *
               C141309 * C141294 * C141485 -
           ((C109465 * C15864 + C109360 * C16153 + C109464 * C5330 +
             C109359 * C5454 + C109463 * C1605 + C109358 * C1788 +
             C109462 * C115 + C109357 * C283) *
                C141216 +
            (C109465 * C15861 + C109360 * C16150 + C109464 * C5326 +
             C109359 * C5450 + C109463 * C1600 + C109358 * C1783 +
             C109462 * C109 + C109357 * C277) *
                C55527) *
               C141309 * C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[111] +=
        (-std::pow(Pi, 2.5) *
         (((((C55527 * C108 + C141216 * C114) * C5964 +
             (C55527 * C189 + C141216 * C362) * C5865 + C56299 * C5965 +
             C56300 * C5866 + C56301 * C5966 + C56302 * C5867) *
                C93949 +
            (C103692 + C103693 + C103694 + C103695 + C103696 + C103697) *
                C141384) *
               C141294 * C2374 -
           ((C58704 * C5867 + C58705 * C5966 + C58706 * C5866 + C58707 * C5965 +
             C58708 * C5865 + C58709 * C5964) *
                C141384 +
            (C56304 * C5867 + C56303 * C5966 + C56302 * C5866 + C56301 * C5965 +
             C56300 * C5865 + C56299 * C5964) *
                C93949) *
               C141294 * C141485) *
              C2376 +
          (((C56305 * C5964 + C56306 * C5865 + C56307 * C5965 + C56308 * C5866 +
             C56309 * C5966 + C56310 * C5867) *
                C93949 +
            (C61851 * C5964 + C61852 * C5865 + C87373 * C5965 + C87374 * C5866 +
             (C55527 * C10552 + C141216 * C10554) * C5966 +
             (C55527 * C10678 + C141216 * C10902) * C5867) *
                C141384) *
               C141294 * C141485 -
           ((C103703 + C103702 + C103701 + C103700 + C103699 + C103698) *
                C141384 +
            (C56308 * C5867 + C56307 * C5966 + C56306 * C5866 + C56305 * C5965 +
             (C55527 * C190 + C141216 * C363) * C5865 +
             (C55527 * C109 + C141216 * C115) * C5964) *
                C93949) *
               C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47713 * C108 + C47707 * C114 + C47715 * C109 + C47708 * C115 +
              C47717 * C110 + C47709 * C116) *
                 C188 +
             (C47713 * C189 + C47707 * C362 + C47715 * C190 + C47708 * C363 +
              C47717 * C191 + C47709 * C364) *
                 C141309) *
                C93949 +
            ((C96107 + C96108 + C96109) * C188 +
             (C96110 + C96111 + C96112) * C141309) *
                C141384) *
               C141294 * C2374 -
           (((C52519 + C52520 + C52521) * C141309 +
             (C52522 + C52523 + C52524) * C188) *
                C141384 +
            ((C48949 + C48948 + C48947) * C141309 +
             (C48946 + C48945 + C48944) * C188) *
                C93949) *
               C141294 * C141485) *
              C2376 +
          ((((C48950 + C48951 + C48952) * C188 +
             (C48953 + C48954 + C48955) * C141309) *
                C93949 +
            ((C47713 * C3491 + C47707 * C3495 + C47715 * C3492 +
              C47708 * C3496 + C47717 * C3493 + C47709 * C3497) *
                 C188 +
             (C47713 * C3573 + C47707 * C3721 + C47715 * C3574 +
              C47708 * C3722 + C47717 * C3575 + C47709 * C3723) *
                 C141309) *
                C141384) *
               C141294 * C141485 -
           (((C96118 + C96117 + C96116) * C141309 +
             (C96115 + C96114 + C96113) * C188) *
                C141384 +
            ((C47717 * C192 + C47709 * C365 + C47715 * C191 + C47708 * C364 +
              C47713 * C190 + C47707 * C363) *
                 C141309 +
             (C47717 * C111 + C47709 * C117 + C47715 * C110 + C47708 * C116 +
              C47713 * C109 + C47707 * C115) *
                 C188) *
                C93949) *
               C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C55527 * C108 + C141216 * C114) * C188 +
             (C55527 * C189 + C141216 * C362) * C141309) *
                C109357 +
            (C110667 + C110668) * C109358 + (C110669 + C110670) * C109359 +
            (C110671 + C110672) * C109360) *
               C141294 * C2374 -
           ((C65523 * C141309 + C65524 * C188) * C109360 +
            (C61850 * C141309 + C61849 * C188) * C109359 +
            (C58708 * C141309 + C58709 * C188) * C109358 +
            (C56300 * C141309 + C56299 * C188) * C109357) *
               C141294 * C141485) *
              C2376 +
          (((C56305 * C188 + C56306 * C141309) * C109357 +
            (C61851 * C188 + C61852 * C141309) * C109358 +
            (C61853 * C188 + C61854 * C141309) * C109359 +
            ((C55527 * C18583 + C141216 * C18585) * C188 +
             (C55527 * C18699 + C141216 * C18923) * C141309) *
                C109360) *
               C141294 * C141485 -
           ((C110684 + C110683) * C109360 + (C110676 + C110675) * C109359 +
            (C110674 + C110673) * C109358 +
            ((C55527 * C190 + C141216 * C363) * C141309 +
             (C55527 * C109 + C141216 * C115) * C188) *
                C109357) *
               C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[111] +=
        (-std::pow(Pi, 2.5) *
         ((((C6237 * C108 + C6241 + C6241 + C5865 * C419 + C6238 * C823 +
             C6242 + C6242 + C5866 * C1171 + C6239 * C2960 + C6243 + C6243 +
             C5867 * C3196) *
                C141216 * C93949 +
            (C103814 + C103815 + C103816) * C141216 * C141384) *
               C141294 * C2374 -
           ((C6239 * C10551 + C11030 + C11030 + C5867 * C11025 + C6238 * C7887 +
             C11029 + C11029 + C5866 * C8345 + C6237 * C3490 + C11028 + C11028 +
             C5865 * C3790) *
                C141216 * C141384 +
            (C6239 * C6729 + C7301 + C7301 + C5867 * C7289 + C6238 * C2960 +
             C7302 + C7302 + C5866 * C3196 + C6237 * C823 + C7303 + C7303 +
             C5865 * C1171) *
                C141216 * C93949) *
               C141294 * C141485) *
              C2376 +
          (((C7315 + C7314 + C7313) * C141216 * C93949 +
            (C6237 * C3491 + C11031 + C11031 + C5865 * C3791 + C6238 * C7886 +
             C11032 + C11032 + C5866 * C8344 + C6239 * C10552 + C11033 +
             C11033 + C5867 * C11026) *
                C141216 * C141384) *
               C141294 * C141485 -
           ((C8369 + C8370 + C8371) * C141216 * C141384 +
            (C6279 + C6278 + C6277) * C141216 * C93949) *
               C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C418 * C108 + C426 + C426 + C141309 * C419) * C47707 +
             C448 * C47708 + C449 * C47709) *
                C93949 +
            (C96217 + C96218 + C96219) * C141384) *
               C141294 * C2374 -
           ((C31165 * C47709 + C15322 * C47708 + C19049 * C47707) * C141384 +
            (C1192 * C47709 + C1193 * C47708 +
             (C418 * C823 + C1183 + C1183 + C141309 * C1171) * C47707) *
                C93949) *
               C141294 * C141485) *
              C2376 +
          (((C1193 * C47707 + C1192 * C47708 + C1191 * C47709) * C93949 +
            (C15322 * C47707 + C31165 * C47708 +
             (C418 * C3493 + C3798 + C3798 + C141309 * C3793) * C47709) *
                C141384) *
               C141294 * C141485 -
           ((C96222 + C96221 + C96220) * C141384 +
            (C450 * C47709 + C449 * C47708 + C448 * C47707) * C93949) *
               C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C418 * C108 + C426 + C426 + C141309 * C419) * C141216 * C109357 +
            C110751 * C109358 + C110752 * C109359 + C110753 * C109360) *
               C141294 * C2374 -
           ((C418 * C18582 + C19043 + C19043 + C141309 * C19034) * C141216 *
                C109360 +
            C19050 * C141216 * C109359 + C19049 * C141216 * C109358 +
            (C418 * C823 + C1183 + C1183 + C141309 * C1171) * C141216 *
                C109357) *
               C141294 * C141485) *
              C2376 +
          ((C1193 * C141216 * C109357 + C15322 * C141216 * C109358 +
            C15321 * C141216 * C109359 +
            (C418 * C18583 + C19044 + C19044 + C141309 * C19035) * C141216 *
                C109360) *
               C141294 * C141485 -
           (C110756 * C109360 + C110755 * C109359 + C110754 * C109358 +
            C448 * C141216 * C109357) *
               C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[111] +=
        (-std::pow(Pi, 2.5) *
         ((((C94102 * C108 + C93949 * C276 + C94103 * C1601 + C141384 * C1784) *
                C5964 +
            (C94102 * C189 + C93949 * C501 + C94103 * C1690 + C141384 * C2040) *
                C5865 +
            (C102614 + C102615) * C5965 + (C102932 + C102933) * C5866 +
            (C102618 + C102619) * C5966 + (C102934 + C102935) * C5867) *
               C141216 * C141294 * C2374 -
           ((C94103 * C10677 + C141384 * C11131 + C94102 * C6880 +
             C93949 * C7414) *
                C5867 +
            (C94103 * C10551 + C141384 * C10779 + C94102 * C6729 +
             C93949 * C7002) *
                C5966 +
            (C102935 + C102934) * C5866 + (C102619 + C102618) * C5965 +
            (C102933 + C102932) * C5865 + (C102615 + C102614) * C5964) *
               C141216 * C141294 * C141485) *
              C2376 +
          (((C94985 + C94984) * C5964 + (C95291 + C95290) * C5865 +
            (C102622 + C102623) * C5965 + (C102936 + C102937) * C5866 +
            (C94102 * C6728 + C93949 * C7001 + C94103 * C10552 +
             C141384 * C10780) *
                C5966 +
            (C94102 * C6879 + C93949 * C7413 + C94103 * C10678 +
             C141384 * C11132) *
                C5867) *
               C141216 * C141294 * C141485 -
           ((C102937 + C102936) * C5867 + (C102623 + C102622) * C5966 +
            (C95290 + C95291) * C5866 + (C94984 + C94985) * C5965 +
            (C94379 + C94378) * C5865 + (C94130 + C94129) * C5964) *
               C141216 * C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C94102 * C108 + C93949 * C276 + C94103 * C1601 +
              C141384 * C1784) *
                 C188 +
             (C94102 * C189 + C93949 * C501 + C94103 * C1690 +
              C141384 * C2040) *
                 C141309) *
                C47707 +
            ((C94129 + C94130) * C188 + (C94378 + C94379) * C141309) * C47708 +
            C94386 * C47709) *
               C141294 * C2374 -
           (((C95288 + C95289) * C141309 + (C94980 + C94981) * C188) * C47709 +
            ((C95290 + C95291) * C141309 + (C94984 + C94985) * C188) * C47708 +
            ((C94103 * C3572 + C141384 * C3864 + C94102 * C912 +
              C93949 * C1262) *
                 C141309 +
             (C94103 * C3490 + C141384 * C3646 + C94102 * C823 +
              C93949 * C1006) *
                 C188) *
                C47707) *
               C141294 * C141485) *
              C2376 +
          ((((C94985 + C94984) * C188 + (C95291 + C95290) * C141309) * C47707 +
            ((C94981 + C94980) * C188 + (C95289 + C95288) * C141309) * C47708 +
            ((C94102 * C820 + C93949 * C1003 + C94103 * C3493 +
              C141384 * C3649) *
                 C188 +
             (C94102 * C909 + C93949 * C1259 + C94103 * C3575 +
              C141384 * C3867) *
                 C141309) *
                C47709) *
               C141294 * C141485 -
           (((C94382 + C94383) * C141309 + (C94139 + C94140) * C188) * C47709 +
            ((C94381 + C94380) * C141309 + (C94134 + C94133) * C188) * C47708 +
            ((C94379 + C94378) * C141309 + (C94130 + C94129) * C188) * C47707) *
               C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C109462 * C108 + C109357 * C276 + C109463 * C1601 +
             C109358 * C1784 + C109464 * C5325 + C109359 * C5449 +
             C109465 * C15862 + C109360 * C16151) *
                C188 +
            (C109462 * C189 + C109357 * C501 + C109463 * C1690 +
             C109358 * C2040 + C109464 * C5391 + C109359 * C5619 +
             C109465 * C16013 + C109360 * C16549) *
                C141309) *
               C141216 * C141294 * C2374 -
           ((C109465 * C18698 + C109360 * C19150 + C109464 * C13393 +
             C109359 * C13719 + C109463 * C3572 + C109358 * C3864 +
             C109462 * C912 + C109357 * C1262) *
                C141309 +
            (C109465 * C18582 + C109360 * C18820 + C109464 * C13301 +
             C109359 * C13475 + C109463 * C3490 + C109358 * C3646 +
             C109462 * C823 + C109357 * C1006) *
                C188) *
               C141216 * C141294 * C141485) *
              C2376 +
          (((C109462 * C822 + C109357 * C1005 + C109463 * C3491 +
             C109358 * C3647 + C109464 * C13302 + C109359 * C13476 +
             C109465 * C18583 + C109360 * C18821) *
                C188 +
            (C109462 * C911 + C109357 * C1261 + C109463 * C3573 +
             C109358 * C3865 + C109464 * C13395 + C109359 * C13721 +
             C109465 * C18699 + C109360 * C19151) *
                C141309) *
               C141216 * C141294 * C141485 -
           ((C109465 * C16012 + C109360 * C16548 + C109464 * C5392 +
             C109359 * C5620 + C109463 * C1689 + C109358 * C2039 +
             C109462 * C190 + C109357 * C502) *
                C141309 +
            (C109465 * C15861 + C109360 * C16150 + C109464 * C5326 +
             C109359 * C5450 + C109463 * C1600 + C109358 * C1783 +
             C109462 * C109 + C109357 * C277) *
                C188) *
               C141216 * C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q));
    d2eezx[111] +=
        (-std::pow(Pi, 2.5) *
         (((((C55527 * C108 + C141216 * C114) * C94102 +
             (C55527 * C276 + C141216 * C579) * C93949 + C62870 * C94103 +
             C63222 * C141384) *
                C5865 +
            (C103036 + C103037 + C103038 + C103039) * C5866 +
            (C103040 + C103041 + C103042 + C103043) * C5867) *
               C141294 * C2374 -
           ((C58927 * C141384 + C58705 * C94103 + C56537 * C93949 +
             C56303 * C94102) *
                C5867 +
            (C103043 + C103042 + C103041 + C103040) * C5866 +
            (C103039 + C103038 + C103037 + C103036) * C5865) *
               C141294 * C141485) *
              C2376 +
          (((C103044 + C103045 + C103046 + C103047) * C5865 +
            (C103048 + C103049 + C103050 + C103051) * C5866 +
            (C56309 * C94102 + C56540 * C93949 +
             (C55527 * C10552 + C141216 * C10554) * C94103 +
             (C55527 * C10780 + C141216 * C11238) * C141384) *
                C5867) *
               C141294 * C141485 -
           ((C103051 + C103050 + C103049 + C103048) * C5867 +
            (C103047 + C103046 + C103045 + C103044) * C5866 +
            (C63224 * C141384 + C62874 * C94103 +
             (C55527 * C277 + C141216 * C580) * C93949 +
             (C55527 * C109 + C141216 * C115) * C94102) *
                C5865) *
               C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47713 * C108 + C47707 * C114 + C47715 * C109 + C47708 * C115 +
             C47717 * C110 + C47709 * C116) *
                C94102 +
            (C47713 * C276 + C47707 * C579 + C47715 * C277 + C47708 * C580 +
             C47717 * C278 + C47709 * C581) *
                C93949 +
            (C96107 + C96108 + C96109) * C94103 +
            (C96443 + C96444 + C96445) * C141384) *
               C141309 * C141294 * C2374 -
           ((C52831 + C52832 + C52833) * C141384 +
            (C52522 + C52523 + C52524) * C94103 +
            (C49300 + C49299 + C49298) * C93949 +
            (C48946 + C48945 + C48944) * C94102) *
               C141309 * C141294 * C141485) *
              C2376 +
          (((C48950 + C48951 + C48952) * C94102 +
            (C49301 + C49302 + C49303) * C93949 +
            (C47713 * C3491 + C47707 * C3495 + C47715 * C3492 + C47708 * C3496 +
             C47717 * C3493 + C47709 * C3497) *
                C94103 +
            (C47713 * C3647 + C47707 * C3935 + C47715 * C3648 + C47708 * C3936 +
             C47717 * C3649 + C47709 * C3937) *
                C141384) *
               C141309 * C141294 * C141485 -
           ((C96448 + C96447 + C96446) * C141384 +
            (C96115 + C96114 + C96113) * C94103 +
            (C47717 * C279 + C47709 * C582 + C47715 * C278 + C47708 * C581 +
             C47713 * C277 + C47707 * C580) *
                C93949 +
            (C47717 * C111 + C47709 * C117 + C47715 * C110 + C47708 * C116 +
             C47713 * C109 + C47707 * C115) *
                C94102) *
               C141309 * C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C55527 * C108 + C141216 * C114) * C109462 +
            (C55527 * C276 + C141216 * C579) * C109357 + C62870 * C109463 +
            C63222 * C109358 + C62872 * C109464 + C63223 * C109359 +
            C68191 * C109465 + C68436 * C109360) *
               C141309 * C141294 * C2374 -
           (C65860 * C109360 + C65524 * C109465 + C62177 * C109359 +
            C61849 * C109464 + C58929 * C109358 + C58709 * C109463 +
            C56535 * C109357 + C56299 * C109462) *
               C141309 * C141294 * C141485) *
              C2376 +
          ((C56305 * C109462 + C56538 * C109357 + C61851 * C109463 +
            C62178 * C109358 + C61853 * C109464 + C62179 * C109359 +
            (C55527 * C18583 + C141216 * C18585) * C109465 +
            (C55527 * C18821 + C141216 * C19251) * C109360) *
               C141309 * C141294 * C141485 -
           (C110891 * C109360 + C110681 * C109465 + C63225 * C109359 +
            C62876 * C109464 + C63224 * C109358 + C62874 * C109463 +
            (C55527 * C277 + C141216 * C580) * C109357 +
            (C55527 * C109 + C141216 * C115) * C109462) *
               C141309 * C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q));
    d2eezy[111] +=
        (-std::pow(Pi, 2.5) *
         ((((C5964 * C108 + C5865 * C189 + C5965 * C823 + C5866 * C912 +
             C5966 * C2960 + C5867 * C3026) *
                C94102 +
            (C5964 * C276 + C5865 * C635 + C5965 * C1006 + C5866 * C1419 +
             C5966 * C3084 + C5867 * C3362) *
                C93949 +
            (C103490 + C103491 + C103492) * C94103 +
            (C104117 + C104118 + C104119) * C141384) *
               C141216 * C141294 * C2374 -
           ((C5966 * C10779 + C5867 * C11349 + C5965 * C8128 + C5866 * C8684 +
             C5964 * C3646 + C5865 * C4004) *
                C141384 +
            (C5966 * C10551 + C5867 * C10677 + C5965 * C7887 + C5866 * C8006 +
             C5964 * C3490 + C5865 * C3572) *
                C94103 +
            (C5966 * C7002 + C5867 * C7655 + C5965 * C3084 + C5866 * C3362 +
             C5964 * C1006 + C5865 * C1419) *
                C93949 +
            (C5966 * C6729 + C5867 * C6880 + C5965 * C2960 + C5866 * C3026 +
             C5964 * C823 + C5865 * C912) *
                C94102) *
               C141216 * C141294 * C141485) *
              C2376 +
          (((C6903 + C6902 + C6901) * C94102 +
            (C7666 + C7665 + C7664) * C93949 +
            (C5964 * C3491 + C5865 * C3573 + C5965 * C7886 + C5866 * C8005 +
             C5966 * C10552 + C5867 * C10678) *
                C94103 +
            (C5964 * C3647 + C5865 * C4005 + C5965 * C8127 + C5866 * C8683 +
             C5966 * C10780 + C5867 * C11350) *
                C141384) *
               C141216 * C141294 * C141485 -
           ((C8693 + C8694 + C8695) * C141384 +
            (C8027 + C8028 + C8029) * C94103 +
            (C6537 + C6536 + C6535) * C93949 +
            (C5994 + C5993 + C5992) * C94102) *
               C141216 * C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141309 * C189) * C94102 +
             (C188 * C276 + C141309 * C635) * C93949 + C16043 * C94103 +
             C16798 * C141384) *
                C47707 +
            (C94535 + C94536 + C94537 + C94538) * C47708 + C94549 * C47709) *
               C141294 * C2374 -
           ((C95488 + C95489 + C95490 + C95491) * C47709 +
            (C95492 + C95493 + C95494 + C95495) * C47708 +
            (C19363 * C141384 + C18715 * C94103 +
             (C188 * C1006 + C141309 * C1419) * C93949 +
             (C188 * C823 + C141309 * C912) * C94102) *
                C47707) *
               C141294 * C141485) *
              C2376 +
          (((C95495 + C95494 + C95493 + C95492) * C47707 +
            (C95491 + C95490 + C95489 + C95488) * C47708 +
            (C933 * C94102 + C1431 * C93949 +
             (C188 * C3493 + C141309 * C3575) * C94103 +
             (C188 * C3649 + C141309 * C4007) * C141384) *
                C47709) *
               C141294 * C141485 -
           ((C94543 + C94544 + C94545 + C94546) * C47709 +
            (C94542 + C94541 + C94540 + C94539) * C47708 +
            (C94538 + C94537 + C94536 + C94535) * C47707) *
               C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141309 * C189) * C109462 +
            (C188 * C276 + C141309 * C635) * C109357 + C16043 * C109463 +
            C16798 * C109358 + C16045 * C109464 + C16799 * C109359 +
            C21415 * C109465 + C21913 * C109360) *
               C141216 * C141294 * C2374 -
           ((C188 * C18820 + C141309 * C19356) * C109360 +
            (C188 * C18582 + C141309 * C18698) * C109465 + C19364 * C109359 +
            C18717 * C109464 + C19363 * C109358 + C18715 * C109463 +
            (C188 * C1006 + C141309 * C1419) * C109357 +
            (C188 * C823 + C141309 * C912) * C109462) *
               C141216 * C141294 * C141485) *
              C2376 +
          ((C937 * C109462 + C1433 * C109357 + C14993 * C109463 +
            C15638 * C109358 + C14991 * C109464 + C15637 * C109359 +
            (C188 * C18583 + C141309 * C18699) * C109465 +
            (C188 * C18821 + C141309 * C19357) * C109360) *
               C141216 * C141294 * C141485 -
           (C16800 * C109360 + C16048 * C109465 + C14656 * C109359 +
            C14127 * C109464 + C2211 * C109358 + C1715 * C109463 +
            C654 * C109357 + C218 * C109462) *
               C141216 * C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q));
    d2eezz[111] +=
        (-std::pow(Pi, 2.5) *
         ((((C94623 * C108 + C94626 + C94626 + C93949 * C714 + C94624 * C1601 +
             C94627 + C94627 + C141384 * C2283) *
                C5865 +
            (C103276 + C103277) * C5866 + (C103278 + C103279) * C5867) *
               C141216 * C141294 * C2374 -
           ((C94624 * C10551 + C103256 + C103256 + C141384 * C11449 +
             C94623 * C6729 + C103257 + C103257 + C93949 * C7765) *
                C5867 +
            (C103279 + C103278) * C5866 + (C103277 + C103276) * C5865) *
               C141216 * C141294 * C141485) *
              C2376 +
          (((C95621 + C95620) * C5865 + (C103280 + C103281) * C5866 +
            (C94623 * C6728 + C103262 + C103262 + C93949 * C7764 +
             C94624 * C10552 + C103263 + C103263 + C141384 * C11450) *
                C5867) *
               C141216 * C141294 * C141485 -
           ((C103281 + C103280) * C5867 + (C95620 + C95621) * C5866 +
            (C94661 + C94660) * C5865) *
               C141216 * C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C94623 * C108 + C94626 + C94626 + C93949 * C714 + C94624 * C1601 +
             C94627 + C94627 + C141384 * C2283) *
                C141309 * C47707 +
            (C94660 + C94661) * C141309 * C47708 + C94667 * C47709) *
               C141294 * C2374 -
           ((C95618 + C95619) * C141309 * C47709 +
            (C95620 + C95621) * C141309 * C47708 +
            (C94624 * C3490 + C95606 + C95606 + C141384 * C4074 +
             C94623 * C823 + C95607 + C95607 + C93949 * C1505) *
                C141309 * C47707) *
               C141294 * C141485) *
              C2376 +
          (((C95621 + C95620) * C141309 * C47707 +
            (C95619 + C95618) * C141309 * C47708 +
            (C94623 * C820 + C95608 + C95608 + C93949 * C1502 + C94624 * C3493 +
             C95609 + C95609 + C141384 * C4077) *
                C141309 * C47709) *
               C141294 * C141485 -
           ((C94664 + C94665) * C141309 * C47709 +
            (C94663 + C94662) * C141309 * C47708 +
            (C94661 + C94660) * C141309 * C47707) *
               C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C109766 * C108 + C109771 + C109771 + C109357 * C714 +
            C109767 * C1601 + C109772 + C109772 + C109358 * C2283 +
            C109768 * C5325 + C109773 + C109773 + C109359 * C5781 +
            C109769 * C15862 + C109774 + C109774 + C109360 * C16900) *
               C141309 * C141216 * C141294 * C2374 -
           (C109769 * C18582 + C110377 + C110377 + C109360 * C19462 +
            C109768 * C13301 + C110378 + C110378 + C109359 * C13953 +
            C109767 * C3490 + C110379 + C110379 + C109358 * C4074 +
            C109766 * C823 + C110380 + C110380 + C109357 * C1505) *
               C141309 * C141216 * C141294 * C141485) *
              C2376 +
          ((C109766 * C822 + C110381 + C110381 + C109357 * C1504 +
            C109767 * C3491 + C110382 + C110382 + C109358 * C4075 +
            C109768 * C13302 + C110383 + C110383 + C109359 * C13955 +
            C109769 * C18583 + C110384 + C110384 + C109360 * C19463) *
               C141309 * C141216 * C141294 * C141485 -
           (C109769 * C15861 + C109775 + C109775 + C109360 * C16899 +
            C109768 * C5326 + C109776 + C109776 + C109359 * C5782 +
            C109767 * C1600 + C109777 + C109777 + C109358 * C2282 +
            C109766 * C109 + C109778 + C109778 + C109357 * C715) *
               C141309 * C141216 * C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q));
    d2eexx[112] +=
        (-std::pow(Pi, 2.5) *
         ((((C55526 * C108 + C55529 + C55529 + C141216 * C120) * C93949 +
            C62512 * C141384) *
               C5865 +
           (C102386 + C102387) * C5866 + C105178 * C5867) *
              C141294 * C2956 -
          ((C105179 + C105180) * C5867 + (C102389 + C102388) * C5866 +
           (C102387 + C102386) * C5865) *
              C141294 * C2957 +
          (C105178 * C5865 + (C105180 + C105179) * C5866 +
           (C57941 * C93949 +
            (C55526 * C58454 + C58464 + C58464 + C141216 * C58456) * C141384) *
               C5867) *
              C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C47712 * C108 + C47719 + C47719 + C47707 * C120 + C47714 * C109 +
            C47720 + C47720 + C47708 * C121 + C47716 * C110 + C47721 + C47721 +
            C47709 * C122) *
               C93949 +
           (C95747 + C95748 + C95749) * C141384) *
              C141309 * C141294 * C2956 -
          ((C52204 + C52205 + C52206) * C141384 +
           (C48586 + C48585 + C48584) * C93949) *
              C141309 * C141294 * C2957 +
          ((C51459 + C51458 + C51457) * C93949 +
           (C47712 * C7887 + C52195 + C52195 + C47707 * C7893 + C47714 * C7886 +
            C52196 + C52196 + C47708 * C7892 + C47716 * C7888 + C52197 +
            C52197 + C47709 * C7894) *
               C141384) *
              C141309 * C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C55526 * C108 + C55529 + C55529 + C141216 * C120) * C109357 +
           C62512 * C109358 + C62513 * C109359 + C67937 * C109360) *
              C141309 * C141294 * C2956 -
          (C65168 * C109360 + C61519 * C109359 + C58473 * C109358 +
           C56053 * C109357) *
              C141309 * C141294 * C2957 +
          (C56054 * C109357 + C58472 * C109358 + C64402 * C109359 +
           (C55526 * C65157 + C65165 + C65165 + C141216 * C65159) * C109360) *
              C141309 * C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eexy[112] +=
        (-std::pow(Pi, 2.5) *
         ((((C5964 * C108 + C5865 * C189 + C5965 * C823 + C5866 * C912 +
             C5966 * C2960 + C5867 * C3026) *
                C55527 +
            (C5964 * C114 + C5865 * C195 + C5965 * C828 + C5866 * C917 +
             C5966 * C2964 + C5867 * C3030) *
                C141216) *
               C93949 +
           ((C103490 + C103491 + C103492) * C55527 +
            (C103493 + C103494 + C103495) * C141216) *
               C141384) *
              C141294 * C2956 -
          (((C5966 * C10553 + C5867 * C10679 + C5965 * C7890 + C5866 * C8009 +
             C5964 * C3494 + C5865 * C3576) *
                C141216 +
            (C5966 * C10551 + C5867 * C10677 + C5965 * C7887 + C5866 * C8006 +
             C5964 * C3490 + C5865 * C3572) *
                C55527) *
               C141384 +
           ((C5966 * C6732 + C5867 * C6883 + C5965 * C2964 + C5866 * C3030 +
             C5964 * C828 + C5865 * C917) *
                C141216 +
            (C5966 * C6729 + C5867 * C6880 + C5965 * C2960 + C5866 * C3026 +
             C5964 * C823 + C5865 * C912) *
                C55527) *
               C93949) *
              C141294 * C2957 +
          (((C5964 * C2960 + C5865 * C3026 + C5965 * C6729 + C5866 * C6880 +
             C5966 * C9768 + C5867 * C9862) *
                C55527 +
            (C5964 * C2964 + C5865 * C3030 + C5965 * C6732 + C5866 * C6883 +
             C5966 * C9770 + C5867 * C9864) *
                C141216) *
               C93949 +
           ((C5964 * C7887 + C5865 * C8006 + C5965 * C10551 + C5866 * C10677 +
             C5966 * C58454 + C5867 * C58542) *
                C55527 +
            (C5964 * C7890 + C5865 * C8009 + C5965 * C10553 + C5866 * C10679 +
             C5966 * C58455 + C5867 * C58543) *
                C141216) *
               C141384) *
              C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141309 * C189) * C47713 +
            (C188 * C114 + C141309 * C195) * C47707 + C218 * C47715 +
            C219 * C47708 + C220 * C47717 + C221 * C47709) *
               C93949 +
           (C95851 + C95852 + C95853 + C95854 + C95855 + C95856) * C141384) *
              C141294 * C2956 -
          ((C30841 * C47709 + C30842 * C47717 + C14992 * C47708 +
            C14993 * C47715 + C18716 * C47707 + C18715 * C47713) *
               C141384 +
           (C934 * C47709 + C935 * C47717 + C936 * C47708 + C937 * C47715 +
            (C188 * C828 + C141309 * C917) * C47707 +
            (C188 * C823 + C141309 * C912) * C47713) *
               C93949) *
              C141294 * C2957 +
          (((C188 * C2960 + C141309 * C3026) * C47713 +
            (C188 * C2964 + C141309 * C3030) * C47707 +
            (C188 * C2961 + C141309 * C3027) * C47715 +
            (C188 * C2965 + C141309 * C3031) * C47708 +
            (C188 * C2962 + C141309 * C3028) * C47717 +
            (C188 * C2966 + C141309 * C3032) * C47709) *
               C93949 +
           ((C188 * C7887 + C141309 * C8006) * C47713 +
            (C188 * C7890 + C141309 * C8009) * C47707 +
            (C188 * C7886 + C141309 * C8005) * C47715 +
            (C188 * C7889 + C141309 * C8008) * C47708 +
            (C188 * C7888 + C141309 * C8007) * C47717 +
            (C188 * C7891 + C141309 * C8010) * C47709) *
               C141384) *
              C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141309 * C189) * C55527 +
            (C188 * C114 + C141309 * C195) * C141216) *
               C109357 +
           (C110523 + C110524) * C109358 + (C110525 + C110526) * C109359 +
           (C110527 + C110528) * C109360) *
              C141294 * C2956 -
          (((C188 * C18584 + C141309 * C18700) * C141216 +
            (C188 * C18582 + C141309 * C18698) * C55527) *
               C109360 +
           (C18718 * C141216 + C18717 * C55527) * C109359 +
           (C18716 * C141216 + C18715 * C55527) * C109358 +
           ((C188 * C828 + C141309 * C917) * C141216 +
            (C188 * C823 + C141309 * C912) * C55527) *
               C109357) *
              C141294 * C2957 +
          (((C188 * C2960 + C141309 * C3026) * C55527 +
            (C188 * C2964 + C141309 * C3030) * C141216) *
               C109357 +
           ((C188 * C7887 + C141309 * C8006) * C55527 +
            (C188 * C7890 + C141309 * C8009) * C141216) *
               C109358 +
           ((C188 * C13303 + C141309 * C13394) * C55527 +
            (C188 * C13307 + C141309 * C13398) * C141216) *
               C109359 +
           ((C188 * C65157 + C141309 * C65267) * C55527 +
            (C188 * C65158 + C141309 * C65268) * C141216) *
               C109360) *
              C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eexz[112] +=
        (-std::pow(Pi, 2.5) *
         ((((C94102 * C108 + C93949 * C276 + C94103 * C1601 + C141384 * C1784) *
                C55527 +
            (C94102 * C114 + C93949 * C282 + C94103 * C1606 + C141384 * C1789) *
                C141216) *
               C5865 +
           ((C102614 + C102615) * C55527 + (C102616 + C102617) * C141216) *
               C5866 +
           C105345 * C5867) *
              C141294 * C2956 -
          (((C105341 + C105342) * C141216 + (C105343 + C105344) * C55527) *
               C5867 +
           ((C102621 + C102620) * C141216 + (C102619 + C102618) * C55527) *
               C5866 +
           ((C102617 + C102616) * C141216 + (C102615 + C102614) * C55527) *
               C5865) *
              C141294 * C2957 +
          (C105345 * C5865 +
           ((C105344 + C105343) * C55527 + (C105342 + C105341) * C141216) *
               C5866 +
           ((C94102 * C9768 + C93949 * C9940 + C94103 * C58454 +
             C141384 * C58610) *
                C55527 +
            (C94102 * C9770 + C93949 * C9942 + C94103 * C58455 +
             C141384 * C58611) *
                C141216) *
               C5867) *
              C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C94102 * C108 + C93949 * C276 + C94103 * C1601 + C141384 * C1784) *
               C47713 +
           (C94102 * C114 + C93949 * C282 + C94103 * C1606 + C141384 * C1789) *
               C47707 +
           (C94129 + C94130) * C47715 + (C94131 + C94132) * C47708 +
           C94141 * C47717 + C94142 * C47709) *
              C141309 * C141294 * C2956 -
          ((C94978 + C94979) * C47709 + (C94980 + C94981) * C47717 +
           (C94982 + C94983) * C47708 + (C94984 + C94985) * C47715 +
           (C94103 * C3494 + C141384 * C3650 + C94102 * C828 + C93949 * C1011) *
               C47707 +
           (C94103 * C3490 + C141384 * C3646 + C94102 * C823 + C93949 * C1006) *
               C47713) *
              C141309 * C141294 * C2957 +
          ((C94102 * C2960 + C93949 * C3084 + C94103 * C7887 +
            C141384 * C8128) *
               C47713 +
           (C94102 * C2964 + C93949 * C3088 + C94103 * C7890 +
            C141384 * C8131) *
               C47707 +
           (C94102 * C2961 + C93949 * C3085 + C94103 * C7886 +
            C141384 * C8127) *
               C47715 +
           (C94102 * C2965 + C93949 * C3089 + C94103 * C7889 +
            C141384 * C8130) *
               C47708 +
           (C94102 * C2962 + C93949 * C3086 + C94103 * C7888 +
            C141384 * C8129) *
               C47717 +
           (C94102 * C2966 + C93949 * C3090 + C94103 * C7891 +
            C141384 * C8132) *
               C47709) *
              C141309 * C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C109462 * C108 + C109357 * C276 + C109463 * C1601 +
            C109358 * C1784 + C109464 * C5325 + C109359 * C5449 +
            C109465 * C15862 + C109360 * C16151) *
               C55527 +
           (C109462 * C114 + C109357 * C282 + C109463 * C1606 +
            C109358 * C1789 + C109464 * C5329 + C109359 * C5453 +
            C109465 * C15865 + C109360 * C16154) *
               C141216) *
              C141309 * C141294 * C2956 -
          ((C109465 * C18584 + C109360 * C18822 + C109464 * C13305 +
            C109359 * C13479 + C109463 * C3494 + C109358 * C3650 +
            C109462 * C828 + C109357 * C1011) *
               C141216 +
           (C109465 * C18582 + C109360 * C18820 + C109464 * C13301 +
            C109359 * C13475 + C109463 * C3490 + C109358 * C3646 +
            C109462 * C823 + C109357 * C1006) *
               C55527) *
              C141309 * C141294 * C2957 +
          ((C109462 * C2960 + C109357 * C3084 + C109463 * C7887 +
            C109358 * C8128 + C109464 * C13303 + C109359 * C13477 +
            C109465 * C65157 + C109360 * C65391) *
               C55527 +
           (C109462 * C2964 + C109357 * C3088 + C109463 * C7890 +
            C109358 * C8131 + C109464 * C13307 + C109359 * C13481 +
            C109465 * C65158 + C109360 * C65392) *
               C141216) *
              C141309 * C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eeyx[112] +=
        (-std::pow(Pi, 2.5) *
         ((((C55527 * C108 + C141216 * C114) * C5964 +
            (C55527 * C189 + C141216 * C362) * C5865 + C56299 * C5965 +
            C56300 * C5866 + C56301 * C5966 + C56302 * C5867) *
               C93949 +
           (C103692 + C103693 + C103694 + C103695 + C103696 + C103697) *
               C141384) *
              C141294 * C2956 -
          ((C58704 * C5867 + C58705 * C5966 + C58706 * C5866 + C58707 * C5965 +
            C58708 * C5865 + C58709 * C5964) *
               C141384 +
           (C56304 * C5867 + C56303 * C5966 + C56302 * C5866 + C56301 * C5965 +
            C56300 * C5865 + C56299 * C5964) *
               C93949) *
              C141294 * C2957 +
          ((C56301 * C5964 + C56302 * C5865 + C56303 * C5965 + C56304 * C5866 +
            C58113 * C5966 + C58112 * C5867) *
               C93949 +
           (C58707 * C5964 + C58706 * C5865 + C58705 * C5965 + C58704 * C5866 +
            (C55527 * C58454 + C141216 * C58455) * C5966 +
            (C55527 * C58542 + C141216 * C58690) * C5867) *
               C141384) *
              C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47713 * C108 + C47707 * C114 + C47715 * C109 + C47708 * C115 +
             C47717 * C110 + C47709 * C116) *
                C188 +
            (C47713 * C189 + C47707 * C362 + C47715 * C190 + C47708 * C363 +
             C47717 * C191 + C47709 * C364) *
                C141309) *
               C93949 +
           ((C96107 + C96108 + C96109) * C188 +
            (C96110 + C96111 + C96112) * C141309) *
               C141384) *
              C141294 * C2956 -
          (((C52519 + C52520 + C52521) * C141309 +
            (C52522 + C52523 + C52524) * C188) *
               C141384 +
           ((C48949 + C48948 + C48947) * C141309 +
            (C48946 + C48945 + C48944) * C188) *
               C93949) *
              C141294 * C2957 +
          (((C51705 + C51704 + C51703) * C188 +
            (C51702 + C51701 + C51700) * C141309) *
               C93949 +
           ((C47713 * C7887 + C47707 * C7890 + C47715 * C7886 + C47708 * C7889 +
             C47717 * C7888 + C47709 * C7891) *
                C188 +
            (C47713 * C8006 + C47707 * C8244 + C47715 * C8005 + C47708 * C8243 +
             C47717 * C8007 + C47709 * C8245) *
                C141309) *
               C141384) *
              C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C55527 * C108 + C141216 * C114) * C188 +
            (C55527 * C189 + C141216 * C362) * C141309) *
               C109357 +
           (C110667 + C110668) * C109358 + (C110669 + C110670) * C109359 +
           (C110671 + C110672) * C109360) *
              C141294 * C2956 -
          ((C65523 * C141309 + C65524 * C188) * C109360 +
           (C61850 * C141309 + C61849 * C188) * C109359 +
           (C58708 * C141309 + C58709 * C188) * C109358 +
           (C56300 * C141309 + C56299 * C188) * C109357) *
              C141294 * C2957 +
          ((C56301 * C188 + C56302 * C141309) * C109357 +
           (C58707 * C188 + C58706 * C141309) * C109358 +
           (C64649 * C188 + C64648 * C141309) * C109359 +
           ((C55527 * C65157 + C141216 * C65158) * C188 +
            (C55527 * C65267 + C141216 * C65509) * C141309) *
               C109360) *
              C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eeyy[112] +=
        (-std::pow(Pi, 2.5) *
         (((C6237 * C108 + C6241 + C6241 + C5865 * C419 + C6238 * C823 + C6242 +
            C6242 + C5866 * C1171 + C6239 * C2960 + C6243 + C6243 +
            C5867 * C3196) *
               C141216 * C93949 +
           (C103814 + C103815 + C103816) * C141216 * C141384) *
              C141294 * C2956 -
          ((C6239 * C10551 + C11030 + C11030 + C5867 * C11025 + C6238 * C7887 +
            C11029 + C11029 + C5866 * C8345 + C6237 * C3490 + C11028 + C11028 +
            C5865 * C3790) *
               C141216 * C141384 +
           (C6239 * C6729 + C7301 + C7301 + C5867 * C7289 + C6238 * C2960 +
            C7302 + C7302 + C5866 * C3196 + C6237 * C823 + C7303 + C7303 +
            C5865 * C1171) *
               C141216 * C93949) *
              C141294 * C2957 +
          ((C6237 * C2960 + C10124 + C10124 + C5865 * C3196 + C6238 * C6729 +
            C10125 + C10125 + C5866 * C7289 + C6239 * C9768 + C10126 + C10126 +
            C5867 * C10121) *
               C141216 * C93949 +
           (C6237 * C7887 + C105494 + C105494 + C5865 * C8345 + C6238 * C10551 +
            C105495 + C105495 + C5866 * C11025 + C6239 * C58454 + C105496 +
            C105496 + C5867 * C58775) *
               C141216 * C141384) *
              C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C418 * C108 + C426 + C426 + C141309 * C419) * C47707 +
            C448 * C47708 + C449 * C47709) *
               C93949 +
           (C96217 + C96218 + C96219) * C141384) *
              C141294 * C2956 -
          ((C31165 * C47709 + C15322 * C47708 + C19049 * C47707) * C141384 +
           (C1192 * C47709 + C1193 * C47708 +
            (C418 * C823 + C1183 + C1183 + C141309 * C1171) * C47707) *
               C93949) *
              C141294 * C2957 +
          (((C418 * C2960 + C3201 + C3201 + C141309 * C3196) * C47707 +
            (C418 * C2961 + C3202 + C3202 + C141309 * C3197) * C47708 +
            (C418 * C2962 + C3203 + C3203 + C141309 * C3198) * C47709) *
               C93949 +
           ((C418 * C7887 + C18179 + C18179 + C141309 * C8345) * C47707 +
            (C418 * C7886 + C18180 + C18180 + C141309 * C8344) * C47708 +
            (C418 * C7888 + C33920 + C33920 + C141309 * C8346) * C47709) *
               C141384) *
              C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C418 * C108 + C426 + C426 + C141309 * C419) * C141216 * C109357 +
           C110751 * C109358 + C110752 * C109359 + C110753 * C109360) *
              C141294 * C2956 -
          ((C418 * C18582 + C19043 + C19043 + C141309 * C19034) * C141216 *
               C109360 +
           C19050 * C141216 * C109359 + C19049 * C141216 * C109358 +
           (C418 * C823 + C1183 + C1183 + C141309 * C1171) * C141216 *
               C109357) *
              C141294 * C2957 +
          ((C418 * C2960 + C3201 + C3201 + C141309 * C3196) * C141216 *
               C109357 +
           (C418 * C7887 + C18179 + C18179 + C141309 * C8345) * C141216 *
               C109358 +
           (C418 * C13303 + C18181 + C18181 + C141309 * C13636) * C141216 *
               C109359 +
           (C418 * C65157 + C111876 + C111876 + C141309 * C65622) * C141216 *
               C109360) *
              C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eeyz[112] +=
        (-std::pow(Pi, 2.5) *
         (((C94102 * C108 + C93949 * C276 + C94103 * C1601 + C141384 * C1784) *
               C5964 +
           (C94102 * C189 + C93949 * C501 + C94103 * C1690 + C141384 * C2040) *
               C5865 +
           (C102614 + C102615) * C5965 + (C102932 + C102933) * C5866 +
           C105329 * C5966 + C105571 * C5867) *
              C141216 * C141294 * C2956 -
          ((C105576 + C105577) * C5867 + (C105343 + C105344) * C5966 +
           (C102935 + C102934) * C5866 + (C102619 + C102618) * C5965 +
           (C102933 + C102932) * C5865 + (C102615 + C102614) * C5964) *
              C141216 * C141294 * C2957 +
          (C105329 * C5964 + C105571 * C5865 + (C105344 + C105343) * C5965 +
           (C105577 + C105576) * C5866 +
           (C94102 * C9768 + C93949 * C9940 + C94103 * C58454 +
            C141384 * C58610) *
               C5966 +
           (C94102 * C9862 + C93949 * C10203 + C94103 * C58542 +
            C141384 * C58846) *
               C5867) *
              C141216 * C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C94102 * C108 + C93949 * C276 + C94103 * C1601 + C141384 * C1784) *
                C188 +
            (C94102 * C189 + C93949 * C501 + C94103 * C1690 + C141384 * C2040) *
                C141309) *
               C47707 +
           ((C94129 + C94130) * C188 + (C94378 + C94379) * C141309) * C47708 +
           C94386 * C47709) *
              C141294 * C2956 -
          (((C95288 + C95289) * C141309 + (C94980 + C94981) * C188) * C47709 +
           ((C95290 + C95291) * C141309 + (C94984 + C94985) * C188) * C47708 +
           ((C94103 * C3572 + C141384 * C3864 + C94102 * C912 +
             C93949 * C1262) *
                C141309 +
            (C94103 * C3490 + C141384 * C3646 + C94102 * C823 +
             C93949 * C1006) *
                C188) *
               C47707) *
              C141294 * C2957 +
          (((C94102 * C2960 + C93949 * C3084 + C94103 * C7887 +
             C141384 * C8128) *
                C188 +
            (C94102 * C3026 + C93949 * C3254 + C94103 * C8006 +
             C141384 * C8470) *
                C141309) *
               C47707 +
           ((C94102 * C2961 + C93949 * C3085 + C94103 * C7886 +
             C141384 * C8127) *
                C188 +
            (C94102 * C3027 + C93949 * C3255 + C94103 * C8005 +
             C141384 * C8469) *
                C141309) *
               C47708 +
           ((C94102 * C2962 + C93949 * C3086 + C94103 * C7888 +
             C141384 * C8129) *
                C188 +
            (C94102 * C3028 + C93949 * C3256 + C94103 * C8007 +
             C141384 * C8471) *
                C141309) *
               C47709) *
              C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C109462 * C108 + C109357 * C276 + C109463 * C1601 +
            C109358 * C1784 + C109464 * C5325 + C109359 * C5449 +
            C109465 * C15862 + C109360 * C16151) *
               C188 +
           (C109462 * C189 + C109357 * C501 + C109463 * C1690 +
            C109358 * C2040 + C109464 * C5391 + C109359 * C5619 +
            C109465 * C16013 + C109360 * C16549) *
               C141309) *
              C141216 * C141294 * C2956 -
          ((C109465 * C18698 + C109360 * C19150 + C109464 * C13393 +
            C109359 * C13719 + C109463 * C3572 + C109358 * C3864 +
            C109462 * C912 + C109357 * C1262) *
               C141309 +
           (C109465 * C18582 + C109360 * C18820 + C109464 * C13301 +
            C109359 * C13475 + C109463 * C3490 + C109358 * C3646 +
            C109462 * C823 + C109357 * C1006) *
               C188) *
              C141216 * C141294 * C2957 +
          ((C109462 * C2960 + C109357 * C3084 + C109463 * C7887 +
            C109358 * C8128 + C109464 * C13303 + C109359 * C13477 +
            C109465 * C65157 + C109360 * C65391) *
               C188 +
           (C109462 * C3026 + C109357 * C3254 + C109463 * C8006 +
            C109358 * C8470 + C109464 * C13394 + C109359 * C13720 +
            C109465 * C65267 + C109360 * C65743) *
               C141309) *
              C141216 * C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eezx[112] +=
        (-std::pow(Pi, 2.5) *
         ((((C55527 * C108 + C141216 * C114) * C94102 +
            (C55527 * C276 + C141216 * C579) * C93949 + C62870 * C94103 +
            C63222 * C141384) *
               C5865 +
           (C103036 + C103037 + C103038 + C103039) * C5866 + C105658 * C5867) *
              C141294 * C2956 -
          ((C105653 + C105654 + C105655 + C105656) * C5867 +
           (C103043 + C103042 + C103041 + C103040) * C5866 +
           (C103039 + C103038 + C103037 + C103036) * C5865) *
              C141294 * C2957 +
          (C105658 * C5865 + (C105656 + C105655 + C105654 + C105653) * C5866 +
           (C58113 * C94102 + C58279 * C93949 +
            (C55527 * C58454 + C141216 * C58455) * C94103 +
            (C55527 * C58610 + C141216 * C58916) * C141384) *
               C5867) *
              C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C47713 * C108 + C47707 * C114 + C47715 * C109 + C47708 * C115 +
            C47717 * C110 + C47709 * C116) *
               C94102 +
           (C47713 * C276 + C47707 * C579 + C47715 * C277 + C47708 * C580 +
            C47717 * C278 + C47709 * C581) *
               C93949 +
           (C96107 + C96108 + C96109) * C94103 +
           (C96443 + C96444 + C96445) * C141384) *
              C141309 * C141294 * C2956 -
          ((C52831 + C52832 + C52833) * C141384 +
           (C52522 + C52523 + C52524) * C94103 +
           (C49300 + C49299 + C49298) * C93949 +
           (C48946 + C48945 + C48944) * C94102) *
              C141309 * C141294 * C2957 +
          ((C51705 + C51704 + C51703) * C94102 +
           (C51942 + C51941 + C51940) * C93949 +
           (C47713 * C7887 + C47707 * C7890 + C47715 * C7886 + C47708 * C7889 +
            C47717 * C7888 + C47709 * C7891) *
               C94103 +
           (C47713 * C8128 + C47707 * C8583 + C47715 * C8127 + C47708 * C8582 +
            C47717 * C8129 + C47709 * C8584) *
               C141384) *
              C141309 * C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C55527 * C108 + C141216 * C114) * C109462 +
           (C55527 * C276 + C141216 * C579) * C109357 + C62870 * C109463 +
           C63222 * C109358 + C62872 * C109464 + C63223 * C109359 +
           C68191 * C109465 + C68436 * C109360) *
              C141309 * C141294 * C2956 -
          (C65860 * C109360 + C65524 * C109465 + C62177 * C109359 +
           C61849 * C109464 + C58929 * C109358 + C58709 * C109463 +
           C56535 * C109357 + C56299 * C109462) *
              C141309 * C141294 * C2957 +
          (C56301 * C109462 + C56536 * C109357 + C58707 * C109463 +
           C58928 * C109358 + C64649 * C109464 + C64892 * C109359 +
           (C55527 * C65157 + C141216 * C65158) * C109465 +
           (C55527 * C65391 + C141216 * C65851) * C109360) *
              C141309 * C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eezy[112] +=
        (-std::pow(Pi, 2.5) *
         (((C5964 * C108 + C5865 * C189 + C5965 * C823 + C5866 * C912 +
            C5966 * C2960 + C5867 * C3026) *
               C94102 +
           (C5964 * C276 + C5865 * C635 + C5965 * C1006 + C5866 * C1419 +
            C5966 * C3084 + C5867 * C3362) *
               C93949 +
           (C103490 + C103491 + C103492) * C94103 +
           (C104117 + C104118 + C104119) * C141384) *
              C141216 * C141294 * C2956 -
          ((C5966 * C10779 + C5867 * C11349 + C5965 * C8128 + C5866 * C8684 +
            C5964 * C3646 + C5865 * C4004) *
               C141384 +
           (C5966 * C10551 + C5867 * C10677 + C5965 * C7887 + C5866 * C8006 +
            C5964 * C3490 + C5865 * C3572) *
               C94103 +
           (C5966 * C7002 + C5867 * C7655 + C5965 * C3084 + C5866 * C3362 +
            C5964 * C1006 + C5865 * C1419) *
               C93949 +
           (C5966 * C6729 + C5867 * C6880 + C5965 * C2960 + C5866 * C3026 +
            C5964 * C823 + C5865 * C912) *
               C94102) *
              C141216 * C141294 * C2957 +
          ((C5964 * C2960 + C5865 * C3026 + C5965 * C6729 + C5866 * C6880 +
            C5966 * C9768 + C5867 * C9862) *
               C94102 +
           (C5964 * C3084 + C5865 * C3362 + C5965 * C7002 + C5866 * C7655 +
            C5966 * C9940 + C5867 * C10368) *
               C93949 +
           (C5964 * C7887 + C5865 * C8006 + C5965 * C10551 + C5866 * C10677 +
            C5966 * C58454 + C5867 * C58542) *
               C94103 +
           (C5964 * C8128 + C5865 * C8684 + C5965 * C10779 + C5866 * C11349 +
            C5966 * C58610 + C5867 * C58998) *
               C141384) *
              C141216 * C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141309 * C189) * C94102 +
            (C188 * C276 + C141309 * C635) * C93949 + C16043 * C94103 +
            C16798 * C141384) *
               C47707 +
           (C94535 + C94536 + C94537 + C94538) * C47708 + C94549 * C47709) *
              C141294 * C2956 -
          ((C95488 + C95489 + C95490 + C95491) * C47709 +
           (C95492 + C95493 + C95494 + C95495) * C47708 +
           (C19363 * C141384 + C18715 * C94103 +
            (C188 * C1006 + C141309 * C1419) * C93949 +
            (C188 * C823 + C141309 * C912) * C94102) *
               C47707) *
              C141294 * C2957 +
          (((C188 * C2960 + C141309 * C3026) * C94102 +
            (C188 * C3084 + C141309 * C3362) * C93949 +
            (C188 * C7887 + C141309 * C8006) * C94103 +
            (C188 * C8128 + C141309 * C8684) * C141384) *
               C47707 +
           ((C188 * C2961 + C141309 * C3027) * C94102 +
            (C188 * C3085 + C141309 * C3363) * C93949 +
            (C188 * C7886 + C141309 * C8005) * C94103 +
            (C188 * C8127 + C141309 * C8683) * C141384) *
               C47708 +
           ((C188 * C2962 + C141309 * C3028) * C94102 +
            (C188 * C3086 + C141309 * C3364) * C93949 +
            (C188 * C7888 + C141309 * C8007) * C94103 +
            (C188 * C8129 + C141309 * C8685) * C141384) *
               C47709) *
              C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C188 * C108 + C141309 * C189) * C109462 +
           (C188 * C276 + C141309 * C635) * C109357 + C16043 * C109463 +
           C16798 * C109358 + C16045 * C109464 + C16799 * C109359 +
           C21415 * C109465 + C21913 * C109360) *
              C141216 * C141294 * C2956 -
          ((C188 * C18820 + C141309 * C19356) * C109360 +
           (C188 * C18582 + C141309 * C18698) * C109465 + C19364 * C109359 +
           C18717 * C109464 + C19363 * C109358 + C18715 * C109463 +
           (C188 * C1006 + C141309 * C1419) * C109357 +
           (C188 * C823 + C141309 * C912) * C109462) *
              C141216 * C141294 * C2957 +
          ((C188 * C2960 + C141309 * C3026) * C109462 +
           (C188 * C3084 + C141309 * C3362) * C109357 +
           (C188 * C7887 + C141309 * C8006) * C109463 +
           (C188 * C8128 + C141309 * C8684) * C109358 +
           (C188 * C13303 + C141309 * C13394) * C109464 +
           (C188 * C13477 + C141309 * C13876) * C109359 +
           (C188 * C65157 + C141309 * C65267) * C109465 +
           (C188 * C65391 + C141309 * C65959) * C109360) *
              C141216 * C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eezz[112] +=
        (-std::pow(Pi, 2.5) *
         (((C94623 * C108 + C94626 + C94626 + C93949 * C714 + C94624 * C1601 +
            C94627 + C94627 + C141384 * C2283) *
               C5865 +
           (C103276 + C103277) * C5866 + C105807 * C5867) *
              C141216 * C141294 * C2956 -
          ((C105818 + C105819) * C5867 + (C103279 + C103278) * C5866 +
           (C103277 + C103276) * C5865) *
              C141216 * C141294 * C2957 +
          (C105807 * C5865 + (C105819 + C105818) * C5866 +
           (C94623 * C9768 + C105812 + C105812 + C93949 * C10444 +
            C94624 * C58454 + C105813 + C105813 + C141384 * C59065) *
               C5867) *
              C141216 * C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C94623 * C108 + C94626 + C94626 + C93949 * C714 + C94624 * C1601 +
            C94627 + C94627 + C141384 * C2283) *
               C141309 * C47707 +
           (C94660 + C94661) * C141309 * C47708 + C94667 * C47709) *
              C141294 * C2956 -
          ((C95618 + C95619) * C141309 * C47709 +
           (C95620 + C95621) * C141309 * C47708 +
           (C94624 * C3490 + C95606 + C95606 + C141384 * C4074 + C94623 * C823 +
            C95607 + C95607 + C93949 * C1505) *
               C141309 * C47707) *
              C141294 * C2957 +
          ((C94623 * C2960 + C98229 + C98229 + C93949 * C3416 + C94624 * C7887 +
            C98230 + C98230 + C141384 * C8794) *
               C141309 * C47707 +
           (C94623 * C2961 + C98231 + C98231 + C93949 * C3417 + C94624 * C7886 +
            C98232 + C98232 + C141384 * C8793) *
               C141309 * C47708 +
           (C94623 * C2962 + C98233 + C98233 + C93949 * C3418 + C94624 * C7888 +
            C98234 + C98234 + C141384 * C8795) *
               C141309 * C47709) *
              C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((C109766 * C108 + C109771 + C109771 + C109357 * C714 +
           C109767 * C1601 + C109772 + C109772 + C109358 * C2283 +
           C109768 * C5325 + C109773 + C109773 + C109359 * C5781 +
           C109769 * C15862 + C109774 + C109774 + C109360 * C16900) *
              C141309 * C141216 * C141294 * C2956 -
          (C109769 * C18582 + C110377 + C110377 + C109360 * C19462 +
           C109768 * C13301 + C110378 + C110378 + C109359 * C13953 +
           C109767 * C3490 + C110379 + C110379 + C109358 * C4074 +
           C109766 * C823 + C110380 + C110380 + C109357 * C1505) *
              C141309 * C141216 * C141294 * C2957 +
          (C109766 * C2960 + C112077 + C112077 + C109357 * C3416 +
           C109767 * C7887 + C112078 + C112078 + C109358 * C8794 +
           C109768 * C13303 + C112079 + C112079 + C109359 * C13954 +
           C109769 * C65157 + C112080 + C112080 + C109360 * C66070) *
              C141309 * C141216 * C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eexx[113] +=
        (-std::pow(Pi, 2.5) *
         (((((C55526 * C108 + C55529 + C55529 + C141216 * C120) * C93949 +
             C62512 * C141384) *
                C5865 +
            (C102386 + C102387) * C5866 + C105178 * C5867) *
               C1596 -
           ((C105918 + C105919) * C5867 + (C105920 + C105921) * C5866 +
            (C62513 * C141384 + C62512 * C93949) * C5865) *
               C141487) *
              C2374 +
          (((C105921 + C105920) * C5865 + (C105919 + C105918) * C5866 +
            (C58471 * C93949 +
             (C55526 * C60310 + C60317 + C60317 + C141216 * C60312) * C141384) *
                C5867) *
               C141487 -
           ((C105179 + C105180) * C5867 + (C102389 + C102388) * C5866 +
            (C102387 + C102386) * C5865) *
               C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47712 * C108 + C47719 + C47719 + C47707 * C120 + C47714 * C109 +
             C47720 + C47720 + C47708 * C121 + C47716 * C110 + C47721 + C47721 +
             C47709 * C122) *
                C93949 +
            (C95747 + C95748 + C95749) * C141384) *
               C141309 * C1596 -
           ((C47716 * C5327 + C54870 + C54870 + C47709 * C5335 +
             C47714 * C5326 + C54869 + C54869 + C47708 * C5334 +
             C47712 * C5325 + C54868 + C54868 + C47707 * C5333) *
                C141384 +
            (C95749 + C95748 + C95747) * C93949) *
               C141309 * C141487) *
              C2374 +
          (((C52206 + C52205 + C52204) * C93949 +
            (C47712 * C13301 + C54871 + C54871 + C47707 * C13309 +
             C47714 * C13302 + C54872 + C54872 + C47708 * C13310 +
             C47716 * C14876 + C54873 + C54873 + C47709 * C14878) *
                C141384) *
               C141309 * C141487 -
           ((C52204 + C52205 + C52206) * C141384 +
            (C48586 + C48585 + C48584) * C93949) *
               C141309 * C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C55526 * C108 + C55529 + C55529 + C141216 * C120) * C109357 +
            C62512 * C109358 + C62513 * C109359 + C67937 * C109360) *
               C141309 * C1596 -
           ((C55526 * C21308 + C67933 + C67933 + C141216 * C21312) * C109360 +
            C67937 * C109359 + C62513 * C109358 + C62512 * C109357) *
               C141309 * C141487) *
              C2374 +
          ((C58473 * C109357 + C61519 * C109358 + C65168 * C109359 +
            (C55526 * C67927 + C67934 + C67934 + C141216 * C67929) * C109360) *
               C141309 * C141487 -
           (C65168 * C109360 + C61519 * C109359 + C58473 * C109358 +
            C56053 * C109357) *
               C141309 * C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eexy[113] +=
        (-std::pow(Pi, 2.5) *
         (((((C5964 * C108 + C5865 * C189 + C5965 * C823 + C5866 * C912 +
              C5966 * C2960 + C5867 * C3026) *
                 C55527 +
             (C5964 * C114 + C5865 * C195 + C5965 * C828 + C5866 * C917 +
              C5966 * C2964 + C5867 * C3030) *
                 C141216) *
                C93949 +
            ((C103490 + C103491 + C103492) * C55527 +
             (C103493 + C103494 + C103495) * C141216) *
                C141384) *
               C1596 -
           (((C5966 * C13307 + C5867 * C13398 + C5965 * C13305 +
              C5866 * C13397 + C5964 * C5329 + C5865 * C5395) *
                 C141216 +
             (C5966 * C13303 + C5867 * C13394 + C5965 * C13301 +
              C5866 * C13393 + C5964 * C5325 + C5865 * C5391) *
                 C55527) *
                C141384 +
            ((C103495 + C103494 + C103493) * C141216 +
             (C103492 + C103491 + C103490) * C55527) *
                C93949) *
               C141487) *
              C2374 +
          ((((C106032 + C106033 + C106034) * C55527 +
             (C106035 + C106036 + C106037) * C141216) *
                C93949 +
            ((C5964 * C13301 + C5865 * C13393 + C5965 * C13303 +
              C5866 * C13394 + C5966 * C60310 + C5867 * C60367) *
                 C55527 +
             (C5964 * C13305 + C5865 * C13397 + C5965 * C13307 +
              C5866 * C13398 + C5966 * C60311 + C5867 * C60368) *
                 C141216) *
                C141384) *
               C141487 -
           (((C106037 + C106036 + C106035) * C141216 +
             (C106034 + C106033 + C106032) * C55527) *
                C141384 +
            ((C5966 * C6732 + C5867 * C6883 + C5965 * C2964 + C5866 * C3030 +
              C5964 * C828 + C5865 * C917) *
                 C141216 +
             (C5966 * C6729 + C5867 * C6880 + C5965 * C2960 + C5866 * C3026 +
              C5964 * C823 + C5865 * C912) *
                 C55527) *
                C93949) *
               C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141309 * C189) * C47713 +
             (C188 * C114 + C141309 * C195) * C47707 + C218 * C47715 +
             C219 * C47708 + C220 * C47717 + C221 * C47709) *
                C93949 +
            (C95851 + C95852 + C95853 + C95854 + C95855 + C95856) * C141384) *
               C1596 -
           ((C14129 * C47709 + C14130 * C47717 + C14128 * C47708 +
             C14127 * C47715 + C16046 * C47707 + C16045 * C47713) *
                C141384 +
            (C95856 + C95855 + C95854 + C95853 + C95852 + C95851) * C93949) *
               C141487) *
              C2374 +
          (((C98431 + C98432 + C98433 + C98434 + C98435 + C98436) * C93949 +
            (C18717 * C47713 + C18718 * C47707 + C14991 * C47715 +
             C14990 * C47708 + (C188 * C14876 + C141309 * C14979) * C47717 +
             (C188 * C14877 + C141309 * C14980) * C47709) *
                C141384) *
               C141487 -
           ((C98436 + C98435 + C98434 + C98433 + C98432 + C98431) * C141384 +
            (C934 * C47709 + C935 * C47717 + C936 * C47708 + C937 * C47715 +
             (C188 * C828 + C141309 * C917) * C47707 +
             (C188 * C823 + C141309 * C912) * C47713) *
                C93949) *
               C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141309 * C189) * C55527 +
             (C188 * C114 + C141309 * C195) * C141216) *
                C109357 +
            (C110523 + C110524) * C109358 + (C110525 + C110526) * C109359 +
            (C110527 + C110528) * C109360) *
               C1596 -
           (((C188 * C21310 + C141309 * C21403) * C141216 +
             (C188 * C21308 + C141309 * C21401) * C55527) *
                C109360 +
            (C110528 + C110527) * C109359 + (C110526 + C110525) * C109358 +
            (C110524 + C110523) * C109357) *
               C141487) *
              C2374 +
          (((C112213 + C112214) * C109357 + (C112215 + C112216) * C109358 +
            (C112223 + C112224) * C109359 +
            ((C188 * C67927 + C141309 * C68011) * C55527 +
             (C188 * C67928 + C141309 * C68012) * C141216) *
                C109360) *
               C141487 -
           ((C112224 + C112223) * C109360 + (C112216 + C112215) * C109359 +
            (C112214 + C112213) * C109358 +
            ((C188 * C828 + C141309 * C917) * C141216 +
             (C188 * C823 + C141309 * C912) * C55527) *
                C109357) *
               C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eexz[113] +=
        (-std::pow(Pi, 2.5) *
         (((((C94102 * C108 + C93949 * C276 + C94103 * C1601 +
              C141384 * C1784) *
                 C55527 +
             (C94102 * C114 + C93949 * C282 + C94103 * C1606 +
              C141384 * C1789) *
                 C141216) *
                C5865 +
            ((C102614 + C102615) * C55527 + (C102616 + C102617) * C141216) *
                C5866 +
            C105345 * C5867) *
               C1596 -
           (((C106152 + C106153) * C141216 + (C106154 + C106155) * C55527) *
                C5867 +
            ((C106156 + C106157) * C141216 + (C106158 + C106159) * C55527) *
                C5866 +
            ((C94103 * C5329 + C141384 * C5453 + C94102 * C1606 +
              C93949 * C1789) *
                 C141216 +
             (C94103 * C5325 + C141384 * C5449 + C94102 * C1601 +
              C93949 * C1784) *
                 C55527) *
                C5865) *
               C141487) *
              C2374 +
          ((((C106159 + C106158) * C55527 + (C106157 + C106156) * C141216) *
                C5865 +
            ((C106155 + C106154) * C55527 + (C106153 + C106152) * C141216) *
                C5866 +
            ((C94102 * C10551 + C93949 * C10779 + C94103 * C60310 +
              C141384 * C60419) *
                 C55527 +
             (C94102 * C10553 + C93949 * C10781 + C94103 * C60311 +
              C141384 * C60420) *
                 C141216) *
                C5867) *
               C141487 -
           (((C105341 + C105342) * C141216 + (C105343 + C105344) * C55527) *
                C5867 +
            ((C102621 + C102620) * C141216 + (C102619 + C102618) * C55527) *
                C5866 +
            ((C102617 + C102616) * C141216 + (C102615 + C102614) * C55527) *
                C5865) *
               C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C94102 * C108 + C93949 * C276 + C94103 * C1601 + C141384 * C1784) *
                C47713 +
            (C94102 * C114 + C93949 * C282 + C94103 * C1606 + C141384 * C1789) *
                C47707 +
            (C94129 + C94130) * C47715 + (C94131 + C94132) * C47708 +
            C94141 * C47717 + C94142 * C47709) *
               C141309 * C1596 -
           ((C95977 + C95978) * C47709 + (C95979 + C95980) * C47717 +
            (C95981 + C95982) * C47708 + (C95983 + C95984) * C47715 +
            (C94103 * C5329 + C141384 * C5453 + C94102 * C1606 +
             C93949 * C1789) *
                C47707 +
            (C94103 * C5325 + C141384 * C5449 + C94102 * C1601 +
             C93949 * C1784) *
                C47713) *
               C141309 * C141487) *
              C2374 +
          (((C94102 * C3490 + C93949 * C3646 + C94103 * C13301 +
             C141384 * C13475) *
                C47713 +
            (C94102 * C3494 + C93949 * C3650 + C94103 * C13305 +
             C141384 * C13479) *
                C47707 +
            (C94102 * C3491 + C93949 * C3647 + C94103 * C13302 +
             C141384 * C13476) *
                C47715 +
            (C94102 * C3495 + C93949 * C3651 + C94103 * C13306 +
             C141384 * C13480) *
                C47708 +
            (C94102 * C3492 + C93949 * C3648 + C94103 * C14876 +
             C141384 * C15091) *
                C47717 +
            (C94102 * C3496 + C93949 * C3652 + C94103 * C14877 +
             C141384 * C15092) *
                C47709) *
               C141309 * C141487 -
           ((C94978 + C94979) * C47709 + (C94980 + C94981) * C47717 +
            (C94982 + C94983) * C47708 + (C94984 + C94985) * C47715 +
            (C94103 * C3494 + C141384 * C3650 + C94102 * C828 +
             C93949 * C1011) *
                C47707 +
            (C94103 * C3490 + C141384 * C3646 + C94102 * C823 +
             C93949 * C1006) *
                C47713) *
               C141309 * C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C109462 * C108 + C109357 * C276 + C109463 * C1601 +
             C109358 * C1784 + C109464 * C5325 + C109359 * C5449 +
             C109465 * C15862 + C109360 * C16151) *
                C55527 +
            (C109462 * C114 + C109357 * C282 + C109463 * C1606 +
             C109358 * C1789 + C109464 * C5329 + C109359 * C5453 +
             C109465 * C15865 + C109360 * C16154) *
                C141216) *
               C141309 * C1596 -
           ((C109465 * C21310 + C109360 * C21494 + C109464 * C15865 +
             C109359 * C16154 + C109463 * C5329 + C109358 * C5453 +
             C109462 * C1606 + C109357 * C1789) *
                C141216 +
            (C109465 * C21308 + C109360 * C21492 + C109464 * C15862 +
             C109359 * C16151 + C109463 * C5325 + C109358 * C5449 +
             C109462 * C1601 + C109357 * C1784) *
                C55527) *
               C141309 * C141487) *
              C2374 +
          (((C109462 * C3490 + C109357 * C3646 + C109463 * C13301 +
             C109358 * C13475 + C109464 * C18582 + C109359 * C18820 +
             C109465 * C67927 + C109360 * C68104) *
                C55527 +
            (C109462 * C3494 + C109357 * C3650 + C109463 * C13305 +
             C109358 * C13479 + C109464 * C18584 + C109359 * C18822 +
             C109465 * C67928 + C109360 * C68105) *
                C141216) *
               C141309 * C141487 -
           ((C109465 * C18584 + C109360 * C18822 + C109464 * C13305 +
             C109359 * C13479 + C109463 * C3494 + C109358 * C3650 +
             C109462 * C828 + C109357 * C1011) *
                C141216 +
            (C109465 * C18582 + C109360 * C18820 + C109464 * C13301 +
             C109359 * C13475 + C109463 * C3490 + C109358 * C3646 +
             C109462 * C823 + C109357 * C1006) *
                C55527) *
               C141309 * C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eeyx[113] +=
        (-std::pow(Pi, 2.5) *
         (((((C55527 * C108 + C141216 * C114) * C5964 +
             (C55527 * C189 + C141216 * C362) * C5865 + C56299 * C5965 +
             C56300 * C5866 + C56301 * C5966 + C56302 * C5867) *
                C93949 +
            (C103692 + C103693 + C103694 + C103695 + C103696 + C103697) *
                C141384) *
               C1596 -
           ((C64648 * C5867 + C64649 * C5966 + C61850 * C5866 + C61849 * C5965 +
             C62873 * C5865 + C62872 * C5964) *
                C141384 +
            (C103697 + C103696 + C103695 + C103694 + C103693 + C103692) *
                C93949) *
               C141487) *
              C2374 +
          (((C106258 + C106259 + C106260 + C106261 + C106262 + C106263) *
                C93949 +
            (C61849 * C5964 + C61850 * C5865 + C64649 * C5965 + C64648 * C5866 +
             (C55527 * C60310 + C141216 * C60311) * C5966 +
             (C55527 * C60367 + C141216 * C60471) * C5867) *
                C141384) *
               C141487 -
           ((C106263 + C106262 + C106261 + C106260 + C106259 + C106258) *
                C141384 +
            (C56304 * C5867 + C56303 * C5966 + C56302 * C5866 + C56301 * C5965 +
             C56300 * C5865 + C56299 * C5964) *
                C93949) *
               C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47713 * C108 + C47707 * C114 + C47715 * C109 + C47708 * C115 +
              C47717 * C110 + C47709 * C116) *
                 C188 +
             (C47713 * C189 + C47707 * C362 + C47715 * C190 + C47708 * C363 +
              C47717 * C191 + C47709 * C364) *
                 C141309) *
                C93949 +
            ((C96107 + C96108 + C96109) * C188 +
             (C96110 + C96111 + C96112) * C141309) *
                C141384) *
               C1596 -
           (((C47717 * C5393 + C47709 * C5509 + C47715 * C5392 +
              C47708 * C5508 + C47713 * C5391 + C47707 * C5507) *
                 C141309 +
             (C47717 * C5327 + C47709 * C5331 + C47715 * C5326 +
              C47708 * C5330 + C47713 * C5325 + C47707 * C5329) *
                 C188) *
                C141384 +
            ((C96112 + C96111 + C96110) * C141309 +
             (C96109 + C96108 + C96107) * C188) *
                C93949) *
               C141487) *
              C2374 +
          ((((C52524 + C52523 + C52522) * C188 +
             (C52521 + C52520 + C52519) * C141309) *
                C93949 +
            ((C47713 * C13301 + C47707 * C13305 + C47715 * C13302 +
              C47708 * C13306 + C47717 * C14876 + C47709 * C14877) *
                 C188 +
             (C47713 * C13393 + C47707 * C13557 + C47715 * C13395 +
              C47708 * C13558 + C47717 * C14979 + C47709 * C15209) *
                 C141309) *
                C141384) *
               C141487 -
           (((C52519 + C52520 + C52521) * C141309 +
             (C52522 + C52523 + C52524) * C188) *
                C141384 +
            ((C48949 + C48948 + C48947) * C141309 +
             (C48946 + C48945 + C48944) * C188) *
                C93949) *
               C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C55527 * C108 + C141216 * C114) * C188 +
             (C55527 * C189 + C141216 * C362) * C141309) *
                C109357 +
            (C110667 + C110668) * C109358 + (C110669 + C110670) * C109359 +
            (C110671 + C110672) * C109360) *
               C1596 -
           (((C55527 * C21401 + C141216 * C21570) * C141309 +
             (C55527 * C21308 + C141216 * C21310) * C188) *
                C109360 +
            (C110672 + C110671) * C109359 + (C110670 + C110669) * C109358 +
            (C110668 + C110667) * C109357) *
               C141487) *
              C2374 +
          (((C112357 + C112358) * C109357 + (C112359 + C112360) * C109358 +
            (C112361 + C112362) * C109359 +
            ((C55527 * C67927 + C141216 * C67928) * C188 +
             (C55527 * C68011 + C141216 * C68180) * C141309) *
                C109360) *
               C141487 -
           ((C112362 + C112361) * C109360 + (C112360 + C112359) * C109359 +
            (C112358 + C112357) * C109358 +
            (C56300 * C141309 + C56299 * C188) * C109357) *
               C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eeyy[113] +=
        (-std::pow(Pi, 2.5) *
         ((((C6237 * C108 + C6241 + C6241 + C5865 * C419 + C6238 * C823 +
             C6242 + C6242 + C5866 * C1171 + C6239 * C2960 + C6243 + C6243 +
             C5867 * C3196) *
                C141216 * C93949 +
            (C103814 + C103815 + C103816) * C141216 * C141384) *
               C1596 -
           ((C6239 * C13303 + C13642 + C13642 + C5867 * C13636 +
             C6238 * C13301 + C13641 + C13641 + C5866 * C13635 + C6237 * C5325 +
             C13640 + C13640 + C5865 * C5561) *
                C141216 * C141384 +
            (C103816 + C103815 + C103814) * C141216 * C93949) *
               C141487) *
              C2374 +
          (((C106377 + C106378 + C106379) * C141216 * C93949 +
            (C6237 * C13301 + C106368 + C106368 + C5865 * C13635 +
             C6238 * C13303 + C106369 + C106369 + C5866 * C13636 +
             C6239 * C60310 + C106370 + C106370 + C5867 * C60522) *
                C141216 * C141384) *
               C141487 -
           ((C106379 + C106378 + C106377) * C141216 * C141384 +
            (C6239 * C6729 + C7301 + C7301 + C5867 * C7289 + C6238 * C2960 +
             C7302 + C7302 + C5866 * C3196 + C6237 * C823 + C7303 + C7303 +
             C5865 * C1171) *
                C141216 * C93949) *
               C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C418 * C108 + C426 + C426 + C141309 * C419) * C47707 +
             C448 * C47708 + C449 * C47709) *
                C93949 +
            (C96217 + C96218 + C96219) * C141384) *
               C1596 -
           ((C14401 * C47709 + C14400 * C47708 + C16447 * C47707) * C141384 +
            (C96219 + C96218 + C96217) * C93949) *
               C141487) *
              C2374 +
          (((C98731 + C98732 + C98733) * C93949 +
            (C19050 * C47707 + C15321 * C47708 +
             (C418 * C14876 + C15316 + C15316 + C141309 * C15308) * C47709) *
                C141384) *
               C141487 -
           ((C98733 + C98732 + C98731) * C141384 +
            (C1192 * C47709 + C1193 * C47708 +
             (C418 * C823 + C1183 + C1183 + C141309 * C1171) * C47707) *
                C93949) *
               C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C418 * C108 + C426 + C426 + C141309 * C419) * C141216 * C109357 +
            C110751 * C109358 + C110752 * C109359 + C110753 * C109360) *
               C1596 -
           ((C418 * C21308 + C21670 + C21670 + C141309 * C21663) * C141216 *
                C109360 +
            C110753 * C109359 + C110752 * C109358 + C110751 * C109357) *
               C141487) *
              C2374 +
          ((C112429 * C109357 + C112430 * C109358 + C112437 * C109359 +
            (C418 * C67927 + C112433 + C112433 + C141309 * C68268) * C141216 *
                C109360) *
               C141487 -
           (C112437 * C109360 + C112430 * C109359 + C112429 * C109358 +
            (C418 * C823 + C1183 + C1183 + C141309 * C1171) * C141216 *
                C109357) *
               C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eeyz[113] +=
        (-std::pow(Pi, 2.5) *
         ((((C94102 * C108 + C93949 * C276 + C94103 * C1601 + C141384 * C1784) *
                C5964 +
            (C94102 * C189 + C93949 * C501 + C94103 * C1690 + C141384 * C2040) *
                C5865 +
            (C102614 + C102615) * C5965 + (C102932 + C102933) * C5866 +
            C105329 * C5966 + C105571 * C5867) *
               C141216 * C1596 -
           ((C106486 + C106487) * C5867 + (C106154 + C106155) * C5966 +
            (C106488 + C106489) * C5866 + (C106158 + C106159) * C5965 +
            (C94103 * C5391 + C141384 * C5619 + C94102 * C1690 +
             C93949 * C2040) *
                C5865 +
            (C94103 * C5325 + C141384 * C5449 + C94102 * C1601 +
             C93949 * C1784) *
                C5964) *
               C141216 * C141487) *
              C2374 +
          (((C106159 + C106158) * C5964 + (C106489 + C106488) * C5865 +
            (C106155 + C106154) * C5965 + (C106487 + C106486) * C5866 +
            (C94102 * C10551 + C93949 * C10779 + C94103 * C60310 +
             C141384 * C60419) *
                C5966 +
            (C94102 * C10677 + C93949 * C11131 + C94103 * C60367 +
             C141384 * C60577) *
                C5867) *
               C141216 * C141487 -
           ((C105576 + C105577) * C5867 + (C105343 + C105344) * C5966 +
            (C102935 + C102934) * C5866 + (C102619 + C102618) * C5965 +
            (C102933 + C102932) * C5865 + (C102615 + C102614) * C5964) *
               C141216 * C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C94102 * C108 + C93949 * C276 + C94103 * C1601 +
              C141384 * C1784) *
                 C188 +
             (C94102 * C189 + C93949 * C501 + C94103 * C1690 +
              C141384 * C2040) *
                 C141309) *
                C47707 +
            ((C94129 + C94130) * C188 + (C94378 + C94379) * C141309) * C47708 +
            C94386 * C47709) *
               C1596 -
           (((C96329 + C96330) * C141309 + (C95979 + C95980) * C188) * C47709 +
            ((C96331 + C96332) * C141309 + (C95983 + C95984) * C188) * C47708 +
            ((C94103 * C5391 + C141384 * C5619 + C94102 * C1690 +
              C93949 * C2040) *
                 C141309 +
             (C94103 * C5325 + C141384 * C5449 + C94102 * C1601 +
              C93949 * C1784) *
                 C188) *
                C47707) *
               C141487) *
              C2374 +
          ((((C94102 * C3490 + C93949 * C3646 + C94103 * C13301 +
              C141384 * C13475) *
                 C188 +
             (C94102 * C3572 + C93949 * C3864 + C94103 * C13393 +
              C141384 * C13719) *
                 C141309) *
                C47707 +
            ((C94102 * C3491 + C93949 * C3647 + C94103 * C13302 +
              C141384 * C13476) *
                 C188 +
             (C94102 * C3573 + C93949 * C3865 + C94103 * C13395 +
              C141384 * C13721) *
                 C141309) *
                C47708 +
            ((C94102 * C3492 + C93949 * C3648 + C94103 * C14876 +
              C141384 * C15091) *
                 C188 +
             (C94102 * C3574 + C93949 * C3866 + C94103 * C14979 +
              C141384 * C15420) *
                 C141309) *
                C47709) *
               C141487 -
           (((C95288 + C95289) * C141309 + (C94980 + C94981) * C188) * C47709 +
            ((C95290 + C95291) * C141309 + (C94984 + C94985) * C188) * C47708 +
            ((C94103 * C3572 + C141384 * C3864 + C94102 * C912 +
              C93949 * C1262) *
                 C141309 +
             (C94103 * C3490 + C141384 * C3646 + C94102 * C823 +
              C93949 * C1006) *
                 C188) *
                C47707) *
               C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C109462 * C108 + C109357 * C276 + C109463 * C1601 +
             C109358 * C1784 + C109464 * C5325 + C109359 * C5449 +
             C109465 * C15862 + C109360 * C16151) *
                C188 +
            (C109462 * C189 + C109357 * C501 + C109463 * C1690 +
             C109358 * C2040 + C109464 * C5391 + C109359 * C5619 +
             C109465 * C16013 + C109360 * C16549) *
                C141309) *
               C141216 * C1596 -
           ((C109465 * C21401 + C109360 * C21749 + C109464 * C16013 +
             C109359 * C16549 + C109463 * C5391 + C109358 * C5619 +
             C109462 * C1690 + C109357 * C2040) *
                C141309 +
            (C109465 * C21308 + C109360 * C21492 + C109464 * C15862 +
             C109359 * C16151 + C109463 * C5325 + C109358 * C5449 +
             C109462 * C1601 + C109357 * C1784) *
                C188) *
               C141216 * C141487) *
              C2374 +
          (((C109462 * C3490 + C109357 * C3646 + C109463 * C13301 +
             C109358 * C13475 + C109464 * C18582 + C109359 * C18820 +
             C109465 * C67927 + C109360 * C68104) *
                C188 +
            (C109462 * C3572 + C109357 * C3864 + C109463 * C13393 +
             C109358 * C13719 + C109464 * C18698 + C109359 * C19150 +
             C109465 * C68011 + C109360 * C68357) *
                C141309) *
               C141216 * C141487 -
           ((C109465 * C18698 + C109360 * C19150 + C109464 * C13393 +
             C109359 * C13719 + C109463 * C3572 + C109358 * C3864 +
             C109462 * C912 + C109357 * C1262) *
                C141309 +
            (C109465 * C18582 + C109360 * C18820 + C109464 * C13301 +
             C109359 * C13475 + C109463 * C3490 + C109358 * C3646 +
             C109462 * C823 + C109357 * C1006) *
                C188) *
               C141216 * C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eezx[113] +=
        (-std::pow(Pi, 2.5) *
         (((((C55527 * C108 + C141216 * C114) * C94102 +
             (C55527 * C276 + C141216 * C579) * C93949 + C62870 * C94103 +
             C63222 * C141384) *
                C5865 +
            (C103036 + C103037 + C103038 + C103039) * C5866 + C105658 * C5867) *
               C1596 -
           ((C106588 + C106589 + C106590 + C106591) * C5867 +
            (C106592 + C106593 + C106594 + C106595) * C5866 +
            (C63223 * C141384 + C62872 * C94103 + C63222 * C93949 +
             C62870 * C94102) *
                C5865) *
               C141487) *
              C2374 +
          (((C106595 + C106594 + C106593 + C106592) * C5865 +
            (C106591 + C106590 + C106589 + C106588) * C5866 +
            (C58705 * C94102 + C58927 * C93949 +
             (C55527 * C60310 + C141216 * C60311) * C94103 +
             (C55527 * C60419 + C141216 * C60628) * C141384) *
                C5867) *
               C141487 -
           ((C105653 + C105654 + C105655 + C105656) * C5867 +
            (C103043 + C103042 + C103041 + C103040) * C5866 +
            (C103039 + C103038 + C103037 + C103036) * C5865) *
               C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47713 * C108 + C47707 * C114 + C47715 * C109 + C47708 * C115 +
             C47717 * C110 + C47709 * C116) *
                C94102 +
            (C47713 * C276 + C47707 * C579 + C47715 * C277 + C47708 * C580 +
             C47717 * C278 + C47709 * C581) *
                C93949 +
            (C96107 + C96108 + C96109) * C94103 +
            (C96443 + C96444 + C96445) * C141384) *
               C141309 * C1596 -
           ((C47717 * C5451 + C47709 * C5675 + C47715 * C5450 + C47708 * C5674 +
             C47713 * C5449 + C47707 * C5673) *
                C141384 +
            (C47717 * C5327 + C47709 * C5331 + C47715 * C5326 + C47708 * C5330 +
             C47713 * C5325 + C47707 * C5329) *
                C94103 +
            (C96445 + C96444 + C96443) * C93949 +
            (C96109 + C96108 + C96107) * C94102) *
               C141309 * C141487) *
              C2374 +
          (((C52524 + C52523 + C52522) * C94102 +
            (C52833 + C52832 + C52831) * C93949 +
            (C47713 * C13301 + C47707 * C13305 + C47715 * C13302 +
             C47708 * C13306 + C47717 * C14876 + C47709 * C14877) *
                C94103 +
            (C47713 * C13475 + C47707 * C13797 + C47715 * C13476 +
             C47708 * C13798 + C47717 * C15091 + C47709 * C15528) *
                C141384) *
               C141309 * C141487 -
           ((C52831 + C52832 + C52833) * C141384 +
            (C52522 + C52523 + C52524) * C94103 +
            (C49300 + C49299 + C49298) * C93949 +
            (C48946 + C48945 + C48944) * C94102) *
               C141309 * C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C55527 * C108 + C141216 * C114) * C109462 +
            (C55527 * C276 + C141216 * C579) * C109357 + C62870 * C109463 +
            C63222 * C109358 + C62872 * C109464 + C63223 * C109359 +
            C68191 * C109465 + C68436 * C109360) *
               C141309 * C1596 -
           ((C55527 * C21492 + C141216 * C21825) * C109360 +
            (C55527 * C21308 + C141216 * C21310) * C109465 + C68436 * C109359 +
            C68191 * C109464 + C63223 * C109358 + C62872 * C109463 +
            C63222 * C109357 + C62870 * C109462) *
               C141309 * C141487) *
              C2374 +
          ((C58709 * C109462 + C58929 * C109357 + C61849 * C109463 +
            C62177 * C109358 + C65524 * C109464 + C65860 * C109359 +
            (C55527 * C67927 + C141216 * C67928) * C109465 +
            (C55527 * C68104 + C141216 * C68432) * C109360) *
               C141309 * C141487 -
           (C65860 * C109360 + C65524 * C109465 + C62177 * C109359 +
            C61849 * C109464 + C58929 * C109358 + C58709 * C109463 +
            C56535 * C109357 + C56299 * C109462) *
               C141309 * C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eezy[113] +=
        (-std::pow(Pi, 2.5) *
         ((((C5964 * C108 + C5865 * C189 + C5965 * C823 + C5866 * C912 +
             C5966 * C2960 + C5867 * C3026) *
                C94102 +
            (C5964 * C276 + C5865 * C635 + C5965 * C1006 + C5866 * C1419 +
             C5966 * C3084 + C5867 * C3362) *
                C93949 +
            (C103490 + C103491 + C103492) * C94103 +
            (C104117 + C104118 + C104119) * C141384) *
               C141216 * C1596 -
           ((C5966 * C13477 + C5867 * C13876 + C5965 * C13475 + C5866 * C13875 +
             C5964 * C5449 + C5865 * C5727) *
                C141384 +
            (C5966 * C13303 + C5867 * C13394 + C5965 * C13301 + C5866 * C13393 +
             C5964 * C5325 + C5865 * C5391) *
                C94103 +
            (C104119 + C104118 + C104117) * C93949 +
            (C103492 + C103491 + C103490) * C94102) *
               C141216 * C141487) *
              C2374 +
          (((C106032 + C106033 + C106034) * C94102 +
            (C106700 + C106701 + C106702) * C93949 +
            (C5964 * C13301 + C5865 * C13393 + C5965 * C13303 + C5866 * C13394 +
             C5966 * C60310 + C5867 * C60367) *
                C94103 +
            (C5964 * C13475 + C5865 * C13875 + C5965 * C13477 + C5866 * C13876 +
             C5966 * C60419 + C5867 * C60679) *
                C141384) *
               C141216 * C141487 -
           ((C106702 + C106701 + C106700) * C141384 +
            (C106034 + C106033 + C106032) * C94103 +
            (C5966 * C7002 + C5867 * C7655 + C5965 * C3084 + C5866 * C3362 +
             C5964 * C1006 + C5865 * C1419) *
                C93949 +
            (C5966 * C6729 + C5867 * C6880 + C5965 * C2960 + C5866 * C3026 +
             C5964 * C823 + C5865 * C912) *
                C94102) *
               C141216 * C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141309 * C189) * C94102 +
             (C188 * C276 + C141309 * C635) * C93949 + C16043 * C94103 +
             C16798 * C141384) *
                C47707 +
            (C94535 + C94536 + C94537 + C94538) * C47708 + C94549 * C47709) *
               C1596 -
           ((C96547 + C96548 + C96549 + C96550) * C47709 +
            (C96551 + C96552 + C96553 + C96554) * C47708 +
            (C16799 * C141384 + C16045 * C94103 + C16798 * C93949 +
             C16043 * C94102) *
                C47707) *
               C141487) *
              C2374 +
          (((C18715 * C94102 + C19363 * C93949 + C18717 * C94103 +
             C19364 * C141384) *
                C47707 +
            (C14993 * C94102 + C15638 * C93949 + C14991 * C94103 +
             C15637 * C141384) *
                C47708 +
            (C30842 * C94102 + C31481 * C93949 +
             (C188 * C14876 + C141309 * C14979) * C94103 +
             (C188 * C15091 + C141309 * C15627) * C141384) *
                C47709) *
               C141487 -
           ((C95488 + C95489 + C95490 + C95491) * C47709 +
            (C95492 + C95493 + C95494 + C95495) * C47708 +
            (C19363 * C141384 + C18715 * C94103 +
             (C188 * C1006 + C141309 * C1419) * C93949 +
             (C188 * C823 + C141309 * C912) * C94102) *
                C47707) *
               C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141309 * C189) * C109462 +
            (C188 * C276 + C141309 * C635) * C109357 + C16043 * C109463 +
            C16798 * C109358 + C16045 * C109464 + C16799 * C109359 +
            C21415 * C109465 + C21913 * C109360) *
               C141216 * C1596 -
           ((C188 * C21492 + C141309 * C21908) * C109360 +
            (C188 * C21308 + C141309 * C21401) * C109465 + C21913 * C109359 +
            C21415 * C109464 + C16799 * C109358 + C16045 * C109463 +
            C16798 * C109357 + C16043 * C109462) *
               C141216 * C141487) *
              C2374 +
          ((C18715 * C109462 + C19363 * C109357 + C18717 * C109463 +
            C19364 * C109358 + C112221 * C109464 + C112638 * C109359 +
            (C188 * C67927 + C141309 * C68011) * C109465 +
            (C188 * C68104 + C141309 * C68510) * C109360) *
               C141216 * C141487 -
           (C112638 * C109360 + C112221 * C109465 + C19364 * C109359 +
            C18717 * C109464 + C19363 * C109358 + C18715 * C109463 +
            (C188 * C1006 + C141309 * C1419) * C109357 +
            (C188 * C823 + C141309 * C912) * C109462) *
               C141216 * C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eezz[113] +=
        (-std::pow(Pi, 2.5) *
         ((((C94623 * C108 + C94626 + C94626 + C93949 * C714 + C94624 * C1601 +
             C94627 + C94627 + C141384 * C2283) *
                C5865 +
            (C103276 + C103277) * C5866 + C105807 * C5867) *
               C141216 * C1596 -
           ((C106819 + C106820) * C5867 + (C106821 + C106822) * C5866 +
            (C94624 * C5325 + C96665 + C96665 + C141384 * C5781 +
             C94623 * C1601 + C96666 + C96666 + C93949 * C2283) *
                C5865) *
               C141216 * C141487) *
              C2374 +
          (((C106822 + C106821) * C5865 + (C106820 + C106819) * C5866 +
            (C94623 * C10551 + C106809 + C106809 + C93949 * C11449 +
             C94624 * C60310 + C106810 + C106810 + C141384 * C60730) *
                C5867) *
               C141216 * C141487 -
           ((C105818 + C105819) * C5867 + (C103279 + C103278) * C5866 +
            (C103277 + C103276) * C5865) *
               C141216 * C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C94623 * C108 + C94626 + C94626 + C93949 * C714 + C94624 * C1601 +
             C94627 + C94627 + C141384 * C2283) *
                C141309 * C47707 +
            (C94660 + C94661) * C141309 * C47708 + C94667 * C47709) *
               C1596 -
           ((C96677 + C96678) * C141309 * C47709 +
            (C96679 + C96680) * C141309 * C47708 +
            (C94624 * C5325 + C96665 + C96665 + C141384 * C5781 +
             C94623 * C1601 + C96666 + C96666 + C93949 * C2283) *
                C141309 * C47707) *
               C141487) *
              C2374 +
          (((C94623 * C3490 + C99126 + C99126 + C93949 * C4074 +
             C94624 * C13301 + C99127 + C99127 + C141384 * C13953) *
                C141309 * C47707 +
            (C94623 * C3491 + C99128 + C99128 + C93949 * C4075 +
             C94624 * C13302 + C99129 + C99129 + C141384 * C13955) *
                C141309 * C47708 +
            (C94623 * C3492 + C99130 + C99130 + C93949 * C4076 +
             C94624 * C14876 + C99131 + C99131 + C141384 * C15738) *
                C141309 * C47709) *
               C141487 -
           ((C95618 + C95619) * C141309 * C47709 +
            (C95620 + C95621) * C141309 * C47708 +
            (C94624 * C3490 + C95606 + C95606 + C141384 * C4074 +
             C94623 * C823 + C95607 + C95607 + C93949 * C1505) *
                C141309 * C47707) *
               C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C109766 * C108 + C109771 + C109771 + C109357 * C714 +
            C109767 * C1601 + C109772 + C109772 + C109358 * C2283 +
            C109768 * C5325 + C109773 + C109773 + C109359 * C5781 +
            C109769 * C15862 + C109774 + C109774 + C109360 * C16900) *
               C141309 * C141216 * C1596 -
           (C109769 * C21308 + C111024 + C111024 + C109360 * C21987 +
            C109768 * C15862 + C111025 + C111025 + C109359 * C16900 +
            C109767 * C5325 + C111026 + C111026 + C109358 * C5781 +
            C109766 * C1601 + C111027 + C111027 + C109357 * C2283) *
               C141309 * C141216 * C141487) *
              C2374 +
          ((C109766 * C3490 + C112705 + C112705 + C109357 * C4074 +
            C109767 * C13301 + C112706 + C112706 + C109358 * C13953 +
            C109768 * C18582 + C112707 + C112707 + C109359 * C19462 +
            C109769 * C67927 + C112708 + C112708 + C109360 * C68592) *
               C141309 * C141216 * C141487 -
           (C109769 * C18582 + C110377 + C110377 + C109360 * C19462 +
            C109768 * C13301 + C110378 + C110378 + C109359 * C13953 +
            C109767 * C3490 + C110379 + C110379 + C109358 * C4074 +
            C109766 * C823 + C110380 + C110380 + C109357 * C1505) *
               C141309 * C141216 * C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eexx[114] +=
        (-std::pow(Pi, 2.5) *
         (((((C55526 * C108 + C55529 + C55529 + C141216 * C120) * C93949 +
             C62512 * C141384) *
                C5865 +
            (C102386 + C102387) * C5866 + C105178 * C5867) *
               C4148 -
           ((C105918 + C105919) * C5867 + (C105920 + C105921) * C5866 +
            (C62513 * C141384 + C62512 * C93949) * C5865) *
               C141487) *
              C141277 * C2376 +
          (((C62514 * C93949 + C62515 * C141384) * C5865 +
            (C61520 * C93949 + C61521 * C141384) * C5866 +
            (C87073 * C93949 +
             (C55526 * C13304 + C61512 + C61512 + C141216 * C13312) * C141384) *
                C5867) *
               C141487 -
           ((C102393 + C102392) * C5867 + (C102391 + C102390) * C5866 +
            (C62514 * C141384 +
             (C55526 * C109 + C55536 + C55536 + C141216 * C121) * C93949) *
                C5865) *
               C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47712 * C108 + C47719 + C47719 + C47707 * C120 + C47714 * C109 +
             C47720 + C47720 + C47708 * C121 + C47716 * C110 + C47721 + C47721 +
             C47709 * C122) *
                C93949 +
            (C95747 + C95748 + C95749) * C141384) *
               C141309 * C4148 -
           ((C47716 * C5327 + C54870 + C54870 + C47709 * C5335 +
             C47714 * C5326 + C54869 + C54869 + C47708 * C5334 +
             C47712 * C5325 + C54868 + C54868 + C47707 * C5333) *
                C141384 +
            (C95749 + C95748 + C95747) * C93949) *
               C141309 * C141487) *
              C141277 * C2376 +
          (((C95750 + C95751 + C95752) * C93949 +
            (C47712 * C5326 + C95732 + C95732 + C47707 * C5334 +
             C47714 * C5327 + C95733 + C95733 + C47708 * C5335 +
             C47716 * C5328 + C95734 + C95734 + C47709 * C5336) *
                C141384) *
               C141309 * C141487 -
           ((C95752 + C95751 + C95750) * C141384 +
            (C47716 * C111 + C47728 + C47728 + C47709 * C123 + C47714 * C110 +
             C47729 + C47729 + C47708 * C122 + C47712 * C109 + C47730 + C47730 +
             C47707 * C121) *
                C93949) *
               C141309 * C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C55526 * C108 + C55529 + C55529 + C141216 * C120) * C109357 +
            C62512 * C109358 + C62513 * C109359 + C67937 * C109360) *
               C141309 * C4148 -
           ((C55526 * C21308 + C67933 + C67933 + C141216 * C21312) * C109360 +
            C67937 * C109359 + C62513 * C109358 + C62512 * C109357) *
               C141309 * C141487) *
              C141277 * C2376 +
          ((C62514 * C109357 + C62515 * C109358 + C110456 * C109359 +
            (C55526 * C21309 + C110453 + C110453 + C141216 * C21313) *
                C109360) *
               C141309 * C141487 -
           (C110456 * C109360 + C62515 * C109359 + C62514 * C109358 +
            (C55526 * C109 + C55536 + C55536 + C141216 * C121) * C109357) *
               C141309 * C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eexy[114] +=
        (-std::pow(Pi, 2.5) *
         (((((C5964 * C108 + C5865 * C189 + C5965 * C823 + C5866 * C912 +
              C5966 * C2960 + C5867 * C3026) *
                 C55527 +
             (C5964 * C114 + C5865 * C195 + C5965 * C828 + C5866 * C917 +
              C5966 * C2964 + C5867 * C3030) *
                 C141216) *
                C93949 +
            ((C103490 + C103491 + C103492) * C55527 +
             (C103493 + C103494 + C103495) * C141216) *
                C141384) *
               C4148 -
           (((C5966 * C13307 + C5867 * C13398 + C5965 * C13305 +
              C5866 * C13397 + C5964 * C5329 + C5865 * C5395) *
                 C141216 +
             (C5966 * C13303 + C5867 * C13394 + C5965 * C13301 +
              C5866 * C13393 + C5964 * C5325 + C5865 * C5391) *
                 C55527) *
                C141384 +
            ((C103495 + C103494 + C103493) * C141216 +
             (C103492 + C103491 + C103490) * C55527) *
                C93949) *
               C141487) *
              C141277 * C2376 +
          ((((C8029 + C8028 + C8027) * C55527 +
             (C8026 + C8025 + C8024) * C141216) *
                C93949 +
            ((C5964 * C5326 + C5865 * C5392 + C5965 * C13302 + C5866 * C13395 +
              C5966 * C13304 + C5867 * C13396) *
                 C55527 +
             (C5964 * C5330 + C5865 * C5396 + C5965 * C13306 + C5866 * C13399 +
              C5966 * C13308 + C5867 * C13400) *
                 C141216) *
                C141384) *
               C141487 -
           (((C8024 + C8025 + C8026) * C141216 +
             (C8027 + C8028 + C8029) * C55527) *
                C141384 +
            ((C5997 + C5996 + C5995) * C141216 +
             (C5994 + C5993 + C5992) * C55527) *
                C93949) *
               C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141309 * C189) * C47713 +
             (C188 * C114 + C141309 * C195) * C47707 + C218 * C47715 +
             C219 * C47708 + C220 * C47717 + C221 * C47709) *
                C93949 +
            (C95851 + C95852 + C95853 + C95854 + C95855 + C95856) * C141384) *
               C4148 -
           ((C14129 * C47709 + C14130 * C47717 + C14128 * C47708 +
             C14127 * C47715 + C16046 * C47707 + C16045 * C47713) *
                C141384 +
            (C95856 + C95855 + C95854 + C95853 + C95852 + C95851) * C93949) *
               C141487) *
              C141277 * C2376 +
          (((C95857 + C95858 + C95859 + C95860 + C95861 + C95862) * C93949 +
            (C14127 * C47713 + C14128 * C47707 + C14130 * C47715 +
             C14129 * C47708 + (C188 * C5328 + C141309 * C5394) * C47717 +
             (C188 * C5332 + C141309 * C5398) * C47709) *
                C141384) *
               C141487 -
           ((C95862 + C95861 + C95860 + C95859 + C95858 + C95857) * C141384 +
            (C223 * C47709 + C222 * C47717 + C221 * C47708 + C220 * C47715 +
             C219 * C47707 + C218 * C47713) *
                C93949) *
               C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141309 * C189) * C55527 +
             (C188 * C114 + C141309 * C195) * C141216) *
                C109357 +
            (C110523 + C110524) * C109358 + (C110525 + C110526) * C109359 +
            (C110527 + C110528) * C109360) *
               C4148 -
           (((C188 * C21310 + C141309 * C21403) * C141216 +
             (C188 * C21308 + C141309 * C21401) * C55527) *
                C109360 +
            (C110528 + C110527) * C109359 + (C110526 + C110525) * C109358 +
            (C110524 + C110523) * C109357) *
               C141487) *
              C141277 * C2376 +
          (((C110529 + C110530) * C109357 + (C110531 + C110532) * C109358 +
            (C110533 + C110534) * C109359 +
            ((C188 * C21309 + C141309 * C21402) * C55527 +
             (C188 * C21311 + C141309 * C21404) * C141216) *
                C109360) *
               C141487 -
           ((C110534 + C110533) * C109360 + (C110532 + C110531) * C109359 +
            (C110530 + C110529) * C109358 +
            (C219 * C141216 + C218 * C55527) * C109357) *
               C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eexz[114] +=
        (-std::pow(Pi, 2.5) *
         (((((C94102 * C108 + C93949 * C276 + C94103 * C1601 +
              C141384 * C1784) *
                 C55527 +
             (C94102 * C114 + C93949 * C282 + C94103 * C1606 +
              C141384 * C1789) *
                 C141216) *
                C5865 +
            ((C102614 + C102615) * C55527 + (C102616 + C102617) * C141216) *
                C5866 +
            C105345 * C5867) *
               C4148 -
           (((C106152 + C106153) * C141216 + (C106154 + C106155) * C55527) *
                C5867 +
            ((C106156 + C106157) * C141216 + (C106158 + C106159) * C55527) *
                C5866 +
            ((C94103 * C5329 + C141384 * C5453 + C94102 * C1606 +
              C93949 * C1789) *
                 C141216 +
             (C94103 * C5325 + C141384 * C5449 + C94102 * C1601 +
              C93949 * C1784) *
                 C55527) *
                C5865) *
               C141487) *
              C141277 * C2376 +
          ((((C95984 + C95983) * C55527 + (C95982 + C95981) * C141216) * C5865 +
            ((C94102 * C3491 + C93949 * C3647 + C94103 * C13302 +
              C141384 * C13476) *
                 C55527 +
             (C94102 * C3495 + C93949 * C3651 + C94103 * C13306 +
              C141384 * C13480) *
                 C141216) *
                C5866 +
            ((C94102 * C7886 + C93949 * C8127 + C94103 * C13304 +
              C141384 * C13478) *
                 C55527 +
             (C94102 * C7889 + C93949 * C8130 + C94103 * C13308 +
              C141384 * C13482) *
                 C141216) *
                C5867) *
               C141487 -
           (((C102625 + C102624) * C141216 + (C102623 + C102622) * C55527) *
                C5867 +
            ((C94982 + C94983) * C141216 + (C94984 + C94985) * C55527) * C5866 +
            ((C94132 + C94131) * C141216 + (C94130 + C94129) * C55527) *
                C5865) *
               C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C94102 * C108 + C93949 * C276 + C94103 * C1601 + C141384 * C1784) *
                C47713 +
            (C94102 * C114 + C93949 * C282 + C94103 * C1606 + C141384 * C1789) *
                C47707 +
            (C94129 + C94130) * C47715 + (C94131 + C94132) * C47708 +
            C94141 * C47717 + C94142 * C47709) *
               C141309 * C4148 -
           ((C95977 + C95978) * C47709 + (C95979 + C95980) * C47717 +
            (C95981 + C95982) * C47708 + (C95983 + C95984) * C47715 +
            (C94103 * C5329 + C141384 * C5453 + C94102 * C1606 +
             C93949 * C1789) *
                C47707 +
            (C94103 * C5325 + C141384 * C5449 + C94102 * C1601 +
             C93949 * C1784) *
                C47713) *
               C141309 * C141487) *
              C141277 * C2376 +
          (((C95984 + C95983) * C47713 + (C95982 + C95981) * C47707 +
            (C95980 + C95979) * C47715 + (C95978 + C95977) * C47708 +
            (C94102 * C1598 + C93949 * C1781 + C94103 * C5328 +
             C141384 * C5452) *
                C47717 +
            (C94102 * C1603 + C93949 * C1786 + C94103 * C5332 +
             C141384 * C5456) *
                C47709) *
               C141309 * C141487 -
           ((C94137 + C94138) * C47709 + (C94139 + C94140) * C47717 +
            (C94136 + C94135) * C47708 + (C94134 + C94133) * C47715 +
            (C94132 + C94131) * C47707 + (C94130 + C94129) * C47713) *
               C141309 * C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C109462 * C108 + C109357 * C276 + C109463 * C1601 +
             C109358 * C1784 + C109464 * C5325 + C109359 * C5449 +
             C109465 * C15862 + C109360 * C16151) *
                C55527 +
            (C109462 * C114 + C109357 * C282 + C109463 * C1606 +
             C109358 * C1789 + C109464 * C5329 + C109359 * C5453 +
             C109465 * C15865 + C109360 * C16154) *
                C141216) *
               C141309 * C4148 -
           ((C109465 * C21310 + C109360 * C21494 + C109464 * C15865 +
             C109359 * C16154 + C109463 * C5329 + C109358 * C5453 +
             C109462 * C1606 + C109357 * C1789) *
                C141216 +
            (C109465 * C21308 + C109360 * C21492 + C109464 * C15862 +
             C109359 * C16151 + C109463 * C5325 + C109358 * C5449 +
             C109462 * C1601 + C109357 * C1784) *
                C55527) *
               C141309 * C141487) *
              C141277 * C2376 +
          (((C109462 * C1600 + C109357 * C1783 + C109463 * C5326 +
             C109358 * C5450 + C109464 * C15861 + C109359 * C16150 +
             C109465 * C21309 + C109360 * C21493) *
                C55527 +
            (C109462 * C1605 + C109357 * C1788 + C109463 * C5330 +
             C109358 * C5454 + C109464 * C15864 + C109359 * C16153 +
             C109465 * C21311 + C109360 * C21495) *
                C141216) *
               C141309 * C141487 -
           ((C109465 * C15864 + C109360 * C16153 + C109464 * C5330 +
             C109359 * C5454 + C109463 * C1605 + C109358 * C1788 +
             C109462 * C115 + C109357 * C283) *
                C141216 +
            (C109465 * C15861 + C109360 * C16150 + C109464 * C5326 +
             C109359 * C5450 + C109463 * C1600 + C109358 * C1783 +
             C109462 * C109 + C109357 * C277) *
                C55527) *
               C141309 * C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[114] +=
        (-std::pow(Pi, 2.5) *
         (((((C55527 * C108 + C141216 * C114) * C5964 +
             (C55527 * C189 + C141216 * C362) * C5865 + C56299 * C5965 +
             C56300 * C5866 + C56301 * C5966 + C56302 * C5867) *
                C93949 +
            (C103692 + C103693 + C103694 + C103695 + C103696 + C103697) *
                C141384) *
               C4148 -
           ((C64648 * C5867 + C64649 * C5966 + C61850 * C5866 + C61849 * C5965 +
             C62873 * C5865 + C62872 * C5964) *
                C141384 +
            (C103697 + C103696 + C103695 + C103694 + C103693 + C103692) *
                C93949) *
               C141487) *
              C141277 * C2376 +
          (((C103698 + C103699 + C103700 + C103701 + C103702 + C103703) *
                C93949 +
            (C62876 * C5964 + C62877 * C5865 + C61853 * C5965 + C61854 * C5866 +
             (C55527 * C13304 + C141216 * C13308) * C5966 +
             (C55527 * C13396 + C141216 * C13560) * C5867) *
                C141384) *
               C141487 -
           ((C103703 + C103702 + C103701 + C103700 + C103699 + C103698) *
                C141384 +
            (C56308 * C5867 + C56307 * C5966 + C56306 * C5866 + C56305 * C5965 +
             (C55527 * C190 + C141216 * C363) * C5865 +
             (C55527 * C109 + C141216 * C115) * C5964) *
                C93949) *
               C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47713 * C108 + C47707 * C114 + C47715 * C109 + C47708 * C115 +
              C47717 * C110 + C47709 * C116) *
                 C188 +
             (C47713 * C189 + C47707 * C362 + C47715 * C190 + C47708 * C363 +
              C47717 * C191 + C47709 * C364) *
                 C141309) *
                C93949 +
            ((C96107 + C96108 + C96109) * C188 +
             (C96110 + C96111 + C96112) * C141309) *
                C141384) *
               C4148 -
           (((C47717 * C5393 + C47709 * C5509 + C47715 * C5392 +
              C47708 * C5508 + C47713 * C5391 + C47707 * C5507) *
                 C141309 +
             (C47717 * C5327 + C47709 * C5331 + C47715 * C5326 +
              C47708 * C5330 + C47713 * C5325 + C47707 * C5329) *
                 C188) *
                C141384 +
            ((C96112 + C96111 + C96110) * C141309 +
             (C96109 + C96108 + C96107) * C188) *
                C93949) *
               C141487) *
              C141277 * C2376 +
          ((((C96113 + C96114 + C96115) * C188 +
             (C96116 + C96117 + C96118) * C141309) *
                C93949 +
            ((C47713 * C5326 + C47707 * C5330 + C47715 * C5327 +
              C47708 * C5331 + C47717 * C5328 + C47709 * C5332) *
                 C188 +
             (C47713 * C5392 + C47707 * C5508 + C47715 * C5393 +
              C47708 * C5509 + C47717 * C5394 + C47709 * C5510) *
                 C141309) *
                C141384) *
               C141487 -
           (((C96118 + C96117 + C96116) * C141309 +
             (C96115 + C96114 + C96113) * C188) *
                C141384 +
            ((C47717 * C192 + C47709 * C365 + C47715 * C191 + C47708 * C364 +
              C47713 * C190 + C47707 * C363) *
                 C141309 +
             (C47717 * C111 + C47709 * C117 + C47715 * C110 + C47708 * C116 +
              C47713 * C109 + C47707 * C115) *
                 C188) *
                C93949) *
               C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C55527 * C108 + C141216 * C114) * C188 +
             (C55527 * C189 + C141216 * C362) * C141309) *
                C109357 +
            (C110667 + C110668) * C109358 + (C110669 + C110670) * C109359 +
            (C110671 + C110672) * C109360) *
               C4148 -
           (((C55527 * C21401 + C141216 * C21570) * C141309 +
             (C55527 * C21308 + C141216 * C21310) * C188) *
                C109360 +
            (C110672 + C110671) * C109359 + (C110670 + C110669) * C109358 +
            (C110668 + C110667) * C109357) *
               C141487) *
              C141277 * C2376 +
          (((C110673 + C110674) * C109357 + (C110675 + C110676) * C109358 +
            (C110683 + C110684) * C109359 +
            ((C55527 * C21309 + C141216 * C21311) * C188 +
             (C55527 * C21402 + C141216 * C21571) * C141309) *
                C109360) *
               C141487 -
           ((C110684 + C110683) * C109360 + (C110676 + C110675) * C109359 +
            (C110674 + C110673) * C109358 +
            ((C55527 * C190 + C141216 * C363) * C141309 +
             (C55527 * C109 + C141216 * C115) * C188) *
                C109357) *
               C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[114] +=
        (-std::pow(Pi, 2.5) *
         ((((C6237 * C108 + C6241 + C6241 + C5865 * C419 + C6238 * C823 +
             C6242 + C6242 + C5866 * C1171 + C6239 * C2960 + C6243 + C6243 +
             C5867 * C3196) *
                C141216 * C93949 +
            (C103814 + C103815 + C103816) * C141216 * C141384) *
               C4148 -
           ((C6239 * C13303 + C13642 + C13642 + C5867 * C13636 +
             C6238 * C13301 + C13641 + C13641 + C5866 * C13635 + C6237 * C5325 +
             C13640 + C13640 + C5865 * C5561) *
                C141216 * C141384 +
            (C103816 + C103815 + C103814) * C141216 * C93949) *
               C141487) *
              C141277 * C2376 +
          (((C8371 + C8370 + C8369) * C141216 * C93949 +
            (C6237 * C5326 + C13643 + C13643 + C5865 * C5562 + C6238 * C13302 +
             C13644 + C13644 + C5866 * C13637 + C6239 * C13304 + C13645 +
             C13645 + C5867 * C13638) *
                C141216 * C141384) *
               C141487 -
           ((C8369 + C8370 + C8371) * C141216 * C141384 +
            (C6279 + C6278 + C6277) * C141216 * C93949) *
               C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C418 * C108 + C426 + C426 + C141309 * C419) * C47707 +
             C448 * C47708 + C449 * C47709) *
                C93949 +
            (C96217 + C96218 + C96219) * C141384) *
               C4148 -
           ((C14401 * C47709 + C14400 * C47708 + C16447 * C47707) * C141384 +
            (C96219 + C96218 + C96217) * C93949) *
               C141487) *
              C141277 * C2376 +
          (((C96220 + C96221 + C96222) * C93949 +
            (C14400 * C47707 + C14401 * C47708 +
             (C418 * C5328 + C5569 + C5569 + C141309 * C5564) * C47709) *
                C141384) *
               C141487 -
           ((C96222 + C96221 + C96220) * C141384 +
            (C450 * C47709 + C449 * C47708 + C448 * C47707) * C93949) *
               C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C418 * C108 + C426 + C426 + C141309 * C419) * C141216 * C109357 +
            C110751 * C109358 + C110752 * C109359 + C110753 * C109360) *
               C4148 -
           ((C418 * C21308 + C21670 + C21670 + C141309 * C21663) * C141216 *
                C109360 +
            C110753 * C109359 + C110752 * C109358 + C110751 * C109357) *
               C141487) *
              C141277 * C2376 +
          ((C110754 * C109357 + C110755 * C109358 + C110756 * C109359 +
            (C418 * C21309 + C21671 + C21671 + C141309 * C21664) * C141216 *
                C109360) *
               C141487 -
           (C110756 * C109360 + C110755 * C109359 + C110754 * C109358 +
            C448 * C141216 * C109357) *
               C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[114] +=
        (-std::pow(Pi, 2.5) *
         ((((C94102 * C108 + C93949 * C276 + C94103 * C1601 + C141384 * C1784) *
                C5964 +
            (C94102 * C189 + C93949 * C501 + C94103 * C1690 + C141384 * C2040) *
                C5865 +
            (C102614 + C102615) * C5965 + (C102932 + C102933) * C5866 +
            C105329 * C5966 + C105571 * C5867) *
               C141216 * C4148 -
           ((C106486 + C106487) * C5867 + (C106154 + C106155) * C5966 +
            (C106488 + C106489) * C5866 + (C106158 + C106159) * C5965 +
            (C94103 * C5391 + C141384 * C5619 + C94102 * C1690 +
             C93949 * C2040) *
                C5865 +
            (C94103 * C5325 + C141384 * C5449 + C94102 * C1601 +
             C93949 * C1784) *
                C5964) *
               C141216 * C141487) *
              C141277 * C2376 +
          (((C95984 + C95983) * C5964 + (C96332 + C96331) * C5865 +
            (C94102 * C3491 + C93949 * C3647 + C94103 * C13302 +
             C141384 * C13476) *
                C5965 +
            (C94102 * C3573 + C93949 * C3865 + C94103 * C13395 +
             C141384 * C13721) *
                C5866 +
            (C94102 * C7886 + C93949 * C8127 + C94103 * C13304 +
             C141384 * C13478) *
                C5966 +
            (C94102 * C8005 + C93949 * C8469 + C94103 * C13396 +
             C141384 * C13722) *
                C5867) *
               C141216 * C141487 -
           ((C102937 + C102936) * C5867 + (C102623 + C102622) * C5966 +
            (C95290 + C95291) * C5866 + (C94984 + C94985) * C5965 +
            (C94379 + C94378) * C5865 + (C94130 + C94129) * C5964) *
               C141216 * C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C94102 * C108 + C93949 * C276 + C94103 * C1601 +
              C141384 * C1784) *
                 C188 +
             (C94102 * C189 + C93949 * C501 + C94103 * C1690 +
              C141384 * C2040) *
                 C141309) *
                C47707 +
            ((C94129 + C94130) * C188 + (C94378 + C94379) * C141309) * C47708 +
            C94386 * C47709) *
               C4148 -
           (((C96329 + C96330) * C141309 + (C95979 + C95980) * C188) * C47709 +
            ((C96331 + C96332) * C141309 + (C95983 + C95984) * C188) * C47708 +
            ((C94103 * C5391 + C141384 * C5619 + C94102 * C1690 +
              C93949 * C2040) *
                 C141309 +
             (C94103 * C5325 + C141384 * C5449 + C94102 * C1601 +
              C93949 * C1784) *
                 C188) *
                C47707) *
               C141487) *
              C141277 * C2376 +
          ((((C95984 + C95983) * C188 + (C96332 + C96331) * C141309) * C47707 +
            ((C95980 + C95979) * C188 + (C96330 + C96329) * C141309) * C47708 +
            ((C94102 * C1598 + C93949 * C1781 + C94103 * C5328 +
              C141384 * C5452) *
                 C188 +
             (C94102 * C1687 + C93949 * C2037 + C94103 * C5394 +
              C141384 * C5622) *
                 C141309) *
                C47709) *
               C141487 -
           (((C94382 + C94383) * C141309 + (C94139 + C94140) * C188) * C47709 +
            ((C94381 + C94380) * C141309 + (C94134 + C94133) * C188) * C47708 +
            ((C94379 + C94378) * C141309 + (C94130 + C94129) * C188) * C47707) *
               C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C109462 * C108 + C109357 * C276 + C109463 * C1601 +
             C109358 * C1784 + C109464 * C5325 + C109359 * C5449 +
             C109465 * C15862 + C109360 * C16151) *
                C188 +
            (C109462 * C189 + C109357 * C501 + C109463 * C1690 +
             C109358 * C2040 + C109464 * C5391 + C109359 * C5619 +
             C109465 * C16013 + C109360 * C16549) *
                C141309) *
               C141216 * C4148 -
           ((C109465 * C21401 + C109360 * C21749 + C109464 * C16013 +
             C109359 * C16549 + C109463 * C5391 + C109358 * C5619 +
             C109462 * C1690 + C109357 * C2040) *
                C141309 +
            (C109465 * C21308 + C109360 * C21492 + C109464 * C15862 +
             C109359 * C16151 + C109463 * C5325 + C109358 * C5449 +
             C109462 * C1601 + C109357 * C1784) *
                C188) *
               C141216 * C141487) *
              C141277 * C2376 +
          (((C109462 * C1600 + C109357 * C1783 + C109463 * C5326 +
             C109358 * C5450 + C109464 * C15861 + C109359 * C16150 +
             C109465 * C21309 + C109360 * C21493) *
                C188 +
            (C109462 * C1689 + C109357 * C2039 + C109463 * C5392 +
             C109358 * C5620 + C109464 * C16012 + C109359 * C16548 +
             C109465 * C21402 + C109360 * C21750) *
                C141309) *
               C141216 * C141487 -
           ((C109465 * C16012 + C109360 * C16548 + C109464 * C5392 +
             C109359 * C5620 + C109463 * C1689 + C109358 * C2039 +
             C109462 * C190 + C109357 * C502) *
                C141309 +
            (C109465 * C15861 + C109360 * C16150 + C109464 * C5326 +
             C109359 * C5450 + C109463 * C1600 + C109358 * C1783 +
             C109462 * C109 + C109357 * C277) *
                C188) *
               C141216 * C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eezx[114] +=
        (-std::pow(Pi, 2.5) *
         (((((C55527 * C108 + C141216 * C114) * C94102 +
             (C55527 * C276 + C141216 * C579) * C93949 + C62870 * C94103 +
             C63222 * C141384) *
                C5865 +
            (C103036 + C103037 + C103038 + C103039) * C5866 + C105658 * C5867) *
               C4148 -
           ((C106588 + C106589 + C106590 + C106591) * C5867 +
            (C106592 + C106593 + C106594 + C106595) * C5866 +
            (C63223 * C141384 + C62872 * C94103 + C63222 * C93949 +
             C62870 * C94102) *
                C5865) *
               C141487) *
              C141277 * C2376 +
          (((C62874 * C94102 + C63224 * C93949 + C62876 * C94103 +
             C63225 * C141384) *
                C5865 +
            (C61851 * C94102 + C62178 * C93949 + C61853 * C94103 +
             C62179 * C141384) *
                C5866 +
            (C87373 * C94102 + C87686 * C93949 +
             (C55527 * C13304 + C141216 * C13308) * C94103 +
             (C55527 * C13478 + C141216 * C13800) * C141384) *
                C5867) *
               C141487 -
           ((C103051 + C103050 + C103049 + C103048) * C5867 +
            (C103047 + C103046 + C103045 + C103044) * C5866 +
            (C63224 * C141384 + C62874 * C94103 +
             (C55527 * C277 + C141216 * C580) * C93949 +
             (C55527 * C109 + C141216 * C115) * C94102) *
                C5865) *
               C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47713 * C108 + C47707 * C114 + C47715 * C109 + C47708 * C115 +
             C47717 * C110 + C47709 * C116) *
                C94102 +
            (C47713 * C276 + C47707 * C579 + C47715 * C277 + C47708 * C580 +
             C47717 * C278 + C47709 * C581) *
                C93949 +
            (C96107 + C96108 + C96109) * C94103 +
            (C96443 + C96444 + C96445) * C141384) *
               C141309 * C4148 -
           ((C47717 * C5451 + C47709 * C5675 + C47715 * C5450 + C47708 * C5674 +
             C47713 * C5449 + C47707 * C5673) *
                C141384 +
            (C47717 * C5327 + C47709 * C5331 + C47715 * C5326 + C47708 * C5330 +
             C47713 * C5325 + C47707 * C5329) *
                C94103 +
            (C96445 + C96444 + C96443) * C93949 +
            (C96109 + C96108 + C96107) * C94102) *
               C141309 * C141487) *
              C141277 * C2376 +
          (((C96113 + C96114 + C96115) * C94102 +
            (C96446 + C96447 + C96448) * C93949 +
            (C47713 * C5326 + C47707 * C5330 + C47715 * C5327 + C47708 * C5331 +
             C47717 * C5328 + C47709 * C5332) *
                C94103 +
            (C47713 * C5450 + C47707 * C5674 + C47715 * C5451 + C47708 * C5675 +
             C47717 * C5452 + C47709 * C5676) *
                C141384) *
               C141309 * C141487 -
           ((C96448 + C96447 + C96446) * C141384 +
            (C96115 + C96114 + C96113) * C94103 +
            (C47717 * C279 + C47709 * C582 + C47715 * C278 + C47708 * C581 +
             C47713 * C277 + C47707 * C580) *
                C93949 +
            (C47717 * C111 + C47709 * C117 + C47715 * C110 + C47708 * C116 +
             C47713 * C109 + C47707 * C115) *
                C94102) *
               C141309 * C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C55527 * C108 + C141216 * C114) * C109462 +
            (C55527 * C276 + C141216 * C579) * C109357 + C62870 * C109463 +
            C63222 * C109358 + C62872 * C109464 + C63223 * C109359 +
            C68191 * C109465 + C68436 * C109360) *
               C141309 * C4148 -
           ((C55527 * C21492 + C141216 * C21825) * C109360 +
            (C55527 * C21308 + C141216 * C21310) * C109465 + C68436 * C109359 +
            C68191 * C109464 + C63223 * C109358 + C62872 * C109463 +
            C63222 * C109357 + C62870 * C109462) *
               C141309 * C141487) *
              C141277 * C2376 +
          ((C62874 * C109462 + C63224 * C109357 + C62876 * C109463 +
            C63225 * C109358 + C110681 * C109464 + C110891 * C109359 +
            (C55527 * C21309 + C141216 * C21311) * C109465 +
            (C55527 * C21493 + C141216 * C21826) * C109360) *
               C141309 * C141487 -
           (C110891 * C109360 + C110681 * C109465 + C63225 * C109359 +
            C62876 * C109464 + C63224 * C109358 + C62874 * C109463 +
            (C55527 * C277 + C141216 * C580) * C109357 +
            (C55527 * C109 + C141216 * C115) * C109462) *
               C141309 * C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eezy[114] +=
        (-std::pow(Pi, 2.5) *
         ((((C5964 * C108 + C5865 * C189 + C5965 * C823 + C5866 * C912 +
             C5966 * C2960 + C5867 * C3026) *
                C94102 +
            (C5964 * C276 + C5865 * C635 + C5965 * C1006 + C5866 * C1419 +
             C5966 * C3084 + C5867 * C3362) *
                C93949 +
            (C103490 + C103491 + C103492) * C94103 +
            (C104117 + C104118 + C104119) * C141384) *
               C141216 * C4148 -
           ((C5966 * C13477 + C5867 * C13876 + C5965 * C13475 + C5866 * C13875 +
             C5964 * C5449 + C5865 * C5727) *
                C141384 +
            (C5966 * C13303 + C5867 * C13394 + C5965 * C13301 + C5866 * C13393 +
             C5964 * C5325 + C5865 * C5391) *
                C94103 +
            (C104119 + C104118 + C104117) * C93949 +
            (C103492 + C103491 + C103490) * C94102) *
               C141216 * C141487) *
              C141277 * C2376 +
          (((C8029 + C8028 + C8027) * C94102 +
            (C8695 + C8694 + C8693) * C93949 +
            (C5964 * C5326 + C5865 * C5392 + C5965 * C13302 + C5866 * C13395 +
             C5966 * C13304 + C5867 * C13396) *
                C94103 +
            (C5964 * C5450 + C5865 * C5728 + C5965 * C13476 + C5866 * C13877 +
             C5966 * C13478 + C5867 * C13878) *
                C141384) *
               C141216 * C141487 -
           ((C8693 + C8694 + C8695) * C141384 +
            (C8027 + C8028 + C8029) * C94103 +
            (C6537 + C6536 + C6535) * C93949 +
            (C5994 + C5993 + C5992) * C94102) *
               C141216 * C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141309 * C189) * C94102 +
             (C188 * C276 + C141309 * C635) * C93949 + C16043 * C94103 +
             C16798 * C141384) *
                C47707 +
            (C94535 + C94536 + C94537 + C94538) * C47708 + C94549 * C47709) *
               C4148 -
           ((C96547 + C96548 + C96549 + C96550) * C47709 +
            (C96551 + C96552 + C96553 + C96554) * C47708 +
            (C16799 * C141384 + C16045 * C94103 + C16798 * C93949 +
             C16043 * C94102) *
                C47707) *
               C141487) *
              C141277 * C2376 +
          (((C96554 + C96553 + C96552 + C96551) * C47707 +
            (C96550 + C96549 + C96548 + C96547) * C47708 +
            (C1711 * C94102 + C2209 * C93949 +
             (C188 * C5328 + C141309 * C5394) * C94103 +
             (C188 * C5452 + C141309 * C5730) * C141384) *
                C47709) *
               C141487 -
           ((C94543 + C94544 + C94545 + C94546) * C47709 +
            (C94542 + C94541 + C94540 + C94539) * C47708 +
            (C94538 + C94537 + C94536 + C94535) * C47707) *
               C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141309 * C189) * C109462 +
            (C188 * C276 + C141309 * C635) * C109357 + C16043 * C109463 +
            C16798 * C109358 + C16045 * C109464 + C16799 * C109359 +
            C21415 * C109465 + C21913 * C109360) *
               C141216 * C4148 -
           ((C188 * C21492 + C141309 * C21908) * C109360 +
            (C188 * C21308 + C141309 * C21401) * C109465 + C21913 * C109359 +
            C21415 * C109464 + C16799 * C109358 + C16045 * C109463 +
            C16798 * C109357 + C16043 * C109462) *
               C141216 * C141487) *
              C141277 * C2376 +
          ((C1715 * C109462 + C2211 * C109357 + C14127 * C109463 +
            C14656 * C109358 + C16048 * C109464 + C16800 * C109359 +
            (C188 * C21309 + C141309 * C21402) * C109465 +
            (C188 * C21493 + C141309 * C21909) * C109360) *
               C141216 * C141487 -
           (C16800 * C109360 + C16048 * C109465 + C14656 * C109359 +
            C14127 * C109464 + C2211 * C109358 + C1715 * C109463 +
            C654 * C109357 + C218 * C109462) *
               C141216 * C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eezz[114] +=
        (-std::pow(Pi, 2.5) *
         ((((C94623 * C108 + C94626 + C94626 + C93949 * C714 + C94624 * C1601 +
             C94627 + C94627 + C141384 * C2283) *
                C5865 +
            (C103276 + C103277) * C5866 + C105807 * C5867) *
               C141216 * C4148 -
           ((C106819 + C106820) * C5867 + (C106821 + C106822) * C5866 +
            (C94624 * C5325 + C96665 + C96665 + C141384 * C5781 +
             C94623 * C1601 + C96666 + C96666 + C93949 * C2283) *
                C5865) *
               C141216 * C141487) *
              C141277 * C2376 +
          (((C96680 + C96679) * C5865 +
            (C94623 * C3491 + C99128 + C99128 + C93949 * C4075 +
             C94624 * C13302 + C99129 + C99129 + C141384 * C13955) *
                C5866 +
            (C94623 * C7886 + C104220 + C104220 + C93949 * C8793 +
             C94624 * C13304 + C104221 + C104221 + C141384 * C13956) *
                C5867) *
               C141216 * C141487 -
           ((C103281 + C103280) * C5867 + (C95620 + C95621) * C5866 +
            (C94661 + C94660) * C5865) *
               C141216 * C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C94623 * C108 + C94626 + C94626 + C93949 * C714 + C94624 * C1601 +
             C94627 + C94627 + C141384 * C2283) *
                C141309 * C47707 +
            (C94660 + C94661) * C141309 * C47708 + C94667 * C47709) *
               C4148 -
           ((C96677 + C96678) * C141309 * C47709 +
            (C96679 + C96680) * C141309 * C47708 +
            (C94624 * C5325 + C96665 + C96665 + C141384 * C5781 +
             C94623 * C1601 + C96666 + C96666 + C93949 * C2283) *
                C141309 * C47707) *
               C141487) *
              C141277 * C2376 +
          (((C96680 + C96679) * C141309 * C47707 +
            (C96678 + C96677) * C141309 * C47708 +
            (C94623 * C1598 + C96667 + C96667 + C93949 * C2280 +
             C94624 * C5328 + C96668 + C96668 + C141384 * C5784) *
                C141309 * C47709) *
               C141487 -
           ((C94664 + C94665) * C141309 * C47709 +
            (C94663 + C94662) * C141309 * C47708 +
            (C94661 + C94660) * C141309 * C47707) *
               C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C109766 * C108 + C109771 + C109771 + C109357 * C714 +
            C109767 * C1601 + C109772 + C109772 + C109358 * C2283 +
            C109768 * C5325 + C109773 + C109773 + C109359 * C5781 +
            C109769 * C15862 + C109774 + C109774 + C109360 * C16900) *
               C141309 * C141216 * C4148 -
           (C109769 * C21308 + C111024 + C111024 + C109360 * C21987 +
            C109768 * C15862 + C111025 + C111025 + C109359 * C16900 +
            C109767 * C5325 + C111026 + C111026 + C109358 * C5781 +
            C109766 * C1601 + C111027 + C111027 + C109357 * C2283) *
               C141309 * C141216 * C141487) *
              C141277 * C2376 +
          ((C109766 * C1600 + C111028 + C111028 + C109357 * C2282 +
            C109767 * C5326 + C111029 + C111029 + C109358 * C5782 +
            C109768 * C15861 + C111030 + C111030 + C109359 * C16899 +
            C109769 * C21309 + C111031 + C111031 + C109360 * C21988) *
               C141309 * C141216 * C141487 -
           (C109769 * C15861 + C109775 + C109775 + C109360 * C16899 +
            C109768 * C5326 + C109776 + C109776 + C109359 * C5782 +
            C109767 * C1600 + C109777 + C109777 + C109358 * C2282 +
            C109766 * C109 + C109778 + C109778 + C109357 * C715) *
               C141309 * C141216 * C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eexx[115] +=
        (-std::pow(Pi, 2.5) *
         (((((C55526 * C108 + C55529 + C55529 + C141216 * C120) * C93949 +
             C62512 * C141384) *
                C5865 +
            (C102386 + C102387) * C5866 + C105178 * C5867) *
               C4148 -
           ((C105918 + C105919) * C5867 + (C105920 + C105921) * C5866 +
            (C62513 * C141384 + C62512 * C93949) * C5865) *
               C141487) *
              C816 +
          (((C105921 + C105920) * C5865 + (C105919 + C105918) * C5866 +
            (C58471 * C93949 +
             (C55526 * C60310 + C60317 + C60317 + C141216 * C60312) * C141384) *
                C5867) *
               C141487 -
           ((C105179 + C105180) * C5867 + (C102389 + C102388) * C5866 +
            (C102387 + C102386) * C5865) *
               C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47712 * C108 + C47719 + C47719 + C47707 * C120 + C47714 * C109 +
             C47720 + C47720 + C47708 * C121 + C47716 * C110 + C47721 + C47721 +
             C47709 * C122) *
                C93949 +
            (C95747 + C95748 + C95749) * C141384) *
               C141309 * C4148 -
           ((C47716 * C5327 + C54870 + C54870 + C47709 * C5335 +
             C47714 * C5326 + C54869 + C54869 + C47708 * C5334 +
             C47712 * C5325 + C54868 + C54868 + C47707 * C5333) *
                C141384 +
            (C95749 + C95748 + C95747) * C93949) *
               C141309 * C141487) *
              C816 +
          (((C52206 + C52205 + C52204) * C93949 +
            (C47712 * C13301 + C54871 + C54871 + C47707 * C13309 +
             C47714 * C13302 + C54872 + C54872 + C47708 * C13310 +
             C47716 * C14876 + C54873 + C54873 + C47709 * C14878) *
                C141384) *
               C141309 * C141487 -
           ((C52204 + C52205 + C52206) * C141384 +
            (C48586 + C48585 + C48584) * C93949) *
               C141309 * C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C55526 * C108 + C55529 + C55529 + C141216 * C120) * C109357 +
            C62512 * C109358 + C62513 * C109359 + C67937 * C109360) *
               C141309 * C4148 -
           ((C55526 * C21308 + C67933 + C67933 + C141216 * C21312) * C109360 +
            C67937 * C109359 + C62513 * C109358 + C62512 * C109357) *
               C141309 * C141487) *
              C816 +
          ((C58473 * C109357 + C61519 * C109358 + C65168 * C109359 +
            (C55526 * C67927 + C67934 + C67934 + C141216 * C67929) * C109360) *
               C141309 * C141487 -
           (C65168 * C109360 + C61519 * C109359 + C58473 * C109358 +
            C56053 * C109357) *
               C141309 * C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eexy[115] +=
        (-std::pow(Pi, 2.5) *
         (((((C5964 * C108 + C5865 * C189 + C5965 * C823 + C5866 * C912 +
              C5966 * C2960 + C5867 * C3026) *
                 C55527 +
             (C5964 * C114 + C5865 * C195 + C5965 * C828 + C5866 * C917 +
              C5966 * C2964 + C5867 * C3030) *
                 C141216) *
                C93949 +
            ((C103490 + C103491 + C103492) * C55527 +
             (C103493 + C103494 + C103495) * C141216) *
                C141384) *
               C4148 -
           (((C5966 * C13307 + C5867 * C13398 + C5965 * C13305 +
              C5866 * C13397 + C5964 * C5329 + C5865 * C5395) *
                 C141216 +
             (C5966 * C13303 + C5867 * C13394 + C5965 * C13301 +
              C5866 * C13393 + C5964 * C5325 + C5865 * C5391) *
                 C55527) *
                C141384 +
            ((C103495 + C103494 + C103493) * C141216 +
             (C103492 + C103491 + C103490) * C55527) *
                C93949) *
               C141487) *
              C816 +
          ((((C106032 + C106033 + C106034) * C55527 +
             (C106035 + C106036 + C106037) * C141216) *
                C93949 +
            ((C5964 * C13301 + C5865 * C13393 + C5965 * C13303 +
              C5866 * C13394 + C5966 * C60310 + C5867 * C60367) *
                 C55527 +
             (C5964 * C13305 + C5865 * C13397 + C5965 * C13307 +
              C5866 * C13398 + C5966 * C60311 + C5867 * C60368) *
                 C141216) *
                C141384) *
               C141487 -
           (((C106037 + C106036 + C106035) * C141216 +
             (C106034 + C106033 + C106032) * C55527) *
                C141384 +
            ((C5966 * C6732 + C5867 * C6883 + C5965 * C2964 + C5866 * C3030 +
              C5964 * C828 + C5865 * C917) *
                 C141216 +
             (C5966 * C6729 + C5867 * C6880 + C5965 * C2960 + C5866 * C3026 +
              C5964 * C823 + C5865 * C912) *
                 C55527) *
                C93949) *
               C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141309 * C189) * C47713 +
             (C188 * C114 + C141309 * C195) * C47707 + C218 * C47715 +
             C219 * C47708 + C220 * C47717 + C221 * C47709) *
                C93949 +
            (C95851 + C95852 + C95853 + C95854 + C95855 + C95856) * C141384) *
               C4148 -
           ((C14129 * C47709 + C14130 * C47717 + C14128 * C47708 +
             C14127 * C47715 + C16046 * C47707 + C16045 * C47713) *
                C141384 +
            (C95856 + C95855 + C95854 + C95853 + C95852 + C95851) * C93949) *
               C141487) *
              C816 +
          (((C98431 + C98432 + C98433 + C98434 + C98435 + C98436) * C93949 +
            (C18717 * C47713 + C18718 * C47707 + C14991 * C47715 +
             C14990 * C47708 + (C188 * C14876 + C141309 * C14979) * C47717 +
             (C188 * C14877 + C141309 * C14980) * C47709) *
                C141384) *
               C141487 -
           ((C98436 + C98435 + C98434 + C98433 + C98432 + C98431) * C141384 +
            (C934 * C47709 + C935 * C47717 + C936 * C47708 + C937 * C47715 +
             (C188 * C828 + C141309 * C917) * C47707 +
             (C188 * C823 + C141309 * C912) * C47713) *
                C93949) *
               C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141309 * C189) * C55527 +
             (C188 * C114 + C141309 * C195) * C141216) *
                C109357 +
            (C110523 + C110524) * C109358 + (C110525 + C110526) * C109359 +
            (C110527 + C110528) * C109360) *
               C4148 -
           (((C188 * C21310 + C141309 * C21403) * C141216 +
             (C188 * C21308 + C141309 * C21401) * C55527) *
                C109360 +
            (C110528 + C110527) * C109359 + (C110526 + C110525) * C109358 +
            (C110524 + C110523) * C109357) *
               C141487) *
              C816 +
          (((C112213 + C112214) * C109357 + (C112215 + C112216) * C109358 +
            (C112223 + C112224) * C109359 +
            ((C188 * C67927 + C141309 * C68011) * C55527 +
             (C188 * C67928 + C141309 * C68012) * C141216) *
                C109360) *
               C141487 -
           ((C112224 + C112223) * C109360 + (C112216 + C112215) * C109359 +
            (C112214 + C112213) * C109358 +
            ((C188 * C828 + C141309 * C917) * C141216 +
             (C188 * C823 + C141309 * C912) * C55527) *
                C109357) *
               C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eexz[115] +=
        (-std::pow(Pi, 2.5) *
         (((((C94102 * C108 + C93949 * C276 + C94103 * C1601 +
              C141384 * C1784) *
                 C55527 +
             (C94102 * C114 + C93949 * C282 + C94103 * C1606 +
              C141384 * C1789) *
                 C141216) *
                C5865 +
            ((C102614 + C102615) * C55527 + (C102616 + C102617) * C141216) *
                C5866 +
            C105345 * C5867) *
               C4148 -
           (((C106152 + C106153) * C141216 + (C106154 + C106155) * C55527) *
                C5867 +
            ((C106156 + C106157) * C141216 + (C106158 + C106159) * C55527) *
                C5866 +
            ((C94103 * C5329 + C141384 * C5453 + C94102 * C1606 +
              C93949 * C1789) *
                 C141216 +
             (C94103 * C5325 + C141384 * C5449 + C94102 * C1601 +
              C93949 * C1784) *
                 C55527) *
                C5865) *
               C141487) *
              C816 +
          ((((C106159 + C106158) * C55527 + (C106157 + C106156) * C141216) *
                C5865 +
            ((C106155 + C106154) * C55527 + (C106153 + C106152) * C141216) *
                C5866 +
            ((C94102 * C10551 + C93949 * C10779 + C94103 * C60310 +
              C141384 * C60419) *
                 C55527 +
             (C94102 * C10553 + C93949 * C10781 + C94103 * C60311 +
              C141384 * C60420) *
                 C141216) *
                C5867) *
               C141487 -
           (((C105341 + C105342) * C141216 + (C105343 + C105344) * C55527) *
                C5867 +
            ((C102621 + C102620) * C141216 + (C102619 + C102618) * C55527) *
                C5866 +
            ((C102617 + C102616) * C141216 + (C102615 + C102614) * C55527) *
                C5865) *
               C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C94102 * C108 + C93949 * C276 + C94103 * C1601 + C141384 * C1784) *
                C47713 +
            (C94102 * C114 + C93949 * C282 + C94103 * C1606 + C141384 * C1789) *
                C47707 +
            (C94129 + C94130) * C47715 + (C94131 + C94132) * C47708 +
            C94141 * C47717 + C94142 * C47709) *
               C141309 * C4148 -
           ((C95977 + C95978) * C47709 + (C95979 + C95980) * C47717 +
            (C95981 + C95982) * C47708 + (C95983 + C95984) * C47715 +
            (C94103 * C5329 + C141384 * C5453 + C94102 * C1606 +
             C93949 * C1789) *
                C47707 +
            (C94103 * C5325 + C141384 * C5449 + C94102 * C1601 +
             C93949 * C1784) *
                C47713) *
               C141309 * C141487) *
              C816 +
          (((C94102 * C3490 + C93949 * C3646 + C94103 * C13301 +
             C141384 * C13475) *
                C47713 +
            (C94102 * C3494 + C93949 * C3650 + C94103 * C13305 +
             C141384 * C13479) *
                C47707 +
            (C94102 * C3491 + C93949 * C3647 + C94103 * C13302 +
             C141384 * C13476) *
                C47715 +
            (C94102 * C3495 + C93949 * C3651 + C94103 * C13306 +
             C141384 * C13480) *
                C47708 +
            (C94102 * C3492 + C93949 * C3648 + C94103 * C14876 +
             C141384 * C15091) *
                C47717 +
            (C94102 * C3496 + C93949 * C3652 + C94103 * C14877 +
             C141384 * C15092) *
                C47709) *
               C141309 * C141487 -
           ((C94978 + C94979) * C47709 + (C94980 + C94981) * C47717 +
            (C94982 + C94983) * C47708 + (C94984 + C94985) * C47715 +
            (C94103 * C3494 + C141384 * C3650 + C94102 * C828 +
             C93949 * C1011) *
                C47707 +
            (C94103 * C3490 + C141384 * C3646 + C94102 * C823 +
             C93949 * C1006) *
                C47713) *
               C141309 * C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C109462 * C108 + C109357 * C276 + C109463 * C1601 +
             C109358 * C1784 + C109464 * C5325 + C109359 * C5449 +
             C109465 * C15862 + C109360 * C16151) *
                C55527 +
            (C109462 * C114 + C109357 * C282 + C109463 * C1606 +
             C109358 * C1789 + C109464 * C5329 + C109359 * C5453 +
             C109465 * C15865 + C109360 * C16154) *
                C141216) *
               C141309 * C4148 -
           ((C109465 * C21310 + C109360 * C21494 + C109464 * C15865 +
             C109359 * C16154 + C109463 * C5329 + C109358 * C5453 +
             C109462 * C1606 + C109357 * C1789) *
                C141216 +
            (C109465 * C21308 + C109360 * C21492 + C109464 * C15862 +
             C109359 * C16151 + C109463 * C5325 + C109358 * C5449 +
             C109462 * C1601 + C109357 * C1784) *
                C55527) *
               C141309 * C141487) *
              C816 +
          (((C109462 * C3490 + C109357 * C3646 + C109463 * C13301 +
             C109358 * C13475 + C109464 * C18582 + C109359 * C18820 +
             C109465 * C67927 + C109360 * C68104) *
                C55527 +
            (C109462 * C3494 + C109357 * C3650 + C109463 * C13305 +
             C109358 * C13479 + C109464 * C18584 + C109359 * C18822 +
             C109465 * C67928 + C109360 * C68105) *
                C141216) *
               C141309 * C141487 -
           ((C109465 * C18584 + C109360 * C18822 + C109464 * C13305 +
             C109359 * C13479 + C109463 * C3494 + C109358 * C3650 +
             C109462 * C828 + C109357 * C1011) *
                C141216 +
            (C109465 * C18582 + C109360 * C18820 + C109464 * C13301 +
             C109359 * C13475 + C109463 * C3490 + C109358 * C3646 +
             C109462 * C823 + C109357 * C1006) *
                C55527) *
               C141309 * C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eeyx[115] +=
        (-std::pow(Pi, 2.5) *
         (((((C55527 * C108 + C141216 * C114) * C5964 +
             (C55527 * C189 + C141216 * C362) * C5865 + C56299 * C5965 +
             C56300 * C5866 + C56301 * C5966 + C56302 * C5867) *
                C93949 +
            (C103692 + C103693 + C103694 + C103695 + C103696 + C103697) *
                C141384) *
               C4148 -
           ((C64648 * C5867 + C64649 * C5966 + C61850 * C5866 + C61849 * C5965 +
             C62873 * C5865 + C62872 * C5964) *
                C141384 +
            (C103697 + C103696 + C103695 + C103694 + C103693 + C103692) *
                C93949) *
               C141487) *
              C816 +
          (((C106258 + C106259 + C106260 + C106261 + C106262 + C106263) *
                C93949 +
            (C61849 * C5964 + C61850 * C5865 + C64649 * C5965 + C64648 * C5866 +
             (C55527 * C60310 + C141216 * C60311) * C5966 +
             (C55527 * C60367 + C141216 * C60471) * C5867) *
                C141384) *
               C141487 -
           ((C106263 + C106262 + C106261 + C106260 + C106259 + C106258) *
                C141384 +
            (C56304 * C5867 + C56303 * C5966 + C56302 * C5866 + C56301 * C5965 +
             C56300 * C5865 + C56299 * C5964) *
                C93949) *
               C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47713 * C108 + C47707 * C114 + C47715 * C109 + C47708 * C115 +
              C47717 * C110 + C47709 * C116) *
                 C188 +
             (C47713 * C189 + C47707 * C362 + C47715 * C190 + C47708 * C363 +
              C47717 * C191 + C47709 * C364) *
                 C141309) *
                C93949 +
            ((C96107 + C96108 + C96109) * C188 +
             (C96110 + C96111 + C96112) * C141309) *
                C141384) *
               C4148 -
           (((C47717 * C5393 + C47709 * C5509 + C47715 * C5392 +
              C47708 * C5508 + C47713 * C5391 + C47707 * C5507) *
                 C141309 +
             (C47717 * C5327 + C47709 * C5331 + C47715 * C5326 +
              C47708 * C5330 + C47713 * C5325 + C47707 * C5329) *
                 C188) *
                C141384 +
            ((C96112 + C96111 + C96110) * C141309 +
             (C96109 + C96108 + C96107) * C188) *
                C93949) *
               C141487) *
              C816 +
          ((((C52524 + C52523 + C52522) * C188 +
             (C52521 + C52520 + C52519) * C141309) *
                C93949 +
            ((C47713 * C13301 + C47707 * C13305 + C47715 * C13302 +
              C47708 * C13306 + C47717 * C14876 + C47709 * C14877) *
                 C188 +
             (C47713 * C13393 + C47707 * C13557 + C47715 * C13395 +
              C47708 * C13558 + C47717 * C14979 + C47709 * C15209) *
                 C141309) *
                C141384) *
               C141487 -
           (((C52519 + C52520 + C52521) * C141309 +
             (C52522 + C52523 + C52524) * C188) *
                C141384 +
            ((C48949 + C48948 + C48947) * C141309 +
             (C48946 + C48945 + C48944) * C188) *
                C93949) *
               C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C55527 * C108 + C141216 * C114) * C188 +
             (C55527 * C189 + C141216 * C362) * C141309) *
                C109357 +
            (C110667 + C110668) * C109358 + (C110669 + C110670) * C109359 +
            (C110671 + C110672) * C109360) *
               C4148 -
           (((C55527 * C21401 + C141216 * C21570) * C141309 +
             (C55527 * C21308 + C141216 * C21310) * C188) *
                C109360 +
            (C110672 + C110671) * C109359 + (C110670 + C110669) * C109358 +
            (C110668 + C110667) * C109357) *
               C141487) *
              C816 +
          (((C112357 + C112358) * C109357 + (C112359 + C112360) * C109358 +
            (C112361 + C112362) * C109359 +
            ((C55527 * C67927 + C141216 * C67928) * C188 +
             (C55527 * C68011 + C141216 * C68180) * C141309) *
                C109360) *
               C141487 -
           ((C112362 + C112361) * C109360 + (C112360 + C112359) * C109359 +
            (C112358 + C112357) * C109358 +
            (C56300 * C141309 + C56299 * C188) * C109357) *
               C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eeyy[115] +=
        (-std::pow(Pi, 2.5) *
         ((((C6237 * C108 + C6241 + C6241 + C5865 * C419 + C6238 * C823 +
             C6242 + C6242 + C5866 * C1171 + C6239 * C2960 + C6243 + C6243 +
             C5867 * C3196) *
                C141216 * C93949 +
            (C103814 + C103815 + C103816) * C141216 * C141384) *
               C4148 -
           ((C6239 * C13303 + C13642 + C13642 + C5867 * C13636 +
             C6238 * C13301 + C13641 + C13641 + C5866 * C13635 + C6237 * C5325 +
             C13640 + C13640 + C5865 * C5561) *
                C141216 * C141384 +
            (C103816 + C103815 + C103814) * C141216 * C93949) *
               C141487) *
              C816 +
          (((C106377 + C106378 + C106379) * C141216 * C93949 +
            (C6237 * C13301 + C106368 + C106368 + C5865 * C13635 +
             C6238 * C13303 + C106369 + C106369 + C5866 * C13636 +
             C6239 * C60310 + C106370 + C106370 + C5867 * C60522) *
                C141216 * C141384) *
               C141487 -
           ((C106379 + C106378 + C106377) * C141216 * C141384 +
            (C6239 * C6729 + C7301 + C7301 + C5867 * C7289 + C6238 * C2960 +
             C7302 + C7302 + C5866 * C3196 + C6237 * C823 + C7303 + C7303 +
             C5865 * C1171) *
                C141216 * C93949) *
               C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C418 * C108 + C426 + C426 + C141309 * C419) * C47707 +
             C448 * C47708 + C449 * C47709) *
                C93949 +
            (C96217 + C96218 + C96219) * C141384) *
               C4148 -
           ((C14401 * C47709 + C14400 * C47708 + C16447 * C47707) * C141384 +
            (C96219 + C96218 + C96217) * C93949) *
               C141487) *
              C816 +
          (((C98731 + C98732 + C98733) * C93949 +
            (C19050 * C47707 + C15321 * C47708 +
             (C418 * C14876 + C15316 + C15316 + C141309 * C15308) * C47709) *
                C141384) *
               C141487 -
           ((C98733 + C98732 + C98731) * C141384 +
            (C1192 * C47709 + C1193 * C47708 +
             (C418 * C823 + C1183 + C1183 + C141309 * C1171) * C47707) *
                C93949) *
               C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C418 * C108 + C426 + C426 + C141309 * C419) * C141216 * C109357 +
            C110751 * C109358 + C110752 * C109359 + C110753 * C109360) *
               C4148 -
           ((C418 * C21308 + C21670 + C21670 + C141309 * C21663) * C141216 *
                C109360 +
            C110753 * C109359 + C110752 * C109358 + C110751 * C109357) *
               C141487) *
              C816 +
          ((C112429 * C109357 + C112430 * C109358 + C112437 * C109359 +
            (C418 * C67927 + C112433 + C112433 + C141309 * C68268) * C141216 *
                C109360) *
               C141487 -
           (C112437 * C109360 + C112430 * C109359 + C112429 * C109358 +
            (C418 * C823 + C1183 + C1183 + C141309 * C1171) * C141216 *
                C109357) *
               C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eeyz[115] +=
        (-std::pow(Pi, 2.5) *
         ((((C94102 * C108 + C93949 * C276 + C94103 * C1601 + C141384 * C1784) *
                C5964 +
            (C94102 * C189 + C93949 * C501 + C94103 * C1690 + C141384 * C2040) *
                C5865 +
            (C102614 + C102615) * C5965 + (C102932 + C102933) * C5866 +
            C105329 * C5966 + C105571 * C5867) *
               C141216 * C4148 -
           ((C106486 + C106487) * C5867 + (C106154 + C106155) * C5966 +
            (C106488 + C106489) * C5866 + (C106158 + C106159) * C5965 +
            (C94103 * C5391 + C141384 * C5619 + C94102 * C1690 +
             C93949 * C2040) *
                C5865 +
            (C94103 * C5325 + C141384 * C5449 + C94102 * C1601 +
             C93949 * C1784) *
                C5964) *
               C141216 * C141487) *
              C816 +
          (((C106159 + C106158) * C5964 + (C106489 + C106488) * C5865 +
            (C106155 + C106154) * C5965 + (C106487 + C106486) * C5866 +
            (C94102 * C10551 + C93949 * C10779 + C94103 * C60310 +
             C141384 * C60419) *
                C5966 +
            (C94102 * C10677 + C93949 * C11131 + C94103 * C60367 +
             C141384 * C60577) *
                C5867) *
               C141216 * C141487 -
           ((C105576 + C105577) * C5867 + (C105343 + C105344) * C5966 +
            (C102935 + C102934) * C5866 + (C102619 + C102618) * C5965 +
            (C102933 + C102932) * C5865 + (C102615 + C102614) * C5964) *
               C141216 * C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C94102 * C108 + C93949 * C276 + C94103 * C1601 +
              C141384 * C1784) *
                 C188 +
             (C94102 * C189 + C93949 * C501 + C94103 * C1690 +
              C141384 * C2040) *
                 C141309) *
                C47707 +
            ((C94129 + C94130) * C188 + (C94378 + C94379) * C141309) * C47708 +
            C94386 * C47709) *
               C4148 -
           (((C96329 + C96330) * C141309 + (C95979 + C95980) * C188) * C47709 +
            ((C96331 + C96332) * C141309 + (C95983 + C95984) * C188) * C47708 +
            ((C94103 * C5391 + C141384 * C5619 + C94102 * C1690 +
              C93949 * C2040) *
                 C141309 +
             (C94103 * C5325 + C141384 * C5449 + C94102 * C1601 +
              C93949 * C1784) *
                 C188) *
                C47707) *
               C141487) *
              C816 +
          ((((C94102 * C3490 + C93949 * C3646 + C94103 * C13301 +
              C141384 * C13475) *
                 C188 +
             (C94102 * C3572 + C93949 * C3864 + C94103 * C13393 +
              C141384 * C13719) *
                 C141309) *
                C47707 +
            ((C94102 * C3491 + C93949 * C3647 + C94103 * C13302 +
              C141384 * C13476) *
                 C188 +
             (C94102 * C3573 + C93949 * C3865 + C94103 * C13395 +
              C141384 * C13721) *
                 C141309) *
                C47708 +
            ((C94102 * C3492 + C93949 * C3648 + C94103 * C14876 +
              C141384 * C15091) *
                 C188 +
             (C94102 * C3574 + C93949 * C3866 + C94103 * C14979 +
              C141384 * C15420) *
                 C141309) *
                C47709) *
               C141487 -
           (((C95288 + C95289) * C141309 + (C94980 + C94981) * C188) * C47709 +
            ((C95290 + C95291) * C141309 + (C94984 + C94985) * C188) * C47708 +
            ((C94103 * C3572 + C141384 * C3864 + C94102 * C912 +
              C93949 * C1262) *
                 C141309 +
             (C94103 * C3490 + C141384 * C3646 + C94102 * C823 +
              C93949 * C1006) *
                 C188) *
                C47707) *
               C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C109462 * C108 + C109357 * C276 + C109463 * C1601 +
             C109358 * C1784 + C109464 * C5325 + C109359 * C5449 +
             C109465 * C15862 + C109360 * C16151) *
                C188 +
            (C109462 * C189 + C109357 * C501 + C109463 * C1690 +
             C109358 * C2040 + C109464 * C5391 + C109359 * C5619 +
             C109465 * C16013 + C109360 * C16549) *
                C141309) *
               C141216 * C4148 -
           ((C109465 * C21401 + C109360 * C21749 + C109464 * C16013 +
             C109359 * C16549 + C109463 * C5391 + C109358 * C5619 +
             C109462 * C1690 + C109357 * C2040) *
                C141309 +
            (C109465 * C21308 + C109360 * C21492 + C109464 * C15862 +
             C109359 * C16151 + C109463 * C5325 + C109358 * C5449 +
             C109462 * C1601 + C109357 * C1784) *
                C188) *
               C141216 * C141487) *
              C816 +
          (((C109462 * C3490 + C109357 * C3646 + C109463 * C13301 +
             C109358 * C13475 + C109464 * C18582 + C109359 * C18820 +
             C109465 * C67927 + C109360 * C68104) *
                C188 +
            (C109462 * C3572 + C109357 * C3864 + C109463 * C13393 +
             C109358 * C13719 + C109464 * C18698 + C109359 * C19150 +
             C109465 * C68011 + C109360 * C68357) *
                C141309) *
               C141216 * C141487 -
           ((C109465 * C18698 + C109360 * C19150 + C109464 * C13393 +
             C109359 * C13719 + C109463 * C3572 + C109358 * C3864 +
             C109462 * C912 + C109357 * C1262) *
                C141309 +
            (C109465 * C18582 + C109360 * C18820 + C109464 * C13301 +
             C109359 * C13475 + C109463 * C3490 + C109358 * C3646 +
             C109462 * C823 + C109357 * C1006) *
                C188) *
               C141216 * C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eezx[115] +=
        (-std::pow(Pi, 2.5) *
         (((((C55527 * C108 + C141216 * C114) * C94102 +
             (C55527 * C276 + C141216 * C579) * C93949 + C62870 * C94103 +
             C63222 * C141384) *
                C5865 +
            (C103036 + C103037 + C103038 + C103039) * C5866 + C105658 * C5867) *
               C4148 -
           ((C106588 + C106589 + C106590 + C106591) * C5867 +
            (C106592 + C106593 + C106594 + C106595) * C5866 +
            (C63223 * C141384 + C62872 * C94103 + C63222 * C93949 +
             C62870 * C94102) *
                C5865) *
               C141487) *
              C816 +
          (((C106595 + C106594 + C106593 + C106592) * C5865 +
            (C106591 + C106590 + C106589 + C106588) * C5866 +
            (C58705 * C94102 + C58927 * C93949 +
             (C55527 * C60310 + C141216 * C60311) * C94103 +
             (C55527 * C60419 + C141216 * C60628) * C141384) *
                C5867) *
               C141487 -
           ((C105653 + C105654 + C105655 + C105656) * C5867 +
            (C103043 + C103042 + C103041 + C103040) * C5866 +
            (C103039 + C103038 + C103037 + C103036) * C5865) *
               C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47713 * C108 + C47707 * C114 + C47715 * C109 + C47708 * C115 +
             C47717 * C110 + C47709 * C116) *
                C94102 +
            (C47713 * C276 + C47707 * C579 + C47715 * C277 + C47708 * C580 +
             C47717 * C278 + C47709 * C581) *
                C93949 +
            (C96107 + C96108 + C96109) * C94103 +
            (C96443 + C96444 + C96445) * C141384) *
               C141309 * C4148 -
           ((C47717 * C5451 + C47709 * C5675 + C47715 * C5450 + C47708 * C5674 +
             C47713 * C5449 + C47707 * C5673) *
                C141384 +
            (C47717 * C5327 + C47709 * C5331 + C47715 * C5326 + C47708 * C5330 +
             C47713 * C5325 + C47707 * C5329) *
                C94103 +
            (C96445 + C96444 + C96443) * C93949 +
            (C96109 + C96108 + C96107) * C94102) *
               C141309 * C141487) *
              C816 +
          (((C52524 + C52523 + C52522) * C94102 +
            (C52833 + C52832 + C52831) * C93949 +
            (C47713 * C13301 + C47707 * C13305 + C47715 * C13302 +
             C47708 * C13306 + C47717 * C14876 + C47709 * C14877) *
                C94103 +
            (C47713 * C13475 + C47707 * C13797 + C47715 * C13476 +
             C47708 * C13798 + C47717 * C15091 + C47709 * C15528) *
                C141384) *
               C141309 * C141487 -
           ((C52831 + C52832 + C52833) * C141384 +
            (C52522 + C52523 + C52524) * C94103 +
            (C49300 + C49299 + C49298) * C93949 +
            (C48946 + C48945 + C48944) * C94102) *
               C141309 * C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C55527 * C108 + C141216 * C114) * C109462 +
            (C55527 * C276 + C141216 * C579) * C109357 + C62870 * C109463 +
            C63222 * C109358 + C62872 * C109464 + C63223 * C109359 +
            C68191 * C109465 + C68436 * C109360) *
               C141309 * C4148 -
           ((C55527 * C21492 + C141216 * C21825) * C109360 +
            (C55527 * C21308 + C141216 * C21310) * C109465 + C68436 * C109359 +
            C68191 * C109464 + C63223 * C109358 + C62872 * C109463 +
            C63222 * C109357 + C62870 * C109462) *
               C141309 * C141487) *
              C816 +
          ((C58709 * C109462 + C58929 * C109357 + C61849 * C109463 +
            C62177 * C109358 + C65524 * C109464 + C65860 * C109359 +
            (C55527 * C67927 + C141216 * C67928) * C109465 +
            (C55527 * C68104 + C141216 * C68432) * C109360) *
               C141309 * C141487 -
           (C65860 * C109360 + C65524 * C109465 + C62177 * C109359 +
            C61849 * C109464 + C58929 * C109358 + C58709 * C109463 +
            C56535 * C109357 + C56299 * C109462) *
               C141309 * C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eezy[115] +=
        (-std::pow(Pi, 2.5) *
         ((((C5964 * C108 + C5865 * C189 + C5965 * C823 + C5866 * C912 +
             C5966 * C2960 + C5867 * C3026) *
                C94102 +
            (C5964 * C276 + C5865 * C635 + C5965 * C1006 + C5866 * C1419 +
             C5966 * C3084 + C5867 * C3362) *
                C93949 +
            (C103490 + C103491 + C103492) * C94103 +
            (C104117 + C104118 + C104119) * C141384) *
               C141216 * C4148 -
           ((C5966 * C13477 + C5867 * C13876 + C5965 * C13475 + C5866 * C13875 +
             C5964 * C5449 + C5865 * C5727) *
                C141384 +
            (C5966 * C13303 + C5867 * C13394 + C5965 * C13301 + C5866 * C13393 +
             C5964 * C5325 + C5865 * C5391) *
                C94103 +
            (C104119 + C104118 + C104117) * C93949 +
            (C103492 + C103491 + C103490) * C94102) *
               C141216 * C141487) *
              C816 +
          (((C106032 + C106033 + C106034) * C94102 +
            (C106700 + C106701 + C106702) * C93949 +
            (C5964 * C13301 + C5865 * C13393 + C5965 * C13303 + C5866 * C13394 +
             C5966 * C60310 + C5867 * C60367) *
                C94103 +
            (C5964 * C13475 + C5865 * C13875 + C5965 * C13477 + C5866 * C13876 +
             C5966 * C60419 + C5867 * C60679) *
                C141384) *
               C141216 * C141487 -
           ((C106702 + C106701 + C106700) * C141384 +
            (C106034 + C106033 + C106032) * C94103 +
            (C5966 * C7002 + C5867 * C7655 + C5965 * C3084 + C5866 * C3362 +
             C5964 * C1006 + C5865 * C1419) *
                C93949 +
            (C5966 * C6729 + C5867 * C6880 + C5965 * C2960 + C5866 * C3026 +
             C5964 * C823 + C5865 * C912) *
                C94102) *
               C141216 * C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141309 * C189) * C94102 +
             (C188 * C276 + C141309 * C635) * C93949 + C16043 * C94103 +
             C16798 * C141384) *
                C47707 +
            (C94535 + C94536 + C94537 + C94538) * C47708 + C94549 * C47709) *
               C4148 -
           ((C96547 + C96548 + C96549 + C96550) * C47709 +
            (C96551 + C96552 + C96553 + C96554) * C47708 +
            (C16799 * C141384 + C16045 * C94103 + C16798 * C93949 +
             C16043 * C94102) *
                C47707) *
               C141487) *
              C816 +
          (((C18715 * C94102 + C19363 * C93949 + C18717 * C94103 +
             C19364 * C141384) *
                C47707 +
            (C14993 * C94102 + C15638 * C93949 + C14991 * C94103 +
             C15637 * C141384) *
                C47708 +
            (C30842 * C94102 + C31481 * C93949 +
             (C188 * C14876 + C141309 * C14979) * C94103 +
             (C188 * C15091 + C141309 * C15627) * C141384) *
                C47709) *
               C141487 -
           ((C95488 + C95489 + C95490 + C95491) * C47709 +
            (C95492 + C95493 + C95494 + C95495) * C47708 +
            (C19363 * C141384 + C18715 * C94103 +
             (C188 * C1006 + C141309 * C1419) * C93949 +
             (C188 * C823 + C141309 * C912) * C94102) *
                C47707) *
               C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141309 * C189) * C109462 +
            (C188 * C276 + C141309 * C635) * C109357 + C16043 * C109463 +
            C16798 * C109358 + C16045 * C109464 + C16799 * C109359 +
            C21415 * C109465 + C21913 * C109360) *
               C141216 * C4148 -
           ((C188 * C21492 + C141309 * C21908) * C109360 +
            (C188 * C21308 + C141309 * C21401) * C109465 + C21913 * C109359 +
            C21415 * C109464 + C16799 * C109358 + C16045 * C109463 +
            C16798 * C109357 + C16043 * C109462) *
               C141216 * C141487) *
              C816 +
          ((C18715 * C109462 + C19363 * C109357 + C18717 * C109463 +
            C19364 * C109358 + C112221 * C109464 + C112638 * C109359 +
            (C188 * C67927 + C141309 * C68011) * C109465 +
            (C188 * C68104 + C141309 * C68510) * C109360) *
               C141216 * C141487 -
           (C112638 * C109360 + C112221 * C109465 + C19364 * C109359 +
            C18717 * C109464 + C19363 * C109358 + C18715 * C109463 +
            (C188 * C1006 + C141309 * C1419) * C109357 +
            (C188 * C823 + C141309 * C912) * C109462) *
               C141216 * C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eezz[115] +=
        (-std::pow(Pi, 2.5) *
         ((((C94623 * C108 + C94626 + C94626 + C93949 * C714 + C94624 * C1601 +
             C94627 + C94627 + C141384 * C2283) *
                C5865 +
            (C103276 + C103277) * C5866 + C105807 * C5867) *
               C141216 * C4148 -
           ((C106819 + C106820) * C5867 + (C106821 + C106822) * C5866 +
            (C94624 * C5325 + C96665 + C96665 + C141384 * C5781 +
             C94623 * C1601 + C96666 + C96666 + C93949 * C2283) *
                C5865) *
               C141216 * C141487) *
              C816 +
          (((C106822 + C106821) * C5865 + (C106820 + C106819) * C5866 +
            (C94623 * C10551 + C106809 + C106809 + C93949 * C11449 +
             C94624 * C60310 + C106810 + C106810 + C141384 * C60730) *
                C5867) *
               C141216 * C141487 -
           ((C105818 + C105819) * C5867 + (C103279 + C103278) * C5866 +
            (C103277 + C103276) * C5865) *
               C141216 * C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C94623 * C108 + C94626 + C94626 + C93949 * C714 + C94624 * C1601 +
             C94627 + C94627 + C141384 * C2283) *
                C141309 * C47707 +
            (C94660 + C94661) * C141309 * C47708 + C94667 * C47709) *
               C4148 -
           ((C96677 + C96678) * C141309 * C47709 +
            (C96679 + C96680) * C141309 * C47708 +
            (C94624 * C5325 + C96665 + C96665 + C141384 * C5781 +
             C94623 * C1601 + C96666 + C96666 + C93949 * C2283) *
                C141309 * C47707) *
               C141487) *
              C816 +
          (((C94623 * C3490 + C99126 + C99126 + C93949 * C4074 +
             C94624 * C13301 + C99127 + C99127 + C141384 * C13953) *
                C141309 * C47707 +
            (C94623 * C3491 + C99128 + C99128 + C93949 * C4075 +
             C94624 * C13302 + C99129 + C99129 + C141384 * C13955) *
                C141309 * C47708 +
            (C94623 * C3492 + C99130 + C99130 + C93949 * C4076 +
             C94624 * C14876 + C99131 + C99131 + C141384 * C15738) *
                C141309 * C47709) *
               C141487 -
           ((C95618 + C95619) * C141309 * C47709 +
            (C95620 + C95621) * C141309 * C47708 +
            (C94624 * C3490 + C95606 + C95606 + C141384 * C4074 +
             C94623 * C823 + C95607 + C95607 + C93949 * C1505) *
                C141309 * C47707) *
               C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C109766 * C108 + C109771 + C109771 + C109357 * C714 +
            C109767 * C1601 + C109772 + C109772 + C109358 * C2283 +
            C109768 * C5325 + C109773 + C109773 + C109359 * C5781 +
            C109769 * C15862 + C109774 + C109774 + C109360 * C16900) *
               C141309 * C141216 * C4148 -
           (C109769 * C21308 + C111024 + C111024 + C109360 * C21987 +
            C109768 * C15862 + C111025 + C111025 + C109359 * C16900 +
            C109767 * C5325 + C111026 + C111026 + C109358 * C5781 +
            C109766 * C1601 + C111027 + C111027 + C109357 * C2283) *
               C141309 * C141216 * C141487) *
              C816 +
          ((C109766 * C3490 + C112705 + C112705 + C109357 * C4074 +
            C109767 * C13301 + C112706 + C112706 + C109358 * C13953 +
            C109768 * C18582 + C112707 + C112707 + C109359 * C19462 +
            C109769 * C67927 + C112708 + C112708 + C109360 * C68592) *
               C141309 * C141216 * C141487 -
           (C109769 * C18582 + C110377 + C110377 + C109360 * C19462 +
            C109768 * C13301 + C110378 + C110378 + C109359 * C13953 +
            C109767 * C3490 + C110379 + C110379 + C109358 * C4074 +
            C109766 * C823 + C110380 + C110380 + C109357 * C1505) *
               C141309 * C141216 * C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eexx[116] +=
        (-std::pow(Pi, 2.5) *
         ((((C55526 * C108 + C55529 + C55529 + C141216 * C120) * C93949 +
            C62512 * C141384) *
               C5865 +
           (C102386 + C102387) * C5866 + C105178 * C5867) *
              C5322 -
          ((C105918 + C105919) * C5867 + (C105920 + C105921) * C5866 +
           (C62513 * C141384 + C62512 * C93949) * C5865) *
              C5323 +
          ((C62513 * C93949 + C67937 * C141384) * C5865 +
           (C61519 * C93949 + C65168 * C141384) * C5866 +
           (C64402 * C93949 +
            (C55526 * C65157 + C65165 + C65165 + C141216 * C65159) * C141384) *
               C5867) *
              C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C47712 * C108 + C47719 + C47719 + C47707 * C120 + C47714 * C109 +
            C47720 + C47720 + C47708 * C121 + C47716 * C110 + C47721 + C47721 +
            C47709 * C122) *
               C93949 +
           (C95747 + C95748 + C95749) * C141384) *
              C141309 * C5322 -
          ((C100985 + C100986 + C100987) * C141384 +
           (C95749 + C95748 + C95747) * C93949) *
              C141309 * C5323 +
          ((C100987 + C100986 + C100985) * C93949 +
           (C47712 * C15862 + C100976 + C100976 + C47707 * C15868 +
            C47714 * C15861 + C100977 + C100977 + C47708 * C15867 +
            C47716 * C15863 + C100978 + C100978 + C47709 * C15869) *
               C141384) *
              C141309 * C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C55526 * C108 + C55529 + C55529 + C141216 * C120) * C109357 +
           C62512 * C109358 + C62513 * C109359 + C67937 * C109360) *
              C141309 * C5322 -
          (C113955 * C109360 + C67937 * C109359 + C62513 * C109358 +
           C62512 * C109357) *
              C141309 * C5323 +
          (C62513 * C109357 + C67937 * C109358 + C113955 * C109359 +
           (C55526 * C113946 + C113952 + C113952 + C141216 * C113948) *
               C109360) *
              C141309 * C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q));
    d2eexy[116] +=
        (-std::pow(Pi, 2.5) *
         ((((C5964 * C108 + C5865 * C189 + C5965 * C823 + C5866 * C912 +
             C5966 * C2960 + C5867 * C3026) *
                C55527 +
            (C5964 * C114 + C5865 * C195 + C5965 * C828 + C5866 * C917 +
             C5966 * C2964 + C5867 * C3030) *
                C141216) *
               C93949 +
           ((C103490 + C103491 + C103492) * C55527 +
            (C103493 + C103494 + C103495) * C141216) *
               C141384) *
              C5322 -
          (((C108747 + C108748 + C108749) * C141216 +
            (C108750 + C108751 + C108752) * C55527) *
               C141384 +
           ((C103495 + C103494 + C103493) * C141216 +
            (C103492 + C103491 + C103490) * C55527) *
               C93949) *
              C5323 +
          (((C108752 + C108751 + C108750) * C55527 +
            (C108749 + C108748 + C108747) * C141216) *
               C93949 +
           ((C5964 * C15862 + C5865 * C16013 + C5965 * C18582 + C5866 * C18698 +
             C5966 * C65157 + C5867 * C65267) *
                C55527 +
            (C5964 * C15865 + C5865 * C16016 + C5965 * C18584 + C5866 * C18700 +
             C5966 * C65158 + C5867 * C65268) *
                C141216) *
               C141384) *
              C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141309 * C189) * C47713 +
            (C188 * C114 + C141309 * C195) * C47707 + C218 * C47715 +
            C219 * C47708 + C220 * C47717 + C221 * C47709) *
               C93949 +
           (C95851 + C95852 + C95853 + C95854 + C95855 + C95856) * C141384) *
              C5322 -
          ((C101062 + C101063 + C101064 + C101065 + C101066 + C101067) *
               C141384 +
           (C95856 + C95855 + C95854 + C95853 + C95852 + C95851) * C93949) *
              C5323 +
          ((C101067 + C101066 + C101065 + C101064 + C101063 + C101062) *
               C93949 +
           (C21415 * C47713 + C21414 * C47707 + C16048 * C47715 +
            C16047 * C47708 + (C188 * C15863 + C141309 * C16014) * C47717 +
            (C188 * C15866 + C141309 * C16017) * C47709) *
               C141384) *
              C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141309 * C189) * C55527 +
            (C188 * C114 + C141309 * C195) * C141216) *
               C109357 +
           (C110523 + C110524) * C109358 + C114008 * C109359 +
           C114009 * C109360) *
              C5322 -
          ((C114016 + C114017) * C109360 + (C110528 + C110527) * C109359 +
           (C110526 + C110525) * C109358 + (C110524 + C110523) * C109357) *
              C5323 +
          (C114008 * C109357 + C114009 * C109358 +
           (C114017 + C114016) * C109359 +
           ((C188 * C113946 + C141309 * C114005) * C55527 +
            (C188 * C113947 + C141309 * C114006) * C141216) *
               C109360) *
              C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q));
    d2eexz[116] +=
        (-std::pow(Pi, 2.5) *
         ((((C94102 * C108 + C93949 * C276 + C94103 * C1601 + C141384 * C1784) *
                C55527 +
            (C94102 * C114 + C93949 * C282 + C94103 * C1606 + C141384 * C1789) *
                C141216) *
               C5865 +
           ((C102614 + C102615) * C55527 + (C102616 + C102617) * C141216) *
               C5866 +
           C105345 * C5867) *
              C5322 -
          (((C106152 + C106153) * C141216 + (C106154 + C106155) * C55527) *
               C5867 +
           ((C106156 + C106157) * C141216 + (C106158 + C106159) * C55527) *
               C5866 +
           ((C94103 * C5329 + C141384 * C5453 + C94102 * C1606 +
             C93949 * C1789) *
                C141216 +
            (C94103 * C5325 + C141384 * C5449 + C94102 * C1601 +
             C93949 * C1784) *
                C55527) *
               C5865) *
              C5323 +
          (((C94102 * C5325 + C93949 * C5449 + C94103 * C15862 +
             C141384 * C16151) *
                C55527 +
            (C94102 * C5329 + C93949 * C5453 + C94103 * C15865 +
             C141384 * C16154) *
                C141216) *
               C5865 +
           ((C94102 * C13301 + C93949 * C13475 + C94103 * C18582 +
             C141384 * C18820) *
                C55527 +
            (C94102 * C13305 + C93949 * C13479 + C94103 * C18584 +
             C141384 * C18822) *
                C141216) *
               C5866 +
           ((C94102 * C13303 + C93949 * C13477 + C94103 * C65157 +
             C141384 * C65391) *
                C55527 +
            (C94102 * C13307 + C93949 * C13481 + C94103 * C65158 +
             C141384 * C65392) *
                C141216) *
               C5867) *
              C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C94102 * C108 + C93949 * C276 + C94103 * C1601 + C141384 * C1784) *
               C47713 +
           (C94102 * C114 + C93949 * C282 + C94103 * C1606 + C141384 * C1789) *
               C47707 +
           (C94129 + C94130) * C47715 + (C94131 + C94132) * C47708 +
           C94141 * C47717 + C94142 * C47709) *
              C141309 * C5322 -
          ((C95977 + C95978) * C47709 + (C95979 + C95980) * C47717 +
           (C95981 + C95982) * C47708 + (C95983 + C95984) * C47715 +
           (C94103 * C5329 + C141384 * C5453 + C94102 * C1606 +
            C93949 * C1789) *
               C47707 +
           (C94103 * C5325 + C141384 * C5449 + C94102 * C1601 +
            C93949 * C1784) *
               C47713) *
              C141309 * C5323 +
          ((C94102 * C5325 + C93949 * C5449 + C94103 * C15862 +
            C141384 * C16151) *
               C47713 +
           (C94102 * C5329 + C93949 * C5453 + C94103 * C15865 +
            C141384 * C16154) *
               C47707 +
           (C94102 * C5326 + C93949 * C5450 + C94103 * C15861 +
            C141384 * C16150) *
               C47715 +
           (C94102 * C5330 + C93949 * C5454 + C94103 * C15864 +
            C141384 * C16153) *
               C47708 +
           (C94102 * C5327 + C93949 * C5451 + C94103 * C15863 +
            C141384 * C16152) *
               C47717 +
           (C94102 * C5331 + C93949 * C5455 + C94103 * C15866 +
            C141384 * C16155) *
               C47709) *
              C141309 * C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C109462 * C108 + C109357 * C276 + C109463 * C1601 +
            C109358 * C1784 + C109464 * C5325 + C109359 * C5449 +
            C109465 * C15862 + C109360 * C16151) *
               C55527 +
           (C109462 * C114 + C109357 * C282 + C109463 * C1606 +
            C109358 * C1789 + C109464 * C5329 + C109359 * C5453 +
            C109465 * C15865 + C109360 * C16154) *
               C141216) *
              C141309 * C5322 -
          ((C109465 * C21310 + C109360 * C21494 + C109464 * C15865 +
            C109359 * C16154 + C109463 * C5329 + C109358 * C5453 +
            C109462 * C1606 + C109357 * C1789) *
               C141216 +
           (C109465 * C21308 + C109360 * C21492 + C109464 * C15862 +
            C109359 * C16151 + C109463 * C5325 + C109358 * C5449 +
            C109462 * C1601 + C109357 * C1784) *
               C55527) *
              C141309 * C5323 +
          ((C109462 * C5325 + C109357 * C5449 + C109463 * C15862 +
            C109358 * C16151 + C109464 * C21308 + C109359 * C21492 +
            C109465 * C113946 + C109360 * C114067) *
               C55527 +
           (C109462 * C5329 + C109357 * C5453 + C109463 * C15865 +
            C109358 * C16154 + C109464 * C21310 + C109359 * C21494 +
            C109465 * C113947 + C109360 * C114068) *
               C141216) *
              C141309 * C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q));
    d2eeyx[116] +=
        (-std::pow(Pi, 2.5) *
         ((((C55527 * C108 + C141216 * C114) * C5964 +
            (C55527 * C189 + C141216 * C362) * C5865 + C56299 * C5965 +
            C56300 * C5866 + C56301 * C5966 + C56302 * C5867) *
               C93949 +
           (C103692 + C103693 + C103694 + C103695 + C103696 + C103697) *
               C141384) *
              C5322 -
          ((C108901 + C108902 + C108903 + C108904 + C108905 + C108906) *
               C141384 +
           (C103697 + C103696 + C103695 + C103694 + C103693 + C103692) *
               C93949) *
              C5323 +
          ((C108906 + C108905 + C108904 + C108903 + C108902 + C108901) *
               C93949 +
           (C68191 * C5964 + C68190 * C5865 + C65524 * C5965 + C65523 * C5866 +
            (C55527 * C65157 + C141216 * C65158) * C5966 +
            (C55527 * C65267 + C141216 * C65509) * C5867) *
               C141384) *
              C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47713 * C108 + C47707 * C114 + C47715 * C109 + C47708 * C115 +
             C47717 * C110 + C47709 * C116) *
                C188 +
            (C47713 * C189 + C47707 * C362 + C47715 * C190 + C47708 * C363 +
             C47717 * C191 + C47709 * C364) *
                C141309) *
               C93949 +
           ((C96107 + C96108 + C96109) * C188 +
            (C96110 + C96111 + C96112) * C141309) *
               C141384) *
              C5322 -
          (((C101228 + C101229 + C101230) * C141309 +
            (C101231 + C101232 + C101233) * C188) *
               C141384 +
           ((C96112 + C96111 + C96110) * C141309 +
            (C96109 + C96108 + C96107) * C188) *
               C93949) *
              C5323 +
          (((C101233 + C101232 + C101231) * C188 +
            (C101230 + C101229 + C101228) * C141309) *
               C93949 +
           ((C47713 * C15862 + C47707 * C15865 + C47715 * C15861 +
             C47708 * C15864 + C47717 * C15863 + C47709 * C15866) *
                C188 +
            (C47713 * C16013 + C47707 * C16273 + C47715 * C16012 +
             C47708 * C16272 + C47717 * C16014 + C47709 * C16274) *
                C141309) *
               C141384) *
              C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C55527 * C108 + C141216 * C114) * C188 +
            (C55527 * C189 + C141216 * C362) * C141309) *
               C109357 +
           (C110667 + C110668) * C109358 + C114121 * C109359 +
           C114122 * C109360) *
              C5322 -
          ((C114129 + C114130) * C109360 + (C110672 + C110671) * C109359 +
           (C110670 + C110669) * C109358 + (C110668 + C110667) * C109357) *
              C5323 +
          (C114121 * C109357 + C114122 * C109358 +
           (C114130 + C114129) * C109359 +
           ((C55527 * C113946 + C141216 * C113947) * C188 +
            (C55527 * C114005 + C141216 * C114119) * C141309) *
               C109360) *
              C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q));
    d2eeyy[116] +=
        (-std::pow(Pi, 2.5) *
         (((C6237 * C108 + C6241 + C6241 + C5865 * C419 + C6238 * C823 + C6242 +
            C6242 + C5866 * C1171 + C6239 * C2960 + C6243 + C6243 +
            C5867 * C3196) *
               C141216 * C93949 +
           (C103814 + C103815 + C103816) * C141216 * C141384) *
              C5322 -
          ((C108996 + C108997 + C108998) * C141216 * C141384 +
           (C103816 + C103815 + C103814) * C141216 * C93949) *
              C5323 +
          ((C108998 + C108997 + C108996) * C141216 * C93949 +
           (C6237 * C15862 + C108987 + C108987 + C5865 * C16422 +
            C6238 * C18582 + C108988 + C108988 + C5866 * C19034 +
            C6239 * C65157 + C108989 + C108989 + C5867 * C65622) *
               C141216 * C141384) *
              C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C418 * C108 + C426 + C426 + C141309 * C419) * C47707 +
            C448 * C47708 + C449 * C47709) *
               C93949 +
           (C96217 + C96218 + C96219) * C141384) *
              C5322 -
          ((C101308 + C101309 + C101310) * C141384 +
           (C96219 + C96218 + C96217) * C93949) *
              C5323 +
          ((C101310 + C101309 + C101308) * C93949 +
           (C21674 * C47707 + C16448 * C47708 +
            (C418 * C15863 + C16439 + C16439 + C141309 * C16423) * C47709) *
               C141384) *
              C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C418 * C108 + C426 + C426 + C141309 * C419) * C141216 * C109357 +
           C110751 * C109358 + C110752 * C109359 + C110753 * C109360) *
              C5322 -
          (C114188 * C109360 + C110753 * C109359 + C110752 * C109358 +
           C110751 * C109357) *
              C5323 +
          (C110752 * C109357 + C110753 * C109358 + C114188 * C109359 +
           (C418 * C113946 + C114184 + C114184 + C141309 * C114180) * C141216 *
               C109360) *
              C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q));
    d2eeyz[116] +=
        (-std::pow(Pi, 2.5) *
         (((C94102 * C108 + C93949 * C276 + C94103 * C1601 + C141384 * C1784) *
               C5964 +
           (C94102 * C189 + C93949 * C501 + C94103 * C1690 + C141384 * C2040) *
               C5865 +
           (C102614 + C102615) * C5965 + (C102932 + C102933) * C5866 +
           C105329 * C5966 + C105571 * C5867) *
              C141216 * C5322 -
          ((C106486 + C106487) * C5867 + (C106154 + C106155) * C5966 +
           (C106488 + C106489) * C5866 + (C106158 + C106159) * C5965 +
           (C94103 * C5391 + C141384 * C5619 + C94102 * C1690 +
            C93949 * C2040) *
               C5865 +
           (C94103 * C5325 + C141384 * C5449 + C94102 * C1601 +
            C93949 * C1784) *
               C5964) *
              C141216 * C5323 +
          ((C94102 * C5325 + C93949 * C5449 + C94103 * C15862 +
            C141384 * C16151) *
               C5964 +
           (C94102 * C5391 + C93949 * C5619 + C94103 * C16013 +
            C141384 * C16549) *
               C5865 +
           (C94102 * C13301 + C93949 * C13475 + C94103 * C18582 +
            C141384 * C18820) *
               C5965 +
           (C94102 * C13393 + C93949 * C13719 + C94103 * C18698 +
            C141384 * C19150) *
               C5866 +
           (C94102 * C13303 + C93949 * C13477 + C94103 * C65157 +
            C141384 * C65391) *
               C5966 +
           (C94102 * C13394 + C93949 * C13720 + C94103 * C65267 +
            C141384 * C65743) *
               C5867) *
              C141216 * C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C94102 * C108 + C93949 * C276 + C94103 * C1601 + C141384 * C1784) *
                C188 +
            (C94102 * C189 + C93949 * C501 + C94103 * C1690 + C141384 * C2040) *
                C141309) *
               C47707 +
           ((C94129 + C94130) * C188 + (C94378 + C94379) * C141309) * C47708 +
           C94386 * C47709) *
              C5322 -
          (((C96329 + C96330) * C141309 + (C95979 + C95980) * C188) * C47709 +
           ((C96331 + C96332) * C141309 + (C95983 + C95984) * C188) * C47708 +
           ((C94103 * C5391 + C141384 * C5619 + C94102 * C1690 +
             C93949 * C2040) *
                C141309 +
            (C94103 * C5325 + C141384 * C5449 + C94102 * C1601 +
             C93949 * C1784) *
                C188) *
               C47707) *
              C5323 +
          (((C94102 * C5325 + C93949 * C5449 + C94103 * C15862 +
             C141384 * C16151) *
                C188 +
            (C94102 * C5391 + C93949 * C5619 + C94103 * C16013 +
             C141384 * C16549) *
                C141309) *
               C47707 +
           ((C94102 * C5326 + C93949 * C5450 + C94103 * C15861 +
             C141384 * C16150) *
                C188 +
            (C94102 * C5392 + C93949 * C5620 + C94103 * C16012 +
             C141384 * C16548) *
                C141309) *
               C47708 +
           ((C94102 * C5327 + C93949 * C5451 + C94103 * C15863 +
             C141384 * C16152) *
                C188 +
            (C94102 * C5393 + C93949 * C5621 + C94103 * C16014 +
             C141384 * C16550) *
                C141309) *
               C47709) *
              C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C109462 * C108 + C109357 * C276 + C109463 * C1601 +
            C109358 * C1784 + C109464 * C5325 + C109359 * C5449 +
            C109465 * C15862 + C109360 * C16151) *
               C188 +
           (C109462 * C189 + C109357 * C501 + C109463 * C1690 +
            C109358 * C2040 + C109464 * C5391 + C109359 * C5619 +
            C109465 * C16013 + C109360 * C16549) *
               C141309) *
              C141216 * C5322 -
          ((C109465 * C21401 + C109360 * C21749 + C109464 * C16013 +
            C109359 * C16549 + C109463 * C5391 + C109358 * C5619 +
            C109462 * C1690 + C109357 * C2040) *
               C141309 +
           (C109465 * C21308 + C109360 * C21492 + C109464 * C15862 +
            C109359 * C16151 + C109463 * C5325 + C109358 * C5449 +
            C109462 * C1601 + C109357 * C1784) *
               C188) *
              C141216 * C5323 +
          ((C109462 * C5325 + C109357 * C5449 + C109463 * C15862 +
            C109358 * C16151 + C109464 * C21308 + C109359 * C21492 +
            C109465 * C113946 + C109360 * C114067) *
               C188 +
           (C109462 * C5391 + C109357 * C5619 + C109463 * C16013 +
            C109358 * C16549 + C109464 * C21401 + C109359 * C21749 +
            C109465 * C114005 + C109360 * C114238) *
               C141309) *
              C141216 * C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q));
    d2eezx[116] +=
        (-std::pow(Pi, 2.5) *
         ((((C55527 * C108 + C141216 * C114) * C94102 +
            (C55527 * C276 + C141216 * C579) * C93949 + C62870 * C94103 +
            C63222 * C141384) *
               C5865 +
           (C103036 + C103037 + C103038 + C103039) * C5866 + C105658 * C5867) *
              C5322 -
          ((C106588 + C106589 + C106590 + C106591) * C5867 +
           (C106592 + C106593 + C106594 + C106595) * C5866 +
           (C63223 * C141384 + C62872 * C94103 + C63222 * C93949 +
            C62870 * C94102) *
               C5865) *
              C5323 +
          ((C62872 * C94102 + C63223 * C93949 + C68191 * C94103 +
            C68436 * C141384) *
               C5865 +
           (C61849 * C94102 + C62177 * C93949 + C65524 * C94103 +
            C65860 * C141384) *
               C5866 +
           (C64649 * C94102 + C64892 * C93949 +
            (C55527 * C65157 + C141216 * C65158) * C94103 +
            (C55527 * C65391 + C141216 * C65851) * C141384) *
               C5867) *
              C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C47713 * C108 + C47707 * C114 + C47715 * C109 + C47708 * C115 +
            C47717 * C110 + C47709 * C116) *
               C94102 +
           (C47713 * C276 + C47707 * C579 + C47715 * C277 + C47708 * C580 +
            C47717 * C278 + C47709 * C581) *
               C93949 +
           (C96107 + C96108 + C96109) * C94103 +
           (C96443 + C96444 + C96445) * C141384) *
              C141309 * C5322 -
          ((C101465 + C101466 + C101467) * C141384 +
           (C101231 + C101232 + C101233) * C94103 +
           (C96445 + C96444 + C96443) * C93949 +
           (C96109 + C96108 + C96107) * C94102) *
              C141309 * C5323 +
          ((C101233 + C101232 + C101231) * C94102 +
           (C101467 + C101466 + C101465) * C93949 +
           (C47713 * C15862 + C47707 * C15865 + C47715 * C15861 +
            C47708 * C15864 + C47717 * C15863 + C47709 * C15866) *
               C94103 +
           (C47713 * C16151 + C47707 * C16659 + C47715 * C16150 +
            C47708 * C16658 + C47717 * C16152 + C47709 * C16660) *
               C141384) *
              C141309 * C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C55527 * C108 + C141216 * C114) * C109462 +
           (C55527 * C276 + C141216 * C579) * C109357 + C62870 * C109463 +
           C63222 * C109358 + C62872 * C109464 + C63223 * C109359 +
           C68191 * C109465 + C68436 * C109360) *
              C141309 * C5322 -
          (C114293 * C109360 + C114128 * C109465 + C68436 * C109359 +
           C68191 * C109464 + C63223 * C109358 + C62872 * C109463 +
           C63222 * C109357 + C62870 * C109462) *
              C141309 * C5323 +
          (C62872 * C109462 + C63223 * C109357 + C68191 * C109463 +
           C68436 * C109358 + C114128 * C109464 + C114293 * C109359 +
           (C55527 * C113946 + C141216 * C113947) * C109465 +
           (C55527 * C114067 + C141216 * C114289) * C109360) *
              C141309 * C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q));
    d2eezy[116] +=
        (-std::pow(Pi, 2.5) *
         (((C5964 * C108 + C5865 * C189 + C5965 * C823 + C5866 * C912 +
            C5966 * C2960 + C5867 * C3026) *
               C94102 +
           (C5964 * C276 + C5865 * C635 + C5965 * C1006 + C5866 * C1419 +
            C5966 * C3084 + C5867 * C3362) *
               C93949 +
           (C103490 + C103491 + C103492) * C94103 +
           (C104117 + C104118 + C104119) * C141384) *
              C141216 * C5322 -
          ((C109227 + C109228 + C109229) * C141384 +
           (C108750 + C108751 + C108752) * C94103 +
           (C104119 + C104118 + C104117) * C93949 +
           (C103492 + C103491 + C103490) * C94102) *
              C141216 * C5323 +
          ((C108752 + C108751 + C108750) * C94102 +
           (C109229 + C109228 + C109227) * C93949 +
           (C5964 * C15862 + C5865 * C16013 + C5965 * C18582 + C5866 * C18698 +
            C5966 * C65157 + C5867 * C65267) *
               C94103 +
           (C5964 * C16151 + C5865 * C16784 + C5965 * C18820 + C5866 * C19356 +
            C5966 * C65391 + C5867 * C65959) *
               C141384) *
              C141216 * C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141309 * C189) * C94102 +
            (C188 * C276 + C141309 * C635) * C93949 + C16043 * C94103 +
            C16798 * C141384) *
               C47707 +
           (C94535 + C94536 + C94537 + C94538) * C47708 + C94549 * C47709) *
              C5322 -
          ((C96547 + C96548 + C96549 + C96550) * C47709 +
           (C96551 + C96552 + C96553 + C96554) * C47708 +
           (C16799 * C141384 + C16045 * C94103 + C16798 * C93949 +
            C16043 * C94102) *
               C47707) *
              C5323 +
          ((C16045 * C94102 + C16799 * C93949 + C21415 * C94103 +
            C21913 * C141384) *
               C47707 +
           (C14127 * C94102 + C14656 * C93949 + C16048 * C94103 +
            C16800 * C141384) *
               C47708 +
           (C14130 * C94102 + C14657 * C93949 +
            (C188 * C15863 + C141309 * C16014) * C94103 +
            (C188 * C16152 + C141309 * C16785) * C141384) *
               C47709) *
              C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C188 * C108 + C141309 * C189) * C109462 +
           (C188 * C276 + C141309 * C635) * C109357 + C16043 * C109463 +
           C16798 * C109358 + C16045 * C109464 + C16799 * C109359 +
           C21415 * C109465 + C21913 * C109360) *
              C141216 * C5322 -
          (C114347 * C109360 + C114015 * C109465 + C21913 * C109359 +
           C21415 * C109464 + C16799 * C109358 + C16045 * C109463 +
           C16798 * C109357 + C16043 * C109462) *
              C141216 * C5323 +
          (C16045 * C109462 + C16799 * C109357 + C21415 * C109463 +
           C21913 * C109358 + C114015 * C109464 + C114347 * C109359 +
           (C188 * C113946 + C141309 * C114005) * C109465 +
           (C188 * C114067 + C141309 * C114343) * C109360) *
              C141216 * C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q));
    d2eezz[116] +=
        (-std::pow(Pi, 2.5) *
         (((C94623 * C108 + C94626 + C94626 + C93949 * C714 + C94624 * C1601 +
            C94627 + C94627 + C141384 * C2283) *
               C5865 +
           (C103276 + C103277) * C5866 + C105807 * C5867) *
              C141216 * C5322 -
          ((C106819 + C106820) * C5867 + (C106821 + C106822) * C5866 +
           (C94624 * C5325 + C96665 + C96665 + C141384 * C5781 +
            C94623 * C1601 + C96666 + C96666 + C93949 * C2283) *
               C5865) *
              C141216 * C5323 +
          ((C94623 * C5325 + C101616 + C101616 + C93949 * C5781 +
            C94624 * C15862 + C101617 + C101617 + C141384 * C16900) *
               C5865 +
           (C94623 * C13301 + C109304 + C109304 + C93949 * C13953 +
            C94624 * C18582 + C109305 + C109305 + C141384 * C19462) *
               C5866 +
           (C94623 * C13303 + C109306 + C109306 + C93949 * C13954 +
            C94624 * C65157 + C109307 + C109307 + C141384 * C66070) *
               C5867) *
              C141216 * C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C94623 * C108 + C94626 + C94626 + C93949 * C714 + C94624 * C1601 +
            C94627 + C94627 + C141384 * C2283) *
               C141309 * C47707 +
           (C94660 + C94661) * C141309 * C47708 + C94667 * C47709) *
              C5322 -
          ((C96677 + C96678) * C141309 * C47709 +
           (C96679 + C96680) * C141309 * C47708 +
           (C94624 * C5325 + C96665 + C96665 + C141384 * C5781 +
            C94623 * C1601 + C96666 + C96666 + C93949 * C2283) *
               C141309 * C47707) *
              C5323 +
          ((C94623 * C5325 + C101616 + C101616 + C93949 * C5781 +
            C94624 * C15862 + C101617 + C101617 + C141384 * C16900) *
               C141309 * C47707 +
           (C94623 * C5326 + C101618 + C101618 + C93949 * C5782 +
            C94624 * C15861 + C101619 + C101619 + C141384 * C16899) *
               C141309 * C47708 +
           (C94623 * C5327 + C101620 + C101620 + C93949 * C5783 +
            C94624 * C15863 + C101621 + C101621 + C141384 * C16901) *
               C141309 * C47709) *
              C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((C109766 * C108 + C109771 + C109771 + C109357 * C714 +
           C109767 * C1601 + C109772 + C109772 + C109358 * C2283 +
           C109768 * C5325 + C109773 + C109773 + C109359 * C5781 +
           C109769 * C15862 + C109774 + C109774 + C109360 * C16900) *
              C141309 * C141216 * C5322 -
          (C109769 * C21308 + C111024 + C111024 + C109360 * C21987 +
           C109768 * C15862 + C111025 + C111025 + C109359 * C16900 +
           C109767 * C5325 + C111026 + C111026 + C109358 * C5781 +
           C109766 * C1601 + C111027 + C111027 + C109357 * C2283) *
              C141309 * C141216 * C5323 +
          (C109766 * C5325 + C114399 + C114399 + C109357 * C5781 +
           C109767 * C15862 + C114400 + C114400 + C109358 * C16900 +
           C109768 * C21308 + C114401 + C114401 + C109359 * C21987 +
           C109769 * C113946 + C114402 + C114402 + C109360 * C114397) *
              C141309 * C141216 * C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q));
    d2eexx[117] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C68675 * C108 + C68680 + C68680 + C141452 * C120 + C68677 * C109 +
            C68681 + C68681 + C141221 * C121) *
               C141498 +
           (C78695 + C78696) * C141499 + (C85494 + C85493) * C124182) *
              C141309 * C141294 * C141277 * C97 -
          ((C68677 * C5327 + C78684 + C78684 + C141221 * C5335 +
            C68675 * C5326 + C78683 + C78683 + C141452 * C5334) *
               C124182 +
           (C78698 + C78697) * C141499 +
           (C68677 * C110 + C68690 + C68690 + C141221 * C122 + C68675 * C109 +
            C68691 + C68691 + C141452 * C121) *
               C141498) *
              C141309 * C141294 * C141277 * C98 +
          ((C68675 * C110 + C68692 + C68692 + C141452 * C122 + C68677 * C111 +
            C68693 + C68693 + C141221 * C123) *
               C141498 +
           (C68675 * C1599 + C76531 + C76531 + C141452 * C1609 +
            C68677 * C1598 + C76532 + C76532 + C141221 * C1608) *
               C141499 +
           (C68675 * C5327 + C124184 + C124184 + C141452 * C5335 +
            C68677 * C5328 + C124185 + C124185 + C141221 * C5336) *
               C124182) *
              C141309 * C141294 * C141277 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eexy[117] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141309 * C189) * C139366 +
            (C188 * C114 + C141309 * C195) * C141452 + C218 * C139356 +
            C219 * C141221) *
               C141498 +
           (C16043 * C139366 + C16044 * C141452 + C1715 * C139356 +
            C1714 * C141221) *
               C141499 +
           (C16045 * C139366 + C16046 * C141452 + C14127 * C139356 +
            C14128 * C141221) *
               C124182) *
              C141294 * C141277 * C97 -
          ((C14129 * C141221 + C14130 * C139356 + C14128 * C141452 +
            C14127 * C139366) *
               C124182 +
           (C1712 * C141221 + C1713 * C139356 + C1714 * C141452 +
            C1715 * C139366) *
               C141499 +
           (C221 * C141221 + C220 * C139356 + C219 * C141452 + C218 * C139366) *
               C141498) *
              C141294 * C141277 * C98 +
          ((C220 * C139366 + C221 * C141452 + C222 * C139356 + C223 * C141221) *
               C141498 +
           (C1713 * C139366 + C1712 * C141452 + C1711 * C139356 +
            C1710 * C141221) *
               C141499 +
           (C14130 * C139366 + C14129 * C141452 +
            (C188 * C5328 + C141309 * C5394) * C139356 +
            (C188 * C5332 + C141309 * C5398) * C141221) *
               C124182) *
              C141294 * C141277 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eexz[117] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((C124333 * C108 + C141498 * C276 + C124334 * C1601 +
                       C141499 * C1784 + C124335 * C5325 + C124182 * C5449) *
                          C139366 +
                      (C124333 * C114 + C141498 * C282 + C124334 * C1606 +
                       C141499 * C1789 + C124335 * C5329 + C124182 * C5453) *
                          C141452 +
                      (C124361 + C124362 + C124363) * C139356 +
                      (C124364 + C124365 + C124366) * C141221) *
                         C141309 * C141294 * C141277 * C97 -
                     ((C124367 + C124368 + C124369) * C141221 +
                      (C124370 + C124371 + C124372) * C139356 +
                      (C124366 + C124365 + C124364) * C141452 +
                      (C124363 + C124362 + C124361) * C139366) *
                         C141309 * C141294 * C141277 * C98 +
                     ((C124372 + C124371 + C124370) * C139366 +
                      (C124369 + C124368 + C124367) * C141452 +
                      (C124333 * C111 + C141498 * C279 + C124334 * C1598 +
                       C141499 * C1781 + C124335 * C5328 + C124182 * C5452) *
                          C139356 +
                      (C124333 * C117 + C141498 * C285 + C124334 * C1603 +
                       C141499 * C1786 + C124335 * C5332 + C124182 * C5456) *
                          C141221) *
                         C141309 * C141294 * C141277 * C99)) /
                   (p * q * std::sqrt(p + q));
    d2eeyx[117] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139366 * C108 + C141452 * C114 + C139356 * C109 +
             C141221 * C115) *
                C188 +
            (C139366 * C189 + C141452 * C362 + C139356 * C190 +
             C141221 * C363) *
                C141309) *
               C141498 +
           ((C79109 + C79110) * C188 + (C79111 + C79112) * C141309) * C141499 +
           ((C85800 + C85799) * C188 + (C85798 + C85797) * C141309) * C124182) *
              C141294 * C141277 * C97 -
          (((C139356 * C5393 + C141221 * C5509 + C139366 * C5392 +
             C141452 * C5508) *
                C141309 +
            (C139356 * C5327 + C141221 * C5331 + C139366 * C5326 +
             C141452 * C5330) *
                C188) *
               C124182 +
           ((C79116 + C79115) * C141309 + (C79114 + C79113) * C188) * C141499 +
           ((C139356 * C191 + C141221 * C364 + C139366 * C190 +
             C141452 * C363) *
                C141309 +
            (C139356 * C110 + C141221 * C116 + C139366 * C109 +
             C141452 * C115) *
                C188) *
               C141498) *
              C141294 * C141277 * C98 +
          (((C139366 * C110 + C141452 * C116 + C139356 * C111 +
             C141221 * C117) *
                C188 +
            (C139366 * C191 + C141452 * C364 + C139356 * C192 +
             C141221 * C365) *
                C141309) *
               C141498 +
           ((C139366 * C1599 + C141452 * C1604 + C139356 * C1598 +
             C141221 * C1603) *
                C188 +
            (C139366 * C1688 + C141452 * C1876 + C139356 * C1687 +
             C141221 * C1875) *
                C141309) *
               C141499 +
           ((C139366 * C5327 + C141452 * C5331 + C139356 * C5328 +
             C141221 * C5332) *
                C188 +
            (C139366 * C5393 + C141452 * C5509 + C139356 * C5394 +
             C141221 * C5510) *
                C141309) *
               C124182) *
              C141294 * C141277 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[117] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C418 * C108 + C426 + C426 + C141309 * C419) * C141452 +
            C448 * C141221) *
               C141498 +
           (C16446 * C141452 + C1971 * C141221) * C141499 +
           (C16447 * C141452 + C14400 * C141221) * C124182) *
              C141294 * C141277 * C97 -
          ((C14401 * C141221 + C14400 * C141452) * C124182 +
           (C1970 * C141221 + C1971 * C141452) * C141499 +
           (C449 * C141221 + C448 * C141452) * C141498) *
              C141294 * C141277 * C98 +
          ((C449 * C141452 + C450 * C141221) * C141498 +
           (C1970 * C141452 + C1969 * C141221) * C141499 +
           (C14401 * C141452 +
            (C418 * C5328 + C5569 + C5569 + C141309 * C5564) * C141221) *
               C124182) *
              C141294 * C141277 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[117] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((C124333 * C108 + C141498 * C276 + C124334 * C1601 +
                        C141499 * C1784 + C124335 * C5325 + C124182 * C5449) *
                           C188 +
                       (C124333 * C189 + C141498 * C501 + C124334 * C1690 +
                        C141499 * C2040 + C124335 * C5391 + C124182 * C5619) *
                           C141309) *
                          C141452 +
                      ((C124361 + C124362 + C124363) * C188 +
                       (C124607 + C124608 + C124609) * C141309) *
                          C141221) *
                         C141294 * C141277 * C97 -
                     (((C124610 + C124611 + C124612) * C141309 +
                       (C124370 + C124371 + C124372) * C188) *
                          C141221 +
                      ((C124609 + C124608 + C124607) * C141309 +
                       (C124363 + C124362 + C124361) * C188) *
                          C141452) *
                         C141294 * C141277 * C98 +
                     (((C124372 + C124371 + C124370) * C188 +
                       (C124612 + C124611 + C124610) * C141309) *
                          C141452 +
                      ((C124333 * C111 + C141498 * C279 + C124334 * C1598 +
                        C141499 * C1781 + C124335 * C5328 + C124182 * C5452) *
                           C188 +
                       (C124333 * C192 + C141498 * C504 + C124334 * C1687 +
                        C141499 * C2037 + C124335 * C5394 + C124182 * C5622) *
                           C141309) *
                          C141221) *
                         C141294 * C141277 * C99)) /
                   (p * q * std::sqrt(p + q));
    d2eezx[117] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C139366 * C108 + C141452 * C114 + C139356 * C109 + C141221 * C115) *
               C124333 +
           (C139366 * C276 + C141452 * C579 + C139356 * C277 + C141221 * C580) *
               C141498 +
           (C79109 + C79110) * C124334 + (C79517 + C79518) * C141499 +
           (C85800 + C85799) * C124335 + (C86100 + C86099) * C124182) *
              C141309 * C141294 * C141277 * C97 -
          ((C139356 * C5451 + C141221 * C5675 + C139366 * C5450 +
            C141452 * C5674) *
               C124182 +
           (C139356 * C5327 + C141221 * C5331 + C139366 * C5326 +
            C141452 * C5330) *
               C124335 +
           (C79520 + C79519) * C141499 + (C79114 + C79113) * C124334 +
           (C139356 * C278 + C141221 * C581 + C139366 * C277 + C141452 * C580) *
               C141498 +
           (C139356 * C110 + C141221 * C116 + C139366 * C109 + C141452 * C115) *
               C124333) *
              C141309 * C141294 * C141277 * C98 +
          ((C139366 * C110 + C141452 * C116 + C139356 * C111 + C141221 * C117) *
               C124333 +
           (C139366 * C278 + C141452 * C581 + C139356 * C279 + C141221 * C582) *
               C141498 +
           (C139366 * C1599 + C141452 * C1604 + C139356 * C1598 +
            C141221 * C1603) *
               C124334 +
           (C139366 * C1782 + C141452 * C2124 + C139356 * C1781 +
            C141221 * C2123) *
               C141499 +
           (C139366 * C5327 + C141452 * C5331 + C139356 * C5328 +
            C141221 * C5332) *
               C124335 +
           (C139366 * C5451 + C141452 * C5675 + C139356 * C5452 +
            C141221 * C5676) *
               C124182) *
              C141309 * C141294 * C141277 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eezy[117] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141309 * C189) * C124333 +
            (C188 * C276 + C141309 * C635) * C141498 + C16043 * C124334 +
            C16798 * C141499 + C16045 * C124335 + C16799 * C124182) *
               C141452 +
           (C124761 + C124762 + C124763 + C124764 + C124765 + C124766) *
               C141221) *
              C141294 * C141277 * C97 -
          ((C124767 + C124768 + C124769 + C124770 + C124771 + C124772) *
               C141221 +
           (C124766 + C124765 + C124764 + C124763 + C124762 + C124761) *
               C141452) *
              C141294 * C141277 * C98 +
          ((C124772 + C124771 + C124770 + C124769 + C124768 + C124767) *
               C141452 +
           (C222 * C124333 + C656 * C141498 + C1711 * C124334 +
            C2209 * C141499 + (C188 * C5328 + C141309 * C5394) * C124335 +
            (C188 * C5452 + C141309 * C5730) * C124182) *
               C141221) *
              C141294 * C141277 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eezz[117] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((C124846 * C108 + C124850 + C124850 + C141498 * C714 +
                       C124847 * C1601 + C124851 + C124851 + C141499 * C2283 +
                       C124848 * C5325 + C124852 + C124852 + C124182 * C5781) *
                          C141309 * C141452 +
                      (C124886 + C124887 + C124888) * C141309 * C141221) *
                         C141294 * C141277 * C97 -
                     ((C124889 + C124890 + C124891) * C141309 * C141221 +
                      (C124888 + C124887 + C124886) * C141309 * C141452) *
                         C141294 * C141277 * C98 +
                     ((C124891 + C124890 + C124889) * C141309 * C141452 +
                      (C124846 * C111 + C124871 + C124871 + C141498 * C717 +
                       C124847 * C1598 + C124872 + C124872 + C141499 * C2280 +
                       C124848 * C5328 + C124873 + C124873 + C124182 * C5784) *
                          C141309 * C141221) *
                         C141294 * C141277 * C99)) /
                   (p * q * std::sqrt(p + q));
    d2eexx[118] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C68675 * C108 + C68680 + C68680 + C141452 * C120 + C68677 * C109 +
             C68681 + C68681 + C141221 * C121) *
                C141498 +
            (C78695 + C78696) * C141499 + (C85494 + C85493) * C124182) *
               C141309 * C141294 * C816 -
           ((C81977 + C81978) * C124182 + C81972 * C141499 +
            (C69545 + C69544) * C141498) *
               C141309 * C141294 * C141485) *
              C818 +
          (((C69548 + C69549) * C141498 + (C77457 + C77458) * C141499 +
            (C68675 * C13302 + C78685 + C78685 + C141452 * C13310 +
             C68677 * C14876 + C78686 + C78686 + C141221 * C14878) *
                C124182) *
               C141309 * C141294 * C141485 -
           ((C68677 * C5327 + C78684 + C78684 + C141221 * C5335 +
             C68675 * C5326 + C78683 + C78683 + C141452 * C5334) *
                C124182 +
            (C78698 + C78697) * C141499 +
            (C68677 * C110 + C68690 + C68690 + C141221 * C122 + C68675 * C109 +
             C68691 + C68691 + C141452 * C121) *
                C141498) *
               C141309 * C141294 * C816) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eexy[118] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((((C188 * C108 + C141309 * C189) * C139366 +
                        (C188 * C114 + C141309 * C195) * C141452 +
                        C218 * C139356 + C219 * C141221) *
                           C141498 +
                       (C16043 * C139366 + C16044 * C141452 + C1715 * C139356 +
                        C1714 * C141221) *
                           C141499 +
                       (C16045 * C139366 + C16046 * C141452 + C14127 * C139356 +
                        C14128 * C141221) *
                           C124182) *
                          C141294 * C816 -
                      ((C14990 * C141221 + C14991 * C139356 + C18718 * C141452 +
                        C18717 * C139366) *
                           C124182 +
                       (C14992 * C141221 + C14993 * C139356 + C18716 * C141452 +
                        C18715 * C139366) *
                           C141499 +
                       (C936 * C141221 + C937 * C139356 +
                        (C188 * C828 + C141309 * C917) * C141452 +
                        (C188 * C823 + C141309 * C912) * C139366) *
                           C141498) *
                          C141294 * C141485) *
                         C818 +
                     (((C937 * C139366 + C936 * C141452 + C935 * C139356 +
                        C934 * C141221) *
                           C141498 +
                       (C14993 * C139366 + C14992 * C141452 + C30842 * C139356 +
                        C30841 * C141221) *
                           C141499 +
                       (C14991 * C139366 + C14990 * C141452 +
                        (C188 * C14876 + C141309 * C14979) * C139356 +
                        (C188 * C14877 + C141309 * C14980) * C141221) *
                           C124182) *
                          C141294 * C141485 -
                      ((C14129 * C141221 + C14130 * C139356 + C14128 * C141452 +
                        C14127 * C139366) *
                           C124182 +
                       (C1712 * C141221 + C1713 * C139356 + C1714 * C141452 +
                        C1715 * C139366) *
                           C141499 +
                       (C221 * C141221 + C220 * C139356 + C219 * C141452 +
                        C218 * C139366) *
                           C141498) *
                          C141294 * C816) *
                         C141483)) /
                   (p * q * std::sqrt(p + q));
    d2eexz[118] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((C124333 * C108 + C141498 * C276 + C124334 * C1601 +
                        C141499 * C1784 + C124335 * C5325 + C124182 * C5449) *
                           C139366 +
                       (C124333 * C114 + C141498 * C282 + C124334 * C1606 +
                        C141499 * C1789 + C124335 * C5329 + C124182 * C5453) *
                           C141452 +
                       (C124361 + C124362 + C124363) * C139356 +
                       (C124364 + C124365 + C124366) * C141221) *
                          C141309 * C141294 * C816 -
                      ((C125198 + C125199 + C125200) * C141221 +
                       (C125201 + C125202 + C125203) * C139356 +
                       (C124335 * C13305 + C124182 * C13479 + C124334 * C3494 +
                        C141499 * C3650 + C124333 * C828 + C141498 * C1011) *
                           C141452 +
                       (C124335 * C13301 + C124182 * C13475 + C124334 * C3490 +
                        C141499 * C3646 + C124333 * C823 + C141498 * C1006) *
                           C139366) *
                          C141309 * C141294 * C141485) *
                         C818 +
                     (((C125203 + C125202 + C125201) * C139366 +
                       (C125200 + C125199 + C125198) * C141452 +
                       (C124333 * C821 + C141498 * C1004 + C124334 * C3492 +
                        C141499 * C3648 + C124335 * C14876 + C124182 * C15091) *
                           C139356 +
                       (C124333 * C826 + C141498 * C1009 + C124334 * C3496 +
                        C141499 * C3652 + C124335 * C14877 + C124182 * C15092) *
                           C141221) *
                          C141309 * C141294 * C141485 -
                      ((C124367 + C124368 + C124369) * C141221 +
                       (C124370 + C124371 + C124372) * C139356 +
                       (C124366 + C124365 + C124364) * C141452 +
                       (C124363 + C124362 + C124361) * C139366) *
                          C141309 * C141294 * C816) *
                         C141483)) /
                   (p * q * std::sqrt(p + q));
    d2eeyx[118] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139366 * C108 + C141452 * C114 + C139356 * C109 +
              C141221 * C115) *
                 C188 +
             (C139366 * C189 + C141452 * C362 + C139356 * C190 +
              C141221 * C363) *
                 C141309) *
                C141498 +
            ((C79109 + C79110) * C188 + (C79111 + C79112) * C141309) * C141499 +
            ((C85800 + C85799) * C188 + (C85798 + C85797) * C141309) *
                C124182) *
               C141294 * C816 -
           (((C82381 + C82382) * C141309 + (C82383 + C82384) * C188) * C124182 +
            (C82379 * C141309 + C82380 * C188) * C141499 +
            ((C69915 + C69914) * C141309 + (C69913 + C69912) * C188) *
                C141498) *
               C141294 * C141485) *
              C818 +
          ((((C69920 + C69921) * C188 + (C69922 + C69923) * C141309) * C141498 +
            ((C77869 + C77870) * C188 + (C77871 + C77872) * C141309) * C141499 +
            ((C139366 * C13302 + C141452 * C13306 + C139356 * C14876 +
              C141221 * C14877) *
                 C188 +
             (C139366 * C13395 + C141452 * C13558 + C139356 * C14979 +
              C141221 * C15209) *
                 C141309) *
                C124182) *
               C141294 * C141485 -
           (((C139356 * C5393 + C141221 * C5509 + C139366 * C5392 +
              C141452 * C5508) *
                 C141309 +
             (C139356 * C5327 + C141221 * C5331 + C139366 * C5326 +
              C141452 * C5330) *
                 C188) *
                C124182 +
            ((C79116 + C79115) * C141309 + (C79114 + C79113) * C188) * C141499 +
            ((C139356 * C191 + C141221 * C364 + C139366 * C190 +
              C141452 * C363) *
                 C141309 +
             (C139356 * C110 + C141221 * C116 + C139366 * C109 +
              C141452 * C115) *
                 C188) *
                C141498) *
               C141294 * C816) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[118] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C418 * C108 + C426 + C426 + C141309 * C419) * C141452 +
             C448 * C141221) *
                C141498 +
            (C16446 * C141452 + C1971 * C141221) * C141499 +
            (C16447 * C141452 + C14400 * C141221) * C124182) *
               C141294 * C816 -
           ((C15321 * C141221 + C19050 * C141452) * C124182 +
            (C15322 * C141221 + C19049 * C141452) * C141499 +
            (C1193 * C141221 +
             (C418 * C823 + C1183 + C1183 + C141309 * C1171) * C141452) *
                C141498) *
               C141294 * C141485) *
              C818 +
          (((C1193 * C141452 + C1192 * C141221) * C141498 +
            (C15322 * C141452 + C31165 * C141221) * C141499 +
            (C15321 * C141452 +
             (C418 * C14876 + C15316 + C15316 + C141309 * C15308) * C141221) *
                C124182) *
               C141294 * C141485 -
           ((C14401 * C141221 + C14400 * C141452) * C124182 +
            (C1970 * C141221 + C1971 * C141452) * C141499 +
            (C449 * C141221 + C448 * C141452) * C141498) *
               C141294 * C816) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[118] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C124333 * C108 + C141498 * C276 + C124334 * C1601 +
              C141499 * C1784 + C124335 * C5325 + C124182 * C5449) *
                 C188 +
             (C124333 * C189 + C141498 * C501 + C124334 * C1690 +
              C141499 * C2040 + C124335 * C5391 + C124182 * C5619) *
                 C141309) *
                C141452 +
            ((C124361 + C124362 + C124363) * C188 +
             (C124607 + C124608 + C124609) * C141309) *
                C141221) *
               C141294 * C816 -
           (((C125504 + C125505 + C125506) * C141309 +
             (C125201 + C125202 + C125203) * C188) *
                C141221 +
            ((C124335 * C13393 + C124182 * C13719 + C124334 * C3572 +
              C141499 * C3864 + C124333 * C912 + C141498 * C1262) *
                 C141309 +
             (C124335 * C13301 + C124182 * C13475 + C124334 * C3490 +
              C141499 * C3646 + C124333 * C823 + C141498 * C1006) *
                 C188) *
                C141452) *
               C141294 * C141485) *
              C818 +
          ((((C125203 + C125202 + C125201) * C188 +
             (C125506 + C125505 + C125504) * C141309) *
                C141452 +
            ((C124333 * C821 + C141498 * C1004 + C124334 * C3492 +
              C141499 * C3648 + C124335 * C14876 + C124182 * C15091) *
                 C188 +
             (C124333 * C910 + C141498 * C1260 + C124334 * C3574 +
              C141499 * C3866 + C124335 * C14979 + C124182 * C15420) *
                 C141309) *
                C141221) *
               C141294 * C141485 -
           (((C124610 + C124611 + C124612) * C141309 +
             (C124370 + C124371 + C124372) * C188) *
                C141221 +
            ((C124609 + C124608 + C124607) * C141309 +
             (C124363 + C124362 + C124361) * C188) *
                C141452) *
               C141294 * C816) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eezx[118] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139366 * C108 + C141452 * C114 + C139356 * C109 +
             C141221 * C115) *
                C124333 +
            (C139366 * C276 + C141452 * C579 + C139356 * C277 +
             C141221 * C580) *
                C141498 +
            (C79109 + C79110) * C124334 + (C79517 + C79518) * C141499 +
            (C85800 + C85799) * C124335 + (C86100 + C86099) * C124182) *
               C141309 * C141294 * C816 -
           ((C82781 + C82782) * C124182 + (C82383 + C82384) * C124335 +
            C82780 * C141499 + C82380 * C124334 + (C70269 + C70268) * C141498 +
            (C69913 + C69912) * C124333) *
               C141309 * C141294 * C141485) *
              C818 +
          (((C69920 + C69921) * C124333 + (C70272 + C70273) * C141498 +
            (C77869 + C77870) * C124334 + (C78277 + C78278) * C141499 +
            (C139366 * C13302 + C141452 * C13306 + C139356 * C14876 +
             C141221 * C14877) *
                C124335 +
            (C139366 * C13476 + C141452 * C13798 + C139356 * C15091 +
             C141221 * C15528) *
                C124182) *
               C141309 * C141294 * C141485 -
           ((C139356 * C5451 + C141221 * C5675 + C139366 * C5450 +
             C141452 * C5674) *
                C124182 +
            (C139356 * C5327 + C141221 * C5331 + C139366 * C5326 +
             C141452 * C5330) *
                C124335 +
            (C79520 + C79519) * C141499 + (C79114 + C79113) * C124334 +
            (C139356 * C278 + C141221 * C581 + C139366 * C277 +
             C141452 * C580) *
                C141498 +
            (C139356 * C110 + C141221 * C116 + C139366 * C109 +
             C141452 * C115) *
                C124333) *
               C141309 * C141294 * C816) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eezy[118] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141309 * C189) * C124333 +
             (C188 * C276 + C141309 * C635) * C141498 + C16043 * C124334 +
             C16798 * C141499 + C16045 * C124335 + C16799 * C124182) *
                C141452 +
            (C124761 + C124762 + C124763 + C124764 + C124765 + C124766) *
                C141221) *
               C141294 * C816 -
           ((C125703 + C125704 + C125705 + C125706 + C125707 + C125708) *
                C141221 +
            (C19364 * C124182 + C18717 * C124335 + C19363 * C141499 +
             C18715 * C124334 + (C188 * C1006 + C141309 * C1419) * C141498 +
             (C188 * C823 + C141309 * C912) * C124333) *
                C141452) *
               C141294 * C141485) *
              C818 +
          (((C125708 + C125707 + C125706 + C125705 + C125704 + C125703) *
                C141452 +
            (C935 * C124333 + C1432 * C141498 + C30842 * C124334 +
             C31481 * C141499 + (C188 * C14876 + C141309 * C14979) * C124335 +
             (C188 * C15091 + C141309 * C15627) * C124182) *
                C141221) *
               C141294 * C141485 -
           ((C124767 + C124768 + C124769 + C124770 + C124771 + C124772) *
                C141221 +
            (C124766 + C124765 + C124764 + C124763 + C124762 + C124761) *
                C141452) *
               C141294 * C816) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eezz[118] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C124846 * C108 + C124850 + C124850 + C141498 * C714 +
             C124847 * C1601 + C124851 + C124851 + C141499 * C2283 +
             C124848 * C5325 + C124852 + C124852 + C124182 * C5781) *
                C141309 * C141452 +
            (C124886 + C124887 + C124888) * C141309 * C141221) *
               C141294 * C816 -
           ((C125828 + C125829 + C125830) * C141309 * C141221 +
            (C124848 * C13301 + C125816 + C125816 + C124182 * C13953 +
             C124847 * C3490 + C125817 + C125817 + C141499 * C4074 +
             C124846 * C823 + C125818 + C125818 + C141498 * C1505) *
                C141309 * C141452) *
               C141294 * C141485) *
              C818 +
          (((C125830 + C125829 + C125828) * C141309 * C141452 +
            (C124846 * C821 + C125819 + C125819 + C141498 * C1503 +
             C124847 * C3492 + C125820 + C125820 + C141499 * C4076 +
             C124848 * C14876 + C125821 + C125821 + C124182 * C15738) *
                C141309 * C141221) *
               C141294 * C141485 -
           ((C124889 + C124890 + C124891) * C141309 * C141221 +
            (C124888 + C124887 + C124886) * C141309 * C141452) *
               C141294 * C816) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eexx[119] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C68675 * C108 + C68680 + C68680 + C141452 * C120 + C68677 * C109 +
             C68681 + C68681 + C141221 * C121) *
                C141498 +
            (C78695 + C78696) * C141499 + (C85494 + C85493) * C124182) *
               C141309 * C1596 -
           ((C68677 * C15861 + C85486 + C85486 + C141221 * C15867 +
             C68675 * C15862 + C85485 + C85485 + C141452 * C15868) *
                C124182 +
            (C85493 + C85494) * C141499 + (C78696 + C78695) * C141498) *
               C141309 * C141487) *
              C141277 * C818 +
          (((C78697 + C78698) * C141498 + (C125939 + C125940) * C141499 +
            (C68675 * C15861 + C125933 + C125933 + C141452 * C15867 +
             C68677 * C15863 + C125934 + C125934 + C141221 * C15869) *
                C124182) *
               C141309 * C141487 -
           ((C125940 + C125939) * C124182 + (C78698 + C78697) * C141499 +
            (C68677 * C110 + C68690 + C68690 + C141221 * C122 + C68675 * C109 +
             C68691 + C68691 + C141452 * C121) *
                C141498) *
               C141309 * C1596) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eexy[119] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((((C188 * C108 + C141309 * C189) * C139366 +
                        (C188 * C114 + C141309 * C195) * C141452 +
                        C218 * C139356 + C219 * C141221) *
                           C141498 +
                       (C126039 + C126040 + C126041 + C126042) * C141499 +
                       (C126043 + C126044 + C126045 + C126046) * C124182) *
                          C1596 -
                      ((C16047 * C141221 + C16048 * C139356 + C21414 * C141452 +
                        C21415 * C139366) *
                           C124182 +
                       (C126046 + C126045 + C126044 + C126043) * C141499 +
                       (C126042 + C126041 + C126040 + C126039) * C141498) *
                          C141487) *
                         C141277 * C818 +
                     (((C126047 + C126048 + C126049 + C126050) * C141498 +
                       (C126051 + C126052 + C126053 + C126054) * C141499 +
                       (C16048 * C139366 + C16047 * C141452 +
                        (C188 * C15863 + C141309 * C16014) * C139356 +
                        (C188 * C15866 + C141309 * C16017) * C141221) *
                           C124182) *
                          C141487 -
                      ((C126054 + C126053 + C126052 + C126051) * C124182 +
                       (C126050 + C126049 + C126048 + C126047) * C141499 +
                       (C221 * C141221 + C220 * C139356 + C219 * C141452 +
                        C218 * C139366) *
                           C141498) *
                          C1596) *
                         C141277 * C141483)) /
                   (p * q * std::sqrt(p + q));
    d2eexz[119] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((C124333 * C108 + C141498 * C276 + C124334 * C1601 +
                        C141499 * C1784 + C124335 * C5325 + C124182 * C5449) *
                           C139366 +
                       (C124333 * C114 + C141498 * C282 + C124334 * C1606 +
                        C141499 * C1789 + C124335 * C5329 + C124182 * C5453) *
                           C141452 +
                       (C124361 + C124362 + C124363) * C139356 +
                       (C124364 + C124365 + C124366) * C141221) *
                          C141309 * C1596 -
                      ((C126165 + C126166 + C126167) * C141221 +
                       (C126168 + C126169 + C126170) * C139356 +
                       (C124335 * C15865 + C124182 * C16154 + C124334 * C5329 +
                        C141499 * C5453 + C124333 * C1606 + C141498 * C1789) *
                           C141452 +
                       (C124335 * C15862 + C124182 * C16151 + C124334 * C5325 +
                        C141499 * C5449 + C124333 * C1601 + C141498 * C1784) *
                           C139366) *
                          C141309 * C141487) *
                         C141277 * C818 +
                     (((C126170 + C126169 + C126168) * C139366 +
                       (C126167 + C126166 + C126165) * C141452 +
                       (C124333 * C1599 + C141498 * C1782 + C124334 * C5327 +
                        C141499 * C5451 + C124335 * C15863 + C124182 * C16152) *
                           C139356 +
                       (C124333 * C1604 + C141498 * C1787 + C124334 * C5331 +
                        C141499 * C5455 + C124335 * C15866 + C124182 * C16155) *
                           C141221) *
                          C141309 * C141487 -
                      ((C124367 + C124368 + C124369) * C141221 +
                       (C124370 + C124371 + C124372) * C139356 +
                       (C124366 + C124365 + C124364) * C141452 +
                       (C124363 + C124362 + C124361) * C139366) *
                          C141309 * C1596) *
                         C141277 * C141483)) /
                   (p * q * std::sqrt(p + q));
    d2eeyx[119] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139366 * C108 + C141452 * C114 + C139356 * C109 +
              C141221 * C115) *
                 C188 +
             (C139366 * C189 + C141452 * C362 + C139356 * C190 +
              C141221 * C363) *
                 C141309) *
                C141498 +
            ((C79109 + C79110) * C188 + (C79111 + C79112) * C141309) * C141499 +
            ((C85800 + C85799) * C188 + (C85798 + C85797) * C141309) *
                C124182) *
               C1596 -
           (((C139356 * C16012 + C141221 * C16272 + C139366 * C16013 +
              C141452 * C16273) *
                 C141309 +
             (C139356 * C15861 + C141221 * C15864 + C139366 * C15862 +
              C141452 * C15865) *
                 C188) *
                C124182 +
            ((C85797 + C85798) * C141309 + (C85799 + C85800) * C188) * C141499 +
            ((C79112 + C79111) * C141309 + (C79110 + C79109) * C188) *
                C141498) *
               C141487) *
              C141277 * C818 +
          ((((C79113 + C79114) * C188 + (C79115 + C79116) * C141309) * C141498 +
            ((C126277 + C126278) * C188 + (C126279 + C126280) * C141309) *
                C141499 +
            ((C139366 * C15861 + C141452 * C15864 + C139356 * C15863 +
              C141221 * C15866) *
                 C188 +
             (C139366 * C16012 + C141452 * C16272 + C139356 * C16014 +
              C141221 * C16274) *
                 C141309) *
                C124182) *
               C141487 -
           (((C126280 + C126279) * C141309 + (C126278 + C126277) * C188) *
                C124182 +
            ((C79116 + C79115) * C141309 + (C79114 + C79113) * C188) * C141499 +
            ((C139356 * C191 + C141221 * C364 + C139366 * C190 +
              C141452 * C363) *
                 C141309 +
             (C139356 * C110 + C141221 * C116 + C139366 * C109 +
              C141452 * C115) *
                 C188) *
                C141498) *
               C1596) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[119] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C418 * C108 + C426 + C426 + C141309 * C419) * C141452 +
             C448 * C141221) *
                C141498 +
            (C126379 + C126380) * C141499 + (C126381 + C126382) * C124182) *
               C1596 -
           ((C16448 * C141221 + C21674 * C141452) * C124182 +
            (C126382 + C126381) * C141499 + (C126380 + C126379) * C141498) *
               C141487) *
              C141277 * C818 +
          (((C126383 + C126384) * C141498 + (C126385 + C126386) * C141499 +
            (C16448 * C141452 +
             (C418 * C15863 + C16439 + C16439 + C141309 * C16423) * C141221) *
                C124182) *
               C141487 -
           ((C126386 + C126385) * C124182 + (C126384 + C126383) * C141499 +
            (C449 * C141221 + C448 * C141452) * C141498) *
               C1596) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[119] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C124333 * C108 + C141498 * C276 + C124334 * C1601 +
              C141499 * C1784 + C124335 * C5325 + C124182 * C5449) *
                 C188 +
             (C124333 * C189 + C141498 * C501 + C124334 * C1690 +
              C141499 * C2040 + C124335 * C5391 + C124182 * C5619) *
                 C141309) *
                C141452 +
            ((C124361 + C124362 + C124363) * C188 +
             (C124607 + C124608 + C124609) * C141309) *
                C141221) *
               C1596 -
           (((C126491 + C126492 + C126493) * C141309 +
             (C126168 + C126169 + C126170) * C188) *
                C141221 +
            ((C124335 * C16013 + C124182 * C16549 + C124334 * C5391 +
              C141499 * C5619 + C124333 * C1690 + C141498 * C2040) *
                 C141309 +
             (C124335 * C15862 + C124182 * C16151 + C124334 * C5325 +
              C141499 * C5449 + C124333 * C1601 + C141498 * C1784) *
                 C188) *
                C141452) *
               C141487) *
              C141277 * C818 +
          ((((C126170 + C126169 + C126168) * C188 +
             (C126493 + C126492 + C126491) * C141309) *
                C141452 +
            ((C124333 * C1599 + C141498 * C1782 + C124334 * C5327 +
              C141499 * C5451 + C124335 * C15863 + C124182 * C16152) *
                 C188 +
             (C124333 * C1688 + C141498 * C2038 + C124334 * C5393 +
              C141499 * C5621 + C124335 * C16014 + C124182 * C16550) *
                 C141309) *
                C141221) *
               C141487 -
           (((C124610 + C124611 + C124612) * C141309 +
             (C124370 + C124371 + C124372) * C188) *
                C141221 +
            ((C124609 + C124608 + C124607) * C141309 +
             (C124363 + C124362 + C124361) * C188) *
                C141452) *
               C1596) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eezx[119] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139366 * C108 + C141452 * C114 + C139356 * C109 +
             C141221 * C115) *
                C124333 +
            (C139366 * C276 + C141452 * C579 + C139356 * C277 +
             C141221 * C580) *
                C141498 +
            (C79109 + C79110) * C124334 + (C79517 + C79518) * C141499 +
            (C85800 + C85799) * C124335 + (C86100 + C86099) * C124182) *
               C141309 * C1596 -
           ((C139356 * C16150 + C141221 * C16658 + C139366 * C16151 +
             C141452 * C16659) *
                C124182 +
            (C139356 * C15861 + C141221 * C15864 + C139366 * C15862 +
             C141452 * C15865) *
                C124335 +
            (C86099 + C86100) * C141499 + (C85799 + C85800) * C124334 +
            (C79518 + C79517) * C141498 + (C79110 + C79109) * C124333) *
               C141309 * C141487) *
              C141277 * C818 +
          (((C79113 + C79114) * C124333 + (C79519 + C79520) * C141498 +
            (C126277 + C126278) * C124334 + (C126596 + C126597) * C141499 +
            (C139366 * C15861 + C141452 * C15864 + C139356 * C15863 +
             C141221 * C15866) *
                C124335 +
            (C139366 * C16150 + C141452 * C16658 + C139356 * C16152 +
             C141221 * C16660) *
                C124182) *
               C141309 * C141487 -
           ((C126597 + C126596) * C124182 + (C126278 + C126277) * C124335 +
            (C79520 + C79519) * C141499 + (C79114 + C79113) * C124334 +
            (C139356 * C278 + C141221 * C581 + C139366 * C277 +
             C141452 * C580) *
                C141498 +
            (C139356 * C110 + C141221 * C116 + C139366 * C109 +
             C141452 * C115) *
                C124333) *
               C141309 * C1596) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eezy[119] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141309 * C189) * C124333 +
             (C188 * C276 + C141309 * C635) * C141498 + C16043 * C124334 +
             C16798 * C141499 + C16045 * C124335 + C16799 * C124182) *
                C141452 +
            (C124761 + C124762 + C124763 + C124764 + C124765 + C124766) *
                C141221) *
               C1596 -
           ((C126696 + C126697 + C126698 + C126699 + C126700 + C126701) *
                C141221 +
            (C21913 * C124182 + C21415 * C124335 + C16799 * C141499 +
             C16045 * C124334 + C16798 * C141498 + C16043 * C124333) *
                C141452) *
               C141487) *
              C141277 * C818 +
          (((C126701 + C126700 + C126699 + C126698 + C126697 + C126696) *
                C141452 +
            (C1713 * C124333 + C2210 * C141498 + C14130 * C124334 +
             C14657 * C141499 + (C188 * C15863 + C141309 * C16014) * C124335 +
             (C188 * C16152 + C141309 * C16785) * C124182) *
                C141221) *
               C141487 -
           ((C124767 + C124768 + C124769 + C124770 + C124771 + C124772) *
                C141221 +
            (C124766 + C124765 + C124764 + C124763 + C124762 + C124761) *
                C141452) *
               C1596) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eezz[119] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C124846 * C108 + C124850 + C124850 + C141498 * C714 +
             C124847 * C1601 + C124851 + C124851 + C141499 * C2283 +
             C124848 * C5325 + C124852 + C124852 + C124182 * C5781) *
                C141309 * C141452 +
            (C124886 + C124887 + C124888) * C141309 * C141221) *
               C1596 -
           ((C126821 + C126822 + C126823) * C141309 * C141221 +
            (C124848 * C15862 + C126809 + C126809 + C124182 * C16900 +
             C124847 * C5325 + C126810 + C126810 + C141499 * C5781 +
             C124846 * C1601 + C126811 + C126811 + C141498 * C2283) *
                C141309 * C141452) *
               C141487) *
              C141277 * C818 +
          (((C126823 + C126822 + C126821) * C141309 * C141452 +
            (C124846 * C1599 + C126812 + C126812 + C141498 * C2281 +
             C124847 * C5327 + C126813 + C126813 + C141499 * C5783 +
             C124848 * C15863 + C126814 + C126814 + C124182 * C16901) *
                C141309 * C141221) *
               C141487 -
           ((C124889 + C124890 + C124891) * C141309 * C141221 +
            (C124888 + C124887 + C124886) * C141309 * C141452) *
               C1596) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eexx[120] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C68675 * C108 + C68680 + C68680 + C141452 * C120 + C68677 * C109 +
             C68681 + C68681 + C141221 * C121) *
                C141498 +
            (C78695 + C78696) * C141499 + (C85494 + C85493) * C124182) *
               C141309 * C141294 * C2374 -
           ((C81977 + C81978) * C124182 + C81972 * C141499 +
            (C69545 + C69544) * C141498) *
               C141309 * C141294 * C141485) *
              C2376 +
          (((C69548 + C69549) * C141498 + (C77457 + C77458) * C141499 +
            (C68675 * C13302 + C78685 + C78685 + C141452 * C13310 +
             C68677 * C14876 + C78686 + C78686 + C141221 * C14878) *
                C124182) *
               C141309 * C141294 * C141485 -
           ((C125940 + C125939) * C124182 + (C78698 + C78697) * C141499 +
            (C68677 * C110 + C68690 + C68690 + C141221 * C122 + C68675 * C109 +
             C68691 + C68691 + C141452 * C121) *
                C141498) *
               C141309 * C141294 * C2374) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eexy[120] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((((C188 * C108 + C141309 * C189) * C139366 +
                        (C188 * C114 + C141309 * C195) * C141452 +
                        C218 * C139356 + C219 * C141221) *
                           C141498 +
                       (C126039 + C126040 + C126041 + C126042) * C141499 +
                       (C126043 + C126044 + C126045 + C126046) * C124182) *
                          C141294 * C2374 -
                      ((C14990 * C141221 + C14991 * C139356 + C18718 * C141452 +
                        C18717 * C139366) *
                           C124182 +
                       (C14992 * C141221 + C14993 * C139356 + C18716 * C141452 +
                        C18715 * C139366) *
                           C141499 +
                       (C936 * C141221 + C937 * C139356 +
                        (C188 * C828 + C141309 * C917) * C141452 +
                        (C188 * C823 + C141309 * C912) * C139366) *
                           C141498) *
                          C141294 * C141485) *
                         C2376 +
                     (((C937 * C139366 + C936 * C141452 + C935 * C139356 +
                        C934 * C141221) *
                           C141498 +
                       (C14993 * C139366 + C14992 * C141452 + C30842 * C139356 +
                        C30841 * C141221) *
                           C141499 +
                       (C14991 * C139366 + C14990 * C141452 +
                        (C188 * C14876 + C141309 * C14979) * C139356 +
                        (C188 * C14877 + C141309 * C14980) * C141221) *
                           C124182) *
                          C141294 * C141485 -
                      ((C126054 + C126053 + C126052 + C126051) * C124182 +
                       (C126050 + C126049 + C126048 + C126047) * C141499 +
                       (C221 * C141221 + C220 * C139356 + C219 * C141452 +
                        C218 * C139366) *
                           C141498) *
                          C141294 * C2374) *
                         C141483)) /
                   (p * q * std::sqrt(p + q));
    d2eexz[120] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((C124333 * C108 + C141498 * C276 + C124334 * C1601 +
                        C141499 * C1784 + C124335 * C5325 + C124182 * C5449) *
                           C139366 +
                       (C124333 * C114 + C141498 * C282 + C124334 * C1606 +
                        C141499 * C1789 + C124335 * C5329 + C124182 * C5453) *
                           C141452 +
                       (C124361 + C124362 + C124363) * C139356 +
                       (C124364 + C124365 + C124366) * C141221) *
                          C141309 * C141294 * C2374 -
                      ((C125198 + C125199 + C125200) * C141221 +
                       (C125201 + C125202 + C125203) * C139356 +
                       (C124335 * C13305 + C124182 * C13479 + C124334 * C3494 +
                        C141499 * C3650 + C124333 * C828 + C141498 * C1011) *
                           C141452 +
                       (C124335 * C13301 + C124182 * C13475 + C124334 * C3490 +
                        C141499 * C3646 + C124333 * C823 + C141498 * C1006) *
                           C139366) *
                          C141309 * C141294 * C141485) *
                         C2376 +
                     (((C125203 + C125202 + C125201) * C139366 +
                       (C125200 + C125199 + C125198) * C141452 +
                       (C124333 * C821 + C141498 * C1004 + C124334 * C3492 +
                        C141499 * C3648 + C124335 * C14876 + C124182 * C15091) *
                           C139356 +
                       (C124333 * C826 + C141498 * C1009 + C124334 * C3496 +
                        C141499 * C3652 + C124335 * C14877 + C124182 * C15092) *
                           C141221) *
                          C141309 * C141294 * C141485 -
                      ((C124367 + C124368 + C124369) * C141221 +
                       (C124370 + C124371 + C124372) * C139356 +
                       (C124366 + C124365 + C124364) * C141452 +
                       (C124363 + C124362 + C124361) * C139366) *
                          C141309 * C141294 * C2374) *
                         C141483)) /
                   (p * q * std::sqrt(p + q));
    d2eeyx[120] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139366 * C108 + C141452 * C114 + C139356 * C109 +
              C141221 * C115) *
                 C188 +
             (C139366 * C189 + C141452 * C362 + C139356 * C190 +
              C141221 * C363) *
                 C141309) *
                C141498 +
            ((C79109 + C79110) * C188 + (C79111 + C79112) * C141309) * C141499 +
            ((C85800 + C85799) * C188 + (C85798 + C85797) * C141309) *
                C124182) *
               C141294 * C2374 -
           (((C82381 + C82382) * C141309 + (C82383 + C82384) * C188) * C124182 +
            (C82379 * C141309 + C82380 * C188) * C141499 +
            ((C69915 + C69914) * C141309 + (C69913 + C69912) * C188) *
                C141498) *
               C141294 * C141485) *
              C2376 +
          ((((C69920 + C69921) * C188 + (C69922 + C69923) * C141309) * C141498 +
            ((C77869 + C77870) * C188 + (C77871 + C77872) * C141309) * C141499 +
            ((C139366 * C13302 + C141452 * C13306 + C139356 * C14876 +
              C141221 * C14877) *
                 C188 +
             (C139366 * C13395 + C141452 * C13558 + C139356 * C14979 +
              C141221 * C15209) *
                 C141309) *
                C124182) *
               C141294 * C141485 -
           (((C126280 + C126279) * C141309 + (C126278 + C126277) * C188) *
                C124182 +
            ((C79116 + C79115) * C141309 + (C79114 + C79113) * C188) * C141499 +
            ((C139356 * C191 + C141221 * C364 + C139366 * C190 +
              C141452 * C363) *
                 C141309 +
             (C139356 * C110 + C141221 * C116 + C139366 * C109 +
              C141452 * C115) *
                 C188) *
                C141498) *
               C141294 * C2374) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[120] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C418 * C108 + C426 + C426 + C141309 * C419) * C141452 +
             C448 * C141221) *
                C141498 +
            (C126379 + C126380) * C141499 + (C126381 + C126382) * C124182) *
               C141294 * C2374 -
           ((C15321 * C141221 + C19050 * C141452) * C124182 +
            (C15322 * C141221 + C19049 * C141452) * C141499 +
            (C1193 * C141221 +
             (C418 * C823 + C1183 + C1183 + C141309 * C1171) * C141452) *
                C141498) *
               C141294 * C141485) *
              C2376 +
          (((C1193 * C141452 + C1192 * C141221) * C141498 +
            (C15322 * C141452 + C31165 * C141221) * C141499 +
            (C15321 * C141452 +
             (C418 * C14876 + C15316 + C15316 + C141309 * C15308) * C141221) *
                C124182) *
               C141294 * C141485 -
           ((C126386 + C126385) * C124182 + (C126384 + C126383) * C141499 +
            (C449 * C141221 + C448 * C141452) * C141498) *
               C141294 * C2374) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[120] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C124333 * C108 + C141498 * C276 + C124334 * C1601 +
              C141499 * C1784 + C124335 * C5325 + C124182 * C5449) *
                 C188 +
             (C124333 * C189 + C141498 * C501 + C124334 * C1690 +
              C141499 * C2040 + C124335 * C5391 + C124182 * C5619) *
                 C141309) *
                C141452 +
            ((C124361 + C124362 + C124363) * C188 +
             (C124607 + C124608 + C124609) * C141309) *
                C141221) *
               C141294 * C2374 -
           (((C125504 + C125505 + C125506) * C141309 +
             (C125201 + C125202 + C125203) * C188) *
                C141221 +
            ((C124335 * C13393 + C124182 * C13719 + C124334 * C3572 +
              C141499 * C3864 + C124333 * C912 + C141498 * C1262) *
                 C141309 +
             (C124335 * C13301 + C124182 * C13475 + C124334 * C3490 +
              C141499 * C3646 + C124333 * C823 + C141498 * C1006) *
                 C188) *
                C141452) *
               C141294 * C141485) *
              C2376 +
          ((((C125203 + C125202 + C125201) * C188 +
             (C125506 + C125505 + C125504) * C141309) *
                C141452 +
            ((C124333 * C821 + C141498 * C1004 + C124334 * C3492 +
              C141499 * C3648 + C124335 * C14876 + C124182 * C15091) *
                 C188 +
             (C124333 * C910 + C141498 * C1260 + C124334 * C3574 +
              C141499 * C3866 + C124335 * C14979 + C124182 * C15420) *
                 C141309) *
                C141221) *
               C141294 * C141485 -
           (((C124610 + C124611 + C124612) * C141309 +
             (C124370 + C124371 + C124372) * C188) *
                C141221 +
            ((C124609 + C124608 + C124607) * C141309 +
             (C124363 + C124362 + C124361) * C188) *
                C141452) *
               C141294 * C2374) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eezx[120] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139366 * C108 + C141452 * C114 + C139356 * C109 +
             C141221 * C115) *
                C124333 +
            (C139366 * C276 + C141452 * C579 + C139356 * C277 +
             C141221 * C580) *
                C141498 +
            (C79109 + C79110) * C124334 + (C79517 + C79518) * C141499 +
            (C85800 + C85799) * C124335 + (C86100 + C86099) * C124182) *
               C141309 * C141294 * C2374 -
           ((C82781 + C82782) * C124182 + (C82383 + C82384) * C124335 +
            C82780 * C141499 + C82380 * C124334 + (C70269 + C70268) * C141498 +
            (C69913 + C69912) * C124333) *
               C141309 * C141294 * C141485) *
              C2376 +
          (((C69920 + C69921) * C124333 + (C70272 + C70273) * C141498 +
            (C77869 + C77870) * C124334 + (C78277 + C78278) * C141499 +
            (C139366 * C13302 + C141452 * C13306 + C139356 * C14876 +
             C141221 * C14877) *
                C124335 +
            (C139366 * C13476 + C141452 * C13798 + C139356 * C15091 +
             C141221 * C15528) *
                C124182) *
               C141309 * C141294 * C141485 -
           ((C126597 + C126596) * C124182 + (C126278 + C126277) * C124335 +
            (C79520 + C79519) * C141499 + (C79114 + C79113) * C124334 +
            (C139356 * C278 + C141221 * C581 + C139366 * C277 +
             C141452 * C580) *
                C141498 +
            (C139356 * C110 + C141221 * C116 + C139366 * C109 +
             C141452 * C115) *
                C124333) *
               C141309 * C141294 * C2374) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eezy[120] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141309 * C189) * C124333 +
             (C188 * C276 + C141309 * C635) * C141498 + C16043 * C124334 +
             C16798 * C141499 + C16045 * C124335 + C16799 * C124182) *
                C141452 +
            (C124761 + C124762 + C124763 + C124764 + C124765 + C124766) *
                C141221) *
               C141294 * C2374 -
           ((C125703 + C125704 + C125705 + C125706 + C125707 + C125708) *
                C141221 +
            (C19364 * C124182 + C18717 * C124335 + C19363 * C141499 +
             C18715 * C124334 + (C188 * C1006 + C141309 * C1419) * C141498 +
             (C188 * C823 + C141309 * C912) * C124333) *
                C141452) *
               C141294 * C141485) *
              C2376 +
          (((C125708 + C125707 + C125706 + C125705 + C125704 + C125703) *
                C141452 +
            (C935 * C124333 + C1432 * C141498 + C30842 * C124334 +
             C31481 * C141499 + (C188 * C14876 + C141309 * C14979) * C124335 +
             (C188 * C15091 + C141309 * C15627) * C124182) *
                C141221) *
               C141294 * C141485 -
           ((C124767 + C124768 + C124769 + C124770 + C124771 + C124772) *
                C141221 +
            (C124766 + C124765 + C124764 + C124763 + C124762 + C124761) *
                C141452) *
               C141294 * C2374) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eezz[120] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C124846 * C108 + C124850 + C124850 + C141498 * C714 +
             C124847 * C1601 + C124851 + C124851 + C141499 * C2283 +
             C124848 * C5325 + C124852 + C124852 + C124182 * C5781) *
                C141309 * C141452 +
            (C124886 + C124887 + C124888) * C141309 * C141221) *
               C141294 * C2374 -
           ((C125828 + C125829 + C125830) * C141309 * C141221 +
            (C124848 * C13301 + C125816 + C125816 + C124182 * C13953 +
             C124847 * C3490 + C125817 + C125817 + C141499 * C4074 +
             C124846 * C823 + C125818 + C125818 + C141498 * C1505) *
                C141309 * C141452) *
               C141294 * C141485) *
              C2376 +
          (((C125830 + C125829 + C125828) * C141309 * C141452 +
            (C124846 * C821 + C125819 + C125819 + C141498 * C1503 +
             C124847 * C3492 + C125820 + C125820 + C141499 * C4076 +
             C124848 * C14876 + C125821 + C125821 + C124182 * C15738) *
                C141309 * C141221) *
               C141294 * C141485 -
           ((C124889 + C124890 + C124891) * C141309 * C141221 +
            (C124888 + C124887 + C124886) * C141309 * C141452) *
               C141294 * C2374) *
              C141483)) /
        (p * q * std::sqrt(p + q));
    d2eexx[121] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C68675 * C108 + C68680 + C68680 + C141452 * C120 + C68677 * C109 +
            C68681 + C68681 + C141221 * C121) *
               C141498 +
           (C78695 + C78696) * C141499 + (C85494 + C85493) * C124182) *
              C141309 * C141294 * C2956 -
          ((C81977 + C81978) * C124182 + C81972 * C141499 +
           (C69545 + C69544) * C141498) *
              C141309 * C141294 * C2957 +
          (C72394 * C141498 + (C73154 + C73153) * C141499 +
           (C68675 * C13303 + C75833 + C75833 + C141452 * C13311 +
            C68677 * C13304 + C75834 + C75834 + C141221 * C13312) *
               C124182) *
              C141309 * C141294 * C2958) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eexy[121] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((C188 * C108 + C141309 * C189) * C139366 +
                       (C188 * C114 + C141309 * C195) * C141452 +
                       C218 * C139356 + C219 * C141221) *
                          C141498 +
                      (C126039 + C126040 + C126041 + C126042) * C141499 +
                      (C126043 + C126044 + C126045 + C126046) * C124182) *
                         C141294 * C2956 -
                     ((C14990 * C141221 + C14991 * C139356 + C18718 * C141452 +
                       C18717 * C139366) *
                          C124182 +
                      (C14992 * C141221 + C14993 * C139356 + C18716 * C141452 +
                       C18715 * C139366) *
                          C141499 +
                      (C936 * C141221 + C937 * C139356 +
                       (C188 * C828 + C141309 * C917) * C141452 +
                       (C188 * C823 + C141309 * C912) * C139366) *
                          C141498) *
                         C141294 * C2957 +
                     (((C188 * C2960 + C141309 * C3026) * C139366 +
                       (C188 * C2964 + C141309 * C3030) * C141452 +
                       (C188 * C2961 + C141309 * C3027) * C139356 +
                       (C188 * C2965 + C141309 * C3031) * C141221) *
                          C141498 +
                      ((C188 * C7887 + C141309 * C8006) * C139366 +
                       (C188 * C7890 + C141309 * C8009) * C141452 +
                       (C188 * C7886 + C141309 * C8005) * C139356 +
                       (C188 * C7889 + C141309 * C8008) * C141221) *
                          C141499 +
                      ((C188 * C13303 + C141309 * C13394) * C139366 +
                       (C188 * C13307 + C141309 * C13398) * C141452 +
                       (C188 * C13304 + C141309 * C13396) * C139356 +
                       (C188 * C13308 + C141309 * C13400) * C141221) *
                          C124182) *
                         C141294 * C2958) *
                    C141243) /
                   (p * q * std::sqrt(p + q));
    d2eexz[121] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((C124333 * C108 + C141498 * C276 + C124334 * C1601 +
                       C141499 * C1784 + C124335 * C5325 + C124182 * C5449) *
                          C139366 +
                      (C124333 * C114 + C141498 * C282 + C124334 * C1606 +
                       C141499 * C1789 + C124335 * C5329 + C124182 * C5453) *
                          C141452 +
                      (C124361 + C124362 + C124363) * C139356 +
                      (C124364 + C124365 + C124366) * C141221) *
                         C141309 * C141294 * C2956 -
                     ((C125198 + C125199 + C125200) * C141221 +
                      (C125201 + C125202 + C125203) * C139356 +
                      (C124335 * C13305 + C124182 * C13479 + C124334 * C3494 +
                       C141499 * C3650 + C124333 * C828 + C141498 * C1011) *
                          C141452 +
                      (C124335 * C13301 + C124182 * C13475 + C124334 * C3490 +
                       C141499 * C3646 + C124333 * C823 + C141498 * C1006) *
                          C139366) *
                         C141309 * C141294 * C2957 +
                     ((C124333 * C2960 + C141498 * C3084 + C124334 * C7887 +
                       C141499 * C8128 + C124335 * C13303 + C124182 * C13477) *
                          C139366 +
                      (C124333 * C2964 + C141498 * C3088 + C124334 * C7890 +
                       C141499 * C8131 + C124335 * C13307 + C124182 * C13481) *
                          C141452 +
                      (C124333 * C2961 + C141498 * C3085 + C124334 * C7886 +
                       C141499 * C8127 + C124335 * C13304 + C124182 * C13478) *
                          C139356 +
                      (C124333 * C2965 + C141498 * C3089 + C124334 * C7889 +
                       C141499 * C8130 + C124335 * C13308 + C124182 * C13482) *
                          C141221) *
                         C141309 * C141294 * C2958) *
                    C141243) /
                   (p * q * std::sqrt(p + q));
    d2eeyx[121] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139366 * C108 + C141452 * C114 + C139356 * C109 +
             C141221 * C115) *
                C188 +
            (C139366 * C189 + C141452 * C362 + C139356 * C190 +
             C141221 * C363) *
                C141309) *
               C141498 +
           ((C79109 + C79110) * C188 + (C79111 + C79112) * C141309) * C141499 +
           ((C85800 + C85799) * C188 + (C85798 + C85797) * C141309) * C124182) *
              C141294 * C2956 -
          (((C82381 + C82382) * C141309 + (C82383 + C82384) * C188) * C124182 +
           (C82379 * C141309 + C82380 * C188) * C141499 +
           ((C69915 + C69914) * C141309 + (C69913 + C69912) * C188) * C141498) *
              C141294 * C2957 +
          ((C72637 * C188 + C72638 * C141309) * C141498 +
           ((C73478 + C73477) * C188 + (C73476 + C73475) * C141309) * C141499 +
           ((C139366 * C13303 + C141452 * C13307 + C139356 * C13304 +
             C141221 * C13308) *
                C188 +
            (C139366 * C13394 + C141452 * C13559 + C139356 * C13396 +
             C141221 * C13560) *
                C141309) *
               C124182) *
              C141294 * C2958) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eeyy[121] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C418 * C108 + C426 + C426 + C141309 * C419) * C141452 +
            C448 * C141221) *
               C141498 +
           (C126379 + C126380) * C141499 + (C126381 + C126382) * C124182) *
              C141294 * C2956 -
          ((C15321 * C141221 + C19050 * C141452) * C124182 +
           (C15322 * C141221 + C19049 * C141452) * C141499 +
           (C1193 * C141221 +
            (C418 * C823 + C1183 + C1183 + C141309 * C1171) * C141452) *
               C141498) *
              C141294 * C2957 +
          (((C418 * C2960 + C3201 + C3201 + C141309 * C3196) * C141452 +
            (C418 * C2961 + C3202 + C3202 + C141309 * C3197) * C141221) *
               C141498 +
           ((C418 * C7887 + C18179 + C18179 + C141309 * C8345) * C141452 +
            (C418 * C7886 + C18180 + C18180 + C141309 * C8344) * C141221) *
               C141499 +
           ((C418 * C13303 + C18181 + C18181 + C141309 * C13636) * C141452 +
            (C418 * C13304 + C18182 + C18182 + C141309 * C13638) * C141221) *
               C124182) *
              C141294 * C2958) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eeyz[121] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((C124333 * C108 + C141498 * C276 + C124334 * C1601 +
                        C141499 * C1784 + C124335 * C5325 + C124182 * C5449) *
                           C188 +
                       (C124333 * C189 + C141498 * C501 + C124334 * C1690 +
                        C141499 * C2040 + C124335 * C5391 + C124182 * C5619) *
                           C141309) *
                          C141452 +
                      ((C124361 + C124362 + C124363) * C188 +
                       (C124607 + C124608 + C124609) * C141309) *
                          C141221) *
                         C141294 * C2956 -
                     (((C125504 + C125505 + C125506) * C141309 +
                       (C125201 + C125202 + C125203) * C188) *
                          C141221 +
                      ((C124335 * C13393 + C124182 * C13719 + C124334 * C3572 +
                        C141499 * C3864 + C124333 * C912 + C141498 * C1262) *
                           C141309 +
                       (C124335 * C13301 + C124182 * C13475 + C124334 * C3490 +
                        C141499 * C3646 + C124333 * C823 + C141498 * C1006) *
                           C188) *
                          C141452) *
                         C141294 * C2957 +
                     (((C124333 * C2960 + C141498 * C3084 + C124334 * C7887 +
                        C141499 * C8128 + C124335 * C13303 + C124182 * C13477) *
                           C188 +
                       (C124333 * C3026 + C141498 * C3254 + C124334 * C8006 +
                        C141499 * C8470 + C124335 * C13394 + C124182 * C13720) *
                           C141309) *
                          C141452 +
                      ((C124333 * C2961 + C141498 * C3085 + C124334 * C7886 +
                        C141499 * C8127 + C124335 * C13304 + C124182 * C13478) *
                           C188 +
                       (C124333 * C3027 + C141498 * C3255 + C124334 * C8005 +
                        C141499 * C8469 + C124335 * C13396 + C124182 * C13722) *
                           C141309) *
                          C141221) *
                         C141294 * C2958) *
                    C141243) /
                   (p * q * std::sqrt(p + q));
    d2eezx[121] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C139366 * C108 + C141452 * C114 + C139356 * C109 + C141221 * C115) *
               C124333 +
           (C139366 * C276 + C141452 * C579 + C139356 * C277 + C141221 * C580) *
               C141498 +
           (C79109 + C79110) * C124334 + (C79517 + C79518) * C141499 +
           (C85800 + C85799) * C124335 + (C86100 + C86099) * C124182) *
              C141309 * C141294 * C2956 -
          ((C82781 + C82782) * C124182 + (C82383 + C82384) * C124335 +
           C82780 * C141499 + C82380 * C124334 + (C70269 + C70268) * C141498 +
           (C69913 + C69912) * C124333) *
              C141309 * C141294 * C2957 +
          (C72637 * C124333 + C72880 * C141498 + (C73478 + C73477) * C124334 +
           (C73792 + C73791) * C141499 +
           (C139366 * C13303 + C141452 * C13307 + C139356 * C13304 +
            C141221 * C13308) *
               C124335 +
           (C139366 * C13477 + C141452 * C13799 + C139356 * C13478 +
            C141221 * C13800) *
               C124182) *
              C141309 * C141294 * C2958) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eezy[121] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141309 * C189) * C124333 +
            (C188 * C276 + C141309 * C635) * C141498 + C16043 * C124334 +
            C16798 * C141499 + C16045 * C124335 + C16799 * C124182) *
               C141452 +
           (C124761 + C124762 + C124763 + C124764 + C124765 + C124766) *
               C141221) *
              C141294 * C2956 -
          ((C125703 + C125704 + C125705 + C125706 + C125707 + C125708) *
               C141221 +
           (C19364 * C124182 + C18717 * C124335 + C19363 * C141499 +
            C18715 * C124334 + (C188 * C1006 + C141309 * C1419) * C141498 +
            (C188 * C823 + C141309 * C912) * C124333) *
               C141452) *
              C141294 * C2957 +
          (((C188 * C2960 + C141309 * C3026) * C124333 +
            (C188 * C3084 + C141309 * C3362) * C141498 +
            (C188 * C7887 + C141309 * C8006) * C124334 +
            (C188 * C8128 + C141309 * C8684) * C141499 +
            (C188 * C13303 + C141309 * C13394) * C124335 +
            (C188 * C13477 + C141309 * C13876) * C124182) *
               C141452 +
           ((C188 * C2961 + C141309 * C3027) * C124333 +
            (C188 * C3085 + C141309 * C3363) * C141498 +
            (C188 * C7886 + C141309 * C8005) * C124334 +
            (C188 * C8127 + C141309 * C8683) * C141499 +
            (C188 * C13304 + C141309 * C13396) * C124335 +
            (C188 * C13478 + C141309 * C13878) * C124182) *
               C141221) *
              C141294 * C2958) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eezz[121] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C124846 * C108 + C124850 + C124850 + C141498 * C714 +
            C124847 * C1601 + C124851 + C124851 + C141499 * C2283 +
            C124848 * C5325 + C124852 + C124852 + C124182 * C5781) *
               C141309 * C141452 +
           (C124886 + C124887 + C124888) * C141309 * C141221) *
              C141294 * C2956 -
          ((C125828 + C125829 + C125830) * C141309 * C141221 +
           (C124848 * C13301 + C125816 + C125816 + C124182 * C13953 +
            C124847 * C3490 + C125817 + C125817 + C141499 * C4074 +
            C124846 * C823 + C125818 + C125818 + C141498 * C1505) *
               C141309 * C141452) *
              C141294 * C2957 +
          ((C124846 * C2960 + C128372 + C128372 + C141498 * C3416 +
            C124847 * C7887 + C128373 + C128373 + C141499 * C8794 +
            C124848 * C13303 + C128374 + C128374 + C124182 * C13954) *
               C141309 * C141452 +
           (C124846 * C2961 + C128375 + C128375 + C141498 * C3417 +
            C124847 * C7886 + C128376 + C128376 + C141499 * C8793 +
            C124848 * C13304 + C128377 + C128377 + C124182 * C13956) *
               C141309 * C141221) *
              C141294 * C2958) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eexx[122] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C68675 * C108 + C68680 + C68680 + C141452 * C120 + C68677 * C109 +
             C68681 + C68681 + C141221 * C121) *
                C141498 +
            (C78695 + C78696) * C141499 + (C85494 + C85493) * C124182) *
               C141309 * C1596 -
           ((C68677 * C15861 + C85486 + C85486 + C141221 * C15867 +
             C68675 * C15862 + C85485 + C85485 + C141452 * C15868) *
                C124182 +
            (C85493 + C85494) * C141499 + (C78696 + C78695) * C141498) *
               C141309 * C141487) *
              C2374 +
          ((C81967 * C141498 + (C81978 + C81977) * C141499 +
            (C68675 * C18582 + C85487 + C85487 + C141452 * C18586 +
             C68677 * C18583 + C85488 + C85488 + C141221 * C18587) *
                C124182) *
               C141309 * C141487 -
           ((C81977 + C81978) * C124182 + C81972 * C141499 +
            (C69545 + C69544) * C141498) *
               C141309 * C1596) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eexy[122] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((((C188 * C108 + C141309 * C189) * C139366 +
                        (C188 * C114 + C141309 * C195) * C141452 +
                        C218 * C139356 + C219 * C141221) *
                           C141498 +
                       (C126039 + C126040 + C126041 + C126042) * C141499 +
                       (C126043 + C126044 + C126045 + C126046) * C124182) *
                          C1596 -
                      ((C16047 * C141221 + C16048 * C139356 + C21414 * C141452 +
                        C21415 * C139366) *
                           C124182 +
                       (C126046 + C126045 + C126044 + C126043) * C141499 +
                       (C126042 + C126041 + C126040 + C126039) * C141498) *
                          C141487) *
                         C2374 +
                     (((C128574 + C128575 + C128576 + C128577) * C141498 +
                       (C128578 + C128579 + C128580 + C128581) * C141499 +
                       (C112221 * C139366 + C112222 * C141452 +
                        (C188 * C18583 + C141309 * C18699) * C139356 +
                        (C188 * C18585 + C141309 * C18701) * C141221) *
                           C124182) *
                          C141487 -
                      ((C128581 + C128580 + C128579 + C128578) * C124182 +
                       (C128577 + C128576 + C128575 + C128574) * C141499 +
                       (C936 * C141221 + C937 * C139356 +
                        (C188 * C828 + C141309 * C917) * C141452 +
                        (C188 * C823 + C141309 * C912) * C139366) *
                           C141498) *
                          C1596) *
                         C141485) *
                    C141243) /
                   (p * q * std::sqrt(p + q));
    d2eexz[122] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C124333 * C108 + C141498 * C276 + C124334 * C1601 +
             C141499 * C1784 + C124335 * C5325 + C124182 * C5449) *
                C139366 +
            (C124333 * C114 + C141498 * C282 + C124334 * C1606 +
             C141499 * C1789 + C124335 * C5329 + C124182 * C5453) *
                C141452 +
            (C124361 + C124362 + C124363) * C139356 +
            (C124364 + C124365 + C124366) * C141221) *
               C141309 * C1596 -
           ((C126165 + C126166 + C126167) * C141221 +
            (C126168 + C126169 + C126170) * C139356 +
            (C124335 * C15865 + C124182 * C16154 + C124334 * C5329 +
             C141499 * C5453 + C124333 * C1606 + C141498 * C1789) *
                C141452 +
            (C124335 * C15862 + C124182 * C16151 + C124334 * C5325 +
             C141499 * C5449 + C124333 * C1601 + C141498 * C1784) *
                C139366) *
               C141309 * C141487) *
              C2374 +
          (((C124333 * C3490 + C141498 * C3646 + C124334 * C13301 +
             C141499 * C13475 + C124335 * C18582 + C124182 * C18820) *
                C139366 +
            (C124333 * C3494 + C141498 * C3650 + C124334 * C13305 +
             C141499 * C13479 + C124335 * C18584 + C124182 * C18822) *
                C141452 +
            (C124333 * C3491 + C141498 * C3647 + C124334 * C13302 +
             C141499 * C13476 + C124335 * C18583 + C124182 * C18821) *
                C139356 +
            (C124333 * C3495 + C141498 * C3651 + C124334 * C13306 +
             C141499 * C13480 + C124335 * C18585 + C124182 * C18823) *
                C141221) *
               C141309 * C141487 -
           ((C125198 + C125199 + C125200) * C141221 +
            (C125201 + C125202 + C125203) * C139356 +
            (C124335 * C13305 + C124182 * C13479 + C124334 * C3494 +
             C141499 * C3650 + C124333 * C828 + C141498 * C1011) *
                C141452 +
            (C124335 * C13301 + C124182 * C13475 + C124334 * C3490 +
             C141499 * C3646 + C124333 * C823 + C141498 * C1006) *
                C139366) *
               C141309 * C1596) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eeyx[122] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139366 * C108 + C141452 * C114 + C139356 * C109 +
              C141221 * C115) *
                 C188 +
             (C139366 * C189 + C141452 * C362 + C139356 * C190 +
              C141221 * C363) *
                 C141309) *
                C141498 +
            ((C79109 + C79110) * C188 + (C79111 + C79112) * C141309) * C141499 +
            ((C85800 + C85799) * C188 + (C85798 + C85797) * C141309) *
                C124182) *
               C1596 -
           (((C139356 * C16012 + C141221 * C16272 + C139366 * C16013 +
              C141452 * C16273) *
                 C141309 +
             (C139356 * C15861 + C141221 * C15864 + C139366 * C15862 +
              C141452 * C15865) *
                 C188) *
                C124182 +
            ((C85797 + C85798) * C141309 + (C85799 + C85800) * C188) * C141499 +
            ((C79112 + C79111) * C141309 + (C79110 + C79109) * C188) *
                C141498) *
               C141487) *
              C2374 +
          (((C82369 * C188 + C82370 * C141309) * C141498 +
            ((C82384 + C82383) * C188 + (C82382 + C82381) * C141309) * C141499 +
            ((C139366 * C18582 + C141452 * C18584 + C139356 * C18583 +
              C141221 * C18585) *
                 C188 +
             (C139366 * C18698 + C141452 * C18922 + C139356 * C18699 +
              C141221 * C18923) *
                 C141309) *
                C124182) *
               C141487 -
           (((C82381 + C82382) * C141309 + (C82383 + C82384) * C188) * C124182 +
            (C82379 * C141309 + C82380 * C188) * C141499 +
            ((C69915 + C69914) * C141309 + (C69913 + C69912) * C188) *
                C141498) *
               C1596) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eeyy[122] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C418 * C108 + C426 + C426 + C141309 * C419) * C141452 +
             C448 * C141221) *
                C141498 +
            (C126379 + C126380) * C141499 + (C126381 + C126382) * C124182) *
               C1596 -
           ((C16448 * C141221 + C21674 * C141452) * C124182 +
            (C126382 + C126381) * C141499 + (C126380 + C126379) * C141498) *
               C141487) *
              C2374 +
          (((C128876 + C128877) * C141498 + (C128878 + C128879) * C141499 +
            (C112436 * C141452 +
             (C418 * C18583 + C19044 + C19044 + C141309 * C19035) * C141221) *
                C124182) *
               C141487 -
           ((C128879 + C128878) * C124182 + (C128877 + C128876) * C141499 +
            (C1193 * C141221 +
             (C418 * C823 + C1183 + C1183 + C141309 * C1171) * C141452) *
                C141498) *
               C1596) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eeyz[122] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C124333 * C108 + C141498 * C276 + C124334 * C1601 +
              C141499 * C1784 + C124335 * C5325 + C124182 * C5449) *
                 C188 +
             (C124333 * C189 + C141498 * C501 + C124334 * C1690 +
              C141499 * C2040 + C124335 * C5391 + C124182 * C5619) *
                 C141309) *
                C141452 +
            ((C124361 + C124362 + C124363) * C188 +
             (C124607 + C124608 + C124609) * C141309) *
                C141221) *
               C1596 -
           (((C126491 + C126492 + C126493) * C141309 +
             (C126168 + C126169 + C126170) * C188) *
                C141221 +
            ((C124335 * C16013 + C124182 * C16549 + C124334 * C5391 +
              C141499 * C5619 + C124333 * C1690 + C141498 * C2040) *
                 C141309 +
             (C124335 * C15862 + C124182 * C16151 + C124334 * C5325 +
              C141499 * C5449 + C124333 * C1601 + C141498 * C1784) *
                 C188) *
                C141452) *
               C141487) *
              C2374 +
          ((((C124333 * C3490 + C141498 * C3646 + C124334 * C13301 +
              C141499 * C13475 + C124335 * C18582 + C124182 * C18820) *
                 C188 +
             (C124333 * C3572 + C141498 * C3864 + C124334 * C13393 +
              C141499 * C13719 + C124335 * C18698 + C124182 * C19150) *
                 C141309) *
                C141452 +
            ((C124333 * C3491 + C141498 * C3647 + C124334 * C13302 +
              C141499 * C13476 + C124335 * C18583 + C124182 * C18821) *
                 C188 +
             (C124333 * C3573 + C141498 * C3865 + C124334 * C13395 +
              C141499 * C13721 + C124335 * C18699 + C124182 * C19151) *
                 C141309) *
                C141221) *
               C141487 -
           (((C125504 + C125505 + C125506) * C141309 +
             (C125201 + C125202 + C125203) * C188) *
                C141221 +
            ((C124335 * C13393 + C124182 * C13719 + C124334 * C3572 +
              C141499 * C3864 + C124333 * C912 + C141498 * C1262) *
                 C141309 +
             (C124335 * C13301 + C124182 * C13475 + C124334 * C3490 +
              C141499 * C3646 + C124333 * C823 + C141498 * C1006) *
                 C188) *
                C141452) *
               C1596) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eezx[122] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139366 * C108 + C141452 * C114 + C139356 * C109 +
             C141221 * C115) *
                C124333 +
            (C139366 * C276 + C141452 * C579 + C139356 * C277 +
             C141221 * C580) *
                C141498 +
            (C79109 + C79110) * C124334 + (C79517 + C79518) * C141499 +
            (C85800 + C85799) * C124335 + (C86100 + C86099) * C124182) *
               C141309 * C1596 -
           ((C139356 * C16150 + C141221 * C16658 + C139366 * C16151 +
             C141452 * C16659) *
                C124182 +
            (C139356 * C15861 + C141221 * C15864 + C139366 * C15862 +
             C141452 * C15865) *
                C124335 +
            (C86099 + C86100) * C141499 + (C85799 + C85800) * C124334 +
            (C79518 + C79517) * C141498 + (C79110 + C79109) * C124333) *
               C141309 * C141487) *
              C2374 +
          ((C82369 * C124333 + C82775 * C141498 + (C82384 + C82383) * C124334 +
            (C82782 + C82781) * C141499 +
            (C139366 * C18582 + C141452 * C18584 + C139356 * C18583 +
             C141221 * C18585) *
                C124335 +
            (C139366 * C18820 + C141452 * C19250 + C139356 * C18821 +
             C141221 * C19251) *
                C124182) *
               C141309 * C141487 -
           ((C82781 + C82782) * C124182 + (C82383 + C82384) * C124335 +
            C82780 * C141499 + C82380 * C124334 + (C70269 + C70268) * C141498 +
            (C69913 + C69912) * C124333) *
               C141309 * C1596) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eezy[122] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141309 * C189) * C124333 +
             (C188 * C276 + C141309 * C635) * C141498 + C16043 * C124334 +
             C16798 * C141499 + C16045 * C124335 + C16799 * C124182) *
                C141452 +
            (C124761 + C124762 + C124763 + C124764 + C124765 + C124766) *
                C141221) *
               C1596 -
           ((C126696 + C126697 + C126698 + C126699 + C126700 + C126701) *
                C141221 +
            (C21913 * C124182 + C21415 * C124335 + C16799 * C141499 +
             C16045 * C124334 + C16798 * C141498 + C16043 * C124333) *
                C141452) *
               C141487) *
              C2374 +
          (((C18715 * C124333 + C19363 * C141498 + C18717 * C124334 +
             C19364 * C141499 + C112221 * C124335 + C112638 * C124182) *
                C141452 +
            (C14993 * C124333 + C15638 * C141498 + C14991 * C124334 +
             C15637 * C141499 + (C188 * C18583 + C141309 * C18699) * C124335 +
             (C188 * C18821 + C141309 * C19357) * C124182) *
                C141221) *
               C141487 -
           ((C125703 + C125704 + C125705 + C125706 + C125707 + C125708) *
                C141221 +
            (C19364 * C124182 + C18717 * C124335 + C19363 * C141499 +
             C18715 * C124334 + (C188 * C1006 + C141309 * C1419) * C141498 +
             (C188 * C823 + C141309 * C912) * C124333) *
                C141452) *
               C1596) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eezz[122] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C124846 * C108 + C124850 + C124850 + C141498 * C714 +
             C124847 * C1601 + C124851 + C124851 + C141499 * C2283 +
             C124848 * C5325 + C124852 + C124852 + C124182 * C5781) *
                C141309 * C141452 +
            (C124886 + C124887 + C124888) * C141309 * C141221) *
               C1596 -
           ((C126821 + C126822 + C126823) * C141309 * C141221 +
            (C124848 * C15862 + C126809 + C126809 + C124182 * C16900 +
             C124847 * C5325 + C126810 + C126810 + C141499 * C5781 +
             C124846 * C1601 + C126811 + C126811 + C141498 * C2283) *
                C141309 * C141452) *
               C141487) *
              C2374 +
          (((C124846 * C3490 + C129272 + C129272 + C141498 * C4074 +
             C124847 * C13301 + C129273 + C129273 + C141499 * C13953 +
             C124848 * C18582 + C129274 + C129274 + C124182 * C19462) *
                C141309 * C141452 +
            (C124846 * C3491 + C129275 + C129275 + C141498 * C4075 +
             C124847 * C13302 + C129276 + C129276 + C141499 * C13955 +
             C124848 * C18583 + C129277 + C129277 + C124182 * C19463) *
                C141309 * C141221) *
               C141487 -
           ((C125828 + C125829 + C125830) * C141309 * C141221 +
            (C124848 * C13301 + C125816 + C125816 + C124182 * C13953 +
             C124847 * C3490 + C125817 + C125817 + C141499 * C4074 +
             C124846 * C823 + C125818 + C125818 + C141498 * C1505) *
                C141309 * C141452) *
               C1596) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eexx[123] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C68675 * C108 + C68680 + C68680 + C141452 * C120 + C68677 * C109 +
             C68681 + C68681 + C141221 * C121) *
                C141498 +
            (C78695 + C78696) * C141499 + (C85494 + C85493) * C124182) *
               C141309 * C4148 -
           ((C68677 * C15861 + C85486 + C85486 + C141221 * C15867 +
             C68675 * C15862 + C85485 + C85485 + C141452 * C15868) *
                C124182 +
            (C85493 + C85494) * C141499 + (C78696 + C78695) * C141498) *
               C141309 * C141487) *
              C141277 * C2376 +
          (((C78697 + C78698) * C141498 + (C125939 + C125940) * C141499 +
            (C68675 * C15861 + C125933 + C125933 + C141452 * C15867 +
             C68677 * C15863 + C125934 + C125934 + C141221 * C15869) *
                C124182) *
               C141309 * C141487 -
           ((C125940 + C125939) * C124182 + (C78698 + C78697) * C141499 +
            (C68677 * C110 + C68690 + C68690 + C141221 * C122 + C68675 * C109 +
             C68691 + C68691 + C141452 * C121) *
                C141498) *
               C141309 * C4148) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eexy[123] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((((C188 * C108 + C141309 * C189) * C139366 +
                        (C188 * C114 + C141309 * C195) * C141452 +
                        C218 * C139356 + C219 * C141221) *
                           C141498 +
                       (C126039 + C126040 + C126041 + C126042) * C141499 +
                       (C126043 + C126044 + C126045 + C126046) * C124182) *
                          C4148 -
                      ((C16047 * C141221 + C16048 * C139356 + C21414 * C141452 +
                        C21415 * C139366) *
                           C124182 +
                       (C126046 + C126045 + C126044 + C126043) * C141499 +
                       (C126042 + C126041 + C126040 + C126039) * C141498) *
                          C141487) *
                         C141277 * C2376 +
                     (((C126047 + C126048 + C126049 + C126050) * C141498 +
                       (C126051 + C126052 + C126053 + C126054) * C141499 +
                       (C16048 * C139366 + C16047 * C141452 +
                        (C188 * C15863 + C141309 * C16014) * C139356 +
                        (C188 * C15866 + C141309 * C16017) * C141221) *
                           C124182) *
                          C141487 -
                      ((C126054 + C126053 + C126052 + C126051) * C124182 +
                       (C126050 + C126049 + C126048 + C126047) * C141499 +
                       (C221 * C141221 + C220 * C139356 + C219 * C141452 +
                        C218 * C139366) *
                           C141498) *
                          C4148) *
                         C141277 * C141483)) /
                   (p * q * std::sqrt(p + q));
    d2eexz[123] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((C124333 * C108 + C141498 * C276 + C124334 * C1601 +
                        C141499 * C1784 + C124335 * C5325 + C124182 * C5449) *
                           C139366 +
                       (C124333 * C114 + C141498 * C282 + C124334 * C1606 +
                        C141499 * C1789 + C124335 * C5329 + C124182 * C5453) *
                           C141452 +
                       (C124361 + C124362 + C124363) * C139356 +
                       (C124364 + C124365 + C124366) * C141221) *
                          C141309 * C4148 -
                      ((C126165 + C126166 + C126167) * C141221 +
                       (C126168 + C126169 + C126170) * C139356 +
                       (C124335 * C15865 + C124182 * C16154 + C124334 * C5329 +
                        C141499 * C5453 + C124333 * C1606 + C141498 * C1789) *
                           C141452 +
                       (C124335 * C15862 + C124182 * C16151 + C124334 * C5325 +
                        C141499 * C5449 + C124333 * C1601 + C141498 * C1784) *
                           C139366) *
                          C141309 * C141487) *
                         C141277 * C2376 +
                     (((C126170 + C126169 + C126168) * C139366 +
                       (C126167 + C126166 + C126165) * C141452 +
                       (C124333 * C1599 + C141498 * C1782 + C124334 * C5327 +
                        C141499 * C5451 + C124335 * C15863 + C124182 * C16152) *
                           C139356 +
                       (C124333 * C1604 + C141498 * C1787 + C124334 * C5331 +
                        C141499 * C5455 + C124335 * C15866 + C124182 * C16155) *
                           C141221) *
                          C141309 * C141487 -
                      ((C124367 + C124368 + C124369) * C141221 +
                       (C124370 + C124371 + C124372) * C139356 +
                       (C124366 + C124365 + C124364) * C141452 +
                       (C124363 + C124362 + C124361) * C139366) *
                          C141309 * C4148) *
                         C141277 * C141483)) /
                   (p * q * std::sqrt(p + q));
    d2eeyx[123] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139366 * C108 + C141452 * C114 + C139356 * C109 +
              C141221 * C115) *
                 C188 +
             (C139366 * C189 + C141452 * C362 + C139356 * C190 +
              C141221 * C363) *
                 C141309) *
                C141498 +
            ((C79109 + C79110) * C188 + (C79111 + C79112) * C141309) * C141499 +
            ((C85800 + C85799) * C188 + (C85798 + C85797) * C141309) *
                C124182) *
               C4148 -
           (((C139356 * C16012 + C141221 * C16272 + C139366 * C16013 +
              C141452 * C16273) *
                 C141309 +
             (C139356 * C15861 + C141221 * C15864 + C139366 * C15862 +
              C141452 * C15865) *
                 C188) *
                C124182 +
            ((C85797 + C85798) * C141309 + (C85799 + C85800) * C188) * C141499 +
            ((C79112 + C79111) * C141309 + (C79110 + C79109) * C188) *
                C141498) *
               C141487) *
              C141277 * C2376 +
          ((((C79113 + C79114) * C188 + (C79115 + C79116) * C141309) * C141498 +
            ((C126277 + C126278) * C188 + (C126279 + C126280) * C141309) *
                C141499 +
            ((C139366 * C15861 + C141452 * C15864 + C139356 * C15863 +
              C141221 * C15866) *
                 C188 +
             (C139366 * C16012 + C141452 * C16272 + C139356 * C16014 +
              C141221 * C16274) *
                 C141309) *
                C124182) *
               C141487 -
           (((C126280 + C126279) * C141309 + (C126278 + C126277) * C188) *
                C124182 +
            ((C79116 + C79115) * C141309 + (C79114 + C79113) * C188) * C141499 +
            ((C139356 * C191 + C141221 * C364 + C139366 * C190 +
              C141452 * C363) *
                 C141309 +
             (C139356 * C110 + C141221 * C116 + C139366 * C109 +
              C141452 * C115) *
                 C188) *
                C141498) *
               C4148) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[123] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C418 * C108 + C426 + C426 + C141309 * C419) * C141452 +
             C448 * C141221) *
                C141498 +
            (C126379 + C126380) * C141499 + (C126381 + C126382) * C124182) *
               C4148 -
           ((C16448 * C141221 + C21674 * C141452) * C124182 +
            (C126382 + C126381) * C141499 + (C126380 + C126379) * C141498) *
               C141487) *
              C141277 * C2376 +
          (((C126383 + C126384) * C141498 + (C126385 + C126386) * C141499 +
            (C16448 * C141452 +
             (C418 * C15863 + C16439 + C16439 + C141309 * C16423) * C141221) *
                C124182) *
               C141487 -
           ((C126386 + C126385) * C124182 + (C126384 + C126383) * C141499 +
            (C449 * C141221 + C448 * C141452) * C141498) *
               C4148) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[123] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C124333 * C108 + C141498 * C276 + C124334 * C1601 +
              C141499 * C1784 + C124335 * C5325 + C124182 * C5449) *
                 C188 +
             (C124333 * C189 + C141498 * C501 + C124334 * C1690 +
              C141499 * C2040 + C124335 * C5391 + C124182 * C5619) *
                 C141309) *
                C141452 +
            ((C124361 + C124362 + C124363) * C188 +
             (C124607 + C124608 + C124609) * C141309) *
                C141221) *
               C4148 -
           (((C126491 + C126492 + C126493) * C141309 +
             (C126168 + C126169 + C126170) * C188) *
                C141221 +
            ((C124335 * C16013 + C124182 * C16549 + C124334 * C5391 +
              C141499 * C5619 + C124333 * C1690 + C141498 * C2040) *
                 C141309 +
             (C124335 * C15862 + C124182 * C16151 + C124334 * C5325 +
              C141499 * C5449 + C124333 * C1601 + C141498 * C1784) *
                 C188) *
                C141452) *
               C141487) *
              C141277 * C2376 +
          ((((C126170 + C126169 + C126168) * C188 +
             (C126493 + C126492 + C126491) * C141309) *
                C141452 +
            ((C124333 * C1599 + C141498 * C1782 + C124334 * C5327 +
              C141499 * C5451 + C124335 * C15863 + C124182 * C16152) *
                 C188 +
             (C124333 * C1688 + C141498 * C2038 + C124334 * C5393 +
              C141499 * C5621 + C124335 * C16014 + C124182 * C16550) *
                 C141309) *
                C141221) *
               C141487 -
           (((C124610 + C124611 + C124612) * C141309 +
             (C124370 + C124371 + C124372) * C188) *
                C141221 +
            ((C124609 + C124608 + C124607) * C141309 +
             (C124363 + C124362 + C124361) * C188) *
                C141452) *
               C4148) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eezx[123] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139366 * C108 + C141452 * C114 + C139356 * C109 +
             C141221 * C115) *
                C124333 +
            (C139366 * C276 + C141452 * C579 + C139356 * C277 +
             C141221 * C580) *
                C141498 +
            (C79109 + C79110) * C124334 + (C79517 + C79518) * C141499 +
            (C85800 + C85799) * C124335 + (C86100 + C86099) * C124182) *
               C141309 * C4148 -
           ((C139356 * C16150 + C141221 * C16658 + C139366 * C16151 +
             C141452 * C16659) *
                C124182 +
            (C139356 * C15861 + C141221 * C15864 + C139366 * C15862 +
             C141452 * C15865) *
                C124335 +
            (C86099 + C86100) * C141499 + (C85799 + C85800) * C124334 +
            (C79518 + C79517) * C141498 + (C79110 + C79109) * C124333) *
               C141309 * C141487) *
              C141277 * C2376 +
          (((C79113 + C79114) * C124333 + (C79519 + C79520) * C141498 +
            (C126277 + C126278) * C124334 + (C126596 + C126597) * C141499 +
            (C139366 * C15861 + C141452 * C15864 + C139356 * C15863 +
             C141221 * C15866) *
                C124335 +
            (C139366 * C16150 + C141452 * C16658 + C139356 * C16152 +
             C141221 * C16660) *
                C124182) *
               C141309 * C141487 -
           ((C126597 + C126596) * C124182 + (C126278 + C126277) * C124335 +
            (C79520 + C79519) * C141499 + (C79114 + C79113) * C124334 +
            (C139356 * C278 + C141221 * C581 + C139366 * C277 +
             C141452 * C580) *
                C141498 +
            (C139356 * C110 + C141221 * C116 + C139366 * C109 +
             C141452 * C115) *
                C124333) *
               C141309 * C4148) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eezy[123] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141309 * C189) * C124333 +
             (C188 * C276 + C141309 * C635) * C141498 + C16043 * C124334 +
             C16798 * C141499 + C16045 * C124335 + C16799 * C124182) *
                C141452 +
            (C124761 + C124762 + C124763 + C124764 + C124765 + C124766) *
                C141221) *
               C4148 -
           ((C126696 + C126697 + C126698 + C126699 + C126700 + C126701) *
                C141221 +
            (C21913 * C124182 + C21415 * C124335 + C16799 * C141499 +
             C16045 * C124334 + C16798 * C141498 + C16043 * C124333) *
                C141452) *
               C141487) *
              C141277 * C2376 +
          (((C126701 + C126700 + C126699 + C126698 + C126697 + C126696) *
                C141452 +
            (C1713 * C124333 + C2210 * C141498 + C14130 * C124334 +
             C14657 * C141499 + (C188 * C15863 + C141309 * C16014) * C124335 +
             (C188 * C16152 + C141309 * C16785) * C124182) *
                C141221) *
               C141487 -
           ((C124767 + C124768 + C124769 + C124770 + C124771 + C124772) *
                C141221 +
            (C124766 + C124765 + C124764 + C124763 + C124762 + C124761) *
                C141452) *
               C4148) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eezz[123] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C124846 * C108 + C124850 + C124850 + C141498 * C714 +
             C124847 * C1601 + C124851 + C124851 + C141499 * C2283 +
             C124848 * C5325 + C124852 + C124852 + C124182 * C5781) *
                C141309 * C141452 +
            (C124886 + C124887 + C124888) * C141309 * C141221) *
               C4148 -
           ((C126821 + C126822 + C126823) * C141309 * C141221 +
            (C124848 * C15862 + C126809 + C126809 + C124182 * C16900 +
             C124847 * C5325 + C126810 + C126810 + C141499 * C5781 +
             C124846 * C1601 + C126811 + C126811 + C141498 * C2283) *
                C141309 * C141452) *
               C141487) *
              C141277 * C2376 +
          (((C126823 + C126822 + C126821) * C141309 * C141452 +
            (C124846 * C1599 + C126812 + C126812 + C141498 * C2281 +
             C124847 * C5327 + C126813 + C126813 + C141499 * C5783 +
             C124848 * C15863 + C126814 + C126814 + C124182 * C16901) *
                C141309 * C141221) *
               C141487 -
           ((C124889 + C124890 + C124891) * C141309 * C141221 +
            (C124888 + C124887 + C124886) * C141309 * C141452) *
               C4148) *
              C141277 * C141483)) /
        (p * q * std::sqrt(p + q));
    d2eexx[124] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C68675 * C108 + C68680 + C68680 + C141452 * C120 + C68677 * C109 +
             C68681 + C68681 + C141221 * C121) *
                C141498 +
            (C78695 + C78696) * C141499 + (C85494 + C85493) * C124182) *
               C141309 * C4148 -
           ((C68677 * C15861 + C85486 + C85486 + C141221 * C15867 +
             C68675 * C15862 + C85485 + C85485 + C141452 * C15868) *
                C124182 +
            (C85493 + C85494) * C141499 + (C78696 + C78695) * C141498) *
               C141309 * C141487) *
              C816 +
          ((C81967 * C141498 + (C81978 + C81977) * C141499 +
            (C68675 * C18582 + C85487 + C85487 + C141452 * C18586 +
             C68677 * C18583 + C85488 + C85488 + C141221 * C18587) *
                C124182) *
               C141309 * C141487 -
           ((C81977 + C81978) * C124182 + C81972 * C141499 +
            (C69545 + C69544) * C141498) *
               C141309 * C4148) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eexy[124] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((((C188 * C108 + C141309 * C189) * C139366 +
                        (C188 * C114 + C141309 * C195) * C141452 +
                        C218 * C139356 + C219 * C141221) *
                           C141498 +
                       (C126039 + C126040 + C126041 + C126042) * C141499 +
                       (C126043 + C126044 + C126045 + C126046) * C124182) *
                          C4148 -
                      ((C16047 * C141221 + C16048 * C139356 + C21414 * C141452 +
                        C21415 * C139366) *
                           C124182 +
                       (C126046 + C126045 + C126044 + C126043) * C141499 +
                       (C126042 + C126041 + C126040 + C126039) * C141498) *
                          C141487) *
                         C816 +
                     (((C128574 + C128575 + C128576 + C128577) * C141498 +
                       (C128578 + C128579 + C128580 + C128581) * C141499 +
                       (C112221 * C139366 + C112222 * C141452 +
                        (C188 * C18583 + C141309 * C18699) * C139356 +
                        (C188 * C18585 + C141309 * C18701) * C141221) *
                           C124182) *
                          C141487 -
                      ((C128581 + C128580 + C128579 + C128578) * C124182 +
                       (C128577 + C128576 + C128575 + C128574) * C141499 +
                       (C936 * C141221 + C937 * C139356 +
                        (C188 * C828 + C141309 * C917) * C141452 +
                        (C188 * C823 + C141309 * C912) * C139366) *
                           C141498) *
                          C4148) *
                         C141485) *
                    C141243) /
                   (p * q * std::sqrt(p + q));
    d2eexz[124] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C124333 * C108 + C141498 * C276 + C124334 * C1601 +
             C141499 * C1784 + C124335 * C5325 + C124182 * C5449) *
                C139366 +
            (C124333 * C114 + C141498 * C282 + C124334 * C1606 +
             C141499 * C1789 + C124335 * C5329 + C124182 * C5453) *
                C141452 +
            (C124361 + C124362 + C124363) * C139356 +
            (C124364 + C124365 + C124366) * C141221) *
               C141309 * C4148 -
           ((C126165 + C126166 + C126167) * C141221 +
            (C126168 + C126169 + C126170) * C139356 +
            (C124335 * C15865 + C124182 * C16154 + C124334 * C5329 +
             C141499 * C5453 + C124333 * C1606 + C141498 * C1789) *
                C141452 +
            (C124335 * C15862 + C124182 * C16151 + C124334 * C5325 +
             C141499 * C5449 + C124333 * C1601 + C141498 * C1784) *
                C139366) *
               C141309 * C141487) *
              C816 +
          (((C124333 * C3490 + C141498 * C3646 + C124334 * C13301 +
             C141499 * C13475 + C124335 * C18582 + C124182 * C18820) *
                C139366 +
            (C124333 * C3494 + C141498 * C3650 + C124334 * C13305 +
             C141499 * C13479 + C124335 * C18584 + C124182 * C18822) *
                C141452 +
            (C124333 * C3491 + C141498 * C3647 + C124334 * C13302 +
             C141499 * C13476 + C124335 * C18583 + C124182 * C18821) *
                C139356 +
            (C124333 * C3495 + C141498 * C3651 + C124334 * C13306 +
             C141499 * C13480 + C124335 * C18585 + C124182 * C18823) *
                C141221) *
               C141309 * C141487 -
           ((C125198 + C125199 + C125200) * C141221 +
            (C125201 + C125202 + C125203) * C139356 +
            (C124335 * C13305 + C124182 * C13479 + C124334 * C3494 +
             C141499 * C3650 + C124333 * C828 + C141498 * C1011) *
                C141452 +
            (C124335 * C13301 + C124182 * C13475 + C124334 * C3490 +
             C141499 * C3646 + C124333 * C823 + C141498 * C1006) *
                C139366) *
               C141309 * C4148) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eeyx[124] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139366 * C108 + C141452 * C114 + C139356 * C109 +
              C141221 * C115) *
                 C188 +
             (C139366 * C189 + C141452 * C362 + C139356 * C190 +
              C141221 * C363) *
                 C141309) *
                C141498 +
            ((C79109 + C79110) * C188 + (C79111 + C79112) * C141309) * C141499 +
            ((C85800 + C85799) * C188 + (C85798 + C85797) * C141309) *
                C124182) *
               C4148 -
           (((C139356 * C16012 + C141221 * C16272 + C139366 * C16013 +
              C141452 * C16273) *
                 C141309 +
             (C139356 * C15861 + C141221 * C15864 + C139366 * C15862 +
              C141452 * C15865) *
                 C188) *
                C124182 +
            ((C85797 + C85798) * C141309 + (C85799 + C85800) * C188) * C141499 +
            ((C79112 + C79111) * C141309 + (C79110 + C79109) * C188) *
                C141498) *
               C141487) *
              C816 +
          (((C82369 * C188 + C82370 * C141309) * C141498 +
            ((C82384 + C82383) * C188 + (C82382 + C82381) * C141309) * C141499 +
            ((C139366 * C18582 + C141452 * C18584 + C139356 * C18583 +
              C141221 * C18585) *
                 C188 +
             (C139366 * C18698 + C141452 * C18922 + C139356 * C18699 +
              C141221 * C18923) *
                 C141309) *
                C124182) *
               C141487 -
           (((C82381 + C82382) * C141309 + (C82383 + C82384) * C188) * C124182 +
            (C82379 * C141309 + C82380 * C188) * C141499 +
            ((C69915 + C69914) * C141309 + (C69913 + C69912) * C188) *
                C141498) *
               C4148) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eeyy[124] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C418 * C108 + C426 + C426 + C141309 * C419) * C141452 +
             C448 * C141221) *
                C141498 +
            (C126379 + C126380) * C141499 + (C126381 + C126382) * C124182) *
               C4148 -
           ((C16448 * C141221 + C21674 * C141452) * C124182 +
            (C126382 + C126381) * C141499 + (C126380 + C126379) * C141498) *
               C141487) *
              C816 +
          (((C128876 + C128877) * C141498 + (C128878 + C128879) * C141499 +
            (C112436 * C141452 +
             (C418 * C18583 + C19044 + C19044 + C141309 * C19035) * C141221) *
                C124182) *
               C141487 -
           ((C128879 + C128878) * C124182 + (C128877 + C128876) * C141499 +
            (C1193 * C141221 +
             (C418 * C823 + C1183 + C1183 + C141309 * C1171) * C141452) *
                C141498) *
               C4148) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eeyz[124] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C124333 * C108 + C141498 * C276 + C124334 * C1601 +
              C141499 * C1784 + C124335 * C5325 + C124182 * C5449) *
                 C188 +
             (C124333 * C189 + C141498 * C501 + C124334 * C1690 +
              C141499 * C2040 + C124335 * C5391 + C124182 * C5619) *
                 C141309) *
                C141452 +
            ((C124361 + C124362 + C124363) * C188 +
             (C124607 + C124608 + C124609) * C141309) *
                C141221) *
               C4148 -
           (((C126491 + C126492 + C126493) * C141309 +
             (C126168 + C126169 + C126170) * C188) *
                C141221 +
            ((C124335 * C16013 + C124182 * C16549 + C124334 * C5391 +
              C141499 * C5619 + C124333 * C1690 + C141498 * C2040) *
                 C141309 +
             (C124335 * C15862 + C124182 * C16151 + C124334 * C5325 +
              C141499 * C5449 + C124333 * C1601 + C141498 * C1784) *
                 C188) *
                C141452) *
               C141487) *
              C816 +
          ((((C124333 * C3490 + C141498 * C3646 + C124334 * C13301 +
              C141499 * C13475 + C124335 * C18582 + C124182 * C18820) *
                 C188 +
             (C124333 * C3572 + C141498 * C3864 + C124334 * C13393 +
              C141499 * C13719 + C124335 * C18698 + C124182 * C19150) *
                 C141309) *
                C141452 +
            ((C124333 * C3491 + C141498 * C3647 + C124334 * C13302 +
              C141499 * C13476 + C124335 * C18583 + C124182 * C18821) *
                 C188 +
             (C124333 * C3573 + C141498 * C3865 + C124334 * C13395 +
              C141499 * C13721 + C124335 * C18699 + C124182 * C19151) *
                 C141309) *
                C141221) *
               C141487 -
           (((C125504 + C125505 + C125506) * C141309 +
             (C125201 + C125202 + C125203) * C188) *
                C141221 +
            ((C124335 * C13393 + C124182 * C13719 + C124334 * C3572 +
              C141499 * C3864 + C124333 * C912 + C141498 * C1262) *
                 C141309 +
             (C124335 * C13301 + C124182 * C13475 + C124334 * C3490 +
              C141499 * C3646 + C124333 * C823 + C141498 * C1006) *
                 C188) *
                C141452) *
               C4148) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eezx[124] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139366 * C108 + C141452 * C114 + C139356 * C109 +
             C141221 * C115) *
                C124333 +
            (C139366 * C276 + C141452 * C579 + C139356 * C277 +
             C141221 * C580) *
                C141498 +
            (C79109 + C79110) * C124334 + (C79517 + C79518) * C141499 +
            (C85800 + C85799) * C124335 + (C86100 + C86099) * C124182) *
               C141309 * C4148 -
           ((C139356 * C16150 + C141221 * C16658 + C139366 * C16151 +
             C141452 * C16659) *
                C124182 +
            (C139356 * C15861 + C141221 * C15864 + C139366 * C15862 +
             C141452 * C15865) *
                C124335 +
            (C86099 + C86100) * C141499 + (C85799 + C85800) * C124334 +
            (C79518 + C79517) * C141498 + (C79110 + C79109) * C124333) *
               C141309 * C141487) *
              C816 +
          ((C82369 * C124333 + C82775 * C141498 + (C82384 + C82383) * C124334 +
            (C82782 + C82781) * C141499 +
            (C139366 * C18582 + C141452 * C18584 + C139356 * C18583 +
             C141221 * C18585) *
                C124335 +
            (C139366 * C18820 + C141452 * C19250 + C139356 * C18821 +
             C141221 * C19251) *
                C124182) *
               C141309 * C141487 -
           ((C82781 + C82782) * C124182 + (C82383 + C82384) * C124335 +
            C82780 * C141499 + C82380 * C124334 + (C70269 + C70268) * C141498 +
            (C69913 + C69912) * C124333) *
               C141309 * C4148) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eezy[124] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141309 * C189) * C124333 +
             (C188 * C276 + C141309 * C635) * C141498 + C16043 * C124334 +
             C16798 * C141499 + C16045 * C124335 + C16799 * C124182) *
                C141452 +
            (C124761 + C124762 + C124763 + C124764 + C124765 + C124766) *
                C141221) *
               C4148 -
           ((C126696 + C126697 + C126698 + C126699 + C126700 + C126701) *
                C141221 +
            (C21913 * C124182 + C21415 * C124335 + C16799 * C141499 +
             C16045 * C124334 + C16798 * C141498 + C16043 * C124333) *
                C141452) *
               C141487) *
              C816 +
          (((C18715 * C124333 + C19363 * C141498 + C18717 * C124334 +
             C19364 * C141499 + C112221 * C124335 + C112638 * C124182) *
                C141452 +
            (C14993 * C124333 + C15638 * C141498 + C14991 * C124334 +
             C15637 * C141499 + (C188 * C18583 + C141309 * C18699) * C124335 +
             (C188 * C18821 + C141309 * C19357) * C124182) *
                C141221) *
               C141487 -
           ((C125703 + C125704 + C125705 + C125706 + C125707 + C125708) *
                C141221 +
            (C19364 * C124182 + C18717 * C124335 + C19363 * C141499 +
             C18715 * C124334 + (C188 * C1006 + C141309 * C1419) * C141498 +
             (C188 * C823 + C141309 * C912) * C124333) *
                C141452) *
               C4148) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eezz[124] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C124846 * C108 + C124850 + C124850 + C141498 * C714 +
             C124847 * C1601 + C124851 + C124851 + C141499 * C2283 +
             C124848 * C5325 + C124852 + C124852 + C124182 * C5781) *
                C141309 * C141452 +
            (C124886 + C124887 + C124888) * C141309 * C141221) *
               C4148 -
           ((C126821 + C126822 + C126823) * C141309 * C141221 +
            (C124848 * C15862 + C126809 + C126809 + C124182 * C16900 +
             C124847 * C5325 + C126810 + C126810 + C141499 * C5781 +
             C124846 * C1601 + C126811 + C126811 + C141498 * C2283) *
                C141309 * C141452) *
               C141487) *
              C816 +
          (((C124846 * C3490 + C129272 + C129272 + C141498 * C4074 +
             C124847 * C13301 + C129273 + C129273 + C141499 * C13953 +
             C124848 * C18582 + C129274 + C129274 + C124182 * C19462) *
                C141309 * C141452 +
            (C124846 * C3491 + C129275 + C129275 + C141498 * C4075 +
             C124847 * C13302 + C129276 + C129276 + C141499 * C13955 +
             C124848 * C18583 + C129277 + C129277 + C124182 * C19463) *
                C141309 * C141221) *
               C141487 -
           ((C125828 + C125829 + C125830) * C141309 * C141221 +
            (C124848 * C13301 + C125816 + C125816 + C124182 * C13953 +
             C124847 * C3490 + C125817 + C125817 + C141499 * C4074 +
             C124846 * C823 + C125818 + C125818 + C141498 * C1505) *
                C141309 * C141452) *
               C4148) *
              C141485) *
         C141243) /
        (p * q * std::sqrt(p + q));
    d2eexx[125] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C68675 * C108 + C68680 + C68680 + C141452 * C120 + C68677 * C109 +
            C68681 + C68681 + C141221 * C121) *
               C141498 +
           (C78695 + C78696) * C141499 + C131116 * C124182) *
              C141309 * C5322 -
          ((C131127 + C131128) * C124182 + (C85493 + C85494) * C141499 +
           (C78696 + C78695) * C141498) *
              C141309 * C5323 +
          (C131116 * C141498 + (C131128 + C131127) * C141499 +
           (C68675 * C21308 + C131121 + C131121 + C141452 * C21312 +
            C68677 * C21309 + C131122 + C131122 + C141221 * C21313) *
               C124182) *
              C141309 * C5324) *
         C141277 * C141243) /
        (p * q * std::sqrt(p + q));
    d2eexy[125] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((C188 * C108 + C141309 * C189) * C139366 +
                       (C188 * C114 + C141309 * C195) * C141452 +
                       C218 * C139356 + C219 * C141221) *
                          C141498 +
                      (C126039 + C126040 + C126041 + C126042) * C141499 +
                      C131209 * C124182) *
                         C5322 -
                     ((C131204 + C131205 + C131206 + C131207) * C124182 +
                      (C126046 + C126045 + C126044 + C126043) * C141499 +
                      (C126042 + C126041 + C126040 + C126039) * C141498) *
                         C5323 +
                     (C131209 * C141498 +
                      (C131207 + C131206 + C131205 + C131204) * C141499 +
                      (C114015 * C139366 + C114014 * C141452 +
                       (C188 * C21309 + C141309 * C21402) * C139356 +
                       (C188 * C21311 + C141309 * C21404) * C141221) *
                          C124182) *
                         C5324) *
                    C141277 * C141243) /
                   (p * q * std::sqrt(p + q));
    d2eexz[125] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((C124333 * C108 + C141498 * C276 + C124334 * C1601 +
                       C141499 * C1784 + C124335 * C5325 + C124182 * C5449) *
                          C139366 +
                      (C124333 * C114 + C141498 * C282 + C124334 * C1606 +
                       C141499 * C1789 + C124335 * C5329 + C124182 * C5453) *
                          C141452 +
                      (C124361 + C124362 + C124363) * C139356 +
                      (C124364 + C124365 + C124366) * C141221) *
                         C141309 * C5322 -
                     ((C126165 + C126166 + C126167) * C141221 +
                      (C126168 + C126169 + C126170) * C139356 +
                      (C124335 * C15865 + C124182 * C16154 + C124334 * C5329 +
                       C141499 * C5453 + C124333 * C1606 + C141498 * C1789) *
                          C141452 +
                      (C124335 * C15862 + C124182 * C16151 + C124334 * C5325 +
                       C141499 * C5449 + C124333 * C1601 + C141498 * C1784) *
                          C139366) *
                         C141309 * C5323 +
                     ((C124333 * C5325 + C141498 * C5449 + C124334 * C15862 +
                       C141499 * C16151 + C124335 * C21308 + C124182 * C21492) *
                          C139366 +
                      (C124333 * C5329 + C141498 * C5453 + C124334 * C15865 +
                       C141499 * C16154 + C124335 * C21310 + C124182 * C21494) *
                          C141452 +
                      (C124333 * C5326 + C141498 * C5450 + C124334 * C15861 +
                       C141499 * C16150 + C124335 * C21309 + C124182 * C21493) *
                          C139356 +
                      (C124333 * C5330 + C141498 * C5454 + C124334 * C15864 +
                       C141499 * C16153 + C124335 * C21311 + C124182 * C21495) *
                          C141221) *
                         C141309 * C5324) *
                    C141277 * C141243) /
                   (p * q * std::sqrt(p + q));
    d2eeyx[125] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139366 * C108 + C141452 * C114 + C139356 * C109 +
             C141221 * C115) *
                C188 +
            (C139366 * C189 + C141452 * C362 + C139356 * C190 +
             C141221 * C363) *
                C141309) *
               C141498 +
           ((C79109 + C79110) * C188 + (C79111 + C79112) * C141309) * C141499 +
           C131374 * C124182) *
              C5322 -
          (((C131370 + C131371) * C141309 + (C131372 + C131373) * C188) *
               C124182 +
           ((C85797 + C85798) * C141309 + (C85799 + C85800) * C188) * C141499 +
           ((C79112 + C79111) * C141309 + (C79110 + C79109) * C188) * C141498) *
              C5323 +
          (C131374 * C141498 +
           ((C131373 + C131372) * C188 + (C131371 + C131370) * C141309) *
               C141499 +
           ((C139366 * C21308 + C141452 * C21310 + C139356 * C21309 +
             C141221 * C21311) *
                C188 +
            (C139366 * C21401 + C141452 * C21570 + C139356 * C21402 +
             C141221 * C21571) *
                C141309) *
               C124182) *
              C5324) *
         C141277 * C141243) /
        (p * q * std::sqrt(p + q));
    d2eeyy[125] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C418 * C108 + C426 + C426 + C141309 * C419) * C141452 +
            C448 * C141221) *
               C141498 +
           (C126379 + C126380) * C141499 + C131449 * C124182) *
              C5322 -
          ((C131450 + C131451) * C124182 + (C126382 + C126381) * C141499 +
           (C126380 + C126379) * C141498) *
              C5323 +
          (C131449 * C141498 + (C131451 + C131450) * C141499 +
           (C114187 * C141452 +
            (C418 * C21309 + C21671 + C21671 + C141309 * C21664) * C141221) *
               C124182) *
              C5324) *
         C141277 * C141243) /
        (p * q * std::sqrt(p + q));
    d2eeyz[125] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C124333 * C108 + C141498 * C276 + C124334 * C1601 +
             C141499 * C1784 + C124335 * C5325 + C124182 * C5449) *
                C188 +
            (C124333 * C189 + C141498 * C501 + C124334 * C1690 +
             C141499 * C2040 + C124335 * C5391 + C124182 * C5619) *
                C141309) *
               C141452 +
           ((C124361 + C124362 + C124363) * C188 +
            (C124607 + C124608 + C124609) * C141309) *
               C141221) *
              C5322 -
          (((C126491 + C126492 + C126493) * C141309 +
            (C126168 + C126169 + C126170) * C188) *
               C141221 +
           ((C124335 * C16013 + C124182 * C16549 + C124334 * C5391 +
             C141499 * C5619 + C124333 * C1690 + C141498 * C2040) *
                C141309 +
            (C124335 * C15862 + C124182 * C16151 + C124334 * C5325 +
             C141499 * C5449 + C124333 * C1601 + C141498 * C1784) *
                C188) *
               C141452) *
              C5323 +
          (((C124333 * C5325 + C141498 * C5449 + C124334 * C15862 +
             C141499 * C16151 + C124335 * C21308 + C124182 * C21492) *
                C188 +
            (C124333 * C5391 + C141498 * C5619 + C124334 * C16013 +
             C141499 * C16549 + C124335 * C21401 + C124182 * C21749) *
                C141309) *
               C141452 +
           ((C124333 * C5326 + C141498 * C5450 + C124334 * C15861 +
             C141499 * C16150 + C124335 * C21309 + C124182 * C21493) *
                C188 +
            (C124333 * C5392 + C141498 * C5620 + C124334 * C16012 +
             C141499 * C16548 + C124335 * C21402 + C124182 * C21750) *
                C141309) *
               C141221) *
              C5324) *
         C141277 * C141243) /
        (p * q * std::sqrt(p + q));
    d2eezx[125] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C139366 * C108 + C141452 * C114 + C139356 * C109 + C141221 * C115) *
               C124333 +
           (C139366 * C276 + C141452 * C579 + C139356 * C277 + C141221 * C580) *
               C141498 +
           (C79109 + C79110) * C124334 + (C79517 + C79518) * C141499 +
           C131358 * C124335 + C131600 * C124182) *
              C141309 * C5322 -
          ((C131605 + C131606) * C124182 + (C131372 + C131373) * C124335 +
           (C86099 + C86100) * C141499 + (C85799 + C85800) * C124334 +
           (C79518 + C79517) * C141498 + (C79110 + C79109) * C124333) *
              C141309 * C5323 +
          (C131358 * C124333 + C131600 * C141498 +
           (C131373 + C131372) * C124334 + (C131606 + C131605) * C141499 +
           (C139366 * C21308 + C141452 * C21310 + C139356 * C21309 +
            C141221 * C21311) *
               C124335 +
           (C139366 * C21492 + C141452 * C21825 + C139356 * C21493 +
            C141221 * C21826) *
               C124182) *
              C141309 * C5324) *
         C141277 * C141243) /
        (p * q * std::sqrt(p + q));
    d2eezy[125] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141309 * C189) * C124333 +
            (C188 * C276 + C141309 * C635) * C141498 + C16043 * C124334 +
            C16798 * C141499 + C16045 * C124335 + C16799 * C124182) *
               C141452 +
           (C124761 + C124762 + C124763 + C124764 + C124765 + C124766) *
               C141221) *
              C5322 -
          ((C126696 + C126697 + C126698 + C126699 + C126700 + C126701) *
               C141221 +
           (C21913 * C124182 + C21415 * C124335 + C16799 * C141499 +
            C16045 * C124334 + C16798 * C141498 + C16043 * C124333) *
               C141452) *
              C5323 +
          ((C16045 * C124333 + C16799 * C141498 + C21415 * C124334 +
            C21913 * C141499 + C114015 * C124335 + C114347 * C124182) *
               C141452 +
           (C14127 * C124333 + C14656 * C141498 + C16048 * C124334 +
            C16800 * C141499 + (C188 * C21309 + C141309 * C21402) * C124335 +
            (C188 * C21493 + C141309 * C21909) * C124182) *
               C141221) *
              C5324) *
         C141277 * C141243) /
        (p * q * std::sqrt(p + q));
    d2eezz[125] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C124846 * C108 + C124850 + C124850 + C141498 * C714 +
            C124847 * C1601 + C124851 + C124851 + C141499 * C2283 +
            C124848 * C5325 + C124852 + C124852 + C124182 * C5781) *
               C141309 * C141452 +
           (C124886 + C124887 + C124888) * C141309 * C141221) *
              C5322 -
          ((C126821 + C126822 + C126823) * C141309 * C141221 +
           (C124848 * C15862 + C126809 + C126809 + C124182 * C16900 +
            C124847 * C5325 + C126810 + C126810 + C141499 * C5781 +
            C124846 * C1601 + C126811 + C126811 + C141498 * C2283) *
               C141309 * C141452) *
              C5323 +
          ((C124846 * C5325 + C131755 + C131755 + C141498 * C5781 +
            C124847 * C15862 + C131756 + C131756 + C141499 * C16900 +
            C124848 * C21308 + C131757 + C131757 + C124182 * C21987) *
               C141309 * C141452 +
           (C124846 * C5326 + C131758 + C131758 + C141498 * C5782 +
            C124847 * C15861 + C131759 + C131759 + C141499 * C16899 +
            C124848 * C21309 + C131760 + C131760 + C124182 * C21988) *
               C141309 * C141221) *
              C5324) *
         C141277 * C141243) /
        (p * q * std::sqrt(p + q));
    d2eexx[126] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C47712 * C108 + C47719 + C47719 + C47707 * C120 + C47714 * C109 +
            C47720 + C47720 + C47708 * C121 + C47716 * C110 + C47721 + C47721 +
            C47709 * C122) *
               C93949 +
           (C47712 * C1601 + C49619 + C49619 + C47707 * C1611 + C47714 * C1600 +
            C49618 + C49618 + C47708 * C1610 + C47716 * C1599 + C49617 +
            C49617 + C47709 * C1609) *
               C141384) *
              C141309 * C141294 * C141277 * C97 -
          ((C47716 * C1598 + C49622 + C49622 + C47709 * C1608 + C47714 * C1599 +
            C49621 + C49621 + C47708 * C1609 + C47712 * C1600 + C49620 +
            C49620 + C47707 * C1610) *
               C141384 +
           (C47716 * C111 + C47728 + C47728 + C47709 * C123 + C47714 * C110 +
            C47729 + C47729 + C47708 * C122 + C47712 * C109 + C47730 + C47730 +
            C47707 * C121) *
               C93949) *
              C141309 * C141294 * C141277 * C98 +
          ((C47712 * C110 + C47731 + C47731 + C47707 * C122 + C47714 * C111 +
            C47732 + C47732 + C47708 * C123 + C47716 * C112 + C47733 + C47733 +
            C47709 * C124) *
               C93949 +
           (C47712 * C1599 + C93952 + C93952 + C47707 * C1609 + C47714 * C1598 +
            C93953 + C93953 + C47708 * C1608 + C47716 * C1602 + C93954 +
            C93954 + C47709 * C1612) *
               C141384) *
              C141309 * C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C55526 * C108 + C55529 + C55529 + C141216 * C120) * C93949 +
            C62512 * C141384) *
               C5865 +
           (C56053 * C93949 + C58473 * C141384) * C5866 +
           (C56054 * C93949 + C58472 * C141384) * C5867) *
              C141294 * C141277 * C97 -
          ((C87073 * C141384 + C56057 * C93949) * C5867 +
           (C61520 * C141384 + C56056 * C93949) * C5866 +
           (C62514 * C141384 +
            (C55526 * C109 + C55536 + C55536 + C141216 * C121) * C93949) *
               C5865) *
              C141294 * C141277 * C98 +
          (((C55526 * C110 + C55537 + C55537 + C141216 * C122) * C93949 +
            (C55526 * C1599 + C60809 + C60809 + C141216 * C1609) * C141384) *
               C5865 +
           ((C55526 * C821 + C55538 + C55538 + C141216 * C831) * C93949 +
            (C55526 * C3492 + C60811 + C60811 + C141216 * C3500) * C141384) *
               C5866 +
           ((C55526 * C2962 + C55539 + C55539 + C141216 * C2970) * C93949 +
            (C55526 * C7888 + C86371 + C86371 + C141216 * C7894) * C141384) *
               C5867) *
              C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eexy[126] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141309 * C189) * C47713 +
            (C188 * C114 + C141309 * C195) * C47707 + C218 * C47715 +
            C219 * C47708 + C220 * C47717 + C221 * C47709) *
               C93949 +
           (C16043 * C47713 + C16044 * C47707 + C1715 * C47715 +
            C1714 * C47708 + C1713 * C47717 + C1712 * C47709) *
               C141384) *
              C141294 * C141277 * C97 -
          ((C1710 * C47709 + C1711 * C47717 + C1712 * C47708 + C1713 * C47715 +
            C1714 * C47707 + C1715 * C47713) *
               C141384 +
           (C223 * C47709 + C222 * C47717 + C221 * C47708 + C220 * C47715 +
            C219 * C47707 + C218 * C47713) *
               C93949) *
              C141294 * C141277 * C98 +
          ((C220 * C47713 + C221 * C47707 + C222 * C47715 + C223 * C47708 +
            C225 * C47717 + C224 * C47709) *
               C93949 +
           (C1713 * C47713 + C1712 * C47707 + C1711 * C47715 + C1710 * C47708 +
            (C188 * C1602 + C141309 * C1691) * C47717 +
            (C188 * C1607 + C141309 * C1696) * C47709) *
               C141384) *
              C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5964 * C108 + C5865 * C189 + C5965 * C823 + C5866 * C912 +
             C5966 * C2960 + C5867 * C3026) *
                C55527 +
            (C5964 * C114 + C5865 * C195 + C5965 * C828 + C5866 * C917 +
             C5966 * C2964 + C5867 * C3030) *
                C141216) *
               C93949 +
           ((C5964 * C1601 + C5865 * C1690 + C5965 * C3490 + C5866 * C3572 +
             C5966 * C7887 + C5867 * C8006) *
                C55527 +
            (C5964 * C1606 + C5865 * C1695 + C5965 * C3494 + C5866 * C3576 +
             C5966 * C7890 + C5867 * C8009) *
                C141216) *
               C141384) *
              C141294 * C141277 * C97 -
          (((C8024 + C8025 + C8026) * C141216 +
            (C8027 + C8028 + C8029) * C55527) *
               C141384 +
           ((C5997 + C5996 + C5995) * C141216 +
            (C5994 + C5993 + C5992) * C55527) *
               C93949) *
              C141294 * C141277 * C98 +
          (((C6003 + C6002 + C6001) * C55527 +
            (C6000 + C5999 + C5998) * C141216) *
               C93949 +
           ((C5964 * C1599 + C5865 * C1688 + C5965 * C3492 + C5866 * C3574 +
             C5966 * C7888 + C5867 * C8007) *
                C55527 +
            (C5964 * C1604 + C5865 * C1693 + C5965 * C3496 + C5866 * C3578 +
             C5966 * C7891 + C5867 * C8010) *
                C141216) *
               C141384) *
              C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eexz[126] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C94102 * C108 + C93949 * C276 + C94103 * C1601 + C141384 * C1784) *
               C47713 +
           (C94102 * C114 + C93949 * C282 + C94103 * C1606 + C141384 * C1789) *
               C47707 +
           (C94129 + C94130) * C47715 + (C94131 + C94132) * C47708 +
           C94141 * C47717 + C94142 * C47709) *
              C141309 * C141294 * C141277 * C97 -
          ((C94137 + C94138) * C47709 + (C94139 + C94140) * C47717 +
           (C94136 + C94135) * C47708 + (C94134 + C94133) * C47715 +
           (C94132 + C94131) * C47707 + (C94130 + C94129) * C47713) *
              C141309 * C141294 * C141277 * C98 +
          (C94141 * C47713 + C94142 * C47707 + (C94140 + C94139) * C47715 +
           (C94138 + C94137) * C47708 +
           (C94102 * C112 + C93949 * C280 + C94103 * C1602 + C141384 * C1785) *
               C47717 +
           (C94102 * C118 + C93949 * C286 + C94103 * C1607 + C141384 * C1790) *
               C47709) *
              C141309 * C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C94102 * C108 + C93949 * C276 + C94103 * C1601 + C141384 * C1784) *
                C55527 +
            (C94102 * C114 + C93949 * C282 + C94103 * C1606 + C141384 * C1789) *
                C141216) *
               C5865 +
           ((C94102 * C823 + C93949 * C1006 + C94103 * C3490 +
             C141384 * C3646) *
                C55527 +
            (C94102 * C828 + C93949 * C1011 + C94103 * C3494 +
             C141384 * C3650) *
                C141216) *
               C5866 +
           ((C94102 * C2960 + C93949 * C3084 + C94103 * C7887 +
             C141384 * C8128) *
                C55527 +
            (C94102 * C2964 + C93949 * C3088 + C94103 * C7890 +
             C141384 * C8131) *
                C141216) *
               C5867) *
              C141294 * C141277 * C97 -
          (((C94103 * C7889 + C141384 * C8130 + C94102 * C2965 +
             C93949 * C3089) *
                C141216 +
            (C94103 * C7886 + C141384 * C8127 + C94102 * C2961 +
             C93949 * C3085) *
                C55527) *
               C5867 +
           ((C94982 + C94983) * C141216 + (C94984 + C94985) * C55527) * C5866 +
           ((C94132 + C94131) * C141216 + (C94130 + C94129) * C55527) * C5865) *
              C141294 * C141277 * C98 +
          ((C94141 * C55527 + C94142 * C141216) * C5865 +
           ((C94981 + C94980) * C55527 + (C94979 + C94978) * C141216) * C5866 +
           ((C94102 * C2962 + C93949 * C3086 + C94103 * C7888 +
             C141384 * C8129) *
                C55527 +
            (C94102 * C2966 + C93949 * C3090 + C94103 * C7891 +
             C141384 * C8132) *
                C141216) *
               C5867) *
              C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[126] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47713 * C108 + C47707 * C114 + C47715 * C109 + C47708 * C115 +
             C47717 * C110 + C47709 * C116) *
                C188 +
            (C47713 * C189 + C47707 * C362 + C47715 * C190 + C47708 * C363 +
             C47717 * C191 + C47709 * C364) *
                C141309) *
               C93949 +
           ((C47713 * C1601 + C47707 * C1606 + C47715 * C1600 + C47708 * C1605 +
             C47717 * C1599 + C47709 * C1604) *
                C188 +
            (C47713 * C1690 + C47707 * C1878 + C47715 * C1689 + C47708 * C1877 +
             C47717 * C1688 + C47709 * C1876) *
                C141309) *
               C141384) *
              C141294 * C141277 * C97 -
          (((C47717 * C1687 + C47709 * C1875 + C47715 * C1688 + C47708 * C1876 +
             C47713 * C1689 + C47707 * C1877) *
                C141309 +
            (C47717 * C1598 + C47709 * C1603 + C47715 * C1599 + C47708 * C1604 +
             C47713 * C1600 + C47707 * C1605) *
                C188) *
               C141384 +
           ((C47717 * C192 + C47709 * C365 + C47715 * C191 + C47708 * C364 +
             C47713 * C190 + C47707 * C363) *
                C141309 +
            (C47717 * C111 + C47709 * C117 + C47715 * C110 + C47708 * C116 +
             C47713 * C109 + C47707 * C115) *
                C188) *
               C93949) *
              C141294 * C141277 * C98 +
          (((C47713 * C110 + C47707 * C116 + C47715 * C111 + C47708 * C117 +
             C47717 * C112 + C47709 * C118) *
                C188 +
            (C47713 * C191 + C47707 * C364 + C47715 * C192 + C47708 * C365 +
             C47717 * C193 + C47709 * C366) *
                C141309) *
               C93949 +
           ((C47713 * C1599 + C47707 * C1604 + C47715 * C1598 + C47708 * C1603 +
             C47717 * C1602 + C47709 * C1607) *
                C188 +
            (C47713 * C1688 + C47707 * C1876 + C47715 * C1687 + C47708 * C1875 +
             C47717 * C1691 + C47709 * C1879) *
                C141309) *
               C141384) *
              C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C55527 * C108 + C141216 * C114) * C5964 +
            (C55527 * C189 + C141216 * C362) * C5865 + C56299 * C5965 +
            C56300 * C5866 + C56301 * C5966 + C56302 * C5867) *
               C93949 +
           (C62870 * C5964 + C62871 * C5865 + C58709 * C5965 + C58708 * C5866 +
            C58707 * C5966 + C58706 * C5867) *
               C141384) *
              C141294 * C141277 * C97 -
          ((C87374 * C5867 + C87373 * C5966 + C61852 * C5866 + C61851 * C5965 +
            C62875 * C5865 + C62874 * C5964) *
               C141384 +
           (C56308 * C5867 + C56307 * C5966 + C56306 * C5866 + C56305 * C5965 +
            (C55527 * C190 + C141216 * C363) * C5865 +
            (C55527 * C109 + C141216 * C115) * C5964) *
               C93949) *
              C141294 * C141277 * C98 +
          (((C55527 * C110 + C141216 * C116) * C5964 +
            (C55527 * C191 + C141216 * C364) * C5865 +
            (C55527 * C821 + C141216 * C826) * C5965 +
            (C55527 * C910 + C141216 * C1098) * C5866 +
            (C55527 * C2962 + C141216 * C2966) * C5966 +
            (C55527 * C3028 + C141216 * C3144) * C5867) *
               C93949 +
           ((C55527 * C1599 + C141216 * C1604) * C5964 +
            (C55527 * C1688 + C141216 * C1876) * C5865 +
            (C55527 * C3492 + C141216 * C3496) * C5965 +
            (C55527 * C3574 + C141216 * C3722) * C5866 +
            (C55527 * C7888 + C141216 * C7891) * C5966 +
            (C55527 * C8007 + C141216 * C8245) * C5867) *
               C141384) *
              C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[126] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C418 * C108 + C426 + C426 + C141309 * C419) * C47707 +
            C448 * C47708 + C449 * C47709) *
               C93949 +
           (C16446 * C47707 + C1971 * C47708 + C1970 * C47709) * C141384) *
              C141294 * C141277 * C97 -
          ((C1969 * C47709 + C1970 * C47708 + C1971 * C47707) * C141384 +
           (C450 * C47709 + C449 * C47708 + C448 * C47707) * C93949) *
              C141294 * C141277 * C98 +
          ((C449 * C47707 + C450 * C47708 + C451 * C47709) * C93949 +
           (C1970 * C47707 + C1969 * C47708 +
            (C418 * C1602 + C1962 + C1962 + C141309 * C1950) * C47709) *
               C141384) *
              C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C6237 * C108 + C6241 + C6241 + C5865 * C419 + C6238 * C823 + C6242 +
            C6242 + C5866 * C1171 + C6239 * C2960 + C6243 + C6243 +
            C5867 * C3196) *
               C141216 * C93949 +
           (C6237 * C1601 + C8359 + C8359 + C5865 * C1949 + C6238 * C3490 +
            C8358 + C8358 + C5866 * C3790 + C6239 * C7887 + C8357 + C8357 +
            C5867 * C8345) *
               C141216 * C141384) *
              C141294 * C141277 * C97 -
          ((C8369 + C8370 + C8371) * C141216 * C141384 +
           (C6279 + C6278 + C6277) * C141216 * C93949) *
              C141294 * C141277 * C98 +
          ((C6282 + C6281 + C6280) * C141216 * C93949 +
           (C6237 * C1599 + C8360 + C8360 + C5865 * C1947 + C6238 * C3492 +
            C8361 + C8361 + C5866 * C3792 + C6239 * C7888 + C8362 + C8362 +
            C5867 * C8346) *
               C141216 * C141384) *
              C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[126] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C94102 * C108 + C93949 * C276 + C94103 * C1601 + C141384 * C1784) *
                C188 +
            (C94102 * C189 + C93949 * C501 + C94103 * C1690 + C141384 * C2040) *
                C141309) *
               C47707 +
           ((C94129 + C94130) * C188 + (C94378 + C94379) * C141309) * C47708 +
           C94386 * C47709) *
              C141294 * C141277 * C97 -
          (((C94382 + C94383) * C141309 + (C94139 + C94140) * C188) * C47709 +
           ((C94381 + C94380) * C141309 + (C94134 + C94133) * C188) * C47708 +
           ((C94379 + C94378) * C141309 + (C94130 + C94129) * C188) * C47707) *
              C141294 * C141277 * C98 +
          (C94386 * C47707 +
           ((C94140 + C94139) * C188 + (C94383 + C94382) * C141309) * C47708 +
           ((C94102 * C112 + C93949 * C280 + C94103 * C1602 + C141384 * C1785) *
                C188 +
            (C94102 * C193 + C93949 * C505 + C94103 * C1691 + C141384 * C2041) *
                C141309) *
               C47709) *
              C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C94102 * C108 + C93949 * C276 + C94103 * C1601 + C141384 * C1784) *
               C5964 +
           (C94102 * C189 + C93949 * C501 + C94103 * C1690 + C141384 * C2040) *
               C5865 +
           (C94102 * C823 + C93949 * C1006 + C94103 * C3490 + C141384 * C3646) *
               C5965 +
           (C94102 * C912 + C93949 * C1262 + C94103 * C3572 + C141384 * C3864) *
               C5866 +
           (C94102 * C2960 + C93949 * C3084 + C94103 * C7887 +
            C141384 * C8128) *
               C5966 +
           (C94102 * C3026 + C93949 * C3254 + C94103 * C8006 +
            C141384 * C8470) *
               C5867) *
              C141216 * C141294 * C141277 * C97 -
          ((C94103 * C8005 + C141384 * C8469 + C94102 * C3027 +
            C93949 * C3255) *
               C5867 +
           (C94103 * C7886 + C141384 * C8127 + C94102 * C2961 +
            C93949 * C3085) *
               C5966 +
           (C95290 + C95291) * C5866 + (C94984 + C94985) * C5965 +
           (C94379 + C94378) * C5865 + (C94130 + C94129) * C5964) *
              C141216 * C141294 * C141277 * C98 +
          (C94141 * C5964 + C94384 * C5865 + (C94981 + C94980) * C5965 +
           (C95289 + C95288) * C5866 +
           (C94102 * C2962 + C93949 * C3086 + C94103 * C7888 +
            C141384 * C8129) *
               C5966 +
           (C94102 * C3028 + C93949 * C3256 + C94103 * C8007 +
            C141384 * C8471) *
               C5867) *
              C141216 * C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eezx[126] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((C47713 * C108 + C47707 * C114 + C47715 * C109 +
                       C47708 * C115 + C47717 * C110 + C47709 * C116) *
                          C94102 +
                      (C47713 * C276 + C47707 * C579 + C47715 * C277 +
                       C47708 * C580 + C47717 * C278 + C47709 * C581) *
                          C93949 +
                      (C47713 * C1601 + C47707 * C1606 + C47715 * C1600 +
                       C47708 * C1605 + C47717 * C1599 + C47709 * C1604) *
                          C94103 +
                      (C47713 * C1784 + C47707 * C2126 + C47715 * C1783 +
                       C47708 * C2125 + C47717 * C1782 + C47709 * C2124) *
                          C141384) *
                         C141309 * C141294 * C141277 * C97 -
                     ((C47717 * C1781 + C47709 * C2123 + C47715 * C1782 +
                       C47708 * C2124 + C47713 * C1783 + C47707 * C2125) *
                          C141384 +
                      (C47717 * C1598 + C47709 * C1603 + C47715 * C1599 +
                       C47708 * C1604 + C47713 * C1600 + C47707 * C1605) *
                          C94103 +
                      (C47717 * C279 + C47709 * C582 + C47715 * C278 +
                       C47708 * C581 + C47713 * C277 + C47707 * C580) *
                          C93949 +
                      (C47717 * C111 + C47709 * C117 + C47715 * C110 +
                       C47708 * C116 + C47713 * C109 + C47707 * C115) *
                          C94102) *
                         C141309 * C141294 * C141277 * C98 +
                     ((C47713 * C110 + C47707 * C116 + C47715 * C111 +
                       C47708 * C117 + C47717 * C112 + C47709 * C118) *
                          C94102 +
                      (C47713 * C278 + C47707 * C581 + C47715 * C279 +
                       C47708 * C582 + C47717 * C280 + C47709 * C583) *
                          C93949 +
                      (C47713 * C1599 + C47707 * C1604 + C47715 * C1598 +
                       C47708 * C1603 + C47717 * C1602 + C47709 * C1607) *
                          C94103 +
                      (C47713 * C1782 + C47707 * C2124 + C47715 * C1781 +
                       C47708 * C2123 + C47717 * C1785 + C47709 * C2127) *
                          C141384) *
                         C141309 * C141294 * C141277 * C99)) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C55527 * C108 + C141216 * C114) * C94102 +
                       (C55527 * C276 + C141216 * C579) * C93949 +
                       C62870 * C94103 + C63222 * C141384) *
                          C5865 +
                      (C56299 * C94102 + C56535 * C93949 + C58709 * C94103 +
                       C58929 * C141384) *
                          C5866 +
                      (C56301 * C94102 + C56536 * C93949 + C58707 * C94103 +
                       C58928 * C141384) *
                          C5867) *
                         C141294 * C141277 * C97 -
                     ((C87686 * C141384 + C87373 * C94103 + C56539 * C93949 +
                       C56307 * C94102) *
                          C5867 +
                      (C62178 * C141384 + C61851 * C94103 + C56538 * C93949 +
                       C56305 * C94102) *
                          C5866 +
                      (C63224 * C141384 + C62874 * C94103 +
                       (C55527 * C277 + C141216 * C580) * C93949 +
                       (C55527 * C109 + C141216 * C115) * C94102) *
                          C5865) *
                         C141294 * C141277 * C98 +
                     (((C55527 * C110 + C141216 * C116) * C94102 +
                       (C55527 * C278 + C141216 * C581) * C93949 +
                       (C55527 * C1599 + C141216 * C1604) * C94103 +
                       (C55527 * C1782 + C141216 * C2124) * C141384) *
                          C5865 +
                      ((C55527 * C821 + C141216 * C826) * C94102 +
                       (C55527 * C1004 + C141216 * C1346) * C93949 +
                       (C55527 * C3492 + C141216 * C3496) * C94103 +
                       (C55527 * C3648 + C141216 * C3936) * C141384) *
                          C5866 +
                      ((C55527 * C2962 + C141216 * C2966) * C94102 +
                       (C55527 * C3086 + C141216 * C3310) * C93949 +
                       (C55527 * C7888 + C141216 * C7891) * C94103 +
                       (C55527 * C8129 + C141216 * C8584) * C141384) *
                          C5867) *
                         C141294 * C141277 * C99)) /
                       (p * q * std::sqrt(p + q));
    d2eezy[126] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141309 * C189) * C94102 +
            (C188 * C276 + C141309 * C635) * C93949 + C16043 * C94103 +
            C16798 * C141384) *
               C47707 +
           (C94535 + C94536 + C94537 + C94538) * C47708 + C94549 * C47709) *
              C141294 * C141277 * C97 -
          ((C94543 + C94544 + C94545 + C94546) * C47709 +
           (C94542 + C94541 + C94540 + C94539) * C47708 +
           (C94538 + C94537 + C94536 + C94535) * C47707) *
              C141294 * C141277 * C98 +
          (C94549 * C47707 + (C94546 + C94545 + C94544 + C94543) * C47708 +
           (C225 * C94102 + C657 * C93949 +
            (C188 * C1602 + C141309 * C1691) * C94103 +
            (C188 * C1785 + C141309 * C2198) * C141384) *
               C47709) *
              C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C5964 * C108 + C5865 * C189 + C5965 * C823 + C5866 * C912 +
            C5966 * C2960 + C5867 * C3026) *
               C94102 +
           (C5964 * C276 + C5865 * C635 + C5965 * C1006 + C5866 * C1419 +
            C5966 * C3084 + C5867 * C3362) *
               C93949 +
           (C5964 * C1601 + C5865 * C1690 + C5965 * C3490 + C5866 * C3572 +
            C5966 * C7887 + C5867 * C8006) *
               C94103 +
           (C5964 * C1784 + C5865 * C2197 + C5965 * C3646 + C5866 * C4004 +
            C5966 * C8128 + C5867 * C8684) *
               C141384) *
              C141216 * C141294 * C141277 * C97 -
          ((C8693 + C8694 + C8695) * C141384 +
           (C8027 + C8028 + C8029) * C94103 + (C6537 + C6536 + C6535) * C93949 +
           (C5994 + C5993 + C5992) * C94102) *
              C141216 * C141294 * C141277 * C98 +
          ((C6003 + C6002 + C6001) * C94102 + (C6540 + C6539 + C6538) * C93949 +
           (C5964 * C1599 + C5865 * C1688 + C5965 * C3492 + C5866 * C3574 +
            C5966 * C7888 + C5867 * C8007) *
               C94103 +
           (C5964 * C1782 + C5865 * C2195 + C5965 * C3648 + C5866 * C4006 +
            C5966 * C8129 + C5867 * C8685) *
               C141384) *
              C141216 * C141294 * C141277 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eezz[126] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((C94623 * C108 + C94626 + C94626 + C93949 * C714 +
                       C94624 * C1601 + C94627 + C94627 + C141384 * C2283) *
                          C141309 * C47707 +
                      (C94660 + C94661) * C141309 * C47708 + C94667 * C47709) *
                         C141294 * C141277 * C97 -
                     ((C94664 + C94665) * C141309 * C47709 +
                      (C94663 + C94662) * C141309 * C47708 +
                      (C94661 + C94660) * C141309 * C47707) *
                         C141294 * C141277 * C98 +
                     (C94667 * C47707 + (C94665 + C94664) * C141309 * C47708 +
                      (C94623 * C112 + C94646 + C94646 + C93949 * C718 +
                       C94624 * C1602 + C94647 + C94647 + C141384 * C2284) *
                          C141309 * C47709) *
                         C141294 * C141277 * C99)) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((C94623 * C108 + C94626 + C94626 + C93949 * C714 +
                       C94624 * C1601 + C94627 + C94627 + C141384 * C2283) *
                          C5865 +
                      (C94623 * C823 + C95607 + C95607 + C93949 * C1505 +
                       C94624 * C3490 + C95606 + C95606 + C141384 * C4074) *
                          C5866 +
                      (C94623 * C2960 + C98229 + C98229 + C93949 * C3416 +
                       C94624 * C7887 + C98230 + C98230 + C141384 * C8794) *
                          C5867) *
                         C141216 * C141294 * C141277 * C97 -
                     ((C94624 * C7886 + C98232 + C98232 + C141384 * C8793 +
                       C94623 * C2961 + C98231 + C98231 + C93949 * C3417) *
                          C5867 +
                      (C95620 + C95621) * C5866 + (C94661 + C94660) * C5865) *
                         C141216 * C141294 * C141277 * C98 +
                     (C94666 * C5865 + (C95619 + C95618) * C5866 +
                      (C94623 * C2962 + C98233 + C98233 + C93949 * C3418 +
                       C94624 * C7888 + C98234 + C98234 + C141384 * C8795) *
                          C5867) *
                         C141216 * C141294 * C141277 * C99)) /
                       (p * q * std::sqrt(p + q));
    d2eexx[127] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47712 * C108 + C47719 + C47719 + C47707 * C120 + C47714 * C109 +
             C47720 + C47720 + C47708 * C121 + C47716 * C110 + C47721 + C47721 +
             C47709 * C122) *
                C93949 +
            (C47712 * C1601 + C49619 + C49619 + C47707 * C1611 +
             C47714 * C1600 + C49618 + C49618 + C47708 * C1610 +
             C47716 * C1599 + C49617 + C49617 + C47709 * C1609) *
                C141384) *
               C141309 * C141294 * C816 -
           ((C52204 + C52205 + C52206) * C141384 +
            (C48586 + C48585 + C48584) * C93949) *
               C141309 * C141294 * C141485) *
              C818 +
          (((C48587 + C48588 + C48589) * C93949 +
            (C47712 * C3491 + C49623 + C49623 + C47707 * C3499 +
             C47714 * C3492 + C49624 + C49624 + C47708 * C3500 +
             C47716 * C3493 + C49625 + C49625 + C47709 * C3501) *
                C141384) *
               C141309 * C141294 * C141485 -
           ((C47716 * C1598 + C49622 + C49622 + C47709 * C1608 +
             C47714 * C1599 + C49621 + C49621 + C47708 * C1609 +
             C47712 * C1600 + C49620 + C49620 + C47707 * C1610) *
                C141384 +
            (C47716 * C111 + C47728 + C47728 + C47709 * C123 + C47714 * C110 +
             C47729 + C47729 + C47708 * C122 + C47712 * C109 + C47730 + C47730 +
             C47707 * C121) *
                C93949) *
               C141309 * C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C55526 * C108 + C55529 + C55529 + C141216 * C120) * C93949 +
             C62512 * C141384) *
                C5865 +
            (C102386 + C102387) * C5866 + (C102388 + C102389) * C5867) *
               C141294 * C816 -
           ((C58471 * C141384 + C56055 * C93949) * C5867 +
            (C102389 + C102388) * C5866 + (C102387 + C102386) * C5865) *
               C141294 * C141485) *
              C818 +
          (((C102390 + C102391) * C5865 + (C102392 + C102393) * C5866 +
            (C56058 * C93949 +
             (C55526 * C10552 + C56752 + C56752 + C141216 * C10556) * C141384) *
                C5867) *
               C141294 * C141485 -
           ((C102393 + C102392) * C5867 + (C102391 + C102390) * C5866 +
            (C62514 * C141384 +
             (C55526 * C109 + C55536 + C55536 + C141216 * C121) * C93949) *
                C5865) *
               C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q));
    d2eexy[127] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141309 * C189) * C47713 +
             (C188 * C114 + C141309 * C195) * C47707 + C218 * C47715 +
             C219 * C47708 + C220 * C47717 + C221 * C47709) *
                C93949 +
            (C16043 * C47713 + C16044 * C47707 + C1715 * C47715 +
             C1714 * C47708 + C1713 * C47717 + C1712 * C47709) *
                C141384) *
               C141294 * C816 -
           ((C30841 * C47709 + C30842 * C47717 + C14992 * C47708 +
             C14993 * C47715 + C18716 * C47707 + C18715 * C47713) *
                C141384 +
            (C934 * C47709 + C935 * C47717 + C936 * C47708 + C937 * C47715 +
             (C188 * C828 + C141309 * C917) * C47707 +
             (C188 * C823 + C141309 * C912) * C47713) *
                C93949) *
               C141294 * C141485) *
              C818 +
          (((C937 * C47713 + C936 * C47707 + C935 * C47715 + C934 * C47708 +
             C933 * C47717 + C932 * C47709) *
                C93949 +
            (C14993 * C47713 + C14992 * C47707 + C30842 * C47715 +
             C30841 * C47708 + (C188 * C3493 + C141309 * C3575) * C47717 +
             (C188 * C3497 + C141309 * C3579) * C47709) *
                C141384) *
               C141294 * C141485 -
           ((C1710 * C47709 + C1711 * C47717 + C1712 * C47708 + C1713 * C47715 +
             C1714 * C47707 + C1715 * C47713) *
                C141384 +
            (C223 * C47709 + C222 * C47717 + C221 * C47708 + C220 * C47715 +
             C219 * C47707 + C218 * C47713) *
                C93949) *
               C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5964 * C108 + C5865 * C189 + C5965 * C823 + C5866 * C912 +
              C5966 * C2960 + C5867 * C3026) *
                 C55527 +
             (C5964 * C114 + C5865 * C195 + C5965 * C828 + C5866 * C917 +
              C5966 * C2964 + C5867 * C3030) *
                 C141216) *
                C93949 +
            ((C5964 * C1601 + C5865 * C1690 + C5965 * C3490 + C5866 * C3572 +
              C5966 * C7887 + C5867 * C8006) *
                 C55527 +
             (C5964 * C1606 + C5865 * C1695 + C5965 * C3494 + C5866 * C3576 +
              C5966 * C7890 + C5867 * C8009) *
                 C141216) *
                C141384) *
               C141294 * C816 -
           (((C5966 * C10553 + C5867 * C10679 + C5965 * C7890 + C5866 * C8009 +
              C5964 * C3494 + C5865 * C3576) *
                 C141216 +
             (C5966 * C10551 + C5867 * C10677 + C5965 * C7887 + C5866 * C8006 +
              C5964 * C3490 + C5865 * C3572) *
                 C55527) *
                C141384 +
            ((C5966 * C6732 + C5867 * C6883 + C5965 * C2964 + C5866 * C3030 +
              C5964 * C828 + C5865 * C917) *
                 C141216 +
             (C5966 * C6729 + C5867 * C6880 + C5965 * C2960 + C5866 * C3026 +
              C5964 * C823 + C5865 * C912) *
                 C55527) *
                C93949) *
               C141294 * C141485) *
              C818 +
          ((((C6903 + C6902 + C6901) * C55527 +
             (C6900 + C6899 + C6898) * C141216) *
                C93949 +
            ((C5964 * C3491 + C5865 * C3573 + C5965 * C7886 + C5866 * C8005 +
              C5966 * C10552 + C5867 * C10678) *
                 C55527 +
             (C5964 * C3495 + C5865 * C3577 + C5965 * C7889 + C5866 * C8008 +
              C5966 * C10554 + C5867 * C10680) *
                 C141216) *
                C141384) *
               C141294 * C141485 -
           (((C8024 + C8025 + C8026) * C141216 +
             (C8027 + C8028 + C8029) * C55527) *
                C141384 +
            ((C5997 + C5996 + C5995) * C141216 +
             (C5994 + C5993 + C5992) * C55527) *
                C93949) *
               C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q));
    d2eexz[127] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C94102 * C108 + C93949 * C276 + C94103 * C1601 + C141384 * C1784) *
                C47713 +
            (C94102 * C114 + C93949 * C282 + C94103 * C1606 + C141384 * C1789) *
                C47707 +
            (C94129 + C94130) * C47715 + (C94131 + C94132) * C47708 +
            C94141 * C47717 + C94142 * C47709) *
               C141309 * C141294 * C816 -
           ((C94978 + C94979) * C47709 + (C94980 + C94981) * C47717 +
            (C94982 + C94983) * C47708 + (C94984 + C94985) * C47715 +
            (C94103 * C3494 + C141384 * C3650 + C94102 * C828 +
             C93949 * C1011) *
                C47707 +
            (C94103 * C3490 + C141384 * C3646 + C94102 * C823 +
             C93949 * C1006) *
                C47713) *
               C141309 * C141294 * C141485) *
              C818 +
          (((C94985 + C94984) * C47713 + (C94983 + C94982) * C47707 +
            (C94981 + C94980) * C47715 + (C94979 + C94978) * C47708 +
            (C94102 * C820 + C93949 * C1003 + C94103 * C3493 +
             C141384 * C3649) *
                C47717 +
            (C94102 * C825 + C93949 * C1008 + C94103 * C3497 +
             C141384 * C3653) *
                C47709) *
               C141309 * C141294 * C141485 -
           ((C94137 + C94138) * C47709 + (C94139 + C94140) * C47717 +
            (C94136 + C94135) * C47708 + (C94134 + C94133) * C47715 +
            (C94132 + C94131) * C47707 + (C94130 + C94129) * C47713) *
               C141309 * C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C94102 * C108 + C93949 * C276 + C94103 * C1601 +
              C141384 * C1784) *
                 C55527 +
             (C94102 * C114 + C93949 * C282 + C94103 * C1606 +
              C141384 * C1789) *
                 C141216) *
                C5865 +
            ((C102614 + C102615) * C55527 + (C102616 + C102617) * C141216) *
                C5866 +
            ((C102618 + C102619) * C55527 + (C102620 + C102621) * C141216) *
                C5867) *
               C141294 * C816 -
           (((C94103 * C10553 + C141384 * C10781 + C94102 * C6732 +
              C93949 * C7005) *
                 C141216 +
             (C94103 * C10551 + C141384 * C10779 + C94102 * C6729 +
              C93949 * C7002) *
                 C55527) *
                C5867 +
            ((C102621 + C102620) * C141216 + (C102619 + C102618) * C55527) *
                C5866 +
            ((C102617 + C102616) * C141216 + (C102615 + C102614) * C55527) *
                C5865) *
               C141294 * C141485) *
              C818 +
          ((((C94985 + C94984) * C55527 + (C94983 + C94982) * C141216) * C5865 +
            ((C102622 + C102623) * C55527 + (C102624 + C102625) * C141216) *
                C5866 +
            ((C94102 * C6728 + C93949 * C7001 + C94103 * C10552 +
              C141384 * C10780) *
                 C55527 +
             (C94102 * C6731 + C93949 * C7004 + C94103 * C10554 +
              C141384 * C10782) *
                 C141216) *
                C5867) *
               C141294 * C141485 -
           (((C102625 + C102624) * C141216 + (C102623 + C102622) * C55527) *
                C5867 +
            ((C94982 + C94983) * C141216 + (C94984 + C94985) * C55527) * C5866 +
            ((C94132 + C94131) * C141216 + (C94130 + C94129) * C55527) *
                C5865) *
               C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[127] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47713 * C108 + C47707 * C114 + C47715 * C109 + C47708 * C115 +
              C47717 * C110 + C47709 * C116) *
                 C188 +
             (C47713 * C189 + C47707 * C362 + C47715 * C190 + C47708 * C363 +
              C47717 * C191 + C47709 * C364) *
                 C141309) *
                C93949 +
            ((C47713 * C1601 + C47707 * C1606 + C47715 * C1600 +
              C47708 * C1605 + C47717 * C1599 + C47709 * C1604) *
                 C188 +
             (C47713 * C1690 + C47707 * C1878 + C47715 * C1689 +
              C47708 * C1877 + C47717 * C1688 + C47709 * C1876) *
                 C141309) *
                C141384) *
               C141294 * C816 -
           (((C52519 + C52520 + C52521) * C141309 +
             (C52522 + C52523 + C52524) * C188) *
                C141384 +
            ((C48949 + C48948 + C48947) * C141309 +
             (C48946 + C48945 + C48944) * C188) *
                C93949) *
               C141294 * C141485) *
              C818 +
          ((((C48950 + C48951 + C48952) * C188 +
             (C48953 + C48954 + C48955) * C141309) *
                C93949 +
            ((C47713 * C3491 + C47707 * C3495 + C47715 * C3492 +
              C47708 * C3496 + C47717 * C3493 + C47709 * C3497) *
                 C188 +
             (C47713 * C3573 + C47707 * C3721 + C47715 * C3574 +
              C47708 * C3722 + C47717 * C3575 + C47709 * C3723) *
                 C141309) *
                C141384) *
               C141294 * C141485 -
           (((C47717 * C1687 + C47709 * C1875 + C47715 * C1688 +
              C47708 * C1876 + C47713 * C1689 + C47707 * C1877) *
                 C141309 +
             (C47717 * C1598 + C47709 * C1603 + C47715 * C1599 +
              C47708 * C1604 + C47713 * C1600 + C47707 * C1605) *
                 C188) *
                C141384 +
            ((C47717 * C192 + C47709 * C365 + C47715 * C191 + C47708 * C364 +
              C47713 * C190 + C47707 * C363) *
                 C141309 +
             (C47717 * C111 + C47709 * C117 + C47715 * C110 + C47708 * C116 +
              C47713 * C109 + C47707 * C115) *
                 C188) *
                C93949) *
               C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C55527 * C108 + C141216 * C114) * C5964 +
             (C55527 * C189 + C141216 * C362) * C5865 + C56299 * C5965 +
             C56300 * C5866 + C56301 * C5966 + C56302 * C5867) *
                C93949 +
            (C62870 * C5964 + C62871 * C5865 + C58709 * C5965 + C58708 * C5866 +
             C58707 * C5966 + C58706 * C5867) *
                C141384) *
               C141294 * C816 -
           ((C58704 * C5867 + C58705 * C5966 + C58706 * C5866 + C58707 * C5965 +
             C58708 * C5865 + C58709 * C5964) *
                C141384 +
            (C56304 * C5867 + C56303 * C5966 + C56302 * C5866 + C56301 * C5965 +
             C56300 * C5865 + C56299 * C5964) *
                C93949) *
               C141294 * C141485) *
              C818 +
          (((C56305 * C5964 + C56306 * C5865 + C56307 * C5965 + C56308 * C5866 +
             C56309 * C5966 + C56310 * C5867) *
                C93949 +
            (C61851 * C5964 + C61852 * C5865 + C87373 * C5965 + C87374 * C5866 +
             (C55527 * C10552 + C141216 * C10554) * C5966 +
             (C55527 * C10678 + C141216 * C10902) * C5867) *
                C141384) *
               C141294 * C141485 -
           ((C87374 * C5867 + C87373 * C5966 + C61852 * C5866 + C61851 * C5965 +
             C62875 * C5865 + C62874 * C5964) *
                C141384 +
            (C56308 * C5867 + C56307 * C5966 + C56306 * C5866 + C56305 * C5965 +
             (C55527 * C190 + C141216 * C363) * C5865 +
             (C55527 * C109 + C141216 * C115) * C5964) *
                C93949) *
               C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[127] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C418 * C108 + C426 + C426 + C141309 * C419) * C47707 +
             C448 * C47708 + C449 * C47709) *
                C93949 +
            (C16446 * C47707 + C1971 * C47708 + C1970 * C47709) * C141384) *
               C141294 * C816 -
           ((C31165 * C47709 + C15322 * C47708 + C19049 * C47707) * C141384 +
            (C1192 * C47709 + C1193 * C47708 +
             (C418 * C823 + C1183 + C1183 + C141309 * C1171) * C47707) *
                C93949) *
               C141294 * C141485) *
              C818 +
          (((C1193 * C47707 + C1192 * C47708 + C1191 * C47709) * C93949 +
            (C15322 * C47707 + C31165 * C47708 +
             (C418 * C3493 + C3798 + C3798 + C141309 * C3793) * C47709) *
                C141384) *
               C141294 * C141485 -
           ((C1969 * C47709 + C1970 * C47708 + C1971 * C47707) * C141384 +
            (C450 * C47709 + C449 * C47708 + C448 * C47707) * C93949) *
               C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C6237 * C108 + C6241 + C6241 + C5865 * C419 + C6238 * C823 +
             C6242 + C6242 + C5866 * C1171 + C6239 * C2960 + C6243 + C6243 +
             C5867 * C3196) *
                C141216 * C93949 +
            (C6237 * C1601 + C8359 + C8359 + C5865 * C1949 + C6238 * C3490 +
             C8358 + C8358 + C5866 * C3790 + C6239 * C7887 + C8357 + C8357 +
             C5867 * C8345) *
                C141216 * C141384) *
               C141294 * C816 -
           ((C6239 * C10551 + C11030 + C11030 + C5867 * C11025 + C6238 * C7887 +
             C11029 + C11029 + C5866 * C8345 + C6237 * C3490 + C11028 + C11028 +
             C5865 * C3790) *
                C141216 * C141384 +
            (C6239 * C6729 + C7301 + C7301 + C5867 * C7289 + C6238 * C2960 +
             C7302 + C7302 + C5866 * C3196 + C6237 * C823 + C7303 + C7303 +
             C5865 * C1171) *
                C141216 * C93949) *
               C141294 * C141485) *
              C818 +
          (((C7315 + C7314 + C7313) * C141216 * C93949 +
            (C6237 * C3491 + C11031 + C11031 + C5865 * C3791 + C6238 * C7886 +
             C11032 + C11032 + C5866 * C8344 + C6239 * C10552 + C11033 +
             C11033 + C5867 * C11026) *
                C141216 * C141384) *
               C141294 * C141485 -
           ((C8369 + C8370 + C8371) * C141216 * C141384 +
            (C6279 + C6278 + C6277) * C141216 * C93949) *
               C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[127] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C94102 * C108 + C93949 * C276 + C94103 * C1601 +
              C141384 * C1784) *
                 C188 +
             (C94102 * C189 + C93949 * C501 + C94103 * C1690 +
              C141384 * C2040) *
                 C141309) *
                C47707 +
            ((C94129 + C94130) * C188 + (C94378 + C94379) * C141309) * C47708 +
            C94386 * C47709) *
               C141294 * C816 -
           (((C95288 + C95289) * C141309 + (C94980 + C94981) * C188) * C47709 +
            ((C95290 + C95291) * C141309 + (C94984 + C94985) * C188) * C47708 +
            ((C94103 * C3572 + C141384 * C3864 + C94102 * C912 +
              C93949 * C1262) *
                 C141309 +
             (C94103 * C3490 + C141384 * C3646 + C94102 * C823 +
              C93949 * C1006) *
                 C188) *
                C47707) *
               C141294 * C141485) *
              C818 +
          ((((C94985 + C94984) * C188 + (C95291 + C95290) * C141309) * C47707 +
            ((C94981 + C94980) * C188 + (C95289 + C95288) * C141309) * C47708 +
            ((C94102 * C820 + C93949 * C1003 + C94103 * C3493 +
              C141384 * C3649) *
                 C188 +
             (C94102 * C909 + C93949 * C1259 + C94103 * C3575 +
              C141384 * C3867) *
                 C141309) *
                C47709) *
               C141294 * C141485 -
           (((C94382 + C94383) * C141309 + (C94139 + C94140) * C188) * C47709 +
            ((C94381 + C94380) * C141309 + (C94134 + C94133) * C188) * C47708 +
            ((C94379 + C94378) * C141309 + (C94130 + C94129) * C188) * C47707) *
               C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C94102 * C108 + C93949 * C276 + C94103 * C1601 + C141384 * C1784) *
                C5964 +
            (C94102 * C189 + C93949 * C501 + C94103 * C1690 + C141384 * C2040) *
                C5865 +
            (C102614 + C102615) * C5965 + (C102932 + C102933) * C5866 +
            (C102618 + C102619) * C5966 + (C102934 + C102935) * C5867) *
               C141216 * C141294 * C816 -
           ((C94103 * C10677 + C141384 * C11131 + C94102 * C6880 +
             C93949 * C7414) *
                C5867 +
            (C94103 * C10551 + C141384 * C10779 + C94102 * C6729 +
             C93949 * C7002) *
                C5966 +
            (C102935 + C102934) * C5866 + (C102619 + C102618) * C5965 +
            (C102933 + C102932) * C5865 + (C102615 + C102614) * C5964) *
               C141216 * C141294 * C141485) *
              C818 +
          (((C94985 + C94984) * C5964 + (C95291 + C95290) * C5865 +
            (C102622 + C102623) * C5965 + (C102936 + C102937) * C5866 +
            (C94102 * C6728 + C93949 * C7001 + C94103 * C10552 +
             C141384 * C10780) *
                C5966 +
            (C94102 * C6879 + C93949 * C7413 + C94103 * C10678 +
             C141384 * C11132) *
                C5867) *
               C141216 * C141294 * C141485 -
           ((C102937 + C102936) * C5867 + (C102623 + C102622) * C5966 +
            (C95290 + C95291) * C5866 + (C94984 + C94985) * C5965 +
            (C94379 + C94378) * C5865 + (C94130 + C94129) * C5964) *
               C141216 * C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q));
    d2eezx[127] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C47713 * C108 + C47707 * C114 + C47715 * C109 +
                        C47708 * C115 + C47717 * C110 + C47709 * C116) *
                           C94102 +
                       (C47713 * C276 + C47707 * C579 + C47715 * C277 +
                        C47708 * C580 + C47717 * C278 + C47709 * C581) *
                           C93949 +
                       (C47713 * C1601 + C47707 * C1606 + C47715 * C1600 +
                        C47708 * C1605 + C47717 * C1599 + C47709 * C1604) *
                           C94103 +
                       (C47713 * C1784 + C47707 * C2126 + C47715 * C1783 +
                        C47708 * C2125 + C47717 * C1782 + C47709 * C2124) *
                           C141384) *
                          C141309 * C141294 * C816 -
                      ((C52831 + C52832 + C52833) * C141384 +
                       (C52522 + C52523 + C52524) * C94103 +
                       (C49300 + C49299 + C49298) * C93949 +
                       (C48946 + C48945 + C48944) * C94102) *
                          C141309 * C141294 * C141485) *
                         C818 +
                     (((C48950 + C48951 + C48952) * C94102 +
                       (C49301 + C49302 + C49303) * C93949 +
                       (C47713 * C3491 + C47707 * C3495 + C47715 * C3492 +
                        C47708 * C3496 + C47717 * C3493 + C47709 * C3497) *
                           C94103 +
                       (C47713 * C3647 + C47707 * C3935 + C47715 * C3648 +
                        C47708 * C3936 + C47717 * C3649 + C47709 * C3937) *
                           C141384) *
                          C141309 * C141294 * C141485 -
                      ((C47717 * C1781 + C47709 * C2123 + C47715 * C1782 +
                        C47708 * C2124 + C47713 * C1783 + C47707 * C2125) *
                           C141384 +
                       (C47717 * C1598 + C47709 * C1603 + C47715 * C1599 +
                        C47708 * C1604 + C47713 * C1600 + C47707 * C1605) *
                           C94103 +
                       (C47717 * C279 + C47709 * C582 + C47715 * C278 +
                        C47708 * C581 + C47713 * C277 + C47707 * C580) *
                           C93949 +
                       (C47717 * C111 + C47709 * C117 + C47715 * C110 +
                        C47708 * C116 + C47713 * C109 + C47707 * C115) *
                           C94102) *
                          C141309 * C141294 * C816) *
                         C141483)) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((((C55527 * C108 + C141216 * C114) * C94102 +
                        (C55527 * C276 + C141216 * C579) * C93949 +
                        C62870 * C94103 + C63222 * C141384) *
                           C5865 +
                       (C103036 + C103037 + C103038 + C103039) * C5866 +
                       (C103040 + C103041 + C103042 + C103043) * C5867) *
                          C141294 * C816 -
                      ((C58927 * C141384 + C58705 * C94103 + C56537 * C93949 +
                        C56303 * C94102) *
                           C5867 +
                       (C103043 + C103042 + C103041 + C103040) * C5866 +
                       (C103039 + C103038 + C103037 + C103036) * C5865) *
                          C141294 * C141485) *
                         C818 +
                     (((C103044 + C103045 + C103046 + C103047) * C5865 +
                       (C103048 + C103049 + C103050 + C103051) * C5866 +
                       (C56309 * C94102 + C56540 * C93949 +
                        (C55527 * C10552 + C141216 * C10554) * C94103 +
                        (C55527 * C10780 + C141216 * C11238) * C141384) *
                           C5867) *
                          C141294 * C141485 -
                      ((C103051 + C103050 + C103049 + C103048) * C5867 +
                       (C103047 + C103046 + C103045 + C103044) * C5866 +
                       (C63224 * C141384 + C62874 * C94103 +
                        (C55527 * C277 + C141216 * C580) * C93949 +
                        (C55527 * C109 + C141216 * C115) * C94102) *
                           C5865) *
                          C141294 * C816) *
                         C141483)) /
                       (p * q * std::sqrt(p + q));
    d2eezy[127] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141309 * C189) * C94102 +
             (C188 * C276 + C141309 * C635) * C93949 + C16043 * C94103 +
             C16798 * C141384) *
                C47707 +
            (C94535 + C94536 + C94537 + C94538) * C47708 + C94549 * C47709) *
               C141294 * C816 -
           ((C95488 + C95489 + C95490 + C95491) * C47709 +
            (C95492 + C95493 + C95494 + C95495) * C47708 +
            (C19363 * C141384 + C18715 * C94103 +
             (C188 * C1006 + C141309 * C1419) * C93949 +
             (C188 * C823 + C141309 * C912) * C94102) *
                C47707) *
               C141294 * C141485) *
              C818 +
          (((C95495 + C95494 + C95493 + C95492) * C47707 +
            (C95491 + C95490 + C95489 + C95488) * C47708 +
            (C933 * C94102 + C1431 * C93949 +
             (C188 * C3493 + C141309 * C3575) * C94103 +
             (C188 * C3649 + C141309 * C4007) * C141384) *
                C47709) *
               C141294 * C141485 -
           ((C94543 + C94544 + C94545 + C94546) * C47709 +
            (C94542 + C94541 + C94540 + C94539) * C47708 +
            (C94538 + C94537 + C94536 + C94535) * C47707) *
               C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5964 * C108 + C5865 * C189 + C5965 * C823 + C5866 * C912 +
             C5966 * C2960 + C5867 * C3026) *
                C94102 +
            (C5964 * C276 + C5865 * C635 + C5965 * C1006 + C5866 * C1419 +
             C5966 * C3084 + C5867 * C3362) *
                C93949 +
            (C5964 * C1601 + C5865 * C1690 + C5965 * C3490 + C5866 * C3572 +
             C5966 * C7887 + C5867 * C8006) *
                C94103 +
            (C5964 * C1784 + C5865 * C2197 + C5965 * C3646 + C5866 * C4004 +
             C5966 * C8128 + C5867 * C8684) *
                C141384) *
               C141216 * C141294 * C816 -
           ((C5966 * C10779 + C5867 * C11349 + C5965 * C8128 + C5866 * C8684 +
             C5964 * C3646 + C5865 * C4004) *
                C141384 +
            (C5966 * C10551 + C5867 * C10677 + C5965 * C7887 + C5866 * C8006 +
             C5964 * C3490 + C5865 * C3572) *
                C94103 +
            (C5966 * C7002 + C5867 * C7655 + C5965 * C3084 + C5866 * C3362 +
             C5964 * C1006 + C5865 * C1419) *
                C93949 +
            (C5966 * C6729 + C5867 * C6880 + C5965 * C2960 + C5866 * C3026 +
             C5964 * C823 + C5865 * C912) *
                C94102) *
               C141216 * C141294 * C141485) *
              C818 +
          (((C6903 + C6902 + C6901) * C94102 +
            (C7666 + C7665 + C7664) * C93949 +
            (C5964 * C3491 + C5865 * C3573 + C5965 * C7886 + C5866 * C8005 +
             C5966 * C10552 + C5867 * C10678) *
                C94103 +
            (C5964 * C3647 + C5865 * C4005 + C5965 * C8127 + C5866 * C8683 +
             C5966 * C10780 + C5867 * C11350) *
                C141384) *
               C141216 * C141294 * C141485 -
           ((C8693 + C8694 + C8695) * C141384 +
            (C8027 + C8028 + C8029) * C94103 +
            (C6537 + C6536 + C6535) * C93949 +
            (C5994 + C5993 + C5992) * C94102) *
               C141216 * C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q));
    d2eezz[127] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C94623 * C108 + C94626 + C94626 + C93949 * C714 + C94624 * C1601 +
             C94627 + C94627 + C141384 * C2283) *
                C141309 * C47707 +
            (C94660 + C94661) * C141309 * C47708 + C94667 * C47709) *
               C141294 * C816 -
           ((C95618 + C95619) * C141309 * C47709 +
            (C95620 + C95621) * C141309 * C47708 +
            (C94624 * C3490 + C95606 + C95606 + C141384 * C4074 +
             C94623 * C823 + C95607 + C95607 + C93949 * C1505) *
                C141309 * C47707) *
               C141294 * C141485) *
              C818 +
          (((C95621 + C95620) * C141309 * C47707 +
            (C95619 + C95618) * C141309 * C47708 +
            (C94623 * C820 + C95608 + C95608 + C93949 * C1502 + C94624 * C3493 +
             C95609 + C95609 + C141384 * C4077) *
                C141309 * C47709) *
               C141294 * C141485 -
           ((C94664 + C94665) * C141309 * C47709 +
            (C94663 + C94662) * C141309 * C47708 +
            (C94661 + C94660) * C141309 * C47707) *
               C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C94623 * C108 + C94626 + C94626 + C93949 * C714 + C94624 * C1601 +
             C94627 + C94627 + C141384 * C2283) *
                C5865 +
            (C103276 + C103277) * C5866 + (C103278 + C103279) * C5867) *
               C141216 * C141294 * C816 -
           ((C94624 * C10551 + C103256 + C103256 + C141384 * C11449 +
             C94623 * C6729 + C103257 + C103257 + C93949 * C7765) *
                C5867 +
            (C103279 + C103278) * C5866 + (C103277 + C103276) * C5865) *
               C141216 * C141294 * C141485) *
              C818 +
          (((C95621 + C95620) * C5865 + (C103280 + C103281) * C5866 +
            (C94623 * C6728 + C103262 + C103262 + C93949 * C7764 +
             C94624 * C10552 + C103263 + C103263 + C141384 * C11450) *
                C5867) *
               C141216 * C141294 * C141485 -
           ((C103281 + C103280) * C5867 + (C95620 + C95621) * C5866 +
            (C94661 + C94660) * C5865) *
               C141216 * C141294 * C816) *
              C141483)) /
            (p * q * std::sqrt(p + q));
    d2eexx[128] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47712 * C108 + C47719 + C47719 + C47707 * C120 + C47714 * C109 +
             C47720 + C47720 + C47708 * C121 + C47716 * C110 + C47721 + C47721 +
             C47709 * C122) *
                C93949 +
            (C95747 + C95748 + C95749) * C141384) *
               C141309 * C1596 -
           ((C47716 * C5327 + C54870 + C54870 + C47709 * C5335 +
             C47714 * C5326 + C54869 + C54869 + C47708 * C5334 +
             C47712 * C5325 + C54868 + C54868 + C47707 * C5333) *
                C141384 +
            (C95749 + C95748 + C95747) * C93949) *
               C141309 * C141487) *
              C141277 * C818 +
          (((C95750 + C95751 + C95752) * C93949 +
            (C47712 * C5326 + C95732 + C95732 + C47707 * C5334 +
             C47714 * C5327 + C95733 + C95733 + C47708 * C5335 +
             C47716 * C5328 + C95734 + C95734 + C47709 * C5336) *
                C141384) *
               C141309 * C141487 -
           ((C95752 + C95751 + C95750) * C141384 +
            (C47716 * C111 + C47728 + C47728 + C47709 * C123 + C47714 * C110 +
             C47729 + C47729 + C47708 * C122 + C47712 * C109 + C47730 + C47730 +
             C47707 * C121) *
                C93949) *
               C141309 * C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C55526 * C108 + C55529 + C55529 + C141216 * C120) * C93949 +
             C62512 * C141384) *
                C5865 +
            (C102386 + C102387) * C5866 + (C102388 + C102389) * C5867) *
               C1596 -
           ((C64402 * C141384 + C58472 * C93949) * C5867 +
            (C61519 * C141384 + C58473 * C93949) * C5866 +
            (C62513 * C141384 + C62512 * C93949) * C5865) *
               C141487) *
              C141277 * C818 +
          (((C62514 * C93949 + C62515 * C141384) * C5865 +
            (C61520 * C93949 + C61521 * C141384) * C5866 +
            (C87073 * C93949 +
             (C55526 * C13304 + C61512 + C61512 + C141216 * C13312) * C141384) *
                C5867) *
               C141487 -
           ((C102393 + C102392) * C5867 + (C102391 + C102390) * C5866 +
            (C62514 * C141384 +
             (C55526 * C109 + C55536 + C55536 + C141216 * C121) * C93949) *
                C5865) *
               C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eexy[128] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141309 * C189) * C47713 +
             (C188 * C114 + C141309 * C195) * C47707 + C218 * C47715 +
             C219 * C47708 + C220 * C47717 + C221 * C47709) *
                C93949 +
            (C95851 + C95852 + C95853 + C95854 + C95855 + C95856) * C141384) *
               C1596 -
           ((C14129 * C47709 + C14130 * C47717 + C14128 * C47708 +
             C14127 * C47715 + C16046 * C47707 + C16045 * C47713) *
                C141384 +
            (C95856 + C95855 + C95854 + C95853 + C95852 + C95851) * C93949) *
               C141487) *
              C141277 * C818 +
          (((C95857 + C95858 + C95859 + C95860 + C95861 + C95862) * C93949 +
            (C14127 * C47713 + C14128 * C47707 + C14130 * C47715 +
             C14129 * C47708 + (C188 * C5328 + C141309 * C5394) * C47717 +
             (C188 * C5332 + C141309 * C5398) * C47709) *
                C141384) *
               C141487 -
           ((C95862 + C95861 + C95860 + C95859 + C95858 + C95857) * C141384 +
            (C223 * C47709 + C222 * C47717 + C221 * C47708 + C220 * C47715 +
             C219 * C47707 + C218 * C47713) *
                C93949) *
               C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5964 * C108 + C5865 * C189 + C5965 * C823 + C5866 * C912 +
              C5966 * C2960 + C5867 * C3026) *
                 C55527 +
             (C5964 * C114 + C5865 * C195 + C5965 * C828 + C5866 * C917 +
              C5966 * C2964 + C5867 * C3030) *
                 C141216) *
                C93949 +
            ((C103490 + C103491 + C103492) * C55527 +
             (C103493 + C103494 + C103495) * C141216) *
                C141384) *
               C1596 -
           (((C5966 * C13307 + C5867 * C13398 + C5965 * C13305 +
              C5866 * C13397 + C5964 * C5329 + C5865 * C5395) *
                 C141216 +
             (C5966 * C13303 + C5867 * C13394 + C5965 * C13301 +
              C5866 * C13393 + C5964 * C5325 + C5865 * C5391) *
                 C55527) *
                C141384 +
            ((C103495 + C103494 + C103493) * C141216 +
             (C103492 + C103491 + C103490) * C55527) *
                C93949) *
               C141487) *
              C141277 * C818 +
          ((((C8029 + C8028 + C8027) * C55527 +
             (C8026 + C8025 + C8024) * C141216) *
                C93949 +
            ((C5964 * C5326 + C5865 * C5392 + C5965 * C13302 + C5866 * C13395 +
              C5966 * C13304 + C5867 * C13396) *
                 C55527 +
             (C5964 * C5330 + C5865 * C5396 + C5965 * C13306 + C5866 * C13399 +
              C5966 * C13308 + C5867 * C13400) *
                 C141216) *
                C141384) *
               C141487 -
           (((C8024 + C8025 + C8026) * C141216 +
             (C8027 + C8028 + C8029) * C55527) *
                C141384 +
            ((C5997 + C5996 + C5995) * C141216 +
             (C5994 + C5993 + C5992) * C55527) *
                C93949) *
               C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eexz[128] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C94102 * C108 + C93949 * C276 + C94103 * C1601 + C141384 * C1784) *
                C47713 +
            (C94102 * C114 + C93949 * C282 + C94103 * C1606 + C141384 * C1789) *
                C47707 +
            (C94129 + C94130) * C47715 + (C94131 + C94132) * C47708 +
            C94141 * C47717 + C94142 * C47709) *
               C141309 * C1596 -
           ((C95977 + C95978) * C47709 + (C95979 + C95980) * C47717 +
            (C95981 + C95982) * C47708 + (C95983 + C95984) * C47715 +
            (C94103 * C5329 + C141384 * C5453 + C94102 * C1606 +
             C93949 * C1789) *
                C47707 +
            (C94103 * C5325 + C141384 * C5449 + C94102 * C1601 +
             C93949 * C1784) *
                C47713) *
               C141309 * C141487) *
              C141277 * C818 +
          (((C95984 + C95983) * C47713 + (C95982 + C95981) * C47707 +
            (C95980 + C95979) * C47715 + (C95978 + C95977) * C47708 +
            (C94102 * C1598 + C93949 * C1781 + C94103 * C5328 +
             C141384 * C5452) *
                C47717 +
            (C94102 * C1603 + C93949 * C1786 + C94103 * C5332 +
             C141384 * C5456) *
                C47709) *
               C141309 * C141487 -
           ((C94137 + C94138) * C47709 + (C94139 + C94140) * C47717 +
            (C94136 + C94135) * C47708 + (C94134 + C94133) * C47715 +
            (C94132 + C94131) * C47707 + (C94130 + C94129) * C47713) *
               C141309 * C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C94102 * C108 + C93949 * C276 + C94103 * C1601 +
              C141384 * C1784) *
                 C55527 +
             (C94102 * C114 + C93949 * C282 + C94103 * C1606 +
              C141384 * C1789) *
                 C141216) *
                C5865 +
            ((C102614 + C102615) * C55527 + (C102616 + C102617) * C141216) *
                C5866 +
            ((C102618 + C102619) * C55527 + (C102620 + C102621) * C141216) *
                C5867) *
               C1596 -
           (((C94103 * C13307 + C141384 * C13481 + C94102 * C7890 +
              C93949 * C8131) *
                 C141216 +
             (C94103 * C13303 + C141384 * C13477 + C94102 * C7887 +
              C93949 * C8128) *
                 C55527) *
                C5867 +
            ((C94103 * C13305 + C141384 * C13479 + C94102 * C3494 +
              C93949 * C3650) *
                 C141216 +
             (C94103 * C13301 + C141384 * C13475 + C94102 * C3490 +
              C93949 * C3646) *
                 C55527) *
                C5866 +
            ((C94103 * C5329 + C141384 * C5453 + C94102 * C1606 +
              C93949 * C1789) *
                 C141216 +
             (C94103 * C5325 + C141384 * C5449 + C94102 * C1601 +
              C93949 * C1784) *
                 C55527) *
                C5865) *
               C141487) *
              C141277 * C818 +
          ((((C95984 + C95983) * C55527 + (C95982 + C95981) * C141216) * C5865 +
            ((C94102 * C3491 + C93949 * C3647 + C94103 * C13302 +
              C141384 * C13476) *
                 C55527 +
             (C94102 * C3495 + C93949 * C3651 + C94103 * C13306 +
              C141384 * C13480) *
                 C141216) *
                C5866 +
            ((C94102 * C7886 + C93949 * C8127 + C94103 * C13304 +
              C141384 * C13478) *
                 C55527 +
             (C94102 * C7889 + C93949 * C8130 + C94103 * C13308 +
              C141384 * C13482) *
                 C141216) *
                C5867) *
               C141487 -
           (((C102625 + C102624) * C141216 + (C102623 + C102622) * C55527) *
                C5867 +
            ((C94982 + C94983) * C141216 + (C94984 + C94985) * C55527) * C5866 +
            ((C94132 + C94131) * C141216 + (C94130 + C94129) * C55527) *
                C5865) *
               C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[128] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47713 * C108 + C47707 * C114 + C47715 * C109 + C47708 * C115 +
              C47717 * C110 + C47709 * C116) *
                 C188 +
             (C47713 * C189 + C47707 * C362 + C47715 * C190 + C47708 * C363 +
              C47717 * C191 + C47709 * C364) *
                 C141309) *
                C93949 +
            ((C96107 + C96108 + C96109) * C188 +
             (C96110 + C96111 + C96112) * C141309) *
                C141384) *
               C1596 -
           (((C47717 * C5393 + C47709 * C5509 + C47715 * C5392 +
              C47708 * C5508 + C47713 * C5391 + C47707 * C5507) *
                 C141309 +
             (C47717 * C5327 + C47709 * C5331 + C47715 * C5326 +
              C47708 * C5330 + C47713 * C5325 + C47707 * C5329) *
                 C188) *
                C141384 +
            ((C96112 + C96111 + C96110) * C141309 +
             (C96109 + C96108 + C96107) * C188) *
                C93949) *
               C141487) *
              C141277 * C818 +
          ((((C96113 + C96114 + C96115) * C188 +
             (C96116 + C96117 + C96118) * C141309) *
                C93949 +
            ((C47713 * C5326 + C47707 * C5330 + C47715 * C5327 +
              C47708 * C5331 + C47717 * C5328 + C47709 * C5332) *
                 C188 +
             (C47713 * C5392 + C47707 * C5508 + C47715 * C5393 +
              C47708 * C5509 + C47717 * C5394 + C47709 * C5510) *
                 C141309) *
                C141384) *
               C141487 -
           (((C96118 + C96117 + C96116) * C141309 +
             (C96115 + C96114 + C96113) * C188) *
                C141384 +
            ((C47717 * C192 + C47709 * C365 + C47715 * C191 + C47708 * C364 +
              C47713 * C190 + C47707 * C363) *
                 C141309 +
             (C47717 * C111 + C47709 * C117 + C47715 * C110 + C47708 * C116 +
              C47713 * C109 + C47707 * C115) *
                 C188) *
                C93949) *
               C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C55527 * C108 + C141216 * C114) * C5964 +
             (C55527 * C189 + C141216 * C362) * C5865 + C56299 * C5965 +
             C56300 * C5866 + C56301 * C5966 + C56302 * C5867) *
                C93949 +
            (C103692 + C103693 + C103694 + C103695 + C103696 + C103697) *
                C141384) *
               C1596 -
           ((C64648 * C5867 + C64649 * C5966 + C61850 * C5866 + C61849 * C5965 +
             C62873 * C5865 + C62872 * C5964) *
                C141384 +
            (C103697 + C103696 + C103695 + C103694 + C103693 + C103692) *
                C93949) *
               C141487) *
              C141277 * C818 +
          (((C103698 + C103699 + C103700 + C103701 + C103702 + C103703) *
                C93949 +
            (C62876 * C5964 + C62877 * C5865 + C61853 * C5965 + C61854 * C5866 +
             (C55527 * C13304 + C141216 * C13308) * C5966 +
             (C55527 * C13396 + C141216 * C13560) * C5867) *
                C141384) *
               C141487 -
           ((C103703 + C103702 + C103701 + C103700 + C103699 + C103698) *
                C141384 +
            (C56308 * C5867 + C56307 * C5966 + C56306 * C5866 + C56305 * C5965 +
             (C55527 * C190 + C141216 * C363) * C5865 +
             (C55527 * C109 + C141216 * C115) * C5964) *
                C93949) *
               C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[128] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C418 * C108 + C426 + C426 + C141309 * C419) * C47707 +
             C448 * C47708 + C449 * C47709) *
                C93949 +
            (C96217 + C96218 + C96219) * C141384) *
               C1596 -
           ((C14401 * C47709 + C14400 * C47708 + C16447 * C47707) * C141384 +
            (C96219 + C96218 + C96217) * C93949) *
               C141487) *
              C141277 * C818 +
          (((C96220 + C96221 + C96222) * C93949 +
            (C14400 * C47707 + C14401 * C47708 +
             (C418 * C5328 + C5569 + C5569 + C141309 * C5564) * C47709) *
                C141384) *
               C141487 -
           ((C96222 + C96221 + C96220) * C141384 +
            (C450 * C47709 + C449 * C47708 + C448 * C47707) * C93949) *
               C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C6237 * C108 + C6241 + C6241 + C5865 * C419 + C6238 * C823 +
             C6242 + C6242 + C5866 * C1171 + C6239 * C2960 + C6243 + C6243 +
             C5867 * C3196) *
                C141216 * C93949 +
            (C103814 + C103815 + C103816) * C141216 * C141384) *
               C1596 -
           ((C6239 * C13303 + C13642 + C13642 + C5867 * C13636 +
             C6238 * C13301 + C13641 + C13641 + C5866 * C13635 + C6237 * C5325 +
             C13640 + C13640 + C5865 * C5561) *
                C141216 * C141384 +
            (C103816 + C103815 + C103814) * C141216 * C93949) *
               C141487) *
              C141277 * C818 +
          (((C8371 + C8370 + C8369) * C141216 * C93949 +
            (C6237 * C5326 + C13643 + C13643 + C5865 * C5562 + C6238 * C13302 +
             C13644 + C13644 + C5866 * C13637 + C6239 * C13304 + C13645 +
             C13645 + C5867 * C13638) *
                C141216 * C141384) *
               C141487 -
           ((C8369 + C8370 + C8371) * C141216 * C141384 +
            (C6279 + C6278 + C6277) * C141216 * C93949) *
               C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[128] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C94102 * C108 + C93949 * C276 + C94103 * C1601 +
              C141384 * C1784) *
                 C188 +
             (C94102 * C189 + C93949 * C501 + C94103 * C1690 +
              C141384 * C2040) *
                 C141309) *
                C47707 +
            ((C94129 + C94130) * C188 + (C94378 + C94379) * C141309) * C47708 +
            C94386 * C47709) *
               C1596 -
           (((C96329 + C96330) * C141309 + (C95979 + C95980) * C188) * C47709 +
            ((C96331 + C96332) * C141309 + (C95983 + C95984) * C188) * C47708 +
            ((C94103 * C5391 + C141384 * C5619 + C94102 * C1690 +
              C93949 * C2040) *
                 C141309 +
             (C94103 * C5325 + C141384 * C5449 + C94102 * C1601 +
              C93949 * C1784) *
                 C188) *
                C47707) *
               C141487) *
              C141277 * C818 +
          ((((C95984 + C95983) * C188 + (C96332 + C96331) * C141309) * C47707 +
            ((C95980 + C95979) * C188 + (C96330 + C96329) * C141309) * C47708 +
            ((C94102 * C1598 + C93949 * C1781 + C94103 * C5328 +
              C141384 * C5452) *
                 C188 +
             (C94102 * C1687 + C93949 * C2037 + C94103 * C5394 +
              C141384 * C5622) *
                 C141309) *
                C47709) *
               C141487 -
           (((C94382 + C94383) * C141309 + (C94139 + C94140) * C188) * C47709 +
            ((C94381 + C94380) * C141309 + (C94134 + C94133) * C188) * C47708 +
            ((C94379 + C94378) * C141309 + (C94130 + C94129) * C188) * C47707) *
               C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C94102 * C108 + C93949 * C276 + C94103 * C1601 + C141384 * C1784) *
                C5964 +
            (C94102 * C189 + C93949 * C501 + C94103 * C1690 + C141384 * C2040) *
                C5865 +
            (C102614 + C102615) * C5965 + (C102932 + C102933) * C5866 +
            (C102618 + C102619) * C5966 + (C102934 + C102935) * C5867) *
               C141216 * C1596 -
           ((C94103 * C13394 + C141384 * C13720 + C94102 * C8006 +
             C93949 * C8470) *
                C5867 +
            (C94103 * C13303 + C141384 * C13477 + C94102 * C7887 +
             C93949 * C8128) *
                C5966 +
            (C94103 * C13393 + C141384 * C13719 + C94102 * C3572 +
             C93949 * C3864) *
                C5866 +
            (C94103 * C13301 + C141384 * C13475 + C94102 * C3490 +
             C93949 * C3646) *
                C5965 +
            (C94103 * C5391 + C141384 * C5619 + C94102 * C1690 +
             C93949 * C2040) *
                C5865 +
            (C94103 * C5325 + C141384 * C5449 + C94102 * C1601 +
             C93949 * C1784) *
                C5964) *
               C141216 * C141487) *
              C141277 * C818 +
          (((C95984 + C95983) * C5964 + (C96332 + C96331) * C5865 +
            (C94102 * C3491 + C93949 * C3647 + C94103 * C13302 +
             C141384 * C13476) *
                C5965 +
            (C94102 * C3573 + C93949 * C3865 + C94103 * C13395 +
             C141384 * C13721) *
                C5866 +
            (C94102 * C7886 + C93949 * C8127 + C94103 * C13304 +
             C141384 * C13478) *
                C5966 +
            (C94102 * C8005 + C93949 * C8469 + C94103 * C13396 +
             C141384 * C13722) *
                C5867) *
               C141216 * C141487 -
           ((C102937 + C102936) * C5867 + (C102623 + C102622) * C5966 +
            (C95290 + C95291) * C5866 + (C94984 + C94985) * C5965 +
            (C94379 + C94378) * C5865 + (C94130 + C94129) * C5964) *
               C141216 * C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eezx[128] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C47713 * C108 + C47707 * C114 + C47715 * C109 +
                        C47708 * C115 + C47717 * C110 + C47709 * C116) *
                           C94102 +
                       (C47713 * C276 + C47707 * C579 + C47715 * C277 +
                        C47708 * C580 + C47717 * C278 + C47709 * C581) *
                           C93949 +
                       (C96107 + C96108 + C96109) * C94103 +
                       (C96443 + C96444 + C96445) * C141384) *
                          C141309 * C1596 -
                      ((C47717 * C5451 + C47709 * C5675 + C47715 * C5450 +
                        C47708 * C5674 + C47713 * C5449 + C47707 * C5673) *
                           C141384 +
                       (C47717 * C5327 + C47709 * C5331 + C47715 * C5326 +
                        C47708 * C5330 + C47713 * C5325 + C47707 * C5329) *
                           C94103 +
                       (C96445 + C96444 + C96443) * C93949 +
                       (C96109 + C96108 + C96107) * C94102) *
                          C141309 * C141487) *
                         C141277 * C818 +
                     (((C96113 + C96114 + C96115) * C94102 +
                       (C96446 + C96447 + C96448) * C93949 +
                       (C47713 * C5326 + C47707 * C5330 + C47715 * C5327 +
                        C47708 * C5331 + C47717 * C5328 + C47709 * C5332) *
                           C94103 +
                       (C47713 * C5450 + C47707 * C5674 + C47715 * C5451 +
                        C47708 * C5675 + C47717 * C5452 + C47709 * C5676) *
                           C141384) *
                          C141309 * C141487 -
                      ((C96448 + C96447 + C96446) * C141384 +
                       (C96115 + C96114 + C96113) * C94103 +
                       (C47717 * C279 + C47709 * C582 + C47715 * C278 +
                        C47708 * C581 + C47713 * C277 + C47707 * C580) *
                           C93949 +
                       (C47717 * C111 + C47709 * C117 + C47715 * C110 +
                        C47708 * C116 + C47713 * C109 + C47707 * C115) *
                           C94102) *
                          C141309 * C1596) *
                         C141277 * C141483)) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((((C55527 * C108 + C141216 * C114) * C94102 +
                        (C55527 * C276 + C141216 * C579) * C93949 +
                        C62870 * C94103 + C63222 * C141384) *
                           C5865 +
                       (C103036 + C103037 + C103038 + C103039) * C5866 +
                       (C103040 + C103041 + C103042 + C103043) * C5867) *
                          C1596 -
                      ((C64892 * C141384 + C64649 * C94103 + C58928 * C93949 +
                        C58707 * C94102) *
                           C5867 +
                       (C62177 * C141384 + C61849 * C94103 + C58929 * C93949 +
                        C58709 * C94102) *
                           C5866 +
                       (C63223 * C141384 + C62872 * C94103 + C63222 * C93949 +
                        C62870 * C94102) *
                           C5865) *
                          C141487) *
                         C141277 * C818 +
                     (((C62874 * C94102 + C63224 * C93949 + C62876 * C94103 +
                        C63225 * C141384) *
                           C5865 +
                       (C61851 * C94102 + C62178 * C93949 + C61853 * C94103 +
                        C62179 * C141384) *
                           C5866 +
                       (C87373 * C94102 + C87686 * C93949 +
                        (C55527 * C13304 + C141216 * C13308) * C94103 +
                        (C55527 * C13478 + C141216 * C13800) * C141384) *
                           C5867) *
                          C141487 -
                      ((C103051 + C103050 + C103049 + C103048) * C5867 +
                       (C103047 + C103046 + C103045 + C103044) * C5866 +
                       (C63224 * C141384 + C62874 * C94103 +
                        (C55527 * C277 + C141216 * C580) * C93949 +
                        (C55527 * C109 + C141216 * C115) * C94102) *
                           C5865) *
                          C1596) *
                         C141277 * C141483)) /
                       (p * q * std::sqrt(p + q));
    d2eezy[128] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141309 * C189) * C94102 +
             (C188 * C276 + C141309 * C635) * C93949 + C16043 * C94103 +
             C16798 * C141384) *
                C47707 +
            (C94535 + C94536 + C94537 + C94538) * C47708 + C94549 * C47709) *
               C1596 -
           ((C96547 + C96548 + C96549 + C96550) * C47709 +
            (C96551 + C96552 + C96553 + C96554) * C47708 +
            (C16799 * C141384 + C16045 * C94103 + C16798 * C93949 +
             C16043 * C94102) *
                C47707) *
               C141487) *
              C141277 * C818 +
          (((C96554 + C96553 + C96552 + C96551) * C47707 +
            (C96550 + C96549 + C96548 + C96547) * C47708 +
            (C1711 * C94102 + C2209 * C93949 +
             (C188 * C5328 + C141309 * C5394) * C94103 +
             (C188 * C5452 + C141309 * C5730) * C141384) *
                C47709) *
               C141487 -
           ((C94543 + C94544 + C94545 + C94546) * C47709 +
            (C94542 + C94541 + C94540 + C94539) * C47708 +
            (C94538 + C94537 + C94536 + C94535) * C47707) *
               C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5964 * C108 + C5865 * C189 + C5965 * C823 + C5866 * C912 +
             C5966 * C2960 + C5867 * C3026) *
                C94102 +
            (C5964 * C276 + C5865 * C635 + C5965 * C1006 + C5866 * C1419 +
             C5966 * C3084 + C5867 * C3362) *
                C93949 +
            (C103490 + C103491 + C103492) * C94103 +
            (C104117 + C104118 + C104119) * C141384) *
               C141216 * C1596 -
           ((C5966 * C13477 + C5867 * C13876 + C5965 * C13475 + C5866 * C13875 +
             C5964 * C5449 + C5865 * C5727) *
                C141384 +
            (C5966 * C13303 + C5867 * C13394 + C5965 * C13301 + C5866 * C13393 +
             C5964 * C5325 + C5865 * C5391) *
                C94103 +
            (C104119 + C104118 + C104117) * C93949 +
            (C103492 + C103491 + C103490) * C94102) *
               C141216 * C141487) *
              C141277 * C818 +
          (((C8029 + C8028 + C8027) * C94102 +
            (C8695 + C8694 + C8693) * C93949 +
            (C5964 * C5326 + C5865 * C5392 + C5965 * C13302 + C5866 * C13395 +
             C5966 * C13304 + C5867 * C13396) *
                C94103 +
            (C5964 * C5450 + C5865 * C5728 + C5965 * C13476 + C5866 * C13877 +
             C5966 * C13478 + C5867 * C13878) *
                C141384) *
               C141216 * C141487 -
           ((C8693 + C8694 + C8695) * C141384 +
            (C8027 + C8028 + C8029) * C94103 +
            (C6537 + C6536 + C6535) * C93949 +
            (C5994 + C5993 + C5992) * C94102) *
               C141216 * C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eezz[128] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C94623 * C108 + C94626 + C94626 + C93949 * C714 + C94624 * C1601 +
             C94627 + C94627 + C141384 * C2283) *
                C141309 * C47707 +
            (C94660 + C94661) * C141309 * C47708 + C94667 * C47709) *
               C1596 -
           ((C96677 + C96678) * C141309 * C47709 +
            (C96679 + C96680) * C141309 * C47708 +
            (C94624 * C5325 + C96665 + C96665 + C141384 * C5781 +
             C94623 * C1601 + C96666 + C96666 + C93949 * C2283) *
                C141309 * C47707) *
               C141487) *
              C141277 * C818 +
          (((C96680 + C96679) * C141309 * C47707 +
            (C96678 + C96677) * C141309 * C47708 +
            (C94623 * C1598 + C96667 + C96667 + C93949 * C2280 +
             C94624 * C5328 + C96668 + C96668 + C141384 * C5784) *
                C141309 * C47709) *
               C141487 -
           ((C94664 + C94665) * C141309 * C47709 +
            (C94663 + C94662) * C141309 * C47708 +
            (C94661 + C94660) * C141309 * C47707) *
               C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C94623 * C108 + C94626 + C94626 + C93949 * C714 + C94624 * C1601 +
             C94627 + C94627 + C141384 * C2283) *
                C5865 +
            (C103276 + C103277) * C5866 + (C103278 + C103279) * C5867) *
               C141216 * C1596 -
           ((C94624 * C13303 + C104218 + C104218 + C141384 * C13954 +
             C94623 * C7887 + C104219 + C104219 + C93949 * C8794) *
                C5867 +
            (C94624 * C13301 + C99127 + C99127 + C141384 * C13953 +
             C94623 * C3490 + C99126 + C99126 + C93949 * C4074) *
                C5866 +
            (C94624 * C5325 + C96665 + C96665 + C141384 * C5781 +
             C94623 * C1601 + C96666 + C96666 + C93949 * C2283) *
                C5865) *
               C141216 * C141487) *
              C141277 * C818 +
          (((C96680 + C96679) * C5865 +
            (C94623 * C3491 + C99128 + C99128 + C93949 * C4075 +
             C94624 * C13302 + C99129 + C99129 + C141384 * C13955) *
                C5866 +
            (C94623 * C7886 + C104220 + C104220 + C93949 * C8793 +
             C94624 * C13304 + C104221 + C104221 + C141384 * C13956) *
                C5867) *
               C141216 * C141487 -
           ((C103281 + C103280) * C5867 + (C95620 + C95621) * C5866 +
            (C94661 + C94660) * C5865) *
               C141216 * C1596) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eexx[129] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47712 * C108 + C47719 + C47719 + C47707 * C120 + C47714 * C109 +
             C47720 + C47720 + C47708 * C121 + C47716 * C110 + C47721 + C47721 +
             C47709 * C122) *
                C93949 +
            (C95747 + C95748 + C95749) * C141384) *
               C141309 * C141294 * C2374 -
           ((C52204 + C52205 + C52206) * C141384 +
            (C48586 + C48585 + C48584) * C93949) *
               C141309 * C141294 * C141485) *
              C2376 +
          (((C48587 + C48588 + C48589) * C93949 +
            (C47712 * C3491 + C49623 + C49623 + C47707 * C3499 +
             C47714 * C3492 + C49624 + C49624 + C47708 * C3500 +
             C47716 * C3493 + C49625 + C49625 + C47709 * C3501) *
                C141384) *
               C141309 * C141294 * C141485 -
           ((C95752 + C95751 + C95750) * C141384 +
            (C47716 * C111 + C47728 + C47728 + C47709 * C123 + C47714 * C110 +
             C47729 + C47729 + C47708 * C122 + C47712 * C109 + C47730 + C47730 +
             C47707 * C121) *
                C93949) *
               C141309 * C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C55526 * C108 + C55529 + C55529 + C141216 * C120) * C93949 +
             C62512 * C141384) *
                C5865 +
            (C102386 + C102387) * C5866 + (C102388 + C102389) * C5867) *
               C141294 * C2374 -
           ((C58471 * C141384 + C56055 * C93949) * C5867 +
            (C102389 + C102388) * C5866 + (C102387 + C102386) * C5865) *
               C141294 * C141485) *
              C2376 +
          (((C102390 + C102391) * C5865 + (C102392 + C102393) * C5866 +
            (C56058 * C93949 +
             (C55526 * C10552 + C56752 + C56752 + C141216 * C10556) * C141384) *
                C5867) *
               C141294 * C141485 -
           ((C102393 + C102392) * C5867 + (C102391 + C102390) * C5866 +
            (C62514 * C141384 +
             (C55526 * C109 + C55536 + C55536 + C141216 * C121) * C93949) *
                C5865) *
               C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q));
    d2eexy[129] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141309 * C189) * C47713 +
             (C188 * C114 + C141309 * C195) * C47707 + C218 * C47715 +
             C219 * C47708 + C220 * C47717 + C221 * C47709) *
                C93949 +
            (C95851 + C95852 + C95853 + C95854 + C95855 + C95856) * C141384) *
               C141294 * C2374 -
           ((C30841 * C47709 + C30842 * C47717 + C14992 * C47708 +
             C14993 * C47715 + C18716 * C47707 + C18715 * C47713) *
                C141384 +
            (C934 * C47709 + C935 * C47717 + C936 * C47708 + C937 * C47715 +
             (C188 * C828 + C141309 * C917) * C47707 +
             (C188 * C823 + C141309 * C912) * C47713) *
                C93949) *
               C141294 * C141485) *
              C2376 +
          (((C937 * C47713 + C936 * C47707 + C935 * C47715 + C934 * C47708 +
             C933 * C47717 + C932 * C47709) *
                C93949 +
            (C14993 * C47713 + C14992 * C47707 + C30842 * C47715 +
             C30841 * C47708 + (C188 * C3493 + C141309 * C3575) * C47717 +
             (C188 * C3497 + C141309 * C3579) * C47709) *
                C141384) *
               C141294 * C141485 -
           ((C95862 + C95861 + C95860 + C95859 + C95858 + C95857) * C141384 +
            (C223 * C47709 + C222 * C47717 + C221 * C47708 + C220 * C47715 +
             C219 * C47707 + C218 * C47713) *
                C93949) *
               C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5964 * C108 + C5865 * C189 + C5965 * C823 + C5866 * C912 +
              C5966 * C2960 + C5867 * C3026) *
                 C55527 +
             (C5964 * C114 + C5865 * C195 + C5965 * C828 + C5866 * C917 +
              C5966 * C2964 + C5867 * C3030) *
                 C141216) *
                C93949 +
            ((C103490 + C103491 + C103492) * C55527 +
             (C103493 + C103494 + C103495) * C141216) *
                C141384) *
               C141294 * C2374 -
           (((C5966 * C10553 + C5867 * C10679 + C5965 * C7890 + C5866 * C8009 +
              C5964 * C3494 + C5865 * C3576) *
                 C141216 +
             (C5966 * C10551 + C5867 * C10677 + C5965 * C7887 + C5866 * C8006 +
              C5964 * C3490 + C5865 * C3572) *
                 C55527) *
                C141384 +
            ((C5966 * C6732 + C5867 * C6883 + C5965 * C2964 + C5866 * C3030 +
              C5964 * C828 + C5865 * C917) *
                 C141216 +
             (C5966 * C6729 + C5867 * C6880 + C5965 * C2960 + C5866 * C3026 +
              C5964 * C823 + C5865 * C912) *
                 C55527) *
                C93949) *
               C141294 * C141485) *
              C2376 +
          ((((C6903 + C6902 + C6901) * C55527 +
             (C6900 + C6899 + C6898) * C141216) *
                C93949 +
            ((C5964 * C3491 + C5865 * C3573 + C5965 * C7886 + C5866 * C8005 +
              C5966 * C10552 + C5867 * C10678) *
                 C55527 +
             (C5964 * C3495 + C5865 * C3577 + C5965 * C7889 + C5866 * C8008 +
              C5966 * C10554 + C5867 * C10680) *
                 C141216) *
                C141384) *
               C141294 * C141485 -
           (((C8024 + C8025 + C8026) * C141216 +
             (C8027 + C8028 + C8029) * C55527) *
                C141384 +
            ((C5997 + C5996 + C5995) * C141216 +
             (C5994 + C5993 + C5992) * C55527) *
                C93949) *
               C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q));
    d2eexz[129] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C94102 * C108 + C93949 * C276 + C94103 * C1601 + C141384 * C1784) *
                C47713 +
            (C94102 * C114 + C93949 * C282 + C94103 * C1606 + C141384 * C1789) *
                C47707 +
            (C94129 + C94130) * C47715 + (C94131 + C94132) * C47708 +
            C94141 * C47717 + C94142 * C47709) *
               C141309 * C141294 * C2374 -
           ((C94978 + C94979) * C47709 + (C94980 + C94981) * C47717 +
            (C94982 + C94983) * C47708 + (C94984 + C94985) * C47715 +
            (C94103 * C3494 + C141384 * C3650 + C94102 * C828 +
             C93949 * C1011) *
                C47707 +
            (C94103 * C3490 + C141384 * C3646 + C94102 * C823 +
             C93949 * C1006) *
                C47713) *
               C141309 * C141294 * C141485) *
              C2376 +
          (((C94985 + C94984) * C47713 + (C94983 + C94982) * C47707 +
            (C94981 + C94980) * C47715 + (C94979 + C94978) * C47708 +
            (C94102 * C820 + C93949 * C1003 + C94103 * C3493 +
             C141384 * C3649) *
                C47717 +
            (C94102 * C825 + C93949 * C1008 + C94103 * C3497 +
             C141384 * C3653) *
                C47709) *
               C141309 * C141294 * C141485 -
           ((C94137 + C94138) * C47709 + (C94139 + C94140) * C47717 +
            (C94136 + C94135) * C47708 + (C94134 + C94133) * C47715 +
            (C94132 + C94131) * C47707 + (C94130 + C94129) * C47713) *
               C141309 * C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C94102 * C108 + C93949 * C276 + C94103 * C1601 +
              C141384 * C1784) *
                 C55527 +
             (C94102 * C114 + C93949 * C282 + C94103 * C1606 +
              C141384 * C1789) *
                 C141216) *
                C5865 +
            ((C102614 + C102615) * C55527 + (C102616 + C102617) * C141216) *
                C5866 +
            ((C102618 + C102619) * C55527 + (C102620 + C102621) * C141216) *
                C5867) *
               C141294 * C2374 -
           (((C94103 * C10553 + C141384 * C10781 + C94102 * C6732 +
              C93949 * C7005) *
                 C141216 +
             (C94103 * C10551 + C141384 * C10779 + C94102 * C6729 +
              C93949 * C7002) *
                 C55527) *
                C5867 +
            ((C102621 + C102620) * C141216 + (C102619 + C102618) * C55527) *
                C5866 +
            ((C102617 + C102616) * C141216 + (C102615 + C102614) * C55527) *
                C5865) *
               C141294 * C141485) *
              C2376 +
          ((((C94985 + C94984) * C55527 + (C94983 + C94982) * C141216) * C5865 +
            ((C102622 + C102623) * C55527 + (C102624 + C102625) * C141216) *
                C5866 +
            ((C94102 * C6728 + C93949 * C7001 + C94103 * C10552 +
              C141384 * C10780) *
                 C55527 +
             (C94102 * C6731 + C93949 * C7004 + C94103 * C10554 +
              C141384 * C10782) *
                 C141216) *
                C5867) *
               C141294 * C141485 -
           (((C102625 + C102624) * C141216 + (C102623 + C102622) * C55527) *
                C5867 +
            ((C94982 + C94983) * C141216 + (C94984 + C94985) * C55527) * C5866 +
            ((C94132 + C94131) * C141216 + (C94130 + C94129) * C55527) *
                C5865) *
               C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[129] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47713 * C108 + C47707 * C114 + C47715 * C109 + C47708 * C115 +
              C47717 * C110 + C47709 * C116) *
                 C188 +
             (C47713 * C189 + C47707 * C362 + C47715 * C190 + C47708 * C363 +
              C47717 * C191 + C47709 * C364) *
                 C141309) *
                C93949 +
            ((C96107 + C96108 + C96109) * C188 +
             (C96110 + C96111 + C96112) * C141309) *
                C141384) *
               C141294 * C2374 -
           (((C52519 + C52520 + C52521) * C141309 +
             (C52522 + C52523 + C52524) * C188) *
                C141384 +
            ((C48949 + C48948 + C48947) * C141309 +
             (C48946 + C48945 + C48944) * C188) *
                C93949) *
               C141294 * C141485) *
              C2376 +
          ((((C48950 + C48951 + C48952) * C188 +
             (C48953 + C48954 + C48955) * C141309) *
                C93949 +
            ((C47713 * C3491 + C47707 * C3495 + C47715 * C3492 +
              C47708 * C3496 + C47717 * C3493 + C47709 * C3497) *
                 C188 +
             (C47713 * C3573 + C47707 * C3721 + C47715 * C3574 +
              C47708 * C3722 + C47717 * C3575 + C47709 * C3723) *
                 C141309) *
                C141384) *
               C141294 * C141485 -
           (((C96118 + C96117 + C96116) * C141309 +
             (C96115 + C96114 + C96113) * C188) *
                C141384 +
            ((C47717 * C192 + C47709 * C365 + C47715 * C191 + C47708 * C364 +
              C47713 * C190 + C47707 * C363) *
                 C141309 +
             (C47717 * C111 + C47709 * C117 + C47715 * C110 + C47708 * C116 +
              C47713 * C109 + C47707 * C115) *
                 C188) *
                C93949) *
               C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C55527 * C108 + C141216 * C114) * C5964 +
             (C55527 * C189 + C141216 * C362) * C5865 + C56299 * C5965 +
             C56300 * C5866 + C56301 * C5966 + C56302 * C5867) *
                C93949 +
            (C103692 + C103693 + C103694 + C103695 + C103696 + C103697) *
                C141384) *
               C141294 * C2374 -
           ((C58704 * C5867 + C58705 * C5966 + C58706 * C5866 + C58707 * C5965 +
             C58708 * C5865 + C58709 * C5964) *
                C141384 +
            (C56304 * C5867 + C56303 * C5966 + C56302 * C5866 + C56301 * C5965 +
             C56300 * C5865 + C56299 * C5964) *
                C93949) *
               C141294 * C141485) *
              C2376 +
          (((C56305 * C5964 + C56306 * C5865 + C56307 * C5965 + C56308 * C5866 +
             C56309 * C5966 + C56310 * C5867) *
                C93949 +
            (C61851 * C5964 + C61852 * C5865 + C87373 * C5965 + C87374 * C5866 +
             (C55527 * C10552 + C141216 * C10554) * C5966 +
             (C55527 * C10678 + C141216 * C10902) * C5867) *
                C141384) *
               C141294 * C141485 -
           ((C103703 + C103702 + C103701 + C103700 + C103699 + C103698) *
                C141384 +
            (C56308 * C5867 + C56307 * C5966 + C56306 * C5866 + C56305 * C5965 +
             (C55527 * C190 + C141216 * C363) * C5865 +
             (C55527 * C109 + C141216 * C115) * C5964) *
                C93949) *
               C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[129] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C418 * C108 + C426 + C426 + C141309 * C419) * C47707 +
             C448 * C47708 + C449 * C47709) *
                C93949 +
            (C96217 + C96218 + C96219) * C141384) *
               C141294 * C2374 -
           ((C31165 * C47709 + C15322 * C47708 + C19049 * C47707) * C141384 +
            (C1192 * C47709 + C1193 * C47708 +
             (C418 * C823 + C1183 + C1183 + C141309 * C1171) * C47707) *
                C93949) *
               C141294 * C141485) *
              C2376 +
          (((C1193 * C47707 + C1192 * C47708 + C1191 * C47709) * C93949 +
            (C15322 * C47707 + C31165 * C47708 +
             (C418 * C3493 + C3798 + C3798 + C141309 * C3793) * C47709) *
                C141384) *
               C141294 * C141485 -
           ((C96222 + C96221 + C96220) * C141384 +
            (C450 * C47709 + C449 * C47708 + C448 * C47707) * C93949) *
               C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C6237 * C108 + C6241 + C6241 + C5865 * C419 + C6238 * C823 +
             C6242 + C6242 + C5866 * C1171 + C6239 * C2960 + C6243 + C6243 +
             C5867 * C3196) *
                C141216 * C93949 +
            (C103814 + C103815 + C103816) * C141216 * C141384) *
               C141294 * C2374 -
           ((C6239 * C10551 + C11030 + C11030 + C5867 * C11025 + C6238 * C7887 +
             C11029 + C11029 + C5866 * C8345 + C6237 * C3490 + C11028 + C11028 +
             C5865 * C3790) *
                C141216 * C141384 +
            (C6239 * C6729 + C7301 + C7301 + C5867 * C7289 + C6238 * C2960 +
             C7302 + C7302 + C5866 * C3196 + C6237 * C823 + C7303 + C7303 +
             C5865 * C1171) *
                C141216 * C93949) *
               C141294 * C141485) *
              C2376 +
          (((C7315 + C7314 + C7313) * C141216 * C93949 +
            (C6237 * C3491 + C11031 + C11031 + C5865 * C3791 + C6238 * C7886 +
             C11032 + C11032 + C5866 * C8344 + C6239 * C10552 + C11033 +
             C11033 + C5867 * C11026) *
                C141216 * C141384) *
               C141294 * C141485 -
           ((C8369 + C8370 + C8371) * C141216 * C141384 +
            (C6279 + C6278 + C6277) * C141216 * C93949) *
               C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[129] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C94102 * C108 + C93949 * C276 + C94103 * C1601 +
              C141384 * C1784) *
                 C188 +
             (C94102 * C189 + C93949 * C501 + C94103 * C1690 +
              C141384 * C2040) *
                 C141309) *
                C47707 +
            ((C94129 + C94130) * C188 + (C94378 + C94379) * C141309) * C47708 +
            C94386 * C47709) *
               C141294 * C2374 -
           (((C95288 + C95289) * C141309 + (C94980 + C94981) * C188) * C47709 +
            ((C95290 + C95291) * C141309 + (C94984 + C94985) * C188) * C47708 +
            ((C94103 * C3572 + C141384 * C3864 + C94102 * C912 +
              C93949 * C1262) *
                 C141309 +
             (C94103 * C3490 + C141384 * C3646 + C94102 * C823 +
              C93949 * C1006) *
                 C188) *
                C47707) *
               C141294 * C141485) *
              C2376 +
          ((((C94985 + C94984) * C188 + (C95291 + C95290) * C141309) * C47707 +
            ((C94981 + C94980) * C188 + (C95289 + C95288) * C141309) * C47708 +
            ((C94102 * C820 + C93949 * C1003 + C94103 * C3493 +
              C141384 * C3649) *
                 C188 +
             (C94102 * C909 + C93949 * C1259 + C94103 * C3575 +
              C141384 * C3867) *
                 C141309) *
                C47709) *
               C141294 * C141485 -
           (((C94382 + C94383) * C141309 + (C94139 + C94140) * C188) * C47709 +
            ((C94381 + C94380) * C141309 + (C94134 + C94133) * C188) * C47708 +
            ((C94379 + C94378) * C141309 + (C94130 + C94129) * C188) * C47707) *
               C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C94102 * C108 + C93949 * C276 + C94103 * C1601 + C141384 * C1784) *
                C5964 +
            (C94102 * C189 + C93949 * C501 + C94103 * C1690 + C141384 * C2040) *
                C5865 +
            (C102614 + C102615) * C5965 + (C102932 + C102933) * C5866 +
            (C102618 + C102619) * C5966 + (C102934 + C102935) * C5867) *
               C141216 * C141294 * C2374 -
           ((C94103 * C10677 + C141384 * C11131 + C94102 * C6880 +
             C93949 * C7414) *
                C5867 +
            (C94103 * C10551 + C141384 * C10779 + C94102 * C6729 +
             C93949 * C7002) *
                C5966 +
            (C102935 + C102934) * C5866 + (C102619 + C102618) * C5965 +
            (C102933 + C102932) * C5865 + (C102615 + C102614) * C5964) *
               C141216 * C141294 * C141485) *
              C2376 +
          (((C94985 + C94984) * C5964 + (C95291 + C95290) * C5865 +
            (C102622 + C102623) * C5965 + (C102936 + C102937) * C5866 +
            (C94102 * C6728 + C93949 * C7001 + C94103 * C10552 +
             C141384 * C10780) *
                C5966 +
            (C94102 * C6879 + C93949 * C7413 + C94103 * C10678 +
             C141384 * C11132) *
                C5867) *
               C141216 * C141294 * C141485 -
           ((C102937 + C102936) * C5867 + (C102623 + C102622) * C5966 +
            (C95290 + C95291) * C5866 + (C94984 + C94985) * C5965 +
            (C94379 + C94378) * C5865 + (C94130 + C94129) * C5964) *
               C141216 * C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q));
    d2eezx[129] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C47713 * C108 + C47707 * C114 + C47715 * C109 +
                        C47708 * C115 + C47717 * C110 + C47709 * C116) *
                           C94102 +
                       (C47713 * C276 + C47707 * C579 + C47715 * C277 +
                        C47708 * C580 + C47717 * C278 + C47709 * C581) *
                           C93949 +
                       (C96107 + C96108 + C96109) * C94103 +
                       (C96443 + C96444 + C96445) * C141384) *
                          C141309 * C141294 * C2374 -
                      ((C52831 + C52832 + C52833) * C141384 +
                       (C52522 + C52523 + C52524) * C94103 +
                       (C49300 + C49299 + C49298) * C93949 +
                       (C48946 + C48945 + C48944) * C94102) *
                          C141309 * C141294 * C141485) *
                         C2376 +
                     (((C48950 + C48951 + C48952) * C94102 +
                       (C49301 + C49302 + C49303) * C93949 +
                       (C47713 * C3491 + C47707 * C3495 + C47715 * C3492 +
                        C47708 * C3496 + C47717 * C3493 + C47709 * C3497) *
                           C94103 +
                       (C47713 * C3647 + C47707 * C3935 + C47715 * C3648 +
                        C47708 * C3936 + C47717 * C3649 + C47709 * C3937) *
                           C141384) *
                          C141309 * C141294 * C141485 -
                      ((C96448 + C96447 + C96446) * C141384 +
                       (C96115 + C96114 + C96113) * C94103 +
                       (C47717 * C279 + C47709 * C582 + C47715 * C278 +
                        C47708 * C581 + C47713 * C277 + C47707 * C580) *
                           C93949 +
                       (C47717 * C111 + C47709 * C117 + C47715 * C110 +
                        C47708 * C116 + C47713 * C109 + C47707 * C115) *
                           C94102) *
                          C141309 * C141294 * C2374) *
                         C141483)) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((((C55527 * C108 + C141216 * C114) * C94102 +
                        (C55527 * C276 + C141216 * C579) * C93949 +
                        C62870 * C94103 + C63222 * C141384) *
                           C5865 +
                       (C103036 + C103037 + C103038 + C103039) * C5866 +
                       (C103040 + C103041 + C103042 + C103043) * C5867) *
                          C141294 * C2374 -
                      ((C58927 * C141384 + C58705 * C94103 + C56537 * C93949 +
                        C56303 * C94102) *
                           C5867 +
                       (C103043 + C103042 + C103041 + C103040) * C5866 +
                       (C103039 + C103038 + C103037 + C103036) * C5865) *
                          C141294 * C141485) *
                         C2376 +
                     (((C103044 + C103045 + C103046 + C103047) * C5865 +
                       (C103048 + C103049 + C103050 + C103051) * C5866 +
                       (C56309 * C94102 + C56540 * C93949 +
                        (C55527 * C10552 + C141216 * C10554) * C94103 +
                        (C55527 * C10780 + C141216 * C11238) * C141384) *
                           C5867) *
                          C141294 * C141485 -
                      ((C103051 + C103050 + C103049 + C103048) * C5867 +
                       (C103047 + C103046 + C103045 + C103044) * C5866 +
                       (C63224 * C141384 + C62874 * C94103 +
                        (C55527 * C277 + C141216 * C580) * C93949 +
                        (C55527 * C109 + C141216 * C115) * C94102) *
                           C5865) *
                          C141294 * C2374) *
                         C141483)) /
                       (p * q * std::sqrt(p + q));
    d2eezy[129] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141309 * C189) * C94102 +
             (C188 * C276 + C141309 * C635) * C93949 + C16043 * C94103 +
             C16798 * C141384) *
                C47707 +
            (C94535 + C94536 + C94537 + C94538) * C47708 + C94549 * C47709) *
               C141294 * C2374 -
           ((C95488 + C95489 + C95490 + C95491) * C47709 +
            (C95492 + C95493 + C95494 + C95495) * C47708 +
            (C19363 * C141384 + C18715 * C94103 +
             (C188 * C1006 + C141309 * C1419) * C93949 +
             (C188 * C823 + C141309 * C912) * C94102) *
                C47707) *
               C141294 * C141485) *
              C2376 +
          (((C95495 + C95494 + C95493 + C95492) * C47707 +
            (C95491 + C95490 + C95489 + C95488) * C47708 +
            (C933 * C94102 + C1431 * C93949 +
             (C188 * C3493 + C141309 * C3575) * C94103 +
             (C188 * C3649 + C141309 * C4007) * C141384) *
                C47709) *
               C141294 * C141485 -
           ((C94543 + C94544 + C94545 + C94546) * C47709 +
            (C94542 + C94541 + C94540 + C94539) * C47708 +
            (C94538 + C94537 + C94536 + C94535) * C47707) *
               C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5964 * C108 + C5865 * C189 + C5965 * C823 + C5866 * C912 +
             C5966 * C2960 + C5867 * C3026) *
                C94102 +
            (C5964 * C276 + C5865 * C635 + C5965 * C1006 + C5866 * C1419 +
             C5966 * C3084 + C5867 * C3362) *
                C93949 +
            (C103490 + C103491 + C103492) * C94103 +
            (C104117 + C104118 + C104119) * C141384) *
               C141216 * C141294 * C2374 -
           ((C5966 * C10779 + C5867 * C11349 + C5965 * C8128 + C5866 * C8684 +
             C5964 * C3646 + C5865 * C4004) *
                C141384 +
            (C5966 * C10551 + C5867 * C10677 + C5965 * C7887 + C5866 * C8006 +
             C5964 * C3490 + C5865 * C3572) *
                C94103 +
            (C5966 * C7002 + C5867 * C7655 + C5965 * C3084 + C5866 * C3362 +
             C5964 * C1006 + C5865 * C1419) *
                C93949 +
            (C5966 * C6729 + C5867 * C6880 + C5965 * C2960 + C5866 * C3026 +
             C5964 * C823 + C5865 * C912) *
                C94102) *
               C141216 * C141294 * C141485) *
              C2376 +
          (((C6903 + C6902 + C6901) * C94102 +
            (C7666 + C7665 + C7664) * C93949 +
            (C5964 * C3491 + C5865 * C3573 + C5965 * C7886 + C5866 * C8005 +
             C5966 * C10552 + C5867 * C10678) *
                C94103 +
            (C5964 * C3647 + C5865 * C4005 + C5965 * C8127 + C5866 * C8683 +
             C5966 * C10780 + C5867 * C11350) *
                C141384) *
               C141216 * C141294 * C141485 -
           ((C8693 + C8694 + C8695) * C141384 +
            (C8027 + C8028 + C8029) * C94103 +
            (C6537 + C6536 + C6535) * C93949 +
            (C5994 + C5993 + C5992) * C94102) *
               C141216 * C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q));
    d2eezz[129] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C94623 * C108 + C94626 + C94626 + C93949 * C714 + C94624 * C1601 +
             C94627 + C94627 + C141384 * C2283) *
                C141309 * C47707 +
            (C94660 + C94661) * C141309 * C47708 + C94667 * C47709) *
               C141294 * C2374 -
           ((C95618 + C95619) * C141309 * C47709 +
            (C95620 + C95621) * C141309 * C47708 +
            (C94624 * C3490 + C95606 + C95606 + C141384 * C4074 +
             C94623 * C823 + C95607 + C95607 + C93949 * C1505) *
                C141309 * C47707) *
               C141294 * C141485) *
              C2376 +
          (((C95621 + C95620) * C141309 * C47707 +
            (C95619 + C95618) * C141309 * C47708 +
            (C94623 * C820 + C95608 + C95608 + C93949 * C1502 + C94624 * C3493 +
             C95609 + C95609 + C141384 * C4077) *
                C141309 * C47709) *
               C141294 * C141485 -
           ((C94664 + C94665) * C141309 * C47709 +
            (C94663 + C94662) * C141309 * C47708 +
            (C94661 + C94660) * C141309 * C47707) *
               C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C94623 * C108 + C94626 + C94626 + C93949 * C714 + C94624 * C1601 +
             C94627 + C94627 + C141384 * C2283) *
                C5865 +
            (C103276 + C103277) * C5866 + (C103278 + C103279) * C5867) *
               C141216 * C141294 * C2374 -
           ((C94624 * C10551 + C103256 + C103256 + C141384 * C11449 +
             C94623 * C6729 + C103257 + C103257 + C93949 * C7765) *
                C5867 +
            (C103279 + C103278) * C5866 + (C103277 + C103276) * C5865) *
               C141216 * C141294 * C141485) *
              C2376 +
          (((C95621 + C95620) * C5865 + (C103280 + C103281) * C5866 +
            (C94623 * C6728 + C103262 + C103262 + C93949 * C7764 +
             C94624 * C10552 + C103263 + C103263 + C141384 * C11450) *
                C5867) *
               C141216 * C141294 * C141485 -
           ((C103281 + C103280) * C5867 + (C95620 + C95621) * C5866 +
            (C94661 + C94660) * C5865) *
               C141216 * C141294 * C2374) *
              C141483)) /
            (p * q * std::sqrt(p + q));
    d2eexx[130] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C47712 * C108 + C47719 + C47719 + C47707 * C120 + C47714 * C109 +
            C47720 + C47720 + C47708 * C121 + C47716 * C110 + C47721 + C47721 +
            C47709 * C122) *
               C93949 +
           (C95747 + C95748 + C95749) * C141384) *
              C141309 * C141294 * C2956 -
          ((C52204 + C52205 + C52206) * C141384 +
           (C48586 + C48585 + C48584) * C93949) *
              C141309 * C141294 * C2957 +
          ((C51459 + C51458 + C51457) * C93949 +
           (C47712 * C7887 + C52195 + C52195 + C47707 * C7893 + C47714 * C7886 +
            C52196 + C52196 + C47708 * C7892 + C47716 * C7888 + C52197 +
            C52197 + C47709 * C7894) *
               C141384) *
              C141309 * C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C55526 * C108 + C55529 + C55529 + C141216 * C120) * C93949 +
            C62512 * C141384) *
               C5865 +
           (C102386 + C102387) * C5866 + C105178 * C5867) *
              C141294 * C2956 -
          ((C105179 + C105180) * C5867 + (C102389 + C102388) * C5866 +
           (C102387 + C102386) * C5865) *
              C141294 * C2957 +
          (C105178 * C5865 + (C105180 + C105179) * C5866 +
           (C57941 * C93949 +
            (C55526 * C58454 + C58464 + C58464 + C141216 * C58456) * C141384) *
               C5867) *
              C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eexy[130] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141309 * C189) * C47713 +
            (C188 * C114 + C141309 * C195) * C47707 + C218 * C47715 +
            C219 * C47708 + C220 * C47717 + C221 * C47709) *
               C93949 +
           (C95851 + C95852 + C95853 + C95854 + C95855 + C95856) * C141384) *
              C141294 * C2956 -
          ((C30841 * C47709 + C30842 * C47717 + C14992 * C47708 +
            C14993 * C47715 + C18716 * C47707 + C18715 * C47713) *
               C141384 +
           (C934 * C47709 + C935 * C47717 + C936 * C47708 + C937 * C47715 +
            (C188 * C828 + C141309 * C917) * C47707 +
            (C188 * C823 + C141309 * C912) * C47713) *
               C93949) *
              C141294 * C2957 +
          (((C188 * C2960 + C141309 * C3026) * C47713 +
            (C188 * C2964 + C141309 * C3030) * C47707 +
            (C188 * C2961 + C141309 * C3027) * C47715 +
            (C188 * C2965 + C141309 * C3031) * C47708 +
            (C188 * C2962 + C141309 * C3028) * C47717 +
            (C188 * C2966 + C141309 * C3032) * C47709) *
               C93949 +
           ((C188 * C7887 + C141309 * C8006) * C47713 +
            (C188 * C7890 + C141309 * C8009) * C47707 +
            (C188 * C7886 + C141309 * C8005) * C47715 +
            (C188 * C7889 + C141309 * C8008) * C47708 +
            (C188 * C7888 + C141309 * C8007) * C47717 +
            (C188 * C7891 + C141309 * C8010) * C47709) *
               C141384) *
              C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5964 * C108 + C5865 * C189 + C5965 * C823 + C5866 * C912 +
             C5966 * C2960 + C5867 * C3026) *
                C55527 +
            (C5964 * C114 + C5865 * C195 + C5965 * C828 + C5866 * C917 +
             C5966 * C2964 + C5867 * C3030) *
                C141216) *
               C93949 +
           ((C103490 + C103491 + C103492) * C55527 +
            (C103493 + C103494 + C103495) * C141216) *
               C141384) *
              C141294 * C2956 -
          (((C5966 * C10553 + C5867 * C10679 + C5965 * C7890 + C5866 * C8009 +
             C5964 * C3494 + C5865 * C3576) *
                C141216 +
            (C5966 * C10551 + C5867 * C10677 + C5965 * C7887 + C5866 * C8006 +
             C5964 * C3490 + C5865 * C3572) *
                C55527) *
               C141384 +
           ((C5966 * C6732 + C5867 * C6883 + C5965 * C2964 + C5866 * C3030 +
             C5964 * C828 + C5865 * C917) *
                C141216 +
            (C5966 * C6729 + C5867 * C6880 + C5965 * C2960 + C5866 * C3026 +
             C5964 * C823 + C5865 * C912) *
                C55527) *
               C93949) *
              C141294 * C2957 +
          (((C5964 * C2960 + C5865 * C3026 + C5965 * C6729 + C5866 * C6880 +
             C5966 * C9768 + C5867 * C9862) *
                C55527 +
            (C5964 * C2964 + C5865 * C3030 + C5965 * C6732 + C5866 * C6883 +
             C5966 * C9770 + C5867 * C9864) *
                C141216) *
               C93949 +
           ((C5964 * C7887 + C5865 * C8006 + C5965 * C10551 + C5866 * C10677 +
             C5966 * C58454 + C5867 * C58542) *
                C55527 +
            (C5964 * C7890 + C5865 * C8009 + C5965 * C10553 + C5866 * C10679 +
             C5966 * C58455 + C5867 * C58543) *
                C141216) *
               C141384) *
              C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eexz[130] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C94102 * C108 + C93949 * C276 + C94103 * C1601 + C141384 * C1784) *
               C47713 +
           (C94102 * C114 + C93949 * C282 + C94103 * C1606 + C141384 * C1789) *
               C47707 +
           (C94129 + C94130) * C47715 + (C94131 + C94132) * C47708 +
           C94141 * C47717 + C94142 * C47709) *
              C141309 * C141294 * C2956 -
          ((C94978 + C94979) * C47709 + (C94980 + C94981) * C47717 +
           (C94982 + C94983) * C47708 + (C94984 + C94985) * C47715 +
           (C94103 * C3494 + C141384 * C3650 + C94102 * C828 + C93949 * C1011) *
               C47707 +
           (C94103 * C3490 + C141384 * C3646 + C94102 * C823 + C93949 * C1006) *
               C47713) *
              C141309 * C141294 * C2957 +
          ((C94102 * C2960 + C93949 * C3084 + C94103 * C7887 +
            C141384 * C8128) *
               C47713 +
           (C94102 * C2964 + C93949 * C3088 + C94103 * C7890 +
            C141384 * C8131) *
               C47707 +
           (C94102 * C2961 + C93949 * C3085 + C94103 * C7886 +
            C141384 * C8127) *
               C47715 +
           (C94102 * C2965 + C93949 * C3089 + C94103 * C7889 +
            C141384 * C8130) *
               C47708 +
           (C94102 * C2962 + C93949 * C3086 + C94103 * C7888 +
            C141384 * C8129) *
               C47717 +
           (C94102 * C2966 + C93949 * C3090 + C94103 * C7891 +
            C141384 * C8132) *
               C47709) *
              C141309 * C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C94102 * C108 + C93949 * C276 + C94103 * C1601 + C141384 * C1784) *
                C55527 +
            (C94102 * C114 + C93949 * C282 + C94103 * C1606 + C141384 * C1789) *
                C141216) *
               C5865 +
           ((C102614 + C102615) * C55527 + (C102616 + C102617) * C141216) *
               C5866 +
           C105345 * C5867) *
              C141294 * C2956 -
          (((C105341 + C105342) * C141216 + (C105343 + C105344) * C55527) *
               C5867 +
           ((C102621 + C102620) * C141216 + (C102619 + C102618) * C55527) *
               C5866 +
           ((C102617 + C102616) * C141216 + (C102615 + C102614) * C55527) *
               C5865) *
              C141294 * C2957 +
          (C105345 * C5865 +
           ((C105344 + C105343) * C55527 + (C105342 + C105341) * C141216) *
               C5866 +
           ((C94102 * C9768 + C93949 * C9940 + C94103 * C58454 +
             C141384 * C58610) *
                C55527 +
            (C94102 * C9770 + C93949 * C9942 + C94103 * C58455 +
             C141384 * C58611) *
                C141216) *
               C5867) *
              C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eeyx[130] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47713 * C108 + C47707 * C114 + C47715 * C109 + C47708 * C115 +
             C47717 * C110 + C47709 * C116) *
                C188 +
            (C47713 * C189 + C47707 * C362 + C47715 * C190 + C47708 * C363 +
             C47717 * C191 + C47709 * C364) *
                C141309) *
               C93949 +
           ((C96107 + C96108 + C96109) * C188 +
            (C96110 + C96111 + C96112) * C141309) *
               C141384) *
              C141294 * C2956 -
          (((C52519 + C52520 + C52521) * C141309 +
            (C52522 + C52523 + C52524) * C188) *
               C141384 +
           ((C48949 + C48948 + C48947) * C141309 +
            (C48946 + C48945 + C48944) * C188) *
               C93949) *
              C141294 * C2957 +
          (((C51705 + C51704 + C51703) * C188 +
            (C51702 + C51701 + C51700) * C141309) *
               C93949 +
           ((C47713 * C7887 + C47707 * C7890 + C47715 * C7886 + C47708 * C7889 +
             C47717 * C7888 + C47709 * C7891) *
                C188 +
            (C47713 * C8006 + C47707 * C8244 + C47715 * C8005 + C47708 * C8243 +
             C47717 * C8007 + C47709 * C8245) *
                C141309) *
               C141384) *
              C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C55527 * C108 + C141216 * C114) * C5964 +
            (C55527 * C189 + C141216 * C362) * C5865 + C56299 * C5965 +
            C56300 * C5866 + C56301 * C5966 + C56302 * C5867) *
               C93949 +
           (C103692 + C103693 + C103694 + C103695 + C103696 + C103697) *
               C141384) *
              C141294 * C2956 -
          ((C58704 * C5867 + C58705 * C5966 + C58706 * C5866 + C58707 * C5965 +
            C58708 * C5865 + C58709 * C5964) *
               C141384 +
           (C56304 * C5867 + C56303 * C5966 + C56302 * C5866 + C56301 * C5965 +
            C56300 * C5865 + C56299 * C5964) *
               C93949) *
              C141294 * C2957 +
          ((C56301 * C5964 + C56302 * C5865 + C56303 * C5965 + C56304 * C5866 +
            C58113 * C5966 + C58112 * C5867) *
               C93949 +
           (C58707 * C5964 + C58706 * C5865 + C58705 * C5965 + C58704 * C5866 +
            (C55527 * C58454 + C141216 * C58455) * C5966 +
            (C55527 * C58542 + C141216 * C58690) * C5867) *
               C141384) *
              C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eeyy[130] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C418 * C108 + C426 + C426 + C141309 * C419) * C47707 +
            C448 * C47708 + C449 * C47709) *
               C93949 +
           (C96217 + C96218 + C96219) * C141384) *
              C141294 * C2956 -
          ((C31165 * C47709 + C15322 * C47708 + C19049 * C47707) * C141384 +
           (C1192 * C47709 + C1193 * C47708 +
            (C418 * C823 + C1183 + C1183 + C141309 * C1171) * C47707) *
               C93949) *
              C141294 * C2957 +
          (((C418 * C2960 + C3201 + C3201 + C141309 * C3196) * C47707 +
            (C418 * C2961 + C3202 + C3202 + C141309 * C3197) * C47708 +
            (C418 * C2962 + C3203 + C3203 + C141309 * C3198) * C47709) *
               C93949 +
           ((C418 * C7887 + C18179 + C18179 + C141309 * C8345) * C47707 +
            (C418 * C7886 + C18180 + C18180 + C141309 * C8344) * C47708 +
            (C418 * C7888 + C33920 + C33920 + C141309 * C8346) * C47709) *
               C141384) *
              C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C6237 * C108 + C6241 + C6241 + C5865 * C419 + C6238 * C823 + C6242 +
            C6242 + C5866 * C1171 + C6239 * C2960 + C6243 + C6243 +
            C5867 * C3196) *
               C141216 * C93949 +
           (C103814 + C103815 + C103816) * C141216 * C141384) *
              C141294 * C2956 -
          ((C6239 * C10551 + C11030 + C11030 + C5867 * C11025 + C6238 * C7887 +
            C11029 + C11029 + C5866 * C8345 + C6237 * C3490 + C11028 + C11028 +
            C5865 * C3790) *
               C141216 * C141384 +
           (C6239 * C6729 + C7301 + C7301 + C5867 * C7289 + C6238 * C2960 +
            C7302 + C7302 + C5866 * C3196 + C6237 * C823 + C7303 + C7303 +
            C5865 * C1171) *
               C141216 * C93949) *
              C141294 * C2957 +
          ((C6237 * C2960 + C10124 + C10124 + C5865 * C3196 + C6238 * C6729 +
            C10125 + C10125 + C5866 * C7289 + C6239 * C9768 + C10126 + C10126 +
            C5867 * C10121) *
               C141216 * C93949 +
           (C6237 * C7887 + C105494 + C105494 + C5865 * C8345 + C6238 * C10551 +
            C105495 + C105495 + C5866 * C11025 + C6239 * C58454 + C105496 +
            C105496 + C5867 * C58775) *
               C141216 * C141384) *
              C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eeyz[130] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C94102 * C108 + C93949 * C276 + C94103 * C1601 + C141384 * C1784) *
                C188 +
            (C94102 * C189 + C93949 * C501 + C94103 * C1690 + C141384 * C2040) *
                C141309) *
               C47707 +
           ((C94129 + C94130) * C188 + (C94378 + C94379) * C141309) * C47708 +
           C94386 * C47709) *
              C141294 * C2956 -
          (((C95288 + C95289) * C141309 + (C94980 + C94981) * C188) * C47709 +
           ((C95290 + C95291) * C141309 + (C94984 + C94985) * C188) * C47708 +
           ((C94103 * C3572 + C141384 * C3864 + C94102 * C912 +
             C93949 * C1262) *
                C141309 +
            (C94103 * C3490 + C141384 * C3646 + C94102 * C823 +
             C93949 * C1006) *
                C188) *
               C47707) *
              C141294 * C2957 +
          (((C94102 * C2960 + C93949 * C3084 + C94103 * C7887 +
             C141384 * C8128) *
                C188 +
            (C94102 * C3026 + C93949 * C3254 + C94103 * C8006 +
             C141384 * C8470) *
                C141309) *
               C47707 +
           ((C94102 * C2961 + C93949 * C3085 + C94103 * C7886 +
             C141384 * C8127) *
                C188 +
            (C94102 * C3027 + C93949 * C3255 + C94103 * C8005 +
             C141384 * C8469) *
                C141309) *
               C47708 +
           ((C94102 * C2962 + C93949 * C3086 + C94103 * C7888 +
             C141384 * C8129) *
                C188 +
            (C94102 * C3028 + C93949 * C3256 + C94103 * C8007 +
             C141384 * C8471) *
                C141309) *
               C47709) *
              C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C94102 * C108 + C93949 * C276 + C94103 * C1601 + C141384 * C1784) *
               C5964 +
           (C94102 * C189 + C93949 * C501 + C94103 * C1690 + C141384 * C2040) *
               C5865 +
           (C102614 + C102615) * C5965 + (C102932 + C102933) * C5866 +
           C105329 * C5966 + C105571 * C5867) *
              C141216 * C141294 * C2956 -
          ((C105576 + C105577) * C5867 + (C105343 + C105344) * C5966 +
           (C102935 + C102934) * C5866 + (C102619 + C102618) * C5965 +
           (C102933 + C102932) * C5865 + (C102615 + C102614) * C5964) *
              C141216 * C141294 * C2957 +
          (C105329 * C5964 + C105571 * C5865 + (C105344 + C105343) * C5965 +
           (C105577 + C105576) * C5866 +
           (C94102 * C9768 + C93949 * C9940 + C94103 * C58454 +
            C141384 * C58610) *
               C5966 +
           (C94102 * C9862 + C93949 * C10203 + C94103 * C58542 +
            C141384 * C58846) *
               C5867) *
              C141216 * C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eezx[130] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C47713 * C108 + C47707 * C114 + C47715 * C109 + C47708 * C115 +
            C47717 * C110 + C47709 * C116) *
               C94102 +
           (C47713 * C276 + C47707 * C579 + C47715 * C277 + C47708 * C580 +
            C47717 * C278 + C47709 * C581) *
               C93949 +
           (C96107 + C96108 + C96109) * C94103 +
           (C96443 + C96444 + C96445) * C141384) *
              C141309 * C141294 * C2956 -
          ((C52831 + C52832 + C52833) * C141384 +
           (C52522 + C52523 + C52524) * C94103 +
           (C49300 + C49299 + C49298) * C93949 +
           (C48946 + C48945 + C48944) * C94102) *
              C141309 * C141294 * C2957 +
          ((C51705 + C51704 + C51703) * C94102 +
           (C51942 + C51941 + C51940) * C93949 +
           (C47713 * C7887 + C47707 * C7890 + C47715 * C7886 + C47708 * C7889 +
            C47717 * C7888 + C47709 * C7891) *
               C94103 +
           (C47713 * C8128 + C47707 * C8583 + C47715 * C8127 + C47708 * C8582 +
            C47717 * C8129 + C47709 * C8584) *
               C141384) *
              C141309 * C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C55527 * C108 + C141216 * C114) * C94102 +
            (C55527 * C276 + C141216 * C579) * C93949 + C62870 * C94103 +
            C63222 * C141384) *
               C5865 +
           (C103036 + C103037 + C103038 + C103039) * C5866 + C105658 * C5867) *
              C141294 * C2956 -
          ((C105653 + C105654 + C105655 + C105656) * C5867 +
           (C103043 + C103042 + C103041 + C103040) * C5866 +
           (C103039 + C103038 + C103037 + C103036) * C5865) *
              C141294 * C2957 +
          (C105658 * C5865 + (C105656 + C105655 + C105654 + C105653) * C5866 +
           (C58113 * C94102 + C58279 * C93949 +
            (C55527 * C58454 + C141216 * C58455) * C94103 +
            (C55527 * C58610 + C141216 * C58916) * C141384) *
               C5867) *
              C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eezy[130] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141309 * C189) * C94102 +
            (C188 * C276 + C141309 * C635) * C93949 + C16043 * C94103 +
            C16798 * C141384) *
               C47707 +
           (C94535 + C94536 + C94537 + C94538) * C47708 + C94549 * C47709) *
              C141294 * C2956 -
          ((C95488 + C95489 + C95490 + C95491) * C47709 +
           (C95492 + C95493 + C95494 + C95495) * C47708 +
           (C19363 * C141384 + C18715 * C94103 +
            (C188 * C1006 + C141309 * C1419) * C93949 +
            (C188 * C823 + C141309 * C912) * C94102) *
               C47707) *
              C141294 * C2957 +
          (((C188 * C2960 + C141309 * C3026) * C94102 +
            (C188 * C3084 + C141309 * C3362) * C93949 +
            (C188 * C7887 + C141309 * C8006) * C94103 +
            (C188 * C8128 + C141309 * C8684) * C141384) *
               C47707 +
           ((C188 * C2961 + C141309 * C3027) * C94102 +
            (C188 * C3085 + C141309 * C3363) * C93949 +
            (C188 * C7886 + C141309 * C8005) * C94103 +
            (C188 * C8127 + C141309 * C8683) * C141384) *
               C47708 +
           ((C188 * C2962 + C141309 * C3028) * C94102 +
            (C188 * C3086 + C141309 * C3364) * C93949 +
            (C188 * C7888 + C141309 * C8007) * C94103 +
            (C188 * C8129 + C141309 * C8685) * C141384) *
               C47709) *
              C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C5964 * C108 + C5865 * C189 + C5965 * C823 + C5866 * C912 +
            C5966 * C2960 + C5867 * C3026) *
               C94102 +
           (C5964 * C276 + C5865 * C635 + C5965 * C1006 + C5866 * C1419 +
            C5966 * C3084 + C5867 * C3362) *
               C93949 +
           (C103490 + C103491 + C103492) * C94103 +
           (C104117 + C104118 + C104119) * C141384) *
              C141216 * C141294 * C2956 -
          ((C5966 * C10779 + C5867 * C11349 + C5965 * C8128 + C5866 * C8684 +
            C5964 * C3646 + C5865 * C4004) *
               C141384 +
           (C5966 * C10551 + C5867 * C10677 + C5965 * C7887 + C5866 * C8006 +
            C5964 * C3490 + C5865 * C3572) *
               C94103 +
           (C5966 * C7002 + C5867 * C7655 + C5965 * C3084 + C5866 * C3362 +
            C5964 * C1006 + C5865 * C1419) *
               C93949 +
           (C5966 * C6729 + C5867 * C6880 + C5965 * C2960 + C5866 * C3026 +
            C5964 * C823 + C5865 * C912) *
               C94102) *
              C141216 * C141294 * C2957 +
          ((C5964 * C2960 + C5865 * C3026 + C5965 * C6729 + C5866 * C6880 +
            C5966 * C9768 + C5867 * C9862) *
               C94102 +
           (C5964 * C3084 + C5865 * C3362 + C5965 * C7002 + C5866 * C7655 +
            C5966 * C9940 + C5867 * C10368) *
               C93949 +
           (C5964 * C7887 + C5865 * C8006 + C5965 * C10551 + C5866 * C10677 +
            C5966 * C58454 + C5867 * C58542) *
               C94103 +
           (C5964 * C8128 + C5865 * C8684 + C5965 * C10779 + C5866 * C11349 +
            C5966 * C58610 + C5867 * C58998) *
               C141384) *
              C141216 * C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eezz[130] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C94623 * C108 + C94626 + C94626 + C93949 * C714 + C94624 * C1601 +
            C94627 + C94627 + C141384 * C2283) *
               C141309 * C47707 +
           (C94660 + C94661) * C141309 * C47708 + C94667 * C47709) *
              C141294 * C2956 -
          ((C95618 + C95619) * C141309 * C47709 +
           (C95620 + C95621) * C141309 * C47708 +
           (C94624 * C3490 + C95606 + C95606 + C141384 * C4074 + C94623 * C823 +
            C95607 + C95607 + C93949 * C1505) *
               C141309 * C47707) *
              C141294 * C2957 +
          ((C94623 * C2960 + C98229 + C98229 + C93949 * C3416 + C94624 * C7887 +
            C98230 + C98230 + C141384 * C8794) *
               C141309 * C47707 +
           (C94623 * C2961 + C98231 + C98231 + C93949 * C3417 + C94624 * C7886 +
            C98232 + C98232 + C141384 * C8793) *
               C141309 * C47708 +
           (C94623 * C2962 + C98233 + C98233 + C93949 * C3418 + C94624 * C7888 +
            C98234 + C98234 + C141384 * C8795) *
               C141309 * C47709) *
              C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C94623 * C108 + C94626 + C94626 + C93949 * C714 + C94624 * C1601 +
            C94627 + C94627 + C141384 * C2283) *
               C5865 +
           (C103276 + C103277) * C5866 + C105807 * C5867) *
              C141216 * C141294 * C2956 -
          ((C105818 + C105819) * C5867 + (C103279 + C103278) * C5866 +
           (C103277 + C103276) * C5865) *
              C141216 * C141294 * C2957 +
          (C105807 * C5865 + (C105819 + C105818) * C5866 +
           (C94623 * C9768 + C105812 + C105812 + C93949 * C10444 +
            C94624 * C58454 + C105813 + C105813 + C141384 * C59065) *
               C5867) *
              C141216 * C141294 * C2958) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eexx[131] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47712 * C108 + C47719 + C47719 + C47707 * C120 + C47714 * C109 +
             C47720 + C47720 + C47708 * C121 + C47716 * C110 + C47721 + C47721 +
             C47709 * C122) *
                C93949 +
            (C95747 + C95748 + C95749) * C141384) *
               C141309 * C1596 -
           ((C47716 * C5327 + C54870 + C54870 + C47709 * C5335 +
             C47714 * C5326 + C54869 + C54869 + C47708 * C5334 +
             C47712 * C5325 + C54868 + C54868 + C47707 * C5333) *
                C141384 +
            (C95749 + C95748 + C95747) * C93949) *
               C141309 * C141487) *
              C2374 +
          (((C52206 + C52205 + C52204) * C93949 +
            (C47712 * C13301 + C54871 + C54871 + C47707 * C13309 +
             C47714 * C13302 + C54872 + C54872 + C47708 * C13310 +
             C47716 * C14876 + C54873 + C54873 + C47709 * C14878) *
                C141384) *
               C141309 * C141487 -
           ((C52204 + C52205 + C52206) * C141384 +
            (C48586 + C48585 + C48584) * C93949) *
               C141309 * C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C55526 * C108 + C55529 + C55529 + C141216 * C120) * C93949 +
             C62512 * C141384) *
                C5865 +
            (C102386 + C102387) * C5866 + C105178 * C5867) *
               C1596 -
           ((C105918 + C105919) * C5867 + (C105920 + C105921) * C5866 +
            (C62513 * C141384 + C62512 * C93949) * C5865) *
               C141487) *
              C2374 +
          (((C105921 + C105920) * C5865 + (C105919 + C105918) * C5866 +
            (C58471 * C93949 +
             (C55526 * C60310 + C60317 + C60317 + C141216 * C60312) * C141384) *
                C5867) *
               C141487 -
           ((C105179 + C105180) * C5867 + (C102389 + C102388) * C5866 +
            (C102387 + C102386) * C5865) *
               C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eexy[131] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141309 * C189) * C47713 +
             (C188 * C114 + C141309 * C195) * C47707 + C218 * C47715 +
             C219 * C47708 + C220 * C47717 + C221 * C47709) *
                C93949 +
            (C95851 + C95852 + C95853 + C95854 + C95855 + C95856) * C141384) *
               C1596 -
           ((C14129 * C47709 + C14130 * C47717 + C14128 * C47708 +
             C14127 * C47715 + C16046 * C47707 + C16045 * C47713) *
                C141384 +
            (C95856 + C95855 + C95854 + C95853 + C95852 + C95851) * C93949) *
               C141487) *
              C2374 +
          (((C98431 + C98432 + C98433 + C98434 + C98435 + C98436) * C93949 +
            (C18717 * C47713 + C18718 * C47707 + C14991 * C47715 +
             C14990 * C47708 + (C188 * C14876 + C141309 * C14979) * C47717 +
             (C188 * C14877 + C141309 * C14980) * C47709) *
                C141384) *
               C141487 -
           ((C98436 + C98435 + C98434 + C98433 + C98432 + C98431) * C141384 +
            (C934 * C47709 + C935 * C47717 + C936 * C47708 + C937 * C47715 +
             (C188 * C828 + C141309 * C917) * C47707 +
             (C188 * C823 + C141309 * C912) * C47713) *
                C93949) *
               C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5964 * C108 + C5865 * C189 + C5965 * C823 + C5866 * C912 +
              C5966 * C2960 + C5867 * C3026) *
                 C55527 +
             (C5964 * C114 + C5865 * C195 + C5965 * C828 + C5866 * C917 +
              C5966 * C2964 + C5867 * C3030) *
                 C141216) *
                C93949 +
            ((C103490 + C103491 + C103492) * C55527 +
             (C103493 + C103494 + C103495) * C141216) *
                C141384) *
               C1596 -
           (((C5966 * C13307 + C5867 * C13398 + C5965 * C13305 +
              C5866 * C13397 + C5964 * C5329 + C5865 * C5395) *
                 C141216 +
             (C5966 * C13303 + C5867 * C13394 + C5965 * C13301 +
              C5866 * C13393 + C5964 * C5325 + C5865 * C5391) *
                 C55527) *
                C141384 +
            ((C103495 + C103494 + C103493) * C141216 +
             (C103492 + C103491 + C103490) * C55527) *
                C93949) *
               C141487) *
              C2374 +
          ((((C106032 + C106033 + C106034) * C55527 +
             (C106035 + C106036 + C106037) * C141216) *
                C93949 +
            ((C5964 * C13301 + C5865 * C13393 + C5965 * C13303 +
              C5866 * C13394 + C5966 * C60310 + C5867 * C60367) *
                 C55527 +
             (C5964 * C13305 + C5865 * C13397 + C5965 * C13307 +
              C5866 * C13398 + C5966 * C60311 + C5867 * C60368) *
                 C141216) *
                C141384) *
               C141487 -
           (((C106037 + C106036 + C106035) * C141216 +
             (C106034 + C106033 + C106032) * C55527) *
                C141384 +
            ((C5966 * C6732 + C5867 * C6883 + C5965 * C2964 + C5866 * C3030 +
              C5964 * C828 + C5865 * C917) *
                 C141216 +
             (C5966 * C6729 + C5867 * C6880 + C5965 * C2960 + C5866 * C3026 +
              C5964 * C823 + C5865 * C912) *
                 C55527) *
                C93949) *
               C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eexz[131] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C94102 * C108 + C93949 * C276 + C94103 * C1601 + C141384 * C1784) *
                C47713 +
            (C94102 * C114 + C93949 * C282 + C94103 * C1606 + C141384 * C1789) *
                C47707 +
            (C94129 + C94130) * C47715 + (C94131 + C94132) * C47708 +
            C94141 * C47717 + C94142 * C47709) *
               C141309 * C1596 -
           ((C95977 + C95978) * C47709 + (C95979 + C95980) * C47717 +
            (C95981 + C95982) * C47708 + (C95983 + C95984) * C47715 +
            (C94103 * C5329 + C141384 * C5453 + C94102 * C1606 +
             C93949 * C1789) *
                C47707 +
            (C94103 * C5325 + C141384 * C5449 + C94102 * C1601 +
             C93949 * C1784) *
                C47713) *
               C141309 * C141487) *
              C2374 +
          (((C94102 * C3490 + C93949 * C3646 + C94103 * C13301 +
             C141384 * C13475) *
                C47713 +
            (C94102 * C3494 + C93949 * C3650 + C94103 * C13305 +
             C141384 * C13479) *
                C47707 +
            (C94102 * C3491 + C93949 * C3647 + C94103 * C13302 +
             C141384 * C13476) *
                C47715 +
            (C94102 * C3495 + C93949 * C3651 + C94103 * C13306 +
             C141384 * C13480) *
                C47708 +
            (C94102 * C3492 + C93949 * C3648 + C94103 * C14876 +
             C141384 * C15091) *
                C47717 +
            (C94102 * C3496 + C93949 * C3652 + C94103 * C14877 +
             C141384 * C15092) *
                C47709) *
               C141309 * C141487 -
           ((C94978 + C94979) * C47709 + (C94980 + C94981) * C47717 +
            (C94982 + C94983) * C47708 + (C94984 + C94985) * C47715 +
            (C94103 * C3494 + C141384 * C3650 + C94102 * C828 +
             C93949 * C1011) *
                C47707 +
            (C94103 * C3490 + C141384 * C3646 + C94102 * C823 +
             C93949 * C1006) *
                C47713) *
               C141309 * C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C94102 * C108 + C93949 * C276 + C94103 * C1601 +
              C141384 * C1784) *
                 C55527 +
             (C94102 * C114 + C93949 * C282 + C94103 * C1606 +
              C141384 * C1789) *
                 C141216) *
                C5865 +
            ((C102614 + C102615) * C55527 + (C102616 + C102617) * C141216) *
                C5866 +
            C105345 * C5867) *
               C1596 -
           (((C106152 + C106153) * C141216 + (C106154 + C106155) * C55527) *
                C5867 +
            ((C106156 + C106157) * C141216 + (C106158 + C106159) * C55527) *
                C5866 +
            ((C94103 * C5329 + C141384 * C5453 + C94102 * C1606 +
              C93949 * C1789) *
                 C141216 +
             (C94103 * C5325 + C141384 * C5449 + C94102 * C1601 +
              C93949 * C1784) *
                 C55527) *
                C5865) *
               C141487) *
              C2374 +
          ((((C106159 + C106158) * C55527 + (C106157 + C106156) * C141216) *
                C5865 +
            ((C106155 + C106154) * C55527 + (C106153 + C106152) * C141216) *
                C5866 +
            ((C94102 * C10551 + C93949 * C10779 + C94103 * C60310 +
              C141384 * C60419) *
                 C55527 +
             (C94102 * C10553 + C93949 * C10781 + C94103 * C60311 +
              C141384 * C60420) *
                 C141216) *
                C5867) *
               C141487 -
           (((C105341 + C105342) * C141216 + (C105343 + C105344) * C55527) *
                C5867 +
            ((C102621 + C102620) * C141216 + (C102619 + C102618) * C55527) *
                C5866 +
            ((C102617 + C102616) * C141216 + (C102615 + C102614) * C55527) *
                C5865) *
               C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eeyx[131] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47713 * C108 + C47707 * C114 + C47715 * C109 + C47708 * C115 +
              C47717 * C110 + C47709 * C116) *
                 C188 +
             (C47713 * C189 + C47707 * C362 + C47715 * C190 + C47708 * C363 +
              C47717 * C191 + C47709 * C364) *
                 C141309) *
                C93949 +
            ((C96107 + C96108 + C96109) * C188 +
             (C96110 + C96111 + C96112) * C141309) *
                C141384) *
               C1596 -
           (((C47717 * C5393 + C47709 * C5509 + C47715 * C5392 +
              C47708 * C5508 + C47713 * C5391 + C47707 * C5507) *
                 C141309 +
             (C47717 * C5327 + C47709 * C5331 + C47715 * C5326 +
              C47708 * C5330 + C47713 * C5325 + C47707 * C5329) *
                 C188) *
                C141384 +
            ((C96112 + C96111 + C96110) * C141309 +
             (C96109 + C96108 + C96107) * C188) *
                C93949) *
               C141487) *
              C2374 +
          ((((C52524 + C52523 + C52522) * C188 +
             (C52521 + C52520 + C52519) * C141309) *
                C93949 +
            ((C47713 * C13301 + C47707 * C13305 + C47715 * C13302 +
              C47708 * C13306 + C47717 * C14876 + C47709 * C14877) *
                 C188 +
             (C47713 * C13393 + C47707 * C13557 + C47715 * C13395 +
              C47708 * C13558 + C47717 * C14979 + C47709 * C15209) *
                 C141309) *
                C141384) *
               C141487 -
           (((C52519 + C52520 + C52521) * C141309 +
             (C52522 + C52523 + C52524) * C188) *
                C141384 +
            ((C48949 + C48948 + C48947) * C141309 +
             (C48946 + C48945 + C48944) * C188) *
                C93949) *
               C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C55527 * C108 + C141216 * C114) * C5964 +
             (C55527 * C189 + C141216 * C362) * C5865 + C56299 * C5965 +
             C56300 * C5866 + C56301 * C5966 + C56302 * C5867) *
                C93949 +
            (C103692 + C103693 + C103694 + C103695 + C103696 + C103697) *
                C141384) *
               C1596 -
           ((C64648 * C5867 + C64649 * C5966 + C61850 * C5866 + C61849 * C5965 +
             C62873 * C5865 + C62872 * C5964) *
                C141384 +
            (C103697 + C103696 + C103695 + C103694 + C103693 + C103692) *
                C93949) *
               C141487) *
              C2374 +
          (((C106258 + C106259 + C106260 + C106261 + C106262 + C106263) *
                C93949 +
            (C61849 * C5964 + C61850 * C5865 + C64649 * C5965 + C64648 * C5866 +
             (C55527 * C60310 + C141216 * C60311) * C5966 +
             (C55527 * C60367 + C141216 * C60471) * C5867) *
                C141384) *
               C141487 -
           ((C106263 + C106262 + C106261 + C106260 + C106259 + C106258) *
                C141384 +
            (C56304 * C5867 + C56303 * C5966 + C56302 * C5866 + C56301 * C5965 +
             C56300 * C5865 + C56299 * C5964) *
                C93949) *
               C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eeyy[131] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C418 * C108 + C426 + C426 + C141309 * C419) * C47707 +
             C448 * C47708 + C449 * C47709) *
                C93949 +
            (C96217 + C96218 + C96219) * C141384) *
               C1596 -
           ((C14401 * C47709 + C14400 * C47708 + C16447 * C47707) * C141384 +
            (C96219 + C96218 + C96217) * C93949) *
               C141487) *
              C2374 +
          (((C98731 + C98732 + C98733) * C93949 +
            (C19050 * C47707 + C15321 * C47708 +
             (C418 * C14876 + C15316 + C15316 + C141309 * C15308) * C47709) *
                C141384) *
               C141487 -
           ((C98733 + C98732 + C98731) * C141384 +
            (C1192 * C47709 + C1193 * C47708 +
             (C418 * C823 + C1183 + C1183 + C141309 * C1171) * C47707) *
                C93949) *
               C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C6237 * C108 + C6241 + C6241 + C5865 * C419 + C6238 * C823 +
             C6242 + C6242 + C5866 * C1171 + C6239 * C2960 + C6243 + C6243 +
             C5867 * C3196) *
                C141216 * C93949 +
            (C103814 + C103815 + C103816) * C141216 * C141384) *
               C1596 -
           ((C6239 * C13303 + C13642 + C13642 + C5867 * C13636 +
             C6238 * C13301 + C13641 + C13641 + C5866 * C13635 + C6237 * C5325 +
             C13640 + C13640 + C5865 * C5561) *
                C141216 * C141384 +
            (C103816 + C103815 + C103814) * C141216 * C93949) *
               C141487) *
              C2374 +
          (((C106377 + C106378 + C106379) * C141216 * C93949 +
            (C6237 * C13301 + C106368 + C106368 + C5865 * C13635 +
             C6238 * C13303 + C106369 + C106369 + C5866 * C13636 +
             C6239 * C60310 + C106370 + C106370 + C5867 * C60522) *
                C141216 * C141384) *
               C141487 -
           ((C106379 + C106378 + C106377) * C141216 * C141384 +
            (C6239 * C6729 + C7301 + C7301 + C5867 * C7289 + C6238 * C2960 +
             C7302 + C7302 + C5866 * C3196 + C6237 * C823 + C7303 + C7303 +
             C5865 * C1171) *
                C141216 * C93949) *
               C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eeyz[131] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C94102 * C108 + C93949 * C276 + C94103 * C1601 +
              C141384 * C1784) *
                 C188 +
             (C94102 * C189 + C93949 * C501 + C94103 * C1690 +
              C141384 * C2040) *
                 C141309) *
                C47707 +
            ((C94129 + C94130) * C188 + (C94378 + C94379) * C141309) * C47708 +
            C94386 * C47709) *
               C1596 -
           (((C96329 + C96330) * C141309 + (C95979 + C95980) * C188) * C47709 +
            ((C96331 + C96332) * C141309 + (C95983 + C95984) * C188) * C47708 +
            ((C94103 * C5391 + C141384 * C5619 + C94102 * C1690 +
              C93949 * C2040) *
                 C141309 +
             (C94103 * C5325 + C141384 * C5449 + C94102 * C1601 +
              C93949 * C1784) *
                 C188) *
                C47707) *
               C141487) *
              C2374 +
          ((((C94102 * C3490 + C93949 * C3646 + C94103 * C13301 +
              C141384 * C13475) *
                 C188 +
             (C94102 * C3572 + C93949 * C3864 + C94103 * C13393 +
              C141384 * C13719) *
                 C141309) *
                C47707 +
            ((C94102 * C3491 + C93949 * C3647 + C94103 * C13302 +
              C141384 * C13476) *
                 C188 +
             (C94102 * C3573 + C93949 * C3865 + C94103 * C13395 +
              C141384 * C13721) *
                 C141309) *
                C47708 +
            ((C94102 * C3492 + C93949 * C3648 + C94103 * C14876 +
              C141384 * C15091) *
                 C188 +
             (C94102 * C3574 + C93949 * C3866 + C94103 * C14979 +
              C141384 * C15420) *
                 C141309) *
                C47709) *
               C141487 -
           (((C95288 + C95289) * C141309 + (C94980 + C94981) * C188) * C47709 +
            ((C95290 + C95291) * C141309 + (C94984 + C94985) * C188) * C47708 +
            ((C94103 * C3572 + C141384 * C3864 + C94102 * C912 +
              C93949 * C1262) *
                 C141309 +
             (C94103 * C3490 + C141384 * C3646 + C94102 * C823 +
              C93949 * C1006) *
                 C188) *
                C47707) *
               C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C94102 * C108 + C93949 * C276 + C94103 * C1601 + C141384 * C1784) *
                C5964 +
            (C94102 * C189 + C93949 * C501 + C94103 * C1690 + C141384 * C2040) *
                C5865 +
            (C102614 + C102615) * C5965 + (C102932 + C102933) * C5866 +
            C105329 * C5966 + C105571 * C5867) *
               C141216 * C1596 -
           ((C106486 + C106487) * C5867 + (C106154 + C106155) * C5966 +
            (C106488 + C106489) * C5866 + (C106158 + C106159) * C5965 +
            (C94103 * C5391 + C141384 * C5619 + C94102 * C1690 +
             C93949 * C2040) *
                C5865 +
            (C94103 * C5325 + C141384 * C5449 + C94102 * C1601 +
             C93949 * C1784) *
                C5964) *
               C141216 * C141487) *
              C2374 +
          (((C106159 + C106158) * C5964 + (C106489 + C106488) * C5865 +
            (C106155 + C106154) * C5965 + (C106487 + C106486) * C5866 +
            (C94102 * C10551 + C93949 * C10779 + C94103 * C60310 +
             C141384 * C60419) *
                C5966 +
            (C94102 * C10677 + C93949 * C11131 + C94103 * C60367 +
             C141384 * C60577) *
                C5867) *
               C141216 * C141487 -
           ((C105576 + C105577) * C5867 + (C105343 + C105344) * C5966 +
            (C102935 + C102934) * C5866 + (C102619 + C102618) * C5965 +
            (C102933 + C102932) * C5865 + (C102615 + C102614) * C5964) *
               C141216 * C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eezx[131] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47713 * C108 + C47707 * C114 + C47715 * C109 + C47708 * C115 +
             C47717 * C110 + C47709 * C116) *
                C94102 +
            (C47713 * C276 + C47707 * C579 + C47715 * C277 + C47708 * C580 +
             C47717 * C278 + C47709 * C581) *
                C93949 +
            (C96107 + C96108 + C96109) * C94103 +
            (C96443 + C96444 + C96445) * C141384) *
               C141309 * C1596 -
           ((C47717 * C5451 + C47709 * C5675 + C47715 * C5450 + C47708 * C5674 +
             C47713 * C5449 + C47707 * C5673) *
                C141384 +
            (C47717 * C5327 + C47709 * C5331 + C47715 * C5326 + C47708 * C5330 +
             C47713 * C5325 + C47707 * C5329) *
                C94103 +
            (C96445 + C96444 + C96443) * C93949 +
            (C96109 + C96108 + C96107) * C94102) *
               C141309 * C141487) *
              C2374 +
          (((C52524 + C52523 + C52522) * C94102 +
            (C52833 + C52832 + C52831) * C93949 +
            (C47713 * C13301 + C47707 * C13305 + C47715 * C13302 +
             C47708 * C13306 + C47717 * C14876 + C47709 * C14877) *
                C94103 +
            (C47713 * C13475 + C47707 * C13797 + C47715 * C13476 +
             C47708 * C13798 + C47717 * C15091 + C47709 * C15528) *
                C141384) *
               C141309 * C141487 -
           ((C52831 + C52832 + C52833) * C141384 +
            (C52522 + C52523 + C52524) * C94103 +
            (C49300 + C49299 + C49298) * C93949 +
            (C48946 + C48945 + C48944) * C94102) *
               C141309 * C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C55527 * C108 + C141216 * C114) * C94102 +
             (C55527 * C276 + C141216 * C579) * C93949 + C62870 * C94103 +
             C63222 * C141384) *
                C5865 +
            (C103036 + C103037 + C103038 + C103039) * C5866 + C105658 * C5867) *
               C1596 -
           ((C106588 + C106589 + C106590 + C106591) * C5867 +
            (C106592 + C106593 + C106594 + C106595) * C5866 +
            (C63223 * C141384 + C62872 * C94103 + C63222 * C93949 +
             C62870 * C94102) *
                C5865) *
               C141487) *
              C2374 +
          (((C106595 + C106594 + C106593 + C106592) * C5865 +
            (C106591 + C106590 + C106589 + C106588) * C5866 +
            (C58705 * C94102 + C58927 * C93949 +
             (C55527 * C60310 + C141216 * C60311) * C94103 +
             (C55527 * C60419 + C141216 * C60628) * C141384) *
                C5867) *
               C141487 -
           ((C105653 + C105654 + C105655 + C105656) * C5867 +
            (C103043 + C103042 + C103041 + C103040) * C5866 +
            (C103039 + C103038 + C103037 + C103036) * C5865) *
               C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eezy[131] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141309 * C189) * C94102 +
             (C188 * C276 + C141309 * C635) * C93949 + C16043 * C94103 +
             C16798 * C141384) *
                C47707 +
            (C94535 + C94536 + C94537 + C94538) * C47708 + C94549 * C47709) *
               C1596 -
           ((C96547 + C96548 + C96549 + C96550) * C47709 +
            (C96551 + C96552 + C96553 + C96554) * C47708 +
            (C16799 * C141384 + C16045 * C94103 + C16798 * C93949 +
             C16043 * C94102) *
                C47707) *
               C141487) *
              C2374 +
          (((C18715 * C94102 + C19363 * C93949 + C18717 * C94103 +
             C19364 * C141384) *
                C47707 +
            (C14993 * C94102 + C15638 * C93949 + C14991 * C94103 +
             C15637 * C141384) *
                C47708 +
            (C30842 * C94102 + C31481 * C93949 +
             (C188 * C14876 + C141309 * C14979) * C94103 +
             (C188 * C15091 + C141309 * C15627) * C141384) *
                C47709) *
               C141487 -
           ((C95488 + C95489 + C95490 + C95491) * C47709 +
            (C95492 + C95493 + C95494 + C95495) * C47708 +
            (C19363 * C141384 + C18715 * C94103 +
             (C188 * C1006 + C141309 * C1419) * C93949 +
             (C188 * C823 + C141309 * C912) * C94102) *
                C47707) *
               C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5964 * C108 + C5865 * C189 + C5965 * C823 + C5866 * C912 +
             C5966 * C2960 + C5867 * C3026) *
                C94102 +
            (C5964 * C276 + C5865 * C635 + C5965 * C1006 + C5866 * C1419 +
             C5966 * C3084 + C5867 * C3362) *
                C93949 +
            (C103490 + C103491 + C103492) * C94103 +
            (C104117 + C104118 + C104119) * C141384) *
               C141216 * C1596 -
           ((C5966 * C13477 + C5867 * C13876 + C5965 * C13475 + C5866 * C13875 +
             C5964 * C5449 + C5865 * C5727) *
                C141384 +
            (C5966 * C13303 + C5867 * C13394 + C5965 * C13301 + C5866 * C13393 +
             C5964 * C5325 + C5865 * C5391) *
                C94103 +
            (C104119 + C104118 + C104117) * C93949 +
            (C103492 + C103491 + C103490) * C94102) *
               C141216 * C141487) *
              C2374 +
          (((C106032 + C106033 + C106034) * C94102 +
            (C106700 + C106701 + C106702) * C93949 +
            (C5964 * C13301 + C5865 * C13393 + C5965 * C13303 + C5866 * C13394 +
             C5966 * C60310 + C5867 * C60367) *
                C94103 +
            (C5964 * C13475 + C5865 * C13875 + C5965 * C13477 + C5866 * C13876 +
             C5966 * C60419 + C5867 * C60679) *
                C141384) *
               C141216 * C141487 -
           ((C106702 + C106701 + C106700) * C141384 +
            (C106034 + C106033 + C106032) * C94103 +
            (C5966 * C7002 + C5867 * C7655 + C5965 * C3084 + C5866 * C3362 +
             C5964 * C1006 + C5865 * C1419) *
                C93949 +
            (C5966 * C6729 + C5867 * C6880 + C5965 * C2960 + C5866 * C3026 +
             C5964 * C823 + C5865 * C912) *
                C94102) *
               C141216 * C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eezz[131] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C94623 * C108 + C94626 + C94626 + C93949 * C714 + C94624 * C1601 +
             C94627 + C94627 + C141384 * C2283) *
                C141309 * C47707 +
            (C94660 + C94661) * C141309 * C47708 + C94667 * C47709) *
               C1596 -
           ((C96677 + C96678) * C141309 * C47709 +
            (C96679 + C96680) * C141309 * C47708 +
            (C94624 * C5325 + C96665 + C96665 + C141384 * C5781 +
             C94623 * C1601 + C96666 + C96666 + C93949 * C2283) *
                C141309 * C47707) *
               C141487) *
              C2374 +
          (((C94623 * C3490 + C99126 + C99126 + C93949 * C4074 +
             C94624 * C13301 + C99127 + C99127 + C141384 * C13953) *
                C141309 * C47707 +
            (C94623 * C3491 + C99128 + C99128 + C93949 * C4075 +
             C94624 * C13302 + C99129 + C99129 + C141384 * C13955) *
                C141309 * C47708 +
            (C94623 * C3492 + C99130 + C99130 + C93949 * C4076 +
             C94624 * C14876 + C99131 + C99131 + C141384 * C15738) *
                C141309 * C47709) *
               C141487 -
           ((C95618 + C95619) * C141309 * C47709 +
            (C95620 + C95621) * C141309 * C47708 +
            (C94624 * C3490 + C95606 + C95606 + C141384 * C4074 +
             C94623 * C823 + C95607 + C95607 + C93949 * C1505) *
                C141309 * C47707) *
               C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C94623 * C108 + C94626 + C94626 + C93949 * C714 + C94624 * C1601 +
             C94627 + C94627 + C141384 * C2283) *
                C5865 +
            (C103276 + C103277) * C5866 + C105807 * C5867) *
               C141216 * C1596 -
           ((C106819 + C106820) * C5867 + (C106821 + C106822) * C5866 +
            (C94624 * C5325 + C96665 + C96665 + C141384 * C5781 +
             C94623 * C1601 + C96666 + C96666 + C93949 * C2283) *
                C5865) *
               C141216 * C141487) *
              C2374 +
          (((C106822 + C106821) * C5865 + (C106820 + C106819) * C5866 +
            (C94623 * C10551 + C106809 + C106809 + C93949 * C11449 +
             C94624 * C60310 + C106810 + C106810 + C141384 * C60730) *
                C5867) *
               C141216 * C141487 -
           ((C105818 + C105819) * C5867 + (C103279 + C103278) * C5866 +
            (C103277 + C103276) * C5865) *
               C141216 * C1596) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eexx[132] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47712 * C108 + C47719 + C47719 + C47707 * C120 + C47714 * C109 +
             C47720 + C47720 + C47708 * C121 + C47716 * C110 + C47721 + C47721 +
             C47709 * C122) *
                C93949 +
            (C95747 + C95748 + C95749) * C141384) *
               C141309 * C4148 -
           ((C47716 * C5327 + C54870 + C54870 + C47709 * C5335 +
             C47714 * C5326 + C54869 + C54869 + C47708 * C5334 +
             C47712 * C5325 + C54868 + C54868 + C47707 * C5333) *
                C141384 +
            (C95749 + C95748 + C95747) * C93949) *
               C141309 * C141487) *
              C141277 * C2376 +
          (((C95750 + C95751 + C95752) * C93949 +
            (C47712 * C5326 + C95732 + C95732 + C47707 * C5334 +
             C47714 * C5327 + C95733 + C95733 + C47708 * C5335 +
             C47716 * C5328 + C95734 + C95734 + C47709 * C5336) *
                C141384) *
               C141309 * C141487 -
           ((C95752 + C95751 + C95750) * C141384 +
            (C47716 * C111 + C47728 + C47728 + C47709 * C123 + C47714 * C110 +
             C47729 + C47729 + C47708 * C122 + C47712 * C109 + C47730 + C47730 +
             C47707 * C121) *
                C93949) *
               C141309 * C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C55526 * C108 + C55529 + C55529 + C141216 * C120) * C93949 +
             C62512 * C141384) *
                C5865 +
            (C102386 + C102387) * C5866 + C105178 * C5867) *
               C4148 -
           ((C105918 + C105919) * C5867 + (C105920 + C105921) * C5866 +
            (C62513 * C141384 + C62512 * C93949) * C5865) *
               C141487) *
              C141277 * C2376 +
          (((C62514 * C93949 + C62515 * C141384) * C5865 +
            (C61520 * C93949 + C61521 * C141384) * C5866 +
            (C87073 * C93949 +
             (C55526 * C13304 + C61512 + C61512 + C141216 * C13312) * C141384) *
                C5867) *
               C141487 -
           ((C102393 + C102392) * C5867 + (C102391 + C102390) * C5866 +
            (C62514 * C141384 +
             (C55526 * C109 + C55536 + C55536 + C141216 * C121) * C93949) *
                C5865) *
               C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eexy[132] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141309 * C189) * C47713 +
             (C188 * C114 + C141309 * C195) * C47707 + C218 * C47715 +
             C219 * C47708 + C220 * C47717 + C221 * C47709) *
                C93949 +
            (C95851 + C95852 + C95853 + C95854 + C95855 + C95856) * C141384) *
               C4148 -
           ((C14129 * C47709 + C14130 * C47717 + C14128 * C47708 +
             C14127 * C47715 + C16046 * C47707 + C16045 * C47713) *
                C141384 +
            (C95856 + C95855 + C95854 + C95853 + C95852 + C95851) * C93949) *
               C141487) *
              C141277 * C2376 +
          (((C95857 + C95858 + C95859 + C95860 + C95861 + C95862) * C93949 +
            (C14127 * C47713 + C14128 * C47707 + C14130 * C47715 +
             C14129 * C47708 + (C188 * C5328 + C141309 * C5394) * C47717 +
             (C188 * C5332 + C141309 * C5398) * C47709) *
                C141384) *
               C141487 -
           ((C95862 + C95861 + C95860 + C95859 + C95858 + C95857) * C141384 +
            (C223 * C47709 + C222 * C47717 + C221 * C47708 + C220 * C47715 +
             C219 * C47707 + C218 * C47713) *
                C93949) *
               C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5964 * C108 + C5865 * C189 + C5965 * C823 + C5866 * C912 +
              C5966 * C2960 + C5867 * C3026) *
                 C55527 +
             (C5964 * C114 + C5865 * C195 + C5965 * C828 + C5866 * C917 +
              C5966 * C2964 + C5867 * C3030) *
                 C141216) *
                C93949 +
            ((C103490 + C103491 + C103492) * C55527 +
             (C103493 + C103494 + C103495) * C141216) *
                C141384) *
               C4148 -
           (((C5966 * C13307 + C5867 * C13398 + C5965 * C13305 +
              C5866 * C13397 + C5964 * C5329 + C5865 * C5395) *
                 C141216 +
             (C5966 * C13303 + C5867 * C13394 + C5965 * C13301 +
              C5866 * C13393 + C5964 * C5325 + C5865 * C5391) *
                 C55527) *
                C141384 +
            ((C103495 + C103494 + C103493) * C141216 +
             (C103492 + C103491 + C103490) * C55527) *
                C93949) *
               C141487) *
              C141277 * C2376 +
          ((((C8029 + C8028 + C8027) * C55527 +
             (C8026 + C8025 + C8024) * C141216) *
                C93949 +
            ((C5964 * C5326 + C5865 * C5392 + C5965 * C13302 + C5866 * C13395 +
              C5966 * C13304 + C5867 * C13396) *
                 C55527 +
             (C5964 * C5330 + C5865 * C5396 + C5965 * C13306 + C5866 * C13399 +
              C5966 * C13308 + C5867 * C13400) *
                 C141216) *
                C141384) *
               C141487 -
           (((C8024 + C8025 + C8026) * C141216 +
             (C8027 + C8028 + C8029) * C55527) *
                C141384 +
            ((C5997 + C5996 + C5995) * C141216 +
             (C5994 + C5993 + C5992) * C55527) *
                C93949) *
               C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eexz[132] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C94102 * C108 + C93949 * C276 + C94103 * C1601 + C141384 * C1784) *
                C47713 +
            (C94102 * C114 + C93949 * C282 + C94103 * C1606 + C141384 * C1789) *
                C47707 +
            (C94129 + C94130) * C47715 + (C94131 + C94132) * C47708 +
            C94141 * C47717 + C94142 * C47709) *
               C141309 * C4148 -
           ((C95977 + C95978) * C47709 + (C95979 + C95980) * C47717 +
            (C95981 + C95982) * C47708 + (C95983 + C95984) * C47715 +
            (C94103 * C5329 + C141384 * C5453 + C94102 * C1606 +
             C93949 * C1789) *
                C47707 +
            (C94103 * C5325 + C141384 * C5449 + C94102 * C1601 +
             C93949 * C1784) *
                C47713) *
               C141309 * C141487) *
              C141277 * C2376 +
          (((C95984 + C95983) * C47713 + (C95982 + C95981) * C47707 +
            (C95980 + C95979) * C47715 + (C95978 + C95977) * C47708 +
            (C94102 * C1598 + C93949 * C1781 + C94103 * C5328 +
             C141384 * C5452) *
                C47717 +
            (C94102 * C1603 + C93949 * C1786 + C94103 * C5332 +
             C141384 * C5456) *
                C47709) *
               C141309 * C141487 -
           ((C94137 + C94138) * C47709 + (C94139 + C94140) * C47717 +
            (C94136 + C94135) * C47708 + (C94134 + C94133) * C47715 +
            (C94132 + C94131) * C47707 + (C94130 + C94129) * C47713) *
               C141309 * C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C94102 * C108 + C93949 * C276 + C94103 * C1601 +
              C141384 * C1784) *
                 C55527 +
             (C94102 * C114 + C93949 * C282 + C94103 * C1606 +
              C141384 * C1789) *
                 C141216) *
                C5865 +
            ((C102614 + C102615) * C55527 + (C102616 + C102617) * C141216) *
                C5866 +
            C105345 * C5867) *
               C4148 -
           (((C106152 + C106153) * C141216 + (C106154 + C106155) * C55527) *
                C5867 +
            ((C106156 + C106157) * C141216 + (C106158 + C106159) * C55527) *
                C5866 +
            ((C94103 * C5329 + C141384 * C5453 + C94102 * C1606 +
              C93949 * C1789) *
                 C141216 +
             (C94103 * C5325 + C141384 * C5449 + C94102 * C1601 +
              C93949 * C1784) *
                 C55527) *
                C5865) *
               C141487) *
              C141277 * C2376 +
          ((((C95984 + C95983) * C55527 + (C95982 + C95981) * C141216) * C5865 +
            ((C94102 * C3491 + C93949 * C3647 + C94103 * C13302 +
              C141384 * C13476) *
                 C55527 +
             (C94102 * C3495 + C93949 * C3651 + C94103 * C13306 +
              C141384 * C13480) *
                 C141216) *
                C5866 +
            ((C94102 * C7886 + C93949 * C8127 + C94103 * C13304 +
              C141384 * C13478) *
                 C55527 +
             (C94102 * C7889 + C93949 * C8130 + C94103 * C13308 +
              C141384 * C13482) *
                 C141216) *
                C5867) *
               C141487 -
           (((C102625 + C102624) * C141216 + (C102623 + C102622) * C55527) *
                C5867 +
            ((C94982 + C94983) * C141216 + (C94984 + C94985) * C55527) * C5866 +
            ((C94132 + C94131) * C141216 + (C94130 + C94129) * C55527) *
                C5865) *
               C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[132] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47713 * C108 + C47707 * C114 + C47715 * C109 + C47708 * C115 +
              C47717 * C110 + C47709 * C116) *
                 C188 +
             (C47713 * C189 + C47707 * C362 + C47715 * C190 + C47708 * C363 +
              C47717 * C191 + C47709 * C364) *
                 C141309) *
                C93949 +
            ((C96107 + C96108 + C96109) * C188 +
             (C96110 + C96111 + C96112) * C141309) *
                C141384) *
               C4148 -
           (((C47717 * C5393 + C47709 * C5509 + C47715 * C5392 +
              C47708 * C5508 + C47713 * C5391 + C47707 * C5507) *
                 C141309 +
             (C47717 * C5327 + C47709 * C5331 + C47715 * C5326 +
              C47708 * C5330 + C47713 * C5325 + C47707 * C5329) *
                 C188) *
                C141384 +
            ((C96112 + C96111 + C96110) * C141309 +
             (C96109 + C96108 + C96107) * C188) *
                C93949) *
               C141487) *
              C141277 * C2376 +
          ((((C96113 + C96114 + C96115) * C188 +
             (C96116 + C96117 + C96118) * C141309) *
                C93949 +
            ((C47713 * C5326 + C47707 * C5330 + C47715 * C5327 +
              C47708 * C5331 + C47717 * C5328 + C47709 * C5332) *
                 C188 +
             (C47713 * C5392 + C47707 * C5508 + C47715 * C5393 +
              C47708 * C5509 + C47717 * C5394 + C47709 * C5510) *
                 C141309) *
                C141384) *
               C141487 -
           (((C96118 + C96117 + C96116) * C141309 +
             (C96115 + C96114 + C96113) * C188) *
                C141384 +
            ((C47717 * C192 + C47709 * C365 + C47715 * C191 + C47708 * C364 +
              C47713 * C190 + C47707 * C363) *
                 C141309 +
             (C47717 * C111 + C47709 * C117 + C47715 * C110 + C47708 * C116 +
              C47713 * C109 + C47707 * C115) *
                 C188) *
                C93949) *
               C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C55527 * C108 + C141216 * C114) * C5964 +
             (C55527 * C189 + C141216 * C362) * C5865 + C56299 * C5965 +
             C56300 * C5866 + C56301 * C5966 + C56302 * C5867) *
                C93949 +
            (C103692 + C103693 + C103694 + C103695 + C103696 + C103697) *
                C141384) *
               C4148 -
           ((C64648 * C5867 + C64649 * C5966 + C61850 * C5866 + C61849 * C5965 +
             C62873 * C5865 + C62872 * C5964) *
                C141384 +
            (C103697 + C103696 + C103695 + C103694 + C103693 + C103692) *
                C93949) *
               C141487) *
              C141277 * C2376 +
          (((C103698 + C103699 + C103700 + C103701 + C103702 + C103703) *
                C93949 +
            (C62876 * C5964 + C62877 * C5865 + C61853 * C5965 + C61854 * C5866 +
             (C55527 * C13304 + C141216 * C13308) * C5966 +
             (C55527 * C13396 + C141216 * C13560) * C5867) *
                C141384) *
               C141487 -
           ((C103703 + C103702 + C103701 + C103700 + C103699 + C103698) *
                C141384 +
            (C56308 * C5867 + C56307 * C5966 + C56306 * C5866 + C56305 * C5965 +
             (C55527 * C190 + C141216 * C363) * C5865 +
             (C55527 * C109 + C141216 * C115) * C5964) *
                C93949) *
               C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[132] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C418 * C108 + C426 + C426 + C141309 * C419) * C47707 +
             C448 * C47708 + C449 * C47709) *
                C93949 +
            (C96217 + C96218 + C96219) * C141384) *
               C4148 -
           ((C14401 * C47709 + C14400 * C47708 + C16447 * C47707) * C141384 +
            (C96219 + C96218 + C96217) * C93949) *
               C141487) *
              C141277 * C2376 +
          (((C96220 + C96221 + C96222) * C93949 +
            (C14400 * C47707 + C14401 * C47708 +
             (C418 * C5328 + C5569 + C5569 + C141309 * C5564) * C47709) *
                C141384) *
               C141487 -
           ((C96222 + C96221 + C96220) * C141384 +
            (C450 * C47709 + C449 * C47708 + C448 * C47707) * C93949) *
               C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C6237 * C108 + C6241 + C6241 + C5865 * C419 + C6238 * C823 +
             C6242 + C6242 + C5866 * C1171 + C6239 * C2960 + C6243 + C6243 +
             C5867 * C3196) *
                C141216 * C93949 +
            (C103814 + C103815 + C103816) * C141216 * C141384) *
               C4148 -
           ((C6239 * C13303 + C13642 + C13642 + C5867 * C13636 +
             C6238 * C13301 + C13641 + C13641 + C5866 * C13635 + C6237 * C5325 +
             C13640 + C13640 + C5865 * C5561) *
                C141216 * C141384 +
            (C103816 + C103815 + C103814) * C141216 * C93949) *
               C141487) *
              C141277 * C2376 +
          (((C8371 + C8370 + C8369) * C141216 * C93949 +
            (C6237 * C5326 + C13643 + C13643 + C5865 * C5562 + C6238 * C13302 +
             C13644 + C13644 + C5866 * C13637 + C6239 * C13304 + C13645 +
             C13645 + C5867 * C13638) *
                C141216 * C141384) *
               C141487 -
           ((C8369 + C8370 + C8371) * C141216 * C141384 +
            (C6279 + C6278 + C6277) * C141216 * C93949) *
               C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[132] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C94102 * C108 + C93949 * C276 + C94103 * C1601 +
              C141384 * C1784) *
                 C188 +
             (C94102 * C189 + C93949 * C501 + C94103 * C1690 +
              C141384 * C2040) *
                 C141309) *
                C47707 +
            ((C94129 + C94130) * C188 + (C94378 + C94379) * C141309) * C47708 +
            C94386 * C47709) *
               C4148 -
           (((C96329 + C96330) * C141309 + (C95979 + C95980) * C188) * C47709 +
            ((C96331 + C96332) * C141309 + (C95983 + C95984) * C188) * C47708 +
            ((C94103 * C5391 + C141384 * C5619 + C94102 * C1690 +
              C93949 * C2040) *
                 C141309 +
             (C94103 * C5325 + C141384 * C5449 + C94102 * C1601 +
              C93949 * C1784) *
                 C188) *
                C47707) *
               C141487) *
              C141277 * C2376 +
          ((((C95984 + C95983) * C188 + (C96332 + C96331) * C141309) * C47707 +
            ((C95980 + C95979) * C188 + (C96330 + C96329) * C141309) * C47708 +
            ((C94102 * C1598 + C93949 * C1781 + C94103 * C5328 +
              C141384 * C5452) *
                 C188 +
             (C94102 * C1687 + C93949 * C2037 + C94103 * C5394 +
              C141384 * C5622) *
                 C141309) *
                C47709) *
               C141487 -
           (((C94382 + C94383) * C141309 + (C94139 + C94140) * C188) * C47709 +
            ((C94381 + C94380) * C141309 + (C94134 + C94133) * C188) * C47708 +
            ((C94379 + C94378) * C141309 + (C94130 + C94129) * C188) * C47707) *
               C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C94102 * C108 + C93949 * C276 + C94103 * C1601 + C141384 * C1784) *
                C5964 +
            (C94102 * C189 + C93949 * C501 + C94103 * C1690 + C141384 * C2040) *
                C5865 +
            (C102614 + C102615) * C5965 + (C102932 + C102933) * C5866 +
            C105329 * C5966 + C105571 * C5867) *
               C141216 * C4148 -
           ((C106486 + C106487) * C5867 + (C106154 + C106155) * C5966 +
            (C106488 + C106489) * C5866 + (C106158 + C106159) * C5965 +
            (C94103 * C5391 + C141384 * C5619 + C94102 * C1690 +
             C93949 * C2040) *
                C5865 +
            (C94103 * C5325 + C141384 * C5449 + C94102 * C1601 +
             C93949 * C1784) *
                C5964) *
               C141216 * C141487) *
              C141277 * C2376 +
          (((C95984 + C95983) * C5964 + (C96332 + C96331) * C5865 +
            (C94102 * C3491 + C93949 * C3647 + C94103 * C13302 +
             C141384 * C13476) *
                C5965 +
            (C94102 * C3573 + C93949 * C3865 + C94103 * C13395 +
             C141384 * C13721) *
                C5866 +
            (C94102 * C7886 + C93949 * C8127 + C94103 * C13304 +
             C141384 * C13478) *
                C5966 +
            (C94102 * C8005 + C93949 * C8469 + C94103 * C13396 +
             C141384 * C13722) *
                C5867) *
               C141216 * C141487 -
           ((C102937 + C102936) * C5867 + (C102623 + C102622) * C5966 +
            (C95290 + C95291) * C5866 + (C94984 + C94985) * C5965 +
            (C94379 + C94378) * C5865 + (C94130 + C94129) * C5964) *
               C141216 * C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eezx[132] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47713 * C108 + C47707 * C114 + C47715 * C109 + C47708 * C115 +
             C47717 * C110 + C47709 * C116) *
                C94102 +
            (C47713 * C276 + C47707 * C579 + C47715 * C277 + C47708 * C580 +
             C47717 * C278 + C47709 * C581) *
                C93949 +
            (C96107 + C96108 + C96109) * C94103 +
            (C96443 + C96444 + C96445) * C141384) *
               C141309 * C4148 -
           ((C47717 * C5451 + C47709 * C5675 + C47715 * C5450 + C47708 * C5674 +
             C47713 * C5449 + C47707 * C5673) *
                C141384 +
            (C47717 * C5327 + C47709 * C5331 + C47715 * C5326 + C47708 * C5330 +
             C47713 * C5325 + C47707 * C5329) *
                C94103 +
            (C96445 + C96444 + C96443) * C93949 +
            (C96109 + C96108 + C96107) * C94102) *
               C141309 * C141487) *
              C141277 * C2376 +
          (((C96113 + C96114 + C96115) * C94102 +
            (C96446 + C96447 + C96448) * C93949 +
            (C47713 * C5326 + C47707 * C5330 + C47715 * C5327 + C47708 * C5331 +
             C47717 * C5328 + C47709 * C5332) *
                C94103 +
            (C47713 * C5450 + C47707 * C5674 + C47715 * C5451 + C47708 * C5675 +
             C47717 * C5452 + C47709 * C5676) *
                C141384) *
               C141309 * C141487 -
           ((C96448 + C96447 + C96446) * C141384 +
            (C96115 + C96114 + C96113) * C94103 +
            (C47717 * C279 + C47709 * C582 + C47715 * C278 + C47708 * C581 +
             C47713 * C277 + C47707 * C580) *
                C93949 +
            (C47717 * C111 + C47709 * C117 + C47715 * C110 + C47708 * C116 +
             C47713 * C109 + C47707 * C115) *
                C94102) *
               C141309 * C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C55527 * C108 + C141216 * C114) * C94102 +
             (C55527 * C276 + C141216 * C579) * C93949 + C62870 * C94103 +
             C63222 * C141384) *
                C5865 +
            (C103036 + C103037 + C103038 + C103039) * C5866 + C105658 * C5867) *
               C4148 -
           ((C106588 + C106589 + C106590 + C106591) * C5867 +
            (C106592 + C106593 + C106594 + C106595) * C5866 +
            (C63223 * C141384 + C62872 * C94103 + C63222 * C93949 +
             C62870 * C94102) *
                C5865) *
               C141487) *
              C141277 * C2376 +
          (((C62874 * C94102 + C63224 * C93949 + C62876 * C94103 +
             C63225 * C141384) *
                C5865 +
            (C61851 * C94102 + C62178 * C93949 + C61853 * C94103 +
             C62179 * C141384) *
                C5866 +
            (C87373 * C94102 + C87686 * C93949 +
             (C55527 * C13304 + C141216 * C13308) * C94103 +
             (C55527 * C13478 + C141216 * C13800) * C141384) *
                C5867) *
               C141487 -
           ((C103051 + C103050 + C103049 + C103048) * C5867 +
            (C103047 + C103046 + C103045 + C103044) * C5866 +
            (C63224 * C141384 + C62874 * C94103 +
             (C55527 * C277 + C141216 * C580) * C93949 +
             (C55527 * C109 + C141216 * C115) * C94102) *
                C5865) *
               C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eezy[132] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141309 * C189) * C94102 +
             (C188 * C276 + C141309 * C635) * C93949 + C16043 * C94103 +
             C16798 * C141384) *
                C47707 +
            (C94535 + C94536 + C94537 + C94538) * C47708 + C94549 * C47709) *
               C4148 -
           ((C96547 + C96548 + C96549 + C96550) * C47709 +
            (C96551 + C96552 + C96553 + C96554) * C47708 +
            (C16799 * C141384 + C16045 * C94103 + C16798 * C93949 +
             C16043 * C94102) *
                C47707) *
               C141487) *
              C141277 * C2376 +
          (((C96554 + C96553 + C96552 + C96551) * C47707 +
            (C96550 + C96549 + C96548 + C96547) * C47708 +
            (C1711 * C94102 + C2209 * C93949 +
             (C188 * C5328 + C141309 * C5394) * C94103 +
             (C188 * C5452 + C141309 * C5730) * C141384) *
                C47709) *
               C141487 -
           ((C94543 + C94544 + C94545 + C94546) * C47709 +
            (C94542 + C94541 + C94540 + C94539) * C47708 +
            (C94538 + C94537 + C94536 + C94535) * C47707) *
               C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5964 * C108 + C5865 * C189 + C5965 * C823 + C5866 * C912 +
             C5966 * C2960 + C5867 * C3026) *
                C94102 +
            (C5964 * C276 + C5865 * C635 + C5965 * C1006 + C5866 * C1419 +
             C5966 * C3084 + C5867 * C3362) *
                C93949 +
            (C103490 + C103491 + C103492) * C94103 +
            (C104117 + C104118 + C104119) * C141384) *
               C141216 * C4148 -
           ((C5966 * C13477 + C5867 * C13876 + C5965 * C13475 + C5866 * C13875 +
             C5964 * C5449 + C5865 * C5727) *
                C141384 +
            (C5966 * C13303 + C5867 * C13394 + C5965 * C13301 + C5866 * C13393 +
             C5964 * C5325 + C5865 * C5391) *
                C94103 +
            (C104119 + C104118 + C104117) * C93949 +
            (C103492 + C103491 + C103490) * C94102) *
               C141216 * C141487) *
              C141277 * C2376 +
          (((C8029 + C8028 + C8027) * C94102 +
            (C8695 + C8694 + C8693) * C93949 +
            (C5964 * C5326 + C5865 * C5392 + C5965 * C13302 + C5866 * C13395 +
             C5966 * C13304 + C5867 * C13396) *
                C94103 +
            (C5964 * C5450 + C5865 * C5728 + C5965 * C13476 + C5866 * C13877 +
             C5966 * C13478 + C5867 * C13878) *
                C141384) *
               C141216 * C141487 -
           ((C8693 + C8694 + C8695) * C141384 +
            (C8027 + C8028 + C8029) * C94103 +
            (C6537 + C6536 + C6535) * C93949 +
            (C5994 + C5993 + C5992) * C94102) *
               C141216 * C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eezz[132] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C94623 * C108 + C94626 + C94626 + C93949 * C714 + C94624 * C1601 +
             C94627 + C94627 + C141384 * C2283) *
                C141309 * C47707 +
            (C94660 + C94661) * C141309 * C47708 + C94667 * C47709) *
               C4148 -
           ((C96677 + C96678) * C141309 * C47709 +
            (C96679 + C96680) * C141309 * C47708 +
            (C94624 * C5325 + C96665 + C96665 + C141384 * C5781 +
             C94623 * C1601 + C96666 + C96666 + C93949 * C2283) *
                C141309 * C47707) *
               C141487) *
              C141277 * C2376 +
          (((C96680 + C96679) * C141309 * C47707 +
            (C96678 + C96677) * C141309 * C47708 +
            (C94623 * C1598 + C96667 + C96667 + C93949 * C2280 +
             C94624 * C5328 + C96668 + C96668 + C141384 * C5784) *
                C141309 * C47709) *
               C141487 -
           ((C94664 + C94665) * C141309 * C47709 +
            (C94663 + C94662) * C141309 * C47708 +
            (C94661 + C94660) * C141309 * C47707) *
               C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C94623 * C108 + C94626 + C94626 + C93949 * C714 + C94624 * C1601 +
             C94627 + C94627 + C141384 * C2283) *
                C5865 +
            (C103276 + C103277) * C5866 + C105807 * C5867) *
               C141216 * C4148 -
           ((C106819 + C106820) * C5867 + (C106821 + C106822) * C5866 +
            (C94624 * C5325 + C96665 + C96665 + C141384 * C5781 +
             C94623 * C1601 + C96666 + C96666 + C93949 * C2283) *
                C5865) *
               C141216 * C141487) *
              C141277 * C2376 +
          (((C96680 + C96679) * C5865 +
            (C94623 * C3491 + C99128 + C99128 + C93949 * C4075 +
             C94624 * C13302 + C99129 + C99129 + C141384 * C13955) *
                C5866 +
            (C94623 * C7886 + C104220 + C104220 + C93949 * C8793 +
             C94624 * C13304 + C104221 + C104221 + C141384 * C13956) *
                C5867) *
               C141216 * C141487 -
           ((C103281 + C103280) * C5867 + (C95620 + C95621) * C5866 +
            (C94661 + C94660) * C5865) *
               C141216 * C4148) *
              C141277 * C141483)) /
            (p * q * std::sqrt(p + q));
    d2eexx[133] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47712 * C108 + C47719 + C47719 + C47707 * C120 + C47714 * C109 +
             C47720 + C47720 + C47708 * C121 + C47716 * C110 + C47721 + C47721 +
             C47709 * C122) *
                C93949 +
            (C95747 + C95748 + C95749) * C141384) *
               C141309 * C4148 -
           ((C47716 * C5327 + C54870 + C54870 + C47709 * C5335 +
             C47714 * C5326 + C54869 + C54869 + C47708 * C5334 +
             C47712 * C5325 + C54868 + C54868 + C47707 * C5333) *
                C141384 +
            (C95749 + C95748 + C95747) * C93949) *
               C141309 * C141487) *
              C816 +
          (((C52206 + C52205 + C52204) * C93949 +
            (C47712 * C13301 + C54871 + C54871 + C47707 * C13309 +
             C47714 * C13302 + C54872 + C54872 + C47708 * C13310 +
             C47716 * C14876 + C54873 + C54873 + C47709 * C14878) *
                C141384) *
               C141309 * C141487 -
           ((C52204 + C52205 + C52206) * C141384 +
            (C48586 + C48585 + C48584) * C93949) *
               C141309 * C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C55526 * C108 + C55529 + C55529 + C141216 * C120) * C93949 +
             C62512 * C141384) *
                C5865 +
            (C102386 + C102387) * C5866 + C105178 * C5867) *
               C4148 -
           ((C105918 + C105919) * C5867 + (C105920 + C105921) * C5866 +
            (C62513 * C141384 + C62512 * C93949) * C5865) *
               C141487) *
              C816 +
          (((C105921 + C105920) * C5865 + (C105919 + C105918) * C5866 +
            (C58471 * C93949 +
             (C55526 * C60310 + C60317 + C60317 + C141216 * C60312) * C141384) *
                C5867) *
               C141487 -
           ((C105179 + C105180) * C5867 + (C102389 + C102388) * C5866 +
            (C102387 + C102386) * C5865) *
               C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eexy[133] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141309 * C189) * C47713 +
             (C188 * C114 + C141309 * C195) * C47707 + C218 * C47715 +
             C219 * C47708 + C220 * C47717 + C221 * C47709) *
                C93949 +
            (C95851 + C95852 + C95853 + C95854 + C95855 + C95856) * C141384) *
               C4148 -
           ((C14129 * C47709 + C14130 * C47717 + C14128 * C47708 +
             C14127 * C47715 + C16046 * C47707 + C16045 * C47713) *
                C141384 +
            (C95856 + C95855 + C95854 + C95853 + C95852 + C95851) * C93949) *
               C141487) *
              C816 +
          (((C98431 + C98432 + C98433 + C98434 + C98435 + C98436) * C93949 +
            (C18717 * C47713 + C18718 * C47707 + C14991 * C47715 +
             C14990 * C47708 + (C188 * C14876 + C141309 * C14979) * C47717 +
             (C188 * C14877 + C141309 * C14980) * C47709) *
                C141384) *
               C141487 -
           ((C98436 + C98435 + C98434 + C98433 + C98432 + C98431) * C141384 +
            (C934 * C47709 + C935 * C47717 + C936 * C47708 + C937 * C47715 +
             (C188 * C828 + C141309 * C917) * C47707 +
             (C188 * C823 + C141309 * C912) * C47713) *
                C93949) *
               C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5964 * C108 + C5865 * C189 + C5965 * C823 + C5866 * C912 +
              C5966 * C2960 + C5867 * C3026) *
                 C55527 +
             (C5964 * C114 + C5865 * C195 + C5965 * C828 + C5866 * C917 +
              C5966 * C2964 + C5867 * C3030) *
                 C141216) *
                C93949 +
            ((C103490 + C103491 + C103492) * C55527 +
             (C103493 + C103494 + C103495) * C141216) *
                C141384) *
               C4148 -
           (((C5966 * C13307 + C5867 * C13398 + C5965 * C13305 +
              C5866 * C13397 + C5964 * C5329 + C5865 * C5395) *
                 C141216 +
             (C5966 * C13303 + C5867 * C13394 + C5965 * C13301 +
              C5866 * C13393 + C5964 * C5325 + C5865 * C5391) *
                 C55527) *
                C141384 +
            ((C103495 + C103494 + C103493) * C141216 +
             (C103492 + C103491 + C103490) * C55527) *
                C93949) *
               C141487) *
              C816 +
          ((((C106032 + C106033 + C106034) * C55527 +
             (C106035 + C106036 + C106037) * C141216) *
                C93949 +
            ((C5964 * C13301 + C5865 * C13393 + C5965 * C13303 +
              C5866 * C13394 + C5966 * C60310 + C5867 * C60367) *
                 C55527 +
             (C5964 * C13305 + C5865 * C13397 + C5965 * C13307 +
              C5866 * C13398 + C5966 * C60311 + C5867 * C60368) *
                 C141216) *
                C141384) *
               C141487 -
           (((C106037 + C106036 + C106035) * C141216 +
             (C106034 + C106033 + C106032) * C55527) *
                C141384 +
            ((C5966 * C6732 + C5867 * C6883 + C5965 * C2964 + C5866 * C3030 +
              C5964 * C828 + C5865 * C917) *
                 C141216 +
             (C5966 * C6729 + C5867 * C6880 + C5965 * C2960 + C5866 * C3026 +
              C5964 * C823 + C5865 * C912) *
                 C55527) *
                C93949) *
               C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eexz[133] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C94102 * C108 + C93949 * C276 + C94103 * C1601 + C141384 * C1784) *
                C47713 +
            (C94102 * C114 + C93949 * C282 + C94103 * C1606 + C141384 * C1789) *
                C47707 +
            (C94129 + C94130) * C47715 + (C94131 + C94132) * C47708 +
            C94141 * C47717 + C94142 * C47709) *
               C141309 * C4148 -
           ((C95977 + C95978) * C47709 + (C95979 + C95980) * C47717 +
            (C95981 + C95982) * C47708 + (C95983 + C95984) * C47715 +
            (C94103 * C5329 + C141384 * C5453 + C94102 * C1606 +
             C93949 * C1789) *
                C47707 +
            (C94103 * C5325 + C141384 * C5449 + C94102 * C1601 +
             C93949 * C1784) *
                C47713) *
               C141309 * C141487) *
              C816 +
          (((C94102 * C3490 + C93949 * C3646 + C94103 * C13301 +
             C141384 * C13475) *
                C47713 +
            (C94102 * C3494 + C93949 * C3650 + C94103 * C13305 +
             C141384 * C13479) *
                C47707 +
            (C94102 * C3491 + C93949 * C3647 + C94103 * C13302 +
             C141384 * C13476) *
                C47715 +
            (C94102 * C3495 + C93949 * C3651 + C94103 * C13306 +
             C141384 * C13480) *
                C47708 +
            (C94102 * C3492 + C93949 * C3648 + C94103 * C14876 +
             C141384 * C15091) *
                C47717 +
            (C94102 * C3496 + C93949 * C3652 + C94103 * C14877 +
             C141384 * C15092) *
                C47709) *
               C141309 * C141487 -
           ((C94978 + C94979) * C47709 + (C94980 + C94981) * C47717 +
            (C94982 + C94983) * C47708 + (C94984 + C94985) * C47715 +
            (C94103 * C3494 + C141384 * C3650 + C94102 * C828 +
             C93949 * C1011) *
                C47707 +
            (C94103 * C3490 + C141384 * C3646 + C94102 * C823 +
             C93949 * C1006) *
                C47713) *
               C141309 * C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C94102 * C108 + C93949 * C276 + C94103 * C1601 +
              C141384 * C1784) *
                 C55527 +
             (C94102 * C114 + C93949 * C282 + C94103 * C1606 +
              C141384 * C1789) *
                 C141216) *
                C5865 +
            ((C102614 + C102615) * C55527 + (C102616 + C102617) * C141216) *
                C5866 +
            C105345 * C5867) *
               C4148 -
           (((C106152 + C106153) * C141216 + (C106154 + C106155) * C55527) *
                C5867 +
            ((C106156 + C106157) * C141216 + (C106158 + C106159) * C55527) *
                C5866 +
            ((C94103 * C5329 + C141384 * C5453 + C94102 * C1606 +
              C93949 * C1789) *
                 C141216 +
             (C94103 * C5325 + C141384 * C5449 + C94102 * C1601 +
              C93949 * C1784) *
                 C55527) *
                C5865) *
               C141487) *
              C816 +
          ((((C106159 + C106158) * C55527 + (C106157 + C106156) * C141216) *
                C5865 +
            ((C106155 + C106154) * C55527 + (C106153 + C106152) * C141216) *
                C5866 +
            ((C94102 * C10551 + C93949 * C10779 + C94103 * C60310 +
              C141384 * C60419) *
                 C55527 +
             (C94102 * C10553 + C93949 * C10781 + C94103 * C60311 +
              C141384 * C60420) *
                 C141216) *
                C5867) *
               C141487 -
           (((C105341 + C105342) * C141216 + (C105343 + C105344) * C55527) *
                C5867 +
            ((C102621 + C102620) * C141216 + (C102619 + C102618) * C55527) *
                C5866 +
            ((C102617 + C102616) * C141216 + (C102615 + C102614) * C55527) *
                C5865) *
               C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eeyx[133] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47713 * C108 + C47707 * C114 + C47715 * C109 + C47708 * C115 +
              C47717 * C110 + C47709 * C116) *
                 C188 +
             (C47713 * C189 + C47707 * C362 + C47715 * C190 + C47708 * C363 +
              C47717 * C191 + C47709 * C364) *
                 C141309) *
                C93949 +
            ((C96107 + C96108 + C96109) * C188 +
             (C96110 + C96111 + C96112) * C141309) *
                C141384) *
               C4148 -
           (((C47717 * C5393 + C47709 * C5509 + C47715 * C5392 +
              C47708 * C5508 + C47713 * C5391 + C47707 * C5507) *
                 C141309 +
             (C47717 * C5327 + C47709 * C5331 + C47715 * C5326 +
              C47708 * C5330 + C47713 * C5325 + C47707 * C5329) *
                 C188) *
                C141384 +
            ((C96112 + C96111 + C96110) * C141309 +
             (C96109 + C96108 + C96107) * C188) *
                C93949) *
               C141487) *
              C816 +
          ((((C52524 + C52523 + C52522) * C188 +
             (C52521 + C52520 + C52519) * C141309) *
                C93949 +
            ((C47713 * C13301 + C47707 * C13305 + C47715 * C13302 +
              C47708 * C13306 + C47717 * C14876 + C47709 * C14877) *
                 C188 +
             (C47713 * C13393 + C47707 * C13557 + C47715 * C13395 +
              C47708 * C13558 + C47717 * C14979 + C47709 * C15209) *
                 C141309) *
                C141384) *
               C141487 -
           (((C52519 + C52520 + C52521) * C141309 +
             (C52522 + C52523 + C52524) * C188) *
                C141384 +
            ((C48949 + C48948 + C48947) * C141309 +
             (C48946 + C48945 + C48944) * C188) *
                C93949) *
               C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C55527 * C108 + C141216 * C114) * C5964 +
             (C55527 * C189 + C141216 * C362) * C5865 + C56299 * C5965 +
             C56300 * C5866 + C56301 * C5966 + C56302 * C5867) *
                C93949 +
            (C103692 + C103693 + C103694 + C103695 + C103696 + C103697) *
                C141384) *
               C4148 -
           ((C64648 * C5867 + C64649 * C5966 + C61850 * C5866 + C61849 * C5965 +
             C62873 * C5865 + C62872 * C5964) *
                C141384 +
            (C103697 + C103696 + C103695 + C103694 + C103693 + C103692) *
                C93949) *
               C141487) *
              C816 +
          (((C106258 + C106259 + C106260 + C106261 + C106262 + C106263) *
                C93949 +
            (C61849 * C5964 + C61850 * C5865 + C64649 * C5965 + C64648 * C5866 +
             (C55527 * C60310 + C141216 * C60311) * C5966 +
             (C55527 * C60367 + C141216 * C60471) * C5867) *
                C141384) *
               C141487 -
           ((C106263 + C106262 + C106261 + C106260 + C106259 + C106258) *
                C141384 +
            (C56304 * C5867 + C56303 * C5966 + C56302 * C5866 + C56301 * C5965 +
             C56300 * C5865 + C56299 * C5964) *
                C93949) *
               C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eeyy[133] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C418 * C108 + C426 + C426 + C141309 * C419) * C47707 +
             C448 * C47708 + C449 * C47709) *
                C93949 +
            (C96217 + C96218 + C96219) * C141384) *
               C4148 -
           ((C14401 * C47709 + C14400 * C47708 + C16447 * C47707) * C141384 +
            (C96219 + C96218 + C96217) * C93949) *
               C141487) *
              C816 +
          (((C98731 + C98732 + C98733) * C93949 +
            (C19050 * C47707 + C15321 * C47708 +
             (C418 * C14876 + C15316 + C15316 + C141309 * C15308) * C47709) *
                C141384) *
               C141487 -
           ((C98733 + C98732 + C98731) * C141384 +
            (C1192 * C47709 + C1193 * C47708 +
             (C418 * C823 + C1183 + C1183 + C141309 * C1171) * C47707) *
                C93949) *
               C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C6237 * C108 + C6241 + C6241 + C5865 * C419 + C6238 * C823 +
             C6242 + C6242 + C5866 * C1171 + C6239 * C2960 + C6243 + C6243 +
             C5867 * C3196) *
                C141216 * C93949 +
            (C103814 + C103815 + C103816) * C141216 * C141384) *
               C4148 -
           ((C6239 * C13303 + C13642 + C13642 + C5867 * C13636 +
             C6238 * C13301 + C13641 + C13641 + C5866 * C13635 + C6237 * C5325 +
             C13640 + C13640 + C5865 * C5561) *
                C141216 * C141384 +
            (C103816 + C103815 + C103814) * C141216 * C93949) *
               C141487) *
              C816 +
          (((C106377 + C106378 + C106379) * C141216 * C93949 +
            (C6237 * C13301 + C106368 + C106368 + C5865 * C13635 +
             C6238 * C13303 + C106369 + C106369 + C5866 * C13636 +
             C6239 * C60310 + C106370 + C106370 + C5867 * C60522) *
                C141216 * C141384) *
               C141487 -
           ((C106379 + C106378 + C106377) * C141216 * C141384 +
            (C6239 * C6729 + C7301 + C7301 + C5867 * C7289 + C6238 * C2960 +
             C7302 + C7302 + C5866 * C3196 + C6237 * C823 + C7303 + C7303 +
             C5865 * C1171) *
                C141216 * C93949) *
               C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eeyz[133] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C94102 * C108 + C93949 * C276 + C94103 * C1601 +
              C141384 * C1784) *
                 C188 +
             (C94102 * C189 + C93949 * C501 + C94103 * C1690 +
              C141384 * C2040) *
                 C141309) *
                C47707 +
            ((C94129 + C94130) * C188 + (C94378 + C94379) * C141309) * C47708 +
            C94386 * C47709) *
               C4148 -
           (((C96329 + C96330) * C141309 + (C95979 + C95980) * C188) * C47709 +
            ((C96331 + C96332) * C141309 + (C95983 + C95984) * C188) * C47708 +
            ((C94103 * C5391 + C141384 * C5619 + C94102 * C1690 +
              C93949 * C2040) *
                 C141309 +
             (C94103 * C5325 + C141384 * C5449 + C94102 * C1601 +
              C93949 * C1784) *
                 C188) *
                C47707) *
               C141487) *
              C816 +
          ((((C94102 * C3490 + C93949 * C3646 + C94103 * C13301 +
              C141384 * C13475) *
                 C188 +
             (C94102 * C3572 + C93949 * C3864 + C94103 * C13393 +
              C141384 * C13719) *
                 C141309) *
                C47707 +
            ((C94102 * C3491 + C93949 * C3647 + C94103 * C13302 +
              C141384 * C13476) *
                 C188 +
             (C94102 * C3573 + C93949 * C3865 + C94103 * C13395 +
              C141384 * C13721) *
                 C141309) *
                C47708 +
            ((C94102 * C3492 + C93949 * C3648 + C94103 * C14876 +
              C141384 * C15091) *
                 C188 +
             (C94102 * C3574 + C93949 * C3866 + C94103 * C14979 +
              C141384 * C15420) *
                 C141309) *
                C47709) *
               C141487 -
           (((C95288 + C95289) * C141309 + (C94980 + C94981) * C188) * C47709 +
            ((C95290 + C95291) * C141309 + (C94984 + C94985) * C188) * C47708 +
            ((C94103 * C3572 + C141384 * C3864 + C94102 * C912 +
              C93949 * C1262) *
                 C141309 +
             (C94103 * C3490 + C141384 * C3646 + C94102 * C823 +
              C93949 * C1006) *
                 C188) *
                C47707) *
               C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C94102 * C108 + C93949 * C276 + C94103 * C1601 + C141384 * C1784) *
                C5964 +
            (C94102 * C189 + C93949 * C501 + C94103 * C1690 + C141384 * C2040) *
                C5865 +
            (C102614 + C102615) * C5965 + (C102932 + C102933) * C5866 +
            C105329 * C5966 + C105571 * C5867) *
               C141216 * C4148 -
           ((C106486 + C106487) * C5867 + (C106154 + C106155) * C5966 +
            (C106488 + C106489) * C5866 + (C106158 + C106159) * C5965 +
            (C94103 * C5391 + C141384 * C5619 + C94102 * C1690 +
             C93949 * C2040) *
                C5865 +
            (C94103 * C5325 + C141384 * C5449 + C94102 * C1601 +
             C93949 * C1784) *
                C5964) *
               C141216 * C141487) *
              C816 +
          (((C106159 + C106158) * C5964 + (C106489 + C106488) * C5865 +
            (C106155 + C106154) * C5965 + (C106487 + C106486) * C5866 +
            (C94102 * C10551 + C93949 * C10779 + C94103 * C60310 +
             C141384 * C60419) *
                C5966 +
            (C94102 * C10677 + C93949 * C11131 + C94103 * C60367 +
             C141384 * C60577) *
                C5867) *
               C141216 * C141487 -
           ((C105576 + C105577) * C5867 + (C105343 + C105344) * C5966 +
            (C102935 + C102934) * C5866 + (C102619 + C102618) * C5965 +
            (C102933 + C102932) * C5865 + (C102615 + C102614) * C5964) *
               C141216 * C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eezx[133] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47713 * C108 + C47707 * C114 + C47715 * C109 + C47708 * C115 +
             C47717 * C110 + C47709 * C116) *
                C94102 +
            (C47713 * C276 + C47707 * C579 + C47715 * C277 + C47708 * C580 +
             C47717 * C278 + C47709 * C581) *
                C93949 +
            (C96107 + C96108 + C96109) * C94103 +
            (C96443 + C96444 + C96445) * C141384) *
               C141309 * C4148 -
           ((C47717 * C5451 + C47709 * C5675 + C47715 * C5450 + C47708 * C5674 +
             C47713 * C5449 + C47707 * C5673) *
                C141384 +
            (C47717 * C5327 + C47709 * C5331 + C47715 * C5326 + C47708 * C5330 +
             C47713 * C5325 + C47707 * C5329) *
                C94103 +
            (C96445 + C96444 + C96443) * C93949 +
            (C96109 + C96108 + C96107) * C94102) *
               C141309 * C141487) *
              C816 +
          (((C52524 + C52523 + C52522) * C94102 +
            (C52833 + C52832 + C52831) * C93949 +
            (C47713 * C13301 + C47707 * C13305 + C47715 * C13302 +
             C47708 * C13306 + C47717 * C14876 + C47709 * C14877) *
                C94103 +
            (C47713 * C13475 + C47707 * C13797 + C47715 * C13476 +
             C47708 * C13798 + C47717 * C15091 + C47709 * C15528) *
                C141384) *
               C141309 * C141487 -
           ((C52831 + C52832 + C52833) * C141384 +
            (C52522 + C52523 + C52524) * C94103 +
            (C49300 + C49299 + C49298) * C93949 +
            (C48946 + C48945 + C48944) * C94102) *
               C141309 * C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C55527 * C108 + C141216 * C114) * C94102 +
             (C55527 * C276 + C141216 * C579) * C93949 + C62870 * C94103 +
             C63222 * C141384) *
                C5865 +
            (C103036 + C103037 + C103038 + C103039) * C5866 + C105658 * C5867) *
               C4148 -
           ((C106588 + C106589 + C106590 + C106591) * C5867 +
            (C106592 + C106593 + C106594 + C106595) * C5866 +
            (C63223 * C141384 + C62872 * C94103 + C63222 * C93949 +
             C62870 * C94102) *
                C5865) *
               C141487) *
              C816 +
          (((C106595 + C106594 + C106593 + C106592) * C5865 +
            (C106591 + C106590 + C106589 + C106588) * C5866 +
            (C58705 * C94102 + C58927 * C93949 +
             (C55527 * C60310 + C141216 * C60311) * C94103 +
             (C55527 * C60419 + C141216 * C60628) * C141384) *
                C5867) *
               C141487 -
           ((C105653 + C105654 + C105655 + C105656) * C5867 +
            (C103043 + C103042 + C103041 + C103040) * C5866 +
            (C103039 + C103038 + C103037 + C103036) * C5865) *
               C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eezy[133] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141309 * C189) * C94102 +
             (C188 * C276 + C141309 * C635) * C93949 + C16043 * C94103 +
             C16798 * C141384) *
                C47707 +
            (C94535 + C94536 + C94537 + C94538) * C47708 + C94549 * C47709) *
               C4148 -
           ((C96547 + C96548 + C96549 + C96550) * C47709 +
            (C96551 + C96552 + C96553 + C96554) * C47708 +
            (C16799 * C141384 + C16045 * C94103 + C16798 * C93949 +
             C16043 * C94102) *
                C47707) *
               C141487) *
              C816 +
          (((C18715 * C94102 + C19363 * C93949 + C18717 * C94103 +
             C19364 * C141384) *
                C47707 +
            (C14993 * C94102 + C15638 * C93949 + C14991 * C94103 +
             C15637 * C141384) *
                C47708 +
            (C30842 * C94102 + C31481 * C93949 +
             (C188 * C14876 + C141309 * C14979) * C94103 +
             (C188 * C15091 + C141309 * C15627) * C141384) *
                C47709) *
               C141487 -
           ((C95488 + C95489 + C95490 + C95491) * C47709 +
            (C95492 + C95493 + C95494 + C95495) * C47708 +
            (C19363 * C141384 + C18715 * C94103 +
             (C188 * C1006 + C141309 * C1419) * C93949 +
             (C188 * C823 + C141309 * C912) * C94102) *
                C47707) *
               C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5964 * C108 + C5865 * C189 + C5965 * C823 + C5866 * C912 +
             C5966 * C2960 + C5867 * C3026) *
                C94102 +
            (C5964 * C276 + C5865 * C635 + C5965 * C1006 + C5866 * C1419 +
             C5966 * C3084 + C5867 * C3362) *
                C93949 +
            (C103490 + C103491 + C103492) * C94103 +
            (C104117 + C104118 + C104119) * C141384) *
               C141216 * C4148 -
           ((C5966 * C13477 + C5867 * C13876 + C5965 * C13475 + C5866 * C13875 +
             C5964 * C5449 + C5865 * C5727) *
                C141384 +
            (C5966 * C13303 + C5867 * C13394 + C5965 * C13301 + C5866 * C13393 +
             C5964 * C5325 + C5865 * C5391) *
                C94103 +
            (C104119 + C104118 + C104117) * C93949 +
            (C103492 + C103491 + C103490) * C94102) *
               C141216 * C141487) *
              C816 +
          (((C106032 + C106033 + C106034) * C94102 +
            (C106700 + C106701 + C106702) * C93949 +
            (C5964 * C13301 + C5865 * C13393 + C5965 * C13303 + C5866 * C13394 +
             C5966 * C60310 + C5867 * C60367) *
                C94103 +
            (C5964 * C13475 + C5865 * C13875 + C5965 * C13477 + C5866 * C13876 +
             C5966 * C60419 + C5867 * C60679) *
                C141384) *
               C141216 * C141487 -
           ((C106702 + C106701 + C106700) * C141384 +
            (C106034 + C106033 + C106032) * C94103 +
            (C5966 * C7002 + C5867 * C7655 + C5965 * C3084 + C5866 * C3362 +
             C5964 * C1006 + C5865 * C1419) *
                C93949 +
            (C5966 * C6729 + C5867 * C6880 + C5965 * C2960 + C5866 * C3026 +
             C5964 * C823 + C5865 * C912) *
                C94102) *
               C141216 * C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eezz[133] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C94623 * C108 + C94626 + C94626 + C93949 * C714 + C94624 * C1601 +
             C94627 + C94627 + C141384 * C2283) *
                C141309 * C47707 +
            (C94660 + C94661) * C141309 * C47708 + C94667 * C47709) *
               C4148 -
           ((C96677 + C96678) * C141309 * C47709 +
            (C96679 + C96680) * C141309 * C47708 +
            (C94624 * C5325 + C96665 + C96665 + C141384 * C5781 +
             C94623 * C1601 + C96666 + C96666 + C93949 * C2283) *
                C141309 * C47707) *
               C141487) *
              C816 +
          (((C94623 * C3490 + C99126 + C99126 + C93949 * C4074 +
             C94624 * C13301 + C99127 + C99127 + C141384 * C13953) *
                C141309 * C47707 +
            (C94623 * C3491 + C99128 + C99128 + C93949 * C4075 +
             C94624 * C13302 + C99129 + C99129 + C141384 * C13955) *
                C141309 * C47708 +
            (C94623 * C3492 + C99130 + C99130 + C93949 * C4076 +
             C94624 * C14876 + C99131 + C99131 + C141384 * C15738) *
                C141309 * C47709) *
               C141487 -
           ((C95618 + C95619) * C141309 * C47709 +
            (C95620 + C95621) * C141309 * C47708 +
            (C94624 * C3490 + C95606 + C95606 + C141384 * C4074 +
             C94623 * C823 + C95607 + C95607 + C93949 * C1505) *
                C141309 * C47707) *
               C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C94623 * C108 + C94626 + C94626 + C93949 * C714 + C94624 * C1601 +
             C94627 + C94627 + C141384 * C2283) *
                C5865 +
            (C103276 + C103277) * C5866 + C105807 * C5867) *
               C141216 * C4148 -
           ((C106819 + C106820) * C5867 + (C106821 + C106822) * C5866 +
            (C94624 * C5325 + C96665 + C96665 + C141384 * C5781 +
             C94623 * C1601 + C96666 + C96666 + C93949 * C2283) *
                C5865) *
               C141216 * C141487) *
              C816 +
          (((C106822 + C106821) * C5865 + (C106820 + C106819) * C5866 +
            (C94623 * C10551 + C106809 + C106809 + C93949 * C11449 +
             C94624 * C60310 + C106810 + C106810 + C141384 * C60730) *
                C5867) *
               C141216 * C141487 -
           ((C105818 + C105819) * C5867 + (C103279 + C103278) * C5866 +
            (C103277 + C103276) * C5865) *
               C141216 * C4148) *
              C141485) *
         C141243) /
            (p * q * std::sqrt(p + q));
    d2eexx[134] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C47712 * C108 + C47719 + C47719 + C47707 * C120 + C47714 * C109 +
            C47720 + C47720 + C47708 * C121 + C47716 * C110 + C47721 + C47721 +
            C47709 * C122) *
               C93949 +
           (C95747 + C95748 + C95749) * C141384) *
              C141309 * C5322 -
          ((C100985 + C100986 + C100987) * C141384 +
           (C95749 + C95748 + C95747) * C93949) *
              C141309 * C5323 +
          ((C100987 + C100986 + C100985) * C93949 +
           (C47712 * C15862 + C100976 + C100976 + C47707 * C15868 +
            C47714 * C15861 + C100977 + C100977 + C47708 * C15867 +
            C47716 * C15863 + C100978 + C100978 + C47709 * C15869) *
               C141384) *
              C141309 * C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C55526 * C108 + C55529 + C55529 + C141216 * C120) * C93949 +
            C62512 * C141384) *
               C5865 +
           (C102386 + C102387) * C5866 + C105178 * C5867) *
              C5322 -
          ((C105918 + C105919) * C5867 + (C105920 + C105921) * C5866 +
           (C62513 * C141384 + C62512 * C93949) * C5865) *
              C5323 +
          ((C62513 * C93949 + C67937 * C141384) * C5865 +
           (C61519 * C93949 + C65168 * C141384) * C5866 +
           (C64402 * C93949 +
            (C55526 * C65157 + C65165 + C65165 + C141216 * C65159) * C141384) *
               C5867) *
              C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q));
    d2eexy[134] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141309 * C189) * C47713 +
            (C188 * C114 + C141309 * C195) * C47707 + C218 * C47715 +
            C219 * C47708 + C220 * C47717 + C221 * C47709) *
               C93949 +
           (C95851 + C95852 + C95853 + C95854 + C95855 + C95856) * C141384) *
              C5322 -
          ((C101062 + C101063 + C101064 + C101065 + C101066 + C101067) *
               C141384 +
           (C95856 + C95855 + C95854 + C95853 + C95852 + C95851) * C93949) *
              C5323 +
          ((C101067 + C101066 + C101065 + C101064 + C101063 + C101062) *
               C93949 +
           (C21415 * C47713 + C21414 * C47707 + C16048 * C47715 +
            C16047 * C47708 + (C188 * C15863 + C141309 * C16014) * C47717 +
            (C188 * C15866 + C141309 * C16017) * C47709) *
               C141384) *
              C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5964 * C108 + C5865 * C189 + C5965 * C823 + C5866 * C912 +
             C5966 * C2960 + C5867 * C3026) *
                C55527 +
            (C5964 * C114 + C5865 * C195 + C5965 * C828 + C5866 * C917 +
             C5966 * C2964 + C5867 * C3030) *
                C141216) *
               C93949 +
           ((C103490 + C103491 + C103492) * C55527 +
            (C103493 + C103494 + C103495) * C141216) *
               C141384) *
              C5322 -
          (((C108747 + C108748 + C108749) * C141216 +
            (C108750 + C108751 + C108752) * C55527) *
               C141384 +
           ((C103495 + C103494 + C103493) * C141216 +
            (C103492 + C103491 + C103490) * C55527) *
               C93949) *
              C5323 +
          (((C108752 + C108751 + C108750) * C55527 +
            (C108749 + C108748 + C108747) * C141216) *
               C93949 +
           ((C5964 * C15862 + C5865 * C16013 + C5965 * C18582 + C5866 * C18698 +
             C5966 * C65157 + C5867 * C65267) *
                C55527 +
            (C5964 * C15865 + C5865 * C16016 + C5965 * C18584 + C5866 * C18700 +
             C5966 * C65158 + C5867 * C65268) *
                C141216) *
               C141384) *
              C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q));
    d2eexz[134] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C94102 * C108 + C93949 * C276 + C94103 * C1601 + C141384 * C1784) *
               C47713 +
           (C94102 * C114 + C93949 * C282 + C94103 * C1606 + C141384 * C1789) *
               C47707 +
           (C94129 + C94130) * C47715 + (C94131 + C94132) * C47708 +
           C94141 * C47717 + C94142 * C47709) *
              C141309 * C5322 -
          ((C95977 + C95978) * C47709 + (C95979 + C95980) * C47717 +
           (C95981 + C95982) * C47708 + (C95983 + C95984) * C47715 +
           (C94103 * C5329 + C141384 * C5453 + C94102 * C1606 +
            C93949 * C1789) *
               C47707 +
           (C94103 * C5325 + C141384 * C5449 + C94102 * C1601 +
            C93949 * C1784) *
               C47713) *
              C141309 * C5323 +
          ((C94102 * C5325 + C93949 * C5449 + C94103 * C15862 +
            C141384 * C16151) *
               C47713 +
           (C94102 * C5329 + C93949 * C5453 + C94103 * C15865 +
            C141384 * C16154) *
               C47707 +
           (C94102 * C5326 + C93949 * C5450 + C94103 * C15861 +
            C141384 * C16150) *
               C47715 +
           (C94102 * C5330 + C93949 * C5454 + C94103 * C15864 +
            C141384 * C16153) *
               C47708 +
           (C94102 * C5327 + C93949 * C5451 + C94103 * C15863 +
            C141384 * C16152) *
               C47717 +
           (C94102 * C5331 + C93949 * C5455 + C94103 * C15866 +
            C141384 * C16155) *
               C47709) *
              C141309 * C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C94102 * C108 + C93949 * C276 + C94103 * C1601 + C141384 * C1784) *
                C55527 +
            (C94102 * C114 + C93949 * C282 + C94103 * C1606 + C141384 * C1789) *
                C141216) *
               C5865 +
           ((C102614 + C102615) * C55527 + (C102616 + C102617) * C141216) *
               C5866 +
           C105345 * C5867) *
              C5322 -
          (((C106152 + C106153) * C141216 + (C106154 + C106155) * C55527) *
               C5867 +
           ((C106156 + C106157) * C141216 + (C106158 + C106159) * C55527) *
               C5866 +
           ((C94103 * C5329 + C141384 * C5453 + C94102 * C1606 +
             C93949 * C1789) *
                C141216 +
            (C94103 * C5325 + C141384 * C5449 + C94102 * C1601 +
             C93949 * C1784) *
                C55527) *
               C5865) *
              C5323 +
          (((C94102 * C5325 + C93949 * C5449 + C94103 * C15862 +
             C141384 * C16151) *
                C55527 +
            (C94102 * C5329 + C93949 * C5453 + C94103 * C15865 +
             C141384 * C16154) *
                C141216) *
               C5865 +
           ((C94102 * C13301 + C93949 * C13475 + C94103 * C18582 +
             C141384 * C18820) *
                C55527 +
            (C94102 * C13305 + C93949 * C13479 + C94103 * C18584 +
             C141384 * C18822) *
                C141216) *
               C5866 +
           ((C94102 * C13303 + C93949 * C13477 + C94103 * C65157 +
             C141384 * C65391) *
                C55527 +
            (C94102 * C13307 + C93949 * C13481 + C94103 * C65158 +
             C141384 * C65392) *
                C141216) *
               C5867) *
              C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q));
    d2eeyx[134] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47713 * C108 + C47707 * C114 + C47715 * C109 + C47708 * C115 +
             C47717 * C110 + C47709 * C116) *
                C188 +
            (C47713 * C189 + C47707 * C362 + C47715 * C190 + C47708 * C363 +
             C47717 * C191 + C47709 * C364) *
                C141309) *
               C93949 +
           ((C96107 + C96108 + C96109) * C188 +
            (C96110 + C96111 + C96112) * C141309) *
               C141384) *
              C5322 -
          (((C101228 + C101229 + C101230) * C141309 +
            (C101231 + C101232 + C101233) * C188) *
               C141384 +
           ((C96112 + C96111 + C96110) * C141309 +
            (C96109 + C96108 + C96107) * C188) *
               C93949) *
              C5323 +
          (((C101233 + C101232 + C101231) * C188 +
            (C101230 + C101229 + C101228) * C141309) *
               C93949 +
           ((C47713 * C15862 + C47707 * C15865 + C47715 * C15861 +
             C47708 * C15864 + C47717 * C15863 + C47709 * C15866) *
                C188 +
            (C47713 * C16013 + C47707 * C16273 + C47715 * C16012 +
             C47708 * C16272 + C47717 * C16014 + C47709 * C16274) *
                C141309) *
               C141384) *
              C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C55527 * C108 + C141216 * C114) * C5964 +
            (C55527 * C189 + C141216 * C362) * C5865 + C56299 * C5965 +
            C56300 * C5866 + C56301 * C5966 + C56302 * C5867) *
               C93949 +
           (C103692 + C103693 + C103694 + C103695 + C103696 + C103697) *
               C141384) *
              C5322 -
          ((C108901 + C108902 + C108903 + C108904 + C108905 + C108906) *
               C141384 +
           (C103697 + C103696 + C103695 + C103694 + C103693 + C103692) *
               C93949) *
              C5323 +
          ((C108906 + C108905 + C108904 + C108903 + C108902 + C108901) *
               C93949 +
           (C68191 * C5964 + C68190 * C5865 + C65524 * C5965 + C65523 * C5866 +
            (C55527 * C65157 + C141216 * C65158) * C5966 +
            (C55527 * C65267 + C141216 * C65509) * C5867) *
               C141384) *
              C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q));
    d2eeyy[134] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C418 * C108 + C426 + C426 + C141309 * C419) * C47707 +
            C448 * C47708 + C449 * C47709) *
               C93949 +
           (C96217 + C96218 + C96219) * C141384) *
              C5322 -
          ((C101308 + C101309 + C101310) * C141384 +
           (C96219 + C96218 + C96217) * C93949) *
              C5323 +
          ((C101310 + C101309 + C101308) * C93949 +
           (C21674 * C47707 + C16448 * C47708 +
            (C418 * C15863 + C16439 + C16439 + C141309 * C16423) * C47709) *
               C141384) *
              C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C6237 * C108 + C6241 + C6241 + C5865 * C419 + C6238 * C823 + C6242 +
            C6242 + C5866 * C1171 + C6239 * C2960 + C6243 + C6243 +
            C5867 * C3196) *
               C141216 * C93949 +
           (C103814 + C103815 + C103816) * C141216 * C141384) *
              C5322 -
          ((C108996 + C108997 + C108998) * C141216 * C141384 +
           (C103816 + C103815 + C103814) * C141216 * C93949) *
              C5323 +
          ((C108998 + C108997 + C108996) * C141216 * C93949 +
           (C6237 * C15862 + C108987 + C108987 + C5865 * C16422 +
            C6238 * C18582 + C108988 + C108988 + C5866 * C19034 +
            C6239 * C65157 + C108989 + C108989 + C5867 * C65622) *
               C141216 * C141384) *
              C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q));
    d2eeyz[134] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C94102 * C108 + C93949 * C276 + C94103 * C1601 + C141384 * C1784) *
                C188 +
            (C94102 * C189 + C93949 * C501 + C94103 * C1690 + C141384 * C2040) *
                C141309) *
               C47707 +
           ((C94129 + C94130) * C188 + (C94378 + C94379) * C141309) * C47708 +
           C94386 * C47709) *
              C5322 -
          (((C96329 + C96330) * C141309 + (C95979 + C95980) * C188) * C47709 +
           ((C96331 + C96332) * C141309 + (C95983 + C95984) * C188) * C47708 +
           ((C94103 * C5391 + C141384 * C5619 + C94102 * C1690 +
             C93949 * C2040) *
                C141309 +
            (C94103 * C5325 + C141384 * C5449 + C94102 * C1601 +
             C93949 * C1784) *
                C188) *
               C47707) *
              C5323 +
          (((C94102 * C5325 + C93949 * C5449 + C94103 * C15862 +
             C141384 * C16151) *
                C188 +
            (C94102 * C5391 + C93949 * C5619 + C94103 * C16013 +
             C141384 * C16549) *
                C141309) *
               C47707 +
           ((C94102 * C5326 + C93949 * C5450 + C94103 * C15861 +
             C141384 * C16150) *
                C188 +
            (C94102 * C5392 + C93949 * C5620 + C94103 * C16012 +
             C141384 * C16548) *
                C141309) *
               C47708 +
           ((C94102 * C5327 + C93949 * C5451 + C94103 * C15863 +
             C141384 * C16152) *
                C188 +
            (C94102 * C5393 + C93949 * C5621 + C94103 * C16014 +
             C141384 * C16550) *
                C141309) *
               C47709) *
              C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C94102 * C108 + C93949 * C276 + C94103 * C1601 + C141384 * C1784) *
               C5964 +
           (C94102 * C189 + C93949 * C501 + C94103 * C1690 + C141384 * C2040) *
               C5865 +
           (C102614 + C102615) * C5965 + (C102932 + C102933) * C5866 +
           C105329 * C5966 + C105571 * C5867) *
              C141216 * C5322 -
          ((C106486 + C106487) * C5867 + (C106154 + C106155) * C5966 +
           (C106488 + C106489) * C5866 + (C106158 + C106159) * C5965 +
           (C94103 * C5391 + C141384 * C5619 + C94102 * C1690 +
            C93949 * C2040) *
               C5865 +
           (C94103 * C5325 + C141384 * C5449 + C94102 * C1601 +
            C93949 * C1784) *
               C5964) *
              C141216 * C5323 +
          ((C94102 * C5325 + C93949 * C5449 + C94103 * C15862 +
            C141384 * C16151) *
               C5964 +
           (C94102 * C5391 + C93949 * C5619 + C94103 * C16013 +
            C141384 * C16549) *
               C5865 +
           (C94102 * C13301 + C93949 * C13475 + C94103 * C18582 +
            C141384 * C18820) *
               C5965 +
           (C94102 * C13393 + C93949 * C13719 + C94103 * C18698 +
            C141384 * C19150) *
               C5866 +
           (C94102 * C13303 + C93949 * C13477 + C94103 * C65157 +
            C141384 * C65391) *
               C5966 +
           (C94102 * C13394 + C93949 * C13720 + C94103 * C65267 +
            C141384 * C65743) *
               C5867) *
              C141216 * C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q));
    d2eezx[134] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C47713 * C108 + C47707 * C114 + C47715 * C109 + C47708 * C115 +
            C47717 * C110 + C47709 * C116) *
               C94102 +
           (C47713 * C276 + C47707 * C579 + C47715 * C277 + C47708 * C580 +
            C47717 * C278 + C47709 * C581) *
               C93949 +
           (C96107 + C96108 + C96109) * C94103 +
           (C96443 + C96444 + C96445) * C141384) *
              C141309 * C5322 -
          ((C101465 + C101466 + C101467) * C141384 +
           (C101231 + C101232 + C101233) * C94103 +
           (C96445 + C96444 + C96443) * C93949 +
           (C96109 + C96108 + C96107) * C94102) *
              C141309 * C5323 +
          ((C101233 + C101232 + C101231) * C94102 +
           (C101467 + C101466 + C101465) * C93949 +
           (C47713 * C15862 + C47707 * C15865 + C47715 * C15861 +
            C47708 * C15864 + C47717 * C15863 + C47709 * C15866) *
               C94103 +
           (C47713 * C16151 + C47707 * C16659 + C47715 * C16150 +
            C47708 * C16658 + C47717 * C16152 + C47709 * C16660) *
               C141384) *
              C141309 * C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C55527 * C108 + C141216 * C114) * C94102 +
            (C55527 * C276 + C141216 * C579) * C93949 + C62870 * C94103 +
            C63222 * C141384) *
               C5865 +
           (C103036 + C103037 + C103038 + C103039) * C5866 + C105658 * C5867) *
              C5322 -
          ((C106588 + C106589 + C106590 + C106591) * C5867 +
           (C106592 + C106593 + C106594 + C106595) * C5866 +
           (C63223 * C141384 + C62872 * C94103 + C63222 * C93949 +
            C62870 * C94102) *
               C5865) *
              C5323 +
          ((C62872 * C94102 + C63223 * C93949 + C68191 * C94103 +
            C68436 * C141384) *
               C5865 +
           (C61849 * C94102 + C62177 * C93949 + C65524 * C94103 +
            C65860 * C141384) *
               C5866 +
           (C64649 * C94102 + C64892 * C93949 +
            (C55527 * C65157 + C141216 * C65158) * C94103 +
            (C55527 * C65391 + C141216 * C65851) * C141384) *
               C5867) *
              C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q));
    d2eezy[134] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141309 * C189) * C94102 +
            (C188 * C276 + C141309 * C635) * C93949 + C16043 * C94103 +
            C16798 * C141384) *
               C47707 +
           (C94535 + C94536 + C94537 + C94538) * C47708 + C94549 * C47709) *
              C5322 -
          ((C96547 + C96548 + C96549 + C96550) * C47709 +
           (C96551 + C96552 + C96553 + C96554) * C47708 +
           (C16799 * C141384 + C16045 * C94103 + C16798 * C93949 +
            C16043 * C94102) *
               C47707) *
              C5323 +
          ((C16045 * C94102 + C16799 * C93949 + C21415 * C94103 +
            C21913 * C141384) *
               C47707 +
           (C14127 * C94102 + C14656 * C93949 + C16048 * C94103 +
            C16800 * C141384) *
               C47708 +
           (C14130 * C94102 + C14657 * C93949 +
            (C188 * C15863 + C141309 * C16014) * C94103 +
            (C188 * C16152 + C141309 * C16785) * C141384) *
               C47709) *
              C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C5964 * C108 + C5865 * C189 + C5965 * C823 + C5866 * C912 +
            C5966 * C2960 + C5867 * C3026) *
               C94102 +
           (C5964 * C276 + C5865 * C635 + C5965 * C1006 + C5866 * C1419 +
            C5966 * C3084 + C5867 * C3362) *
               C93949 +
           (C103490 + C103491 + C103492) * C94103 +
           (C104117 + C104118 + C104119) * C141384) *
              C141216 * C5322 -
          ((C109227 + C109228 + C109229) * C141384 +
           (C108750 + C108751 + C108752) * C94103 +
           (C104119 + C104118 + C104117) * C93949 +
           (C103492 + C103491 + C103490) * C94102) *
              C141216 * C5323 +
          ((C108752 + C108751 + C108750) * C94102 +
           (C109229 + C109228 + C109227) * C93949 +
           (C5964 * C15862 + C5865 * C16013 + C5965 * C18582 + C5866 * C18698 +
            C5966 * C65157 + C5867 * C65267) *
               C94103 +
           (C5964 * C16151 + C5865 * C16784 + C5965 * C18820 + C5866 * C19356 +
            C5966 * C65391 + C5867 * C65959) *
               C141384) *
              C141216 * C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q));
    d2eezz[134] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C94623 * C108 + C94626 + C94626 + C93949 * C714 + C94624 * C1601 +
            C94627 + C94627 + C141384 * C2283) *
               C141309 * C47707 +
           (C94660 + C94661) * C141309 * C47708 + C94667 * C47709) *
              C5322 -
          ((C96677 + C96678) * C141309 * C47709 +
           (C96679 + C96680) * C141309 * C47708 +
           (C94624 * C5325 + C96665 + C96665 + C141384 * C5781 +
            C94623 * C1601 + C96666 + C96666 + C93949 * C2283) *
               C141309 * C47707) *
              C5323 +
          ((C94623 * C5325 + C101616 + C101616 + C93949 * C5781 +
            C94624 * C15862 + C101617 + C101617 + C141384 * C16900) *
               C141309 * C47707 +
           (C94623 * C5326 + C101618 + C101618 + C93949 * C5782 +
            C94624 * C15861 + C101619 + C101619 + C141384 * C16899) *
               C141309 * C47708 +
           (C94623 * C5327 + C101620 + C101620 + C93949 * C5783 +
            C94624 * C15863 + C101621 + C101621 + C141384 * C16901) *
               C141309 * C47709) *
              C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C94623 * C108 + C94626 + C94626 + C93949 * C714 + C94624 * C1601 +
            C94627 + C94627 + C141384 * C2283) *
               C5865 +
           (C103276 + C103277) * C5866 + C105807 * C5867) *
              C141216 * C5322 -
          ((C106819 + C106820) * C5867 + (C106821 + C106822) * C5866 +
           (C94624 * C5325 + C96665 + C96665 + C141384 * C5781 +
            C94623 * C1601 + C96666 + C96666 + C93949 * C2283) *
               C5865) *
              C141216 * C5323 +
          ((C94623 * C5325 + C101616 + C101616 + C93949 * C5781 +
            C94624 * C15862 + C101617 + C101617 + C141384 * C16900) *
               C5865 +
           (C94623 * C13301 + C109304 + C109304 + C93949 * C13953 +
            C94624 * C18582 + C109305 + C109305 + C141384 * C19462) *
               C5866 +
           (C94623 * C13303 + C109306 + C109306 + C93949 * C13954 +
            C94624 * C65157 + C109307 + C109307 + C141384 * C66070) *
               C5867) *
              C141216 * C5324) *
         C141277 * C141243) /
            (p * q * std::sqrt(p + q));
}
