/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_pdpp_AB.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
//
void second_derivative_ee_1211_12(const double ae,
                                  const double xA,
                                  const double yA,
                                  const double zA,
                                  const double be,
                                  const double xB,
                                  const double yB,
                                  const double zB,
                                  const double ce,
                                  const double xC,
                                  const double yC,
                                  const double zC,
                                  const double de,
                                  const double xD,
                                  const double yD,
                                  const double zD,
                                  const double* const bs,
                                  double* const d2eexx,
                                  double* const d2eexy,
                                  double* const d2eexz,
                                  double* const d2eeyx,
                                  double* const d2eeyy,
                                  double* const d2eeyz,
                                  double* const d2eezx,
                                  double* const d2eezy,
                                  double* const d2eezz)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    const double C137732 = 0 * ae;
    const double C137731 = ae * be;
    const double C137730 = 0 * be;
    const double C137729 = ae + be;
    const double C137728 = 0 * be;
    const double C137727 = xA - xB;
    const double C137789 = yA - yB;
    const double C137792 = zA - zB;
    const double C137807 = 0 * be;
    const double C137833 = 0 * be;
    const double C137914 = 0 * ae;
    const double C137910 = 0 * be;
    const double C137985 = 0 * ae;
    const double C137981 = 0 * be;
    const double C138033 = p + q;
    const double C138032 = p * q;
    const double C138038 = xP - xQ;
    const double C138037 = bs[2];
    const double C138043 = bs[3];
    const double C138054 = bs[4];
    const double C138075 = bs[5];
    const double C138111 = bs[6];
    const double C138160 = yP - yQ;
    const double C138204 = zP - zQ;
    const double C108 = bs[0];
    const double C139753 = ce + de;
    const double C139752 = ce * de;
    const double C139751 = xC - xD;
    const double C139766 = yC - yD;
    const double C139775 = zC - zD;
    const double C137761 = 2 * C137731;
    const double C137759 = -2 * C137730;
    const double C137737 = C137732 / C137729;
    const double C137734 = 2 * C137729;
    const double C137733 = std::pow(C137729, 2);
    const double C137736 = C137731 * C137727;
    const double C137735 = C137727 * C137730;
    const double C139727 = C137727 * be;
    const double C139726 = C137727 * ae;
    const double C139725 = std::pow(C137727, 2);
    const double C137808 = C137731 * C137789;
    const double C139820 = std::pow(C137789, 2);
    const double C139869 = C137789 * be;
    const double C139868 = C137789 * ae;
    const double C137834 = C137731 * C137792;
    const double C139831 = std::pow(C137792, 2);
    const double C139895 = C137792 * be;
    const double C139894 = C137792 * ae;
    const double C137911 = C137789 * C137807;
    const double C137935 = -2 * C137807;
    const double C137982 = C137792 * C137833;
    const double C138006 = -2 * C137833;
    const double C137919 = C137914 / C137729;
    const double C137990 = C137985 / C137729;
    const double C138034 = 2 * C138032;
    const double C138046 = C138038 * ae;
    const double C138045 = C138038 * be;
    const double C138042 = std::pow(C138038, 2);
    const double C138163 = C138160 * be;
    const double C138162 = C138038 * C138160;
    const double C138250 = C138160 * ae;
    const double C138249 = C138160 * C138038;
    const double C138292 = std::pow(C138160, 2);
    const double C138207 = C138204 * be;
    const double C138206 = C138038 * C138204;
    const double C138313 = C138160 * C138204;
    const double C138331 = C138204 * ae;
    const double C138330 = C138204 * C138038;
    const double C138373 = C138204 * C138160;
    const double C138390 = std::pow(C138204, 2);
    const double C139763 = 2 * C139753;
    const double C139974 = std::pow(C139753, 2);
    const double C139754 = std::pow(C139751, 2);
    const double C139973 = C139751 * de;
    const double C139972 = C139751 * ce;
    const double C139788 = std::pow(C139766, 2);
    const double C139978 = C139766 * de;
    const double C139976 = C139766 * ce;
    const double C139805 = std::pow(C139775, 2);
    const double C139979 = C139775 * de;
    const double C139977 = C139775 * ce;
    const double C137762 = ae * C137759;
    const double C139735 = std::pow(C137734, -1);
    const double C139981 = std::pow(C137734, -2);
    const double C137738 = 2 * C137733;
    const double C137758 = C137733 * C137734;
    const double C139971 = 4 * C137733;
    const double C137739 = C137735 / C137729;
    const double C139728 = C139725 * C137731;
    const double C139821 = C139820 * C137731;
    const double C139832 = C139831 * C137731;
    const double C137916 = C137911 / C137729;
    const double C137938 = ae * C137935;
    const double C137987 = C137982 / C137729;
    const double C138009 = ae * C138006;
    const double C138036 = C138034 / C138033;
    const double C126 =
        ((std::pow(xP - xQ, 2) * bs[2] * std::pow(C138034 / C138033, 2) -
          (bs[1] * C138034) / C138033) *
         C137731) /
        C137733;
    const double C109 = -(C138038 * bs[1] * C138034) / C138033;
    const double C813 = -(C138160 * bs[1] * C138034) / C138033;
    const double C1570 = -(C138204 * bs[1] * C138034) / C138033;
    const double C138049 = C138043 * C138046;
    const double C138060 = C138054 * C138046;
    const double C138083 = C138075 * C138046;
    const double C138123 = C138111 * C138046;
    const double C115 = (-(bs[1] * C138046 * C138034) / C138033) / C137729;
    const double C138048 = C138043 * C138045;
    const double C138057 = C138054 * C138045;
    const double C138079 = C138075 * C138045;
    const double C138119 = C138111 * C138045;
    const double C114 = (-(bs[1] * C138045 * C138034) / C138033) / C137729;
    const double C138056 = C138042 * C138054;
    const double C138078 = C138042 * C138075;
    const double C138118 = C138042 * C138111;
    const double C138165 = C138043 * C138163;
    const double C138170 = C138054 * C138163;
    const double C138177 = C138075 * C138163;
    const double C138188 = C138111 * C138163;
    const double C183 = (-(bs[1] * C138163 * C138034) / C138033) / C137729;
    const double C138164 = C138162 * ae;
    const double C138252 = C138043 * C138250;
    const double C138257 = C138054 * C138250;
    const double C138264 = C138075 * C138250;
    const double C138275 = C138111 * C138250;
    const double C348 = (-(bs[1] * C138250 * C138034) / C138033) / C137729;
    const double C138251 = C138249 * ae;
    const double C138294 = C138292 * C138054;
    const double C138299 = C138292 * C138075;
    const double C138304 = C138292 * C138111;
    const double C138209 = C138043 * C138207;
    const double C138214 = C138054 * C138207;
    const double C138221 = C138075 * C138207;
    const double C138232 = C138111 * C138207;
    const double C266 = (-(bs[1] * C138207 * C138034) / C138033) / C137729;
    const double C138208 = C138206 * ae;
    const double C138314 = C138313 * ae;
    const double C138333 = C138043 * C138331;
    const double C138338 = C138054 * C138331;
    const double C138345 = C138075 * C138331;
    const double C138356 = C138111 * C138331;
    const double C567 = (-(bs[1] * C138331 * C138034) / C138033) / C137729;
    const double C138332 = C138330 * ae;
    const double C138374 = C138373 * ae;
    const double C138392 = C138390 * C138054;
    const double C138397 = C138390 * C138075;
    const double C138402 = C138390 * C138111;
    const double C139975 = std::pow(C139763, -1);
    const double C139997 = 2 * C139974;
    const double C139755 = C139754 * C139752;
    const double C139789 = C139788 * C139752;
    const double C139806 = C139805 * C139752;
    const double C137744 = C137730 / C137738;
    const double C137742 = C137728 / C137738;
    const double C137913 = C137807 / C137738;
    const double C137917 = C137910 / C137738;
    const double C137984 = C137833 / C137738;
    const double C137988 = C137981 / C137738;
    const double C137741 = 0 - C137739;
    const double C139729 = C139728 / C137729;
    const double C139822 = C139821 / C137729;
    const double C139833 = C139832 / C137729;
    const double C137920 = 0 - C137916;
    const double C137991 = 0 - C137987;
    const double C138039 = std::pow(C138036, 2);
    const double C138044 = -C138036;
    const double C138055 = std::pow(C138036, 4);
    const double C138112 = std::pow(C138036, 6);
    const double C138166 = C138164 * be;
    const double C138253 = C138251 * be;
    const double C138210 = C138208 * be;
    const double C138315 = C138314 * be;
    const double C138334 = C138332 * be;
    const double C138375 = C138374 * be;
    const double C139756 = C139755 / C139753;
    const double C139790 = C139789 / C139753;
    const double C139807 = C139806 / C139753;
    const double C137746 = C137741 * ae;
    const double C139730 = -C139729;
    const double C139823 = -C139822;
    const double C139834 = -C139833;
    const double C137923 = C137920 * ae;
    const double C137994 = C137991 * ae;
    const double C138041 = C138037 * C138039;
    const double C127 = (ae * C138039 * C138037 * C138038 * be +
                         be * C138039 * C138037 * C138038 * ae +
                         C138038 *
                             (C138037 * C138039 + std::pow(C138038, 2) * bs[3] *
                                                      std::pow(-C138036, 3)) *
                             C137731) /
                        C137733;
    const double C189 =
        (C138039 * C138037 * C138038 * (yP - yQ) * ae * be) / C137733;
    const double C272 =
        (C138039 * C138037 * C138038 * (zP - zQ) * ae * be) / C137733;
    const double C354 =
        (C138039 * C138037 * C138160 * C138038 * ae * be) / C137733;
    const double C411 = ((std::pow(C138160, 2) * C138037 * C138039 -
                          (bs[1] * C138034) / C138033) *
                         C137731) /
                        C137733;
    const double C495 =
        (C138039 * C138037 * C138160 * C138204 * ae * be) / C137733;
    const double C573 =
        (C138039 * C138037 * C138204 * C138038 * ae * be) / C137733;
    const double C629 =
        (C138039 * C138037 * C138204 * C138160 * ae * be) / C137733;
    const double C702 = ((std::pow(C138204, 2) * C138037 * C138039 -
                          (bs[1] * C138034) / C138033) *
                         C137731) /
                        C137733;
    const double C116 = (C138038 * C138039 * C138037 * C138045) / C137729 -
                        (be * bs[1] * C138034) / (C138033 * C137729);
    const double C117 = (C138038 * C138039 * C138037 * C138046) / C137729 -
                        (ae * bs[1] * C138034) / (C138033 * C137729);
    const double C184 = (C138038 * C138039 * C138037 * C138163) / C137729;
    const double C267 = (C138038 * C138039 * C138037 * C138207) / C137729;
    const double C349 = (C138038 * C138039 * C138037 * C138250) / C137729;
    const double C568 = (C138038 * C138039 * C138037 * C138331) / C137729;
    const double C821 = (C138160 * C138039 * C138037 * C138045) / C137729;
    const double C822 = (C138160 * C138039 * C138037 * C138046) / C137729;
    const double C896 = (C138160 * C138039 * C138037 * C138163) / C137729 -
                        (be * bs[1] * C138034) / (C138033 * C137729);
    const double C984 = (C138160 * C138039 * C138037 * C138207) / C137729;
    const double C1072 = (C138160 * C138039 * C138037 * C138250) / C137729 -
                         (ae * bs[1] * C138034) / (C138033 * C137729);
    const double C1317 = (C138160 * C138039 * C138037 * C138331) / C137729;
    const double C1578 = (C138204 * C138039 * C138037 * C138045) / C137729;
    const double C1579 = (C138204 * C138039 * C138037 * C138046) / C137729;
    const double C1653 = (C138204 * C138039 * C138037 * C138163) / C137729;
    const double C1741 = (C138204 * C138039 * C138037 * C138207) / C137729 -
                         (be * bs[1] * C138034) / (C138033 * C137729);
    const double C1829 = (C138204 * C138039 * C138037 * C138250) / C137729;
    const double C2074 = (C138204 * C138039 * C138037 * C138331) / C137729 -
                         (ae * bs[1] * C138034) / (C138033 * C137729);
    const double C138047 = std::pow(C138044, 3);
    const double C138076 = std::pow(C138044, 5);
    const double C138064 = C138055 * C138060;
    const double C138063 = C138055 * C138057;
    const double C138062 = C138056 * C138055;
    const double C138074 = C138054 * C138055;
    const double C138172 = C138055 * C138170;
    const double C138216 = C138055 * C138214;
    const double C138259 = C138055 * C138257;
    const double C138295 = C138294 * C138055;
    const double C138340 = C138055 * C138338;
    const double C138393 = C138392 * C138055;
    const double C138130 = C138112 * C138123;
    const double C138127 = C138112 * C138119;
    const double C138126 = C138118 * C138112;
    const double C138192 = C138112 * C138188;
    const double C138236 = C138112 * C138232;
    const double C138279 = C138112 * C138275;
    const double C138305 = C138304 * C138112;
    const double C138360 = C138112 * C138356;
    const double C138403 = C138402 * C138112;
    const double C138169 = C138054 * C138166;
    const double C138176 = C138075 * C138166;
    const double C138187 = C138111 * C138166;
    const double C138256 = C138054 * C138253;
    const double C138263 = C138075 * C138253;
    const double C138274 = C138111 * C138253;
    const double C138213 = C138054 * C138210;
    const double C138220 = C138075 * C138210;
    const double C138231 = C138111 * C138210;
    const double C138317 = C138054 * C138315;
    const double C138320 = C138075 * C138315;
    const double C138323 = C138111 * C138315;
    const double C138337 = C138054 * C138334;
    const double C138344 = C138075 * C138334;
    const double C138355 = C138111 * C138334;
    const double C138377 = C138054 * C138375;
    const double C138380 = C138075 * C138375;
    const double C138383 = C138111 * C138375;
    const double C139757 = -C139756;
    const double C139791 = -C139790;
    const double C139808 = -C139807;
    const double C137749 = C137746 / C137729;
    const double C139731 = std::exp(C139730);
    const double C139824 = std::exp(C139823);
    const double C139835 = std::exp(C139834);
    const double C137924 = C137923 / C137729;
    const double C137995 = C137994 / C137729;
    const double C110 = C138041 * C138042 - (bs[1] * C138034) / C138033;
    const double C812 = C138160 * C138038 * C138041;
    const double C1569 = C138204 * C138038 * C138041;
    const double C2908 = C138041 * C138292 - (bs[1] * C138034) / C138033;
    const double C3438 = C138204 * C138160 * C138041;
    const double C5273 = C138041 * C138390 - (bs[1] * C138034) / C138033;
    const double C138051 = C138047 * C138049;
    const double C138050 = C138047 * C138048;
    const double C138053 = C138043 * C138047;
    const double C138167 = C138047 * C138165;
    const double C138211 = C138047 * C138209;
    const double C138254 = C138047 * C138252;
    const double C138335 = C138047 * C138333;
    const double C190 =
        (ae * C138039 * C138037 * C138160 * be +
         C138038 * C138047 * C138043 * C138038 * C138160 * ae * be) /
        C137733;
    const double C273 =
        (ae * C138039 * C138037 * C138204 * be +
         C138038 * C138047 * C138043 * C138038 * C138204 * ae * be) /
        C137733;
    const double C355 =
        (be * C138039 * C138037 * C138160 * ae +
         C138038 * C138047 * C138043 * C138160 * C138038 * ae * be) /
        C137733;
    const double C412 =
        (C138038 * (C138041 + std::pow(C138160, 2) * C138043 * C138047) *
         C137731) /
        C137733;
    const double C496 =
        (C138038 * C138047 * C138043 * C138160 * C138204 * ae * be) / C137733;
    const double C497 =
        (C138047 * C138043 * C138315 + C138055 * C138054 * C138315 * C138042) /
        C137733;
    const double C574 =
        (be * C138039 * C138037 * C138204 * ae +
         C138038 * C138047 * C138043 * C138204 * C138038 * ae * be) /
        C137733;
    const double C630 =
        (C138038 * C138047 * C138043 * C138204 * C138160 * ae * be) / C137733;
    const double C631 =
        (C138047 * C138043 * C138375 + C138055 * C138054 * C138375 * C138042) /
        C137733;
    const double C703 =
        (C138038 * (C138041 + std::pow(C138204, 2) * C138043 * C138047) *
         C137731) /
        C137733;
    const double C828 =
        (C138160 * (C138041 + C138042 * C138043 * C138047) * C137731) / C137733;
    const double C901 = (be * C138039 * C138037 * C138046 +
                         C138160 * C138047 * C138043 * C138166) /
                        C137733;
    const double C989 = (C138160 * C138047 * C138043 * C138210) / C137733;
    const double C1077 = (ae * C138039 * C138037 * C138045 +
                          C138160 * C138047 * C138043 * C138253) /
                         C137733;
    const double C1151 =
        (ae * C138039 * C138037 * C138163 + be * C138039 * C138037 * C138250 +
         C138160 * (C138041 + C138292 * C138043 * C138047) * C137731) /
        C137733;
    const double C1240 = (ae * C138039 * C138037 * C138207 +
                          C138160 * C138047 * C138043 * C138315) /
                         C137733;
    const double C1322 = (C138160 * C138047 * C138043 * C138334) / C137733;
    const double C1393 = (be * C138039 * C138037 * C138331 +
                          C138160 * C138047 * C138043 * C138375) /
                         C137733;
    const double C1473 =
        (C138160 * (C138041 + C138390 * C138043 * C138047) * C137731) / C137733;
    const double C1585 =
        (C138204 * (C138041 + C138042 * C138043 * C138047) * C137731) / C137733;
    const double C1658 = (C138204 * C138047 * C138043 * C138166) / C137733;
    const double C1746 = (be * C138039 * C138037 * C138046 +
                          C138204 * C138047 * C138043 * C138210) /
                         C137733;
    const double C1834 = (C138204 * C138047 * C138043 * C138253) / C137733;
    const double C1908 =
        (C138204 * (C138041 + C138292 * C138043 * C138047) * C137731) / C137733;
    const double C1997 = (be * C138039 * C138037 * C138250 +
                          C138204 * C138047 * C138043 * C138315) /
                         C137733;
    const double C2079 = (ae * C138039 * C138037 * C138045 +
                          C138204 * C138047 * C138043 * C138334) /
                         C137733;
    const double C2150 = (ae * C138039 * C138037 * C138163 +
                          C138204 * C138047 * C138043 * C138375) /
                         C137733;
    const double C2230 =
        (ae * C138039 * C138037 * C138207 + be * C138039 * C138037 * C138331 +
         C138204 * (C138041 + C138390 * C138043 * C138047) * C137731) /
        C137733;
    const double C138089 = C138076 * C138083;
    const double C138086 = C138076 * C138079;
    const double C138085 = C138078 * C138076;
    const double C138110 = C138075 * C138076;
    const double C138179 = C138076 * C138177;
    const double C138223 = C138076 * C138221;
    const double C138266 = C138076 * C138264;
    const double C138300 = C138299 * C138076;
    const double C138347 = C138076 * C138345;
    const double C138398 = C138397 * C138076;
    const double C138067 = C138038 * C138064;
    const double C138073 = be * C138064;
    const double C138705 = C138160 * C138064;
    const double C138966 = C138204 * C138064;
    const double C138066 = C138038 * C138063;
    const double C138072 = ae * C138063;
    const double C138719 = C138160 * C138063;
    const double C138990 = C138204 * C138063;
    const double C138084 = C138074 * ae;
    const double C138082 = C138074 * C138042;
    const double C138081 = C138038 * C138074;
    const double C138080 = C138074 * be;
    const double C138735 = C138074 * C138292;
    const double C138734 = C138160 * C138074;
    const double C139018 = C138074 * C138390;
    const double C139017 = C138204 * C138074;
    const double C138175 = ae * C138172;
    const double C138174 = C138038 * C138172;
    const double C138649 = C138160 * C138172;
    const double C139002 = C138204 * C138172;
    const double C138219 = ae * C138216;
    const double C138218 = C138038 * C138216;
    const double C138772 = C138160 * C138216;
    const double C138910 = C138204 * C138216;
    const double C138262 = be * C138259;
    const double C138261 = C138038 * C138259;
    const double C138651 = C138160 * C138259;
    const double C138982 = C138204 * C138259;
    const double C138343 = be * C138340;
    const double C138342 = C138038 * C138340;
    const double C138788 = C138160 * C138340;
    const double C138912 = C138204 * C138340;
    const double C138136 = C138038 * C138130;
    const double C139056 = C138130 * C138292;
    const double C139205 = C138160 * C138130;
    const double C139261 = C138130 * C138390;
    const double C138133 = C138038 * C138127;
    const double C139070 = C138127 * C138292;
    const double C139220 = C138160 * C138127;
    const double C139278 = C138127 * C138390;
    const double C138195 = C138192 * C138042;
    const double C138752 = C138038 * C138192;
    const double C139083 = C138160 * C138192;
    const double C139289 = C138192 * C138390;
    const double C138239 = C138236 * C138042;
    const double C138780 = C138038 * C138236;
    const double C139119 = C138236 * C138292;
    const double C139234 = C138160 * C138236;
    const double C139302 = C138204 * C138236;
    const double C138282 = C138279 * C138042;
    const double C138755 = C138038 * C138279;
    const double C139088 = C138160 * C138279;
    const double C139214 = C138279 * C138390;
    const double C138363 = C138360 * C138042;
    const double C138796 = C138038 * C138360;
    const double C139134 = C138360 * C138292;
    const double C139237 = C138160 * C138360;
    const double C139308 = C138204 * C138360;
    const double C138171 = C138055 * C138169;
    const double C138178 = C138076 * C138176;
    const double C138190 = C138112 * C138187;
    const double C138258 = C138055 * C138256;
    const double C138265 = C138076 * C138263;
    const double C138277 = C138112 * C138274;
    const double C138215 = C138055 * C138213;
    const double C138222 = C138076 * C138220;
    const double C138234 = C138112 * C138231;
    const double C138318 = C138055 * C138317;
    const double C138321 = C138076 * C138320;
    const double C138324 = C138112 * C138323;
    const double C138339 = C138055 * C138337;
    const double C138346 = C138076 * C138344;
    const double C138358 = C138112 * C138355;
    const double C138378 = C138055 * C138377;
    const double C138381 = C138076 * C138380;
    const double C138384 = C138112 * C138383;
    const double C139758 = std::exp(C139757);
    const double C139792 = std::exp(C139791);
    const double C139809 = std::exp(C139808);
    const double C137751 = C137749 - C137742;
    const double C55513 = C139731 * C821;
    const double C61976 = C139731 * C1578;
    const double C137740 = C137736 * C139731;
    const double C139732 = C139731 * C139726;
    const double C139736 = C139735 * C139731;
    const double C139968 = C139731 * C139727;
    const double C139965 = C139731 / C137734;
    const double C47133 = C139981 * C139731;
    const double C196 = C139824 * C184;
    const double C15795 = C139824 * C1653;
    const double C137809 = C137808 * C139824;
    const double C182 = -(2 * C137731 * (yA - yB) * C139824) / C137729;
    const double C410 =
        -((C139824 - (C137789 * 2 * C137731 * C137789 * C139824) / C137729) *
          C137761) /
        C137729;
    const double C139870 = C139824 * C139868;
    const double C139873 = C139735 * C139824;
    const double C139985 = C139824 * C139869;
    const double C139980 = C139824 / C137734;
    const double C5815 = C139981 * C139824;
    const double C279 = C139835 * C267;
    const double C6915 = C139835 * C984;
    const double C137835 = C137834 * C139835;
    const double C265 = -(2 * C137731 * (zA - zB) * C139835) / C137729;
    const double C701 =
        -((C139835 - (C137792 * 2 * C137731 * C137792 * C139835) / C137729) *
          C137761) /
        C137729;
    const double C139896 = C139835 * C139894;
    const double C139899 = C139735 * C139835;
    const double C139989 = C139835 * C139895;
    const double C139982 = C139835 / C137734;
    const double C13858 = C139981 * C139835;
    const double C137925 = C137924 - C137917;
    const double C137996 = C137995 - C137988;
    const double C119 = (C138039 * C138037 * C138046 +
                         C138038 * (C138038 * C138051 + C138041 * ae) +
                         C138038 * C138041 * ae) /
                        C137729;
    const double C820 =
        (C138160 * (C138038 * C138051 + C138041 * ae)) / C137729;
    const double C1577 =
        (C138204 * (C138038 * C138051 + C138041 * ae)) / C137729;
    const double C2913 =
        (C138039 * C138037 * C138046 + C138051 * C138292) / C137729;
    const double C3443 = (C138204 * C138160 * C138051) / C137729;
    const double C5278 =
        (C138039 * C138037 * C138046 + C138051 * C138390) / C137729;
    const double C6632 =
        (2 * C138160 * C138051 + C138160 * (C138051 + C138064 * C138292)) /
        C137729;
    const double C7759 = (C138204 * (C138051 + C138064 * C138292)) / C137729;
    const double C15628 =
        (2 * C138204 * C138051 + C138204 * (C138051 + C138064 * C138390)) /
        C137729;
    const double C128 =
        ((C138041 + C138042 * C138043 * C138047) * C137731 +
         ae * (C138038 * C138050 + C138041 * be) +
         be * (C138038 * C138051 + C138041 * ae) +
         C138038 *
             (ae * C138050 + be * C138051 +
              C138038 *
                  (C138043 * C138047 + C138042 * bs[4] * std::pow(C138036, 4)) *
                  C137731)) /
        C137733;
    const double C118 = (C138039 * C138037 * C138045 +
                         C138038 * (C138038 * C138050 + C138041 * be) +
                         C138038 * C138041 * be) /
                        C137729;
    const double C819 =
        (C138160 * (C138038 * C138050 + C138041 * be)) / C137729;
    const double C1576 =
        (C138204 * (C138038 * C138050 + C138041 * be)) / C137729;
    const double C2912 =
        (C138039 * C138037 * C138045 + C138050 * C138292) / C137729;
    const double C3442 = (C138204 * C138160 * C138050) / C137729;
    const double C5277 =
        (C138039 * C138037 * C138045 + C138050 * C138390) / C137729;
    const double C6631 =
        (2 * C138160 * C138050 + C138160 * (C138050 + C138063 * C138292)) /
        C137729;
    const double C7758 = (C138204 * (C138050 + C138063 * C138292)) / C137729;
    const double C15627 =
        (2 * C138204 * C138050 + C138204 * (C138050 + C138063 * C138390)) /
        C137729;
    const double C138061 = C138053 * ae;
    const double C138059 = C138038 * C138053;
    const double C138058 = C138053 * be;
    const double C138065 = C138053 + C138062;
    const double C138296 = C138053 + C138295;
    const double C138394 = C138053 + C138393;
    const double C138650 = C138160 * C138053;
    const double C138911 = C138204 * C138053;
    const double C413 =
        ((C138041 + C138292 * C138043 * C138047) * C137731 +
         (C138053 + C138292 * C138054 * C138055) * C137731 * C138042) /
        C137733;
    const double C704 =
        ((C138041 + C138390 * C138043 * C138047) * C137731 +
         (C138053 + C138390 * C138054 * C138055) * C137731 * C138042) /
        C137733;
    const double C111 =
        2 * C138038 * C138041 + C138038 * (C138041 + C138053 * C138042);
    const double C811 = C138160 * (C138041 + C138053 * C138042);
    const double C1568 = C138204 * (C138041 + C138053 * C138042);
    const double C6627 =
        2 * C138160 * C138041 + C138160 * (C138041 + C138053 * C138292);
    const double C7754 = C138204 * (C138041 + C138053 * C138292);
    const double C15623 =
        2 * C138204 * C138041 + C138204 * (C138041 + C138053 * C138390);
    const double C191 =
        (C138047 * C138043 * C138166 + ae * C138038 * C138167 +
         C138038 * (ae * C138167 + C138038 * C138055 * C138054 * C138166)) /
        C137733;
    const double C185 =
        (C138039 * C138037 * C138163 + C138167 * C138042) / C137729;
    const double C186 =
        (2 * C138038 * C138167 + C138038 * (C138167 + C138172 * C138042)) /
        C137729;
    const double C897 =
        (C138160 * C138038 * C138167 + C138038 * C138041 * be) / C137729;
    const double C898 = (C138160 * (C138167 + C138172 * C138042) +
                         (C138041 + C138053 * C138042) * be) /
                        C137729;
    const double C1654 = (C138204 * C138038 * C138167) / C137729;
    const double C1655 = (C138204 * (C138167 + C138172 * C138042)) / C137729;
    const double C2974 = (C138039 * C138037 * C138163 +
                          C138160 * (C138160 * C138167 + C138041 * be) +
                          C138160 * C138041 * be) /
                         C137729;
    const double C3520 =
        (C138204 * (C138160 * C138167 + C138041 * be)) / C137729;
    const double C5339 =
        (C138039 * C138037 * C138163 + C138167 * C138390) / C137729;
    const double C15788 =
        (2 * C138204 * C138167 + C138204 * (C138167 + C138172 * C138390)) /
        C137729;
    const double C274 =
        (C138047 * C138043 * C138210 + ae * C138038 * C138211 +
         C138038 * (ae * C138211 + C138038 * C138055 * C138054 * C138210)) /
        C137733;
    const double C268 =
        (C138039 * C138037 * C138207 + C138211 * C138042) / C137729;
    const double C269 =
        (2 * C138038 * C138211 + C138038 * (C138211 + C138216 * C138042)) /
        C137729;
    const double C985 = (C138160 * C138038 * C138211) / C137729;
    const double C986 = (C138160 * (C138211 + C138216 * C138042)) / C137729;
    const double C1742 =
        (C138204 * C138038 * C138211 + C138038 * C138041 * be) / C137729;
    const double C1743 = (C138204 * (C138211 + C138216 * C138042) +
                          (C138041 + C138053 * C138042) * be) /
                         C137729;
    const double C3032 =
        (C138039 * C138037 * C138207 + C138211 * C138292) / C137729;
    const double C3594 =
        (C138204 * C138160 * C138211 + C138160 * C138041 * be) / C137729;
    const double C5397 = (C138039 * C138037 * C138207 +
                          C138204 * (C138204 * C138211 + C138041 * be) +
                          C138204 * C138041 * be) /
                         C137729;
    const double C6908 =
        (2 * C138160 * C138211 + C138160 * (C138211 + C138216 * C138292)) /
        C137729;
    const double C7979 = (C138204 * (C138211 + C138216 * C138292) +
                          (C138041 + C138053 * C138292) * be) /
                         C137729;
    const double C356 =
        (C138047 * C138043 * C138253 + be * C138038 * C138254 +
         C138038 * (be * C138254 + C138038 * C138055 * C138054 * C138253)) /
        C137733;
    const double C350 =
        (C138039 * C138037 * C138250 + C138254 * C138042) / C137729;
    const double C351 =
        (2 * C138038 * C138254 + C138038 * (C138254 + C138259 * C138042)) /
        C137729;
    const double C1073 =
        (C138160 * C138038 * C138254 + C138038 * C138041 * ae) / C137729;
    const double C1074 = (C138160 * (C138254 + C138259 * C138042) +
                          (C138041 + C138053 * C138042) * ae) /
                         C137729;
    const double C1830 = (C138204 * C138038 * C138254) / C137729;
    const double C1831 = (C138204 * (C138254 + C138259 * C138042)) / C137729;
    const double C3090 = (C138039 * C138037 * C138250 +
                          C138160 * (C138160 * C138254 + C138041 * ae) +
                          C138160 * C138041 * ae) /
                         C137729;
    const double C3668 =
        (C138204 * (C138160 * C138254 + C138041 * ae)) / C137729;
    const double C5455 =
        (C138039 * C138037 * C138250 + C138254 * C138390) / C137729;
    const double C16028 =
        (2 * C138204 * C138254 + C138204 * (C138254 + C138259 * C138390)) /
        C137729;
    const double C575 =
        (C138047 * C138043 * C138334 + be * C138038 * C138335 +
         C138038 * (be * C138335 + C138038 * C138055 * C138054 * C138334)) /
        C137733;
    const double C569 =
        (C138039 * C138037 * C138331 + C138335 * C138042) / C137729;
    const double C570 =
        (2 * C138038 * C138335 + C138038 * (C138335 + C138340 * C138042)) /
        C137729;
    const double C1318 = (C138160 * C138038 * C138335) / C137729;
    const double C1319 = (C138160 * (C138335 + C138340 * C138042)) / C137729;
    const double C2075 =
        (C138204 * C138038 * C138335 + C138038 * C138041 * ae) / C137729;
    const double C2076 = (C138204 * (C138335 + C138340 * C138042) +
                          (C138041 + C138053 * C138042) * ae) /
                         C137729;
    const double C3256 =
        (C138039 * C138037 * C138331 + C138335 * C138292) / C137729;
    const double C3882 =
        (C138204 * C138160 * C138335 + C138160 * C138041 * ae) / C137729;
    const double C5621 = (C138039 * C138037 * C138331 +
                          C138204 * (C138204 * C138335 + C138041 * ae) +
                          C138204 * C138041 * ae) /
                         C137729;
    const double C7401 =
        (2 * C138160 * C138335 + C138160 * (C138335 + C138340 * C138292)) /
        C137729;
    const double C8422 = (C138204 * (C138335 + C138340 * C138292) +
                          (C138041 + C138053 * C138292) * ae) /
                         C137729;
    const double C198 = C139824 * C190;
    const double C281 = C139835 * C273;
    const double C421 = C139824 * C412;
    const double C502 = C139835 * C496;
    const double C505 = C139835 * C497;
    const double C636 = C139824 * C630;
    const double C639 = C139824 * C631;
    const double C712 = C139835 * C703;
    const double C55270 = C139731 * C828;
    const double C6917 = C139835 * C989;
    const double C55515 = C139731 * C1077;
    const double C7294 = C139835 * C1240;
    const double C55735 = C139731 * C1322;
    const double C7635 = C139835 * C1473;
    const double C61633 = C139731 * C1585;
    const double C15797 = C139824 * C1658;
    const double C61978 = C139731 * C1834;
    const double C16171 = C139824 * C1908;
    const double C62328 = C139731 * C2079;
    const double C16525 = C139824 * C2150;
    const double C138093 = C138038 * C138089;
    const double C138109 = be * C138089;
    const double C138415 = C138160 * C138089;
    const double C138469 = C138204 * C138089;
    const double C138707 = C138089 * C138292;
    const double C138968 = C138089 * C138390;
    const double C138092 = C138038 * C138086;
    const double C138108 = ae * C138086;
    const double C138414 = C138160 * C138086;
    const double C138468 = C138204 * C138086;
    const double C138721 = C138086 * C138292;
    const double C138992 = C138086 * C138390;
    const double C138091 = C138074 + C138085;
    const double C138124 = C138110 * ae;
    const double C138122 = C138110 * C138042;
    const double C138121 = C138038 * C138110;
    const double C138120 = C138110 * be;
    const double C138132 = C138110 + C138126;
    const double C138306 = C138110 + C138305;
    const double C138404 = C138110 + C138403;
    const double C139085 = C138110 * C138292;
    const double C139084 = C138160 * C138110;
    const double C139213 = C138110 * C138390;
    const double C139303 = C138204 * C138110;
    const double C138181 = C138179 * C138042;
    const double C138186 = ae * C138179;
    const double C138185 = C138038 * C138179;
    const double C138733 = C138160 * C138179;
    const double C139004 = C138179 * C138390;
    const double C139153 = C138204 * C138179;
    const double C138225 = C138223 * C138042;
    const double C138230 = ae * C138223;
    const double C138229 = C138038 * C138223;
    const double C138774 = C138223 * C138292;
    const double C138945 = C138160 * C138223;
    const double C139016 = C138204 * C138223;
    const double C138268 = C138266 * C138042;
    const double C138273 = be * C138266;
    const double C138272 = C138038 * C138266;
    const double C138736 = C138160 * C138266;
    const double C138983 = C138266 * C138390;
    const double C139154 = C138204 * C138266;
    const double C138301 = C138074 + C138300;
    const double C138349 = C138347 * C138042;
    const double C138354 = be * C138347;
    const double C138353 = C138038 * C138347;
    const double C138790 = C138347 * C138292;
    const double C138947 = C138160 * C138347;
    const double C139019 = C138204 * C138347;
    const double C138399 = C138074 + C138398;
    const double C13131 = (C138160 * C138051 + C138705 * C138390) / C137729;
    const double C138077 = C138072 + C138073;
    const double C13130 = (C138160 * C138050 + C138719 * C138390) / C137729;
    const double C138088 = C138053 + C138082;
    const double C138090 = C138081 * ae;
    const double C138087 = C138081 * be;
    const double C138114 = 2 * C138081;
    const double C138644 = C138160 * C138081;
    const double C138905 = C138204 * C138081;
    const double C138740 = C138053 + C138735;
    const double C138742 = C138734 * ae;
    const double C138739 = C138734 * be;
    const double C138946 = C138204 * C138734;
    const double C139086 = 2 * C138734;
    const double C139023 = C138053 + C139018;
    const double C139025 = C139017 * ae;
    const double C139022 = C139017 * be;
    const double C139305 = 2 * C139017;
    const double C5340 = (C138038 * C138167 + C138174 * C138390) / C137729;
    const double C3033 = (C138038 * C138211 + C138218 * C138292) / C137729;
    const double C138731 = C138175 + C138262;
    const double C5456 = (C138038 * C138254 + C138261 * C138390) / C137729;
    const double C139014 = C138219 + C138343;
    const double C3257 = (C138038 * C138335 + C138342 * C138292) / C137729;
    const double C139058 = C138089 + C139056;
    const double C139207 = C139205 * C138390;
    const double C139263 = C138089 + C139261;
    const double C139072 = C138086 + C139070;
    const double C139222 = C139220 * C138390;
    const double C139280 = C138086 + C139278;
    const double C138197 = C138179 + C138195;
    const double C138757 = C138160 * C138752;
    const double C139010 = C138752 * C138390;
    const double C139291 = C138179 + C139289;
    const double C138241 = C138223 + C138239;
    const double C138782 = C138780 * C138292;
    const double C138954 = C138160 * C138780;
    const double C139035 = C138204 * C138780;
    const double C139122 = C138223 + C139119;
    const double C139239 = C138204 * C139234;
    const double C138284 = C138266 + C138282;
    const double C138760 = C138160 * C138755;
    const double C138987 = C138755 * C138390;
    const double C139216 = C138266 + C139214;
    const double C138365 = C138347 + C138363;
    const double C138798 = C138796 * C138292;
    const double C138956 = C138160 * C138796;
    const double C139038 = C138204 * C138796;
    const double C139137 = C138347 + C139134;
    const double C139242 = C138204 * C139237;
    const double C192 =
        (2 * (ae * C138167 + C138038 * C138171) +
         ae * (C138167 + C138172 * C138042) +
         C138038 * (C138171 + ae * C138038 * C138172 +
                    C138038 * (ae * C138172 +
                               C138038 * C138076 * C138075 * C138166))) /
        C137733;
    const double C902 = (be * (C138038 * C138051 + C138041 * ae) +
                         C138160 * (ae * C138167 + C138038 * C138171)) /
                        C137733;
    const double C1659 =
        (C138204 * (ae * C138167 + C138038 * C138171)) / C137733;
    const double C2978 = (C138047 * C138043 * C138166 + be * C138160 * C138051 +
                          C138160 * (be * C138051 + C138160 * C138171)) /
                         C137733;
    const double C3524 =
        (C138204 * (be * C138051 + C138160 * C138171)) / C137733;
    const double C5343 =
        (C138047 * C138043 * C138166 + C138171 * C138390) / C137733;
    const double C138180 = C138038 * C138178;
    const double C138706 = C138160 * C138178;
    const double C6795 = (2 * (be * C138051 + C138160 * C138171) +
                          be * (C138051 + C138064 * C138292) +
                          C138160 * (C138171 + be * C138160 * C138064 +
                                     C138160 * (C138073 + C138160 * C138178))) /
                         C137733;
    const double C7866 = (C138204 * (C138171 + be * C138160 * C138064 +
                                     C138160 * (C138073 + C138160 * C138178))) /
                         C137733;
    const double C15791 =
        (2 * C138204 * C138171 + C138204 * (C138171 + C138178 * C138390)) /
        C137733;
    const double C138194 = C138038 * C138190;
    const double C139054 = C138160 * C138190;
    const double C139255 = C138190 * C138390;
    const double C21111 =
        (3 * (C138171 + C138178 * C138390) +
         C138204 * (2 * C138204 * C138178 +
                    C138204 * (C138178 + C138190 * C138390))) /
        C137733;
    const double C357 =
        (2 * (be * C138254 + C138038 * C138258) +
         be * (C138254 + C138259 * C138042) +
         C138038 * (C138258 + be * C138038 * C138259 +
                    C138038 * (be * C138259 +
                               C138038 * C138076 * C138075 * C138253))) /
        C137733;
    const double C1078 = (ae * (C138038 * C138050 + C138041 * be) +
                          C138160 * (be * C138254 + C138038 * C138258)) /
                         C137733;
    const double C1835 =
        (C138204 * (be * C138254 + C138038 * C138258)) / C137733;
    const double C3094 = (C138047 * C138043 * C138253 + ae * C138160 * C138050 +
                          C138160 * (ae * C138050 + C138160 * C138258)) /
                         C137733;
    const double C3672 =
        (ae * C138204 * C138050 + C138160 * C138204 * C138258) / C137733;
    const double C5459 =
        (C138047 * C138043 * C138253 + C138258 * C138390) / C137733;
    const double C138267 = C138038 * C138265;
    const double C138720 = C138160 * C138265;
    const double C138811 = C138204 * C138265;
    const double C7035 = (2 * (ae * C138050 + C138160 * C138258) +
                          ae * (C138050 + C138063 * C138292) +
                          C138160 * (C138258 + ae * C138160 * C138063 +
                                     C138160 * (C138072 + C138160 * C138265))) /
                         C137733;
    const double C8094 =
        (C138204 * C138258 + ae * C138204 * C138160 * C138063 +
         C138160 * (ae * C138204 * C138063 + C138160 * C138204 * C138265)) /
        C137733;
    const double C13384 = (ae * (C138050 + C138063 * C138390) +
                           C138160 * (C138258 + C138265 * C138390)) /
                          C137733;
    const double C16031 =
        (2 * C138204 * C138258 + C138204 * (C138258 + C138265 * C138390)) /
        C137733;
    const double C138281 = C138038 * C138277;
    const double C139068 = C138160 * C138277;
    const double C139149 = C138204 * C138277;
    const double C139174 = C138277 * C138390;
    const double C275 =
        (2 * (ae * C138211 + C138038 * C138215) +
         ae * (C138211 + C138216 * C138042) +
         C138038 * (C138215 + ae * C138038 * C138216 +
                    C138038 * (ae * C138216 +
                               C138038 * C138076 * C138075 * C138210))) /
        C137733;
    const double C990 =
        (C138160 * (ae * C138211 + C138038 * C138215)) / C137733;
    const double C1747 = (be * (C138038 * C138051 + C138041 * ae) +
                          C138204 * (ae * C138211 + C138038 * C138215)) /
                         C137733;
    const double C3036 =
        (C138047 * C138043 * C138210 + C138215 * C138292) / C137733;
    const double C3598 =
        (be * C138160 * C138051 + C138204 * C138160 * C138215) / C137733;
    const double C5401 = (C138047 * C138043 * C138210 + be * C138204 * C138051 +
                          C138204 * (be * C138051 + C138204 * C138215)) /
                         C137733;
    const double C138224 = C138038 * C138222;
    const double C138926 = C138160 * C138222;
    const double C138967 = C138204 * C138222;
    const double C6911 =
        (2 * C138160 * C138215 + C138160 * (C138215 + C138222 * C138292)) /
        C137733;
    const double C7982 = (be * (C138051 + C138064 * C138292) +
                          C138204 * (C138215 + C138222 * C138292)) /
                         C137733;
    const double C13302 =
        (C138160 * C138215 + be * C138204 * C138705 +
         C138204 * (be * C138705 + C138204 * C138160 * C138222)) /
        C137733;
    const double C15915 =
        (2 * (be * C138051 + C138204 * C138215) +
         be * (C138051 + C138064 * C138390) +
         C138204 * (C138215 + be * C138204 * C138064 +
                    C138204 * (C138073 + C138204 * C138222))) /
        C137733;
    const double C138238 = C138038 * C138234;
    const double C139064 = C138234 * C138292;
    const double C139204 = C138160 * C138234;
    const double C139259 = C138204 * C138234;
    const double C9787 = (3 * (C138215 + C138222 * C138292) +
                          C138160 * (2 * C138160 * C138222 +
                                     C138160 * (C138222 + C138234 * C138292))) /
                         C137733;
    const double C498 =
        (2 * C138038 * C138318 +
         C138038 * (C138318 + C138076 * C138075 * C138315 * C138042)) /
        C137733;
    const double C1241 =
        (ae * C138038 * C138211 + C138160 * C138038 * C138318) / C137733;
    const double C1998 =
        (be * C138038 * C138254 + C138204 * C138038 * C138318) / C137733;
    const double C3202 = (C138047 * C138043 * C138315 + ae * C138160 * C138211 +
                          C138160 * (ae * C138211 + C138160 * C138318)) /
                         C137733;
    const double C3812 = (ae * (C138204 * C138211 + C138041 * be) +
                          C138160 * (be * C138254 + C138204 * C138318)) /
                         C137733;
    const double C5567 = (C138047 * C138043 * C138315 + be * C138204 * C138254 +
                          C138204 * (be * C138254 + C138204 * C138318)) /
                         C137733;
    const double C138662 = C138038 * C138321;
    const double C138773 = C138160 * C138321;
    const double C138819 = C138204 * C138321;
    const double C499 =
        (3 * (C138318 + C138321 * C138042) +
         C138038 *
             (2 * C138038 * C138321 +
              C138038 * (C138321 + C138112 * C138111 * C138315 * C138042))) /
        C137733;
    const double C1242 = (ae * (C138211 + C138216 * C138042) +
                          C138160 * (C138318 + C138321 * C138042)) /
                         C137733;
    const double C1999 = (be * (C138254 + C138259 * C138042) +
                          C138204 * (C138318 + C138321 * C138042)) /
                         C137733;
    const double C3203 =
        (C138038 * C138318 + ae * C138160 * C138218 +
         C138160 * (ae * C138218 + C138160 * C138038 * C138321)) /
        C137733;
    const double C5568 =
        (C138038 * C138318 + be * C138204 * C138261 +
         C138204 * (be * C138261 + C138204 * C138038 * C138321)) /
        C137733;
    const double C7290 = (2 * (ae * C138211 + C138160 * C138318) +
                          ae * (C138211 + C138216 * C138292) +
                          C138160 * (C138318 + ae * C138160 * C138216 +
                                     C138160 * (C138219 + C138160 * C138321))) /
                         C137733;
    const double C138325 = C138324 * C138042;
    const double C138779 = C138038 * C138324;
    const double C139117 = C138160 * C138324;
    const double C139163 = C138204 * C138324;
    const double C576 =
        (2 * (be * C138335 + C138038 * C138339) +
         be * (C138335 + C138340 * C138042) +
         C138038 * (C138339 + be * C138038 * C138340 +
                    C138038 * (be * C138340 +
                               C138038 * C138076 * C138075 * C138334))) /
        C137733;
    const double C1323 =
        (C138160 * (be * C138335 + C138038 * C138339)) / C137733;
    const double C2080 = (ae * (C138038 * C138050 + C138041 * be) +
                          C138204 * (be * C138335 + C138038 * C138339)) /
                         C137733;
    const double C3260 =
        (C138047 * C138043 * C138334 + C138339 * C138292) / C137733;
    const double C3886 =
        (ae * C138160 * C138050 + C138204 * C138160 * C138339) / C137733;
    const double C5625 = (C138047 * C138043 * C138334 + ae * C138204 * C138050 +
                          C138204 * (ae * C138050 + C138204 * C138339)) /
                         C137733;
    const double C138348 = C138038 * C138346;
    const double C138937 = C138160 * C138346;
    const double C138991 = C138204 * C138346;
    const double C7404 =
        (2 * C138160 * C138339 + C138160 * (C138339 + C138346 * C138292)) /
        C137733;
    const double C8425 = (ae * (C138050 + C138063 * C138292) +
                          C138204 * (C138339 + C138346 * C138292)) /
                         C137733;
    const double C13622 =
        (C138160 * C138339 + ae * C138204 * C138719 +
         C138204 * (ae * C138719 + C138204 * C138160 * C138346)) /
        C137733;
    const double C16404 =
        (2 * (ae * C138050 + C138204 * C138339) +
         ae * (C138050 + C138063 * C138390) +
         C138204 * (C138339 + ae * C138204 * C138063 +
                    C138204 * (C138072 + C138204 * C138346))) /
        C137733;
    const double C138362 = C138038 * C138358;
    const double C139128 = C138358 * C138292;
    const double C139219 = C138160 * C138358;
    const double C139276 = C138204 * C138358;
    const double C10125 =
        (3 * (C138339 + C138346 * C138292) +
         C138160 * (2 * C138160 * C138346 +
                    C138160 * (C138346 + C138358 * C138292))) /
        C137733;
    const double C632 =
        (2 * C138038 * C138378 +
         C138038 * (C138378 + C138076 * C138075 * C138375 * C138042)) /
        C137733;
    const double C1394 =
        (be * C138038 * C138335 + C138160 * C138038 * C138378) / C137733;
    const double C2151 =
        (ae * C138038 * C138167 + C138204 * C138038 * C138378) / C137733;
    const double C3314 = (C138047 * C138043 * C138375 + be * C138160 * C138335 +
                          C138160 * (be * C138335 + C138160 * C138378)) /
                         C137733;
    const double C3956 = (ae * (C138160 * C138167 + C138041 * be) +
                          C138204 * (be * C138335 + C138160 * C138378)) /
                         C137733;
    const double C5679 = (C138047 * C138043 * C138375 + ae * C138204 * C138167 +
                          C138204 * (ae * C138167 + C138204 * C138378)) /
                         C137733;
    const double C138669 = C138038 * C138381;
    const double C138789 = C138160 * C138381;
    const double C139003 = C138204 * C138381;
    const double C633 =
        (3 * (C138378 + C138381 * C138042) +
         C138038 *
             (2 * C138038 * C138381 +
              C138038 * (C138381 + C138112 * C138111 * C138375 * C138042))) /
        C137733;
    const double C1395 = (be * (C138335 + C138340 * C138042) +
                          C138160 * (C138378 + C138381 * C138042)) /
                         C137733;
    const double C2152 = (ae * (C138167 + C138172 * C138042) +
                          C138204 * (C138378 + C138381 * C138042)) /
                         C137733;
    const double C3315 =
        (C138038 * C138378 + be * C138160 * C138342 +
         C138160 * (be * C138342 + C138160 * C138038 * C138381)) /
        C137733;
    const double C5680 =
        (C138038 * C138378 + ae * C138204 * C138174 +
         C138204 * (ae * C138174 + C138204 * C138038 * C138381)) /
        C137733;
    const double C7521 = (2 * (be * C138335 + C138160 * C138378) +
                          be * (C138335 + C138340 * C138292) +
                          C138160 * (C138378 + be * C138160 * C138340 +
                                     C138160 * (C138343 + C138160 * C138381))) /
                         C137733;
    const double C16521 =
        (2 * (ae * C138167 + C138204 * C138378) +
         ae * (C138167 + C138172 * C138390) +
         C138204 * (C138378 + ae * C138204 * C138172 +
                    C138204 * (C138175 + C138204 * C138381))) /
        C137733;
    const double C138385 = C138384 * C138042;
    const double C138795 = C138038 * C138384;
    const double C139132 = C138160 * C138384;
    const double C139287 = C138204 * C138384;
    const double C139998 = C139975 * C139758;
    const double C139996 = C139758 * C139972;
    const double C808 = -(C139758 * C139973) / C139753;
    const double C140000 = C139975 * C139792;
    const double C139999 = C139792 * C139976;
    const double C2322 = -(C139792 * C139978) / C139753;
    const double C140002 = C139975 * C139809;
    const double C140001 = C139809 * C139977;
    const double C4096 = -(C139809 * C139979) / C139753;
    const double C137745 = C137740 / C137733;
    const double C137743 = 2 * C137740;
    const double C137760 = -4 * C137740;
    const double C139969 = C139732 / C137738;
    const double C139967 = C139732 / C137729;
    const double C139966 = C139732 * C139727;
    const double C47132 = (2 * C139735 * C139732) / C137729;
    const double C139970 = C139736 * C139727;
    const double C92 = C139736 / C139971;
    const double C21777 = C139736 / C137734;
    const double C139994 = C139968 / C137729;
    const double C47131 = (C139731 * std::pow(C139726, 2)) / C137733 + C139965;
    const double C137817 = 2 * C137809;
    const double C137915 = C137809 / C137733;
    const double C137936 = -4 * C137809;
    const double C5896 =
        ((0 * ae) / C137729 - C137809 / C137733) / C137734 + (0 * ae) / C137729;
    const double C21861 = (0 * ae) / C137729 - C137809 / C137733;
    const double C201 = C182 * C110;
    const double C199 = C182 * C117;
    const double C197 = C182 * C109;
    const double C420 = C182 * C349;
    const double C418 = C182 * C184;
    const double C637 = C182 * C568;
    const double C907 = C182 * C812;
    const double C1664 = C182 * C1569;
    const double C15802 = C182 * C5273;
    const double C15798 = C182 * C1579;
    const double C15796 = C182 * C1570;
    const double C16170 = C182 * C1829;
    const double C16168 = C182 * C1653;
    const double C16526 = C182 * C2074;
    const double C18427 = C182 * C3438;
    const double C423 = C410 * C110;
    const double C419 = C410 * C109;
    const double C1163 = C410 * C812;
    const double C1920 = C410 * C1569;
    const double C16174 = C410 * C5273;
    const double C16169 = C410 * C1570;
    const double C18748 = C410 * C3438;
    const double C139987 = C139870 / C137738;
    const double C139986 = C139870 * C139869;
    const double C139983 = C139870 / C137729;
    const double C5814 = (2 * C139735 * C139870) / C137729;
    const double C5895 =
        (((C139824 - (C137789 * 2 * C137809) / C137729) * ae) / C137729 -
         C137807 / C137738) /
            C137734 +
        ((C137789 * ((0 * ae) / C137729 - C137809 / C137733) + C139873) * ae) /
            C137729;
    const double C139988 = C139873 * C139869;
    const double C54789 = C139873 / C139971;
    const double C67750 = C139873 / C137734;
    const double C140003 = C139985 / C137729;
    const double C5813 = (C139824 * std::pow(C139868, 2)) / C137733 + C139980;
    const double C137843 = 2 * C137835;
    const double C137986 = C137835 / C137733;
    const double C138007 = -4 * C137835;
    const double C14017 =
        ((0 * ae) / C137729 - C137835 / C137733) / C137734 + (0 * ae) / C137729;
    const double C29625 = (0 * ae) / C137729 - C137835 / C137733;
    const double C284 = C265 * C110;
    const double C282 = C265 * C117;
    const double C280 = C265 * C109;
    const double C503 = C265 * C349;
    const double C711 = C265 * C568;
    const double C709 = C265 * C267;
    const double C995 = C265 * C812;
    const double C1752 = C265 * C1569;
    const double C6922 = C265 * C2908;
    const double C6918 = C265 * C822;
    const double C6916 = C265 * C813;
    const double C7295 = C265 * C1072;
    const double C7634 = C265 * C1317;
    const double C7632 = C265 * C984;
    const double C10635 = C265 * C3438;
    const double C714 = C701 * C110;
    const double C710 = C701 * C109;
    const double C1485 = C701 * C812;
    const double C2242 = C701 * C1569;
    const double C7637 = C701 * C2908;
    const double C7633 = C701 * C813;
    const double C11280 = C701 * C3438;
    const double C139991 = C139896 / C137738;
    const double C139990 = C139896 * C139895;
    const double C139984 = C139896 / C137729;
    const double C13857 = (2 * C139735 * C139896) / C137729;
    const double C14016 =
        (((C139835 - (C137792 * 2 * C137835) / C137729) * ae) / C137729 -
         C137833 / C137738) /
            C137734 +
        ((C137792 * ((0 * ae) / C137729 - C137835 / C137733) + C139899) * ae) /
            C137729;
    const double C139992 = C139899 * C139895;
    const double C108002 = C139899 / C139971;
    const double C122759 = C139899 / C137734;
    const double C140006 = C139989 / C137729;
    const double C13856 = (C139835 * std::pow(C139894, 2)) / C137733 + C139982;
    const double C203 = C182 * C119;
    const double C286 = C265 * C119;
    const double C909 = C182 * C820;
    const double C997 = C265 * C820;
    const double C1666 = C182 * C1577;
    const double C1754 = C265 * C1577;
    const double C6924 = C265 * C2913;
    const double C10637 = C265 * C3443;
    const double C18429 = C182 * C3443;
    const double C15804 = C182 * C5278;
    const double C9796 = C265 * C6632;
    const double C10641 = C265 * C7759;
    const double C21120 = C182 * C15628;
    const double C7041 = C139736 * C819;
    const double C55526 = C139731 * C819;
    const double C68900 = C139736 * C819;
    const double C16037 = C139736 * C1576;
    const double C61985 = C139731 * C1576;
    const double C78015 = C139736 * C1576;
    const double C55517 = C139731 * C2912;
    const double C57884 = C139731 * C3442;
    const double C61980 = C139731 * C5277;
    const double C55521 = C139731 * C6631;
    const double C57888 = C139731 * C7758;
    const double C67263 = C139731 * C15627;
    const double C138070 = C138067 + C138061;
    const double C138653 = C138651 + C138061;
    const double C138914 = C138912 + C138061;
    const double C3813 =
        (ae * (C138204 * C138218 + C138059 * be) +
         C138160 * (be * C138261 + C138204 * C138038 * C138321)) /
        C137733;
    const double C3957 =
        (ae * (C138160 * C138174 + C138059 * be) +
         C138204 * (be * C138342 + C138160 * C138038 * C138381)) /
        C137733;
    const double C2975 =
        (C138038 * C138167 + C138160 * (C138160 * C138174 + C138059 * be) +
         C138160 * C138059 * be) /
        C137729;
    const double C3091 =
        (C138038 * C138254 + C138160 * (C138160 * C138261 + C138059 * ae) +
         C138160 * C138059 * ae) /
        C137729;
    const double C3521 =
        (C138204 * (C138160 * C138174 + C138059 * be)) / C137729;
    const double C3595 =
        (C138204 * C138160 * C138218 + C138160 * C138059 * be) / C137729;
    const double C3669 =
        (C138204 * (C138160 * C138261 + C138059 * ae)) / C137729;
    const double C3883 =
        (C138204 * C138160 * C138342 + C138160 * C138059 * ae) / C137729;
    const double C5398 =
        (C138038 * C138211 + C138204 * (C138204 * C138218 + C138059 * be) +
         C138204 * C138059 * be) /
        C137729;
    const double C5622 =
        (C138038 * C138335 + C138204 * (C138204 * C138342 + C138059 * ae) +
         C138204 * C138059 * ae) /
        C137729;
    const double C2909 = C138038 * C138041 + C138059 * C138292;
    const double C3439 = C138204 * C138160 * C138059;
    const double C5274 = C138038 * C138041 + C138059 * C138390;
    const double C6626 =
        2 * C138160 * C138059 + C138160 * (C138059 + C138081 * C138292);
    const double C7753 = C138204 * (C138059 + C138081 * C138292);
    const double C15622 =
        2 * C138204 * C138059 + C138204 * (C138059 + C138081 * C138390);
    const double C138069 = C138066 + C138058;
    const double C138652 = C138649 + C138058;
    const double C138913 = C138910 + C138058;
    const double C138068 = C138065 * C137731;
    const double C138297 = C138296 * C137731;
    const double C138395 = C138394 * C137731;
    const double C8317 = (be * C138254 + C138204 * C138318 +
                          ae * (C138204 * C138160 * C138216 + C138650 * be) +
                          C138160 * (ae * (C138204 * C138216 + C138058) +
                                     C138160 * (C138262 + C138204 * C138321))) /
                         C137733;
    const double C13298 =
        (C138160 * C138211 + C138204 * (C138204 * C138772 + C138650 * be) +
         C138204 * C138650 * be) /
        C137729;
    const double C13618 =
        (C138160 * C138335 + C138204 * (C138204 * C138788 + C138650 * ae) +
         C138204 * C138650 * ae) /
        C137729;
    const double C13126 = C138160 * C138041 + C138650 * C138390;
    const double C18302 =
        2 * C138204 * C138650 + C138204 * (C138650 + C138734 * C138390);
    const double C425 = C139824 * C413;
    const double C716 = C139835 * C704;
    const double C205 = C182 * C111;
    const double C288 = C265 * C111;
    const double C427 = C410 * C111;
    const double C718 = C701 * C111;
    const double C911 = C182 * C811;
    const double C999 = C265 * C811;
    const double C1159 = C410 * C811;
    const double C1481 = C701 * C811;
    const double C1668 = C182 * C1568;
    const double C1756 = C265 * C1568;
    const double C1916 = C410 * C1568;
    const double C2238 = C701 * C1568;
    const double C9794 = C265 * C6627;
    const double C10291 = C701 * C6627;
    const double C10639 = C265 * C7754;
    const double C11276 = C701 * C7754;
    const double C21118 = C182 * C15623;
    const double C21379 = C410 * C15623;
    const double C202 = C139824 * C191;
    const double C200 = C139824 * C185;
    const double C422 = C182 * C185;
    const double C204 = C139824 * C186;
    const double C426 = C182 * C186;
    const double C908 = C139824 * C897;
    const double C1162 = C182 * C897;
    const double C21865 = C139873 * C897;
    const double C47221 = C139873 * C897;
    const double C912 = C139824 * C898;
    const double C1158 = C182 * C898;
    const double C21873 = C139873 * C898;
    const double C47229 = C139873 * C898;
    const double C1665 = C139824 * C1654;
    const double C1919 = C182 * C1654;
    const double C1669 = C139824 * C1655;
    const double C1915 = C182 * C1655;
    const double C18428 = C139824 * C3520;
    const double C18747 = C182 * C3520;
    const double C39484 = C139873 * C3520;
    const double C61758 = C139873 * C3520;
    const double C15801 = C139824 * C5339;
    const double C16173 = C182 * C5339;
    const double C21119 = C139824 * C15788;
    const double C21378 = C182 * C15788;
    const double C285 = C139835 * C274;
    const double C283 = C139835 * C268;
    const double C713 = C265 * C268;
    const double C287 = C139835 * C269;
    const double C717 = C265 * C269;
    const double C996 = C139835 * C985;
    const double C1484 = C265 * C985;
    const double C1000 = C139835 * C986;
    const double C1480 = C265 * C986;
    const double C1753 = C139835 * C1742;
    const double C2241 = C265 * C1742;
    const double C29629 = C139899 * C1742;
    const double C92952 = C139899 * C1742;
    const double C1757 = C139835 * C1743;
    const double C2237 = C265 * C1743;
    const double C29637 = C139899 * C1743;
    const double C92960 = C139899 * C1743;
    const double C6921 = C139835 * C3032;
    const double C7636 = C265 * C3032;
    const double C10636 = C139835 * C3594;
    const double C11279 = C265 * C3594;
    const double C38342 = C139899 * C3594;
    const double C101322 = C139899 * C3594;
    const double C9795 = C139835 * C6908;
    const double C10290 = C265 * C6908;
    const double C10640 = C139835 * C7979;
    const double C11275 = C265 * C7979;
    const double C41957 = C139899 * C7979;
    const double C101330 = C139899 * C7979;
    const double C424 = C182 * C350;
    const double C506 = C265 * C350;
    const double C428 = C182 * C351;
    const double C509 = C265 * C351;
    const double C1164 = C182 * C1073;
    const double C1246 = C265 * C1073;
    const double C1160 = C182 * C1074;
    const double C1248 = C265 * C1074;
    const double C1921 = C182 * C1830;
    const double C2003 = C265 * C1830;
    const double C1917 = C182 * C1831;
    const double C2005 = C265 * C1831;
    const double C7297 = C265 * C3090;
    const double C10961 = C265 * C3668;
    const double C18749 = C182 * C3668;
    const double C16175 = C182 * C5455;
    const double C21380 = C182 * C16028;
    const double C640 = C182 * C569;
    const double C715 = C265 * C569;
    const double C643 = C182 * C570;
    const double C719 = C265 * C570;
    const double C1399 = C182 * C1318;
    const double C1486 = C265 * C1318;
    const double C1401 = C182 * C1319;
    const double C1482 = C265 * C1319;
    const double C2156 = C182 * C2075;
    const double C2243 = C265 * C2075;
    const double C2158 = C182 * C2076;
    const double C2239 = C265 * C2076;
    const double C7638 = C265 * C3256;
    const double C11281 = C265 * C3882;
    const double C19071 = C182 * C3882;
    const double C16528 = C182 * C5621;
    const double C10292 = C265 * C7401;
    const double C11277 = C265 * C8422;
    const double C138096 = C138093 + C138084;
    const double C138418 = be * C138415;
    const double C139055 = 2 * C138415;
    const double C139203 = C138204 * C138415;
    const double C18305 =
        (2 * C138204 * C138705 + C138204 * (C138705 + C138415 * C138390)) /
        C137729;
    const double C138472 = be * C138469;
    const double C139260 = 2 * C138469;
    const double C138709 = C138064 + C138707;
    const double C138970 = C138064 + C138968;
    const double C138095 = C138092 + C138080;
    const double C138117 = C138108 + C138109;
    const double C138417 = ae * C138414;
    const double C139069 = 2 * C138414;
    const double C139218 = C138204 * C138414;
    const double C13386 =
        (C138258 + C138265 * C138390 + ae * (C138719 + C138414 * C138390) +
         C138160 * (ae * (C138063 + C138086 * C138390) +
                    C138160 * (C138265 + C138277 * C138390))) /
        C137733;
    const double C18304 =
        (2 * C138204 * C138719 + C138204 * (C138719 + C138414 * C138390)) /
        C137729;
    const double C138471 = ae * C138468;
    const double C139277 = 2 * C138468;
    const double C138723 = C138063 + C138721;
    const double C138994 = C138063 + C138992;
    const double C138094 = C138091 * C137731;
    const double C138141 = C138136 + C138124;
    const double C139094 = C139088 + C138124;
    const double C139315 = C139308 + C138124;
    const double C138129 = C138074 + C138122;
    const double C138131 = C138121 * ae;
    const double C138128 = C138121 * be;
    const double C138754 = C138121 * C138292;
    const double C138753 = C138160 * C138121;
    const double C139037 = C138121 * C138390;
    const double C139036 = C138204 * C138121;
    const double C138139 = C138133 + C138120;
    const double C139091 = C139083 + C138120;
    const double C139312 = C139302 + C138120;
    const double C138138 = C138132 * C137731;
    const double C138307 = C138306 * C137731;
    const double C138405 = C138404 * C137731;
    const double C139093 = C138074 + C139085;
    const double C139095 = C139084 * ae;
    const double C139092 = C139084 * be;
    const double C139236 = C139084 * C138390;
    const double C139235 = C138204 * C139084;
    const double C139215 = C138074 + C139213;
    const double C139316 = C139303 * ae;
    const double C139313 = C139303 * be;
    const double C138183 = C138172 + C138181;
    const double C138191 = 2 * C138185;
    const double C138189 = ae * C138185;
    const double C138643 = C138160 * C138185;
    const double C139008 = C138204 * C138185;
    const double C15789 =
        (2 * C138204 * C138174 + C138204 * (C138174 + C138185 * C138390)) /
        C137729;
    const double C138738 = C138733 + C138080;
    const double C139006 = C138172 + C139004;
    const double C139156 = ae * C139153;
    const double C139288 = 2 * C139153;
    const double C138227 = C138216 + C138225;
    const double C138235 = 2 * C138229;
    const double C138233 = ae * C138229;
    const double C138778 = C138160 * C138229;
    const double C138904 = C138204 * C138229;
    const double C6909 =
        (2 * C138160 * C138218 + C138160 * (C138218 + C138229 * C138292)) /
        C137729;
    const double C7980 = (C138204 * (C138218 + C138229 * C138292) +
                          (C138059 + C138081 * C138292) * be) /
                         C137729;
    const double C138776 = C138216 + C138774;
    const double C138948 = C138204 * C138945;
    const double C139118 = 2 * C138945;
    const double C139116 = ae * C138945;
    const double C139021 = C139016 + C138080;
    const double C138270 = C138259 + C138268;
    const double C139080 = C138186 + C138273;
    const double C138278 = 2 * C138272;
    const double C138276 = be * C138272;
    const double C138645 = C138160 * C138272;
    const double C138986 = C138204 * C138272;
    const double C16029 =
        (2 * C138204 * C138261 + C138204 * (C138261 + C138272 * C138390)) /
        C137729;
    const double C138741 = C138736 + C138084;
    const double C138984 = C138259 + C138983;
    const double C139157 = be * C139154;
    const double C139271 = 2 * C139154;
    const double C138302 = C138301 * C137731;
    const double C138351 = C138340 + C138349;
    const double C139299 = C138230 + C138354;
    const double C138359 = 2 * C138353;
    const double C138357 = be * C138353;
    const double C138794 = C138160 * C138353;
    const double C138906 = C138204 * C138353;
    const double C7402 =
        (2 * C138160 * C138342 + C138160 * (C138342 + C138353 * C138292)) /
        C137729;
    const double C8423 = (C138204 * (C138342 + C138353 * C138292) +
                          (C138059 + C138081 * C138292) * ae) /
                         C137729;
    const double C138792 = C138340 + C138790;
    const double C138949 = C138204 * C138947;
    const double C139133 = 2 * C138947;
    const double C139131 = be * C138947;
    const double C139024 = C139019 + C138084;
    const double C138400 = C138399 * C137731;
    const double C18433 = C182 * C13131;
    const double C60997 = C139731 * C13130;
    const double C112 = 3 * (C138041 + C138053 * C138042) +
                        C138038 * (2 * C138059 + C138038 * C138088);
    const double C810 = C138160 * (2 * C138059 + C138038 * C138088);
    const double C1567 = C138204 * (2 * C138059 + C138038 * C138088);
    const double C2910 = C138041 + C138053 * C138042 + C138088 * C138292;
    const double C3440 = C138204 * C138160 * C138088;
    const double C5275 = C138041 + C138053 * C138042 + C138088 * C138390;
    const double C13127 = C138160 * C138059 + C138644 * C138390;
    const double C9609 = 3 * (C138041 + C138053 * C138292) +
                         C138160 * (2 * C138650 + C138160 * C138740);
    const double C10394 = C138204 * (2 * C138650 + C138160 * C138740);
    const double C13128 = C138041 + C138053 * C138292 + C138740 * C138390;
    const double C21012 = 3 * (C138041 + C138053 * C138390) +
                          C138204 * (2 * C138911 + C138204 * C139023);
    const double C13934 = C139824 * C5340;
    const double C14191 = C182 * C5340;
    const double C5996 = C139835 * C3033;
    const double C6511 = C265 * C3033;
    const double C14193 = C182 * C5456;
    const double C6513 = C265 * C3257;
    const double C139060 = C138160 * C139058;
    const double C139209 = C138415 + C139207;
    const double C139265 = C138204 * C139263;
    const double C139074 = C138160 * C139072;
    const double C139224 = C138414 + C139222;
    const double C139282 = C138204 * C139280;
    const double C138199 = C138038 * C138197;
    const double C138655 = C138160 * C138197;
    const double C139012 = C138185 + C139010;
    const double C139293 = C138204 * C139291;
    const double C138243 = C138038 * C138241;
    const double C138877 = C138160 * C138241;
    const double C138916 = C138204 * C138241;
    const double C138784 = C138229 + C138782;
    const double C138957 = C138204 * C138954;
    const double C139124 = C138160 * C139122;
    const double C139195 = C138204 * C139122;
    const double C138286 = C138038 * C138284;
    const double C138657 = C138160 * C138284;
    const double C138988 = C138272 + C138987;
    const double C139272 = C138204 * C139216;
    const double C138367 = C138038 * C138365;
    const double C138878 = C138160 * C138365;
    const double C138918 = C138204 * C138365;
    const double C138800 = C138353 + C138798;
    const double C138958 = C138204 * C138956;
    const double C139139 = C138160 * C139137;
    const double C139197 = C138204 * C139137;
    const double C206 = C139824 * C192;
    const double C910 = C139824 * C902;
    const double C21869 = C139873 * C902;
    const double C47225 = C139873 * C902;
    const double C1667 = C139824 * C1659;
    const double C18430 = C139824 * C3524;
    const double C39488 = C139873 * C3524;
    const double C61762 = C139873 * C3524;
    const double C15803 = C139824 * C5343;
    const double C138182 = C138175 + C138180;
    const double C138708 = C138073 + C138706;
    const double C42837 = C139873 * C7866;
    const double C64366 = C139873 * C7866;
    const double C102192 = C5815 * C7866;
    const double C21121 = C139824 * C15791;
    const double C138196 = C138186 + C138194;
    const double C139057 = C138109 + C139054;
    const double C139256 = C138178 + C139255;
    const double C112581 = C139824 * C21111;
    const double C7045 = C139736 * C1078;
    const double C55528 = C139731 * C1078;
    const double C68904 = C139736 * C1078;
    const double C16041 = C139736 * C1835;
    const double C61987 = C139731 * C1835;
    const double C78019 = C139736 * C1835;
    const double C55519 = C139731 * C3094;
    const double C57886 = C139731 * C3672;
    const double C61982 = C139731 * C5459;
    const double C138269 = C138262 + C138267;
    const double C138722 = C138072 + C138720;
    const double C18636 =
        (ae *
             (2 * C138204 * C138063 + C138204 * (C138063 + C138086 * C138390)) +
         C138160 * (2 * C138811 + C138204 * (C138265 + C138277 * C138390))) /
        C137733;
    const double C21280 =
        (3 * (C138258 + C138265 * C138390) +
         C138204 * (2 * C138811 + C138204 * (C138265 + C138277 * C138390))) /
        C137733;
    const double C55523 = C139731 * C7035;
    const double C57890 = C139731 * C8094;
    const double C60999 = C139731 * C13384;
    const double C67265 = C139731 * C16031;
    const double C138283 = C138273 + C138281;
    const double C139071 = C138108 + C139068;
    const double C139150 = C138160 * C139149;
    const double C139175 = C138265 + C139174;
    const double C289 = C139835 * C275;
    const double C998 = C139835 * C990;
    const double C1755 = C139835 * C1747;
    const double C29633 = C139899 * C1747;
    const double C92956 = C139899 * C1747;
    const double C6923 = C139835 * C3036;
    const double C10638 = C139835 * C3598;
    const double C38346 = C139899 * C3598;
    const double C101326 = C139899 * C3598;
    const double C138226 = C138219 + C138224;
    const double C138969 = C138073 + C138967;
    const double C9797 = C139835 * C6911;
    const double C10642 = C139835 * C7982;
    const double C41961 = C139899 * C7982;
    const double C101334 = C139899 * C7982;
    const double C42975 = C139899 * C13302;
    const double C60897 = C13858 * C13302;
    const double C104821 = C139899 * C13302;
    const double C138240 = C138230 + C138238;
    const double C139065 = C138222 + C139064;
    const double C139206 = C138204 * C139204;
    const double C139262 = C138109 + C139259;
    const double C57240 = C139835 * C9787;
    const double C508 = C139835 * C498;
    const double C1247 = C139835 * C1241;
    const double C2004 = C139835 * C1998;
    const double C29881 = C139899 * C1998;
    const double C93204 = C139899 * C1998;
    const double C7296 = C139835 * C3202;
    const double C10962 = C139835 * C3812;
    const double C38782 = C139899 * C3812;
    const double C101640 = C139899 * C3812;
    const double C138775 = C138219 + C138773;
    const double C138820 = C138262 + C138819;
    const double C511 = C139835 * C499;
    const double C1249 = C139835 * C1242;
    const double C2006 = C139835 * C1999;
    const double C29886 = C139899 * C1999;
    const double C93209 = C139899 * C1999;
    const double C6271 = C139835 * C3203;
    const double C14283 = C13858 * C5568;
    const double C31801 = C139899 * C5568;
    const double C95108 = C139899 * C5568;
    const double C10049 = C139835 * C7290;
    const double C138326 = C138321 + C138325;
    const double C138781 = C138160 * C138779;
    const double C138822 = C138204 * C138779;
    const double C139121 = C138230 + C139117;
    const double C139164 = C138273 + C139163;
    const double C7410 = C139736 * C1323;
    const double C55742 = C139731 * C1323;
    const double C69247 = C139736 * C1323;
    const double C16410 = C139736 * C2080;
    const double C62333 = C139731 * C2080;
    const double C78423 = C139736 * C2080;
    const double C55737 = C139731 * C3260;
    const double C58100 = C139731 * C3886;
    const double C62330 = C139731 * C5625;
    const double C138350 = C138343 + C138348;
    const double C138993 = C138072 + C138991;
    const double C55739 = C139731 * C7404;
    const double C58102 = C139731 * C8425;
    const double C61309 = C139731 * C13622;
    const double C67515 = C139731 * C16404;
    const double C138364 = C138354 + C138362;
    const double C139129 = C138346 + C139128;
    const double C139221 = C138204 * C139219;
    const double C139279 = C138108 + C139276;
    const double C57467 = C139731 * C10125;
    const double C642 = C139824 * C632;
    const double C1400 = C139824 * C1394;
    const double C22394 = C139873 * C1394;
    const double C47747 = C139873 * C1394;
    const double C2157 = C139824 * C2151;
    const double C19072 = C139824 * C3956;
    const double C40334 = C139873 * C3956;
    const double C62436 = C139873 * C3956;
    const double C16527 = C139824 * C5679;
    const double C138791 = C138343 + C138789;
    const double C139005 = C138175 + C139003;
    const double C645 = C139824 * C633;
    const double C1402 = C139824 * C1395;
    const double C22399 = C139873 * C1395;
    const double C47752 = C139873 * C1395;
    const double C2159 = C139824 * C2152;
    const double C6427 = C5815 * C3315;
    const double C23403 = C139873 * C3315;
    const double C48753 = C139873 * C3315;
    const double C14439 = C139824 * C5680;
    const double C21625 = C139824 * C16521;
    const double C138386 = C138381 + C138385;
    const double C138797 = C138160 * C138795;
    const double C139009 = C138204 * C138795;
    const double C139136 = C138354 + C139132;
    const double C139290 = C138186 + C139287;
    const double C99 = C139998 / C139763;
    const double C97 = C139758 / C139763 - (C139996 * C139973) / C139974;
    const double C98 = C139996 / C139997 - (C139998 * C139973) / C139753;
    const double C2324 = C139996 / C139753;
    const double C2906 = C140000 / C139763;
    const double C806 = C139999 / C139753;
    const double C2904 = C139792 / C139763 - (C139999 * C139978) / C139974;
    const double C2905 = C139999 / C139997 - (C140000 * C139978) / C139753;
    const double C5272 = C140002 / C139763;
    const double C1565 = C140001 / C139753;
    const double C5270 = C139809 / C139763 - (C140001 * C139979) / C139974;
    const double C5271 = C140001 / C139997 - (C140002 * C139979) / C139753;
    const double C137748 = C137737 - C137745;
    const double C137747 = C137727 * C137743;
    const double C5818 = (-C137743 / C137729) / C137734 - (0 * be) / C137729;
    const double C54790 = -C137743 / C137729;
    const double C137763 = C137760 / C137729;
    const double C68539 = C139967 * C828;
    const double C68919 = C139967 * C1078;
    const double C68915 = C139967 * C819;
    const double C68910 = C139967 * C3094;
    const double C68906 = C139967 * C2912;
    const double C68902 = C139967 * C1077;
    const double C68898 = C139967 * C821;
    const double C69254 = C139967 * C1323;
    const double C69249 = C139967 * C3260;
    const double C69245 = C139967 * C1322;
    const double C71600 = C139967 * C7035;
    const double C71596 = C139967 * C6631;
    const double C71831 = C139967 * C7404;
    const double C72418 = C139967 * C8094;
    const double C72414 = C139967 * C7758;
    const double C72410 = C139967 * C3672;
    const double C72406 = C139967 * C3442;
    const double C72720 = C139967 * C8425;
    const double C72716 = C139967 * C3886;
    const double C77586 = C139967 * C1585;
    const double C78026 = C139967 * C1835;
    const double C78022 = C139967 * C1576;
    const double C78017 = C139967 * C1834;
    const double C78013 = C139967 * C1578;
    const double C78426 = C139967 * C2080;
    const double C78421 = C139967 * C2079;
    const double C81296 = C139967 * C13384;
    const double C81292 = C139967 * C13130;
    const double C81698 = C139967 * C13622;
    const double C84714 = C139967 * C5459;
    const double C84710 = C139967 * C5277;
    const double C85012 = C139967 * C5625;
    const double C129838 = C139967 * C16031;
    const double C129834 = C139967 * C15627;
    const double C130074 = C139967 * C16404;
    const double C139993 = C139966 / C137733;
    const double C48302 = C47132 * C1078;
    const double C48296 = C47132 * C819;
    const double C48642 = C47132 * C1323;
    const double C94887 = C47132 * C1835;
    const double C94881 = C47132 * C1576;
    const double C95213 = C47132 * C2080;
    const double C139995 = C139970 / C137729;
    const double C5811 = -C139994;
    const double C47945 = C47131 * C828;
    const double C48313 = C47131 * C1078;
    const double C48307 = C47131 * C819;
    const double C48300 = C47131 * C1077;
    const double C48294 = C47131 * C821;
    const double C48647 = C47131 * C1323;
    const double C48640 = C47131 * C1322;
    const double C51004 = C47131 * C3094;
    const double C50998 = C47131 * C2912;
    const double C51232 = C47131 * C3260;
    const double C51805 = C47131 * C3672;
    const double C51799 = C47131 * C3442;
    const double C52105 = C47131 * C3886;
    const double C94530 = C47131 * C1585;
    const double C94898 = C47131 * C1835;
    const double C94892 = C47131 * C1576;
    const double C94885 = C47131 * C1834;
    const double C94879 = C47131 * C1578;
    const double C95218 = C47131 * C2080;
    const double C95211 = C47131 * C2079;
    const double C99968 = C47131 * C5459;
    const double C99962 = C47131 * C5277;
    const double C100199 = C47131 * C5625;
    const double C137818 = C137789 * C137817;
    const double C47217 = (-C137817 / C137729) / C137734 - (0 * be) / C137729;
    const double C137922 = C137919 - C137915;
    const double C137939 = C137936 / C137729;
    const double C6428 = C5896 * C3257;
    const double C102193 = C5896 * C7759;
    const double C102187 = C5896 * C7754;
    const double C102808 = C5896 * C8422;
    const double C21874 = C21861 * C811;
    const double C21870 = C21861 * C820;
    const double C21866 = C21861 * C812;
    const double C22133 = C21861 * C1074;
    const double C22131 = C21861 * C898;
    const double C22125 = C21861 * C1073;
    const double C22123 = C21861 * C897;
    const double C22400 = C21861 * C1319;
    const double C22395 = C21861 * C1318;
    const double C23402 = C21861 * C3257;
    const double C39489 = C21861 * C3443;
    const double C39485 = C21861 * C3438;
    const double C39914 = C21861 * C3668;
    const double C39912 = C21861 * C3520;
    const double C40335 = C21861 * C3882;
    const double C42836 = C21861 * C7759;
    const double C42832 = C21861 * C7754;
    const double C43664 = C21861 * C8422;
    const double C46352 = C21861 * C13131;
    const double C434 = C418 - C419;
    const double C16186 = C16168 - C16169;
    const double C140004 = C139986 / C137733;
    const double C21884 = C139983 * C192;
    const double C21880 = C139983 * C186;
    const double C21875 = C139983 * C191;
    const double C21871 = C139983 * C185;
    const double C21867 = C139983 * C190;
    const double C21863 = C139983 * C184;
    const double C22130 = C139983 * C413;
    const double C22122 = C139983 * C412;
    const double C22402 = C139983 * C632;
    const double C22397 = C139983 * C631;
    const double C22392 = C139983 * C630;
    const double C22738 = C139983 * C898;
    const double C22734 = C139983 * C902;
    const double C22730 = C139983 * C897;
    const double C23405 = C139983 * C1395;
    const double C23401 = C139983 * C1394;
    const double C23715 = C139983 * C1655;
    const double C23711 = C139983 * C1659;
    const double C23707 = C139983 * C1654;
    const double C24349 = C139983 * C2152;
    const double C24345 = C139983 * C2151;
    const double C39499 = C139983 * C5340;
    const double C39486 = C139983 * C1658;
    const double C39482 = C139983 * C1653;
    const double C39911 = C139983 * C1908;
    const double C40341 = C139983 * C5680;
    const double C40332 = C139983 * C2150;
    const double C42835 = C139983 * C3524;
    const double C42831 = C139983 * C3520;
    const double C43663 = C139983 * C3956;
    const double C46351 = C139983 * C5343;
    const double C46347 = C139983 * C5339;
    const double C46957 = C139983 * C5679;
    const double C137162 = C139983 * C15791;
    const double C137158 = C139983 * C15788;
    const double C137640 = C139983 * C16521;
    const double C5894 =
        (((0 - (C137789 * C137807) / C137729) * ae) / C137729 -
         (0 * be) / C137738) /
            C137734 +
        ((C137789 *
              (((C139824 - (C137789 * 2 * C137809) / C137729) * ae) / C137729 -
               C137807 / C137738) +
          C139983) *
         ae) /
            C137729 +
        (0 * ae) / C137729 - C137809 / C137733;
    const double C5913 = C5814 * C898;
    const double C5906 = C5814 * C902;
    const double C5900 = C5814 * C897;
    const double C6432 = C5814 * C1395;
    const double C6425 = C5814 * C1394;
    const double C7528 = C5814 * C3315;
    const double C102190 = C5814 * C3524;
    const double C102184 = C5814 * C3520;
    const double C102805 = C5814 * C3956;
    const double C104713 = C5814 * C7866;
    const double C5912 = C5895 * C811;
    const double C5907 = C5895 * C820;
    const double C5901 = C5895 * C812;
    const double C6173 = C5895 * C1074;
    const double C6171 = C5895 * C898;
    const double C6161 = C5895 * C1073;
    const double C6159 = C5895 * C897;
    const double C6431 = C5895 * C1319;
    const double C6426 = C5895 * C1318;
    const double C7527 = C5895 * C3257;
    const double C102191 = C5895 * C3443;
    const double C102185 = C5895 * C3438;
    const double C102494 = C5895 * C3668;
    const double C102492 = C5895 * C3520;
    const double C102806 = C5895 * C3882;
    const double C104712 = C5895 * C7759;
    const double C104706 = C5895 * C7754;
    const double C105351 = C5895 * C8422;
    const double C107401 = C5895 * C13131;
    const double C140005 = C139988 / C137729;
    const double C68350 = C67750 * C3315;
    const double C86986 = C67750 * C7866;
    const double C47134 = -C140003;
    const double C5917 = C5813 * C191;
    const double C5911 = C5813 * C185;
    const double C5904 = C5813 * C190;
    const double C5898 = C5813 * C184;
    const double C6178 = C5813 * C413;
    const double C6158 = C5813 * C412;
    const double C6430 = C5813 * C631;
    const double C6423 = C5813 * C630;
    const double C6806 = C5813 * C902;
    const double C6800 = C5813 * C897;
    const double C7526 = C5813 * C1394;
    const double C7877 = C5813 * C1659;
    const double C7871 = C5813 * C1654;
    const double C8531 = C5813 * C2151;
    const double C102188 = C5813 * C1658;
    const double C102182 = C5813 * C1653;
    const double C102491 = C5813 * C1908;
    const double C102803 = C5813 * C2150;
    const double C104711 = C5813 * C3524;
    const double C104705 = C5813 * C3520;
    const double C105350 = C5813 * C3956;
    const double C107400 = C5813 * C5343;
    const double C107394 = C5813 * C5339;
    const double C107871 = C5813 * C5679;
    const double C137844 = C137792 * C137843;
    const double C92948 = (-C137843 / C137729) / C137734 - (0 * be) / C137729;
    const double C137993 = C137990 - C137986;
    const double C138010 = C138007 / C137729;
    const double C14284 = C14017 * C5456;
    const double C60898 = C14017 * C13131;
    const double C29638 = C29625 * C1568;
    const double C29634 = C29625 * C1577;
    const double C29630 = C29625 * C1569;
    const double C29887 = C29625 * C1831;
    const double C29882 = C29625 * C1830;
    const double C30143 = C29625 * C2076;
    const double C30141 = C29625 * C1743;
    const double C30135 = C29625 * C2075;
    const double C30133 = C29625 * C1742;
    const double C31800 = C29625 * C5456;
    const double C38347 = C29625 * C3443;
    const double C38343 = C29625 * C3438;
    const double C38783 = C29625 * C3668;
    const double C39198 = C29625 * C3882;
    const double C39196 = C29625 * C3594;
    const double C41960 = C29625 * C7759;
    const double C41956 = C29625 * C7754;
    const double C42556 = C29625 * C8422;
    const double C42554 = C29625 * C7979;
    const double C42974 = C29625 * C13131;
    const double C725 = C709 - C710;
    const double C7646 = C7632 - C7633;
    const double C140007 = C139990 / C137733;
    const double C29648 = C139984 * C275;
    const double C29644 = C139984 * C269;
    const double C29639 = C139984 * C274;
    const double C29635 = C139984 * C268;
    const double C29631 = C139984 * C273;
    const double C29627 = C139984 * C267;
    const double C29889 = C139984 * C498;
    const double C29884 = C139984 * C497;
    const double C29879 = C139984 * C496;
    const double C30140 = C139984 * C704;
    const double C30132 = C139984 * C703;
    const double C30480 = C139984 * C986;
    const double C30476 = C139984 * C990;
    const double C30472 = C139984 * C985;
    const double C30793 = C139984 * C1242;
    const double C30789 = C139984 * C1241;
    const double C31467 = C139984 * C1743;
    const double C31463 = C139984 * C1747;
    const double C31459 = C139984 * C1742;
    const double C31803 = C139984 * C1999;
    const double C31799 = C139984 * C1998;
    const double C38357 = C139984 * C3033;
    const double C38344 = C139984 * C989;
    const double C38340 = C139984 * C984;
    const double C38789 = C139984 * C3203;
    const double C38780 = C139984 * C1240;
    const double C39195 = C139984 * C1473;
    const double C41959 = C139984 * C3036;
    const double C41955 = C139984 * C3032;
    const double C42257 = C139984 * C3202;
    const double C42973 = C139984 * C3598;
    const double C42969 = C139984 * C3594;
    const double C43393 = C139984 * C3812;
    const double C88817 = C139984 * C6911;
    const double C88813 = C139984 * C6908;
    const double C89052 = C139984 * C7290;
    const double C89616 = C139984 * C7982;
    const double C89612 = C139984 * C7979;
    const double C14015 =
        (((0 - (C137792 * C137833) / C137729) * ae) / C137729 -
         (0 * be) / C137738) /
            C137734 +
        ((C137792 *
              (((C139835 - (C137792 * 2 * C137835) / C137729) * ae) / C137729 -
               C137833 / C137738) +
          C139984) *
         ae) /
            C137729 +
        (0 * ae) / C137729 - C137835 / C137733;
    const double C14034 = C13857 * C1743;
    const double C14027 = C13857 * C1747;
    const double C14021 = C13857 * C1742;
    const double C14288 = C13857 * C1999;
    const double C14281 = C13857 * C1998;
    const double C16301 = C13857 * C5568;
    const double C60895 = C13857 * C3598;
    const double C60889 = C13857 * C3594;
    const double C61207 = C13857 * C3812;
    const double C63667 = C13857 * C7982;
    const double C63661 = C13857 * C7979;
    const double C64484 = C13857 * C13302;
    const double C14033 = C14016 * C1568;
    const double C14028 = C14016 * C1577;
    const double C14022 = C14016 * C1569;
    const double C14287 = C14016 * C1831;
    const double C14282 = C14016 * C1830;
    const double C14538 = C14016 * C2076;
    const double C14536 = C14016 * C1743;
    const double C14526 = C14016 * C2075;
    const double C14524 = C14016 * C1742;
    const double C16300 = C14016 * C5456;
    const double C60896 = C14016 * C3443;
    const double C60890 = C14016 * C3438;
    const double C61208 = C14016 * C3668;
    const double C61517 = C14016 * C3882;
    const double C61515 = C14016 * C3594;
    const double C63666 = C14016 * C7759;
    const double C63660 = C14016 * C7754;
    const double C64132 = C14016 * C8422;
    const double C64130 = C14016 * C7979;
    const double C64483 = C14016 * C13131;
    const double C140008 = C139992 / C137729;
    const double C123162 = C122759 * C5568;
    const double C131202 = C122759 * C13302;
    const double C92797 = -C140006;
    const double C14038 = C13856 * C274;
    const double C14032 = C13856 * C268;
    const double C14025 = C13856 * C273;
    const double C14019 = C13856 * C267;
    const double C14286 = C13856 * C497;
    const double C14279 = C13856 * C496;
    const double C14543 = C13856 * C704;
    const double C14523 = C13856 * C703;
    const double C14879 = C13856 * C990;
    const double C14873 = C13856 * C985;
    const double C15197 = C13856 * C1241;
    const double C15926 = C13856 * C1747;
    const double C15920 = C13856 * C1742;
    const double C16299 = C13856 * C1998;
    const double C60893 = C13856 * C989;
    const double C60887 = C13856 * C984;
    const double C61205 = C13856 * C1240;
    const double C61514 = C13856 * C1473;
    const double C63665 = C13856 * C3036;
    const double C63659 = C13856 * C3032;
    const double C63897 = C13856 * C3202;
    const double C64482 = C13856 * C3598;
    const double C64476 = C13856 * C3594;
    const double C64826 = C13856 * C3812;
    const double C121 =
        (2 * (C138038 * C138051 + C138041 * ae) +
         C138038 * (C138051 + C138038 * C138070 + C138059 * ae) +
         (C138041 + C138053 * C138042) * ae) /
        C137729;
    const double C818 =
        (C138160 * (C138051 + C138038 * C138070 + C138059 * ae)) / C137729;
    const double C1575 =
        (C138204 * (C138051 + C138038 * C138070 + C138059 * ae)) / C137729;
    const double C2915 =
        (C138038 * C138051 + C138041 * ae + C138070 * C138292) / C137729;
    const double C3445 = (C138204 * C138160 * C138070) / C137729;
    const double C5280 =
        (C138038 * C138051 + C138041 * ae + C138070 * C138390) / C137729;
    const double C7032 =
        (2 * (C138160 * C138254 + C138041 * ae) +
         C138160 * (C138254 + C138160 * C138653 + C138650 * ae) +
         (C138041 + C138053 * C138292) * ae) /
        C137729;
    const double C8091 =
        (C138204 * (C138254 + C138160 * C138653 + C138650 * ae)) / C137729;
    const double C13380 =
        (C138160 * C138254 + C138041 * ae + C138653 * C138390) / C137729;
    const double C16401 =
        (2 * (C138204 * C138335 + C138041 * ae) +
         C138204 * (C138335 + C138204 * C138914 + C138911 * ae) +
         (C138041 + C138053 * C138390) * ae) /
        C137729;
    const double C8322 = C139835 * C3813;
    const double C15199 = C13857 * C3813;
    const double C30791 = C139899 * C3813;
    const double C40069 = C139984 * C3813;
    const double C94102 = C139899 * C3813;
    const double C8533 = C5814 * C3957;
    const double C15402 = C139824 * C3957;
    const double C24347 = C139873 * C3957;
    const double C39059 = C139983 * C3957;
    const double C49691 = C139873 * C3957;
    const double C5902 = C5815 * C2975;
    const double C6163 = C5896 * C2975;
    const double C6802 = C5814 * C2975;
    const double C7176 = C5895 * C2975;
    const double C22732 = C139873 * C2975;
    const double C23073 = C21861 * C2975;
    const double C48085 = C139873 * C2975;
    const double C67837 = C67750 * C2975;
    const double C6165 = C5896 * C3091;
    const double C6272 = C265 * C3091;
    const double C7178 = C5895 * C3091;
    const double C23075 = C21861 * C3091;
    const double C7873 = C5814 * C3521;
    const double C8203 = C5895 * C3521;
    const double C14765 = C139824 * C3521;
    const double C15087 = C182 * C3521;
    const double C23709 = C139873 * C3521;
    const double C24028 = C21861 * C3521;
    const double C38203 = C139983 * C3521;
    const double C49059 = C139873 * C3521;
    const double C7987 = C139835 * C3595;
    const double C8641 = C265 * C3595;
    const double C14875 = C13857 * C3595;
    const double C15508 = C14016 * C3595;
    const double C30474 = C139899 * C3595;
    const double C31100 = C29625 * C3595;
    const double C39641 = C139984 * C3595;
    const double C93792 = C139899 * C3595;
    const double C8205 = C5895 * C3669;
    const double C8321 = C265 * C3669;
    const double C15089 = C182 * C3669;
    const double C15198 = C14016 * C3669;
    const double C24030 = C21861 * C3669;
    const double C30790 = C29625 * C3669;
    const double C8532 = C5895 * C3883;
    const double C8643 = C265 * C3883;
    const double C15401 = C182 * C3883;
    const double C15510 = C14016 * C3883;
    const double C24346 = C21861 * C3883;
    const double C31102 = C29625 * C3883;
    const double C14023 = C13858 * C5398;
    const double C14528 = C14017 * C5398;
    const double C15922 = C13857 * C5398;
    const double C16640 = C14016 * C5398;
    const double C31461 = C139899 * C5398;
    const double C32121 = C29625 * C5398;
    const double C94768 = C139899 * C5398;
    const double C122916 = C122759 * C5398;
    const double C14440 = C182 * C5622;
    const double C14530 = C14017 * C5622;
    const double C16642 = C14016 * C5622;
    const double C32123 = C29625 * C5622;
    const double C5903 = C5896 * C2909;
    const double C5997 = C265 * C2909;
    const double C6512 = C701 * C2909;
    const double C6801 = C5895 * C2909;
    const double C22731 = C21861 * C2909;
    const double C7872 = C5895 * C3439;
    const double C7986 = C265 * C3439;
    const double C8642 = C701 * C3439;
    const double C14764 = C182 * C3439;
    const double C14874 = C14016 * C3439;
    const double C15088 = C410 * C3439;
    const double C23708 = C21861 * C3439;
    const double C30473 = C29625 * C3439;
    const double C13935 = C182 * C5274;
    const double C14024 = C14017 * C5274;
    const double C14192 = C410 * C5274;
    const double C15921 = C14016 * C5274;
    const double C31460 = C29625 * C5274;
    const double C6803 = C5896 * C6626;
    const double C6931 = C265 * C6626;
    const double C7641 = C701 * C6626;
    const double C7874 = C5896 * C7753;
    const double C7990 = C265 * C7753;
    const double C8638 = C701 * C7753;
    const double C38204 = C21861 * C7753;
    const double C38358 = C29625 * C7753;
    const double C15811 = C182 * C15622;
    const double C15923 = C14017 * C15622;
    const double C16179 = C410 * C15622;
    const double C120 =
        (2 * (C138038 * C138050 + C138041 * be) +
         C138038 * (C138050 + C138038 * C138069 + C138059 * be) +
         (C138041 + C138053 * C138042) * be) /
        C137729;
    const double C817 =
        (C138160 * (C138050 + C138038 * C138069 + C138059 * be)) / C137729;
    const double C1574 =
        (C138204 * (C138050 + C138038 * C138069 + C138059 * be)) / C137729;
    const double C2914 =
        (C138038 * C138050 + C138041 * be + C138069 * C138292) / C137729;
    const double C3444 = (C138204 * C138160 * C138069) / C137729;
    const double C5279 =
        (C138038 * C138050 + C138041 * be + C138069 * C138390) / C137729;
    const double C8526 = (ae * (C138167 + C138160 * C138652 + C138650 * be) +
                          C138204 * (C138378 + be * C138160 * C138340 +
                                     C138160 * (C138343 + C138160 * C138381))) /
                         C137733;
    const double C6792 =
        (2 * (C138160 * C138167 + C138041 * be) +
         C138160 * (C138167 + C138160 * C138652 + C138650 * be) +
         (C138041 + C138053 * C138292) * be) /
        C137729;
    const double C7863 =
        (C138204 * (C138167 + C138160 * C138652 + C138650 * be)) / C137729;
    const double C13216 =
        (C138160 * C138167 + C138041 * be + C138652 * C138390) / C137729;
    const double C15912 =
        (2 * (C138204 * C138211 + C138041 * be) +
         C138204 * (C138211 + C138204 * C138913 + C138911 * be) +
         (C138041 + C138053 * C138390) * be) /
        C137729;
    const double C129 =
        (2 * (ae * C138050 + be * C138051 + C138038 * C138068) +
         ae * (C138050 + C138038 * C138069 + C138059 * be) +
         be * (C138051 + C138038 * C138070 + C138059 * ae) +
         C138038 * (C138068 + ae * C138069 + be * C138070 +
                    C138038 * (ae * C138063 + be * C138064 +
                               C138038 *
                                   (C138054 * C138055 +
                                    C138042 * bs[5] * std::pow(C138044, 5)) *
                                   C137731))) /
        C137733;
    const double C827 = (ae * C138160 * C138050 + be * C138160 * C138051 +
                         C138038 * C138160 * C138068) /
                        C137733;
    const double C1584 = (ae * C138204 * C138050 + be * C138204 * C138051 +
                          C138038 * C138204 * C138068) /
                         C137733;
    const double C2920 = ((C138041 + C138042 * C138043 * C138047) * C137731 +
                          C138068 * C138292) /
                         C137733;
    const double C3450 = (C138204 * C138160 * C138068) / C137733;
    const double C5285 = ((C138041 + C138042 * C138043 * C138047) * C137731 +
                          C138068 * C138390) /
                         C137733;
    const double C414 =
        (2 * C138038 * C138297 +
         C138038 * (C138297 + (C138074 + C138292 * C138075 * C138076) *
                                  C137731 * C138042)) /
        C137733;
    const double C1150 = (ae * C138038 * C138167 + be * C138038 * C138254 +
                          C138160 * C138038 * C138297) /
                         C137733;
    const double C1907 = (C138204 * C138038 * C138297) / C137733;
    const double C3148 =
        ((C138041 + C138292 * C138043 * C138047) * C137731 +
         ae * (C138160 * C138167 + C138041 * be) +
         be * (C138160 * C138254 + C138041 * ae) +
         C138160 * (ae * C138167 + be * C138254 + C138160 * C138297)) /
        C137733;
    const double C3742 = (ae * C138204 * C138167 + be * C138204 * C138254 +
                          C138160 * C138204 * C138297) /
                         C137733;
    const double C5513 = ((C138041 + C138292 * C138043 * C138047) * C137731 +
                          C138297 * C138390) /
                         C137733;
    const double C705 =
        (2 * C138038 * C138395 +
         C138038 * (C138395 + (C138074 + C138390 * C138075 * C138076) *
                                  C137731 * C138042)) /
        C137733;
    const double C1472 = (C138160 * C138038 * C138395) / C137733;
    const double C2229 = (ae * C138038 * C138211 + be * C138038 * C138335 +
                          C138204 * C138038 * C138395) /
                         C137733;
    const double C3368 = ((C138041 + C138390 * C138043 * C138047) * C137731 +
                          C138395 * C138292) /
                         C137733;
    const double C4026 = (ae * C138160 * C138211 + be * C138160 * C138335 +
                          C138204 * C138160 * C138395) /
                         C137733;
    const double C5733 =
        ((C138041 + C138390 * C138043 * C138047) * C137731 +
         ae * (C138204 * C138211 + C138041 * be) +
         be * (C138204 * C138335 + C138041 * ae) +
         C138204 * (ae * C138211 + be * C138335 + C138204 * C138395)) /
        C137733;
    const double C10964 = C139835 * C8317;
    const double C42259 = C139899 * C8317;
    const double C63899 = C13857 * C8317;
    const double C89937 = C139984 * C8317;
    const double C101644 = C139899 * C8317;
    const double C42971 = C139899 * C13298;
    const double C43796 = C29625 * C13298;
    const double C60891 = C13858 * C13298;
    const double C61519 = C14017 * C13298;
    const double C64478 = C13857 * C13298;
    const double C65147 = C14016 * C13298;
    const double C104817 = C139899 * C13298;
    const double C131196 = C122759 * C13298;
    const double C19073 = C182 * C13618;
    const double C43798 = C29625 * C13618;
    const double C46958 = C21861 * C13618;
    const double C61521 = C14017 * C13618;
    const double C65149 = C14016 * C13618;
    const double C107872 = C5895 * C13618;
    const double C18431 = C182 * C13126;
    const double C18753 = C410 * C13126;
    const double C42970 = C29625 * C13126;
    const double C46348 = C21861 * C13126;
    const double C60892 = C14017 * C13126;
    const double C64477 = C14016 * C13126;
    const double C107395 = C5895 * C13126;
    const double C64479 = C14017 * C18302;
    const double C110795 = C182 * C18302;
    const double C111000 = C410 * C18302;
    const double C137159 = C21861 * C18302;
    const double C213 = C202 - C203;
    const double C212 = C200 - C201;
    const double C435 = C422 - C423;
    const double C214 = C204 - C205;
    const double C436 = C426 - C427;
    const double C1168 = C1162 - C1163;
    const double C1167 = C1158 - C1159;
    const double C15807 = C1664 - C1665;
    const double C15799 = C1665 - C1664;
    const double C1925 = C1919 - C1920;
    const double C29549 = C1669 - C1668;
    const double C31358 = C1668 - C1669;
    const double C1924 = C1915 - C1916;
    const double C18757 = C18747 - C18748;
    const double C21114 = C15801 - C15802;
    const double C16187 = C16173 - C16174;
    const double C112576 = C21119 - C21118;
    const double C21382 = C21378 - C21379;
    const double C296 = C285 - C286;
    const double C295 = C283 - C284;
    const double C726 = C713 - C714;
    const double C297 = C287 - C288;
    const double C727 = C717 - C718;
    const double C6927 = C995 - C996;
    const double C6919 = C996 - C995;
    const double C1490 = C1484 - C1485;
    const double C21967 = C1000 - C999;
    const double C22843 = C999 - C1000;
    const double C1489 = C1480 - C1481;
    const double C2247 = C2241 - C2242;
    const double C2246 = C2237 - C2238;
    const double C9790 = C6921 - C6922;
    const double C7647 = C7636 - C7637;
    const double C11284 = C11279 - C11280;
    const double C57235 = C9795 - C9794;
    const double C10294 = C10290 - C10291;
    const double C11283 = C11275 - C11276;
    const double C512 = C505 - C506;
    const double C646 = C639 - C640;
    const double C138099 = C138038 * C138096;
    const double C138115 = 2 * C138096;
    const double C138107 = be * C138096;
    const double C138711 = C138160 * C138096;
    const double C138972 = C138204 * C138096;
    const double C6630 =
        (2 * C138160 * C138070 + C138160 * (C138070 + C138096 * C138292)) /
        C137729;
    const double C7757 = (C138204 * (C138070 + C138096 * C138292)) / C137729;
    const double C15626 =
        (2 * C138204 * C138070 + C138204 * (C138070 + C138096 * C138390)) /
        C137729;
    const double C139053 = C138178 + C138418;
    const double C18534 =
        (2 * (be * C138705 + C138204 * C138926) +
         be * (C138705 + C138415 * C138390) +
         C138204 * (C138926 + be * C138204 * C138415 +
                    C138204 * (C138418 + C138204 * C138160 * C138234))) /
        C137733;
    const double C64485 = C14017 * C18305;
    const double C110797 = C182 * C18305;
    const double C137163 = C21861 * C18305;
    const double C139258 = C138222 + C138472;
    const double C10632 =
        (be * (2 * C138705 + C138160 * C138709) +
         C138204 * (2 * C138160 * C138222 +
                    C138160 * (C138222 + C138234 * C138292))) /
        C137733;
    const double C13304 =
        (C138215 + C138222 * C138292 + be * C138204 * C138709 +
         C138204 * (be * C138709 + C138204 * (C138222 + C138234 * C138292))) /
        C137733;
    const double C9612 = (3 * (C138051 + C138064 * C138292) +
                          C138160 * (2 * C138705 + C138160 * C138709)) /
                         C137729;
    const double C10397 =
        (C138204 * (2 * C138705 + C138160 * C138709)) / C137729;
    const double C13135 =
        (C138051 + C138064 * C138292 + C138709 * C138390) / C137729;
    const double C64246 =
        (2 * C138204 * C138709 + C138204 * (C138709 + C139058 * C138390)) /
        C137729;
    const double C21015 = (3 * (C138051 + C138064 * C138390) +
                           C138204 * (2 * C138966 + C138204 * C138970)) /
                          C137729;
    const double C138098 = C138038 * C138095;
    const double C138113 = 2 * C138095;
    const double C138106 = ae * C138095;
    const double C138725 = C138160 * C138095;
    const double C138996 = C138204 * C138095;
    const double C6629 =
        (2 * C138160 * C138069 + C138160 * (C138069 + C138095 * C138292)) /
        C137729;
    const double C7756 = (C138204 * (C138069 + C138095 * C138292)) / C137729;
    const double C15625 =
        (2 * C138204 * C138069 + C138204 * (C138069 + C138095 * C138390)) /
        C137729;
    const double C138420 = C138417 + C138418;
    const double C139067 = C138265 + C138417;
    const double C18964 =
        (2 * (ae * C138719 + C138204 * C138937) +
         ae * (C138719 + C138414 * C138390) +
         C138204 * (C138937 + ae * C138204 * C138414 +
                    C138204 * (C138417 + C138204 * C138160 * C138358))) /
        C137733;
    const double C63747 = C139731 * C13386;
    const double C64596 = C139731 * C18304;
    const double C138474 = C138471 + C138472;
    const double C139275 = C138346 + C138471;
    const double C10742 =
        (2 * (ae * C138204 * C138063 + C138160 * C138811) +
         ae * C138204 * C138723 +
         C138160 * (C138811 + ae * C138204 * C138414 +
                    C138160 * (C138471 + C138160 * C138204 * C138277))) /
        C137733;
    const double C11064 =
        (ae * (2 * C138719 + C138160 * C138723) +
         C138204 * (2 * C138160 * C138346 +
                    C138160 * (C138346 + C138358 * C138292))) /
        C137733;
    const double C13624 =
        (C138339 + C138346 * C138292 + ae * C138204 * C138723 +
         C138204 * (ae * C138723 + C138204 * (C138346 + C138358 * C138292))) /
        C137733;
    const double C9611 = (3 * (C138050 + C138063 * C138292) +
                          C138160 * (2 * C138719 + C138160 * C138723)) /
                         C137729;
    const double C10396 =
        (C138204 * (2 * C138719 + C138160 * C138723)) / C137729;
    const double C13134 =
        (C138050 + C138063 * C138292 + C138723 * C138390) / C137729;
    const double C64245 =
        (2 * C138204 * C138723 + C138204 * (C138723 + C139072 * C138390)) /
        C137729;
    const double C21014 = (3 * (C138050 + C138063 * C138390) +
                           C138204 * (2 * C138990 + C138204 * C138994)) /
                          C137729;
    const double C138097 = C138038 * C138094;
    const double C138409 = C138160 * C138094;
    const double C138463 = C138204 * C138094;
    const double C2921 = (ae * (C138050 + C138063 * C138292) +
                          be * (C138051 + C138064 * C138292) +
                          C138038 * (C138068 + C138094 * C138292)) /
                         C137733;
    const double C5286 = (ae * (C138050 + C138063 * C138390) +
                          be * (C138051 + C138064 * C138390) +
                          C138038 * (C138068 + C138094 * C138390)) /
                         C137733;
    const double C6636 =
        (2 * C138160 * C138068 + C138160 * (C138068 + C138094 * C138292)) /
        C137733;
    const double C7763 = (C138204 * (C138068 + C138094 * C138292)) / C137733;
    const double C15632 =
        (2 * C138204 * C138068 + C138204 * (C138068 + C138094 * C138390)) /
        C137733;
    const double C138144 = C138038 * C138141;
    const double C138713 = C138141 * C138292;
    const double C138929 = C138160 * C138141;
    const double C138974 = C138141 * C138390;
    const double C139101 = C138160 * C139094;
    const double C139319 = C138204 * C139315;
    const double C138137 = C138129 * ae;
    const double C138135 = C138038 * C138129;
    const double C138134 = C138129 * be;
    const double C138656 = C138160 * C138129;
    const double C138917 = C138204 * C138129;
    const double C6628 =
        2 * C138160 * C138088 + C138160 * (C138088 + C138129 * C138292);
    const double C7755 = C138204 * (C138088 + C138129 * C138292);
    const double C15624 =
        2 * C138204 * C138088 + C138204 * (C138088 + C138129 * C138390);
    const double C138764 = C138760 + C138131;
    const double C139043 = C139038 + C138131;
    const double C138763 = C138757 + C138128;
    const double C139040 = C139035 + C138128;
    const double C138759 = C138081 + C138754;
    const double C138761 = C138753 * ae;
    const double C138758 = C138753 * be;
    const double C138955 = C138204 * C138753;
    const double C18303 =
        2 * C138204 * C138644 + C138204 * (C138644 + C138753 * C138390);
    const double C139042 = C138081 + C139037;
    const double C139044 = C139036 * ae;
    const double C139041 = C139036 * be;
    const double C138143 = C138038 * C138139;
    const double C138727 = C138139 * C138292;
    const double C138940 = C138160 * C138139;
    const double C138998 = C138139 * C138390;
    const double C139098 = C138160 * C139091;
    const double C139228 = C139091 * C138390;
    const double C139318 = C138204 * C139312;
    const double C138142 = C138038 * C138138;
    const double C138416 = C138160 * C138138;
    const double C138470 = C138204 * C138138;
    const double C138520 = C138138 * C138292;
    const double C138595 = C138138 * C138390;
    const double C2922 =
        (C138068 + C138094 * C138292 + ae * (C138069 + C138095 * C138292) +
         be * (C138070 + C138096 * C138292) +
         C138038 * (ae * (C138063 + C138086 * C138292) +
                    be * (C138064 + C138089 * C138292) +
                    C138038 * (C138094 + C138138 * C138292))) /
        C137733;
    const double C5287 =
        (C138068 + C138094 * C138390 + ae * (C138069 + C138095 * C138390) +
         be * (C138070 + C138096 * C138390) +
         C138038 * (ae * (C138063 + C138086 * C138390) +
                    be * (C138064 + C138089 * C138390) +
                    C138038 * (C138094 + C138138 * C138390))) /
        C137733;
    const double C138308 = C138307 * C138042;
    const double C138751 = C138038 * C138307;
    const double C139081 = C138160 * C138307;
    const double C139155 = C138204 * C138307;
    const double C139177 = C138307 * C138390;
    const double C138406 = C138405 * C138042;
    const double C138803 = C138038 * C138405;
    const double C139143 = C138405 * C138292;
    const double C139233 = C138160 * C138405;
    const double C139300 = C138204 * C138405;
    const double C139102 = C139093 * ae;
    const double C139100 = C138160 * C139093;
    const double C139099 = C139093 * be;
    const double C139196 = C138204 * C139093;
    const double C64244 =
        2 * C138204 * C138740 + C138204 * (C138740 + C139093 * C138390);
    const double C139246 = C139242 + C139095;
    const double C139245 = C139239 + C139092;
    const double C139241 = C138734 + C139236;
    const double C139243 = C139235 * ae;
    const double C139240 = C139235 * be;
    const double C139309 = C139215 * ae;
    const double C139306 = C138204 * C139215;
    const double C139304 = C139215 * be;
    const double C187 = (3 * (C138167 + C138172 * C138042) +
                         C138038 * (2 * C138174 + C138038 * C138183)) /
                        C137729;
    const double C899 = (C138160 * (2 * C138174 + C138038 * C138183) +
                         (2 * C138059 + C138038 * C138088) * be) /
                        C137729;
    const double C1656 =
        (C138204 * (2 * C138174 + C138038 * C138183)) / C137729;
    const double C2976 = (C138167 + C138172 * C138042 +
                          C138160 * (C138160 * C138183 + C138088 * be) +
                          C138160 * C138088 * be) /
                         C137729;
    const double C3522 =
        (C138204 * (C138160 * C138183 + C138088 * be)) / C137729;
    const double C5341 =
        (C138167 + C138172 * C138042 + C138183 * C138390) / C137729;
    const double C15790 =
        (2 * C138204 * C138183 + C138204 * (C138183 + C138197 * C138390)) /
        C137729;
    const double C138193 = C138178 + C138189;
    const double C16522 =
        (2 * (ae * C138174 + C138204 * C138669) +
         ae * (C138174 + C138185 * C138390) +
         C138204 * (C138669 + ae * C138204 * C138185 +
                    C138204 * (C138189 + C138204 * C138795))) /
        C137733;
    const double C138646 = C138643 + C138087;
    const double C15812 = C139824 * C15789;
    const double C16178 = C182 * C15789;
    const double C138743 = C138160 * C138738;
    const double C139082 = 2 * C138738;
    const double C139078 = ae * C138738;
    const double C139226 = C138204 * C138738;
    const double C18422 =
        (2 * C138204 * C138652 + C138204 * (C138652 + C138738 * C138390)) /
        C137729;
    const double C21109 = (3 * (C138167 + C138172 * C138390) +
                           C138204 * (2 * C139002 + C138204 * C139006)) /
                          C137729;
    const double C139286 = C138381 + C139156;
    const double C270 = (3 * (C138211 + C138216 * C138042) +
                         C138038 * (2 * C138218 + C138038 * C138227)) /
                        C137729;
    const double C987 = (C138160 * (2 * C138218 + C138038 * C138227)) / C137729;
    const double C1744 = (C138204 * (2 * C138218 + C138038 * C138227) +
                          (2 * C138059 + C138038 * C138088) * be) /
                         C137729;
    const double C3034 =
        (C138211 + C138216 * C138042 + C138227 * C138292) / C137729;
    const double C3596 =
        (C138204 * C138160 * C138227 + C138160 * C138088 * be) / C137729;
    const double C5399 = (C138211 + C138216 * C138042 +
                          C138204 * (C138204 * C138227 + C138088 * be) +
                          C138204 * C138088 * be) /
                         C137729;
    const double C6910 =
        (2 * C138160 * C138227 + C138160 * (C138227 + C138241 * C138292)) /
        C137729;
    const double C7981 = (C138204 * (C138227 + C138241 * C138292) +
                          (C138088 + C138129 * C138292) * be) /
                         C137729;
    const double C138237 = C138222 + C138233;
    const double C7291 =
        (2 * (ae * C138218 + C138160 * C138662) +
         ae * (C138218 + C138229 * C138292) +
         C138160 * (C138662 + ae * C138160 * C138229 +
                    C138160 * (C138233 + C138160 * C138038 * C138324))) /
        C137733;
    const double C13299 =
        (C138160 * C138218 + C138204 * (C138204 * C138778 + C138644 * be) +
         C138204 * C138644 * be) /
        C137729;
    const double C138907 = C138904 + C138087;
    const double C6932 = C139835 * C6909;
    const double C7640 = C265 * C6909;
    const double C7991 = C139835 * C7980;
    const double C8637 = C265 * C7980;
    const double C38359 = C139899 * C7980;
    const double C39201 = C29625 * C7980;
    const double C101339 = C139899 * C7980;
    const double C9785 = (3 * (C138211 + C138216 * C138292) +
                          C138160 * (2 * C138772 + C138160 * C138776)) /
                         C137729;
    const double C10630 = (C138204 * (2 * C138772 + C138160 * C138776) +
                           (2 * C138650 + C138160 * C138740) * be) /
                          C137729;
    const double C13300 = (C138211 + C138216 * C138292 +
                           C138204 * (C138204 * C138776 + C138740 * be) +
                           C138204 * C138740 * be) /
                          C137729;
    const double C138950 = C138948 + C138739;
    const double C139120 = C138321 + C139116;
    const double C139026 = C138204 * C139021;
    const double C139162 = ae * C139021;
    const double C139301 = 2 * C139021;
    const double C352 = (3 * (C138254 + C138259 * C138042) +
                         C138038 * (2 * C138261 + C138038 * C138270)) /
                        C137729;
    const double C1075 = (C138160 * (2 * C138261 + C138038 * C138270) +
                          (2 * C138059 + C138038 * C138088) * ae) /
                         C137729;
    const double C1832 =
        (C138204 * (2 * C138261 + C138038 * C138270)) / C137729;
    const double C3092 = (C138254 + C138259 * C138042 +
                          C138160 * (C138160 * C138270 + C138088 * ae) +
                          C138160 * C138088 * ae) /
                         C137729;
    const double C3670 =
        (C138204 * (C138160 * C138270 + C138088 * ae)) / C137729;
    const double C5457 =
        (C138254 + C138259 * C138042 + C138270 * C138390) / C137729;
    const double C16030 =
        (2 * C138204 * C138270 + C138204 * (C138270 + C138284 * C138390)) /
        C137729;
    const double C138280 = C138265 + C138276;
    const double C138750 = C138189 + C138276;
    const double C8318 =
        (be * C138261 + C138204 * C138662 +
         ae * (C138204 * C138160 * C138229 + C138644 * be) +
         C138160 * (ae * (C138204 * C138229 + C138087) +
                    C138160 * (C138276 + C138204 * C138038 * C138324))) /
        C137733;
    const double C138647 = C138645 + C138090;
    const double C16180 = C182 * C16029;
    const double C16302 = C14017 * C16029;
    const double C138744 = C138160 * C138741;
    const double C139087 = 2 * C138741;
    const double C139079 = be * C138741;
    const double C18634 =
        (2 * C138204 * C138653 + C138204 * (C138653 + C138741 * C138390)) /
        C137729;
    const double C67255 =
        (3 * (C138653 + C138741 * C138390) +
         C138204 * (2 * C138204 * C138741 +
                    C138204 * (C138741 + C139094 * C138390))) /
        C137729;
    const double C21278 = (3 * (C138254 + C138259 * C138390) +
                           C138204 * (2 * C138982 + C138204 * C138984)) /
                          C137729;
    const double C139159 = C139156 + C139157;
    const double C139180 = C138321 + C139157;
    const double C138642 = C138038 * C138302;
    const double C138732 = C138160 * C138302;
    const double C138815 = C138204 * C138302;
    const double C415 =
        (3 * (C138297 + C138302 * C138042) +
         C138038 *
             (2 * C138038 * C138302 +
              C138038 * (C138302 + (C138110 + C138292 * C138111 * C138112) *
                                       C137731 * C138042))) /
        C137733;
    const double C1149 = (ae * (C138167 + C138172 * C138042) +
                          be * (C138254 + C138259 * C138042) +
                          C138160 * (C138297 + C138302 * C138042)) /
                         C137733;
    const double C1906 = (C138204 * (C138297 + C138302 * C138042)) / C137733;
    const double C3149 =
        (C138038 * C138297 + ae * (C138160 * C138174 + C138059 * be) +
         be * (C138160 * C138261 + C138059 * ae) +
         C138160 *
             (ae * C138174 + be * C138261 + C138160 * C138038 * C138302)) /
        C137733;
    const double C3743 = (ae * C138204 * C138174 + be * C138204 * C138261 +
                          C138160 * C138204 * C138038 * C138302) /
                         C137733;
    const double C5514 =
        (C138038 * C138297 + C138038 * C138302 * C138390) / C137733;
    const double C7169 =
        (2 * (ae * C138167 + be * C138254 + C138160 * C138297) +
         ae * (C138167 + C138160 * C138652 + C138650 * be) +
         be * (C138254 + C138160 * C138653 + C138650 * ae) +
         C138160 * (C138297 + ae * C138652 + be * C138653 +
                    C138160 * (C138175 + C138262 + C138160 * C138302))) /
        C137733;
    const double C8196 =
        (C138204 * C138297 + ae * C138204 * C138652 + be * C138204 * C138653 +
         C138160 * (ae * C138204 * C138172 + be * C138204 * C138259 +
                    C138160 * C138204 * C138302)) /
        C137733;
    const double C13462 = (ae * (C138167 + C138172 * C138390) +
                           be * (C138254 + C138259 * C138390) +
                           C138160 * (C138297 + C138302 * C138390)) /
                          C137733;
    const double C13463 =
        (C138297 + C138302 * C138390 + ae * (C138652 + C138738 * C138390) +
         be * (C138653 + C138741 * C138390) +
         C138160 * (ae * (C138172 + C138179 * C138390) +
                    be * (C138259 + C138266 * C138390) +
                    C138160 * (C138302 + C138307 * C138390))) /
        C137733;
    const double C16165 =
        (2 * C138204 * C138297 + C138204 * (C138297 + C138302 * C138390)) /
        C137733;
    const double C571 = (3 * (C138335 + C138340 * C138042) +
                         C138038 * (2 * C138342 + C138038 * C138351)) /
                        C137729;
    const double C1320 =
        (C138160 * (2 * C138342 + C138038 * C138351)) / C137729;
    const double C2077 = (C138204 * (2 * C138342 + C138038 * C138351) +
                          (2 * C138059 + C138038 * C138088) * ae) /
                         C137729;
    const double C3258 =
        (C138335 + C138340 * C138042 + C138351 * C138292) / C137729;
    const double C3884 =
        (C138204 * C138160 * C138351 + C138160 * C138088 * ae) / C137729;
    const double C5623 = (C138335 + C138340 * C138042 +
                          C138204 * (C138204 * C138351 + C138088 * ae) +
                          C138204 * C138088 * ae) /
                         C137729;
    const double C7403 =
        (2 * C138160 * C138351 + C138160 * (C138351 + C138365 * C138292)) /
        C137729;
    const double C8424 = (C138204 * (C138351 + C138365 * C138292) +
                          (C138088 + C138129 * C138292) * ae) /
                         C137729;
    const double C138361 = C138346 + C138357;
    const double C139033 = C138233 + C138357;
    const double C7522 =
        (2 * (be * C138342 + C138160 * C138669) +
         be * (C138342 + C138353 * C138292) +
         C138160 * (C138669 + be * C138160 * C138353 +
                    C138160 * (C138357 + C138160 * C138038 * C138384))) /
        C137733;
    const double C13619 =
        (C138160 * C138342 + C138204 * (C138204 * C138794 + C138644 * ae) +
         C138204 * C138644 * ae) /
        C137729;
    const double C138908 = C138906 + C138090;
    const double C7529 = C5896 * C7402;
    const double C7642 = C265 * C7402;
    const double C8534 = C5896 * C8423;
    const double C8639 = C265 * C8423;
    const double C39060 = C21861 * C8423;
    const double C39203 = C29625 * C8423;
    const double C10123 = (3 * (C138335 + C138340 * C138292) +
                           C138160 * (2 * C138788 + C138160 * C138792)) /
                          C137729;
    const double C11062 = (C138204 * (2 * C138788 + C138160 * C138792) +
                           (2 * C138650 + C138160 * C138740) * ae) /
                          C137729;
    const double C13620 = (C138335 + C138340 * C138292 +
                           C138204 * (C138204 * C138792 + C138740 * ae) +
                           C138204 * C138740 * ae) /
                          C137729;
    const double C138951 = C138949 + C138742;
    const double C139135 = C138381 + C139131;
    const double C139232 = C139116 + C139131;
    const double C139027 = C138204 * C139024;
    const double C139307 = 2 * C139024;
    const double C139298 = be * C139024;
    const double C138672 = C138038 * C138400;
    const double C138944 = C138160 * C138400;
    const double C139015 = C138204 * C138400;
    const double C706 =
        (3 * (C138395 + C138400 * C138042) +
         C138038 *
             (2 * C138038 * C138400 +
              C138038 * (C138400 + (C138110 + C138390 * C138111 * C138112) *
                                       C137731 * C138042))) /
        C137733;
    const double C1471 = (C138160 * (C138395 + C138400 * C138042)) / C137733;
    const double C2228 = (ae * (C138211 + C138216 * C138042) +
                          be * (C138335 + C138340 * C138042) +
                          C138204 * (C138395 + C138400 * C138042)) /
                         C137733;
    const double C3369 =
        (C138038 * C138395 + C138038 * C138400 * C138292) / C137733;
    const double C4027 = (ae * C138160 * C138218 + be * C138160 * C138342 +
                          C138204 * C138160 * C138038 * C138400) /
                         C137733;
    const double C5734 =
        (C138038 * C138395 + ae * (C138204 * C138218 + C138059 * be) +
         be * (C138204 * C138342 + C138059 * ae) +
         C138204 *
             (ae * C138218 + be * C138342 + C138204 * C138038 * C138400)) /
        C137733;
    const double C7629 =
        (2 * C138160 * C138395 + C138160 * (C138395 + C138400 * C138292)) /
        C137733;
    const double C8634 = (ae * (C138211 + C138216 * C138292) +
                          be * (C138335 + C138340 * C138292) +
                          C138204 * (C138395 + C138400 * C138292)) /
                         C137733;
    const double C10287 =
        (3 * (C138395 + C138400 * C138292) +
         C138160 * (2 * C138160 * C138400 +
                    C138160 * (C138400 + C138405 * C138292))) /
        C137733;
    const double C11272 =
        (ae * (2 * C138772 + C138160 * C138776) +
         be * (2 * C138788 + C138160 * C138792) +
         C138204 * (2 * C138160 * C138400 +
                    C138160 * (C138400 + C138405 * C138292))) /
        C137733;
    const double C13778 =
        (C138160 * C138395 + ae * (C138204 * C138772 + C138650 * be) +
         be * (C138204 * C138788 + C138650 * ae) +
         C138204 *
             (ae * C138772 + be * C138788 + C138204 * C138160 * C138400)) /
        C137733;
    const double C13779 =
        (C138395 + C138400 * C138292 + ae * (C138204 * C138776 + C138740 * be) +
         be * (C138204 * C138792 + C138740 * ae) +
         C138204 * (ae * C138776 + be * C138792 +
                    C138204 * (C138400 + C138405 * C138292))) /
        C137733;
    const double C16633 =
        (2 * (ae * C138211 + be * C138335 + C138204 * C138395) +
         ae * (C138211 + C138204 * C138913 + C138911 * be) +
         be * (C138335 + C138204 * C138914 + C138911 * ae) +
         C138204 * (C138395 + ae * C138913 + be * C138914 +
                    C138204 * (C138219 + C138343 + C138204 * C138400))) /
        C137733;
    const double C208 = C182 * C112;
    const double C291 = C265 * C112;
    const double C431 = C410 * C112;
    const double C722 = C701 * C112;
    const double C915 = C182 * C810;
    const double C1003 = C265 * C810;
    const double C1155 = C410 * C810;
    const double C1477 = C701 * C810;
    const double C21881 = C21861 * C810;
    const double C1672 = C182 * C1567;
    const double C1760 = C265 * C1567;
    const double C1912 = C410 * C1567;
    const double C2234 = C701 * C1567;
    const double C29645 = C29625 * C1567;
    const double C5914 = C5896 * C2910;
    const double C6000 = C265 * C2910;
    const double C6516 = C701 * C2910;
    const double C22739 = C21861 * C2910;
    const double C23716 = C21861 * C3440;
    const double C23820 = C265 * C3440;
    const double C24451 = C701 * C3440;
    const double C30369 = C182 * C3440;
    const double C30481 = C29625 * C3440;
    const double C30684 = C410 * C3440;
    const double C13938 = C182 * C5275;
    const double C14035 = C14017 * C5275;
    const double C14196 = C410 * C5275;
    const double C31468 = C29625 * C5275;
    const double C14768 = C182 * C13127;
    const double C14876 = C14017 * C13127;
    const double C15084 = C410 * C13127;
    const double C39500 = C21861 * C13127;
    const double C39642 = C29625 * C13127;
    const double C57237 = C265 * C9609;
    const double C57575 = C701 * C9609;
    const double C57811 = C265 * C10394;
    const double C58240 = C701 * C10394;
    const double C88814 = C29625 * C10394;
    const double C104708 = C5896 * C10394;
    const double C63662 = C14017 * C13128;
    const double C89613 = C29625 * C13128;
    const double C107397 = C5896 * C13128;
    const double C134492 = C21861 * C13128;
    const double C112578 = C182 * C21012;
    const double C112754 = C410 * C21012;
    const double C139062 = C139055 + C139060;
    const double C67003 = (3 * (C138705 + C138415 * C138390) +
                           C138204 * (2 * C139203 + C138204 * C139209)) /
                          C137729;
    const double C139267 = C139260 + C139265;
    const double C139076 = C139069 + C139074;
    const double C67002 = (3 * (C138719 + C138414 * C138390) +
                           C138204 * (2 * C139218 + C138204 * C139224)) /
                          C137729;
    const double C139284 = C139277 + C139282;
    const double C138201 = C138191 + C138199;
    const double C21110 = (3 * (C138174 + C138185 * C138390) +
                           C138204 * (2 * C139008 + C138204 * C139012)) /
                          C137729;
    const double C139295 = C139288 + C139293;
    const double C138245 = C138235 + C138243;
    const double C9786 = (3 * (C138218 + C138229 * C138292) +
                          C138160 * (2 * C138778 + C138160 * C138784)) /
                         C137729;
    const double C139126 = C139118 + C139124;
    const double C138288 = C138278 + C138286;
    const double C21279 = (3 * (C138261 + C138272 * C138390) +
                           C138204 * (2 * C138986 + C138204 * C138988)) /
                          C137729;
    const double C139273 = C139271 + C139272;
    const double C138369 = C138359 + C138367;
    const double C10124 = (3 * (C138342 + C138353 * C138292) +
                           C138160 * (2 * C138794 + C138160 * C138800)) /
                          C137729;
    const double C139141 = C139133 + C139139;
    const double C15808 = C1666 - C1667;
    const double C15800 = C1667 - C1666;
    const double C21115 = C15803 - C15804;
    const double C193 =
        (3 * (C138171 + ae * C138174 + C138038 * C138182) +
         ae * (2 * C138174 + C138038 * C138183) +
         C138038 *
             (2 * C138182 + ae * C138183 +
              C138038 * (C138178 + ae * C138038 * C138179 +
                         C138038 * (ae * C138179 +
                                    C138038 * C138112 * C138111 * C138166)))) /
        C137733;
    const double C903 =
        (be * (C138051 + C138038 * C138070 + C138059 * ae) +
         C138160 * (C138171 + ae * C138174 + C138038 * C138182)) /
        C137733;
    const double C1660 =
        (C138204 * (C138171 + ae * C138174 + C138038 * C138182)) / C137733;
    const double C2979 =
        (ae * C138167 + C138038 * C138171 + be * C138160 * C138070 +
         C138160 * (be * C138070 + C138160 * C138182)) /
        C137733;
    const double C3525 =
        (C138204 * (be * C138070 + C138160 * C138182)) / C137733;
    const double C5344 =
        (ae * C138167 + C138038 * C138171 + C138182 * C138390) / C137733;
    const double C9709 =
        (3 * (C138171 + be * C138705 + C138160 * C138708) +
         be * (2 * C138705 + C138160 * C138709) +
         C138160 * (2 * C138708 + be * C138709 +
                    C138160 * (C138178 + C138418 +
                               C138160 * (C138109 + C138160 * C138190)))) /
        C137733;
    const double C10530 =
        (C138204 * (2 * C138708 + be * C138709 +
                    C138160 * (C138178 + C138418 +
                               C138160 * (C138109 + C138160 * C138190)))) /
        C137733;
    const double C13220 =
        (be * C138051 + C138160 * C138171 + C138708 * C138390) / C137733;
    const double C13221 =
        (C138171 + be * C138705 + C138160 * C138708 +
         (C138178 + C138418 + C138160 * (C138109 + C138160 * C138190)) *
             C138390) /
        C137733;
    const double C18424 =
        (2 * C138204 * C138708 +
         C138204 * (C138708 + (C138109 + C138160 * C138190) * C138390)) /
        C137733;
    const double C112577 = C21121 - C21120;
    const double C138198 = C138038 * C138196;
    const double C138712 = C138160 * C138196;
    const double C15792 =
        (2 * C138204 * C138182 + C138204 * (C138182 + C138196 * C138390)) /
        C137733;
    const double C21112 =
        (3 * (C138182 + C138196 * C138390) +
         C138204 * (2 * C138204 * C138196 +
                    C138204 * (C138196 +
                               (ae * C138192 + C138038 * std::pow(C138044, 7) *
                                                   bs[7] * C138166) *
                                   C138390))) /
        C137733;
    const double C139059 = C138160 * C139057;
    const double C67087 =
        (3 * (C138708 + C139057 * C138390) +
         C138204 * (2 * C138204 * C139057 +
                    C138204 * (C139057 +
                               (be * C138130 + C138160 * std::pow(C138044, 7) *
                                                   bs[7] * C138166) *
                                   C138390))) /
        C137733;
    const double C112572 =
        (4 * (2 * C138204 * C138178 + C138204 * C139256) +
         C138204 *
             (3 * C139256 +
              C138204 * (2 * C138204 * C138190 +
                         C138204 * (C138190 + std::pow(C138044, 7) * bs[7] *
                                                  C138166 * C138390)))) /
        C137733;
    const double C358 =
        (3 * (C138258 + be * C138261 + C138038 * C138269) +
         be * (2 * C138261 + C138038 * C138270) +
         C138038 *
             (2 * C138269 + be * C138270 +
              C138038 * (C138265 + be * C138038 * C138266 +
                         C138038 * (be * C138266 +
                                    C138038 * C138112 * C138111 * C138253)))) /
        C137733;
    const double C1079 =
        (ae * (C138050 + C138038 * C138069 + C138059 * be) +
         C138160 * (C138258 + be * C138261 + C138038 * C138269)) /
        C137733;
    const double C1836 =
        (C138204 * (C138258 + be * C138261 + C138038 * C138269)) / C137733;
    const double C3095 =
        (be * C138254 + C138038 * C138258 + ae * C138160 * C138069 +
         C138160 * (ae * C138069 + C138160 * C138269)) /
        C137733;
    const double C3673 =
        (ae * C138204 * C138069 + C138160 * C138204 * C138269) / C137733;
    const double C5460 =
        (be * C138254 + C138038 * C138258 + C138269 * C138390) / C137733;
    const double C9878 =
        (3 * (C138258 + ae * C138719 + C138160 * C138722) +
         ae * (2 * C138719 + C138160 * C138723) +
         C138160 * (2 * C138722 + ae * C138723 +
                    C138160 * (C138265 + C138417 +
                               C138160 * (C138108 + C138160 * C138277)))) /
        C137733;
    const double C64598 = C139731 * C18636;
    const double C112697 = C139731 * C21280;
    const double C138285 = C138038 * C138283;
    const double C138726 = C138160 * C138283;
    const double C138813 = C138204 * C138283;
    const double C8095 =
        (C138204 * C138269 + ae * C138204 * C138160 * C138095 +
         C138160 * (ae * C138204 * C138095 + C138160 * C138204 * C138283)) /
        C137733;
    const double C13385 = (ae * (C138069 + C138095 * C138390) +
                           C138160 * (C138269 + C138283 * C138390)) /
                          C137733;
    const double C16032 =
        (2 * C138204 * C138269 + C138204 * (C138269 + C138283 * C138390)) /
        C137733;
    const double C139073 = C138160 * C139071;
    const double C139151 = C138471 + C139150;
    const double C59642 =
        (2 * (ae * C138994 + C138160 * C139175) +
         ae * (C138723 + C139072 * C138390) +
         C138160 *
             (C139175 + ae * (C138414 + C138160 * C138127 * C138390) +
              C138160 * (ae * (C138086 + C138127 * C138390) +
                         C138160 * (C138277 + std::pow(C138044, 7) * bs[7] *
                                                  C138253 * C138390)))) /
        C137733;
    const double C64585 =
        (2 * C138811 + C138204 * C139175 +
         ae * (2 * C138204 * C138414 +
               C138204 * (C138414 + C138160 * C138127 * C138390)) +
         C138160 *
             (ae * (2 * C138468 + C138204 * (C138086 + C138127 * C138390)) +
              C138160 * (2 * C139149 +
                         C138204 * (C138277 + std::pow(C138044, 7) * bs[7] *
                                                  C138253 * C138390)))) /
        C137733;
    const double C67256 =
        (ae * (3 * C138994 +
               C138204 *
                   (2 * C138468 + C138204 * (C138086 + C138127 * C138390))) +
         C138160 *
             (3 * C139175 +
              C138204 * (2 * C139149 +
                         C138204 * (C138277 + std::pow(C138044, 7) * bs[7] *
                                                  C138253 * C138390)))) /
        C137733;
    const double C112688 =
        (4 * (2 * C138811 + C138204 * C139175) +
         C138204 *
             (3 * C139175 +
              C138204 * (2 * C139149 +
                         C138204 * (C138277 + std::pow(C138044, 7) * bs[7] *
                                                  C138253 * C138390)))) /
        C137733;
    const double C6928 = C997 - C998;
    const double C6920 = C998 - C997;
    const double C9791 = C6923 - C6924;
    const double C276 =
        (3 * (C138215 + ae * C138218 + C138038 * C138226) +
         ae * (2 * C138218 + C138038 * C138227) +
         C138038 *
             (2 * C138226 + ae * C138227 +
              C138038 * (C138222 + ae * C138038 * C138223 +
                         C138038 * (ae * C138223 +
                                    C138038 * C138112 * C138111 * C138210)))) /
        C137733;
    const double C991 =
        (C138160 * (C138215 + ae * C138218 + C138038 * C138226)) / C137733;
    const double C1748 =
        (be * (C138051 + C138038 * C138070 + C138059 * ae) +
         C138204 * (C138215 + ae * C138218 + C138038 * C138226)) /
        C137733;
    const double C3037 =
        (ae * C138211 + C138038 * C138215 + C138226 * C138292) / C137733;
    const double C3599 =
        (be * C138160 * C138070 + C138204 * C138160 * C138226) / C137733;
    const double C5402 =
        (ae * C138211 + C138038 * C138215 + be * C138204 * C138070 +
         C138204 * (be * C138070 + C138204 * C138226)) /
        C137733;
    const double C21202 =
        (3 * (C138215 + be * C138966 + C138204 * C138969) +
         be * (2 * C138966 + C138204 * C138970) +
         C138204 * (2 * C138969 + be * C138970 +
                    C138204 * (C138222 + C138472 +
                               C138204 * (C138109 + C138204 * C138234)))) /
        C137733;
    const double C57236 = C9797 - C9796;
    const double C138242 = C138038 * C138240;
    const double C138928 = C138160 * C138240;
    const double C138973 = C138204 * C138240;
    const double C6912 =
        (2 * C138160 * C138226 + C138160 * (C138226 + C138240 * C138292)) /
        C137733;
    const double C7983 = (be * (C138070 + C138096 * C138292) +
                          C138204 * (C138226 + C138240 * C138292)) /
                         C137733;
    const double C9788 =
        (3 * (C138226 + C138240 * C138292) +
         C138160 * (2 * C138160 * C138240 +
                    C138160 * (C138240 +
                               (ae * C138236 + C138038 * std::pow(C138044, 7) *
                                                   bs[7] * C138210) *
                                   C138292))) /
        C137733;
    const double C57231 =
        (4 * (2 * C138926 + C138160 * C139065) +
         C138160 *
             (3 * C139065 +
              C138160 * (2 * C138160 * C138234 +
                         C138160 * (C138234 + std::pow(C138044, 7) * bs[7] *
                                                  C138210 * C138292)))) /
        C137733;
    const double C64473 =
        (2 * (be * C138709 + C138204 * C139065) +
         be * (C138709 + C139058 * C138390) +
         C138204 *
             (C139065 + be * C138204 * C139058 +
              C138204 * (be * C139058 +
                         C138204 * (C138234 + std::pow(C138044, 7) * bs[7] *
                                                  C138210 * C138292)))) /
        C137733;
    const double C139208 = C138418 + C139206;
    const double C139264 = C138204 * C139262;
    const double C513 = C508 - C509;
    const double C7300 = C1246 - C1247;
    const double C7298 = C1247 - C1246;
    const double C10047 = C7296 - C7297;
    const double C10044 =
        (3 * (C138318 + ae * C138772 + C138160 * C138775) +
         ae * (2 * C138772 + C138160 * C138776) +
         C138160 * (2 * C138775 + ae * C138776 +
                    C138160 * (C138321 + ae * C138160 * C138223 +
                               C138160 * (C138230 + C138160 * C138324)))) /
        C137733;
    const double C10958 =
        (2 * (ae * (C138204 * C138216 + C138058) + C138160 * C138820) +
         ae * (C138204 * C138776 + C138740 * be) +
         C138160 * (C138820 + ae * (C138204 * C138160 * C138223 + C138739) +
                    C138160 * (ae * (C138204 * C138223 + C138080) +
                               C138160 * (C138273 + C138204 * C138324)))) /
        C137733;
    const double C13540 =
        (ae * (C138211 + C138204 * (C138204 * C138216 + C138058) +
               C138204 * C138053 * be) +
         C138160 * (C138318 + be * C138204 * C138259 + C138204 * C138820)) /
        C137733;
    const double C13541 =
        (C138318 + be * C138204 * C138259 + C138204 * C138820 +
         ae * (C138772 + C138204 * (C138204 * C138160 * C138223 + C138739) +
               C138204 * C138734 * be) +
         C138160 * (ae * (C138216 + C138204 * (C138204 * C138223 + C138080) +
                          C138204 * C138074 * be) +
                    C138160 * (C138321 + be * C138204 * C138266 +
                               C138204 * (C138273 + C138204 * C138324)))) /
        C137733;
    const double C16294 =
        (2 * (be * C138254 + C138204 * C138318) +
         be * (C138254 + C138259 * C138390) +
         C138204 * (C138318 + be * C138204 * C138259 + C138204 * C138820)) /
        C137733;
    const double C18862 =
        (ae * (2 * C138913 +
               C138204 * (C138216 + C138204 * (C138204 * C138223 + C138080) +
                          C138204 * C138074 * be) +
               (C138053 + C138074 * C138390) * be) +
         C138160 * (2 * C138820 + be * (C138259 + C138266 * C138390) +
                    C138204 * (C138321 + be * C138204 * C138266 +
                               C138204 * (C138273 + C138204 * C138324)))) /
        C137733;
    const double C21459 =
        (3 * (C138318 + be * C138982 + C138204 * C138820) +
         be * (2 * C138982 + C138204 * C138984) +
         C138204 * (2 * C138820 + be * C138984 +
                    C138204 * (C138321 + be * C138204 * C138266 +
                               C138204 * (C138273 + C138204 * C138324)))) /
        C137733;
    const double C22239 = C1249 - C1248;
    const double C23191 = C1248 - C1249;
    const double C500 =
        (4 * (2 * C138038 * C138321 + C138038 * C138326) +
         C138038 *
             (3 * C138326 +
              C138038 * (2 * C138038 * C138324 +
                         C138038 * (C138324 + std::pow(C138044, 7) * bs[7] *
                                                  C138315 * C138042)))) /
        C137733;
    const double C1243 =
        (ae * (2 * C138218 + C138038 * C138227) +
         C138160 * (2 * C138038 * C138321 + C138038 * C138326)) /
        C137733;
    const double C2000 =
        (be * (2 * C138261 + C138038 * C138270) +
         C138204 * (2 * C138038 * C138321 + C138038 * C138326)) /
        C137733;
    const double C3204 = (C138318 + C138321 * C138042 + ae * C138160 * C138227 +
                          C138160 * (ae * C138227 + C138160 * C138326)) /
                         C137733;
    const double C3814 = (ae * (C138204 * C138227 + C138088 * be) +
                          C138160 * (be * C138270 + C138204 * C138326)) /
                         C137733;
    const double C5569 = (C138318 + C138321 * C138042 + be * C138204 * C138270 +
                          C138204 * (be * C138270 + C138204 * C138326)) /
                         C137733;
    const double C7292 =
        (2 * (ae * C138227 + C138160 * C138326) +
         ae * (C138227 + C138241 * C138292) +
         C138160 *
             (C138326 + ae * C138160 * C138241 +
              C138160 * (ae * C138241 +
                         C138160 * (C138324 + std::pow(C138044, 7) * bs[7] *
                                                  C138315 * C138042)))) /
        C137733;
    const double C16296 =
        (2 * (be * C138270 + C138204 * C138326) +
         be * (C138270 + C138284 * C138390) +
         C138204 *
             (C138326 + be * C138204 * C138284 +
              C138204 * (be * C138284 +
                         C138204 * (C138324 + std::pow(C138044, 7) * bs[7] *
                                                  C138315 * C138042)))) /
        C137733;
    const double C138783 = C138233 + C138781;
    const double C138823 = C138276 + C138822;
    const double C139123 = C138160 * C139121;
    const double C139165 = C138160 * C139164;
    const double C139181 = C138204 * C139164;
    const double C577 =
        (3 * (C138339 + be * C138342 + C138038 * C138350) +
         be * (2 * C138342 + C138038 * C138351) +
         C138038 *
             (2 * C138350 + be * C138351 +
              C138038 * (C138346 + be * C138038 * C138347 +
                         C138038 * (be * C138347 +
                                    C138038 * C138112 * C138111 * C138334)))) /
        C137733;
    const double C1324 =
        (C138160 * (C138339 + be * C138342 + C138038 * C138350)) / C137733;
    const double C2081 =
        (ae * (C138050 + C138038 * C138069 + C138059 * be) +
         C138204 * (C138339 + be * C138342 + C138038 * C138350)) /
        C137733;
    const double C3261 =
        (be * C138335 + C138038 * C138339 + C138350 * C138292) / C137733;
    const double C3887 =
        (ae * C138160 * C138069 + C138204 * C138160 * C138350) / C137733;
    const double C5626 =
        (be * C138335 + C138038 * C138339 + ae * C138204 * C138069 +
         C138204 * (ae * C138069 + C138204 * C138350)) /
        C137733;
    const double C21537 =
        (3 * (C138339 + ae * C138990 + C138204 * C138993) +
         ae * (2 * C138990 + C138204 * C138994) +
         C138204 * (2 * C138993 + ae * C138994 +
                    C138204 * (C138346 + C138471 +
                               C138204 * (C138108 + C138204 * C138358)))) /
        C137733;
    const double C138366 = C138038 * C138364;
    const double C138939 = C138160 * C138364;
    const double C138997 = C138204 * C138364;
    const double C7405 =
        (2 * C138160 * C138350 + C138160 * (C138350 + C138364 * C138292)) /
        C137733;
    const double C8426 = (ae * (C138069 + C138095 * C138292) +
                          C138204 * (C138350 + C138364 * C138292)) /
                         C137733;
    const double C10126 =
        (3 * (C138350 + C138364 * C138292) +
         C138160 * (2 * C138160 * C138364 +
                    C138160 * (C138364 +
                               (be * C138360 + C138038 * std::pow(C138044, 7) *
                                                   bs[7] * C138334) *
                                   C138292))) /
        C137733;
    const double C57460 =
        (4 * (2 * C138937 + C138160 * C139129) +
         C138160 *
             (3 * C139129 +
              C138160 * (2 * C138160 * C138358 +
                         C138160 * (C138358 + std::pow(C138044, 7) * bs[7] *
                                                  C138334 * C138292)))) /
        C137733;
    const double C64929 =
        (2 * (ae * C138723 + C138204 * C139129) +
         ae * (C138723 + C139072 * C138390) +
         C138204 *
             (C139129 + ae * C138204 * C139072 +
              C138204 * (ae * C139072 +
                         C138204 * (C138358 + std::pow(C138044, 7) * bs[7] *
                                                  C138334 * C138292)))) /
        C137733;
    const double C139223 = C138417 + C139221;
    const double C139281 = C138204 * C139279;
    const double C647 = C642 - C643;
    const double C16531 = C2156 - C2157;
    const double C16529 = C2157 - C2156;
    const double C21623 = C16527 - C16528;
    const double C10211 =
        (3 * (C138378 + be * C138788 + C138160 * C138791) +
         be * (2 * C138788 + C138160 * C138792) +
         C138160 * (2 * C138791 + be * C138792 +
                    C138160 * (C138381 + be * C138160 * C138347 +
                               C138160 * (C138354 + C138160 * C138384)))) /
        C137733;
    const double C13700 =
        (be * C138335 + C138160 * C138378 + ae * C138204 * C138652 +
         C138204 * (ae * C138652 + C138204 * C138791)) /
        C137733;
    const double C19068 =
        (2 * (ae * C138652 + C138204 * C138791) +
         ae * (C138652 + C138738 * C138390) +
         C138204 * (C138791 + ae * C138204 * C138738 +
                    C138204 * (ae * C138738 +
                               C138204 * (C138354 + C138160 * C138384)))) /
        C137733;
    const double C21620 =
        (3 * (C138378 + ae * C139002 + C138204 * C139005) +
         ae * (2 * C139002 + C138204 * C139006) +
         C138204 * (2 * C139005 + ae * C139006 +
                    C138204 * (C138381 + ae * C138204 * C138179 +
                               C138204 * (C138186 + C138204 * C138384)))) /
        C137733;
    const double C30048 = C2159 - C2158;
    const double C32014 = C2158 - C2159;
    const double C634 =
        (4 * (2 * C138038 * C138381 + C138038 * C138386) +
         C138038 *
             (3 * C138386 +
              C138038 * (2 * C138038 * C138384 +
                         C138038 * (C138384 + std::pow(C138044, 7) * bs[7] *
                                                  C138375 * C138042)))) /
        C137733;
    const double C1396 =
        (be * (2 * C138342 + C138038 * C138351) +
         C138160 * (2 * C138038 * C138381 + C138038 * C138386)) /
        C137733;
    const double C2153 =
        (ae * (2 * C138174 + C138038 * C138183) +
         C138204 * (2 * C138038 * C138381 + C138038 * C138386)) /
        C137733;
    const double C3316 = (C138378 + C138381 * C138042 + be * C138160 * C138351 +
                          C138160 * (be * C138351 + C138160 * C138386)) /
                         C137733;
    const double C3958 = (ae * (C138160 * C138183 + C138088 * be) +
                          C138204 * (be * C138351 + C138160 * C138386)) /
                         C137733;
    const double C5681 = (C138378 + C138381 * C138042 + ae * C138204 * C138183 +
                          C138204 * (ae * C138183 + C138204 * C138386)) /
                         C137733;
    const double C7523 =
        (2 * (be * C138351 + C138160 * C138386) +
         be * (C138351 + C138365 * C138292) +
         C138160 *
             (C138386 + be * C138160 * C138365 +
              C138160 * (be * C138365 +
                         C138160 * (C138384 + std::pow(C138044, 7) * bs[7] *
                                                  C138375 * C138042)))) /
        C137733;
    const double C16523 =
        (2 * (ae * C138183 + C138204 * C138386) +
         ae * (C138183 + C138197 * C138390) +
         C138204 *
             (C138386 + ae * C138204 * C138197 +
              C138204 * (ae * C138197 +
                         C138204 * (C138384 + std::pow(C138044, 7) * bs[7] *
                                                  C138375 * C138042)))) /
        C137733;
    const double C138799 = C138357 + C138797;
    const double C139011 = C138189 + C139009;
    const double C139138 = C138160 * C139136;
    const double C139227 = C138204 * C139136;
    const double C139292 = C138204 * C139290;
    const double C68542 = C137748 * C820;
    const double C68540 = C137748 * C819;
    const double C68924 = C137748 * C2910;
    const double C68920 = C137748 * C1074;
    const double C68916 = C137748 * C811;
    const double C68913 = C137748 * C3091;
    const double C68909 = C137748 * C2909;
    const double C68905 = C137748 * C1073;
    const double C68901 = C137748 * C812;
    const double C69255 = C137748 * C1319;
    const double C69252 = C137748 * C3257;
    const double C69248 = C137748 * C1318;
    const double C71597 = C137748 * C6626;
    const double C71832 = C137748 * C7402;
    const double C72415 = C137748 * C7753;
    const double C72411 = C137748 * C3669;
    const double C72407 = C137748 * C3439;
    const double C72721 = C137748 * C8423;
    const double C72717 = C137748 * C3883;
    const double C76775 = C137748 * C3440;
    const double C77589 = C137748 * C1577;
    const double C77587 = C137748 * C1576;
    const double C78027 = C137748 * C1831;
    const double C78023 = C137748 * C1568;
    const double C78020 = C137748 * C1830;
    const double C78016 = C137748 * C1569;
    const double C78427 = C137748 * C2076;
    const double C78424 = C137748 * C2075;
    const double C81293 = C137748 * C13127;
    const double C84715 = C137748 * C5456;
    const double C84711 = C137748 * C5274;
    const double C85013 = C137748 * C5622;
    const double C124778 = C137748 * C5275;
    const double C129839 = C137748 * C16029;
    const double C129835 = C137748 * C15622;
    const double C106 =
        (C137748 / C137734 - (0 * be) / C137729) / C137734 + (0 * ae) / C137729;
    const double C21784 = C137748 / C137734 - (0 * be) / C137729;
    const double C47140 = C137748 / C137734 + (0 * ae) / C137729;
    const double C137750 = C137747 / C137729;
    const double C6645 = C5818 * C820;
    const double C6643 = C5818 * C819;
    const double C7065 = C5818 * C2910;
    const double C7061 = C5818 * C1074;
    const double C7057 = C5818 * C811;
    const double C7054 = C5818 * C3091;
    const double C7050 = C5818 * C2909;
    const double C7046 = C5818 * C1073;
    const double C7042 = C5818 * C812;
    const double C7418 = C5818 * C1319;
    const double C7415 = C5818 * C3257;
    const double C7411 = C5818 * C1318;
    const double C9887 = C5818 * C6626;
    const double C10133 = C5818 * C7402;
    const double C10755 = C5818 * C7753;
    const double C10751 = C5818 * C3669;
    const double C10747 = C5818 * C3439;
    const double C11073 = C5818 * C8423;
    const double C11069 = C5818 * C3883;
    const double C15641 = C5818 * C1577;
    const double C15639 = C5818 * C1576;
    const double C16061 = C5818 * C5275;
    const double C16057 = C5818 * C1831;
    const double C16053 = C5818 * C1568;
    const double C16050 = C5818 * C5456;
    const double C16046 = C5818 * C5274;
    const double C16042 = C5818 * C1830;
    const double C16038 = C5818 * C1569;
    const double C16418 = C5818 * C2076;
    const double C16415 = C5818 * C5622;
    const double C16411 = C5818 * C2075;
    const double C18641 = C5818 * C13127;
    const double C21293 = C5818 * C16029;
    const double C21289 = C5818 * C15622;
    const double C38500 = C5818 * C3440;
    const double C55281 = C54790 * C820;
    const double C55279 = C54790 * C819;
    const double C55277 = C54790 * C6632;
    const double C55275 = C54790 * C6631;
    const double C55273 = C54790 * C2913;
    const double C55271 = C54790 * C2912;
    const double C55269 = C54790 * C822;
    const double C55267 = C54790 * C821;
    const double C55533 = C54790 * C6626;
    const double C55531 = C54790 * C3091;
    const double C55529 = C54790 * C2909;
    const double C55527 = C54790 * C1073;
    const double C55525 = C54790 * C812;
    const double C55522 = C54790 * C6627;
    const double C55520 = C54790 * C3090;
    const double C55518 = C54790 * C2908;
    const double C55516 = C54790 * C1072;
    const double C55514 = C54790 * C813;
    const double C55745 = C54790 * C7402;
    const double C55743 = C54790 * C3257;
    const double C55741 = C54790 * C1318;
    const double C55740 = C54790 * C7401;
    const double C55738 = C54790 * C3256;
    const double C55736 = C54790 * C1317;
    const double C57301 = C54790 * C9609;
    const double C57661 = C54790 * C3443;
    const double C57659 = C54790 * C3442;
    const double C57657 = C54790 * C7759;
    const double C57655 = C54790 * C7758;
    const double C57891 = C54790 * C10394;
    const double C57887 = C54790 * C7754;
    const double C57885 = C54790 * C3668;
    const double C57883 = C54790 * C3438;
    const double C58101 = C54790 * C8422;
    const double C58099 = C54790 * C3882;
    const double C60668 = C54790 * C13131;
    const double C60666 = C54790 * C13130;
    const double C61005 = C54790 * C13127;
    const double C61003 = C54790 * C3669;
    const double C61001 = C54790 * C3439;
    const double C60998 = C54790 * C13126;
    const double C61311 = C54790 * C3883;
    const double C61310 = C54790 * C13618;
    const double C61640 = C54790 * C1577;
    const double C61638 = C54790 * C1576;
    const double C61636 = C54790 * C5278;
    const double C61634 = C54790 * C5277;
    const double C61632 = C54790 * C1579;
    const double C61630 = C54790 * C1578;
    const double C61990 = C54790 * C5456;
    const double C61988 = C54790 * C5274;
    const double C61986 = C54790 * C1830;
    const double C61984 = C54790 * C1569;
    const double C61983 = C54790 * C5455;
    const double C61981 = C54790 * C5273;
    const double C61979 = C54790 * C1829;
    const double C61977 = C54790 * C1570;
    const double C62334 = C54790 * C5622;
    const double C62332 = C54790 * C2075;
    const double C62331 = C54790 * C5621;
    const double C62329 = C54790 * C2074;
    const double C63744 = C54790 * C13128;
    const double C64251 = C54790 * C18305;
    const double C64249 = C54790 * C18304;
    const double C64595 = C54790 * C18302;
    const double C67008 = C54790 * C15628;
    const double C67006 = C54790 * C15627;
    const double C67264 = C54790 * C16028;
    const double C67262 = C54790 * C15623;
    const double C86284 = C54790 * C7753;
    const double C86582 = C54790 * C8423;
    const double C109279 = C54790 * C16029;
    const double C109277 = C54790 * C15622;
    const double C112694 = C54790 * C21012;
    const double C140009 = C139965 - C139993;
    const double C140010 = C139969 - C139995;
    const double C6642 = C5811 * C828;
    const double C7060 = C5811 * C1078;
    const double C7056 = C5811 * C819;
    const double C7051 = C5811 * C3094;
    const double C7047 = C5811 * C2912;
    const double C7043 = C5811 * C1077;
    const double C7039 = C5811 * C821;
    const double C7417 = C5811 * C1323;
    const double C7412 = C5811 * C3260;
    const double C7408 = C5811 * C1322;
    const double C9890 = C5811 * C7035;
    const double C9886 = C5811 * C6631;
    const double C10132 = C5811 * C7404;
    const double C10758 = C5811 * C8094;
    const double C10754 = C5811 * C7758;
    const double C10750 = C5811 * C3672;
    const double C10746 = C5811 * C3442;
    const double C11072 = C5811 * C8425;
    const double C11068 = C5811 * C3886;
    const double C15638 = C5811 * C1585;
    const double C16056 = C5811 * C1835;
    const double C16052 = C5811 * C1576;
    const double C16047 = C5811 * C5459;
    const double C16043 = C5811 * C5277;
    const double C16039 = C5811 * C1834;
    const double C16035 = C5811 * C1578;
    const double C16417 = C5811 * C2080;
    const double C16412 = C5811 * C5625;
    const double C16408 = C5811 * C2079;
    const double C18644 = C5811 * C13384;
    const double C18640 = C5811 * C13130;
    const double C18968 = C5811 * C13622;
    const double C21292 = C5811 * C16031;
    const double C21288 = C5811 * C15627;
    const double C21543 = C5811 * C16404;
    const double C137819 = C137818 / C137729;
    const double C47237 = C47217 * C810;
    const double C47230 = C47217 * C811;
    const double C47226 = C47217 * C820;
    const double C47222 = C47217 * C812;
    const double C47487 = C47217 * C1074;
    const double C47485 = C47217 * C898;
    const double C47479 = C47217 * C1073;
    const double C47477 = C47217 * C897;
    const double C47753 = C47217 * C1319;
    const double C47748 = C47217 * C1318;
    const double C48092 = C47217 * C2910;
    const double C48084 = C47217 * C2909;
    const double C48426 = C47217 * C3091;
    const double C48424 = C47217 * C2975;
    const double C48752 = C47217 * C3257;
    const double C49066 = C47217 * C3440;
    const double C49058 = C47217 * C3439;
    const double C49376 = C47217 * C3669;
    const double C49374 = C47217 * C3521;
    const double C49690 = C47217 * C3883;
    const double C61774 = C47217 * C13127;
    const double C61771 = C47217 * C13131;
    const double C61767 = C47217 * C13126;
    const double C61763 = C47217 * C3443;
    const double C61759 = C47217 * C3438;
    const double C62096 = C47217 * C3668;
    const double C62094 = C47217 * C3520;
    const double C62441 = C47217 * C13618;
    const double C62437 = C47217 * C3882;
    const double C64369 = C47217 * C13128;
    const double C64365 = C47217 * C7759;
    const double C64361 = C47217 * C7754;
    const double C65038 = C47217 * C8422;
    const double C67099 = C47217 * C18305;
    const double C67095 = C47217 * C18302;
    const double C76507 = C47217 * C7753;
    const double C77321 = C47217 * C8423;
    const double C54845 =
        (C137922 / C137734 - (0 * be) / C137729) / C137734 + (0 * ae) / C137729;
    const double C67831 = C137922 / C137734 - (0 * be) / C137729;
    const double C21888 = C21873 - C21874;
    const double C22406 = C22399 - C22400;
    const double C438 = C434 - C420;
    const double C16189 = C16186 - C16170;
    const double C140011 = C139980 - C140004;
    const double C5916 = C5894 * C119;
    const double C5910 = C5894 * C110;
    const double C5905 = C5894 * C117;
    const double C5899 = C5894 * C109;
    const double C6177 = C5894 * C350;
    const double C6175 = C5894 * C185;
    const double C6157 = C5894 * C349;
    const double C6155 = C5894 * C184;
    const double C6429 = C5894 * C569;
    const double C6424 = C5894 * C568;
    const double C6805 = C5894 * C820;
    const double C6799 = C5894 * C812;
    const double C7182 = C5894 * C1073;
    const double C7180 = C5894 * C897;
    const double C7525 = C5894 * C1318;
    const double C7876 = C5894 * C1577;
    const double C7870 = C5894 * C1569;
    const double C8209 = C5894 * C1830;
    const double C8207 = C5894 * C1654;
    const double C8530 = C5894 * C2075;
    const double C102189 = C5894 * C1579;
    const double C102183 = C5894 * C1570;
    const double C102490 = C5894 * C1829;
    const double C102488 = C5894 * C1653;
    const double C102804 = C5894 * C2074;
    const double C104710 = C5894 * C3443;
    const double C104704 = C5894 * C3438;
    const double C105028 = C5894 * C3668;
    const double C105026 = C5894 * C3520;
    const double C105349 = C5894 * C3882;
    const double C107399 = C5894 * C5278;
    const double C107393 = C5894 * C5273;
    const double C107637 = C5894 * C5455;
    const double C107635 = C5894 * C5339;
    const double C107870 = C5894 * C5621;
    const double C140012 = C139987 - C140005;
    const double C47240 = C47134 * C192;
    const double C47236 = C47134 * C186;
    const double C47231 = C47134 * C191;
    const double C47227 = C47134 * C185;
    const double C47223 = C47134 * C190;
    const double C47219 = C47134 * C184;
    const double C47484 = C47134 * C413;
    const double C47476 = C47134 * C412;
    const double C47755 = C47134 * C632;
    const double C47750 = C47134 * C631;
    const double C47745 = C47134 * C630;
    const double C48091 = C47134 * C898;
    const double C48087 = C47134 * C902;
    const double C48083 = C47134 * C897;
    const double C48755 = C47134 * C1395;
    const double C48751 = C47134 * C1394;
    const double C49065 = C47134 * C1655;
    const double C49061 = C47134 * C1659;
    const double C49057 = C47134 * C1654;
    const double C49693 = C47134 * C2152;
    const double C49689 = C47134 * C2151;
    const double C61773 = C47134 * C5340;
    const double C61768 = C47134 * C5343;
    const double C61764 = C47134 * C5339;
    const double C61760 = C47134 * C1658;
    const double C61756 = C47134 * C1653;
    const double C62093 = C47134 * C1908;
    const double C62443 = C47134 * C5680;
    const double C62438 = C47134 * C5679;
    const double C62434 = C47134 * C2150;
    const double C64364 = C47134 * C3524;
    const double C64360 = C47134 * C3520;
    const double C65037 = C47134 * C3956;
    const double C67098 = C47134 * C15791;
    const double C67094 = C47134 * C15788;
    const double C67594 = C47134 * C16521;
    const double C76506 = C47134 * C3521;
    const double C77320 = C47134 * C3957;
    const double C137845 = C137844 / C137729;
    const double C92968 = C92948 * C1567;
    const double C92961 = C92948 * C1568;
    const double C92957 = C92948 * C1577;
    const double C92953 = C92948 * C1569;
    const double C93210 = C92948 * C1831;
    const double C93205 = C92948 * C1830;
    const double C93465 = C92948 * C2076;
    const double C93463 = C92948 * C1743;
    const double C93457 = C92948 * C2075;
    const double C93455 = C92948 * C1742;
    const double C93799 = C92948 * C3440;
    const double C93791 = C92948 * C3439;
    const double C94101 = C92948 * C3669;
    const double C94411 = C92948 * C3883;
    const double C94409 = C92948 * C3595;
    const double C94775 = C92948 * C5275;
    const double C94767 = C92948 * C5274;
    const double C95107 = C92948 * C5456;
    const double C95429 = C92948 * C5622;
    const double C95427 = C92948 * C5398;
    const double C101338 = C92948 * C7753;
    const double C101335 = C92948 * C7759;
    const double C101331 = C92948 * C7754;
    const double C101327 = C92948 * C3443;
    const double C101323 = C92948 * C3438;
    const double C101641 = C92948 * C3668;
    const double C101966 = C92948 * C8423;
    const double C101964 = C92948 * C7980;
    const double C101958 = C92948 * C8422;
    const double C101956 = C92948 * C7979;
    const double C101950 = C92948 * C3882;
    const double C101948 = C92948 * C3594;
    const double C104020 = C92948 * C10394;
    const double C104824 = C92948 * C13128;
    const double C104820 = C92948 * C13131;
    const double C104816 = C92948 * C13126;
    const double C105463 = C92948 * C13618;
    const double C105461 = C92948 * C13298;
    const double C115436 = C92948 * C13127;
    const double C108106 =
        (C137993 / C137734 - (0 * be) / C137729) / C137734 + (0 * ae) / C137729;
    const double C122910 = C137993 / C137734 - (0 * be) / C137729;
    const double C29652 = C29637 - C29638;
    const double C29893 = C29886 - C29887;
    const double C88811 = C41961 - C41960;
    const double C88809 = C41957 - C41956;
    const double C729 = C725 - C711;
    const double C7649 = C7646 - C7634;
    const double C140013 = C139982 - C140007;
    const double C14037 = C14015 * C119;
    const double C14031 = C14015 * C110;
    const double C14026 = C14015 * C117;
    const double C14020 = C14015 * C109;
    const double C14285 = C14015 * C350;
    const double C14280 = C14015 * C349;
    const double C14542 = C14015 * C569;
    const double C14540 = C14015 * C268;
    const double C14522 = C14015 * C568;
    const double C14520 = C14015 * C267;
    const double C14878 = C14015 * C820;
    const double C14872 = C14015 * C812;
    const double C15196 = C14015 * C1073;
    const double C15514 = C14015 * C1318;
    const double C15512 = C14015 * C985;
    const double C15925 = C14015 * C1577;
    const double C15919 = C14015 * C1569;
    const double C16298 = C14015 * C1830;
    const double C16646 = C14015 * C2075;
    const double C16644 = C14015 * C1742;
    const double C60894 = C14015 * C822;
    const double C60888 = C14015 * C813;
    const double C61206 = C14015 * C1072;
    const double C61513 = C14015 * C1317;
    const double C61511 = C14015 * C984;
    const double C63664 = C14015 * C2913;
    const double C63658 = C14015 * C2908;
    const double C63896 = C14015 * C3090;
    const double C64136 = C14015 * C3256;
    const double C64134 = C14015 * C3032;
    const double C64481 = C14015 * C3443;
    const double C64475 = C14015 * C3438;
    const double C64825 = C14015 * C3668;
    const double C65153 = C14015 * C3882;
    const double C65151 = C14015 * C3594;
    const double C140014 = C139991 - C140008;
    const double C92971 = C92797 * C275;
    const double C92967 = C92797 * C269;
    const double C92962 = C92797 * C274;
    const double C92958 = C92797 * C268;
    const double C92954 = C92797 * C273;
    const double C92950 = C92797 * C267;
    const double C93212 = C92797 * C498;
    const double C93207 = C92797 * C497;
    const double C93202 = C92797 * C496;
    const double C93462 = C92797 * C704;
    const double C93454 = C92797 * C703;
    const double C93798 = C92797 * C986;
    const double C93794 = C92797 * C990;
    const double C93790 = C92797 * C985;
    const double C94104 = C92797 * C1242;
    const double C94100 = C92797 * C1241;
    const double C94774 = C92797 * C1743;
    const double C94770 = C92797 * C1747;
    const double C94766 = C92797 * C1742;
    const double C95110 = C92797 * C1999;
    const double C95106 = C92797 * C1998;
    const double C101337 = C92797 * C3033;
    const double C101332 = C92797 * C3036;
    const double C101328 = C92797 * C3032;
    const double C101324 = C92797 * C989;
    const double C101320 = C92797 * C984;
    const double C101647 = C92797 * C3203;
    const double C101642 = C92797 * C3202;
    const double C101638 = C92797 * C1240;
    const double C101947 = C92797 * C1473;
    const double C104023 = C92797 * C6911;
    const double C104019 = C92797 * C6908;
    const double C104256 = C92797 * C7290;
    const double C104827 = C92797 * C7982;
    const double C104823 = C92797 * C7979;
    const double C104819 = C92797 * C3598;
    const double C104815 = C92797 * C3594;
    const double C105150 = C92797 * C8317;
    const double C105146 = C92797 * C3812;
    const double C115435 = C92797 * C3595;
    const double C115833 = C92797 * C3813;
    const double C207 = C182 * C121;
    const double C290 = C265 * C121;
    const double C913 = C182 * C818;
    const double C1001 = C265 * C818;
    const double C5918 = C5895 * C818;
    const double C6661 = C5818 * C818;
    const double C21878 = C21861 * C818;
    const double C47234 = C47217 * C818;
    const double C68558 = C137748 * C818;
    const double C1670 = C182 * C1575;
    const double C1758 = C265 * C1575;
    const double C14039 = C14016 * C1575;
    const double C15657 = C5818 * C1575;
    const double C29642 = C29625 * C1575;
    const double C77597 = C137748 * C1575;
    const double C92965 = C92948 * C1575;
    const double C5909 = C5896 * C2915;
    const double C5999 = C265 * C2915;
    const double C6653 = C5818 * C2915;
    const double C6807 = C5895 * C2915;
    const double C22735 = C21861 * C2915;
    const double C48088 = C47217 * C2915;
    const double C55285 = C54790 * C2915;
    const double C68550 = C137748 * C2915;
    const double C7878 = C5895 * C3445;
    const double C7988 = C265 * C3445;
    const double C10413 = C5818 * C3445;
    const double C14766 = C182 * C3445;
    const double C14880 = C14016 * C3445;
    const double C23712 = C21861 * C3445;
    const double C30477 = C29625 * C3445;
    const double C49062 = C47217 * C3445;
    const double C60673 = C54790 * C3445;
    const double C72093 = C137748 * C3445;
    const double C93795 = C92948 * C3445;
    const double C13937 = C182 * C5280;
    const double C14030 = C14017 * C5280;
    const double C15649 = C5818 * C5280;
    const double C15927 = C14016 * C5280;
    const double C31464 = C29625 * C5280;
    const double C61644 = C54790 * C5280;
    const double C84403 = C137748 * C5280;
    const double C94771 = C92948 * C5280;
    const double C10048 = C265 * C7032;
    const double C55524 = C54790 * C7032;
    const double C10963 = C265 * C8091;
    const double C42258 = C29625 * C8091;
    const double C43254 = C21861 * C8091;
    const double C57889 = C54790 * C8091;
    const double C63898 = C14016 * C8091;
    const double C64704 = C47217 * C8091;
    const double C101645 = C92948 * C8091;
    const double C102498 = C5896 * C8091;
    const double C105032 = C5895 * C8091;
    const double C18754 = C182 * C13380;
    const double C43394 = C29625 * C13380;
    const double C46650 = C21861 * C13380;
    const double C61000 = C54790 * C13380;
    const double C61210 = C14017 * C13380;
    const double C62104 = C47217 * C13380;
    const double C64827 = C14016 * C13380;
    const double C105147 = C92948 * C13380;
    const double C107633 = C5895 * C13380;
    const double C21624 = C182 * C16401;
    const double C67514 = C54790 * C16401;
    const double C7301 = C6272 - C6271;
    const double C7299 = C6271 - C6272;
    const double C38787 = C30790 - C30791;
    const double C38785 = C30791 - C30790;
    const double C40339 = C24346 - C24347;
    const double C40337 = C24347 - C24346;
    const double C16532 = C14440 - C14439;
    const double C16530 = C14439 - C14440;
    const double C6929 = C5997 - C5996;
    const double C6925 = C5996 - C5997;
    const double C6521 = C6511 - C6512;
    const double C8647 = C8641 - C8642;
    const double C15092 = C15087 - C15088;
    const double C39495 = C23708 - C23709;
    const double C39491 = C23709 - C23708;
    const double C38353 = C30473 - C30474;
    const double C38349 = C30474 - C30473;
    const double C15809 = C13935 - C13934;
    const double C15805 = C13934 - C13935;
    const double C14199 = C14191 - C14192;
    const double C6659 = C5818 * C817;
    const double C7058 = C139736 * C817;
    const double C22947 = C21777 * C817;
    const double C48309 = C47132 * C817;
    const double C48298 = C47133 * C817;
    const double C68556 = C137748 * C817;
    const double C68917 = C139736 * C817;
    const double C15655 = C5818 * C1574;
    const double C16054 = C139736 * C1574;
    const double C31576 = C21777 * C1574;
    const double C77595 = C137748 * C1574;
    const double C78024 = C139736 * C1574;
    const double C94894 = C47132 * C1574;
    const double C94883 = C47133 * C1574;
    const double C6651 = C5818 * C2914;
    const double C7064 = C5811 * C2914;
    const double C7049 = C139736 * C2914;
    const double C51000 = C47132 * C2914;
    const double C55283 = C54790 * C2914;
    const double C55530 = C139731 * C2914;
    const double C68548 = C137748 * C2914;
    const double C68923 = C139967 * C2914;
    const double C68908 = C139736 * C2914;
    const double C10411 = C5818 * C3444;
    const double C10748 = C139736 * C3444;
    const double C38499 = C5811 * C3444;
    const double C51801 = C47132 * C3444;
    const double C60671 = C54790 * C3444;
    const double C61002 = C139731 * C3444;
    const double C72091 = C137748 * C3444;
    const double C72408 = C139736 * C3444;
    const double C76774 = C139967 * C3444;
    const double C15647 = C5818 * C5279;
    const double C16060 = C5811 * C5279;
    const double C16045 = C139736 * C5279;
    const double C61642 = C54790 * C5279;
    const double C61989 = C139731 * C5279;
    const double C84401 = C137748 * C5279;
    const double C84712 = C139736 * C5279;
    const double C99964 = C47132 * C5279;
    const double C124777 = C139967 * C5279;
    const double C43665 = C139873 * C8526;
    const double C65039 = C139873 * C8526;
    const double C87601 = C67750 * C8526;
    const double C102807 = C5815 * C8526;
    const double C105352 = C5814 * C8526;
    const double C42833 = C139873 * C7863;
    const double C43252 = C21861 * C7863;
    const double C64362 = C139873 * C7863;
    const double C64702 = C47217 * C7863;
    const double C86980 = C67750 * C7863;
    const double C102186 = C5815 * C7863;
    const double C102496 = C5896 * C7863;
    const double C104707 = C5814 * C7863;
    const double C105030 = C5895 * C7863;
    const double C18432 = C139824 * C13216;
    const double C18752 = C182 * C13216;
    const double C46349 = C139873 * C13216;
    const double C46648 = C21861 * C13216;
    const double C61766 = C139873 * C13216;
    const double C62102 = C47217 * C13216;
    const double C64368 = C47134 * C13216;
    const double C107396 = C5814 * C13216;
    const double C107631 = C5895 * C13216;
    const double C134491 = C139983 * C13216;
    const double C6658 = C5811 * C827;
    const double C6646 = C139736 * C827;
    const double C47957 = C47131 * C827;
    const double C47949 = C47132 * C827;
    const double C55282 = C139731 * C827;
    const double C68555 = C139967 * C827;
    const double C68543 = C139736 * C827;
    const double C15654 = C5811 * C1584;
    const double C15642 = C139736 * C1584;
    const double C61641 = C139731 * C1584;
    const double C77594 = C139967 * C1584;
    const double C77590 = C139736 * C1584;
    const double C94542 = C47131 * C1584;
    const double C94534 = C47132 * C1584;
    const double C6650 = C5811 * C2920;
    const double C50765 = C47131 * C2920;
    const double C55274 = C139731 * C2920;
    const double C68547 = C139967 * C2920;
    const double C10418 = C5811 * C3450;
    const double C51494 = C47131 * C3450;
    const double C57662 = C139731 * C3450;
    const double C72098 = C139967 * C3450;
    const double C15646 = C5811 * C5285;
    const double C61637 = C139731 * C5285;
    const double C84408 = C139967 * C5285;
    const double C99729 = C47131 * C5285;
    const double C429 = C139824 * C414;
    const double C22142 = C139983 * C414;
    const double C47496 = C47134 * C414;
    const double C1165 = C139824 * C1150;
    const double C6162 = C5814 * C1150;
    const double C7183 = C5813 * C1150;
    const double C22126 = C139873 * C1150;
    const double C23080 = C139983 * C1150;
    const double C47480 = C139873 * C1150;
    const double C48431 = C47134 * C1150;
    const double C1922 = C139824 * C1907;
    const double C8210 = C5813 * C1907;
    const double C24035 = C139983 * C1907;
    const double C49381 = C47134 * C1907;
    const double C18750 = C139824 * C3742;
    const double C39915 = C139873 * C3742;
    const double C43251 = C139983 * C3742;
    const double C62097 = C139873 * C3742;
    const double C64701 = C47134 * C3742;
    const double C102495 = C5814 * C3742;
    const double C105029 = C5813 * C3742;
    const double C16176 = C139824 * C5513;
    const double C46655 = C139983 * C5513;
    const double C62101 = C47134 * C5513;
    const double C107638 = C5813 * C5513;
    const double C720 = C139835 * C705;
    const double C30152 = C139984 * C705;
    const double C93474 = C92797 * C705;
    const double C1487 = C139835 * C1472;
    const double C15515 = C13856 * C1472;
    const double C31107 = C139984 * C1472;
    const double C94416 = C92797 * C1472;
    const double C2244 = C139835 * C2229;
    const double C14527 = C13857 * C2229;
    const double C16647 = C13856 * C2229;
    const double C30136 = C139899 * C2229;
    const double C32128 = C139984 * C2229;
    const double C93458 = C139899 * C2229;
    const double C95434 = C92797 * C2229;
    const double C7639 = C139835 * C3368;
    const double C42561 = C139984 * C3368;
    const double C64137 = C13856 * C3368;
    const double C101955 = C92797 * C3368;
    const double C11282 = C139835 * C4026;
    const double C39199 = C139899 * C4026;
    const double C43803 = C139984 * C4026;
    const double C61518 = C13857 * C4026;
    const double C65154 = C13856 * C4026;
    const double C101951 = C139899 * C4026;
    const double C105468 = C92797 * C4026;
    const double C638 = C212 * C265;
    const double C439 = C435 - C424;
    const double C641 = C214 * C265;
    const double C440 = C436 - C428;
    const double C1171 = C1168 - C1164;
    const double C1170 = C1167 - C1160;
    const double C1928 = C1925 - C1921;
    const double C30047 = C29549 * C29625;
    const double C93370 = C29549 * C92948;
    const double C1927 = C1924 - C1917;
    const double C18759 = C18757 - C18749;
    const double C112574 = C21114 * C54790;
    const double C16190 = C16187 - C16175;
    const double C112583 = C112576 * C54790;
    const double C21383 = C21382 - C21380;
    const double C504 = C295 * C182;
    const double C730 = C726 - C715;
    const double C507 = C297 * C182;
    const double C731 = C727 - C719;
    const double C1493 = C1490 - C1486;
    const double C22238 = C21967 * C21861;
    const double C47592 = C21967 * C47217;
    const double C1492 = C1489 - C1482;
    const double C2250 = C2247 - C2243;
    const double C2249 = C2246 - C2239;
    const double C57233 = C9790 * C54790;
    const double C7650 = C7647 - C7638;
    const double C11286 = C11284 - C11281;
    const double C57242 = C57235 * C54790;
    const double C10295 = C10294 - C10292;
    const double C11285 = C11283 - C11277;
    const double C514 = C512 * C139824;
    const double C22237 = C512 * C139983;
    const double C47591 = C512 * C47134;
    const double C648 = C646 * C139835;
    const double C30046 = C646 * C139984;
    const double C93369 = C646 * C92797;
    const double C138102 = C138064 + C138099;
    const double C6796 = (2 * (be * C138070 + C138160 * C138182) +
                          be * (C138070 + C138096 * C138292) +
                          C138160 * (C138182 + be * C138160 * C138096 +
                                     C138160 * (C138107 + C138160 * C138196))) /
                         C137733;
    const double C7867 = (C138204 * (C138182 + be * C138160 * C138096 +
                                     C138160 * (C138107 + C138160 * C138196))) /
                         C137733;
    const double C15916 =
        (2 * (be * C138070 + C138204 * C138226) +
         be * (C138070 + C138096 * C138390) +
         C138204 * (C138226 + be * C138204 * C138096 +
                    C138204 * (C138107 + C138204 * C138240))) /
        C137733;
    const double C13303 =
        (C138160 * C138226 + be * C138204 * C138711 +
         C138204 * (be * C138711 + C138204 * C138160 * C138240)) /
        C137733;
    const double C13133 = (C138160 * C138070 + C138711 * C138390) / C137729;
    const double C6809 = C5896 * C6630;
    const double C6933 = C265 * C6630;
    const double C9621 = C5818 * C6630;
    const double C55289 = C54790 * C6630;
    const double C71349 = C137748 * C6630;
    const double C7880 = C5896 * C7757;
    const double C7992 = C265 * C7757;
    const double C10405 = C5818 * C7757;
    const double C38208 = C21861 * C7757;
    const double C38362 = C29625 * C7757;
    const double C72085 = C137748 * C7757;
    const double C76511 = C47217 * C7757;
    const double C85984 = C54790 * C7757;
    const double C101342 = C92948 * C7757;
    const double C15813 = C182 * C15626;
    const double C15929 = C14017 * C15626;
    const double C21024 = C5818 * C15626;
    const double C109074 = C54790 * C15626;
    const double C129588 = C137748 * C15626;
    const double C64486 = C13858 * C18534;
    const double C134607 = C122759 * C18534;
    const double C57814 = C139835 * C10632;
    const double C88819 = C139899 * C10632;
    const double C104025 = C139899 * C10632;
    const double C63669 = C13858 * C13304;
    const double C89618 = C139899 * C13304;
    const double C104829 = C139899 * C13304;
    const double C133819 = C122759 * C13304;
    const double C57123 = C54790 * C9612;
    const double C57239 = C265 * C9612;
    const double C57653 = C54790 * C10397;
    const double C57813 = C265 * C10397;
    const double C88818 = C29625 * C10397;
    const double C104024 = C92948 * C10397;
    const double C104714 = C5896 * C10397;
    const double C63502 = C54790 * C13135;
    const double C63668 = C14017 * C13135;
    const double C64373 = C47217 * C13135;
    const double C89617 = C29625 * C13135;
    const double C104828 = C92948 * C13135;
    const double C107403 = C5896 * C13135;
    const double C134496 = C21861 * C13135;
    const double C112517 = C54790 * C21015;
    const double C112580 = C182 * C21015;
    const double C138101 = C138063 + C138098;
    const double C138116 = C138094 + C138106;
    const double C7036 = (2 * (ae * C138069 + C138160 * C138269) +
                          ae * (C138069 + C138095 * C138292) +
                          C138160 * (C138269 + ae * C138160 * C138095 +
                                     C138160 * (C138106 + C138160 * C138283))) /
                         C137733;
    const double C16405 =
        (2 * (ae * C138069 + C138204 * C138350) +
         ae * (C138069 + C138095 * C138390) +
         C138204 * (C138350 + ae * C138204 * C138095 +
                    C138204 * (C138106 + C138204 * C138364))) /
        C137733;
    const double C13387 =
        (C138269 + C138283 * C138390 +
         ae * (C138725 + C138160 * C138139 * C138390) +
         C138160 * (ae * (C138095 + C138139 * C138390) +
                    C138160 * (C138283 +
                               (be * C138279 + C138038 * std::pow(C138044, 7) *
                                                   bs[7] * C138253) *
                                   C138390))) /
        C137733;
    const double C13623 =
        (C138160 * C138350 + ae * C138204 * C138725 +
         C138204 * (ae * C138725 + C138204 * C138160 * C138364)) /
        C137733;
    const double C13132 = (C138160 * C138069 + C138725 * C138390) / C137729;
    const double C9619 = C5818 * C6629;
    const double C9888 = C139736 * C6629;
    const double C55287 = C54790 * C6629;
    const double C55534 = C139731 * C6629;
    const double C71347 = C137748 * C6629;
    const double C71598 = C139736 * C6629;
    const double C10403 = C5818 * C7756;
    const double C10756 = C139736 * C7756;
    const double C72083 = C137748 * C7756;
    const double C72416 = C139736 * C7756;
    const double C85982 = C54790 * C7756;
    const double C86285 = C139731 * C7756;
    const double C21022 = C5818 * C15625;
    const double C21290 = C139736 * C15625;
    const double C109072 = C54790 * C15625;
    const double C109278 = C139731 * C15625;
    const double C129586 = C137748 * C15625;
    const double C129836 = C139736 * C15625;
    const double C64936 = C139731 * C18964;
    const double C57894 = C139731 * C10742;
    const double C58104 = C139731 * C11064;
    const double C63977 = C139731 * C13624;
    const double C57121 = C54790 * C9611;
    const double C57302 = C139731 * C9611;
    const double C57651 = C54790 * C10396;
    const double C57892 = C139731 * C10396;
    const double C63500 = C54790 * C13134;
    const double C63745 = C139731 * C13134;
    const double C112515 = C54790 * C21014;
    const double C112695 = C139731 * C21014;
    const double C138100 = C138077 + C138097;
    const double C826 =
        (C138160 * C138068 + ae * C138160 * C138069 + be * C138160 * C138070 +
         C138038 * (ae * C138160 * C138063 + be * C138160 * C138064 +
                    C138038 * C138409)) /
        C137733;
    const double C3451 =
        (ae * C138204 * C138160 * C138063 + be * C138204 * C138160 * C138064 +
         C138038 * C138204 * C138409) /
        C137733;
    const double C13138 = (C138160 * C138068 + C138409 * C138390) / C137733;
    const double C1583 =
        (C138204 * C138068 + ae * C138204 * C138069 + be * C138204 * C138070 +
         C138038 * (ae * C138204 * C138063 + be * C138204 * C138064 +
                    C138038 * C138463)) /
        C137733;
    const double C6666 = C5811 * C2921;
    const double C6654 = C139736 * C2921;
    const double C50761 = C47132 * C2921;
    const double C55286 = C139731 * C2921;
    const double C68563 = C139967 * C2921;
    const double C68551 = C139736 * C2921;
    const double C15662 = C5811 * C5286;
    const double C15650 = C139736 * C5286;
    const double C61645 = C139731 * C5286;
    const double C84404 = C139736 * C5286;
    const double C99725 = C47132 * C5286;
    const double C124459 = C139967 * C5286;
    const double C9626 = C5811 * C6636;
    const double C55278 = C139731 * C6636;
    const double C71354 = C139967 * C6636;
    const double C10410 = C5811 * C7763;
    const double C57658 = C139731 * C7763;
    const double C72090 = C139967 * C7763;
    const double C21029 = C5811 * C15632;
    const double C67009 = C139731 * C15632;
    const double C129593 = C139967 * C15632;
    const double C138147 = C138089 + C138144;
    const double C138715 = C138096 + C138713;
    const double C18307 =
        (2 * C138204 * C138711 + C138204 * (C138711 + C138929 * C138390)) /
        C137729;
    const double C138976 = C138096 + C138974;
    const double C139106 = C138266 + C139101;
    const double C139322 = C138347 + C139319;
    const double C138659 = C138657 + C138137;
    const double C138920 = C138918 + C138137;
    const double C138140 = C138114 + C138135;
    const double C138658 = C138655 + C138134;
    const double C138919 = C138916 + C138134;
    const double C15194 =
        (ae * (C138227 + C138204 * (C138204 * C138241 + C138134) +
               C138204 * C138129 * be) +
         C138160 *
             (C138326 + be * C138204 * C138284 +
              C138204 * (be * C138284 +
                         C138204 * (C138324 + std::pow(C138044, 7) * bs[7] *
                                                  C138315 * C138042)))) /
        C137733;
    const double C8319 =
        (be * C138270 + C138204 * C138326 +
         ae * (C138204 * C138160 * C138241 + C138656 * be) +
         C138160 *
             (ae * (C138204 * C138241 + C138134) +
              C138160 * (be * C138284 +
                         C138204 * (C138324 + std::pow(C138044, 7) * bs[7] *
                                                  C138315 * C138042)))) /
        C137733;
    const double C14869 =
        (C138160 * C138227 + C138204 * (C138204 * C138877 + C138656 * be) +
         C138204 * C138656 * be) /
        C137729;
    const double C15299 =
        (C138160 * C138351 + C138204 * (C138204 * C138878 + C138656 * ae) +
         C138204 * C138656 * ae) /
        C137729;
    const double C14659 = C138160 * C138088 + C138656 * C138390;
    const double C138766 = C138160 * C138764;
    const double C139046 = C138204 * C139043;
    const double C138765 = C138160 * C138763;
    const double C139045 = C138204 * C139040;
    const double C10631 = (C138204 * (2 * C138778 + C138160 * C138784) +
                           (2 * C138644 + C138160 * C138759) * be) /
                          C137729;
    const double C11063 = (C138204 * (2 * C138794 + C138160 * C138800) +
                           (2 * C138644 + C138160 * C138759) * ae) /
                          C137729;
    const double C13301 = (C138218 + C138229 * C138292 +
                           C138204 * (C138204 * C138784 + C138759 * be) +
                           C138204 * C138759 * be) /
                          C137729;
    const double C13621 = (C138342 + C138353 * C138292 +
                           C138204 * (C138204 * C138800 + C138759 * ae) +
                           C138204 * C138759 * ae) /
                          C137729;
    const double C9610 = 3 * (C138059 + C138081 * C138292) +
                         C138160 * (2 * C138644 + C138160 * C138759);
    const double C10395 = C138204 * (2 * C138644 + C138160 * C138759);
    const double C13129 = C138059 + C138081 * C138292 + C138759 * C138390;
    const double C138960 = C138958 + C138761;
    const double C138959 = C138957 + C138758;
    const double C21013 = 3 * (C138059 + C138081 * C138390) +
                          C138204 * (2 * C138905 + C138204 * C139042);
    const double C138146 = C138086 + C138143;
    const double C138729 = C138095 + C138727;
    const double C18306 =
        (2 * C138204 * C138725 + C138204 * (C138725 + C138940 * C138390)) /
        C137729;
    const double C139000 = C138095 + C138998;
    const double C139104 = C138179 + C139098;
    const double C139230 = C138738 + C139228;
    const double C139321 = C138223 + C139318;
    const double C138145 = C138117 + C138142;
    const double C138419 = C138038 * C138416;
    const double C138558 = C138204 * C138416;
    const double C3452 =
        (C138204 * C138409 + ae * C138204 * C138160 * C138095 +
         be * C138204 * C138160 * C138096 +
         C138038 * (ae * C138204 * C138414 + be * C138204 * C138415 +
                    C138038 * C138204 * C138416)) /
        C137733;
    const double C10401 =
        (ae * C138204 *
             (2 * C138414 + C138160 * (C138086 + C138127 * C138292)) +
         be * C138204 *
             (2 * C138415 + C138160 * (C138089 + C138130 * C138292)) +
         C138038 * C138204 *
             (2 * C138416 +
              C138160 * (C138138 + (C138111 * C138112 +
                                    C138042 * bs[7] * std::pow(C138044, 7)) *
                                       C137731 * C138292))) /
        C137733;
    const double C13139 = (ae * (C138719 + C138414 * C138390) +
                           be * (C138705 + C138415 * C138390) +
                           C138038 * (C138409 + C138416 * C138390)) /
                          C137733;
    const double C14662 =
        (C138409 + C138416 * C138390 +
         ae * (C138725 + C138160 * C138139 * C138390) +
         be * (C138711 + C138160 * C138141 * C138390) +
         C138038 * (ae * (C138414 + C138160 * C138127 * C138390) +
                    be * (C138415 + C138160 * C138130 * C138390) +
                    C138038 * (C138416 +
                               C138160 *
                                   (C138111 * C138112 +
                                    C138042 * bs[7] * std::pow(C138044, 7)) *
                                   C137731 * C138390))) /
        C137733;
    const double C18308 =
        (2 * C138204 * C138409 + C138204 * (C138409 + C138416 * C138390)) /
        C137733;
    const double C138473 = C138038 * C138470;
    const double C138521 = C138094 + C138520;
    const double C138596 = C138094 + C138595;
    const double C6670 = C139736 * C2922;
    const double C25420 = C21777 * C2922;
    const double C50757 = C47133 * C2922;
    const double C68567 = C139736 * C2922;
    const double C15666 = C139736 * C5287;
    const double C36415 = C21777 * C5287;
    const double C99721 = C47133 * C5287;
    const double C124463 = C139736 * C5287;
    const double C138309 = C138302 + C138308;
    const double C138756 = C138160 * C138751;
    const double C138817 = C138204 * C138751;
    const double C139090 = C139080 + C139081;
    const double C139158 = C138160 * C139155;
    const double C139178 = C138302 + C139177;
    const double C138407 = C138400 + C138406;
    const double C138953 = C138160 * C138803;
    const double C139034 = C138204 * C138803;
    const double C11273 =
        (ae * (2 * C138778 + C138160 * C138784) +
         be * (2 * C138794 + C138160 * C138800) +
         C138204 * (2 * C138160 * C138803 +
                    C138160 * (C138803 +
                               C138038 *
                                   (C138111 * C138112 +
                                    C138390 * bs[7] * std::pow(C138044, 7)) *
                                   C137731 * C138292))) /
        C137733;
    const double C139144 = C138400 + C139143;
    const double C139238 = C138204 * C139233;
    const double C139311 = C139299 + C139300;
    const double C139199 = C139197 + C139102;
    const double C139105 = C139086 + C139100;
    const double C139198 = C139195 + C139099;
    const double C139248 = C138204 * C139246;
    const double C139247 = C138204 * C139245;
    const double C67001 = 3 * (C138650 + C138734 * C138390) +
                          C138204 * (2 * C138946 + C138204 * C139241);
    const double C139314 = C139305 + C139306;
    const double C209 = C139824 * C187;
    const double C430 = C182 * C187;
    const double C916 = C139824 * C899;
    const double C1154 = C182 * C899;
    const double C21882 = C139873 * C899;
    const double C22135 = C21861 * C899;
    const double C47238 = C139873 * C899;
    const double C47489 = C47217 * C899;
    const double C1673 = C139824 * C1656;
    const double C1911 = C182 * C1656;
    const double C5915 = C5815 * C2976;
    const double C6167 = C5896 * C2976;
    const double C22740 = C139873 * C2976;
    const double C23065 = C21861 * C2976;
    const double C48093 = C139873 * C2976;
    const double C48416 = C47217 * C2976;
    const double C67850 = C67750 * C2976;
    const double C23717 = C139873 * C3522;
    const double C24020 = C21861 * C3522;
    const double C30370 = C139824 * C3522;
    const double C30683 = C182 * C3522;
    const double C49067 = C139873 * C3522;
    const double C49366 = C47217 * C3522;
    const double C13939 = C139824 * C5341;
    const double C14195 = C182 * C5341;
    const double C16534 = C139824 * C16522;
    const double C8527 =
        (ae * (C138174 + C138160 * C138646 + C138644 * be) +
         C138204 * (C138669 + be * C138160 * C138353 +
                    C138160 * (C138357 + C138160 * C138038 * C138384))) /
        C137733;
    const double C6793 =
        (2 * (C138160 * C138174 + C138059 * be) +
         C138160 * (C138174 + C138160 * C138646 + C138644 * be) +
         (C138059 + C138081 * C138292) * be) /
        C137729;
    const double C7864 =
        (C138204 * (C138174 + C138160 * C138646 + C138644 * be)) / C137729;
    const double C13218 =
        (C138160 * C138174 + C138059 * be + C138646 * C138390) / C137729;
    const double C18423 =
        (2 * C138204 * C138646 + C138204 * (C138646 + C138763 * C138390)) /
        C137729;
    const double C16188 = C16178 - C16179;
    const double C138745 = C138172 + C138743;
    const double C139089 = C138302 + C139078;
    const double C67096 = C139873 * C18422;
    const double C67347 = C47217 * C18422;
    const double C110796 = C139824 * C18422;
    const double C110999 = C182 * C18422;
    const double C137160 = C139873 * C18422;
    const double C137400 = C21861 * C18422;
    const double C112579 = C139824 * C21109;
    const double C112753 = C182 * C21109;
    const double C292 = C139835 * C270;
    const double C721 = C265 * C270;
    const double C1004 = C139835 * C987;
    const double C1476 = C265 * C987;
    const double C1761 = C139835 * C1744;
    const double C2233 = C265 * C1744;
    const double C29646 = C139899 * C1744;
    const double C30145 = C29625 * C1744;
    const double C92969 = C139899 * C1744;
    const double C93467 = C92948 * C1744;
    const double C6001 = C139835 * C3034;
    const double C6515 = C265 * C3034;
    const double C23821 = C139835 * C3596;
    const double C24450 = C265 * C3596;
    const double C30482 = C139899 * C3596;
    const double C31092 = C29625 * C3596;
    const double C93800 = C139899 * C3596;
    const double C94401 = C92948 * C3596;
    const double C14036 = C13858 * C5399;
    const double C14532 = C14017 * C5399;
    const double C31469 = C139899 * C5399;
    const double C32113 = C29625 * C5399;
    const double C94776 = C139899 * C5399;
    const double C95419 = C92948 * C5399;
    const double C122929 = C122759 * C5399;
    const double C7303 = C139835 * C7291;
    const double C14877 = C13858 * C13299;
    const double C15504 = C14017 * C13299;
    const double C39643 = C139899 * C13299;
    const double C40476 = C29625 * C13299;
    const double C115437 = C139899 * C13299;
    const double C116226 = C92948 * C13299;
    const double C123736 = C122759 * C13299;
    const double C15913 =
        (2 * (C138204 * C138218 + C138059 * be) +
         C138204 * (C138218 + C138204 * C138907 + C138905 * be) +
         (C138059 + C138081 * C138390) * be) /
        C137729;
    const double C7648 = C7640 - C7641;
    const double C8646 = C8637 - C8638;
    const double C57238 = C139835 * C9785;
    const double C57574 = C265 * C9785;
    const double C57812 = C139835 * C10630;
    const double C58239 = C265 * C10630;
    const double C88815 = C139899 * C10630;
    const double C89287 = C29625 * C10630;
    const double C104021 = C139899 * C10630;
    const double C104490 = C92948 * C10630;
    const double C63663 = C13858 * C13300;
    const double C64126 = C14017 * C13300;
    const double C89614 = C139899 * C13300;
    const double C90241 = C29625 * C13300;
    const double C104825 = C139899 * C13300;
    const double C105453 = C92948 * C13300;
    const double C133813 = C122759 * C13300;
    const double C18532 =
        (2 * (C138204 * C138772 + C138650 * be) +
         C138204 * (C138772 + C138204 * C138950 + C138946 * be) +
         (C138650 + C138734 * C138390) * be) /
        C137729;
    const double C139028 = C138216 + C139026;
    const double C139297 = C138400 + C139162;
    const double C432 = C182 * C352;
    const double C510 = C265 * C352;
    const double C1156 = C182 * C1075;
    const double C1250 = C265 * C1075;
    const double C22137 = C21861 * C1075;
    const double C47491 = C47217 * C1075;
    const double C1913 = C182 * C1832;
    const double C2007 = C265 * C1832;
    const double C29890 = C29625 * C1832;
    const double C93213 = C92948 * C1832;
    const double C6169 = C5896 * C3092;
    const double C6273 = C265 * C3092;
    const double C7069 = C5818 * C3092;
    const double C23067 = C21861 * C3092;
    const double C48418 = C47217 * C3092;
    const double C68928 = C137748 * C3092;
    const double C24022 = C21861 * C3670;
    const double C24146 = C265 * C3670;
    const double C30685 = C182 * C3670;
    const double C30794 = C29625 * C3670;
    const double C38504 = C5818 * C3670;
    const double C49368 = C47217 * C3670;
    const double C76779 = C137748 * C3670;
    const double C94105 = C92948 * C3670;
    const double C14197 = C182 * C5457;
    const double C14289 = C14017 * C5457;
    const double C16065 = C5818 * C5457;
    const double C31804 = C29625 * C5457;
    const double C95111 = C92948 * C5457;
    const double C124782 = C137748 * C5457;
    const double C8324 = C139835 * C8318;
    const double C38791 = C139899 * C8318;
    const double C101649 = C139899 * C8318;
    const double C7033 =
        (2 * (C138160 * C138261 + C138059 * ae) +
         C138160 * (C138261 + C138160 * C138647 + C138644 * ae) +
         (C138059 + C138081 * C138292) * ae) /
        C137729;
    const double C8092 =
        (C138204 * (C138261 + C138160 * C138647 + C138644 * ae)) / C137729;
    const double C13381 =
        (C138160 * C138261 + C138059 * ae + C138647 * C138390) / C137729;
    const double C18635 =
        (2 * C138204 * C138647 + C138204 * (C138647 + C138764 * C138390)) /
        C137729;
    const double C138746 = C138259 + C138744;
    const double C64597 = C54790 * C18634;
    const double C64829 = C14017 * C18634;
    const double C67349 = C47217 * C18634;
    const double C111001 = C182 * C18634;
    const double C137402 = C21861 * C18634;
    const double C112696 = C54790 * C21278;
    const double C112755 = C182 * C21278;
    const double C7168 =
        (2 * (ae * C138174 + be * C138261 + C138160 * C138642) +
         ae * (C138174 + C138160 * C138646 + C138644 * be) +
         be * (C138261 + C138160 * C138647 + C138644 * ae) +
         C138160 *
             (C138642 + ae * C138646 + be * C138647 +
              C138160 * (C138189 + C138276 + C138160 * C138038 * C138307))) /
        C137733;
    const double C8195 =
        (C138204 * C138642 + ae * C138204 * C138646 + be * C138204 * C138647 +
         C138160 * (ae * C138204 * C138185 + be * C138204 * C138272 +
                    C138160 * C138204 * C138038 * C138307)) /
        C137733;
    const double C13464 = (ae * (C138174 + C138185 * C138390) +
                           be * (C138261 + C138272 * C138390) +
                           C138160 * (C138642 + C138751 * C138390)) /
                          C137733;
    const double C13465 =
        (C138642 + C138751 * C138390 + ae * (C138646 + C138763 * C138390) +
         be * (C138647 + C138764 * C138390) +
         C138160 * (ae * (C138185 + C138752 * C138390) +
                    be * (C138272 + C138755 * C138390) +
                    C138160 * (C138751 +
                               C138038 *
                                   (C138111 * C138112 +
                                    C138292 * bs[7] * std::pow(C138044, 7)) *
                                   C137731 * C138390))) /
        C137733;
    const double C16164 =
        (2 * C138204 * C138642 + C138204 * (C138642 + C138751 * C138390)) /
        C137733;
    const double C138737 = C138731 + C138732;
    const double C18744 =
        (ae *
             (2 * C138204 * C138172 + C138204 * (C138172 + C138179 * C138390)) +
         be *
             (2 * C138204 * C138259 + C138204 * (C138259 + C138266 * C138390)) +
         C138160 * (2 * C138815 + C138204 * (C138302 + C138307 * C138390))) /
        C137733;
    const double C21373 =
        (3 * (C138297 + C138302 * C138390) +
         C138204 * (2 * C138815 + C138204 * (C138302 + C138307 * C138390))) /
        C137733;
    const double C433 = C139824 * C415;
    const double C1161 = C139824 * C1149;
    const double C6174 = C5814 * C1149;
    const double C22134 = C139873 * C1149;
    const double C23072 = C139983 * C1149;
    const double C47488 = C139873 * C1149;
    const double C48423 = C47134 * C1149;
    const double C1918 = C139824 * C1906;
    const double C24027 = C139983 * C1906;
    const double C49373 = C47134 * C1906;
    const double C6166 = C5815 * C3149;
    const double C7179 = C5814 * C3149;
    const double C23076 = C139873 * C3149;
    const double C48427 = C139873 * C3149;
    const double C68093 = C67750 * C3149;
    const double C8206 = C5814 * C3743;
    const double C15090 = C139824 * C3743;
    const double C24031 = C139873 * C3743;
    const double C38643 = C139983 * C3743;
    const double C49377 = C139873 * C3743;
    const double C76918 = C47134 * C3743;
    const double C14194 = C139824 * C5514;
    const double C39924 = C139983 * C5514;
    const double C62109 = C47134 * C5514;
    const double C43255 = C139873 * C8196;
    const double C64705 = C139873 * C8196;
    const double C87293 = C67750 * C8196;
    const double C102499 = C5815 * C8196;
    const double C105033 = C5814 * C8196;
    const double C18755 = C139824 * C13462;
    const double C46651 = C139873 * C13462;
    const double C62105 = C139873 * C13462;
    const double C64709 = C47134 * C13462;
    const double C107634 = C5814 * C13462;
    const double C134807 = C139983 * C13462;
    const double C64713 = C139873 * C13463;
    const double C92404 = C67750 * C13463;
    const double C107630 = C5815 * C13463;
    const double C134811 = C139873 * C13463;
    const double C21381 = C139824 * C16165;
    const double C67354 = C47134 * C16165;
    const double C137407 = C139983 * C16165;
    const double C644 = C182 * C571;
    const double C723 = C265 * C571;
    const double C1403 = C182 * C1320;
    const double C1478 = C265 * C1320;
    const double C22403 = C21861 * C1320;
    const double C47756 = C47217 * C1320;
    const double C2160 = C182 * C2077;
    const double C2235 = C265 * C2077;
    const double C30147 = C29625 * C2077;
    const double C93469 = C92948 * C2077;
    const double C6433 = C5896 * C3258;
    const double C6517 = C265 * C3258;
    const double C7422 = C5818 * C3258;
    const double C23406 = C21861 * C3258;
    const double C48756 = C47217 * C3258;
    const double C69259 = C137748 * C3258;
    const double C24350 = C21861 * C3884;
    const double C24452 = C265 * C3884;
    const double C30992 = C182 * C3884;
    const double C31094 = C29625 * C3884;
    const double C38926 = C5818 * C3884;
    const double C49694 = C47217 * C3884;
    const double C77187 = C137748 * C3884;
    const double C94403 = C92948 * C3884;
    const double C14441 = C182 * C5623;
    const double C14534 = C14017 * C5623;
    const double C16422 = C5818 * C5623;
    const double C32115 = C29625 * C5623;
    const double C95421 = C92948 * C5623;
    const double C125094 = C137748 * C5623;
    const double C7530 = C5815 * C7522;
    const double C69364 = C67750 * C7522;
    const double C15403 = C182 * C13619;
    const double C15506 = C14017 * C13619;
    const double C18969 = C5818 * C13619;
    const double C40342 = C21861 * C13619;
    const double C40478 = C29625 * C13619;
    const double C61313 = C54790 * C13619;
    const double C62444 = C47217 * C13619;
    const double C81699 = C137748 * C13619;
    const double C116228 = C92948 * C13619;
    const double C16402 =
        (2 * (C138204 * C138342 + C138059 * ae) +
         C138204 * (C138342 + C138204 * C138908 + C138905 * ae) +
         (C138059 + C138081 * C138390) * ae) /
        C137729;
    const double C57466 = C54790 * C10123;
    const double C57576 = C265 * C10123;
    const double C58103 = C54790 * C11062;
    const double C58241 = C265 * C11062;
    const double C89289 = C29625 * C11062;
    const double C104492 = C92948 * C11062;
    const double C105353 = C5896 * C11062;
    const double C63976 = C54790 * C13620;
    const double C64128 = C14017 * C13620;
    const double C65042 = C47217 * C13620;
    const double C90243 = C29625 * C13620;
    const double C105455 = C92948 * C13620;
    const double C107874 = C5896 * C13620;
    const double C135120 = C21861 * C13620;
    const double C18962 =
        (2 * (C138204 * C138788 + C138650 * ae) +
         C138204 * (C138788 + C138204 * C138951 + C138946 * ae) +
         (C138650 + C138734 * C138390) * ae) /
        C137729;
    const double C139029 = C138340 + C139027;
    const double C7628 = (2 * C138160 * C138672 +
                          C138160 * (C138672 + C138038 * C138405 * C138292)) /
                         C137733;
    const double C8633 = (ae * (C138218 + C138229 * C138292) +
                          be * (C138342 + C138353 * C138292) +
                          C138204 * (C138672 + C138038 * C138405 * C138292)) /
                         C137733;
    const double C10288 =
        (3 * (C138672 + C138803 * C138292) +
         C138160 * (2 * C138160 * C138803 +
                    C138160 * (C138803 +
                               C138038 *
                                   (C138111 * C138112 +
                                    C138390 * bs[7] * std::pow(C138044, 7)) *
                                   C137731 * C138292))) /
        C137733;
    const double C13780 =
        (C138160 * C138672 + ae * (C138204 * C138778 + C138644 * be) +
         be * (C138204 * C138794 + C138644 * ae) +
         C138204 *
             (ae * C138778 + be * C138794 + C138204 * C138160 * C138803)) /
        C137733;
    const double C13781 =
        (C138672 + C138803 * C138292 + ae * (C138204 * C138784 + C138759 * be) +
         be * (C138204 * C138800 + C138759 * ae) +
         C138204 * (ae * C138784 + be * C138800 +
                    C138204 * (C138803 +
                               C138038 *
                                   (C138111 * C138112 +
                                    C138390 * bs[7] * std::pow(C138044, 7)) *
                                   C137731 * C138292))) /
        C137733;
    const double C16632 =
        (2 * (ae * C138218 + be * C138342 + C138204 * C138672) +
         ae * (C138218 + C138204 * C138907 + C138905 * be) +
         be * (C138342 + C138204 * C138908 + C138905 * ae) +
         C138204 * (C138672 + ae * C138907 + be * C138908 +
                    C138204 * (C138233 + C138357 + C138204 * C138803))) /
        C137733;
    const double C19172 =
        (2 * (ae * C138772 + be * C138788 + C138204 * C138944) +
         ae * (C138772 + C138204 * C138950 + C138946 * be) +
         be * (C138788 + C138204 * C138951 + C138946 * ae) +
         C138204 * (C138944 + ae * C138950 + be * C138951 +
                    C138204 * (ae * C138945 + be * C138947 +
                               C138204 * C138160 * C138405))) /
        C137733;
    const double C139020 = C139014 + C139015;
    const double C724 = C139835 * C706;
    const double C1483 = C139835 * C1471;
    const double C31099 = C139984 * C1471;
    const double C94408 = C92797 * C1471;
    const double C2240 = C139835 * C2228;
    const double C14539 = C13857 * C2228;
    const double C30144 = C139899 * C2228;
    const double C32120 = C139984 * C2228;
    const double C93466 = C139899 * C2228;
    const double C95426 = C92797 * C2228;
    const double C6514 = C139835 * C3369;
    const double C39208 = C139984 * C3369;
    const double C101963 = C92797 * C3369;
    const double C8644 = C139835 * C4027;
    const double C15511 = C13857 * C4027;
    const double C31103 = C139899 * C4027;
    const double C40483 = C139984 * C4027;
    const double C94412 = C139899 * C4027;
    const double C116233 = C92797 * C4027;
    const double C14531 = C13858 * C5734;
    const double C16643 = C13857 * C5734;
    const double C32124 = C139899 * C5734;
    const double C95430 = C139899 * C5734;
    const double C123406 = C122759 * C5734;
    const double C10293 = C139835 * C7629;
    const double C89294 = C139984 * C7629;
    const double C104497 = C92797 * C7629;
    const double C11278 = C139835 * C8634;
    const double C42557 = C139899 * C8634;
    const double C64133 = C13857 * C8634;
    const double C90248 = C139984 * C8634;
    const double C101959 = C139899 * C8634;
    const double C105460 = C92797 * C8634;
    const double C57577 = C139835 * C10287;
    const double C58242 = C139835 * C11272;
    const double C89290 = C139899 * C11272;
    const double C104493 = C139899 * C11272;
    const double C43799 = C139899 * C13778;
    const double C61522 = C13858 * C13778;
    const double C65150 = C13857 * C13778;
    const double C105464 = C139899 * C13778;
    const double C131809 = C122759 * C13778;
    const double C64129 = C13858 * C13779;
    const double C90244 = C139899 * C13779;
    const double C105456 = C139899 * C13779;
    const double C134273 = C122759 * C13779;
    const double C57809 =
        (be * (3 * C138709 + C138160 * C139062) +
         C138204 *
             (3 * C139065 +
              C138160 * (2 * C138160 * C138234 +
                         C138160 * (C138234 + std::pow(C138044, 7) * bs[7] *
                                                  C138210 * C138292)))) /
        C137733;
    const double C59590 =
        (2 * C138926 + C138160 * C139065 + be * C138204 * C139062 +
         C138204 *
             (be * C139062 +
              C138204 * (2 * C138160 * C138234 +
                         C138160 * (C138234 + std::pow(C138044, 7) * bs[7] *
                                                  C138210 * C138292)))) /
        C137733;
    const double C57118 = (4 * (2 * C138705 + C138160 * C138709) +
                           C138160 * (3 * C138709 + C138160 * C139062)) /
                          C137729;
    const double C57648 =
        (C138204 * (3 * C138709 + C138160 * C139062)) / C137729;
    const double C59485 =
        (2 * C138705 + C138160 * C138709 + C139062 * C138390) / C137729;
    const double C112512 = (4 * (2 * C138966 + C138204 * C138970) +
                            C138204 * (3 * C138970 + C138204 * C139267)) /
                           C137729;
    const double C58097 =
        (ae * (3 * C138723 + C138160 * C139076) +
         C138204 *
             (3 * C139129 +
              C138160 * (2 * C138160 * C138358 +
                         C138160 * (C138358 + std::pow(C138044, 7) * bs[7] *
                                                  C138334 * C138292)))) /
        C137733;
    const double C59796 =
        (2 * C138937 + C138160 * C139129 + ae * C138204 * C139076 +
         C138204 *
             (ae * C139076 +
              C138204 * (2 * C138160 * C138358 +
                         C138160 * (C138358 + std::pow(C138044, 7) * bs[7] *
                                                  C138334 * C138292)))) /
        C137733;
    const double C57117 = (4 * (2 * C138719 + C138160 * C138723) +
                           C138160 * (3 * C138723 + C138160 * C139076)) /
                          C137729;
    const double C57647 =
        (C138204 * (3 * C138723 + C138160 * C139076)) / C137729;
    const double C59484 =
        (2 * C138719 + C138160 * C138723 + C139076 * C138390) / C137729;
    const double C112511 = (4 * (2 * C138990 + C138204 * C138994) +
                            C138204 * (3 * C138994 + C138204 * C139284)) /
                           C137729;
    const double C2154 =
        (ae * (3 * C138183 + C138038 * C138201) +
         C138204 *
             (3 * C138386 +
              C138038 * (2 * C138038 * C138384 +
                         C138038 * (C138384 + std::pow(C138044, 7) * bs[7] *
                                                  C138375 * C138042)))) /
        C137733;
    const double C5682 =
        (2 * C138038 * C138381 + C138038 * C138386 + ae * C138204 * C138201 +
         C138204 *
             (ae * C138201 +
              C138204 * (2 * C138038 * C138384 +
                         C138038 * (C138384 + std::pow(C138044, 7) * bs[7] *
                                                  C138375 * C138042)))) /
        C137733;
    const double C188 = (4 * (2 * C138174 + C138038 * C138183) +
                         C138038 * (3 * C138183 + C138038 * C138201)) /
                        C137729;
    const double C1657 =
        (C138204 * (3 * C138183 + C138038 * C138201)) / C137729;
    const double C5342 =
        (2 * C138174 + C138038 * C138183 + C138201 * C138390) / C137729;
    const double C112571 = (4 * (2 * C139002 + C138204 * C139006) +
                            C138204 * (3 * C139006 + C138204 * C139295)) /
                           C137729;
    const double C1244 =
        (ae * (3 * C138227 + C138038 * C138245) +
         C138160 *
             (3 * C138326 +
              C138038 * (2 * C138038 * C138324 +
                         C138038 * (C138324 + std::pow(C138044, 7) * bs[7] *
                                                  C138315 * C138042)))) /
        C137733;
    const double C3205 =
        (2 * C138038 * C138321 + C138038 * C138326 + ae * C138160 * C138245 +
         C138160 *
             (ae * C138245 +
              C138160 * (2 * C138038 * C138324 +
                         C138038 * (C138324 + std::pow(C138044, 7) * bs[7] *
                                                  C138315 * C138042)))) /
        C137733;
    const double C271 = (4 * (2 * C138218 + C138038 * C138227) +
                         C138038 * (3 * C138227 + C138038 * C138245)) /
                        C137729;
    const double C988 = (C138160 * (3 * C138227 + C138038 * C138245)) / C137729;
    const double C3035 =
        (2 * C138218 + C138038 * C138227 + C138245 * C138292) / C137729;
    const double C57230 = (4 * (2 * C138772 + C138160 * C138776) +
                           C138160 * (3 * C138776 + C138160 * C139126)) /
                          C137729;
    const double C2001 =
        (be * (3 * C138270 + C138038 * C138288) +
         C138204 *
             (3 * C138326 +
              C138038 * (2 * C138038 * C138324 +
                         C138038 * (C138324 + std::pow(C138044, 7) * bs[7] *
                                                  C138315 * C138042)))) /
        C137733;
    const double C3745 =
        (ae * C138204 * C138201 + be * C138204 * C138288 +
         C138160 * C138204 *
             (2 * C138038 * C138307 +
              C138038 * (C138307 + (C138111 * C138112 +
                                    C138292 * bs[7] * std::pow(C138044, 7)) *
                                       C137731 * C138042))) /
        C137733;
    const double C5570 =
        (2 * C138038 * C138321 + C138038 * C138326 + be * C138204 * C138288 +
         C138204 *
             (be * C138288 +
              C138204 * (2 * C138038 * C138324 +
                         C138038 * (C138324 + std::pow(C138044, 7) * bs[7] *
                                                  C138315 * C138042)))) /
        C137733;
    const double C353 = (4 * (2 * C138261 + C138038 * C138270) +
                         C138038 * (3 * C138270 + C138038 * C138288)) /
                        C137729;
    const double C1833 =
        (C138204 * (3 * C138270 + C138038 * C138288)) / C137729;
    const double C5458 =
        (2 * C138261 + C138038 * C138270 + C138288 * C138390) / C137729;
    const double C112687 = (4 * (2 * C138982 + C138204 * C138984) +
                            C138204 * (3 * C138984 + C138204 * C139273)) /
                           C137729;
    const double C1397 =
        (be * (3 * C138351 + C138038 * C138369) +
         C138160 *
             (3 * C138386 +
              C138038 * (2 * C138038 * C138384 +
                         C138038 * (C138384 + std::pow(C138044, 7) * bs[7] *
                                                  C138375 * C138042)))) /
        C137733;
    const double C3317 =
        (2 * C138038 * C138381 + C138038 * C138386 + be * C138160 * C138369 +
         C138160 *
             (be * C138369 +
              C138160 * (2 * C138038 * C138384 +
                         C138038 * (C138384 + std::pow(C138044, 7) * bs[7] *
                                                  C138375 * C138042)))) /
        C137733;
    const double C4029 =
        (ae * C138160 * C138245 + be * C138160 * C138369 +
         C138204 * C138160 *
             (2 * C138038 * C138405 +
              C138038 * (C138405 + (C138111 * C138112 +
                                    C138390 * bs[7] * std::pow(C138044, 7)) *
                                       C137731 * C138042))) /
        C137733;
    const double C572 = (4 * (2 * C138342 + C138038 * C138351) +
                         C138038 * (3 * C138351 + C138038 * C138369)) /
                        C137729;
    const double C1321 =
        (C138160 * (3 * C138351 + C138038 * C138369)) / C137729;
    const double C3259 =
        (2 * C138342 + C138038 * C138351 + C138369 * C138292) / C137729;
    const double C57459 = (4 * (2 * C138788 + C138160 * C138792) +
                           C138160 * (3 * C138792 + C138160 * C139141)) /
                          C137729;
    const double C21123 = C21115 * C5811;
    const double C112575 = C21115 * C139731;
    const double C129675 = C21115 * C139967;
    const double C211 = C139824 * C193;
    const double C914 = C139824 * C903;
    const double C5919 = C5814 * C903;
    const double C21877 = C139873 * C903;
    const double C22742 = C139983 * C903;
    const double C47233 = C139873 * C903;
    const double C48095 = C47134 * C903;
    const double C1671 = C139824 * C1660;
    const double C23719 = C139983 * C1660;
    const double C49069 = C47134 * C1660;
    const double C5908 = C5815 * C2979;
    const double C6808 = C5814 * C2979;
    const double C22736 = C139873 * C2979;
    const double C48089 = C139873 * C2979;
    const double C67843 = C67750 * C2979;
    const double C7879 = C5814 * C3525;
    const double C14767 = C139824 * C3525;
    const double C23713 = C139873 * C3525;
    const double C38207 = C139983 * C3525;
    const double C49063 = C139873 * C3525;
    const double C76510 = C47134 * C3525;
    const double C13936 = C139824 * C5344;
    const double C39503 = C139983 * C5344;
    const double C61777 = C47134 * C5344;
    const double C89512 = C67750 * C10530;
    const double C104715 = C5815 * C10530;
    const double C18434 = C139824 * C13220;
    const double C46353 = C139873 * C13220;
    const double C61770 = C139873 * C13220;
    const double C64372 = C47134 * C13220;
    const double C107402 = C5814 * C13220;
    const double C134495 = C139983 * C13220;
    const double C64374 = C139873 * C13221;
    const double C92178 = C67750 * C13221;
    const double C107404 = C5815 * C13221;
    const double C134497 = C139873 * C13221;
    const double C67100 = C139873 * C18424;
    const double C110798 = C139824 * C18424;
    const double C137164 = C139873 * C18424;
    const double C112584 = C112577 * C139731;
    const double C138200 = C138193 + C138198;
    const double C138714 = C138107 + C138712;
    const double C15814 = C139824 * C15792;
    const double C139061 = C139053 + C139059;
    const double C7062 = C139736 * C1079;
    const double C22953 = C21777 * C1079;
    const double C48315 = C47132 * C1079;
    const double C48304 = C47133 * C1079;
    const double C68921 = C139736 * C1079;
    const double C16058 = C139736 * C1836;
    const double C31582 = C21777 * C1836;
    const double C78028 = C139736 * C1836;
    const double C94900 = C47132 * C1836;
    const double C94889 = C47133 * C1836;
    const double C7068 = C5811 * C3095;
    const double C7053 = C139736 * C3095;
    const double C51006 = C47132 * C3095;
    const double C55532 = C139731 * C3095;
    const double C68927 = C139967 * C3095;
    const double C68912 = C139736 * C3095;
    const double C10752 = C139736 * C3673;
    const double C38503 = C5811 * C3673;
    const double C51807 = C47132 * C3673;
    const double C61004 = C139731 * C3673;
    const double C72412 = C139736 * C3673;
    const double C76778 = C139967 * C3673;
    const double C16064 = C5811 * C5460;
    const double C16049 = C139736 * C5460;
    const double C61991 = C139731 * C5460;
    const double C84716 = C139736 * C5460;
    const double C99970 = C47132 * C5460;
    const double C124781 = C139967 * C5460;
    const double C57304 = C139731 * C9878;
    const double C138287 = C138280 + C138285;
    const double C138728 = C138106 + C138726;
    const double C18637 =
        (ae *
             (2 * C138204 * C138095 + C138204 * (C138095 + C138139 * C138390)) +
         C138160 * (2 * C138813 +
                    C138204 * (C138283 +
                               (be * C138279 + C138038 * std::pow(C138044, 7) *
                                                   bs[7] * C138253) *
                                   C138390))) /
        C137733;
    const double C21281 =
        (3 * (C138269 + C138283 * C138390) +
         C138204 * (2 * C138813 +
                    C138204 * (C138283 +
                               (be * C138279 + C138038 * std::pow(C138044, 7) *
                                                   bs[7] * C138253) *
                                   C138390))) /
        C137733;
    const double C10760 = C139736 * C8095;
    const double C72420 = C139736 * C8095;
    const double C86287 = C139731 * C8095;
    const double C18646 = C139736 * C13385;
    const double C61008 = C139731 * C13385;
    const double C81298 = C139736 * C13385;
    const double C21294 = C139736 * C16032;
    const double C109280 = C139731 * C16032;
    const double C129840 = C139736 * C16032;
    const double C139075 = C139067 + C139073;
    const double C57881 =
        (3 * (C138811 + ae * C138204 * C138414 + C138160 * C139151) +
         ae * C138204 * C139076 +
         C138160 *
             (2 * C139151 + ae * C138204 * C139072 +
              C138160 * (C139149 + ae * C138204 * C138160 * C138127 +
                         C138160 * (ae * C138204 * C138127 +
                                    C138160 * C138204 * std::pow(C138044, 7) *
                                        bs[7] * C138253)))) /
        C137733;
    const double C9799 = C9791 * C5811;
    const double C57234 = C9791 * C139731;
    const double C71511 = C9791 * C139967;
    const double C294 = C139835 * C276;
    const double C1002 = C139835 * C991;
    const double C30484 = C139984 * C991;
    const double C93802 = C92797 * C991;
    const double C1759 = C139835 * C1748;
    const double C14040 = C13857 * C1748;
    const double C29641 = C139899 * C1748;
    const double C31471 = C139984 * C1748;
    const double C92964 = C139899 * C1748;
    const double C94778 = C92797 * C1748;
    const double C5998 = C139835 * C3037;
    const double C38361 = C139984 * C3037;
    const double C101341 = C92797 * C3037;
    const double C7989 = C139835 * C3599;
    const double C14881 = C13857 * C3599;
    const double C30478 = C139899 * C3599;
    const double C39645 = C139984 * C3599;
    const double C93796 = C139899 * C3599;
    const double C115439 = C92797 * C3599;
    const double C14029 = C13858 * C5402;
    const double C15928 = C13857 * C5402;
    const double C31465 = C139899 * C5402;
    const double C94772 = C139899 * C5402;
    const double C122922 = C122759 * C5402;
    const double C57243 = C57236 * C139731;
    const double C138244 = C138237 + C138242;
    const double C18535 =
        (2 * (be * C138711 + C138204 * C138928) +
         be * (C138711 + C138929 * C138390) +
         C138204 *
             (C138928 + be * C138204 * C138929 +
              C138204 * (be * C138929 +
                         C138204 * C138160 *
                             (ae * C138236 + C138038 * std::pow(C138044, 7) *
                                                 bs[7] * C138210)))) /
        C137733;
    const double C138975 = C138107 + C138973;
    const double C6934 = C139835 * C6912;
    const double C7993 = C139835 * C7983;
    const double C38363 = C139899 * C7983;
    const double C101343 = C139899 * C7983;
    const double C67180 =
        (3 * (C138926 + be * C139203 + C138204 * C139208) +
         be * (2 * C139203 + C138204 * C139209) +
         C138204 *
             (2 * C139208 + be * C139209 +
              C138204 * (C139204 + be * C138204 * C139205 +
                         C138204 * (be * C139205 + C138204 * C138160 *
                                                       std::pow(C138044, 7) *
                                                       bs[7] * C138210)))) /
        C137733;
    const double C139266 = C139258 + C139264;
    const double C515 = C513 * C139824;
    const double C57409 = C139835 * C10044;
    const double C58030 = C139835 * C10958;
    const double C89054 = C139899 * C10958;
    const double C104258 = C139899 * C10958;
    const double C43395 = C139899 * C13540;
    const double C61209 = C13858 * C13540;
    const double C64828 = C13857 * C13540;
    const double C105148 = C139899 * C13540;
    const double C131502 = C122759 * C13540;
    const double C63901 = C13858 * C13541;
    const double C89939 = C139899 * C13541;
    const double C105152 = C139899 * C13541;
    const double C134047 = C122759 * C13541;
    const double C64830 = C13858 * C18862;
    const double C134921 = C122759 * C18862;
    const double C22241 = C22239 * C139873;
    const double C47593 = C22239 * C139873;
    const double C1251 = C139835 * C1243;
    const double C2008 = C139835 * C2000;
    const double C29891 = C139899 * C2000;
    const double C93214 = C139899 * C2000;
    const double C6274 = C139835 * C3204;
    const double C24147 = C139835 * C3814;
    const double C30795 = C139899 * C3814;
    const double C94106 = C139899 * C3814;
    const double C14290 = C13858 * C5569;
    const double C31805 = C139899 * C5569;
    const double C95112 = C139899 * C5569;
    const double C123169 = C122759 * C5569;
    const double C10045 =
        (3 * (C138662 + ae * C138778 + C138160 * C138783) +
         ae * (2 * C138778 + C138160 * C138784) +
         C138160 *
             (2 * C138783 + ae * C138784 +
              C138160 * (C138779 + ae * C138160 * C138780 +
                         C138160 * (ae * C138780 + C138160 * C138038 *
                                                       std::pow(C138044, 7) *
                                                       bs[7] * C138315)))) /
        C137733;
    const double C10959 =
        (2 * (ae * (C138204 * C138229 + C138087) + C138160 * C138823) +
         ae * (C138204 * C138784 + C138759 * be) +
         C138160 *
             (C138823 + ae * (C138204 * C138160 * C138780 + C138758) +
              C138160 * (ae * (C138204 * C138780 + C138128) +
                         C138160 * (be * C138755 + C138204 * C138038 *
                                                       std::pow(C138044, 7) *
                                                       bs[7] * C138315)))) /
        C137733;
    const double C13542 =
        (ae * (C138218 + C138204 * (C138204 * C138229 + C138087) +
               C138204 * C138081 * be) +
         C138160 * (C138662 + be * C138204 * C138272 + C138204 * C138823)) /
        C137733;
    const double C13543 =
        (C138662 + be * C138204 * C138272 + C138204 * C138823 +
         ae * (C138778 + C138204 * (C138204 * C138160 * C138780 + C138758) +
               C138204 * C138753 * be) +
         C138160 *
             (ae * (C138229 + C138204 * (C138204 * C138780 + C138128) +
                    C138204 * C138121 * be) +
              C138160 * (C138779 + be * C138204 * C138755 +
                         C138204 * (be * C138755 + C138204 * C138038 *
                                                       std::pow(C138044, 7) *
                                                       bs[7] * C138315)))) /
        C137733;
    const double C16295 =
        (2 * (be * C138261 + C138204 * C138662) +
         be * (C138261 + C138272 * C138390) +
         C138204 * (C138662 + be * C138204 * C138272 + C138204 * C138823)) /
        C137733;
    const double C18863 =
        (ae * (2 * C138907 +
               C138204 * (C138229 + C138204 * (C138204 * C138780 + C138128) +
                          C138204 * C138121 * be) +
               (C138081 + C138121 * C138390) * be) +
         C138160 *
             (2 * C138823 + be * (C138272 + C138755 * C138390) +
              C138204 * (C138779 + be * C138204 * C138755 +
                         C138204 * (be * C138755 + C138204 * C138038 *
                                                       std::pow(C138044, 7) *
                                                       bs[7] * C138315)))) /
        C137733;
    const double C21460 =
        (3 * (C138662 + be * C138986 + C138204 * C138823) +
         be * (2 * C138986 + C138204 * C138988) +
         C138204 *
             (2 * C138823 + be * C138988 +
              C138204 * (C138779 + be * C138204 * C138755 +
                         C138204 * (be * C138755 + C138204 * C138038 *
                                                       std::pow(C138044, 7) *
                                                       bs[7] * C138315)))) /
        C137733;
    const double C139125 = C139120 + C139123;
    const double C139166 = C139162 + C139165;
    const double C139182 = C139180 + C139181;
    const double C7419 = C139736 * C1324;
    const double C23294 = C21777 * C1324;
    const double C48649 = C47132 * C1324;
    const double C48644 = C47133 * C1324;
    const double C69256 = C139736 * C1324;
    const double C16419 = C139736 * C2081;
    const double C31908 = C21777 * C2081;
    const double C78428 = C139736 * C2081;
    const double C95220 = C47132 * C2081;
    const double C95215 = C47133 * C2081;
    const double C7421 = C5811 * C3261;
    const double C7414 = C139736 * C3261;
    const double C51234 = C47132 * C3261;
    const double C55744 = C139731 * C3261;
    const double C69258 = C139967 * C3261;
    const double C69251 = C139736 * C3261;
    const double C11070 = C139736 * C3887;
    const double C38925 = C5811 * C3887;
    const double C52107 = C47132 * C3887;
    const double C61312 = C139731 * C3887;
    const double C72718 = C139736 * C3887;
    const double C77186 = C139967 * C3887;
    const double C16421 = C5811 * C5626;
    const double C16414 = C139736 * C5626;
    const double C62335 = C139731 * C5626;
    const double C85014 = C139736 * C5626;
    const double C100201 = C47132 * C5626;
    const double C125093 = C139967 * C5626;
    const double C112866 = C139731 * C21537;
    const double C138368 = C138361 + C138366;
    const double C18965 =
        (2 * (ae * C138725 + C138204 * C138939) +
         ae * (C138725 + C138940 * C138390) +
         C138204 *
             (C138939 + ae * C138204 * C138940 +
              C138204 * (ae * C138940 +
                         C138204 * C138160 *
                             (be * C138360 + C138038 * std::pow(C138044, 7) *
                                                 bs[7] * C138334)))) /
        C137733;
    const double C138999 = C138106 + C138997;
    const double C10134 = C139736 * C7405;
    const double C55746 = C139731 * C7405;
    const double C71833 = C139736 * C7405;
    const double C11074 = C139736 * C8426;
    const double C72722 = C139736 * C8426;
    const double C86583 = C139731 * C8426;
    const double C67511 =
        (3 * (C138937 + ae * C139218 + C138204 * C139223) +
         ae * (2 * C139218 + C138204 * C139224) +
         C138204 *
             (2 * C139223 + ae * C139224 +
              C138204 * (C139219 + ae * C138204 * C139220 +
                         C138204 * (ae * C139220 + C138204 * C138160 *
                                                       std::pow(C138044, 7) *
                                                       bs[7] * C138334)))) /
        C137733;
    const double C139283 = C139275 + C139281;
    const double C649 = C647 * C139835;
    const double C19074 = C139824 * C13700;
    const double C46959 = C139873 * C13700;
    const double C62440 = C139873 * C13700;
    const double C65041 = C47134 * C13700;
    const double C107873 = C5814 * C13700;
    const double C135119 = C139983 * C13700;
    const double C67596 = C139873 * C19068;
    const double C111206 = C139824 * C19068;
    const double C137642 = C139873 * C19068;
    const double C112920 = C139824 * C21620;
    const double C30050 = C30048 * C139899;
    const double C93371 = C30048 * C139899;
    const double C1404 = C139824 * C1396;
    const double C22404 = C139873 * C1396;
    const double C47757 = C139873 * C1396;
    const double C2161 = C139824 * C2153;
    const double C6434 = C5815 * C3316;
    const double C23407 = C139873 * C3316;
    const double C48757 = C139873 * C3316;
    const double C68357 = C67750 * C3316;
    const double C24351 = C139873 * C3958;
    const double C30993 = C139824 * C3958;
    const double C49695 = C139873 * C3958;
    const double C14442 = C139824 * C5681;
    const double C10212 =
        (3 * (C138669 + be * C138794 + C138160 * C138799) +
         be * (2 * C138794 + C138160 * C138800) +
         C138160 *
             (2 * C138799 + be * C138800 +
              C138160 * (C138795 + be * C138160 * C138796 +
                         C138160 * (be * C138796 + C138160 * C138038 *
                                                       std::pow(C138044, 7) *
                                                       bs[7] * C138375)))) /
        C137733;
    const double C13702 =
        (be * C138342 + C138160 * C138669 + ae * C138204 * C138646 +
         C138204 * (ae * C138646 + C138204 * C138799)) /
        C137733;
    const double C19069 =
        (2 * (ae * C138646 + C138204 * C138799) +
         ae * (C138646 + C138763 * C138390) +
         C138204 *
             (C138799 + ae * C138204 * C138763 +
              C138204 * (ae * C138763 +
                         C138204 * (be * C138796 + C138160 * C138038 *
                                                       std::pow(C138044, 7) *
                                                       bs[7] * C138375)))) /
        C137733;
    const double C21621 =
        (3 * (C138669 + ae * C139008 + C138204 * C139011) +
         ae * (2 * C139008 + C138204 * C139012) +
         C138204 *
             (2 * C139011 + ae * C139012 +
              C138204 * (C138795 + ae * C138204 * C138752 +
                         C138204 * (ae * C138752 + C138204 * C138038 *
                                                       std::pow(C138044, 7) *
                                                       bs[7] * C138375)))) /
        C137733;
    const double C139140 = C139135 + C139138;
    const double C139229 = C139078 + C139227;
    const double C139294 = C139286 + C139292;
    const double C22599 = C21784 * C818;
    const double C22597 = C21784 * C817;
    const double C22965 = C21784 * C1075;
    const double C22959 = C21784 * C810;
    const double C22954 = C21784 * C1074;
    const double C22948 = C21784 * C811;
    const double C23300 = C21784 * C1320;
    const double C23295 = C21784 * C1319;
    const double C25670 = C21784 * C3092;
    const double C25664 = C21784 * C2910;
    const double C25898 = C21784 * C3258;
    const double C26471 = C21784 * C3670;
    const double C26465 = C21784 * C3440;
    const double C26771 = C21784 * C3884;
    const double C31228 = C21784 * C1575;
    const double C31226 = C21784 * C1574;
    const double C31594 = C21784 * C1832;
    const double C31588 = C21784 * C1567;
    const double C31583 = C21784 * C1831;
    const double C31577 = C21784 * C1568;
    const double C31914 = C21784 * C2077;
    const double C31909 = C21784 * C2076;
    const double C36665 = C21784 * C5457;
    const double C36659 = C21784 * C5275;
    const double C36896 = C21784 * C5623;
    const double C47952 = C47140 * C818;
    const double C47950 = C47140 * C817;
    const double C48316 = C47140 * C1075;
    const double C48310 = C47140 * C810;
    const double C48305 = C47140 * C1074;
    const double C48299 = C47140 * C811;
    const double C48650 = C47140 * C1320;
    const double C48645 = C47140 * C1319;
    const double C51007 = C47140 * C3092;
    const double C51001 = C47140 * C2910;
    const double C51235 = C47140 * C3258;
    const double C51808 = C47140 * C3670;
    const double C51802 = C47140 * C3440;
    const double C52108 = C47140 * C3884;
    const double C94537 = C47140 * C1575;
    const double C94535 = C47140 * C1574;
    const double C94901 = C47140 * C1832;
    const double C94895 = C47140 * C1567;
    const double C94890 = C47140 * C1831;
    const double C94884 = C47140 * C1568;
    const double C95221 = C47140 * C2077;
    const double C95216 = C47140 * C2076;
    const double C99971 = C47140 * C5457;
    const double C99965 = C47140 * C5275;
    const double C100202 = C47140 * C5623;
    const double C137752 = C139731 - C137750;
    const double C57299 = C55521 - C55522;
    const double C57298 = C55519 - C55520;
    const double C57297 = C55517 - C55518;
    const double C57465 = C55739 - C55740;
    const double C57463 = C55737 - C55738;
    const double C88899 = C57888 - C57887;
    const double C89717 = C57887 - C57888;
    const double C64592 = C57885 - C57886;
    const double C64588 = C57886 - C57885;
    const double C64591 = C57883 - C57884;
    const double C64587 = C57884 - C57883;
    const double C89133 = C58102 - C58101;
    const double C90038 = C58101 - C58102;
    const double C64933 = C58099 - C58100;
    const double C64931 = C58100 - C58099;
    const double C64593 = C60998 - C60997;
    const double C64589 = C60997 - C60998;
    const double C64934 = C61310 - C61309;
    const double C64932 = C61309 - C61310;
    const double C67259 = C61982 - C61983;
    const double C67258 = C61980 - C61981;
    const double C67513 = C62330 - C62331;
    const double C112693 = C67265 - C67264;
    const double C112692 = C67263 - C67262;
    const double C22604 = C140009 * C827;
    const double C22592 = C140009 * C828;
    const double C22962 = C140009 * C1078;
    const double C22956 = C140009 * C819;
    const double C22949 = C140009 * C1077;
    const double C22943 = C140009 * C821;
    const double C23297 = C140009 * C1323;
    const double C23290 = C140009 * C1322;
    const double C25428 = C140009 * C2920;
    const double C25667 = C140009 * C3094;
    const double C25661 = C140009 * C2912;
    const double C25895 = C140009 * C3260;
    const double C26157 = C140009 * C3450;
    const double C26468 = C140009 * C3672;
    const double C26462 = C140009 * C3442;
    const double C26768 = C140009 * C3886;
    const double C31233 = C140009 * C1584;
    const double C31221 = C140009 * C1585;
    const double C31591 = C140009 * C1835;
    const double C31585 = C140009 * C1576;
    const double C31578 = C140009 * C1834;
    const double C31572 = C140009 * C1578;
    const double C31911 = C140009 * C2080;
    const double C31904 = C140009 * C2079;
    const double C36423 = C140009 * C5285;
    const double C36662 = C140009 * C5459;
    const double C36656 = C140009 * C5277;
    const double C36893 = C140009 * C5625;
    const double C89 =
        (C140009 * C139726) / C137729 + (C139967 - C139994) / C137734;
    const double C22596 = C140010 * C827;
    const double C22964 = C140010 * C1079;
    const double C22958 = C140010 * C817;
    const double C22951 = C140010 * C1078;
    const double C22945 = C140010 * C819;
    const double C23299 = C140010 * C1324;
    const double C23292 = C140010 * C1323;
    const double C25424 = C140010 * C2921;
    const double C25669 = C140010 * C3095;
    const double C25663 = C140010 * C2914;
    const double C25897 = C140010 * C3261;
    const double C26470 = C140010 * C3673;
    const double C26464 = C140010 * C3444;
    const double C26770 = C140010 * C3887;
    const double C31225 = C140010 * C1584;
    const double C31593 = C140010 * C1836;
    const double C31587 = C140010 * C1574;
    const double C31580 = C140010 * C1835;
    const double C31574 = C140010 * C1576;
    const double C31913 = C140010 * C2081;
    const double C31906 = C140010 * C2080;
    const double C36419 = C140010 * C5286;
    const double C36664 = C140010 * C5460;
    const double C36658 = C140010 * C5279;
    const double C36895 = C140010 * C5626;
    const double C90 =
        (C140010 * C139726) / C137729 + (2 * C139736 + C140009) / C137734;
    const double C91 = (C139726 * C139736) / C137738 + C140010 / C137734;
    const double C137820 = C139824 - C137819;
    const double C47244 = C47229 - C47230;
    const double C47759 = C47752 - C47753;
    const double C77746 = C49058 - C49059;
    const double C77742 = C49059 - C49058;
    const double C78562 = C49690 - C49691;
    const double C78560 = C49691 - C49690;
    const double C67849 = C67831 * C2910;
    const double C67844 = C67831 * C2915;
    const double C67838 = C67831 * C2909;
    const double C68096 = C67831 * C3092;
    const double C68094 = C67831 * C2976;
    const double C68092 = C67831 * C3091;
    const double C68090 = C67831 * C2975;
    const double C68356 = C67831 * C3258;
    const double C68351 = C67831 * C3257;
    const double C68700 = C67831 * C6630;
    const double C68694 = C67831 * C6626;
    const double C69363 = C67831 * C7402;
    const double C69672 = C67831 * C7757;
    const double C69666 = C67831 * C7753;
    const double C70287 = C67831 * C8423;
    const double C86987 = C67831 * C7759;
    const double C86981 = C67831 * C7754;
    const double C87292 = C67831 * C8091;
    const double C87290 = C67831 * C7863;
    const double C87602 = C67831 * C8422;
    const double C89511 = C67831 * C10397;
    const double C89505 = C67831 * C10394;
    const double C90141 = C67831 * C11062;
    const double C92177 = C67831 * C13135;
    const double C92171 = C67831 * C13128;
    const double C92648 = C67831 * C13620;
    const double C442 = C438 + C421;
    const double C16192 = C16189 + C16171;
    const double C67852 = C140011 * C191;
    const double C67846 = C140011 * C185;
    const double C67839 = C140011 * C190;
    const double C67833 = C140011 * C184;
    const double C68105 = C140011 * C413;
    const double C68085 = C140011 * C412;
    const double C68353 = C140011 * C631;
    const double C68346 = C140011 * C630;
    const double C68697 = C140011 * C902;
    const double C68691 = C140011 * C897;
    const double C69039 = C140011 * C1150;
    const double C69360 = C140011 * C1394;
    const double C69669 = C140011 * C1659;
    const double C69663 = C140011 * C1654;
    const double C69979 = C140011 * C1907;
    const double C70284 = C140011 * C2151;
    const double C86982 = C140011 * C1658;
    const double C86976 = C140011 * C1653;
    const double C87285 = C140011 * C1908;
    const double C87597 = C140011 * C2150;
    const double C89508 = C140011 * C3524;
    const double C89502 = C140011 * C3520;
    const double C89820 = C140011 * C3742;
    const double C90138 = C140011 * C3956;
    const double C92174 = C140011 * C5343;
    const double C92168 = C140011 * C5339;
    const double C92412 = C140011 * C5513;
    const double C92645 = C140011 * C5679;
    const double C54786 =
        (C140011 * C139868) / C137729 + (C139983 - C140003) / C137734;
    const double C67854 = C140012 * C903;
    const double C67848 = C140012 * C898;
    const double C67841 = C140012 * C902;
    const double C67835 = C140012 * C897;
    const double C68101 = C140012 * C1149;
    const double C68089 = C140012 * C1150;
    const double C68355 = C140012 * C1395;
    const double C68348 = C140012 * C1394;
    const double C68699 = C140012 * C2979;
    const double C68693 = C140012 * C2975;
    const double C69035 = C140012 * C3149;
    const double C69362 = C140012 * C3315;
    const double C69671 = C140012 * C3525;
    const double C69665 = C140012 * C3521;
    const double C69975 = C140012 * C3743;
    const double C70286 = C140012 * C3957;
    const double C86984 = C140012 * C3524;
    const double C86978 = C140012 * C3520;
    const double C87289 = C140012 * C3742;
    const double C87599 = C140012 * C3956;
    const double C89510 = C140012 * C7866;
    const double C89504 = C140012 * C7863;
    const double C89824 = C140012 * C8196;
    const double C90140 = C140012 * C8526;
    const double C92176 = C140012 * C13220;
    const double C92170 = C140012 * C13216;
    const double C92408 = C140012 * C13462;
    const double C92647 = C140012 * C13700;
    const double C54787 =
        (C140012 * C139868) / C137729 + (2 * C139873 + C140011) / C137734;
    const double C54788 = (C139868 * C139873) / C137738 + C140012 / C137734;
    const double C137846 = C139835 - C137845;
    const double C92975 = C92960 - C92961;
    const double C93216 = C93209 - C93210;
    const double C114249 = C93791 - C93792;
    const double C114245 = C93792 - C93791;
    const double C114649 = C94101 - C94102;
    const double C114647 = C94102 - C94101;
    const double C104017 = C101334 - C101335;
    const double C104015 = C101330 - C101331;
    const double C122928 = C122910 * C5275;
    const double C122923 = C122910 * C5280;
    const double C122917 = C122910 * C5274;
    const double C123168 = C122910 * C5457;
    const double C123163 = C122910 * C5456;
    const double C123409 = C122910 * C5623;
    const double C123407 = C122910 * C5399;
    const double C123405 = C122910 * C5622;
    const double C123403 = C122910 * C5398;
    const double C123735 = C122910 * C13127;
    const double C124339 = C122910 * C13619;
    const double C124337 = C122910 * C13299;
    const double C124676 = C122910 * C15626;
    const double C124670 = C122910 * C15622;
    const double C124992 = C122910 * C16029;
    const double C131203 = C122910 * C13131;
    const double C131197 = C122910 * C13126;
    const double C131503 = C122910 * C13380;
    const double C131808 = C122910 * C13618;
    const double C131806 = C122910 * C13298;
    const double C133818 = C122910 * C13135;
    const double C133812 = C122910 * C13128;
    const double C134272 = C122910 * C13620;
    const double C134270 = C122910 * C13300;
    const double C134606 = C122910 * C18305;
    const double C134600 = C122910 * C18302;
    const double C134920 = C122910 * C18634;
    const double C733 = C729 + C712;
    const double C7652 = C7649 + C7635;
    const double C122931 = C140013 * C274;
    const double C122925 = C140013 * C268;
    const double C122918 = C140013 * C273;
    const double C122912 = C140013 * C267;
    const double C123165 = C140013 * C497;
    const double C123158 = C140013 * C496;
    const double C123418 = C140013 * C704;
    const double C123398 = C140013 * C703;
    const double C123738 = C140013 * C990;
    const double C123732 = C140013 * C985;
    const double C124038 = C140013 * C1241;
    const double C124348 = C140013 * C1472;
    const double C124673 = C140013 * C1747;
    const double C124667 = C140013 * C1742;
    const double C124989 = C140013 * C1998;
    const double C125303 = C140013 * C2229;
    const double C131198 = C140013 * C989;
    const double C131192 = C140013 * C984;
    const double C131498 = C140013 * C1240;
    const double C131801 = C140013 * C1473;
    const double C133815 = C140013 * C3036;
    const double C133809 = C140013 * C3032;
    const double C134043 = C140013 * C3202;
    const double C134281 = C140013 * C3368;
    const double C134603 = C140013 * C3598;
    const double C134597 = C140013 * C3594;
    const double C134917 = C140013 * C3812;
    const double C135231 = C140013 * C4026;
    const double C107999 =
        (C140013 * C139894) / C137729 + (C139984 - C140006) / C137734;
    const double C122933 = C140014 * C1748;
    const double C122927 = C140014 * C1743;
    const double C122920 = C140014 * C1747;
    const double C122914 = C140014 * C1742;
    const double C123167 = C140014 * C1999;
    const double C123160 = C140014 * C1998;
    const double C123414 = C140014 * C2228;
    const double C123402 = C140014 * C2229;
    const double C123740 = C140014 * C3599;
    const double C123734 = C140014 * C3595;
    const double C124040 = C140014 * C3813;
    const double C124344 = C140014 * C4027;
    const double C124675 = C140014 * C5402;
    const double C124669 = C140014 * C5398;
    const double C124991 = C140014 * C5568;
    const double C125299 = C140014 * C5734;
    const double C131200 = C140014 * C3598;
    const double C131194 = C140014 * C3594;
    const double C131500 = C140014 * C3812;
    const double C131805 = C140014 * C4026;
    const double C133817 = C140014 * C7982;
    const double C133811 = C140014 * C7979;
    const double C134045 = C140014 * C8317;
    const double C134277 = C140014 * C8634;
    const double C134605 = C140014 * C13302;
    const double C134599 = C140014 * C13298;
    const double C134919 = C140014 * C13540;
    const double C135227 = C140014 * C13778;
    const double C108000 =
        (C140014 * C139894) / C137729 + (2 * C139899 + C140013) / C137734;
    const double C108001 = (C139894 * C139899) / C137738 + C140014 / C137734;
    const double C215 = C206 - C207;
    const double C298 = C289 - C290;
    const double C57407 = C10049 - C10048;
    const double C57300 = C55523 - C55524;
    const double C89050 = C42259 - C42258;
    const double C88900 = C57890 - C57889;
    const double C89718 = C57889 - C57890;
    const double C104254 = C101644 - C101645;
    const double C64594 = C61000 - C60999;
    const double C64590 = C60999 - C61000;
    const double C112918 = C21625 - C21624;
    const double C112864 = C67515 - C67514;
    const double C9792 = C6925 * C5818;
    const double C71512 = C6925 * C137748;
    const double C6523 = C6521 - C6513;
    const double C8649 = C8647 - C8643;
    const double C15094 = C15092 - C15089;
    const double C21116 = C15805 * C5818;
    const double C129676 = C15805 * C137748;
    const double C14201 = C14199 - C14193;
    const double C9882 = C7049 - C7050;
    const double C71592 = C68908 - C68909;
    const double C43111 = C10747 - C10748;
    const double C43107 = C10748 - C10747;
    const double C81288 = C72407 - C72408;
    const double C81284 = C72408 - C72407;
    const double C21284 = C16045 - C16046;
    const double C129830 = C84712 - C84711;
    const double C18758 = C18752 - C18753;
    const double C137154 = C46349 - C46348;
    const double C67090 = C61766 - C61767;
    const double C443 = C439 + C425;
    const double C444 = C440 + C429;
    const double C1174 = C1171 + C1165;
    const double C1931 = C1928 + C1922;
    const double C18761 = C18759 + C18750;
    const double C16193 = C16190 + C16176;
    const double C734 = C730 + C716;
    const double C735 = C731 + C720;
    const double C1496 = C1493 + C1487;
    const double C2253 = C2250 + C2244;
    const double C7653 = C7650 + C7639;
    const double C11288 = C11286 + C11282;
    const double C516 = C504 + C514;
    const double C650 = C638 + C648;
    const double C138104 = C138102 + C138090;
    const double C6810 = C5815 * C6796;
    const double C68701 = C67750 * C6796;
    const double C7881 = C5815 * C7867;
    const double C38209 = C139873 * C7867;
    const double C69673 = C67750 * C7867;
    const double C76512 = C139873 * C7867;
    const double C15930 = C13858 * C15916;
    const double C124677 = C122759 * C15916;
    const double C14883 = C13858 * C13303;
    const double C39647 = C139899 * C13303;
    const double C115441 = C139899 * C13303;
    const double C123742 = C122759 * C13303;
    const double C14770 = C182 * C13133;
    const double C14882 = C14017 * C13133;
    const double C18317 = C5818 * C13133;
    const double C39504 = C21861 * C13133;
    const double C39646 = C29625 * C13133;
    const double C60677 = C54790 * C13133;
    const double C61778 = C47217 * C13133;
    const double C80880 = C137748 * C13133;
    const double C115440 = C92948 * C13133;
    const double C123741 = C122910 * C13133;
    const double C138103 = C138101 + C138087;
    const double C138125 = C138116 + C138107;
    const double C9892 = C139736 * C7036;
    const double C55536 = C139731 * C7036;
    const double C71602 = C139736 * C7036;
    const double C21545 = C139736 * C16405;
    const double C109486 = C139731 * C16405;
    const double C130076 = C139736 * C16405;
    const double C18970 = C139736 * C13623;
    const double C61314 = C139731 * C13623;
    const double C81700 = C139736 * C13623;
    const double C18315 = C5818 * C13132;
    const double C18642 = C139736 * C13132;
    const double C60675 = C54790 * C13132;
    const double C61006 = C139731 * C13132;
    const double C80878 = C137748 * C13132;
    const double C81294 = C139736 * C13132;
    const double C6662 = C139736 * C826;
    const double C22608 = C140010 * C826;
    const double C22600 = C21777 * C826;
    const double C47961 = C47132 * C826;
    const double C47953 = C47133 * C826;
    const double C68559 = C139736 * C826;
    const double C10414 = C139736 * C3451;
    const double C26153 = C140010 * C3451;
    const double C38061 = C5811 * C3451;
    const double C51490 = C47132 * C3451;
    const double C60674 = C139731 * C3451;
    const double C72094 = C139736 * C3451;
    const double C76364 = C139967 * C3451;
    const double C18314 = C5811 * C13138;
    const double C60669 = C139731 * C13138;
    const double C80885 = C139967 * C13138;
    const double C15658 = C139736 * C1583;
    const double C31237 = C140010 * C1583;
    const double C31229 = C21777 * C1583;
    const double C77598 = C139736 * C1583;
    const double C94546 = C47132 * C1583;
    const double C94538 = C47133 * C1583;
    const double C138150 = C138147 + C138131;
    const double C10633 =
        (be * (2 * C138711 + C138160 * C138715) +
         C138204 * (2 * C138160 * C138240 +
                    C138160 * (C138240 +
                               (ae * C138236 + C138038 * std::pow(C138044, 7) *
                                                   bs[7] * C138210) *
                                   C138292))) /
        C137733;
    const double C13305 =
        (C138226 + C138240 * C138292 + be * C138204 * C138715 +
         C138204 * (be * C138715 +
                    C138204 * (C138240 +
                               (ae * C138236 + C138038 * std::pow(C138044, 7) *
                                                   bs[7] * C138210) *
                                   C138292))) /
        C137733;
    const double C9614 = (3 * (C138070 + C138096 * C138292) +
                          C138160 * (2 * C138711 + C138160 * C138715)) /
                         C137729;
    const double C10399 =
        (C138204 * (2 * C138711 + C138160 * C138715)) / C137729;
    const double C13137 =
        (C138070 + C138096 * C138292 + C138715 * C138390) / C137729;
    const double C21017 = (3 * (C138070 + C138096 * C138390) +
                           C138204 * (2 * C138972 + C138204 * C138976)) /
                          C137729;
    const double C139108 = C139106 + C139095;
    const double C139324 = C139322 + C139316;
    const double C7034 =
        (2 * (C138160 * C138270 + C138088 * ae) +
         C138160 * (C138270 + C138160 * C138659 + C138656 * ae) +
         (C138088 + C138129 * C138292) * ae) /
        C137729;
    const double C8093 =
        (C138204 * (C138270 + C138160 * C138659 + C138656 * ae)) / C137729;
    const double C14981 =
        (C138160 * C138270 + C138088 * ae + C138659 * C138390) / C137729;
    const double C16403 =
        (2 * (C138204 * C138351 + C138088 * ae) +
         C138204 * (C138351 + C138204 * C138920 + C138917 * ae) +
         (C138088 + C138129 * C138390) * ae) /
        C137729;
    const double C3815 =
        (ae * (C138204 * C138245 + C138140 * be) +
         C138160 *
             (be * C138288 +
              C138204 * (2 * C138038 * C138324 +
                         C138038 * (C138324 + std::pow(C138044, 7) * bs[7] *
                                                  C138315 * C138042)))) /
        C137733;
    const double C3959 =
        (ae * (C138160 * C138201 + C138140 * be) +
         C138204 *
             (be * C138369 +
              C138160 * (2 * C138038 * C138384 +
                         C138038 * (C138384 + std::pow(C138044, 7) * bs[7] *
                                                  C138375 * C138042)))) /
        C137733;
    const double C900 = (C138160 * (3 * C138183 + C138038 * C138201) +
                         (3 * C138088 + C138038 * C138140) * be) /
                        C137729;
    const double C1076 = (C138160 * (3 * C138270 + C138038 * C138288) +
                          (3 * C138088 + C138038 * C138140) * ae) /
                         C137729;
    const double C1745 = (C138204 * (3 * C138227 + C138038 * C138245) +
                          (3 * C138088 + C138038 * C138140) * be) /
                         C137729;
    const double C2078 = (C138204 * (3 * C138351 + C138038 * C138369) +
                          (3 * C138088 + C138038 * C138140) * ae) /
                         C137729;
    const double C2977 = (2 * C138174 + C138038 * C138183 +
                          C138160 * (C138160 * C138201 + C138140 * be) +
                          C138160 * C138140 * be) /
                         C137729;
    const double C3093 = (2 * C138261 + C138038 * C138270 +
                          C138160 * (C138160 * C138288 + C138140 * ae) +
                          C138160 * C138140 * ae) /
                         C137729;
    const double C3523 =
        (C138204 * (C138160 * C138201 + C138140 * be)) / C137729;
    const double C3597 =
        (C138204 * C138160 * C138245 + C138160 * C138140 * be) / C137729;
    const double C3671 =
        (C138204 * (C138160 * C138288 + C138140 * ae)) / C137729;
    const double C3885 =
        (C138204 * C138160 * C138369 + C138160 * C138140 * ae) / C137729;
    const double C5400 = (2 * C138218 + C138038 * C138227 +
                          C138204 * (C138204 * C138245 + C138140 * be) +
                          C138204 * C138140 * be) /
                         C137729;
    const double C5624 = (2 * C138342 + C138038 * C138351 +
                          C138204 * (C138204 * C138369 + C138140 * ae) +
                          C138204 * C138140 * ae) /
                         C137729;
    const double C113 = 4 * (2 * C138059 + C138038 * C138088) +
                        C138038 * (3 * C138088 + C138038 * C138140);
    const double C814 = C138160 * (3 * C138088 + C138038 * C138140);
    const double C1571 = C138204 * (3 * C138088 + C138038 * C138140);
    const double C2911 = 2 * C138059 + C138038 * C138088 + C138140 * C138292;
    const double C3441 = C138204 * C138160 * C138140;
    const double C5276 = 2 * C138059 + C138038 * C138088 + C138140 * C138390;
    const double C8528 =
        (ae * (C138183 + C138160 * C138658 + C138656 * be) +
         C138204 *
             (C138386 + be * C138160 * C138365 +
              C138160 * (be * C138365 +
                         C138160 * (C138384 + std::pow(C138044, 7) * bs[7] *
                                                  C138375 * C138042)))) /
        C137733;
    const double C15399 =
        (be * C138351 + C138160 * C138386 + ae * C138204 * C138658 +
         C138204 *
             (ae * C138658 +
              C138204 * (be * C138365 +
                         C138160 * (C138384 + std::pow(C138044, 7) * bs[7] *
                                                  C138375 * C138042)))) /
        C137733;
    const double C6794 =
        (2 * (C138160 * C138183 + C138088 * be) +
         C138160 * (C138183 + C138160 * C138658 + C138656 * be) +
         (C138088 + C138129 * C138292) * be) /
        C137729;
    const double C7865 =
        (C138204 * (C138183 + C138160 * C138658 + C138656 * be)) / C137729;
    const double C14761 =
        (C138160 * C138183 + C138088 * be + C138658 * C138390) / C137729;
    const double C15914 =
        (2 * (C138204 * C138227 + C138088 * be) +
         C138204 * (C138227 + C138204 * C138919 + C138917 * be) +
         (C138088 + C138129 * C138390) * be) /
        C137729;
    const double C138768 = C138272 + C138766;
    const double C139048 = C138353 + C139046;
    const double C138767 = C138185 + C138765;
    const double C139047 = C138229 + C139045;
    const double C18963 =
        (2 * (C138204 * C138794 + C138644 * ae) +
         C138204 * (C138794 + C138204 * C138960 + C138955 * ae) +
         (C138644 + C138753 * C138390) * ae) /
        C137729;
    const double C18533 =
        (2 * (C138204 * C138778 + C138644 * be) +
         C138204 * (C138778 + C138204 * C138959 + C138955 * be) +
         (C138644 + C138753 * C138390) * be) /
        C137729;
    const double C138149 = C138146 + C138128;
    const double C10743 =
        (2 * (ae * C138204 * C138095 + C138160 * C138813) +
         ae * C138204 * C138729 +
         C138160 *
             (C138813 + ae * C138204 * C138160 * C138139 +
              C138160 * (ae * C138204 * C138139 +
                         C138160 * C138204 *
                             (be * C138279 + C138038 * std::pow(C138044, 7) *
                                                 bs[7] * C138253)))) /
        C137733;
    const double C11065 =
        (ae * (2 * C138725 + C138160 * C138729) +
         C138204 * (2 * C138160 * C138364 +
                    C138160 * (C138364 +
                               (be * C138360 + C138038 * std::pow(C138044, 7) *
                                                   bs[7] * C138334) *
                                   C138292))) /
        C137733;
    const double C13625 =
        (C138350 + C138364 * C138292 + ae * C138204 * C138729 +
         C138204 * (ae * C138729 +
                    C138204 * (C138364 +
                               (be * C138360 + C138038 * std::pow(C138044, 7) *
                                                   bs[7] * C138334) *
                                   C138292))) /
        C137733;
    const double C9613 = (3 * (C138069 + C138095 * C138292) +
                          C138160 * (2 * C138725 + C138160 * C138729)) /
                         C137729;
    const double C10398 =
        (C138204 * (2 * C138725 + C138160 * C138729)) / C137729;
    const double C13136 =
        (C138069 + C138095 * C138292 + C138729 * C138390) / C137729;
    const double C21016 = (3 * (C138069 + C138095 * C138390) +
                           C138204 * (2 * C138996 + C138204 * C139000)) /
                          C137729;
    const double C139107 = C139104 + C139092;
    const double C67086 = (3 * (C138652 + C138738 * C138390) +
                           C138204 * (2 * C139226 + C138204 * C139230)) /
                          C137729;
    const double C139323 = C139321 + C139313;
    const double C138148 = C138038 * C138145;
    const double C138421 = C138420 + C138419;
    const double C18309 =
        (ae * (2 * C138204 * C138414 +
               C138204 * (C138414 + C138160 * C138127 * C138390)) +
         be * (2 * C138204 * C138415 +
               C138204 * (C138415 + C138160 * C138130 * C138390)) +
         C138038 * (2 * C138558 +
                    C138204 * (C138416 +
                               C138160 *
                                   (C138111 * C138112 +
                                    C138042 * bs[7] * std::pow(C138044, 7)) *
                                   C137731 * C138390))) /
        C137733;
    const double C67004 =
        (3 * (C138409 + C138416 * C138390) +
         C138204 * (2 * C138558 +
                    C138204 * (C138416 +
                               C138160 *
                                   (C138111 * C138112 +
                                    C138042 * bs[7] * std::pow(C138044, 7)) *
                                   C137731 * C138390))) /
        C137733;
    const double C26149 = C21777 * C3452;
    const double C38065 = C139736 * C3452;
    const double C51486 = C47133 * C3452;
    const double C76368 = C139736 * C3452;
    const double C18318 = C139736 * C13139;
    const double C60678 = C139731 * C13139;
    const double C80881 = C139736 * C13139;
    const double C64252 = C139731 * C18308;
    const double C138475 = C138474 + C138473;
    const double C6635 =
        (ae *
             (2 * C138160 * C138063 + C138160 * (C138063 + C138086 * C138292)) +
         be *
             (2 * C138160 * C138064 + C138160 * (C138064 + C138089 * C138292)) +
         C138038 * (2 * C138409 + C138160 * C138521)) /
        C137733;
    const double C6637 =
        (2 * C138409 + C138160 * C138521 +
         ae *
             (2 * C138160 * C138095 + C138160 * (C138095 + C138139 * C138292)) +
         be *
             (2 * C138160 * C138096 + C138160 * (C138096 + C138141 * C138292)) +
         C138038 *
             (ae * (2 * C138414 + C138160 * (C138086 + C138127 * C138292)) +
              be * (2 * C138415 + C138160 * (C138089 + C138130 * C138292)) +
              C138038 * (2 * C138416 +
                         C138160 * (C138138 +
                                    (C138111 * C138112 +
                                     C138042 * bs[7] * std::pow(C138044, 7)) *
                                        C137731 * C138292)))) /
        C137733;
    const double C7762 = (ae * C138204 * (C138063 + C138086 * C138292) +
                          be * C138204 * (C138064 + C138089 * C138292) +
                          C138038 * C138204 * C138521) /
                         C137733;
    const double C7764 =
        (C138204 * C138521 + ae * C138204 * (C138095 + C138139 * C138292) +
         be * C138204 * (C138096 + C138141 * C138292) +
         C138038 * (ae * C138204 * (C138086 + C138127 * C138292) +
                    be * C138204 * (C138089 + C138130 * C138292) +
                    C138038 * C138204 *
                        (C138138 + (C138111 * C138112 +
                                    C138042 * bs[7] * std::pow(C138044, 7)) *
                                       C137731 * C138292))) /
        C137733;
    const double C9615 = (3 * (C138068 + C138094 * C138292) +
                          C138160 * (2 * C138409 + C138160 * C138521)) /
                         C137733;
    const double C9616 =
        (ae * (3 * (C138063 + C138086 * C138292) +
               C138160 *
                   (2 * C138414 + C138160 * (C138086 + C138127 * C138292))) +
         be * (3 * (C138064 + C138089 * C138292) +
               C138160 *
                   (2 * C138415 + C138160 * (C138089 + C138130 * C138292))) +
         C138038 * (3 * C138521 +
                    C138160 * (2 * C138416 +
                               C138160 * (C138138 + (C138111 * C138112 +
                                                     C138042 * bs[7] *
                                                         std::pow(C138044, 7)) *
                                                        C137731 * C138292)))) /
        C137733;
    const double C10400 =
        (C138204 * (2 * C138409 + C138160 * C138521)) / C137733;
    const double C13140 =
        (C138068 + C138094 * C138292 + C138521 * C138390) / C137733;
    const double C13141 =
        (ae * (C138723 + (C138086 + C138127 * C138292) * C138390) +
         be * (C138709 + (C138089 + C138130 * C138292) * C138390) +
         C138038 *
             (C138521 + (C138138 + (C138111 * C138112 +
                                    C138042 * bs[7] * std::pow(C138044, 7)) *
                                       C137731 * C138292) *
                            C138390)) /
        C137733;
    const double C57119 =
        (4 * (2 * C138409 + C138160 * C138521) +
         C138160 * (3 * C138521 +
                    C138160 * (2 * C138416 +
                               C138160 * (C138138 + (C138111 * C138112 +
                                                     C138042 * bs[7] *
                                                         std::pow(C138044, 7)) *
                                                        C137731 * C138292)))) /
        C137733;
    const double C57649 =
        (C138204 * (3 * C138521 +
                    C138160 * (2 * C138416 +
                               C138160 * (C138138 + (C138111 * C138112 +
                                                     C138042 * bs[7] *
                                                         std::pow(C138044, 7)) *
                                                        C137731 * C138292)))) /
        C137733;
    const double C59486 =
        (2 * C138409 + C138160 * C138521 +
         (2 * C138416 +
          C138160 * (C138138 + (C138111 * C138112 +
                                C138042 * bs[7] * std::pow(C138044, 7)) *
                                   C137731 * C138292)) *
             C138390) /
        C137733;
    const double C64247 =
        (2 * C138204 * C138521 +
         C138204 *
             (C138521 + (C138138 + (C138111 * C138112 +
                                    C138042 * bs[7] * std::pow(C138044, 7)) *
                                       C137731 * C138292) *
                            C138390)) /
        C137733;
    const double C15631 =
        (ae *
             (2 * C138204 * C138063 + C138204 * (C138063 + C138086 * C138390)) +
         be *
             (2 * C138204 * C138064 + C138204 * (C138064 + C138089 * C138390)) +
         C138038 * (2 * C138463 + C138204 * C138596)) /
        C137733;
    const double C15633 =
        (2 * C138463 + C138204 * C138596 +
         ae *
             (2 * C138204 * C138095 + C138204 * (C138095 + C138139 * C138390)) +
         be *
             (2 * C138204 * C138096 + C138204 * (C138096 + C138141 * C138390)) +
         C138038 *
             (ae * (2 * C138468 + C138204 * (C138086 + C138127 * C138390)) +
              be * (2 * C138469 + C138204 * (C138089 + C138130 * C138390)) +
              C138038 * (2 * C138470 +
                         C138204 * (C138138 +
                                    (C138111 * C138112 +
                                     C138042 * bs[7] * std::pow(C138044, 7)) *
                                        C137731 * C138390)))) /
        C137733;
    const double C21018 = (3 * (C138068 + C138094 * C138390) +
                           C138204 * (2 * C138463 + C138204 * C138596)) /
                          C137733;
    const double C21019 =
        (ae * (3 * (C138063 + C138086 * C138390) +
               C138204 *
                   (2 * C138468 + C138204 * (C138086 + C138127 * C138390))) +
         be * (3 * (C138064 + C138089 * C138390) +
               C138204 *
                   (2 * C138469 + C138204 * (C138089 + C138130 * C138390))) +
         C138038 * (3 * C138596 +
                    C138204 * (2 * C138470 +
                               C138204 * (C138138 + (C138111 * C138112 +
                                                     C138042 * bs[7] *
                                                         std::pow(C138044, 7)) *
                                                        C137731 * C138390)))) /
        C137733;
    const double C112513 =
        (4 * (2 * C138463 + C138204 * C138596) +
         C138204 * (3 * C138596 +
                    C138204 * (2 * C138470 +
                               C138204 * (C138138 + (C138111 * C138112 +
                                                     C138042 * bs[7] *
                                                         std::pow(C138044, 7)) *
                                                        C137731 * C138390)))) /
        C137733;
    const double C416 =
        (4 * (2 * C138038 * C138302 + C138038 * C138309) +
         C138038 * (3 * C138309 +
                    C138038 * (2 * C138038 * C138307 +
                               C138038 * (C138307 + (C138111 * C138112 +
                                                     C138292 * bs[7] *
                                                         std::pow(C138044, 7)) *
                                                        C137731 * C138042)))) /
        C137733;
    const double C1148 =
        (ae * (2 * C138174 + C138038 * C138183) +
         be * (2 * C138261 + C138038 * C138270) +
         C138160 * (2 * C138038 * C138302 + C138038 * C138309)) /
        C137733;
    const double C1152 =
        (ae * (3 * C138183 + C138038 * C138201) +
         be * (3 * C138270 + C138038 * C138288) +
         C138160 * (3 * C138309 +
                    C138038 * (2 * C138038 * C138307 +
                               C138038 * (C138307 + (C138111 * C138112 +
                                                     C138292 * bs[7] *
                                                         std::pow(C138044, 7)) *
                                                        C137731 * C138042)))) /
        C137733;
    const double C1905 =
        (C138204 * (2 * C138038 * C138302 + C138038 * C138309)) / C137733;
    const double C1909 =
        (C138204 * (3 * C138309 +
                    C138038 * (2 * C138038 * C138307 +
                               C138038 * (C138307 + (C138111 * C138112 +
                                                     C138292 * bs[7] *
                                                         std::pow(C138044, 7)) *
                                                        C137731 * C138042)))) /
        C137733;
    const double C3150 =
        (C138297 + C138302 * C138042 + ae * (C138160 * C138183 + C138088 * be) +
         be * (C138160 * C138270 + C138088 * ae) +
         C138160 * (ae * C138183 + be * C138270 + C138160 * C138309)) /
        C137733;
    const double C3151 =
        (2 * C138038 * C138302 + C138038 * C138309 +
         ae * (C138160 * C138201 + C138140 * be) +
         be * (C138160 * C138288 + C138140 * ae) +
         C138160 * (ae * C138201 + be * C138288 +
                    C138160 * (2 * C138038 * C138307 +
                               C138038 * (C138307 + (C138111 * C138112 +
                                                     C138292 * bs[7] *
                                                         std::pow(C138044, 7)) *
                                                        C137731 * C138042)))) /
        C137733;
    const double C3744 = (ae * C138204 * C138183 + be * C138204 * C138270 +
                          C138160 * C138204 * C138309) /
                         C137733;
    const double C5515 =
        (C138297 + C138302 * C138042 + C138309 * C138390) / C137733;
    const double C5516 =
        (2 * C138038 * C138302 + C138038 * C138309 +
         (2 * C138038 * C138307 +
          C138038 * (C138307 + (C138111 * C138112 +
                                C138292 * bs[7] * std::pow(C138044, 7)) *
                                   C137731 * C138042)) *
             C138390) /
        C137733;
    const double C7170 =
        (2 * (ae * C138183 + be * C138270 + C138160 * C138309) +
         ae * (C138183 + C138160 * C138658 + C138656 * be) +
         be * (C138270 + C138160 * C138659 + C138656 * ae) +
         C138160 * (C138309 + ae * C138658 + be * C138659 +
                    C138160 * (ae * C138197 + be * C138284 +
                               C138160 * (C138307 + (C138111 * C138112 +
                                                     C138292 * bs[7] *
                                                         std::pow(C138044, 7)) *
                                                        C137731 * C138042)))) /
        C137733;
    const double C8197 =
        (C138204 * C138309 + ae * C138204 * C138658 + be * C138204 * C138659 +
         C138160 * (ae * C138204 * C138197 + be * C138204 * C138284 +
                    C138160 * C138204 *
                        (C138307 + (C138111 * C138112 +
                                    C138292 * bs[7] * std::pow(C138044, 7)) *
                                       C137731 * C138042))) /
        C137733;
    const double C15081 =
        (ae * (C138183 + C138197 * C138390) +
         be * (C138270 + C138284 * C138390) +
         C138160 *
             (C138309 + (C138307 + (C138111 * C138112 +
                                    C138292 * bs[7] * std::pow(C138044, 7)) *
                                       C137731 * C138042) *
                            C138390)) /
        C137733;
    const double C16166 =
        (2 * C138204 * C138309 +
         C138204 *
             (C138309 + (C138307 + (C138111 * C138112 +
                                    C138292 * bs[7] * std::pow(C138044, 7)) *
                                       C137731 * C138042) *
                            C138390)) /
        C137733;
    const double C138762 = C138750 + C138756;
    const double C18745 =
        (ae *
             (2 * C138204 * C138185 + C138204 * (C138185 + C138752 * C138390)) +
         be *
             (2 * C138204 * C138272 + C138204 * (C138272 + C138755 * C138390)) +
         C138160 * (2 * C138817 +
                    C138204 * (C138751 +
                               C138038 *
                                   (C138111 * C138112 +
                                    C138292 * bs[7] * std::pow(C138044, 7)) *
                                   C137731 * C138390))) /
        C137733;
    const double C21374 =
        (3 * (C138642 + C138751 * C138390) +
         C138204 * (2 * C138817 +
                    C138204 * (C138751 +
                               C138038 *
                                   (C138111 * C138112 +
                                    C138292 * bs[7] * std::pow(C138044, 7)) *
                                   C137731 * C138390))) /
        C137733;
    const double C139097 = C138160 * C139090;
    const double C139160 = C139159 + C139158;
    const double C64696 =
        (2 * C138815 + C138204 * C139178 +
         ae *
             (2 * C138204 * C138738 + C138204 * (C138738 + C139091 * C138390)) +
         be *
             (2 * C138204 * C138741 + C138204 * (C138741 + C139094 * C138390)) +
         C138160 *
             (ae * (2 * C139153 + C138204 * (C138179 + C138192 * C138390)) +
              be * (2 * C139154 + C138204 * (C138266 + C138279 * C138390)) +
              C138160 * (2 * C139155 +
                         C138204 * (C138307 +
                                    (C138111 * C138112 +
                                     C138292 * bs[7] * std::pow(C138044, 7)) *
                                        C137731 * C138390)))) /
        C137733;
    const double C67344 =
        (ae * (3 * C139006 +
               C138204 *
                   (2 * C139153 + C138204 * (C138179 + C138192 * C138390))) +
         be * (3 * C138984 +
               C138204 *
                   (2 * C139154 + C138204 * (C138266 + C138279 * C138390))) +
         C138160 * (3 * C139178 +
                    C138204 * (2 * C139155 +
                               C138204 * (C138307 + (C138111 * C138112 +
                                                     C138292 * bs[7] *
                                                         std::pow(C138044, 7)) *
                                                        C137731 * C138390)))) /
        C137733;
    const double C112751 =
        (4 * (2 * C138815 + C138204 * C139178) +
         C138204 * (3 * C139178 +
                    C138204 * (2 * C139155 +
                               C138204 * (C138307 + (C138111 * C138112 +
                                                     C138292 * bs[7] *
                                                         std::pow(C138044, 7)) *
                                                        C137731 * C138390)))) /
        C137733;
    const double C707 =
        (4 * (2 * C138038 * C138400 + C138038 * C138407) +
         C138038 * (3 * C138407 +
                    C138038 * (2 * C138038 * C138405 +
                               C138038 * (C138405 + (C138111 * C138112 +
                                                     C138390 * bs[7] *
                                                         std::pow(C138044, 7)) *
                                                        C137731 * C138042)))) /
        C137733;
    const double C1470 =
        (C138160 * (2 * C138038 * C138400 + C138038 * C138407)) / C137733;
    const double C1474 =
        (C138160 * (3 * C138407 +
                    C138038 * (2 * C138038 * C138405 +
                               C138038 * (C138405 + (C138111 * C138112 +
                                                     C138390 * bs[7] *
                                                         std::pow(C138044, 7)) *
                                                        C137731 * C138042)))) /
        C137733;
    const double C2227 =
        (ae * (2 * C138218 + C138038 * C138227) +
         be * (2 * C138342 + C138038 * C138351) +
         C138204 * (2 * C138038 * C138400 + C138038 * C138407)) /
        C137733;
    const double C2231 =
        (ae * (3 * C138227 + C138038 * C138245) +
         be * (3 * C138351 + C138038 * C138369) +
         C138204 * (3 * C138407 +
                    C138038 * (2 * C138038 * C138405 +
                               C138038 * (C138405 + (C138111 * C138112 +
                                                     C138390 * bs[7] *
                                                         std::pow(C138044, 7)) *
                                                        C137731 * C138042)))) /
        C137733;
    const double C3370 =
        (C138395 + C138400 * C138042 + C138407 * C138292) / C137733;
    const double C3371 =
        (2 * C138038 * C138400 + C138038 * C138407 +
         (2 * C138038 * C138405 +
          C138038 * (C138405 + (C138111 * C138112 +
                                C138390 * bs[7] * std::pow(C138044, 7)) *
                                   C137731 * C138042)) *
             C138292) /
        C137733;
    const double C4028 = (ae * C138160 * C138227 + be * C138160 * C138351 +
                          C138204 * C138160 * C138407) /
                         C137733;
    const double C5735 =
        (C138395 + C138400 * C138042 + ae * (C138204 * C138227 + C138088 * be) +
         be * (C138204 * C138351 + C138088 * ae) +
         C138204 * (ae * C138227 + be * C138351 + C138204 * C138407)) /
        C137733;
    const double C5736 =
        (2 * C138038 * C138400 + C138038 * C138407 +
         ae * (C138204 * C138245 + C138140 * be) +
         be * (C138204 * C138369 + C138140 * ae) +
         C138204 * (ae * C138245 + be * C138369 +
                    C138204 * (2 * C138038 * C138405 +
                               C138038 * (C138405 + (C138111 * C138112 +
                                                     C138390 * bs[7] *
                                                         std::pow(C138044, 7)) *
                                                        C137731 * C138042)))) /
        C137733;
    const double C7630 =
        (2 * C138160 * C138407 +
         C138160 *
             (C138407 + (C138405 + (C138111 * C138112 +
                                    C138390 * bs[7] * std::pow(C138044, 7)) *
                                       C137731 * C138042) *
                            C138292)) /
        C137733;
    const double C8635 =
        (ae * (C138227 + C138241 * C138292) +
         be * (C138351 + C138365 * C138292) +
         C138204 *
             (C138407 + (C138405 + (C138111 * C138112 +
                                    C138390 * bs[7] * std::pow(C138044, 7)) *
                                       C137731 * C138042) *
                            C138292)) /
        C137733;
    const double C15502 =
        (C138160 * C138407 + ae * (C138204 * C138877 + C138656 * be) +
         be * (C138204 * C138878 + C138656 * ae) +
         C138204 * (ae * C138877 + be * C138878 +
                    C138204 * C138160 *
                        (C138405 + (C138111 * C138112 +
                                    C138390 * bs[7] * std::pow(C138044, 7)) *
                                       C137731 * C138042))) /
        C137733;
    const double C16634 =
        (2 * (ae * C138227 + be * C138351 + C138204 * C138407) +
         ae * (C138227 + C138204 * C138919 + C138917 * be) +
         be * (C138351 + C138204 * C138920 + C138917 * ae) +
         C138204 * (C138407 + ae * C138919 + be * C138920 +
                    C138204 * (ae * C138241 + be * C138365 +
                               C138204 * (C138405 + (C138111 * C138112 +
                                                     C138390 * bs[7] *
                                                         std::pow(C138044, 7)) *
                                                        C137731 * C138042)))) /
        C137733;
    const double C19173 =
        (2 * (ae * C138778 + be * C138794 + C138204 * C138953) +
         ae * (C138778 + C138204 * C138959 + C138955 * be) +
         be * (C138794 + C138204 * C138960 + C138955 * ae) +
         C138204 * (C138953 + ae * C138959 + be * C138960 +
                    C138204 * (ae * C138954 + be * C138956 +
                               C138204 * C138160 * C138038 *
                                   (C138111 * C138112 +
                                    C138390 * bs[7] * std::pow(C138044, 7)) *
                                   C137731))) /
        C137733;
    const double C139039 = C139033 + C139034;
    const double C57572 =
        (4 * (2 * C138944 + C138160 * C139144) +
         C138160 * (3 * C139144 +
                    C138160 * (2 * C138160 * C138405 +
                               C138160 * (C138405 + (C138111 * C138112 +
                                                     C138390 * bs[7] *
                                                         std::pow(C138044, 7)) *
                                                        C137731 * C138292)))) /
        C137733;
    const double C58237 =
        (ae * (3 * C138776 + C138160 * C139126) +
         be * (3 * C138792 + C138160 * C139141) +
         C138204 * (3 * C139144 +
                    C138160 * (2 * C138160 * C138405 +
                               C138160 * (C138405 + (C138111 * C138112 +
                                                     C138390 * bs[7] *
                                                         std::pow(C138044, 7)) *
                                                        C137731 * C138292)))) /
        C137733;
    const double C139244 = C139232 + C139238;
    const double C139317 = C138204 * C139311;
    const double C64928 =
        (2 * (C138204 * C138792 + C138740 * ae) +
         C138204 * (C138792 + C138204 * C139199 + C139196 * ae) +
         (C138740 + C139093 * C138390) * ae) /
        C137729;
    const double C59898 =
        (2 * C138944 + C138160 * C139144 +
         ae * (C138204 * C139126 + C139105 * be) +
         be * (C138204 * C139141 + C139105 * ae) +
         C138204 * (ae * C139126 + be * C139141 +
                    C138204 * (2 * C138160 * C138405 +
                               C138160 * (C138405 + (C138111 * C138112 +
                                                     C138390 * bs[7] *
                                                         std::pow(C138044, 7)) *
                                                        C137731 * C138292)))) /
        C137733;
    const double C57808 = (C138204 * (3 * C138776 + C138160 * C139126) +
                           (3 * C138740 + C138160 * C139105) * be) /
                          C137729;
    const double C58096 = (C138204 * (3 * C138792 + C138160 * C139141) +
                           (3 * C138740 + C138160 * C139105) * ae) /
                          C137729;
    const double C59589 = (2 * C138772 + C138160 * C138776 +
                           C138204 * (C138204 * C139126 + C139105 * be) +
                           C138204 * C139105 * be) /
                          C137729;
    const double C59795 = (2 * C138788 + C138160 * C138792 +
                           C138204 * (C138204 * C139141 + C139105 * ae) +
                           C138204 * C139105 * ae) /
                          C137729;
    const double C57116 = 4 * (2 * C138650 + C138160 * C138740) +
                          C138160 * (3 * C138740 + C138160 * C139105);
    const double C57646 = C138204 * (3 * C138740 + C138160 * C139105);
    const double C59483 = 2 * C138650 + C138160 * C138740 + C139105 * C138390;
    const double C65141 =
        (2 * (ae * C138776 + be * C138792 + C138204 * C139144) +
         ae * (C138776 + C138204 * C139198 + C139196 * be) +
         be * (C138792 + C138204 * C139199 + C139196 * ae) +
         C138204 * (C139144 + ae * C139198 + be * C139199 +
                    C138204 * (ae * C139122 + be * C139137 +
                               C138204 * (C138405 + (C138111 * C138112 +
                                                     C138390 * bs[7] *
                                                         std::pow(C138044, 7)) *
                                                        C137731 * C138292)))) /
        C137733;
    const double C64472 =
        (2 * (C138204 * C138776 + C138740 * be) +
         C138204 * (C138776 + C138204 * C139198 + C139196 * be) +
         (C138740 + C139093 * C138390) * be) /
        C137729;
    const double C139250 = C138947 + C139248;
    const double C139249 = C138945 + C139247;
    const double C112510 = 4 * (2 * C138911 + C138204 * C139023) +
                           C138204 * (3 * C139023 + C138204 * C139314);
    const double C437 = C430 - C431;
    const double C1166 = C1154 - C1155;
    const double C1923 = C1911 - C1912;
    const double C30687 = C30683 - C30684;
    const double C14200 = C14195 - C14196;
    const double C8535 = C5815 * C8527;
    const double C39061 = C139873 * C8527;
    const double C70288 = C67750 * C8527;
    const double C77322 = C139873 * C8527;
    const double C6804 = C5815 * C6793;
    const double C7172 = C5896 * C6793;
    const double C68695 = C67750 * C6793;
    const double C69028 = C67831 * C6793;
    const double C7875 = C5815 * C7864;
    const double C8199 = C5896 * C7864;
    const double C38205 = C139873 * C7864;
    const double C38636 = C21861 * C7864;
    const double C69667 = C67750 * C7864;
    const double C69968 = C67831 * C7864;
    const double C76508 = C139873 * C7864;
    const double C76911 = C47217 * C7864;
    const double C14769 = C139824 * C13218;
    const double C15083 = C182 * C13218;
    const double C39501 = C139873 * C13218;
    const double C39917 = C21861 * C13218;
    const double C61775 = C139873 * C13218;
    const double C62110 = C47217 * C13218;
    const double C16191 = C16188 - C16180;
    const double C138747 = C138745 + C138739;
    const double C139096 = C139089 + C139079;
    const double C111003 = C110999 - C111000;
    const double C112757 = C112753 - C112754;
    const double C728 = C721 - C722;
    const double C1488 = C1476 - C1477;
    const double C2245 = C2233 - C2234;
    const double C6522 = C6515 - C6516;
    const double C24457 = C24450 - C24451;
    const double C15924 = C13858 * C15913;
    const double C16636 = C14017 * C15913;
    const double C124671 = C122759 * C15913;
    const double C125292 = C122910 * C15913;
    const double C7651 = C7648 - C7642;
    const double C8648 = C8646 - C8639;
    const double C57578 = C57574 - C57575;
    const double C58243 = C58239 - C58240;
    const double C64480 = C13858 * C18532;
    const double C65143 = C14017 * C18532;
    const double C134601 = C122759 * C18532;
    const double C135220 = C122910 * C18532;
    const double C139030 = C139028 + C139022;
    const double C139310 = C139297 + C139298;
    const double C7174 = C5896 * C7033;
    const double C7302 = C265 * C7033;
    const double C9891 = C5818 * C7033;
    const double C55535 = C54790 * C7033;
    const double C69030 = C67831 * C7033;
    const double C71601 = C137748 * C7033;
    const double C8201 = C5896 * C8092;
    const double C8323 = C265 * C8092;
    const double C10759 = C5818 * C8092;
    const double C38638 = C21861 * C8092;
    const double C38790 = C29625 * C8092;
    const double C69970 = C67831 * C8092;
    const double C72419 = C137748 * C8092;
    const double C76913 = C47217 * C8092;
    const double C86286 = C54790 * C8092;
    const double C101648 = C92948 * C8092;
    const double C15085 = C182 * C13381;
    const double C15200 = C14017 * C13381;
    const double C18645 = C5818 * C13381;
    const double C39919 = C21861 * C13381;
    const double C40070 = C29625 * C13381;
    const double C61007 = C54790 * C13381;
    const double C62112 = C47217 * C13381;
    const double C81297 = C137748 * C13381;
    const double C115834 = C92948 * C13381;
    const double C124041 = C122910 * C13381;
    const double C138748 = C138746 + C138742;
    const double C7175 = C5815 * C7168;
    const double C69031 = C67750 * C7168;
    const double C8202 = C5815 * C8195;
    const double C38639 = C139873 * C8195;
    const double C69971 = C67750 * C8195;
    const double C76914 = C139873 * C8195;
    const double C15086 = C139824 * C13464;
    const double C39920 = C139873 * C13464;
    const double C62113 = C139873 * C13464;
    const double C16181 = C139824 * C16164;
    const double C67350 = C139873 * C18744;
    const double C111002 = C139824 * C18744;
    const double C137403 = C139873 * C18744;
    const double C112756 = C139824 * C21373;
    const double C1173 = C1170 + C1161;
    const double C1930 = C1927 + C1918;
    const double C21384 = C21383 + C21381;
    const double C16533 = C182 * C16402;
    const double C16638 = C14017 * C16402;
    const double C21544 = C5818 * C16402;
    const double C109485 = C54790 * C16402;
    const double C125294 = C122910 * C16402;
    const double C130075 = C137748 * C16402;
    const double C64935 = C54790 * C18962;
    const double C65145 = C14017 * C18962;
    const double C67595 = C47217 * C18962;
    const double C111205 = C182 * C18962;
    const double C135222 = C122910 * C18962;
    const double C137641 = C21861 * C18962;
    const double C139031 = C139029 + C139025;
    const double C7643 = C139835 * C7628;
    const double C8640 = C139835 * C8633;
    const double C39204 = C139899 * C8633;
    const double C101967 = C139899 * C8633;
    const double C15507 = C13858 * C13780;
    const double C40479 = C139899 * C13780;
    const double C116229 = C139899 * C13780;
    const double C124340 = C122759 * C13780;
    const double C16639 = C13858 * C16632;
    const double C125295 = C122759 * C16632;
    const double C65146 = C13858 * C19172;
    const double C135223 = C122759 * C19172;
    const double C1495 = C1492 + C1483;
    const double C2252 = C2249 + C2240;
    const double C10296 = C10295 + C10293;
    const double C11287 = C11285 + C11278;
    const double C112582 = C112574 + C112575;
    const double C21890 = C21877 - C21878;
    const double C47246 = C47233 - C47234;
    const double C29550 = C1671 - C1670;
    const double C31359 = C1670 - C1671;
    const double C39497 = C23712 - C23713;
    const double C39493 = C23713 - C23712;
    const double C77748 = C49062 - C49063;
    const double C77744 = C49063 - C49062;
    const double C15810 = C13937 - C13936;
    const double C15806 = C13936 - C13937;
    const double C137156 = C46353 - C46352;
    const double C67092 = C61770 - C61771;
    const double C112585 = C112583 + C112584;
    const double C194 =
        (4 * (2 * C138182 + ae * C138183 + C138038 * C138200) +
         ae * (3 * C138183 + C138038 * C138201) +
         C138038 *
             (3 * C138200 + ae * C138201 +
              C138038 * (2 * C138196 + ae * C138197 +
                         C138038 * (C138190 + ae * C138038 * C138192 +
                                    C138038 * (ae * C138192 +
                                               C138038 * std::pow(C138044, 7) *
                                                   bs[7] * C138166))))) /
        C137733;
    const double C1661 =
        (C138204 * (2 * C138182 + ae * C138183 + C138038 * C138200)) / C137733;
    const double C1662 =
        (C138204 *
         (3 * C138200 + ae * C138201 +
          C138038 * (2 * C138196 + ae * C138197 +
                     C138038 * (C138190 + ae * C138038 * C138192 +
                                C138038 * (ae * C138192 +
                                           C138038 * std::pow(C138044, 7) *
                                               bs[7] * C138166))))) /
        C137733;
    const double C5345 =
        (C138171 + ae * C138174 + C138038 * C138182 + C138200 * C138390) /
        C137733;
    const double C5346 =
        (2 * C138182 + ae * C138183 + C138038 * C138200 +
         (2 * C138196 + ae * C138197 +
          C138038 * (C138190 + ae * C138038 * C138192 +
                     C138038 * (ae * C138192 + C138038 * std::pow(C138044, 7) *
                                                   bs[7] * C138166))) *
             C138390) /
        C137733;
    const double C15793 =
        (2 * C138204 * C138200 +
         C138204 * (C138200 +
                    (C138190 + ae * C138752 +
                     C138038 * (ae * C138192 + C138038 * std::pow(C138044, 7) *
                                                   bs[7] * C138166)) *
                        C138390)) /
        C137733;
    const double C9710 =
        (3 * (C138182 + be * C138711 + C138160 * C138714) +
         be * (2 * C138711 + C138160 * C138715) +
         C138160 *
             (2 * C138714 + be * C138715 +
              C138160 * (C138196 + be * C138160 * C138141 +
                         C138160 * (be * C138141 +
                                    C138160 * (ae * C138192 +
                                               C138038 * std::pow(C138044, 7) *
                                                   bs[7] * C138166))))) /
        C137733;
    const double C10531 =
        (C138204 *
         (2 * C138714 + be * C138715 +
          C138160 * (C138196 + be * C138160 * C138141 +
                     C138160 * (be * C138141 +
                                C138160 * (ae * C138192 +
                                           C138038 * std::pow(C138044, 7) *
                                               bs[7] * C138166))))) /
        C137733;
    const double C13222 =
        (be * C138070 + C138160 * C138182 + C138714 * C138390) / C137733;
    const double C13223 =
        (C138182 + be * C138711 + C138160 * C138714 +
         (C138196 + be * C138160 * C138141 +
          C138160 * (be * C138141 +
                     C138160 * (ae * C138192 + C138038 * std::pow(C138044, 7) *
                                                   bs[7] * C138166))) *
             C138390) /
        C137733;
    const double C18425 =
        (2 * C138204 * C138714 +
         C138204 * (C138714 +
                    (be * C138141 +
                     C138160 * (ae * C138192 + C138038 * std::pow(C138044, 7) *
                                                   bs[7] * C138166)) *
                        C138390)) /
        C137733;
    const double C57179 =
        (4 * (2 * C138708 + be * C138709 + C138160 * C139061) +
         be * (3 * C138709 + C138160 * C139062) +
         C138160 *
             (3 * C139061 + be * C139062 +
              C138160 * (2 * C139057 + be * C139058 +
                         C138160 * (C138190 + be * C138160 * C138130 +
                                    C138160 * (be * C138130 +
                                               C138160 * std::pow(C138044, 7) *
                                                   bs[7] * C138166))))) /
        C137733;
    const double C57741 =
        (C138204 *
         (3 * C139061 + be * C139062 +
          C138160 * (2 * C139057 + be * C139058 +
                     C138160 * (C138190 + be * C138160 * C138130 +
                                C138160 * (be * C138130 +
                                           C138160 * std::pow(C138044, 7) *
                                               bs[7] * C138166))))) /
        C137733;
    const double C59538 =
        (2 * C138708 + be * C138709 + C138160 * C139061 +
         (2 * C139057 + be * C139058 +
          C138160 * (C138190 + be * C138160 * C138130 +
                     C138160 * (be * C138130 + C138160 * std::pow(C138044, 7) *
                                                   bs[7] * C138166))) *
             C138390) /
        C137733;
    const double C64357 =
        (2 * C138204 * C139061 +
         C138204 * (C139061 +
                    (C138190 + be * C138160 * C138130 +
                     C138160 * (be * C138130 + C138160 * std::pow(C138044, 7) *
                                                   bs[7] * C138166)) *
                        C138390)) /
        C137733;
    const double C9884 = C7053 - C7054;
    const double C71594 = C68912 - C68913;
    const double C43113 = C10751 - C10752;
    const double C43109 = C10752 - C10751;
    const double C81290 = C72411 - C72412;
    const double C81286 = C72412 - C72411;
    const double C21286 = C16049 - C16050;
    const double C129832 = C84716 - C84715;
    const double C359 =
        (4 * (2 * C138269 + be * C138270 + C138038 * C138287) +
         be * (3 * C138270 + C138038 * C138288) +
         C138038 *
             (3 * C138287 + be * C138288 +
              C138038 * (2 * C138283 + be * C138284 +
                         C138038 * (C138277 + be * C138038 * C138279 +
                                    C138038 * (be * C138279 +
                                               C138038 * std::pow(C138044, 7) *
                                                   bs[7] * C138253))))) /
        C137733;
    const double C1837 =
        (C138204 * (2 * C138269 + be * C138270 + C138038 * C138287)) / C137733;
    const double C1838 =
        (C138204 *
         (3 * C138287 + be * C138288 +
          C138038 * (2 * C138283 + be * C138284 +
                     C138038 * (C138277 + be * C138038 * C138279 +
                                C138038 * (be * C138279 +
                                           C138038 * std::pow(C138044, 7) *
                                               bs[7] * C138253))))) /
        C137733;
    const double C5461 =
        (C138258 + be * C138261 + C138038 * C138269 + C138287 * C138390) /
        C137733;
    const double C5462 =
        (2 * C138269 + be * C138270 + C138038 * C138287 +
         (2 * C138283 + be * C138284 +
          C138038 * (C138277 + be * C138038 * C138279 +
                     C138038 * (be * C138279 + C138038 * std::pow(C138044, 7) *
                                                   bs[7] * C138253))) *
             C138390) /
        C137733;
    const double C16033 =
        (2 * C138204 * C138287 +
         C138204 * (C138287 +
                    (C138277 + be * C138755 +
                     C138038 * (be * C138279 + C138038 * std::pow(C138044, 7) *
                                                   bs[7] * C138253)) *
                        C138390)) /
        C137733;
    const double C9879 =
        (3 * (C138269 + ae * C138725 + C138160 * C138728) +
         ae * (2 * C138725 + C138160 * C138729) +
         C138160 *
             (2 * C138728 + ae * C138729 +
              C138160 * (C138283 + ae * C138160 * C138139 +
                         C138160 * (ae * C138139 +
                                    C138160 * (be * C138279 +
                                               C138038 * std::pow(C138044, 7) *
                                                   bs[7] * C138253))))) /
        C137733;
    const double C57295 =
        (4 * (2 * C138722 + ae * C138723 + C138160 * C139075) +
         ae * (3 * C138723 + C138160 * C139076) +
         C138160 *
             (3 * C139075 + ae * C139076 +
              C138160 * (2 * C139071 + ae * C139072 +
                         C138160 * (C138277 + ae * C138160 * C138127 +
                                    C138160 * (ae * C138127 +
                                               C138160 * std::pow(C138044, 7) *
                                                   bs[7] * C138253))))) /
        C137733;
    const double C57241 = C57233 + C57234;
    const double C21968 = C1002 - C1001;
    const double C22844 = C1001 - C1002;
    const double C29654 = C29641 - C29642;
    const double C92977 = C92964 - C92965;
    const double C6930 = C5999 - C5998;
    const double C6926 = C5998 - C5999;
    const double C38355 = C30477 - C30478;
    const double C38351 = C30478 - C30477;
    const double C114251 = C93795 - C93796;
    const double C114247 = C93796 - C93795;
    const double C57244 = C57242 + C57243;
    const double C277 =
        (4 * (2 * C138226 + ae * C138227 + C138038 * C138244) +
         ae * (3 * C138227 + C138038 * C138245) +
         C138038 *
             (3 * C138244 + ae * C138245 +
              C138038 * (2 * C138240 + ae * C138241 +
                         C138038 * (C138234 + ae * C138038 * C138236 +
                                    C138038 * (ae * C138236 +
                                               C138038 * std::pow(C138044, 7) *
                                                   bs[7] * C138210))))) /
        C137733;
    const double C992 =
        (C138160 * (2 * C138226 + ae * C138227 + C138038 * C138244)) / C137733;
    const double C993 =
        (C138160 *
         (3 * C138244 + ae * C138245 +
          C138038 * (2 * C138240 + ae * C138241 +
                     C138038 * (C138234 + ae * C138038 * C138236 +
                                C138038 * (ae * C138236 +
                                           C138038 * std::pow(C138044, 7) *
                                               bs[7] * C138210))))) /
        C137733;
    const double C3038 =
        (C138215 + ae * C138218 + C138038 * C138226 + C138244 * C138292) /
        C137733;
    const double C3039 =
        (2 * C138226 + ae * C138227 + C138038 * C138244 +
         (2 * C138240 + ae * C138241 +
          C138038 * (C138234 + ae * C138038 * C138236 +
                     C138038 * (ae * C138236 + C138038 * std::pow(C138044, 7) *
                                                   bs[7] * C138210))) *
             C138292) /
        C137733;
    const double C6913 =
        (2 * C138160 * C138244 +
         C138160 * (C138244 +
                    (C138234 + ae * C138038 * C138236 +
                     C138038 * (ae * C138236 + C138038 * std::pow(C138044, 7) *
                                                   bs[7] * C138210)) *
                        C138292)) /
        C137733;
    const double C21203 =
        (3 * (C138226 + be * C138972 + C138204 * C138975) +
         be * (2 * C138972 + C138204 * C138976) +
         C138204 *
             (2 * C138975 + be * C138976 +
              C138204 * (C138240 + be * C138204 * C138141 +
                         C138204 * (be * C138141 +
                                    C138204 * (ae * C138236 +
                                               C138038 * std::pow(C138044, 7) *
                                                   bs[7] * C138210))))) /
        C137733;
    const double C112636 =
        (4 * (2 * C138969 + be * C138970 + C138204 * C139266) +
         be * (3 * C138970 + C138204 * C139267) +
         C138204 *
             (3 * C139266 + be * C139267 +
              C138204 * (2 * C139262 + be * C139263 +
                         C138204 * (C138234 + be * C138204 * C138130 +
                                    C138204 * (be * C138130 +
                                               C138204 * std::pow(C138044, 7) *
                                                   bs[7] * C138210))))) /
        C137733;
    const double C517 = C507 + C515;
    const double C15201 = C13858 * C13542;
    const double C40071 = C139899 * C13542;
    const double C115835 = C139899 * C13542;
    const double C124042 = C122759 * C13542;
    const double C16303 = C13858 * C16295;
    const double C124993 = C122759 * C16295;
    const double C57405 =
        (4 * (2 * C138775 + ae * C138776 + C138160 * C139125) +
         ae * (3 * C138776 + C138160 * C139126) +
         C138160 *
             (3 * C139125 + ae * C139126 +
              C138160 * (2 * C139121 + ae * C139122 +
                         C138160 * (C138324 + ae * C138160 * C138236 +
                                    C138160 * (ae * C138236 +
                                               C138160 * std::pow(C138044, 7) *
                                                   bs[7] * C138315))))) /
        C137733;
    const double C58027 =
        (3 * (C138820 + ae * C138950 + C138160 * C139166) +
         ae * (C138204 * C139126 + C139105 * be) +
         C138160 *
             (2 * C139166 + ae * (C138204 * C139122 + C139099) +
              C138160 *
                  (C139164 + ae * (C138204 * C138160 * C138236 + C139092) +
                   C138160 * (ae * (C138204 * C138236 + C138120) +
                              C138160 * (be * C138279 +
                                         C138204 * std::pow(C138044, 7) *
                                             bs[7] * C138315))))) /
        C137733;
    const double C64823 =
        (2 * C138820 + be * C138984 + C138204 * C139182 +
         ae * (2 * C138950 +
               C138204 * (C138945 +
                          C138204 * (C138204 * C138160 * C138236 + C139092) +
                          C138204 * C139084 * be) +
               (C138734 + C139084 * C138390) * be) +
         C138160 *
             (ae * (2 * C139021 +
                    C138204 *
                        (C138223 + C138204 * (C138204 * C138236 + C138120) +
                         C138204 * C138110 * be) +
                    (C138074 + C138110 * C138390) * be) +
              C138160 * (2 * C139164 + be * (C138266 + C138279 * C138390) +
                         C138204 * (C138324 + be * C138204 * C138279 +
                                    C138204 * (be * C138279 +
                                               C138204 * std::pow(C138044, 7) *
                                                   bs[7] * C138315))))) /
        C137733;
    const double C112810 =
        (4 * (2 * C138820 + be * C138984 + C138204 * C139182) +
         be * (3 * C138984 + C138204 * C139273) +
         C138204 *
             (3 * C139182 + be * C139273 +
              C138204 * (2 * C139164 + be * C139216 +
                         C138204 * (C138324 + be * C138204 * C138279 +
                                    C138204 * (be * C138279 +
                                               C138204 * std::pow(C138044, 7) *
                                                   bs[7] * C138315))))) /
        C137733;
    const double C10130 = C7414 - C7415;
    const double C71829 = C69251 - C69252;
    const double C43529 = C11069 - C11070;
    const double C43527 = C11070 - C11069;
    const double C81696 = C72717 - C72718;
    const double C81694 = C72718 - C72717;
    const double C21541 = C16414 - C16415;
    const double C130072 = C85014 - C85013;
    const double C578 =
        (4 * (2 * C138350 + be * C138351 + C138038 * C138368) +
         be * (3 * C138351 + C138038 * C138369) +
         C138038 *
             (3 * C138368 + be * C138369 +
              C138038 * (2 * C138364 + be * C138365 +
                         C138038 * (C138358 + be * C138038 * C138360 +
                                    C138038 * (be * C138360 +
                                               C138038 * std::pow(C138044, 7) *
                                                   bs[7] * C138334))))) /
        C137733;
    const double C1325 =
        (C138160 * (2 * C138350 + be * C138351 + C138038 * C138368)) / C137733;
    const double C1326 =
        (C138160 *
         (3 * C138368 + be * C138369 +
          C138038 * (2 * C138364 + be * C138365 +
                     C138038 * (C138358 + be * C138038 * C138360 +
                                C138038 * (be * C138360 +
                                           C138038 * std::pow(C138044, 7) *
                                               bs[7] * C138334))))) /
        C137733;
    const double C3262 =
        (C138339 + be * C138342 + C138038 * C138350 + C138368 * C138292) /
        C137733;
    const double C3263 =
        (2 * C138350 + be * C138351 + C138038 * C138368 +
         (2 * C138364 + be * C138365 +
          C138038 * (C138358 + be * C138038 * C138360 +
                     C138038 * (be * C138360 + C138038 * std::pow(C138044, 7) *
                                                   bs[7] * C138334))) *
             C138292) /
        C137733;
    const double C7406 =
        (2 * C138160 * C138368 +
         C138160 * (C138368 +
                    (C138358 + be * C138038 * C138360 +
                     C138038 * (be * C138360 + C138038 * std::pow(C138044, 7) *
                                                   bs[7] * C138334)) *
                        C138292)) /
        C137733;
    const double C21538 =
        (3 * (C138350 + ae * C138996 + C138204 * C138999) +
         ae * (2 * C138996 + C138204 * C139000) +
         C138204 *
             (2 * C138999 + ae * C139000 +
              C138204 * (C138364 + ae * C138204 * C138139 +
                         C138204 * (ae * C138139 +
                                    C138204 * (be * C138360 +
                                               C138038 * std::pow(C138044, 7) *
                                                   bs[7] * C138334))))) /
        C137733;
    const double C112862 =
        (4 * (2 * C138993 + ae * C138994 + C138204 * C139283) +
         ae * (3 * C138994 + C138204 * C139284) +
         C138204 *
             (3 * C139283 + ae * C139284 +
              C138204 * (2 * C139279 + ae * C139280 +
                         C138204 * (C138358 + ae * C138204 * C138127 +
                                    C138204 * (ae * C138127 +
                                               C138204 * std::pow(C138044, 7) *
                                                   bs[7] * C138334))))) /
        C137733;
    const double C651 = C641 + C649;
    const double C137638 = C46959 - C46958;
    const double C67592 = C62440 - C62441;
    const double C15404 = C139824 * C13702;
    const double C40343 = C139873 * C13702;
    const double C62445 = C139873 * C13702;
    const double C57521 =
        (4 * (2 * C138791 + be * C138792 + C138160 * C139140) +
         be * (3 * C138792 + C138160 * C139141) +
         C138160 *
             (3 * C139140 + be * C139141 +
              C138160 * (2 * C139136 + be * C139137 +
                         C138160 * (C138384 + be * C138160 * C138360 +
                                    C138160 * (be * C138360 +
                                               C138160 * std::pow(C138044, 7) *
                                                   bs[7] * C138375))))) /
        C137733;
    const double C67589 =
        (3 * (C138791 + ae * C139226 + C138204 * C139229) +
         ae * (2 * C139226 + C138204 * C139230) +
         C138204 *
             (2 * C139229 + ae * C139230 +
              C138204 * (C139136 + ae * C138204 * C139091 +
                         C138204 * (ae * C139091 +
                                    C138204 * (be * C138360 +
                                               C138160 * std::pow(C138044, 7) *
                                                   bs[7] * C138375))))) /
        C137733;
    const double C112916 =
        (4 * (2 * C139005 + ae * C139006 + C138204 * C139294) +
         ae * (3 * C139006 + C138204 * C139295) +
         C138204 *
             (3 * C139294 + ae * C139295 +
              C138204 * (2 * C139290 + ae * C139291 +
                         C138204 * (C138384 + ae * C138204 * C138192 +
                                    C138204 * (ae * C138192 +
                                               C138204 * std::pow(C138044, 7) *
                                                   bs[7] * C138375))))) /
        C137733;
    const double C137753 = C137752 * ae;
    const double C137764 = C137752 * C137761;
    const double C5816 =
        (-C137730 / C137729) / C137734 - (C137752 * be) / C137729;
    const double C57464 = C57299 * C265;
    const double C57462 = C57297 * C265;
    const double C57469 = C57465 * C139835;
    const double C57468 = C57463 * C139835;
    const double C89131 = C57463 * C139984;
    const double C104335 = C57463 * C92797;
    const double C89132 = C88899 * C29625;
    const double C104336 = C88899 * C92948;
    const double C89135 = C89133 * C139899;
    const double C104337 = C89133 * C139899;
    const double C67260 = C64589 * C47217;
    const double C137320 = C64589 * C21861;
    const double C67267 = C67259 * C47134;
    const double C112691 = C67259 * C139824;
    const double C137319 = C67259 * C139983;
    const double C112690 = C67258 * C182;
    const double C112700 = C112693 * C139824;
    const double C112699 = C112692 * C182;
    const double C137821 = C137820 * C137761;
    const double C137912 = C137820 * ae;
    const double C21860 = (C137820 * ae) / C137729 - C137807 / C137738;
    const double C47216 =
        (-C137807 / C137729) / C137734 - (C137820 * be) / C137729;
    const double C16195 = C16192 * C5811;
    const double C31694 = C16192 * C140009;
    const double C95001 = C16192 * C47131;
    const double C109347 = C16192 * C139731;
    const double C124882 = C16192 * C139967;
    const double C137847 = C137846 * C137761;
    const double C137983 = C137846 * ae;
    const double C29624 = (C137846 * ae) / C137729 - C137833 / C137738;
    const double C92947 =
        (-C137833 / C137729) / C137734 - (C137846 * be) / C137729;
    const double C737 = C733 * C139824;
    const double C6509 = C733 * C5813;
    const double C22484 = C733 * C139983;
    const double C47837 = C733 * C47134;
    const double C68432 = C733 * C140011;
    const double C67261 = C64590 * C139873;
    const double C137321 = C64590 * C139873;
    const double C6525 = C6523 + C6514;
    const double C8651 = C8649 + C8644;
    const double C15096 = C15094 + C15090;
    const double C14203 = C14201 + C14194;
    const double C18760 = C18758 - C18754;
    const double C16182 = C1931 * C5811;
    const double C16172 = C1931 * C139736;
    const double C31697 = C1931 * C140009;
    const double C31695 = C1931 * C140010;
    const double C95004 = C1931 * C47131;
    const double C95002 = C1931 * C47132;
    const double C109350 = C1931 * C139731;
    const double C124886 = C1931 * C139967;
    const double C124883 = C1931 * C139736;
    const double C18763 = C18761 * C5811;
    const double C34179 = C18761 * C140009;
    const double C97485 = C18761 * C47131;
    const double C110997 = C18761 * C139731;
    const double C127351 = C18761 * C139967;
    const double C16196 = C16193 * C5811;
    const double C36743 = C16193 * C140009;
    const double C100049 = C16193 * C47131;
    const double C109348 = C16193 * C139731;
    const double C124884 = C16193 * C139967;
    const double C738 = C734 * C139824;
    const double C6520 = C734 * C5813;
    const double C22486 = C734 * C139983;
    const double C47839 = C734 * C47134;
    const double C68437 = C734 * C140011;
    const double C739 = C735 * C139824;
    const double C22489 = C735 * C139983;
    const double C47842 = C735 * C47134;
    const double C1499 = C1496 * C139824;
    const double C6510 = C1496 * C5814;
    const double C7645 = C1496 * C5813;
    const double C22485 = C1496 * C139873;
    const double C23509 = C1496 * C139983;
    const double C47838 = C1496 * C139873;
    const double C48859 = C1496 * C47134;
    const double C68433 = C1496 * C140012;
    const double C69465 = C1496 * C140011;
    const double C2256 = C2253 * C139824;
    const double C8645 = C2253 * C5813;
    const double C24456 = C2253 * C139983;
    const double C49797 = C2253 * C47134;
    const double C70389 = C2253 * C140011;
    const double C904 =
        (be * (2 * C138070 + C138038 * C138104 + C138088 * ae) +
         C138160 * (2 * C138182 + ae * C138183 + C138038 * C138200)) /
        C137733;
    const double C1749 =
        (be * (2 * C138070 + C138038 * C138104 + C138088 * ae) +
         C138204 * (2 * C138226 + ae * C138227 + C138038 * C138244)) /
        C137733;
    const double C2980 =
        (C138171 + ae * C138174 + C138038 * C138182 + be * C138160 * C138104 +
         C138160 * (be * C138104 + C138160 * C138200)) /
        C137733;
    const double C3526 =
        (C138204 * (be * C138104 + C138160 * C138200)) / C137733;
    const double C3600 =
        (be * C138160 * C138104 + C138204 * C138160 * C138244) / C137733;
    const double C5403 =
        (C138215 + ae * C138218 + C138038 * C138226 + be * C138204 * C138104 +
         C138204 * (be * C138104 + C138204 * C138244)) /
        C137733;
    const double C123 =
        (3 * (C138051 + C138038 * C138070 + C138059 * ae) +
         C138038 * (2 * C138070 + C138038 * C138104 + C138088 * ae) +
         (2 * C138059 + C138038 * C138088) * ae) /
        C137729;
    const double C816 =
        (C138160 * (2 * C138070 + C138038 * C138104 + C138088 * ae)) / C137729;
    const double C1573 =
        (C138204 * (2 * C138070 + C138038 * C138104 + C138088 * ae)) / C137729;
    const double C2917 =
        (C138051 + C138038 * C138070 + C138059 * ae + C138104 * C138292) /
        C137729;
    const double C3447 = (C138204 * C138160 * C138104) / C137729;
    const double C5282 =
        (C138051 + C138038 * C138070 + C138059 * ae + C138104 * C138390) /
        C137729;
    const double C130 =
        (3 * (C138068 + ae * C138069 + be * C138070 + C138038 * C138100) +
         ae * (2 * C138069 + C138038 * C138103 + C138088 * be) +
         be * (2 * C138070 + C138038 * C138104 + C138088 * ae) +
         C138038 * (2 * C138100 + ae * C138103 + be * C138104 +
                    C138038 * (C138094 + ae * C138095 + be * C138096 +
                               C138038 * (ae * C138086 + be * C138089 +
                                          C138038 *
                                              (C138075 * C138076 +
                                               C138042 * bs[6] *
                                                   std::pow(C138036, 6)) *
                                              C137731)))) /
        C137733;
    const double C825 =
        (2 * (ae * C138160 * C138063 + be * C138160 * C138064 +
              C138038 * C138409) +
         ae * C138160 * C138103 + be * C138160 * C138104 +
         C138038 * (C138409 + ae * C138160 * C138095 + be * C138160 * C138096 +
                    C138038 * (ae * C138160 * C138086 + be * C138160 * C138089 +
                               C138038 * C138160 * C138138))) /
        C137733;
    const double C1080 =
        (ae * (2 * C138069 + C138038 * C138103 + C138088 * be) +
         C138160 * (2 * C138269 + be * C138270 + C138038 * C138287)) /
        C137733;
    const double C1582 =
        (2 * (ae * C138204 * C138063 + be * C138204 * C138064 +
              C138038 * C138463) +
         ae * C138204 * C138103 + be * C138204 * C138104 +
         C138038 * (C138463 + ae * C138204 * C138095 + be * C138204 * C138096 +
                    C138038 * (ae * C138204 * C138086 + be * C138204 * C138089 +
                               C138038 * C138204 * C138138))) /
        C137733;
    const double C2082 =
        (ae * (2 * C138069 + C138038 * C138103 + C138088 * be) +
         C138204 * (2 * C138350 + be * C138351 + C138038 * C138368)) /
        C137733;
    const double C3096 =
        (C138258 + be * C138261 + C138038 * C138269 + ae * C138160 * C138103 +
         C138160 * (ae * C138103 + C138160 * C138287)) /
        C137733;
    const double C3674 =
        (ae * C138204 * C138103 + C138160 * C138204 * C138287) / C137733;
    const double C3888 =
        (ae * C138160 * C138103 + C138204 * C138160 * C138368) / C137733;
    const double C5627 =
        (C138339 + be * C138342 + C138038 * C138350 + ae * C138204 * C138103 +
         C138204 * (ae * C138103 + C138204 * C138368)) /
        C137733;
    const double C122 =
        (3 * (C138050 + C138038 * C138069 + C138059 * be) +
         C138038 * (2 * C138069 + C138038 * C138103 + C138088 * be) +
         (2 * C138059 + C138038 * C138088) * be) /
        C137729;
    const double C815 =
        (C138160 * (2 * C138069 + C138038 * C138103 + C138088 * be)) / C137729;
    const double C1572 =
        (C138204 * (2 * C138069 + C138038 * C138103 + C138088 * be)) / C137729;
    const double C2916 =
        (C138050 + C138038 * C138069 + C138059 * be + C138103 * C138292) /
        C137729;
    const double C3446 = (C138204 * C138160 * C138103) / C137729;
    const double C5281 =
        (C138050 + C138038 * C138069 + C138059 * be + C138103 * C138390) /
        C137729;
    const double C138153 = C138038 * C138150;
    const double C138869 = C138160 * C138150;
    const double C6797 =
        (2 * (be * C138104 + C138160 * C138200) +
         be * (C138104 + C138150 * C138292) +
         C138160 *
             (C138200 + be * C138160 * C138150 +
              C138160 * (be * C138150 +
                         C138160 * (C138190 + ae * C138038 * C138192 +
                                    C138038 * (ae * C138192 +
                                               C138038 * std::pow(C138044, 7) *
                                                   bs[7] * C138166))))) /
        C137733;
    const double C7868 =
        (C138204 *
         (C138200 + be * C138160 * C138150 +
          C138160 * (be * C138150 +
                     C138160 * (C138190 + ae * C138038 * C138192 +
                                C138038 * (ae * C138192 +
                                           C138038 * std::pow(C138044, 7) *
                                               bs[7] * C138166))))) /
        C137733;
    const double C7984 =
        (be * (C138104 + C138150 * C138292) +
         C138204 * (C138244 +
                    (C138234 + ae * C138038 * C138236 +
                     C138038 * (ae * C138236 + C138038 * std::pow(C138044, 7) *
                                                   bs[7] * C138210)) *
                        C138292)) /
        C137733;
    const double C14762 =
        (be * C138104 + C138160 * C138200 +
         (be * C138150 +
          C138160 * (C138190 + ae * C138752 +
                     C138038 * (ae * C138192 + C138038 * std::pow(C138044, 7) *
                                                   bs[7] * C138166))) *
             C138390) /
        C137733;
    const double C15917 =
        (2 * (be * C138104 + C138204 * C138244) +
         be * (C138104 + C138150 * C138390) +
         C138204 *
             (C138244 + be * C138204 * C138150 +
              C138204 * (be * C138150 +
                         C138204 * (C138234 + ae * C138780 +
                                    C138038 * (ae * C138236 +
                                               C138038 * std::pow(C138044, 7) *
                                                   bs[7] * C138210))))) /
        C137733;
    const double C6634 =
        (2 * C138160 * C138104 + C138160 * (C138104 + C138150 * C138292)) /
        C137729;
    const double C7761 = (C138204 * (C138104 + C138150 * C138292)) / C137729;
    const double C15630 =
        (2 * C138204 * C138104 + C138204 * (C138104 + C138150 * C138390)) /
        C137729;
    const double C139110 = C138160 * C139108;
    const double C139326 = C138204 * C139324;
    const double C138770 = C138768 + C138761;
    const double C139050 = C139048 + C139044;
    const double C138769 = C138767 + C138758;
    const double C139049 = C139047 + C139041;
    const double C138152 = C138038 * C138149;
    const double C138874 = C138160 * C138149;
    const double C2923 =
        (2 * (ae * (C138063 + C138086 * C138292) +
              be * (C138064 + C138089 * C138292) + C138038 * C138521) +
         ae * (C138103 + C138149 * C138292) +
         be * (C138104 + C138150 * C138292) +
         C138038 * (C138521 + ae * (C138095 + C138139 * C138292) +
                    be * (C138096 + C138141 * C138292) +
                    C138038 * (ae * (C138086 + C138127 * C138292) +
                               be * (C138089 + C138130 * C138292) +
                               C138038 * (C138138 + (C138111 * C138112 +
                                                     C138042 * bs[7] *
                                                         std::pow(C138044, 7)) *
                                                        C137731 * C138292)))) /
        C137733;
    const double C3453 =
        (2 * (ae * C138204 * C138414 + be * C138204 * C138415 +
              C138038 * C138558) +
         ae * C138204 * C138160 * C138149 + be * C138204 * C138160 * C138150 +
         C138038 * (C138558 + ae * C138204 * C138160 * C138139 +
                    be * C138204 * C138160 * C138141 +
                    C138038 * (ae * C138204 * C138160 * C138127 +
                               be * C138204 * C138160 * C138130 +
                               C138038 * C138204 * C138160 *
                                   (C138111 * C138112 +
                                    C138042 * bs[7] * std::pow(C138044, 7)) *
                                   C137731))) /
        C137733;
    const double C5288 =
        (2 * (ae * (C138063 + C138086 * C138390) +
              be * (C138064 + C138089 * C138390) + C138038 * C138596) +
         ae * (C138103 + C138149 * C138390) +
         be * (C138104 + C138150 * C138390) +
         C138038 * (C138596 + ae * (C138095 + C138139 * C138390) +
                    be * (C138096 + C138141 * C138390) +
                    C138038 * (ae * (C138086 + C138127 * C138390) +
                               be * (C138089 + C138130 * C138390) +
                               C138038 * (C138138 + (C138111 * C138112 +
                                                     C138042 * bs[7] *
                                                         std::pow(C138044, 7)) *
                                                        C137731 * C138390)))) /
        C137733;
    const double C7037 =
        (2 * (ae * C138103 + C138160 * C138287) +
         ae * (C138103 + C138149 * C138292) +
         C138160 *
             (C138287 + ae * C138160 * C138149 +
              C138160 * (ae * C138149 +
                         C138160 * (C138277 + be * C138038 * C138279 +
                                    C138038 * (be * C138279 +
                                               C138038 * std::pow(C138044, 7) *
                                                   bs[7] * C138253))))) /
        C137733;
    const double C8096 =
        (C138204 * C138287 + ae * C138204 * C138160 * C138149 +
         C138160 *
             (ae * C138204 * C138149 +
              C138160 * C138204 *
                  (C138277 + be * C138038 * C138279 +
                   C138038 * (be * C138279 + C138038 * std::pow(C138044, 7) *
                                                 bs[7] * C138253)))) /
        C137733;
    const double C8427 =
        (ae * (C138103 + C138149 * C138292) +
         C138204 * (C138368 +
                    (C138358 + be * C138038 * C138360 +
                     C138038 * (be * C138360 + C138038 * std::pow(C138044, 7) *
                                                   bs[7] * C138334)) *
                        C138292)) /
        C137733;
    const double C14982 =
        (ae * (C138103 + C138149 * C138390) +
         C138160 * (C138287 +
                    (C138277 + be * C138755 +
                     C138038 * (be * C138279 + C138038 * std::pow(C138044, 7) *
                                                   bs[7] * C138253)) *
                        C138390)) /
        C137733;
    const double C16406 =
        (2 * (ae * C138103 + C138204 * C138368) +
         ae * (C138103 + C138149 * C138390) +
         C138204 *
             (C138368 + ae * C138204 * C138149 +
              C138204 * (ae * C138149 +
                         C138204 * (C138358 + be * C138796 +
                                    C138038 * (be * C138360 +
                                               C138038 * std::pow(C138044, 7) *
                                                   bs[7] * C138334))))) /
        C137733;
    const double C6633 =
        (2 * C138160 * C138103 + C138160 * (C138103 + C138149 * C138292)) /
        C137729;
    const double C7760 = (C138204 * (C138103 + C138149 * C138292)) / C137729;
    const double C15629 =
        (2 * C138204 * C138103 + C138204 * (C138103 + C138149 * C138390)) /
        C137729;
    const double C139109 = C138160 * C139107;
    const double C139325 = C138204 * C139323;
    const double C138151 = C138125 + C138148;
    const double C9622 = C139736 * C6635;
    const double C55290 = C139731 * C6635;
    const double C71350 = C139736 * C6635;
    const double C10406 = C139736 * C7762;
    const double C72086 = C139736 * C7762;
    const double C85985 = C139731 * C7762;
    const double C57124 = C139731 * C9615;
    const double C57654 = C139731 * C10400;
    const double C63503 = C139731 * C13140;
    const double C21025 = C139736 * C15631;
    const double C109075 = C139731 * C15631;
    const double C129589 = C139736 * C15631;
    const double C112518 = C139731 * C21018;
    const double C1157 = C139824 * C1148;
    const double C22138 = C139873 * C1148;
    const double C47492 = C139873 * C1148;
    const double C1914 = C139824 * C1905;
    const double C6170 = C5815 * C3150;
    const double C23068 = C139873 * C3150;
    const double C48419 = C139873 * C3150;
    const double C68097 = C67750 * C3150;
    const double C24023 = C139873 * C3744;
    const double C30686 = C139824 * C3744;
    const double C49369 = C139873 * C3744;
    const double C14198 = C139824 * C5515;
    const double C1479 = C139835 * C1470;
    const double C2236 = C139835 * C2227;
    const double C30148 = C139899 * C2227;
    const double C93470 = C139899 * C2227;
    const double C6518 = C139835 * C3370;
    const double C24453 = C139835 * C4028;
    const double C31095 = C139899 * C4028;
    const double C94404 = C139899 * C4028;
    const double C14535 = C13858 * C5735;
    const double C32116 = C139899 * C5735;
    const double C95422 = C139899 * C5735;
    const double C123410 = C122759 * C5735;
    const double C139252 = C139250 + C139243;
    const double C139251 = C139249 + C139240;
    const double C441 = C437 - C432;
    const double C1169 = C1166 - C1156;
    const double C1926 = C1923 - C1913;
    const double C30688 = C30687 - C30685;
    const double C14202 = C14200 - C14197;
    const double C15091 = C15083 - C15084;
    const double C11172 =
        (ae * (2 * C138652 + C138160 * C138747 + C138740 * be) +
         C138204 * (2 * C138791 + be * C138792 +
                    C138160 * (C138381 + be * C138160 * C138347 +
                               C138160 * (C138354 + C138160 * C138384)))) /
        C137733;
    const double C13701 =
        (C138378 + be * C138788 + C138160 * C138791 + ae * C138204 * C138747 +
         C138204 * (ae * C138747 +
                    C138204 * (C138381 + be * C138160 * C138347 +
                               C138160 * (C138354 + C138160 * C138384)))) /
        C137733;
    const double C65034 =
        (2 * (ae * C138747 + C138204 * C139140) +
         ae * (C138747 + C139107 * C138390) +
         C138204 *
             (C139140 + ae * C138204 * C139107 +
              C138204 * (ae * C139107 +
                         C138204 * (C138384 + be * C138160 * C138360 +
                                    C138160 * (be * C138360 +
                                               C138160 * std::pow(C138044, 7) *
                                                   bs[7] * C138375))))) /
        C137733;
    const double C9707 =
        (3 * (C138167 + C138160 * C138652 + C138650 * be) +
         C138160 * (2 * C138652 + C138160 * C138747 + C138740 * be) +
         (2 * C138650 + C138160 * C138740) * be) /
        C137729;
    const double C10528 =
        (C138204 * (2 * C138652 + C138160 * C138747 + C138740 * be)) / C137729;
    const double C13217 =
        (C138167 + C138160 * C138652 + C138650 * be + C138747 * C138390) /
        C137729;
    const double C64356 =
        (2 * C138204 * C138747 + C138204 * (C138747 + C139107 * C138390)) /
        C137729;
    const double C139103 = C139096 + C139097;
    const double C111004 = C111003 - C111001;
    const double C112758 = C112757 - C112755;
    const double C732 = C728 - C723;
    const double C1491 = C1488 - C1478;
    const double C2248 = C2245 - C2235;
    const double C6524 = C6522 - C6517;
    const double C24458 = C24457 - C24452;
    const double C57579 = C57578 - C57576;
    const double C58244 = C58243 - C58241;
    const double C59744 =
        (2 * (ae * C139030 + C138160 * C139182) +
         ae * (C138776 + C138204 * (C138204 * C139122 + C139099) +
               C138204 * C139093 * be) +
         C138160 *
             (C139182 +
              ae *
                  (C138945 + C138204 * (C138204 * C138160 * C138236 + C139092) +
                   C138204 * C139084 * be) +
              C138160 *
                  (ae * (C138223 + C138204 * (C138204 * C138236 + C138120) +
                         C138204 * C138110 * be) +
                   C138160 * (C138324 + be * C138204 * C138279 +
                              C138204 * (be * C138279 +
                                         C138204 * std::pow(C138044, 7) *
                                             bs[7] * C138315))))) /
        C137733;
    const double C67435 =
        (ae * (3 * C139030 +
               C138204 * (2 * C139021 +
                          C138204 * (C138223 +
                                     C138204 * (C138204 * C138236 + C138120) +
                                     C138204 * C138110 * be) +
                          C139215 * be) +
               (2 * C139017 + C138204 * C139215) * be) +
         C138160 *
             (3 * C139182 + be * (2 * C139154 + C138204 * C139216) +
              C138204 * (2 * C139164 + be * C139216 +
                         C138204 * (C138324 + be * C138204 * C138279 +
                                    C138204 * (be * C138279 +
                                               C138204 * std::pow(C138044, 7) *
                                                   bs[7] * C138315))))) /
        C137733;
    const double C21200 =
        (3 * (C138211 + C138204 * C138913 + C138911 * be) +
         C138204 * (2 * C138913 + C138204 * C139030 + C139023 * be) +
         (2 * C138911 + C138204 * C139023) * be) /
        C137729;
    const double C139320 = C139310 + C139317;
    const double C9968 =
        (3 * (C138297 + ae * C138652 + be * C138653 + C138160 * C138737) +
         ae * (2 * C138652 + C138160 * C138747 + C138740 * be) +
         be * (2 * C138653 + C138160 * C138748 + C138740 * ae) +
         C138160 *
             (2 * C138737 + ae * C138747 + be * C138748 +
              C138160 * (C138302 + ae * C138738 + be * C138741 +
                         C138160 * (C138186 + C138273 + C138160 * C138307)))) /
        C137733;
    const double C10858 =
        (2 * (ae * C138204 * C138172 + be * C138204 * C138259 +
              C138160 * C138815) +
         ae * C138204 * C138747 + be * C138204 * C138748 +
         C138160 * (C138815 + ae * C138204 * C138738 + be * C138204 * C138741 +
                    C138160 * (ae * C138204 * C138179 + be * C138204 * C138266 +
                               C138160 * C138204 * C138307))) /
        C137733;
    const double C59693 =
        (2 * (ae * C139006 + be * C138984 + C138160 * C139178) +
         ae * (C138747 + C139107 * C138390) +
         be * (C138748 + C139108 * C138390) +
         C138160 * (C139178 + ae * (C138738 + C139091 * C138390) +
                    be * (C138741 + C139094 * C138390) +
                    C138160 * (ae * (C138179 + C138192 * C138390) +
                               be * (C138266 + C138279 * C138390) +
                               C138160 * (C138307 + (C138111 * C138112 +
                                                     C138292 * bs[7] *
                                                         std::pow(C138044, 7)) *
                                                        C137731 * C138390)))) /
        C137733;
    const double C9876 =
        (3 * (C138254 + C138160 * C138653 + C138650 * ae) +
         C138160 * (2 * C138653 + C138160 * C138748 + C138740 * ae) +
         (2 * C138650 + C138160 * C138740) * ae) /
        C137729;
    const double C10740 =
        (C138204 * (2 * C138653 + C138160 * C138748 + C138740 * ae)) / C137729;
    const double C13382 =
        (C138254 + C138160 * C138653 + C138650 * ae + C138748 * C138390) /
        C137729;
    const double C64584 =
        (2 * C138204 * C138748 + C138204 * (C138748 + C139108 * C138390)) /
        C137729;
    const double C16194 = C16191 + C16181;
    const double C16183 = C1930 * C139736;
    const double C31698 = C1930 * C140010;
    const double C31696 = C1930 * C21777;
    const double C95005 = C1930 * C47132;
    const double C95003 = C1930 * C47133;
    const double C124887 = C1930 * C139736;
    const double C21385 = C21384 * C5811;
    const double C109349 = C21384 * C139731;
    const double C129922 = C21384 * C139967;
    const double C21699 =
        (3 * (C138395 + ae * C138913 + be * C138914 + C138204 * C139020) +
         ae * (2 * C138913 + C138204 * C139030 + C139023 * be) +
         be * (2 * C138914 + C138204 * C139031 + C139023 * ae) +
         C138204 *
             (2 * C139020 + ae * C139030 + be * C139031 +
              C138204 * (C138400 + ae * C139021 + be * C139024 +
                         C138204 * (C138230 + C138354 + C138204 * C138405)))) /
        C137733;
    const double C21535 =
        (3 * (C138335 + C138204 * C138914 + C138911 * ae) +
         C138204 * (2 * C138914 + C138204 * C139031 + C139023 * ae) +
         (2 * C138911 + C138204 * C139023) * ae) /
        C137729;
    const double C7654 = C7651 + C7643;
    const double C8650 = C8648 + C8640;
    const double C1498 = C1495 * C139824;
    const double C6519 = C1495 * C5814;
    const double C22487 = C1495 * C139873;
    const double C23507 = C1495 * C139983;
    const double C47840 = C1495 * C139873;
    const double C48857 = C1495 * C47134;
    const double C68436 = C1495 * C140012;
    const double C2255 = C2252 * C139824;
    const double C24454 = C2252 * C139983;
    const double C49795 = C2252 * C47134;
    const double C21117 = C15806 * C139736;
    const double C129677 = C15806 * C139736;
    const double C1675 = C139824 * C1661;
    const double C13941 = C139824 * C5345;
    const double C14771 = C139824 * C13222;
    const double C39505 = C139873 * C13222;
    const double C61779 = C139873 * C13222;
    const double C31595 = C21777 * C1837;
    const double C94902 = C47133 * C1837;
    const double C16066 = C139736 * C5461;
    const double C36666 = C21777 * C5461;
    const double C99972 = C47133 * C5461;
    const double C124783 = C139736 * C5461;
    const double C9793 = C6926 * C139736;
    const double C71513 = C6926 * C139736;
    const double C1006 = C139835 * C992;
    const double C6003 = C139835 * C3038;
    const double C23301 = C21777 * C1325;
    const double C48651 = C47133 * C1325;
    const double C7423 = C139736 * C3262;
    const double C25899 = C21777 * C3262;
    const double C51236 = C47133 * C3262;
    const double C69260 = C139736 * C3262;
    const double C137754 = C137753 / C137729;
    const double C137765 = C137727 * C137764;
    const double C107 = (-C137764 / C137729) / (4 * C137758);
    const double C5819 = (-C137764 / C137729) / C137734;
    const double C21785 = (-C137764 / C137729) / (4 * C137733);
    const double C47141 = (-C137764 / C137729) / (4 * C137733);
    const double C54791 = -C137764 / C137729;
    const double C67754 = (-C137764 / C137729) / C137734;
    const double C6665 = C5816 * C2915;
    const double C6663 = C5816 * C2914;
    const double C6657 = C5816 * C820;
    const double C6655 = C5816 * C819;
    const double C6649 = C5816 * C2913;
    const double C6647 = C5816 * C2912;
    const double C6641 = C5816 * C822;
    const double C6639 = C5816 * C821;
    const double C7067 = C5816 * C3091;
    const double C7063 = C5816 * C2909;
    const double C7059 = C5816 * C1073;
    const double C7055 = C5816 * C812;
    const double C7052 = C5816 * C3090;
    const double C7048 = C5816 * C2908;
    const double C7044 = C5816 * C1072;
    const double C7040 = C5816 * C813;
    const double C7420 = C5816 * C3257;
    const double C7416 = C5816 * C1318;
    const double C7413 = C5816 * C3256;
    const double C7409 = C5816 * C1317;
    const double C9625 = C5816 * C6632;
    const double C9623 = C5816 * C6631;
    const double C9798 = C9790 * C5816;
    const double C9889 = C5816 * C7032;
    const double C9885 = C5816 * C6627;
    const double C10131 = C5816 * C7401;
    const double C10417 = C5816 * C3443;
    const double C10415 = C5816 * C3442;
    const double C10409 = C5816 * C7759;
    const double C10407 = C5816 * C7758;
    const double C10757 = C5816 * C8091;
    const double C10753 = C5816 * C7754;
    const double C10749 = C5816 * C3668;
    const double C10745 = C5816 * C3438;
    const double C11071 = C5816 * C8422;
    const double C11067 = C5816 * C3882;
    const double C15661 = C5816 * C5280;
    const double C15659 = C5816 * C5279;
    const double C15653 = C5816 * C1577;
    const double C15651 = C5816 * C1576;
    const double C15645 = C5816 * C5278;
    const double C15643 = C5816 * C5277;
    const double C15637 = C5816 * C1579;
    const double C15635 = C5816 * C1578;
    const double C16063 = C5816 * C5456;
    const double C16059 = C5816 * C5274;
    const double C16055 = C5816 * C1830;
    const double C16051 = C5816 * C1569;
    const double C16048 = C5816 * C5455;
    const double C16044 = C5816 * C5273;
    const double C16040 = C5816 * C1829;
    const double C16036 = C5816 * C1570;
    const double C16420 = C5816 * C5622;
    const double C16416 = C5816 * C2075;
    const double C16413 = C5816 * C5621;
    const double C16409 = C5816 * C2074;
    const double C18313 = C5816 * C13131;
    const double C18311 = C5816 * C13130;
    const double C18643 = C5816 * C13380;
    const double C18639 = C5816 * C13126;
    const double C18967 = C5816 * C13618;
    const double C21028 = C5816 * C15628;
    const double C21026 = C5816 * C15627;
    const double C21122 = C21114 * C5816;
    const double C21291 = C5816 * C16028;
    const double C21287 = C5816 * C15623;
    const double C21542 = C5816 * C16401;
    const double C38060 = C5816 * C3445;
    const double C38058 = C5816 * C3444;
    const double C38502 = C5816 * C3669;
    const double C38498 = C5816 * C3439;
    const double C38924 = C5816 * C3883;
    const double C57471 = C57464 + C57469;
    const double C57470 = C57462 + C57468;
    const double C112698 = C112690 + C112691;
    const double C112701 = C112699 + C112700;
    const double C137824 = C137789 * C137821;
    const double C6151 =
        (ae * -2 * C137807) / C137758 +
        (((C137789 *
           ((-4 * C137809) / C137729 - (C137789 * C137821) / C137729) * ae) /
              C137729 +
          2 * ((C137820 * ae) / C137729 - C137807 / C137738)) *
         ae) /
            C137729 -
        C137821 / C137738;
    const double C6153 = (-C137821 / C137729) / (4 * C137733);
    const double C22117 = (-C137821 / C137729) / C137734;
    const double C47471 = (-C137821 / C137729) / C137734;
    const double C54999 = (-C137821 / C137729) / (4 * C137758);
    const double C68080 = (-C137821 / C137729) / (4 * C137733);
    const double C137918 = C137912 / C137729;
    const double C21883 = C21860 * C121;
    const double C21879 = C21860 * C111;
    const double C21876 = C21860 * C119;
    const double C21872 = C21860 * C110;
    const double C21868 = C21860 * C117;
    const double C21864 = C21860 * C109;
    const double C22141 = C21860 * C351;
    const double C22139 = C21860 * C186;
    const double C22129 = C21860 * C350;
    const double C22127 = C21860 * C185;
    const double C22121 = C21860 * C349;
    const double C22119 = C21860 * C184;
    const double C22236 = C295 * C21860;
    const double C22401 = C21860 * C570;
    const double C22398 = C21860 * C569;
    const double C22393 = C21860 * C568;
    const double C22741 = C21860 * C818;
    const double C22737 = C21860 * C811;
    const double C22733 = C21860 * C820;
    const double C22729 = C21860 * C812;
    const double C23079 = C21860 * C1073;
    const double C23077 = C21860 * C897;
    const double C23071 = C21860 * C1074;
    const double C23069 = C21860 * C898;
    const double C23404 = C21860 * C1319;
    const double C23400 = C21860 * C1318;
    const double C23718 = C21860 * C1575;
    const double C23714 = C21860 * C1568;
    const double C23710 = C21860 * C1577;
    const double C23706 = C21860 * C1569;
    const double C24034 = C21860 * C1830;
    const double C24032 = C21860 * C1654;
    const double C24026 = C21860 * C1831;
    const double C24024 = C21860 * C1655;
    const double C24348 = C21860 * C2076;
    const double C24344 = C21860 * C2075;
    const double C38206 = C21860 * C3445;
    const double C38202 = C21860 * C3439;
    const double C38642 = C21860 * C3669;
    const double C38640 = C21860 * C3521;
    const double C39058 = C21860 * C3883;
    const double C39502 = C21860 * C5280;
    const double C39498 = C21860 * C5274;
    const double C39487 = C21860 * C1579;
    const double C39483 = C21860 * C1570;
    const double C39923 = C21860 * C5456;
    const double C39921 = C21860 * C5340;
    const double C39910 = C21860 * C1829;
    const double C39908 = C21860 * C1653;
    const double C40340 = C21860 * C5622;
    const double C40333 = C21860 * C2074;
    const double C42834 = C21860 * C3443;
    const double C42830 = C21860 * C3438;
    const double C43250 = C21860 * C3668;
    const double C43248 = C21860 * C3520;
    const double C43662 = C21860 * C3882;
    const double C46350 = C21860 * C5278;
    const double C46346 = C21860 * C5273;
    const double C46654 = C21860 * C5455;
    const double C46652 = C21860 * C5339;
    const double C46956 = C21860 * C5621;
    const double C134494 = C21860 * C13131;
    const double C134490 = C21860 * C13126;
    const double C134806 = C21860 * C13380;
    const double C134804 = C21860 * C13216;
    const double C135118 = C21860 * C13618;
    const double C137161 = C21860 * C15628;
    const double C137157 = C21860 * C15623;
    const double C137318 = C67258 * C21860;
    const double C137406 = C21860 * C16028;
    const double C137404 = C21860 * C15788;
    const double C137639 = C21860 * C16401;
    const double C47239 = C47216 * C121;
    const double C47235 = C47216 * C111;
    const double C47232 = C47216 * C119;
    const double C47228 = C47216 * C110;
    const double C47224 = C47216 * C117;
    const double C47220 = C47216 * C109;
    const double C47495 = C47216 * C351;
    const double C47493 = C47216 * C186;
    const double C47483 = C47216 * C350;
    const double C47481 = C47216 * C185;
    const double C47475 = C47216 * C349;
    const double C47473 = C47216 * C184;
    const double C47590 = C295 * C47216;
    const double C47754 = C47216 * C570;
    const double C47751 = C47216 * C569;
    const double C47746 = C47216 * C568;
    const double C48094 = C47216 * C818;
    const double C48090 = C47216 * C811;
    const double C48086 = C47216 * C820;
    const double C48082 = C47216 * C812;
    const double C48430 = C47216 * C1073;
    const double C48428 = C47216 * C897;
    const double C48422 = C47216 * C1074;
    const double C48420 = C47216 * C898;
    const double C48754 = C47216 * C1319;
    const double C48750 = C47216 * C1318;
    const double C49068 = C47216 * C1575;
    const double C49064 = C47216 * C1568;
    const double C49060 = C47216 * C1577;
    const double C49056 = C47216 * C1569;
    const double C49380 = C47216 * C1830;
    const double C49378 = C47216 * C1654;
    const double C49372 = C47216 * C1831;
    const double C49370 = C47216 * C1655;
    const double C49692 = C47216 * C2076;
    const double C49688 = C47216 * C2075;
    const double C61776 = C47216 * C5280;
    const double C61772 = C47216 * C5274;
    const double C61769 = C47216 * C5278;
    const double C61765 = C47216 * C5273;
    const double C61761 = C47216 * C1579;
    const double C61757 = C47216 * C1570;
    const double C62108 = C47216 * C5456;
    const double C62106 = C47216 * C5340;
    const double C62100 = C47216 * C5455;
    const double C62098 = C47216 * C5339;
    const double C62092 = C47216 * C1829;
    const double C62090 = C47216 * C1653;
    const double C62442 = C47216 * C5622;
    const double C62439 = C47216 * C5621;
    const double C62435 = C47216 * C2074;
    const double C64371 = C47216 * C13131;
    const double C64367 = C47216 * C13126;
    const double C64363 = C47216 * C3443;
    const double C64359 = C47216 * C3438;
    const double C64708 = C47216 * C13380;
    const double C64706 = C47216 * C13216;
    const double C64700 = C47216 * C3668;
    const double C64698 = C47216 * C3520;
    const double C65040 = C47216 * C13618;
    const double C65036 = C47216 * C3882;
    const double C67097 = C47216 * C15628;
    const double C67093 = C47216 * C15623;
    const double C67266 = C67258 * C47216;
    const double C67353 = C47216 * C16028;
    const double C67351 = C47216 * C15788;
    const double C67593 = C47216 * C16401;
    const double C76509 = C47216 * C3445;
    const double C76505 = C47216 * C3439;
    const double C76917 = C47216 * C3669;
    const double C76915 = C47216 * C3521;
    const double C77319 = C47216 * C3883;
    const double C137850 = C137792 * C137847;
    const double C14516 =
        (ae * -2 * C137833) / C137758 +
        (((C137792 *
           ((-4 * C137835) / C137729 - (C137792 * C137847) / C137729) * ae) /
              C137729 +
          2 * ((C137846 * ae) / C137729 - C137833 / C137738)) *
         ae) /
            C137729 -
        C137847 / C137738;
    const double C14518 = (-C137847 / C137729) / (4 * C137733);
    const double C30127 = (-C137847 / C137729) / C137734;
    const double C93449 = (-C137847 / C137729) / C137734;
    const double C108410 = (-C137847 / C137729) / (4 * C137758);
    const double C123393 = (-C137847 / C137729) / (4 * C137733);
    const double C137989 = C137983 / C137729;
    const double C29647 = C29624 * C121;
    const double C29643 = C29624 * C111;
    const double C29640 = C29624 * C119;
    const double C29636 = C29624 * C110;
    const double C29632 = C29624 * C117;
    const double C29628 = C29624 * C109;
    const double C29888 = C29624 * C351;
    const double C29885 = C29624 * C350;
    const double C29880 = C29624 * C349;
    const double C30045 = C212 * C29624;
    const double C30151 = C29624 * C570;
    const double C30149 = C29624 * C269;
    const double C30139 = C29624 * C569;
    const double C30137 = C29624 * C268;
    const double C30131 = C29624 * C568;
    const double C30129 = C29624 * C267;
    const double C30483 = C29624 * C818;
    const double C30479 = C29624 * C811;
    const double C30475 = C29624 * C820;
    const double C30471 = C29624 * C812;
    const double C30792 = C29624 * C1074;
    const double C30788 = C29624 * C1073;
    const double C31106 = C29624 * C1318;
    const double C31104 = C29624 * C985;
    const double C31098 = C29624 * C1319;
    const double C31096 = C29624 * C986;
    const double C31470 = C29624 * C1575;
    const double C31466 = C29624 * C1568;
    const double C31462 = C29624 * C1577;
    const double C31458 = C29624 * C1569;
    const double C31802 = C29624 * C1831;
    const double C31798 = C29624 * C1830;
    const double C32127 = C29624 * C2075;
    const double C32125 = C29624 * C1742;
    const double C32119 = C29624 * C2076;
    const double C32117 = C29624 * C1743;
    const double C38360 = C29624 * C2915;
    const double C38356 = C29624 * C2909;
    const double C38345 = C29624 * C822;
    const double C38341 = C29624 * C813;
    const double C38788 = C29624 * C3091;
    const double C38781 = C29624 * C1072;
    const double C39207 = C29624 * C3257;
    const double C39205 = C29624 * C3033;
    const double C39194 = C29624 * C1317;
    const double C39192 = C29624 * C984;
    const double C39644 = C29624 * C3445;
    const double C39640 = C29624 * C3439;
    const double C40068 = C29624 * C3669;
    const double C40482 = C29624 * C3883;
    const double C40480 = C29624 * C3595;
    const double C41958 = C29624 * C2913;
    const double C41954 = C29624 * C2908;
    const double C42256 = C29624 * C3090;
    const double C42560 = C29624 * C3256;
    const double C42558 = C29624 * C3032;
    const double C42972 = C29624 * C3443;
    const double C42968 = C29624 * C3438;
    const double C43392 = C29624 * C3668;
    const double C43802 = C29624 * C3882;
    const double C43800 = C29624 * C3594;
    const double C88816 = C29624 * C6632;
    const double C88812 = C29624 * C6627;
    const double C89051 = C29624 * C7032;
    const double C89130 = C57297 * C29624;
    const double C89293 = C29624 * C7401;
    const double C89291 = C29624 * C6908;
    const double C89615 = C29624 * C7759;
    const double C89611 = C29624 * C7754;
    const double C89936 = C29624 * C8091;
    const double C90247 = C29624 * C8422;
    const double C90245 = C29624 * C7979;
    const double C92970 = C92947 * C121;
    const double C92966 = C92947 * C111;
    const double C92963 = C92947 * C119;
    const double C92959 = C92947 * C110;
    const double C92955 = C92947 * C117;
    const double C92951 = C92947 * C109;
    const double C93211 = C92947 * C351;
    const double C93208 = C92947 * C350;
    const double C93203 = C92947 * C349;
    const double C93368 = C212 * C92947;
    const double C93473 = C92947 * C570;
    const double C93471 = C92947 * C269;
    const double C93461 = C92947 * C569;
    const double C93459 = C92947 * C268;
    const double C93453 = C92947 * C568;
    const double C93451 = C92947 * C267;
    const double C93801 = C92947 * C818;
    const double C93797 = C92947 * C811;
    const double C93793 = C92947 * C820;
    const double C93789 = C92947 * C812;
    const double C94103 = C92947 * C1074;
    const double C94099 = C92947 * C1073;
    const double C94415 = C92947 * C1318;
    const double C94413 = C92947 * C985;
    const double C94407 = C92947 * C1319;
    const double C94405 = C92947 * C986;
    const double C94777 = C92947 * C1575;
    const double C94773 = C92947 * C1568;
    const double C94769 = C92947 * C1577;
    const double C94765 = C92947 * C1569;
    const double C95109 = C92947 * C1831;
    const double C95105 = C92947 * C1830;
    const double C95433 = C92947 * C2075;
    const double C95431 = C92947 * C1742;
    const double C95425 = C92947 * C2076;
    const double C95423 = C92947 * C1743;
    const double C101340 = C92947 * C2915;
    const double C101336 = C92947 * C2909;
    const double C101333 = C92947 * C2913;
    const double C101329 = C92947 * C2908;
    const double C101325 = C92947 * C822;
    const double C101321 = C92947 * C813;
    const double C101646 = C92947 * C3091;
    const double C101643 = C92947 * C3090;
    const double C101639 = C92947 * C1072;
    const double C101962 = C92947 * C3257;
    const double C101960 = C92947 * C3033;
    const double C101954 = C92947 * C3256;
    const double C101952 = C92947 * C3032;
    const double C101946 = C92947 * C1317;
    const double C101944 = C92947 * C984;
    const double C104022 = C92947 * C6632;
    const double C104018 = C92947 * C6627;
    const double C104255 = C92947 * C7032;
    const double C104334 = C57297 * C92947;
    const double C104496 = C92947 * C7401;
    const double C104494 = C92947 * C6908;
    const double C104826 = C92947 * C7759;
    const double C104822 = C92947 * C7754;
    const double C104818 = C92947 * C3443;
    const double C104814 = C92947 * C3438;
    const double C105149 = C92947 * C8091;
    const double C105145 = C92947 * C3668;
    const double C105467 = C92947 * C3882;
    const double C105465 = C92947 * C3594;
    const double C105459 = C92947 * C8422;
    const double C105457 = C92947 * C7979;
    const double C115438 = C92947 * C3445;
    const double C115434 = C92947 * C3439;
    const double C115832 = C92947 * C3669;
    const double C116232 = C92947 * C3883;
    const double C116230 = C92947 * C3595;
    const double C6527 = C6525 * C5815;
    const double C7644 = C6525 * C5814;
    const double C23508 = C6525 * C139873;
    const double C48858 = C6525 * C139873;
    const double C68434 = C6525 * C67750;
    const double C69464 = C6525 * C140012;
    const double C8653 = C8651 * C5814;
    const double C24455 = C8651 * C139873;
    const double C49796 = C8651 * C139873;
    const double C70388 = C8651 * C140012;
    const double C18751 = C15096 * C139736;
    const double C34180 = C15096 * C140010;
    const double C97486 = C15096 * C47132;
    const double C127352 = C15096 * C139736;
    const double C16184 = C14203 * C5811;
    const double C16177 = C14203 * C139736;
    const double C36742 = C14203 * C140010;
    const double C100048 = C14203 * C47132;
    const double C109351 = C14203 * C139731;
    const double C124888 = C14203 * C139967;
    const double C124885 = C14203 * C139736;
    const double C18762 = C18760 + C18755;
    const double C918 = C139824 * C904;
    const double C21886 = C139873 * C904;
    const double C47242 = C139873 * C904;
    const double C1763 = C139835 * C1749;
    const double C29650 = C139899 * C1749;
    const double C92973 = C139899 * C1749;
    const double C5921 = C5815 * C2980;
    const double C22744 = C139873 * C2980;
    const double C48097 = C139873 * C2980;
    const double C67856 = C67750 * C2980;
    const double C23721 = C139873 * C3526;
    const double C30372 = C139824 * C3526;
    const double C49071 = C139873 * C3526;
    const double C23823 = C139835 * C3600;
    const double C30486 = C139899 * C3600;
    const double C93804 = C139899 * C3600;
    const double C14042 = C13858 * C5403;
    const double C31473 = C139899 * C5403;
    const double C94780 = C139899 * C5403;
    const double C122935 = C122759 * C5403;
    const double C210 = C182 * C123;
    const double C293 = C265 * C123;
    const double C917 = C182 * C816;
    const double C1005 = C265 * C816;
    const double C21885 = C21861 * C816;
    const double C22611 = C21784 * C816;
    const double C47241 = C47217 * C816;
    const double C47964 = C47140 * C816;
    const double C1674 = C182 * C1573;
    const double C1762 = C265 * C1573;
    const double C29649 = C29625 * C1573;
    const double C31240 = C21784 * C1573;
    const double C92972 = C92948 * C1573;
    const double C94549 = C47140 * C1573;
    const double C5920 = C5896 * C2917;
    const double C6002 = C265 * C2917;
    const double C6669 = C5818 * C2917;
    const double C22743 = C21861 * C2917;
    const double C25419 = C21784 * C2917;
    const double C48096 = C47217 * C2917;
    const double C50756 = C47140 * C2917;
    const double C67855 = C67831 * C2917;
    const double C68566 = C137748 * C2917;
    const double C23720 = C21861 * C3447;
    const double C23822 = C265 * C3447;
    const double C26148 = C21784 * C3447;
    const double C30371 = C182 * C3447;
    const double C30485 = C29625 * C3447;
    const double C38064 = C5818 * C3447;
    const double C49070 = C47217 * C3447;
    const double C51485 = C47140 * C3447;
    const double C76367 = C137748 * C3447;
    const double C93803 = C92948 * C3447;
    const double C13940 = C182 * C5282;
    const double C14041 = C14017 * C5282;
    const double C15665 = C5818 * C5282;
    const double C31472 = C29625 * C5282;
    const double C36414 = C21784 * C5282;
    const double C94779 = C92948 * C5282;
    const double C99720 = C47140 * C5282;
    const double C122934 = C122910 * C5282;
    const double C124462 = C137748 * C5282;
    const double C22612 = C21777 * C825;
    const double C47965 = C47133 * C825;
    const double C22966 = C21777 * C1080;
    const double C48317 = C47133 * C1080;
    const double C31241 = C21777 * C1582;
    const double C94550 = C47133 * C1582;
    const double C31915 = C21777 * C2082;
    const double C95222 = C47133 * C2082;
    const double C7070 = C139736 * C3096;
    const double C25671 = C21777 * C3096;
    const double C51008 = C47133 * C3096;
    const double C68929 = C139736 * C3096;
    const double C26472 = C21777 * C3674;
    const double C38505 = C139736 * C3674;
    const double C51809 = C47133 * C3674;
    const double C76780 = C139736 * C3674;
    const double C26772 = C21777 * C3888;
    const double C38927 = C139736 * C3888;
    const double C52109 = C47133 * C3888;
    const double C77188 = C139736 * C3888;
    const double C16423 = C139736 * C5627;
    const double C36897 = C21777 * C5627;
    const double C100203 = C47133 * C5627;
    const double C125095 = C139736 * C5627;
    const double C22609 = C21784 * C815;
    const double C22960 = C21777 * C815;
    const double C47962 = C47140 * C815;
    const double C48311 = C47133 * C815;
    const double C31238 = C21784 * C1572;
    const double C31589 = C21777 * C1572;
    const double C94547 = C47140 * C1572;
    const double C94896 = C47133 * C1572;
    const double C6667 = C5818 * C2916;
    const double C7066 = C139736 * C2916;
    const double C25417 = C21784 * C2916;
    const double C25665 = C21777 * C2916;
    const double C50754 = C47140 * C2916;
    const double C51002 = C47133 * C2916;
    const double C68564 = C137748 * C2916;
    const double C68925 = C139736 * C2916;
    const double C26146 = C21784 * C3446;
    const double C26466 = C21777 * C3446;
    const double C38062 = C5818 * C3446;
    const double C38501 = C139736 * C3446;
    const double C51483 = C47140 * C3446;
    const double C51803 = C47133 * C3446;
    const double C76365 = C137748 * C3446;
    const double C76776 = C139736 * C3446;
    const double C15663 = C5818 * C5281;
    const double C16062 = C139736 * C5281;
    const double C36412 = C21784 * C5281;
    const double C36660 = C21777 * C5281;
    const double C99718 = C47140 * C5281;
    const double C99966 = C47133 * C5281;
    const double C124460 = C137748 * C5281;
    const double C124779 = C139736 * C5281;
    const double C138155 = C138115 + C138153;
    const double C14870 =
        (C138160 * C138244 + be * C138204 * C138869 +
         C138204 *
             (be * C138869 +
              C138204 * C138160 *
                  (C138234 + ae * C138780 +
                   C138038 * (ae * C138236 + C138038 * std::pow(C138044, 7) *
                                                 bs[7] * C138210)))) /
        C137733;
    const double C14661 = (C138160 * C138104 + C138869 * C138390) / C137729;
    const double C139112 = C139087 + C139110;
    const double C139328 = C139307 + C139326;
    const double C9877 =
        (3 * (C138261 + C138160 * C138647 + C138644 * ae) +
         C138160 * (2 * C138647 + C138160 * C138770 + C138759 * ae) +
         (2 * C138644 + C138160 * C138759) * ae) /
        C137729;
    const double C10741 =
        (C138204 * (2 * C138647 + C138160 * C138770 + C138759 * ae)) / C137729;
    const double C13383 =
        (C138261 + C138160 * C138647 + C138644 * ae + C138770 * C138390) /
        C137729;
    const double C21536 =
        (3 * (C138342 + C138204 * C138908 + C138905 * ae) +
         C138204 * (2 * C138908 + C138204 * C139050 + C139042 * ae) +
         (2 * C138905 + C138204 * C139042) * ae) /
        C137729;
    const double C9969 =
        (3 * (C138642 + ae * C138646 + be * C138647 + C138160 * C138762) +
         ae * (2 * C138646 + C138160 * C138769 + C138759 * be) +
         be * (2 * C138647 + C138160 * C138770 + C138759 * ae) +
         C138160 * (2 * C138762 + ae * C138769 + be * C138770 +
                    C138160 * (C138751 + ae * C138763 + be * C138764 +
                               C138160 * (ae * C138752 + be * C138755 +
                                          C138160 * C138038 *
                                              (C138111 * C138112 +
                                               C138292 * bs[7] *
                                                   std::pow(C138044, 7)) *
                                              C137731)))) /
        C137733;
    const double C10859 =
        (2 * (ae * C138204 * C138185 + be * C138204 * C138272 +
              C138160 * C138817) +
         ae * C138204 * C138769 + be * C138204 * C138770 +
         C138160 * (C138817 + ae * C138204 * C138763 + be * C138204 * C138764 +
                    C138160 * (ae * C138204 * C138752 + be * C138204 * C138755 +
                               C138160 * C138204 * C138038 *
                                   (C138111 * C138112 +
                                    C138292 * bs[7] * std::pow(C138044, 7)) *
                                   C137731))) /
        C137733;
    const double C11173 =
        (ae * (2 * C138646 + C138160 * C138769 + C138759 * be) +
         C138204 *
             (2 * C138799 + be * C138800 +
              C138160 * (C138795 + be * C138160 * C138796 +
                         C138160 * (be * C138796 + C138160 * C138038 *
                                                       std::pow(C138044, 7) *
                                                       bs[7] * C138375)))) /
        C137733;
    const double C13703 =
        (C138669 + be * C138794 + C138160 * C138799 + ae * C138204 * C138769 +
         C138204 *
             (ae * C138769 +
              C138204 * (C138795 + be * C138160 * C138796 +
                         C138160 * (be * C138796 + C138160 * C138038 *
                                                       std::pow(C138044, 7) *
                                                       bs[7] * C138375)))) /
        C137733;
    const double C9708 =
        (3 * (C138174 + C138160 * C138646 + C138644 * be) +
         C138160 * (2 * C138646 + C138160 * C138769 + C138759 * be) +
         (2 * C138644 + C138160 * C138759) * be) /
        C137729;
    const double C10529 =
        (C138204 * (2 * C138646 + C138160 * C138769 + C138759 * be)) / C137729;
    const double C13219 =
        (C138174 + C138160 * C138646 + C138644 * be + C138769 * C138390) /
        C137729;
    const double C21700 =
        (3 * (C138672 + ae * C138907 + be * C138908 + C138204 * C139039) +
         ae * (2 * C138907 + C138204 * C139049 + C139042 * be) +
         be * (2 * C138908 + C138204 * C139050 + C139042 * ae) +
         C138204 * (2 * C139039 + ae * C139049 + be * C139050 +
                    C138204 * (C138803 + ae * C139040 + be * C139043 +
                               C138204 * (ae * C138780 + be * C138796 +
                                          C138204 * C138038 *
                                              (C138111 * C138112 +
                                               C138390 * bs[7] *
                                                   std::pow(C138044, 7)) *
                                              C137731)))) /
        C137733;
    const double C21201 =
        (3 * (C138218 + C138204 * C138907 + C138905 * be) +
         C138204 * (2 * C138907 + C138204 * C139049 + C139042 * be) +
         (2 * C138905 + C138204 * C139042) * be) /
        C137729;
    const double C138154 = C138113 + C138152;
    const double C15300 =
        (C138160 * C138368 + ae * C138204 * C138874 +
         C138204 *
             (ae * C138874 +
              C138204 * C138160 *
                  (C138358 + be * C138796 +
                   C138038 * (be * C138360 + C138038 * std::pow(C138044, 7) *
                                                 bs[7] * C138334)))) /
        C137733;
    const double C14660 = (C138160 * C138103 + C138874 * C138390) / C137729;
    const double C139111 = C139082 + C139109;
    const double C139327 = C139301 + C139325;
    const double C67510 =
        (3 * (C138788 + C138204 * C138951 + C138946 * ae) +
         C138204 * (2 * C138951 + C138204 * C139252 + C139241 * ae) +
         (2 * C138946 + C138204 * C139241) * ae) /
        C137729;
    const double C67671 =
        (3 * (C138944 + ae * C138950 + be * C138951 + C138204 * C139244) +
         ae * (2 * C138950 + C138204 * C139251 + C139241 * be) +
         be * (2 * C138951 + C138204 * C139252 + C139241 * ae) +
         C138204 * (2 * C139244 + ae * C139251 + be * C139252 +
                    C138204 * (C139233 + ae * C139245 + be * C139246 +
                               C138204 * (ae * C139234 + be * C139237 +
                                          C138204 * C138160 *
                                              (C138111 * C138112 +
                                               C138390 * bs[7] *
                                                   std::pow(C138044, 7)) *
                                              C137731)))) /
        C137733;
    const double C67179 =
        (3 * (C138772 + C138204 * C138950 + C138946 * be) +
         C138204 * (2 * C138950 + C138204 * C139251 + C139241 * be) +
         (2 * C138946 + C138204 * C139241) * be) /
        C137729;
    const double C445 = C441 + C433;
    const double C1172 = C1169 + C1157;
    const double C1929 = C1926 + C1914;
    const double C30689 = C30688 + C30686;
    const double C14204 = C14202 + C14198;
    const double C15093 = C15091 - C15085;
    const double C90142 = C67750 * C11172;
    const double C105354 = C5815 * C11172;
    const double C65043 = C139873 * C13701;
    const double C92649 = C67750 * C13701;
    const double C107875 = C5815 * C13701;
    const double C135121 = C139873 * C13701;
    const double C89506 = C67750 * C10528;
    const double C89825 = C67831 * C10528;
    const double C104709 = C5815 * C10528;
    const double C105034 = C5896 * C10528;
    const double C64370 = C139873 * C13217;
    const double C64710 = C47217 * C13217;
    const double C92172 = C67750 * C13217;
    const double C92401 = C67831 * C13217;
    const double C107398 = C5815 * C13217;
    const double C107627 = C5896 * C13217;
    const double C134493 = C139873 * C13217;
    const double C134808 = C21861 * C13217;
    const double C111005 = C111004 + C111002;
    const double C112759 = C112758 + C112756;
    const double C736 = C732 + C724;
    const double C1494 = C1491 + C1479;
    const double C2251 = C2248 + C2236;
    const double C6526 = C6524 + C6518;
    const double C24459 = C24458 + C24453;
    const double C57580 = C57579 + C57577;
    const double C58245 = C58244 + C58242;
    const double C89828 = C67750 * C10858;
    const double C105037 = C5815 * C10858;
    const double C57303 = C54790 * C9876;
    const double C57408 = C265 * C9876;
    const double C57893 = C54790 * C10740;
    const double C58029 = C265 * C10740;
    const double C89053 = C29625 * C10740;
    const double C89827 = C67831 * C10740;
    const double C104257 = C92948 * C10740;
    const double C105036 = C5896 * C10740;
    const double C63746 = C54790 * C13382;
    const double C63900 = C14017 * C13382;
    const double C64712 = C47217 * C13382;
    const double C89938 = C29625 * C13382;
    const double C92403 = C67831 * C13382;
    const double C105151 = C92948 * C13382;
    const double C107629 = C5896 * C13382;
    const double C134046 = C122910 * C13382;
    const double C134810 = C21861 * C13382;
    const double C21377 = C16194 * C139736;
    const double C109352 = C16194 * C139731;
    const double C129921 = C16194 * C139736;
    const double C112865 = C54790 * C21535;
    const double C112919 = C182 * C21535;
    const double C7655 = C7654 * C5815;
    const double C69463 = C7654 * C67750;
    const double C8652 = C8650 * C5815;
    const double C70387 = C8650 * C67750;
    const double C22490 = C22486 + C22487;
    const double C47843 = C47839 + C47840;
    const double C137755 = C137754 - C137744;
    const double C137766 = C137765 / C137729;
    const double C6668 = C5819 * C2910;
    const double C6660 = C5819 * C811;
    const double C6652 = C5819 * C2909;
    const double C6644 = C5819 * C812;
    const double C9620 = C5819 * C6626;
    const double C10412 = C5819 * C3439;
    const double C10404 = C5819 * C7753;
    const double C15664 = C5819 * C5275;
    const double C15656 = C5819 * C1568;
    const double C15648 = C5819 * C5274;
    const double C15640 = C5819 * C1569;
    const double C18316 = C5819 * C13127;
    const double C21023 = C5819 * C15622;
    const double C38063 = C5819 * C3440;
    const double C22610 = C21785 * C810;
    const double C22598 = C21785 * C811;
    const double C25418 = C21785 * C2910;
    const double C26147 = C21785 * C3440;
    const double C31239 = C21785 * C1567;
    const double C31227 = C21785 * C1568;
    const double C36413 = C21785 * C5275;
    const double C47963 = C47141 * C810;
    const double C47951 = C47141 * C811;
    const double C50755 = C47141 * C2910;
    const double C51484 = C47141 * C3440;
    const double C94548 = C47141 * C1567;
    const double C94536 = C47141 * C1568;
    const double C99719 = C47141 * C5275;
    const double C55288 = C54791 * C6626;
    const double C55284 = C54791 * C2909;
    const double C55280 = C54791 * C812;
    const double C55276 = C54791 * C6627;
    const double C55272 = C54791 * C2908;
    const double C55268 = C54791 * C813;
    const double C57122 = C54791 * C9609;
    const double C57660 = C54791 * C3438;
    const double C57656 = C54791 * C7754;
    const double C57652 = C54791 * C10394;
    const double C60676 = C54791 * C13127;
    const double C60672 = C54791 * C3439;
    const double C60667 = C54791 * C13126;
    const double C61643 = C54791 * C5274;
    const double C61639 = C54791 * C1569;
    const double C61635 = C54791 * C5273;
    const double C61631 = C54791 * C1570;
    const double C63501 = C54791 * C13128;
    const double C64250 = C54791 * C18302;
    const double C67007 = C54791 * C15623;
    const double C85983 = C54791 * C7753;
    const double C109073 = C54791 * C15622;
    const double C112516 = C54791 * C21012;
    const double C68565 = C67754 * C2910;
    const double C68557 = C67754 * C811;
    const double C68549 = C67754 * C2909;
    const double C68541 = C67754 * C812;
    const double C71348 = C67754 * C6626;
    const double C72092 = C67754 * C3439;
    const double C72084 = C67754 * C7753;
    const double C76366 = C67754 * C3440;
    const double C77596 = C67754 * C1568;
    const double C77588 = C67754 * C1569;
    const double C80879 = C67754 * C13127;
    const double C84402 = C67754 * C5274;
    const double C124461 = C67754 * C5275;
    const double C129587 = C67754 * C15622;
    const double C9883 = C7051 - C7052;
    const double C9881 = C7047 - C7048;
    const double C10129 = C7412 - C7413;
    const double C9800 = C9798 + C9799;
    const double C43112 = C10749 - C10750;
    const double C43108 = C10750 - C10749;
    const double C43110 = C10745 - C10746;
    const double C43106 = C10746 - C10745;
    const double C43528 = C11067 - C11068;
    const double C43526 = C11068 - C11067;
    const double C21285 = C16047 - C16048;
    const double C21283 = C16043 - C16044;
    const double C21540 = C16412 - C16413;
    const double C21124 = C21122 + C21123;
    const double C137937 = C137824 / C137729;
    const double C6152 =
        (((-4 * C137809) / C137729 - C137824 / C137729) * ae) / C137738 +
        ((2 * ((0 * ae) / C137729 - C137809 / C137733) - C137824 / C137738) *
         ae) /
            C137729;
    const double C22116 =
        (((-4 * C137809) / C137729 - C137824 / C137729) * ae) / C137729;
    const double C47470 =
        -(((-4 * C137809) / C137729 - C137824 / C137729) * be) / C137729;
    const double C6176 = C6151 * C110;
    const double C6156 = C6151 * C109;
    const double C7181 = C6151 * C812;
    const double C8208 = C6151 * C1569;
    const double C102489 = C6151 * C1570;
    const double C105027 = C6151 * C3438;
    const double C107636 = C6151 * C5273;
    const double C6168 = C6153 * C2910;
    const double C6164 = C6153 * C2909;
    const double C7173 = C6153 * C6626;
    const double C8200 = C6153 * C7753;
    const double C102497 = C6153 * C7754;
    const double C105035 = C6153 * C10394;
    const double C107628 = C6153 * C13128;
    const double C22136 = C22117 * C810;
    const double C22132 = C22117 * C811;
    const double C22124 = C22117 * C812;
    const double C23074 = C22117 * C2909;
    const double C23066 = C22117 * C2910;
    const double C24029 = C22117 * C3439;
    const double C24021 = C22117 * C3440;
    const double C38637 = C22117 * C7753;
    const double C39918 = C22117 * C13127;
    const double C39913 = C22117 * C3438;
    const double C43253 = C22117 * C7754;
    const double C46649 = C22117 * C13126;
    const double C134809 = C22117 * C13128;
    const double C137401 = C22117 * C18302;
    const double C47490 = C47471 * C810;
    const double C47486 = C47471 * C811;
    const double C47478 = C47471 * C812;
    const double C48425 = C47471 * C2909;
    const double C48417 = C47471 * C2910;
    const double C49375 = C47471 * C3439;
    const double C49367 = C47471 * C3440;
    const double C62111 = C47471 * C13127;
    const double C62103 = C47471 * C13126;
    const double C62095 = C47471 * C3438;
    const double C64711 = C47471 * C13128;
    const double C64703 = C47471 * C7754;
    const double C67348 = C47471 * C18302;
    const double C76912 = C47471 * C7753;
    const double C68095 = C68080 * C2910;
    const double C68091 = C68080 * C2909;
    const double C69029 = C68080 * C6626;
    const double C69969 = C68080 * C7753;
    const double C87291 = C68080 * C7754;
    const double C89826 = C68080 * C10394;
    const double C92402 = C68080 * C13128;
    const double C137921 = C137918 - C137913;
    const double C21889 = C21875 - C21876;
    const double C21887 = C21871 - C21872;
    const double C22240 = C22236 + C22237;
    const double C22405 = C22397 - C22398;
    const double C39496 = C23710 - C23711;
    const double C39492 = C23711 - C23710;
    const double C39494 = C23706 - C23707;
    const double C39490 = C23707 - C23706;
    const double C40338 = C24344 - C24345;
    const double C40336 = C24345 - C24344;
    const double C137155 = C46351 - C46350;
    const double C137153 = C46347 - C46346;
    const double C137637 = C46957 - C46956;
    const double C137322 = C137318 + C137319;
    const double C47245 = C47231 - C47232;
    const double C47243 = C47227 - C47228;
    const double C47594 = C47590 + C47591;
    const double C47758 = C47750 - C47751;
    const double C77747 = C49060 - C49061;
    const double C77743 = C49061 - C49060;
    const double C77745 = C49056 - C49057;
    const double C77741 = C49057 - C49056;
    const double C78561 = C49688 - C49689;
    const double C78559 = C49689 - C49688;
    const double C67091 = C61768 - C61769;
    const double C67089 = C61764 - C61765;
    const double C67591 = C62438 - C62439;
    const double C67268 = C67266 + C67267;
    const double C138008 = C137850 / C137729;
    const double C14517 =
        (((-4 * C137835) / C137729 - C137850 / C137729) * ae) / C137738 +
        ((2 * ((0 * ae) / C137729 - C137835 / C137733) - C137850 / C137738) *
         ae) /
            C137729;
    const double C30126 =
        (((-4 * C137835) / C137729 - C137850 / C137729) * ae) / C137729;
    const double C93448 =
        -(((-4 * C137835) / C137729 - C137850 / C137729) * be) / C137729;
    const double C14541 = C14516 * C110;
    const double C14521 = C14516 * C109;
    const double C15513 = C14516 * C812;
    const double C16645 = C14516 * C1569;
    const double C61512 = C14516 * C813;
    const double C64135 = C14516 * C2908;
    const double C65152 = C14516 * C3438;
    const double C14533 = C14518 * C5275;
    const double C14529 = C14518 * C5274;
    const double C15505 = C14518 * C13127;
    const double C16637 = C14518 * C15622;
    const double C61520 = C14518 * C13126;
    const double C64127 = C14518 * C13128;
    const double C65144 = C14518 * C18302;
    const double C30146 = C30127 * C1567;
    const double C30142 = C30127 * C1568;
    const double C30134 = C30127 * C1569;
    const double C31101 = C30127 * C3439;
    const double C31093 = C30127 * C3440;
    const double C32122 = C30127 * C5274;
    const double C32114 = C30127 * C5275;
    const double C39202 = C30127 * C7753;
    const double C39197 = C30127 * C3438;
    const double C40477 = C30127 * C13127;
    const double C42555 = C30127 * C7754;
    const double C43797 = C30127 * C13126;
    const double C89288 = C30127 * C10394;
    const double C90242 = C30127 * C13128;
    const double C93468 = C93449 * C1567;
    const double C93464 = C93449 * C1568;
    const double C93456 = C93449 * C1569;
    const double C94410 = C93449 * C3439;
    const double C94402 = C93449 * C3440;
    const double C95428 = C93449 * C5274;
    const double C95420 = C93449 * C5275;
    const double C101965 = C93449 * C7753;
    const double C101957 = C93449 * C7754;
    const double C101949 = C93449 * C3438;
    const double C104491 = C93449 * C10394;
    const double C105462 = C93449 * C13126;
    const double C105454 = C93449 * C13128;
    const double C116227 = C93449 * C13127;
    const double C123408 = C123393 * C5275;
    const double C123404 = C123393 * C5274;
    const double C124338 = C123393 * C13127;
    const double C125293 = C123393 * C15622;
    const double C131807 = C123393 * C13126;
    const double C134271 = C123393 * C13128;
    const double C135221 = C123393 * C18302;
    const double C137992 = C137989 - C137984;
    const double C29653 = C29639 - C29640;
    const double C29651 = C29635 - C29636;
    const double C29892 = C29884 - C29885;
    const double C30049 = C30045 + C30046;
    const double C38354 = C30475 - C30476;
    const double C38350 = C30476 - C30475;
    const double C38352 = C30471 - C30472;
    const double C38348 = C30472 - C30471;
    const double C38786 = C30788 - C30789;
    const double C38784 = C30789 - C30788;
    const double C88810 = C41959 - C41958;
    const double C88808 = C41955 - C41954;
    const double C89049 = C42257 - C42256;
    const double C89134 = C89130 + C89131;
    const double C92976 = C92962 - C92963;
    const double C92974 = C92958 - C92959;
    const double C93215 = C93207 - C93208;
    const double C93372 = C93368 + C93369;
    const double C114250 = C93793 - C93794;
    const double C114246 = C93794 - C93793;
    const double C114248 = C93789 - C93790;
    const double C114244 = C93790 - C93789;
    const double C114648 = C94099 - C94100;
    const double C114646 = C94100 - C94099;
    const double C104016 = C101332 - C101333;
    const double C104014 = C101328 - C101329;
    const double C104253 = C101642 - C101643;
    const double C104338 = C104334 + C104335;
    const double C21376 = C16196 + C16177;
    const double C129920 = C124884 + C124885;
    const double C18764 = C18762 * C5811;
    const double C110998 = C18762 * C139731;
    const double C127353 = C18762 * C139967;
    const double C138157 = C138155 + C138137;
    const double C139114 = C139112 + C139102;
    const double C139330 = C139328 + C139309;
    const double C138156 = C138154 + C138134;
    const double C139113 = C139111 + C139099;
    const double C139329 = C139327 + C139304;
    const double C31699 = C1929 * C21777;
    const double C95006 = C1929 * C47133;
    const double C34181 = C30689 * C21777;
    const double C97487 = C30689 * C47133;
    const double C16185 = C14204 * C139736;
    const double C36741 = C14204 * C21777;
    const double C100047 = C14204 * C47133;
    const double C124889 = C14204 * C139736;
    const double C15095 = C15093 + C15086;
    const double C111006 = C111005 * C139731;
    const double C112760 = C112759 * C139731;
    const double C740 = C736 * C139824;
    const double C1497 = C1494 * C139824;
    const double C22488 = C1494 * C139873;
    const double C47841 = C1494 * C139873;
    const double C2254 = C2251 * C139824;
    const double C6528 = C6526 * C5815;
    const double C23506 = C6526 * C139873;
    const double C48856 = C6526 * C139873;
    const double C68435 = C6526 * C67750;
    const double C24460 = C24459 * C139873;
    const double C49794 = C24459 * C139873;
    const double C68562 = C137755 * C2915;
    const double C68560 = C137755 * C2914;
    const double C68554 = C137755 * C820;
    const double C68552 = C137755 * C819;
    const double C68546 = C137755 * C2913;
    const double C68544 = C137755 * C2912;
    const double C68538 = C137755 * C822;
    const double C68536 = C137755 * C821;
    const double C68926 = C137755 * C3091;
    const double C68922 = C137755 * C2909;
    const double C68918 = C137755 * C1073;
    const double C68914 = C137755 * C812;
    const double C68911 = C137755 * C3090;
    const double C68907 = C137755 * C2908;
    const double C68903 = C137755 * C1072;
    const double C68899 = C137755 * C813;
    const double C69257 = C137755 * C3257;
    const double C69253 = C137755 * C1318;
    const double C69250 = C137755 * C3256;
    const double C69246 = C137755 * C1317;
    const double C71353 = C137755 * C6632;
    const double C71351 = C137755 * C6631;
    const double C71510 = C9790 * C137755;
    const double C71599 = C137755 * C7032;
    const double C71595 = C137755 * C6627;
    const double C71830 = C137755 * C7401;
    const double C72097 = C137755 * C3443;
    const double C72095 = C137755 * C3442;
    const double C72089 = C137755 * C7759;
    const double C72087 = C137755 * C7758;
    const double C72417 = C137755 * C8091;
    const double C72413 = C137755 * C7754;
    const double C72409 = C137755 * C3668;
    const double C72405 = C137755 * C3438;
    const double C72719 = C137755 * C8422;
    const double C72715 = C137755 * C3882;
    const double C76363 = C137755 * C3445;
    const double C76361 = C137755 * C3444;
    const double C76777 = C137755 * C3669;
    const double C76773 = C137755 * C3439;
    const double C77185 = C137755 * C3883;
    const double C77593 = C137755 * C1577;
    const double C77591 = C137755 * C1576;
    const double C77585 = C137755 * C1579;
    const double C77583 = C137755 * C1578;
    const double C78025 = C137755 * C1830;
    const double C78021 = C137755 * C1569;
    const double C78018 = C137755 * C1829;
    const double C78014 = C137755 * C1570;
    const double C78425 = C137755 * C2075;
    const double C78422 = C137755 * C2074;
    const double C80884 = C137755 * C13131;
    const double C80882 = C137755 * C13130;
    const double C81295 = C137755 * C13380;
    const double C81291 = C137755 * C13126;
    const double C81697 = C137755 * C13618;
    const double C84407 = C137755 * C5278;
    const double C84405 = C137755 * C5277;
    const double C84713 = C137755 * C5455;
    const double C84709 = C137755 * C5273;
    const double C85011 = C137755 * C5621;
    const double C124458 = C137755 * C5280;
    const double C124456 = C137755 * C5279;
    const double C124780 = C137755 * C5456;
    const double C124776 = C137755 * C5274;
    const double C125092 = C137755 * C5622;
    const double C129592 = C137755 * C15628;
    const double C129590 = C137755 * C15627;
    const double C129674 = C21114 * C137755;
    const double C129837 = C137755 * C16028;
    const double C129833 = C137755 * C15623;
    const double C130073 = C137755 * C16401;
    const double C100 =
        ((((0 - (C137727 * C137728) / C137729) * ae) / C137729 -
          (0 * be) / C137738 + C137730 / C137729) /
             C137734 -
         ((C137727 * C137751 + 0) * be) / C137729) /
            C137734 +
        ((C137727 * (C137751 / C137734 -
                     ((C137727 * C137755 + C139967) * be) / C137729 + C137748) +
          C140009) *
         ae) /
            C137729 +
        C137755 / C137734 - ((C137727 * C137748 + C139736) * be) / C137729;
    const double C102 =
        (C137751 / C137734 - ((C137727 * C137755 + C139967) * be) / C137729 +
         C137748) /
            C137734 +
        ((C137727 * (C137755 / C137734 -
                     ((C137727 * C137748 + C139736) * be) / C137729) +
          C140010) *
         ae) /
            C137729 +
        2 * (C137748 / C137734 - (0 * be) / C137729);
    const double C104 =
        (C137755 / C137734 - ((C137727 * C137748 + C139736) * be) / C137729) /
            C137734 +
        ((C137727 * (C137748 / C137734 - (0 * be) / C137729) + C21777) * ae) /
            C137729;
    const double C21780 = C137751 / C137734 -
                          ((C137727 * C137755 + C139967) * be) / C137729 +
                          C137748;
    const double C21782 =
        C137755 / C137734 - ((C137727 * C137748 + C139736) * be) / C137729;
    const double C47136 = C137751 / C137734 +
                          ((C137727 * C137755 + C139967) * ae) / C137729 +
                          C137748;
    const double C47138 =
        C137755 / C137734 + ((C137727 * C137748 + C139736) * ae) / C137729;
    const double C137767 = C137763 - C137766;
    const double C6678 = C6667 - C6668;
    const double C6676 = C6659 - C6660;
    const double C6674 = C6651 - C6652;
    const double C6672 = C6643 - C6644;
    const double C9628 = C9619 - C9620;
    const double C10421 = C10411 - C10412;
    const double C10419 = C10403 - C10404;
    const double C15674 = C15663 - C15664;
    const double C15672 = C15655 - C15656;
    const double C15670 = C15647 - C15648;
    const double C15668 = C15639 - C15640;
    const double C18320 = C18315 - C18316;
    const double C21030 = C21022 - C21023;
    const double C38067 = C38062 - C38063;
    const double C22618 = C22609 - C22610;
    const double C22615 = C22597 - C22598;
    const double C25429 = C25417 - C25418;
    const double C26158 = C26146 - C26147;
    const double C31247 = C31238 - C31239;
    const double C31244 = C31226 - C31227;
    const double C36424 = C36412 - C36413;
    const double C47971 = C47962 - C47963;
    const double C47968 = C47950 - C47951;
    const double C50766 = C50754 - C50755;
    const double C51495 = C51483 - C51484;
    const double C94556 = C94547 - C94548;
    const double C94553 = C94535 - C94536;
    const double C99730 = C99718 - C99719;
    const double C55296 = C55287 - C55288;
    const double C55295 = C55283 - C55284;
    const double C55294 = C55279 - C55280;
    const double C55293 = C55275 - C55276;
    const double C55292 = C55271 - C55272;
    const double C55291 = C55267 - C55268;
    const double C57125 = C57121 - C57122;
    const double C57665 = C57659 - C57660;
    const double C57664 = C57655 - C57656;
    const double C57663 = C57651 - C57652;
    const double C60681 = C60675 - C60676;
    const double C60680 = C60671 - C60672;
    const double C60679 = C60666 - C60667;
    const double C61649 = C61642 - C61643;
    const double C61648 = C61638 - C61639;
    const double C61647 = C61634 - C61635;
    const double C61646 = C61630 - C61631;
    const double C63506 = C63500 - C63501;
    const double C64255 = C64249 - C64250;
    const double C67010 = C67006 - C67007;
    const double C85986 = C85982 - C85983;
    const double C109076 = C109072 - C109073;
    const double C112519 = C112515 - C112516;
    const double C68575 = C68564 - C68565;
    const double C68573 = C68556 - C68557;
    const double C68571 = C68548 - C68549;
    const double C68569 = C68540 - C68541;
    const double C71356 = C71347 - C71348;
    const double C72101 = C72091 - C72092;
    const double C72099 = C72083 - C72084;
    const double C76370 = C76365 - C76366;
    const double C77602 = C77595 - C77596;
    const double C77600 = C77587 - C77588;
    const double C80887 = C80878 - C80879;
    const double C84409 = C84401 - C84402;
    const double C124465 = C124460 - C124461;
    const double C129594 = C129586 - C129587;
    const double C9894 = C9883 + C9884;
    const double C9893 = C9881 + C9882;
    const double C10135 = C10129 + C10130;
    const double C9801 = C9800 + C9792;
    const double C43117 = C43112 + C43113;
    const double C43115 = C43108 + C43109;
    const double C43116 = C43110 + C43111;
    const double C43114 = C43106 + C43107;
    const double C43531 = C43528 + C43529;
    const double C43530 = C43526 + C43527;
    const double C21296 = C21285 + C21286;
    const double C21295 = C21283 + C21284;
    const double C21546 = C21540 + C21541;
    const double C21125 = C21124 + C21116;
    const double C137940 = C137939 - C137937;
    const double C6172 = C6152 * C811;
    const double C6160 = C6152 * C812;
    const double C7177 = C6152 * C2909;
    const double C8204 = C6152 * C3439;
    const double C102493 = C6152 * C3438;
    const double C105031 = C6152 * C7754;
    const double C107632 = C6152 * C13126;
    const double C22140 = C22116 * C111;
    const double C22128 = C22116 * C110;
    const double C22120 = C22116 * C109;
    const double C23078 = C22116 * C812;
    const double C23070 = C22116 * C811;
    const double C24033 = C22116 * C1569;
    const double C24025 = C22116 * C1568;
    const double C38641 = C22116 * C3439;
    const double C39922 = C22116 * C5274;
    const double C39909 = C22116 * C1570;
    const double C43249 = C22116 * C3438;
    const double C46653 = C22116 * C5273;
    const double C134805 = C22116 * C13126;
    const double C137405 = C22116 * C15623;
    const double C47494 = C47470 * C111;
    const double C47482 = C47470 * C110;
    const double C47474 = C47470 * C109;
    const double C48429 = C47470 * C812;
    const double C48421 = C47470 * C811;
    const double C49379 = C47470 * C1569;
    const double C49371 = C47470 * C1568;
    const double C62107 = C47470 * C5274;
    const double C62099 = C47470 * C5273;
    const double C62091 = C47470 * C1570;
    const double C64707 = C47470 * C13126;
    const double C64699 = C47470 * C3438;
    const double C67352 = C47470 * C15623;
    const double C76916 = C47470 * C3439;
    const double C6184 = C6175 - C6176;
    const double C6179 = C6155 - C6156;
    const double C7186 = C7180 - C7181;
    const double C8213 = C8207 - C8208;
    const double C102500 = C102488 - C102489;
    const double C105038 = C105026 - C105027;
    const double C107641 = C107635 - C107636;
    const double C6182 = C6167 - C6168;
    const double C6181 = C6163 - C6164;
    const double C7184 = C7172 - C7173;
    const double C8211 = C8199 - C8200;
    const double C102502 = C102496 - C102497;
    const double C105040 = C105034 - C105035;
    const double C107639 = C107627 - C107628;
    const double C22147 = C22135 - C22136;
    const double C22146 = C22131 - C22132;
    const double C22144 = C22123 - C22124;
    const double C23083 = C23073 - C23074;
    const double C23081 = C23065 - C23066;
    const double C24038 = C24028 - C24029;
    const double C24036 = C24020 - C24021;
    const double C38644 = C38636 - C38637;
    const double C39928 = C39917 - C39918;
    const double C39927 = C39912 - C39913;
    const double C43257 = C43252 - C43253;
    const double C46656 = C46648 - C46649;
    const double C134813 = C134808 - C134809;
    const double C137409 = C137400 - C137401;
    const double C47501 = C47489 - C47490;
    const double C47500 = C47485 - C47486;
    const double C47498 = C47477 - C47478;
    const double C48434 = C48424 - C48425;
    const double C48432 = C48416 - C48417;
    const double C49384 = C49374 - C49375;
    const double C49382 = C49366 - C49367;
    const double C62119 = C62110 - C62111;
    const double C62117 = C62102 - C62103;
    const double C62115 = C62094 - C62095;
    const double C64717 = C64710 - C64711;
    const double C64715 = C64702 - C64703;
    const double C67356 = C67347 - C67348;
    const double C76919 = C76911 - C76912;
    const double C68109 = C68094 - C68095;
    const double C68108 = C68090 - C68091;
    const double C69040 = C69028 - C69029;
    const double C69980 = C69968 - C69969;
    const double C87296 = C87290 - C87291;
    const double C89831 = C89825 - C89826;
    const double C92413 = C92401 - C92402;
    const double C54842 =
        ((((0 - (C137789 * C137910) / C137729) * ae) / C137729 -
          (0 * be) / C137738 + C137807 / C137729) /
             C137734 -
         ((C137789 * C137925 + 0) * be) / C137729) /
            C137734 +
        ((C137789 * (C137925 / C137734 -
                     ((C137789 * C137921 + C139983) * be) / C137729 + C137922) +
          C140011) *
         ae) /
            C137729 +
        C137921 / C137734 - ((C137789 * C137922 + C139873) * be) / C137729;
    const double C54843 =
        (C137925 / C137734 - ((C137789 * C137921 + C139983) * be) / C137729 +
         C137922) /
            C137734 +
        ((C137789 * (C137921 / C137734 -
                     ((C137789 * C137922 + C139873) * be) / C137729) +
          C140012) *
         ae) /
            C137729 +
        2 * (C137922 / C137734 - (0 * be) / C137729);
    const double C54844 =
        (C137921 / C137734 - ((C137789 * C137922 + C139873) * be) / C137729) /
            C137734 +
        ((C137789 * (C137922 / C137734 - (0 * be) / C137729) + C67750) * ae) /
            C137729;
    const double C67829 = C137925 / C137734 -
                          ((C137789 * C137921 + C139983) * be) / C137729 +
                          C137922;
    const double C67830 =
        C137921 / C137734 - ((C137789 * C137922 + C139873) * be) / C137729;
    const double C21892 = C21889 + C21890;
    const double C21891 = C21887 + C21888;
    const double C22242 = C22240 + C22238;
    const double C22407 = C22405 + C22406;
    const double C39509 = C39496 + C39497;
    const double C39507 = C39492 + C39493;
    const double C39508 = C39494 + C39495;
    const double C39506 = C39490 + C39491;
    const double C40345 = C40338 + C40339;
    const double C40344 = C40336 + C40337;
    const double C137166 = C137155 + C137156;
    const double C137165 = C137153 + C137154;
    const double C137643 = C137637 + C137638;
    const double C137323 = C137322 + C137320;
    const double C47248 = C47245 + C47246;
    const double C47247 = C47243 + C47244;
    const double C47595 = C47594 + C47592;
    const double C47760 = C47758 + C47759;
    const double C77752 = C77747 + C77748;
    const double C77750 = C77743 + C77744;
    const double C77751 = C77745 + C77746;
    const double C77749 = C77741 + C77742;
    const double C78564 = C78561 + C78562;
    const double C78563 = C78559 + C78560;
    const double C67102 = C67091 + C67092;
    const double C67101 = C67089 + C67090;
    const double C67597 = C67591 + C67592;
    const double C67269 = C67268 + C67260;
    const double C138011 = C138010 - C138008;
    const double C14537 = C14517 * C1568;
    const double C14525 = C14517 * C1569;
    const double C15509 = C14517 * C3439;
    const double C16641 = C14517 * C5274;
    const double C61516 = C14517 * C3438;
    const double C64131 = C14517 * C7754;
    const double C65148 = C14517 * C13126;
    const double C30150 = C30126 * C111;
    const double C30138 = C30126 * C110;
    const double C30130 = C30126 * C109;
    const double C31105 = C30126 * C812;
    const double C31097 = C30126 * C811;
    const double C32126 = C30126 * C1569;
    const double C32118 = C30126 * C1568;
    const double C39206 = C30126 * C2909;
    const double C39193 = C30126 * C813;
    const double C40481 = C30126 * C3439;
    const double C42559 = C30126 * C2908;
    const double C43801 = C30126 * C3438;
    const double C89292 = C30126 * C6627;
    const double C90246 = C30126 * C7754;
    const double C93472 = C93448 * C111;
    const double C93460 = C93448 * C110;
    const double C93452 = C93448 * C109;
    const double C94414 = C93448 * C812;
    const double C94406 = C93448 * C811;
    const double C95432 = C93448 * C1569;
    const double C95424 = C93448 * C1568;
    const double C101961 = C93448 * C2909;
    const double C101953 = C93448 * C2908;
    const double C101945 = C93448 * C813;
    const double C104495 = C93448 * C6627;
    const double C105466 = C93448 * C3438;
    const double C105458 = C93448 * C7754;
    const double C116231 = C93448 * C3439;
    const double C14549 = C14540 - C14541;
    const double C14544 = C14520 - C14521;
    const double C15518 = C15512 - C15513;
    const double C16650 = C16644 - C16645;
    const double C61523 = C61511 - C61512;
    const double C64140 = C64134 - C64135;
    const double C65157 = C65151 - C65152;
    const double C14547 = C14532 - C14533;
    const double C14546 = C14528 - C14529;
    const double C15516 = C15504 - C15505;
    const double C16648 = C16636 - C16637;
    const double C61525 = C61519 - C61520;
    const double C64138 = C64126 - C64127;
    const double C65155 = C65143 - C65144;
    const double C30157 = C30145 - C30146;
    const double C30156 = C30141 - C30142;
    const double C30154 = C30133 - C30134;
    const double C31110 = C31100 - C31101;
    const double C31108 = C31092 - C31093;
    const double C32131 = C32121 - C32122;
    const double C32129 = C32113 - C32114;
    const double C39212 = C39201 - C39202;
    const double C39211 = C39196 - C39197;
    const double C40484 = C40476 - C40477;
    const double C42562 = C42554 - C42555;
    const double C43804 = C43796 - C43797;
    const double C89295 = C89287 - C89288;
    const double C90249 = C90241 - C90242;
    const double C93479 = C93467 - C93468;
    const double C93478 = C93463 - C93464;
    const double C93476 = C93455 - C93456;
    const double C94419 = C94409 - C94410;
    const double C94417 = C94401 - C94402;
    const double C95437 = C95427 - C95428;
    const double C95435 = C95419 - C95420;
    const double C101973 = C101964 - C101965;
    const double C101971 = C101956 - C101957;
    const double C101969 = C101948 - C101949;
    const double C104498 = C104490 - C104491;
    const double C105471 = C105461 - C105462;
    const double C105469 = C105453 - C105454;
    const double C116234 = C116226 - C116227;
    const double C123422 = C123407 - C123408;
    const double C123421 = C123403 - C123404;
    const double C124349 = C124337 - C124338;
    const double C125304 = C125292 - C125293;
    const double C131812 = C131806 - C131807;
    const double C134282 = C134270 - C134271;
    const double C135232 = C135220 - C135221;
    const double C108103 =
        ((((0 - (C137792 * C137981) / C137729) * ae) / C137729 -
          (0 * be) / C137738 + C137833 / C137729) /
             C137734 -
         ((C137792 * C137996 + 0) * be) / C137729) /
            C137734 +
        ((C137792 * (C137996 / C137734 -
                     ((C137792 * C137992 + C139984) * be) / C137729 + C137993) +
          C140013) *
         ae) /
            C137729 +
        C137992 / C137734 - ((C137792 * C137993 + C139899) * be) / C137729;
    const double C108104 =
        (C137996 / C137734 - ((C137792 * C137992 + C139984) * be) / C137729 +
         C137993) /
            C137734 +
        ((C137792 * (C137992 / C137734 -
                     ((C137792 * C137993 + C139899) * be) / C137729) +
          C140014) *
         ae) /
            C137729 +
        2 * (C137993 / C137734 - (0 * be) / C137729);
    const double C108105 =
        (C137992 / C137734 - ((C137792 * C137993 + C139899) * be) / C137729) /
            C137734 +
        ((C137792 * (C137993 / C137734 - (0 * be) / C137729) + C122759) * ae) /
            C137729;
    const double C122908 = C137996 / C137734 -
                           ((C137792 * C137992 + C139984) * be) / C137729 +
                           C137993;
    const double C122909 =
        C137992 / C137734 - ((C137792 * C137993 + C139899) * be) / C137729;
    const double C29656 = C29653 + C29654;
    const double C29655 = C29651 + C29652;
    const double C29894 = C29892 + C29893;
    const double C30051 = C30049 + C30047;
    const double C38367 = C38354 + C38355;
    const double C38365 = C38350 + C38351;
    const double C38366 = C38352 + C38353;
    const double C38364 = C38348 + C38349;
    const double C38793 = C38786 + C38787;
    const double C38792 = C38784 + C38785;
    const double C88821 = C88810 + C88811;
    const double C88820 = C88808 + C88809;
    const double C89055 = C89049 + C89050;
    const double C89136 = C89134 + C89132;
    const double C92979 = C92976 + C92977;
    const double C92978 = C92974 + C92975;
    const double C93217 = C93215 + C93216;
    const double C93373 = C93372 + C93370;
    const double C114255 = C114250 + C114251;
    const double C114253 = C114246 + C114247;
    const double C114254 = C114248 + C114249;
    const double C114252 = C114244 + C114245;
    const double C114651 = C114648 + C114649;
    const double C114650 = C114646 + C114647;
    const double C104027 = C104016 + C104017;
    const double C104026 = C104014 + C104015;
    const double C104259 = C104253 + C104254;
    const double C104339 = C104338 + C104336;
    const double C905 =
        (be * (3 * C138104 + C138038 * C138157 + C138140 * ae) +
         C138160 *
             (3 * C138200 + ae * C138201 +
              C138038 * (2 * C138196 + ae * C138197 +
                         C138038 * (C138190 + ae * C138038 * C138192 +
                                    C138038 * (ae * C138192 +
                                               C138038 * std::pow(C138044, 7) *
                                                   bs[7] * C138166))))) /
        C137733;
    const double C1750 =
        (be * (3 * C138104 + C138038 * C138157 + C138140 * ae) +
         C138204 *
             (3 * C138244 + ae * C138245 +
              C138038 * (2 * C138240 + ae * C138241 +
                         C138038 * (C138234 + ae * C138038 * C138236 +
                                    C138038 * (ae * C138236 +
                                               C138038 * std::pow(C138044, 7) *
                                                   bs[7] * C138210))))) /
        C137733;
    const double C2981 =
        (2 * C138182 + ae * C138183 + C138038 * C138200 +
         be * C138160 * C138157 +
         C138160 *
             (be * C138157 +
              C138160 * (2 * C138196 + ae * C138197 +
                         C138038 * (C138190 + ae * C138038 * C138192 +
                                    C138038 * (ae * C138192 +
                                               C138038 * std::pow(C138044, 7) *
                                                   bs[7] * C138166))))) /
        C137733;
    const double C3527 =
        (C138204 *
         (be * C138157 +
          C138160 * (2 * C138196 + ae * C138197 +
                     C138038 * (C138190 + ae * C138038 * C138192 +
                                C138038 * (ae * C138192 +
                                           C138038 * std::pow(C138044, 7) *
                                               bs[7] * C138166))))) /
        C137733;
    const double C3601 =
        (be * C138160 * C138157 +
         C138204 * C138160 *
             (2 * C138240 + ae * C138241 +
              C138038 *
                  (C138234 + ae * C138038 * C138236 +
                   C138038 * (ae * C138236 + C138038 * std::pow(C138044, 7) *
                                                 bs[7] * C138210)))) /
        C137733;
    const double C5404 =
        (2 * C138226 + ae * C138227 + C138038 * C138244 +
         be * C138204 * C138157 +
         C138204 *
             (be * C138157 +
              C138204 * (2 * C138240 + ae * C138241 +
                         C138038 * (C138234 + ae * C138038 * C138236 +
                                    C138038 * (ae * C138236 +
                                               C138038 * std::pow(C138044, 7) *
                                                   bs[7] * C138210))))) /
        C137733;
    const double C125 =
        (4 * (2 * C138070 + C138038 * C138104 + C138088 * ae) +
         C138038 * (3 * C138104 + C138038 * C138157 + C138140 * ae) +
         (3 * C138088 + C138038 * C138140) * ae) /
        C137729;
    const double C824 =
        (C138160 * (3 * C138104 + C138038 * C138157 + C138140 * ae)) / C137729;
    const double C1581 =
        (C138204 * (3 * C138104 + C138038 * C138157 + C138140 * ae)) / C137729;
    const double C2919 =
        (2 * C138070 + C138038 * C138104 + C138088 * ae + C138157 * C138292) /
        C137729;
    const double C3449 = (C138204 * C138160 * C138157) / C137729;
    const double C5284 =
        (2 * C138070 + C138038 * C138104 + C138088 * ae + C138157 * C138390) /
        C137729;
    const double C57294 =
        (4 * (2 * C138653 + C138160 * C138748 + C138740 * ae) +
         C138160 * (3 * C138748 + C138160 * C139114 + C139105 * ae) +
         (3 * C138740 + C138160 * C139105) * ae) /
        C137729;
    const double C57880 =
        (C138204 * (3 * C138748 + C138160 * C139114 + C139105 * ae)) / C137729;
    const double C59641 =
        (2 * C138653 + C138160 * C138748 + C138740 * ae + C139114 * C138390) /
        C137729;
    const double C112861 =
        (4 * (2 * C138914 + C138204 * C139031 + C139023 * ae) +
         C138204 * (3 * C139031 + C138204 * C139330 + C139314 * ae) +
         (3 * C139023 + C138204 * C139314) * ae) /
        C137729;
    const double C131 =
        (4 * (2 * C138100 + ae * C138103 + be * C138104 + C138038 * C138151) +
         ae * (3 * C138103 + C138038 * C138156 + C138140 * be) +
         be * (3 * C138104 + C138038 * C138157 + C138140 * ae) +
         C138038 *
             (3 * C138151 + ae * C138156 + be * C138157 +
              C138038 * (2 * C138145 + ae * C138149 + be * C138150 +
                         C138038 * (C138138 + ae * C138139 + be * C138141 +
                                    C138038 * (ae * C138127 + be * C138130 +
                                               C138038 *
                                                   (C138111 * C138112 +
                                                    C138042 * bs[7] *
                                                        std::pow(C138044, 7)) *
                                                   C137731))))) /
        C137733;
    const double C829 =
        (3 * (C138409 + ae * C138160 * C138095 + be * C138160 * C138096 +
              C138038 * C138421) +
         ae * C138160 * C138156 + be * C138160 * C138157 +
         C138038 *
             (2 * C138421 + ae * C138160 * C138149 + be * C138160 * C138150 +
              C138038 *
                  (C138416 + ae * C138160 * C138139 + be * C138160 * C138141 +
                   C138038 * (ae * C138160 * C138127 + be * C138160 * C138130 +
                              C138038 * C138160 *
                                  (C138111 * C138112 +
                                   C138042 * bs[7] * std::pow(C138044, 7)) *
                                  C137731)))) /
        C137733;
    const double C1081 =
        (ae * (3 * C138103 + C138038 * C138156 + C138140 * be) +
         C138160 *
             (3 * C138287 + be * C138288 +
              C138038 * (2 * C138283 + be * C138284 +
                         C138038 * (C138277 + be * C138038 * C138279 +
                                    C138038 * (be * C138279 +
                                               C138038 * std::pow(C138044, 7) *
                                                   bs[7] * C138253))))) /
        C137733;
    const double C1586 =
        (3 * (C138463 + ae * C138204 * C138095 + be * C138204 * C138096 +
              C138038 * C138475) +
         ae * C138204 * C138156 + be * C138204 * C138157 +
         C138038 *
             (2 * C138475 + ae * C138204 * C138149 + be * C138204 * C138150 +
              C138038 *
                  (C138470 + ae * C138204 * C138139 + be * C138204 * C138141 +
                   C138038 * (ae * C138204 * C138127 + be * C138204 * C138130 +
                              C138038 * C138204 *
                                  (C138111 * C138112 +
                                   C138042 * bs[7] * std::pow(C138044, 7)) *
                                  C137731)))) /
        C137733;
    const double C2083 =
        (ae * (3 * C138103 + C138038 * C138156 + C138140 * be) +
         C138204 *
             (3 * C138368 + be * C138369 +
              C138038 * (2 * C138364 + be * C138365 +
                         C138038 * (C138358 + be * C138038 * C138360 +
                                    C138038 * (be * C138360 +
                                               C138038 * std::pow(C138044, 7) *
                                                   bs[7] * C138334))))) /
        C137733;
    const double C3097 =
        (2 * C138269 + be * C138270 + C138038 * C138287 +
         ae * C138160 * C138156 +
         C138160 *
             (ae * C138156 +
              C138160 * (2 * C138283 + be * C138284 +
                         C138038 * (C138277 + be * C138038 * C138279 +
                                    C138038 * (be * C138279 +
                                               C138038 * std::pow(C138044, 7) *
                                                   bs[7] * C138253))))) /
        C137733;
    const double C3675 =
        (ae * C138204 * C138156 +
         C138160 * C138204 *
             (2 * C138283 + be * C138284 +
              C138038 *
                  (C138277 + be * C138038 * C138279 +
                   C138038 * (be * C138279 + C138038 * std::pow(C138044, 7) *
                                                 bs[7] * C138253)))) /
        C137733;
    const double C3889 =
        (ae * C138160 * C138156 +
         C138204 * C138160 *
             (2 * C138364 + be * C138365 +
              C138038 *
                  (C138358 + be * C138038 * C138360 +
                   C138038 * (be * C138360 + C138038 * std::pow(C138044, 7) *
                                                 bs[7] * C138334)))) /
        C137733;
    const double C5628 =
        (2 * C138350 + be * C138351 + C138038 * C138368 +
         ae * C138204 * C138156 +
         C138204 *
             (ae * C138156 +
              C138204 * (2 * C138364 + be * C138365 +
                         C138038 * (C138358 + be * C138038 * C138360 +
                                    C138038 * (be * C138360 +
                                               C138038 * std::pow(C138044, 7) *
                                                   bs[7] * C138334))))) /
        C137733;
    const double C124 =
        (4 * (2 * C138069 + C138038 * C138103 + C138088 * be) +
         C138038 * (3 * C138103 + C138038 * C138156 + C138140 * be) +
         (3 * C138088 + C138038 * C138140) * be) /
        C137729;
    const double C823 =
        (C138160 * (3 * C138103 + C138038 * C138156 + C138140 * be)) / C137729;
    const double C1580 =
        (C138204 * (3 * C138103 + C138038 * C138156 + C138140 * be)) / C137729;
    const double C2918 =
        (2 * C138069 + C138038 * C138103 + C138088 * be + C138156 * C138292) /
        C137729;
    const double C3448 = (C138204 * C138160 * C138156) / C137729;
    const double C5283 =
        (2 * C138069 + C138038 * C138103 + C138088 * be + C138156 * C138390) /
        C137729;
    const double C57354 =
        (4 * (2 * C138737 + ae * C138747 + be * C138748 + C138160 * C139103) +
         ae * (3 * C138747 + C138160 * C139113 + C139105 * be) +
         be * (3 * C138748 + C138160 * C139114 + C139105 * ae) +
         C138160 *
             (3 * C139103 + ae * C139113 + be * C139114 +
              C138160 * (2 * C139090 + ae * C139107 + be * C139108 +
                         C138160 * (C138307 + ae * C139091 + be * C139094 +
                                    C138160 * (ae * C138192 + be * C138279 +
                                               C138160 *
                                                   (C138111 * C138112 +
                                                    C138292 * bs[7] *
                                                        std::pow(C138044, 7)) *
                                                   C137731))))) /
        C137733;
    const double C57960 =
        (3 * (C138815 + ae * C138204 * C138738 + be * C138204 * C138741 +
              C138160 * C139160) +
         ae * C138204 * C139113 + be * C138204 * C139114 +
         C138160 *
             (2 * C139160 + ae * C138204 * C139107 + be * C138204 * C139108 +
              C138160 *
                  (C139155 + ae * C138204 * C139091 + be * C138204 * C139094 +
                   C138160 * (ae * C138204 * C138192 + be * C138204 * C138279 +
                              C138160 * C138204 *
                                  (C138111 * C138112 +
                                   C138292 * bs[7] * std::pow(C138044, 7)) *
                                  C137731)))) /
        C137733;
    const double C58170 =
        (ae * (3 * C138747 + C138160 * C139113 + C139105 * be) +
         C138204 *
             (3 * C139140 + be * C139141 +
              C138160 * (2 * C139136 + be * C139137 +
                         C138160 * (C138384 + be * C138160 * C138360 +
                                    C138160 * (be * C138360 +
                                               C138160 * std::pow(C138044, 7) *
                                                   bs[7] * C138375))))) /
        C137733;
    const double C59847 =
        (2 * C138791 + be * C138792 + C138160 * C139140 +
         ae * C138204 * C139113 +
         C138204 *
             (ae * C139113 +
              C138204 * (2 * C139136 + be * C139137 +
                         C138160 * (C138384 + be * C138160 * C138360 +
                                    C138160 * (be * C138360 +
                                               C138160 * std::pow(C138044, 7) *
                                                   bs[7] * C138375))))) /
        C137733;
    const double C57178 =
        (4 * (2 * C138652 + C138160 * C138747 + C138740 * be) +
         C138160 * (3 * C138747 + C138160 * C139113 + C139105 * be) +
         (3 * C138740 + C138160 * C139105) * be) /
        C137729;
    const double C57740 =
        (C138204 * (3 * C138747 + C138160 * C139113 + C139105 * be)) / C137729;
    const double C59537 =
        (2 * C138652 + C138160 * C138747 + C138740 * be + C139113 * C138390) /
        C137729;
    const double C112970 =
        (4 * (2 * C139020 + ae * C139030 + be * C139031 + C138204 * C139320) +
         ae * (3 * C139030 + C138204 * C139329 + C139314 * be) +
         be * (3 * C139031 + C138204 * C139330 + C139314 * ae) +
         C138204 *
             (3 * C139320 + ae * C139329 + be * C139330 +
              C138204 * (2 * C139311 + ae * C139323 + be * C139324 +
                         C138204 * (C138405 + ae * C139312 + be * C139315 +
                                    C138204 * (ae * C138236 + be * C138360 +
                                               C138204 *
                                                   (C138111 * C138112 +
                                                    C138390 * bs[7] *
                                                        std::pow(C138044, 7)) *
                                                   C137731))))) /
        C137733;
    const double C112635 =
        (4 * (2 * C138913 + C138204 * C139030 + C139023 * be) +
         C138204 * (3 * C139030 + C138204 * C139329 + C139314 * be) +
         (3 * C139023 + C138204 * C139314) * be) /
        C137729;
    const double C18756 = C15095 * C139736;
    const double C127354 = C15095 * C139736;
    const double C71593 = C68910 - C68911;
    const double C71591 = C68906 - C68907;
    const double C71828 = C69249 - C69250;
    const double C71514 = C71510 + C71511;
    const double C81289 = C72409 - C72410;
    const double C81285 = C72410 - C72409;
    const double C81287 = C72405 - C72406;
    const double C81283 = C72406 - C72405;
    const double C81695 = C72715 - C72716;
    const double C81693 = C72716 - C72715;
    const double C129831 = C84714 - C84713;
    const double C129829 = C84710 - C84709;
    const double C130071 = C85012 - C85011;
    const double C129678 = C129674 + C129675;
    const double C22603 = C21780 * C820;
    const double C22601 = C21780 * C819;
    const double C22591 = C21780 * C822;
    const double C22589 = C21780 * C821;
    const double C22961 = C21780 * C1073;
    const double C22955 = C21780 * C812;
    const double C22950 = C21780 * C1072;
    const double C22944 = C21780 * C813;
    const double C23296 = C21780 * C1318;
    const double C23291 = C21780 * C1317;
    const double C25427 = C21780 * C2913;
    const double C25425 = C21780 * C2912;
    const double C25666 = C21780 * C3090;
    const double C25660 = C21780 * C2908;
    const double C25894 = C21780 * C3256;
    const double C26156 = C21780 * C3443;
    const double C26154 = C21780 * C3442;
    const double C26467 = C21780 * C3668;
    const double C26461 = C21780 * C3438;
    const double C26767 = C21780 * C3882;
    const double C31232 = C21780 * C1577;
    const double C31230 = C21780 * C1576;
    const double C31220 = C21780 * C1579;
    const double C31218 = C21780 * C1578;
    const double C31590 = C21780 * C1830;
    const double C31584 = C21780 * C1569;
    const double C31579 = C21780 * C1829;
    const double C31573 = C21780 * C1570;
    const double C31910 = C21780 * C2075;
    const double C31905 = C21780 * C2074;
    const double C36422 = C21780 * C5278;
    const double C36420 = C21780 * C5277;
    const double C36661 = C21780 * C5455;
    const double C36655 = C21780 * C5273;
    const double C36892 = C21780 * C5621;
    const double C22607 = C21782 * C818;
    const double C22605 = C21782 * C817;
    const double C22595 = C21782 * C820;
    const double C22593 = C21782 * C819;
    const double C22963 = C21782 * C1074;
    const double C22957 = C21782 * C811;
    const double C22952 = C21782 * C1073;
    const double C22946 = C21782 * C812;
    const double C23298 = C21782 * C1319;
    const double C23293 = C21782 * C1318;
    const double C25423 = C21782 * C2915;
    const double C25421 = C21782 * C2914;
    const double C25668 = C21782 * C3091;
    const double C25662 = C21782 * C2909;
    const double C25896 = C21782 * C3257;
    const double C26152 = C21782 * C3445;
    const double C26150 = C21782 * C3444;
    const double C26469 = C21782 * C3669;
    const double C26463 = C21782 * C3439;
    const double C26769 = C21782 * C3883;
    const double C31236 = C21782 * C1575;
    const double C31234 = C21782 * C1574;
    const double C31224 = C21782 * C1577;
    const double C31222 = C21782 * C1576;
    const double C31592 = C21782 * C1831;
    const double C31586 = C21782 * C1568;
    const double C31581 = C21782 * C1830;
    const double C31575 = C21782 * C1569;
    const double C31912 = C21782 * C2076;
    const double C31907 = C21782 * C2075;
    const double C36418 = C21782 * C5280;
    const double C36416 = C21782 * C5279;
    const double C36663 = C21782 * C5456;
    const double C36657 = C21782 * C5274;
    const double C36894 = C21782 * C5622;
    const double C47956 = C47136 * C820;
    const double C47954 = C47136 * C819;
    const double C47944 = C47136 * C822;
    const double C47942 = C47136 * C821;
    const double C48312 = C47136 * C1073;
    const double C48306 = C47136 * C812;
    const double C48301 = C47136 * C1072;
    const double C48295 = C47136 * C813;
    const double C48646 = C47136 * C1318;
    const double C48641 = C47136 * C1317;
    const double C50764 = C47136 * C2913;
    const double C50762 = C47136 * C2912;
    const double C51003 = C47136 * C3090;
    const double C50997 = C47136 * C2908;
    const double C51231 = C47136 * C3256;
    const double C51493 = C47136 * C3443;
    const double C51491 = C47136 * C3442;
    const double C51804 = C47136 * C3668;
    const double C51798 = C47136 * C3438;
    const double C52104 = C47136 * C3882;
    const double C94541 = C47136 * C1577;
    const double C94539 = C47136 * C1576;
    const double C94529 = C47136 * C1579;
    const double C94527 = C47136 * C1578;
    const double C94897 = C47136 * C1830;
    const double C94891 = C47136 * C1569;
    const double C94886 = C47136 * C1829;
    const double C94880 = C47136 * C1570;
    const double C95217 = C47136 * C2075;
    const double C95212 = C47136 * C2074;
    const double C99728 = C47136 * C5278;
    const double C99726 = C47136 * C5277;
    const double C99967 = C47136 * C5455;
    const double C99961 = C47136 * C5273;
    const double C100198 = C47136 * C5621;
    const double C47960 = C47138 * C818;
    const double C47958 = C47138 * C817;
    const double C47948 = C47138 * C820;
    const double C47946 = C47138 * C819;
    const double C48314 = C47138 * C1074;
    const double C48308 = C47138 * C811;
    const double C48303 = C47138 * C1073;
    const double C48297 = C47138 * C812;
    const double C48648 = C47138 * C1319;
    const double C48643 = C47138 * C1318;
    const double C50760 = C47138 * C2915;
    const double C50758 = C47138 * C2914;
    const double C51005 = C47138 * C3091;
    const double C50999 = C47138 * C2909;
    const double C51233 = C47138 * C3257;
    const double C51489 = C47138 * C3445;
    const double C51487 = C47138 * C3444;
    const double C51806 = C47138 * C3669;
    const double C51800 = C47138 * C3439;
    const double C52106 = C47138 * C3883;
    const double C94545 = C47138 * C1575;
    const double C94543 = C47138 * C1574;
    const double C94533 = C47138 * C1577;
    const double C94531 = C47138 * C1576;
    const double C94899 = C47138 * C1831;
    const double C94893 = C47138 * C1568;
    const double C94888 = C47138 * C1830;
    const double C94882 = C47138 * C1569;
    const double C95219 = C47138 * C2076;
    const double C95214 = C47138 * C2075;
    const double C99724 = C47138 * C5280;
    const double C99722 = C47138 * C5279;
    const double C99969 = C47138 * C5456;
    const double C99963 = C47138 * C5274;
    const double C100200 = C47138 * C5622;
    const double C137768 = C137767 * ae;
    const double C5817 = -(C137767 * be) / C137729;
    const double C6686 = C6678 - C6669;
    const double C6684 = C6676 - C6661;
    const double C6682 = C6674 - C6653;
    const double C6680 = C6672 - C6645;
    const double C9630 = C9628 - C9621;
    const double C10425 = C10421 - C10413;
    const double C10423 = C10419 - C10405;
    const double C15682 = C15674 - C15665;
    const double C15680 = C15672 - C15657;
    const double C15678 = C15670 - C15649;
    const double C15676 = C15668 - C15641;
    const double C18322 = C18320 - C18317;
    const double C21032 = C21030 - C21024;
    const double C38069 = C38067 - C38064;
    const double C22624 = C22618 - C22611;
    const double C22621 = C22615 - C22599;
    const double C25432 = C25429 - C25419;
    const double C26161 = C26158 - C26148;
    const double C31253 = C31247 - C31240;
    const double C31250 = C31244 - C31228;
    const double C36427 = C36424 - C36414;
    const double C47977 = C47971 - C47964;
    const double C47974 = C47968 - C47952;
    const double C50769 = C50766 - C50756;
    const double C51498 = C51495 - C51485;
    const double C94562 = C94556 - C94549;
    const double C94559 = C94553 - C94537;
    const double C99733 = C99730 - C99720;
    const double C55302 = C55296 - C55289;
    const double C55301 = C55295 - C55285;
    const double C55300 = C55294 - C55281;
    const double C55299 = C55293 - C55277;
    const double C55298 = C55292 - C55273;
    const double C55297 = C55291 - C55269;
    const double C57126 = C57125 - C57123;
    const double C57668 = C57665 - C57661;
    const double C57667 = C57664 - C57657;
    const double C57666 = C57663 - C57653;
    const double C60684 = C60681 - C60677;
    const double C60683 = C60680 - C60673;
    const double C60682 = C60679 - C60668;
    const double C61653 = C61649 - C61644;
    const double C61652 = C61648 - C61640;
    const double C61651 = C61647 - C61636;
    const double C61650 = C61646 - C61632;
    const double C63507 = C63506 - C63502;
    const double C64256 = C64255 - C64251;
    const double C67011 = C67010 - C67008;
    const double C85987 = C85986 - C85984;
    const double C109077 = C109076 - C109074;
    const double C112520 = C112519 - C112517;
    const double C68583 = C68575 - C68566;
    const double C68581 = C68573 - C68558;
    const double C68579 = C68571 - C68550;
    const double C68577 = C68569 - C68542;
    const double C71358 = C71356 - C71349;
    const double C72105 = C72101 - C72093;
    const double C72103 = C72099 - C72085;
    const double C76372 = C76370 - C76367;
    const double C77606 = C77602 - C77597;
    const double C77604 = C77600 - C77589;
    const double C80889 = C80887 - C80880;
    const double C84411 = C84409 - C84403;
    const double C124467 = C124465 - C124462;
    const double C129596 = C129594 - C129588;
    const double C10128 = C9893 * C265;
    const double C10136 = C10135 * C139835;
    const double C9802 = C9801 + C9793;
    const double C21298 = C21296 * C139824;
    const double C21297 = C21295 * C182;
    const double C21126 = C21125 + C21117;
    const double C137941 = C137940 * ae;
    const double C6183 = C6171 - C6172;
    const double C6180 = C6159 - C6160;
    const double C7185 = C7176 - C7177;
    const double C8212 = C8203 - C8204;
    const double C102501 = C102492 - C102493;
    const double C105039 = C105030 - C105031;
    const double C107640 = C107631 - C107632;
    const double C22148 = C22139 - C22140;
    const double C22145 = C22127 - C22128;
    const double C22143 = C22119 - C22120;
    const double C23084 = C23077 - C23078;
    const double C23082 = C23069 - C23070;
    const double C24039 = C24032 - C24033;
    const double C24037 = C24024 - C24025;
    const double C38645 = C38640 - C38641;
    const double C39929 = C39921 - C39922;
    const double C39926 = C39908 - C39909;
    const double C43256 = C43248 - C43249;
    const double C46657 = C46652 - C46653;
    const double C134812 = C134804 - C134805;
    const double C137410 = C137404 - C137405;
    const double C47502 = C47493 - C47494;
    const double C47499 = C47481 - C47482;
    const double C47497 = C47473 - C47474;
    const double C48435 = C48428 - C48429;
    const double C48433 = C48420 - C48421;
    const double C49385 = C49378 - C49379;
    const double C49383 = C49370 - C49371;
    const double C62118 = C62106 - C62107;
    const double C62116 = C62098 - C62099;
    const double C62114 = C62090 - C62091;
    const double C64716 = C64706 - C64707;
    const double C64714 = C64698 - C64699;
    const double C67357 = C67351 - C67352;
    const double C76920 = C76915 - C76916;
    const double C6190 = C6184 - C6177;
    const double C6185 = C6179 - C6157;
    const double C7189 = C7186 - C7182;
    const double C8216 = C8213 - C8209;
    const double C102503 = C102500 - C102490;
    const double C105041 = C105038 - C105028;
    const double C107644 = C107641 - C107637;
    const double C6188 = C6182 - C6169;
    const double C6187 = C6181 - C6165;
    const double C7187 = C7184 - C7174;
    const double C8214 = C8211 - C8201;
    const double C102505 = C102502 - C102498;
    const double C105043 = C105040 - C105036;
    const double C107642 = C107639 - C107629;
    const double C22153 = C22147 - C22137;
    const double C22152 = C22146 - C22133;
    const double C22150 = C22144 - C22125;
    const double C23087 = C23083 - C23075;
    const double C23085 = C23081 - C23067;
    const double C24042 = C24038 - C24030;
    const double C24040 = C24036 - C24022;
    const double C38646 = C38644 - C38638;
    const double C39932 = C39928 - C39919;
    const double C39931 = C39927 - C39914;
    const double C43259 = C43257 - C43254;
    const double C46658 = C46656 - C46650;
    const double C134815 = C134813 - C134810;
    const double C137411 = C137409 - C137402;
    const double C47507 = C47501 - C47491;
    const double C47506 = C47500 - C47487;
    const double C47504 = C47498 - C47479;
    const double C48438 = C48434 - C48426;
    const double C48436 = C48432 - C48418;
    const double C49388 = C49384 - C49376;
    const double C49386 = C49382 - C49368;
    const double C62125 = C62119 - C62112;
    const double C62123 = C62117 - C62104;
    const double C62121 = C62115 - C62096;
    const double C64721 = C64717 - C64712;
    const double C64719 = C64715 - C64704;
    const double C67358 = C67356 - C67349;
    const double C76921 = C76919 - C76913;
    const double C68115 = C68109 - C68096;
    const double C68114 = C68108 - C68092;
    const double C69043 = C69040 - C69030;
    const double C69983 = C69980 - C69970;
    const double C87299 = C87296 - C87292;
    const double C89834 = C89831 - C89827;
    const double C92416 = C92413 - C92403;
    const double C67851 = C67829 * C119;
    const double C67845 = C67829 * C110;
    const double C67840 = C67829 * C117;
    const double C67834 = C67829 * C109;
    const double C68104 = C67829 * C350;
    const double C68102 = C67829 * C185;
    const double C68084 = C67829 * C349;
    const double C68082 = C67829 * C184;
    const double C68352 = C67829 * C569;
    const double C68347 = C67829 * C568;
    const double C68696 = C67829 * C820;
    const double C68690 = C67829 * C812;
    const double C69038 = C67829 * C1073;
    const double C69036 = C67829 * C897;
    const double C69359 = C67829 * C1318;
    const double C69668 = C67829 * C1577;
    const double C69662 = C67829 * C1569;
    const double C69978 = C67829 * C1830;
    const double C69976 = C67829 * C1654;
    const double C70283 = C67829 * C2075;
    const double C86983 = C67829 * C1579;
    const double C86977 = C67829 * C1570;
    const double C87284 = C67829 * C1829;
    const double C87282 = C67829 * C1653;
    const double C87598 = C67829 * C2074;
    const double C89507 = C67829 * C3443;
    const double C89501 = C67829 * C3438;
    const double C89819 = C67829 * C3668;
    const double C89817 = C67829 * C3520;
    const double C90137 = C67829 * C3882;
    const double C92173 = C67829 * C5278;
    const double C92167 = C67829 * C5273;
    const double C92411 = C67829 * C5455;
    const double C92409 = C67829 * C5339;
    const double C92644 = C67829 * C5621;
    const double C67853 = C67830 * C818;
    const double C67847 = C67830 * C811;
    const double C67842 = C67830 * C820;
    const double C67836 = C67830 * C812;
    const double C68100 = C67830 * C1074;
    const double C68098 = C67830 * C898;
    const double C68088 = C67830 * C1073;
    const double C68086 = C67830 * C897;
    const double C68354 = C67830 * C1319;
    const double C68349 = C67830 * C1318;
    const double C68698 = C67830 * C2915;
    const double C68692 = C67830 * C2909;
    const double C69034 = C67830 * C3091;
    const double C69032 = C67830 * C2975;
    const double C69361 = C67830 * C3257;
    const double C69670 = C67830 * C3445;
    const double C69664 = C67830 * C3439;
    const double C69974 = C67830 * C3669;
    const double C69972 = C67830 * C3521;
    const double C70285 = C67830 * C3883;
    const double C86985 = C67830 * C3443;
    const double C86979 = C67830 * C3438;
    const double C87288 = C67830 * C3668;
    const double C87286 = C67830 * C3520;
    const double C87600 = C67830 * C3882;
    const double C89509 = C67830 * C7759;
    const double C89503 = C67830 * C7754;
    const double C89823 = C67830 * C8091;
    const double C89821 = C67830 * C7863;
    const double C90139 = C67830 * C8422;
    const double C92175 = C67830 * C13131;
    const double C92169 = C67830 * C13126;
    const double C92407 = C67830 * C13380;
    const double C92405 = C67830 * C13216;
    const double C92646 = C67830 * C13618;
    const double C22396 = C21891 * C265;
    const double C22243 = C22242 + C22241;
    const double C22408 = C22407 * C139835;
    const double C137168 = C137166 * C139731;
    const double C137167 = C137165 * C54790;
    const double C137324 = C137323 + C137321;
    const double C47749 = C47247 * C265;
    const double C47596 = C47595 + C47593;
    const double C47761 = C47760 * C139835;
    const double C67104 = C67102 * C139731;
    const double C67103 = C67101 * C54790;
    const double C67270 = C67269 + C67261;
    const double C138012 = C138011 * ae;
    const double C14548 = C14536 - C14537;
    const double C14545 = C14524 - C14525;
    const double C15517 = C15508 - C15509;
    const double C16649 = C16640 - C16641;
    const double C61524 = C61515 - C61516;
    const double C64139 = C64130 - C64131;
    const double C65156 = C65147 - C65148;
    const double C30158 = C30149 - C30150;
    const double C30155 = C30137 - C30138;
    const double C30153 = C30129 - C30130;
    const double C31111 = C31104 - C31105;
    const double C31109 = C31096 - C31097;
    const double C32132 = C32125 - C32126;
    const double C32130 = C32117 - C32118;
    const double C39213 = C39205 - C39206;
    const double C39210 = C39192 - C39193;
    const double C40485 = C40480 - C40481;
    const double C42563 = C42558 - C42559;
    const double C43805 = C43800 - C43801;
    const double C89296 = C89291 - C89292;
    const double C90250 = C90245 - C90246;
    const double C93480 = C93471 - C93472;
    const double C93477 = C93459 - C93460;
    const double C93475 = C93451 - C93452;
    const double C94420 = C94413 - C94414;
    const double C94418 = C94405 - C94406;
    const double C95438 = C95431 - C95432;
    const double C95436 = C95423 - C95424;
    const double C101972 = C101960 - C101961;
    const double C101970 = C101952 - C101953;
    const double C101968 = C101944 - C101945;
    const double C104499 = C104494 - C104495;
    const double C105472 = C105465 - C105466;
    const double C105470 = C105457 - C105458;
    const double C116235 = C116230 - C116231;
    const double C14555 = C14549 - C14542;
    const double C14550 = C14544 - C14522;
    const double C15521 = C15518 - C15514;
    const double C16653 = C16650 - C16646;
    const double C61526 = C61523 - C61513;
    const double C64143 = C64140 - C64136;
    const double C65160 = C65157 - C65153;
    const double C14553 = C14547 - C14534;
    const double C14552 = C14546 - C14530;
    const double C15519 = C15516 - C15506;
    const double C16651 = C16648 - C16638;
    const double C61528 = C61525 - C61521;
    const double C64141 = C64138 - C64128;
    const double C65158 = C65155 - C65145;
    const double C30163 = C30157 - C30147;
    const double C30162 = C30156 - C30143;
    const double C30160 = C30154 - C30135;
    const double C31114 = C31110 - C31102;
    const double C31112 = C31108 - C31094;
    const double C32135 = C32131 - C32123;
    const double C32133 = C32129 - C32115;
    const double C39216 = C39212 - C39203;
    const double C39215 = C39211 - C39198;
    const double C40486 = C40484 - C40478;
    const double C42564 = C42562 - C42556;
    const double C43806 = C43804 - C43798;
    const double C89297 = C89295 - C89289;
    const double C90251 = C90249 - C90243;
    const double C93485 = C93479 - C93469;
    const double C93484 = C93478 - C93465;
    const double C93482 = C93476 - C93457;
    const double C94423 = C94419 - C94411;
    const double C94421 = C94417 - C94403;
    const double C95441 = C95437 - C95429;
    const double C95439 = C95435 - C95421;
    const double C101979 = C101973 - C101966;
    const double C101977 = C101971 - C101958;
    const double C101975 = C101969 - C101950;
    const double C104500 = C104498 - C104492;
    const double C105475 = C105471 - C105463;
    const double C105473 = C105469 - C105455;
    const double C116236 = C116234 - C116228;
    const double C123428 = C123422 - C123409;
    const double C123427 = C123421 - C123405;
    const double C124352 = C124349 - C124339;
    const double C125307 = C125304 - C125294;
    const double C131815 = C131812 - C131808;
    const double C134285 = C134282 - C134272;
    const double C135235 = C135232 - C135222;
    const double C122930 = C122908 * C119;
    const double C122924 = C122908 * C110;
    const double C122919 = C122908 * C117;
    const double C122913 = C122908 * C109;
    const double C123164 = C122908 * C350;
    const double C123159 = C122908 * C349;
    const double C123417 = C122908 * C569;
    const double C123415 = C122908 * C268;
    const double C123397 = C122908 * C568;
    const double C123395 = C122908 * C267;
    const double C123737 = C122908 * C820;
    const double C123731 = C122908 * C812;
    const double C124037 = C122908 * C1073;
    const double C124347 = C122908 * C1318;
    const double C124345 = C122908 * C985;
    const double C124672 = C122908 * C1577;
    const double C124666 = C122908 * C1569;
    const double C124988 = C122908 * C1830;
    const double C125302 = C122908 * C2075;
    const double C125300 = C122908 * C1742;
    const double C131199 = C122908 * C822;
    const double C131193 = C122908 * C813;
    const double C131499 = C122908 * C1072;
    const double C131800 = C122908 * C1317;
    const double C131798 = C122908 * C984;
    const double C133814 = C122908 * C2913;
    const double C133808 = C122908 * C2908;
    const double C134042 = C122908 * C3090;
    const double C134280 = C122908 * C3256;
    const double C134278 = C122908 * C3032;
    const double C134602 = C122908 * C3443;
    const double C134596 = C122908 * C3438;
    const double C134916 = C122908 * C3668;
    const double C135230 = C122908 * C3882;
    const double C135228 = C122908 * C3594;
    const double C122932 = C122909 * C1575;
    const double C122926 = C122909 * C1568;
    const double C122921 = C122909 * C1577;
    const double C122915 = C122909 * C1569;
    const double C123166 = C122909 * C1831;
    const double C123161 = C122909 * C1830;
    const double C123413 = C122909 * C2076;
    const double C123411 = C122909 * C1743;
    const double C123401 = C122909 * C2075;
    const double C123399 = C122909 * C1742;
    const double C123739 = C122909 * C3445;
    const double C123733 = C122909 * C3439;
    const double C124039 = C122909 * C3669;
    const double C124343 = C122909 * C3883;
    const double C124341 = C122909 * C3595;
    const double C124674 = C122909 * C5280;
    const double C124668 = C122909 * C5274;
    const double C124990 = C122909 * C5456;
    const double C125298 = C122909 * C5622;
    const double C125296 = C122909 * C5398;
    const double C131201 = C122909 * C3443;
    const double C131195 = C122909 * C3438;
    const double C131501 = C122909 * C3668;
    const double C131804 = C122909 * C3882;
    const double C131802 = C122909 * C3594;
    const double C133816 = C122909 * C7759;
    const double C133810 = C122909 * C7754;
    const double C134044 = C122909 * C8091;
    const double C134276 = C122909 * C8422;
    const double C134274 = C122909 * C7979;
    const double C134604 = C122909 * C13131;
    const double C134598 = C122909 * C13126;
    const double C134918 = C122909 * C13380;
    const double C135226 = C122909 * C13618;
    const double C135224 = C122909 * C13298;
    const double C29883 = C29655 * C182;
    const double C29895 = C29894 * C139824;
    const double C30052 = C30051 + C30050;
    const double C88823 = C88821 * C139731;
    const double C88822 = C88820 * C54790;
    const double C89137 = C89136 + C89135;
    const double C93206 = C92978 * C182;
    const double C93218 = C93217 * C139824;
    const double C93374 = C93373 + C93371;
    const double C104029 = C104027 * C139731;
    const double C104028 = C104026 * C54790;
    const double C104340 = C104339 + C104337;
    const double C71604 = C71593 + C71594;
    const double C71603 = C71591 + C71592;
    const double C71834 = C71828 + C71829;
    const double C71515 = C71514 + C71512;
    const double C81302 = C81289 + C81290;
    const double C81300 = C81285 + C81286;
    const double C81301 = C81287 + C81288;
    const double C81299 = C81283 + C81284;
    const double C81702 = C81695 + C81696;
    const double C81701 = C81693 + C81694;
    const double C129842 = C129831 + C129832;
    const double C129841 = C129829 + C129830;
    const double C130077 = C130071 + C130072;
    const double C129679 = C129678 + C129676;
    const double C101 =
        ((ae * -2 * C137728) / C137758 -
         (((C137727 * C137762) / C137733 + 2 * C137751) * be) / C137729) /
            C137734 +
        ((C137727 *
              (C137762 / C137758 -
               (((C137727 * C137768) / C137729 + 2 * C137755) * be) / C137729 -
               C137764 / C137738) +
          2 * (C137751 / C137734 -
               ((C137727 * C137755 + C139967) * be) / C137729 + C137748)) *
         ae) /
            C137729 +
        C137768 / C137738 - ((2 * C137748 - C137765 / C137738) * be) / C137729;
    const double C103 =
        (C137762 / C137758 -
         (((C137727 * C137768) / C137729 + 2 * C137755) * be) / C137729 -
         C137764 / C137738) /
            C137734 +
        ((C137727 * (C137768 / C137738 -
                     ((2 * C137748 - C137765 / C137738) * be) / C137729) +
          2 * (C137755 / C137734 -
               ((C137727 * C137748 + C139736) * be) / C137729)) *
         ae) /
            C137729 +
        (-2 * C137764) / (C137729 * 4 * C137733);
    const double C105 = (C137768 / C137738 -
                         ((2 * C137748 - C137765 / C137738) * be) / C137729) /
                            C137734 +
                        ((2 * (C137748 / C137734 - (0 * be) / C137729) -
                          C137765 / (C137729 * 4 * C137733)) *
                         ae) /
                            C137729;
    const double C21781 =
        C137762 / C137758 -
        (((C137727 * C137768) / C137729 + 2 * C137755) * be) / C137729 -
        C137764 / C137738;
    const double C21783 =
        C137768 / C137738 - ((2 * C137748 - C137765 / C137738) * be) / C137729;
    const double C47137 =
        C137762 / C137758 +
        (((C137727 * C137768) / C137729 + 2 * C137755) * ae) / C137729 -
        C137764 / C137738;
    const double C47139 =
        C137768 / C137738 + ((2 * C137748 - C137765 / C137738) * ae) / C137729;
    const double C67752 = C137768 / C137729;
    const double C6664 = C5817 * C2909;
    const double C6656 = C5817 * C812;
    const double C6648 = C5817 * C2908;
    const double C6640 = C5817 * C813;
    const double C9624 = C5817 * C6627;
    const double C10416 = C5817 * C3438;
    const double C10408 = C5817 * C7754;
    const double C15660 = C5817 * C5274;
    const double C15652 = C5817 * C1569;
    const double C15644 = C5817 * C5273;
    const double C15636 = C5817 * C1570;
    const double C18312 = C5817 * C13126;
    const double C21027 = C5817 * C15623;
    const double C38059 = C5817 * C3439;
    const double C6694 = C6686 + C6670;
    const double C6692 = C6684 + C6662;
    const double C6690 = C6682 + C6654;
    const double C6688 = C6680 + C6646;
    const double C9632 = C9630 + C9622;
    const double C10429 = C10425 + C10414;
    const double C10427 = C10423 + C10406;
    const double C15690 = C15682 + C15666;
    const double C15688 = C15680 + C15658;
    const double C15686 = C15678 + C15650;
    const double C15684 = C15676 + C15642;
    const double C18324 = C18322 + C18318;
    const double C21034 = C21032 + C21025;
    const double C38071 = C38069 + C38065;
    const double C22630 = C22624 + C22612;
    const double C22627 = C22621 + C22600;
    const double C25435 = C25432 + C25420;
    const double C26164 = C26161 + C26149;
    const double C31259 = C31253 + C31241;
    const double C31256 = C31250 + C31229;
    const double C36430 = C36427 + C36415;
    const double C47983 = C47977 + C47965;
    const double C47980 = C47974 + C47953;
    const double C50772 = C50769 + C50757;
    const double C51501 = C51498 + C51486;
    const double C94568 = C94562 + C94550;
    const double C94565 = C94559 + C94538;
    const double C99736 = C99733 + C99721;
    const double C55308 = C55302 + C55290;
    const double C55307 = C55301 + C55286;
    const double C55306 = C55300 + C55282;
    const double C55305 = C55299 + C55278;
    const double C55304 = C55298 + C55274;
    const double C55303 = C55297 + C55270;
    const double C57127 = C57126 + C57124;
    const double C57671 = C57668 + C57662;
    const double C57670 = C57667 + C57658;
    const double C57669 = C57666 + C57654;
    const double C60687 = C60684 + C60678;
    const double C60686 = C60683 + C60674;
    const double C60685 = C60682 + C60669;
    const double C61657 = C61653 + C61645;
    const double C61656 = C61652 + C61641;
    const double C61655 = C61651 + C61637;
    const double C61654 = C61650 + C61633;
    const double C63508 = C63507 + C63503;
    const double C64257 = C64256 + C64252;
    const double C67012 = C67011 + C67009;
    const double C85988 = C85987 + C85985;
    const double C109078 = C109077 + C109075;
    const double C112521 = C112520 + C112518;
    const double C68591 = C68583 + C68567;
    const double C68589 = C68581 + C68559;
    const double C68587 = C68579 + C68551;
    const double C68585 = C68577 + C68543;
    const double C71360 = C71358 + C71350;
    const double C72109 = C72105 + C72094;
    const double C72107 = C72103 + C72086;
    const double C76374 = C76372 + C76368;
    const double C77610 = C77606 + C77598;
    const double C77608 = C77604 + C77590;
    const double C80891 = C80889 + C80881;
    const double C84413 = C84411 + C84404;
    const double C124469 = C124467 + C124463;
    const double C129598 = C129596 + C129589;
    const double C10137 = C10128 + C10136;
    const double C21299 = C21297 + C21298;
    const double C54996 =
        ((ae * -2 * C137910) / C137758 -
         (((C137789 * C137938) / C137733 + 2 * C137925) * be) / C137729) /
            C137734 +
        ((C137789 *
              (C137938 / C137758 -
               (((C137789 * C137941) / C137729 + 2 * C137921) * be) / C137729 -
               C137821 / C137738) +
          2 * (C137925 / C137734 -
               ((C137789 * C137921 + C139983) * be) / C137729 + C137922)) *
         ae) /
            C137729 +
        C137941 / C137738 - ((2 * C137922 - C137824 / C137738) * be) / C137729;
    const double C54997 =
        (C137938 / C137758 -
         (((C137789 * C137941) / C137729 + 2 * C137921) * be) / C137729 -
         C137821 / C137738) /
            C137734 +
        ((C137789 * (C137941 / C137738 -
                     ((2 * C137922 - C137824 / C137738) * be) / C137729) +
          2 * (C137921 / C137734 -
               ((C137789 * C137922 + C139873) * be) / C137729)) *
         ae) /
            C137729 +
        (-2 * C137821) / (C137729 * 4 * C137733);
    const double C54998 = (C137941 / C137738 -
                           ((2 * C137922 - C137824 / C137738) * be) / C137729) /
                              C137734 +
                          ((2 * (C137922 / C137734 - (0 * be) / C137729) -
                            C137824 / (C137729 * 4 * C137733)) *
                           ae) /
                              C137729;
    const double C68078 =
        C137938 / C137758 -
        (((C137789 * C137941) / C137729 + 2 * C137921) * be) / C137729 -
        C137821 / C137738;
    const double C68079 =
        C137941 / C137738 - ((2 * C137922 - C137824 / C137738) * be) / C137729;
    const double C6189 = C6183 - C6173;
    const double C6186 = C6180 - C6161;
    const double C7188 = C7185 - C7178;
    const double C8215 = C8212 - C8205;
    const double C102504 = C102501 - C102494;
    const double C105042 = C105039 - C105032;
    const double C107643 = C107640 - C107633;
    const double C22154 = C22148 - C22141;
    const double C22151 = C22145 - C22129;
    const double C22149 = C22143 - C22121;
    const double C23088 = C23084 - C23079;
    const double C23086 = C23082 - C23071;
    const double C24043 = C24039 - C24034;
    const double C24041 = C24037 - C24026;
    const double C38647 = C38645 - C38642;
    const double C39933 = C39929 - C39923;
    const double C39930 = C39926 - C39910;
    const double C43258 = C43256 - C43250;
    const double C46659 = C46657 - C46654;
    const double C134814 = C134812 - C134806;
    const double C137412 = C137410 - C137406;
    const double C47508 = C47502 - C47495;
    const double C47505 = C47499 - C47483;
    const double C47503 = C47497 - C47475;
    const double C48439 = C48435 - C48430;
    const double C48437 = C48433 - C48422;
    const double C49389 = C49385 - C49380;
    const double C49387 = C49383 - C49372;
    const double C62124 = C62118 - C62108;
    const double C62122 = C62116 - C62100;
    const double C62120 = C62114 - C62092;
    const double C64720 = C64716 - C64708;
    const double C64718 = C64714 - C64700;
    const double C67359 = C67357 - C67353;
    const double C76922 = C76920 - C76917;
    const double C6196 = C6190 + C6178;
    const double C6191 = C6185 + C6158;
    const double C7192 = C7189 + C7183;
    const double C8219 = C8216 + C8210;
    const double C102506 = C102503 + C102491;
    const double C105044 = C105041 + C105029;
    const double C107647 = C107644 + C107638;
    const double C6194 = C6188 + C6170;
    const double C6193 = C6187 + C6166;
    const double C7190 = C7187 + C7175;
    const double C8217 = C8214 + C8202;
    const double C102508 = C102505 + C102499;
    const double C105046 = C105043 + C105037;
    const double C107645 = C107642 + C107630;
    const double C22159 = C22153 + C22138;
    const double C22158 = C22152 + C22134;
    const double C22156 = C22150 + C22126;
    const double C23091 = C23087 + C23076;
    const double C23089 = C23085 + C23068;
    const double C24046 = C24042 + C24031;
    const double C24044 = C24040 + C24023;
    const double C38648 = C38646 + C38639;
    const double C39936 = C39932 + C39920;
    const double C39935 = C39931 + C39915;
    const double C43261 = C43259 + C43255;
    const double C46660 = C46658 + C46651;
    const double C134817 = C134815 + C134811;
    const double C137413 = C137411 + C137403;
    const double C47513 = C47507 + C47492;
    const double C47512 = C47506 + C47488;
    const double C47510 = C47504 + C47480;
    const double C48442 = C48438 + C48427;
    const double C48440 = C48436 + C48419;
    const double C49392 = C49388 + C49377;
    const double C49390 = C49386 + C49369;
    const double C62131 = C62125 + C62113;
    const double C62129 = C62123 + C62105;
    const double C62127 = C62121 + C62097;
    const double C64725 = C64721 + C64713;
    const double C64723 = C64719 + C64705;
    const double C67360 = C67358 + C67350;
    const double C76923 = C76921 + C76914;
    const double C68121 = C68115 + C68097;
    const double C68120 = C68114 + C68093;
    const double C69046 = C69043 + C69031;
    const double C69986 = C69983 + C69971;
    const double C87302 = C87299 + C87293;
    const double C89837 = C89834 + C89828;
    const double C92419 = C92416 + C92404;
    const double C22409 = C22396 + C22408;
    const double C137169 = C137167 + C137168;
    const double C47762 = C47749 + C47761;
    const double C67105 = C67103 + C67104;
    const double C108407 =
        ((ae * -2 * C137981) / C137758 -
         (((C137792 * C138009) / C137733 + 2 * C137996) * be) / C137729) /
            C137734 +
        ((C137792 *
              (C138009 / C137758 -
               (((C137792 * C138012) / C137729 + 2 * C137992) * be) / C137729 -
               C137847 / C137738) +
          2 * (C137996 / C137734 -
               ((C137792 * C137992 + C139984) * be) / C137729 + C137993)) *
         ae) /
            C137729 +
        C138012 / C137738 - ((2 * C137993 - C137850 / C137738) * be) / C137729;
    const double C108408 =
        (C138009 / C137758 -
         (((C137792 * C138012) / C137729 + 2 * C137992) * be) / C137729 -
         C137847 / C137738) /
            C137734 +
        ((C137792 * (C138012 / C137738 -
                     ((2 * C137993 - C137850 / C137738) * be) / C137729) +
          2 * (C137992 / C137734 -
               ((C137792 * C137993 + C139899) * be) / C137729)) *
         ae) /
            C137729 +
        (-2 * C137847) / (C137729 * 4 * C137733);
    const double C108409 =
        (C138012 / C137738 -
         ((2 * C137993 - C137850 / C137738) * be) / C137729) /
            C137734 +
        ((2 * (C137993 / C137734 - (0 * be) / C137729) -
          C137850 / (C137729 * 4 * C137733)) *
         ae) /
            C137729;
    const double C123391 =
        C138009 / C137758 -
        (((C137792 * C138012) / C137729 + 2 * C137992) * be) / C137729 -
        C137847 / C137738;
    const double C123392 =
        C138012 / C137738 - ((2 * C137993 - C137850 / C137738) * be) / C137729;
    const double C14554 = C14548 - C14538;
    const double C14551 = C14545 - C14526;
    const double C15520 = C15517 - C15510;
    const double C16652 = C16649 - C16642;
    const double C61527 = C61524 - C61517;
    const double C64142 = C64139 - C64132;
    const double C65159 = C65156 - C65149;
    const double C30164 = C30158 - C30151;
    const double C30161 = C30155 - C30139;
    const double C30159 = C30153 - C30131;
    const double C31115 = C31111 - C31106;
    const double C31113 = C31109 - C31098;
    const double C32136 = C32132 - C32127;
    const double C32134 = C32130 - C32119;
    const double C39217 = C39213 - C39207;
    const double C39214 = C39210 - C39194;
    const double C40487 = C40485 - C40482;
    const double C42565 = C42563 - C42560;
    const double C43807 = C43805 - C43802;
    const double C89298 = C89296 - C89293;
    const double C90252 = C90250 - C90247;
    const double C93486 = C93480 - C93473;
    const double C93483 = C93477 - C93461;
    const double C93481 = C93475 - C93453;
    const double C94424 = C94420 - C94415;
    const double C94422 = C94418 - C94407;
    const double C95442 = C95438 - C95433;
    const double C95440 = C95436 - C95425;
    const double C101978 = C101972 - C101962;
    const double C101976 = C101970 - C101954;
    const double C101974 = C101968 - C101946;
    const double C104501 = C104499 - C104496;
    const double C105476 = C105472 - C105467;
    const double C105474 = C105470 - C105459;
    const double C116237 = C116235 - C116232;
    const double C14561 = C14555 + C14543;
    const double C14556 = C14550 + C14523;
    const double C15524 = C15521 + C15515;
    const double C16656 = C16653 + C16647;
    const double C61529 = C61526 + C61514;
    const double C64146 = C64143 + C64137;
    const double C65163 = C65160 + C65154;
    const double C14559 = C14553 + C14535;
    const double C14558 = C14552 + C14531;
    const double C15522 = C15519 + C15507;
    const double C16654 = C16651 + C16639;
    const double C61531 = C61528 + C61522;
    const double C64144 = C64141 + C64129;
    const double C65161 = C65158 + C65146;
    const double C30169 = C30163 + C30148;
    const double C30168 = C30162 + C30144;
    const double C30166 = C30160 + C30136;
    const double C31118 = C31114 + C31103;
    const double C31116 = C31112 + C31095;
    const double C32139 = C32135 + C32124;
    const double C32137 = C32133 + C32116;
    const double C39220 = C39216 + C39204;
    const double C39219 = C39215 + C39199;
    const double C40488 = C40486 + C40479;
    const double C42566 = C42564 + C42557;
    const double C43808 = C43806 + C43799;
    const double C89299 = C89297 + C89290;
    const double C90253 = C90251 + C90244;
    const double C93491 = C93485 + C93470;
    const double C93490 = C93484 + C93466;
    const double C93488 = C93482 + C93458;
    const double C94427 = C94423 + C94412;
    const double C94425 = C94421 + C94404;
    const double C95445 = C95441 + C95430;
    const double C95443 = C95439 + C95422;
    const double C101985 = C101979 + C101967;
    const double C101983 = C101977 + C101959;
    const double C101981 = C101975 + C101951;
    const double C104502 = C104500 + C104493;
    const double C105479 = C105475 + C105464;
    const double C105477 = C105473 + C105456;
    const double C116238 = C116236 + C116229;
    const double C123434 = C123428 + C123410;
    const double C123433 = C123427 + C123406;
    const double C124355 = C124352 + C124340;
    const double C125310 = C125307 + C125295;
    const double C131818 = C131815 + C131809;
    const double C134288 = C134285 + C134273;
    const double C135238 = C135235 + C135223;
    const double C29896 = C29883 + C29895;
    const double C88824 = C88822 + C88823;
    const double C93219 = C93206 + C93218;
    const double C104030 = C104028 + C104029;
    const double C71827 = C71603 * C265;
    const double C71835 = C71834 * C139835;
    const double C71516 = C71515 + C71513;
    const double C129844 = C129842 * C139824;
    const double C129843 = C129841 * C182;
    const double C129680 = C129679 + C129677;
    const double C22602 = C21781 * C812;
    const double C22590 = C21781 * C813;
    const double C25426 = C21781 * C2908;
    const double C26155 = C21781 * C3438;
    const double C31231 = C21781 * C1569;
    const double C31219 = C21781 * C1570;
    const double C36421 = C21781 * C5273;
    const double C22606 = C21783 * C811;
    const double C22594 = C21783 * C812;
    const double C25422 = C21783 * C2909;
    const double C26151 = C21783 * C3439;
    const double C31235 = C21783 * C1568;
    const double C31223 = C21783 * C1569;
    const double C36417 = C21783 * C5274;
    const double C47955 = C47137 * C812;
    const double C47943 = C47137 * C813;
    const double C50763 = C47137 * C2908;
    const double C51492 = C47137 * C3438;
    const double C94540 = C47137 * C1569;
    const double C94528 = C47137 * C1570;
    const double C99727 = C47137 * C5273;
    const double C47959 = C47139 * C811;
    const double C47947 = C47139 * C812;
    const double C50759 = C47139 * C2909;
    const double C51488 = C47139 * C3439;
    const double C94544 = C47139 * C1568;
    const double C94532 = C47139 * C1569;
    const double C99723 = C47139 * C5274;
    const double C68561 = C67752 * C2909;
    const double C68553 = C67752 * C812;
    const double C68545 = C67752 * C2908;
    const double C68537 = C67752 * C813;
    const double C71352 = C67752 * C6627;
    const double C72096 = C67752 * C3438;
    const double C72088 = C67752 * C7754;
    const double C76362 = C67752 * C3439;
    const double C77592 = C67752 * C1569;
    const double C77584 = C67752 * C1570;
    const double C80883 = C67752 * C13126;
    const double C84406 = C67752 * C5273;
    const double C124457 = C67752 * C5274;
    const double C129591 = C67752 * C15623;
    const double C6677 = C6663 - C6664;
    const double C6675 = C6655 - C6656;
    const double C6673 = C6647 - C6648;
    const double C6671 = C6639 - C6640;
    const double C9629 = C9623 - C9624;
    const double C10422 = C10415 - C10416;
    const double C10420 = C10407 - C10408;
    const double C15673 = C15659 - C15660;
    const double C15671 = C15651 - C15652;
    const double C15669 = C15643 - C15644;
    const double C15667 = C15635 - C15636;
    const double C18319 = C18311 - C18312;
    const double C21031 = C21026 - C21027;
    const double C38066 = C38058 - C38059;
    const double C55314 = C55308 * C139835;
    const double C55313 = C55307 * C139835;
    const double C85981 = C55307 * C139984;
    const double C101122 = C55307 * C92797;
    const double C55312 = C55306 * C139835;
    const double C60670 = C55306 * C13856;
    const double C85979 = C55306 * C139984;
    const double C101120 = C55306 * C92797;
    const double C130993 = C55306 * C140013;
    const double C55311 = C55305 * C139835;
    const double C88659 = C55305 * C139984;
    const double C103865 = C55305 * C92797;
    const double C55310 = C55304 * C139835;
    const double C63505 = C55304 * C13856;
    const double C85977 = C55304 * C139984;
    const double C101118 = C55304 * C92797;
    const double C133659 = C55304 * C140013;
    const double C55309 = C55303 * C139835;
    const double C60664 = C55303 * C13856;
    const double C85975 = C55303 * C139984;
    const double C101116 = C55303 * C92797;
    const double C130990 = C55303 * C140013;
    const double C57128 = C57127 * C139835;
    const double C57674 = C57671 * C139835;
    const double C60665 = C57671 * C13857;
    const double C64254 = C57671 * C13856;
    const double C85976 = C57671 * C139899;
    const double C89402 = C57671 * C139984;
    const double C101117 = C57671 * C139899;
    const double C104605 = C57671 * C92797;
    const double C130991 = C57671 * C140014;
    const double C134391 = C57671 * C140013;
    const double C57673 = C57670 * C139835;
    const double C63504 = C57670 * C13857;
    const double C85978 = C57670 * C139899;
    const double C89400 = C57670 * C139984;
    const double C101119 = C57670 * C139899;
    const double C104603 = C57670 * C92797;
    const double C133658 = C57670 * C140014;
    const double C57672 = C57669 * C139835;
    const double C88658 = C57669 * C139899;
    const double C103864 = C57669 * C139899;
    const double C60690 = C60687 * C13858;
    const double C130995 = C60687 * C122759;
    const double C60689 = C60686 * C13857;
    const double C85980 = C60686 * C139899;
    const double C101121 = C60686 * C139899;
    const double C130994 = C60686 * C140014;
    const double C60688 = C60685 * C13858;
    const double C64253 = C60685 * C13857;
    const double C89401 = C60685 * C139899;
    const double C104604 = C60685 * C139899;
    const double C130992 = C60685 * C122759;
    const double C134390 = C60685 * C140014;
    const double C63509 = C63508 * C13858;
    const double C89399 = C63508 * C139899;
    const double C104602 = C63508 * C139899;
    const double C133657 = C63508 * C122759;
    const double C64258 = C64257 * C13858;
    const double C134389 = C64257 * C122759;
    const double C85989 = C85988 * C139899;
    const double C101123 = C85988 * C139899;
    const double C68103 = C68078 * C110;
    const double C68083 = C68078 * C109;
    const double C69037 = C68078 * C812;
    const double C69977 = C68078 * C1569;
    const double C87283 = C68078 * C1570;
    const double C89818 = C68078 * C3438;
    const double C92410 = C68078 * C5273;
    const double C68099 = C68079 * C811;
    const double C68087 = C68079 * C812;
    const double C69033 = C68079 * C2909;
    const double C69973 = C68079 * C3439;
    const double C87287 = C68079 * C3438;
    const double C89822 = C68079 * C7754;
    const double C92406 = C68079 * C13126;
    const double C6195 = C6189 + C6174;
    const double C6192 = C6186 + C6162;
    const double C7191 = C7188 + C7179;
    const double C8218 = C8215 + C8206;
    const double C102507 = C102504 + C102495;
    const double C105045 = C105042 + C105033;
    const double C107646 = C107643 + C107634;
    const double C22160 = C22154 + C22142;
    const double C22157 = C22151 + C22130;
    const double C22155 = C22149 + C22122;
    const double C23092 = C23088 + C23080;
    const double C23090 = C23086 + C23072;
    const double C24047 = C24043 + C24035;
    const double C24045 = C24041 + C24027;
    const double C38649 = C38647 + C38643;
    const double C39937 = C39933 + C39924;
    const double C39934 = C39930 + C39911;
    const double C43260 = C43258 + C43251;
    const double C46661 = C46659 + C46655;
    const double C134816 = C134814 + C134807;
    const double C137414 = C137412 + C137407;
    const double C47514 = C47508 + C47496;
    const double C47511 = C47505 + C47484;
    const double C47509 = C47503 + C47476;
    const double C48443 = C48439 + C48431;
    const double C48441 = C48437 + C48423;
    const double C49393 = C49389 + C49381;
    const double C49391 = C49387 + C49373;
    const double C62130 = C62124 + C62109;
    const double C62128 = C62122 + C62101;
    const double C62126 = C62120 + C62093;
    const double C64724 = C64720 + C64709;
    const double C64722 = C64718 + C64701;
    const double C67361 = C67359 + C67354;
    const double C76924 = C76922 + C76918;
    const double C123416 = C123391 * C110;
    const double C123396 = C123391 * C109;
    const double C124346 = C123391 * C812;
    const double C125301 = C123391 * C1569;
    const double C131799 = C123391 * C813;
    const double C134279 = C123391 * C2908;
    const double C135229 = C123391 * C3438;
    const double C123412 = C123392 * C1568;
    const double C123400 = C123392 * C1569;
    const double C124342 = C123392 * C3439;
    const double C125297 = C123392 * C5274;
    const double C131803 = C123392 * C3438;
    const double C134275 = C123392 * C7754;
    const double C135225 = C123392 * C13126;
    const double C14560 = C14554 + C14539;
    const double C14557 = C14551 + C14527;
    const double C15523 = C15520 + C15511;
    const double C16655 = C16652 + C16643;
    const double C61530 = C61527 + C61518;
    const double C64145 = C64142 + C64133;
    const double C65162 = C65159 + C65150;
    const double C30170 = C30164 + C30152;
    const double C30167 = C30161 + C30140;
    const double C30165 = C30159 + C30132;
    const double C31119 = C31115 + C31107;
    const double C31117 = C31113 + C31099;
    const double C32140 = C32136 + C32128;
    const double C32138 = C32134 + C32120;
    const double C39221 = C39217 + C39208;
    const double C39218 = C39214 + C39195;
    const double C40489 = C40487 + C40483;
    const double C42567 = C42565 + C42561;
    const double C43809 = C43807 + C43803;
    const double C89300 = C89298 + C89294;
    const double C90254 = C90252 + C90248;
    const double C93492 = C93486 + C93474;
    const double C93489 = C93483 + C93462;
    const double C93487 = C93481 + C93454;
    const double C94428 = C94424 + C94416;
    const double C94426 = C94422 + C94408;
    const double C95446 = C95442 + C95434;
    const double C95444 = C95440 + C95426;
    const double C101984 = C101978 + C101963;
    const double C101982 = C101976 + C101955;
    const double C101980 = C101974 + C101947;
    const double C104503 = C104501 + C104497;
    const double C105480 = C105476 + C105468;
    const double C105478 = C105474 + C105460;
    const double C116239 = C116237 + C116233;
    const double C71836 = C71827 + C71835;
    const double C129845 = C129843 + C129844;
    const double C22616 = C22601 - C22602;
    const double C22613 = C22589 - C22590;
    const double C25431 = C25425 - C25426;
    const double C26160 = C26154 - C26155;
    const double C31245 = C31230 - C31231;
    const double C31242 = C31218 - C31219;
    const double C36426 = C36420 - C36421;
    const double C22617 = C22605 - C22606;
    const double C22614 = C22593 - C22594;
    const double C25430 = C25421 - C25422;
    const double C26159 = C26150 - C26151;
    const double C31246 = C31234 - C31235;
    const double C31243 = C31222 - C31223;
    const double C36425 = C36416 - C36417;
    const double C47969 = C47954 - C47955;
    const double C47966 = C47942 - C47943;
    const double C50768 = C50762 - C50763;
    const double C51497 = C51491 - C51492;
    const double C94554 = C94539 - C94540;
    const double C94551 = C94527 - C94528;
    const double C99732 = C99726 - C99727;
    const double C47970 = C47958 - C47959;
    const double C47967 = C47946 - C47947;
    const double C50767 = C50758 - C50759;
    const double C51496 = C51487 - C51488;
    const double C94555 = C94543 - C94544;
    const double C94552 = C94531 - C94532;
    const double C99731 = C99722 - C99723;
    const double C68574 = C68560 - C68561;
    const double C68572 = C68552 - C68553;
    const double C68570 = C68544 - C68545;
    const double C68568 = C68536 - C68537;
    const double C71357 = C71351 - C71352;
    const double C72102 = C72095 - C72096;
    const double C72100 = C72087 - C72088;
    const double C76369 = C76361 - C76362;
    const double C77601 = C77591 - C77592;
    const double C77599 = C77583 - C77584;
    const double C80888 = C80882 - C80883;
    const double C84410 = C84405 - C84406;
    const double C124464 = C124456 - C124457;
    const double C129595 = C129590 - C129591;
    const double C6685 = C6677 - C6665;
    const double C6683 = C6675 - C6657;
    const double C6681 = C6673 - C6649;
    const double C6679 = C6671 - C6641;
    const double C9631 = C9629 - C9625;
    const double C10426 = C10422 - C10417;
    const double C10424 = C10420 - C10409;
    const double C15681 = C15673 - C15661;
    const double C15679 = C15671 - C15653;
    const double C15677 = C15669 - C15645;
    const double C15675 = C15667 - C15637;
    const double C18321 = C18319 - C18313;
    const double C21033 = C21031 - C21028;
    const double C38068 = C38066 - C38060;
    const double C88657 = C85977 + C85978;
    const double C103863 = C101118 + C101119;
    const double C68111 = C68102 - C68103;
    const double C68106 = C68082 - C68083;
    const double C69042 = C69036 - C69037;
    const double C69982 = C69976 - C69977;
    const double C87294 = C87282 - C87283;
    const double C89829 = C89817 - C89818;
    const double C92415 = C92409 - C92410;
    const double C68110 = C68098 - C68099;
    const double C68107 = C68086 - C68087;
    const double C69041 = C69032 - C69033;
    const double C69981 = C69972 - C69973;
    const double C87295 = C87286 - C87287;
    const double C89830 = C89821 - C89822;
    const double C92414 = C92405 - C92406;
    const double C22161 = C22157 + C22158;
    const double C39925 = C24046 + C24047;
    const double C39916 = C24047 + C24046;
    const double C137399 = C46661 + C46660;
    const double C47515 = C47511 + C47512;
    const double C78160 = C49392 + C49393;
    const double C78159 = C49393 + C49392;
    const double C67346 = C62128 + C62129;
    const double C123424 = C123415 - C123416;
    const double C123419 = C123395 - C123396;
    const double C124351 = C124345 - C124346;
    const double C125306 = C125300 - C125301;
    const double C131810 = C131798 - C131799;
    const double C134284 = C134278 - C134279;
    const double C135234 = C135228 - C135229;
    const double C123423 = C123411 - C123412;
    const double C123420 = C123399 - C123400;
    const double C124350 = C124341 - C124342;
    const double C125305 = C125296 - C125297;
    const double C131811 = C131802 - C131803;
    const double C134283 = C134274 - C134275;
    const double C135233 = C135224 - C135225;
    const double C30171 = C30167 + C30168;
    const double C39209 = C31118 + C31119;
    const double C39200 = C31119 + C31118;
    const double C89286 = C42567 + C42566;
    const double C93493 = C93489 + C93490;
    const double C115043 = C94427 + C94428;
    const double C115042 = C94428 + C94427;
    const double C104489 = C101982 + C101983;
    const double C22622 = C22616 - C22603;
    const double C22619 = C22613 - C22591;
    const double C25434 = C25431 - C25427;
    const double C26163 = C26160 - C26156;
    const double C31251 = C31245 - C31232;
    const double C31248 = C31242 - C31220;
    const double C36429 = C36426 - C36422;
    const double C22623 = C22617 - C22607;
    const double C22620 = C22614 - C22595;
    const double C25433 = C25430 - C25423;
    const double C26162 = C26159 - C26152;
    const double C31252 = C31246 - C31236;
    const double C31249 = C31243 - C31224;
    const double C36428 = C36425 - C36418;
    const double C47975 = C47969 - C47956;
    const double C47972 = C47966 - C47944;
    const double C50771 = C50768 - C50764;
    const double C51500 = C51497 - C51493;
    const double C94560 = C94554 - C94541;
    const double C94557 = C94551 - C94529;
    const double C99735 = C99732 - C99728;
    const double C47976 = C47970 - C47960;
    const double C47973 = C47967 - C47948;
    const double C50770 = C50767 - C50760;
    const double C51499 = C51496 - C51489;
    const double C94561 = C94555 - C94545;
    const double C94558 = C94552 - C94533;
    const double C99734 = C99731 - C99724;
    const double C68582 = C68574 - C68562;
    const double C68580 = C68572 - C68554;
    const double C68578 = C68570 - C68546;
    const double C68576 = C68568 - C68538;
    const double C71359 = C71357 - C71353;
    const double C72106 = C72102 - C72097;
    const double C72104 = C72100 - C72089;
    const double C76371 = C76369 - C76363;
    const double C77605 = C77601 - C77593;
    const double C77603 = C77599 - C77585;
    const double C80890 = C80888 - C80884;
    const double C84412 = C84410 - C84407;
    const double C124466 = C124464 - C124458;
    const double C129597 = C129595 - C129592;
    const double C6693 = C6685 + C6666;
    const double C6691 = C6683 + C6658;
    const double C6689 = C6681 + C6650;
    const double C6687 = C6679 + C6642;
    const double C9633 = C9631 + C9626;
    const double C10430 = C10426 + C10418;
    const double C10428 = C10424 + C10410;
    const double C15689 = C15681 + C15662;
    const double C15687 = C15679 + C15654;
    const double C15685 = C15677 + C15646;
    const double C15683 = C15675 + C15638;
    const double C18323 = C18321 + C18314;
    const double C21035 = C21033 + C21029;
    const double C38070 = C38068 + C38061;
    const double C68117 = C68111 - C68104;
    const double C68112 = C68106 - C68084;
    const double C69045 = C69042 - C69038;
    const double C69985 = C69982 - C69978;
    const double C87297 = C87294 - C87284;
    const double C89832 = C89829 - C89819;
    const double C92418 = C92415 - C92411;
    const double C68116 = C68110 - C68100;
    const double C68113 = C68107 - C68088;
    const double C69044 = C69041 - C69034;
    const double C69984 = C69981 - C69974;
    const double C87298 = C87295 - C87288;
    const double C89833 = C89830 - C89823;
    const double C92417 = C92414 - C92407;
    const double C137408 = C137399 * C139731;
    const double C67355 = C67346 * C139731;
    const double C123430 = C123424 - C123417;
    const double C123425 = C123419 - C123397;
    const double C124354 = C124351 - C124347;
    const double C125309 = C125306 - C125302;
    const double C131813 = C131810 - C131800;
    const double C134287 = C134284 - C134280;
    const double C135237 = C135234 - C135230;
    const double C123429 = C123423 - C123413;
    const double C123426 = C123420 - C123401;
    const double C124353 = C124350 - C124343;
    const double C125308 = C125305 - C125298;
    const double C131814 = C131811 - C131804;
    const double C134286 = C134283 - C134276;
    const double C135236 = C135233 - C135226;
    const double C30172 = C30171 * C139824;
    const double C93494 = C93493 * C139824;
    const double C22628 = C22622 + C22604;
    const double C22625 = C22619 + C22592;
    const double C25437 = C25434 + C25428;
    const double C26166 = C26163 + C26157;
    const double C31257 = C31251 + C31233;
    const double C31254 = C31248 + C31221;
    const double C36432 = C36429 + C36423;
    const double C22629 = C22623 + C22608;
    const double C22626 = C22620 + C22596;
    const double C25436 = C25433 + C25424;
    const double C26165 = C26162 + C26153;
    const double C31258 = C31252 + C31237;
    const double C31255 = C31249 + C31225;
    const double C36431 = C36428 + C36419;
    const double C47981 = C47975 + C47957;
    const double C47978 = C47972 + C47945;
    const double C50774 = C50771 + C50765;
    const double C51503 = C51500 + C51494;
    const double C94566 = C94560 + C94542;
    const double C94563 = C94557 + C94530;
    const double C99738 = C99735 + C99729;
    const double C47982 = C47976 + C47961;
    const double C47979 = C47973 + C47949;
    const double C50773 = C50770 + C50761;
    const double C51502 = C51499 + C51490;
    const double C94567 = C94561 + C94546;
    const double C94564 = C94558 + C94534;
    const double C99737 = C99734 + C99725;
    const double C68590 = C68582 + C68563;
    const double C68588 = C68580 + C68555;
    const double C68586 = C68578 + C68547;
    const double C68584 = C68576 + C68539;
    const double C71361 = C71359 + C71354;
    const double C72110 = C72106 + C72098;
    const double C72108 = C72104 + C72090;
    const double C76373 = C76371 + C76364;
    const double C77609 = C77605 + C77594;
    const double C77607 = C77603 + C77586;
    const double C80892 = C80890 + C80885;
    const double C84414 = C84412 + C84408;
    const double C124468 = C124466 + C124459;
    const double C129599 = C129597 + C129593;
    const double C9618 = C6689 + C6690;
    const double C42699 = C10429 + C10430;
    const double C42698 = C10430 + C10429;
    const double C21021 = C15685 + C15686;
    const double C68123 = C68117 + C68105;
    const double C68118 = C68112 + C68085;
    const double C69048 = C69045 + C69039;
    const double C69988 = C69985 + C69979;
    const double C87300 = C87297 + C87285;
    const double C89835 = C89832 + C89820;
    const double C92421 = C92418 + C92412;
    const double C68122 = C68116 + C68101;
    const double C68119 = C68113 + C68089;
    const double C69047 = C69044 + C69035;
    const double C69987 = C69984 + C69975;
    const double C87301 = C87298 + C87289;
    const double C89836 = C89833 + C89824;
    const double C92420 = C92417 + C92408;
    const double C123436 = C123430 + C123418;
    const double C123431 = C123425 + C123398;
    const double C124357 = C124354 + C124348;
    const double C125312 = C125309 + C125303;
    const double C131816 = C131813 + C131801;
    const double C134290 = C134287 + C134281;
    const double C135240 = C135237 + C135231;
    const double C123435 = C123429 + C123414;
    const double C123432 = C123426 + C123402;
    const double C124356 = C124353 + C124344;
    const double C125311 = C125308 + C125299;
    const double C131817 = C131814 + C131805;
    const double C134289 = C134286 + C134277;
    const double C135239 = C135236 + C135227;
    const double C71346 = C68586 + C68587;
    const double C80886 = C72109 + C72110;
    const double C80877 = C72110 + C72109;
    const double C129585 = C84414 + C84413;
    const double C9627 = C9618 * C139835;
    const double C71355 = C71346 * C139835;
    d2eexx[0] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C21780 * C114 - C21781 * C108 - C21780 * C115 + C140009 * C126 +
            C21782 * C116 - C21783 * C109 - C21782 * C117 + C140010 * C127 +
            C21784 * C118 - C21785 * C110 - C21784 * C119 + C21777 * C128) *
               C139835 * C139983 +
           (C21780 * C821 - C21781 * C813 - C21780 * C822 + C140009 * C828 +
            C21782 * C819 - C21783 * C812 - C21782 * C820 + C140010 * C827 +
            C21784 * C817 - C21785 * C811 - C21784 * C818 + C21777 * C826) *
               C139835 * C139873) *
              C139809 * C139792 * C97 -
          ((C21784 * C815 - C21785 * C810 - C21784 * C816 + C21777 * C825 +
            C21782 * C817 - C21783 * C811 - C21782 * C818 + C140010 * C826 +
            C21780 * C819 - C21781 * C812 - C21780 * C820 + C140009 * C827) *
               C139835 * C139873 +
           (C21784 * C120 - C21785 * C111 - C21784 * C121 + C21777 * C129 +
            C21782 * C118 - C21783 * C110 - C21782 * C119 + C140010 * C128 +
            C21780 * C116 - C21781 * C109 - C21780 * C117 + C140009 * C127) *
               C139835 * C139983) *
              C139809 * C139792 * C98 +
          ((C21780 * C118 - C21781 * C110 - C21780 * C119 + C140009 * C128 +
            C21782 * C120 - C21783 * C111 - C21782 * C121 + C140010 * C129 +
            C21784 * C122 - C21785 * C112 - C21784 * C123 + C21777 * C130) *
               C139835 * C139983 +
           (C21780 * C817 - C21781 * C811 - C21780 * C818 + C140009 * C826 +
            C21782 * C815 - C21783 * C810 - C21782 * C816 + C140010 * C825 +
            C21784 * C823 - C21785 * C814 - C21784 * C824 + C21777 * C829) *
               C139835 * C139873) *
              C139809 * C139792 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eexy[0] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C139983 * C183 - C21860 * C108 + C139873 * C896 - C21861 * C813) *
               C21780 +
           (C139983 * C189 - C21860 * C115 + C139873 * C901 - C21861 * C822) *
               C140009 +
           (C21863 - C21864 + C21865 - C21866) * C21782 +
           (C21867 - C21868 + C21869 - C21870) * C140010 + C21891 * C21784 +
           C21892 * C21777) *
              C139835 * C139809 * C139792 * C97 +
          ((C21864 - C21863 + C21866 - C21865) * C21780 +
           (C21868 - C21867 + C21870 - C21869) * C140009 +
           (C21872 - C21871 + C21874 - C21873) * C21782 +
           (C21876 - C21875 + C21878 - C21877) * C140010 +
           (C21879 - C21880 + C21881 - C21882) * C21784 +
           (C21883 - C21884 + C21885 - C21886) * C21777) *
              C139835 * C139809 * C139792 * C98 +
          (C21891 * C21780 + C21892 * C140009 +
           (C21880 - C21879 + C21882 - C21881) * C21782 +
           (C21884 - C21883 + C21886 - C21885) * C140010 +
           (C139983 * C187 - C21860 * C112 + C139873 * C900 - C21861 * C814) *
               C21784 +
           (C139983 * C193 - C21860 * C123 + C139873 * C905 - C21861 * C824) *
               C21777) *
              C139835 * C139809 * C139792 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eexz[0] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139835 * C266 - C265 * C108) * C21780 +
            (C139835 * C272 - C265 * C115) * C140009 + (C279 - C280) * C21782 +
            (C281 - C282) * C140010 + C295 * C21784 + C296 * C21777) *
               C139983 +
           ((C6915 - C6916) * C21780 + (C6917 - C6918) * C140009 +
            C6919 * C21782 + C6920 * C140010 + C21967 * C21784 +
            C21968 * C21777) *
               C139873) *
              C139809 * C139792 * C97 +
          (((C280 - C279) * C21780 + (C282 - C281) * C140009 +
            (C284 - C283) * C21782 + (C286 - C285) * C140010 +
            (C288 - C287) * C21784 + (C290 - C289) * C21777) *
               C139983 +
           (C6927 * C21780 + C6928 * C140009 + (C999 - C1000) * C21782 +
            (C1001 - C1002) * C140010 + (C1003 - C1004) * C21784 +
            (C1005 - C1006) * C21777) *
               C139873) *
              C139809 * C139792 * C98 +
          ((C295 * C21780 + C296 * C140009 + C297 * C21782 + C298 * C140010 +
            (C292 - C291) * C21784 + (C294 - C293) * C21777) *
               C139983 +
           (C21967 * C21780 + C21968 * C140009 + (C1004 - C1003) * C21782 +
            (C1006 - C1005) * C140010 +
            (C139835 * C988 - C265 * C814) * C21784 +
            (C139835 * C993 - C265 * C824) * C21777) *
               C139873) *
              C139809 * C139792 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[0] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((C140009 * C114 - C21780 * C108 + C140010 * C116 -
                     C21782 * C109 + C21777 * C118 - C21784 * C110) *
                        C21860 +
                    (C140009 * C354 - C21780 * C348 + C140010 * C355 -
                     C21782 * C349 + C21777 * C356 - C21784 * C350) *
                        C139983 +
                    (C140009 * C821 - C21780 * C813 + C140010 * C819 -
                     C21782 * C812 + C21777 * C817 - C21784 * C811) *
                        C21861 +
                    (C140009 * C1077 - C21780 * C1072 + C140010 * C1078 -
                     C21782 * C1073 + C21777 * C1079 - C21784 * C1074) *
                        C139873) *
                       C139835 * C139809 * C139792 * C97 +
                   ((C21780 * C109 - C140009 * C116 + C21782 * C110 -
                     C140010 * C118 + C21784 * C111 - C21777 * C120) *
                        C21860 +
                    (C21780 * C349 - C140009 * C355 + C21782 * C350 -
                     C140010 * C356 + C21784 * C351 - C21777 * C357) *
                        C139983 +
                    (C21780 * C812 - C140009 * C819 + C21782 * C811 -
                     C140010 * C817 + C21784 * C810 - C21777 * C815) *
                        C21861 +
                    (C21780 * C1073 - C140009 * C1078 + C21782 * C1074 -
                     C140010 * C1079 + C21784 * C1075 - C21777 * C1080) *
                        C139873) *
                       C139835 * C139809 * C139792 * C98 +
                   ((C140009 * C118 - C21780 * C110 + C140010 * C120 -
                     C21782 * C111 + C21777 * C122 - C21784 * C112) *
                        C21860 +
                    (C140009 * C356 - C21780 * C350 + C140010 * C357 -
                     C21782 * C351 + C21777 * C358 - C21784 * C352) *
                        C139983 +
                    (C140009 * C817 - C21780 * C811 + C140010 * C815 -
                     C21782 * C810 + C21777 * C823 - C21784 * C814) *
                        C21861 +
                    (C140009 * C1079 - C21780 * C1074 + C140010 * C1080 -
                     C21782 * C1075 + C21777 * C1081 - C21784 * C1076) *
                        C139873) *
                       C139835 * C139809 * C139792 * C99)) /
                 (p * q * std::sqrt(p + q));
    d2eeyy[0] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C21860 * C183 - C22116 * C108 - C21860 * C348 + C139983 * C411 +
            C21861 * C896 - C22117 * C813 - C21861 * C1072 + C139873 * C1151) *
               C140009 +
           (C22155 + C22156) * C140010 + C22161 * C21777) *
              C139835 * C139809 * C139792 * C97 -
          ((C22159 + C22160) * C21777 + (C22158 + C22157) * C140010 +
           (C22156 + C22155) * C140009) *
              C139835 * C139809 * C139792 * C98 +
          (C22161 * C140009 + (C22160 + C22159) * C140010 +
           (C21860 * C187 - C22116 * C112 - C21860 * C352 + C139983 * C415 +
            C21861 * C900 - C22117 * C814 - C21861 * C1076 + C139873 * C1152) *
               C21777) *
              C139835 * C139809 * C139792 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[0] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C139835 * C266 - C265 * C108) * C21860 +
                     (C139835 * C495 - C265 * C348) * C139983 +
                     (C6915 - C6916) * C21861 + (C7294 - C7295) * C139873) *
                        C140009 +
                    ((C279 - C280) * C21860 + (C502 - C503) * C139983 +
                     C6919 * C21861 + C7298 * C139873) *
                        C140010 +
                    C22243 * C21777) *
                       C139809 * C139792 * C97 +
                   (((C280 - C279) * C21860 + (C503 - C502) * C139983 +
                     C6927 * C21861 + C7300 * C139873) *
                        C140009 +
                    ((C284 - C283) * C21860 + (C506 - C505) * C139983 +
                     (C999 - C1000) * C21861 + (C1248 - C1249) * C139873) *
                        C140010 +
                    ((C288 - C287) * C21860 + (C509 - C508) * C139983 +
                     (C1003 - C1004) * C21861 + (C1250 - C1251) * C139873) *
                        C21777) *
                       C139809 * C139792 * C98 +
                   (C22243 * C140009 +
                    (C297 * C21860 + C513 * C139983 + (C1004 - C1003) * C21861 +
                     (C1251 - C1250) * C139873) *
                        C140010 +
                    ((C292 - C291) * C21860 + (C511 - C510) * C139983 +
                     (C139835 * C988 - C265 * C814) * C21861 +
                     (C139835 * C1244 - C265 * C1076) * C139873) *
                        C21777) *
                       C139809 * C139792 * C99)) /
                 (p * q * std::sqrt(p + q));
    d2eezx[0] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C140009 * C114 - C21780 * C108 + C140010 * C116 -
                      C21782 * C109 + C21777 * C118 - C21784 * C110) *
                         C265 +
                     (C140009 * C573 - C21780 * C567 + C140010 * C574 -
                      C21782 * C568 + C21777 * C575 - C21784 * C569) *
                         C139835) *
                        C139983 +
                    ((C140009 * C821 - C21780 * C813 + C140010 * C819 -
                      C21782 * C812 + C21777 * C817 - C21784 * C811) *
                         C265 +
                     (C140009 * C1322 - C21780 * C1317 + C140010 * C1323 -
                      C21782 * C1318 + C21777 * C1324 - C21784 * C1319) *
                         C139835) *
                        C139873) *
                       C139809 * C139792 * C97 +
                   (((C21780 * C109 - C140009 * C116 + C21782 * C110 -
                      C140010 * C118 + C21784 * C111 - C21777 * C120) *
                         C265 +
                     (C21780 * C568 - C140009 * C574 + C21782 * C569 -
                      C140010 * C575 + C21784 * C570 - C21777 * C576) *
                         C139835) *
                        C139983 +
                    ((C21780 * C812 - C140009 * C819 + C21782 * C811 -
                      C140010 * C817 + C21784 * C810 - C21777 * C815) *
                         C265 +
                     (C21780 * C1318 - C140009 * C1323 + C21782 * C1319 -
                      C140010 * C1324 + C21784 * C1320 - C21777 * C1325) *
                         C139835) *
                        C139873) *
                       C139809 * C139792 * C98 +
                   (((C140009 * C118 - C21780 * C110 + C140010 * C120 -
                      C21782 * C111 + C21777 * C122 - C21784 * C112) *
                         C265 +
                     (C140009 * C575 - C21780 * C569 + C140010 * C576 -
                      C21782 * C570 + C21777 * C577 - C21784 * C571) *
                         C139835) *
                        C139983 +
                    ((C140009 * C817 - C21780 * C811 + C140010 * C815 -
                      C21782 * C810 + C21777 * C823 - C21784 * C814) *
                         C265 +
                     (C140009 * C1324 - C21780 * C1319 + C140010 * C1325 -
                      C21782 * C1320 + C21777 * C1326 - C21784 * C1321) *
                         C139835) *
                        C139873) *
                       C139809 * C139792 * C99)) /
                 (p * q * std::sqrt(p + q));
    d2eezy[0] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139983 * C183 - C21860 * C108 + C139873 * C896 - C21861 * C813) *
                C265 +
            (C139983 * C629 - C21860 * C567 + C139873 * C1393 -
             C21861 * C1317) *
                C139835) *
               C140009 +
           ((C21863 - C21864 + C21865 - C21866) * C265 +
            (C22392 - C22393 + C22394 - C22395) * C139835) *
               C140010 +
           C22409 * C21777) *
              C139809 * C139792 * C97 +
          (((C21864 - C21863 + C21866 - C21865) * C265 +
            (C22393 - C22392 + C22395 - C22394) * C139835) *
               C140009 +
           ((C21872 - C21871 + C21874 - C21873) * C265 +
            (C22398 - C22397 + C22400 - C22399) * C139835) *
               C140010 +
           ((C21879 - C21880 + C21881 - C21882) * C265 +
            (C22401 - C22402 + C22403 - C22404) * C139835) *
               C21777) *
              C139809 * C139792 * C98 +
          (C22409 * C140009 +
           ((C21880 - C21879 + C21882 - C21881) * C265 +
            (C22402 - C22401 + C22404 - C22403) * C139835) *
               C140010 +
           ((C139983 * C187 - C21860 * C112 + C139873 * C900 - C21861 * C814) *
                C265 +
            (C139983 * C633 - C21860 * C571 + C139873 * C1397 -
             C21861 * C1321) *
                C139835) *
               C21777) *
              C139809 * C139792 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eezz[0] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C265 * C266 - C701 * C108 - C265 * C567 + C139835 * C702) *
                C139983 +
            C7652 * C139873) *
               C140009 +
           (C22484 + C22485) * C140010 + C22490 * C21777) *
              C139809 * C139792 * C97 -
          ((C22488 + C22489) * C21777 + (C22487 + C22486) * C140010 +
           (C22485 + C22484) * C140009) *
              C139809 * C139792 * C98 +
          (C22490 * C140009 + (C22489 + C22488) * C140010 +
           (C736 * C139983 +
            (C265 * C988 - C701 * C814 - C265 * C1321 + C139835 * C1474) *
                C139873) *
               C21777) *
              C139809 * C139792 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eexx[1] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C21780 * C114 - C21781 * C108 - C21780 * C115 + C140009 * C126 +
             C21782 * C116 - C21783 * C109 - C21782 * C117 + C140010 * C127 +
             C21784 * C118 - C21785 * C110 - C21784 * C119 + C21777 * C128) *
                C139835 * C139983 +
            (C22625 + C22626 + C22627) * C139835 * C139873) *
               C139809 * C806 -
           ((C21784 * C2916 - C21785 * C2910 - C21784 * C2917 + C21777 * C2922 +
             C21782 * C2914 - C21783 * C2909 - C21782 * C2915 +
             C140010 * C2921 + C21780 * C2912 - C21781 * C2908 -
             C21780 * C2913 + C140009 * C2920) *
                C139835 * C139873 +
            (C22627 + C22626 + C22625) * C139835 * C139983) *
               C139809 * C140000) *
              C808 +
          (((C22628 + C22629 + C22630) * C139835 * C139983 +
            (C21780 * C2914 - C21781 * C2909 - C21780 * C2915 +
             C140009 * C2921 + C21782 * C2916 - C21783 * C2910 -
             C21782 * C2917 + C140010 * C2922 + C21784 * C2918 -
             C21785 * C2911 - C21784 * C2919 + C21777 * C2923) *
                C139835 * C139873) *
               C139809 * C140000 -
           ((C22630 + C22629 + C22628) * C139835 * C139873 +
            (C21784 * C120 - C21785 * C111 - C21784 * C121 + C21777 * C129 +
             C21782 * C118 - C21783 * C110 - C21782 * C119 + C140010 * C128 +
             C21780 * C116 - C21781 * C109 - C21780 * C117 + C140009 * C127) *
                C139835 * C139983) *
               C139809 * C806) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexy[1] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139983 * C183 - C21860 * C108 + C139873 * C896 - C21861 * C813) *
                C21780 +
            (C139983 * C189 - C21860 * C115 + C139873 * C901 - C21861 * C822) *
                C140009 +
            (C21863 - C21864 + C21865 - C21866) * C21782 +
            (C21867 - C21868 + C21869 - C21870) * C140010 + C21891 * C21784 +
            C21892 * C21777) *
               C139835 * C139809 * C806 +
           ((C21860 * C813 - C139983 * C896 + C21861 * C2908 -
             C139873 * C2974) *
                C21780 +
            (C21860 * C822 - C139983 * C901 + C21861 * C2913 -
             C139873 * C2978) *
                C140009 +
            (C22729 - C22730 + C22731 - C22732) * C21782 +
            (C22733 - C22734 + C22735 - C22736) * C140010 +
            (C22737 - C22738 + C22739 - C22740) * C21784 +
            (C22741 - C22742 + C22743 - C22744) * C21777) *
               C139835 * C139809 * C140000) *
              C808 +
          (((C21864 - C21863 + C21866 - C21865) * C21780 +
            (C21868 - C21867 + C21870 - C21869) * C140009 +
            (C21872 - C21871 + C21874 - C21873) * C21782 +
            (C21876 - C21875 + C21878 - C21877) * C140010 +
            (C21879 - C21880 + C21881 - C21882) * C21784 +
            (C21883 - C21884 + C21885 - C21886) * C21777) *
               C139835 * C139809 * C806 +
           ((C22730 - C22729 + C22732 - C22731) * C21780 +
            (C22734 - C22733 + C22736 - C22735) * C140009 +
            (C22738 - C22737 + C22740 - C22739) * C21782 +
            (C22742 - C22741 + C22744 - C22743) * C140010 +
            (C139983 * C899 - C21860 * C810 + C139873 * C2977 -
             C21861 * C2911) *
                C21784 +
            (C139983 * C904 - C21860 * C816 + C139873 * C2981 -
             C21861 * C2919) *
                C21777) *
               C139835 * C139809 * C140000) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexz[1] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139835 * C266 - C265 * C108) * C21780 +
             (C139835 * C272 - C265 * C115) * C140009 + (C279 - C280) * C21782 +
             (C281 - C282) * C140010 + C295 * C21784 + C296 * C21777) *
                C139983 +
            ((C6915 - C6916) * C21780 + (C6917 - C6918) * C140009 +
             C6919 * C21782 + C6920 * C140010 + C21967 * C21784 +
             C21968 * C21777) *
                C139873) *
               C139809 * C806 +
           (((C6916 - C6915) * C21780 + (C6918 - C6917) * C140009 +
             C6927 * C21782 + C6928 * C140010 + C22843 * C21784 +
             C22844 * C21777) *
                C139983 +
            ((C6922 - C6921) * C21780 + (C6924 - C6923) * C140009 +
             C6929 * C21782 + C6930 * C140010 + (C6000 - C6001) * C21784 +
             (C6002 - C6003) * C21777) *
                C139873) *
               C139809 * C140000) *
              C808 +
          ((((C280 - C279) * C21780 + (C282 - C281) * C140009 +
             (C284 - C283) * C21782 + (C286 - C285) * C140010 +
             (C288 - C287) * C21784 + (C290 - C289) * C21777) *
                C139983 +
            (C6927 * C21780 + C6928 * C140009 + C22843 * C21782 +
             C22844 * C140010 + (C1003 - C1004) * C21784 +
             (C1005 - C1006) * C21777) *
                C139873) *
               C139809 * C806 +
           ((C6919 * C21780 + C6920 * C140009 + C21967 * C21782 +
             C21968 * C140010 + (C1004 - C1003) * C21784 +
             (C1006 - C1005) * C21777) *
                C139983 +
            (C6925 * C21780 + C6926 * C140009 + (C6001 - C6000) * C21782 +
             (C6003 - C6002) * C140010 +
             (C139835 * C3035 - C265 * C2911) * C21784 +
             (C139835 * C3039 - C265 * C2919) * C21777) *
                C139873) *
               C139809 * C140000) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[1] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C140009 * C114 - C21780 * C108 + C140010 * C116 - C21782 * C109 +
             C21777 * C118 - C21784 * C110) *
                C21860 +
            (C140009 * C354 - C21780 * C348 + C140010 * C355 - C21782 * C349 +
             C21777 * C356 - C21784 * C350) *
                C139983 +
            (C22943 - C22944 + C22945 - C22946 + C22947 - C22948) * C21861 +
            (C22949 - C22950 + C22951 - C22952 + C22953 - C22954) * C139873) *
               C139835 * C139809 * C806 +
           ((C22944 - C22943 + C22946 - C22945 + C22948 - C22947) * C21860 +
            (C22950 - C22949 + C22952 - C22951 + C22954 - C22953) * C139983 +
            (C21780 * C2908 - C140009 * C2912 + C21782 * C2909 -
             C140010 * C2914 + C21784 * C2910 - C21777 * C2916) *
                C21861 +
            (C21780 * C3090 - C140009 * C3094 + C21782 * C3091 -
             C140010 * C3095 + C21784 * C3092 - C21777 * C3096) *
                C139873) *
               C139835 * C139809 * C140000) *
              C808 +
          (((C21780 * C109 - C140009 * C116 + C21782 * C110 - C140010 * C118 +
             C21784 * C111 - C21777 * C120) *
                C21860 +
            (C21780 * C349 - C140009 * C355 + C21782 * C350 - C140010 * C356 +
             C21784 * C351 - C21777 * C357) *
                C139983 +
            (C22955 - C22956 + C22957 - C22958 + C22959 - C22960) * C21861 +
            (C22961 - C22962 + C22963 - C22964 + C22965 - C22966) * C139873) *
               C139835 * C139809 * C806 +
           ((C22956 - C22955 + C22958 - C22957 + C22960 - C22959) * C21860 +
            (C22962 - C22961 + C22964 - C22963 + C22966 - C22965) * C139983 +
            (C140009 * C2914 - C21780 * C2909 + C140010 * C2916 -
             C21782 * C2910 + C21777 * C2918 - C21784 * C2911) *
                C21861 +
            (C140009 * C3095 - C21780 * C3091 + C140010 * C3096 -
             C21782 * C3092 + C21777 * C3097 - C21784 * C3093) *
                C139873) *
               C139835 * C139809 * C140000) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[1] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C21860 * C183 - C22116 * C108 - C21860 * C348 + C139983 * C411 +
             C21861 * C896 - C22117 * C813 - C21861 * C1072 + C139873 * C1151) *
                C140009 +
            (C22155 + C22156) * C140010 + C22161 * C21777) *
               C139835 * C139809 * C806 -
           ((C23089 + C23090) * C21777 + (C23091 + C23092) * C140010 +
            (C21861 * C2974 - C22117 * C2908 - C21861 * C3090 +
             C139873 * C3148 + C21860 * C896 - C22116 * C813 - C21860 * C1072 +
             C139983 * C1151) *
                C140009) *
               C139835 * C139809 * C140000) *
              C808 +
          (((C23092 + C23091) * C140009 + (C23090 + C23089) * C140010 +
            (C21860 * C899 - C22116 * C810 - C21860 * C1075 + C139983 * C1148 +
             C21861 * C2977 - C22117 * C2911 - C21861 * C3093 +
             C139873 * C3151) *
                C21777) *
               C139835 * C139809 * C140000 -
           ((C22159 + C22160) * C21777 + (C22158 + C22157) * C140010 +
            (C22156 + C22155) * C140009) *
               C139835 * C139809 * C806) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[1] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C139835 * C266 - C265 * C108) * C21860 +
                      (C139835 * C495 - C265 * C348) * C139983 +
                      (C6915 - C6916) * C21861 + (C7294 - C7295) * C139873) *
                         C140009 +
                     ((C279 - C280) * C21860 + (C502 - C503) * C139983 +
                      C6919 * C21861 + C7298 * C139873) *
                         C140010 +
                     C22243 * C21777) *
                        C139809 * C806 +
                    (((C6916 - C6915) * C21860 + (C7295 - C7294) * C139983 +
                      (C6922 - C6921) * C21861 + (C7297 - C7296) * C139873) *
                         C140009 +
                     (C6927 * C21860 + C7300 * C139983 + C6929 * C21861 +
                      C7301 * C139873) *
                         C140010 +
                     (C22843 * C21860 + C23191 * C139983 +
                      (C6000 - C6001) * C21861 + (C6273 - C6274) * C139873) *
                         C21777) *
                        C139809 * C140000) *
                       C808 +
                   ((((C280 - C279) * C21860 + (C503 - C502) * C139983 +
                      C6927 * C21861 + C7300 * C139873) *
                         C140009 +
                     ((C284 - C283) * C21860 + (C506 - C505) * C139983 +
                      C22843 * C21861 + C23191 * C139873) *
                         C140010 +
                     ((C288 - C287) * C21860 + (C509 - C508) * C139983 +
                      (C1003 - C1004) * C21861 + (C1250 - C1251) * C139873) *
                         C21777) *
                        C139809 * C806 +
                    ((C6919 * C21860 + C7298 * C139983 + C6925 * C21861 +
                      C7299 * C139873) *
                         C140009 +
                     (C21967 * C21860 + C22239 * C139983 +
                      (C6001 - C6000) * C21861 + (C6274 - C6273) * C139873) *
                         C140010 +
                     ((C1004 - C1003) * C21860 + (C1251 - C1250) * C139983 +
                      (C139835 * C3035 - C265 * C2911) * C21861 +
                      (C139835 * C3205 - C265 * C3093) * C139873) *
                         C21777) *
                        C139809 * C140000) *
                       C139998)) /
                 (p * q * std::sqrt(p + q));
    d2eezx[1] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C140009 * C114 - C21780 * C108 + C140010 * C116 - C21782 * C109 +
              C21777 * C118 - C21784 * C110) *
                 C265 +
             (C140009 * C573 - C21780 * C567 + C140010 * C574 - C21782 * C568 +
              C21777 * C575 - C21784 * C569) *
                 C139835) *
                C139983 +
            ((C22943 - C22944 + C22945 - C22946 + C22947 - C22948) * C265 +
             (C23290 - C23291 + C23292 - C23293 + C23294 - C23295) * C139835) *
                C139873) *
               C139809 * C806 +
           (((C22944 - C22943 + C22946 - C22945 + C22948 - C22947) * C265 +
             (C23291 - C23290 + C23293 - C23292 + C23295 - C23294) * C139835) *
                C139983 +
            ((C21780 * C2908 - C140009 * C2912 + C21782 * C2909 -
              C140010 * C2914 + C21784 * C2910 - C21777 * C2916) *
                 C265 +
             (C21780 * C3256 - C140009 * C3260 + C21782 * C3257 -
              C140010 * C3261 + C21784 * C3258 - C21777 * C3262) *
                 C139835) *
                C139873) *
               C139809 * C140000) *
              C808 +
          ((((C21780 * C109 - C140009 * C116 + C21782 * C110 - C140010 * C118 +
              C21784 * C111 - C21777 * C120) *
                 C265 +
             (C21780 * C568 - C140009 * C574 + C21782 * C569 - C140010 * C575 +
              C21784 * C570 - C21777 * C576) *
                 C139835) *
                C139983 +
            ((C22955 - C22956 + C22957 - C22958 + C22959 - C22960) * C265 +
             (C23296 - C23297 + C23298 - C23299 + C23300 - C23301) * C139835) *
                C139873) *
               C139809 * C806 +
           (((C22956 - C22955 + C22958 - C22957 + C22960 - C22959) * C265 +
             (C23297 - C23296 + C23299 - C23298 + C23301 - C23300) * C139835) *
                C139983 +
            ((C140009 * C2914 - C21780 * C2909 + C140010 * C2916 -
              C21782 * C2910 + C21777 * C2918 - C21784 * C2911) *
                 C265 +
             (C140009 * C3261 - C21780 * C3257 + C140010 * C3262 -
              C21782 * C3258 + C21777 * C3263 - C21784 * C3259) *
                 C139835) *
                C139873) *
               C139809 * C140000) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eezy[1] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139983 * C183 - C21860 * C108 + C139873 * C896 - C21861 * C813) *
                 C265 +
             (C139983 * C629 - C21860 * C567 + C139873 * C1393 -
              C21861 * C1317) *
                 C139835) *
                C140009 +
            ((C21863 - C21864 + C21865 - C21866) * C265 +
             (C22392 - C22393 + C22394 - C22395) * C139835) *
                C140010 +
            C22409 * C21777) *
               C139809 * C806 +
           (((C21860 * C813 - C139983 * C896 + C21861 * C2908 -
              C139873 * C2974) *
                 C265 +
             (C21860 * C1317 - C139983 * C1393 + C21861 * C3256 -
              C139873 * C3314) *
                 C139835) *
                C140009 +
            ((C22729 - C22730 + C22731 - C22732) * C265 +
             (C23400 - C23401 + C23402 - C23403) * C139835) *
                C140010 +
            ((C22737 - C22738 + C22739 - C22740) * C265 +
             (C23404 - C23405 + C23406 - C23407) * C139835) *
                C21777) *
               C139809 * C140000) *
              C808 +
          ((((C21864 - C21863 + C21866 - C21865) * C265 +
             (C22393 - C22392 + C22395 - C22394) * C139835) *
                C140009 +
            ((C21872 - C21871 + C21874 - C21873) * C265 +
             (C22398 - C22397 + C22400 - C22399) * C139835) *
                C140010 +
            ((C21879 - C21880 + C21881 - C21882) * C265 +
             (C22401 - C22402 + C22403 - C22404) * C139835) *
                C21777) *
               C139809 * C806 +
           (((C22730 - C22729 + C22732 - C22731) * C265 +
             (C23401 - C23400 + C23403 - C23402) * C139835) *
                C140009 +
            ((C22738 - C22737 + C22740 - C22739) * C265 +
             (C23405 - C23404 + C23407 - C23406) * C139835) *
                C140010 +
            ((C139983 * C899 - C21860 * C810 + C139873 * C2977 -
              C21861 * C2911) *
                 C265 +
             (C139983 * C1396 - C21860 * C1320 + C139873 * C3317 -
              C21861 * C3259) *
                 C139835) *
                C21777) *
               C139809 * C140000) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eezz[1] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C265 * C266 - C701 * C108 - C265 * C567 + C139835 * C702) *
                 C139983 +
             C7652 * C139873) *
                C140009 +
            (C22484 + C22485) * C140010 + C22490 * C21777) *
               C139809 * C806 -
           ((C23506 + C23507) * C21777 + (C23508 + C23509) * C140010 +
            (C7653 * C139873 + C7652 * C139983) * C140009) *
               C139809 * C140000) *
              C808 +
          (((C23509 + C23508) * C140009 + (C23507 + C23506) * C140010 +
            (C1494 * C139983 +
             (C265 * C3035 - C701 * C2911 - C265 * C3259 + C139835 * C3371) *
                 C139873) *
                C21777) *
               C139809 * C140000 -
           ((C22488 + C22489) * C21777 + (C22487 + C22486) * C140010 +
            (C22485 + C22484) * C140009) *
               C139809 * C806) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexx[2] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C21780 * C114 - C21781 * C108 - C21780 * C115 + C140009 * C126 +
             C21782 * C116 - C21783 * C109 - C21782 * C117 + C140010 * C127 +
             C21784 * C118 - C21785 * C110 - C21784 * C119 + C21777 * C128) *
                C139835 * C139983 +
            (C22625 + C22626 + C22627) * C139835 * C139873) *
               C1565 -
           ((C21784 * C3446 - C21785 * C3440 - C21784 * C3447 + C21777 * C3452 +
             C21782 * C3444 - C21783 * C3439 - C21782 * C3445 +
             C140010 * C3451 + C21780 * C3442 - C21781 * C3438 -
             C21780 * C3443 + C140009 * C3450) *
                C139835 * C139873 +
            (C21784 * C1574 - C21785 * C1568 - C21784 * C1575 + C21777 * C1583 +
             C21782 * C1576 - C21783 * C1569 - C21782 * C1577 +
             C140010 * C1584 + C21780 * C1578 - C21781 * C1570 -
             C21780 * C1579 + C140009 * C1585) *
                C139835 * C139983) *
               C140002) *
              C139792 * C808 +
          (((C21780 * C1576 - C21781 * C1569 - C21780 * C1577 +
             C140009 * C1584 + C21782 * C1574 - C21783 * C1568 -
             C21782 * C1575 + C140010 * C1583 + C21784 * C1572 -
             C21785 * C1567 - C21784 * C1573 + C21777 * C1582) *
                C139835 * C139983 +
            (C21780 * C3444 - C21781 * C3439 - C21780 * C3445 +
             C140009 * C3451 + C21782 * C3446 - C21783 * C3440 -
             C21782 * C3447 + C140010 * C3452 + C21784 * C3448 -
             C21785 * C3441 - C21784 * C3449 + C21777 * C3453) *
                C139835 * C139873) *
               C140002 -
           ((C22630 + C22629 + C22628) * C139835 * C139873 +
            (C21784 * C120 - C21785 * C111 - C21784 * C121 + C21777 * C129 +
             C21782 * C118 - C21783 * C110 - C21782 * C119 + C140010 * C128 +
             C21780 * C116 - C21781 * C109 - C21780 * C117 + C140009 * C127) *
                C139835 * C139983) *
               C1565) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexy[2] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139983 * C183 - C21860 * C108 + C139873 * C896 - C21861 * C813) *
                C21780 +
            (C139983 * C189 - C21860 * C115 + C139873 * C901 - C21861 * C822) *
                C140009 +
            (C21863 - C21864 + C21865 - C21866) * C21782 +
            (C21867 - C21868 + C21869 - C21870) * C140010 + C21891 * C21784 +
            C21892 * C21777) *
               C139835 * C1565 +
           ((C21860 * C1570 - C139983 * C1653 + C21861 * C3438 -
             C139873 * C3520) *
                C21780 +
            (C21860 * C1579 - C139983 * C1658 + C21861 * C3443 -
             C139873 * C3524) *
                C140009 +
            (C23706 - C23707 + C23708 - C23709) * C21782 +
            (C23710 - C23711 + C23712 - C23713) * C140010 +
            (C23714 - C23715 + C23716 - C23717) * C21784 +
            (C23718 - C23719 + C23720 - C23721) * C21777) *
               C139835 * C140002) *
              C139792 * C808 +
          (((C21864 - C21863 + C21866 - C21865) * C21780 +
            (C21868 - C21867 + C21870 - C21869) * C140009 +
            (C21872 - C21871 + C21874 - C21873) * C21782 +
            (C21876 - C21875 + C21878 - C21877) * C140010 +
            (C21879 - C21880 + C21881 - C21882) * C21784 +
            (C21883 - C21884 + C21885 - C21886) * C21777) *
               C139835 * C1565 +
           ((C23707 - C23706 + C23709 - C23708) * C21780 +
            (C23711 - C23710 + C23713 - C23712) * C140009 +
            (C23715 - C23714 + C23717 - C23716) * C21782 +
            (C23719 - C23718 + C23721 - C23720) * C140010 +
            (C139983 * C1656 - C21860 * C1567 + C139873 * C3523 -
             C21861 * C3441) *
                C21784 +
            (C139983 * C1661 - C21860 * C1573 + C139873 * C3527 -
             C21861 * C3449) *
                C21777) *
               C139835 * C140002) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexz[2] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139835 * C266 - C265 * C108) * C21780 +
             (C139835 * C272 - C265 * C115) * C140009 + (C279 - C280) * C21782 +
             (C281 - C282) * C140010 + C295 * C21784 + C296 * C21777) *
                C139983 +
            ((C6915 - C6916) * C21780 + (C6917 - C6918) * C140009 +
             C6919 * C21782 + C6920 * C140010 + C21967 * C21784 +
             C21968 * C21777) *
                C139873) *
               C1565 +
           (((C265 * C1570 - C139835 * C1741) * C21780 +
             (C265 * C1579 - C139835 * C1746) * C140009 +
             (C1752 - C1753) * C21782 + (C1754 - C1755) * C140010 +
             (C1756 - C1757) * C21784 + (C1758 - C1759) * C21777) *
                C139983 +
            ((C10635 - C10636) * C21780 + (C10637 - C10638) * C140009 +
             (C7986 - C7987) * C21782 + (C7988 - C7989) * C140010 +
             (C23820 - C23821) * C21784 + (C23822 - C23823) * C21777) *
                C139873) *
               C140002) *
              C139792 * C808 +
          ((((C280 - C279) * C21780 + (C282 - C281) * C140009 +
             (C284 - C283) * C21782 + (C286 - C285) * C140010 +
             (C288 - C287) * C21784 + (C290 - C289) * C21777) *
                C139983 +
            (C6927 * C21780 + C6928 * C140009 + C22843 * C21782 +
             C22844 * C140010 + (C1003 - C1004) * C21784 +
             (C1005 - C1006) * C21777) *
                C139873) *
               C1565 +
           (((C1753 - C1752) * C21780 + (C1755 - C1754) * C140009 +
             (C1757 - C1756) * C21782 + (C1759 - C1758) * C140010 +
             (C1761 - C1760) * C21784 + (C1763 - C1762) * C21777) *
                C139983 +
            ((C7987 - C7986) * C21780 + (C7989 - C7988) * C140009 +
             (C23821 - C23820) * C21782 + (C23823 - C23822) * C140010 +
             (C139835 * C3597 - C265 * C3441) * C21784 +
             (C139835 * C3601 - C265 * C3449) * C21777) *
                C139873) *
               C140002) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[2] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C140009 * C114 - C21780 * C108 + C140010 * C116 - C21782 * C109 +
             C21777 * C118 - C21784 * C110) *
                C21860 +
            (C140009 * C354 - C21780 * C348 + C140010 * C355 - C21782 * C349 +
             C21777 * C356 - C21784 * C350) *
                C139983 +
            (C22943 - C22944 + C22945 - C22946 + C22947 - C22948) * C21861 +
            (C22949 - C22950 + C22951 - C22952 + C22953 - C22954) * C139873) *
               C139835 * C1565 +
           ((C21780 * C1570 - C140009 * C1578 + C21782 * C1569 -
             C140010 * C1576 + C21784 * C1568 - C21777 * C1574) *
                C21860 +
            (C21780 * C1829 - C140009 * C1834 + C21782 * C1830 -
             C140010 * C1835 + C21784 * C1831 - C21777 * C1836) *
                C139983 +
            (C21780 * C3438 - C140009 * C3442 + C21782 * C3439 -
             C140010 * C3444 + C21784 * C3440 - C21777 * C3446) *
                C21861 +
            (C21780 * C3668 - C140009 * C3672 + C21782 * C3669 -
             C140010 * C3673 + C21784 * C3670 - C21777 * C3674) *
                C139873) *
               C139835 * C140002) *
              C139792 * C808 +
          (((C21780 * C109 - C140009 * C116 + C21782 * C110 - C140010 * C118 +
             C21784 * C111 - C21777 * C120) *
                C21860 +
            (C21780 * C349 - C140009 * C355 + C21782 * C350 - C140010 * C356 +
             C21784 * C351 - C21777 * C357) *
                C139983 +
            (C22955 - C22956 + C22957 - C22958 + C22959 - C22960) * C21861 +
            (C22961 - C22962 + C22963 - C22964 + C22965 - C22966) * C139873) *
               C139835 * C1565 +
           ((C140009 * C1576 - C21780 * C1569 + C140010 * C1574 -
             C21782 * C1568 + C21777 * C1572 - C21784 * C1567) *
                C21860 +
            (C140009 * C1835 - C21780 * C1830 + C140010 * C1836 -
             C21782 * C1831 + C21777 * C1837 - C21784 * C1832) *
                C139983 +
            (C140009 * C3444 - C21780 * C3439 + C140010 * C3446 -
             C21782 * C3440 + C21777 * C3448 - C21784 * C3441) *
                C21861 +
            (C140009 * C3673 - C21780 * C3669 + C140010 * C3674 -
             C21782 * C3670 + C21777 * C3675 - C21784 * C3671) *
                C139873) *
               C139835 * C140002) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[2] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C21860 * C183 - C22116 * C108 - C21860 * C348 + C139983 * C411 +
             C21861 * C896 - C22117 * C813 - C21861 * C1072 + C139873 * C1151) *
                C140009 +
            (C22155 + C22156) * C140010 + C22161 * C21777) *
               C139835 * C1565 -
           ((C24044 + C24045) * C21777 + (C24046 + C24047) * C140010 +
            (C21861 * C3520 - C22117 * C3438 - C21861 * C3668 +
             C139873 * C3742 + C21860 * C1653 - C22116 * C1570 -
             C21860 * C1829 + C139983 * C1908) *
                C140009) *
               C139835 * C140002) *
              C139792 * C808 +
          (((C24047 + C24046) * C140009 + (C24045 + C24044) * C140010 +
            (C21860 * C1656 - C22116 * C1567 - C21860 * C1832 +
             C139983 * C1905 + C21861 * C3523 - C22117 * C3441 -
             C21861 * C3671 + C139873 * C3745) *
                C21777) *
               C139835 * C140002 -
           ((C22159 + C22160) * C21777 + (C22158 + C22157) * C140010 +
            (C22156 + C22155) * C140009) *
               C139835 * C1565) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[2] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139835 * C266 - C265 * C108) * C21860 +
             (C139835 * C495 - C265 * C348) * C139983 +
             (C6915 - C6916) * C21861 + (C7294 - C7295) * C139873) *
                C140009 +
            ((C279 - C280) * C21860 + (C502 - C503) * C139983 + C6919 * C21861 +
             C7298 * C139873) *
                C140010 +
            C22243 * C21777) *
               C1565 +
           (((C265 * C1570 - C139835 * C1741) * C21860 +
             (C265 * C1829 - C139835 * C1997) * C139983 +
             (C10635 - C10636) * C21861 + (C10961 - C10962) * C139873) *
                C140009 +
            ((C1752 - C1753) * C21860 + (C2003 - C2004) * C139983 +
             (C7986 - C7987) * C21861 + (C8321 - C8322) * C139873) *
                C140010 +
            ((C1756 - C1757) * C21860 + (C2005 - C2006) * C139983 +
             (C23820 - C23821) * C21861 + (C24146 - C24147) * C139873) *
                C21777) *
               C140002) *
              C139792 * C808 +
          ((((C280 - C279) * C21860 + (C503 - C502) * C139983 + C6927 * C21861 +
             C7300 * C139873) *
                C140009 +
            ((C284 - C283) * C21860 + (C506 - C505) * C139983 +
             C22843 * C21861 + C23191 * C139873) *
                C140010 +
            ((C288 - C287) * C21860 + (C509 - C508) * C139983 +
             (C1003 - C1004) * C21861 + (C1250 - C1251) * C139873) *
                C21777) *
               C1565 +
           (((C1753 - C1752) * C21860 + (C2004 - C2003) * C139983 +
             (C7987 - C7986) * C21861 + (C8322 - C8321) * C139873) *
                C140009 +
            ((C1757 - C1756) * C21860 + (C2006 - C2005) * C139983 +
             (C23821 - C23820) * C21861 + (C24147 - C24146) * C139873) *
                C140010 +
            ((C1761 - C1760) * C21860 + (C2008 - C2007) * C139983 +
             (C139835 * C3597 - C265 * C3441) * C21861 +
             (C139835 * C3815 - C265 * C3671) * C139873) *
                C21777) *
               C140002) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eezx[2] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C140009 * C114 - C21780 * C108 + C140010 * C116 - C21782 * C109 +
              C21777 * C118 - C21784 * C110) *
                 C265 +
             (C140009 * C573 - C21780 * C567 + C140010 * C574 - C21782 * C568 +
              C21777 * C575 - C21784 * C569) *
                 C139835) *
                C139983 +
            ((C22943 - C22944 + C22945 - C22946 + C22947 - C22948) * C265 +
             (C23290 - C23291 + C23292 - C23293 + C23294 - C23295) * C139835) *
                C139873) *
               C1565 +
           (((C21780 * C1570 - C140009 * C1578 + C21782 * C1569 -
              C140010 * C1576 + C21784 * C1568 - C21777 * C1574) *
                 C265 +
             (C21780 * C2074 - C140009 * C2079 + C21782 * C2075 -
              C140010 * C2080 + C21784 * C2076 - C21777 * C2081) *
                 C139835) *
                C139983 +
            ((C21780 * C3438 - C140009 * C3442 + C21782 * C3439 -
              C140010 * C3444 + C21784 * C3440 - C21777 * C3446) *
                 C265 +
             (C21780 * C3882 - C140009 * C3886 + C21782 * C3883 -
              C140010 * C3887 + C21784 * C3884 - C21777 * C3888) *
                 C139835) *
                C139873) *
               C140002) *
              C139792 * C808 +
          ((((C21780 * C109 - C140009 * C116 + C21782 * C110 - C140010 * C118 +
              C21784 * C111 - C21777 * C120) *
                 C265 +
             (C21780 * C568 - C140009 * C574 + C21782 * C569 - C140010 * C575 +
              C21784 * C570 - C21777 * C576) *
                 C139835) *
                C139983 +
            ((C22955 - C22956 + C22957 - C22958 + C22959 - C22960) * C265 +
             (C23296 - C23297 + C23298 - C23299 + C23300 - C23301) * C139835) *
                C139873) *
               C1565 +
           (((C140009 * C1576 - C21780 * C1569 + C140010 * C1574 -
              C21782 * C1568 + C21777 * C1572 - C21784 * C1567) *
                 C265 +
             (C140009 * C2080 - C21780 * C2075 + C140010 * C2081 -
              C21782 * C2076 + C21777 * C2082 - C21784 * C2077) *
                 C139835) *
                C139983 +
            ((C140009 * C3444 - C21780 * C3439 + C140010 * C3446 -
              C21782 * C3440 + C21777 * C3448 - C21784 * C3441) *
                 C265 +
             (C140009 * C3887 - C21780 * C3883 + C140010 * C3888 -
              C21782 * C3884 + C21777 * C3889 - C21784 * C3885) *
                 C139835) *
                C139873) *
               C140002) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eezy[2] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139983 * C183 - C21860 * C108 + C139873 * C896 - C21861 * C813) *
                 C265 +
             (C139983 * C629 - C21860 * C567 + C139873 * C1393 -
              C21861 * C1317) *
                 C139835) *
                C140009 +
            ((C21863 - C21864 + C21865 - C21866) * C265 +
             (C22392 - C22393 + C22394 - C22395) * C139835) *
                C140010 +
            C22409 * C21777) *
               C1565 +
           (((C21860 * C1570 - C139983 * C1653 + C21861 * C3438 -
              C139873 * C3520) *
                 C265 +
             (C21860 * C2074 - C139983 * C2150 + C21861 * C3882 -
              C139873 * C3956) *
                 C139835) *
                C140009 +
            ((C23706 - C23707 + C23708 - C23709) * C265 +
             (C24344 - C24345 + C24346 - C24347) * C139835) *
                C140010 +
            ((C23714 - C23715 + C23716 - C23717) * C265 +
             (C24348 - C24349 + C24350 - C24351) * C139835) *
                C21777) *
               C140002) *
              C139792 * C808 +
          ((((C21864 - C21863 + C21866 - C21865) * C265 +
             (C22393 - C22392 + C22395 - C22394) * C139835) *
                C140009 +
            ((C21872 - C21871 + C21874 - C21873) * C265 +
             (C22398 - C22397 + C22400 - C22399) * C139835) *
                C140010 +
            ((C21879 - C21880 + C21881 - C21882) * C265 +
             (C22401 - C22402 + C22403 - C22404) * C139835) *
                C21777) *
               C1565 +
           (((C23707 - C23706 + C23709 - C23708) * C265 +
             (C24345 - C24344 + C24347 - C24346) * C139835) *
                C140009 +
            ((C23715 - C23714 + C23717 - C23716) * C265 +
             (C24349 - C24348 + C24351 - C24350) * C139835) *
                C140010 +
            ((C139983 * C1656 - C21860 * C1567 + C139873 * C3523 -
              C21861 * C3441) *
                 C265 +
             (C139983 * C2153 - C21860 * C2077 + C139873 * C3959 -
              C21861 * C3885) *
                 C139835) *
                C21777) *
               C140002) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eezz[2] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C265 * C266 - C701 * C108 - C265 * C567 + C139835 * C702) *
                 C139983 +
             C7652 * C139873) *
                C140009 +
            (C22484 + C22485) * C140010 + C22490 * C21777) *
               C1565 -
           ((C24460 + C24454) * C21777 + (C24455 + C24456) * C140010 +
            (C11288 * C139873 +
             (C265 * C1741 - C701 * C1570 - C265 * C2074 + C139835 * C2230) *
                 C139983) *
                C140009) *
               C140002) *
              C139792 * C808 +
          (((C24456 + C24455) * C140009 + (C24454 + C24460) * C140010 +
            (C2251 * C139983 +
             (C265 * C3597 - C701 * C3441 - C265 * C3885 + C139835 * C4029) *
                 C139873) *
                C21777) *
               C140002 -
           ((C22488 + C22489) * C21777 + (C22487 + C22486) * C140010 +
            (C22485 + C22484) * C140009) *
               C1565) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexx[3] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C21780 * C114 - C21781 * C108 - C21780 * C115 + C140009 * C126 +
             C21782 * C116 - C21783 * C109 - C21782 * C117 + C140010 * C127 +
             C21784 * C118 - C21785 * C110 - C21784 * C119 + C21777 * C128) *
                C139835 * C139983 +
            (C22625 + C22626 + C22627) * C139835 * C139873) *
               C139809 * C2322 -
           ((C21784 * C2916 - C21785 * C2910 - C21784 * C2917 + C21777 * C2922 +
             C21782 * C2914 - C21783 * C2909 - C21782 * C2915 +
             C140010 * C2921 + C21780 * C2912 - C21781 * C2908 -
             C21780 * C2913 + C140009 * C2920) *
                C139835 * C139873 +
            (C22627 + C22626 + C22625) * C139835 * C139983) *
               C139809 * C140000) *
              C2324 +
          (((C22628 + C22629 + C22630) * C139835 * C139983 +
            (C21780 * C2914 - C21781 * C2909 - C21780 * C2915 +
             C140009 * C2921 + C21782 * C2916 - C21783 * C2910 -
             C21782 * C2917 + C140010 * C2922 + C21784 * C2918 -
             C21785 * C2911 - C21784 * C2919 + C21777 * C2923) *
                C139835 * C139873) *
               C139809 * C140000 -
           ((C22630 + C22629 + C22628) * C139835 * C139873 +
            (C21784 * C120 - C21785 * C111 - C21784 * C121 + C21777 * C129 +
             C21782 * C118 - C21783 * C110 - C21782 * C119 + C140010 * C128 +
             C21780 * C116 - C21781 * C109 - C21780 * C117 + C140009 * C127) *
                C139835 * C139983) *
               C139809 * C2322) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexy[3] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139983 * C183 - C21860 * C108 + C139873 * C896 - C21861 * C813) *
                C21780 +
            (C139983 * C189 - C21860 * C115 + C139873 * C901 - C21861 * C822) *
                C140009 +
            (C21863 - C21864 + C21865 - C21866) * C21782 +
            (C21867 - C21868 + C21869 - C21870) * C140010 + C21891 * C21784 +
            C21892 * C21777) *
               C139835 * C139809 * C2322 +
           ((C21860 * C813 - C139983 * C896 + C21861 * C2908 -
             C139873 * C2974) *
                C21780 +
            (C21860 * C822 - C139983 * C901 + C21861 * C2913 -
             C139873 * C2978) *
                C140009 +
            (C22729 - C22730 + C22731 - C22732) * C21782 +
            (C22733 - C22734 + C22735 - C22736) * C140010 +
            (C22737 - C22738 + C22739 - C22740) * C21784 +
            (C22741 - C22742 + C22743 - C22744) * C21777) *
               C139835 * C139809 * C140000) *
              C2324 +
          (((C21864 - C21863 + C21866 - C21865) * C21780 +
            (C21868 - C21867 + C21870 - C21869) * C140009 +
            (C21872 - C21871 + C21874 - C21873) * C21782 +
            (C21876 - C21875 + C21878 - C21877) * C140010 +
            (C21879 - C21880 + C21881 - C21882) * C21784 +
            (C21883 - C21884 + C21885 - C21886) * C21777) *
               C139835 * C139809 * C2322 +
           ((C22730 - C22729 + C22732 - C22731) * C21780 +
            (C22734 - C22733 + C22736 - C22735) * C140009 +
            (C22738 - C22737 + C22740 - C22739) * C21782 +
            (C22742 - C22741 + C22744 - C22743) * C140010 +
            (C139983 * C899 - C21860 * C810 + C139873 * C2977 -
             C21861 * C2911) *
                C21784 +
            (C139983 * C904 - C21860 * C816 + C139873 * C2981 -
             C21861 * C2919) *
                C21777) *
               C139835 * C139809 * C140000) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexz[3] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139835 * C266 - C265 * C108) * C21780 +
             (C139835 * C272 - C265 * C115) * C140009 + (C279 - C280) * C21782 +
             (C281 - C282) * C140010 + C295 * C21784 + C296 * C21777) *
                C139983 +
            ((C6915 - C6916) * C21780 + (C6917 - C6918) * C140009 +
             C6919 * C21782 + C6920 * C140010 + C21967 * C21784 +
             C21968 * C21777) *
                C139873) *
               C139809 * C2322 +
           (((C6916 - C6915) * C21780 + (C6918 - C6917) * C140009 +
             C6927 * C21782 + C6928 * C140010 + C22843 * C21784 +
             C22844 * C21777) *
                C139983 +
            ((C6922 - C6921) * C21780 + (C6924 - C6923) * C140009 +
             C6929 * C21782 + C6930 * C140010 + (C6000 - C6001) * C21784 +
             (C6002 - C6003) * C21777) *
                C139873) *
               C139809 * C140000) *
              C2324 +
          ((((C280 - C279) * C21780 + (C282 - C281) * C140009 +
             (C284 - C283) * C21782 + (C286 - C285) * C140010 +
             (C288 - C287) * C21784 + (C290 - C289) * C21777) *
                C139983 +
            (C6927 * C21780 + C6928 * C140009 + C22843 * C21782 +
             C22844 * C140010 + (C1003 - C1004) * C21784 +
             (C1005 - C1006) * C21777) *
                C139873) *
               C139809 * C2322 +
           ((C6919 * C21780 + C6920 * C140009 + C21967 * C21782 +
             C21968 * C140010 + (C1004 - C1003) * C21784 +
             (C1006 - C1005) * C21777) *
                C139983 +
            (C6925 * C21780 + C6926 * C140009 + (C6001 - C6000) * C21782 +
             (C6003 - C6002) * C140010 +
             (C139835 * C3035 - C265 * C2911) * C21784 +
             (C139835 * C3039 - C265 * C2919) * C21777) *
                C139873) *
               C139809 * C140000) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[3] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C140009 * C114 - C21780 * C108 + C140010 * C116 - C21782 * C109 +
             C21777 * C118 - C21784 * C110) *
                C21860 +
            (C140009 * C354 - C21780 * C348 + C140010 * C355 - C21782 * C349 +
             C21777 * C356 - C21784 * C350) *
                C139983 +
            (C22943 - C22944 + C22945 - C22946 + C22947 - C22948) * C21861 +
            (C22949 - C22950 + C22951 - C22952 + C22953 - C22954) * C139873) *
               C139835 * C139809 * C2322 +
           ((C22944 - C22943 + C22946 - C22945 + C22948 - C22947) * C21860 +
            (C22950 - C22949 + C22952 - C22951 + C22954 - C22953) * C139983 +
            (C21780 * C2908 - C140009 * C2912 + C21782 * C2909 -
             C140010 * C2914 + C21784 * C2910 - C21777 * C2916) *
                C21861 +
            (C21780 * C3090 - C140009 * C3094 + C21782 * C3091 -
             C140010 * C3095 + C21784 * C3092 - C21777 * C3096) *
                C139873) *
               C139835 * C139809 * C140000) *
              C2324 +
          (((C21780 * C109 - C140009 * C116 + C21782 * C110 - C140010 * C118 +
             C21784 * C111 - C21777 * C120) *
                C21860 +
            (C21780 * C349 - C140009 * C355 + C21782 * C350 - C140010 * C356 +
             C21784 * C351 - C21777 * C357) *
                C139983 +
            (C22955 - C22956 + C22957 - C22958 + C22959 - C22960) * C21861 +
            (C22961 - C22962 + C22963 - C22964 + C22965 - C22966) * C139873) *
               C139835 * C139809 * C2322 +
           ((C22956 - C22955 + C22958 - C22957 + C22960 - C22959) * C21860 +
            (C22962 - C22961 + C22964 - C22963 + C22966 - C22965) * C139983 +
            (C140009 * C2914 - C21780 * C2909 + C140010 * C2916 -
             C21782 * C2910 + C21777 * C2918 - C21784 * C2911) *
                C21861 +
            (C140009 * C3095 - C21780 * C3091 + C140010 * C3096 -
             C21782 * C3092 + C21777 * C3097 - C21784 * C3093) *
                C139873) *
               C139835 * C139809 * C140000) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[3] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C21860 * C183 - C22116 * C108 - C21860 * C348 + C139983 * C411 +
             C21861 * C896 - C22117 * C813 - C21861 * C1072 + C139873 * C1151) *
                C140009 +
            (C22155 + C22156) * C140010 + C22161 * C21777) *
               C139835 * C139809 * C2322 -
           ((C23089 + C23090) * C21777 + (C23091 + C23092) * C140010 +
            (C21861 * C2974 - C22117 * C2908 - C21861 * C3090 +
             C139873 * C3148 + C21860 * C896 - C22116 * C813 - C21860 * C1072 +
             C139983 * C1151) *
                C140009) *
               C139835 * C139809 * C140000) *
              C2324 +
          (((C23092 + C23091) * C140009 + (C23090 + C23089) * C140010 +
            (C21860 * C899 - C22116 * C810 - C21860 * C1075 + C139983 * C1148 +
             C21861 * C2977 - C22117 * C2911 - C21861 * C3093 +
             C139873 * C3151) *
                C21777) *
               C139835 * C139809 * C140000 -
           ((C22159 + C22160) * C21777 + (C22158 + C22157) * C140010 +
            (C22156 + C22155) * C140009) *
               C139835 * C139809 * C2322) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[3] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C139835 * C266 - C265 * C108) * C21860 +
                      (C139835 * C495 - C265 * C348) * C139983 +
                      (C6915 - C6916) * C21861 + (C7294 - C7295) * C139873) *
                         C140009 +
                     ((C279 - C280) * C21860 + (C502 - C503) * C139983 +
                      C6919 * C21861 + C7298 * C139873) *
                         C140010 +
                     C22243 * C21777) *
                        C139809 * C2322 +
                    (((C6916 - C6915) * C21860 + (C7295 - C7294) * C139983 +
                      (C6922 - C6921) * C21861 + (C7297 - C7296) * C139873) *
                         C140009 +
                     (C6927 * C21860 + C7300 * C139983 + C6929 * C21861 +
                      C7301 * C139873) *
                         C140010 +
                     (C22843 * C21860 + C23191 * C139983 +
                      (C6000 - C6001) * C21861 + (C6273 - C6274) * C139873) *
                         C21777) *
                        C139809 * C140000) *
                       C2324 +
                   ((((C280 - C279) * C21860 + (C503 - C502) * C139983 +
                      C6927 * C21861 + C7300 * C139873) *
                         C140009 +
                     ((C284 - C283) * C21860 + (C506 - C505) * C139983 +
                      C22843 * C21861 + C23191 * C139873) *
                         C140010 +
                     ((C288 - C287) * C21860 + (C509 - C508) * C139983 +
                      (C1003 - C1004) * C21861 + (C1250 - C1251) * C139873) *
                         C21777) *
                        C139809 * C2322 +
                    ((C6919 * C21860 + C7298 * C139983 + C6925 * C21861 +
                      C7299 * C139873) *
                         C140009 +
                     (C21967 * C21860 + C22239 * C139983 +
                      (C6001 - C6000) * C21861 + (C6274 - C6273) * C139873) *
                         C140010 +
                     ((C1004 - C1003) * C21860 + (C1251 - C1250) * C139983 +
                      (C139835 * C3035 - C265 * C2911) * C21861 +
                      (C139835 * C3205 - C265 * C3093) * C139873) *
                         C21777) *
                        C139809 * C140000) *
                       C139998)) /
                 (p * q * std::sqrt(p + q));
    d2eezx[3] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C140009 * C114 - C21780 * C108 + C140010 * C116 - C21782 * C109 +
              C21777 * C118 - C21784 * C110) *
                 C265 +
             (C140009 * C573 - C21780 * C567 + C140010 * C574 - C21782 * C568 +
              C21777 * C575 - C21784 * C569) *
                 C139835) *
                C139983 +
            ((C22943 - C22944 + C22945 - C22946 + C22947 - C22948) * C265 +
             (C23290 - C23291 + C23292 - C23293 + C23294 - C23295) * C139835) *
                C139873) *
               C139809 * C2322 +
           (((C22944 - C22943 + C22946 - C22945 + C22948 - C22947) * C265 +
             (C23291 - C23290 + C23293 - C23292 + C23295 - C23294) * C139835) *
                C139983 +
            ((C21780 * C2908 - C140009 * C2912 + C21782 * C2909 -
              C140010 * C2914 + C21784 * C2910 - C21777 * C2916) *
                 C265 +
             (C21780 * C3256 - C140009 * C3260 + C21782 * C3257 -
              C140010 * C3261 + C21784 * C3258 - C21777 * C3262) *
                 C139835) *
                C139873) *
               C139809 * C140000) *
              C2324 +
          ((((C21780 * C109 - C140009 * C116 + C21782 * C110 - C140010 * C118 +
              C21784 * C111 - C21777 * C120) *
                 C265 +
             (C21780 * C568 - C140009 * C574 + C21782 * C569 - C140010 * C575 +
              C21784 * C570 - C21777 * C576) *
                 C139835) *
                C139983 +
            ((C22955 - C22956 + C22957 - C22958 + C22959 - C22960) * C265 +
             (C23296 - C23297 + C23298 - C23299 + C23300 - C23301) * C139835) *
                C139873) *
               C139809 * C2322 +
           (((C22956 - C22955 + C22958 - C22957 + C22960 - C22959) * C265 +
             (C23297 - C23296 + C23299 - C23298 + C23301 - C23300) * C139835) *
                C139983 +
            ((C140009 * C2914 - C21780 * C2909 + C140010 * C2916 -
              C21782 * C2910 + C21777 * C2918 - C21784 * C2911) *
                 C265 +
             (C140009 * C3261 - C21780 * C3257 + C140010 * C3262 -
              C21782 * C3258 + C21777 * C3263 - C21784 * C3259) *
                 C139835) *
                C139873) *
               C139809 * C140000) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eezy[3] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139983 * C183 - C21860 * C108 + C139873 * C896 - C21861 * C813) *
                 C265 +
             (C139983 * C629 - C21860 * C567 + C139873 * C1393 -
              C21861 * C1317) *
                 C139835) *
                C140009 +
            ((C21863 - C21864 + C21865 - C21866) * C265 +
             (C22392 - C22393 + C22394 - C22395) * C139835) *
                C140010 +
            C22409 * C21777) *
               C139809 * C2322 +
           (((C21860 * C813 - C139983 * C896 + C21861 * C2908 -
              C139873 * C2974) *
                 C265 +
             (C21860 * C1317 - C139983 * C1393 + C21861 * C3256 -
              C139873 * C3314) *
                 C139835) *
                C140009 +
            ((C22729 - C22730 + C22731 - C22732) * C265 +
             (C23400 - C23401 + C23402 - C23403) * C139835) *
                C140010 +
            ((C22737 - C22738 + C22739 - C22740) * C265 +
             (C23404 - C23405 + C23406 - C23407) * C139835) *
                C21777) *
               C139809 * C140000) *
              C2324 +
          ((((C21864 - C21863 + C21866 - C21865) * C265 +
             (C22393 - C22392 + C22395 - C22394) * C139835) *
                C140009 +
            ((C21872 - C21871 + C21874 - C21873) * C265 +
             (C22398 - C22397 + C22400 - C22399) * C139835) *
                C140010 +
            ((C21879 - C21880 + C21881 - C21882) * C265 +
             (C22401 - C22402 + C22403 - C22404) * C139835) *
                C21777) *
               C139809 * C2322 +
           (((C22730 - C22729 + C22732 - C22731) * C265 +
             (C23401 - C23400 + C23403 - C23402) * C139835) *
                C140009 +
            ((C22738 - C22737 + C22740 - C22739) * C265 +
             (C23405 - C23404 + C23407 - C23406) * C139835) *
                C140010 +
            ((C139983 * C899 - C21860 * C810 + C139873 * C2977 -
              C21861 * C2911) *
                 C265 +
             (C139983 * C1396 - C21860 * C1320 + C139873 * C3317 -
              C21861 * C3259) *
                 C139835) *
                C21777) *
               C139809 * C140000) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eezz[3] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C265 * C266 - C701 * C108 - C265 * C567 + C139835 * C702) *
                 C139983 +
             C7652 * C139873) *
                C140009 +
            (C22484 + C22485) * C140010 + C22490 * C21777) *
               C139809 * C2322 -
           ((C23506 + C23507) * C21777 + (C23508 + C23509) * C140010 +
            (C7653 * C139873 + C7652 * C139983) * C140009) *
               C139809 * C140000) *
              C2324 +
          (((C23509 + C23508) * C140009 + (C23507 + C23506) * C140010 +
            (C1494 * C139983 +
             (C265 * C3035 - C701 * C2911 - C265 * C3259 + C139835 * C3371) *
                 C139873) *
                C21777) *
               C139809 * C140000 -
           ((C22488 + C22489) * C21777 + (C22487 + C22486) * C140010 +
            (C22485 + C22484) * C140009) *
               C139809 * C2322) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexx[4] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C21780 * C114 - C21781 * C108 - C21780 * C115 + C140009 * C126 +
            C21782 * C116 - C21783 * C109 - C21782 * C117 + C140010 * C127 +
            C21784 * C118 - C21785 * C110 - C21784 * C119 + C21777 * C128) *
               C139835 * C139983 +
           (C22625 + C22626 + C22627) * C139835 * C139873) *
              C139809 * C2904 -
          ((C25435 + C25436 + C25437) * C139835 * C139873 +
           (C22627 + C22626 + C22625) * C139835 * C139983) *
              C139809 * C2905 +
          ((C25437 + C25436 + C25435) * C139835 * C139983 +
           (C21780 * C6631 - C21781 * C6627 - C21780 * C6632 + C140009 * C6636 +
            C21782 * C6629 - C21783 * C6626 - C21782 * C6630 + C140010 * C6635 +
            C21784 * C6633 - C21785 * C6628 - C21784 * C6634 + C21777 * C6637) *
               C139835 * C139873) *
              C139809 * C2906) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eexy[4] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C139983 * C183 - C21860 * C108 + C139873 * C896 - C21861 * C813) *
               C21780 +
           (C139983 * C189 - C21860 * C115 + C139873 * C901 - C21861 * C822) *
               C140009 +
           (C21863 - C21864 + C21865 - C21866) * C21782 +
           (C21867 - C21868 + C21869 - C21870) * C140010 + C21891 * C21784 +
           C21892 * C21777) *
              C139835 * C139809 * C2904 +
          ((C21860 * C813 - C139983 * C896 + C21861 * C2908 - C139873 * C2974) *
               C21780 +
           (C21860 * C822 - C139983 * C901 + C21861 * C2913 - C139873 * C2978) *
               C140009 +
           (C22729 - C22730 + C22731 - C22732) * C21782 +
           (C22733 - C22734 + C22735 - C22736) * C140010 +
           (C22737 - C22738 + C22739 - C22740) * C21784 +
           (C22741 - C22742 + C22743 - C22744) * C21777) *
              C139835 * C139809 * C2905 +
          ((C139983 * C2974 - C21860 * C2908 + C139873 * C6792 -
            C21861 * C6627) *
               C21780 +
           (C139983 * C2978 - C21860 * C2913 + C139873 * C6795 -
            C21861 * C6632) *
               C140009 +
           (C139983 * C2975 - C21860 * C2909 + C139873 * C6793 -
            C21861 * C6626) *
               C21782 +
           (C139983 * C2979 - C21860 * C2915 + C139873 * C6796 -
            C21861 * C6630) *
               C140010 +
           (C139983 * C2976 - C21860 * C2910 + C139873 * C6794 -
            C21861 * C6628) *
               C21784 +
           (C139983 * C2980 - C21860 * C2917 + C139873 * C6797 -
            C21861 * C6634) *
               C21777) *
              C139835 * C139809 * C2906) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eexz[4] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139835 * C266 - C265 * C108) * C21780 +
            (C139835 * C272 - C265 * C115) * C140009 + (C279 - C280) * C21782 +
            (C281 - C282) * C140010 + C295 * C21784 + C296 * C21777) *
               C139983 +
           ((C6915 - C6916) * C21780 + (C6917 - C6918) * C140009 +
            C6919 * C21782 + C6920 * C140010 + C21967 * C21784 +
            C21968 * C21777) *
               C139873) *
              C139809 * C2904 +
          (((C6916 - C6915) * C21780 + (C6918 - C6917) * C140009 +
            C6927 * C21782 + C6928 * C140010 + C22843 * C21784 +
            C22844 * C21777) *
               C139983 +
           ((C6922 - C6921) * C21780 + (C6924 - C6923) * C140009 +
            C6929 * C21782 + C6930 * C140010 + (C6000 - C6001) * C21784 +
            (C6002 - C6003) * C21777) *
               C139873) *
              C139809 * C2905 +
          ((C9790 * C21780 + C9791 * C140009 + C6925 * C21782 +
            C6926 * C140010 + (C6001 - C6000) * C21784 +
            (C6003 - C6002) * C21777) *
               C139983 +
           ((C9795 - C9794) * C21780 + (C9797 - C9796) * C140009 +
            (C6932 - C6931) * C21782 + (C6934 - C6933) * C140010 +
            (C139835 * C6910 - C265 * C6628) * C21784 +
            (C139835 * C6913 - C265 * C6634) * C21777) *
               C139873) *
              C139809 * C2906) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eeyx[4] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C140009 * C114 - C21780 * C108 + C140010 * C116 - C21782 * C109 +
            C21777 * C118 - C21784 * C110) *
               C21860 +
           (C140009 * C354 - C21780 * C348 + C140010 * C355 - C21782 * C349 +
            C21777 * C356 - C21784 * C350) *
               C139983 +
           (C22943 - C22944 + C22945 - C22946 + C22947 - C22948) * C21861 +
           (C22949 - C22950 + C22951 - C22952 + C22953 - C22954) * C139873) *
              C139835 * C139809 * C2904 +
          ((C22944 - C22943 + C22946 - C22945 + C22948 - C22947) * C21860 +
           (C22950 - C22949 + C22952 - C22951 + C22954 - C22953) * C139983 +
           (C25660 - C25661 + C25662 - C25663 + C25664 - C25665) * C21861 +
           (C25666 - C25667 + C25668 - C25669 + C25670 - C25671) * C139873) *
              C139835 * C139809 * C2905 +
          ((C25661 - C25660 + C25663 - C25662 + C25665 - C25664) * C21860 +
           (C25667 - C25666 + C25669 - C25668 + C25671 - C25670) * C139983 +
           (C140009 * C6631 - C21780 * C6627 + C140010 * C6629 -
            C21782 * C6626 + C21777 * C6633 - C21784 * C6628) *
               C21861 +
           (C140009 * C7035 - C21780 * C7032 + C140010 * C7036 -
            C21782 * C7033 + C21777 * C7037 - C21784 * C7034) *
               C139873) *
              C139835 * C139809 * C2906) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eeyy[4] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C21860 * C183 - C22116 * C108 - C21860 * C348 + C139983 * C411 +
            C21861 * C896 - C22117 * C813 - C21861 * C1072 + C139873 * C1151) *
               C140009 +
           (C22155 + C22156) * C140010 + C22161 * C21777) *
              C139835 * C139809 * C2904 -
          ((C23089 + C23090) * C21777 + (C23091 + C23092) * C140010 +
           (C21861 * C2974 - C22117 * C2908 - C21861 * C3090 + C139873 * C3148 +
            C21860 * C896 - C22116 * C813 - C21860 * C1072 + C139983 * C1151) *
               C140009) *
              C139835 * C139809 * C2905 +
          ((C21860 * C2974 - C22116 * C2908 - C21860 * C3090 + C139983 * C3148 +
            C21861 * C6792 - C22117 * C6627 - C21861 * C7032 +
            C139873 * C7169) *
               C140009 +
           (C21860 * C2975 - C22116 * C2909 - C21860 * C3091 + C139983 * C3149 +
            C21861 * C6793 - C22117 * C6626 - C21861 * C7033 +
            C139873 * C7168) *
               C140010 +
           (C21860 * C2976 - C22116 * C2910 - C21860 * C3092 + C139983 * C3150 +
            C21861 * C6794 - C22117 * C6628 - C21861 * C7034 +
            C139873 * C7170) *
               C21777) *
              C139835 * C139809 * C2906) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eeyz[4] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C139835 * C266 - C265 * C108) * C21860 +
                     (C139835 * C495 - C265 * C348) * C139983 +
                     (C6915 - C6916) * C21861 + (C7294 - C7295) * C139873) *
                        C140009 +
                    ((C279 - C280) * C21860 + (C502 - C503) * C139983 +
                     C6919 * C21861 + C7298 * C139873) *
                        C140010 +
                    C22243 * C21777) *
                       C139809 * C2904 +
                   (((C6916 - C6915) * C21860 + (C7295 - C7294) * C139983 +
                     (C6922 - C6921) * C21861 + (C7297 - C7296) * C139873) *
                        C140009 +
                    (C6927 * C21860 + C7300 * C139983 + C6929 * C21861 +
                     C7301 * C139873) *
                        C140010 +
                    (C22843 * C21860 + C23191 * C139983 +
                     (C6000 - C6001) * C21861 + (C6273 - C6274) * C139873) *
                        C21777) *
                       C139809 * C2905 +
                   ((C9790 * C21860 + C10047 * C139983 +
                     (C9795 - C9794) * C21861 + (C10049 - C10048) * C139873) *
                        C140009 +
                    (C6925 * C21860 + C7299 * C139983 +
                     (C6932 - C6931) * C21861 + (C7303 - C7302) * C139873) *
                        C140010 +
                    ((C6001 - C6000) * C21860 + (C6274 - C6273) * C139983 +
                     (C139835 * C6910 - C265 * C6628) * C21861 +
                     (C139835 * C7292 - C265 * C7034) * C139873) *
                        C21777) *
                       C139809 * C2906) *
                  C139758) /
                 (p * q * std::sqrt(p + q));
    d2eezx[4] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C140009 * C114 - C21780 * C108 + C140010 * C116 - C21782 * C109 +
             C21777 * C118 - C21784 * C110) *
                C265 +
            (C140009 * C573 - C21780 * C567 + C140010 * C574 - C21782 * C568 +
             C21777 * C575 - C21784 * C569) *
                C139835) *
               C139983 +
           ((C22943 - C22944 + C22945 - C22946 + C22947 - C22948) * C265 +
            (C23290 - C23291 + C23292 - C23293 + C23294 - C23295) * C139835) *
               C139873) *
              C139809 * C2904 +
          (((C22944 - C22943 + C22946 - C22945 + C22948 - C22947) * C265 +
            (C23291 - C23290 + C23293 - C23292 + C23295 - C23294) * C139835) *
               C139983 +
           ((C25660 - C25661 + C25662 - C25663 + C25664 - C25665) * C265 +
            (C25894 - C25895 + C25896 - C25897 + C25898 - C25899) * C139835) *
               C139873) *
              C139809 * C2905 +
          (((C25661 - C25660 + C25663 - C25662 + C25665 - C25664) * C265 +
            (C25895 - C25894 + C25897 - C25896 + C25899 - C25898) * C139835) *
               C139983 +
           ((C140009 * C6631 - C21780 * C6627 + C140010 * C6629 -
             C21782 * C6626 + C21777 * C6633 - C21784 * C6628) *
                C265 +
            (C140009 * C7404 - C21780 * C7401 + C140010 * C7405 -
             C21782 * C7402 + C21777 * C7406 - C21784 * C7403) *
                C139835) *
               C139873) *
              C139809 * C2906) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eezy[4] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139983 * C183 - C21860 * C108 + C139873 * C896 - C21861 * C813) *
                C265 +
            (C139983 * C629 - C21860 * C567 + C139873 * C1393 -
             C21861 * C1317) *
                C139835) *
               C140009 +
           ((C21863 - C21864 + C21865 - C21866) * C265 +
            (C22392 - C22393 + C22394 - C22395) * C139835) *
               C140010 +
           C22409 * C21777) *
              C139809 * C2904 +
          (((C21860 * C813 - C139983 * C896 + C21861 * C2908 -
             C139873 * C2974) *
                C265 +
            (C21860 * C1317 - C139983 * C1393 + C21861 * C3256 -
             C139873 * C3314) *
                C139835) *
               C140009 +
           ((C22729 - C22730 + C22731 - C22732) * C265 +
            (C23400 - C23401 + C23402 - C23403) * C139835) *
               C140010 +
           ((C22737 - C22738 + C22739 - C22740) * C265 +
            (C23404 - C23405 + C23406 - C23407) * C139835) *
               C21777) *
              C139809 * C2905 +
          (((C139983 * C2974 - C21860 * C2908 + C139873 * C6792 -
             C21861 * C6627) *
                C265 +
            (C139983 * C3314 - C21860 * C3256 + C139873 * C7521 -
             C21861 * C7401) *
                C139835) *
               C140009 +
           ((C139983 * C2975 - C21860 * C2909 + C139873 * C6793 -
             C21861 * C6626) *
                C265 +
            (C139983 * C3315 - C21860 * C3257 + C139873 * C7522 -
             C21861 * C7402) *
                C139835) *
               C140010 +
           ((C139983 * C2976 - C21860 * C2910 + C139873 * C6794 -
             C21861 * C6628) *
                C265 +
            (C139983 * C3316 - C21860 * C3258 + C139873 * C7523 -
             C21861 * C7403) *
                C139835) *
               C21777) *
              C139809 * C2906) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eezz[4] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C265 * C266 - C701 * C108 - C265 * C567 + C139835 * C702) *
                C139983 +
            C7652 * C139873) *
               C140009 +
           (C22484 + C22485) * C140010 + C22490 * C21777) *
              C139809 * C2904 -
          ((C23506 + C23507) * C21777 + (C23508 + C23509) * C140010 +
           (C7653 * C139873 + C7652 * C139983) * C140009) *
              C139809 * C2905 +
          ((C7653 * C139983 + C10296 * C139873) * C140009 +
           (C6525 * C139983 + C7654 * C139873) * C140010 +
           (C6526 * C139983 +
            (C265 * C6910 - C701 * C6628 - C265 * C7403 + C139835 * C7630) *
                C139873) *
               C21777) *
              C139809 * C2906) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eexx[5] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C21780 * C114 - C21781 * C108 - C21780 * C115 + C140009 * C126 +
             C21782 * C116 - C21783 * C109 - C21782 * C117 + C140010 * C127 +
             C21784 * C118 - C21785 * C110 - C21784 * C119 + C21777 * C128) *
                C139835 * C139983 +
            (C22625 + C22626 + C22627) * C139835 * C139873) *
               C1565 -
           ((C26164 + C26165 + C26166) * C139835 * C139873 +
            (C21784 * C1574 - C21785 * C1568 - C21784 * C1575 + C21777 * C1583 +
             C21782 * C1576 - C21783 * C1569 - C21782 * C1577 +
             C140010 * C1584 + C21780 * C1578 - C21781 * C1570 -
             C21780 * C1579 + C140009 * C1585) *
                C139835 * C139983) *
               C140002) *
              C2322 +
          (((C26166 + C26165 + C26164) * C139835 * C139983 +
            (C21780 * C7758 - C21781 * C7754 - C21780 * C7759 +
             C140009 * C7763 + C21782 * C7756 - C21783 * C7753 -
             C21782 * C7757 + C140010 * C7762 + C21784 * C7760 -
             C21785 * C7755 - C21784 * C7761 + C21777 * C7764) *
                C139835 * C139873) *
               C140002 -
           ((C25435 + C25436 + C25437) * C139835 * C139873 +
            (C22627 + C22626 + C22625) * C139835 * C139983) *
               C1565) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eexy[5] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139983 * C183 - C21860 * C108 + C139873 * C896 - C21861 * C813) *
                C21780 +
            (C139983 * C189 - C21860 * C115 + C139873 * C901 - C21861 * C822) *
                C140009 +
            (C21863 - C21864 + C21865 - C21866) * C21782 +
            (C21867 - C21868 + C21869 - C21870) * C140010 + C21891 * C21784 +
            C21892 * C21777) *
               C139835 * C1565 +
           ((C21860 * C1570 - C139983 * C1653 + C21861 * C3438 -
             C139873 * C3520) *
                C21780 +
            (C21860 * C1579 - C139983 * C1658 + C21861 * C3443 -
             C139873 * C3524) *
                C140009 +
            (C23706 - C23707 + C23708 - C23709) * C21782 +
            (C23710 - C23711 + C23712 - C23713) * C140010 +
            (C23714 - C23715 + C23716 - C23717) * C21784 +
            (C23718 - C23719 + C23720 - C23721) * C21777) *
               C139835 * C140002) *
              C2322 +
          (((C21860 * C813 - C139983 * C896 + C21861 * C2908 -
             C139873 * C2974) *
                C21780 +
            (C21860 * C822 - C139983 * C901 + C21861 * C2913 -
             C139873 * C2978) *
                C140009 +
            (C22729 - C22730 + C22731 - C22732) * C21782 +
            (C22733 - C22734 + C22735 - C22736) * C140010 +
            (C22737 - C22738 + C22739 - C22740) * C21784 +
            (C22741 - C22742 + C22743 - C22744) * C21777) *
               C139835 * C1565 +
           ((C139983 * C3520 - C21860 * C3438 + C139873 * C7863 -
             C21861 * C7754) *
                C21780 +
            (C139983 * C3524 - C21860 * C3443 + C139873 * C7866 -
             C21861 * C7759) *
                C140009 +
            (C139983 * C3521 - C21860 * C3439 + C139873 * C7864 -
             C21861 * C7753) *
                C21782 +
            (C139983 * C3525 - C21860 * C3445 + C139873 * C7867 -
             C21861 * C7757) *
                C140010 +
            (C139983 * C3522 - C21860 * C3440 + C139873 * C7865 -
             C21861 * C7755) *
                C21784 +
            (C139983 * C3526 - C21860 * C3447 + C139873 * C7868 -
             C21861 * C7761) *
                C21777) *
               C139835 * C140002) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eexz[5] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139835 * C266 - C265 * C108) * C21780 +
             (C139835 * C272 - C265 * C115) * C140009 + (C279 - C280) * C21782 +
             (C281 - C282) * C140010 + C295 * C21784 + C296 * C21777) *
                C139983 +
            ((C6915 - C6916) * C21780 + (C6917 - C6918) * C140009 +
             C6919 * C21782 + C6920 * C140010 + C21967 * C21784 +
             C21968 * C21777) *
                C139873) *
               C1565 +
           (((C265 * C1570 - C139835 * C1741) * C21780 +
             (C265 * C1579 - C139835 * C1746) * C140009 +
             (C1752 - C1753) * C21782 + (C1754 - C1755) * C140010 +
             (C1756 - C1757) * C21784 + (C1758 - C1759) * C21777) *
                C139983 +
            ((C10635 - C10636) * C21780 + (C10637 - C10638) * C140009 +
             (C7986 - C7987) * C21782 + (C7988 - C7989) * C140010 +
             (C23820 - C23821) * C21784 + (C23822 - C23823) * C21777) *
                C139873) *
               C140002) *
              C2322 +
          ((((C6916 - C6915) * C21780 + (C6918 - C6917) * C140009 +
             C6927 * C21782 + C6928 * C140010 + C22843 * C21784 +
             C22844 * C21777) *
                C139983 +
            ((C6922 - C6921) * C21780 + (C6924 - C6923) * C140009 +
             C6929 * C21782 + C6930 * C140010 + (C6000 - C6001) * C21784 +
             (C6002 - C6003) * C21777) *
                C139873) *
               C1565 +
           (((C10636 - C10635) * C21780 + (C10638 - C10637) * C140009 +
             (C7987 - C7986) * C21782 + (C7989 - C7988) * C140010 +
             (C23821 - C23820) * C21784 + (C23823 - C23822) * C21777) *
                C139983 +
            ((C10640 - C10639) * C21780 + (C10642 - C10641) * C140009 +
             (C7991 - C7990) * C21782 + (C7993 - C7992) * C140010 +
             (C139835 * C7981 - C265 * C7755) * C21784 +
             (C139835 * C7984 - C265 * C7761) * C21777) *
                C139873) *
               C140002) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eeyx[5] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C140009 * C114 - C21780 * C108 + C140010 * C116 - C21782 * C109 +
             C21777 * C118 - C21784 * C110) *
                C21860 +
            (C140009 * C354 - C21780 * C348 + C140010 * C355 - C21782 * C349 +
             C21777 * C356 - C21784 * C350) *
                C139983 +
            (C22943 - C22944 + C22945 - C22946 + C22947 - C22948) * C21861 +
            (C22949 - C22950 + C22951 - C22952 + C22953 - C22954) * C139873) *
               C139835 * C1565 +
           ((C21780 * C1570 - C140009 * C1578 + C21782 * C1569 -
             C140010 * C1576 + C21784 * C1568 - C21777 * C1574) *
                C21860 +
            (C21780 * C1829 - C140009 * C1834 + C21782 * C1830 -
             C140010 * C1835 + C21784 * C1831 - C21777 * C1836) *
                C139983 +
            (C26461 - C26462 + C26463 - C26464 + C26465 - C26466) * C21861 +
            (C26467 - C26468 + C26469 - C26470 + C26471 - C26472) * C139873) *
               C139835 * C140002) *
              C2322 +
          (((C22944 - C22943 + C22946 - C22945 + C22948 - C22947) * C21860 +
            (C22950 - C22949 + C22952 - C22951 + C22954 - C22953) * C139983 +
            (C25660 - C25661 + C25662 - C25663 + C25664 - C25665) * C21861 +
            (C25666 - C25667 + C25668 - C25669 + C25670 - C25671) * C139873) *
               C139835 * C1565 +
           ((C26462 - C26461 + C26464 - C26463 + C26466 - C26465) * C21860 +
            (C26468 - C26467 + C26470 - C26469 + C26472 - C26471) * C139983 +
            (C140009 * C7758 - C21780 * C7754 + C140010 * C7756 -
             C21782 * C7753 + C21777 * C7760 - C21784 * C7755) *
                C21861 +
            (C140009 * C8094 - C21780 * C8091 + C140010 * C8095 -
             C21782 * C8092 + C21777 * C8096 - C21784 * C8093) *
                C139873) *
               C139835 * C140002) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eeyy[5] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C21860 * C183 - C22116 * C108 - C21860 * C348 + C139983 * C411 +
             C21861 * C896 - C22117 * C813 - C21861 * C1072 + C139873 * C1151) *
                C140009 +
            (C22155 + C22156) * C140010 + C22161 * C21777) *
               C139835 * C1565 -
           ((C24044 + C24045) * C21777 + (C24046 + C24047) * C140010 +
            (C21861 * C3520 - C22117 * C3438 - C21861 * C3668 +
             C139873 * C3742 + C21860 * C1653 - C22116 * C1570 -
             C21860 * C1829 + C139983 * C1908) *
                C140009) *
               C139835 * C140002) *
              C2322 +
          (((C21860 * C3520 - C22116 * C3438 - C21860 * C3668 +
             C139983 * C3742 + C21861 * C7863 - C22117 * C7754 -
             C21861 * C8091 + C139873 * C8196) *
                C140009 +
            (C21860 * C3521 - C22116 * C3439 - C21860 * C3669 +
             C139983 * C3743 + C21861 * C7864 - C22117 * C7753 -
             C21861 * C8092 + C139873 * C8195) *
                C140010 +
            (C21860 * C3522 - C22116 * C3440 - C21860 * C3670 +
             C139983 * C3744 + C21861 * C7865 - C22117 * C7755 -
             C21861 * C8093 + C139873 * C8197) *
                C21777) *
               C139835 * C140002 -
           ((C23089 + C23090) * C21777 + (C23091 + C23092) * C140010 +
            (C21861 * C2974 - C22117 * C2908 - C21861 * C3090 +
             C139873 * C3148 + C21860 * C896 - C22116 * C813 - C21860 * C1072 +
             C139983 * C1151) *
                C140009) *
               C139835 * C1565) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eeyz[5] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139835 * C266 - C265 * C108) * C21860 +
             (C139835 * C495 - C265 * C348) * C139983 +
             (C6915 - C6916) * C21861 + (C7294 - C7295) * C139873) *
                C140009 +
            ((C279 - C280) * C21860 + (C502 - C503) * C139983 + C6919 * C21861 +
             C7298 * C139873) *
                C140010 +
            C22243 * C21777) *
               C1565 +
           (((C265 * C1570 - C139835 * C1741) * C21860 +
             (C265 * C1829 - C139835 * C1997) * C139983 +
             (C10635 - C10636) * C21861 + (C10961 - C10962) * C139873) *
                C140009 +
            ((C1752 - C1753) * C21860 + (C2003 - C2004) * C139983 +
             (C7986 - C7987) * C21861 + (C8321 - C8322) * C139873) *
                C140010 +
            ((C1756 - C1757) * C21860 + (C2005 - C2006) * C139983 +
             (C23820 - C23821) * C21861 + (C24146 - C24147) * C139873) *
                C21777) *
               C140002) *
              C2322 +
          ((((C6916 - C6915) * C21860 + (C7295 - C7294) * C139983 +
             (C6922 - C6921) * C21861 + (C7297 - C7296) * C139873) *
                C140009 +
            (C6927 * C21860 + C7300 * C139983 + C6929 * C21861 +
             C7301 * C139873) *
                C140010 +
            (C22843 * C21860 + C23191 * C139983 + (C6000 - C6001) * C21861 +
             (C6273 - C6274) * C139873) *
                C21777) *
               C1565 +
           (((C10636 - C10635) * C21860 + (C10962 - C10961) * C139983 +
             (C10640 - C10639) * C21861 + (C10964 - C10963) * C139873) *
                C140009 +
            ((C7987 - C7986) * C21860 + (C8322 - C8321) * C139983 +
             (C7991 - C7990) * C21861 + (C8324 - C8323) * C139873) *
                C140010 +
            ((C23821 - C23820) * C21860 + (C24147 - C24146) * C139983 +
             (C139835 * C7981 - C265 * C7755) * C21861 +
             (C139835 * C8319 - C265 * C8093) * C139873) *
                C21777) *
               C140002) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eezx[5] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C140009 * C114 - C21780 * C108 + C140010 * C116 - C21782 * C109 +
              C21777 * C118 - C21784 * C110) *
                 C265 +
             (C140009 * C573 - C21780 * C567 + C140010 * C574 - C21782 * C568 +
              C21777 * C575 - C21784 * C569) *
                 C139835) *
                C139983 +
            ((C22943 - C22944 + C22945 - C22946 + C22947 - C22948) * C265 +
             (C23290 - C23291 + C23292 - C23293 + C23294 - C23295) * C139835) *
                C139873) *
               C1565 +
           (((C21780 * C1570 - C140009 * C1578 + C21782 * C1569 -
              C140010 * C1576 + C21784 * C1568 - C21777 * C1574) *
                 C265 +
             (C21780 * C2074 - C140009 * C2079 + C21782 * C2075 -
              C140010 * C2080 + C21784 * C2076 - C21777 * C2081) *
                 C139835) *
                C139983 +
            ((C26461 - C26462 + C26463 - C26464 + C26465 - C26466) * C265 +
             (C26767 - C26768 + C26769 - C26770 + C26771 - C26772) * C139835) *
                C139873) *
               C140002) *
              C2322 +
          ((((C22944 - C22943 + C22946 - C22945 + C22948 - C22947) * C265 +
             (C23291 - C23290 + C23293 - C23292 + C23295 - C23294) * C139835) *
                C139983 +
            ((C25660 - C25661 + C25662 - C25663 + C25664 - C25665) * C265 +
             (C25894 - C25895 + C25896 - C25897 + C25898 - C25899) * C139835) *
                C139873) *
               C1565 +
           (((C26462 - C26461 + C26464 - C26463 + C26466 - C26465) * C265 +
             (C26768 - C26767 + C26770 - C26769 + C26772 - C26771) * C139835) *
                C139983 +
            ((C140009 * C7758 - C21780 * C7754 + C140010 * C7756 -
              C21782 * C7753 + C21777 * C7760 - C21784 * C7755) *
                 C265 +
             (C140009 * C8425 - C21780 * C8422 + C140010 * C8426 -
              C21782 * C8423 + C21777 * C8427 - C21784 * C8424) *
                 C139835) *
                C139873) *
               C140002) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eezy[5] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139983 * C183 - C21860 * C108 + C139873 * C896 - C21861 * C813) *
                 C265 +
             (C139983 * C629 - C21860 * C567 + C139873 * C1393 -
              C21861 * C1317) *
                 C139835) *
                C140009 +
            ((C21863 - C21864 + C21865 - C21866) * C265 +
             (C22392 - C22393 + C22394 - C22395) * C139835) *
                C140010 +
            C22409 * C21777) *
               C1565 +
           (((C21860 * C1570 - C139983 * C1653 + C21861 * C3438 -
              C139873 * C3520) *
                 C265 +
             (C21860 * C2074 - C139983 * C2150 + C21861 * C3882 -
              C139873 * C3956) *
                 C139835) *
                C140009 +
            ((C23706 - C23707 + C23708 - C23709) * C265 +
             (C24344 - C24345 + C24346 - C24347) * C139835) *
                C140010 +
            ((C23714 - C23715 + C23716 - C23717) * C265 +
             (C24348 - C24349 + C24350 - C24351) * C139835) *
                C21777) *
               C140002) *
              C2322 +
          ((((C21860 * C813 - C139983 * C896 + C21861 * C2908 -
              C139873 * C2974) *
                 C265 +
             (C21860 * C1317 - C139983 * C1393 + C21861 * C3256 -
              C139873 * C3314) *
                 C139835) *
                C140009 +
            ((C22729 - C22730 + C22731 - C22732) * C265 +
             (C23400 - C23401 + C23402 - C23403) * C139835) *
                C140010 +
            ((C22737 - C22738 + C22739 - C22740) * C265 +
             (C23404 - C23405 + C23406 - C23407) * C139835) *
                C21777) *
               C1565 +
           (((C139983 * C3520 - C21860 * C3438 + C139873 * C7863 -
              C21861 * C7754) *
                 C265 +
             (C139983 * C3956 - C21860 * C3882 + C139873 * C8526 -
              C21861 * C8422) *
                 C139835) *
                C140009 +
            ((C139983 * C3521 - C21860 * C3439 + C139873 * C7864 -
              C21861 * C7753) *
                 C265 +
             (C139983 * C3957 - C21860 * C3883 + C139873 * C8527 -
              C21861 * C8423) *
                 C139835) *
                C140010 +
            ((C139983 * C3522 - C21860 * C3440 + C139873 * C7865 -
              C21861 * C7755) *
                 C265 +
             (C139983 * C3958 - C21860 * C3884 + C139873 * C8528 -
              C21861 * C8424) *
                 C139835) *
                C21777) *
               C140002) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eezz[5] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C265 * C266 - C701 * C108 - C265 * C567 + C139835 * C702) *
                 C139983 +
             C7652 * C139873) *
                C140009 +
            (C22484 + C22485) * C140010 + C22490 * C21777) *
               C1565 -
           ((C24460 + C24454) * C21777 + (C24455 + C24456) * C140010 +
            (C11288 * C139873 +
             (C265 * C1741 - C701 * C1570 - C265 * C2074 + C139835 * C2230) *
                 C139983) *
                C140009) *
               C140002) *
              C2322 +
          (((C11288 * C139983 + C11287 * C139873) * C140009 +
            (C8651 * C139983 + C8650 * C139873) * C140010 +
            (C24459 * C139983 +
             (C265 * C7981 - C701 * C7755 - C265 * C8424 + C139835 * C8635) *
                 C139873) *
                C21777) *
               C140002 -
           ((C23506 + C23507) * C21777 + (C23508 + C23509) * C140010 +
            (C7653 * C139873 + C7652 * C139983) * C140009) *
               C1565) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eexx[6] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C21780 * C114 - C21781 * C108 - C21780 * C115 + C140009 * C126 +
             C21782 * C116 - C21783 * C109 - C21782 * C117 + C140010 * C127 +
             C21784 * C118 - C21785 * C110 - C21784 * C119 + C21777 * C128) *
                C139835 * C139983 +
            (C22625 + C22626 + C22627) * C139835 * C139873) *
               C4096 -
           ((C26164 + C26165 + C26166) * C139835 * C139873 +
            (C21784 * C1574 - C21785 * C1568 - C21784 * C1575 + C21777 * C1583 +
             C21782 * C1576 - C21783 * C1569 - C21782 * C1577 +
             C140010 * C1584 + C21780 * C1578 - C21781 * C1570 -
             C21780 * C1579 + C140009 * C1585) *
                C139835 * C139983) *
               C140002) *
              C139792 * C2324 +
          (((C21780 * C1576 - C21781 * C1569 - C21780 * C1577 +
             C140009 * C1584 + C21782 * C1574 - C21783 * C1568 -
             C21782 * C1575 + C140010 * C1583 + C21784 * C1572 -
             C21785 * C1567 - C21784 * C1573 + C21777 * C1582) *
                C139835 * C139983 +
            (C21780 * C3444 - C21781 * C3439 - C21780 * C3445 +
             C140009 * C3451 + C21782 * C3446 - C21783 * C3440 -
             C21782 * C3447 + C140010 * C3452 + C21784 * C3448 -
             C21785 * C3441 - C21784 * C3449 + C21777 * C3453) *
                C139835 * C139873) *
               C140002 -
           ((C22630 + C22629 + C22628) * C139835 * C139873 +
            (C21784 * C120 - C21785 * C111 - C21784 * C121 + C21777 * C129 +
             C21782 * C118 - C21783 * C110 - C21782 * C119 + C140010 * C128 +
             C21780 * C116 - C21781 * C109 - C21780 * C117 + C140009 * C127) *
                C139835 * C139983) *
               C4096) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexy[6] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139983 * C183 - C21860 * C108 + C139873 * C896 - C21861 * C813) *
                C21780 +
            (C139983 * C189 - C21860 * C115 + C139873 * C901 - C21861 * C822) *
                C140009 +
            (C21863 - C21864 + C21865 - C21866) * C21782 +
            (C21867 - C21868 + C21869 - C21870) * C140010 + C21891 * C21784 +
            C21892 * C21777) *
               C139835 * C4096 +
           ((C21860 * C1570 - C139983 * C1653 + C21861 * C3438 -
             C139873 * C3520) *
                C21780 +
            (C21860 * C1579 - C139983 * C1658 + C21861 * C3443 -
             C139873 * C3524) *
                C140009 +
            (C23706 - C23707 + C23708 - C23709) * C21782 +
            (C23710 - C23711 + C23712 - C23713) * C140010 +
            (C23714 - C23715 + C23716 - C23717) * C21784 +
            (C23718 - C23719 + C23720 - C23721) * C21777) *
               C139835 * C140002) *
              C139792 * C2324 +
          (((C21864 - C21863 + C21866 - C21865) * C21780 +
            (C21868 - C21867 + C21870 - C21869) * C140009 +
            (C21872 - C21871 + C21874 - C21873) * C21782 +
            (C21876 - C21875 + C21878 - C21877) * C140010 +
            (C21879 - C21880 + C21881 - C21882) * C21784 +
            (C21883 - C21884 + C21885 - C21886) * C21777) *
               C139835 * C4096 +
           ((C23707 - C23706 + C23709 - C23708) * C21780 +
            (C23711 - C23710 + C23713 - C23712) * C140009 +
            (C23715 - C23714 + C23717 - C23716) * C21782 +
            (C23719 - C23718 + C23721 - C23720) * C140010 +
            (C139983 * C1656 - C21860 * C1567 + C139873 * C3523 -
             C21861 * C3441) *
                C21784 +
            (C139983 * C1661 - C21860 * C1573 + C139873 * C3527 -
             C21861 * C3449) *
                C21777) *
               C139835 * C140002) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexz[6] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139835 * C266 - C265 * C108) * C21780 +
             (C139835 * C272 - C265 * C115) * C140009 + (C279 - C280) * C21782 +
             (C281 - C282) * C140010 + C295 * C21784 + C296 * C21777) *
                C139983 +
            ((C6915 - C6916) * C21780 + (C6917 - C6918) * C140009 +
             C6919 * C21782 + C6920 * C140010 + C21967 * C21784 +
             C21968 * C21777) *
                C139873) *
               C4096 +
           (((C265 * C1570 - C139835 * C1741) * C21780 +
             (C265 * C1579 - C139835 * C1746) * C140009 +
             (C1752 - C1753) * C21782 + (C1754 - C1755) * C140010 +
             (C1756 - C1757) * C21784 + (C1758 - C1759) * C21777) *
                C139983 +
            ((C10635 - C10636) * C21780 + (C10637 - C10638) * C140009 +
             (C7986 - C7987) * C21782 + (C7988 - C7989) * C140010 +
             (C23820 - C23821) * C21784 + (C23822 - C23823) * C21777) *
                C139873) *
               C140002) *
              C139792 * C2324 +
          ((((C280 - C279) * C21780 + (C282 - C281) * C140009 +
             (C284 - C283) * C21782 + (C286 - C285) * C140010 +
             (C288 - C287) * C21784 + (C290 - C289) * C21777) *
                C139983 +
            (C6927 * C21780 + C6928 * C140009 + C22843 * C21782 +
             C22844 * C140010 + (C1003 - C1004) * C21784 +
             (C1005 - C1006) * C21777) *
                C139873) *
               C4096 +
           (((C1753 - C1752) * C21780 + (C1755 - C1754) * C140009 +
             (C1757 - C1756) * C21782 + (C1759 - C1758) * C140010 +
             (C1761 - C1760) * C21784 + (C1763 - C1762) * C21777) *
                C139983 +
            ((C7987 - C7986) * C21780 + (C7989 - C7988) * C140009 +
             (C23821 - C23820) * C21782 + (C23823 - C23822) * C140010 +
             (C139835 * C3597 - C265 * C3441) * C21784 +
             (C139835 * C3601 - C265 * C3449) * C21777) *
                C139873) *
               C140002) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[6] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C140009 * C114 - C21780 * C108 + C140010 * C116 - C21782 * C109 +
             C21777 * C118 - C21784 * C110) *
                C21860 +
            (C140009 * C354 - C21780 * C348 + C140010 * C355 - C21782 * C349 +
             C21777 * C356 - C21784 * C350) *
                C139983 +
            (C22943 - C22944 + C22945 - C22946 + C22947 - C22948) * C21861 +
            (C22949 - C22950 + C22951 - C22952 + C22953 - C22954) * C139873) *
               C139835 * C4096 +
           ((C21780 * C1570 - C140009 * C1578 + C21782 * C1569 -
             C140010 * C1576 + C21784 * C1568 - C21777 * C1574) *
                C21860 +
            (C21780 * C1829 - C140009 * C1834 + C21782 * C1830 -
             C140010 * C1835 + C21784 * C1831 - C21777 * C1836) *
                C139983 +
            (C26461 - C26462 + C26463 - C26464 + C26465 - C26466) * C21861 +
            (C26467 - C26468 + C26469 - C26470 + C26471 - C26472) * C139873) *
               C139835 * C140002) *
              C139792 * C2324 +
          (((C21780 * C109 - C140009 * C116 + C21782 * C110 - C140010 * C118 +
             C21784 * C111 - C21777 * C120) *
                C21860 +
            (C21780 * C349 - C140009 * C355 + C21782 * C350 - C140010 * C356 +
             C21784 * C351 - C21777 * C357) *
                C139983 +
            (C22955 - C22956 + C22957 - C22958 + C22959 - C22960) * C21861 +
            (C22961 - C22962 + C22963 - C22964 + C22965 - C22966) * C139873) *
               C139835 * C4096 +
           ((C140009 * C1576 - C21780 * C1569 + C140010 * C1574 -
             C21782 * C1568 + C21777 * C1572 - C21784 * C1567) *
                C21860 +
            (C140009 * C1835 - C21780 * C1830 + C140010 * C1836 -
             C21782 * C1831 + C21777 * C1837 - C21784 * C1832) *
                C139983 +
            (C140009 * C3444 - C21780 * C3439 + C140010 * C3446 -
             C21782 * C3440 + C21777 * C3448 - C21784 * C3441) *
                C21861 +
            (C140009 * C3673 - C21780 * C3669 + C140010 * C3674 -
             C21782 * C3670 + C21777 * C3675 - C21784 * C3671) *
                C139873) *
               C139835 * C140002) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[6] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C21860 * C183 - C22116 * C108 - C21860 * C348 + C139983 * C411 +
             C21861 * C896 - C22117 * C813 - C21861 * C1072 + C139873 * C1151) *
                C140009 +
            (C22155 + C22156) * C140010 + C22161 * C21777) *
               C139835 * C4096 -
           ((C24044 + C24045) * C21777 + (C24046 + C24047) * C140010 +
            (C21861 * C3520 - C22117 * C3438 - C21861 * C3668 +
             C139873 * C3742 + C21860 * C1653 - C22116 * C1570 -
             C21860 * C1829 + C139983 * C1908) *
                C140009) *
               C139835 * C140002) *
              C139792 * C2324 +
          (((C24047 + C24046) * C140009 + (C24045 + C24044) * C140010 +
            (C21860 * C1656 - C22116 * C1567 - C21860 * C1832 +
             C139983 * C1905 + C21861 * C3523 - C22117 * C3441 -
             C21861 * C3671 + C139873 * C3745) *
                C21777) *
               C139835 * C140002 -
           ((C22159 + C22160) * C21777 + (C22158 + C22157) * C140010 +
            (C22156 + C22155) * C140009) *
               C139835 * C4096) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[6] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139835 * C266 - C265 * C108) * C21860 +
             (C139835 * C495 - C265 * C348) * C139983 +
             (C6915 - C6916) * C21861 + (C7294 - C7295) * C139873) *
                C140009 +
            ((C279 - C280) * C21860 + (C502 - C503) * C139983 + C6919 * C21861 +
             C7298 * C139873) *
                C140010 +
            C22243 * C21777) *
               C4096 +
           (((C265 * C1570 - C139835 * C1741) * C21860 +
             (C265 * C1829 - C139835 * C1997) * C139983 +
             (C10635 - C10636) * C21861 + (C10961 - C10962) * C139873) *
                C140009 +
            ((C1752 - C1753) * C21860 + (C2003 - C2004) * C139983 +
             (C7986 - C7987) * C21861 + (C8321 - C8322) * C139873) *
                C140010 +
            ((C1756 - C1757) * C21860 + (C2005 - C2006) * C139983 +
             (C23820 - C23821) * C21861 + (C24146 - C24147) * C139873) *
                C21777) *
               C140002) *
              C139792 * C2324 +
          ((((C280 - C279) * C21860 + (C503 - C502) * C139983 + C6927 * C21861 +
             C7300 * C139873) *
                C140009 +
            ((C284 - C283) * C21860 + (C506 - C505) * C139983 +
             C22843 * C21861 + C23191 * C139873) *
                C140010 +
            ((C288 - C287) * C21860 + (C509 - C508) * C139983 +
             (C1003 - C1004) * C21861 + (C1250 - C1251) * C139873) *
                C21777) *
               C4096 +
           (((C1753 - C1752) * C21860 + (C2004 - C2003) * C139983 +
             (C7987 - C7986) * C21861 + (C8322 - C8321) * C139873) *
                C140009 +
            ((C1757 - C1756) * C21860 + (C2006 - C2005) * C139983 +
             (C23821 - C23820) * C21861 + (C24147 - C24146) * C139873) *
                C140010 +
            ((C1761 - C1760) * C21860 + (C2008 - C2007) * C139983 +
             (C139835 * C3597 - C265 * C3441) * C21861 +
             (C139835 * C3815 - C265 * C3671) * C139873) *
                C21777) *
               C140002) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eezx[6] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C140009 * C114 - C21780 * C108 + C140010 * C116 - C21782 * C109 +
              C21777 * C118 - C21784 * C110) *
                 C265 +
             (C140009 * C573 - C21780 * C567 + C140010 * C574 - C21782 * C568 +
              C21777 * C575 - C21784 * C569) *
                 C139835) *
                C139983 +
            ((C22943 - C22944 + C22945 - C22946 + C22947 - C22948) * C265 +
             (C23290 - C23291 + C23292 - C23293 + C23294 - C23295) * C139835) *
                C139873) *
               C4096 +
           (((C21780 * C1570 - C140009 * C1578 + C21782 * C1569 -
              C140010 * C1576 + C21784 * C1568 - C21777 * C1574) *
                 C265 +
             (C21780 * C2074 - C140009 * C2079 + C21782 * C2075 -
              C140010 * C2080 + C21784 * C2076 - C21777 * C2081) *
                 C139835) *
                C139983 +
            ((C26461 - C26462 + C26463 - C26464 + C26465 - C26466) * C265 +
             (C26767 - C26768 + C26769 - C26770 + C26771 - C26772) * C139835) *
                C139873) *
               C140002) *
              C139792 * C2324 +
          ((((C21780 * C109 - C140009 * C116 + C21782 * C110 - C140010 * C118 +
              C21784 * C111 - C21777 * C120) *
                 C265 +
             (C21780 * C568 - C140009 * C574 + C21782 * C569 - C140010 * C575 +
              C21784 * C570 - C21777 * C576) *
                 C139835) *
                C139983 +
            ((C22955 - C22956 + C22957 - C22958 + C22959 - C22960) * C265 +
             (C23296 - C23297 + C23298 - C23299 + C23300 - C23301) * C139835) *
                C139873) *
               C4096 +
           (((C140009 * C1576 - C21780 * C1569 + C140010 * C1574 -
              C21782 * C1568 + C21777 * C1572 - C21784 * C1567) *
                 C265 +
             (C140009 * C2080 - C21780 * C2075 + C140010 * C2081 -
              C21782 * C2076 + C21777 * C2082 - C21784 * C2077) *
                 C139835) *
                C139983 +
            ((C140009 * C3444 - C21780 * C3439 + C140010 * C3446 -
              C21782 * C3440 + C21777 * C3448 - C21784 * C3441) *
                 C265 +
             (C140009 * C3887 - C21780 * C3883 + C140010 * C3888 -
              C21782 * C3884 + C21777 * C3889 - C21784 * C3885) *
                 C139835) *
                C139873) *
               C140002) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eezy[6] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139983 * C183 - C21860 * C108 + C139873 * C896 - C21861 * C813) *
                 C265 +
             (C139983 * C629 - C21860 * C567 + C139873 * C1393 -
              C21861 * C1317) *
                 C139835) *
                C140009 +
            ((C21863 - C21864 + C21865 - C21866) * C265 +
             (C22392 - C22393 + C22394 - C22395) * C139835) *
                C140010 +
            C22409 * C21777) *
               C4096 +
           (((C21860 * C1570 - C139983 * C1653 + C21861 * C3438 -
              C139873 * C3520) *
                 C265 +
             (C21860 * C2074 - C139983 * C2150 + C21861 * C3882 -
              C139873 * C3956) *
                 C139835) *
                C140009 +
            ((C23706 - C23707 + C23708 - C23709) * C265 +
             (C24344 - C24345 + C24346 - C24347) * C139835) *
                C140010 +
            ((C23714 - C23715 + C23716 - C23717) * C265 +
             (C24348 - C24349 + C24350 - C24351) * C139835) *
                C21777) *
               C140002) *
              C139792 * C2324 +
          ((((C21864 - C21863 + C21866 - C21865) * C265 +
             (C22393 - C22392 + C22395 - C22394) * C139835) *
                C140009 +
            ((C21872 - C21871 + C21874 - C21873) * C265 +
             (C22398 - C22397 + C22400 - C22399) * C139835) *
                C140010 +
            ((C21879 - C21880 + C21881 - C21882) * C265 +
             (C22401 - C22402 + C22403 - C22404) * C139835) *
                C21777) *
               C4096 +
           (((C23707 - C23706 + C23709 - C23708) * C265 +
             (C24345 - C24344 + C24347 - C24346) * C139835) *
                C140009 +
            ((C23715 - C23714 + C23717 - C23716) * C265 +
             (C24349 - C24348 + C24351 - C24350) * C139835) *
                C140010 +
            ((C139983 * C1656 - C21860 * C1567 + C139873 * C3523 -
              C21861 * C3441) *
                 C265 +
             (C139983 * C2153 - C21860 * C2077 + C139873 * C3959 -
              C21861 * C3885) *
                 C139835) *
                C21777) *
               C140002) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eezz[6] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C265 * C266 - C701 * C108 - C265 * C567 + C139835 * C702) *
                 C139983 +
             C7652 * C139873) *
                C140009 +
            (C22484 + C22485) * C140010 + C22490 * C21777) *
               C4096 -
           ((C24460 + C24454) * C21777 + (C24455 + C24456) * C140010 +
            (C11288 * C139873 +
             (C265 * C1741 - C701 * C1570 - C265 * C2074 + C139835 * C2230) *
                 C139983) *
                C140009) *
               C140002) *
              C139792 * C2324 +
          (((C24456 + C24455) * C140009 + (C24454 + C24460) * C140010 +
            (C2251 * C139983 +
             (C265 * C3597 - C701 * C3441 - C265 * C3885 + C139835 * C4029) *
                 C139873) *
                C21777) *
               C140002 -
           ((C22488 + C22489) * C21777 + (C22487 + C22486) * C140010 +
            (C22485 + C22484) * C140009) *
               C4096) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexx[7] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C21780 * C114 - C21781 * C108 - C21780 * C115 + C140009 * C126 +
             C21782 * C116 - C21783 * C109 - C21782 * C117 + C140010 * C127 +
             C21784 * C118 - C21785 * C110 - C21784 * C119 + C21777 * C128) *
                C139835 * C139983 +
            (C22625 + C22626 + C22627) * C139835 * C139873) *
               C4096 -
           ((C26164 + C26165 + C26166) * C139835 * C139873 +
            (C21784 * C1574 - C21785 * C1568 - C21784 * C1575 + C21777 * C1583 +
             C21782 * C1576 - C21783 * C1569 - C21782 * C1577 +
             C140010 * C1584 + C21780 * C1578 - C21781 * C1570 -
             C21780 * C1579 + C140009 * C1585) *
                C139835 * C139983) *
               C140002) *
              C806 +
          (((C26166 + C26165 + C26164) * C139835 * C139983 +
            (C21780 * C7758 - C21781 * C7754 - C21780 * C7759 +
             C140009 * C7763 + C21782 * C7756 - C21783 * C7753 -
             C21782 * C7757 + C140010 * C7762 + C21784 * C7760 -
             C21785 * C7755 - C21784 * C7761 + C21777 * C7764) *
                C139835 * C139873) *
               C140002 -
           ((C25435 + C25436 + C25437) * C139835 * C139873 +
            (C22627 + C22626 + C22625) * C139835 * C139983) *
               C4096) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eexy[7] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139983 * C183 - C21860 * C108 + C139873 * C896 - C21861 * C813) *
                C21780 +
            (C139983 * C189 - C21860 * C115 + C139873 * C901 - C21861 * C822) *
                C140009 +
            (C21863 - C21864 + C21865 - C21866) * C21782 +
            (C21867 - C21868 + C21869 - C21870) * C140010 + C21891 * C21784 +
            C21892 * C21777) *
               C139835 * C4096 +
           ((C21860 * C1570 - C139983 * C1653 + C21861 * C3438 -
             C139873 * C3520) *
                C21780 +
            (C21860 * C1579 - C139983 * C1658 + C21861 * C3443 -
             C139873 * C3524) *
                C140009 +
            (C23706 - C23707 + C23708 - C23709) * C21782 +
            (C23710 - C23711 + C23712 - C23713) * C140010 +
            (C23714 - C23715 + C23716 - C23717) * C21784 +
            (C23718 - C23719 + C23720 - C23721) * C21777) *
               C139835 * C140002) *
              C806 +
          (((C21860 * C813 - C139983 * C896 + C21861 * C2908 -
             C139873 * C2974) *
                C21780 +
            (C21860 * C822 - C139983 * C901 + C21861 * C2913 -
             C139873 * C2978) *
                C140009 +
            (C22729 - C22730 + C22731 - C22732) * C21782 +
            (C22733 - C22734 + C22735 - C22736) * C140010 +
            (C22737 - C22738 + C22739 - C22740) * C21784 +
            (C22741 - C22742 + C22743 - C22744) * C21777) *
               C139835 * C4096 +
           ((C139983 * C3520 - C21860 * C3438 + C139873 * C7863 -
             C21861 * C7754) *
                C21780 +
            (C139983 * C3524 - C21860 * C3443 + C139873 * C7866 -
             C21861 * C7759) *
                C140009 +
            (C139983 * C3521 - C21860 * C3439 + C139873 * C7864 -
             C21861 * C7753) *
                C21782 +
            (C139983 * C3525 - C21860 * C3445 + C139873 * C7867 -
             C21861 * C7757) *
                C140010 +
            (C139983 * C3522 - C21860 * C3440 + C139873 * C7865 -
             C21861 * C7755) *
                C21784 +
            (C139983 * C3526 - C21860 * C3447 + C139873 * C7868 -
             C21861 * C7761) *
                C21777) *
               C139835 * C140002) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eexz[7] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139835 * C266 - C265 * C108) * C21780 +
             (C139835 * C272 - C265 * C115) * C140009 + (C279 - C280) * C21782 +
             (C281 - C282) * C140010 + C295 * C21784 + C296 * C21777) *
                C139983 +
            ((C6915 - C6916) * C21780 + (C6917 - C6918) * C140009 +
             C6919 * C21782 + C6920 * C140010 + C21967 * C21784 +
             C21968 * C21777) *
                C139873) *
               C4096 +
           (((C265 * C1570 - C139835 * C1741) * C21780 +
             (C265 * C1579 - C139835 * C1746) * C140009 +
             (C1752 - C1753) * C21782 + (C1754 - C1755) * C140010 +
             (C1756 - C1757) * C21784 + (C1758 - C1759) * C21777) *
                C139983 +
            ((C10635 - C10636) * C21780 + (C10637 - C10638) * C140009 +
             (C7986 - C7987) * C21782 + (C7988 - C7989) * C140010 +
             (C23820 - C23821) * C21784 + (C23822 - C23823) * C21777) *
                C139873) *
               C140002) *
              C806 +
          ((((C6916 - C6915) * C21780 + (C6918 - C6917) * C140009 +
             C6927 * C21782 + C6928 * C140010 + C22843 * C21784 +
             C22844 * C21777) *
                C139983 +
            ((C6922 - C6921) * C21780 + (C6924 - C6923) * C140009 +
             C6929 * C21782 + C6930 * C140010 + (C6000 - C6001) * C21784 +
             (C6002 - C6003) * C21777) *
                C139873) *
               C4096 +
           (((C10636 - C10635) * C21780 + (C10638 - C10637) * C140009 +
             (C7987 - C7986) * C21782 + (C7989 - C7988) * C140010 +
             (C23821 - C23820) * C21784 + (C23823 - C23822) * C21777) *
                C139983 +
            ((C10640 - C10639) * C21780 + (C10642 - C10641) * C140009 +
             (C7991 - C7990) * C21782 + (C7993 - C7992) * C140010 +
             (C139835 * C7981 - C265 * C7755) * C21784 +
             (C139835 * C7984 - C265 * C7761) * C21777) *
                C139873) *
               C140002) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eeyx[7] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C140009 * C114 - C21780 * C108 + C140010 * C116 - C21782 * C109 +
             C21777 * C118 - C21784 * C110) *
                C21860 +
            (C140009 * C354 - C21780 * C348 + C140010 * C355 - C21782 * C349 +
             C21777 * C356 - C21784 * C350) *
                C139983 +
            (C22943 - C22944 + C22945 - C22946 + C22947 - C22948) * C21861 +
            (C22949 - C22950 + C22951 - C22952 + C22953 - C22954) * C139873) *
               C139835 * C4096 +
           ((C21780 * C1570 - C140009 * C1578 + C21782 * C1569 -
             C140010 * C1576 + C21784 * C1568 - C21777 * C1574) *
                C21860 +
            (C21780 * C1829 - C140009 * C1834 + C21782 * C1830 -
             C140010 * C1835 + C21784 * C1831 - C21777 * C1836) *
                C139983 +
            (C26461 - C26462 + C26463 - C26464 + C26465 - C26466) * C21861 +
            (C26467 - C26468 + C26469 - C26470 + C26471 - C26472) * C139873) *
               C139835 * C140002) *
              C806 +
          (((C22944 - C22943 + C22946 - C22945 + C22948 - C22947) * C21860 +
            (C22950 - C22949 + C22952 - C22951 + C22954 - C22953) * C139983 +
            (C25660 - C25661 + C25662 - C25663 + C25664 - C25665) * C21861 +
            (C25666 - C25667 + C25668 - C25669 + C25670 - C25671) * C139873) *
               C139835 * C4096 +
           ((C26462 - C26461 + C26464 - C26463 + C26466 - C26465) * C21860 +
            (C26468 - C26467 + C26470 - C26469 + C26472 - C26471) * C139983 +
            (C140009 * C7758 - C21780 * C7754 + C140010 * C7756 -
             C21782 * C7753 + C21777 * C7760 - C21784 * C7755) *
                C21861 +
            (C140009 * C8094 - C21780 * C8091 + C140010 * C8095 -
             C21782 * C8092 + C21777 * C8096 - C21784 * C8093) *
                C139873) *
               C139835 * C140002) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eeyy[7] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C21860 * C183 - C22116 * C108 - C21860 * C348 + C139983 * C411 +
             C21861 * C896 - C22117 * C813 - C21861 * C1072 + C139873 * C1151) *
                C140009 +
            (C22155 + C22156) * C140010 + C22161 * C21777) *
               C139835 * C4096 -
           ((C24044 + C24045) * C21777 + (C24046 + C24047) * C140010 +
            (C21861 * C3520 - C22117 * C3438 - C21861 * C3668 +
             C139873 * C3742 + C21860 * C1653 - C22116 * C1570 -
             C21860 * C1829 + C139983 * C1908) *
                C140009) *
               C139835 * C140002) *
              C806 +
          (((C21860 * C3520 - C22116 * C3438 - C21860 * C3668 +
             C139983 * C3742 + C21861 * C7863 - C22117 * C7754 -
             C21861 * C8091 + C139873 * C8196) *
                C140009 +
            (C21860 * C3521 - C22116 * C3439 - C21860 * C3669 +
             C139983 * C3743 + C21861 * C7864 - C22117 * C7753 -
             C21861 * C8092 + C139873 * C8195) *
                C140010 +
            (C21860 * C3522 - C22116 * C3440 - C21860 * C3670 +
             C139983 * C3744 + C21861 * C7865 - C22117 * C7755 -
             C21861 * C8093 + C139873 * C8197) *
                C21777) *
               C139835 * C140002 -
           ((C23089 + C23090) * C21777 + (C23091 + C23092) * C140010 +
            (C21861 * C2974 - C22117 * C2908 - C21861 * C3090 +
             C139873 * C3148 + C21860 * C896 - C22116 * C813 - C21860 * C1072 +
             C139983 * C1151) *
                C140009) *
               C139835 * C4096) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eeyz[7] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139835 * C266 - C265 * C108) * C21860 +
             (C139835 * C495 - C265 * C348) * C139983 +
             (C6915 - C6916) * C21861 + (C7294 - C7295) * C139873) *
                C140009 +
            ((C279 - C280) * C21860 + (C502 - C503) * C139983 + C6919 * C21861 +
             C7298 * C139873) *
                C140010 +
            C22243 * C21777) *
               C4096 +
           (((C265 * C1570 - C139835 * C1741) * C21860 +
             (C265 * C1829 - C139835 * C1997) * C139983 +
             (C10635 - C10636) * C21861 + (C10961 - C10962) * C139873) *
                C140009 +
            ((C1752 - C1753) * C21860 + (C2003 - C2004) * C139983 +
             (C7986 - C7987) * C21861 + (C8321 - C8322) * C139873) *
                C140010 +
            ((C1756 - C1757) * C21860 + (C2005 - C2006) * C139983 +
             (C23820 - C23821) * C21861 + (C24146 - C24147) * C139873) *
                C21777) *
               C140002) *
              C806 +
          ((((C6916 - C6915) * C21860 + (C7295 - C7294) * C139983 +
             (C6922 - C6921) * C21861 + (C7297 - C7296) * C139873) *
                C140009 +
            (C6927 * C21860 + C7300 * C139983 + C6929 * C21861 +
             C7301 * C139873) *
                C140010 +
            (C22843 * C21860 + C23191 * C139983 + (C6000 - C6001) * C21861 +
             (C6273 - C6274) * C139873) *
                C21777) *
               C4096 +
           (((C10636 - C10635) * C21860 + (C10962 - C10961) * C139983 +
             (C10640 - C10639) * C21861 + (C10964 - C10963) * C139873) *
                C140009 +
            ((C7987 - C7986) * C21860 + (C8322 - C8321) * C139983 +
             (C7991 - C7990) * C21861 + (C8324 - C8323) * C139873) *
                C140010 +
            ((C23821 - C23820) * C21860 + (C24147 - C24146) * C139983 +
             (C139835 * C7981 - C265 * C7755) * C21861 +
             (C139835 * C8319 - C265 * C8093) * C139873) *
                C21777) *
               C140002) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eezx[7] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C140009 * C114 - C21780 * C108 + C140010 * C116 - C21782 * C109 +
              C21777 * C118 - C21784 * C110) *
                 C265 +
             (C140009 * C573 - C21780 * C567 + C140010 * C574 - C21782 * C568 +
              C21777 * C575 - C21784 * C569) *
                 C139835) *
                C139983 +
            ((C22943 - C22944 + C22945 - C22946 + C22947 - C22948) * C265 +
             (C23290 - C23291 + C23292 - C23293 + C23294 - C23295) * C139835) *
                C139873) *
               C4096 +
           (((C21780 * C1570 - C140009 * C1578 + C21782 * C1569 -
              C140010 * C1576 + C21784 * C1568 - C21777 * C1574) *
                 C265 +
             (C21780 * C2074 - C140009 * C2079 + C21782 * C2075 -
              C140010 * C2080 + C21784 * C2076 - C21777 * C2081) *
                 C139835) *
                C139983 +
            ((C26461 - C26462 + C26463 - C26464 + C26465 - C26466) * C265 +
             (C26767 - C26768 + C26769 - C26770 + C26771 - C26772) * C139835) *
                C139873) *
               C140002) *
              C806 +
          ((((C22944 - C22943 + C22946 - C22945 + C22948 - C22947) * C265 +
             (C23291 - C23290 + C23293 - C23292 + C23295 - C23294) * C139835) *
                C139983 +
            ((C25660 - C25661 + C25662 - C25663 + C25664 - C25665) * C265 +
             (C25894 - C25895 + C25896 - C25897 + C25898 - C25899) * C139835) *
                C139873) *
               C4096 +
           (((C26462 - C26461 + C26464 - C26463 + C26466 - C26465) * C265 +
             (C26768 - C26767 + C26770 - C26769 + C26772 - C26771) * C139835) *
                C139983 +
            ((C140009 * C7758 - C21780 * C7754 + C140010 * C7756 -
              C21782 * C7753 + C21777 * C7760 - C21784 * C7755) *
                 C265 +
             (C140009 * C8425 - C21780 * C8422 + C140010 * C8426 -
              C21782 * C8423 + C21777 * C8427 - C21784 * C8424) *
                 C139835) *
                C139873) *
               C140002) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eezy[7] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139983 * C183 - C21860 * C108 + C139873 * C896 - C21861 * C813) *
                 C265 +
             (C139983 * C629 - C21860 * C567 + C139873 * C1393 -
              C21861 * C1317) *
                 C139835) *
                C140009 +
            ((C21863 - C21864 + C21865 - C21866) * C265 +
             (C22392 - C22393 + C22394 - C22395) * C139835) *
                C140010 +
            C22409 * C21777) *
               C4096 +
           (((C21860 * C1570 - C139983 * C1653 + C21861 * C3438 -
              C139873 * C3520) *
                 C265 +
             (C21860 * C2074 - C139983 * C2150 + C21861 * C3882 -
              C139873 * C3956) *
                 C139835) *
                C140009 +
            ((C23706 - C23707 + C23708 - C23709) * C265 +
             (C24344 - C24345 + C24346 - C24347) * C139835) *
                C140010 +
            ((C23714 - C23715 + C23716 - C23717) * C265 +
             (C24348 - C24349 + C24350 - C24351) * C139835) *
                C21777) *
               C140002) *
              C806 +
          ((((C21860 * C813 - C139983 * C896 + C21861 * C2908 -
              C139873 * C2974) *
                 C265 +
             (C21860 * C1317 - C139983 * C1393 + C21861 * C3256 -
              C139873 * C3314) *
                 C139835) *
                C140009 +
            ((C22729 - C22730 + C22731 - C22732) * C265 +
             (C23400 - C23401 + C23402 - C23403) * C139835) *
                C140010 +
            ((C22737 - C22738 + C22739 - C22740) * C265 +
             (C23404 - C23405 + C23406 - C23407) * C139835) *
                C21777) *
               C4096 +
           (((C139983 * C3520 - C21860 * C3438 + C139873 * C7863 -
              C21861 * C7754) *
                 C265 +
             (C139983 * C3956 - C21860 * C3882 + C139873 * C8526 -
              C21861 * C8422) *
                 C139835) *
                C140009 +
            ((C139983 * C3521 - C21860 * C3439 + C139873 * C7864 -
              C21861 * C7753) *
                 C265 +
             (C139983 * C3957 - C21860 * C3883 + C139873 * C8527 -
              C21861 * C8423) *
                 C139835) *
                C140010 +
            ((C139983 * C3522 - C21860 * C3440 + C139873 * C7865 -
              C21861 * C7755) *
                 C265 +
             (C139983 * C3958 - C21860 * C3884 + C139873 * C8528 -
              C21861 * C8424) *
                 C139835) *
                C21777) *
               C140002) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eezz[7] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C265 * C266 - C701 * C108 - C265 * C567 + C139835 * C702) *
                 C139983 +
             C7652 * C139873) *
                C140009 +
            (C22484 + C22485) * C140010 + C22490 * C21777) *
               C4096 -
           ((C24460 + C24454) * C21777 + (C24455 + C24456) * C140010 +
            (C11288 * C139873 +
             (C265 * C1741 - C701 * C1570 - C265 * C2074 + C139835 * C2230) *
                 C139983) *
                C140009) *
               C140002) *
              C806 +
          (((C11288 * C139983 + C11287 * C139873) * C140009 +
            (C8651 * C139983 + C8650 * C139873) * C140010 +
            (C24459 * C139983 +
             (C265 * C7981 - C701 * C7755 - C265 * C8424 + C139835 * C8635) *
                 C139873) *
                C21777) *
               C140002 -
           ((C23506 + C23507) * C21777 + (C23508 + C23509) * C140010 +
            (C7653 * C139873 + C7652 * C139983) * C140009) *
               C4096) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eexx[8] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C21780 * C114 - C21781 * C108 - C21780 * C115 + C140009 * C126 +
            C21782 * C116 - C21783 * C109 - C21782 * C117 + C140010 * C127 +
            C21784 * C118 - C21785 * C110 - C21784 * C119 + C21777 * C128) *
               C139835 * C139983 +
           (C22625 + C22626 + C22627) * C139835 * C139873) *
              C5270 -
          ((C26164 + C26165 + C26166) * C139835 * C139873 +
           (C21784 * C1574 - C21785 * C1568 - C21784 * C1575 + C21777 * C1583 +
            C21782 * C1576 - C21783 * C1569 - C21782 * C1577 + C140010 * C1584 +
            C21780 * C1578 - C21781 * C1570 - C21780 * C1579 +
            C140009 * C1585) *
               C139835 * C139983) *
              C5271 +
          ((C21780 * C5277 - C21781 * C5273 - C21780 * C5278 + C140009 * C5285 +
            C21782 * C5279 - C21783 * C5274 - C21782 * C5280 + C140010 * C5286 +
            C21784 * C5281 - C21785 * C5275 - C21784 * C5282 + C21777 * C5287) *
               C139835 * C139983 +
           (C21780 * C13130 - C21781 * C13126 - C21780 * C13131 +
            C140009 * C13138 + C21782 * C13132 - C21783 * C13127 -
            C21782 * C13133 + C140010 * C13139 + C21784 * C14660 -
            C21785 * C14659 - C21784 * C14661 + C21777 * C14662) *
               C139835 * C139873) *
              C5272) *
         C139792 * C139758) /
        (p * q * std::sqrt(p + q));
    d2eexy[8] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C139983 * C183 - C21860 * C108 + C139873 * C896 - C21861 * C813) *
               C21780 +
           (C139983 * C189 - C21860 * C115 + C139873 * C901 - C21861 * C822) *
               C140009 +
           (C21863 - C21864 + C21865 - C21866) * C21782 +
           (C21867 - C21868 + C21869 - C21870) * C140010 + C21891 * C21784 +
           C21892 * C21777) *
              C139835 * C5270 +
          ((C21860 * C1570 - C139983 * C1653 + C21861 * C3438 -
            C139873 * C3520) *
               C21780 +
           (C21860 * C1579 - C139983 * C1658 + C21861 * C3443 -
            C139873 * C3524) *
               C140009 +
           (C23706 - C23707 + C23708 - C23709) * C21782 +
           (C23710 - C23711 + C23712 - C23713) * C140010 +
           (C23714 - C23715 + C23716 - C23717) * C21784 +
           (C23718 - C23719 + C23720 - C23721) * C21777) *
              C139835 * C5271 +
          ((C139983 * C5339 - C21860 * C5273 + C139873 * C13216 -
            C21861 * C13126) *
               C21780 +
           (C139983 * C5343 - C21860 * C5278 + C139873 * C13220 -
            C21861 * C13131) *
               C140009 +
           (C139983 * C5340 - C21860 * C5274 + C139873 * C13218 -
            C21861 * C13127) *
               C21782 +
           (C139983 * C5344 - C21860 * C5280 + C139873 * C13222 -
            C21861 * C13133) *
               C140010 +
           (C139983 * C5341 - C21860 * C5275 + C139873 * C14761 -
            C21861 * C14659) *
               C21784 +
           (C139983 * C5345 - C21860 * C5282 + C139873 * C14762 -
            C21861 * C14661) *
               C21777) *
              C139835 * C5272) *
         C139792 * C139758) /
        (p * q * std::sqrt(p + q));
    d2eexz[8] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139835 * C266 - C265 * C108) * C21780 +
            (C139835 * C272 - C265 * C115) * C140009 + (C279 - C280) * C21782 +
            (C281 - C282) * C140010 + C295 * C21784 + C296 * C21777) *
               C139983 +
           ((C6915 - C6916) * C21780 + (C6917 - C6918) * C140009 +
            C6919 * C21782 + C6920 * C140010 + C21967 * C21784 +
            C21968 * C21777) *
               C139873) *
              C5270 +
          (((C265 * C1570 - C139835 * C1741) * C21780 +
            (C265 * C1579 - C139835 * C1746) * C140009 +
            (C1752 - C1753) * C21782 + (C1754 - C1755) * C140010 +
            (C1756 - C1757) * C21784 + (C1758 - C1759) * C21777) *
               C139983 +
           ((C10635 - C10636) * C21780 + (C10637 - C10638) * C140009 +
            (C7986 - C7987) * C21782 + (C7988 - C7989) * C140010 +
            (C23820 - C23821) * C21784 + (C23822 - C23823) * C21777) *
               C139873) *
              C5271 +
          (((C139835 * C5397 - C265 * C5273) * C21780 +
            (C139835 * C5401 - C265 * C5278) * C140009 +
            (C139835 * C5398 - C265 * C5274) * C21782 +
            (C139835 * C5402 - C265 * C5280) * C140010 +
            (C139835 * C5399 - C265 * C5275) * C21784 +
            (C139835 * C5403 - C265 * C5282) * C21777) *
               C139983 +
           ((C139835 * C13298 - C265 * C13126) * C21780 +
            (C139835 * C13302 - C265 * C13131) * C140009 +
            (C139835 * C13299 - C265 * C13127) * C21782 +
            (C139835 * C13303 - C265 * C13133) * C140010 +
            (C139835 * C14869 - C265 * C14659) * C21784 +
            (C139835 * C14870 - C265 * C14661) * C21777) *
               C139873) *
              C5272) *
         C139792 * C139758) /
        (p * q * std::sqrt(p + q));
    d2eeyx[8] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C140009 * C114 - C21780 * C108 + C140010 * C116 - C21782 * C109 +
            C21777 * C118 - C21784 * C110) *
               C21860 +
           (C140009 * C354 - C21780 * C348 + C140010 * C355 - C21782 * C349 +
            C21777 * C356 - C21784 * C350) *
               C139983 +
           (C22943 - C22944 + C22945 - C22946 + C22947 - C22948) * C21861 +
           (C22949 - C22950 + C22951 - C22952 + C22953 - C22954) * C139873) *
              C139835 * C5270 +
          ((C21780 * C1570 - C140009 * C1578 + C21782 * C1569 -
            C140010 * C1576 + C21784 * C1568 - C21777 * C1574) *
               C21860 +
           (C21780 * C1829 - C140009 * C1834 + C21782 * C1830 -
            C140010 * C1835 + C21784 * C1831 - C21777 * C1836) *
               C139983 +
           (C26461 - C26462 + C26463 - C26464 + C26465 - C26466) * C21861 +
           (C26467 - C26468 + C26469 - C26470 + C26471 - C26472) * C139873) *
              C139835 * C5271 +
          ((C140009 * C5277 - C21780 * C5273 + C140010 * C5279 -
            C21782 * C5274 + C21777 * C5281 - C21784 * C5275) *
               C21860 +
           (C140009 * C5459 - C21780 * C5455 + C140010 * C5460 -
            C21782 * C5456 + C21777 * C5461 - C21784 * C5457) *
               C139983 +
           (C140009 * C13130 - C21780 * C13126 + C140010 * C13132 -
            C21782 * C13127 + C21777 * C14660 - C21784 * C14659) *
               C21861 +
           (C140009 * C13384 - C21780 * C13380 + C140010 * C13385 -
            C21782 * C13381 + C21777 * C14982 - C21784 * C14981) *
               C139873) *
              C139835 * C5272) *
         C139792 * C139758) /
        (p * q * std::sqrt(p + q));
    d2eeyy[8] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C21860 * C183 - C22116 * C108 - C21860 * C348 + C139983 * C411 +
            C21861 * C896 - C22117 * C813 - C21861 * C1072 + C139873 * C1151) *
               C140009 +
           (C22155 + C22156) * C140010 + C22161 * C21777) *
              C139835 * C5270 -
          ((C24044 + C24045) * C21777 + (C24046 + C24047) * C140010 +
           (C21861 * C3520 - C22117 * C3438 - C21861 * C3668 + C139873 * C3742 +
            C21860 * C1653 - C22116 * C1570 - C21860 * C1829 +
            C139983 * C1908) *
               C140009) *
              C139835 * C5271 +
          ((C21860 * C5339 - C22116 * C5273 - C21860 * C5455 + C139983 * C5513 +
            C21861 * C13216 - C22117 * C13126 - C21861 * C13380 +
            C139873 * C13462) *
               C140009 +
           (C21860 * C5340 - C22116 * C5274 - C21860 * C5456 + C139983 * C5514 +
            C21861 * C13218 - C22117 * C13127 - C21861 * C13381 +
            C139873 * C13464) *
               C140010 +
           (C21860 * C5341 - C22116 * C5275 - C21860 * C5457 + C139983 * C5515 +
            C21861 * C14761 - C22117 * C14659 - C21861 * C14981 +
            C139873 * C15081) *
               C21777) *
              C139835 * C5272) *
         C139792 * C139758) /
        (p * q * std::sqrt(p + q));
    d2eeyz[8] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C139835 * C266 - C265 * C108) * C21860 +
                     (C139835 * C495 - C265 * C348) * C139983 +
                     (C6915 - C6916) * C21861 + (C7294 - C7295) * C139873) *
                        C140009 +
                    ((C279 - C280) * C21860 + (C502 - C503) * C139983 +
                     C6919 * C21861 + C7298 * C139873) *
                        C140010 +
                    C22243 * C21777) *
                       C5270 +
                   (((C265 * C1570 - C139835 * C1741) * C21860 +
                     (C265 * C1829 - C139835 * C1997) * C139983 +
                     (C10635 - C10636) * C21861 + (C10961 - C10962) * C139873) *
                        C140009 +
                    ((C1752 - C1753) * C21860 + (C2003 - C2004) * C139983 +
                     (C7986 - C7987) * C21861 + (C8321 - C8322) * C139873) *
                        C140010 +
                    ((C1756 - C1757) * C21860 + (C2005 - C2006) * C139983 +
                     (C23820 - C23821) * C21861 + (C24146 - C24147) * C139873) *
                        C21777) *
                       C5271 +
                   (((C139835 * C5397 - C265 * C5273) * C21860 +
                     (C139835 * C5567 - C265 * C5455) * C139983 +
                     (C139835 * C13298 - C265 * C13126) * C21861 +
                     (C139835 * C13540 - C265 * C13380) * C139873) *
                        C140009 +
                    ((C139835 * C5398 - C265 * C5274) * C21860 +
                     (C139835 * C5568 - C265 * C5456) * C139983 +
                     (C139835 * C13299 - C265 * C13127) * C21861 +
                     (C139835 * C13542 - C265 * C13381) * C139873) *
                        C140010 +
                    ((C139835 * C5399 - C265 * C5275) * C21860 +
                     (C139835 * C5569 - C265 * C5457) * C139983 +
                     (C139835 * C14869 - C265 * C14659) * C21861 +
                     (C139835 * C15194 - C265 * C14981) * C139873) *
                        C21777) *
                       C5272) *
                  C139792 * C139758) /
                 (p * q * std::sqrt(p + q));
    d2eezx[8] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C140009 * C114 - C21780 * C108 + C140010 * C116 - C21782 * C109 +
             C21777 * C118 - C21784 * C110) *
                C265 +
            (C140009 * C573 - C21780 * C567 + C140010 * C574 - C21782 * C568 +
             C21777 * C575 - C21784 * C569) *
                C139835) *
               C139983 +
           ((C22943 - C22944 + C22945 - C22946 + C22947 - C22948) * C265 +
            (C23290 - C23291 + C23292 - C23293 + C23294 - C23295) * C139835) *
               C139873) *
              C5270 +
          (((C21780 * C1570 - C140009 * C1578 + C21782 * C1569 -
             C140010 * C1576 + C21784 * C1568 - C21777 * C1574) *
                C265 +
            (C21780 * C2074 - C140009 * C2079 + C21782 * C2075 -
             C140010 * C2080 + C21784 * C2076 - C21777 * C2081) *
                C139835) *
               C139983 +
           ((C26461 - C26462 + C26463 - C26464 + C26465 - C26466) * C265 +
            (C26767 - C26768 + C26769 - C26770 + C26771 - C26772) * C139835) *
               C139873) *
              C5271 +
          (((C140009 * C5277 - C21780 * C5273 + C140010 * C5279 -
             C21782 * C5274 + C21777 * C5281 - C21784 * C5275) *
                C265 +
            (C140009 * C5625 - C21780 * C5621 + C140010 * C5626 -
             C21782 * C5622 + C21777 * C5627 - C21784 * C5623) *
                C139835) *
               C139983 +
           ((C140009 * C13130 - C21780 * C13126 + C140010 * C13132 -
             C21782 * C13127 + C21777 * C14660 - C21784 * C14659) *
                C265 +
            (C140009 * C13622 - C21780 * C13618 + C140010 * C13623 -
             C21782 * C13619 + C21777 * C15300 - C21784 * C15299) *
                C139835) *
               C139873) *
              C5272) *
         C139792 * C139758) /
        (p * q * std::sqrt(p + q));
    d2eezy[8] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139983 * C183 - C21860 * C108 + C139873 * C896 - C21861 * C813) *
                C265 +
            (C139983 * C629 - C21860 * C567 + C139873 * C1393 -
             C21861 * C1317) *
                C139835) *
               C140009 +
           ((C21863 - C21864 + C21865 - C21866) * C265 +
            (C22392 - C22393 + C22394 - C22395) * C139835) *
               C140010 +
           C22409 * C21777) *
              C5270 +
          (((C21860 * C1570 - C139983 * C1653 + C21861 * C3438 -
             C139873 * C3520) *
                C265 +
            (C21860 * C2074 - C139983 * C2150 + C21861 * C3882 -
             C139873 * C3956) *
                C139835) *
               C140009 +
           ((C23706 - C23707 + C23708 - C23709) * C265 +
            (C24344 - C24345 + C24346 - C24347) * C139835) *
               C140010 +
           ((C23714 - C23715 + C23716 - C23717) * C265 +
            (C24348 - C24349 + C24350 - C24351) * C139835) *
               C21777) *
              C5271 +
          (((C139983 * C5339 - C21860 * C5273 + C139873 * C13216 -
             C21861 * C13126) *
                C265 +
            (C139983 * C5679 - C21860 * C5621 + C139873 * C13700 -
             C21861 * C13618) *
                C139835) *
               C140009 +
           ((C139983 * C5340 - C21860 * C5274 + C139873 * C13218 -
             C21861 * C13127) *
                C265 +
            (C139983 * C5680 - C21860 * C5622 + C139873 * C13702 -
             C21861 * C13619) *
                C139835) *
               C140010 +
           ((C139983 * C5341 - C21860 * C5275 + C139873 * C14761 -
             C21861 * C14659) *
                C265 +
            (C139983 * C5681 - C21860 * C5623 + C139873 * C15399 -
             C21861 * C15299) *
                C139835) *
               C21777) *
              C5272) *
         C139792 * C139758) /
        (p * q * std::sqrt(p + q));
    d2eezz[8] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C265 * C266 - C701 * C108 - C265 * C567 + C139835 * C702) *
                C139983 +
            C7652 * C139873) *
               C140009 +
           (C22484 + C22485) * C140010 + C22490 * C21777) *
              C5270 -
          ((C24460 + C24454) * C21777 + (C24455 + C24456) * C140010 +
           (C11288 * C139873 +
            (C265 * C1741 - C701 * C1570 - C265 * C2074 + C139835 * C2230) *
                C139983) *
               C140009) *
              C5271 +
          (((C265 * C5397 - C701 * C5273 - C265 * C5621 + C139835 * C5733) *
                C139983 +
            (C265 * C13298 - C701 * C13126 - C265 * C13618 + C139835 * C13778) *
                C139873) *
               C140009 +
           ((C265 * C5398 - C701 * C5274 - C265 * C5622 + C139835 * C5734) *
                C139983 +
            (C265 * C13299 - C701 * C13127 - C265 * C13619 + C139835 * C13780) *
                C139873) *
               C140010 +
           ((C265 * C5399 - C701 * C5275 - C265 * C5623 + C139835 * C5735) *
                C139983 +
            (C265 * C14869 - C701 * C14659 - C265 * C15299 + C139835 * C15502) *
                C139873) *
               C21777) *
              C5272) *
         C139792 * C139758) /
        (p * q * std::sqrt(p + q));
    d2eexx[9] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C5816 * C114 - C5817 * C108 - C5816 * C115 + C5811 * C126 +
             C5818 * C116 - C5819 * C109 - C5818 * C117 + C139736 * C127) *
                C139984 +
            (C15683 + C15684) * C139899) *
               C139983 +
           ((C6687 + C6688) * C139984 + (C10430 + C10429) * C139899) *
               C139873) *
              C139809 * C139792 * C97 -
          (((C5818 * C3446 - C5819 * C3440 - C5818 * C3447 + C139736 * C3452 +
             C5816 * C3444 - C5817 * C3439 - C5816 * C3445 + C5811 * C3451) *
                C139899 +
            (C6692 + C6691) * C139984) *
               C139873 +
           ((C15688 + C15687) * C139899 +
            (C5818 * C118 - C5819 * C110 - C5818 * C119 + C139736 * C128 +
             C5816 * C116 - C5817 * C109 - C5816 * C117 + C5811 * C127) *
                C139984) *
               C139983) *
              C139809 * C139792 * C98 +
          (((C5816 * C118 - C5817 * C110 - C5816 * C119 + C5811 * C128 +
             C5818 * C120 - C5819 * C111 - C5818 * C121 + C139736 * C129) *
                C139984 +
            (C5816 * C1574 - C5817 * C1568 - C5816 * C1575 + C5811 * C1583 +
             C5818 * C1572 - C5819 * C1567 - C5818 * C1573 + C139736 * C1582) *
                C139899) *
               C139983 +
           ((C5816 * C817 - C5817 * C811 - C5816 * C818 + C5811 * C826 +
             C5818 * C815 - C5819 * C810 - C5818 * C816 + C139736 * C825) *
                C139984 +
            (C5816 * C3446 - C5817 * C3440 - C5816 * C3447 + C5811 * C3452 +
             C5818 * C3448 - C5819 * C3441 - C5818 * C3449 + C139736 * C3453) *
                C139899) *
               C139873) *
              C139809 * C139792 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eexy[9] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139983 * C183 - C21860 * C108 + C139873 * C896 - C21861 * C813) *
                C5816 +
            (C139983 * C189 - C21860 * C115 + C139873 * C901 - C21861 * C822) *
                C5811 +
            (C21863 - C21864 + C21865 - C21866) * C5818 +
            (C21867 - C21868 + C21869 - C21870) * C139736) *
               C139984 +
           ((C139983 * C1653 - C21860 * C1570 + C139873 * C3520 -
             C21861 * C3438) *
                C5816 +
            (C139983 * C1658 - C21860 * C1579 + C139873 * C3524 -
             C21861 * C3443) *
                C5811 +
            (C23707 - C23706 + C23709 - C23708) * C5818 +
            (C23711 - C23710 + C23713 - C23712) * C139736) *
               C139899) *
              C139809 * C139792 * C97 +
          (((C21864 - C21863 + C21866 - C21865) * C5816 +
            (C21868 - C21867 + C21870 - C21869) * C5811 +
            (C21872 - C21871 + C21874 - C21873) * C5818 +
            (C21876 - C21875 + C21878 - C21877) * C139736) *
               C139984 +
           ((C23706 - C23707 + C23708 - C23709) * C5816 +
            (C23710 - C23711 + C23712 - C23713) * C5811 +
            (C23714 - C23715 + C23716 - C23717) * C5818 +
            (C23718 - C23719 + C23720 - C23721) * C139736) *
               C139899) *
              C139809 * C139792 * C98 +
          ((C21891 * C5816 + C21892 * C5811 +
            (C21880 - C21879 + C21882 - C21881) * C5818 +
            (C21884 - C21883 + C21886 - C21885) * C139736) *
               C139984 +
           ((C23715 - C23714 + C23717 - C23716) * C5816 +
            (C23719 - C23718 + C23721 - C23720) * C5811 +
            (C139983 * C1656 - C21860 * C1567 + C139873 * C3523 -
             C21861 * C3441) *
                C5818 +
            (C139983 * C1661 - C21860 * C1573 + C139873 * C3527 -
             C21861 * C3449) *
                C139736) *
               C139899) *
              C139809 * C139792 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eexz[9] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C139984 * C266 - C29624 * C108 + C139899 * C1741 -
                      C29625 * C1570) *
                         C5816 +
                     (C139984 * C272 - C29624 * C115 + C139899 * C1746 -
                      C29625 * C1579) *
                         C5811 +
                     (C29627 - C29628 + C29629 - C29630) * C5818 +
                     (C29631 - C29632 + C29633 - C29634) * C139736) *
                        C139983 +
                    ((C139984 * C984 - C29624 * C813 + C139899 * C3594 -
                      C29625 * C3438) *
                         C5816 +
                     (C139984 * C989 - C29624 * C822 + C139899 * C3598 -
                      C29625 * C3443) *
                         C5811 +
                     (C30472 - C30471 + C30474 - C30473) * C5818 +
                     (C30476 - C30475 + C30478 - C30477) * C139736) *
                        C139873) *
                       C139809 * C139792 * C97 +
                   (((C29628 - C29627 + C29630 - C29629) * C5816 +
                     (C29632 - C29631 + C29634 - C29633) * C5811 +
                     (C29636 - C29635 + C29638 - C29637) * C5818 +
                     (C29640 - C29639 + C29642 - C29641) * C139736) *
                        C139983 +
                    ((C30471 - C30472 + C30473 - C30474) * C5816 +
                     (C30475 - C30476 + C30477 - C30478) * C5811 +
                     (C30479 - C30480 + C30481 - C30482) * C5818 +
                     (C30483 - C30484 + C30485 - C30486) * C139736) *
                        C139873) *
                       C139809 * C139792 * C98 +
                   ((C29655 * C5816 + C29656 * C5811 +
                     (C29644 - C29643 + C29646 - C29645) * C5818 +
                     (C29648 - C29647 + C29650 - C29649) * C139736) *
                        C139983 +
                    ((C30480 - C30479 + C30482 - C30481) * C5816 +
                     (C30484 - C30483 + C30486 - C30485) * C5811 +
                     (C139984 * C987 - C29624 * C810 + C139899 * C3597 -
                      C29625 * C3441) *
                         C5818 +
                     (C139984 * C992 - C29624 * C816 + C139899 * C3601 -
                      C29625 * C3449) *
                         C139736) *
                        C139873) *
                       C139809 * C139792 * C99)) /
                 (p * q * std::sqrt(p + q));
    d2eeyx[9] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C5811 * C114 - C5816 * C108 + C139736 * C116 - C5818 * C109) *
                C21860 +
            (C5811 * C354 - C5816 * C348 + C139736 * C355 - C5818 * C349) *
                C139983 +
            (C7039 - C7040 + C7041 - C7042) * C21861 +
            (C7043 - C7044 + C7045 - C7046) * C139873) *
               C139984 +
           ((C16035 - C16036 + C16037 - C16038) * C21860 +
            (C16039 - C16040 + C16041 - C16042) * C139983 +
            (C10746 - C10745 + C10748 - C10747) * C21861 +
            (C10750 - C10749 + C10752 - C10751) * C139873) *
               C139899) *
              C139809 * C139792 * C97 +
          (((C5816 * C109 - C5811 * C116 + C5818 * C110 - C139736 * C118) *
                C21860 +
            (C5816 * C349 - C5811 * C355 + C5818 * C350 - C139736 * C356) *
                C139983 +
            (C7055 - C7056 + C7057 - C7058) * C21861 +
            (C7059 - C7060 + C7061 - C7062) * C139873) *
               C139984 +
           ((C16051 - C16052 + C16053 - C16054) * C21860 +
            (C16055 - C16056 + C16057 - C16058) * C139983 +
            (C5816 * C3439 - C5811 * C3444 + C5818 * C3440 - C139736 * C3446) *
                C21861 +
            (C5816 * C3669 - C5811 * C3673 + C5818 * C3670 - C139736 * C3674) *
                C139873) *
               C139899) *
              C139809 * C139792 * C98 +
          (((C5811 * C118 - C5816 * C110 + C139736 * C120 - C5818 * C111) *
                C21860 +
            (C5811 * C356 - C5816 * C350 + C139736 * C357 - C5818 * C351) *
                C139983 +
            (C5811 * C817 - C5816 * C811 + C139736 * C815 - C5818 * C810) *
                C21861 +
            (C5811 * C1079 - C5816 * C1074 + C139736 * C1080 - C5818 * C1075) *
                C139873) *
               C139984 +
           ((C5811 * C1574 - C5816 * C1568 + C139736 * C1572 - C5818 * C1567) *
                C21860 +
            (C5811 * C1836 - C5816 * C1831 + C139736 * C1837 - C5818 * C1832) *
                C139983 +
            (C5811 * C3446 - C5816 * C3440 + C139736 * C3448 - C5818 * C3441) *
                C21861 +
            (C5811 * C3674 - C5816 * C3670 + C139736 * C3675 - C5818 * C3671) *
                C139873) *
               C139899) *
              C139809 * C139792 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[9] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C21860 * C183 - C22116 * C108 - C21860 * C348 + C139983 * C411 +
             C21861 * C896 - C22117 * C813 - C21861 * C1072 + C139873 * C1151) *
                C5811 +
            (C22155 + C22156) * C139736) *
               C139984 +
           ((C21860 * C1653 - C22116 * C1570 - C21860 * C1829 +
             C139983 * C1908 + C21861 * C3520 - C22117 * C3438 -
             C21861 * C3668 + C139873 * C3742) *
                C5811 +
            (C24047 + C24046) * C139736) *
               C139899) *
              C139809 * C139792 * C97 -
          (((C24044 + C24045) * C139736 + (C24046 + C24047) * C5811) * C139899 +
           ((C22158 + C22157) * C139736 + (C22156 + C22155) * C5811) *
               C139984) *
              C139809 * C139792 * C98 +
          ((C22161 * C5811 + (C22160 + C22159) * C139736) * C139984 +
           ((C24045 + C24044) * C5811 +
            (C21860 * C1656 - C22116 * C1567 - C21860 * C1832 +
             C139983 * C1905 + C21861 * C3523 - C22117 * C3441 -
             C21861 * C3671 + C139873 * C3745) *
                C139736) *
               C139899) *
              C139809 * C139792 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[9] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C139984 * C266 - C29624 * C108 + C139899 * C1741 -
                      C29625 * C1570) *
                         C21860 +
                     (C139984 * C495 - C29624 * C348 + C139899 * C1997 -
                      C29625 * C1829) *
                         C139983 +
                     (C139984 * C984 - C29624 * C813 + C139899 * C3594 -
                      C29625 * C3438) *
                         C21861 +
                     (C139984 * C1240 - C29624 * C1072 + C139899 * C3812 -
                      C29625 * C3668) *
                         C139873) *
                        C5811 +
                    ((C29627 - C29628 + C29629 - C29630) * C21860 +
                     (C29879 - C29880 + C29881 - C29882) * C139983 +
                     (C30472 - C30471 + C30474 - C30473) * C21861 +
                     (C30789 - C30788 + C30791 - C30790) * C139873) *
                        C139736) *
                       C139809 * C139792 * C97 +
                   (((C29628 - C29627 + C29630 - C29629) * C21860 +
                     (C29880 - C29879 + C29882 - C29881) * C139983 +
                     (C30471 - C30472 + C30473 - C30474) * C21861 +
                     (C30788 - C30789 + C30790 - C30791) * C139873) *
                        C5811 +
                    ((C29636 - C29635 + C29638 - C29637) * C21860 +
                     (C29885 - C29884 + C29887 - C29886) * C139983 +
                     (C30479 - C30480 + C30481 - C30482) * C21861 +
                     (C30792 - C30793 + C30794 - C30795) * C139873) *
                        C139736) *
                       C139809 * C139792 * C98 +
                   ((C29655 * C21860 + C29894 * C139983 +
                     (C30480 - C30479 + C30482 - C30481) * C21861 +
                     (C30793 - C30792 + C30795 - C30794) * C139873) *
                        C5811 +
                    ((C29644 - C29643 + C29646 - C29645) * C21860 +
                     (C29889 - C29888 + C29891 - C29890) * C139983 +
                     (C139984 * C987 - C29624 * C810 + C139899 * C3597 -
                      C29625 * C3441) *
                         C21861 +
                     (C139984 * C1243 - C29624 * C1075 + C139899 * C3815 -
                      C29625 * C3671) *
                         C139873) *
                        C139736) *
                       C139809 * C139792 * C99)) /
                 (p * q * std::sqrt(p + q));
    d2eezx[9] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C5811 * C114 - C5816 * C108 + C139736 * C116 - C5818 * C109) *
                C29624 +
            (C5811 * C573 - C5816 * C567 + C139736 * C574 - C5818 * C568) *
                C139984 +
            (C16035 - C16036 + C16037 - C16038) * C29625 +
            (C16408 - C16409 + C16410 - C16411) * C139899) *
               C139983 +
           ((C7039 - C7040 + C7041 - C7042) * C29624 +
            (C7408 - C7409 + C7410 - C7411) * C139984 +
            (C10746 - C10745 + C10748 - C10747) * C29625 +
            (C11068 - C11067 + C11070 - C11069) * C139899) *
               C139873) *
              C139809 * C139792 * C97 +
          (((C5816 * C109 - C5811 * C116 + C5818 * C110 - C139736 * C118) *
                C29624 +
            (C5816 * C568 - C5811 * C574 + C5818 * C569 - C139736 * C575) *
                C139984 +
            (C16051 - C16052 + C16053 - C16054) * C29625 +
            (C16416 - C16417 + C16418 - C16419) * C139899) *
               C139983 +
           ((C7055 - C7056 + C7057 - C7058) * C29624 +
            (C7416 - C7417 + C7418 - C7419) * C139984 +
            (C5816 * C3439 - C5811 * C3444 + C5818 * C3440 - C139736 * C3446) *
                C29625 +
            (C5816 * C3883 - C5811 * C3887 + C5818 * C3884 - C139736 * C3888) *
                C139899) *
               C139873) *
              C139809 * C139792 * C98 +
          (((C5811 * C118 - C5816 * C110 + C139736 * C120 - C5818 * C111) *
                C29624 +
            (C5811 * C575 - C5816 * C569 + C139736 * C576 - C5818 * C570) *
                C139984 +
            (C5811 * C1574 - C5816 * C1568 + C139736 * C1572 - C5818 * C1567) *
                C29625 +
            (C5811 * C2081 - C5816 * C2076 + C139736 * C2082 - C5818 * C2077) *
                C139899) *
               C139983 +
           ((C5811 * C817 - C5816 * C811 + C139736 * C815 - C5818 * C810) *
                C29624 +
            (C5811 * C1324 - C5816 * C1319 + C139736 * C1325 - C5818 * C1320) *
                C139984 +
            (C5811 * C3446 - C5816 * C3440 + C139736 * C3448 - C5818 * C3441) *
                C29625 +
            (C5811 * C3888 - C5816 * C3884 + C139736 * C3889 - C5818 * C3885) *
                C139899) *
               C139873) *
              C139809 * C139792 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eezy[9] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139983 * C183 - C21860 * C108 + C139873 * C896 - C21861 * C813) *
                C29624 +
            (C139983 * C629 - C21860 * C567 + C139873 * C1393 -
             C21861 * C1317) *
                C139984 +
            (C139983 * C1653 - C21860 * C1570 + C139873 * C3520 -
             C21861 * C3438) *
                C29625 +
            (C139983 * C2150 - C21860 * C2074 + C139873 * C3956 -
             C21861 * C3882) *
                C139899) *
               C5811 +
           ((C21863 - C21864 + C21865 - C21866) * C29624 +
            (C22392 - C22393 + C22394 - C22395) * C139984 +
            (C23707 - C23706 + C23709 - C23708) * C29625 +
            (C24345 - C24344 + C24347 - C24346) * C139899) *
               C139736) *
              C139809 * C139792 * C97 +
          (((C21864 - C21863 + C21866 - C21865) * C29624 +
            (C22393 - C22392 + C22395 - C22394) * C139984 +
            (C23706 - C23707 + C23708 - C23709) * C29625 +
            (C24344 - C24345 + C24346 - C24347) * C139899) *
               C5811 +
           ((C21872 - C21871 + C21874 - C21873) * C29624 +
            (C22398 - C22397 + C22400 - C22399) * C139984 +
            (C23714 - C23715 + C23716 - C23717) * C29625 +
            (C24348 - C24349 + C24350 - C24351) * C139899) *
               C139736) *
              C139809 * C139792 * C98 +
          ((C21891 * C29624 + C22407 * C139984 +
            (C23715 - C23714 + C23717 - C23716) * C29625 +
            (C24349 - C24348 + C24351 - C24350) * C139899) *
               C5811 +
           ((C21880 - C21879 + C21882 - C21881) * C29624 +
            (C22402 - C22401 + C22404 - C22403) * C139984 +
            (C139983 * C1656 - C21860 * C1567 + C139873 * C3523 -
             C21861 * C3441) *
                C29625 +
            (C139983 * C2153 - C21860 * C2077 + C139873 * C3959 -
             C21861 * C3885) *
                C139899) *
               C139736) *
              C139809 * C139792 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eezz[9] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C29624 * C266 - C30126 * C108 - C29624 * C567 + C139984 * C702 +
             C29625 * C1741 - C30127 * C1570 - C29625 * C2074 +
             C139899 * C2230) *
                C139983 +
            (C29624 * C984 - C30126 * C813 - C29624 * C1317 + C139984 * C1473 +
             C29625 * C3594 - C30127 * C3438 - C29625 * C3882 +
             C139899 * C4026) *
                C139873) *
               C5811 +
           ((C30165 + C30166) * C139983 + (C31119 + C31118) * C139873) *
               C139736) *
              C139809 * C139792 * C97 -
          (((C31116 + C31117) * C139873 + (C30168 + C30167) * C139983) *
               C139736 +
           ((C31118 + C31119) * C139873 + (C30166 + C30165) * C139983) *
               C5811) *
              C139809 * C139792 * C98 +
          ((C30171 * C139983 + (C31117 + C31116) * C139873) * C5811 +
           ((C30170 + C30169) * C139983 +
            (C29624 * C987 - C30126 * C810 - C29624 * C1320 + C139984 * C1470 +
             C29625 * C3597 - C30127 * C3441 - C29625 * C3885 +
             C139899 * C4029) *
                C139873) *
               C139736) *
              C139809 * C139792 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eexx[10] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5816 * C114 - C5817 * C108 - C5816 * C115 + C5811 * C126 +
              C5818 * C116 - C5819 * C109 - C5818 * C117 + C139736 * C127) *
                 C139984 +
             (C15683 + C15684) * C139899) *
                C139983 +
            ((C6687 + C6688) * C139984 + (C10430 + C10429) * C139899) *
                C139873) *
               C139809 * C806 -
           (((C10427 + C10428) * C139899 + (C6690 + C6689) * C139984) *
                C139873 +
            ((C10429 + C10430) * C139899 + (C6688 + C6687) * C139984) *
                C139983) *
               C139809 * C140000) *
              C808 +
          ((((C6691 + C6692) * C139984 + (C38070 + C38071) * C139899) *
                C139983 +
            ((C6693 + C6694) * C139984 +
             (C5816 * C7756 - C5817 * C7753 - C5816 * C7757 + C5811 * C7762 +
              C5818 * C7760 - C5819 * C7755 - C5818 * C7761 + C139736 * C7764) *
                 C139899) *
                C139873) *
               C139809 * C140000 -
           (((C38071 + C38070) * C139899 + (C6692 + C6691) * C139984) *
                C139873 +
            ((C15688 + C15687) * C139899 +
             (C5818 * C118 - C5819 * C110 - C5818 * C119 + C139736 * C128 +
              C5816 * C116 - C5817 * C109 - C5816 * C117 + C5811 * C127) *
                 C139984) *
                C139983) *
               C139809 * C806) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexy[10] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139983 * C183 - C21860 * C108 + C139873 * C896 - C21861 * C813) *
                 C5816 +
             (C139983 * C189 - C21860 * C115 + C139873 * C901 - C21861 * C822) *
                 C5811 +
             (C21863 - C21864 + C21865 - C21866) * C5818 +
             (C21867 - C21868 + C21869 - C21870) * C139736) *
                C139984 +
            ((C139983 * C1653 - C21860 * C1570 + C139873 * C3520 -
              C21861 * C3438) *
                 C5816 +
             (C139983 * C1658 - C21860 * C1579 + C139873 * C3524 -
              C21861 * C3443) *
                 C5811 +
             (C23707 - C23706 + C23709 - C23708) * C5818 +
             (C23711 - C23710 + C23713 - C23712) * C139736) *
                C139899) *
               C139809 * C806 +
           (((C21860 * C813 - C139983 * C896 + C21861 * C2908 -
              C139873 * C2974) *
                 C5816 +
             (C21860 * C822 - C139983 * C901 + C21861 * C2913 -
              C139873 * C2978) *
                 C5811 +
             (C22729 - C22730 + C22731 - C22732) * C5818 +
             (C22733 - C22734 + C22735 - C22736) * C139736) *
                C139984 +
            ((C21860 * C3438 - C139983 * C3520 + C21861 * C7754 -
              C139873 * C7863) *
                 C5816 +
             (C21860 * C3443 - C139983 * C3524 + C21861 * C7759 -
              C139873 * C7866) *
                 C5811 +
             (C38202 - C38203 + C38204 - C38205) * C5818 +
             (C38206 - C38207 + C38208 - C38209) * C139736) *
                C139899) *
               C139809 * C140000) *
              C808 +
          ((((C21864 - C21863 + C21866 - C21865) * C5816 +
             (C21868 - C21867 + C21870 - C21869) * C5811 +
             (C21872 - C21871 + C21874 - C21873) * C5818 +
             (C21876 - C21875 + C21878 - C21877) * C139736) *
                C139984 +
            ((C23706 - C23707 + C23708 - C23709) * C5816 +
             (C23710 - C23711 + C23712 - C23713) * C5811 +
             (C23714 - C23715 + C23716 - C23717) * C5818 +
             (C23718 - C23719 + C23720 - C23721) * C139736) *
                C139899) *
               C139809 * C806 +
           (((C22730 - C22729 + C22732 - C22731) * C5816 +
             (C22734 - C22733 + C22736 - C22735) * C5811 +
             (C22738 - C22737 + C22740 - C22739) * C5818 +
             (C22742 - C22741 + C22744 - C22743) * C139736) *
                C139984 +
            ((C38203 - C38202 + C38205 - C38204) * C5816 +
             (C38207 - C38206 + C38209 - C38208) * C5811 +
             (C139983 * C3522 - C21860 * C3440 + C139873 * C7865 -
              C21861 * C7755) *
                 C5818 +
             (C139983 * C3526 - C21860 * C3447 + C139873 * C7868 -
              C21861 * C7761) *
                 C139736) *
                C139899) *
               C139809 * C140000) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexz[10] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C139984 * C266 - C29624 * C108 + C139899 * C1741 -
                        C29625 * C1570) *
                           C5816 +
                       (C139984 * C272 - C29624 * C115 + C139899 * C1746 -
                        C29625 * C1579) *
                           C5811 +
                       (C29627 - C29628 + C29629 - C29630) * C5818 +
                       (C29631 - C29632 + C29633 - C29634) * C139736) *
                          C139983 +
                      ((C38340 - C38341 + C38342 - C38343) * C5816 +
                       (C38344 - C38345 + C38346 - C38347) * C5811 +
                       C38364 * C5818 + C38365 * C139736) *
                          C139873) *
                         C139809 * C806 +
                     (((C38341 - C38340 + C38343 - C38342) * C5816 +
                       (C38345 - C38344 + C38347 - C38346) * C5811 +
                       C38366 * C5818 + C38367 * C139736) *
                          C139983 +
                      ((C29624 * C2908 - C139984 * C3032 + C29625 * C7754 -
                        C139899 * C7979) *
                           C5816 +
                       (C29624 * C2913 - C139984 * C3036 + C29625 * C7759 -
                        C139899 * C7982) *
                           C5811 +
                       (C38356 - C38357 + C38358 - C38359) * C5818 +
                       (C38360 - C38361 + C38362 - C38363) * C139736) *
                          C139873) *
                         C139809 * C140000) *
                        C808 +
                    ((((C29628 - C29627 + C29630 - C29629) * C5816 +
                       (C29632 - C29631 + C29634 - C29633) * C5811 +
                       (C29636 - C29635 + C29638 - C29637) * C5818 +
                       (C29640 - C29639 + C29642 - C29641) * C139736) *
                          C139983 +
                      (C38366 * C5816 + C38367 * C5811 +
                       (C30479 - C30480 + C30481 - C30482) * C5818 +
                       (C30483 - C30484 + C30485 - C30486) * C139736) *
                          C139873) *
                         C139809 * C806 +
                     ((C38364 * C5816 + C38365 * C5811 +
                       (C30480 - C30479 + C30482 - C30481) * C5818 +
                       (C30484 - C30483 + C30486 - C30485) * C139736) *
                          C139983 +
                      ((C38357 - C38356 + C38359 - C38358) * C5816 +
                       (C38361 - C38360 + C38363 - C38362) * C5811 +
                       (C139984 * C3034 - C29624 * C2910 + C139899 * C7981 -
                        C29625 * C7755) *
                           C5818 +
                       (C139984 * C3038 - C29624 * C2917 + C139899 * C7984 -
                        C29625 * C7761) *
                           C139736) *
                          C139873) *
                         C139809 * C140000) *
                        C139998)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[10] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5811 * C114 - C5816 * C108 + C139736 * C116 - C5818 * C109) *
                 C21860 +
             (C5811 * C354 - C5816 * C348 + C139736 * C355 - C5818 * C349) *
                 C139983 +
             (C7039 - C7040 + C7041 - C7042) * C21861 +
             (C7043 - C7044 + C7045 - C7046) * C139873) *
                C139984 +
            ((C16035 - C16036 + C16037 - C16038) * C21860 +
             (C16039 - C16040 + C16041 - C16042) * C139983 +
             (C10746 - C10745 + C10748 - C10747) * C21861 +
             (C10750 - C10749 + C10752 - C10751) * C139873) *
                C139899) *
               C139809 * C806 +
           (((C7040 - C7039 + C7042 - C7041) * C21860 +
             (C7044 - C7043 + C7046 - C7045) * C139983 +
             (C7048 - C7047 + C7050 - C7049) * C21861 +
             (C7052 - C7051 + C7054 - C7053) * C139873) *
                C139984 +
            ((C10745 - C10746 + C10747 - C10748) * C21860 +
             (C10749 - C10750 + C10751 - C10752) * C139983 +
             (C10753 - C10754 + C10755 - C10756) * C21861 +
             (C10757 - C10758 + C10759 - C10760) * C139873) *
                C139899) *
               C139809 * C140000) *
              C808 +
          ((((C5816 * C109 - C5811 * C116 + C5818 * C110 - C139736 * C118) *
                 C21860 +
             (C5816 * C349 - C5811 * C355 + C5818 * C350 - C139736 * C356) *
                 C139983 +
             (C7055 - C7056 + C7057 - C7058) * C21861 +
             (C7059 - C7060 + C7061 - C7062) * C139873) *
                C139984 +
            ((C16051 - C16052 + C16053 - C16054) * C21860 +
             (C16055 - C16056 + C16057 - C16058) * C139983 +
             (C38498 - C38499 + C38500 - C38501) * C21861 +
             (C38502 - C38503 + C38504 - C38505) * C139873) *
                C139899) *
               C139809 * C806 +
           (((C7056 - C7055 + C7058 - C7057) * C21860 +
             (C7060 - C7059 + C7062 - C7061) * C139983 +
             (C7064 - C7063 + C7066 - C7065) * C21861 +
             (C7068 - C7067 + C7070 - C7069) * C139873) *
                C139984 +
            ((C38499 - C38498 + C38501 - C38500) * C21860 +
             (C38503 - C38502 + C38505 - C38504) * C139983 +
             (C5811 * C7756 - C5816 * C7753 + C139736 * C7760 - C5818 * C7755) *
                 C21861 +
             (C5811 * C8095 - C5816 * C8092 + C139736 * C8096 - C5818 * C8093) *
                 C139873) *
                C139899) *
               C139809 * C140000) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[10] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C21860 * C183 - C22116 * C108 - C21860 * C348 + C139983 * C411 +
              C21861 * C896 - C22117 * C813 - C21861 * C1072 +
              C139873 * C1151) *
                 C5811 +
             (C22155 + C22156) * C139736) *
                C139984 +
            ((C21860 * C1653 - C22116 * C1570 - C21860 * C1829 +
              C139983 * C1908 + C21861 * C3520 - C22117 * C3438 -
              C21861 * C3668 + C139873 * C3742) *
                 C5811 +
             (C24047 + C24046) * C139736) *
                C139899) *
               C139809 * C806 -
           (((C38648 + C38649) * C139736 +
             (C21861 * C7863 - C22117 * C7754 - C21861 * C8091 +
              C139873 * C8196 + C21860 * C3520 - C22116 * C3438 -
              C21860 * C3668 + C139983 * C3742) *
                 C5811) *
                C139899 +
            ((C23091 + C23092) * C139736 +
             (C21861 * C2974 - C22117 * C2908 - C21861 * C3090 +
              C139873 * C3148 + C21860 * C896 - C22116 * C813 - C21860 * C1072 +
              C139983 * C1151) *
                 C5811) *
                C139984) *
               C139809 * C140000) *
              C808 +
          ((((C23092 + C23091) * C5811 + (C23090 + C23089) * C139736) *
                C139984 +
            ((C38649 + C38648) * C5811 +
             (C21860 * C3522 - C22116 * C3440 - C21860 * C3670 +
              C139983 * C3744 + C21861 * C7865 - C22117 * C7755 -
              C21861 * C8093 + C139873 * C8197) *
                 C139736) *
                C139899) *
               C139809 * C140000 -
           (((C24044 + C24045) * C139736 + (C24046 + C24047) * C5811) *
                C139899 +
            ((C22158 + C22157) * C139736 + (C22156 + C22155) * C5811) *
                C139984) *
               C139809 * C806) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[10] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C139984 * C266 - C29624 * C108 + C139899 * C1741 -
                        C29625 * C1570) *
                           C21860 +
                       (C139984 * C495 - C29624 * C348 + C139899 * C1997 -
                        C29625 * C1829) *
                           C139983 +
                       (C38340 - C38341 + C38342 - C38343) * C21861 +
                       (C38780 - C38781 + C38782 - C38783) * C139873) *
                          C5811 +
                      ((C29627 - C29628 + C29629 - C29630) * C21860 +
                       (C29879 - C29880 + C29881 - C29882) * C139983 +
                       C38364 * C21861 + C38792 * C139873) *
                          C139736) *
                         C139809 * C806 +
                     (((C38341 - C38340 + C38343 - C38342) * C21860 +
                       (C38781 - C38780 + C38783 - C38782) * C139983 +
                       (C29624 * C2908 - C139984 * C3032 + C29625 * C7754 -
                        C139899 * C7979) *
                           C21861 +
                       (C29624 * C3090 - C139984 * C3202 + C29625 * C8091 -
                        C139899 * C8317) *
                           C139873) *
                          C5811 +
                      (C38366 * C21860 + C38793 * C139983 +
                       (C38356 - C38357 + C38358 - C38359) * C21861 +
                       (C38788 - C38789 + C38790 - C38791) * C139873) *
                          C139736) *
                         C139809 * C140000) *
                        C808 +
                    ((((C29628 - C29627 + C29630 - C29629) * C21860 +
                       (C29880 - C29879 + C29882 - C29881) * C139983 +
                       C38366 * C21861 + C38793 * C139873) *
                          C5811 +
                      ((C29636 - C29635 + C29638 - C29637) * C21860 +
                       (C29885 - C29884 + C29887 - C29886) * C139983 +
                       (C30479 - C30480 + C30481 - C30482) * C21861 +
                       (C30792 - C30793 + C30794 - C30795) * C139873) *
                          C139736) *
                         C139809 * C806 +
                     ((C38364 * C21860 + C38792 * C139983 +
                       (C38357 - C38356 + C38359 - C38358) * C21861 +
                       (C38789 - C38788 + C38791 - C38790) * C139873) *
                          C5811 +
                      ((C30480 - C30479 + C30482 - C30481) * C21860 +
                       (C30793 - C30792 + C30795 - C30794) * C139983 +
                       (C139984 * C3034 - C29624 * C2910 + C139899 * C7981 -
                        C29625 * C7755) *
                           C21861 +
                       (C139984 * C3204 - C29624 * C3092 + C139899 * C8319 -
                        C29625 * C8093) *
                           C139873) *
                          C139736) *
                         C139809 * C140000) *
                        C139998)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[10] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5811 * C114 - C5816 * C108 + C139736 * C116 - C5818 * C109) *
                 C29624 +
             (C5811 * C573 - C5816 * C567 + C139736 * C574 - C5818 * C568) *
                 C139984 +
             (C16035 - C16036 + C16037 - C16038) * C29625 +
             (C16408 - C16409 + C16410 - C16411) * C139899) *
                C139983 +
            ((C7039 - C7040 + C7041 - C7042) * C29624 +
             (C7408 - C7409 + C7410 - C7411) * C139984 +
             (C10746 - C10745 + C10748 - C10747) * C29625 +
             (C11068 - C11067 + C11070 - C11069) * C139899) *
                C139873) *
               C139809 * C806 +
           (((C7040 - C7039 + C7042 - C7041) * C29624 +
             (C7409 - C7408 + C7411 - C7410) * C139984 +
             (C10745 - C10746 + C10747 - C10748) * C29625 +
             (C11067 - C11068 + C11069 - C11070) * C139899) *
                C139983 +
            ((C7048 - C7047 + C7050 - C7049) * C29624 +
             (C7413 - C7412 + C7415 - C7414) * C139984 +
             (C10753 - C10754 + C10755 - C10756) * C29625 +
             (C11071 - C11072 + C11073 - C11074) * C139899) *
                C139873) *
               C139809 * C140000) *
              C808 +
          ((((C5816 * C109 - C5811 * C116 + C5818 * C110 - C139736 * C118) *
                 C29624 +
             (C5816 * C568 - C5811 * C574 + C5818 * C569 - C139736 * C575) *
                 C139984 +
             (C16051 - C16052 + C16053 - C16054) * C29625 +
             (C16416 - C16417 + C16418 - C16419) * C139899) *
                C139983 +
            ((C7055 - C7056 + C7057 - C7058) * C29624 +
             (C7416 - C7417 + C7418 - C7419) * C139984 +
             (C38498 - C38499 + C38500 - C38501) * C29625 +
             (C38924 - C38925 + C38926 - C38927) * C139899) *
                C139873) *
               C139809 * C806 +
           (((C7056 - C7055 + C7058 - C7057) * C29624 +
             (C7417 - C7416 + C7419 - C7418) * C139984 +
             (C38499 - C38498 + C38501 - C38500) * C29625 +
             (C38925 - C38924 + C38927 - C38926) * C139899) *
                C139983 +
            ((C7064 - C7063 + C7066 - C7065) * C29624 +
             (C7421 - C7420 + C7423 - C7422) * C139984 +
             (C5811 * C7756 - C5816 * C7753 + C139736 * C7760 - C5818 * C7755) *
                 C29625 +
             (C5811 * C8426 - C5816 * C8423 + C139736 * C8427 - C5818 * C8424) *
                 C139899) *
                C139873) *
               C139809 * C140000) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eezy[10] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139983 * C183 - C21860 * C108 + C139873 * C896 - C21861 * C813) *
                 C29624 +
             (C139983 * C629 - C21860 * C567 + C139873 * C1393 -
              C21861 * C1317) *
                 C139984 +
             (C139983 * C1653 - C21860 * C1570 + C139873 * C3520 -
              C21861 * C3438) *
                 C29625 +
             (C139983 * C2150 - C21860 * C2074 + C139873 * C3956 -
              C21861 * C3882) *
                 C139899) *
                C5811 +
            ((C21863 - C21864 + C21865 - C21866) * C29624 +
             (C22392 - C22393 + C22394 - C22395) * C139984 +
             (C23707 - C23706 + C23709 - C23708) * C29625 +
             (C24345 - C24344 + C24347 - C24346) * C139899) *
                C139736) *
               C139809 * C806 +
           (((C21860 * C813 - C139983 * C896 + C21861 * C2908 -
              C139873 * C2974) *
                 C29624 +
             (C21860 * C1317 - C139983 * C1393 + C21861 * C3256 -
              C139873 * C3314) *
                 C139984 +
             (C21860 * C3438 - C139983 * C3520 + C21861 * C7754 -
              C139873 * C7863) *
                 C29625 +
             (C21860 * C3882 - C139983 * C3956 + C21861 * C8422 -
              C139873 * C8526) *
                 C139899) *
                C5811 +
            ((C22729 - C22730 + C22731 - C22732) * C29624 +
             (C23400 - C23401 + C23402 - C23403) * C139984 +
             (C38202 - C38203 + C38204 - C38205) * C29625 +
             (C39058 - C39059 + C39060 - C39061) * C139899) *
                C139736) *
               C139809 * C140000) *
              C808 +
          ((((C21864 - C21863 + C21866 - C21865) * C29624 +
             (C22393 - C22392 + C22395 - C22394) * C139984 +
             (C23706 - C23707 + C23708 - C23709) * C29625 +
             (C24344 - C24345 + C24346 - C24347) * C139899) *
                C5811 +
            ((C21872 - C21871 + C21874 - C21873) * C29624 +
             (C22398 - C22397 + C22400 - C22399) * C139984 +
             (C23714 - C23715 + C23716 - C23717) * C29625 +
             (C24348 - C24349 + C24350 - C24351) * C139899) *
                C139736) *
               C139809 * C806 +
           (((C22730 - C22729 + C22732 - C22731) * C29624 +
             (C23401 - C23400 + C23403 - C23402) * C139984 +
             (C38203 - C38202 + C38205 - C38204) * C29625 +
             (C39059 - C39058 + C39061 - C39060) * C139899) *
                C5811 +
            ((C22738 - C22737 + C22740 - C22739) * C29624 +
             (C23405 - C23404 + C23407 - C23406) * C139984 +
             (C139983 * C3522 - C21860 * C3440 + C139873 * C7865 -
              C21861 * C7755) *
                 C29625 +
             (C139983 * C3958 - C21860 * C3884 + C139873 * C8528 -
              C21861 * C8424) *
                 C139899) *
                C139736) *
               C139809 * C140000) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eezz[10] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C29624 * C266 - C30126 * C108 - C29624 * C567 + C139984 * C702 +
              C29625 * C1741 - C30127 * C1570 - C29625 * C2074 +
              C139899 * C2230) *
                 C139983 +
             (C39218 + C39219) * C139873) *
                C5811 +
            ((C30165 + C30166) * C139983 + C39200 * C139873) * C139736) *
               C139809 * C806 -
           (((C39220 + C39221) * C139873 + C39209 * C139983) * C139736 +
            ((C29625 * C7979 - C30127 * C7754 - C29625 * C8422 +
              C139899 * C8634 + C29624 * C3032 - C30126 * C2908 -
              C29624 * C3256 + C139984 * C3368) *
                 C139873 +
             (C39219 + C39218) * C139983) *
                C5811) *
               C139809 * C140000) *
              C808 +
          (((C39200 * C139983 + (C39221 + C39220) * C139873) * C5811 +
            ((C31117 + C31116) * C139983 +
             (C29624 * C3034 - C30126 * C2910 - C29624 * C3258 +
              C139984 * C3370 + C29625 * C7981 - C30127 * C7755 -
              C29625 * C8424 + C139899 * C8635) *
                 C139873) *
                C139736) *
               C139809 * C140000 -
           (((C31116 + C31117) * C139873 + (C30168 + C30167) * C139983) *
                C139736 +
            (C39209 * C139873 + (C30166 + C30165) * C139983) * C5811) *
               C139809 * C806) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexx[11] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5816 * C114 - C5817 * C108 - C5816 * C115 + C5811 * C126 +
              C5818 * C116 - C5819 * C109 - C5818 * C117 + C139736 * C127) *
                 C139984 +
             (C15683 + C15684) * C139899) *
                C139983 +
            ((C6687 + C6688) * C139984 + (C10430 + C10429) * C139899) *
                C139873) *
               C1565 -
           (((C18324 + C18323) * C139899 + (C10429 + C10430) * C139984) *
                C139873 +
            ((C15686 + C15685) * C139899 + (C15684 + C15683) * C139984) *
                C139983) *
               C140002) *
              C139792 * C808 +
          ((((C15687 + C15688) * C139984 + (C15689 + C15690) * C139899) *
                C139983 +
            ((C38070 + C38071) * C139984 +
             (C5816 * C13132 - C5817 * C13127 - C5816 * C13133 +
              C5811 * C13139 + C5818 * C14660 - C5819 * C14659 -
              C5818 * C14661 + C139736 * C14662) *
                 C139899) *
                C139873) *
               C140002 -
           (((C38071 + C38070) * C139899 + (C6692 + C6691) * C139984) *
                C139873 +
            ((C15688 + C15687) * C139899 +
             (C5818 * C118 - C5819 * C110 - C5818 * C119 + C139736 * C128 +
              C5816 * C116 - C5817 * C109 - C5816 * C117 + C5811 * C127) *
                 C139984) *
                C139983) *
               C1565) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexy[11] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139983 * C183 - C21860 * C108 + C139873 * C896 - C21861 * C813) *
                 C5816 +
             (C139983 * C189 - C21860 * C115 + C139873 * C901 - C21861 * C822) *
                 C5811 +
             (C21863 - C21864 + C21865 - C21866) * C5818 +
             (C21867 - C21868 + C21869 - C21870) * C139736) *
                C139984 +
            ((C39482 - C39483 + C39484 - C39485) * C5816 +
             (C39486 - C39487 + C39488 - C39489) * C5811 + C39506 * C5818 +
             C39507 * C139736) *
                C139899) *
               C1565 +
           (((C39483 - C39482 + C39485 - C39484) * C5816 +
             (C39487 - C39486 + C39489 - C39488) * C5811 + C39508 * C5818 +
             C39509 * C139736) *
                C139984 +
            ((C21860 * C5273 - C139983 * C5339 + C21861 * C13126 -
              C139873 * C13216) *
                 C5816 +
             (C21860 * C5278 - C139983 * C5343 + C21861 * C13131 -
              C139873 * C13220) *
                 C5811 +
             (C39498 - C39499 + C39500 - C39501) * C5818 +
             (C39502 - C39503 + C39504 - C39505) * C139736) *
                C139899) *
               C140002) *
              C139792 * C808 +
          ((((C21864 - C21863 + C21866 - C21865) * C5816 +
             (C21868 - C21867 + C21870 - C21869) * C5811 +
             (C21872 - C21871 + C21874 - C21873) * C5818 +
             (C21876 - C21875 + C21878 - C21877) * C139736) *
                C139984 +
            (C39508 * C5816 + C39509 * C5811 +
             (C23714 - C23715 + C23716 - C23717) * C5818 +
             (C23718 - C23719 + C23720 - C23721) * C139736) *
                C139899) *
               C1565 +
           ((C39506 * C5816 + C39507 * C5811 +
             (C23715 - C23714 + C23717 - C23716) * C5818 +
             (C23719 - C23718 + C23721 - C23720) * C139736) *
                C139984 +
            ((C39499 - C39498 + C39501 - C39500) * C5816 +
             (C39503 - C39502 + C39505 - C39504) * C5811 +
             (C139983 * C5341 - C21860 * C5275 + C139873 * C14761 -
              C21861 * C14659) *
                 C5818 +
             (C139983 * C5345 - C21860 * C5282 + C139873 * C14762 -
              C21861 * C14661) *
                 C139736) *
                C139899) *
               C140002) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexz[11] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C139984 * C266 - C29624 * C108 + C139899 * C1741 -
                        C29625 * C1570) *
                           C5816 +
                       (C139984 * C272 - C29624 * C115 + C139899 * C1746 -
                        C29625 * C1579) *
                           C5811 +
                       (C29627 - C29628 + C29629 - C29630) * C5818 +
                       (C29631 - C29632 + C29633 - C29634) * C139736) *
                          C139983 +
                      ((C38340 - C38341 + C38342 - C38343) * C5816 +
                       (C38344 - C38345 + C38346 - C38347) * C5811 +
                       C38364 * C5818 + C38365 * C139736) *
                          C139873) *
                         C1565 +
                     (((C29624 * C1570 - C139984 * C1741 + C29625 * C5273 -
                        C139899 * C5397) *
                           C5816 +
                       (C29624 * C1579 - C139984 * C1746 + C29625 * C5278 -
                        C139899 * C5401) *
                           C5811 +
                       (C31458 - C31459 + C31460 - C31461) * C5818 +
                       (C31462 - C31463 + C31464 - C31465) * C139736) *
                          C139983 +
                      ((C29624 * C3438 - C139984 * C3594 + C29625 * C13126 -
                        C139899 * C13298) *
                           C5816 +
                       (C29624 * C3443 - C139984 * C3598 + C29625 * C13131 -
                        C139899 * C13302) *
                           C5811 +
                       (C39640 - C39641 + C39642 - C39643) * C5818 +
                       (C39644 - C39645 + C39646 - C39647) * C139736) *
                          C139873) *
                         C140002) *
                        C139792 * C808 +
                    ((((C29628 - C29627 + C29630 - C29629) * C5816 +
                       (C29632 - C29631 + C29634 - C29633) * C5811 +
                       (C29636 - C29635 + C29638 - C29637) * C5818 +
                       (C29640 - C29639 + C29642 - C29641) * C139736) *
                          C139983 +
                      (C38366 * C5816 + C38367 * C5811 +
                       (C30479 - C30480 + C30481 - C30482) * C5818 +
                       (C30483 - C30484 + C30485 - C30486) * C139736) *
                          C139873) *
                         C1565 +
                     (((C31459 - C31458 + C31461 - C31460) * C5816 +
                       (C31463 - C31462 + C31465 - C31464) * C5811 +
                       (C31467 - C31466 + C31469 - C31468) * C5818 +
                       (C31471 - C31470 + C31473 - C31472) * C139736) *
                          C139983 +
                      ((C39641 - C39640 + C39643 - C39642) * C5816 +
                       (C39645 - C39644 + C39647 - C39646) * C5811 +
                       (C139984 * C3596 - C29624 * C3440 + C139899 * C14869 -
                        C29625 * C14659) *
                           C5818 +
                       (C139984 * C3600 - C29624 * C3447 + C139899 * C14870 -
                        C29625 * C14661) *
                           C139736) *
                          C139873) *
                         C140002) *
                        C139792 * C139998)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[11] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5811 * C114 - C5816 * C108 + C139736 * C116 - C5818 * C109) *
                 C21860 +
             (C5811 * C354 - C5816 * C348 + C139736 * C355 - C5818 * C349) *
                 C139983 +
             (C7039 - C7040 + C7041 - C7042) * C21861 +
             (C7043 - C7044 + C7045 - C7046) * C139873) *
                C139984 +
            ((C16035 - C16036 + C16037 - C16038) * C21860 +
             (C16039 - C16040 + C16041 - C16042) * C139983 +
             (C10746 - C10745 + C10748 - C10747) * C21861 +
             (C10750 - C10749 + C10752 - C10751) * C139873) *
                C139899) *
               C1565 +
           (((C16036 - C16035 + C16038 - C16037) * C21860 +
             (C16040 - C16039 + C16042 - C16041) * C139983 +
             (C10745 - C10746 + C10747 - C10748) * C21861 +
             (C10749 - C10750 + C10751 - C10752) * C139873) *
                C139984 +
            ((C16044 - C16043 + C16046 - C16045) * C21860 +
             (C16048 - C16047 + C16050 - C16049) * C139983 +
             (C18639 - C18640 + C18641 - C18642) * C21861 +
             (C18643 - C18644 + C18645 - C18646) * C139873) *
                C139899) *
               C140002) *
              C139792 * C808 +
          ((((C5816 * C109 - C5811 * C116 + C5818 * C110 - C139736 * C118) *
                 C21860 +
             (C5816 * C349 - C5811 * C355 + C5818 * C350 - C139736 * C356) *
                 C139983 +
             (C7055 - C7056 + C7057 - C7058) * C21861 +
             (C7059 - C7060 + C7061 - C7062) * C139873) *
                C139984 +
            ((C16051 - C16052 + C16053 - C16054) * C21860 +
             (C16055 - C16056 + C16057 - C16058) * C139983 +
             (C38498 - C38499 + C38500 - C38501) * C21861 +
             (C38502 - C38503 + C38504 - C38505) * C139873) *
                C139899) *
               C1565 +
           (((C16052 - C16051 + C16054 - C16053) * C21860 +
             (C16056 - C16055 + C16058 - C16057) * C139983 +
             (C38499 - C38498 + C38501 - C38500) * C21861 +
             (C38503 - C38502 + C38505 - C38504) * C139873) *
                C139984 +
            ((C16060 - C16059 + C16062 - C16061) * C21860 +
             (C16064 - C16063 + C16066 - C16065) * C139983 +
             (C5811 * C13132 - C5816 * C13127 + C139736 * C14660 -
              C5818 * C14659) *
                 C21861 +
             (C5811 * C13385 - C5816 * C13381 + C139736 * C14982 -
              C5818 * C14981) *
                 C139873) *
                C139899) *
               C140002) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[11] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C21860 * C183 - C22116 * C108 - C21860 * C348 + C139983 * C411 +
              C21861 * C896 - C22117 * C813 - C21861 * C1072 +
              C139873 * C1151) *
                 C5811 +
             (C22155 + C22156) * C139736) *
                C139984 +
            ((C39934 + C39935) * C5811 + C39916 * C139736) * C139899) *
               C1565 -
           (((C39936 + C39937) * C139736 +
             (C21861 * C13216 - C22117 * C13126 - C21861 * C13380 +
              C139873 * C13462 + C21860 * C5339 - C22116 * C5273 -
              C21860 * C5455 + C139983 * C5513) *
                 C5811) *
                C139899 +
            (C39925 * C139736 + (C39935 + C39934) * C5811) * C139984) *
               C140002) *
              C139792 * C808 +
          (((C39916 * C5811 + (C24045 + C24044) * C139736) * C139984 +
            ((C39937 + C39936) * C5811 +
             (C21860 * C5341 - C22116 * C5275 - C21860 * C5457 +
              C139983 * C5515 + C21861 * C14761 - C22117 * C14659 -
              C21861 * C14981 + C139873 * C15081) *
                 C139736) *
                C139899) *
               C140002 -
           (((C24044 + C24045) * C139736 + C39925 * C5811) * C139899 +
            ((C22158 + C22157) * C139736 + (C22156 + C22155) * C5811) *
                C139984) *
               C1565) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[11] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C139984 * C266 - C29624 * C108 + C139899 * C1741 -
                        C29625 * C1570) *
                           C21860 +
                       (C139984 * C495 - C29624 * C348 + C139899 * C1997 -
                        C29625 * C1829) *
                           C139983 +
                       (C38340 - C38341 + C38342 - C38343) * C21861 +
                       (C38780 - C38781 + C38782 - C38783) * C139873) *
                          C5811 +
                      ((C29627 - C29628 + C29629 - C29630) * C21860 +
                       (C29879 - C29880 + C29881 - C29882) * C139983 +
                       C38364 * C21861 + C38792 * C139873) *
                          C139736) *
                         C1565 +
                     (((C29624 * C1570 - C139984 * C1741 + C29625 * C5273 -
                        C139899 * C5397) *
                           C21860 +
                       (C29624 * C1829 - C139984 * C1997 + C29625 * C5455 -
                        C139899 * C5567) *
                           C139983 +
                       (C29624 * C3438 - C139984 * C3594 + C29625 * C13126 -
                        C139899 * C13298) *
                           C21861 +
                       (C29624 * C3668 - C139984 * C3812 + C29625 * C13380 -
                        C139899 * C13540) *
                           C139873) *
                          C5811 +
                      ((C31458 - C31459 + C31460 - C31461) * C21860 +
                       (C31798 - C31799 + C31800 - C31801) * C139983 +
                       (C39640 - C39641 + C39642 - C39643) * C21861 +
                       (C40068 - C40069 + C40070 - C40071) * C139873) *
                          C139736) *
                         C140002) *
                        C139792 * C808 +
                    ((((C29628 - C29627 + C29630 - C29629) * C21860 +
                       (C29880 - C29879 + C29882 - C29881) * C139983 +
                       C38366 * C21861 + C38793 * C139873) *
                          C5811 +
                      ((C29636 - C29635 + C29638 - C29637) * C21860 +
                       (C29885 - C29884 + C29887 - C29886) * C139983 +
                       (C30479 - C30480 + C30481 - C30482) * C21861 +
                       (C30792 - C30793 + C30794 - C30795) * C139873) *
                          C139736) *
                         C1565 +
                     (((C31459 - C31458 + C31461 - C31460) * C21860 +
                       (C31799 - C31798 + C31801 - C31800) * C139983 +
                       (C39641 - C39640 + C39643 - C39642) * C21861 +
                       (C40069 - C40068 + C40071 - C40070) * C139873) *
                          C5811 +
                      ((C31467 - C31466 + C31469 - C31468) * C21860 +
                       (C31803 - C31802 + C31805 - C31804) * C139983 +
                       (C139984 * C3596 - C29624 * C3440 + C139899 * C14869 -
                        C29625 * C14659) *
                           C21861 +
                       (C139984 * C3814 - C29624 * C3670 + C139899 * C15194 -
                        C29625 * C14981) *
                           C139873) *
                          C139736) *
                         C140002) *
                        C139792 * C139998)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[11] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5811 * C114 - C5816 * C108 + C139736 * C116 - C5818 * C109) *
                 C29624 +
             (C5811 * C573 - C5816 * C567 + C139736 * C574 - C5818 * C568) *
                 C139984 +
             (C16035 - C16036 + C16037 - C16038) * C29625 +
             (C16408 - C16409 + C16410 - C16411) * C139899) *
                C139983 +
            ((C7039 - C7040 + C7041 - C7042) * C29624 +
             (C7408 - C7409 + C7410 - C7411) * C139984 +
             (C10746 - C10745 + C10748 - C10747) * C29625 +
             (C11068 - C11067 + C11070 - C11069) * C139899) *
                C139873) *
               C1565 +
           (((C16036 - C16035 + C16038 - C16037) * C29624 +
             (C16409 - C16408 + C16411 - C16410) * C139984 +
             (C16044 - C16043 + C16046 - C16045) * C29625 +
             (C16413 - C16412 + C16415 - C16414) * C139899) *
                C139983 +
            ((C10745 - C10746 + C10747 - C10748) * C29624 +
             (C11067 - C11068 + C11069 - C11070) * C139984 +
             (C18639 - C18640 + C18641 - C18642) * C29625 +
             (C18967 - C18968 + C18969 - C18970) * C139899) *
                C139873) *
               C140002) *
              C139792 * C808 +
          ((((C5816 * C109 - C5811 * C116 + C5818 * C110 - C139736 * C118) *
                 C29624 +
             (C5816 * C568 - C5811 * C574 + C5818 * C569 - C139736 * C575) *
                 C139984 +
             (C16051 - C16052 + C16053 - C16054) * C29625 +
             (C16416 - C16417 + C16418 - C16419) * C139899) *
                C139983 +
            ((C7055 - C7056 + C7057 - C7058) * C29624 +
             (C7416 - C7417 + C7418 - C7419) * C139984 +
             (C38498 - C38499 + C38500 - C38501) * C29625 +
             (C38924 - C38925 + C38926 - C38927) * C139899) *
                C139873) *
               C1565 +
           (((C16052 - C16051 + C16054 - C16053) * C29624 +
             (C16417 - C16416 + C16419 - C16418) * C139984 +
             (C16060 - C16059 + C16062 - C16061) * C29625 +
             (C16421 - C16420 + C16423 - C16422) * C139899) *
                C139983 +
            ((C38499 - C38498 + C38501 - C38500) * C29624 +
             (C38925 - C38924 + C38927 - C38926) * C139984 +
             (C5811 * C13132 - C5816 * C13127 + C139736 * C14660 -
              C5818 * C14659) *
                 C29625 +
             (C5811 * C13623 - C5816 * C13619 + C139736 * C15300 -
              C5818 * C15299) *
                 C139899) *
                C139873) *
               C140002) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eezy[11] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139983 * C183 - C21860 * C108 + C139873 * C896 - C21861 * C813) *
                 C29624 +
             (C139983 * C629 - C21860 * C567 + C139873 * C1393 -
              C21861 * C1317) *
                 C139984 +
             (C39482 - C39483 + C39484 - C39485) * C29625 +
             (C40332 - C40333 + C40334 - C40335) * C139899) *
                C5811 +
            ((C21863 - C21864 + C21865 - C21866) * C29624 +
             (C22392 - C22393 + C22394 - C22395) * C139984 + C39506 * C29625 +
             C40344 * C139899) *
                C139736) *
               C1565 +
           (((C39483 - C39482 + C39485 - C39484) * C29624 +
             (C40333 - C40332 + C40335 - C40334) * C139984 +
             (C21860 * C5273 - C139983 * C5339 + C21861 * C13126 -
              C139873 * C13216) *
                 C29625 +
             (C21860 * C5621 - C139983 * C5679 + C21861 * C13618 -
              C139873 * C13700) *
                 C139899) *
                C5811 +
            (C39508 * C29624 + C40345 * C139984 +
             (C39498 - C39499 + C39500 - C39501) * C29625 +
             (C40340 - C40341 + C40342 - C40343) * C139899) *
                C139736) *
               C140002) *
              C139792 * C808 +
          ((((C21864 - C21863 + C21866 - C21865) * C29624 +
             (C22393 - C22392 + C22395 - C22394) * C139984 + C39508 * C29625 +
             C40345 * C139899) *
                C5811 +
            ((C21872 - C21871 + C21874 - C21873) * C29624 +
             (C22398 - C22397 + C22400 - C22399) * C139984 +
             (C23714 - C23715 + C23716 - C23717) * C29625 +
             (C24348 - C24349 + C24350 - C24351) * C139899) *
                C139736) *
               C1565 +
           ((C39506 * C29624 + C40344 * C139984 +
             (C39499 - C39498 + C39501 - C39500) * C29625 +
             (C40341 - C40340 + C40343 - C40342) * C139899) *
                C5811 +
            ((C23715 - C23714 + C23717 - C23716) * C29624 +
             (C24349 - C24348 + C24351 - C24350) * C139984 +
             (C139983 * C5341 - C21860 * C5275 + C139873 * C14761 -
              C21861 * C14659) *
                 C29625 +
             (C139983 * C5681 - C21860 * C5623 + C139873 * C15399 -
              C21861 * C15299) *
                 C139899) *
                C139736) *
               C140002) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eezz[11] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C29624 * C266 - C30126 * C108 - C29624 * C567 + C139984 * C702 +
              C29625 * C1741 - C30127 * C1570 - C29625 * C2074 +
              C139899 * C2230) *
                 C139983 +
             (C39218 + C39219) * C139873) *
                C5811 +
            ((C30165 + C30166) * C139983 + C39200 * C139873) * C139736) *
               C1565 -
           (((C40488 + C40489) * C139873 + (C32139 + C32140) * C139983) *
                C139736 +
            ((C29625 * C13298 - C30127 * C13126 - C29625 * C13618 +
              C139899 * C13778 + C29624 * C3594 - C30126 * C3438 -
              C29624 * C3882 + C139984 * C4026) *
                 C139873 +
             (C29625 * C5397 - C30127 * C5273 - C29625 * C5621 +
              C139899 * C5733 + C29624 * C1741 - C30126 * C1570 -
              C29624 * C2074 + C139984 * C2230) *
                 C139983) *
                C5811) *
               C140002) *
              C139792 * C808 +
          ((((C32140 + C32139) * C139983 + (C40489 + C40488) * C139873) *
                C5811 +
            ((C32138 + C32137) * C139983 +
             (C29624 * C3596 - C30126 * C3440 - C29624 * C3884 +
              C139984 * C4028 + C29625 * C14869 - C30127 * C14659 -
              C29625 * C15299 + C139899 * C15502) *
                 C139873) *
                C139736) *
               C140002 -
           (((C31116 + C31117) * C139873 + (C30168 + C30167) * C139983) *
                C139736 +
            (C39209 * C139873 + (C30166 + C30165) * C139983) * C5811) *
               C1565) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexx[12] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5816 * C114 - C5817 * C108 - C5816 * C115 + C5811 * C126 +
              C5818 * C116 - C5819 * C109 - C5818 * C117 + C139736 * C127) *
                 C139984 +
             (C15683 + C15684) * C139899) *
                C139983 +
            ((C6687 + C6688) * C139984 + (C10430 + C10429) * C139899) *
                C139873) *
               C139809 * C2322 -
           (((C10427 + C10428) * C139899 + (C6690 + C6689) * C139984) *
                C139873 +
            ((C10429 + C10430) * C139899 + (C6688 + C6687) * C139984) *
                C139983) *
               C139809 * C140000) *
              C2324 +
          ((((C6691 + C6692) * C139984 + (C38070 + C38071) * C139899) *
                C139983 +
            ((C6693 + C6694) * C139984 +
             (C5816 * C7756 - C5817 * C7753 - C5816 * C7757 + C5811 * C7762 +
              C5818 * C7760 - C5819 * C7755 - C5818 * C7761 + C139736 * C7764) *
                 C139899) *
                C139873) *
               C139809 * C140000 -
           (((C38071 + C38070) * C139899 + (C6692 + C6691) * C139984) *
                C139873 +
            ((C15688 + C15687) * C139899 +
             (C5818 * C118 - C5819 * C110 - C5818 * C119 + C139736 * C128 +
              C5816 * C116 - C5817 * C109 - C5816 * C117 + C5811 * C127) *
                 C139984) *
                C139983) *
               C139809 * C2322) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexy[12] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139983 * C183 - C21860 * C108 + C139873 * C896 - C21861 * C813) *
                 C5816 +
             (C139983 * C189 - C21860 * C115 + C139873 * C901 - C21861 * C822) *
                 C5811 +
             (C21863 - C21864 + C21865 - C21866) * C5818 +
             (C21867 - C21868 + C21869 - C21870) * C139736) *
                C139984 +
            ((C39482 - C39483 + C39484 - C39485) * C5816 +
             (C39486 - C39487 + C39488 - C39489) * C5811 + C39506 * C5818 +
             C39507 * C139736) *
                C139899) *
               C139809 * C2322 +
           (((C21860 * C813 - C139983 * C896 + C21861 * C2908 -
              C139873 * C2974) *
                 C5816 +
             (C21860 * C822 - C139983 * C901 + C21861 * C2913 -
              C139873 * C2978) *
                 C5811 +
             (C22729 - C22730 + C22731 - C22732) * C5818 +
             (C22733 - C22734 + C22735 - C22736) * C139736) *
                C139984 +
            ((C21860 * C3438 - C139983 * C3520 + C21861 * C7754 -
              C139873 * C7863) *
                 C5816 +
             (C21860 * C3443 - C139983 * C3524 + C21861 * C7759 -
              C139873 * C7866) *
                 C5811 +
             (C38202 - C38203 + C38204 - C38205) * C5818 +
             (C38206 - C38207 + C38208 - C38209) * C139736) *
                C139899) *
               C139809 * C140000) *
              C2324 +
          ((((C21864 - C21863 + C21866 - C21865) * C5816 +
             (C21868 - C21867 + C21870 - C21869) * C5811 +
             (C21872 - C21871 + C21874 - C21873) * C5818 +
             (C21876 - C21875 + C21878 - C21877) * C139736) *
                C139984 +
            (C39508 * C5816 + C39509 * C5811 +
             (C23714 - C23715 + C23716 - C23717) * C5818 +
             (C23718 - C23719 + C23720 - C23721) * C139736) *
                C139899) *
               C139809 * C2322 +
           (((C22730 - C22729 + C22732 - C22731) * C5816 +
             (C22734 - C22733 + C22736 - C22735) * C5811 +
             (C22738 - C22737 + C22740 - C22739) * C5818 +
             (C22742 - C22741 + C22744 - C22743) * C139736) *
                C139984 +
            ((C38203 - C38202 + C38205 - C38204) * C5816 +
             (C38207 - C38206 + C38209 - C38208) * C5811 +
             (C139983 * C3522 - C21860 * C3440 + C139873 * C7865 -
              C21861 * C7755) *
                 C5818 +
             (C139983 * C3526 - C21860 * C3447 + C139873 * C7868 -
              C21861 * C7761) *
                 C139736) *
                C139899) *
               C139809 * C140000) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexz[12] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C139984 * C266 - C29624 * C108 + C139899 * C1741 -
                        C29625 * C1570) *
                           C5816 +
                       (C139984 * C272 - C29624 * C115 + C139899 * C1746 -
                        C29625 * C1579) *
                           C5811 +
                       (C29627 - C29628 + C29629 - C29630) * C5818 +
                       (C29631 - C29632 + C29633 - C29634) * C139736) *
                          C139983 +
                      ((C38340 - C38341 + C38342 - C38343) * C5816 +
                       (C38344 - C38345 + C38346 - C38347) * C5811 +
                       C38364 * C5818 + C38365 * C139736) *
                          C139873) *
                         C139809 * C2322 +
                     (((C38341 - C38340 + C38343 - C38342) * C5816 +
                       (C38345 - C38344 + C38347 - C38346) * C5811 +
                       C38366 * C5818 + C38367 * C139736) *
                          C139983 +
                      ((C29624 * C2908 - C139984 * C3032 + C29625 * C7754 -
                        C139899 * C7979) *
                           C5816 +
                       (C29624 * C2913 - C139984 * C3036 + C29625 * C7759 -
                        C139899 * C7982) *
                           C5811 +
                       (C38356 - C38357 + C38358 - C38359) * C5818 +
                       (C38360 - C38361 + C38362 - C38363) * C139736) *
                          C139873) *
                         C139809 * C140000) *
                        C2324 +
                    ((((C29628 - C29627 + C29630 - C29629) * C5816 +
                       (C29632 - C29631 + C29634 - C29633) * C5811 +
                       (C29636 - C29635 + C29638 - C29637) * C5818 +
                       (C29640 - C29639 + C29642 - C29641) * C139736) *
                          C139983 +
                      (C38366 * C5816 + C38367 * C5811 +
                       (C30479 - C30480 + C30481 - C30482) * C5818 +
                       (C30483 - C30484 + C30485 - C30486) * C139736) *
                          C139873) *
                         C139809 * C2322 +
                     ((C38364 * C5816 + C38365 * C5811 +
                       (C30480 - C30479 + C30482 - C30481) * C5818 +
                       (C30484 - C30483 + C30486 - C30485) * C139736) *
                          C139983 +
                      ((C38357 - C38356 + C38359 - C38358) * C5816 +
                       (C38361 - C38360 + C38363 - C38362) * C5811 +
                       (C139984 * C3034 - C29624 * C2910 + C139899 * C7981 -
                        C29625 * C7755) *
                           C5818 +
                       (C139984 * C3038 - C29624 * C2917 + C139899 * C7984 -
                        C29625 * C7761) *
                           C139736) *
                          C139873) *
                         C139809 * C140000) *
                        C139998)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[12] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5811 * C114 - C5816 * C108 + C139736 * C116 - C5818 * C109) *
                 C21860 +
             (C5811 * C354 - C5816 * C348 + C139736 * C355 - C5818 * C349) *
                 C139983 +
             (C7039 - C7040 + C7041 - C7042) * C21861 +
             (C7043 - C7044 + C7045 - C7046) * C139873) *
                C139984 +
            ((C16035 - C16036 + C16037 - C16038) * C21860 +
             (C16039 - C16040 + C16041 - C16042) * C139983 +
             (C10746 - C10745 + C10748 - C10747) * C21861 +
             (C10750 - C10749 + C10752 - C10751) * C139873) *
                C139899) *
               C139809 * C2322 +
           (((C7040 - C7039 + C7042 - C7041) * C21860 +
             (C7044 - C7043 + C7046 - C7045) * C139983 +
             (C7048 - C7047 + C7050 - C7049) * C21861 +
             (C7052 - C7051 + C7054 - C7053) * C139873) *
                C139984 +
            ((C10745 - C10746 + C10747 - C10748) * C21860 +
             (C10749 - C10750 + C10751 - C10752) * C139983 +
             (C10753 - C10754 + C10755 - C10756) * C21861 +
             (C10757 - C10758 + C10759 - C10760) * C139873) *
                C139899) *
               C139809 * C140000) *
              C2324 +
          ((((C5816 * C109 - C5811 * C116 + C5818 * C110 - C139736 * C118) *
                 C21860 +
             (C5816 * C349 - C5811 * C355 + C5818 * C350 - C139736 * C356) *
                 C139983 +
             (C7055 - C7056 + C7057 - C7058) * C21861 +
             (C7059 - C7060 + C7061 - C7062) * C139873) *
                C139984 +
            ((C16051 - C16052 + C16053 - C16054) * C21860 +
             (C16055 - C16056 + C16057 - C16058) * C139983 +
             (C38498 - C38499 + C38500 - C38501) * C21861 +
             (C38502 - C38503 + C38504 - C38505) * C139873) *
                C139899) *
               C139809 * C2322 +
           (((C7056 - C7055 + C7058 - C7057) * C21860 +
             (C7060 - C7059 + C7062 - C7061) * C139983 +
             (C7064 - C7063 + C7066 - C7065) * C21861 +
             (C7068 - C7067 + C7070 - C7069) * C139873) *
                C139984 +
            ((C38499 - C38498 + C38501 - C38500) * C21860 +
             (C38503 - C38502 + C38505 - C38504) * C139983 +
             (C5811 * C7756 - C5816 * C7753 + C139736 * C7760 - C5818 * C7755) *
                 C21861 +
             (C5811 * C8095 - C5816 * C8092 + C139736 * C8096 - C5818 * C8093) *
                 C139873) *
                C139899) *
               C139809 * C140000) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[12] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C21860 * C183 - C22116 * C108 - C21860 * C348 + C139983 * C411 +
              C21861 * C896 - C22117 * C813 - C21861 * C1072 +
              C139873 * C1151) *
                 C5811 +
             (C22155 + C22156) * C139736) *
                C139984 +
            ((C39934 + C39935) * C5811 + C39916 * C139736) * C139899) *
               C139809 * C2322 -
           (((C38648 + C38649) * C139736 +
             (C21861 * C7863 - C22117 * C7754 - C21861 * C8091 +
              C139873 * C8196 + C21860 * C3520 - C22116 * C3438 -
              C21860 * C3668 + C139983 * C3742) *
                 C5811) *
                C139899 +
            ((C23091 + C23092) * C139736 +
             (C21861 * C2974 - C22117 * C2908 - C21861 * C3090 +
              C139873 * C3148 + C21860 * C896 - C22116 * C813 - C21860 * C1072 +
              C139983 * C1151) *
                 C5811) *
                C139984) *
               C139809 * C140000) *
              C2324 +
          ((((C23092 + C23091) * C5811 + (C23090 + C23089) * C139736) *
                C139984 +
            ((C38649 + C38648) * C5811 +
             (C21860 * C3522 - C22116 * C3440 - C21860 * C3670 +
              C139983 * C3744 + C21861 * C7865 - C22117 * C7755 -
              C21861 * C8093 + C139873 * C8197) *
                 C139736) *
                C139899) *
               C139809 * C140000 -
           (((C24044 + C24045) * C139736 + C39925 * C5811) * C139899 +
            ((C22158 + C22157) * C139736 + (C22156 + C22155) * C5811) *
                C139984) *
               C139809 * C2322) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[12] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C139984 * C266 - C29624 * C108 + C139899 * C1741 -
                        C29625 * C1570) *
                           C21860 +
                       (C139984 * C495 - C29624 * C348 + C139899 * C1997 -
                        C29625 * C1829) *
                           C139983 +
                       (C38340 - C38341 + C38342 - C38343) * C21861 +
                       (C38780 - C38781 + C38782 - C38783) * C139873) *
                          C5811 +
                      ((C29627 - C29628 + C29629 - C29630) * C21860 +
                       (C29879 - C29880 + C29881 - C29882) * C139983 +
                       C38364 * C21861 + C38792 * C139873) *
                          C139736) *
                         C139809 * C2322 +
                     (((C38341 - C38340 + C38343 - C38342) * C21860 +
                       (C38781 - C38780 + C38783 - C38782) * C139983 +
                       (C29624 * C2908 - C139984 * C3032 + C29625 * C7754 -
                        C139899 * C7979) *
                           C21861 +
                       (C29624 * C3090 - C139984 * C3202 + C29625 * C8091 -
                        C139899 * C8317) *
                           C139873) *
                          C5811 +
                      (C38366 * C21860 + C38793 * C139983 +
                       (C38356 - C38357 + C38358 - C38359) * C21861 +
                       (C38788 - C38789 + C38790 - C38791) * C139873) *
                          C139736) *
                         C139809 * C140000) *
                        C2324 +
                    ((((C29628 - C29627 + C29630 - C29629) * C21860 +
                       (C29880 - C29879 + C29882 - C29881) * C139983 +
                       C38366 * C21861 + C38793 * C139873) *
                          C5811 +
                      ((C29636 - C29635 + C29638 - C29637) * C21860 +
                       (C29885 - C29884 + C29887 - C29886) * C139983 +
                       (C30479 - C30480 + C30481 - C30482) * C21861 +
                       (C30792 - C30793 + C30794 - C30795) * C139873) *
                          C139736) *
                         C139809 * C2322 +
                     ((C38364 * C21860 + C38792 * C139983 +
                       (C38357 - C38356 + C38359 - C38358) * C21861 +
                       (C38789 - C38788 + C38791 - C38790) * C139873) *
                          C5811 +
                      ((C30480 - C30479 + C30482 - C30481) * C21860 +
                       (C30793 - C30792 + C30795 - C30794) * C139983 +
                       (C139984 * C3034 - C29624 * C2910 + C139899 * C7981 -
                        C29625 * C7755) *
                           C21861 +
                       (C139984 * C3204 - C29624 * C3092 + C139899 * C8319 -
                        C29625 * C8093) *
                           C139873) *
                          C139736) *
                         C139809 * C140000) *
                        C139998)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[12] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5811 * C114 - C5816 * C108 + C139736 * C116 - C5818 * C109) *
                 C29624 +
             (C5811 * C573 - C5816 * C567 + C139736 * C574 - C5818 * C568) *
                 C139984 +
             (C16035 - C16036 + C16037 - C16038) * C29625 +
             (C16408 - C16409 + C16410 - C16411) * C139899) *
                C139983 +
            ((C7039 - C7040 + C7041 - C7042) * C29624 +
             (C7408 - C7409 + C7410 - C7411) * C139984 +
             (C10746 - C10745 + C10748 - C10747) * C29625 +
             (C11068 - C11067 + C11070 - C11069) * C139899) *
                C139873) *
               C139809 * C2322 +
           (((C7040 - C7039 + C7042 - C7041) * C29624 +
             (C7409 - C7408 + C7411 - C7410) * C139984 +
             (C10745 - C10746 + C10747 - C10748) * C29625 +
             (C11067 - C11068 + C11069 - C11070) * C139899) *
                C139983 +
            ((C7048 - C7047 + C7050 - C7049) * C29624 +
             (C7413 - C7412 + C7415 - C7414) * C139984 +
             (C10753 - C10754 + C10755 - C10756) * C29625 +
             (C11071 - C11072 + C11073 - C11074) * C139899) *
                C139873) *
               C139809 * C140000) *
              C2324 +
          ((((C5816 * C109 - C5811 * C116 + C5818 * C110 - C139736 * C118) *
                 C29624 +
             (C5816 * C568 - C5811 * C574 + C5818 * C569 - C139736 * C575) *
                 C139984 +
             (C16051 - C16052 + C16053 - C16054) * C29625 +
             (C16416 - C16417 + C16418 - C16419) * C139899) *
                C139983 +
            ((C7055 - C7056 + C7057 - C7058) * C29624 +
             (C7416 - C7417 + C7418 - C7419) * C139984 +
             (C38498 - C38499 + C38500 - C38501) * C29625 +
             (C38924 - C38925 + C38926 - C38927) * C139899) *
                C139873) *
               C139809 * C2322 +
           (((C7056 - C7055 + C7058 - C7057) * C29624 +
             (C7417 - C7416 + C7419 - C7418) * C139984 +
             (C38499 - C38498 + C38501 - C38500) * C29625 +
             (C38925 - C38924 + C38927 - C38926) * C139899) *
                C139983 +
            ((C7064 - C7063 + C7066 - C7065) * C29624 +
             (C7421 - C7420 + C7423 - C7422) * C139984 +
             (C5811 * C7756 - C5816 * C7753 + C139736 * C7760 - C5818 * C7755) *
                 C29625 +
             (C5811 * C8426 - C5816 * C8423 + C139736 * C8427 - C5818 * C8424) *
                 C139899) *
                C139873) *
               C139809 * C140000) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eezy[12] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139983 * C183 - C21860 * C108 + C139873 * C896 - C21861 * C813) *
                 C29624 +
             (C139983 * C629 - C21860 * C567 + C139873 * C1393 -
              C21861 * C1317) *
                 C139984 +
             (C39482 - C39483 + C39484 - C39485) * C29625 +
             (C40332 - C40333 + C40334 - C40335) * C139899) *
                C5811 +
            ((C21863 - C21864 + C21865 - C21866) * C29624 +
             (C22392 - C22393 + C22394 - C22395) * C139984 + C39506 * C29625 +
             C40344 * C139899) *
                C139736) *
               C139809 * C2322 +
           (((C21860 * C813 - C139983 * C896 + C21861 * C2908 -
              C139873 * C2974) *
                 C29624 +
             (C21860 * C1317 - C139983 * C1393 + C21861 * C3256 -
              C139873 * C3314) *
                 C139984 +
             (C21860 * C3438 - C139983 * C3520 + C21861 * C7754 -
              C139873 * C7863) *
                 C29625 +
             (C21860 * C3882 - C139983 * C3956 + C21861 * C8422 -
              C139873 * C8526) *
                 C139899) *
                C5811 +
            ((C22729 - C22730 + C22731 - C22732) * C29624 +
             (C23400 - C23401 + C23402 - C23403) * C139984 +
             (C38202 - C38203 + C38204 - C38205) * C29625 +
             (C39058 - C39059 + C39060 - C39061) * C139899) *
                C139736) *
               C139809 * C140000) *
              C2324 +
          ((((C21864 - C21863 + C21866 - C21865) * C29624 +
             (C22393 - C22392 + C22395 - C22394) * C139984 + C39508 * C29625 +
             C40345 * C139899) *
                C5811 +
            ((C21872 - C21871 + C21874 - C21873) * C29624 +
             (C22398 - C22397 + C22400 - C22399) * C139984 +
             (C23714 - C23715 + C23716 - C23717) * C29625 +
             (C24348 - C24349 + C24350 - C24351) * C139899) *
                C139736) *
               C139809 * C2322 +
           (((C22730 - C22729 + C22732 - C22731) * C29624 +
             (C23401 - C23400 + C23403 - C23402) * C139984 +
             (C38203 - C38202 + C38205 - C38204) * C29625 +
             (C39059 - C39058 + C39061 - C39060) * C139899) *
                C5811 +
            ((C22738 - C22737 + C22740 - C22739) * C29624 +
             (C23405 - C23404 + C23407 - C23406) * C139984 +
             (C139983 * C3522 - C21860 * C3440 + C139873 * C7865 -
              C21861 * C7755) *
                 C29625 +
             (C139983 * C3958 - C21860 * C3884 + C139873 * C8528 -
              C21861 * C8424) *
                 C139899) *
                C139736) *
               C139809 * C140000) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eezz[12] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C29624 * C266 - C30126 * C108 - C29624 * C567 + C139984 * C702 +
              C29625 * C1741 - C30127 * C1570 - C29625 * C2074 +
              C139899 * C2230) *
                 C139983 +
             (C39218 + C39219) * C139873) *
                C5811 +
            ((C30165 + C30166) * C139983 + C39200 * C139873) * C139736) *
               C139809 * C2322 -
           (((C39220 + C39221) * C139873 + C39209 * C139983) * C139736 +
            ((C29625 * C7979 - C30127 * C7754 - C29625 * C8422 +
              C139899 * C8634 + C29624 * C3032 - C30126 * C2908 -
              C29624 * C3256 + C139984 * C3368) *
                 C139873 +
             (C39219 + C39218) * C139983) *
                C5811) *
               C139809 * C140000) *
              C2324 +
          (((C39200 * C139983 + (C39221 + C39220) * C139873) * C5811 +
            ((C31117 + C31116) * C139983 +
             (C29624 * C3034 - C30126 * C2910 - C29624 * C3258 +
              C139984 * C3370 + C29625 * C7981 - C30127 * C7755 -
              C29625 * C8424 + C139899 * C8635) *
                 C139873) *
                C139736) *
               C139809 * C140000 -
           (((C31116 + C31117) * C139873 + (C30168 + C30167) * C139983) *
                C139736 +
            (C39209 * C139873 + (C30166 + C30165) * C139983) * C5811) *
               C139809 * C2322) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexx[13] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C5816 * C114 - C5817 * C108 - C5816 * C115 + C5811 * C126 +
             C5818 * C116 - C5819 * C109 - C5818 * C117 + C139736 * C127) *
                C139984 +
            (C15683 + C15684) * C139899) *
               C139983 +
           ((C6687 + C6688) * C139984 + (C10430 + C10429) * C139899) *
               C139873) *
              C139809 * C2904 -
          (((C10427 + C10428) * C139899 + (C6690 + C6689) * C139984) * C139873 +
           ((C10429 + C10430) * C139899 + (C6688 + C6687) * C139984) *
               C139983) *
              C139809 * C2905 +
          ((C9618 * C139984 + (C10428 + C10427) * C139899) * C139983 +
           ((C9633 + C9632) * C139984 +
            (C5816 * C10396 - C5817 * C10394 - C5816 * C10397 + C5811 * C10400 +
             C5818 * C10398 - C5819 * C10395 - C5818 * C10399 +
             C139736 * C10401) *
                C139899) *
               C139873) *
              C139809 * C2906) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eexy[13] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139983 * C183 - C21860 * C108 + C139873 * C896 - C21861 * C813) *
                C5816 +
            (C139983 * C189 - C21860 * C115 + C139873 * C901 - C21861 * C822) *
                C5811 +
            (C21863 - C21864 + C21865 - C21866) * C5818 +
            (C21867 - C21868 + C21869 - C21870) * C139736) *
               C139984 +
           ((C39482 - C39483 + C39484 - C39485) * C5816 +
            (C39486 - C39487 + C39488 - C39489) * C5811 + C39506 * C5818 +
            C39507 * C139736) *
               C139899) *
              C139809 * C2904 +
          (((C21860 * C813 - C139983 * C896 + C21861 * C2908 -
             C139873 * C2974) *
                C5816 +
            (C21860 * C822 - C139983 * C901 + C21861 * C2913 -
             C139873 * C2978) *
                C5811 +
            (C22729 - C22730 + C22731 - C22732) * C5818 +
            (C22733 - C22734 + C22735 - C22736) * C139736) *
               C139984 +
           ((C21860 * C3438 - C139983 * C3520 + C21861 * C7754 -
             C139873 * C7863) *
                C5816 +
            (C21860 * C3443 - C139983 * C3524 + C21861 * C7759 -
             C139873 * C7866) *
                C5811 +
            (C38202 - C38203 + C38204 - C38205) * C5818 +
            (C38206 - C38207 + C38208 - C38209) * C139736) *
               C139899) *
              C139809 * C2905 +
          (((C139983 * C2974 - C21860 * C2908 + C139873 * C6792 -
             C21861 * C6627) *
                C5816 +
            (C139983 * C2978 - C21860 * C2913 + C139873 * C6795 -
             C21861 * C6632) *
                C5811 +
            (C139983 * C2975 - C21860 * C2909 + C139873 * C6793 -
             C21861 * C6626) *
                C5818 +
            (C139983 * C2979 - C21860 * C2915 + C139873 * C6796 -
             C21861 * C6630) *
                C139736) *
               C139984 +
           ((C139983 * C7863 - C21860 * C7754 + C139873 * C10528 -
             C21861 * C10394) *
                C5816 +
            (C139983 * C7866 - C21860 * C7759 + C139873 * C10530 -
             C21861 * C10397) *
                C5811 +
            (C139983 * C7864 - C21860 * C7753 + C139873 * C10529 -
             C21861 * C10395) *
                C5818 +
            (C139983 * C7867 - C21860 * C7757 + C139873 * C10531 -
             C21861 * C10399) *
                C139736) *
               C139899) *
              C139809 * C2906) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eexz[13] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C139984 * C266 - C29624 * C108 + C139899 * C1741 -
                       C29625 * C1570) *
                          C5816 +
                      (C139984 * C272 - C29624 * C115 + C139899 * C1746 -
                       C29625 * C1579) *
                          C5811 +
                      (C29627 - C29628 + C29629 - C29630) * C5818 +
                      (C29631 - C29632 + C29633 - C29634) * C139736) *
                         C139983 +
                     ((C38340 - C38341 + C38342 - C38343) * C5816 +
                      (C38344 - C38345 + C38346 - C38347) * C5811 +
                      C38364 * C5818 + C38365 * C139736) *
                         C139873) *
                        C139809 * C2904 +
                    (((C38341 - C38340 + C38343 - C38342) * C5816 +
                      (C38345 - C38344 + C38347 - C38346) * C5811 +
                      C38366 * C5818 + C38367 * C139736) *
                         C139983 +
                     ((C41954 - C41955 + C41956 - C41957) * C5816 +
                      (C41958 - C41959 + C41960 - C41961) * C5811 +
                      (C38356 - C38357 + C38358 - C38359) * C5818 +
                      (C38360 - C38361 + C38362 - C38363) * C139736) *
                         C139873) *
                        C139809 * C2905 +
                    (((C41955 - C41954 + C41957 - C41956) * C5816 +
                      (C41959 - C41958 + C41961 - C41960) * C5811 +
                      (C38357 - C38356 + C38359 - C38358) * C5818 +
                      (C38361 - C38360 + C38363 - C38362) * C139736) *
                         C139983 +
                     ((C139984 * C6908 - C29624 * C6627 + C139899 * C10630 -
                       C29625 * C10394) *
                          C5816 +
                      (C139984 * C6911 - C29624 * C6632 + C139899 * C10632 -
                       C29625 * C10397) *
                          C5811 +
                      (C139984 * C6909 - C29624 * C6626 + C139899 * C10631 -
                       C29625 * C10395) *
                          C5818 +
                      (C139984 * C6912 - C29624 * C6630 + C139899 * C10633 -
                       C29625 * C10399) *
                          C139736) *
                         C139873) *
                        C139809 * C2906) *
                   C139758) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[13] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C5811 * C114 - C5816 * C108 + C139736 * C116 - C5818 * C109) *
                C21860 +
            (C5811 * C354 - C5816 * C348 + C139736 * C355 - C5818 * C349) *
                C139983 +
            (C7039 - C7040 + C7041 - C7042) * C21861 +
            (C7043 - C7044 + C7045 - C7046) * C139873) *
               C139984 +
           ((C16035 - C16036 + C16037 - C16038) * C21860 +
            (C16039 - C16040 + C16041 - C16042) * C139983 +
            (C10746 - C10745 + C10748 - C10747) * C21861 +
            (C10750 - C10749 + C10752 - C10751) * C139873) *
               C139899) *
              C139809 * C2904 +
          (((C7040 - C7039 + C7042 - C7041) * C21860 +
            (C7044 - C7043 + C7046 - C7045) * C139983 +
            (C7048 - C7047 + C7050 - C7049) * C21861 +
            (C7052 - C7051 + C7054 - C7053) * C139873) *
               C139984 +
           ((C10745 - C10746 + C10747 - C10748) * C21860 +
            (C10749 - C10750 + C10751 - C10752) * C139983 +
            (C10753 - C10754 + C10755 - C10756) * C21861 +
            (C10757 - C10758 + C10759 - C10760) * C139873) *
               C139899) *
              C139809 * C2905 +
          ((C9893 * C21860 + C9894 * C139983 +
            (C9886 - C9885 + C9888 - C9887) * C21861 +
            (C9890 - C9889 + C9892 - C9891) * C139873) *
               C139984 +
           ((C10754 - C10753 + C10756 - C10755) * C21860 +
            (C10758 - C10757 + C10760 - C10759) * C139983 +
            (C5811 * C10396 - C5816 * C10394 + C139736 * C10398 -
             C5818 * C10395) *
                C21861 +
            (C5811 * C10742 - C5816 * C10740 + C139736 * C10743 -
             C5818 * C10741) *
                C139873) *
               C139899) *
              C139809 * C2906) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eeyy[13] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C21860 * C183 - C22116 * C108 - C21860 * C348 + C139983 * C411 +
             C21861 * C896 - C22117 * C813 - C21861 * C1072 + C139873 * C1151) *
                C5811 +
            (C22155 + C22156) * C139736) *
               C139984 +
           ((C39934 + C39935) * C5811 + C39916 * C139736) * C139899) *
              C139809 * C2904 -
          (((C38648 + C38649) * C139736 +
            (C21861 * C7863 - C22117 * C7754 - C21861 * C8091 +
             C139873 * C8196 + C21860 * C3520 - C22116 * C3438 -
             C21860 * C3668 + C139983 * C3742) *
                C5811) *
               C139899 +
           ((C23091 + C23092) * C139736 +
            (C21861 * C2974 - C22117 * C2908 - C21861 * C3090 +
             C139873 * C3148 + C21860 * C896 - C22116 * C813 - C21860 * C1072 +
             C139983 * C1151) *
                C5811) *
               C139984) *
              C139809 * C2905 +
          (((C21860 * C2974 - C22116 * C2908 - C21860 * C3090 +
             C139983 * C3148 + C21861 * C6792 - C22117 * C6627 -
             C21861 * C7032 + C139873 * C7169) *
                C5811 +
            (C21860 * C2975 - C22116 * C2909 - C21860 * C3091 +
             C139983 * C3149 + C21861 * C6793 - C22117 * C6626 -
             C21861 * C7033 + C139873 * C7168) *
                C139736) *
               C139984 +
           ((C21860 * C7863 - C22116 * C7754 - C21860 * C8091 +
             C139983 * C8196 + C21861 * C10528 - C22117 * C10394 -
             C21861 * C10740 + C139873 * C10858) *
                C5811 +
            (C21860 * C7864 - C22116 * C7753 - C21860 * C8092 +
             C139983 * C8195 + C21861 * C10529 - C22117 * C10395 -
             C21861 * C10741 + C139873 * C10859) *
                C139736) *
               C139899) *
              C139809 * C2906) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eeyz[13] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C139984 * C266 - C29624 * C108 + C139899 * C1741 -
                       C29625 * C1570) *
                          C21860 +
                      (C139984 * C495 - C29624 * C348 + C139899 * C1997 -
                       C29625 * C1829) *
                          C139983 +
                      (C38340 - C38341 + C38342 - C38343) * C21861 +
                      (C38780 - C38781 + C38782 - C38783) * C139873) *
                         C5811 +
                     ((C29627 - C29628 + C29629 - C29630) * C21860 +
                      (C29879 - C29880 + C29881 - C29882) * C139983 +
                      C38364 * C21861 + C38792 * C139873) *
                         C139736) *
                        C139809 * C2904 +
                    (((C38341 - C38340 + C38343 - C38342) * C21860 +
                      (C38781 - C38780 + C38783 - C38782) * C139983 +
                      (C41954 - C41955 + C41956 - C41957) * C21861 +
                      (C42256 - C42257 + C42258 - C42259) * C139873) *
                         C5811 +
                     (C38366 * C21860 + C38793 * C139983 +
                      (C38356 - C38357 + C38358 - C38359) * C21861 +
                      (C38788 - C38789 + C38790 - C38791) * C139873) *
                         C139736) *
                        C139809 * C2905 +
                    (((C41955 - C41954 + C41957 - C41956) * C21860 +
                      (C42257 - C42256 + C42259 - C42258) * C139983 +
                      (C139984 * C6908 - C29624 * C6627 + C139899 * C10630 -
                       C29625 * C10394) *
                          C21861 +
                      (C139984 * C7290 - C29624 * C7032 + C139899 * C10958 -
                       C29625 * C10740) *
                          C139873) *
                         C5811 +
                     ((C38357 - C38356 + C38359 - C38358) * C21860 +
                      (C38789 - C38788 + C38791 - C38790) * C139983 +
                      (C139984 * C6909 - C29624 * C6626 + C139899 * C10631 -
                       C29625 * C10395) *
                          C21861 +
                      (C139984 * C7291 - C29624 * C7033 + C139899 * C10959 -
                       C29625 * C10741) *
                          C139873) *
                         C139736) *
                        C139809 * C2906) *
                   C139758) /
                  (p * q * std::sqrt(p + q));
    d2eezx[13] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C5811 * C114 - C5816 * C108 + C139736 * C116 - C5818 * C109) *
                C29624 +
            (C5811 * C573 - C5816 * C567 + C139736 * C574 - C5818 * C568) *
                C139984 +
            (C16035 - C16036 + C16037 - C16038) * C29625 +
            (C16408 - C16409 + C16410 - C16411) * C139899) *
               C139983 +
           ((C7039 - C7040 + C7041 - C7042) * C29624 +
            (C7408 - C7409 + C7410 - C7411) * C139984 +
            (C10746 - C10745 + C10748 - C10747) * C29625 +
            (C11068 - C11067 + C11070 - C11069) * C139899) *
               C139873) *
              C139809 * C2904 +
          (((C7040 - C7039 + C7042 - C7041) * C29624 +
            (C7409 - C7408 + C7411 - C7410) * C139984 +
            (C10745 - C10746 + C10747 - C10748) * C29625 +
            (C11067 - C11068 + C11069 - C11070) * C139899) *
               C139983 +
           ((C7048 - C7047 + C7050 - C7049) * C29624 +
            (C7413 - C7412 + C7415 - C7414) * C139984 +
            (C10753 - C10754 + C10755 - C10756) * C29625 +
            (C11071 - C11072 + C11073 - C11074) * C139899) *
               C139873) *
              C139809 * C2905 +
          ((C9893 * C29624 + C10135 * C139984 +
            (C10754 - C10753 + C10756 - C10755) * C29625 +
            (C11072 - C11071 + C11074 - C11073) * C139899) *
               C139983 +
           ((C9886 - C9885 + C9888 - C9887) * C29624 +
            (C10132 - C10131 + C10134 - C10133) * C139984 +
            (C5811 * C10396 - C5816 * C10394 + C139736 * C10398 -
             C5818 * C10395) *
                C29625 +
            (C5811 * C11064 - C5816 * C11062 + C139736 * C11065 -
             C5818 * C11063) *
                C139899) *
               C139873) *
              C139809 * C2906) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eezy[13] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139983 * C183 - C21860 * C108 + C139873 * C896 - C21861 * C813) *
                C29624 +
            (C139983 * C629 - C21860 * C567 + C139873 * C1393 -
             C21861 * C1317) *
                C139984 +
            (C39482 - C39483 + C39484 - C39485) * C29625 +
            (C40332 - C40333 + C40334 - C40335) * C139899) *
               C5811 +
           ((C21863 - C21864 + C21865 - C21866) * C29624 +
            (C22392 - C22393 + C22394 - C22395) * C139984 + C39506 * C29625 +
            C40344 * C139899) *
               C139736) *
              C139809 * C2904 +
          (((C21860 * C813 - C139983 * C896 + C21861 * C2908 -
             C139873 * C2974) *
                C29624 +
            (C21860 * C1317 - C139983 * C1393 + C21861 * C3256 -
             C139873 * C3314) *
                C139984 +
            (C21860 * C3438 - C139983 * C3520 + C21861 * C7754 -
             C139873 * C7863) *
                C29625 +
            (C21860 * C3882 - C139983 * C3956 + C21861 * C8422 -
             C139873 * C8526) *
                C139899) *
               C5811 +
           ((C22729 - C22730 + C22731 - C22732) * C29624 +
            (C23400 - C23401 + C23402 - C23403) * C139984 +
            (C38202 - C38203 + C38204 - C38205) * C29625 +
            (C39058 - C39059 + C39060 - C39061) * C139899) *
               C139736) *
              C139809 * C2905 +
          (((C139983 * C2974 - C21860 * C2908 + C139873 * C6792 -
             C21861 * C6627) *
                C29624 +
            (C139983 * C3314 - C21860 * C3256 + C139873 * C7521 -
             C21861 * C7401) *
                C139984 +
            (C139983 * C7863 - C21860 * C7754 + C139873 * C10528 -
             C21861 * C10394) *
                C29625 +
            (C139983 * C8526 - C21860 * C8422 + C139873 * C11172 -
             C21861 * C11062) *
                C139899) *
               C5811 +
           ((C139983 * C2975 - C21860 * C2909 + C139873 * C6793 -
             C21861 * C6626) *
                C29624 +
            (C139983 * C3315 - C21860 * C3257 + C139873 * C7522 -
             C21861 * C7402) *
                C139984 +
            (C139983 * C7864 - C21860 * C7753 + C139873 * C10529 -
             C21861 * C10395) *
                C29625 +
            (C139983 * C8527 - C21860 * C8423 + C139873 * C11173 -
             C21861 * C11063) *
                C139899) *
               C139736) *
              C139809 * C2906) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eezz[13] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C29624 * C266 - C30126 * C108 - C29624 * C567 + C139984 * C702 +
             C29625 * C1741 - C30127 * C1570 - C29625 * C2074 +
             C139899 * C2230) *
                C139983 +
            (C39218 + C39219) * C139873) *
               C5811 +
           ((C30165 + C30166) * C139983 + C39200 * C139873) * C139736) *
              C139809 * C2904 -
          (((C39220 + C39221) * C139873 + C39209 * C139983) * C139736 +
           ((C42566 + C42567) * C139873 + (C39219 + C39218) * C139983) *
               C5811) *
              C139809 * C2905 +
          (((C42567 + C42566) * C139983 +
            (C29624 * C6908 - C30126 * C6627 - C29624 * C7401 +
             C139984 * C7629 + C29625 * C10630 - C30127 * C10394 -
             C29625 * C11062 + C139899 * C11272) *
                C139873) *
               C5811 +
           ((C39221 + C39220) * C139983 +
            (C29624 * C6909 - C30126 * C6626 - C29624 * C7402 +
             C139984 * C7628 + C29625 * C10631 - C30127 * C10395 -
             C29625 * C11063 + C139899 * C11273) *
                C139873) *
               C139736) *
              C139809 * C2906) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eexx[14] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5816 * C114 - C5817 * C108 - C5816 * C115 + C5811 * C126 +
              C5818 * C116 - C5819 * C109 - C5818 * C117 + C139736 * C127) *
                 C139984 +
             (C15683 + C15684) * C139899) *
                C139983 +
            ((C6687 + C6688) * C139984 + C42698 * C139899) * C139873) *
               C1565 -
           (((C18324 + C18323) * C139899 + C42699 * C139984) * C139873 +
            ((C15686 + C15685) * C139899 + (C15684 + C15683) * C139984) *
                C139983) *
               C140002) *
              C2322 +
          (((C42698 * C139984 + (C18323 + C18324) * C139899) * C139983 +
            ((C10428 + C10427) * C139984 +
             (C5816 * C13134 - C5817 * C13128 - C5816 * C13135 +
              C5811 * C13140 + C5818 * C13136 - C5819 * C13129 -
              C5818 * C13137 + C139736 * C13141) *
                 C139899) *
                C139873) *
               C140002 -
           (((C10427 + C10428) * C139899 + (C6690 + C6689) * C139984) *
                C139873 +
            (C42699 * C139899 + (C6688 + C6687) * C139984) * C139983) *
               C1565) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eexy[14] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139983 * C183 - C21860 * C108 + C139873 * C896 - C21861 * C813) *
                 C5816 +
             (C139983 * C189 - C21860 * C115 + C139873 * C901 - C21861 * C822) *
                 C5811 +
             (C21863 - C21864 + C21865 - C21866) * C5818 +
             (C21867 - C21868 + C21869 - C21870) * C139736) *
                C139984 +
            ((C39482 - C39483 + C39484 - C39485) * C5816 +
             (C39486 - C39487 + C39488 - C39489) * C5811 + C39506 * C5818 +
             C39507 * C139736) *
                C139899) *
               C1565 +
           (((C39483 - C39482 + C39485 - C39484) * C5816 +
             (C39487 - C39486 + C39489 - C39488) * C5811 + C39508 * C5818 +
             C39509 * C139736) *
                C139984 +
            ((C21860 * C5273 - C139983 * C5339 + C21861 * C13126 -
              C139873 * C13216) *
                 C5816 +
             (C21860 * C5278 - C139983 * C5343 + C21861 * C13131 -
              C139873 * C13220) *
                 C5811 +
             (C39498 - C39499 + C39500 - C39501) * C5818 +
             (C39502 - C39503 + C39504 - C39505) * C139736) *
                C139899) *
               C140002) *
              C2322 +
          ((((C21860 * C813 - C139983 * C896 + C21861 * C2908 -
              C139873 * C2974) *
                 C5816 +
             (C21860 * C822 - C139983 * C901 + C21861 * C2913 -
              C139873 * C2978) *
                 C5811 +
             (C22729 - C22730 + C22731 - C22732) * C5818 +
             (C22733 - C22734 + C22735 - C22736) * C139736) *
                C139984 +
            ((C42830 - C42831 + C42832 - C42833) * C5816 +
             (C42834 - C42835 + C42836 - C42837) * C5811 +
             (C38202 - C38203 + C38204 - C38205) * C5818 +
             (C38206 - C38207 + C38208 - C38209) * C139736) *
                C139899) *
               C1565 +
           (((C42831 - C42830 + C42833 - C42832) * C5816 +
             (C42835 - C42834 + C42837 - C42836) * C5811 +
             (C38203 - C38202 + C38205 - C38204) * C5818 +
             (C38207 - C38206 + C38209 - C38208) * C139736) *
                C139984 +
            ((C139983 * C13216 - C21860 * C13126 + C139873 * C13217 -
              C21861 * C13128) *
                 C5816 +
             (C139983 * C13220 - C21860 * C13131 + C139873 * C13221 -
              C21861 * C13135) *
                 C5811 +
             (C139983 * C13218 - C21860 * C13127 + C139873 * C13219 -
              C21861 * C13129) *
                 C5818 +
             (C139983 * C13222 - C21860 * C13133 + C139873 * C13223 -
              C21861 * C13137) *
                 C139736) *
                C139899) *
               C140002) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eexz[14] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C139984 * C266 - C29624 * C108 + C139899 * C1741 -
                        C29625 * C1570) *
                           C5816 +
                       (C139984 * C272 - C29624 * C115 + C139899 * C1746 -
                        C29625 * C1579) *
                           C5811 +
                       (C29627 - C29628 + C29629 - C29630) * C5818 +
                       (C29631 - C29632 + C29633 - C29634) * C139736) *
                          C139983 +
                      ((C38340 - C38341 + C38342 - C38343) * C5816 +
                       (C38344 - C38345 + C38346 - C38347) * C5811 +
                       C38364 * C5818 + C38365 * C139736) *
                          C139873) *
                         C1565 +
                     (((C29624 * C1570 - C139984 * C1741 + C29625 * C5273 -
                        C139899 * C5397) *
                           C5816 +
                       (C29624 * C1579 - C139984 * C1746 + C29625 * C5278 -
                        C139899 * C5401) *
                           C5811 +
                       (C31458 - C31459 + C31460 - C31461) * C5818 +
                       (C31462 - C31463 + C31464 - C31465) * C139736) *
                          C139983 +
                      ((C42968 - C42969 + C42970 - C42971) * C5816 +
                       (C42972 - C42973 + C42974 - C42975) * C5811 +
                       (C39640 - C39641 + C39642 - C39643) * C5818 +
                       (C39644 - C39645 + C39646 - C39647) * C139736) *
                          C139873) *
                         C140002) *
                        C2322 +
                    ((((C38341 - C38340 + C38343 - C38342) * C5816 +
                       (C38345 - C38344 + C38347 - C38346) * C5811 +
                       C38366 * C5818 + C38367 * C139736) *
                          C139983 +
                      ((C41954 - C41955 + C41956 - C41957) * C5816 +
                       (C41958 - C41959 + C41960 - C41961) * C5811 +
                       (C38356 - C38357 + C38358 - C38359) * C5818 +
                       (C38360 - C38361 + C38362 - C38363) * C139736) *
                          C139873) *
                         C1565 +
                     (((C42969 - C42968 + C42971 - C42970) * C5816 +
                       (C42973 - C42972 + C42975 - C42974) * C5811 +
                       (C39641 - C39640 + C39643 - C39642) * C5818 +
                       (C39645 - C39644 + C39647 - C39646) * C139736) *
                          C139983 +
                      ((C139984 * C7979 - C29624 * C7754 + C139899 * C13300 -
                        C29625 * C13128) *
                           C5816 +
                       (C139984 * C7982 - C29624 * C7759 + C139899 * C13304 -
                        C29625 * C13135) *
                           C5811 +
                       (C139984 * C7980 - C29624 * C7753 + C139899 * C13301 -
                        C29625 * C13129) *
                           C5818 +
                       (C139984 * C7983 - C29624 * C7757 + C139899 * C13305 -
                        C29625 * C13137) *
                           C139736) *
                          C139873) *
                         C140002) *
                        C140000) *
                   C139758) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[14] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5811 * C114 - C5816 * C108 + C139736 * C116 - C5818 * C109) *
                 C21860 +
             (C5811 * C354 - C5816 * C348 + C139736 * C355 - C5818 * C349) *
                 C139983 +
             (C7039 - C7040 + C7041 - C7042) * C21861 +
             (C7043 - C7044 + C7045 - C7046) * C139873) *
                C139984 +
            ((C16035 - C16036 + C16037 - C16038) * C21860 +
             (C16039 - C16040 + C16041 - C16042) * C139983 + C43114 * C21861 +
             C43115 * C139873) *
                C139899) *
               C1565 +
           (((C16036 - C16035 + C16038 - C16037) * C21860 +
             (C16040 - C16039 + C16042 - C16041) * C139983 + C43116 * C21861 +
             C43117 * C139873) *
                C139984 +
            ((C16044 - C16043 + C16046 - C16045) * C21860 +
             (C16048 - C16047 + C16050 - C16049) * C139983 +
             (C18639 - C18640 + C18641 - C18642) * C21861 +
             (C18643 - C18644 + C18645 - C18646) * C139873) *
                C139899) *
               C140002) *
              C2322 +
          ((((C7040 - C7039 + C7042 - C7041) * C21860 +
             (C7044 - C7043 + C7046 - C7045) * C139983 +
             (C7048 - C7047 + C7050 - C7049) * C21861 +
             (C7052 - C7051 + C7054 - C7053) * C139873) *
                C139984 +
            (C43116 * C21860 + C43117 * C139983 +
             (C10753 - C10754 + C10755 - C10756) * C21861 +
             (C10757 - C10758 + C10759 - C10760) * C139873) *
                C139899) *
               C1565 +
           ((C43114 * C21860 + C43115 * C139983 +
             (C10754 - C10753 + C10756 - C10755) * C21861 +
             (C10758 - C10757 + C10760 - C10759) * C139873) *
                C139984 +
            ((C18640 - C18639 + C18642 - C18641) * C21860 +
             (C18644 - C18643 + C18646 - C18645) * C139983 +
             (C5811 * C13134 - C5816 * C13128 + C139736 * C13136 -
              C5818 * C13129) *
                 C21861 +
             (C5811 * C13386 - C5816 * C13382 + C139736 * C13387 -
              C5818 * C13383) *
                 C139873) *
                C139899) *
               C140002) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eeyy[14] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C21860 * C183 - C22116 * C108 - C21860 * C348 + C139983 * C411 +
              C21861 * C896 - C22117 * C813 - C21861 * C1072 +
              C139873 * C1151) *
                 C5811 +
             (C22155 + C22156) * C139736) *
                C139984 +
            ((C39934 + C39935) * C5811 + C39916 * C139736) * C139899) *
               C1565 -
           (((C39936 + C39937) * C139736 +
             (C21861 * C13216 - C22117 * C13126 - C21861 * C13380 +
              C139873 * C13462 + C21860 * C5339 - C22116 * C5273 -
              C21860 * C5455 + C139983 * C5513) *
                 C5811) *
                C139899 +
            (C39925 * C139736 + (C39935 + C39934) * C5811) * C139984) *
               C140002) *
              C2322 +
          ((((C43260 + C43261) * C5811 + (C38649 + C38648) * C139736) *
                C139984 +
            ((C21860 * C13216 - C22116 * C13126 - C21860 * C13380 +
              C139983 * C13462 + C21861 * C13217 - C22117 * C13128 -
              C21861 * C13382 + C139873 * C13463) *
                 C5811 +
             (C21860 * C13218 - C22116 * C13127 - C21860 * C13381 +
              C139983 * C13464 + C21861 * C13219 - C22117 * C13129 -
              C21861 * C13383 + C139873 * C13465) *
                 C139736) *
                C139899) *
               C140002 -
           (((C38648 + C38649) * C139736 + (C43261 + C43260) * C5811) *
                C139899 +
            ((C23091 + C23092) * C139736 +
             (C21861 * C2974 - C22117 * C2908 - C21861 * C3090 +
              C139873 * C3148 + C21860 * C896 - C22116 * C813 - C21860 * C1072 +
              C139983 * C1151) *
                 C5811) *
                C139984) *
               C1565) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eeyz[14] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C139984 * C266 - C29624 * C108 + C139899 * C1741 -
                        C29625 * C1570) *
                           C21860 +
                       (C139984 * C495 - C29624 * C348 + C139899 * C1997 -
                        C29625 * C1829) *
                           C139983 +
                       (C38340 - C38341 + C38342 - C38343) * C21861 +
                       (C38780 - C38781 + C38782 - C38783) * C139873) *
                          C5811 +
                      ((C29627 - C29628 + C29629 - C29630) * C21860 +
                       (C29879 - C29880 + C29881 - C29882) * C139983 +
                       C38364 * C21861 + C38792 * C139873) *
                          C139736) *
                         C1565 +
                     (((C29624 * C1570 - C139984 * C1741 + C29625 * C5273 -
                        C139899 * C5397) *
                           C21860 +
                       (C29624 * C1829 - C139984 * C1997 + C29625 * C5455 -
                        C139899 * C5567) *
                           C139983 +
                       (C42968 - C42969 + C42970 - C42971) * C21861 +
                       (C43392 - C43393 + C43394 - C43395) * C139873) *
                          C5811 +
                      ((C31458 - C31459 + C31460 - C31461) * C21860 +
                       (C31798 - C31799 + C31800 - C31801) * C139983 +
                       (C39640 - C39641 + C39642 - C39643) * C21861 +
                       (C40068 - C40069 + C40070 - C40071) * C139873) *
                          C139736) *
                         C140002) *
                        C2322 +
                    ((((C38341 - C38340 + C38343 - C38342) * C21860 +
                       (C38781 - C38780 + C38783 - C38782) * C139983 +
                       (C41954 - C41955 + C41956 - C41957) * C21861 +
                       (C42256 - C42257 + C42258 - C42259) * C139873) *
                          C5811 +
                      (C38366 * C21860 + C38793 * C139983 +
                       (C38356 - C38357 + C38358 - C38359) * C21861 +
                       (C38788 - C38789 + C38790 - C38791) * C139873) *
                          C139736) *
                         C1565 +
                     (((C42969 - C42968 + C42971 - C42970) * C21860 +
                       (C43393 - C43392 + C43395 - C43394) * C139983 +
                       (C139984 * C7979 - C29624 * C7754 + C139899 * C13300 -
                        C29625 * C13128) *
                           C21861 +
                       (C139984 * C8317 - C29624 * C8091 + C139899 * C13541 -
                        C29625 * C13382) *
                           C139873) *
                          C5811 +
                      ((C39641 - C39640 + C39643 - C39642) * C21860 +
                       (C40069 - C40068 + C40071 - C40070) * C139983 +
                       (C139984 * C7980 - C29624 * C7753 + C139899 * C13301 -
                        C29625 * C13129) *
                           C21861 +
                       (C139984 * C8318 - C29624 * C8092 + C139899 * C13543 -
                        C29625 * C13383) *
                           C139873) *
                          C139736) *
                         C140002) *
                        C140000) *
                   C139758) /
                  (p * q * std::sqrt(p + q));
    d2eezx[14] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5811 * C114 - C5816 * C108 + C139736 * C116 - C5818 * C109) *
                 C29624 +
             (C5811 * C573 - C5816 * C567 + C139736 * C574 - C5818 * C568) *
                 C139984 +
             (C16035 - C16036 + C16037 - C16038) * C29625 +
             (C16408 - C16409 + C16410 - C16411) * C139899) *
                C139983 +
            ((C7039 - C7040 + C7041 - C7042) * C29624 +
             (C7408 - C7409 + C7410 - C7411) * C139984 + C43114 * C29625 +
             C43530 * C139899) *
                C139873) *
               C1565 +
           (((C16036 - C16035 + C16038 - C16037) * C29624 +
             (C16409 - C16408 + C16411 - C16410) * C139984 +
             (C16044 - C16043 + C16046 - C16045) * C29625 +
             (C16413 - C16412 + C16415 - C16414) * C139899) *
                C139983 +
            (C43116 * C29624 + C43531 * C139984 +
             (C18639 - C18640 + C18641 - C18642) * C29625 +
             (C18967 - C18968 + C18969 - C18970) * C139899) *
                C139873) *
               C140002) *
              C2322 +
          ((((C7040 - C7039 + C7042 - C7041) * C29624 +
             (C7409 - C7408 + C7411 - C7410) * C139984 + C43116 * C29625 +
             C43531 * C139899) *
                C139983 +
            ((C7048 - C7047 + C7050 - C7049) * C29624 +
             (C7413 - C7412 + C7415 - C7414) * C139984 +
             (C10753 - C10754 + C10755 - C10756) * C29625 +
             (C11071 - C11072 + C11073 - C11074) * C139899) *
                C139873) *
               C1565 +
           ((C43114 * C29624 + C43530 * C139984 +
             (C18640 - C18639 + C18642 - C18641) * C29625 +
             (C18968 - C18967 + C18970 - C18969) * C139899) *
                C139983 +
            ((C10754 - C10753 + C10756 - C10755) * C29624 +
             (C11072 - C11071 + C11074 - C11073) * C139984 +
             (C5811 * C13134 - C5816 * C13128 + C139736 * C13136 -
              C5818 * C13129) *
                 C29625 +
             (C5811 * C13624 - C5816 * C13620 + C139736 * C13625 -
              C5818 * C13621) *
                 C139899) *
                C139873) *
               C140002) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eezy[14] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139983 * C183 - C21860 * C108 + C139873 * C896 - C21861 * C813) *
                 C29624 +
             (C139983 * C629 - C21860 * C567 + C139873 * C1393 -
              C21861 * C1317) *
                 C139984 +
             (C39482 - C39483 + C39484 - C39485) * C29625 +
             (C40332 - C40333 + C40334 - C40335) * C139899) *
                C5811 +
            ((C21863 - C21864 + C21865 - C21866) * C29624 +
             (C22392 - C22393 + C22394 - C22395) * C139984 + C39506 * C29625 +
             C40344 * C139899) *
                C139736) *
               C1565 +
           (((C39483 - C39482 + C39485 - C39484) * C29624 +
             (C40333 - C40332 + C40335 - C40334) * C139984 +
             (C21860 * C5273 - C139983 * C5339 + C21861 * C13126 -
              C139873 * C13216) *
                 C29625 +
             (C21860 * C5621 - C139983 * C5679 + C21861 * C13618 -
              C139873 * C13700) *
                 C139899) *
                C5811 +
            (C39508 * C29624 + C40345 * C139984 +
             (C39498 - C39499 + C39500 - C39501) * C29625 +
             (C40340 - C40341 + C40342 - C40343) * C139899) *
                C139736) *
               C140002) *
              C2322 +
          ((((C21860 * C813 - C139983 * C896 + C21861 * C2908 -
              C139873 * C2974) *
                 C29624 +
             (C21860 * C1317 - C139983 * C1393 + C21861 * C3256 -
              C139873 * C3314) *
                 C139984 +
             (C42830 - C42831 + C42832 - C42833) * C29625 +
             (C43662 - C43663 + C43664 - C43665) * C139899) *
                C5811 +
            ((C22729 - C22730 + C22731 - C22732) * C29624 +
             (C23400 - C23401 + C23402 - C23403) * C139984 +
             (C38202 - C38203 + C38204 - C38205) * C29625 +
             (C39058 - C39059 + C39060 - C39061) * C139899) *
                C139736) *
               C1565 +
           (((C42831 - C42830 + C42833 - C42832) * C29624 +
             (C43663 - C43662 + C43665 - C43664) * C139984 +
             (C139983 * C13216 - C21860 * C13126 + C139873 * C13217 -
              C21861 * C13128) *
                 C29625 +
             (C139983 * C13700 - C21860 * C13618 + C139873 * C13701 -
              C21861 * C13620) *
                 C139899) *
                C5811 +
            ((C38203 - C38202 + C38205 - C38204) * C29624 +
             (C39059 - C39058 + C39061 - C39060) * C139984 +
             (C139983 * C13218 - C21860 * C13127 + C139873 * C13219 -
              C21861 * C13129) *
                 C29625 +
             (C139983 * C13702 - C21860 * C13619 + C139873 * C13703 -
              C21861 * C13621) *
                 C139899) *
                C139736) *
               C140002) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eezz[14] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C29624 * C266 - C30126 * C108 - C29624 * C567 + C139984 * C702 +
              C29625 * C1741 - C30127 * C1570 - C29625 * C2074 +
              C139899 * C2230) *
                 C139983 +
             (C39218 + C39219) * C139873) *
                C5811 +
            ((C30165 + C30166) * C139983 + C39200 * C139873) * C139736) *
               C1565 -
           (((C40488 + C40489) * C139873 + (C32139 + C32140) * C139983) *
                C139736 +
            ((C43808 + C43809) * C139873 +
             (C29625 * C5397 - C30127 * C5273 - C29625 * C5621 +
              C139899 * C5733 + C29624 * C1741 - C30126 * C1570 -
              C29624 * C2074 + C139984 * C2230) *
                 C139983) *
                C5811) *
               C140002) *
              C2322 +
          ((((C43809 + C43808) * C139983 +
             (C29624 * C7979 - C30126 * C7754 - C29624 * C8422 +
              C139984 * C8634 + C29625 * C13300 - C30127 * C13128 -
              C29625 * C13620 + C139899 * C13779) *
                 C139873) *
                C5811 +
            ((C40489 + C40488) * C139983 +
             (C29624 * C7980 - C30126 * C7753 - C29624 * C8423 +
              C139984 * C8633 + C29625 * C13301 - C30127 * C13129 -
              C29625 * C13621 + C139899 * C13781) *
                 C139873) *
                C139736) *
               C140002 -
           (((C39220 + C39221) * C139873 + C39209 * C139983) * C139736 +
            ((C42566 + C42567) * C139873 + (C39219 + C39218) * C139983) *
                C5811) *
               C1565) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eexx[15] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5816 * C114 - C5817 * C108 - C5816 * C115 + C5811 * C126 +
              C5818 * C116 - C5819 * C109 - C5818 * C117 + C139736 * C127) *
                 C139984 +
             (C15683 + C15684) * C139899) *
                C139983 +
            ((C6687 + C6688) * C139984 + C42698 * C139899) * C139873) *
               C4096 -
           (((C18324 + C18323) * C139899 + C42699 * C139984) * C139873 +
            ((C15686 + C15685) * C139899 + (C15684 + C15683) * C139984) *
                C139983) *
               C140002) *
              C139792 * C2324 +
          ((((C15687 + C15688) * C139984 + (C15689 + C15690) * C139899) *
                C139983 +
            ((C38070 + C38071) * C139984 +
             (C5816 * C13132 - C5817 * C13127 - C5816 * C13133 +
              C5811 * C13139 + C5818 * C14660 - C5819 * C14659 -
              C5818 * C14661 + C139736 * C14662) *
                 C139899) *
                C139873) *
               C140002 -
           (((C38071 + C38070) * C139899 + (C6692 + C6691) * C139984) *
                C139873 +
            ((C15688 + C15687) * C139899 +
             (C5818 * C118 - C5819 * C110 - C5818 * C119 + C139736 * C128 +
              C5816 * C116 - C5817 * C109 - C5816 * C117 + C5811 * C127) *
                 C139984) *
                C139983) *
               C4096) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexy[15] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139983 * C183 - C21860 * C108 + C139873 * C896 - C21861 * C813) *
                 C5816 +
             (C139983 * C189 - C21860 * C115 + C139873 * C901 - C21861 * C822) *
                 C5811 +
             (C21863 - C21864 + C21865 - C21866) * C5818 +
             (C21867 - C21868 + C21869 - C21870) * C139736) *
                C139984 +
            ((C39482 - C39483 + C39484 - C39485) * C5816 +
             (C39486 - C39487 + C39488 - C39489) * C5811 + C39506 * C5818 +
             C39507 * C139736) *
                C139899) *
               C4096 +
           (((C39483 - C39482 + C39485 - C39484) * C5816 +
             (C39487 - C39486 + C39489 - C39488) * C5811 + C39508 * C5818 +
             C39509 * C139736) *
                C139984 +
            ((C21860 * C5273 - C139983 * C5339 + C21861 * C13126 -
              C139873 * C13216) *
                 C5816 +
             (C21860 * C5278 - C139983 * C5343 + C21861 * C13131 -
              C139873 * C13220) *
                 C5811 +
             (C39498 - C39499 + C39500 - C39501) * C5818 +
             (C39502 - C39503 + C39504 - C39505) * C139736) *
                C139899) *
               C140002) *
              C139792 * C2324 +
          ((((C21864 - C21863 + C21866 - C21865) * C5816 +
             (C21868 - C21867 + C21870 - C21869) * C5811 +
             (C21872 - C21871 + C21874 - C21873) * C5818 +
             (C21876 - C21875 + C21878 - C21877) * C139736) *
                C139984 +
            (C39508 * C5816 + C39509 * C5811 +
             (C23714 - C23715 + C23716 - C23717) * C5818 +
             (C23718 - C23719 + C23720 - C23721) * C139736) *
                C139899) *
               C4096 +
           ((C39506 * C5816 + C39507 * C5811 +
             (C23715 - C23714 + C23717 - C23716) * C5818 +
             (C23719 - C23718 + C23721 - C23720) * C139736) *
                C139984 +
            ((C39499 - C39498 + C39501 - C39500) * C5816 +
             (C39503 - C39502 + C39505 - C39504) * C5811 +
             (C139983 * C5341 - C21860 * C5275 + C139873 * C14761 -
              C21861 * C14659) *
                 C5818 +
             (C139983 * C5345 - C21860 * C5282 + C139873 * C14762 -
              C21861 * C14661) *
                 C139736) *
                C139899) *
               C140002) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexz[15] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C139984 * C266 - C29624 * C108 + C139899 * C1741 -
                        C29625 * C1570) *
                           C5816 +
                       (C139984 * C272 - C29624 * C115 + C139899 * C1746 -
                        C29625 * C1579) *
                           C5811 +
                       (C29627 - C29628 + C29629 - C29630) * C5818 +
                       (C29631 - C29632 + C29633 - C29634) * C139736) *
                          C139983 +
                      ((C38340 - C38341 + C38342 - C38343) * C5816 +
                       (C38344 - C38345 + C38346 - C38347) * C5811 +
                       C38364 * C5818 + C38365 * C139736) *
                          C139873) *
                         C4096 +
                     (((C29624 * C1570 - C139984 * C1741 + C29625 * C5273 -
                        C139899 * C5397) *
                           C5816 +
                       (C29624 * C1579 - C139984 * C1746 + C29625 * C5278 -
                        C139899 * C5401) *
                           C5811 +
                       (C31458 - C31459 + C31460 - C31461) * C5818 +
                       (C31462 - C31463 + C31464 - C31465) * C139736) *
                          C139983 +
                      ((C42968 - C42969 + C42970 - C42971) * C5816 +
                       (C42972 - C42973 + C42974 - C42975) * C5811 +
                       (C39640 - C39641 + C39642 - C39643) * C5818 +
                       (C39644 - C39645 + C39646 - C39647) * C139736) *
                          C139873) *
                         C140002) *
                        C139792 * C2324 +
                    ((((C29628 - C29627 + C29630 - C29629) * C5816 +
                       (C29632 - C29631 + C29634 - C29633) * C5811 +
                       (C29636 - C29635 + C29638 - C29637) * C5818 +
                       (C29640 - C29639 + C29642 - C29641) * C139736) *
                          C139983 +
                      (C38366 * C5816 + C38367 * C5811 +
                       (C30479 - C30480 + C30481 - C30482) * C5818 +
                       (C30483 - C30484 + C30485 - C30486) * C139736) *
                          C139873) *
                         C4096 +
                     (((C31459 - C31458 + C31461 - C31460) * C5816 +
                       (C31463 - C31462 + C31465 - C31464) * C5811 +
                       (C31467 - C31466 + C31469 - C31468) * C5818 +
                       (C31471 - C31470 + C31473 - C31472) * C139736) *
                          C139983 +
                      ((C39641 - C39640 + C39643 - C39642) * C5816 +
                       (C39645 - C39644 + C39647 - C39646) * C5811 +
                       (C139984 * C3596 - C29624 * C3440 + C139899 * C14869 -
                        C29625 * C14659) *
                           C5818 +
                       (C139984 * C3600 - C29624 * C3447 + C139899 * C14870 -
                        C29625 * C14661) *
                           C139736) *
                          C139873) *
                         C140002) *
                        C139792 * C139998)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[15] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5811 * C114 - C5816 * C108 + C139736 * C116 - C5818 * C109) *
                 C21860 +
             (C5811 * C354 - C5816 * C348 + C139736 * C355 - C5818 * C349) *
                 C139983 +
             (C7039 - C7040 + C7041 - C7042) * C21861 +
             (C7043 - C7044 + C7045 - C7046) * C139873) *
                C139984 +
            ((C16035 - C16036 + C16037 - C16038) * C21860 +
             (C16039 - C16040 + C16041 - C16042) * C139983 + C43114 * C21861 +
             C43115 * C139873) *
                C139899) *
               C4096 +
           (((C16036 - C16035 + C16038 - C16037) * C21860 +
             (C16040 - C16039 + C16042 - C16041) * C139983 + C43116 * C21861 +
             C43117 * C139873) *
                C139984 +
            ((C16044 - C16043 + C16046 - C16045) * C21860 +
             (C16048 - C16047 + C16050 - C16049) * C139983 +
             (C18639 - C18640 + C18641 - C18642) * C21861 +
             (C18643 - C18644 + C18645 - C18646) * C139873) *
                C139899) *
               C140002) *
              C139792 * C2324 +
          ((((C5816 * C109 - C5811 * C116 + C5818 * C110 - C139736 * C118) *
                 C21860 +
             (C5816 * C349 - C5811 * C355 + C5818 * C350 - C139736 * C356) *
                 C139983 +
             (C7055 - C7056 + C7057 - C7058) * C21861 +
             (C7059 - C7060 + C7061 - C7062) * C139873) *
                C139984 +
            ((C16051 - C16052 + C16053 - C16054) * C21860 +
             (C16055 - C16056 + C16057 - C16058) * C139983 +
             (C38498 - C38499 + C38500 - C38501) * C21861 +
             (C38502 - C38503 + C38504 - C38505) * C139873) *
                C139899) *
               C4096 +
           (((C16052 - C16051 + C16054 - C16053) * C21860 +
             (C16056 - C16055 + C16058 - C16057) * C139983 +
             (C38499 - C38498 + C38501 - C38500) * C21861 +
             (C38503 - C38502 + C38505 - C38504) * C139873) *
                C139984 +
            ((C16060 - C16059 + C16062 - C16061) * C21860 +
             (C16064 - C16063 + C16066 - C16065) * C139983 +
             (C5811 * C13132 - C5816 * C13127 + C139736 * C14660 -
              C5818 * C14659) *
                 C21861 +
             (C5811 * C13385 - C5816 * C13381 + C139736 * C14982 -
              C5818 * C14981) *
                 C139873) *
                C139899) *
               C140002) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[15] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C21860 * C183 - C22116 * C108 - C21860 * C348 + C139983 * C411 +
              C21861 * C896 - C22117 * C813 - C21861 * C1072 +
              C139873 * C1151) *
                 C5811 +
             (C22155 + C22156) * C139736) *
                C139984 +
            ((C39934 + C39935) * C5811 + C39916 * C139736) * C139899) *
               C4096 -
           (((C39936 + C39937) * C139736 +
             (C21861 * C13216 - C22117 * C13126 - C21861 * C13380 +
              C139873 * C13462 + C21860 * C5339 - C22116 * C5273 -
              C21860 * C5455 + C139983 * C5513) *
                 C5811) *
                C139899 +
            (C39925 * C139736 + (C39935 + C39934) * C5811) * C139984) *
               C140002) *
              C139792 * C2324 +
          (((C39916 * C5811 + (C24045 + C24044) * C139736) * C139984 +
            ((C39937 + C39936) * C5811 +
             (C21860 * C5341 - C22116 * C5275 - C21860 * C5457 +
              C139983 * C5515 + C21861 * C14761 - C22117 * C14659 -
              C21861 * C14981 + C139873 * C15081) *
                 C139736) *
                C139899) *
               C140002 -
           (((C24044 + C24045) * C139736 + C39925 * C5811) * C139899 +
            ((C22158 + C22157) * C139736 + (C22156 + C22155) * C5811) *
                C139984) *
               C4096) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[15] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C139984 * C266 - C29624 * C108 + C139899 * C1741 -
                        C29625 * C1570) *
                           C21860 +
                       (C139984 * C495 - C29624 * C348 + C139899 * C1997 -
                        C29625 * C1829) *
                           C139983 +
                       (C38340 - C38341 + C38342 - C38343) * C21861 +
                       (C38780 - C38781 + C38782 - C38783) * C139873) *
                          C5811 +
                      ((C29627 - C29628 + C29629 - C29630) * C21860 +
                       (C29879 - C29880 + C29881 - C29882) * C139983 +
                       C38364 * C21861 + C38792 * C139873) *
                          C139736) *
                         C4096 +
                     (((C29624 * C1570 - C139984 * C1741 + C29625 * C5273 -
                        C139899 * C5397) *
                           C21860 +
                       (C29624 * C1829 - C139984 * C1997 + C29625 * C5455 -
                        C139899 * C5567) *
                           C139983 +
                       (C42968 - C42969 + C42970 - C42971) * C21861 +
                       (C43392 - C43393 + C43394 - C43395) * C139873) *
                          C5811 +
                      ((C31458 - C31459 + C31460 - C31461) * C21860 +
                       (C31798 - C31799 + C31800 - C31801) * C139983 +
                       (C39640 - C39641 + C39642 - C39643) * C21861 +
                       (C40068 - C40069 + C40070 - C40071) * C139873) *
                          C139736) *
                         C140002) *
                        C139792 * C2324 +
                    ((((C29628 - C29627 + C29630 - C29629) * C21860 +
                       (C29880 - C29879 + C29882 - C29881) * C139983 +
                       C38366 * C21861 + C38793 * C139873) *
                          C5811 +
                      ((C29636 - C29635 + C29638 - C29637) * C21860 +
                       (C29885 - C29884 + C29887 - C29886) * C139983 +
                       (C30479 - C30480 + C30481 - C30482) * C21861 +
                       (C30792 - C30793 + C30794 - C30795) * C139873) *
                          C139736) *
                         C4096 +
                     (((C31459 - C31458 + C31461 - C31460) * C21860 +
                       (C31799 - C31798 + C31801 - C31800) * C139983 +
                       (C39641 - C39640 + C39643 - C39642) * C21861 +
                       (C40069 - C40068 + C40071 - C40070) * C139873) *
                          C5811 +
                      ((C31467 - C31466 + C31469 - C31468) * C21860 +
                       (C31803 - C31802 + C31805 - C31804) * C139983 +
                       (C139984 * C3596 - C29624 * C3440 + C139899 * C14869 -
                        C29625 * C14659) *
                           C21861 +
                       (C139984 * C3814 - C29624 * C3670 + C139899 * C15194 -
                        C29625 * C14981) *
                           C139873) *
                          C139736) *
                         C140002) *
                        C139792 * C139998)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[15] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5811 * C114 - C5816 * C108 + C139736 * C116 - C5818 * C109) *
                 C29624 +
             (C5811 * C573 - C5816 * C567 + C139736 * C574 - C5818 * C568) *
                 C139984 +
             (C16035 - C16036 + C16037 - C16038) * C29625 +
             (C16408 - C16409 + C16410 - C16411) * C139899) *
                C139983 +
            ((C7039 - C7040 + C7041 - C7042) * C29624 +
             (C7408 - C7409 + C7410 - C7411) * C139984 + C43114 * C29625 +
             C43530 * C139899) *
                C139873) *
               C4096 +
           (((C16036 - C16035 + C16038 - C16037) * C29624 +
             (C16409 - C16408 + C16411 - C16410) * C139984 +
             (C16044 - C16043 + C16046 - C16045) * C29625 +
             (C16413 - C16412 + C16415 - C16414) * C139899) *
                C139983 +
            (C43116 * C29624 + C43531 * C139984 +
             (C18639 - C18640 + C18641 - C18642) * C29625 +
             (C18967 - C18968 + C18969 - C18970) * C139899) *
                C139873) *
               C140002) *
              C139792 * C2324 +
          ((((C5816 * C109 - C5811 * C116 + C5818 * C110 - C139736 * C118) *
                 C29624 +
             (C5816 * C568 - C5811 * C574 + C5818 * C569 - C139736 * C575) *
                 C139984 +
             (C16051 - C16052 + C16053 - C16054) * C29625 +
             (C16416 - C16417 + C16418 - C16419) * C139899) *
                C139983 +
            ((C7055 - C7056 + C7057 - C7058) * C29624 +
             (C7416 - C7417 + C7418 - C7419) * C139984 +
             (C38498 - C38499 + C38500 - C38501) * C29625 +
             (C38924 - C38925 + C38926 - C38927) * C139899) *
                C139873) *
               C4096 +
           (((C16052 - C16051 + C16054 - C16053) * C29624 +
             (C16417 - C16416 + C16419 - C16418) * C139984 +
             (C16060 - C16059 + C16062 - C16061) * C29625 +
             (C16421 - C16420 + C16423 - C16422) * C139899) *
                C139983 +
            ((C38499 - C38498 + C38501 - C38500) * C29624 +
             (C38925 - C38924 + C38927 - C38926) * C139984 +
             (C5811 * C13132 - C5816 * C13127 + C139736 * C14660 -
              C5818 * C14659) *
                 C29625 +
             (C5811 * C13623 - C5816 * C13619 + C139736 * C15300 -
              C5818 * C15299) *
                 C139899) *
                C139873) *
               C140002) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eezy[15] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139983 * C183 - C21860 * C108 + C139873 * C896 - C21861 * C813) *
                 C29624 +
             (C139983 * C629 - C21860 * C567 + C139873 * C1393 -
              C21861 * C1317) *
                 C139984 +
             (C39482 - C39483 + C39484 - C39485) * C29625 +
             (C40332 - C40333 + C40334 - C40335) * C139899) *
                C5811 +
            ((C21863 - C21864 + C21865 - C21866) * C29624 +
             (C22392 - C22393 + C22394 - C22395) * C139984 + C39506 * C29625 +
             C40344 * C139899) *
                C139736) *
               C4096 +
           (((C39483 - C39482 + C39485 - C39484) * C29624 +
             (C40333 - C40332 + C40335 - C40334) * C139984 +
             (C21860 * C5273 - C139983 * C5339 + C21861 * C13126 -
              C139873 * C13216) *
                 C29625 +
             (C21860 * C5621 - C139983 * C5679 + C21861 * C13618 -
              C139873 * C13700) *
                 C139899) *
                C5811 +
            (C39508 * C29624 + C40345 * C139984 +
             (C39498 - C39499 + C39500 - C39501) * C29625 +
             (C40340 - C40341 + C40342 - C40343) * C139899) *
                C139736) *
               C140002) *
              C139792 * C2324 +
          ((((C21864 - C21863 + C21866 - C21865) * C29624 +
             (C22393 - C22392 + C22395 - C22394) * C139984 + C39508 * C29625 +
             C40345 * C139899) *
                C5811 +
            ((C21872 - C21871 + C21874 - C21873) * C29624 +
             (C22398 - C22397 + C22400 - C22399) * C139984 +
             (C23714 - C23715 + C23716 - C23717) * C29625 +
             (C24348 - C24349 + C24350 - C24351) * C139899) *
                C139736) *
               C4096 +
           ((C39506 * C29624 + C40344 * C139984 +
             (C39499 - C39498 + C39501 - C39500) * C29625 +
             (C40341 - C40340 + C40343 - C40342) * C139899) *
                C5811 +
            ((C23715 - C23714 + C23717 - C23716) * C29624 +
             (C24349 - C24348 + C24351 - C24350) * C139984 +
             (C139983 * C5341 - C21860 * C5275 + C139873 * C14761 -
              C21861 * C14659) *
                 C29625 +
             (C139983 * C5681 - C21860 * C5623 + C139873 * C15399 -
              C21861 * C15299) *
                 C139899) *
                C139736) *
               C140002) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eezz[15] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C29624 * C266 - C30126 * C108 - C29624 * C567 + C139984 * C702 +
              C29625 * C1741 - C30127 * C1570 - C29625 * C2074 +
              C139899 * C2230) *
                 C139983 +
             (C39218 + C39219) * C139873) *
                C5811 +
            ((C30165 + C30166) * C139983 + C39200 * C139873) * C139736) *
               C4096 -
           (((C40488 + C40489) * C139873 + (C32139 + C32140) * C139983) *
                C139736 +
            ((C43808 + C43809) * C139873 +
             (C29625 * C5397 - C30127 * C5273 - C29625 * C5621 +
              C139899 * C5733 + C29624 * C1741 - C30126 * C1570 -
              C29624 * C2074 + C139984 * C2230) *
                 C139983) *
                C5811) *
               C140002) *
              C139792 * C2324 +
          ((((C32140 + C32139) * C139983 + (C40489 + C40488) * C139873) *
                C5811 +
            ((C32138 + C32137) * C139983 +
             (C29624 * C3596 - C30126 * C3440 - C29624 * C3884 +
              C139984 * C4028 + C29625 * C14869 - C30127 * C14659 -
              C29625 * C15299 + C139899 * C15502) *
                 C139873) *
                C139736) *
               C140002 -
           (((C31116 + C31117) * C139873 + (C30168 + C30167) * C139983) *
                C139736 +
            (C39209 * C139873 + (C30166 + C30165) * C139983) * C5811) *
               C4096) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexx[16] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5816 * C114 - C5817 * C108 - C5816 * C115 + C5811 * C126 +
              C5818 * C116 - C5819 * C109 - C5818 * C117 + C139736 * C127) *
                 C139984 +
             (C15683 + C15684) * C139899) *
                C139983 +
            ((C6687 + C6688) * C139984 + C42698 * C139899) * C139873) *
               C4096 -
           (((C18324 + C18323) * C139899 + C42699 * C139984) * C139873 +
            ((C15686 + C15685) * C139899 + (C15684 + C15683) * C139984) *
                C139983) *
               C140002) *
              C806 +
          (((C42698 * C139984 + (C18323 + C18324) * C139899) * C139983 +
            ((C10428 + C10427) * C139984 +
             (C5816 * C13134 - C5817 * C13128 - C5816 * C13135 +
              C5811 * C13140 + C5818 * C13136 - C5819 * C13129 -
              C5818 * C13137 + C139736 * C13141) *
                 C139899) *
                C139873) *
               C140002 -
           (((C10427 + C10428) * C139899 + (C6690 + C6689) * C139984) *
                C139873 +
            (C42699 * C139899 + (C6688 + C6687) * C139984) * C139983) *
               C4096) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eexy[16] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139983 * C183 - C21860 * C108 + C139873 * C896 - C21861 * C813) *
                 C5816 +
             (C139983 * C189 - C21860 * C115 + C139873 * C901 - C21861 * C822) *
                 C5811 +
             (C21863 - C21864 + C21865 - C21866) * C5818 +
             (C21867 - C21868 + C21869 - C21870) * C139736) *
                C139984 +
            ((C39482 - C39483 + C39484 - C39485) * C5816 +
             (C39486 - C39487 + C39488 - C39489) * C5811 + C39506 * C5818 +
             C39507 * C139736) *
                C139899) *
               C4096 +
           (((C39483 - C39482 + C39485 - C39484) * C5816 +
             (C39487 - C39486 + C39489 - C39488) * C5811 + C39508 * C5818 +
             C39509 * C139736) *
                C139984 +
            ((C21860 * C5273 - C139983 * C5339 + C21861 * C13126 -
              C139873 * C13216) *
                 C5816 +
             (C21860 * C5278 - C139983 * C5343 + C21861 * C13131 -
              C139873 * C13220) *
                 C5811 +
             (C39498 - C39499 + C39500 - C39501) * C5818 +
             (C39502 - C39503 + C39504 - C39505) * C139736) *
                C139899) *
               C140002) *
              C806 +
          ((((C21860 * C813 - C139983 * C896 + C21861 * C2908 -
              C139873 * C2974) *
                 C5816 +
             (C21860 * C822 - C139983 * C901 + C21861 * C2913 -
              C139873 * C2978) *
                 C5811 +
             (C22729 - C22730 + C22731 - C22732) * C5818 +
             (C22733 - C22734 + C22735 - C22736) * C139736) *
                C139984 +
            ((C42830 - C42831 + C42832 - C42833) * C5816 +
             (C42834 - C42835 + C42836 - C42837) * C5811 +
             (C38202 - C38203 + C38204 - C38205) * C5818 +
             (C38206 - C38207 + C38208 - C38209) * C139736) *
                C139899) *
               C4096 +
           (((C42831 - C42830 + C42833 - C42832) * C5816 +
             (C42835 - C42834 + C42837 - C42836) * C5811 +
             (C38203 - C38202 + C38205 - C38204) * C5818 +
             (C38207 - C38206 + C38209 - C38208) * C139736) *
                C139984 +
            ((C139983 * C13216 - C21860 * C13126 + C139873 * C13217 -
              C21861 * C13128) *
                 C5816 +
             (C139983 * C13220 - C21860 * C13131 + C139873 * C13221 -
              C21861 * C13135) *
                 C5811 +
             (C139983 * C13218 - C21860 * C13127 + C139873 * C13219 -
              C21861 * C13129) *
                 C5818 +
             (C139983 * C13222 - C21860 * C13133 + C139873 * C13223 -
              C21861 * C13137) *
                 C139736) *
                C139899) *
               C140002) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eexz[16] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C139984 * C266 - C29624 * C108 + C139899 * C1741 -
                        C29625 * C1570) *
                           C5816 +
                       (C139984 * C272 - C29624 * C115 + C139899 * C1746 -
                        C29625 * C1579) *
                           C5811 +
                       (C29627 - C29628 + C29629 - C29630) * C5818 +
                       (C29631 - C29632 + C29633 - C29634) * C139736) *
                          C139983 +
                      ((C38340 - C38341 + C38342 - C38343) * C5816 +
                       (C38344 - C38345 + C38346 - C38347) * C5811 +
                       C38364 * C5818 + C38365 * C139736) *
                          C139873) *
                         C4096 +
                     (((C29624 * C1570 - C139984 * C1741 + C29625 * C5273 -
                        C139899 * C5397) *
                           C5816 +
                       (C29624 * C1579 - C139984 * C1746 + C29625 * C5278 -
                        C139899 * C5401) *
                           C5811 +
                       (C31458 - C31459 + C31460 - C31461) * C5818 +
                       (C31462 - C31463 + C31464 - C31465) * C139736) *
                          C139983 +
                      ((C42968 - C42969 + C42970 - C42971) * C5816 +
                       (C42972 - C42973 + C42974 - C42975) * C5811 +
                       (C39640 - C39641 + C39642 - C39643) * C5818 +
                       (C39644 - C39645 + C39646 - C39647) * C139736) *
                          C139873) *
                         C140002) *
                        C806 +
                    ((((C38341 - C38340 + C38343 - C38342) * C5816 +
                       (C38345 - C38344 + C38347 - C38346) * C5811 +
                       C38366 * C5818 + C38367 * C139736) *
                          C139983 +
                      ((C41954 - C41955 + C41956 - C41957) * C5816 +
                       (C41958 - C41959 + C41960 - C41961) * C5811 +
                       (C38356 - C38357 + C38358 - C38359) * C5818 +
                       (C38360 - C38361 + C38362 - C38363) * C139736) *
                          C139873) *
                         C4096 +
                     (((C42969 - C42968 + C42971 - C42970) * C5816 +
                       (C42973 - C42972 + C42975 - C42974) * C5811 +
                       (C39641 - C39640 + C39643 - C39642) * C5818 +
                       (C39645 - C39644 + C39647 - C39646) * C139736) *
                          C139983 +
                      ((C139984 * C7979 - C29624 * C7754 + C139899 * C13300 -
                        C29625 * C13128) *
                           C5816 +
                       (C139984 * C7982 - C29624 * C7759 + C139899 * C13304 -
                        C29625 * C13135) *
                           C5811 +
                       (C139984 * C7980 - C29624 * C7753 + C139899 * C13301 -
                        C29625 * C13129) *
                           C5818 +
                       (C139984 * C7983 - C29624 * C7757 + C139899 * C13305 -
                        C29625 * C13137) *
                           C139736) *
                          C139873) *
                         C140002) *
                        C140000) *
                   C139758) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[16] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5811 * C114 - C5816 * C108 + C139736 * C116 - C5818 * C109) *
                 C21860 +
             (C5811 * C354 - C5816 * C348 + C139736 * C355 - C5818 * C349) *
                 C139983 +
             (C7039 - C7040 + C7041 - C7042) * C21861 +
             (C7043 - C7044 + C7045 - C7046) * C139873) *
                C139984 +
            ((C16035 - C16036 + C16037 - C16038) * C21860 +
             (C16039 - C16040 + C16041 - C16042) * C139983 + C43114 * C21861 +
             C43115 * C139873) *
                C139899) *
               C4096 +
           (((C16036 - C16035 + C16038 - C16037) * C21860 +
             (C16040 - C16039 + C16042 - C16041) * C139983 + C43116 * C21861 +
             C43117 * C139873) *
                C139984 +
            ((C16044 - C16043 + C16046 - C16045) * C21860 +
             (C16048 - C16047 + C16050 - C16049) * C139983 +
             (C18639 - C18640 + C18641 - C18642) * C21861 +
             (C18643 - C18644 + C18645 - C18646) * C139873) *
                C139899) *
               C140002) *
              C806 +
          ((((C7040 - C7039 + C7042 - C7041) * C21860 +
             (C7044 - C7043 + C7046 - C7045) * C139983 +
             (C7048 - C7047 + C7050 - C7049) * C21861 +
             (C7052 - C7051 + C7054 - C7053) * C139873) *
                C139984 +
            (C43116 * C21860 + C43117 * C139983 +
             (C10753 - C10754 + C10755 - C10756) * C21861 +
             (C10757 - C10758 + C10759 - C10760) * C139873) *
                C139899) *
               C4096 +
           ((C43114 * C21860 + C43115 * C139983 +
             (C10754 - C10753 + C10756 - C10755) * C21861 +
             (C10758 - C10757 + C10760 - C10759) * C139873) *
                C139984 +
            ((C18640 - C18639 + C18642 - C18641) * C21860 +
             (C18644 - C18643 + C18646 - C18645) * C139983 +
             (C5811 * C13134 - C5816 * C13128 + C139736 * C13136 -
              C5818 * C13129) *
                 C21861 +
             (C5811 * C13386 - C5816 * C13382 + C139736 * C13387 -
              C5818 * C13383) *
                 C139873) *
                C139899) *
               C140002) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eeyy[16] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C21860 * C183 - C22116 * C108 - C21860 * C348 + C139983 * C411 +
              C21861 * C896 - C22117 * C813 - C21861 * C1072 +
              C139873 * C1151) *
                 C5811 +
             (C22155 + C22156) * C139736) *
                C139984 +
            ((C39934 + C39935) * C5811 + C39916 * C139736) * C139899) *
               C4096 -
           (((C39936 + C39937) * C139736 +
             (C21861 * C13216 - C22117 * C13126 - C21861 * C13380 +
              C139873 * C13462 + C21860 * C5339 - C22116 * C5273 -
              C21860 * C5455 + C139983 * C5513) *
                 C5811) *
                C139899 +
            (C39925 * C139736 + (C39935 + C39934) * C5811) * C139984) *
               C140002) *
              C806 +
          ((((C43260 + C43261) * C5811 + (C38649 + C38648) * C139736) *
                C139984 +
            ((C21860 * C13216 - C22116 * C13126 - C21860 * C13380 +
              C139983 * C13462 + C21861 * C13217 - C22117 * C13128 -
              C21861 * C13382 + C139873 * C13463) *
                 C5811 +
             (C21860 * C13218 - C22116 * C13127 - C21860 * C13381 +
              C139983 * C13464 + C21861 * C13219 - C22117 * C13129 -
              C21861 * C13383 + C139873 * C13465) *
                 C139736) *
                C139899) *
               C140002 -
           (((C38648 + C38649) * C139736 + (C43261 + C43260) * C5811) *
                C139899 +
            ((C23091 + C23092) * C139736 +
             (C21861 * C2974 - C22117 * C2908 - C21861 * C3090 +
              C139873 * C3148 + C21860 * C896 - C22116 * C813 - C21860 * C1072 +
              C139983 * C1151) *
                 C5811) *
                C139984) *
               C4096) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eeyz[16] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C139984 * C266 - C29624 * C108 + C139899 * C1741 -
                        C29625 * C1570) *
                           C21860 +
                       (C139984 * C495 - C29624 * C348 + C139899 * C1997 -
                        C29625 * C1829) *
                           C139983 +
                       (C38340 - C38341 + C38342 - C38343) * C21861 +
                       (C38780 - C38781 + C38782 - C38783) * C139873) *
                          C5811 +
                      ((C29627 - C29628 + C29629 - C29630) * C21860 +
                       (C29879 - C29880 + C29881 - C29882) * C139983 +
                       C38364 * C21861 + C38792 * C139873) *
                          C139736) *
                         C4096 +
                     (((C29624 * C1570 - C139984 * C1741 + C29625 * C5273 -
                        C139899 * C5397) *
                           C21860 +
                       (C29624 * C1829 - C139984 * C1997 + C29625 * C5455 -
                        C139899 * C5567) *
                           C139983 +
                       (C42968 - C42969 + C42970 - C42971) * C21861 +
                       (C43392 - C43393 + C43394 - C43395) * C139873) *
                          C5811 +
                      ((C31458 - C31459 + C31460 - C31461) * C21860 +
                       (C31798 - C31799 + C31800 - C31801) * C139983 +
                       (C39640 - C39641 + C39642 - C39643) * C21861 +
                       (C40068 - C40069 + C40070 - C40071) * C139873) *
                          C139736) *
                         C140002) *
                        C806 +
                    ((((C38341 - C38340 + C38343 - C38342) * C21860 +
                       (C38781 - C38780 + C38783 - C38782) * C139983 +
                       (C41954 - C41955 + C41956 - C41957) * C21861 +
                       (C42256 - C42257 + C42258 - C42259) * C139873) *
                          C5811 +
                      (C38366 * C21860 + C38793 * C139983 +
                       (C38356 - C38357 + C38358 - C38359) * C21861 +
                       (C38788 - C38789 + C38790 - C38791) * C139873) *
                          C139736) *
                         C4096 +
                     (((C42969 - C42968 + C42971 - C42970) * C21860 +
                       (C43393 - C43392 + C43395 - C43394) * C139983 +
                       (C139984 * C7979 - C29624 * C7754 + C139899 * C13300 -
                        C29625 * C13128) *
                           C21861 +
                       (C139984 * C8317 - C29624 * C8091 + C139899 * C13541 -
                        C29625 * C13382) *
                           C139873) *
                          C5811 +
                      ((C39641 - C39640 + C39643 - C39642) * C21860 +
                       (C40069 - C40068 + C40071 - C40070) * C139983 +
                       (C139984 * C7980 - C29624 * C7753 + C139899 * C13301 -
                        C29625 * C13129) *
                           C21861 +
                       (C139984 * C8318 - C29624 * C8092 + C139899 * C13543 -
                        C29625 * C13383) *
                           C139873) *
                          C139736) *
                         C140002) *
                        C140000) *
                   C139758) /
                  (p * q * std::sqrt(p + q));
    d2eezx[16] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5811 * C114 - C5816 * C108 + C139736 * C116 - C5818 * C109) *
                 C29624 +
             (C5811 * C573 - C5816 * C567 + C139736 * C574 - C5818 * C568) *
                 C139984 +
             (C16035 - C16036 + C16037 - C16038) * C29625 +
             (C16408 - C16409 + C16410 - C16411) * C139899) *
                C139983 +
            ((C7039 - C7040 + C7041 - C7042) * C29624 +
             (C7408 - C7409 + C7410 - C7411) * C139984 + C43114 * C29625 +
             C43530 * C139899) *
                C139873) *
               C4096 +
           (((C16036 - C16035 + C16038 - C16037) * C29624 +
             (C16409 - C16408 + C16411 - C16410) * C139984 +
             (C16044 - C16043 + C16046 - C16045) * C29625 +
             (C16413 - C16412 + C16415 - C16414) * C139899) *
                C139983 +
            (C43116 * C29624 + C43531 * C139984 +
             (C18639 - C18640 + C18641 - C18642) * C29625 +
             (C18967 - C18968 + C18969 - C18970) * C139899) *
                C139873) *
               C140002) *
              C806 +
          ((((C7040 - C7039 + C7042 - C7041) * C29624 +
             (C7409 - C7408 + C7411 - C7410) * C139984 + C43116 * C29625 +
             C43531 * C139899) *
                C139983 +
            ((C7048 - C7047 + C7050 - C7049) * C29624 +
             (C7413 - C7412 + C7415 - C7414) * C139984 +
             (C10753 - C10754 + C10755 - C10756) * C29625 +
             (C11071 - C11072 + C11073 - C11074) * C139899) *
                C139873) *
               C4096 +
           ((C43114 * C29624 + C43530 * C139984 +
             (C18640 - C18639 + C18642 - C18641) * C29625 +
             (C18968 - C18967 + C18970 - C18969) * C139899) *
                C139983 +
            ((C10754 - C10753 + C10756 - C10755) * C29624 +
             (C11072 - C11071 + C11074 - C11073) * C139984 +
             (C5811 * C13134 - C5816 * C13128 + C139736 * C13136 -
              C5818 * C13129) *
                 C29625 +
             (C5811 * C13624 - C5816 * C13620 + C139736 * C13625 -
              C5818 * C13621) *
                 C139899) *
                C139873) *
               C140002) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eezy[16] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139983 * C183 - C21860 * C108 + C139873 * C896 - C21861 * C813) *
                 C29624 +
             (C139983 * C629 - C21860 * C567 + C139873 * C1393 -
              C21861 * C1317) *
                 C139984 +
             (C39482 - C39483 + C39484 - C39485) * C29625 +
             (C40332 - C40333 + C40334 - C40335) * C139899) *
                C5811 +
            ((C21863 - C21864 + C21865 - C21866) * C29624 +
             (C22392 - C22393 + C22394 - C22395) * C139984 + C39506 * C29625 +
             C40344 * C139899) *
                C139736) *
               C4096 +
           (((C39483 - C39482 + C39485 - C39484) * C29624 +
             (C40333 - C40332 + C40335 - C40334) * C139984 +
             (C21860 * C5273 - C139983 * C5339 + C21861 * C13126 -
              C139873 * C13216) *
                 C29625 +
             (C21860 * C5621 - C139983 * C5679 + C21861 * C13618 -
              C139873 * C13700) *
                 C139899) *
                C5811 +
            (C39508 * C29624 + C40345 * C139984 +
             (C39498 - C39499 + C39500 - C39501) * C29625 +
             (C40340 - C40341 + C40342 - C40343) * C139899) *
                C139736) *
               C140002) *
              C806 +
          ((((C21860 * C813 - C139983 * C896 + C21861 * C2908 -
              C139873 * C2974) *
                 C29624 +
             (C21860 * C1317 - C139983 * C1393 + C21861 * C3256 -
              C139873 * C3314) *
                 C139984 +
             (C42830 - C42831 + C42832 - C42833) * C29625 +
             (C43662 - C43663 + C43664 - C43665) * C139899) *
                C5811 +
            ((C22729 - C22730 + C22731 - C22732) * C29624 +
             (C23400 - C23401 + C23402 - C23403) * C139984 +
             (C38202 - C38203 + C38204 - C38205) * C29625 +
             (C39058 - C39059 + C39060 - C39061) * C139899) *
                C139736) *
               C4096 +
           (((C42831 - C42830 + C42833 - C42832) * C29624 +
             (C43663 - C43662 + C43665 - C43664) * C139984 +
             (C139983 * C13216 - C21860 * C13126 + C139873 * C13217 -
              C21861 * C13128) *
                 C29625 +
             (C139983 * C13700 - C21860 * C13618 + C139873 * C13701 -
              C21861 * C13620) *
                 C139899) *
                C5811 +
            ((C38203 - C38202 + C38205 - C38204) * C29624 +
             (C39059 - C39058 + C39061 - C39060) * C139984 +
             (C139983 * C13218 - C21860 * C13127 + C139873 * C13219 -
              C21861 * C13129) *
                 C29625 +
             (C139983 * C13702 - C21860 * C13619 + C139873 * C13703 -
              C21861 * C13621) *
                 C139899) *
                C139736) *
               C140002) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eezz[16] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C29624 * C266 - C30126 * C108 - C29624 * C567 + C139984 * C702 +
              C29625 * C1741 - C30127 * C1570 - C29625 * C2074 +
              C139899 * C2230) *
                 C139983 +
             (C39218 + C39219) * C139873) *
                C5811 +
            ((C30165 + C30166) * C139983 + C39200 * C139873) * C139736) *
               C4096 -
           (((C40488 + C40489) * C139873 + (C32139 + C32140) * C139983) *
                C139736 +
            ((C43808 + C43809) * C139873 +
             (C29625 * C5397 - C30127 * C5273 - C29625 * C5621 +
              C139899 * C5733 + C29624 * C1741 - C30126 * C1570 -
              C29624 * C2074 + C139984 * C2230) *
                 C139983) *
                C5811) *
               C140002) *
              C806 +
          ((((C43809 + C43808) * C139983 +
             (C29624 * C7979 - C30126 * C7754 - C29624 * C8422 +
              C139984 * C8634 + C29625 * C13300 - C30127 * C13128 -
              C29625 * C13620 + C139899 * C13779) *
                 C139873) *
                C5811 +
            ((C40489 + C40488) * C139983 +
             (C29624 * C7980 - C30126 * C7753 - C29624 * C8423 +
              C139984 * C8633 + C29625 * C13301 - C30127 * C13129 -
              C29625 * C13621 + C139899 * C13781) *
                 C139873) *
                C139736) *
               C140002 -
           (((C39220 + C39221) * C139873 + C39209 * C139983) * C139736 +
            ((C42566 + C42567) * C139873 + (C39219 + C39218) * C139983) *
                C5811) *
               C4096) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eexx[17] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C5816 * C114 - C5817 * C108 - C5816 * C115 + C5811 * C126 +
             C5818 * C116 - C5819 * C109 - C5818 * C117 + C139736 * C127) *
                C139984 +
            (C15683 + C15684) * C139899) *
               C139983 +
           ((C6687 + C6688) * C139984 + C42698 * C139899) * C139873) *
              C5270 -
          (((C18324 + C18323) * C139899 + C42699 * C139984) * C139873 +
           ((C15686 + C15685) * C139899 + (C15684 + C15683) * C139984) *
               C139983) *
              C5271 +
          ((C21021 * C139984 + (C21035 + C21034) * C139899) * C139983 +
           ((C18323 + C18324) * C139984 +
            (C5816 * C18304 - C5817 * C18302 - C5816 * C18305 + C5811 * C18308 +
             C5818 * C18306 - C5819 * C18303 - C5818 * C18307 +
             C139736 * C18309) *
                C139899) *
               C139873) *
              C5272) *
         C139792 * C139758) /
        (p * q * std::sqrt(p + q));
    d2eexy[17] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139983 * C183 - C21860 * C108 + C139873 * C896 - C21861 * C813) *
                C5816 +
            (C139983 * C189 - C21860 * C115 + C139873 * C901 - C21861 * C822) *
                C5811 +
            (C21863 - C21864 + C21865 - C21866) * C5818 +
            (C21867 - C21868 + C21869 - C21870) * C139736) *
               C139984 +
           ((C39482 - C39483 + C39484 - C39485) * C5816 +
            (C39486 - C39487 + C39488 - C39489) * C5811 + C39506 * C5818 +
            C39507 * C139736) *
               C139899) *
              C5270 +
          (((C39483 - C39482 + C39485 - C39484) * C5816 +
            (C39487 - C39486 + C39489 - C39488) * C5811 + C39508 * C5818 +
            C39509 * C139736) *
               C139984 +
           ((C46346 - C46347 + C46348 - C46349) * C5816 +
            (C46350 - C46351 + C46352 - C46353) * C5811 +
            (C39498 - C39499 + C39500 - C39501) * C5818 +
            (C39502 - C39503 + C39504 - C39505) * C139736) *
               C139899) *
              C5271 +
          (((C46347 - C46346 + C46349 - C46348) * C5816 +
            (C46351 - C46350 + C46353 - C46352) * C5811 +
            (C39499 - C39498 + C39501 - C39500) * C5818 +
            (C39503 - C39502 + C39505 - C39504) * C139736) *
               C139984 +
           ((C139983 * C15788 - C21860 * C15623 + C139873 * C18422 -
             C21861 * C18302) *
                C5816 +
            (C139983 * C15791 - C21860 * C15628 + C139873 * C18424 -
             C21861 * C18305) *
                C5811 +
            (C139983 * C15789 - C21860 * C15622 + C139873 * C18423 -
             C21861 * C18303) *
                C5818 +
            (C139983 * C15792 - C21860 * C15626 + C139873 * C18425 -
             C21861 * C18307) *
                C139736) *
               C139899) *
              C5272) *
         C139792 * C139758) /
        (p * q * std::sqrt(p + q));
    d2eexz[17] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C139984 * C266 - C29624 * C108 + C139899 * C1741 -
                       C29625 * C1570) *
                          C5816 +
                      (C139984 * C272 - C29624 * C115 + C139899 * C1746 -
                       C29625 * C1579) *
                          C5811 +
                      (C29627 - C29628 + C29629 - C29630) * C5818 +
                      (C29631 - C29632 + C29633 - C29634) * C139736) *
                         C139983 +
                     ((C38340 - C38341 + C38342 - C38343) * C5816 +
                      (C38344 - C38345 + C38346 - C38347) * C5811 +
                      C38364 * C5818 + C38365 * C139736) *
                         C139873) *
                        C5270 +
                    (((C29624 * C1570 - C139984 * C1741 + C29625 * C5273 -
                       C139899 * C5397) *
                          C5816 +
                      (C29624 * C1579 - C139984 * C1746 + C29625 * C5278 -
                       C139899 * C5401) *
                          C5811 +
                      (C31458 - C31459 + C31460 - C31461) * C5818 +
                      (C31462 - C31463 + C31464 - C31465) * C139736) *
                         C139983 +
                     ((C42968 - C42969 + C42970 - C42971) * C5816 +
                      (C42972 - C42973 + C42974 - C42975) * C5811 +
                      (C39640 - C39641 + C39642 - C39643) * C5818 +
                      (C39644 - C39645 + C39646 - C39647) * C139736) *
                         C139873) *
                        C5271 +
                    (((C139984 * C5397 - C29624 * C5273 + C139899 * C15912 -
                       C29625 * C15623) *
                          C5816 +
                      (C139984 * C5401 - C29624 * C5278 + C139899 * C15915 -
                       C29625 * C15628) *
                          C5811 +
                      (C139984 * C5398 - C29624 * C5274 + C139899 * C15913 -
                       C29625 * C15622) *
                          C5818 +
                      (C139984 * C5402 - C29624 * C5280 + C139899 * C15916 -
                       C29625 * C15626) *
                          C139736) *
                         C139983 +
                     ((C139984 * C13298 - C29624 * C13126 + C139899 * C18532 -
                       C29625 * C18302) *
                          C5816 +
                      (C139984 * C13302 - C29624 * C13131 + C139899 * C18534 -
                       C29625 * C18305) *
                          C5811 +
                      (C139984 * C13299 - C29624 * C13127 + C139899 * C18533 -
                       C29625 * C18303) *
                          C5818 +
                      (C139984 * C13303 - C29624 * C13133 + C139899 * C18535 -
                       C29625 * C18307) *
                          C139736) *
                         C139873) *
                        C5272) *
                   C139792 * C139758) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[17] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C5811 * C114 - C5816 * C108 + C139736 * C116 - C5818 * C109) *
                C21860 +
            (C5811 * C354 - C5816 * C348 + C139736 * C355 - C5818 * C349) *
                C139983 +
            (C7039 - C7040 + C7041 - C7042) * C21861 +
            (C7043 - C7044 + C7045 - C7046) * C139873) *
               C139984 +
           ((C16035 - C16036 + C16037 - C16038) * C21860 +
            (C16039 - C16040 + C16041 - C16042) * C139983 + C43114 * C21861 +
            C43115 * C139873) *
               C139899) *
              C5270 +
          (((C16036 - C16035 + C16038 - C16037) * C21860 +
            (C16040 - C16039 + C16042 - C16041) * C139983 + C43116 * C21861 +
            C43117 * C139873) *
               C139984 +
           ((C16044 - C16043 + C16046 - C16045) * C21860 +
            (C16048 - C16047 + C16050 - C16049) * C139983 +
            (C18639 - C18640 + C18641 - C18642) * C21861 +
            (C18643 - C18644 + C18645 - C18646) * C139873) *
               C139899) *
              C5271 +
          ((C21295 * C21860 + C21296 * C139983 +
            (C18640 - C18639 + C18642 - C18641) * C21861 +
            (C18644 - C18643 + C18646 - C18645) * C139873) *
               C139984 +
           ((C21288 - C21287 + C21290 - C21289) * C21860 +
            (C21292 - C21291 + C21294 - C21293) * C139983 +
            (C5811 * C18304 - C5816 * C18302 + C139736 * C18306 -
             C5818 * C18303) *
                C21861 +
            (C5811 * C18636 - C5816 * C18634 + C139736 * C18637 -
             C5818 * C18635) *
                C139873) *
               C139899) *
              C5272) *
         C139792 * C139758) /
        (p * q * std::sqrt(p + q));
    d2eeyy[17] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C21860 * C183 - C22116 * C108 - C21860 * C348 + C139983 * C411 +
             C21861 * C896 - C22117 * C813 - C21861 * C1072 + C139873 * C1151) *
                C5811 +
            (C22155 + C22156) * C139736) *
               C139984 +
           ((C39934 + C39935) * C5811 + C39916 * C139736) * C139899) *
              C5270 -
          (((C39936 + C39937) * C139736 + (C46660 + C46661) * C5811) * C139899 +
           (C39925 * C139736 + (C39935 + C39934) * C5811) * C139984) *
              C5271 +
          (((C46661 + C46660) * C5811 + (C39937 + C39936) * C139736) * C139984 +
           ((C21860 * C15788 - C22116 * C15623 - C21860 * C16028 +
             C139983 * C16165 + C21861 * C18422 - C22117 * C18302 -
             C21861 * C18634 + C139873 * C18744) *
                C5811 +
            (C21860 * C15789 - C22116 * C15622 - C21860 * C16029 +
             C139983 * C16164 + C21861 * C18423 - C22117 * C18303 -
             C21861 * C18635 + C139873 * C18745) *
                C139736) *
               C139899) *
              C5272) *
         C139792 * C139758) /
        (p * q * std::sqrt(p + q));
    d2eeyz[17] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C139984 * C266 - C29624 * C108 + C139899 * C1741 -
                       C29625 * C1570) *
                          C21860 +
                      (C139984 * C495 - C29624 * C348 + C139899 * C1997 -
                       C29625 * C1829) *
                          C139983 +
                      (C38340 - C38341 + C38342 - C38343) * C21861 +
                      (C38780 - C38781 + C38782 - C38783) * C139873) *
                         C5811 +
                     ((C29627 - C29628 + C29629 - C29630) * C21860 +
                      (C29879 - C29880 + C29881 - C29882) * C139983 +
                      C38364 * C21861 + C38792 * C139873) *
                         C139736) *
                        C5270 +
                    (((C29624 * C1570 - C139984 * C1741 + C29625 * C5273 -
                       C139899 * C5397) *
                          C21860 +
                      (C29624 * C1829 - C139984 * C1997 + C29625 * C5455 -
                       C139899 * C5567) *
                          C139983 +
                      (C42968 - C42969 + C42970 - C42971) * C21861 +
                      (C43392 - C43393 + C43394 - C43395) * C139873) *
                         C5811 +
                     ((C31458 - C31459 + C31460 - C31461) * C21860 +
                      (C31798 - C31799 + C31800 - C31801) * C139983 +
                      (C39640 - C39641 + C39642 - C39643) * C21861 +
                      (C40068 - C40069 + C40070 - C40071) * C139873) *
                         C139736) *
                        C5271 +
                    (((C139984 * C5397 - C29624 * C5273 + C139899 * C15912 -
                       C29625 * C15623) *
                          C21860 +
                      (C139984 * C5567 - C29624 * C5455 + C139899 * C16294 -
                       C29625 * C16028) *
                          C139983 +
                      (C139984 * C13298 - C29624 * C13126 + C139899 * C18532 -
                       C29625 * C18302) *
                          C21861 +
                      (C139984 * C13540 - C29624 * C13380 + C139899 * C18862 -
                       C29625 * C18634) *
                          C139873) *
                         C5811 +
                     ((C139984 * C5398 - C29624 * C5274 + C139899 * C15913 -
                       C29625 * C15622) *
                          C21860 +
                      (C139984 * C5568 - C29624 * C5456 + C139899 * C16295 -
                       C29625 * C16029) *
                          C139983 +
                      (C139984 * C13299 - C29624 * C13127 + C139899 * C18533 -
                       C29625 * C18303) *
                          C21861 +
                      (C139984 * C13542 - C29624 * C13381 + C139899 * C18863 -
                       C29625 * C18635) *
                          C139873) *
                         C139736) *
                        C5272) *
                   C139792 * C139758) /
                  (p * q * std::sqrt(p + q));
    d2eezx[17] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C5811 * C114 - C5816 * C108 + C139736 * C116 - C5818 * C109) *
                C29624 +
            (C5811 * C573 - C5816 * C567 + C139736 * C574 - C5818 * C568) *
                C139984 +
            (C16035 - C16036 + C16037 - C16038) * C29625 +
            (C16408 - C16409 + C16410 - C16411) * C139899) *
               C139983 +
           ((C7039 - C7040 + C7041 - C7042) * C29624 +
            (C7408 - C7409 + C7410 - C7411) * C139984 + C43114 * C29625 +
            C43530 * C139899) *
               C139873) *
              C5270 +
          (((C16036 - C16035 + C16038 - C16037) * C29624 +
            (C16409 - C16408 + C16411 - C16410) * C139984 +
            (C16044 - C16043 + C16046 - C16045) * C29625 +
            (C16413 - C16412 + C16415 - C16414) * C139899) *
               C139983 +
           (C43116 * C29624 + C43531 * C139984 +
            (C18639 - C18640 + C18641 - C18642) * C29625 +
            (C18967 - C18968 + C18969 - C18970) * C139899) *
               C139873) *
              C5271 +
          ((C21295 * C29624 + C21546 * C139984 +
            (C21288 - C21287 + C21290 - C21289) * C29625 +
            (C21543 - C21542 + C21545 - C21544) * C139899) *
               C139983 +
           ((C18640 - C18639 + C18642 - C18641) * C29624 +
            (C18968 - C18967 + C18970 - C18969) * C139984 +
            (C5811 * C18304 - C5816 * C18302 + C139736 * C18306 -
             C5818 * C18303) *
                C29625 +
            (C5811 * C18964 - C5816 * C18962 + C139736 * C18965 -
             C5818 * C18963) *
                C139899) *
               C139873) *
              C5272) *
         C139792 * C139758) /
        (p * q * std::sqrt(p + q));
    d2eezy[17] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139983 * C183 - C21860 * C108 + C139873 * C896 - C21861 * C813) *
                C29624 +
            (C139983 * C629 - C21860 * C567 + C139873 * C1393 -
             C21861 * C1317) *
                C139984 +
            (C39482 - C39483 + C39484 - C39485) * C29625 +
            (C40332 - C40333 + C40334 - C40335) * C139899) *
               C5811 +
           ((C21863 - C21864 + C21865 - C21866) * C29624 +
            (C22392 - C22393 + C22394 - C22395) * C139984 + C39506 * C29625 +
            C40344 * C139899) *
               C139736) *
              C5270 +
          (((C39483 - C39482 + C39485 - C39484) * C29624 +
            (C40333 - C40332 + C40335 - C40334) * C139984 +
            (C46346 - C46347 + C46348 - C46349) * C29625 +
            (C46956 - C46957 + C46958 - C46959) * C139899) *
               C5811 +
           (C39508 * C29624 + C40345 * C139984 +
            (C39498 - C39499 + C39500 - C39501) * C29625 +
            (C40340 - C40341 + C40342 - C40343) * C139899) *
               C139736) *
              C5271 +
          (((C46347 - C46346 + C46349 - C46348) * C29624 +
            (C46957 - C46956 + C46959 - C46958) * C139984 +
            (C139983 * C15788 - C21860 * C15623 + C139873 * C18422 -
             C21861 * C18302) *
                C29625 +
            (C139983 * C16521 - C21860 * C16401 + C139873 * C19068 -
             C21861 * C18962) *
                C139899) *
               C5811 +
           ((C39499 - C39498 + C39501 - C39500) * C29624 +
            (C40341 - C40340 + C40343 - C40342) * C139984 +
            (C139983 * C15789 - C21860 * C15622 + C139873 * C18423 -
             C21861 * C18303) *
                C29625 +
            (C139983 * C16522 - C21860 * C16402 + C139873 * C19069 -
             C21861 * C18963) *
                C139899) *
               C139736) *
              C5272) *
         C139792 * C139758) /
        (p * q * std::sqrt(p + q));
    d2eezz[17] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C29624 * C266 - C30126 * C108 - C29624 * C567 + C139984 * C702 +
             C29625 * C1741 - C30127 * C1570 - C29625 * C2074 +
             C139899 * C2230) *
                C139983 +
            (C39218 + C39219) * C139873) *
               C5811 +
           ((C30165 + C30166) * C139983 + C39200 * C139873) * C139736) *
              C5270 -
          (((C40488 + C40489) * C139873 + (C32139 + C32140) * C139983) *
               C139736 +
           ((C43808 + C43809) * C139873 +
            (C29625 * C5397 - C30127 * C5273 - C29625 * C5621 +
             C139899 * C5733 + C29624 * C1741 - C30126 * C1570 -
             C29624 * C2074 + C139984 * C2230) *
                C139983) *
               C5811) *
              C5271 +
          (((C29624 * C5397 - C30126 * C5273 - C29624 * C5621 +
             C139984 * C5733 + C29625 * C15912 - C30127 * C15623 -
             C29625 * C16401 + C139899 * C16633) *
                C139983 +
            (C29624 * C13298 - C30126 * C13126 - C29624 * C13618 +
             C139984 * C13778 + C29625 * C18532 - C30127 * C18302 -
             C29625 * C18962 + C139899 * C19172) *
                C139873) *
               C5811 +
           ((C29624 * C5398 - C30126 * C5274 - C29624 * C5622 +
             C139984 * C5734 + C29625 * C15913 - C30127 * C15622 -
             C29625 * C16402 + C139899 * C16632) *
                C139983 +
            (C29624 * C13299 - C30126 * C13127 - C29624 * C13619 +
             C139984 * C13780 + C29625 * C18533 - C30127 * C18303 -
             C29625 * C18963 + C139899 * C19173) *
                C139873) *
               C139736) *
              C5272) *
         C139792 * C139758) /
        (p * q * std::sqrt(p + q));
    d2eexx[18] +=
        (-std::pow(Pi, 2.5) *
         (((C5816 * C114 - C5817 * C108 - C5816 * C115 + C5811 * C126 +
            C5818 * C116 - C5819 * C109 - C5818 * C117 + C139736 * C127) *
               C139835 * C5813 +
           (C5816 * C821 - C5817 * C813 - C5816 * C822 + C5811 * C828 +
            C5818 * C819 - C5819 * C812 - C5818 * C820 + C139736 * C827) *
               C139835 * C5814 +
           (C5816 * C2912 - C5817 * C2908 - C5816 * C2913 + C5811 * C2920 +
            C5818 * C2914 - C5819 * C2909 - C5818 * C2915 + C139736 * C2921) *
               C139835 * C5815) *
              C139809 * C139792 * C97 -
          ((C5818 * C2916 - C5819 * C2910 - C5818 * C2917 + C139736 * C2922 +
            C5816 * C2914 - C5817 * C2909 - C5816 * C2915 + C5811 * C2921) *
               C139835 * C5815 +
           (C5818 * C817 - C5819 * C811 - C5818 * C818 + C139736 * C826 +
            C5816 * C819 - C5817 * C812 - C5816 * C820 + C5811 * C827) *
               C139835 * C5814 +
           (C5818 * C118 - C5819 * C110 - C5818 * C119 + C139736 * C128 +
            C5816 * C116 - C5817 * C109 - C5816 * C117 + C5811 * C127) *
               C139835 * C5813) *
              C139809 * C139792 * C98 +
          ((C5816 * C118 - C5817 * C110 - C5816 * C119 + C5811 * C128 +
            C5818 * C120 - C5819 * C111 - C5818 * C121 + C139736 * C129) *
               C139835 * C5813 +
           (C5816 * C817 - C5817 * C811 - C5816 * C818 + C5811 * C826 +
            C5818 * C815 - C5819 * C810 - C5818 * C816 + C139736 * C825) *
               C139835 * C5814 +
           (C5816 * C2916 - C5817 * C2910 - C5816 * C2917 + C5811 * C2922 +
            C5818 * C2918 - C5819 * C2911 - C5818 * C2919 + C139736 * C2923) *
               C139835 * C5815) *
              C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((C100 * C114 - C101 * C108 - C100 * C115 + C89 * C126 + C102 * C116 -
           C103 * C109 - C102 * C117 + C90 * C127 + C104 * C118 - C105 * C110 -
           C104 * C119 + C91 * C128 + C106 * C120 - C107 * C111 - C106 * C121 +
           C92 * C129) *
              C139835 * C139824 * C139809 * C139792 * C97 -
          (C106 * C122 - C107 * C112 - C106 * C123 + C92 * C130 + C104 * C120 -
           C105 * C111 - C104 * C121 + C91 * C129 + C102 * C118 - C103 * C110 -
           C102 * C119 + C90 * C128 + C100 * C116 - C101 * C109 - C100 * C117 +
           C89 * C127) *
              C139835 * C139824 * C139809 * C139792 * C98 +
          (C100 * C118 - C101 * C110 - C100 * C119 + C89 * C128 + C102 * C120 -
           C103 * C111 - C102 * C121 + C90 * C129 + C104 * C122 - C105 * C112 -
           C104 * C123 + C91 * C130 + C106 * C124 - C107 * C113 - C106 * C125 +
           C92 * C131) *
              C139835 * C139824 * C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C5816 * C114 - C5817 * C108 - C5816 * C115 + C5811 * C126 +
            C5818 * C116 - C5819 * C109 - C5818 * C117 + C139736 * C127) *
               C13856 +
           (C5816 * C1578 - C5817 * C1570 - C5816 * C1579 + C5811 * C1585 +
            C5818 * C1576 - C5819 * C1569 - C5818 * C1577 + C139736 * C1584) *
               C13857 +
           (C5816 * C5277 - C5817 * C5273 - C5816 * C5278 + C5811 * C5285 +
            C5818 * C5279 - C5819 * C5274 - C5818 * C5280 + C139736 * C5286) *
               C13858) *
              C139824 * C139809 * C139792 * C97 -
          ((C5818 * C5281 - C5819 * C5275 - C5818 * C5282 + C139736 * C5287 +
            C5816 * C5279 - C5817 * C5274 - C5816 * C5280 + C5811 * C5286) *
               C13858 +
           (C5818 * C1574 - C5819 * C1568 - C5818 * C1575 + C139736 * C1583 +
            C5816 * C1576 - C5817 * C1569 - C5816 * C1577 + C5811 * C1584) *
               C13857 +
           (C5818 * C118 - C5819 * C110 - C5818 * C119 + C139736 * C128 +
            C5816 * C116 - C5817 * C109 - C5816 * C117 + C5811 * C127) *
               C13856) *
              C139824 * C139809 * C139792 * C98 +
          ((C5816 * C118 - C5817 * C110 - C5816 * C119 + C5811 * C128 +
            C5818 * C120 - C5819 * C111 - C5818 * C121 + C139736 * C129) *
               C13856 +
           (C5816 * C1574 - C5817 * C1568 - C5816 * C1575 + C5811 * C1583 +
            C5818 * C1572 - C5819 * C1567 - C5818 * C1573 + C139736 * C1582) *
               C13857 +
           (C5816 * C5281 - C5817 * C5275 - C5816 * C5282 + C5811 * C5287 +
            C5818 * C5283 - C5819 * C5276 - C5818 * C5284 + C139736 * C5288) *
               C13858) *
              C139824 * C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eexy[18] +=
        (-std::pow(Pi, 2.5) *
         (((C5813 * C183 - C5894 * C108 + C5814 * C896 - C5895 * C813 +
            C5815 * C2974 - C5896 * C2908) *
               C5816 +
           (C5813 * C189 - C5894 * C115 + C5814 * C901 - C5895 * C822 +
            C5815 * C2978 - C5896 * C2913) *
               C5811 +
           (C5898 - C5899 + C5900 - C5901 + C5902 - C5903) * C5818 +
           (C5904 - C5905 + C5906 - C5907 + C5908 - C5909) * C139736) *
              C139835 * C139809 * C139792 * C97 +
          ((C5899 - C5898 + C5901 - C5900 + C5903 - C5902) * C5816 +
           (C5905 - C5904 + C5907 - C5906 + C5909 - C5908) * C5811 +
           (C5910 - C5911 + C5912 - C5913 + C5914 - C5915) * C5818 +
           (C5916 - C5917 + C5918 - C5919 + C5920 - C5921) * C139736) *
              C139835 * C139809 * C139792 * C98 +
          ((C5911 - C5910 + C5913 - C5912 + C5915 - C5914) * C5816 +
           (C5917 - C5916 + C5919 - C5918 + C5921 - C5920) * C5811 +
           (C5813 * C186 - C5894 * C111 + C5814 * C899 - C5895 * C810 +
            C5815 * C2977 - C5896 * C2911) *
               C5818 +
           (C5813 * C192 - C5894 * C121 + C5814 * C904 - C5895 * C816 +
            C5815 * C2981 - C5896 * C2919) *
               C139736) *
              C139835 * C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C139824 * C183 - C182 * C108) * C100 +
           (C139824 * C189 - C182 * C115) * C89 + (C196 - C197) * C102 +
           (C198 - C199) * C90 + C212 * C104 + C213 * C91 + C214 * C106 +
           C215 * C92) *
              C139835 * C139809 * C139792 * C97 +
          ((C197 - C196) * C100 + (C199 - C198) * C89 + (C201 - C200) * C102 +
           (C203 - C202) * C90 + (C205 - C204) * C104 + (C207 - C206) * C91 +
           (C208 - C209) * C106 + (C210 - C211) * C92) *
              C139835 * C139809 * C139792 * C98 +
          (C212 * C100 + C213 * C89 + C214 * C102 + C215 * C90 +
           (C209 - C208) * C104 + (C211 - C210) * C91 +
           (C139824 * C188 - C182 * C113) * C106 +
           (C139824 * C194 - C182 * C125) * C92) *
              C139835 * C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C139824 * C183 - C182 * C108) * C5816 +
            (C139824 * C189 - C182 * C115) * C5811 + (C196 - C197) * C5818 +
            (C198 - C199) * C139736) *
               C13856 +
           ((C139824 * C1653 - C182 * C1570) * C5816 +
            (C139824 * C1658 - C182 * C1579) * C5811 + (C1665 - C1664) * C5818 +
            (C1667 - C1666) * C139736) *
               C13857 +
           ((C139824 * C5339 - C182 * C5273) * C5816 +
            (C139824 * C5343 - C182 * C5278) * C5811 +
            (C13934 - C13935) * C5818 + (C13936 - C13937) * C139736) *
               C13858) *
              C139809 * C139792 * C97 +
          (((C197 - C196) * C5816 + (C199 - C198) * C5811 +
            (C201 - C200) * C5818 + (C203 - C202) * C139736) *
               C13856 +
           ((C1664 - C1665) * C5816 + (C1666 - C1667) * C5811 +
            (C1668 - C1669) * C5818 + (C1670 - C1671) * C139736) *
               C13857 +
           ((C13935 - C13934) * C5816 + (C13937 - C13936) * C5811 +
            (C13938 - C13939) * C5818 + (C13940 - C13941) * C139736) *
               C13858) *
              C139809 * C139792 * C98 +
          ((C212 * C5816 + C213 * C5811 + C214 * C5818 + C215 * C139736) *
               C13856 +
           ((C1669 - C1668) * C5816 + (C1671 - C1670) * C5811 +
            (C1673 - C1672) * C5818 + (C1675 - C1674) * C139736) *
               C13857 +
           ((C13939 - C13938) * C5816 + (C13941 - C13940) * C5811 +
            (C139824 * C5342 - C182 * C5276) * C5818 +
            (C139824 * C5346 - C182 * C5284) * C139736) *
               C13858) *
              C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eexz[18] +=
        (-std::pow(Pi, 2.5) *
         ((((C139835 * C266 - C265 * C108) * C5816 +
            (C139835 * C272 - C265 * C115) * C5811 + (C279 - C280) * C5818 +
            (C281 - C282) * C139736) *
               C5813 +
           ((C139835 * C984 - C265 * C813) * C5816 +
            (C139835 * C989 - C265 * C822) * C5811 + (C996 - C995) * C5818 +
            (C998 - C997) * C139736) *
               C5814 +
           ((C139835 * C3032 - C265 * C2908) * C5816 +
            (C139835 * C3036 - C265 * C2913) * C5811 + (C5996 - C5997) * C5818 +
            (C5998 - C5999) * C139736) *
               C5815) *
              C139809 * C139792 * C97 +
          (((C280 - C279) * C5816 + (C282 - C281) * C5811 +
            (C284 - C283) * C5818 + (C286 - C285) * C139736) *
               C5813 +
           ((C995 - C996) * C5816 + (C997 - C998) * C5811 +
            (C999 - C1000) * C5818 + (C1001 - C1002) * C139736) *
               C5814 +
           ((C5997 - C5996) * C5816 + (C5999 - C5998) * C5811 +
            (C6000 - C6001) * C5818 + (C6002 - C6003) * C139736) *
               C5815) *
              C139809 * C139792 * C98 +
          ((C295 * C5816 + C296 * C5811 + C297 * C5818 + C298 * C139736) *
               C5813 +
           ((C1000 - C999) * C5816 + (C1002 - C1001) * C5811 +
            (C1004 - C1003) * C5818 + (C1006 - C1005) * C139736) *
               C5814 +
           ((C6001 - C6000) * C5816 + (C6003 - C6002) * C5811 +
            (C139835 * C3035 - C265 * C2911) * C5818 +
            (C139835 * C3039 - C265 * C2919) * C139736) *
               C5815) *
              C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C139835 * C266 - C265 * C108) * C100 +
           (C139835 * C272 - C265 * C115) * C89 + (C279 - C280) * C102 +
           (C281 - C282) * C90 + C295 * C104 + C296 * C91 + C297 * C106 +
           C298 * C92) *
              C139824 * C139809 * C139792 * C97 +
          ((C280 - C279) * C100 + (C282 - C281) * C89 + (C284 - C283) * C102 +
           (C286 - C285) * C90 + (C288 - C287) * C104 + (C290 - C289) * C91 +
           (C291 - C292) * C106 + (C293 - C294) * C92) *
              C139824 * C139809 * C139792 * C98 +
          (C295 * C100 + C296 * C89 + C297 * C102 + C298 * C90 +
           (C292 - C291) * C104 + (C294 - C293) * C91 +
           (C139835 * C271 - C265 * C113) * C106 +
           (C139835 * C277 - C265 * C125) * C92) *
              C139824 * C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C13856 * C266 - C14015 * C108 + C13857 * C1741 - C14016 * C1570 +
            C13858 * C5397 - C14017 * C5273) *
               C5816 +
           (C13856 * C272 - C14015 * C115 + C13857 * C1746 - C14016 * C1579 +
            C13858 * C5401 - C14017 * C5278) *
               C5811 +
           (C14019 - C14020 + C14021 - C14022 + C14023 - C14024) * C5818 +
           (C14025 - C14026 + C14027 - C14028 + C14029 - C14030) * C139736) *
              C139824 * C139809 * C139792 * C97 +
          ((C14020 - C14019 + C14022 - C14021 + C14024 - C14023) * C5816 +
           (C14026 - C14025 + C14028 - C14027 + C14030 - C14029) * C5811 +
           (C14031 - C14032 + C14033 - C14034 + C14035 - C14036) * C5818 +
           (C14037 - C14038 + C14039 - C14040 + C14041 - C14042) * C139736) *
              C139824 * C139809 * C139792 * C98 +
          ((C14032 - C14031 + C14034 - C14033 + C14036 - C14035) * C5816 +
           (C14038 - C14037 + C14040 - C14039 + C14042 - C14041) * C5811 +
           (C13856 * C269 - C14015 * C111 + C13857 * C1744 - C14016 * C1567 +
            C13858 * C5400 - C14017 * C5276) *
               C5818 +
           (C13856 * C275 - C14015 * C121 + C13857 * C1749 - C14016 * C1573 +
            C13858 * C5404 - C14017 * C5284) *
               C139736) *
              C139824 * C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[18] +=
        (-std::pow(Pi, 2.5) *
         (((C5811 * C114 - C5816 * C108 + C139736 * C116 - C5818 * C109) *
               C5894 +
           (C5811 * C354 - C5816 * C348 + C139736 * C355 - C5818 * C349) *
               C5813 +
           (C5811 * C821 - C5816 * C813 + C139736 * C819 - C5818 * C812) *
               C5895 +
           (C5811 * C1077 - C5816 * C1072 + C139736 * C1078 - C5818 * C1073) *
               C5814 +
           (C5811 * C2912 - C5816 * C2908 + C139736 * C2914 - C5818 * C2909) *
               C5896 +
           (C5811 * C3094 - C5816 * C3090 + C139736 * C3095 - C5818 * C3091) *
               C5815) *
              C139835 * C139809 * C139792 * C97 +
          ((C5816 * C109 - C5811 * C116 + C5818 * C110 - C139736 * C118) *
               C5894 +
           (C5816 * C349 - C5811 * C355 + C5818 * C350 - C139736 * C356) *
               C5813 +
           (C5816 * C812 - C5811 * C819 + C5818 * C811 - C139736 * C817) *
               C5895 +
           (C5816 * C1073 - C5811 * C1078 + C5818 * C1074 - C139736 * C1079) *
               C5814 +
           (C5816 * C2909 - C5811 * C2914 + C5818 * C2910 - C139736 * C2916) *
               C5896 +
           (C5816 * C3091 - C5811 * C3095 + C5818 * C3092 - C139736 * C3096) *
               C5815) *
              C139835 * C139809 * C139792 * C98 +
          ((C5811 * C118 - C5816 * C110 + C139736 * C120 - C5818 * C111) *
               C5894 +
           (C5811 * C356 - C5816 * C350 + C139736 * C357 - C5818 * C351) *
               C5813 +
           (C5811 * C817 - C5816 * C811 + C139736 * C815 - C5818 * C810) *
               C5895 +
           (C5811 * C1079 - C5816 * C1074 + C139736 * C1080 - C5818 * C1075) *
               C5814 +
           (C5811 * C2916 - C5816 * C2910 + C139736 * C2918 - C5818 * C2911) *
               C5896 +
           (C5811 * C3096 - C5816 * C3092 + C139736 * C3097 - C5818 * C3093) *
               C5815) *
              C139835 * C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C89 * C114 - C100 * C108 + C90 * C116 - C102 * C109 + C91 * C118 -
            C104 * C110 + C92 * C120 - C106 * C111) *
               C182 +
           (C89 * C354 - C100 * C348 + C90 * C355 - C102 * C349 + C91 * C356 -
            C104 * C350 + C92 * C357 - C106 * C351) *
               C139824) *
              C139835 * C139809 * C139792 * C97 +
          ((C100 * C109 - C89 * C116 + C102 * C110 - C90 * C118 + C104 * C111 -
            C91 * C120 + C106 * C112 - C92 * C122) *
               C182 +
           (C100 * C349 - C89 * C355 + C102 * C350 - C90 * C356 + C104 * C351 -
            C91 * C357 + C106 * C352 - C92 * C358) *
               C139824) *
              C139835 * C139809 * C139792 * C98 +
          ((C89 * C118 - C100 * C110 + C90 * C120 - C102 * C111 + C91 * C122 -
            C104 * C112 + C92 * C124 - C106 * C113) *
               C182 +
           (C89 * C356 - C100 * C350 + C90 * C357 - C102 * C351 + C91 * C358 -
            C104 * C352 + C92 * C359 - C106 * C353) *
               C139824) *
              C139835 * C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C5811 * C114 - C5816 * C108 + C139736 * C116 - C5818 * C109) *
                C182 +
            (C5811 * C354 - C5816 * C348 + C139736 * C355 - C5818 * C349) *
                C139824) *
               C13856 +
           ((C5811 * C1578 - C5816 * C1570 + C139736 * C1576 - C5818 * C1569) *
                C182 +
            (C5811 * C1834 - C5816 * C1829 + C139736 * C1835 - C5818 * C1830) *
                C139824) *
               C13857 +
           ((C5811 * C5277 - C5816 * C5273 + C139736 * C5279 - C5818 * C5274) *
                C182 +
            (C5811 * C5459 - C5816 * C5455 + C139736 * C5460 - C5818 * C5456) *
                C139824) *
               C13858) *
              C139809 * C139792 * C97 +
          (((C5816 * C109 - C5811 * C116 + C5818 * C110 - C139736 * C118) *
                C182 +
            (C5816 * C349 - C5811 * C355 + C5818 * C350 - C139736 * C356) *
                C139824) *
               C13856 +
           ((C5816 * C1569 - C5811 * C1576 + C5818 * C1568 - C139736 * C1574) *
                C182 +
            (C5816 * C1830 - C5811 * C1835 + C5818 * C1831 - C139736 * C1836) *
                C139824) *
               C13857 +
           ((C5816 * C5274 - C5811 * C5279 + C5818 * C5275 - C139736 * C5281) *
                C182 +
            (C5816 * C5456 - C5811 * C5460 + C5818 * C5457 - C139736 * C5461) *
                C139824) *
               C13858) *
              C139809 * C139792 * C98 +
          (((C5811 * C118 - C5816 * C110 + C139736 * C120 - C5818 * C111) *
                C182 +
            (C5811 * C356 - C5816 * C350 + C139736 * C357 - C5818 * C351) *
                C139824) *
               C13856 +
           ((C5811 * C1574 - C5816 * C1568 + C139736 * C1572 - C5818 * C1567) *
                C182 +
            (C5811 * C1836 - C5816 * C1831 + C139736 * C1837 - C5818 * C1832) *
                C139824) *
               C13857 +
           ((C5811 * C5281 - C5816 * C5275 + C139736 * C5283 - C5818 * C5276) *
                C182 +
            (C5811 * C5461 - C5816 * C5457 + C139736 * C5462 - C5818 * C5458) *
                C139824) *
               C13858) *
              C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[18] +=
        (-std::pow(Pi, 2.5) *
         (((C5894 * C183 - C6151 * C108 - C5894 * C348 + C5813 * C411 +
            C5895 * C896 - C6152 * C813 - C5895 * C1072 + C5814 * C1151 +
            C5896 * C2974 - C6153 * C2908 - C5896 * C3090 + C5815 * C3148) *
               C5811 +
           (C6191 + C6192 + C6193) * C139736) *
              C139835 * C139809 * C139792 * C97 -
          ((C6194 + C6195 + C6196) * C139736 +
           (C6193 + C6192 + C6191) * C5811) *
              C139835 * C139809 * C139792 * C98 +
          ((C6196 + C6195 + C6194) * C5811 +
           (C5894 * C186 - C6151 * C111 - C5894 * C351 + C5813 * C414 +
            C5895 * C899 - C6152 * C810 - C5895 * C1075 + C5814 * C1148 +
            C5896 * C2977 - C6153 * C2911 - C5896 * C3093 + C5815 * C3151) *
               C139736) *
              C139835 * C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C182 * C183 - C410 * C108 - C182 * C348 + C139824 * C411) * C89 +
           C442 * C90 + C443 * C91 + C444 * C92) *
              C139835 * C139809 * C139792 * C97 -
          (C445 * C92 + C444 * C91 + C443 * C90 + C442 * C89) * C139835 *
              C139809 * C139792 * C98 +
          (C443 * C89 + C444 * C90 + C445 * C91 +
           (C182 * C188 - C410 * C113 - C182 * C353 + C139824 * C416) * C92) *
              C139835 * C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C182 * C183 - C410 * C108 - C182 * C348 + C139824 * C411) * C5811 +
            C442 * C139736) *
               C13856 +
           ((C182 * C1653 - C410 * C1570 - C182 * C1829 + C139824 * C1908) *
                C5811 +
            C1931 * C139736) *
               C13857 +
           ((C182 * C5339 - C410 * C5273 - C182 * C5455 + C139824 * C5513) *
                C5811 +
            C14203 * C139736) *
               C13858) *
              C139809 * C139792 * C97 -
          ((C14204 * C139736 + C14203 * C5811) * C13858 +
           (C1930 * C139736 + C1931 * C5811) * C13857 +
           (C443 * C139736 + C442 * C5811) * C13856) *
              C139809 * C139792 * C98 +
          ((C443 * C5811 + C444 * C139736) * C13856 +
           (C1930 * C5811 + C1929 * C139736) * C13857 +
           (C14204 * C5811 +
            (C182 * C5342 - C410 * C5276 - C182 * C5458 + C139824 * C5516) *
                C139736) *
               C13858) *
              C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[18] +=
        (-std::pow(Pi, 2.5) *
         ((((C139835 * C266 - C265 * C108) * C5894 +
            (C139835 * C495 - C265 * C348) * C5813 +
            (C139835 * C984 - C265 * C813) * C5895 +
            (C139835 * C1240 - C265 * C1072) * C5814 +
            (C139835 * C3032 - C265 * C2908) * C5896 +
            (C139835 * C3202 - C265 * C3090) * C5815) *
               C5811 +
           ((C279 - C280) * C5894 + (C502 - C503) * C5813 +
            (C996 - C995) * C5895 + (C1247 - C1246) * C5814 +
            (C5996 - C5997) * C5896 + (C6271 - C6272) * C5815) *
               C139736) *
              C139809 * C139792 * C97 +
          (((C280 - C279) * C5894 + (C503 - C502) * C5813 +
            (C995 - C996) * C5895 + (C1246 - C1247) * C5814 +
            (C5997 - C5996) * C5896 + (C6272 - C6271) * C5815) *
               C5811 +
           ((C284 - C283) * C5894 + (C506 - C505) * C5813 +
            (C999 - C1000) * C5895 + (C1248 - C1249) * C5814 +
            (C6000 - C6001) * C5896 + (C6273 - C6274) * C5815) *
               C139736) *
              C139809 * C139792 * C98 +
          ((C295 * C5894 + C512 * C5813 + (C1000 - C999) * C5895 +
            (C1249 - C1248) * C5814 + (C6001 - C6000) * C5896 +
            (C6274 - C6273) * C5815) *
               C5811 +
           (C297 * C5894 + C513 * C5813 + (C1004 - C1003) * C5895 +
            (C1251 - C1250) * C5814 + (C139835 * C3035 - C265 * C2911) * C5896 +
            (C139835 * C3205 - C265 * C3093) * C5815) *
               C139736) *
              C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C139835 * C266 - C265 * C108) * C182 +
            (C139835 * C495 - C265 * C348) * C139824) *
               C89 +
           ((C279 - C280) * C182 + (C502 - C503) * C139824) * C90 + C516 * C91 +
           C517 * C92) *
              C139809 * C139792 * C97 +
          (((C280 - C279) * C182 + (C503 - C502) * C139824) * C89 +
           ((C284 - C283) * C182 + (C506 - C505) * C139824) * C90 +
           ((C288 - C287) * C182 + (C509 - C508) * C139824) * C91 +
           ((C291 - C292) * C182 + (C510 - C511) * C139824) * C92) *
              C139809 * C139792 * C98 +
          (C516 * C89 + C517 * C90 +
           ((C292 - C291) * C182 + (C511 - C510) * C139824) * C91 +
           ((C139835 * C271 - C265 * C113) * C182 +
            (C139835 * C500 - C265 * C353) * C139824) *
               C92) *
              C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C13856 * C266 - C14015 * C108 + C13857 * C1741 - C14016 * C1570 +
             C13858 * C5397 - C14017 * C5273) *
                C182 +
            (C13856 * C495 - C14015 * C348 + C13857 * C1997 - C14016 * C1829 +
             C13858 * C5567 - C14017 * C5455) *
                C139824) *
               C5811 +
           ((C14019 - C14020 + C14021 - C14022 + C14023 - C14024) * C182 +
            (C14279 - C14280 + C14281 - C14282 + C14283 - C14284) * C139824) *
               C139736) *
              C139809 * C139792 * C97 +
          (((C14020 - C14019 + C14022 - C14021 + C14024 - C14023) * C182 +
            (C14280 - C14279 + C14282 - C14281 + C14284 - C14283) * C139824) *
               C5811 +
           ((C14031 - C14032 + C14033 - C14034 + C14035 - C14036) * C182 +
            (C14285 - C14286 + C14287 - C14288 + C14289 - C14290) * C139824) *
               C139736) *
              C139809 * C139792 * C98 +
          (((C14032 - C14031 + C14034 - C14033 + C14036 - C14035) * C182 +
            (C14286 - C14285 + C14288 - C14287 + C14290 - C14289) * C139824) *
               C5811 +
           ((C13856 * C269 - C14015 * C111 + C13857 * C1744 - C14016 * C1567 +
             C13858 * C5400 - C14017 * C5276) *
                C182 +
            (C13856 * C498 - C14015 * C351 + C13857 * C2000 - C14016 * C1832 +
             C13858 * C5570 - C14017 * C5458) *
                C139824) *
               C139736) *
              C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eezx[18] +=
        (-std::pow(Pi, 2.5) *
         ((((C5811 * C114 - C5816 * C108 + C139736 * C116 - C5818 * C109) *
                C265 +
            (C5811 * C573 - C5816 * C567 + C139736 * C574 - C5818 * C568) *
                C139835) *
               C5813 +
           ((C5811 * C821 - C5816 * C813 + C139736 * C819 - C5818 * C812) *
                C265 +
            (C5811 * C1322 - C5816 * C1317 + C139736 * C1323 - C5818 * C1318) *
                C139835) *
               C5814 +
           ((C5811 * C2912 - C5816 * C2908 + C139736 * C2914 - C5818 * C2909) *
                C265 +
            (C5811 * C3260 - C5816 * C3256 + C139736 * C3261 - C5818 * C3257) *
                C139835) *
               C5815) *
              C139809 * C139792 * C97 +
          (((C5816 * C109 - C5811 * C116 + C5818 * C110 - C139736 * C118) *
                C265 +
            (C5816 * C568 - C5811 * C574 + C5818 * C569 - C139736 * C575) *
                C139835) *
               C5813 +
           ((C5816 * C812 - C5811 * C819 + C5818 * C811 - C139736 * C817) *
                C265 +
            (C5816 * C1318 - C5811 * C1323 + C5818 * C1319 - C139736 * C1324) *
                C139835) *
               C5814 +
           ((C5816 * C2909 - C5811 * C2914 + C5818 * C2910 - C139736 * C2916) *
                C265 +
            (C5816 * C3257 - C5811 * C3261 + C5818 * C3258 - C139736 * C3262) *
                C139835) *
               C5815) *
              C139809 * C139792 * C98 +
          (((C5811 * C118 - C5816 * C110 + C139736 * C120 - C5818 * C111) *
                C265 +
            (C5811 * C575 - C5816 * C569 + C139736 * C576 - C5818 * C570) *
                C139835) *
               C5813 +
           ((C5811 * C817 - C5816 * C811 + C139736 * C815 - C5818 * C810) *
                C265 +
            (C5811 * C1324 - C5816 * C1319 + C139736 * C1325 - C5818 * C1320) *
                C139835) *
               C5814 +
           ((C5811 * C2916 - C5816 * C2910 + C139736 * C2918 - C5818 * C2911) *
                C265 +
            (C5811 * C3262 - C5816 * C3258 + C139736 * C3263 - C5818 * C3259) *
                C139835) *
               C5815) *
              C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C89 * C114 - C100 * C108 + C90 * C116 - C102 * C109 + C91 * C118 -
            C104 * C110 + C92 * C120 - C106 * C111) *
               C265 +
           (C89 * C573 - C100 * C567 + C90 * C574 - C102 * C568 + C91 * C575 -
            C104 * C569 + C92 * C576 - C106 * C570) *
               C139835) *
              C139824 * C139809 * C139792 * C97 +
          ((C100 * C109 - C89 * C116 + C102 * C110 - C90 * C118 + C104 * C111 -
            C91 * C120 + C106 * C112 - C92 * C122) *
               C265 +
           (C100 * C568 - C89 * C574 + C102 * C569 - C90 * C575 + C104 * C570 -
            C91 * C576 + C106 * C571 - C92 * C577) *
               C139835) *
              C139824 * C139809 * C139792 * C98 +
          ((C89 * C118 - C100 * C110 + C90 * C120 - C102 * C111 + C91 * C122 -
            C104 * C112 + C92 * C124 - C106 * C113) *
               C265 +
           (C89 * C575 - C100 * C569 + C90 * C576 - C102 * C570 + C91 * C577 -
            C104 * C571 + C92 * C578 - C106 * C572) *
               C139835) *
              C139824 * C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C5811 * C114 - C5816 * C108 + C139736 * C116 - C5818 * C109) *
               C14015 +
           (C5811 * C573 - C5816 * C567 + C139736 * C574 - C5818 * C568) *
               C13856 +
           (C5811 * C1578 - C5816 * C1570 + C139736 * C1576 - C5818 * C1569) *
               C14016 +
           (C5811 * C2079 - C5816 * C2074 + C139736 * C2080 - C5818 * C2075) *
               C13857 +
           (C5811 * C5277 - C5816 * C5273 + C139736 * C5279 - C5818 * C5274) *
               C14017 +
           (C5811 * C5625 - C5816 * C5621 + C139736 * C5626 - C5818 * C5622) *
               C13858) *
              C139824 * C139809 * C139792 * C97 +
          ((C5816 * C109 - C5811 * C116 + C5818 * C110 - C139736 * C118) *
               C14015 +
           (C5816 * C568 - C5811 * C574 + C5818 * C569 - C139736 * C575) *
               C13856 +
           (C5816 * C1569 - C5811 * C1576 + C5818 * C1568 - C139736 * C1574) *
               C14016 +
           (C5816 * C2075 - C5811 * C2080 + C5818 * C2076 - C139736 * C2081) *
               C13857 +
           (C5816 * C5274 - C5811 * C5279 + C5818 * C5275 - C139736 * C5281) *
               C14017 +
           (C5816 * C5622 - C5811 * C5626 + C5818 * C5623 - C139736 * C5627) *
               C13858) *
              C139824 * C139809 * C139792 * C98 +
          ((C5811 * C118 - C5816 * C110 + C139736 * C120 - C5818 * C111) *
               C14015 +
           (C5811 * C575 - C5816 * C569 + C139736 * C576 - C5818 * C570) *
               C13856 +
           (C5811 * C1574 - C5816 * C1568 + C139736 * C1572 - C5818 * C1567) *
               C14016 +
           (C5811 * C2081 - C5816 * C2076 + C139736 * C2082 - C5818 * C2077) *
               C13857 +
           (C5811 * C5281 - C5816 * C5275 + C139736 * C5283 - C5818 * C5276) *
               C14017 +
           (C5811 * C5627 - C5816 * C5623 + C139736 * C5628 - C5818 * C5624) *
               C13858) *
              C139824 * C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eezy[18] +=
        (-std::pow(Pi, 2.5) *
         ((((C5813 * C183 - C5894 * C108 + C5814 * C896 - C5895 * C813 +
             C5815 * C2974 - C5896 * C2908) *
                C265 +
            (C5813 * C629 - C5894 * C567 + C5814 * C1393 - C5895 * C1317 +
             C5815 * C3314 - C5896 * C3256) *
                C139835) *
               C5811 +
           ((C5898 - C5899 + C5900 - C5901 + C5902 - C5903) * C265 +
            (C6423 - C6424 + C6425 - C6426 + C6427 - C6428) * C139835) *
               C139736) *
              C139809 * C139792 * C97 +
          (((C5899 - C5898 + C5901 - C5900 + C5903 - C5902) * C265 +
            (C6424 - C6423 + C6426 - C6425 + C6428 - C6427) * C139835) *
               C5811 +
           ((C5910 - C5911 + C5912 - C5913 + C5914 - C5915) * C265 +
            (C6429 - C6430 + C6431 - C6432 + C6433 - C6434) * C139835) *
               C139736) *
              C139809 * C139792 * C98 +
          (((C5911 - C5910 + C5913 - C5912 + C5915 - C5914) * C265 +
            (C6430 - C6429 + C6432 - C6431 + C6434 - C6433) * C139835) *
               C5811 +
           ((C5813 * C186 - C5894 * C111 + C5814 * C899 - C5895 * C810 +
             C5815 * C2977 - C5896 * C2911) *
                C265 +
            (C5813 * C632 - C5894 * C570 + C5814 * C1396 - C5895 * C1320 +
             C5815 * C3317 - C5896 * C3259) *
                C139835) *
               C139736) *
              C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C139824 * C183 - C182 * C108) * C265 +
            (C139824 * C629 - C182 * C567) * C139835) *
               C89 +
           ((C196 - C197) * C265 + (C636 - C637) * C139835) * C90 + C650 * C91 +
           C651 * C92) *
              C139809 * C139792 * C97 +
          (((C197 - C196) * C265 + (C637 - C636) * C139835) * C89 +
           ((C201 - C200) * C265 + (C640 - C639) * C139835) * C90 +
           ((C205 - C204) * C265 + (C643 - C642) * C139835) * C91 +
           ((C208 - C209) * C265 + (C644 - C645) * C139835) * C92) *
              C139809 * C139792 * C98 +
          (C650 * C89 + C651 * C90 +
           ((C209 - C208) * C265 + (C645 - C644) * C139835) * C91 +
           ((C139824 * C188 - C182 * C113) * C265 +
            (C139824 * C634 - C182 * C572) * C139835) *
               C92) *
              C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C139824 * C183 - C182 * C108) * C14015 +
            (C139824 * C629 - C182 * C567) * C13856 +
            (C139824 * C1653 - C182 * C1570) * C14016 +
            (C139824 * C2150 - C182 * C2074) * C13857 +
            (C139824 * C5339 - C182 * C5273) * C14017 +
            (C139824 * C5679 - C182 * C5621) * C13858) *
               C5811 +
           ((C196 - C197) * C14015 + (C636 - C637) * C13856 +
            (C1665 - C1664) * C14016 + (C2157 - C2156) * C13857 +
            (C13934 - C13935) * C14017 + (C14439 - C14440) * C13858) *
               C139736) *
              C139809 * C139792 * C97 +
          (((C197 - C196) * C14015 + (C637 - C636) * C13856 +
            (C1664 - C1665) * C14016 + (C2156 - C2157) * C13857 +
            (C13935 - C13934) * C14017 + (C14440 - C14439) * C13858) *
               C5811 +
           ((C201 - C200) * C14015 + (C640 - C639) * C13856 +
            (C1668 - C1669) * C14016 + (C2158 - C2159) * C13857 +
            (C13938 - C13939) * C14017 + (C14441 - C14442) * C13858) *
               C139736) *
              C139809 * C139792 * C98 +
          ((C212 * C14015 + C646 * C13856 + (C1669 - C1668) * C14016 +
            (C2159 - C2158) * C13857 + (C13939 - C13938) * C14017 +
            (C14442 - C14441) * C13858) *
               C5811 +
           (C214 * C14015 + C647 * C13856 + (C1673 - C1672) * C14016 +
            (C2161 - C2160) * C13857 +
            (C139824 * C5342 - C182 * C5276) * C14017 +
            (C139824 * C5682 - C182 * C5624) * C13858) *
               C139736) *
              C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eezz[18] +=
        (-std::pow(Pi, 2.5) *
         ((((C265 * C266 - C701 * C108 - C265 * C567 + C139835 * C702) * C5813 +
            (C265 * C984 - C701 * C813 - C265 * C1317 + C139835 * C1473) *
                C5814 +
            (C265 * C3032 - C701 * C2908 - C265 * C3256 + C139835 * C3368) *
                C5815) *
               C5811 +
           (C6509 + C6510 + C6527) * C139736) *
              C139809 * C139792 * C97 -
          ((C6528 + C6519 + C6520) * C139736 +
           (C6527 + C6510 + C6509) * C5811) *
              C139809 * C139792 * C98 +
          ((C6520 + C6519 + C6528) * C5811 +
           (C735 * C5813 + C1494 * C5814 +
            (C265 * C3035 - C701 * C2911 - C265 * C3259 + C139835 * C3371) *
                C5815) *
               C139736) *
              C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C265 * C266 - C701 * C108 - C265 * C567 + C139835 * C702) *
               C139824 * C89 +
           C737 * C90 + C738 * C91 + C739 * C92) *
              C139809 * C139792 * C97 -
          (C740 * C92 + C739 * C91 + C738 * C90 + C737 * C89) * C139809 *
              C139792 * C98 +
          (C738 * C89 + C739 * C90 + C740 * C91 +
           (C265 * C271 - C701 * C113 - C265 * C572 + C139835 * C707) *
               C139824 * C92) *
              C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C14015 * C266 - C14516 * C108 - C14015 * C567 + C13856 * C702 +
            C14016 * C1741 - C14517 * C1570 - C14016 * C2074 + C13857 * C2230 +
            C14017 * C5397 - C14518 * C5273 - C14017 * C5621 + C13858 * C5733) *
               C139824 * C5811 +
           (C14556 + C14557 + C14558) * C139824 * C139736) *
              C139809 * C139792 * C97 -
          ((C14559 + C14560 + C14561) * C139824 * C139736 +
           (C14558 + C14557 + C14556) * C139824 * C5811) *
              C139809 * C139792 * C98 +
          ((C14561 + C14560 + C14559) * C139824 * C5811 +
           (C14015 * C269 - C14516 * C111 - C14015 * C570 + C13856 * C705 +
            C14016 * C1744 - C14517 * C1567 - C14016 * C2077 + C13857 * C2227 +
            C14017 * C5400 - C14518 * C5276 - C14017 * C5624 + C13858 * C5736) *
               C139824 * C139736) *
              C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eexx[19] +=
        (-std::pow(Pi, 2.5) *
         ((((C5816 * C114 - C5817 * C108 - C5816 * C115 + C5811 * C126 +
             C5818 * C116 - C5819 * C109 - C5818 * C117 + C139736 * C127) *
                C139835 * C5813 +
            (C6687 + C6688) * C139835 * C5814 +
            (C6689 + C6690) * C139835 * C5815) *
               C139809 * C806 -
           ((C5818 * C6629 - C5819 * C6626 - C5818 * C6630 + C139736 * C6635 +
             C5816 * C6631 - C5817 * C6627 - C5816 * C6632 + C5811 * C6636) *
                C139835 * C5815 +
            (C6690 + C6689) * C139835 * C5814 +
            (C6688 + C6687) * C139835 * C5813) *
               C139809 * C140000) *
              C808 +
          (((C6691 + C6692) * C139835 * C5813 +
            (C6693 + C6694) * C139835 * C5814 +
            (C5816 * C6629 - C5817 * C6626 - C5816 * C6630 + C5811 * C6635 +
             C5818 * C6633 - C5819 * C6628 - C5818 * C6634 + C139736 * C6637) *
                C139835 * C5815) *
               C139809 * C140000 -
           ((C6694 + C6693) * C139835 * C5815 +
            (C6692 + C6691) * C139835 * C5814 +
            (C5818 * C118 - C5819 * C110 - C5818 * C119 + C139736 * C128 +
             C5816 * C116 - C5817 * C109 - C5816 * C117 + C5811 * C127) *
                C139835 * C5813) *
               C139809 * C806) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C100 * C114 - C101 * C108 - C100 * C115 + C89 * C126 + C102 * C116 -
            C103 * C109 - C102 * C117 + C90 * C127 + C104 * C118 - C105 * C110 -
            C104 * C119 + C91 * C128 + C106 * C120 - C107 * C111 - C106 * C121 +
            C92 * C129) *
               C139835 * C139824 * C139809 * C806 -
           (C106 * C815 - C107 * C810 - C106 * C816 + C92 * C825 + C104 * C817 -
            C105 * C811 - C104 * C818 + C91 * C826 + C102 * C819 - C103 * C812 -
            C102 * C820 + C90 * C827 + C100 * C821 - C101 * C813 - C100 * C822 +
            C89 * C828) *
               C139835 * C139824 * C139809 * C140000) *
              C808 +
          ((C100 * C819 - C101 * C812 - C100 * C820 + C89 * C827 + C102 * C817 -
            C103 * C811 - C102 * C818 + C90 * C826 + C104 * C815 - C105 * C810 -
            C104 * C816 + C91 * C825 + C106 * C823 - C107 * C814 - C106 * C824 +
            C92 * C829) *
               C139835 * C139824 * C139809 * C140000 -
           (C106 * C122 - C107 * C112 - C106 * C123 + C92 * C130 + C104 * C120 -
            C105 * C111 - C104 * C121 + C91 * C129 + C102 * C118 - C103 * C110 -
            C102 * C119 + C90 * C128 + C100 * C116 - C101 * C109 - C100 * C117 +
            C89 * C127) *
               C139835 * C139824 * C139809 * C806) *
              C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C5816 * C114 - C5817 * C108 - C5816 * C115 + C5811 * C126 +
             C5818 * C116 - C5819 * C109 - C5818 * C117 + C139736 * C127) *
                C13856 +
            (C5816 * C1578 - C5817 * C1570 - C5816 * C1579 + C5811 * C1585 +
             C5818 * C1576 - C5819 * C1569 - C5818 * C1577 + C139736 * C1584) *
                C13857 +
            (C5816 * C5277 - C5817 * C5273 - C5816 * C5278 + C5811 * C5285 +
             C5818 * C5279 - C5819 * C5274 - C5818 * C5280 + C139736 * C5286) *
                C13858) *
               C139824 * C139809 * C806 -
           ((C5818 * C13132 - C5819 * C13127 - C5818 * C13133 +
             C139736 * C13139 + C5816 * C13130 - C5817 * C13126 -
             C5816 * C13131 + C5811 * C13138) *
                C13858 +
            (C10429 + C10430) * C13857 + (C6688 + C6687) * C13856) *
               C139824 * C139809 * C140000) *
              C808 +
          (((C6691 + C6692) * C13856 +
            (C5816 * C3444 - C5817 * C3439 - C5816 * C3445 + C5811 * C3451 +
             C5818 * C3446 - C5819 * C3440 - C5818 * C3447 + C139736 * C3452) *
                C13857 +
            (C5816 * C13132 - C5817 * C13127 - C5816 * C13133 + C5811 * C13139 +
             C5818 * C14660 - C5819 * C14659 - C5818 * C14661 +
             C139736 * C14662) *
                C13858) *
               C139824 * C139809 * C140000 -
           ((C5818 * C5281 - C5819 * C5275 - C5818 * C5282 + C139736 * C5287 +
             C5816 * C5279 - C5817 * C5274 - C5816 * C5280 + C5811 * C5286) *
                C13858 +
            (C5818 * C1574 - C5819 * C1568 - C5818 * C1575 + C139736 * C1583 +
             C5816 * C1576 - C5817 * C1569 - C5816 * C1577 + C5811 * C1584) *
                C13857 +
            (C5818 * C118 - C5819 * C110 - C5818 * C119 + C139736 * C128 +
             C5816 * C116 - C5817 * C109 - C5816 * C117 + C5811 * C127) *
                C13856) *
               C139824 * C139809 * C806) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eexy[19] +=
        (-std::pow(Pi, 2.5) *
         ((((C5813 * C183 - C5894 * C108 + C5814 * C896 - C5895 * C813 +
             C5815 * C2974 - C5896 * C2908) *
                C5816 +
            (C5813 * C189 - C5894 * C115 + C5814 * C901 - C5895 * C822 +
             C5815 * C2978 - C5896 * C2913) *
                C5811 +
            (C5898 - C5899 + C5900 - C5901 + C5902 - C5903) * C5818 +
            (C5904 - C5905 + C5906 - C5907 + C5908 - C5909) * C139736) *
               C139835 * C139809 * C806 +
           ((C5894 * C813 - C5813 * C896 + C5895 * C2908 - C5814 * C2974 +
             C5896 * C6627 - C5815 * C6792) *
                C5816 +
            (C5894 * C822 - C5813 * C901 + C5895 * C2913 - C5814 * C2978 +
             C5896 * C6632 - C5815 * C6795) *
                C5811 +
            (C6799 - C6800 + C6801 - C6802 + C6803 - C6804) * C5818 +
            (C6805 - C6806 + C6807 - C6808 + C6809 - C6810) * C139736) *
               C139835 * C139809 * C140000) *
              C808 +
          (((C5899 - C5898 + C5901 - C5900 + C5903 - C5902) * C5816 +
            (C5905 - C5904 + C5907 - C5906 + C5909 - C5908) * C5811 +
            (C5910 - C5911 + C5912 - C5913 + C5914 - C5915) * C5818 +
            (C5916 - C5917 + C5918 - C5919 + C5920 - C5921) * C139736) *
               C139835 * C139809 * C806 +
           ((C6800 - C6799 + C6802 - C6801 + C6804 - C6803) * C5816 +
            (C6806 - C6805 + C6808 - C6807 + C6810 - C6809) * C5811 +
            (C5813 * C898 - C5894 * C811 + C5814 * C2976 - C5895 * C2910 +
             C5815 * C6794 - C5896 * C6628) *
                C5818 +
            (C5813 * C903 - C5894 * C818 + C5814 * C2980 - C5895 * C2917 +
             C5815 * C6797 - C5896 * C6634) *
                C139736) *
               C139835 * C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C139824 * C183 - C182 * C108) * C100 +
            (C139824 * C189 - C182 * C115) * C89 + (C196 - C197) * C102 +
            (C198 - C199) * C90 + C212 * C104 + C213 * C91 + C214 * C106 +
            C215 * C92) *
               C139835 * C139809 * C806 +
           ((C182 * C813 - C139824 * C896) * C100 +
            (C182 * C822 - C139824 * C901) * C89 + (C907 - C908) * C102 +
            (C909 - C910) * C90 + (C911 - C912) * C104 + (C913 - C914) * C91 +
            (C915 - C916) * C106 + (C917 - C918) * C92) *
               C139835 * C139809 * C140000) *
              C808 +
          (((C197 - C196) * C100 + (C199 - C198) * C89 + (C201 - C200) * C102 +
            (C203 - C202) * C90 + (C205 - C204) * C104 + (C207 - C206) * C91 +
            (C208 - C209) * C106 + (C210 - C211) * C92) *
               C139835 * C139809 * C806 +
           ((C908 - C907) * C100 + (C910 - C909) * C89 + (C912 - C911) * C102 +
            (C914 - C913) * C90 + (C916 - C915) * C104 + (C918 - C917) * C91 +
            (C139824 * C900 - C182 * C814) * C106 +
            (C139824 * C905 - C182 * C824) * C92) *
               C139835 * C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C139824 * C183 - C182 * C108) * C5816 +
             (C139824 * C189 - C182 * C115) * C5811 + (C196 - C197) * C5818 +
             (C198 - C199) * C139736) *
                C13856 +
            ((C139824 * C1653 - C182 * C1570) * C5816 +
             (C139824 * C1658 - C182 * C1579) * C5811 +
             (C1665 - C1664) * C5818 + (C1667 - C1666) * C139736) *
                C13857 +
            ((C139824 * C5339 - C182 * C5273) * C5816 +
             (C139824 * C5343 - C182 * C5278) * C5811 +
             (C13934 - C13935) * C5818 + (C13936 - C13937) * C139736) *
                C13858) *
               C139809 * C806 +
           (((C182 * C813 - C139824 * C896) * C5816 +
             (C182 * C822 - C139824 * C901) * C5811 + (C907 - C908) * C5818 +
             (C909 - C910) * C139736) *
                C13856 +
            ((C182 * C3438 - C139824 * C3520) * C5816 +
             (C182 * C3443 - C139824 * C3524) * C5811 +
             (C14764 - C14765) * C5818 + (C14766 - C14767) * C139736) *
                C13857 +
            ((C182 * C13126 - C139824 * C13216) * C5816 +
             (C182 * C13131 - C139824 * C13220) * C5811 +
             (C14768 - C14769) * C5818 + (C14770 - C14771) * C139736) *
                C13858) *
               C139809 * C140000) *
              C808 +
          ((((C197 - C196) * C5816 + (C199 - C198) * C5811 +
             (C201 - C200) * C5818 + (C203 - C202) * C139736) *
                C13856 +
            ((C1664 - C1665) * C5816 + (C1666 - C1667) * C5811 +
             (C1668 - C1669) * C5818 + (C1670 - C1671) * C139736) *
                C13857 +
            ((C13935 - C13934) * C5816 + (C13937 - C13936) * C5811 +
             (C13938 - C13939) * C5818 + (C13940 - C13941) * C139736) *
                C13858) *
               C139809 * C806 +
           (((C908 - C907) * C5816 + (C910 - C909) * C5811 +
             (C912 - C911) * C5818 + (C914 - C913) * C139736) *
                C13856 +
            ((C14765 - C14764) * C5816 + (C14767 - C14766) * C5811 +
             (C139824 * C3522 - C182 * C3440) * C5818 +
             (C139824 * C3526 - C182 * C3447) * C139736) *
                C13857 +
            ((C14769 - C14768) * C5816 + (C14771 - C14770) * C5811 +
             (C139824 * C14761 - C182 * C14659) * C5818 +
             (C139824 * C14762 - C182 * C14661) * C139736) *
                C13858) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eexz[19] +=
        (-std::pow(Pi, 2.5) *
         (((((C139835 * C266 - C265 * C108) * C5816 +
             (C139835 * C272 - C265 * C115) * C5811 + (C279 - C280) * C5818 +
             (C281 - C282) * C139736) *
                C5813 +
            ((C6915 - C6916) * C5816 + (C6917 - C6918) * C5811 + C6919 * C5818 +
             C6920 * C139736) *
                C5814 +
            ((C6921 - C6922) * C5816 + (C6923 - C6924) * C5811 + C6925 * C5818 +
             C6926 * C139736) *
                C5815) *
               C139809 * C806 +
           (((C6916 - C6915) * C5816 + (C6918 - C6917) * C5811 + C6927 * C5818 +
             C6928 * C139736) *
                C5813 +
            ((C6922 - C6921) * C5816 + (C6924 - C6923) * C5811 + C6929 * C5818 +
             C6930 * C139736) *
                C5814 +
            ((C265 * C6627 - C139835 * C6908) * C5816 +
             (C265 * C6632 - C139835 * C6911) * C5811 +
             (C6931 - C6932) * C5818 + (C6933 - C6934) * C139736) *
                C5815) *
               C139809 * C140000) *
              C808 +
          ((((C280 - C279) * C5816 + (C282 - C281) * C5811 +
             (C284 - C283) * C5818 + (C286 - C285) * C139736) *
                C5813 +
            (C6927 * C5816 + C6928 * C5811 + (C999 - C1000) * C5818 +
             (C1001 - C1002) * C139736) *
                C5814 +
            (C6929 * C5816 + C6930 * C5811 + (C6000 - C6001) * C5818 +
             (C6002 - C6003) * C139736) *
                C5815) *
               C139809 * C806 +
           ((C6919 * C5816 + C6920 * C5811 + (C1000 - C999) * C5818 +
             (C1002 - C1001) * C139736) *
                C5813 +
            (C6925 * C5816 + C6926 * C5811 + (C6001 - C6000) * C5818 +
             (C6003 - C6002) * C139736) *
                C5814 +
            ((C6932 - C6931) * C5816 + (C6934 - C6933) * C5811 +
             (C139835 * C6910 - C265 * C6628) * C5818 +
             (C139835 * C6913 - C265 * C6634) * C139736) *
                C5815) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C139835 * C266 - C265 * C108) * C100 +
            (C139835 * C272 - C265 * C115) * C89 + (C279 - C280) * C102 +
            (C281 - C282) * C90 + C295 * C104 + C296 * C91 + C297 * C106 +
            C298 * C92) *
               C139824 * C139809 * C806 +
           ((C265 * C813 - C139835 * C984) * C100 +
            (C265 * C822 - C139835 * C989) * C89 + (C995 - C996) * C102 +
            (C997 - C998) * C90 + (C999 - C1000) * C104 +
            (C1001 - C1002) * C91 + (C1003 - C1004) * C106 +
            (C1005 - C1006) * C92) *
               C139824 * C139809 * C140000) *
              C808 +
          (((C280 - C279) * C100 + (C282 - C281) * C89 + (C284 - C283) * C102 +
            (C286 - C285) * C90 + (C288 - C287) * C104 + (C290 - C289) * C91 +
            (C291 - C292) * C106 + (C293 - C294) * C92) *
               C139824 * C139809 * C806 +
           ((C996 - C995) * C100 + (C998 - C997) * C89 + (C1000 - C999) * C102 +
            (C1002 - C1001) * C90 + (C1004 - C1003) * C104 +
            (C1006 - C1005) * C91 + (C139835 * C988 - C265 * C814) * C106 +
            (C139835 * C993 - C265 * C824) * C92) *
               C139824 * C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C13856 * C266 - C14015 * C108 + C13857 * C1741 - C14016 * C1570 +
             C13858 * C5397 - C14017 * C5273) *
                C5816 +
            (C13856 * C272 - C14015 * C115 + C13857 * C1746 - C14016 * C1579 +
             C13858 * C5401 - C14017 * C5278) *
                C5811 +
            (C14019 - C14020 + C14021 - C14022 + C14023 - C14024) * C5818 +
            (C14025 - C14026 + C14027 - C14028 + C14029 - C14030) * C139736) *
               C139824 * C139809 * C806 +
           ((C14015 * C813 - C13856 * C984 + C14016 * C3438 - C13857 * C3594 +
             C14017 * C13126 - C13858 * C13298) *
                C5816 +
            (C14015 * C822 - C13856 * C989 + C14016 * C3443 - C13857 * C3598 +
             C14017 * C13131 - C13858 * C13302) *
                C5811 +
            (C14872 - C14873 + C14874 - C14875 + C14876 - C14877) * C5818 +
            (C14878 - C14879 + C14880 - C14881 + C14882 - C14883) * C139736) *
               C139824 * C139809 * C140000) *
              C808 +
          (((C14020 - C14019 + C14022 - C14021 + C14024 - C14023) * C5816 +
            (C14026 - C14025 + C14028 - C14027 + C14030 - C14029) * C5811 +
            (C14031 - C14032 + C14033 - C14034 + C14035 - C14036) * C5818 +
            (C14037 - C14038 + C14039 - C14040 + C14041 - C14042) * C139736) *
               C139824 * C139809 * C806 +
           ((C14873 - C14872 + C14875 - C14874 + C14877 - C14876) * C5816 +
            (C14879 - C14878 + C14881 - C14880 + C14883 - C14882) * C5811 +
            (C13856 * C986 - C14015 * C811 + C13857 * C3596 - C14016 * C3440 +
             C13858 * C14869 - C14017 * C14659) *
                C5818 +
            (C13856 * C991 - C14015 * C818 + C13857 * C3600 - C14016 * C3447 +
             C13858 * C14870 - C14017 * C14661) *
                C139736) *
               C139824 * C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[19] +=
        (-std::pow(Pi, 2.5) *
         ((((C5811 * C114 - C5816 * C108 + C139736 * C116 - C5818 * C109) *
                C5894 +
            (C5811 * C354 - C5816 * C348 + C139736 * C355 - C5818 * C349) *
                C5813 +
            (C7039 - C7040 + C7041 - C7042) * C5895 +
            (C7043 - C7044 + C7045 - C7046) * C5814 +
            (C7047 - C7048 + C7049 - C7050) * C5896 +
            (C7051 - C7052 + C7053 - C7054) * C5815) *
               C139835 * C139809 * C806 +
           ((C7040 - C7039 + C7042 - C7041) * C5894 +
            (C7044 - C7043 + C7046 - C7045) * C5813 +
            (C7048 - C7047 + C7050 - C7049) * C5895 +
            (C7052 - C7051 + C7054 - C7053) * C5814 +
            (C5816 * C6627 - C5811 * C6631 + C5818 * C6626 - C139736 * C6629) *
                C5896 +
            (C5816 * C7032 - C5811 * C7035 + C5818 * C7033 - C139736 * C7036) *
                C5815) *
               C139835 * C139809 * C140000) *
              C808 +
          (((C5816 * C109 - C5811 * C116 + C5818 * C110 - C139736 * C118) *
                C5894 +
            (C5816 * C349 - C5811 * C355 + C5818 * C350 - C139736 * C356) *
                C5813 +
            (C7055 - C7056 + C7057 - C7058) * C5895 +
            (C7059 - C7060 + C7061 - C7062) * C5814 +
            (C7063 - C7064 + C7065 - C7066) * C5896 +
            (C7067 - C7068 + C7069 - C7070) * C5815) *
               C139835 * C139809 * C806 +
           ((C7056 - C7055 + C7058 - C7057) * C5894 +
            (C7060 - C7059 + C7062 - C7061) * C5813 +
            (C7064 - C7063 + C7066 - C7065) * C5895 +
            (C7068 - C7067 + C7070 - C7069) * C5814 +
            (C5811 * C6629 - C5816 * C6626 + C139736 * C6633 - C5818 * C6628) *
                C5896 +
            (C5811 * C7036 - C5816 * C7033 + C139736 * C7037 - C5818 * C7034) *
                C5815) *
               C139835 * C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C89 * C114 - C100 * C108 + C90 * C116 - C102 * C109 + C91 * C118 -
             C104 * C110 + C92 * C120 - C106 * C111) *
                C182 +
            (C89 * C354 - C100 * C348 + C90 * C355 - C102 * C349 + C91 * C356 -
             C104 * C350 + C92 * C357 - C106 * C351) *
                C139824) *
               C139835 * C139809 * C806 +
           ((C100 * C813 - C89 * C821 + C102 * C812 - C90 * C819 + C104 * C811 -
             C91 * C817 + C106 * C810 - C92 * C815) *
                C182 +
            (C100 * C1072 - C89 * C1077 + C102 * C1073 - C90 * C1078 +
             C104 * C1074 - C91 * C1079 + C106 * C1075 - C92 * C1080) *
                C139824) *
               C139835 * C139809 * C140000) *
              C808 +
          (((C100 * C109 - C89 * C116 + C102 * C110 - C90 * C118 + C104 * C111 -
             C91 * C120 + C106 * C112 - C92 * C122) *
                C182 +
            (C100 * C349 - C89 * C355 + C102 * C350 - C90 * C356 + C104 * C351 -
             C91 * C357 + C106 * C352 - C92 * C358) *
                C139824) *
               C139835 * C139809 * C806 +
           ((C89 * C819 - C100 * C812 + C90 * C817 - C102 * C811 + C91 * C815 -
             C104 * C810 + C92 * C823 - C106 * C814) *
                C182 +
            (C89 * C1078 - C100 * C1073 + C90 * C1079 - C102 * C1074 +
             C91 * C1080 - C104 * C1075 + C92 * C1081 - C106 * C1076) *
                C139824) *
               C139835 * C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C5811 * C114 - C5816 * C108 + C139736 * C116 - C5818 * C109) *
                 C182 +
             (C5811 * C354 - C5816 * C348 + C139736 * C355 - C5818 * C349) *
                 C139824) *
                C13856 +
            ((C5811 * C1578 - C5816 * C1570 + C139736 * C1576 - C5818 * C1569) *
                 C182 +
             (C5811 * C1834 - C5816 * C1829 + C139736 * C1835 - C5818 * C1830) *
                 C139824) *
                C13857 +
            ((C5811 * C5277 - C5816 * C5273 + C139736 * C5279 - C5818 * C5274) *
                 C182 +
             (C5811 * C5459 - C5816 * C5455 + C139736 * C5460 - C5818 * C5456) *
                 C139824) *
                C13858) *
               C139809 * C806 +
           (((C7040 - C7039 + C7042 - C7041) * C182 +
             (C7044 - C7043 + C7046 - C7045) * C139824) *
                C13856 +
            ((C10745 - C10746 + C10747 - C10748) * C182 +
             (C10749 - C10750 + C10751 - C10752) * C139824) *
                C13857 +
            ((C5816 * C13126 - C5811 * C13130 + C5818 * C13127 -
              C139736 * C13132) *
                 C182 +
             (C5816 * C13380 - C5811 * C13384 + C5818 * C13381 -
              C139736 * C13385) *
                 C139824) *
                C13858) *
               C139809 * C140000) *
              C808 +
          ((((C5816 * C109 - C5811 * C116 + C5818 * C110 - C139736 * C118) *
                 C182 +
             (C5816 * C349 - C5811 * C355 + C5818 * C350 - C139736 * C356) *
                 C139824) *
                C13856 +
            ((C5816 * C1569 - C5811 * C1576 + C5818 * C1568 - C139736 * C1574) *
                 C182 +
             (C5816 * C1830 - C5811 * C1835 + C5818 * C1831 - C139736 * C1836) *
                 C139824) *
                C13857 +
            ((C5816 * C5274 - C5811 * C5279 + C5818 * C5275 - C139736 * C5281) *
                 C182 +
             (C5816 * C5456 - C5811 * C5460 + C5818 * C5457 - C139736 * C5461) *
                 C139824) *
                C13858) *
               C139809 * C806 +
           (((C7056 - C7055 + C7058 - C7057) * C182 +
             (C7060 - C7059 + C7062 - C7061) * C139824) *
                C13856 +
            ((C5811 * C3444 - C5816 * C3439 + C139736 * C3446 - C5818 * C3440) *
                 C182 +
             (C5811 * C3673 - C5816 * C3669 + C139736 * C3674 - C5818 * C3670) *
                 C139824) *
                C13857 +
            ((C5811 * C13132 - C5816 * C13127 + C139736 * C14660 -
              C5818 * C14659) *
                 C182 +
             (C5811 * C13385 - C5816 * C13381 + C139736 * C14982 -
              C5818 * C14981) *
                 C139824) *
                C13858) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[19] +=
        (-std::pow(Pi, 2.5) *
         ((((C5894 * C183 - C6151 * C108 - C5894 * C348 + C5813 * C411 +
             C5895 * C896 - C6152 * C813 - C5895 * C1072 + C5814 * C1151 +
             C5896 * C2974 - C6153 * C2908 - C5896 * C3090 + C5815 * C3148) *
                C5811 +
            (C6191 + C6192 + C6193) * C139736) *
               C139835 * C139809 * C806 -
           ((C7190 + C7191 + C7192) * C139736 +
            (C5896 * C6792 - C6153 * C6627 - C5896 * C7032 + C5815 * C7169 +
             C5895 * C2974 - C6152 * C2908 - C5895 * C3090 + C5814 * C3148 +
             C5894 * C896 - C6151 * C813 - C5894 * C1072 + C5813 * C1151) *
                C5811) *
               C139835 * C139809 * C140000) *
              C808 +
          (((C7192 + C7191 + C7190) * C5811 +
            (C5894 * C898 - C6151 * C811 - C5894 * C1074 + C5813 * C1149 +
             C5895 * C2976 - C6152 * C2910 - C5895 * C3092 + C5814 * C3150 +
             C5896 * C6794 - C6153 * C6628 - C5896 * C7034 + C5815 * C7170) *
                C139736) *
               C139835 * C139809 * C140000 -
           ((C6194 + C6195 + C6196) * C139736 +
            (C6193 + C6192 + C6191) * C5811) *
               C139835 * C139809 * C806) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C182 * C183 - C410 * C108 - C182 * C348 + C139824 * C411) * C89 +
            C442 * C90 + C443 * C91 + C444 * C92) *
               C139835 * C139809 * C806 -
           (C1172 * C92 + C1173 * C91 + C1174 * C90 +
            (C182 * C896 - C410 * C813 - C182 * C1072 + C139824 * C1151) *
                C89) *
               C139835 * C139809 * C140000) *
              C808 +
          ((C1174 * C89 + C1173 * C90 + C1172 * C91 +
            (C182 * C900 - C410 * C814 - C182 * C1076 + C139824 * C1152) *
                C92) *
               C139835 * C139809 * C140000 -
           (C445 * C92 + C444 * C91 + C443 * C90 + C442 * C89) * C139835 *
               C139809 * C806) *
              C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C182 * C183 - C410 * C108 - C182 * C348 + C139824 * C411) *
                 C5811 +
             C442 * C139736) *
                C13856 +
            ((C182 * C1653 - C410 * C1570 - C182 * C1829 + C139824 * C1908) *
                 C5811 +
             C1931 * C139736) *
                C13857 +
            ((C182 * C5339 - C410 * C5273 - C182 * C5455 + C139824 * C5513) *
                 C5811 +
             C14203 * C139736) *
                C13858) *
               C139809 * C806 -
           ((C15095 * C139736 + (C182 * C13216 - C410 * C13126 - C182 * C13380 +
                                 C139824 * C13462) *
                                    C5811) *
                C13858 +
            (C15096 * C139736 +
             (C182 * C3520 - C410 * C3438 - C182 * C3668 + C139824 * C3742) *
                 C5811) *
                C13857 +
            (C1174 * C139736 +
             (C182 * C896 - C410 * C813 - C182 * C1072 + C139824 * C1151) *
                 C5811) *
                C13856) *
               C139809 * C140000) *
              C808 +
          (((C1174 * C5811 + C1173 * C139736) * C13856 +
            (C15096 * C5811 +
             (C182 * C3522 - C410 * C3440 - C182 * C3670 + C139824 * C3744) *
                 C139736) *
                C13857 +
            (C15095 * C5811 + (C182 * C14761 - C410 * C14659 - C182 * C14981 +
                               C139824 * C15081) *
                                  C139736) *
                C13858) *
               C139809 * C140000 -
           ((C14204 * C139736 + C14203 * C5811) * C13858 +
            (C1930 * C139736 + C1931 * C5811) * C13857 +
            (C443 * C139736 + C442 * C5811) * C13856) *
               C139809 * C806) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[19] +=
        (-std::pow(Pi, 2.5) *
         (((((C139835 * C266 - C265 * C108) * C5894 +
             (C139835 * C495 - C265 * C348) * C5813 + (C6915 - C6916) * C5895 +
             (C7294 - C7295) * C5814 + (C6921 - C6922) * C5896 +
             (C7296 - C7297) * C5815) *
                C5811 +
            ((C279 - C280) * C5894 + (C502 - C503) * C5813 + C6919 * C5895 +
             C7298 * C5814 + C6925 * C5896 + C7299 * C5815) *
                C139736) *
               C139809 * C806 +
           (((C6916 - C6915) * C5894 + (C7295 - C7294) * C5813 +
             (C6922 - C6921) * C5895 + (C7297 - C7296) * C5814 +
             (C265 * C6627 - C139835 * C6908) * C5896 +
             (C265 * C7032 - C139835 * C7290) * C5815) *
                C5811 +
            (C6927 * C5894 + C7300 * C5813 + C6929 * C5895 + C7301 * C5814 +
             (C6931 - C6932) * C5896 + (C7302 - C7303) * C5815) *
                C139736) *
               C139809 * C140000) *
              C808 +
          ((((C280 - C279) * C5894 + (C503 - C502) * C5813 + C6927 * C5895 +
             C7300 * C5814 + C6929 * C5896 + C7301 * C5815) *
                C5811 +
            ((C284 - C283) * C5894 + (C506 - C505) * C5813 +
             (C999 - C1000) * C5895 + (C1248 - C1249) * C5814 +
             (C6000 - C6001) * C5896 + (C6273 - C6274) * C5815) *
                C139736) *
               C139809 * C806 +
           ((C6919 * C5894 + C7298 * C5813 + C6925 * C5895 + C7299 * C5814 +
             (C6932 - C6931) * C5896 + (C7303 - C7302) * C5815) *
                C5811 +
            ((C1000 - C999) * C5894 + (C1249 - C1248) * C5813 +
             (C6001 - C6000) * C5895 + (C6274 - C6273) * C5814 +
             (C139835 * C6910 - C265 * C6628) * C5896 +
             (C139835 * C7292 - C265 * C7034) * C5815) *
                C139736) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C139835 * C266 - C265 * C108) * C182 +
             (C139835 * C495 - C265 * C348) * C139824) *
                C89 +
            ((C279 - C280) * C182 + (C502 - C503) * C139824) * C90 +
            C516 * C91 + C517 * C92) *
               C139809 * C806 +
           (((C265 * C813 - C139835 * C984) * C182 +
             (C265 * C1072 - C139835 * C1240) * C139824) *
                C89 +
            ((C995 - C996) * C182 + (C1246 - C1247) * C139824) * C90 +
            ((C999 - C1000) * C182 + (C1248 - C1249) * C139824) * C91 +
            ((C1003 - C1004) * C182 + (C1250 - C1251) * C139824) * C92) *
               C139809 * C140000) *
              C808 +
          ((((C280 - C279) * C182 + (C503 - C502) * C139824) * C89 +
            ((C284 - C283) * C182 + (C506 - C505) * C139824) * C90 +
            ((C288 - C287) * C182 + (C509 - C508) * C139824) * C91 +
            ((C291 - C292) * C182 + (C510 - C511) * C139824) * C92) *
               C139809 * C806 +
           (((C996 - C995) * C182 + (C1247 - C1246) * C139824) * C89 +
            ((C1000 - C999) * C182 + (C1249 - C1248) * C139824) * C90 +
            ((C1004 - C1003) * C182 + (C1251 - C1250) * C139824) * C91 +
            ((C139835 * C988 - C265 * C814) * C182 +
             (C139835 * C1244 - C265 * C1076) * C139824) *
                C92) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C13856 * C266 - C14015 * C108 + C13857 * C1741 - C14016 * C1570 +
              C13858 * C5397 - C14017 * C5273) *
                 C182 +
             (C13856 * C495 - C14015 * C348 + C13857 * C1997 - C14016 * C1829 +
              C13858 * C5567 - C14017 * C5455) *
                 C139824) *
                C5811 +
            ((C14019 - C14020 + C14021 - C14022 + C14023 - C14024) * C182 +
             (C14279 - C14280 + C14281 - C14282 + C14283 - C14284) * C139824) *
                C139736) *
               C139809 * C806 +
           (((C14015 * C813 - C13856 * C984 + C14016 * C3438 - C13857 * C3594 +
              C14017 * C13126 - C13858 * C13298) *
                 C182 +
             (C14015 * C1072 - C13856 * C1240 + C14016 * C3668 -
              C13857 * C3812 + C14017 * C13380 - C13858 * C13540) *
                 C139824) *
                C5811 +
            ((C14872 - C14873 + C14874 - C14875 + C14876 - C14877) * C182 +
             (C15196 - C15197 + C15198 - C15199 + C15200 - C15201) * C139824) *
                C139736) *
               C139809 * C140000) *
              C808 +
          ((((C14020 - C14019 + C14022 - C14021 + C14024 - C14023) * C182 +
             (C14280 - C14279 + C14282 - C14281 + C14284 - C14283) * C139824) *
                C5811 +
            ((C14031 - C14032 + C14033 - C14034 + C14035 - C14036) * C182 +
             (C14285 - C14286 + C14287 - C14288 + C14289 - C14290) * C139824) *
                C139736) *
               C139809 * C806 +
           (((C14873 - C14872 + C14875 - C14874 + C14877 - C14876) * C182 +
             (C15197 - C15196 + C15199 - C15198 + C15201 - C15200) * C139824) *
                C5811 +
            ((C13856 * C986 - C14015 * C811 + C13857 * C3596 - C14016 * C3440 +
              C13858 * C14869 - C14017 * C14659) *
                 C182 +
             (C13856 * C1242 - C14015 * C1074 + C13857 * C3814 -
              C14016 * C3670 + C13858 * C15194 - C14017 * C14981) *
                 C139824) *
                C139736) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eezx[19] +=
        (-std::pow(Pi, 2.5) *
         (((((C5811 * C114 - C5816 * C108 + C139736 * C116 - C5818 * C109) *
                 C265 +
             (C5811 * C573 - C5816 * C567 + C139736 * C574 - C5818 * C568) *
                 C139835) *
                C5813 +
            ((C7039 - C7040 + C7041 - C7042) * C265 +
             (C7408 - C7409 + C7410 - C7411) * C139835) *
                C5814 +
            ((C7047 - C7048 + C7049 - C7050) * C265 +
             (C7412 - C7413 + C7414 - C7415) * C139835) *
                C5815) *
               C139809 * C806 +
           (((C7040 - C7039 + C7042 - C7041) * C265 +
             (C7409 - C7408 + C7411 - C7410) * C139835) *
                C5813 +
            ((C7048 - C7047 + C7050 - C7049) * C265 +
             (C7413 - C7412 + C7415 - C7414) * C139835) *
                C5814 +
            ((C5816 * C6627 - C5811 * C6631 + C5818 * C6626 - C139736 * C6629) *
                 C265 +
             (C5816 * C7401 - C5811 * C7404 + C5818 * C7402 - C139736 * C7405) *
                 C139835) *
                C5815) *
               C139809 * C140000) *
              C808 +
          ((((C5816 * C109 - C5811 * C116 + C5818 * C110 - C139736 * C118) *
                 C265 +
             (C5816 * C568 - C5811 * C574 + C5818 * C569 - C139736 * C575) *
                 C139835) *
                C5813 +
            ((C7055 - C7056 + C7057 - C7058) * C265 +
             (C7416 - C7417 + C7418 - C7419) * C139835) *
                C5814 +
            ((C7063 - C7064 + C7065 - C7066) * C265 +
             (C7420 - C7421 + C7422 - C7423) * C139835) *
                C5815) *
               C139809 * C806 +
           (((C7056 - C7055 + C7058 - C7057) * C265 +
             (C7417 - C7416 + C7419 - C7418) * C139835) *
                C5813 +
            ((C7064 - C7063 + C7066 - C7065) * C265 +
             (C7421 - C7420 + C7423 - C7422) * C139835) *
                C5814 +
            ((C5811 * C6629 - C5816 * C6626 + C139736 * C6633 - C5818 * C6628) *
                 C265 +
             (C5811 * C7405 - C5816 * C7402 + C139736 * C7406 - C5818 * C7403) *
                 C139835) *
                C5815) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C89 * C114 - C100 * C108 + C90 * C116 - C102 * C109 + C91 * C118 -
             C104 * C110 + C92 * C120 - C106 * C111) *
                C265 +
            (C89 * C573 - C100 * C567 + C90 * C574 - C102 * C568 + C91 * C575 -
             C104 * C569 + C92 * C576 - C106 * C570) *
                C139835) *
               C139824 * C139809 * C806 +
           ((C100 * C813 - C89 * C821 + C102 * C812 - C90 * C819 + C104 * C811 -
             C91 * C817 + C106 * C810 - C92 * C815) *
                C265 +
            (C100 * C1317 - C89 * C1322 + C102 * C1318 - C90 * C1323 +
             C104 * C1319 - C91 * C1324 + C106 * C1320 - C92 * C1325) *
                C139835) *
               C139824 * C139809 * C140000) *
              C808 +
          (((C100 * C109 - C89 * C116 + C102 * C110 - C90 * C118 + C104 * C111 -
             C91 * C120 + C106 * C112 - C92 * C122) *
                C265 +
            (C100 * C568 - C89 * C574 + C102 * C569 - C90 * C575 + C104 * C570 -
             C91 * C576 + C106 * C571 - C92 * C577) *
                C139835) *
               C139824 * C139809 * C806 +
           ((C89 * C819 - C100 * C812 + C90 * C817 - C102 * C811 + C91 * C815 -
             C104 * C810 + C92 * C823 - C106 * C814) *
                C265 +
            (C89 * C1323 - C100 * C1318 + C90 * C1324 - C102 * C1319 +
             C91 * C1325 - C104 * C1320 + C92 * C1326 - C106 * C1321) *
                C139835) *
               C139824 * C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C5811 * C114 - C5816 * C108 + C139736 * C116 - C5818 * C109) *
                C14015 +
            (C5811 * C573 - C5816 * C567 + C139736 * C574 - C5818 * C568) *
                C13856 +
            (C5811 * C1578 - C5816 * C1570 + C139736 * C1576 - C5818 * C1569) *
                C14016 +
            (C5811 * C2079 - C5816 * C2074 + C139736 * C2080 - C5818 * C2075) *
                C13857 +
            (C5811 * C5277 - C5816 * C5273 + C139736 * C5279 - C5818 * C5274) *
                C14017 +
            (C5811 * C5625 - C5816 * C5621 + C139736 * C5626 - C5818 * C5622) *
                C13858) *
               C139824 * C139809 * C806 +
           ((C7040 - C7039 + C7042 - C7041) * C14015 +
            (C7409 - C7408 + C7411 - C7410) * C13856 +
            (C10745 - C10746 + C10747 - C10748) * C14016 +
            (C11067 - C11068 + C11069 - C11070) * C13857 +
            (C5816 * C13126 - C5811 * C13130 + C5818 * C13127 -
             C139736 * C13132) *
                C14017 +
            (C5816 * C13618 - C5811 * C13622 + C5818 * C13619 -
             C139736 * C13623) *
                C13858) *
               C139824 * C139809 * C140000) *
              C808 +
          (((C5816 * C109 - C5811 * C116 + C5818 * C110 - C139736 * C118) *
                C14015 +
            (C5816 * C568 - C5811 * C574 + C5818 * C569 - C139736 * C575) *
                C13856 +
            (C5816 * C1569 - C5811 * C1576 + C5818 * C1568 - C139736 * C1574) *
                C14016 +
            (C5816 * C2075 - C5811 * C2080 + C5818 * C2076 - C139736 * C2081) *
                C13857 +
            (C5816 * C5274 - C5811 * C5279 + C5818 * C5275 - C139736 * C5281) *
                C14017 +
            (C5816 * C5622 - C5811 * C5626 + C5818 * C5623 - C139736 * C5627) *
                C13858) *
               C139824 * C139809 * C806 +
           ((C7056 - C7055 + C7058 - C7057) * C14015 +
            (C7417 - C7416 + C7419 - C7418) * C13856 +
            (C5811 * C3444 - C5816 * C3439 + C139736 * C3446 - C5818 * C3440) *
                C14016 +
            (C5811 * C3887 - C5816 * C3883 + C139736 * C3888 - C5818 * C3884) *
                C13857 +
            (C5811 * C13132 - C5816 * C13127 + C139736 * C14660 -
             C5818 * C14659) *
                C14017 +
            (C5811 * C13623 - C5816 * C13619 + C139736 * C15300 -
             C5818 * C15299) *
                C13858) *
               C139824 * C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eezy[19] +=
        (-std::pow(Pi, 2.5) *
         (((((C5813 * C183 - C5894 * C108 + C5814 * C896 - C5895 * C813 +
              C5815 * C2974 - C5896 * C2908) *
                 C265 +
             (C5813 * C629 - C5894 * C567 + C5814 * C1393 - C5895 * C1317 +
              C5815 * C3314 - C5896 * C3256) *
                 C139835) *
                C5811 +
            ((C5898 - C5899 + C5900 - C5901 + C5902 - C5903) * C265 +
             (C6423 - C6424 + C6425 - C6426 + C6427 - C6428) * C139835) *
                C139736) *
               C139809 * C806 +
           (((C5894 * C813 - C5813 * C896 + C5895 * C2908 - C5814 * C2974 +
              C5896 * C6627 - C5815 * C6792) *
                 C265 +
             (C5894 * C1317 - C5813 * C1393 + C5895 * C3256 - C5814 * C3314 +
              C5896 * C7401 - C5815 * C7521) *
                 C139835) *
                C5811 +
            ((C6799 - C6800 + C6801 - C6802 + C6803 - C6804) * C265 +
             (C7525 - C7526 + C7527 - C7528 + C7529 - C7530) * C139835) *
                C139736) *
               C139809 * C140000) *
              C808 +
          ((((C5899 - C5898 + C5901 - C5900 + C5903 - C5902) * C265 +
             (C6424 - C6423 + C6426 - C6425 + C6428 - C6427) * C139835) *
                C5811 +
            ((C5910 - C5911 + C5912 - C5913 + C5914 - C5915) * C265 +
             (C6429 - C6430 + C6431 - C6432 + C6433 - C6434) * C139835) *
                C139736) *
               C139809 * C806 +
           (((C6800 - C6799 + C6802 - C6801 + C6804 - C6803) * C265 +
             (C7526 - C7525 + C7528 - C7527 + C7530 - C7529) * C139835) *
                C5811 +
            ((C5813 * C898 - C5894 * C811 + C5814 * C2976 - C5895 * C2910 +
              C5815 * C6794 - C5896 * C6628) *
                 C265 +
             (C5813 * C1395 - C5894 * C1319 + C5814 * C3316 - C5895 * C3258 +
              C5815 * C7523 - C5896 * C7403) *
                 C139835) *
                C139736) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C139824 * C183 - C182 * C108) * C265 +
             (C139824 * C629 - C182 * C567) * C139835) *
                C89 +
            ((C196 - C197) * C265 + (C636 - C637) * C139835) * C90 +
            C650 * C91 + C651 * C92) *
               C139809 * C806 +
           (((C182 * C813 - C139824 * C896) * C265 +
             (C182 * C1317 - C139824 * C1393) * C139835) *
                C89 +
            ((C907 - C908) * C265 + (C1399 - C1400) * C139835) * C90 +
            ((C911 - C912) * C265 + (C1401 - C1402) * C139835) * C91 +
            ((C915 - C916) * C265 + (C1403 - C1404) * C139835) * C92) *
               C139809 * C140000) *
              C808 +
          ((((C197 - C196) * C265 + (C637 - C636) * C139835) * C89 +
            ((C201 - C200) * C265 + (C640 - C639) * C139835) * C90 +
            ((C205 - C204) * C265 + (C643 - C642) * C139835) * C91 +
            ((C208 - C209) * C265 + (C644 - C645) * C139835) * C92) *
               C139809 * C806 +
           (((C908 - C907) * C265 + (C1400 - C1399) * C139835) * C89 +
            ((C912 - C911) * C265 + (C1402 - C1401) * C139835) * C90 +
            ((C916 - C915) * C265 + (C1404 - C1403) * C139835) * C91 +
            ((C139824 * C900 - C182 * C814) * C265 +
             (C139824 * C1397 - C182 * C1321) * C139835) *
                C92) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C139824 * C183 - C182 * C108) * C14015 +
             (C139824 * C629 - C182 * C567) * C13856 +
             (C139824 * C1653 - C182 * C1570) * C14016 +
             (C139824 * C2150 - C182 * C2074) * C13857 +
             (C139824 * C5339 - C182 * C5273) * C14017 +
             (C139824 * C5679 - C182 * C5621) * C13858) *
                C5811 +
            ((C196 - C197) * C14015 + (C636 - C637) * C13856 +
             (C1665 - C1664) * C14016 + (C2157 - C2156) * C13857 +
             (C13934 - C13935) * C14017 + (C14439 - C14440) * C13858) *
                C139736) *
               C139809 * C806 +
           (((C182 * C813 - C139824 * C896) * C14015 +
             (C182 * C1317 - C139824 * C1393) * C13856 +
             (C182 * C3438 - C139824 * C3520) * C14016 +
             (C182 * C3882 - C139824 * C3956) * C13857 +
             (C182 * C13126 - C139824 * C13216) * C14017 +
             (C182 * C13618 - C139824 * C13700) * C13858) *
                C5811 +
            ((C907 - C908) * C14015 + (C1399 - C1400) * C13856 +
             (C14764 - C14765) * C14016 + (C15401 - C15402) * C13857 +
             (C14768 - C14769) * C14017 + (C15403 - C15404) * C13858) *
                C139736) *
               C139809 * C140000) *
              C808 +
          ((((C197 - C196) * C14015 + (C637 - C636) * C13856 +
             (C1664 - C1665) * C14016 + (C2156 - C2157) * C13857 +
             (C13935 - C13934) * C14017 + (C14440 - C14439) * C13858) *
                C5811 +
            ((C201 - C200) * C14015 + (C640 - C639) * C13856 +
             (C1668 - C1669) * C14016 + (C2158 - C2159) * C13857 +
             (C13938 - C13939) * C14017 + (C14441 - C14442) * C13858) *
                C139736) *
               C139809 * C806 +
           (((C908 - C907) * C14015 + (C1400 - C1399) * C13856 +
             (C14765 - C14764) * C14016 + (C15402 - C15401) * C13857 +
             (C14769 - C14768) * C14017 + (C15404 - C15403) * C13858) *
                C5811 +
            ((C912 - C911) * C14015 + (C1402 - C1401) * C13856 +
             (C139824 * C3522 - C182 * C3440) * C14016 +
             (C139824 * C3958 - C182 * C3884) * C13857 +
             (C139824 * C14761 - C182 * C14659) * C14017 +
             (C139824 * C15399 - C182 * C15299) * C13858) *
                C139736) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eezz[19] +=
        (-std::pow(Pi, 2.5) *
         (((((C265 * C266 - C701 * C108 - C265 * C567 + C139835 * C702) *
                 C5813 +
             C7652 * C5814 + C7653 * C5815) *
                C5811 +
            (C6509 + C6510 + C6527) * C139736) *
               C139809 * C806 -
           ((C7655 + C7644 + C7645) * C139736 +
            ((C265 * C6908 - C701 * C6627 - C265 * C7401 + C139835 * C7629) *
                 C5815 +
             C7653 * C5814 + C7652 * C5813) *
                C5811) *
               C139809 * C140000) *
              C808 +
          (((C7645 + C7644 + C7655) * C5811 +
            (C1495 * C5813 + C6526 * C5814 +
             (C265 * C6910 - C701 * C6628 - C265 * C7403 + C139835 * C7630) *
                 C5815) *
                C139736) *
               C139809 * C140000 -
           ((C6528 + C6519 + C6520) * C139736 +
            (C6527 + C6510 + C6509) * C5811) *
               C139809 * C806) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C265 * C266 - C701 * C108 - C265 * C567 + C139835 * C702) *
                C139824 * C89 +
            C737 * C90 + C738 * C91 + C739 * C92) *
               C139809 * C806 -
           (C1497 * C92 + C1498 * C91 + C1499 * C90 +
            (C265 * C984 - C701 * C813 - C265 * C1317 + C139835 * C1473) *
                C139824 * C89) *
               C139809 * C140000) *
              C808 +
          ((C1499 * C89 + C1498 * C90 + C1497 * C91 +
            (C265 * C988 - C701 * C814 - C265 * C1321 + C139835 * C1474) *
                C139824 * C92) *
               C139809 * C140000 -
           (C740 * C92 + C739 * C91 + C738 * C90 + C737 * C89) * C139809 *
               C806) *
              C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C14015 * C266 - C14516 * C108 - C14015 * C567 + C13856 * C702 +
             C14016 * C1741 - C14517 * C1570 - C14016 * C2074 + C13857 * C2230 +
             C14017 * C5397 - C14518 * C5273 - C14017 * C5621 +
             C13858 * C5733) *
                C139824 * C5811 +
            (C14556 + C14557 + C14558) * C139824 * C139736) *
               C139809 * C806 -
           ((C15522 + C15523 + C15524) * C139824 * C139736 +
            (C14017 * C13298 - C14518 * C13126 - C14017 * C13618 +
             C13858 * C13778 + C14016 * C3594 - C14517 * C3438 -
             C14016 * C3882 + C13857 * C4026 + C14015 * C984 - C14516 * C813 -
             C14015 * C1317 + C13856 * C1473) *
                C139824 * C5811) *
               C139809 * C140000) *
              C808 +
          (((C15524 + C15523 + C15522) * C139824 * C5811 +
            (C14015 * C986 - C14516 * C811 - C14015 * C1319 + C13856 * C1471 +
             C14016 * C3596 - C14517 * C3440 - C14016 * C3884 + C13857 * C4028 +
             C14017 * C14869 - C14518 * C14659 - C14017 * C15299 +
             C13858 * C15502) *
                C139824 * C139736) *
               C139809 * C140000 -
           ((C14559 + C14560 + C14561) * C139824 * C139736 +
            (C14558 + C14557 + C14556) * C139824 * C5811) *
               C139809 * C806) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eexx[20] +=
        (-std::pow(Pi, 2.5) *
         ((((C5816 * C114 - C5817 * C108 - C5816 * C115 + C5811 * C126 +
             C5818 * C116 - C5819 * C109 - C5818 * C117 + C139736 * C127) *
                C139835 * C5813 +
            (C6687 + C6688) * C139835 * C5814 +
            (C6689 + C6690) * C139835 * C5815) *
               C1565 -
           ((C5818 * C7756 - C5819 * C7753 - C5818 * C7757 + C139736 * C7762 +
             C5816 * C7758 - C5817 * C7754 - C5816 * C7759 + C5811 * C7763) *
                C139835 * C5815 +
            (C5818 * C3444 - C5819 * C3439 - C5818 * C3445 + C139736 * C3451 +
             C5816 * C3442 - C5817 * C3438 - C5816 * C3443 + C5811 * C3450) *
                C139835 * C5814 +
            (C5818 * C1576 - C5819 * C1569 - C5818 * C1577 + C139736 * C1584 +
             C5816 * C1578 - C5817 * C1570 - C5816 * C1579 + C5811 * C1585) *
                C139835 * C5813) *
               C140002) *
              C139792 * C808 +
          (((C5816 * C1576 - C5817 * C1569 - C5816 * C1577 + C5811 * C1584 +
             C5818 * C1574 - C5819 * C1568 - C5818 * C1575 + C139736 * C1583) *
                C139835 * C5813 +
            (C5816 * C3444 - C5817 * C3439 - C5816 * C3445 + C5811 * C3451 +
             C5818 * C3446 - C5819 * C3440 - C5818 * C3447 + C139736 * C3452) *
                C139835 * C5814 +
            (C5816 * C7756 - C5817 * C7753 - C5816 * C7757 + C5811 * C7762 +
             C5818 * C7760 - C5819 * C7755 - C5818 * C7761 + C139736 * C7764) *
                C139835 * C5815) *
               C140002 -
           ((C6694 + C6693) * C139835 * C5815 +
            (C6692 + C6691) * C139835 * C5814 +
            (C5818 * C118 - C5819 * C110 - C5818 * C119 + C139736 * C128 +
             C5816 * C116 - C5817 * C109 - C5816 * C117 + C5811 * C127) *
                C139835 * C5813) *
               C1565) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C100 * C114 - C101 * C108 - C100 * C115 + C89 * C126 + C102 * C116 -
            C103 * C109 - C102 * C117 + C90 * C127 + C104 * C118 - C105 * C110 -
            C104 * C119 + C91 * C128 + C106 * C120 - C107 * C111 - C106 * C121 +
            C92 * C129) *
               C139835 * C139824 * C1565 -
           (C106 * C1572 - C107 * C1567 - C106 * C1573 + C92 * C1582 +
            C104 * C1574 - C105 * C1568 - C104 * C1575 + C91 * C1583 +
            C102 * C1576 - C103 * C1569 - C102 * C1577 + C90 * C1584 +
            C100 * C1578 - C101 * C1570 - C100 * C1579 + C89 * C1585) *
               C139835 * C139824 * C140002) *
              C139792 * C808 +
          ((C100 * C1576 - C101 * C1569 - C100 * C1577 + C89 * C1584 +
            C102 * C1574 - C103 * C1568 - C102 * C1575 + C90 * C1583 +
            C104 * C1572 - C105 * C1567 - C104 * C1573 + C91 * C1582 +
            C106 * C1580 - C107 * C1571 - C106 * C1581 + C92 * C1586) *
               C139835 * C139824 * C140002 -
           (C106 * C122 - C107 * C112 - C106 * C123 + C92 * C130 + C104 * C120 -
            C105 * C111 - C104 * C121 + C91 * C129 + C102 * C118 - C103 * C110 -
            C102 * C119 + C90 * C128 + C100 * C116 - C101 * C109 - C100 * C117 +
            C89 * C127) *
               C139835 * C139824 * C1565) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C5816 * C114 - C5817 * C108 - C5816 * C115 + C5811 * C126 +
             C5818 * C116 - C5819 * C109 - C5818 * C117 + C139736 * C127) *
                C13856 +
            (C15683 + C15684) * C13857 + (C15685 + C15686) * C13858) *
               C139824 * C1565 -
           ((C5818 * C15625 - C5819 * C15622 - C5818 * C15626 +
             C139736 * C15631 + C5816 * C15627 - C5817 * C15623 -
             C5816 * C15628 + C5811 * C15632) *
                C13858 +
            (C15686 + C15685) * C13857 + (C15684 + C15683) * C13856) *
               C139824 * C140002) *
              C139792 * C808 +
          (((C15687 + C15688) * C13856 + (C15689 + C15690) * C13857 +
            (C5816 * C15625 - C5817 * C15622 - C5816 * C15626 + C5811 * C15631 +
             C5818 * C15629 - C5819 * C15624 - C5818 * C15630 +
             C139736 * C15633) *
                C13858) *
               C139824 * C140002 -
           ((C15690 + C15689) * C13858 + (C15688 + C15687) * C13857 +
            (C5818 * C118 - C5819 * C110 - C5818 * C119 + C139736 * C128 +
             C5816 * C116 - C5817 * C109 - C5816 * C117 + C5811 * C127) *
                C13856) *
               C139824 * C1565) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eexy[20] +=
        (-std::pow(Pi, 2.5) *
         ((((C5813 * C183 - C5894 * C108 + C5814 * C896 - C5895 * C813 +
             C5815 * C2974 - C5896 * C2908) *
                C5816 +
            (C5813 * C189 - C5894 * C115 + C5814 * C901 - C5895 * C822 +
             C5815 * C2978 - C5896 * C2913) *
                C5811 +
            (C5898 - C5899 + C5900 - C5901 + C5902 - C5903) * C5818 +
            (C5904 - C5905 + C5906 - C5907 + C5908 - C5909) * C139736) *
               C139835 * C1565 +
           ((C5894 * C1570 - C5813 * C1653 + C5895 * C3438 - C5814 * C3520 +
             C5896 * C7754 - C5815 * C7863) *
                C5816 +
            (C5894 * C1579 - C5813 * C1658 + C5895 * C3443 - C5814 * C3524 +
             C5896 * C7759 - C5815 * C7866) *
                C5811 +
            (C7870 - C7871 + C7872 - C7873 + C7874 - C7875) * C5818 +
            (C7876 - C7877 + C7878 - C7879 + C7880 - C7881) * C139736) *
               C139835 * C140002) *
              C139792 * C808 +
          (((C5899 - C5898 + C5901 - C5900 + C5903 - C5902) * C5816 +
            (C5905 - C5904 + C5907 - C5906 + C5909 - C5908) * C5811 +
            (C5910 - C5911 + C5912 - C5913 + C5914 - C5915) * C5818 +
            (C5916 - C5917 + C5918 - C5919 + C5920 - C5921) * C139736) *
               C139835 * C1565 +
           ((C7871 - C7870 + C7873 - C7872 + C7875 - C7874) * C5816 +
            (C7877 - C7876 + C7879 - C7878 + C7881 - C7880) * C5811 +
            (C5813 * C1655 - C5894 * C1568 + C5814 * C3522 - C5895 * C3440 +
             C5815 * C7865 - C5896 * C7755) *
                C5818 +
            (C5813 * C1660 - C5894 * C1575 + C5814 * C3526 - C5895 * C3447 +
             C5815 * C7868 - C5896 * C7761) *
                C139736) *
               C139835 * C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C139824 * C183 - C182 * C108) * C100 +
            (C139824 * C189 - C182 * C115) * C89 + (C196 - C197) * C102 +
            (C198 - C199) * C90 + C212 * C104 + C213 * C91 + C214 * C106 +
            C215 * C92) *
               C139835 * C1565 +
           ((C182 * C1570 - C139824 * C1653) * C100 +
            (C182 * C1579 - C139824 * C1658) * C89 + (C1664 - C1665) * C102 +
            (C1666 - C1667) * C90 + (C1668 - C1669) * C104 +
            (C1670 - C1671) * C91 + (C1672 - C1673) * C106 +
            (C1674 - C1675) * C92) *
               C139835 * C140002) *
              C139792 * C808 +
          (((C197 - C196) * C100 + (C199 - C198) * C89 + (C201 - C200) * C102 +
            (C203 - C202) * C90 + (C205 - C204) * C104 + (C207 - C206) * C91 +
            (C208 - C209) * C106 + (C210 - C211) * C92) *
               C139835 * C1565 +
           ((C1665 - C1664) * C100 + (C1667 - C1666) * C89 +
            (C1669 - C1668) * C102 + (C1671 - C1670) * C90 +
            (C1673 - C1672) * C104 + (C1675 - C1674) * C91 +
            (C139824 * C1657 - C182 * C1571) * C106 +
            (C139824 * C1662 - C182 * C1581) * C92) *
               C139835 * C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C139824 * C183 - C182 * C108) * C5816 +
             (C139824 * C189 - C182 * C115) * C5811 + (C196 - C197) * C5818 +
             (C198 - C199) * C139736) *
                C13856 +
            ((C15795 - C15796) * C5816 + (C15797 - C15798) * C5811 +
             C15799 * C5818 + C15800 * C139736) *
                C13857 +
            ((C15801 - C15802) * C5816 + (C15803 - C15804) * C5811 +
             C15805 * C5818 + C15806 * C139736) *
                C13858) *
               C1565 +
           (((C15796 - C15795) * C5816 + (C15798 - C15797) * C5811 +
             C15807 * C5818 + C15808 * C139736) *
                C13856 +
            ((C15802 - C15801) * C5816 + (C15804 - C15803) * C5811 +
             C15809 * C5818 + C15810 * C139736) *
                C13857 +
            ((C182 * C15623 - C139824 * C15788) * C5816 +
             (C182 * C15628 - C139824 * C15791) * C5811 +
             (C15811 - C15812) * C5818 + (C15813 - C15814) * C139736) *
                C13858) *
               C140002) *
              C139792 * C808 +
          ((((C197 - C196) * C5816 + (C199 - C198) * C5811 +
             (C201 - C200) * C5818 + (C203 - C202) * C139736) *
                C13856 +
            (C15807 * C5816 + C15808 * C5811 + (C1668 - C1669) * C5818 +
             (C1670 - C1671) * C139736) *
                C13857 +
            (C15809 * C5816 + C15810 * C5811 + (C13938 - C13939) * C5818 +
             (C13940 - C13941) * C139736) *
                C13858) *
               C1565 +
           ((C15799 * C5816 + C15800 * C5811 + (C1669 - C1668) * C5818 +
             (C1671 - C1670) * C139736) *
                C13856 +
            (C15805 * C5816 + C15806 * C5811 + (C13939 - C13938) * C5818 +
             (C13941 - C13940) * C139736) *
                C13857 +
            ((C15812 - C15811) * C5816 + (C15814 - C15813) * C5811 +
             (C139824 * C15790 - C182 * C15624) * C5818 +
             (C139824 * C15793 - C182 * C15630) * C139736) *
                C13858) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eexz[20] +=
        (-std::pow(Pi, 2.5) *
         (((((C139835 * C266 - C265 * C108) * C5816 +
             (C139835 * C272 - C265 * C115) * C5811 + (C279 - C280) * C5818 +
             (C281 - C282) * C139736) *
                C5813 +
            ((C6915 - C6916) * C5816 + (C6917 - C6918) * C5811 + C6919 * C5818 +
             C6920 * C139736) *
                C5814 +
            ((C6921 - C6922) * C5816 + (C6923 - C6924) * C5811 + C6925 * C5818 +
             C6926 * C139736) *
                C5815) *
               C1565 +
           (((C265 * C1570 - C139835 * C1741) * C5816 +
             (C265 * C1579 - C139835 * C1746) * C5811 +
             (C1752 - C1753) * C5818 + (C1754 - C1755) * C139736) *
                C5813 +
            ((C265 * C3438 - C139835 * C3594) * C5816 +
             (C265 * C3443 - C139835 * C3598) * C5811 +
             (C7986 - C7987) * C5818 + (C7988 - C7989) * C139736) *
                C5814 +
            ((C265 * C7754 - C139835 * C7979) * C5816 +
             (C265 * C7759 - C139835 * C7982) * C5811 +
             (C7990 - C7991) * C5818 + (C7992 - C7993) * C139736) *
                C5815) *
               C140002) *
              C139792 * C808 +
          ((((C280 - C279) * C5816 + (C282 - C281) * C5811 +
             (C284 - C283) * C5818 + (C286 - C285) * C139736) *
                C5813 +
            (C6927 * C5816 + C6928 * C5811 + (C999 - C1000) * C5818 +
             (C1001 - C1002) * C139736) *
                C5814 +
            (C6929 * C5816 + C6930 * C5811 + (C6000 - C6001) * C5818 +
             (C6002 - C6003) * C139736) *
                C5815) *
               C1565 +
           (((C1753 - C1752) * C5816 + (C1755 - C1754) * C5811 +
             (C1757 - C1756) * C5818 + (C1759 - C1758) * C139736) *
                C5813 +
            ((C7987 - C7986) * C5816 + (C7989 - C7988) * C5811 +
             (C139835 * C3596 - C265 * C3440) * C5818 +
             (C139835 * C3600 - C265 * C3447) * C139736) *
                C5814 +
            ((C7991 - C7990) * C5816 + (C7993 - C7992) * C5811 +
             (C139835 * C7981 - C265 * C7755) * C5818 +
             (C139835 * C7984 - C265 * C7761) * C139736) *
                C5815) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C139835 * C266 - C265 * C108) * C100 +
            (C139835 * C272 - C265 * C115) * C89 + (C279 - C280) * C102 +
            (C281 - C282) * C90 + C295 * C104 + C296 * C91 + C297 * C106 +
            C298 * C92) *
               C139824 * C1565 +
           ((C265 * C1570 - C139835 * C1741) * C100 +
            (C265 * C1579 - C139835 * C1746) * C89 + (C1752 - C1753) * C102 +
            (C1754 - C1755) * C90 + (C1756 - C1757) * C104 +
            (C1758 - C1759) * C91 + (C1760 - C1761) * C106 +
            (C1762 - C1763) * C92) *
               C139824 * C140002) *
              C139792 * C808 +
          (((C280 - C279) * C100 + (C282 - C281) * C89 + (C284 - C283) * C102 +
            (C286 - C285) * C90 + (C288 - C287) * C104 + (C290 - C289) * C91 +
            (C291 - C292) * C106 + (C293 - C294) * C92) *
               C139824 * C1565 +
           ((C1753 - C1752) * C100 + (C1755 - C1754) * C89 +
            (C1757 - C1756) * C102 + (C1759 - C1758) * C90 +
            (C1761 - C1760) * C104 + (C1763 - C1762) * C91 +
            (C139835 * C1745 - C265 * C1571) * C106 +
            (C139835 * C1750 - C265 * C1581) * C92) *
               C139824 * C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C13856 * C266 - C14015 * C108 + C13857 * C1741 - C14016 * C1570 +
             C13858 * C5397 - C14017 * C5273) *
                C5816 +
            (C13856 * C272 - C14015 * C115 + C13857 * C1746 - C14016 * C1579 +
             C13858 * C5401 - C14017 * C5278) *
                C5811 +
            (C14019 - C14020 + C14021 - C14022 + C14023 - C14024) * C5818 +
            (C14025 - C14026 + C14027 - C14028 + C14029 - C14030) * C139736) *
               C139824 * C1565 +
           ((C14015 * C1570 - C13856 * C1741 + C14016 * C5273 - C13857 * C5397 +
             C14017 * C15623 - C13858 * C15912) *
                C5816 +
            (C14015 * C1579 - C13856 * C1746 + C14016 * C5278 - C13857 * C5401 +
             C14017 * C15628 - C13858 * C15915) *
                C5811 +
            (C15919 - C15920 + C15921 - C15922 + C15923 - C15924) * C5818 +
            (C15925 - C15926 + C15927 - C15928 + C15929 - C15930) * C139736) *
               C139824 * C140002) *
              C139792 * C808 +
          (((C14020 - C14019 + C14022 - C14021 + C14024 - C14023) * C5816 +
            (C14026 - C14025 + C14028 - C14027 + C14030 - C14029) * C5811 +
            (C14031 - C14032 + C14033 - C14034 + C14035 - C14036) * C5818 +
            (C14037 - C14038 + C14039 - C14040 + C14041 - C14042) * C139736) *
               C139824 * C1565 +
           ((C15920 - C15919 + C15922 - C15921 + C15924 - C15923) * C5816 +
            (C15926 - C15925 + C15928 - C15927 + C15930 - C15929) * C5811 +
            (C13856 * C1743 - C14015 * C1568 + C13857 * C5399 - C14016 * C5275 +
             C13858 * C15914 - C14017 * C15624) *
                C5818 +
            (C13856 * C1748 - C14015 * C1575 + C13857 * C5403 - C14016 * C5282 +
             C13858 * C15917 - C14017 * C15630) *
                C139736) *
               C139824 * C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[20] +=
        (-std::pow(Pi, 2.5) *
         ((((C5811 * C114 - C5816 * C108 + C139736 * C116 - C5818 * C109) *
                C5894 +
            (C5811 * C354 - C5816 * C348 + C139736 * C355 - C5818 * C349) *
                C5813 +
            (C7039 - C7040 + C7041 - C7042) * C5895 +
            (C7043 - C7044 + C7045 - C7046) * C5814 +
            (C7047 - C7048 + C7049 - C7050) * C5896 +
            (C7051 - C7052 + C7053 - C7054) * C5815) *
               C139835 * C1565 +
           ((C5816 * C1570 - C5811 * C1578 + C5818 * C1569 - C139736 * C1576) *
                C5894 +
            (C5816 * C1829 - C5811 * C1834 + C5818 * C1830 - C139736 * C1835) *
                C5813 +
            (C5816 * C3438 - C5811 * C3442 + C5818 * C3439 - C139736 * C3444) *
                C5895 +
            (C5816 * C3668 - C5811 * C3672 + C5818 * C3669 - C139736 * C3673) *
                C5814 +
            (C5816 * C7754 - C5811 * C7758 + C5818 * C7753 - C139736 * C7756) *
                C5896 +
            (C5816 * C8091 - C5811 * C8094 + C5818 * C8092 - C139736 * C8095) *
                C5815) *
               C139835 * C140002) *
              C139792 * C808 +
          (((C5816 * C109 - C5811 * C116 + C5818 * C110 - C139736 * C118) *
                C5894 +
            (C5816 * C349 - C5811 * C355 + C5818 * C350 - C139736 * C356) *
                C5813 +
            (C7055 - C7056 + C7057 - C7058) * C5895 +
            (C7059 - C7060 + C7061 - C7062) * C5814 +
            (C7063 - C7064 + C7065 - C7066) * C5896 +
            (C7067 - C7068 + C7069 - C7070) * C5815) *
               C139835 * C1565 +
           ((C5811 * C1576 - C5816 * C1569 + C139736 * C1574 - C5818 * C1568) *
                C5894 +
            (C5811 * C1835 - C5816 * C1830 + C139736 * C1836 - C5818 * C1831) *
                C5813 +
            (C5811 * C3444 - C5816 * C3439 + C139736 * C3446 - C5818 * C3440) *
                C5895 +
            (C5811 * C3673 - C5816 * C3669 + C139736 * C3674 - C5818 * C3670) *
                C5814 +
            (C5811 * C7756 - C5816 * C7753 + C139736 * C7760 - C5818 * C7755) *
                C5896 +
            (C5811 * C8095 - C5816 * C8092 + C139736 * C8096 - C5818 * C8093) *
                C5815) *
               C139835 * C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C89 * C114 - C100 * C108 + C90 * C116 - C102 * C109 + C91 * C118 -
             C104 * C110 + C92 * C120 - C106 * C111) *
                C182 +
            (C89 * C354 - C100 * C348 + C90 * C355 - C102 * C349 + C91 * C356 -
             C104 * C350 + C92 * C357 - C106 * C351) *
                C139824) *
               C139835 * C1565 +
           ((C100 * C1570 - C89 * C1578 + C102 * C1569 - C90 * C1576 +
             C104 * C1568 - C91 * C1574 + C106 * C1567 - C92 * C1572) *
                C182 +
            (C100 * C1829 - C89 * C1834 + C102 * C1830 - C90 * C1835 +
             C104 * C1831 - C91 * C1836 + C106 * C1832 - C92 * C1837) *
                C139824) *
               C139835 * C140002) *
              C139792 * C808 +
          (((C100 * C109 - C89 * C116 + C102 * C110 - C90 * C118 + C104 * C111 -
             C91 * C120 + C106 * C112 - C92 * C122) *
                C182 +
            (C100 * C349 - C89 * C355 + C102 * C350 - C90 * C356 + C104 * C351 -
             C91 * C357 + C106 * C352 - C92 * C358) *
                C139824) *
               C139835 * C1565 +
           ((C89 * C1576 - C100 * C1569 + C90 * C1574 - C102 * C1568 +
             C91 * C1572 - C104 * C1567 + C92 * C1580 - C106 * C1571) *
                C182 +
            (C89 * C1835 - C100 * C1830 + C90 * C1836 - C102 * C1831 +
             C91 * C1837 - C104 * C1832 + C92 * C1838 - C106 * C1833) *
                C139824) *
               C139835 * C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C5811 * C114 - C5816 * C108 + C139736 * C116 - C5818 * C109) *
                 C182 +
             (C5811 * C354 - C5816 * C348 + C139736 * C355 - C5818 * C349) *
                 C139824) *
                C13856 +
            ((C16035 - C16036 + C16037 - C16038) * C182 +
             (C16039 - C16040 + C16041 - C16042) * C139824) *
                C13857 +
            ((C16043 - C16044 + C16045 - C16046) * C182 +
             (C16047 - C16048 + C16049 - C16050) * C139824) *
                C13858) *
               C1565 +
           (((C16036 - C16035 + C16038 - C16037) * C182 +
             (C16040 - C16039 + C16042 - C16041) * C139824) *
                C13856 +
            ((C16044 - C16043 + C16046 - C16045) * C182 +
             (C16048 - C16047 + C16050 - C16049) * C139824) *
                C13857 +
            ((C5816 * C15623 - C5811 * C15627 + C5818 * C15622 -
              C139736 * C15625) *
                 C182 +
             (C5816 * C16028 - C5811 * C16031 + C5818 * C16029 -
              C139736 * C16032) *
                 C139824) *
                C13858) *
               C140002) *
              C139792 * C808 +
          ((((C5816 * C109 - C5811 * C116 + C5818 * C110 - C139736 * C118) *
                 C182 +
             (C5816 * C349 - C5811 * C355 + C5818 * C350 - C139736 * C356) *
                 C139824) *
                C13856 +
            ((C16051 - C16052 + C16053 - C16054) * C182 +
             (C16055 - C16056 + C16057 - C16058) * C139824) *
                C13857 +
            ((C16059 - C16060 + C16061 - C16062) * C182 +
             (C16063 - C16064 + C16065 - C16066) * C139824) *
                C13858) *
               C1565 +
           (((C16052 - C16051 + C16054 - C16053) * C182 +
             (C16056 - C16055 + C16058 - C16057) * C139824) *
                C13856 +
            ((C16060 - C16059 + C16062 - C16061) * C182 +
             (C16064 - C16063 + C16066 - C16065) * C139824) *
                C13857 +
            ((C5811 * C15625 - C5816 * C15622 + C139736 * C15629 -
              C5818 * C15624) *
                 C182 +
             (C5811 * C16032 - C5816 * C16029 + C139736 * C16033 -
              C5818 * C16030) *
                 C139824) *
                C13858) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[20] +=
        (-std::pow(Pi, 2.5) *
         ((((C5894 * C183 - C6151 * C108 - C5894 * C348 + C5813 * C411 +
             C5895 * C896 - C6152 * C813 - C5895 * C1072 + C5814 * C1151 +
             C5896 * C2974 - C6153 * C2908 - C5896 * C3090 + C5815 * C3148) *
                C5811 +
            (C6191 + C6192 + C6193) * C139736) *
               C139835 * C1565 -
           ((C8217 + C8218 + C8219) * C139736 +
            (C5896 * C7863 - C6153 * C7754 - C5896 * C8091 + C5815 * C8196 +
             C5895 * C3520 - C6152 * C3438 - C5895 * C3668 + C5814 * C3742 +
             C5894 * C1653 - C6151 * C1570 - C5894 * C1829 + C5813 * C1908) *
                C5811) *
               C139835 * C140002) *
              C139792 * C808 +
          (((C8219 + C8218 + C8217) * C5811 +
            (C5894 * C1655 - C6151 * C1568 - C5894 * C1831 + C5813 * C1906 +
             C5895 * C3522 - C6152 * C3440 - C5895 * C3670 + C5814 * C3744 +
             C5896 * C7865 - C6153 * C7755 - C5896 * C8093 + C5815 * C8197) *
                C139736) *
               C139835 * C140002 -
           ((C6194 + C6195 + C6196) * C139736 +
            (C6193 + C6192 + C6191) * C5811) *
               C139835 * C1565) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C182 * C183 - C410 * C108 - C182 * C348 + C139824 * C411) * C89 +
            C442 * C90 + C443 * C91 + C444 * C92) *
               C139835 * C1565 -
           (C1929 * C92 + C1930 * C91 + C1931 * C90 +
            (C182 * C1653 - C410 * C1570 - C182 * C1829 + C139824 * C1908) *
                C89) *
               C139835 * C140002) *
              C139792 * C808 +
          ((C1931 * C89 + C1930 * C90 + C1929 * C91 +
            (C182 * C1657 - C410 * C1571 - C182 * C1833 + C139824 * C1909) *
                C92) *
               C139835 * C140002 -
           (C445 * C92 + C444 * C91 + C443 * C90 + C442 * C89) * C139835 *
               C1565) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C182 * C183 - C410 * C108 - C182 * C348 + C139824 * C411) *
                 C5811 +
             C442 * C139736) *
                C13856 +
            (C16195 + C16172) * C13857 + (C16196 + C16177) * C13858) *
               C1565 -
           ((C16194 * C139736 + (C182 * C15788 - C410 * C15623 - C182 * C16028 +
                                 C139824 * C16165) *
                                    C5811) *
                C13858 +
            (C16177 + C16196) * C13857 + (C16172 + C16195) * C13856) *
               C140002) *
              C139792 * C808 +
          (((C16182 + C16183) * C13856 + (C16184 + C16185) * C13857 +
            (C16194 * C5811 + (C182 * C15790 - C410 * C15624 - C182 * C16030 +
                               C139824 * C16166) *
                                  C139736) *
                C13858) *
               C140002 -
           ((C16185 + C16184) * C13858 + (C16183 + C16182) * C13857 +
            (C443 * C139736 + C442 * C5811) * C13856) *
               C1565) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[20] +=
        (-std::pow(Pi, 2.5) *
         (((((C139835 * C266 - C265 * C108) * C5894 +
             (C139835 * C495 - C265 * C348) * C5813 + (C6915 - C6916) * C5895 +
             (C7294 - C7295) * C5814 + (C6921 - C6922) * C5896 +
             (C7296 - C7297) * C5815) *
                C5811 +
            ((C279 - C280) * C5894 + (C502 - C503) * C5813 + C6919 * C5895 +
             C7298 * C5814 + C6925 * C5896 + C7299 * C5815) *
                C139736) *
               C1565 +
           (((C265 * C1570 - C139835 * C1741) * C5894 +
             (C265 * C1829 - C139835 * C1997) * C5813 +
             (C265 * C3438 - C139835 * C3594) * C5895 +
             (C265 * C3668 - C139835 * C3812) * C5814 +
             (C265 * C7754 - C139835 * C7979) * C5896 +
             (C265 * C8091 - C139835 * C8317) * C5815) *
                C5811 +
            ((C1752 - C1753) * C5894 + (C2003 - C2004) * C5813 +
             (C7986 - C7987) * C5895 + (C8321 - C8322) * C5814 +
             (C7990 - C7991) * C5896 + (C8323 - C8324) * C5815) *
                C139736) *
               C140002) *
              C139792 * C808 +
          ((((C280 - C279) * C5894 + (C503 - C502) * C5813 + C6927 * C5895 +
             C7300 * C5814 + C6929 * C5896 + C7301 * C5815) *
                C5811 +
            ((C284 - C283) * C5894 + (C506 - C505) * C5813 +
             (C999 - C1000) * C5895 + (C1248 - C1249) * C5814 +
             (C6000 - C6001) * C5896 + (C6273 - C6274) * C5815) *
                C139736) *
               C1565 +
           (((C1753 - C1752) * C5894 + (C2004 - C2003) * C5813 +
             (C7987 - C7986) * C5895 + (C8322 - C8321) * C5814 +
             (C7991 - C7990) * C5896 + (C8324 - C8323) * C5815) *
                C5811 +
            ((C1757 - C1756) * C5894 + (C2006 - C2005) * C5813 +
             (C139835 * C3596 - C265 * C3440) * C5895 +
             (C139835 * C3814 - C265 * C3670) * C5814 +
             (C139835 * C7981 - C265 * C7755) * C5896 +
             (C139835 * C8319 - C265 * C8093) * C5815) *
                C139736) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C139835 * C266 - C265 * C108) * C182 +
             (C139835 * C495 - C265 * C348) * C139824) *
                C89 +
            ((C279 - C280) * C182 + (C502 - C503) * C139824) * C90 +
            C516 * C91 + C517 * C92) *
               C1565 +
           (((C265 * C1570 - C139835 * C1741) * C182 +
             (C265 * C1829 - C139835 * C1997) * C139824) *
                C89 +
            ((C1752 - C1753) * C182 + (C2003 - C2004) * C139824) * C90 +
            ((C1756 - C1757) * C182 + (C2005 - C2006) * C139824) * C91 +
            ((C1760 - C1761) * C182 + (C2007 - C2008) * C139824) * C92) *
               C140002) *
              C139792 * C808 +
          ((((C280 - C279) * C182 + (C503 - C502) * C139824) * C89 +
            ((C284 - C283) * C182 + (C506 - C505) * C139824) * C90 +
            ((C288 - C287) * C182 + (C509 - C508) * C139824) * C91 +
            ((C291 - C292) * C182 + (C510 - C511) * C139824) * C92) *
               C1565 +
           (((C1753 - C1752) * C182 + (C2004 - C2003) * C139824) * C89 +
            ((C1757 - C1756) * C182 + (C2006 - C2005) * C139824) * C90 +
            ((C1761 - C1760) * C182 + (C2008 - C2007) * C139824) * C91 +
            ((C139835 * C1745 - C265 * C1571) * C182 +
             (C139835 * C2001 - C265 * C1833) * C139824) *
                C92) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C13856 * C266 - C14015 * C108 + C13857 * C1741 - C14016 * C1570 +
              C13858 * C5397 - C14017 * C5273) *
                 C182 +
             (C13856 * C495 - C14015 * C348 + C13857 * C1997 - C14016 * C1829 +
              C13858 * C5567 - C14017 * C5455) *
                 C139824) *
                C5811 +
            ((C14019 - C14020 + C14021 - C14022 + C14023 - C14024) * C182 +
             (C14279 - C14280 + C14281 - C14282 + C14283 - C14284) * C139824) *
                C139736) *
               C1565 +
           (((C14015 * C1570 - C13856 * C1741 + C14016 * C5273 -
              C13857 * C5397 + C14017 * C15623 - C13858 * C15912) *
                 C182 +
             (C14015 * C1829 - C13856 * C1997 + C14016 * C5455 -
              C13857 * C5567 + C14017 * C16028 - C13858 * C16294) *
                 C139824) *
                C5811 +
            ((C15919 - C15920 + C15921 - C15922 + C15923 - C15924) * C182 +
             (C16298 - C16299 + C16300 - C16301 + C16302 - C16303) * C139824) *
                C139736) *
               C140002) *
              C139792 * C808 +
          ((((C14020 - C14019 + C14022 - C14021 + C14024 - C14023) * C182 +
             (C14280 - C14279 + C14282 - C14281 + C14284 - C14283) * C139824) *
                C5811 +
            ((C14031 - C14032 + C14033 - C14034 + C14035 - C14036) * C182 +
             (C14285 - C14286 + C14287 - C14288 + C14289 - C14290) * C139824) *
                C139736) *
               C1565 +
           (((C15920 - C15919 + C15922 - C15921 + C15924 - C15923) * C182 +
             (C16299 - C16298 + C16301 - C16300 + C16303 - C16302) * C139824) *
                C5811 +
            ((C13856 * C1743 - C14015 * C1568 + C13857 * C5399 -
              C14016 * C5275 + C13858 * C15914 - C14017 * C15624) *
                 C182 +
             (C13856 * C1999 - C14015 * C1831 + C13857 * C5569 -
              C14016 * C5457 + C13858 * C16296 - C14017 * C16030) *
                 C139824) *
                C139736) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eezx[20] +=
        (-std::pow(Pi, 2.5) *
         (((((C5811 * C114 - C5816 * C108 + C139736 * C116 - C5818 * C109) *
                 C265 +
             (C5811 * C573 - C5816 * C567 + C139736 * C574 - C5818 * C568) *
                 C139835) *
                C5813 +
            ((C7039 - C7040 + C7041 - C7042) * C265 +
             (C7408 - C7409 + C7410 - C7411) * C139835) *
                C5814 +
            ((C7047 - C7048 + C7049 - C7050) * C265 +
             (C7412 - C7413 + C7414 - C7415) * C139835) *
                C5815) *
               C1565 +
           (((C5816 * C1570 - C5811 * C1578 + C5818 * C1569 - C139736 * C1576) *
                 C265 +
             (C5816 * C2074 - C5811 * C2079 + C5818 * C2075 - C139736 * C2080) *
                 C139835) *
                C5813 +
            ((C5816 * C3438 - C5811 * C3442 + C5818 * C3439 - C139736 * C3444) *
                 C265 +
             (C5816 * C3882 - C5811 * C3886 + C5818 * C3883 - C139736 * C3887) *
                 C139835) *
                C5814 +
            ((C5816 * C7754 - C5811 * C7758 + C5818 * C7753 - C139736 * C7756) *
                 C265 +
             (C5816 * C8422 - C5811 * C8425 + C5818 * C8423 - C139736 * C8426) *
                 C139835) *
                C5815) *
               C140002) *
              C139792 * C808 +
          ((((C5816 * C109 - C5811 * C116 + C5818 * C110 - C139736 * C118) *
                 C265 +
             (C5816 * C568 - C5811 * C574 + C5818 * C569 - C139736 * C575) *
                 C139835) *
                C5813 +
            ((C7055 - C7056 + C7057 - C7058) * C265 +
             (C7416 - C7417 + C7418 - C7419) * C139835) *
                C5814 +
            ((C7063 - C7064 + C7065 - C7066) * C265 +
             (C7420 - C7421 + C7422 - C7423) * C139835) *
                C5815) *
               C1565 +
           (((C5811 * C1576 - C5816 * C1569 + C139736 * C1574 - C5818 * C1568) *
                 C265 +
             (C5811 * C2080 - C5816 * C2075 + C139736 * C2081 - C5818 * C2076) *
                 C139835) *
                C5813 +
            ((C5811 * C3444 - C5816 * C3439 + C139736 * C3446 - C5818 * C3440) *
                 C265 +
             (C5811 * C3887 - C5816 * C3883 + C139736 * C3888 - C5818 * C3884) *
                 C139835) *
                C5814 +
            ((C5811 * C7756 - C5816 * C7753 + C139736 * C7760 - C5818 * C7755) *
                 C265 +
             (C5811 * C8426 - C5816 * C8423 + C139736 * C8427 - C5818 * C8424) *
                 C139835) *
                C5815) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C89 * C114 - C100 * C108 + C90 * C116 - C102 * C109 + C91 * C118 -
             C104 * C110 + C92 * C120 - C106 * C111) *
                C265 +
            (C89 * C573 - C100 * C567 + C90 * C574 - C102 * C568 + C91 * C575 -
             C104 * C569 + C92 * C576 - C106 * C570) *
                C139835) *
               C139824 * C1565 +
           ((C100 * C1570 - C89 * C1578 + C102 * C1569 - C90 * C1576 +
             C104 * C1568 - C91 * C1574 + C106 * C1567 - C92 * C1572) *
                C265 +
            (C100 * C2074 - C89 * C2079 + C102 * C2075 - C90 * C2080 +
             C104 * C2076 - C91 * C2081 + C106 * C2077 - C92 * C2082) *
                C139835) *
               C139824 * C140002) *
              C139792 * C808 +
          (((C100 * C109 - C89 * C116 + C102 * C110 - C90 * C118 + C104 * C111 -
             C91 * C120 + C106 * C112 - C92 * C122) *
                C265 +
            (C100 * C568 - C89 * C574 + C102 * C569 - C90 * C575 + C104 * C570 -
             C91 * C576 + C106 * C571 - C92 * C577) *
                C139835) *
               C139824 * C1565 +
           ((C89 * C1576 - C100 * C1569 + C90 * C1574 - C102 * C1568 +
             C91 * C1572 - C104 * C1567 + C92 * C1580 - C106 * C1571) *
                C265 +
            (C89 * C2080 - C100 * C2075 + C90 * C2081 - C102 * C2076 +
             C91 * C2082 - C104 * C2077 + C92 * C2083 - C106 * C2078) *
                C139835) *
               C139824 * C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C5811 * C114 - C5816 * C108 + C139736 * C116 - C5818 * C109) *
                C14015 +
            (C5811 * C573 - C5816 * C567 + C139736 * C574 - C5818 * C568) *
                C13856 +
            (C16035 - C16036 + C16037 - C16038) * C14016 +
            (C16408 - C16409 + C16410 - C16411) * C13857 +
            (C16043 - C16044 + C16045 - C16046) * C14017 +
            (C16412 - C16413 + C16414 - C16415) * C13858) *
               C139824 * C1565 +
           ((C16036 - C16035 + C16038 - C16037) * C14015 +
            (C16409 - C16408 + C16411 - C16410) * C13856 +
            (C16044 - C16043 + C16046 - C16045) * C14016 +
            (C16413 - C16412 + C16415 - C16414) * C13857 +
            (C5816 * C15623 - C5811 * C15627 + C5818 * C15622 -
             C139736 * C15625) *
                C14017 +
            (C5816 * C16401 - C5811 * C16404 + C5818 * C16402 -
             C139736 * C16405) *
                C13858) *
               C139824 * C140002) *
              C139792 * C808 +
          (((C5816 * C109 - C5811 * C116 + C5818 * C110 - C139736 * C118) *
                C14015 +
            (C5816 * C568 - C5811 * C574 + C5818 * C569 - C139736 * C575) *
                C13856 +
            (C16051 - C16052 + C16053 - C16054) * C14016 +
            (C16416 - C16417 + C16418 - C16419) * C13857 +
            (C16059 - C16060 + C16061 - C16062) * C14017 +
            (C16420 - C16421 + C16422 - C16423) * C13858) *
               C139824 * C1565 +
           ((C16052 - C16051 + C16054 - C16053) * C14015 +
            (C16417 - C16416 + C16419 - C16418) * C13856 +
            (C16060 - C16059 + C16062 - C16061) * C14016 +
            (C16421 - C16420 + C16423 - C16422) * C13857 +
            (C5811 * C15625 - C5816 * C15622 + C139736 * C15629 -
             C5818 * C15624) *
                C14017 +
            (C5811 * C16405 - C5816 * C16402 + C139736 * C16406 -
             C5818 * C16403) *
                C13858) *
               C139824 * C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eezy[20] +=
        (-std::pow(Pi, 2.5) *
         (((((C5813 * C183 - C5894 * C108 + C5814 * C896 - C5895 * C813 +
              C5815 * C2974 - C5896 * C2908) *
                 C265 +
             (C5813 * C629 - C5894 * C567 + C5814 * C1393 - C5895 * C1317 +
              C5815 * C3314 - C5896 * C3256) *
                 C139835) *
                C5811 +
            ((C5898 - C5899 + C5900 - C5901 + C5902 - C5903) * C265 +
             (C6423 - C6424 + C6425 - C6426 + C6427 - C6428) * C139835) *
                C139736) *
               C1565 +
           (((C5894 * C1570 - C5813 * C1653 + C5895 * C3438 - C5814 * C3520 +
              C5896 * C7754 - C5815 * C7863) *
                 C265 +
             (C5894 * C2074 - C5813 * C2150 + C5895 * C3882 - C5814 * C3956 +
              C5896 * C8422 - C5815 * C8526) *
                 C139835) *
                C5811 +
            ((C7870 - C7871 + C7872 - C7873 + C7874 - C7875) * C265 +
             (C8530 - C8531 + C8532 - C8533 + C8534 - C8535) * C139835) *
                C139736) *
               C140002) *
              C139792 * C808 +
          ((((C5899 - C5898 + C5901 - C5900 + C5903 - C5902) * C265 +
             (C6424 - C6423 + C6426 - C6425 + C6428 - C6427) * C139835) *
                C5811 +
            ((C5910 - C5911 + C5912 - C5913 + C5914 - C5915) * C265 +
             (C6429 - C6430 + C6431 - C6432 + C6433 - C6434) * C139835) *
                C139736) *
               C1565 +
           (((C7871 - C7870 + C7873 - C7872 + C7875 - C7874) * C265 +
             (C8531 - C8530 + C8533 - C8532 + C8535 - C8534) * C139835) *
                C5811 +
            ((C5813 * C1655 - C5894 * C1568 + C5814 * C3522 - C5895 * C3440 +
              C5815 * C7865 - C5896 * C7755) *
                 C265 +
             (C5813 * C2152 - C5894 * C2076 + C5814 * C3958 - C5895 * C3884 +
              C5815 * C8528 - C5896 * C8424) *
                 C139835) *
                C139736) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C139824 * C183 - C182 * C108) * C265 +
             (C139824 * C629 - C182 * C567) * C139835) *
                C89 +
            ((C196 - C197) * C265 + (C636 - C637) * C139835) * C90 +
            C650 * C91 + C651 * C92) *
               C1565 +
           (((C182 * C1570 - C139824 * C1653) * C265 +
             (C182 * C2074 - C139824 * C2150) * C139835) *
                C89 +
            ((C1664 - C1665) * C265 + (C2156 - C2157) * C139835) * C90 +
            ((C1668 - C1669) * C265 + (C2158 - C2159) * C139835) * C91 +
            ((C1672 - C1673) * C265 + (C2160 - C2161) * C139835) * C92) *
               C140002) *
              C139792 * C808 +
          ((((C197 - C196) * C265 + (C637 - C636) * C139835) * C89 +
            ((C201 - C200) * C265 + (C640 - C639) * C139835) * C90 +
            ((C205 - C204) * C265 + (C643 - C642) * C139835) * C91 +
            ((C208 - C209) * C265 + (C644 - C645) * C139835) * C92) *
               C1565 +
           (((C1665 - C1664) * C265 + (C2157 - C2156) * C139835) * C89 +
            ((C1669 - C1668) * C265 + (C2159 - C2158) * C139835) * C90 +
            ((C1673 - C1672) * C265 + (C2161 - C2160) * C139835) * C91 +
            ((C139824 * C1657 - C182 * C1571) * C265 +
             (C139824 * C2154 - C182 * C2078) * C139835) *
                C92) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C139824 * C183 - C182 * C108) * C14015 +
             (C139824 * C629 - C182 * C567) * C13856 +
             (C15795 - C15796) * C14016 + (C16525 - C16526) * C13857 +
             (C15801 - C15802) * C14017 + (C16527 - C16528) * C13858) *
                C5811 +
            ((C196 - C197) * C14015 + (C636 - C637) * C13856 + C15799 * C14016 +
             C16529 * C13857 + C15805 * C14017 + C16530 * C13858) *
                C139736) *
               C1565 +
           (((C15796 - C15795) * C14015 + (C16526 - C16525) * C13856 +
             (C15802 - C15801) * C14016 + (C16528 - C16527) * C13857 +
             (C182 * C15623 - C139824 * C15788) * C14017 +
             (C182 * C16401 - C139824 * C16521) * C13858) *
                C5811 +
            (C15807 * C14015 + C16531 * C13856 + C15809 * C14016 +
             C16532 * C13857 + (C15811 - C15812) * C14017 +
             (C16533 - C16534) * C13858) *
                C139736) *
               C140002) *
              C139792 * C808 +
          ((((C197 - C196) * C14015 + (C637 - C636) * C13856 + C15807 * C14016 +
             C16531 * C13857 + C15809 * C14017 + C16532 * C13858) *
                C5811 +
            ((C201 - C200) * C14015 + (C640 - C639) * C13856 +
             (C1668 - C1669) * C14016 + (C2158 - C2159) * C13857 +
             (C13938 - C13939) * C14017 + (C14441 - C14442) * C13858) *
                C139736) *
               C1565 +
           ((C15799 * C14015 + C16529 * C13856 + C15805 * C14016 +
             C16530 * C13857 + (C15812 - C15811) * C14017 +
             (C16534 - C16533) * C13858) *
                C5811 +
            ((C1669 - C1668) * C14015 + (C2159 - C2158) * C13856 +
             (C13939 - C13938) * C14016 + (C14442 - C14441) * C13857 +
             (C139824 * C15790 - C182 * C15624) * C14017 +
             (C139824 * C16523 - C182 * C16403) * C13858) *
                C139736) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eezz[20] +=
        (-std::pow(Pi, 2.5) *
         (((((C265 * C266 - C701 * C108 - C265 * C567 + C139835 * C702) *
                 C5813 +
             C7652 * C5814 + C7653 * C5815) *
                C5811 +
            (C6509 + C6510 + C6527) * C139736) *
               C1565 -
           ((C8652 + C8653 + C8645) * C139736 +
            ((C265 * C7979 - C701 * C7754 - C265 * C8422 + C139835 * C8634) *
                 C5815 +
             (C265 * C3594 - C701 * C3438 - C265 * C3882 + C139835 * C4026) *
                 C5814 +
             (C265 * C1741 - C701 * C1570 - C265 * C2074 + C139835 * C2230) *
                 C5813) *
                C5811) *
               C140002) *
              C139792 * C808 +
          (((C8645 + C8653 + C8652) * C5811 +
            (C2252 * C5813 +
             (C265 * C3596 - C701 * C3440 - C265 * C3884 + C139835 * C4028) *
                 C5814 +
             (C265 * C7981 - C701 * C7755 - C265 * C8424 + C139835 * C8635) *
                 C5815) *
                C139736) *
               C140002 -
           ((C6528 + C6519 + C6520) * C139736 +
            (C6527 + C6510 + C6509) * C5811) *
               C1565) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C265 * C266 - C701 * C108 - C265 * C567 + C139835 * C702) *
                C139824 * C89 +
            C737 * C90 + C738 * C91 + C739 * C92) *
               C1565 -
           (C2254 * C92 + C2255 * C91 + C2256 * C90 +
            (C265 * C1741 - C701 * C1570 - C265 * C2074 + C139835 * C2230) *
                C139824 * C89) *
               C140002) *
              C139792 * C808 +
          ((C2256 * C89 + C2255 * C90 + C2254 * C91 +
            (C265 * C1745 - C701 * C1571 - C265 * C2078 + C139835 * C2231) *
                C139824 * C92) *
               C140002 -
           (C740 * C92 + C739 * C91 + C738 * C90 + C737 * C89) * C1565) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C14015 * C266 - C14516 * C108 - C14015 * C567 + C13856 * C702 +
             C14016 * C1741 - C14517 * C1570 - C14016 * C2074 + C13857 * C2230 +
             C14017 * C5397 - C14518 * C5273 - C14017 * C5621 +
             C13858 * C5733) *
                C139824 * C5811 +
            (C14556 + C14557 + C14558) * C139824 * C139736) *
               C1565 -
           ((C16654 + C16655 + C16656) * C139824 * C139736 +
            (C14017 * C15912 - C14518 * C15623 - C14017 * C16401 +
             C13858 * C16633 + C14016 * C5397 - C14517 * C5273 -
             C14016 * C5621 + C13857 * C5733 + C14015 * C1741 - C14516 * C1570 -
             C14015 * C2074 + C13856 * C2230) *
                C139824 * C5811) *
               C140002) *
              C139792 * C808 +
          (((C16656 + C16655 + C16654) * C139824 * C5811 +
            (C14015 * C1743 - C14516 * C1568 - C14015 * C2076 + C13856 * C2228 +
             C14016 * C5399 - C14517 * C5275 - C14016 * C5623 + C13857 * C5735 +
             C14017 * C15914 - C14518 * C15624 - C14017 * C16403 +
             C13858 * C16634) *
                C139824 * C139736) *
               C140002 -
           ((C14559 + C14560 + C14561) * C139824 * C139736 +
            (C14558 + C14557 + C14556) * C139824 * C5811) *
               C1565) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eexx[21] +=
        (-std::pow(Pi, 2.5) *
         ((((C5816 * C114 - C5817 * C108 - C5816 * C115 + C5811 * C126 +
             C5818 * C116 - C5819 * C109 - C5818 * C117 + C139736 * C127) *
                C139835 * C5813 +
            (C6687 + C6688) * C139835 * C5814 +
            (C6689 + C6690) * C139835 * C5815) *
               C139809 * C2322 -
           ((C5818 * C6629 - C5819 * C6626 - C5818 * C6630 + C139736 * C6635 +
             C5816 * C6631 - C5817 * C6627 - C5816 * C6632 + C5811 * C6636) *
                C139835 * C5815 +
            (C6690 + C6689) * C139835 * C5814 +
            (C6688 + C6687) * C139835 * C5813) *
               C139809 * C140000) *
              C2324 +
          (((C6691 + C6692) * C139835 * C5813 +
            (C6693 + C6694) * C139835 * C5814 +
            (C5816 * C6629 - C5817 * C6626 - C5816 * C6630 + C5811 * C6635 +
             C5818 * C6633 - C5819 * C6628 - C5818 * C6634 + C139736 * C6637) *
                C139835 * C5815) *
               C139809 * C140000 -
           ((C6694 + C6693) * C139835 * C5815 +
            (C6692 + C6691) * C139835 * C5814 +
            (C5818 * C118 - C5819 * C110 - C5818 * C119 + C139736 * C128 +
             C5816 * C116 - C5817 * C109 - C5816 * C117 + C5811 * C127) *
                C139835 * C5813) *
               C139809 * C2322) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C100 * C114 - C101 * C108 - C100 * C115 + C89 * C126 + C102 * C116 -
            C103 * C109 - C102 * C117 + C90 * C127 + C104 * C118 - C105 * C110 -
            C104 * C119 + C91 * C128 + C106 * C120 - C107 * C111 - C106 * C121 +
            C92 * C129) *
               C139835 * C139824 * C139809 * C2322 -
           (C106 * C815 - C107 * C810 - C106 * C816 + C92 * C825 + C104 * C817 -
            C105 * C811 - C104 * C818 + C91 * C826 + C102 * C819 - C103 * C812 -
            C102 * C820 + C90 * C827 + C100 * C821 - C101 * C813 - C100 * C822 +
            C89 * C828) *
               C139835 * C139824 * C139809 * C140000) *
              C2324 +
          ((C100 * C819 - C101 * C812 - C100 * C820 + C89 * C827 + C102 * C817 -
            C103 * C811 - C102 * C818 + C90 * C826 + C104 * C815 - C105 * C810 -
            C104 * C816 + C91 * C825 + C106 * C823 - C107 * C814 - C106 * C824 +
            C92 * C829) *
               C139835 * C139824 * C139809 * C140000 -
           (C106 * C122 - C107 * C112 - C106 * C123 + C92 * C130 + C104 * C120 -
            C105 * C111 - C104 * C121 + C91 * C129 + C102 * C118 - C103 * C110 -
            C102 * C119 + C90 * C128 + C100 * C116 - C101 * C109 - C100 * C117 +
            C89 * C127) *
               C139835 * C139824 * C139809 * C2322) *
              C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C5816 * C114 - C5817 * C108 - C5816 * C115 + C5811 * C126 +
             C5818 * C116 - C5819 * C109 - C5818 * C117 + C139736 * C127) *
                C13856 +
            (C15683 + C15684) * C13857 + (C15685 + C15686) * C13858) *
               C139824 * C139809 * C2322 -
           ((C5818 * C13132 - C5819 * C13127 - C5818 * C13133 +
             C139736 * C13139 + C5816 * C13130 - C5817 * C13126 -
             C5816 * C13131 + C5811 * C13138) *
                C13858 +
            (C10429 + C10430) * C13857 + (C6688 + C6687) * C13856) *
               C139824 * C139809 * C140000) *
              C2324 +
          (((C6691 + C6692) * C13856 +
            (C5816 * C3444 - C5817 * C3439 - C5816 * C3445 + C5811 * C3451 +
             C5818 * C3446 - C5819 * C3440 - C5818 * C3447 + C139736 * C3452) *
                C13857 +
            (C5816 * C13132 - C5817 * C13127 - C5816 * C13133 + C5811 * C13139 +
             C5818 * C14660 - C5819 * C14659 - C5818 * C14661 +
             C139736 * C14662) *
                C13858) *
               C139824 * C139809 * C140000 -
           ((C15690 + C15689) * C13858 + (C15688 + C15687) * C13857 +
            (C5818 * C118 - C5819 * C110 - C5818 * C119 + C139736 * C128 +
             C5816 * C116 - C5817 * C109 - C5816 * C117 + C5811 * C127) *
                C13856) *
               C139824 * C139809 * C2322) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eexy[21] +=
        (-std::pow(Pi, 2.5) *
         ((((C5813 * C183 - C5894 * C108 + C5814 * C896 - C5895 * C813 +
             C5815 * C2974 - C5896 * C2908) *
                C5816 +
            (C5813 * C189 - C5894 * C115 + C5814 * C901 - C5895 * C822 +
             C5815 * C2978 - C5896 * C2913) *
                C5811 +
            (C5898 - C5899 + C5900 - C5901 + C5902 - C5903) * C5818 +
            (C5904 - C5905 + C5906 - C5907 + C5908 - C5909) * C139736) *
               C139835 * C139809 * C2322 +
           ((C5894 * C813 - C5813 * C896 + C5895 * C2908 - C5814 * C2974 +
             C5896 * C6627 - C5815 * C6792) *
                C5816 +
            (C5894 * C822 - C5813 * C901 + C5895 * C2913 - C5814 * C2978 +
             C5896 * C6632 - C5815 * C6795) *
                C5811 +
            (C6799 - C6800 + C6801 - C6802 + C6803 - C6804) * C5818 +
            (C6805 - C6806 + C6807 - C6808 + C6809 - C6810) * C139736) *
               C139835 * C139809 * C140000) *
              C2324 +
          (((C5899 - C5898 + C5901 - C5900 + C5903 - C5902) * C5816 +
            (C5905 - C5904 + C5907 - C5906 + C5909 - C5908) * C5811 +
            (C5910 - C5911 + C5912 - C5913 + C5914 - C5915) * C5818 +
            (C5916 - C5917 + C5918 - C5919 + C5920 - C5921) * C139736) *
               C139835 * C139809 * C2322 +
           ((C6800 - C6799 + C6802 - C6801 + C6804 - C6803) * C5816 +
            (C6806 - C6805 + C6808 - C6807 + C6810 - C6809) * C5811 +
            (C5813 * C898 - C5894 * C811 + C5814 * C2976 - C5895 * C2910 +
             C5815 * C6794 - C5896 * C6628) *
                C5818 +
            (C5813 * C903 - C5894 * C818 + C5814 * C2980 - C5895 * C2917 +
             C5815 * C6797 - C5896 * C6634) *
                C139736) *
               C139835 * C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C139824 * C183 - C182 * C108) * C100 +
            (C139824 * C189 - C182 * C115) * C89 + (C196 - C197) * C102 +
            (C198 - C199) * C90 + C212 * C104 + C213 * C91 + C214 * C106 +
            C215 * C92) *
               C139835 * C139809 * C2322 +
           ((C182 * C813 - C139824 * C896) * C100 +
            (C182 * C822 - C139824 * C901) * C89 + (C907 - C908) * C102 +
            (C909 - C910) * C90 + (C911 - C912) * C104 + (C913 - C914) * C91 +
            (C915 - C916) * C106 + (C917 - C918) * C92) *
               C139835 * C139809 * C140000) *
              C2324 +
          (((C197 - C196) * C100 + (C199 - C198) * C89 + (C201 - C200) * C102 +
            (C203 - C202) * C90 + (C205 - C204) * C104 + (C207 - C206) * C91 +
            (C208 - C209) * C106 + (C210 - C211) * C92) *
               C139835 * C139809 * C2322 +
           ((C908 - C907) * C100 + (C910 - C909) * C89 + (C912 - C911) * C102 +
            (C914 - C913) * C90 + (C916 - C915) * C104 + (C918 - C917) * C91 +
            (C139824 * C900 - C182 * C814) * C106 +
            (C139824 * C905 - C182 * C824) * C92) *
               C139835 * C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C139824 * C183 - C182 * C108) * C5816 +
             (C139824 * C189 - C182 * C115) * C5811 + (C196 - C197) * C5818 +
             (C198 - C199) * C139736) *
                C13856 +
            ((C15795 - C15796) * C5816 + (C15797 - C15798) * C5811 +
             C15799 * C5818 + C15800 * C139736) *
                C13857 +
            ((C15801 - C15802) * C5816 + (C15803 - C15804) * C5811 +
             C15805 * C5818 + C15806 * C139736) *
                C13858) *
               C139809 * C2322 +
           (((C182 * C813 - C139824 * C896) * C5816 +
             (C182 * C822 - C139824 * C901) * C5811 + (C907 - C908) * C5818 +
             (C909 - C910) * C139736) *
                C13856 +
            ((C182 * C3438 - C139824 * C3520) * C5816 +
             (C182 * C3443 - C139824 * C3524) * C5811 +
             (C14764 - C14765) * C5818 + (C14766 - C14767) * C139736) *
                C13857 +
            ((C182 * C13126 - C139824 * C13216) * C5816 +
             (C182 * C13131 - C139824 * C13220) * C5811 +
             (C14768 - C14769) * C5818 + (C14770 - C14771) * C139736) *
                C13858) *
               C139809 * C140000) *
              C2324 +
          ((((C197 - C196) * C5816 + (C199 - C198) * C5811 +
             (C201 - C200) * C5818 + (C203 - C202) * C139736) *
                C13856 +
            (C15807 * C5816 + C15808 * C5811 + (C1668 - C1669) * C5818 +
             (C1670 - C1671) * C139736) *
                C13857 +
            (C15809 * C5816 + C15810 * C5811 + (C13938 - C13939) * C5818 +
             (C13940 - C13941) * C139736) *
                C13858) *
               C139809 * C2322 +
           (((C908 - C907) * C5816 + (C910 - C909) * C5811 +
             (C912 - C911) * C5818 + (C914 - C913) * C139736) *
                C13856 +
            ((C14765 - C14764) * C5816 + (C14767 - C14766) * C5811 +
             (C139824 * C3522 - C182 * C3440) * C5818 +
             (C139824 * C3526 - C182 * C3447) * C139736) *
                C13857 +
            ((C14769 - C14768) * C5816 + (C14771 - C14770) * C5811 +
             (C139824 * C14761 - C182 * C14659) * C5818 +
             (C139824 * C14762 - C182 * C14661) * C139736) *
                C13858) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eexz[21] +=
        (-std::pow(Pi, 2.5) *
         (((((C139835 * C266 - C265 * C108) * C5816 +
             (C139835 * C272 - C265 * C115) * C5811 + (C279 - C280) * C5818 +
             (C281 - C282) * C139736) *
                C5813 +
            ((C6915 - C6916) * C5816 + (C6917 - C6918) * C5811 + C6919 * C5818 +
             C6920 * C139736) *
                C5814 +
            ((C6921 - C6922) * C5816 + (C6923 - C6924) * C5811 + C6925 * C5818 +
             C6926 * C139736) *
                C5815) *
               C139809 * C2322 +
           (((C6916 - C6915) * C5816 + (C6918 - C6917) * C5811 + C6927 * C5818 +
             C6928 * C139736) *
                C5813 +
            ((C6922 - C6921) * C5816 + (C6924 - C6923) * C5811 + C6929 * C5818 +
             C6930 * C139736) *
                C5814 +
            ((C265 * C6627 - C139835 * C6908) * C5816 +
             (C265 * C6632 - C139835 * C6911) * C5811 +
             (C6931 - C6932) * C5818 + (C6933 - C6934) * C139736) *
                C5815) *
               C139809 * C140000) *
              C2324 +
          ((((C280 - C279) * C5816 + (C282 - C281) * C5811 +
             (C284 - C283) * C5818 + (C286 - C285) * C139736) *
                C5813 +
            (C6927 * C5816 + C6928 * C5811 + (C999 - C1000) * C5818 +
             (C1001 - C1002) * C139736) *
                C5814 +
            (C6929 * C5816 + C6930 * C5811 + (C6000 - C6001) * C5818 +
             (C6002 - C6003) * C139736) *
                C5815) *
               C139809 * C2322 +
           ((C6919 * C5816 + C6920 * C5811 + (C1000 - C999) * C5818 +
             (C1002 - C1001) * C139736) *
                C5813 +
            (C6925 * C5816 + C6926 * C5811 + (C6001 - C6000) * C5818 +
             (C6003 - C6002) * C139736) *
                C5814 +
            ((C6932 - C6931) * C5816 + (C6934 - C6933) * C5811 +
             (C139835 * C6910 - C265 * C6628) * C5818 +
             (C139835 * C6913 - C265 * C6634) * C139736) *
                C5815) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C139835 * C266 - C265 * C108) * C100 +
            (C139835 * C272 - C265 * C115) * C89 + (C279 - C280) * C102 +
            (C281 - C282) * C90 + C295 * C104 + C296 * C91 + C297 * C106 +
            C298 * C92) *
               C139824 * C139809 * C2322 +
           ((C265 * C813 - C139835 * C984) * C100 +
            (C265 * C822 - C139835 * C989) * C89 + (C995 - C996) * C102 +
            (C997 - C998) * C90 + (C999 - C1000) * C104 +
            (C1001 - C1002) * C91 + (C1003 - C1004) * C106 +
            (C1005 - C1006) * C92) *
               C139824 * C139809 * C140000) *
              C2324 +
          (((C280 - C279) * C100 + (C282 - C281) * C89 + (C284 - C283) * C102 +
            (C286 - C285) * C90 + (C288 - C287) * C104 + (C290 - C289) * C91 +
            (C291 - C292) * C106 + (C293 - C294) * C92) *
               C139824 * C139809 * C2322 +
           ((C996 - C995) * C100 + (C998 - C997) * C89 + (C1000 - C999) * C102 +
            (C1002 - C1001) * C90 + (C1004 - C1003) * C104 +
            (C1006 - C1005) * C91 + (C139835 * C988 - C265 * C814) * C106 +
            (C139835 * C993 - C265 * C824) * C92) *
               C139824 * C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C13856 * C266 - C14015 * C108 + C13857 * C1741 - C14016 * C1570 +
             C13858 * C5397 - C14017 * C5273) *
                C5816 +
            (C13856 * C272 - C14015 * C115 + C13857 * C1746 - C14016 * C1579 +
             C13858 * C5401 - C14017 * C5278) *
                C5811 +
            (C14019 - C14020 + C14021 - C14022 + C14023 - C14024) * C5818 +
            (C14025 - C14026 + C14027 - C14028 + C14029 - C14030) * C139736) *
               C139824 * C139809 * C2322 +
           ((C14015 * C813 - C13856 * C984 + C14016 * C3438 - C13857 * C3594 +
             C14017 * C13126 - C13858 * C13298) *
                C5816 +
            (C14015 * C822 - C13856 * C989 + C14016 * C3443 - C13857 * C3598 +
             C14017 * C13131 - C13858 * C13302) *
                C5811 +
            (C14872 - C14873 + C14874 - C14875 + C14876 - C14877) * C5818 +
            (C14878 - C14879 + C14880 - C14881 + C14882 - C14883) * C139736) *
               C139824 * C139809 * C140000) *
              C2324 +
          (((C14020 - C14019 + C14022 - C14021 + C14024 - C14023) * C5816 +
            (C14026 - C14025 + C14028 - C14027 + C14030 - C14029) * C5811 +
            (C14031 - C14032 + C14033 - C14034 + C14035 - C14036) * C5818 +
            (C14037 - C14038 + C14039 - C14040 + C14041 - C14042) * C139736) *
               C139824 * C139809 * C2322 +
           ((C14873 - C14872 + C14875 - C14874 + C14877 - C14876) * C5816 +
            (C14879 - C14878 + C14881 - C14880 + C14883 - C14882) * C5811 +
            (C13856 * C986 - C14015 * C811 + C13857 * C3596 - C14016 * C3440 +
             C13858 * C14869 - C14017 * C14659) *
                C5818 +
            (C13856 * C991 - C14015 * C818 + C13857 * C3600 - C14016 * C3447 +
             C13858 * C14870 - C14017 * C14661) *
                C139736) *
               C139824 * C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[21] +=
        (-std::pow(Pi, 2.5) *
         ((((C5811 * C114 - C5816 * C108 + C139736 * C116 - C5818 * C109) *
                C5894 +
            (C5811 * C354 - C5816 * C348 + C139736 * C355 - C5818 * C349) *
                C5813 +
            (C7039 - C7040 + C7041 - C7042) * C5895 +
            (C7043 - C7044 + C7045 - C7046) * C5814 +
            (C7047 - C7048 + C7049 - C7050) * C5896 +
            (C7051 - C7052 + C7053 - C7054) * C5815) *
               C139835 * C139809 * C2322 +
           ((C7040 - C7039 + C7042 - C7041) * C5894 +
            (C7044 - C7043 + C7046 - C7045) * C5813 +
            (C7048 - C7047 + C7050 - C7049) * C5895 +
            (C7052 - C7051 + C7054 - C7053) * C5814 +
            (C5816 * C6627 - C5811 * C6631 + C5818 * C6626 - C139736 * C6629) *
                C5896 +
            (C5816 * C7032 - C5811 * C7035 + C5818 * C7033 - C139736 * C7036) *
                C5815) *
               C139835 * C139809 * C140000) *
              C2324 +
          (((C5816 * C109 - C5811 * C116 + C5818 * C110 - C139736 * C118) *
                C5894 +
            (C5816 * C349 - C5811 * C355 + C5818 * C350 - C139736 * C356) *
                C5813 +
            (C7055 - C7056 + C7057 - C7058) * C5895 +
            (C7059 - C7060 + C7061 - C7062) * C5814 +
            (C7063 - C7064 + C7065 - C7066) * C5896 +
            (C7067 - C7068 + C7069 - C7070) * C5815) *
               C139835 * C139809 * C2322 +
           ((C7056 - C7055 + C7058 - C7057) * C5894 +
            (C7060 - C7059 + C7062 - C7061) * C5813 +
            (C7064 - C7063 + C7066 - C7065) * C5895 +
            (C7068 - C7067 + C7070 - C7069) * C5814 +
            (C5811 * C6629 - C5816 * C6626 + C139736 * C6633 - C5818 * C6628) *
                C5896 +
            (C5811 * C7036 - C5816 * C7033 + C139736 * C7037 - C5818 * C7034) *
                C5815) *
               C139835 * C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C89 * C114 - C100 * C108 + C90 * C116 - C102 * C109 + C91 * C118 -
             C104 * C110 + C92 * C120 - C106 * C111) *
                C182 +
            (C89 * C354 - C100 * C348 + C90 * C355 - C102 * C349 + C91 * C356 -
             C104 * C350 + C92 * C357 - C106 * C351) *
                C139824) *
               C139835 * C139809 * C2322 +
           ((C100 * C813 - C89 * C821 + C102 * C812 - C90 * C819 + C104 * C811 -
             C91 * C817 + C106 * C810 - C92 * C815) *
                C182 +
            (C100 * C1072 - C89 * C1077 + C102 * C1073 - C90 * C1078 +
             C104 * C1074 - C91 * C1079 + C106 * C1075 - C92 * C1080) *
                C139824) *
               C139835 * C139809 * C140000) *
              C2324 +
          (((C100 * C109 - C89 * C116 + C102 * C110 - C90 * C118 + C104 * C111 -
             C91 * C120 + C106 * C112 - C92 * C122) *
                C182 +
            (C100 * C349 - C89 * C355 + C102 * C350 - C90 * C356 + C104 * C351 -
             C91 * C357 + C106 * C352 - C92 * C358) *
                C139824) *
               C139835 * C139809 * C2322 +
           ((C89 * C819 - C100 * C812 + C90 * C817 - C102 * C811 + C91 * C815 -
             C104 * C810 + C92 * C823 - C106 * C814) *
                C182 +
            (C89 * C1078 - C100 * C1073 + C90 * C1079 - C102 * C1074 +
             C91 * C1080 - C104 * C1075 + C92 * C1081 - C106 * C1076) *
                C139824) *
               C139835 * C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C5811 * C114 - C5816 * C108 + C139736 * C116 - C5818 * C109) *
                 C182 +
             (C5811 * C354 - C5816 * C348 + C139736 * C355 - C5818 * C349) *
                 C139824) *
                C13856 +
            ((C16035 - C16036 + C16037 - C16038) * C182 +
             (C16039 - C16040 + C16041 - C16042) * C139824) *
                C13857 +
            ((C16043 - C16044 + C16045 - C16046) * C182 +
             (C16047 - C16048 + C16049 - C16050) * C139824) *
                C13858) *
               C139809 * C2322 +
           (((C7040 - C7039 + C7042 - C7041) * C182 +
             (C7044 - C7043 + C7046 - C7045) * C139824) *
                C13856 +
            ((C10745 - C10746 + C10747 - C10748) * C182 +
             (C10749 - C10750 + C10751 - C10752) * C139824) *
                C13857 +
            ((C5816 * C13126 - C5811 * C13130 + C5818 * C13127 -
              C139736 * C13132) *
                 C182 +
             (C5816 * C13380 - C5811 * C13384 + C5818 * C13381 -
              C139736 * C13385) *
                 C139824) *
                C13858) *
               C139809 * C140000) *
              C2324 +
          ((((C5816 * C109 - C5811 * C116 + C5818 * C110 - C139736 * C118) *
                 C182 +
             (C5816 * C349 - C5811 * C355 + C5818 * C350 - C139736 * C356) *
                 C139824) *
                C13856 +
            ((C16051 - C16052 + C16053 - C16054) * C182 +
             (C16055 - C16056 + C16057 - C16058) * C139824) *
                C13857 +
            ((C16059 - C16060 + C16061 - C16062) * C182 +
             (C16063 - C16064 + C16065 - C16066) * C139824) *
                C13858) *
               C139809 * C2322 +
           (((C7056 - C7055 + C7058 - C7057) * C182 +
             (C7060 - C7059 + C7062 - C7061) * C139824) *
                C13856 +
            ((C5811 * C3444 - C5816 * C3439 + C139736 * C3446 - C5818 * C3440) *
                 C182 +
             (C5811 * C3673 - C5816 * C3669 + C139736 * C3674 - C5818 * C3670) *
                 C139824) *
                C13857 +
            ((C5811 * C13132 - C5816 * C13127 + C139736 * C14660 -
              C5818 * C14659) *
                 C182 +
             (C5811 * C13385 - C5816 * C13381 + C139736 * C14982 -
              C5818 * C14981) *
                 C139824) *
                C13858) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[21] +=
        (-std::pow(Pi, 2.5) *
         ((((C5894 * C183 - C6151 * C108 - C5894 * C348 + C5813 * C411 +
             C5895 * C896 - C6152 * C813 - C5895 * C1072 + C5814 * C1151 +
             C5896 * C2974 - C6153 * C2908 - C5896 * C3090 + C5815 * C3148) *
                C5811 +
            (C6191 + C6192 + C6193) * C139736) *
               C139835 * C139809 * C2322 -
           ((C7190 + C7191 + C7192) * C139736 +
            (C5896 * C6792 - C6153 * C6627 - C5896 * C7032 + C5815 * C7169 +
             C5895 * C2974 - C6152 * C2908 - C5895 * C3090 + C5814 * C3148 +
             C5894 * C896 - C6151 * C813 - C5894 * C1072 + C5813 * C1151) *
                C5811) *
               C139835 * C139809 * C140000) *
              C2324 +
          (((C7192 + C7191 + C7190) * C5811 +
            (C5894 * C898 - C6151 * C811 - C5894 * C1074 + C5813 * C1149 +
             C5895 * C2976 - C6152 * C2910 - C5895 * C3092 + C5814 * C3150 +
             C5896 * C6794 - C6153 * C6628 - C5896 * C7034 + C5815 * C7170) *
                C139736) *
               C139835 * C139809 * C140000 -
           ((C6194 + C6195 + C6196) * C139736 +
            (C6193 + C6192 + C6191) * C5811) *
               C139835 * C139809 * C2322) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C182 * C183 - C410 * C108 - C182 * C348 + C139824 * C411) * C89 +
            C442 * C90 + C443 * C91 + C444 * C92) *
               C139835 * C139809 * C2322 -
           (C1172 * C92 + C1173 * C91 + C1174 * C90 +
            (C182 * C896 - C410 * C813 - C182 * C1072 + C139824 * C1151) *
                C89) *
               C139835 * C139809 * C140000) *
              C2324 +
          ((C1174 * C89 + C1173 * C90 + C1172 * C91 +
            (C182 * C900 - C410 * C814 - C182 * C1076 + C139824 * C1152) *
                C92) *
               C139835 * C139809 * C140000 -
           (C445 * C92 + C444 * C91 + C443 * C90 + C442 * C89) * C139835 *
               C139809 * C2322) *
              C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C182 * C183 - C410 * C108 - C182 * C348 + C139824 * C411) *
                 C5811 +
             C442 * C139736) *
                C13856 +
            (C16195 + C16172) * C13857 + (C16196 + C16177) * C13858) *
               C139809 * C2322 -
           ((C15095 * C139736 + (C182 * C13216 - C410 * C13126 - C182 * C13380 +
                                 C139824 * C13462) *
                                    C5811) *
                C13858 +
            (C15096 * C139736 +
             (C182 * C3520 - C410 * C3438 - C182 * C3668 + C139824 * C3742) *
                 C5811) *
                C13857 +
            (C1174 * C139736 +
             (C182 * C896 - C410 * C813 - C182 * C1072 + C139824 * C1151) *
                 C5811) *
                C13856) *
               C139809 * C140000) *
              C2324 +
          (((C1174 * C5811 + C1173 * C139736) * C13856 +
            (C15096 * C5811 +
             (C182 * C3522 - C410 * C3440 - C182 * C3670 + C139824 * C3744) *
                 C139736) *
                C13857 +
            (C15095 * C5811 + (C182 * C14761 - C410 * C14659 - C182 * C14981 +
                               C139824 * C15081) *
                                  C139736) *
                C13858) *
               C139809 * C140000 -
           ((C16185 + C16184) * C13858 + (C16183 + C16182) * C13857 +
            (C443 * C139736 + C442 * C5811) * C13856) *
               C139809 * C2322) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[21] +=
        (-std::pow(Pi, 2.5) *
         (((((C139835 * C266 - C265 * C108) * C5894 +
             (C139835 * C495 - C265 * C348) * C5813 + (C6915 - C6916) * C5895 +
             (C7294 - C7295) * C5814 + (C6921 - C6922) * C5896 +
             (C7296 - C7297) * C5815) *
                C5811 +
            ((C279 - C280) * C5894 + (C502 - C503) * C5813 + C6919 * C5895 +
             C7298 * C5814 + C6925 * C5896 + C7299 * C5815) *
                C139736) *
               C139809 * C2322 +
           (((C6916 - C6915) * C5894 + (C7295 - C7294) * C5813 +
             (C6922 - C6921) * C5895 + (C7297 - C7296) * C5814 +
             (C265 * C6627 - C139835 * C6908) * C5896 +
             (C265 * C7032 - C139835 * C7290) * C5815) *
                C5811 +
            (C6927 * C5894 + C7300 * C5813 + C6929 * C5895 + C7301 * C5814 +
             (C6931 - C6932) * C5896 + (C7302 - C7303) * C5815) *
                C139736) *
               C139809 * C140000) *
              C2324 +
          ((((C280 - C279) * C5894 + (C503 - C502) * C5813 + C6927 * C5895 +
             C7300 * C5814 + C6929 * C5896 + C7301 * C5815) *
                C5811 +
            ((C284 - C283) * C5894 + (C506 - C505) * C5813 +
             (C999 - C1000) * C5895 + (C1248 - C1249) * C5814 +
             (C6000 - C6001) * C5896 + (C6273 - C6274) * C5815) *
                C139736) *
               C139809 * C2322 +
           ((C6919 * C5894 + C7298 * C5813 + C6925 * C5895 + C7299 * C5814 +
             (C6932 - C6931) * C5896 + (C7303 - C7302) * C5815) *
                C5811 +
            ((C1000 - C999) * C5894 + (C1249 - C1248) * C5813 +
             (C6001 - C6000) * C5895 + (C6274 - C6273) * C5814 +
             (C139835 * C6910 - C265 * C6628) * C5896 +
             (C139835 * C7292 - C265 * C7034) * C5815) *
                C139736) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C139835 * C266 - C265 * C108) * C182 +
             (C139835 * C495 - C265 * C348) * C139824) *
                C89 +
            ((C279 - C280) * C182 + (C502 - C503) * C139824) * C90 +
            C516 * C91 + C517 * C92) *
               C139809 * C2322 +
           (((C265 * C813 - C139835 * C984) * C182 +
             (C265 * C1072 - C139835 * C1240) * C139824) *
                C89 +
            ((C995 - C996) * C182 + (C1246 - C1247) * C139824) * C90 +
            ((C999 - C1000) * C182 + (C1248 - C1249) * C139824) * C91 +
            ((C1003 - C1004) * C182 + (C1250 - C1251) * C139824) * C92) *
               C139809 * C140000) *
              C2324 +
          ((((C280 - C279) * C182 + (C503 - C502) * C139824) * C89 +
            ((C284 - C283) * C182 + (C506 - C505) * C139824) * C90 +
            ((C288 - C287) * C182 + (C509 - C508) * C139824) * C91 +
            ((C291 - C292) * C182 + (C510 - C511) * C139824) * C92) *
               C139809 * C2322 +
           (((C996 - C995) * C182 + (C1247 - C1246) * C139824) * C89 +
            ((C1000 - C999) * C182 + (C1249 - C1248) * C139824) * C90 +
            ((C1004 - C1003) * C182 + (C1251 - C1250) * C139824) * C91 +
            ((C139835 * C988 - C265 * C814) * C182 +
             (C139835 * C1244 - C265 * C1076) * C139824) *
                C92) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C13856 * C266 - C14015 * C108 + C13857 * C1741 - C14016 * C1570 +
              C13858 * C5397 - C14017 * C5273) *
                 C182 +
             (C13856 * C495 - C14015 * C348 + C13857 * C1997 - C14016 * C1829 +
              C13858 * C5567 - C14017 * C5455) *
                 C139824) *
                C5811 +
            ((C14019 - C14020 + C14021 - C14022 + C14023 - C14024) * C182 +
             (C14279 - C14280 + C14281 - C14282 + C14283 - C14284) * C139824) *
                C139736) *
               C139809 * C2322 +
           (((C14015 * C813 - C13856 * C984 + C14016 * C3438 - C13857 * C3594 +
              C14017 * C13126 - C13858 * C13298) *
                 C182 +
             (C14015 * C1072 - C13856 * C1240 + C14016 * C3668 -
              C13857 * C3812 + C14017 * C13380 - C13858 * C13540) *
                 C139824) *
                C5811 +
            ((C14872 - C14873 + C14874 - C14875 + C14876 - C14877) * C182 +
             (C15196 - C15197 + C15198 - C15199 + C15200 - C15201) * C139824) *
                C139736) *
               C139809 * C140000) *
              C2324 +
          ((((C14020 - C14019 + C14022 - C14021 + C14024 - C14023) * C182 +
             (C14280 - C14279 + C14282 - C14281 + C14284 - C14283) * C139824) *
                C5811 +
            ((C14031 - C14032 + C14033 - C14034 + C14035 - C14036) * C182 +
             (C14285 - C14286 + C14287 - C14288 + C14289 - C14290) * C139824) *
                C139736) *
               C139809 * C2322 +
           (((C14873 - C14872 + C14875 - C14874 + C14877 - C14876) * C182 +
             (C15197 - C15196 + C15199 - C15198 + C15201 - C15200) * C139824) *
                C5811 +
            ((C13856 * C986 - C14015 * C811 + C13857 * C3596 - C14016 * C3440 +
              C13858 * C14869 - C14017 * C14659) *
                 C182 +
             (C13856 * C1242 - C14015 * C1074 + C13857 * C3814 -
              C14016 * C3670 + C13858 * C15194 - C14017 * C14981) *
                 C139824) *
                C139736) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eezx[21] +=
        (-std::pow(Pi, 2.5) *
         (((((C5811 * C114 - C5816 * C108 + C139736 * C116 - C5818 * C109) *
                 C265 +
             (C5811 * C573 - C5816 * C567 + C139736 * C574 - C5818 * C568) *
                 C139835) *
                C5813 +
            ((C7039 - C7040 + C7041 - C7042) * C265 +
             (C7408 - C7409 + C7410 - C7411) * C139835) *
                C5814 +
            ((C7047 - C7048 + C7049 - C7050) * C265 +
             (C7412 - C7413 + C7414 - C7415) * C139835) *
                C5815) *
               C139809 * C2322 +
           (((C7040 - C7039 + C7042 - C7041) * C265 +
             (C7409 - C7408 + C7411 - C7410) * C139835) *
                C5813 +
            ((C7048 - C7047 + C7050 - C7049) * C265 +
             (C7413 - C7412 + C7415 - C7414) * C139835) *
                C5814 +
            ((C5816 * C6627 - C5811 * C6631 + C5818 * C6626 - C139736 * C6629) *
                 C265 +
             (C5816 * C7401 - C5811 * C7404 + C5818 * C7402 - C139736 * C7405) *
                 C139835) *
                C5815) *
               C139809 * C140000) *
              C2324 +
          ((((C5816 * C109 - C5811 * C116 + C5818 * C110 - C139736 * C118) *
                 C265 +
             (C5816 * C568 - C5811 * C574 + C5818 * C569 - C139736 * C575) *
                 C139835) *
                C5813 +
            ((C7055 - C7056 + C7057 - C7058) * C265 +
             (C7416 - C7417 + C7418 - C7419) * C139835) *
                C5814 +
            ((C7063 - C7064 + C7065 - C7066) * C265 +
             (C7420 - C7421 + C7422 - C7423) * C139835) *
                C5815) *
               C139809 * C2322 +
           (((C7056 - C7055 + C7058 - C7057) * C265 +
             (C7417 - C7416 + C7419 - C7418) * C139835) *
                C5813 +
            ((C7064 - C7063 + C7066 - C7065) * C265 +
             (C7421 - C7420 + C7423 - C7422) * C139835) *
                C5814 +
            ((C5811 * C6629 - C5816 * C6626 + C139736 * C6633 - C5818 * C6628) *
                 C265 +
             (C5811 * C7405 - C5816 * C7402 + C139736 * C7406 - C5818 * C7403) *
                 C139835) *
                C5815) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C89 * C114 - C100 * C108 + C90 * C116 - C102 * C109 + C91 * C118 -
             C104 * C110 + C92 * C120 - C106 * C111) *
                C265 +
            (C89 * C573 - C100 * C567 + C90 * C574 - C102 * C568 + C91 * C575 -
             C104 * C569 + C92 * C576 - C106 * C570) *
                C139835) *
               C139824 * C139809 * C2322 +
           ((C100 * C813 - C89 * C821 + C102 * C812 - C90 * C819 + C104 * C811 -
             C91 * C817 + C106 * C810 - C92 * C815) *
                C265 +
            (C100 * C1317 - C89 * C1322 + C102 * C1318 - C90 * C1323 +
             C104 * C1319 - C91 * C1324 + C106 * C1320 - C92 * C1325) *
                C139835) *
               C139824 * C139809 * C140000) *
              C2324 +
          (((C100 * C109 - C89 * C116 + C102 * C110 - C90 * C118 + C104 * C111 -
             C91 * C120 + C106 * C112 - C92 * C122) *
                C265 +
            (C100 * C568 - C89 * C574 + C102 * C569 - C90 * C575 + C104 * C570 -
             C91 * C576 + C106 * C571 - C92 * C577) *
                C139835) *
               C139824 * C139809 * C2322 +
           ((C89 * C819 - C100 * C812 + C90 * C817 - C102 * C811 + C91 * C815 -
             C104 * C810 + C92 * C823 - C106 * C814) *
                C265 +
            (C89 * C1323 - C100 * C1318 + C90 * C1324 - C102 * C1319 +
             C91 * C1325 - C104 * C1320 + C92 * C1326 - C106 * C1321) *
                C139835) *
               C139824 * C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C5811 * C114 - C5816 * C108 + C139736 * C116 - C5818 * C109) *
                C14015 +
            (C5811 * C573 - C5816 * C567 + C139736 * C574 - C5818 * C568) *
                C13856 +
            (C16035 - C16036 + C16037 - C16038) * C14016 +
            (C16408 - C16409 + C16410 - C16411) * C13857 +
            (C16043 - C16044 + C16045 - C16046) * C14017 +
            (C16412 - C16413 + C16414 - C16415) * C13858) *
               C139824 * C139809 * C2322 +
           ((C7040 - C7039 + C7042 - C7041) * C14015 +
            (C7409 - C7408 + C7411 - C7410) * C13856 +
            (C10745 - C10746 + C10747 - C10748) * C14016 +
            (C11067 - C11068 + C11069 - C11070) * C13857 +
            (C5816 * C13126 - C5811 * C13130 + C5818 * C13127 -
             C139736 * C13132) *
                C14017 +
            (C5816 * C13618 - C5811 * C13622 + C5818 * C13619 -
             C139736 * C13623) *
                C13858) *
               C139824 * C139809 * C140000) *
              C2324 +
          (((C5816 * C109 - C5811 * C116 + C5818 * C110 - C139736 * C118) *
                C14015 +
            (C5816 * C568 - C5811 * C574 + C5818 * C569 - C139736 * C575) *
                C13856 +
            (C16051 - C16052 + C16053 - C16054) * C14016 +
            (C16416 - C16417 + C16418 - C16419) * C13857 +
            (C16059 - C16060 + C16061 - C16062) * C14017 +
            (C16420 - C16421 + C16422 - C16423) * C13858) *
               C139824 * C139809 * C2322 +
           ((C7056 - C7055 + C7058 - C7057) * C14015 +
            (C7417 - C7416 + C7419 - C7418) * C13856 +
            (C5811 * C3444 - C5816 * C3439 + C139736 * C3446 - C5818 * C3440) *
                C14016 +
            (C5811 * C3887 - C5816 * C3883 + C139736 * C3888 - C5818 * C3884) *
                C13857 +
            (C5811 * C13132 - C5816 * C13127 + C139736 * C14660 -
             C5818 * C14659) *
                C14017 +
            (C5811 * C13623 - C5816 * C13619 + C139736 * C15300 -
             C5818 * C15299) *
                C13858) *
               C139824 * C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eezy[21] +=
        (-std::pow(Pi, 2.5) *
         (((((C5813 * C183 - C5894 * C108 + C5814 * C896 - C5895 * C813 +
              C5815 * C2974 - C5896 * C2908) *
                 C265 +
             (C5813 * C629 - C5894 * C567 + C5814 * C1393 - C5895 * C1317 +
              C5815 * C3314 - C5896 * C3256) *
                 C139835) *
                C5811 +
            ((C5898 - C5899 + C5900 - C5901 + C5902 - C5903) * C265 +
             (C6423 - C6424 + C6425 - C6426 + C6427 - C6428) * C139835) *
                C139736) *
               C139809 * C2322 +
           (((C5894 * C813 - C5813 * C896 + C5895 * C2908 - C5814 * C2974 +
              C5896 * C6627 - C5815 * C6792) *
                 C265 +
             (C5894 * C1317 - C5813 * C1393 + C5895 * C3256 - C5814 * C3314 +
              C5896 * C7401 - C5815 * C7521) *
                 C139835) *
                C5811 +
            ((C6799 - C6800 + C6801 - C6802 + C6803 - C6804) * C265 +
             (C7525 - C7526 + C7527 - C7528 + C7529 - C7530) * C139835) *
                C139736) *
               C139809 * C140000) *
              C2324 +
          ((((C5899 - C5898 + C5901 - C5900 + C5903 - C5902) * C265 +
             (C6424 - C6423 + C6426 - C6425 + C6428 - C6427) * C139835) *
                C5811 +
            ((C5910 - C5911 + C5912 - C5913 + C5914 - C5915) * C265 +
             (C6429 - C6430 + C6431 - C6432 + C6433 - C6434) * C139835) *
                C139736) *
               C139809 * C2322 +
           (((C6800 - C6799 + C6802 - C6801 + C6804 - C6803) * C265 +
             (C7526 - C7525 + C7528 - C7527 + C7530 - C7529) * C139835) *
                C5811 +
            ((C5813 * C898 - C5894 * C811 + C5814 * C2976 - C5895 * C2910 +
              C5815 * C6794 - C5896 * C6628) *
                 C265 +
             (C5813 * C1395 - C5894 * C1319 + C5814 * C3316 - C5895 * C3258 +
              C5815 * C7523 - C5896 * C7403) *
                 C139835) *
                C139736) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C139824 * C183 - C182 * C108) * C265 +
             (C139824 * C629 - C182 * C567) * C139835) *
                C89 +
            ((C196 - C197) * C265 + (C636 - C637) * C139835) * C90 +
            C650 * C91 + C651 * C92) *
               C139809 * C2322 +
           (((C182 * C813 - C139824 * C896) * C265 +
             (C182 * C1317 - C139824 * C1393) * C139835) *
                C89 +
            ((C907 - C908) * C265 + (C1399 - C1400) * C139835) * C90 +
            ((C911 - C912) * C265 + (C1401 - C1402) * C139835) * C91 +
            ((C915 - C916) * C265 + (C1403 - C1404) * C139835) * C92) *
               C139809 * C140000) *
              C2324 +
          ((((C197 - C196) * C265 + (C637 - C636) * C139835) * C89 +
            ((C201 - C200) * C265 + (C640 - C639) * C139835) * C90 +
            ((C205 - C204) * C265 + (C643 - C642) * C139835) * C91 +
            ((C208 - C209) * C265 + (C644 - C645) * C139835) * C92) *
               C139809 * C2322 +
           (((C908 - C907) * C265 + (C1400 - C1399) * C139835) * C89 +
            ((C912 - C911) * C265 + (C1402 - C1401) * C139835) * C90 +
            ((C916 - C915) * C265 + (C1404 - C1403) * C139835) * C91 +
            ((C139824 * C900 - C182 * C814) * C265 +
             (C139824 * C1397 - C182 * C1321) * C139835) *
                C92) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C139824 * C183 - C182 * C108) * C14015 +
             (C139824 * C629 - C182 * C567) * C13856 +
             (C15795 - C15796) * C14016 + (C16525 - C16526) * C13857 +
             (C15801 - C15802) * C14017 + (C16527 - C16528) * C13858) *
                C5811 +
            ((C196 - C197) * C14015 + (C636 - C637) * C13856 + C15799 * C14016 +
             C16529 * C13857 + C15805 * C14017 + C16530 * C13858) *
                C139736) *
               C139809 * C2322 +
           (((C182 * C813 - C139824 * C896) * C14015 +
             (C182 * C1317 - C139824 * C1393) * C13856 +
             (C182 * C3438 - C139824 * C3520) * C14016 +
             (C182 * C3882 - C139824 * C3956) * C13857 +
             (C182 * C13126 - C139824 * C13216) * C14017 +
             (C182 * C13618 - C139824 * C13700) * C13858) *
                C5811 +
            ((C907 - C908) * C14015 + (C1399 - C1400) * C13856 +
             (C14764 - C14765) * C14016 + (C15401 - C15402) * C13857 +
             (C14768 - C14769) * C14017 + (C15403 - C15404) * C13858) *
                C139736) *
               C139809 * C140000) *
              C2324 +
          ((((C197 - C196) * C14015 + (C637 - C636) * C13856 + C15807 * C14016 +
             C16531 * C13857 + C15809 * C14017 + C16532 * C13858) *
                C5811 +
            ((C201 - C200) * C14015 + (C640 - C639) * C13856 +
             (C1668 - C1669) * C14016 + (C2158 - C2159) * C13857 +
             (C13938 - C13939) * C14017 + (C14441 - C14442) * C13858) *
                C139736) *
               C139809 * C2322 +
           (((C908 - C907) * C14015 + (C1400 - C1399) * C13856 +
             (C14765 - C14764) * C14016 + (C15402 - C15401) * C13857 +
             (C14769 - C14768) * C14017 + (C15404 - C15403) * C13858) *
                C5811 +
            ((C912 - C911) * C14015 + (C1402 - C1401) * C13856 +
             (C139824 * C3522 - C182 * C3440) * C14016 +
             (C139824 * C3958 - C182 * C3884) * C13857 +
             (C139824 * C14761 - C182 * C14659) * C14017 +
             (C139824 * C15399 - C182 * C15299) * C13858) *
                C139736) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eezz[21] +=
        (-std::pow(Pi, 2.5) *
         (((((C265 * C266 - C701 * C108 - C265 * C567 + C139835 * C702) *
                 C5813 +
             C7652 * C5814 + C7653 * C5815) *
                C5811 +
            (C6509 + C6510 + C6527) * C139736) *
               C139809 * C2322 -
           ((C7655 + C7644 + C7645) * C139736 +
            ((C265 * C6908 - C701 * C6627 - C265 * C7401 + C139835 * C7629) *
                 C5815 +
             C7653 * C5814 + C7652 * C5813) *
                C5811) *
               C139809 * C140000) *
              C2324 +
          (((C7645 + C7644 + C7655) * C5811 +
            (C1495 * C5813 + C6526 * C5814 +
             (C265 * C6910 - C701 * C6628 - C265 * C7403 + C139835 * C7630) *
                 C5815) *
                C139736) *
               C139809 * C140000 -
           ((C6528 + C6519 + C6520) * C139736 +
            (C6527 + C6510 + C6509) * C5811) *
               C139809 * C2322) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C265 * C266 - C701 * C108 - C265 * C567 + C139835 * C702) *
                C139824 * C89 +
            C737 * C90 + C738 * C91 + C739 * C92) *
               C139809 * C2322 -
           (C1497 * C92 + C1498 * C91 + C1499 * C90 +
            (C265 * C984 - C701 * C813 - C265 * C1317 + C139835 * C1473) *
                C139824 * C89) *
               C139809 * C140000) *
              C2324 +
          ((C1499 * C89 + C1498 * C90 + C1497 * C91 +
            (C265 * C988 - C701 * C814 - C265 * C1321 + C139835 * C1474) *
                C139824 * C92) *
               C139809 * C140000 -
           (C740 * C92 + C739 * C91 + C738 * C90 + C737 * C89) * C139809 *
               C2322) *
              C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C14015 * C266 - C14516 * C108 - C14015 * C567 + C13856 * C702 +
             C14016 * C1741 - C14517 * C1570 - C14016 * C2074 + C13857 * C2230 +
             C14017 * C5397 - C14518 * C5273 - C14017 * C5621 +
             C13858 * C5733) *
                C139824 * C5811 +
            (C14556 + C14557 + C14558) * C139824 * C139736) *
               C139809 * C2322 -
           ((C15522 + C15523 + C15524) * C139824 * C139736 +
            (C14017 * C13298 - C14518 * C13126 - C14017 * C13618 +
             C13858 * C13778 + C14016 * C3594 - C14517 * C3438 -
             C14016 * C3882 + C13857 * C4026 + C14015 * C984 - C14516 * C813 -
             C14015 * C1317 + C13856 * C1473) *
                C139824 * C5811) *
               C139809 * C140000) *
              C2324 +
          (((C15524 + C15523 + C15522) * C139824 * C5811 +
            (C14015 * C986 - C14516 * C811 - C14015 * C1319 + C13856 * C1471 +
             C14016 * C3596 - C14517 * C3440 - C14016 * C3884 + C13857 * C4028 +
             C14017 * C14869 - C14518 * C14659 - C14017 * C15299 +
             C13858 * C15502) *
                C139824 * C139736) *
               C139809 * C140000 -
           ((C14559 + C14560 + C14561) * C139824 * C139736 +
            (C14558 + C14557 + C14556) * C139824 * C5811) *
               C139809 * C2322) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eexx[22] +=
        (-std::pow(Pi, 2.5) *
         (((C5816 * C114 - C5817 * C108 - C5816 * C115 + C5811 * C126 +
            C5818 * C116 - C5819 * C109 - C5818 * C117 + C139736 * C127) *
               C139835 * C5813 +
           (C6687 + C6688) * C139835 * C5814 + C9627 * C5815) *
              C139809 * C2904 -
          ((C9632 + C9633) * C139835 * C5815 +
           (C6690 + C6689) * C139835 * C5814 +
           (C6688 + C6687) * C139835 * C5813) *
              C139809 * C2905 +
          (C9627 * C5813 + (C9633 + C9632) * C139835 * C5814 +
           (C5816 * C9611 - C5817 * C9609 - C5816 * C9612 + C5811 * C9615 +
            C5818 * C9613 - C5819 * C9610 - C5818 * C9614 + C139736 * C9616) *
               C139835 * C5815) *
              C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((C100 * C114 - C101 * C108 - C100 * C115 + C89 * C126 + C102 * C116 -
           C103 * C109 - C102 * C117 + C90 * C127 + C104 * C118 - C105 * C110 -
           C104 * C119 + C91 * C128 + C106 * C120 - C107 * C111 - C106 * C121 +
           C92 * C129) *
              C139835 * C139824 * C139809 * C2904 -
          (C106 * C815 - C107 * C810 - C106 * C816 + C92 * C825 + C104 * C817 -
           C105 * C811 - C104 * C818 + C91 * C826 + C102 * C819 - C103 * C812 -
           C102 * C820 + C90 * C827 + C100 * C821 - C101 * C813 - C100 * C822 +
           C89 * C828) *
              C139835 * C139824 * C139809 * C2905 +
          (C100 * C2912 - C101 * C2908 - C100 * C2913 + C89 * C2920 +
           C102 * C2914 - C103 * C2909 - C102 * C2915 + C90 * C2921 +
           C104 * C2916 - C105 * C2910 - C104 * C2917 + C91 * C2922 +
           C106 * C2918 - C107 * C2911 - C106 * C2919 + C92 * C2923) *
              C139835 * C139824 * C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C5816 * C114 - C5817 * C108 - C5816 * C115 + C5811 * C126 +
            C5818 * C116 - C5819 * C109 - C5818 * C117 + C139736 * C127) *
               C13856 +
           (C15683 + C15684) * C13857 + (C15685 + C15686) * C13858) *
              C139824 * C139809 * C2904 -
          ((C5818 * C13132 - C5819 * C13127 - C5818 * C13133 +
            C139736 * C13139 + C5816 * C13130 - C5817 * C13126 -
            C5816 * C13131 + C5811 * C13138) *
               C13858 +
           (C10429 + C10430) * C13857 + (C6688 + C6687) * C13856) *
              C139824 * C139809 * C2905 +
          (C9618 * C13856 + (C10428 + C10427) * C13857 +
           (C5816 * C13134 - C5817 * C13128 - C5816 * C13135 + C5811 * C13140 +
            C5818 * C13136 - C5819 * C13129 - C5818 * C13137 +
            C139736 * C13141) *
               C13858) *
              C139824 * C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eexy[22] +=
        (-std::pow(Pi, 2.5) *
         (((C5813 * C183 - C5894 * C108 + C5814 * C896 - C5895 * C813 +
            C5815 * C2974 - C5896 * C2908) *
               C5816 +
           (C5813 * C189 - C5894 * C115 + C5814 * C901 - C5895 * C822 +
            C5815 * C2978 - C5896 * C2913) *
               C5811 +
           (C5898 - C5899 + C5900 - C5901 + C5902 - C5903) * C5818 +
           (C5904 - C5905 + C5906 - C5907 + C5908 - C5909) * C139736) *
              C139835 * C139809 * C2904 +
          ((C5894 * C813 - C5813 * C896 + C5895 * C2908 - C5814 * C2974 +
            C5896 * C6627 - C5815 * C6792) *
               C5816 +
           (C5894 * C822 - C5813 * C901 + C5895 * C2913 - C5814 * C2978 +
            C5896 * C6632 - C5815 * C6795) *
               C5811 +
           (C6799 - C6800 + C6801 - C6802 + C6803 - C6804) * C5818 +
           (C6805 - C6806 + C6807 - C6808 + C6809 - C6810) * C139736) *
              C139835 * C139809 * C2905 +
          ((C5813 * C2974 - C5894 * C2908 + C5814 * C6792 - C5895 * C6627 +
            C5815 * C9707 - C5896 * C9609) *
               C5816 +
           (C5813 * C2978 - C5894 * C2913 + C5814 * C6795 - C5895 * C6632 +
            C5815 * C9709 - C5896 * C9612) *
               C5811 +
           (C5813 * C2975 - C5894 * C2909 + C5814 * C6793 - C5895 * C6626 +
            C5815 * C9708 - C5896 * C9610) *
               C5818 +
           (C5813 * C2979 - C5894 * C2915 + C5814 * C6796 - C5895 * C6630 +
            C5815 * C9710 - C5896 * C9614) *
               C139736) *
              C139835 * C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C139824 * C183 - C182 * C108) * C100 +
           (C139824 * C189 - C182 * C115) * C89 + (C196 - C197) * C102 +
           (C198 - C199) * C90 + C212 * C104 + C213 * C91 + C214 * C106 +
           C215 * C92) *
              C139835 * C139809 * C2904 +
          ((C182 * C813 - C139824 * C896) * C100 +
           (C182 * C822 - C139824 * C901) * C89 + (C907 - C908) * C102 +
           (C909 - C910) * C90 + (C911 - C912) * C104 + (C913 - C914) * C91 +
           (C915 - C916) * C106 + (C917 - C918) * C92) *
              C139835 * C139809 * C2905 +
          ((C139824 * C2974 - C182 * C2908) * C100 +
           (C139824 * C2978 - C182 * C2913) * C89 +
           (C139824 * C2975 - C182 * C2909) * C102 +
           (C139824 * C2979 - C182 * C2915) * C90 +
           (C139824 * C2976 - C182 * C2910) * C104 +
           (C139824 * C2980 - C182 * C2917) * C91 +
           (C139824 * C2977 - C182 * C2911) * C106 +
           (C139824 * C2981 - C182 * C2919) * C92) *
              C139835 * C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C139824 * C183 - C182 * C108) * C5816 +
            (C139824 * C189 - C182 * C115) * C5811 + (C196 - C197) * C5818 +
            (C198 - C199) * C139736) *
               C13856 +
           ((C15795 - C15796) * C5816 + (C15797 - C15798) * C5811 +
            C15799 * C5818 + C15800 * C139736) *
               C13857 +
           ((C15801 - C15802) * C5816 + (C15803 - C15804) * C5811 +
            C15805 * C5818 + C15806 * C139736) *
               C13858) *
              C139809 * C2904 +
          (((C182 * C813 - C139824 * C896) * C5816 +
            (C182 * C822 - C139824 * C901) * C5811 + (C907 - C908) * C5818 +
            (C909 - C910) * C139736) *
               C13856 +
           ((C182 * C3438 - C139824 * C3520) * C5816 +
            (C182 * C3443 - C139824 * C3524) * C5811 +
            (C14764 - C14765) * C5818 + (C14766 - C14767) * C139736) *
               C13857 +
           ((C182 * C13126 - C139824 * C13216) * C5816 +
            (C182 * C13131 - C139824 * C13220) * C5811 +
            (C14768 - C14769) * C5818 + (C14770 - C14771) * C139736) *
               C13858) *
              C139809 * C2905 +
          (((C139824 * C2974 - C182 * C2908) * C5816 +
            (C139824 * C2978 - C182 * C2913) * C5811 +
            (C139824 * C2975 - C182 * C2909) * C5818 +
            (C139824 * C2979 - C182 * C2915) * C139736) *
               C13856 +
           ((C139824 * C7863 - C182 * C7754) * C5816 +
            (C139824 * C7866 - C182 * C7759) * C5811 +
            (C139824 * C7864 - C182 * C7753) * C5818 +
            (C139824 * C7867 - C182 * C7757) * C139736) *
               C13857 +
           ((C139824 * C13217 - C182 * C13128) * C5816 +
            (C139824 * C13221 - C182 * C13135) * C5811 +
            (C139824 * C13219 - C182 * C13129) * C5818 +
            (C139824 * C13223 - C182 * C13137) * C139736) *
               C13858) *
              C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eexz[22] +=
        (-std::pow(Pi, 2.5) *
         ((((C139835 * C266 - C265 * C108) * C5816 +
            (C139835 * C272 - C265 * C115) * C5811 + (C279 - C280) * C5818 +
            (C281 - C282) * C139736) *
               C5813 +
           ((C6915 - C6916) * C5816 + (C6917 - C6918) * C5811 + C6919 * C5818 +
            C6920 * C139736) *
               C5814 +
           C9802 * C5815) *
              C139809 * C2904 +
          (((C6916 - C6915) * C5816 + (C6918 - C6917) * C5811 + C6927 * C5818 +
            C6928 * C139736) *
               C5813 +
           ((C6922 - C6921) * C5816 + (C6924 - C6923) * C5811 + C6929 * C5818 +
            C6930 * C139736) *
               C5814 +
           ((C9794 - C9795) * C5816 + (C9796 - C9797) * C5811 +
            (C6931 - C6932) * C5818 + (C6933 - C6934) * C139736) *
               C5815) *
              C139809 * C2905 +
          (C9802 * C5813 +
           ((C9795 - C9794) * C5816 + (C9797 - C9796) * C5811 +
            (C6932 - C6931) * C5818 + (C6934 - C6933) * C139736) *
               C5814 +
           ((C139835 * C9785 - C265 * C9609) * C5816 +
            (C139835 * C9787 - C265 * C9612) * C5811 +
            (C139835 * C9786 - C265 * C9610) * C5818 +
            (C139835 * C9788 - C265 * C9614) * C139736) *
               C5815) *
              C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C139835 * C266 - C265 * C108) * C100 +
           (C139835 * C272 - C265 * C115) * C89 + (C279 - C280) * C102 +
           (C281 - C282) * C90 + C295 * C104 + C296 * C91 + C297 * C106 +
           C298 * C92) *
              C139824 * C139809 * C2904 +
          ((C265 * C813 - C139835 * C984) * C100 +
           (C265 * C822 - C139835 * C989) * C89 + (C995 - C996) * C102 +
           (C997 - C998) * C90 + (C999 - C1000) * C104 + (C1001 - C1002) * C91 +
           (C1003 - C1004) * C106 + (C1005 - C1006) * C92) *
              C139824 * C139809 * C2905 +
          ((C139835 * C3032 - C265 * C2908) * C100 +
           (C139835 * C3036 - C265 * C2913) * C89 +
           (C139835 * C3033 - C265 * C2909) * C102 +
           (C139835 * C3037 - C265 * C2915) * C90 +
           (C139835 * C3034 - C265 * C2910) * C104 +
           (C139835 * C3038 - C265 * C2917) * C91 +
           (C139835 * C3035 - C265 * C2911) * C106 +
           (C139835 * C3039 - C265 * C2919) * C92) *
              C139824 * C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C13856 * C266 - C14015 * C108 + C13857 * C1741 - C14016 * C1570 +
            C13858 * C5397 - C14017 * C5273) *
               C5816 +
           (C13856 * C272 - C14015 * C115 + C13857 * C1746 - C14016 * C1579 +
            C13858 * C5401 - C14017 * C5278) *
               C5811 +
           (C14019 - C14020 + C14021 - C14022 + C14023 - C14024) * C5818 +
           (C14025 - C14026 + C14027 - C14028 + C14029 - C14030) * C139736) *
              C139824 * C139809 * C2904 +
          ((C14015 * C813 - C13856 * C984 + C14016 * C3438 - C13857 * C3594 +
            C14017 * C13126 - C13858 * C13298) *
               C5816 +
           (C14015 * C822 - C13856 * C989 + C14016 * C3443 - C13857 * C3598 +
            C14017 * C13131 - C13858 * C13302) *
               C5811 +
           (C14872 - C14873 + C14874 - C14875 + C14876 - C14877) * C5818 +
           (C14878 - C14879 + C14880 - C14881 + C14882 - C14883) * C139736) *
              C139824 * C139809 * C2905 +
          ((C13856 * C3032 - C14015 * C2908 + C13857 * C7979 - C14016 * C7754 +
            C13858 * C13300 - C14017 * C13128) *
               C5816 +
           (C13856 * C3036 - C14015 * C2913 + C13857 * C7982 - C14016 * C7759 +
            C13858 * C13304 - C14017 * C13135) *
               C5811 +
           (C13856 * C3033 - C14015 * C2909 + C13857 * C7980 - C14016 * C7753 +
            C13858 * C13301 - C14017 * C13129) *
               C5818 +
           (C13856 * C3037 - C14015 * C2915 + C13857 * C7983 - C14016 * C7757 +
            C13858 * C13305 - C14017 * C13137) *
               C139736) *
              C139824 * C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eeyx[22] +=
        (-std::pow(Pi, 2.5) *
         (((C5811 * C114 - C5816 * C108 + C139736 * C116 - C5818 * C109) *
               C5894 +
           (C5811 * C354 - C5816 * C348 + C139736 * C355 - C5818 * C349) *
               C5813 +
           (C7039 - C7040 + C7041 - C7042) * C5895 +
           (C7043 - C7044 + C7045 - C7046) * C5814 + C9893 * C5896 +
           C9894 * C5815) *
              C139835 * C139809 * C2904 +
          ((C7040 - C7039 + C7042 - C7041) * C5894 +
           (C7044 - C7043 + C7046 - C7045) * C5813 +
           (C7048 - C7047 + C7050 - C7049) * C5895 +
           (C7052 - C7051 + C7054 - C7053) * C5814 +
           (C9885 - C9886 + C9887 - C9888) * C5896 +
           (C9889 - C9890 + C9891 - C9892) * C5815) *
              C139835 * C139809 * C2905 +
          (C9893 * C5894 + C9894 * C5813 +
           (C9886 - C9885 + C9888 - C9887) * C5895 +
           (C9890 - C9889 + C9892 - C9891) * C5814 +
           (C5811 * C9611 - C5816 * C9609 + C139736 * C9613 - C5818 * C9610) *
               C5896 +
           (C5811 * C9878 - C5816 * C9876 + C139736 * C9879 - C5818 * C9877) *
               C5815) *
              C139835 * C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C89 * C114 - C100 * C108 + C90 * C116 - C102 * C109 + C91 * C118 -
            C104 * C110 + C92 * C120 - C106 * C111) *
               C182 +
           (C89 * C354 - C100 * C348 + C90 * C355 - C102 * C349 + C91 * C356 -
            C104 * C350 + C92 * C357 - C106 * C351) *
               C139824) *
              C139835 * C139809 * C2904 +
          ((C100 * C813 - C89 * C821 + C102 * C812 - C90 * C819 + C104 * C811 -
            C91 * C817 + C106 * C810 - C92 * C815) *
               C182 +
           (C100 * C1072 - C89 * C1077 + C102 * C1073 - C90 * C1078 +
            C104 * C1074 - C91 * C1079 + C106 * C1075 - C92 * C1080) *
               C139824) *
              C139835 * C139809 * C2905 +
          ((C89 * C2912 - C100 * C2908 + C90 * C2914 - C102 * C2909 +
            C91 * C2916 - C104 * C2910 + C92 * C2918 - C106 * C2911) *
               C182 +
           (C89 * C3094 - C100 * C3090 + C90 * C3095 - C102 * C3091 +
            C91 * C3096 - C104 * C3092 + C92 * C3097 - C106 * C3093) *
               C139824) *
              C139835 * C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C5811 * C114 - C5816 * C108 + C139736 * C116 - C5818 * C109) *
                C182 +
            (C5811 * C354 - C5816 * C348 + C139736 * C355 - C5818 * C349) *
                C139824) *
               C13856 +
           ((C16035 - C16036 + C16037 - C16038) * C182 +
            (C16039 - C16040 + C16041 - C16042) * C139824) *
               C13857 +
           ((C16043 - C16044 + C16045 - C16046) * C182 +
            (C16047 - C16048 + C16049 - C16050) * C139824) *
               C13858) *
              C139809 * C2904 +
          (((C7040 - C7039 + C7042 - C7041) * C182 +
            (C7044 - C7043 + C7046 - C7045) * C139824) *
               C13856 +
           ((C10745 - C10746 + C10747 - C10748) * C182 +
            (C10749 - C10750 + C10751 - C10752) * C139824) *
               C13857 +
           ((C5816 * C13126 - C5811 * C13130 + C5818 * C13127 -
             C139736 * C13132) *
                C182 +
            (C5816 * C13380 - C5811 * C13384 + C5818 * C13381 -
             C139736 * C13385) *
                C139824) *
               C13858) *
              C139809 * C2905 +
          ((C9893 * C182 + C9894 * C139824) * C13856 +
           ((C10754 - C10753 + C10756 - C10755) * C182 +
            (C10758 - C10757 + C10760 - C10759) * C139824) *
               C13857 +
           ((C5811 * C13134 - C5816 * C13128 + C139736 * C13136 -
             C5818 * C13129) *
                C182 +
            (C5811 * C13386 - C5816 * C13382 + C139736 * C13387 -
             C5818 * C13383) *
                C139824) *
               C13858) *
              C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eeyy[22] +=
        (-std::pow(Pi, 2.5) *
         (((C5894 * C183 - C6151 * C108 - C5894 * C348 + C5813 * C411 +
            C5895 * C896 - C6152 * C813 - C5895 * C1072 + C5814 * C1151 +
            C5896 * C2974 - C6153 * C2908 - C5896 * C3090 + C5815 * C3148) *
               C5811 +
           (C6191 + C6192 + C6193) * C139736) *
              C139835 * C139809 * C2904 -
          ((C7190 + C7191 + C7192) * C139736 +
           (C5896 * C6792 - C6153 * C6627 - C5896 * C7032 + C5815 * C7169 +
            C5895 * C2974 - C6152 * C2908 - C5895 * C3090 + C5814 * C3148 +
            C5894 * C896 - C6151 * C813 - C5894 * C1072 + C5813 * C1151) *
               C5811) *
              C139835 * C139809 * C2905 +
          ((C5894 * C2974 - C6151 * C2908 - C5894 * C3090 + C5813 * C3148 +
            C5895 * C6792 - C6152 * C6627 - C5895 * C7032 + C5814 * C7169 +
            C5896 * C9707 - C6153 * C9609 - C5896 * C9876 + C5815 * C9968) *
               C5811 +
           (C5894 * C2975 - C6151 * C2909 - C5894 * C3091 + C5813 * C3149 +
            C5895 * C6793 - C6152 * C6626 - C5895 * C7033 + C5814 * C7168 +
            C5896 * C9708 - C6153 * C9610 - C5896 * C9877 + C5815 * C9969) *
               C139736) *
              C139835 * C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C182 * C183 - C410 * C108 - C182 * C348 + C139824 * C411) * C89 +
           C442 * C90 + C443 * C91 + C444 * C92) *
              C139835 * C139809 * C2904 -
          (C1172 * C92 + C1173 * C91 + C1174 * C90 +
           (C182 * C896 - C410 * C813 - C182 * C1072 + C139824 * C1151) * C89) *
              C139835 * C139809 * C2905 +
          ((C182 * C2974 - C410 * C2908 - C182 * C3090 + C139824 * C3148) *
               C89 +
           (C182 * C2975 - C410 * C2909 - C182 * C3091 + C139824 * C3149) *
               C90 +
           (C182 * C2976 - C410 * C2910 - C182 * C3092 + C139824 * C3150) *
               C91 +
           (C182 * C2977 - C410 * C2911 - C182 * C3093 + C139824 * C3151) *
               C92) *
              C139835 * C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C182 * C183 - C410 * C108 - C182 * C348 + C139824 * C411) * C5811 +
            C442 * C139736) *
               C13856 +
           (C16195 + C16172) * C13857 + (C16196 + C16177) * C13858) *
              C139809 * C2904 -
          ((C15095 * C139736 +
            (C182 * C13216 - C410 * C13126 - C182 * C13380 + C139824 * C13462) *
                C5811) *
               C13858 +
           (C15096 * C139736 +
            (C182 * C3520 - C410 * C3438 - C182 * C3668 + C139824 * C3742) *
                C5811) *
               C13857 +
           (C1174 * C139736 +
            (C182 * C896 - C410 * C813 - C182 * C1072 + C139824 * C1151) *
                C5811) *
               C13856) *
              C139809 * C2905 +
          (((C182 * C2974 - C410 * C2908 - C182 * C3090 + C139824 * C3148) *
                C5811 +
            (C182 * C2975 - C410 * C2909 - C182 * C3091 + C139824 * C3149) *
                C139736) *
               C13856 +
           ((C182 * C7863 - C410 * C7754 - C182 * C8091 + C139824 * C8196) *
                C5811 +
            (C182 * C7864 - C410 * C7753 - C182 * C8092 + C139824 * C8195) *
                C139736) *
               C13857 +
           ((C182 * C13217 - C410 * C13128 - C182 * C13382 + C139824 * C13463) *
                C5811 +
            (C182 * C13219 - C410 * C13129 - C182 * C13383 + C139824 * C13465) *
                C139736) *
               C13858) *
              C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eeyz[22] +=
        (-std::pow(Pi, 2.5) *
         ((((C139835 * C266 - C265 * C108) * C5894 +
            (C139835 * C495 - C265 * C348) * C5813 + (C6915 - C6916) * C5895 +
            (C7294 - C7295) * C5814 + C9790 * C5896 + C10047 * C5815) *
               C5811 +
           ((C279 - C280) * C5894 + (C502 - C503) * C5813 + C6919 * C5895 +
            C7298 * C5814 + C6925 * C5896 + C7299 * C5815) *
               C139736) *
              C139809 * C2904 +
          (((C6916 - C6915) * C5894 + (C7295 - C7294) * C5813 +
            (C6922 - C6921) * C5895 + (C7297 - C7296) * C5814 +
            (C9794 - C9795) * C5896 + (C10048 - C10049) * C5815) *
               C5811 +
           (C6927 * C5894 + C7300 * C5813 + C6929 * C5895 + C7301 * C5814 +
            (C6931 - C6932) * C5896 + (C7302 - C7303) * C5815) *
               C139736) *
              C139809 * C2905 +
          ((C9790 * C5894 + C10047 * C5813 + (C9795 - C9794) * C5895 +
            (C10049 - C10048) * C5814 +
            (C139835 * C9785 - C265 * C9609) * C5896 +
            (C139835 * C10044 - C265 * C9876) * C5815) *
               C5811 +
           (C6925 * C5894 + C7299 * C5813 + (C6932 - C6931) * C5895 +
            (C7303 - C7302) * C5814 + (C139835 * C9786 - C265 * C9610) * C5896 +
            (C139835 * C10045 - C265 * C9877) * C5815) *
               C139736) *
              C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C139835 * C266 - C265 * C108) * C182 +
            (C139835 * C495 - C265 * C348) * C139824) *
               C89 +
           ((C279 - C280) * C182 + (C502 - C503) * C139824) * C90 + C516 * C91 +
           C517 * C92) *
              C139809 * C2904 +
          (((C265 * C813 - C139835 * C984) * C182 +
            (C265 * C1072 - C139835 * C1240) * C139824) *
               C89 +
           ((C995 - C996) * C182 + (C1246 - C1247) * C139824) * C90 +
           ((C999 - C1000) * C182 + (C1248 - C1249) * C139824) * C91 +
           ((C1003 - C1004) * C182 + (C1250 - C1251) * C139824) * C92) *
              C139809 * C2905 +
          (((C139835 * C3032 - C265 * C2908) * C182 +
            (C139835 * C3202 - C265 * C3090) * C139824) *
               C89 +
           ((C139835 * C3033 - C265 * C2909) * C182 +
            (C139835 * C3203 - C265 * C3091) * C139824) *
               C90 +
           ((C139835 * C3034 - C265 * C2910) * C182 +
            (C139835 * C3204 - C265 * C3092) * C139824) *
               C91 +
           ((C139835 * C3035 - C265 * C2911) * C182 +
            (C139835 * C3205 - C265 * C3093) * C139824) *
               C92) *
              C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C13856 * C266 - C14015 * C108 + C13857 * C1741 - C14016 * C1570 +
             C13858 * C5397 - C14017 * C5273) *
                C182 +
            (C13856 * C495 - C14015 * C348 + C13857 * C1997 - C14016 * C1829 +
             C13858 * C5567 - C14017 * C5455) *
                C139824) *
               C5811 +
           ((C14019 - C14020 + C14021 - C14022 + C14023 - C14024) * C182 +
            (C14279 - C14280 + C14281 - C14282 + C14283 - C14284) * C139824) *
               C139736) *
              C139809 * C2904 +
          (((C14015 * C813 - C13856 * C984 + C14016 * C3438 - C13857 * C3594 +
             C14017 * C13126 - C13858 * C13298) *
                C182 +
            (C14015 * C1072 - C13856 * C1240 + C14016 * C3668 - C13857 * C3812 +
             C14017 * C13380 - C13858 * C13540) *
                C139824) *
               C5811 +
           ((C14872 - C14873 + C14874 - C14875 + C14876 - C14877) * C182 +
            (C15196 - C15197 + C15198 - C15199 + C15200 - C15201) * C139824) *
               C139736) *
              C139809 * C2905 +
          (((C13856 * C3032 - C14015 * C2908 + C13857 * C7979 - C14016 * C7754 +
             C13858 * C13300 - C14017 * C13128) *
                C182 +
            (C13856 * C3202 - C14015 * C3090 + C13857 * C8317 - C14016 * C8091 +
             C13858 * C13541 - C14017 * C13382) *
                C139824) *
               C5811 +
           ((C13856 * C3033 - C14015 * C2909 + C13857 * C7980 - C14016 * C7753 +
             C13858 * C13301 - C14017 * C13129) *
                C182 +
            (C13856 * C3203 - C14015 * C3091 + C13857 * C8318 - C14016 * C8092 +
             C13858 * C13543 - C14017 * C13383) *
                C139824) *
               C139736) *
              C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eezx[22] +=
        (-std::pow(Pi, 2.5) *
         ((((C5811 * C114 - C5816 * C108 + C139736 * C116 - C5818 * C109) *
                C265 +
            (C5811 * C573 - C5816 * C567 + C139736 * C574 - C5818 * C568) *
                C139835) *
               C5813 +
           ((C7039 - C7040 + C7041 - C7042) * C265 +
            (C7408 - C7409 + C7410 - C7411) * C139835) *
               C5814 +
           C10137 * C5815) *
              C139809 * C2904 +
          (((C7040 - C7039 + C7042 - C7041) * C265 +
            (C7409 - C7408 + C7411 - C7410) * C139835) *
               C5813 +
           ((C7048 - C7047 + C7050 - C7049) * C265 +
            (C7413 - C7412 + C7415 - C7414) * C139835) *
               C5814 +
           ((C9885 - C9886 + C9887 - C9888) * C265 +
            (C10131 - C10132 + C10133 - C10134) * C139835) *
               C5815) *
              C139809 * C2905 +
          (C10137 * C5813 +
           ((C9886 - C9885 + C9888 - C9887) * C265 +
            (C10132 - C10131 + C10134 - C10133) * C139835) *
               C5814 +
           ((C5811 * C9611 - C5816 * C9609 + C139736 * C9613 - C5818 * C9610) *
                C265 +
            (C5811 * C10125 - C5816 * C10123 + C139736 * C10126 -
             C5818 * C10124) *
                C139835) *
               C5815) *
              C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C89 * C114 - C100 * C108 + C90 * C116 - C102 * C109 + C91 * C118 -
            C104 * C110 + C92 * C120 - C106 * C111) *
               C265 +
           (C89 * C573 - C100 * C567 + C90 * C574 - C102 * C568 + C91 * C575 -
            C104 * C569 + C92 * C576 - C106 * C570) *
               C139835) *
              C139824 * C139809 * C2904 +
          ((C100 * C813 - C89 * C821 + C102 * C812 - C90 * C819 + C104 * C811 -
            C91 * C817 + C106 * C810 - C92 * C815) *
               C265 +
           (C100 * C1317 - C89 * C1322 + C102 * C1318 - C90 * C1323 +
            C104 * C1319 - C91 * C1324 + C106 * C1320 - C92 * C1325) *
               C139835) *
              C139824 * C139809 * C2905 +
          ((C89 * C2912 - C100 * C2908 + C90 * C2914 - C102 * C2909 +
            C91 * C2916 - C104 * C2910 + C92 * C2918 - C106 * C2911) *
               C265 +
           (C89 * C3260 - C100 * C3256 + C90 * C3261 - C102 * C3257 +
            C91 * C3262 - C104 * C3258 + C92 * C3263 - C106 * C3259) *
               C139835) *
              C139824 * C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C5811 * C114 - C5816 * C108 + C139736 * C116 - C5818 * C109) *
               C14015 +
           (C5811 * C573 - C5816 * C567 + C139736 * C574 - C5818 * C568) *
               C13856 +
           (C16035 - C16036 + C16037 - C16038) * C14016 +
           (C16408 - C16409 + C16410 - C16411) * C13857 +
           (C16043 - C16044 + C16045 - C16046) * C14017 +
           (C16412 - C16413 + C16414 - C16415) * C13858) *
              C139824 * C139809 * C2904 +
          ((C7040 - C7039 + C7042 - C7041) * C14015 +
           (C7409 - C7408 + C7411 - C7410) * C13856 +
           (C10745 - C10746 + C10747 - C10748) * C14016 +
           (C11067 - C11068 + C11069 - C11070) * C13857 +
           (C5816 * C13126 - C5811 * C13130 + C5818 * C13127 -
            C139736 * C13132) *
               C14017 +
           (C5816 * C13618 - C5811 * C13622 + C5818 * C13619 -
            C139736 * C13623) *
               C13858) *
              C139824 * C139809 * C2905 +
          (C9893 * C14015 + C10135 * C13856 +
           (C10754 - C10753 + C10756 - C10755) * C14016 +
           (C11072 - C11071 + C11074 - C11073) * C13857 +
           (C5811 * C13134 - C5816 * C13128 + C139736 * C13136 -
            C5818 * C13129) *
               C14017 +
           (C5811 * C13624 - C5816 * C13620 + C139736 * C13625 -
            C5818 * C13621) *
               C13858) *
              C139824 * C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eezy[22] +=
        (-std::pow(Pi, 2.5) *
         ((((C5813 * C183 - C5894 * C108 + C5814 * C896 - C5895 * C813 +
             C5815 * C2974 - C5896 * C2908) *
                C265 +
            (C5813 * C629 - C5894 * C567 + C5814 * C1393 - C5895 * C1317 +
             C5815 * C3314 - C5896 * C3256) *
                C139835) *
               C5811 +
           ((C5898 - C5899 + C5900 - C5901 + C5902 - C5903) * C265 +
            (C6423 - C6424 + C6425 - C6426 + C6427 - C6428) * C139835) *
               C139736) *
              C139809 * C2904 +
          (((C5894 * C813 - C5813 * C896 + C5895 * C2908 - C5814 * C2974 +
             C5896 * C6627 - C5815 * C6792) *
                C265 +
            (C5894 * C1317 - C5813 * C1393 + C5895 * C3256 - C5814 * C3314 +
             C5896 * C7401 - C5815 * C7521) *
                C139835) *
               C5811 +
           ((C6799 - C6800 + C6801 - C6802 + C6803 - C6804) * C265 +
            (C7525 - C7526 + C7527 - C7528 + C7529 - C7530) * C139835) *
               C139736) *
              C139809 * C2905 +
          (((C5813 * C2974 - C5894 * C2908 + C5814 * C6792 - C5895 * C6627 +
             C5815 * C9707 - C5896 * C9609) *
                C265 +
            (C5813 * C3314 - C5894 * C3256 + C5814 * C7521 - C5895 * C7401 +
             C5815 * C10211 - C5896 * C10123) *
                C139835) *
               C5811 +
           ((C5813 * C2975 - C5894 * C2909 + C5814 * C6793 - C5895 * C6626 +
             C5815 * C9708 - C5896 * C9610) *
                C265 +
            (C5813 * C3315 - C5894 * C3257 + C5814 * C7522 - C5895 * C7402 +
             C5815 * C10212 - C5896 * C10124) *
                C139835) *
               C139736) *
              C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C139824 * C183 - C182 * C108) * C265 +
            (C139824 * C629 - C182 * C567) * C139835) *
               C89 +
           ((C196 - C197) * C265 + (C636 - C637) * C139835) * C90 + C650 * C91 +
           C651 * C92) *
              C139809 * C2904 +
          (((C182 * C813 - C139824 * C896) * C265 +
            (C182 * C1317 - C139824 * C1393) * C139835) *
               C89 +
           ((C907 - C908) * C265 + (C1399 - C1400) * C139835) * C90 +
           ((C911 - C912) * C265 + (C1401 - C1402) * C139835) * C91 +
           ((C915 - C916) * C265 + (C1403 - C1404) * C139835) * C92) *
              C139809 * C2905 +
          (((C139824 * C2974 - C182 * C2908) * C265 +
            (C139824 * C3314 - C182 * C3256) * C139835) *
               C89 +
           ((C139824 * C2975 - C182 * C2909) * C265 +
            (C139824 * C3315 - C182 * C3257) * C139835) *
               C90 +
           ((C139824 * C2976 - C182 * C2910) * C265 +
            (C139824 * C3316 - C182 * C3258) * C139835) *
               C91 +
           ((C139824 * C2977 - C182 * C2911) * C265 +
            (C139824 * C3317 - C182 * C3259) * C139835) *
               C92) *
              C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C139824 * C183 - C182 * C108) * C14015 +
            (C139824 * C629 - C182 * C567) * C13856 +
            (C15795 - C15796) * C14016 + (C16525 - C16526) * C13857 +
            (C15801 - C15802) * C14017 + (C16527 - C16528) * C13858) *
               C5811 +
           ((C196 - C197) * C14015 + (C636 - C637) * C13856 + C15799 * C14016 +
            C16529 * C13857 + C15805 * C14017 + C16530 * C13858) *
               C139736) *
              C139809 * C2904 +
          (((C182 * C813 - C139824 * C896) * C14015 +
            (C182 * C1317 - C139824 * C1393) * C13856 +
            (C182 * C3438 - C139824 * C3520) * C14016 +
            (C182 * C3882 - C139824 * C3956) * C13857 +
            (C182 * C13126 - C139824 * C13216) * C14017 +
            (C182 * C13618 - C139824 * C13700) * C13858) *
               C5811 +
           ((C907 - C908) * C14015 + (C1399 - C1400) * C13856 +
            (C14764 - C14765) * C14016 + (C15401 - C15402) * C13857 +
            (C14768 - C14769) * C14017 + (C15403 - C15404) * C13858) *
               C139736) *
              C139809 * C2905 +
          (((C139824 * C2974 - C182 * C2908) * C14015 +
            (C139824 * C3314 - C182 * C3256) * C13856 +
            (C139824 * C7863 - C182 * C7754) * C14016 +
            (C139824 * C8526 - C182 * C8422) * C13857 +
            (C139824 * C13217 - C182 * C13128) * C14017 +
            (C139824 * C13701 - C182 * C13620) * C13858) *
               C5811 +
           ((C139824 * C2975 - C182 * C2909) * C14015 +
            (C139824 * C3315 - C182 * C3257) * C13856 +
            (C139824 * C7864 - C182 * C7753) * C14016 +
            (C139824 * C8527 - C182 * C8423) * C13857 +
            (C139824 * C13219 - C182 * C13129) * C14017 +
            (C139824 * C13703 - C182 * C13621) * C13858) *
               C139736) *
              C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eezz[22] +=
        (-std::pow(Pi, 2.5) *
         ((((C265 * C266 - C701 * C108 - C265 * C567 + C139835 * C702) * C5813 +
            C7652 * C5814 + C7653 * C5815) *
               C5811 +
           (C6509 + C6510 + C6527) * C139736) *
              C139809 * C2904 -
          ((C7655 + C7644 + C7645) * C139736 +
           (C10296 * C5815 + C7653 * C5814 + C7652 * C5813) * C5811) *
              C139809 * C2905 +
          ((C7653 * C5813 + C10296 * C5814 +
            (C265 * C9785 - C701 * C9609 - C265 * C10123 + C139835 * C10287) *
                C5815) *
               C5811 +
           (C6525 * C5813 + C7654 * C5814 +
            (C265 * C9786 - C701 * C9610 - C265 * C10124 + C139835 * C10288) *
                C5815) *
               C139736) *
              C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C265 * C266 - C701 * C108 - C265 * C567 + C139835 * C702) *
               C139824 * C89 +
           C737 * C90 + C738 * C91 + C739 * C92) *
              C139809 * C2904 -
          (C1497 * C92 + C1498 * C91 + C1499 * C90 +
           (C265 * C984 - C701 * C813 - C265 * C1317 + C139835 * C1473) *
               C139824 * C89) *
              C139809 * C2905 +
          ((C265 * C3032 - C701 * C2908 - C265 * C3256 + C139835 * C3368) *
               C139824 * C89 +
           (C265 * C3033 - C701 * C2909 - C265 * C3257 + C139835 * C3369) *
               C139824 * C90 +
           (C265 * C3034 - C701 * C2910 - C265 * C3258 + C139835 * C3370) *
               C139824 * C91 +
           (C265 * C3035 - C701 * C2911 - C265 * C3259 + C139835 * C3371) *
               C139824 * C92) *
              C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C14015 * C266 - C14516 * C108 - C14015 * C567 + C13856 * C702 +
            C14016 * C1741 - C14517 * C1570 - C14016 * C2074 + C13857 * C2230 +
            C14017 * C5397 - C14518 * C5273 - C14017 * C5621 + C13858 * C5733) *
               C139824 * C5811 +
           (C14556 + C14557 + C14558) * C139824 * C139736) *
              C139809 * C2904 -
          ((C15522 + C15523 + C15524) * C139824 * C139736 +
           (C14017 * C13298 - C14518 * C13126 - C14017 * C13618 +
            C13858 * C13778 + C14016 * C3594 - C14517 * C3438 - C14016 * C3882 +
            C13857 * C4026 + C14015 * C984 - C14516 * C813 - C14015 * C1317 +
            C13856 * C1473) *
               C139824 * C5811) *
              C139809 * C2905 +
          ((C14015 * C3032 - C14516 * C2908 - C14015 * C3256 + C13856 * C3368 +
            C14016 * C7979 - C14517 * C7754 - C14016 * C8422 + C13857 * C8634 +
            C14017 * C13300 - C14518 * C13128 - C14017 * C13620 +
            C13858 * C13779) *
               C139824 * C5811 +
           (C14015 * C3033 - C14516 * C2909 - C14015 * C3257 + C13856 * C3369 +
            C14016 * C7980 - C14517 * C7753 - C14016 * C8423 + C13857 * C8633 +
            C14017 * C13301 - C14518 * C13129 - C14017 * C13621 +
            C13858 * C13781) *
               C139824 * C139736) *
              C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eexx[23] +=
        (-std::pow(Pi, 2.5) *
         ((((C5816 * C114 - C5817 * C108 - C5816 * C115 + C5811 * C126 +
             C5818 * C116 - C5819 * C109 - C5818 * C117 + C139736 * C127) *
                C139835 * C5813 +
            (C6687 + C6688) * C139835 * C5814 + C9627 * C5815) *
               C1565 -
           ((C10427 + C10428) * C139835 * C5815 +
            (C10429 + C10430) * C139835 * C5814 +
            (C5818 * C1576 - C5819 * C1569 - C5818 * C1577 + C139736 * C1584 +
             C5816 * C1578 - C5817 * C1570 - C5816 * C1579 + C5811 * C1585) *
                C139835 * C5813) *
               C140002) *
              C2322 +
          (((C10430 + C10429) * C139835 * C5813 +
            (C10428 + C10427) * C139835 * C5814 +
            (C5816 * C10396 - C5817 * C10394 - C5816 * C10397 + C5811 * C10400 +
             C5818 * C10398 - C5819 * C10395 - C5818 * C10399 +
             C139736 * C10401) *
                C139835 * C5815) *
               C140002 -
           ((C9632 + C9633) * C139835 * C5815 +
            (C6690 + C6689) * C139835 * C5814 +
            (C6688 + C6687) * C139835 * C5813) *
               C1565) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C100 * C114 - C101 * C108 - C100 * C115 + C89 * C126 + C102 * C116 -
            C103 * C109 - C102 * C117 + C90 * C127 + C104 * C118 - C105 * C110 -
            C104 * C119 + C91 * C128 + C106 * C120 - C107 * C111 - C106 * C121 +
            C92 * C129) *
               C139835 * C139824 * C1565 -
           (C106 * C1572 - C107 * C1567 - C106 * C1573 + C92 * C1582 +
            C104 * C1574 - C105 * C1568 - C104 * C1575 + C91 * C1583 +
            C102 * C1576 - C103 * C1569 - C102 * C1577 + C90 * C1584 +
            C100 * C1578 - C101 * C1570 - C100 * C1579 + C89 * C1585) *
               C139835 * C139824 * C140002) *
              C2322 +
          ((C100 * C3442 - C101 * C3438 - C100 * C3443 + C89 * C3450 +
            C102 * C3444 - C103 * C3439 - C102 * C3445 + C90 * C3451 +
            C104 * C3446 - C105 * C3440 - C104 * C3447 + C91 * C3452 +
            C106 * C3448 - C107 * C3441 - C106 * C3449 + C92 * C3453) *
               C139835 * C139824 * C140002 -
           (C106 * C815 - C107 * C810 - C106 * C816 + C92 * C825 + C104 * C817 -
            C105 * C811 - C104 * C818 + C91 * C826 + C102 * C819 - C103 * C812 -
            C102 * C820 + C90 * C827 + C100 * C821 - C101 * C813 - C100 * C822 +
            C89 * C828) *
               C139835 * C139824 * C1565) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C5816 * C114 - C5817 * C108 - C5816 * C115 + C5811 * C126 +
             C5818 * C116 - C5819 * C109 - C5818 * C117 + C139736 * C127) *
                C13856 +
            (C15683 + C15684) * C13857 + (C15685 + C15686) * C13858) *
               C139824 * C1565 -
           ((C5818 * C15625 - C5819 * C15622 - C5818 * C15626 +
             C139736 * C15631 + C5816 * C15627 - C5817 * C15623 -
             C5816 * C15628 + C5811 * C15632) *
                C13858 +
            (C15686 + C15685) * C13857 + (C15684 + C15683) * C13856) *
               C139824 * C140002) *
              C2322 +
          (((C10430 + C10429) * C13856 + (C18323 + C18324) * C13857 +
            (C5816 * C18304 - C5817 * C18302 - C5816 * C18305 + C5811 * C18308 +
             C5818 * C18306 - C5819 * C18303 - C5818 * C18307 +
             C139736 * C18309) *
                C13858) *
               C139824 * C140002 -
           ((C18324 + C18323) * C13858 + (C10429 + C10430) * C13857 +
            (C6688 + C6687) * C13856) *
               C139824 * C1565) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eexy[23] +=
        (-std::pow(Pi, 2.5) *
         ((((C5813 * C183 - C5894 * C108 + C5814 * C896 - C5895 * C813 +
             C5815 * C2974 - C5896 * C2908) *
                C5816 +
            (C5813 * C189 - C5894 * C115 + C5814 * C901 - C5895 * C822 +
             C5815 * C2978 - C5896 * C2913) *
                C5811 +
            (C5898 - C5899 + C5900 - C5901 + C5902 - C5903) * C5818 +
            (C5904 - C5905 + C5906 - C5907 + C5908 - C5909) * C139736) *
               C139835 * C1565 +
           ((C5894 * C1570 - C5813 * C1653 + C5895 * C3438 - C5814 * C3520 +
             C5896 * C7754 - C5815 * C7863) *
                C5816 +
            (C5894 * C1579 - C5813 * C1658 + C5895 * C3443 - C5814 * C3524 +
             C5896 * C7759 - C5815 * C7866) *
                C5811 +
            (C7870 - C7871 + C7872 - C7873 + C7874 - C7875) * C5818 +
            (C7876 - C7877 + C7878 - C7879 + C7880 - C7881) * C139736) *
               C139835 * C140002) *
              C2322 +
          (((C5894 * C813 - C5813 * C896 + C5895 * C2908 - C5814 * C2974 +
             C5896 * C6627 - C5815 * C6792) *
                C5816 +
            (C5894 * C822 - C5813 * C901 + C5895 * C2913 - C5814 * C2978 +
             C5896 * C6632 - C5815 * C6795) *
                C5811 +
            (C6799 - C6800 + C6801 - C6802 + C6803 - C6804) * C5818 +
            (C6805 - C6806 + C6807 - C6808 + C6809 - C6810) * C139736) *
               C139835 * C1565 +
           ((C5813 * C3520 - C5894 * C3438 + C5814 * C7863 - C5895 * C7754 +
             C5815 * C10528 - C5896 * C10394) *
                C5816 +
            (C5813 * C3524 - C5894 * C3443 + C5814 * C7866 - C5895 * C7759 +
             C5815 * C10530 - C5896 * C10397) *
                C5811 +
            (C5813 * C3521 - C5894 * C3439 + C5814 * C7864 - C5895 * C7753 +
             C5815 * C10529 - C5896 * C10395) *
                C5818 +
            (C5813 * C3525 - C5894 * C3445 + C5814 * C7867 - C5895 * C7757 +
             C5815 * C10531 - C5896 * C10399) *
                C139736) *
               C139835 * C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C139824 * C183 - C182 * C108) * C100 +
            (C139824 * C189 - C182 * C115) * C89 + (C196 - C197) * C102 +
            (C198 - C199) * C90 + C212 * C104 + C213 * C91 + C214 * C106 +
            C215 * C92) *
               C139835 * C1565 +
           ((C182 * C1570 - C139824 * C1653) * C100 +
            (C182 * C1579 - C139824 * C1658) * C89 + (C1664 - C1665) * C102 +
            (C1666 - C1667) * C90 + (C1668 - C1669) * C104 +
            (C1670 - C1671) * C91 + (C1672 - C1673) * C106 +
            (C1674 - C1675) * C92) *
               C139835 * C140002) *
              C2322 +
          (((C182 * C813 - C139824 * C896) * C100 +
            (C182 * C822 - C139824 * C901) * C89 + (C907 - C908) * C102 +
            (C909 - C910) * C90 + (C911 - C912) * C104 + (C913 - C914) * C91 +
            (C915 - C916) * C106 + (C917 - C918) * C92) *
               C139835 * C1565 +
           ((C139824 * C3520 - C182 * C3438) * C100 +
            (C139824 * C3524 - C182 * C3443) * C89 +
            (C139824 * C3521 - C182 * C3439) * C102 +
            (C139824 * C3525 - C182 * C3445) * C90 +
            (C139824 * C3522 - C182 * C3440) * C104 +
            (C139824 * C3526 - C182 * C3447) * C91 +
            (C139824 * C3523 - C182 * C3441) * C106 +
            (C139824 * C3527 - C182 * C3449) * C92) *
               C139835 * C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C139824 * C183 - C182 * C108) * C5816 +
             (C139824 * C189 - C182 * C115) * C5811 + (C196 - C197) * C5818 +
             (C198 - C199) * C139736) *
                C13856 +
            ((C15795 - C15796) * C5816 + (C15797 - C15798) * C5811 +
             C15799 * C5818 + C15800 * C139736) *
                C13857 +
            ((C15801 - C15802) * C5816 + (C15803 - C15804) * C5811 +
             C15805 * C5818 + C15806 * C139736) *
                C13858) *
               C1565 +
           (((C15796 - C15795) * C5816 + (C15798 - C15797) * C5811 +
             C15807 * C5818 + C15808 * C139736) *
                C13856 +
            ((C15802 - C15801) * C5816 + (C15804 - C15803) * C5811 +
             C15809 * C5818 + C15810 * C139736) *
                C13857 +
            ((C182 * C15623 - C139824 * C15788) * C5816 +
             (C182 * C15628 - C139824 * C15791) * C5811 +
             (C15811 - C15812) * C5818 + (C15813 - C15814) * C139736) *
                C13858) *
               C140002) *
              C2322 +
          ((((C182 * C813 - C139824 * C896) * C5816 +
             (C182 * C822 - C139824 * C901) * C5811 + (C907 - C908) * C5818 +
             (C909 - C910) * C139736) *
                C13856 +
            ((C18427 - C18428) * C5816 + (C18429 - C18430) * C5811 +
             (C14764 - C14765) * C5818 + (C14766 - C14767) * C139736) *
                C13857 +
            ((C18431 - C18432) * C5816 + (C18433 - C18434) * C5811 +
             (C14768 - C14769) * C5818 + (C14770 - C14771) * C139736) *
                C13858) *
               C1565 +
           (((C18428 - C18427) * C5816 + (C18430 - C18429) * C5811 +
             (C14765 - C14764) * C5818 + (C14767 - C14766) * C139736) *
                C13856 +
            ((C18432 - C18431) * C5816 + (C18434 - C18433) * C5811 +
             (C14769 - C14768) * C5818 + (C14771 - C14770) * C139736) *
                C13857 +
            ((C139824 * C18422 - C182 * C18302) * C5816 +
             (C139824 * C18424 - C182 * C18305) * C5811 +
             (C139824 * C18423 - C182 * C18303) * C5818 +
             (C139824 * C18425 - C182 * C18307) * C139736) *
                C13858) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eexz[23] +=
        (-std::pow(Pi, 2.5) *
         (((((C139835 * C266 - C265 * C108) * C5816 +
             (C139835 * C272 - C265 * C115) * C5811 + (C279 - C280) * C5818 +
             (C281 - C282) * C139736) *
                C5813 +
            ((C6915 - C6916) * C5816 + (C6917 - C6918) * C5811 + C6919 * C5818 +
             C6920 * C139736) *
                C5814 +
            C9802 * C5815) *
               C1565 +
           (((C265 * C1570 - C139835 * C1741) * C5816 +
             (C265 * C1579 - C139835 * C1746) * C5811 +
             (C1752 - C1753) * C5818 + (C1754 - C1755) * C139736) *
                C5813 +
            ((C10635 - C10636) * C5816 + (C10637 - C10638) * C5811 +
             (C7986 - C7987) * C5818 + (C7988 - C7989) * C139736) *
                C5814 +
            ((C10639 - C10640) * C5816 + (C10641 - C10642) * C5811 +
             (C7990 - C7991) * C5818 + (C7992 - C7993) * C139736) *
                C5815) *
               C140002) *
              C2322 +
          ((((C6916 - C6915) * C5816 + (C6918 - C6917) * C5811 + C6927 * C5818 +
             C6928 * C139736) *
                C5813 +
            ((C6922 - C6921) * C5816 + (C6924 - C6923) * C5811 + C6929 * C5818 +
             C6930 * C139736) *
                C5814 +
            ((C9794 - C9795) * C5816 + (C9796 - C9797) * C5811 +
             (C6931 - C6932) * C5818 + (C6933 - C6934) * C139736) *
                C5815) *
               C1565 +
           (((C10636 - C10635) * C5816 + (C10638 - C10637) * C5811 +
             (C7987 - C7986) * C5818 + (C7989 - C7988) * C139736) *
                C5813 +
            ((C10640 - C10639) * C5816 + (C10642 - C10641) * C5811 +
             (C7991 - C7990) * C5818 + (C7993 - C7992) * C139736) *
                C5814 +
            ((C139835 * C10630 - C265 * C10394) * C5816 +
             (C139835 * C10632 - C265 * C10397) * C5811 +
             (C139835 * C10631 - C265 * C10395) * C5818 +
             (C139835 * C10633 - C265 * C10399) * C139736) *
                C5815) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C139835 * C266 - C265 * C108) * C100 +
            (C139835 * C272 - C265 * C115) * C89 + (C279 - C280) * C102 +
            (C281 - C282) * C90 + C295 * C104 + C296 * C91 + C297 * C106 +
            C298 * C92) *
               C139824 * C1565 +
           ((C265 * C1570 - C139835 * C1741) * C100 +
            (C265 * C1579 - C139835 * C1746) * C89 + (C1752 - C1753) * C102 +
            (C1754 - C1755) * C90 + (C1756 - C1757) * C104 +
            (C1758 - C1759) * C91 + (C1760 - C1761) * C106 +
            (C1762 - C1763) * C92) *
               C139824 * C140002) *
              C2322 +
          (((C265 * C813 - C139835 * C984) * C100 +
            (C265 * C822 - C139835 * C989) * C89 + (C995 - C996) * C102 +
            (C997 - C998) * C90 + (C999 - C1000) * C104 +
            (C1001 - C1002) * C91 + (C1003 - C1004) * C106 +
            (C1005 - C1006) * C92) *
               C139824 * C1565 +
           ((C139835 * C3594 - C265 * C3438) * C100 +
            (C139835 * C3598 - C265 * C3443) * C89 +
            (C139835 * C3595 - C265 * C3439) * C102 +
            (C139835 * C3599 - C265 * C3445) * C90 +
            (C139835 * C3596 - C265 * C3440) * C104 +
            (C139835 * C3600 - C265 * C3447) * C91 +
            (C139835 * C3597 - C265 * C3441) * C106 +
            (C139835 * C3601 - C265 * C3449) * C92) *
               C139824 * C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C13856 * C266 - C14015 * C108 + C13857 * C1741 - C14016 * C1570 +
             C13858 * C5397 - C14017 * C5273) *
                C5816 +
            (C13856 * C272 - C14015 * C115 + C13857 * C1746 - C14016 * C1579 +
             C13858 * C5401 - C14017 * C5278) *
                C5811 +
            (C14019 - C14020 + C14021 - C14022 + C14023 - C14024) * C5818 +
            (C14025 - C14026 + C14027 - C14028 + C14029 - C14030) * C139736) *
               C139824 * C1565 +
           ((C14015 * C1570 - C13856 * C1741 + C14016 * C5273 - C13857 * C5397 +
             C14017 * C15623 - C13858 * C15912) *
                C5816 +
            (C14015 * C1579 - C13856 * C1746 + C14016 * C5278 - C13857 * C5401 +
             C14017 * C15628 - C13858 * C15915) *
                C5811 +
            (C15919 - C15920 + C15921 - C15922 + C15923 - C15924) * C5818 +
            (C15925 - C15926 + C15927 - C15928 + C15929 - C15930) * C139736) *
               C139824 * C140002) *
              C2322 +
          (((C14015 * C813 - C13856 * C984 + C14016 * C3438 - C13857 * C3594 +
             C14017 * C13126 - C13858 * C13298) *
                C5816 +
            (C14015 * C822 - C13856 * C989 + C14016 * C3443 - C13857 * C3598 +
             C14017 * C13131 - C13858 * C13302) *
                C5811 +
            (C14872 - C14873 + C14874 - C14875 + C14876 - C14877) * C5818 +
            (C14878 - C14879 + C14880 - C14881 + C14882 - C14883) * C139736) *
               C139824 * C1565 +
           ((C13856 * C3594 - C14015 * C3438 + C13857 * C13298 -
             C14016 * C13126 + C13858 * C18532 - C14017 * C18302) *
                C5816 +
            (C13856 * C3598 - C14015 * C3443 + C13857 * C13302 -
             C14016 * C13131 + C13858 * C18534 - C14017 * C18305) *
                C5811 +
            (C13856 * C3595 - C14015 * C3439 + C13857 * C13299 -
             C14016 * C13127 + C13858 * C18533 - C14017 * C18303) *
                C5818 +
            (C13856 * C3599 - C14015 * C3445 + C13857 * C13303 -
             C14016 * C13133 + C13858 * C18535 - C14017 * C18307) *
                C139736) *
               C139824 * C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eeyx[23] +=
        (-std::pow(Pi, 2.5) *
         ((((C5811 * C114 - C5816 * C108 + C139736 * C116 - C5818 * C109) *
                C5894 +
            (C5811 * C354 - C5816 * C348 + C139736 * C355 - C5818 * C349) *
                C5813 +
            (C7039 - C7040 + C7041 - C7042) * C5895 +
            (C7043 - C7044 + C7045 - C7046) * C5814 + C9893 * C5896 +
            C9894 * C5815) *
               C139835 * C1565 +
           ((C5816 * C1570 - C5811 * C1578 + C5818 * C1569 - C139736 * C1576) *
                C5894 +
            (C5816 * C1829 - C5811 * C1834 + C5818 * C1830 - C139736 * C1835) *
                C5813 +
            (C10745 - C10746 + C10747 - C10748) * C5895 +
            (C10749 - C10750 + C10751 - C10752) * C5814 +
            (C10753 - C10754 + C10755 - C10756) * C5896 +
            (C10757 - C10758 + C10759 - C10760) * C5815) *
               C139835 * C140002) *
              C2322 +
          (((C7040 - C7039 + C7042 - C7041) * C5894 +
            (C7044 - C7043 + C7046 - C7045) * C5813 +
            (C7048 - C7047 + C7050 - C7049) * C5895 +
            (C7052 - C7051 + C7054 - C7053) * C5814 +
            (C9885 - C9886 + C9887 - C9888) * C5896 +
            (C9889 - C9890 + C9891 - C9892) * C5815) *
               C139835 * C1565 +
           ((C10746 - C10745 + C10748 - C10747) * C5894 +
            (C10750 - C10749 + C10752 - C10751) * C5813 +
            (C10754 - C10753 + C10756 - C10755) * C5895 +
            (C10758 - C10757 + C10760 - C10759) * C5814 +
            (C5811 * C10396 - C5816 * C10394 + C139736 * C10398 -
             C5818 * C10395) *
                C5896 +
            (C5811 * C10742 - C5816 * C10740 + C139736 * C10743 -
             C5818 * C10741) *
                C5815) *
               C139835 * C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C89 * C114 - C100 * C108 + C90 * C116 - C102 * C109 + C91 * C118 -
             C104 * C110 + C92 * C120 - C106 * C111) *
                C182 +
            (C89 * C354 - C100 * C348 + C90 * C355 - C102 * C349 + C91 * C356 -
             C104 * C350 + C92 * C357 - C106 * C351) *
                C139824) *
               C139835 * C1565 +
           ((C100 * C1570 - C89 * C1578 + C102 * C1569 - C90 * C1576 +
             C104 * C1568 - C91 * C1574 + C106 * C1567 - C92 * C1572) *
                C182 +
            (C100 * C1829 - C89 * C1834 + C102 * C1830 - C90 * C1835 +
             C104 * C1831 - C91 * C1836 + C106 * C1832 - C92 * C1837) *
                C139824) *
               C139835 * C140002) *
              C2322 +
          (((C100 * C813 - C89 * C821 + C102 * C812 - C90 * C819 + C104 * C811 -
             C91 * C817 + C106 * C810 - C92 * C815) *
                C182 +
            (C100 * C1072 - C89 * C1077 + C102 * C1073 - C90 * C1078 +
             C104 * C1074 - C91 * C1079 + C106 * C1075 - C92 * C1080) *
                C139824) *
               C139835 * C1565 +
           ((C89 * C3442 - C100 * C3438 + C90 * C3444 - C102 * C3439 +
             C91 * C3446 - C104 * C3440 + C92 * C3448 - C106 * C3441) *
                C182 +
            (C89 * C3672 - C100 * C3668 + C90 * C3673 - C102 * C3669 +
             C91 * C3674 - C104 * C3670 + C92 * C3675 - C106 * C3671) *
                C139824) *
               C139835 * C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C5811 * C114 - C5816 * C108 + C139736 * C116 - C5818 * C109) *
                 C182 +
             (C5811 * C354 - C5816 * C348 + C139736 * C355 - C5818 * C349) *
                 C139824) *
                C13856 +
            ((C16035 - C16036 + C16037 - C16038) * C182 +
             (C16039 - C16040 + C16041 - C16042) * C139824) *
                C13857 +
            ((C16043 - C16044 + C16045 - C16046) * C182 +
             (C16047 - C16048 + C16049 - C16050) * C139824) *
                C13858) *
               C1565 +
           (((C16036 - C16035 + C16038 - C16037) * C182 +
             (C16040 - C16039 + C16042 - C16041) * C139824) *
                C13856 +
            ((C16044 - C16043 + C16046 - C16045) * C182 +
             (C16048 - C16047 + C16050 - C16049) * C139824) *
                C13857 +
            ((C5816 * C15623 - C5811 * C15627 + C5818 * C15622 -
              C139736 * C15625) *
                 C182 +
             (C5816 * C16028 - C5811 * C16031 + C5818 * C16029 -
              C139736 * C16032) *
                 C139824) *
                C13858) *
               C140002) *
              C2322 +
          ((((C7040 - C7039 + C7042 - C7041) * C182 +
             (C7044 - C7043 + C7046 - C7045) * C139824) *
                C13856 +
            ((C10745 - C10746 + C10747 - C10748) * C182 +
             (C10749 - C10750 + C10751 - C10752) * C139824) *
                C13857 +
            ((C18639 - C18640 + C18641 - C18642) * C182 +
             (C18643 - C18644 + C18645 - C18646) * C139824) *
                C13858) *
               C1565 +
           (((C10746 - C10745 + C10748 - C10747) * C182 +
             (C10750 - C10749 + C10752 - C10751) * C139824) *
                C13856 +
            ((C18640 - C18639 + C18642 - C18641) * C182 +
             (C18644 - C18643 + C18646 - C18645) * C139824) *
                C13857 +
            ((C5811 * C18304 - C5816 * C18302 + C139736 * C18306 -
              C5818 * C18303) *
                 C182 +
             (C5811 * C18636 - C5816 * C18634 + C139736 * C18637 -
              C5818 * C18635) *
                 C139824) *
                C13858) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eeyy[23] +=
        (-std::pow(Pi, 2.5) *
         ((((C5894 * C183 - C6151 * C108 - C5894 * C348 + C5813 * C411 +
             C5895 * C896 - C6152 * C813 - C5895 * C1072 + C5814 * C1151 +
             C5896 * C2974 - C6153 * C2908 - C5896 * C3090 + C5815 * C3148) *
                C5811 +
            (C6191 + C6192 + C6193) * C139736) *
               C139835 * C1565 -
           ((C8217 + C8218 + C8219) * C139736 +
            (C5896 * C7863 - C6153 * C7754 - C5896 * C8091 + C5815 * C8196 +
             C5895 * C3520 - C6152 * C3438 - C5895 * C3668 + C5814 * C3742 +
             C5894 * C1653 - C6151 * C1570 - C5894 * C1829 + C5813 * C1908) *
                C5811) *
               C139835 * C140002) *
              C2322 +
          (((C5894 * C3520 - C6151 * C3438 - C5894 * C3668 + C5813 * C3742 +
             C5895 * C7863 - C6152 * C7754 - C5895 * C8091 + C5814 * C8196 +
             C5896 * C10528 - C6153 * C10394 - C5896 * C10740 +
             C5815 * C10858) *
                C5811 +
            (C5894 * C3521 - C6151 * C3439 - C5894 * C3669 + C5813 * C3743 +
             C5895 * C7864 - C6152 * C7753 - C5895 * C8092 + C5814 * C8195 +
             C5896 * C10529 - C6153 * C10395 - C5896 * C10741 +
             C5815 * C10859) *
                C139736) *
               C139835 * C140002 -
           ((C7190 + C7191 + C7192) * C139736 +
            (C5896 * C6792 - C6153 * C6627 - C5896 * C7032 + C5815 * C7169 +
             C5895 * C2974 - C6152 * C2908 - C5895 * C3090 + C5814 * C3148 +
             C5894 * C896 - C6151 * C813 - C5894 * C1072 + C5813 * C1151) *
                C5811) *
               C139835 * C1565) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C182 * C183 - C410 * C108 - C182 * C348 + C139824 * C411) * C89 +
            C442 * C90 + C443 * C91 + C444 * C92) *
               C139835 * C1565 -
           (C1929 * C92 + C1930 * C91 + C1931 * C90 +
            (C182 * C1653 - C410 * C1570 - C182 * C1829 + C139824 * C1908) *
                C89) *
               C139835 * C140002) *
              C2322 +
          (((C182 * C3520 - C410 * C3438 - C182 * C3668 + C139824 * C3742) *
                C89 +
            (C182 * C3521 - C410 * C3439 - C182 * C3669 + C139824 * C3743) *
                C90 +
            (C182 * C3522 - C410 * C3440 - C182 * C3670 + C139824 * C3744) *
                C91 +
            (C182 * C3523 - C410 * C3441 - C182 * C3671 + C139824 * C3745) *
                C92) *
               C139835 * C140002 -
           (C1172 * C92 + C1173 * C91 + C1174 * C90 +
            (C182 * C896 - C410 * C813 - C182 * C1072 + C139824 * C1151) *
                C89) *
               C139835 * C1565) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C182 * C183 - C410 * C108 - C182 * C348 + C139824 * C411) *
                 C5811 +
             C442 * C139736) *
                C13856 +
            (C16195 + C16172) * C13857 + (C16196 + C16177) * C13858) *
               C1565 -
           ((C16194 * C139736 + (C182 * C15788 - C410 * C15623 - C182 * C16028 +
                                 C139824 * C16165) *
                                    C5811) *
                C13858 +
            (C16177 + C16196) * C13857 + (C16172 + C16195) * C13856) *
               C140002) *
              C2322 +
          (((C18763 + C18751) * C13856 + (C18764 + C18756) * C13857 +
            ((C182 * C18422 - C410 * C18302 - C182 * C18634 +
              C139824 * C18744) *
                 C5811 +
             (C182 * C18423 - C410 * C18303 - C182 * C18635 +
              C139824 * C18745) *
                 C139736) *
                C13858) *
               C140002 -
           ((C18756 + C18764) * C13858 + (C18751 + C18763) * C13857 +
            (C1174 * C139736 +
             (C182 * C896 - C410 * C813 - C182 * C1072 + C139824 * C1151) *
                 C5811) *
                C13856) *
               C1565) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eeyz[23] +=
        (-std::pow(Pi, 2.5) *
         (((((C139835 * C266 - C265 * C108) * C5894 +
             (C139835 * C495 - C265 * C348) * C5813 + (C6915 - C6916) * C5895 +
             (C7294 - C7295) * C5814 + C9790 * C5896 + C10047 * C5815) *
                C5811 +
            ((C279 - C280) * C5894 + (C502 - C503) * C5813 + C6919 * C5895 +
             C7298 * C5814 + C6925 * C5896 + C7299 * C5815) *
                C139736) *
               C1565 +
           (((C265 * C1570 - C139835 * C1741) * C5894 +
             (C265 * C1829 - C139835 * C1997) * C5813 +
             (C10635 - C10636) * C5895 + (C10961 - C10962) * C5814 +
             (C10639 - C10640) * C5896 + (C10963 - C10964) * C5815) *
                C5811 +
            ((C1752 - C1753) * C5894 + (C2003 - C2004) * C5813 +
             (C7986 - C7987) * C5895 + (C8321 - C8322) * C5814 +
             (C7990 - C7991) * C5896 + (C8323 - C8324) * C5815) *
                C139736) *
               C140002) *
              C2322 +
          ((((C6916 - C6915) * C5894 + (C7295 - C7294) * C5813 +
             (C6922 - C6921) * C5895 + (C7297 - C7296) * C5814 +
             (C9794 - C9795) * C5896 + (C10048 - C10049) * C5815) *
                C5811 +
            (C6927 * C5894 + C7300 * C5813 + C6929 * C5895 + C7301 * C5814 +
             (C6931 - C6932) * C5896 + (C7302 - C7303) * C5815) *
                C139736) *
               C1565 +
           (((C10636 - C10635) * C5894 + (C10962 - C10961) * C5813 +
             (C10640 - C10639) * C5895 + (C10964 - C10963) * C5814 +
             (C139835 * C10630 - C265 * C10394) * C5896 +
             (C139835 * C10958 - C265 * C10740) * C5815) *
                C5811 +
            ((C7987 - C7986) * C5894 + (C8322 - C8321) * C5813 +
             (C7991 - C7990) * C5895 + (C8324 - C8323) * C5814 +
             (C139835 * C10631 - C265 * C10395) * C5896 +
             (C139835 * C10959 - C265 * C10741) * C5815) *
                C139736) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C139835 * C266 - C265 * C108) * C182 +
             (C139835 * C495 - C265 * C348) * C139824) *
                C89 +
            ((C279 - C280) * C182 + (C502 - C503) * C139824) * C90 +
            C516 * C91 + C517 * C92) *
               C1565 +
           (((C265 * C1570 - C139835 * C1741) * C182 +
             (C265 * C1829 - C139835 * C1997) * C139824) *
                C89 +
            ((C1752 - C1753) * C182 + (C2003 - C2004) * C139824) * C90 +
            ((C1756 - C1757) * C182 + (C2005 - C2006) * C139824) * C91 +
            ((C1760 - C1761) * C182 + (C2007 - C2008) * C139824) * C92) *
               C140002) *
              C2322 +
          ((((C265 * C813 - C139835 * C984) * C182 +
             (C265 * C1072 - C139835 * C1240) * C139824) *
                C89 +
            ((C995 - C996) * C182 + (C1246 - C1247) * C139824) * C90 +
            ((C999 - C1000) * C182 + (C1248 - C1249) * C139824) * C91 +
            ((C1003 - C1004) * C182 + (C1250 - C1251) * C139824) * C92) *
               C1565 +
           (((C139835 * C3594 - C265 * C3438) * C182 +
             (C139835 * C3812 - C265 * C3668) * C139824) *
                C89 +
            ((C139835 * C3595 - C265 * C3439) * C182 +
             (C139835 * C3813 - C265 * C3669) * C139824) *
                C90 +
            ((C139835 * C3596 - C265 * C3440) * C182 +
             (C139835 * C3814 - C265 * C3670) * C139824) *
                C91 +
            ((C139835 * C3597 - C265 * C3441) * C182 +
             (C139835 * C3815 - C265 * C3671) * C139824) *
                C92) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C13856 * C266 - C14015 * C108 + C13857 * C1741 - C14016 * C1570 +
              C13858 * C5397 - C14017 * C5273) *
                 C182 +
             (C13856 * C495 - C14015 * C348 + C13857 * C1997 - C14016 * C1829 +
              C13858 * C5567 - C14017 * C5455) *
                 C139824) *
                C5811 +
            ((C14019 - C14020 + C14021 - C14022 + C14023 - C14024) * C182 +
             (C14279 - C14280 + C14281 - C14282 + C14283 - C14284) * C139824) *
                C139736) *
               C1565 +
           (((C14015 * C1570 - C13856 * C1741 + C14016 * C5273 -
              C13857 * C5397 + C14017 * C15623 - C13858 * C15912) *
                 C182 +
             (C14015 * C1829 - C13856 * C1997 + C14016 * C5455 -
              C13857 * C5567 + C14017 * C16028 - C13858 * C16294) *
                 C139824) *
                C5811 +
            ((C15919 - C15920 + C15921 - C15922 + C15923 - C15924) * C182 +
             (C16298 - C16299 + C16300 - C16301 + C16302 - C16303) * C139824) *
                C139736) *
               C140002) *
              C2322 +
          ((((C14015 * C813 - C13856 * C984 + C14016 * C3438 - C13857 * C3594 +
              C14017 * C13126 - C13858 * C13298) *
                 C182 +
             (C14015 * C1072 - C13856 * C1240 + C14016 * C3668 -
              C13857 * C3812 + C14017 * C13380 - C13858 * C13540) *
                 C139824) *
                C5811 +
            ((C14872 - C14873 + C14874 - C14875 + C14876 - C14877) * C182 +
             (C15196 - C15197 + C15198 - C15199 + C15200 - C15201) * C139824) *
                C139736) *
               C1565 +
           (((C13856 * C3594 - C14015 * C3438 + C13857 * C13298 -
              C14016 * C13126 + C13858 * C18532 - C14017 * C18302) *
                 C182 +
             (C13856 * C3812 - C14015 * C3668 + C13857 * C13540 -
              C14016 * C13380 + C13858 * C18862 - C14017 * C18634) *
                 C139824) *
                C5811 +
            ((C13856 * C3595 - C14015 * C3439 + C13857 * C13299 -
              C14016 * C13127 + C13858 * C18533 - C14017 * C18303) *
                 C182 +
             (C13856 * C3813 - C14015 * C3669 + C13857 * C13542 -
              C14016 * C13381 + C13858 * C18863 - C14017 * C18635) *
                 C139824) *
                C139736) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eezx[23] +=
        (-std::pow(Pi, 2.5) *
         (((((C5811 * C114 - C5816 * C108 + C139736 * C116 - C5818 * C109) *
                 C265 +
             (C5811 * C573 - C5816 * C567 + C139736 * C574 - C5818 * C568) *
                 C139835) *
                C5813 +
            ((C7039 - C7040 + C7041 - C7042) * C265 +
             (C7408 - C7409 + C7410 - C7411) * C139835) *
                C5814 +
            C10137 * C5815) *
               C1565 +
           (((C5816 * C1570 - C5811 * C1578 + C5818 * C1569 - C139736 * C1576) *
                 C265 +
             (C5816 * C2074 - C5811 * C2079 + C5818 * C2075 - C139736 * C2080) *
                 C139835) *
                C5813 +
            ((C10745 - C10746 + C10747 - C10748) * C265 +
             (C11067 - C11068 + C11069 - C11070) * C139835) *
                C5814 +
            ((C10753 - C10754 + C10755 - C10756) * C265 +
             (C11071 - C11072 + C11073 - C11074) * C139835) *
                C5815) *
               C140002) *
              C2322 +
          ((((C7040 - C7039 + C7042 - C7041) * C265 +
             (C7409 - C7408 + C7411 - C7410) * C139835) *
                C5813 +
            ((C7048 - C7047 + C7050 - C7049) * C265 +
             (C7413 - C7412 + C7415 - C7414) * C139835) *
                C5814 +
            ((C9885 - C9886 + C9887 - C9888) * C265 +
             (C10131 - C10132 + C10133 - C10134) * C139835) *
                C5815) *
               C1565 +
           (((C10746 - C10745 + C10748 - C10747) * C265 +
             (C11068 - C11067 + C11070 - C11069) * C139835) *
                C5813 +
            ((C10754 - C10753 + C10756 - C10755) * C265 +
             (C11072 - C11071 + C11074 - C11073) * C139835) *
                C5814 +
            ((C5811 * C10396 - C5816 * C10394 + C139736 * C10398 -
              C5818 * C10395) *
                 C265 +
             (C5811 * C11064 - C5816 * C11062 + C139736 * C11065 -
              C5818 * C11063) *
                 C139835) *
                C5815) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C89 * C114 - C100 * C108 + C90 * C116 - C102 * C109 + C91 * C118 -
             C104 * C110 + C92 * C120 - C106 * C111) *
                C265 +
            (C89 * C573 - C100 * C567 + C90 * C574 - C102 * C568 + C91 * C575 -
             C104 * C569 + C92 * C576 - C106 * C570) *
                C139835) *
               C139824 * C1565 +
           ((C100 * C1570 - C89 * C1578 + C102 * C1569 - C90 * C1576 +
             C104 * C1568 - C91 * C1574 + C106 * C1567 - C92 * C1572) *
                C265 +
            (C100 * C2074 - C89 * C2079 + C102 * C2075 - C90 * C2080 +
             C104 * C2076 - C91 * C2081 + C106 * C2077 - C92 * C2082) *
                C139835) *
               C139824 * C140002) *
              C2322 +
          (((C100 * C813 - C89 * C821 + C102 * C812 - C90 * C819 + C104 * C811 -
             C91 * C817 + C106 * C810 - C92 * C815) *
                C265 +
            (C100 * C1317 - C89 * C1322 + C102 * C1318 - C90 * C1323 +
             C104 * C1319 - C91 * C1324 + C106 * C1320 - C92 * C1325) *
                C139835) *
               C139824 * C1565 +
           ((C89 * C3442 - C100 * C3438 + C90 * C3444 - C102 * C3439 +
             C91 * C3446 - C104 * C3440 + C92 * C3448 - C106 * C3441) *
                C265 +
            (C89 * C3886 - C100 * C3882 + C90 * C3887 - C102 * C3883 +
             C91 * C3888 - C104 * C3884 + C92 * C3889 - C106 * C3885) *
                C139835) *
               C139824 * C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C5811 * C114 - C5816 * C108 + C139736 * C116 - C5818 * C109) *
                C14015 +
            (C5811 * C573 - C5816 * C567 + C139736 * C574 - C5818 * C568) *
                C13856 +
            (C16035 - C16036 + C16037 - C16038) * C14016 +
            (C16408 - C16409 + C16410 - C16411) * C13857 +
            (C16043 - C16044 + C16045 - C16046) * C14017 +
            (C16412 - C16413 + C16414 - C16415) * C13858) *
               C139824 * C1565 +
           ((C16036 - C16035 + C16038 - C16037) * C14015 +
            (C16409 - C16408 + C16411 - C16410) * C13856 +
            (C16044 - C16043 + C16046 - C16045) * C14016 +
            (C16413 - C16412 + C16415 - C16414) * C13857 +
            (C5816 * C15623 - C5811 * C15627 + C5818 * C15622 -
             C139736 * C15625) *
                C14017 +
            (C5816 * C16401 - C5811 * C16404 + C5818 * C16402 -
             C139736 * C16405) *
                C13858) *
               C139824 * C140002) *
              C2322 +
          (((C7040 - C7039 + C7042 - C7041) * C14015 +
            (C7409 - C7408 + C7411 - C7410) * C13856 +
            (C10745 - C10746 + C10747 - C10748) * C14016 +
            (C11067 - C11068 + C11069 - C11070) * C13857 +
            (C18639 - C18640 + C18641 - C18642) * C14017 +
            (C18967 - C18968 + C18969 - C18970) * C13858) *
               C139824 * C1565 +
           ((C10746 - C10745 + C10748 - C10747) * C14015 +
            (C11068 - C11067 + C11070 - C11069) * C13856 +
            (C18640 - C18639 + C18642 - C18641) * C14016 +
            (C18968 - C18967 + C18970 - C18969) * C13857 +
            (C5811 * C18304 - C5816 * C18302 + C139736 * C18306 -
             C5818 * C18303) *
                C14017 +
            (C5811 * C18964 - C5816 * C18962 + C139736 * C18965 -
             C5818 * C18963) *
                C13858) *
               C139824 * C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eezy[23] +=
        (-std::pow(Pi, 2.5) *
         (((((C5813 * C183 - C5894 * C108 + C5814 * C896 - C5895 * C813 +
              C5815 * C2974 - C5896 * C2908) *
                 C265 +
             (C5813 * C629 - C5894 * C567 + C5814 * C1393 - C5895 * C1317 +
              C5815 * C3314 - C5896 * C3256) *
                 C139835) *
                C5811 +
            ((C5898 - C5899 + C5900 - C5901 + C5902 - C5903) * C265 +
             (C6423 - C6424 + C6425 - C6426 + C6427 - C6428) * C139835) *
                C139736) *
               C1565 +
           (((C5894 * C1570 - C5813 * C1653 + C5895 * C3438 - C5814 * C3520 +
              C5896 * C7754 - C5815 * C7863) *
                 C265 +
             (C5894 * C2074 - C5813 * C2150 + C5895 * C3882 - C5814 * C3956 +
              C5896 * C8422 - C5815 * C8526) *
                 C139835) *
                C5811 +
            ((C7870 - C7871 + C7872 - C7873 + C7874 - C7875) * C265 +
             (C8530 - C8531 + C8532 - C8533 + C8534 - C8535) * C139835) *
                C139736) *
               C140002) *
              C2322 +
          ((((C5894 * C813 - C5813 * C896 + C5895 * C2908 - C5814 * C2974 +
              C5896 * C6627 - C5815 * C6792) *
                 C265 +
             (C5894 * C1317 - C5813 * C1393 + C5895 * C3256 - C5814 * C3314 +
              C5896 * C7401 - C5815 * C7521) *
                 C139835) *
                C5811 +
            ((C6799 - C6800 + C6801 - C6802 + C6803 - C6804) * C265 +
             (C7525 - C7526 + C7527 - C7528 + C7529 - C7530) * C139835) *
                C139736) *
               C1565 +
           (((C5813 * C3520 - C5894 * C3438 + C5814 * C7863 - C5895 * C7754 +
              C5815 * C10528 - C5896 * C10394) *
                 C265 +
             (C5813 * C3956 - C5894 * C3882 + C5814 * C8526 - C5895 * C8422 +
              C5815 * C11172 - C5896 * C11062) *
                 C139835) *
                C5811 +
            ((C5813 * C3521 - C5894 * C3439 + C5814 * C7864 - C5895 * C7753 +
              C5815 * C10529 - C5896 * C10395) *
                 C265 +
             (C5813 * C3957 - C5894 * C3883 + C5814 * C8527 - C5895 * C8423 +
              C5815 * C11173 - C5896 * C11063) *
                 C139835) *
                C139736) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C139824 * C183 - C182 * C108) * C265 +
             (C139824 * C629 - C182 * C567) * C139835) *
                C89 +
            ((C196 - C197) * C265 + (C636 - C637) * C139835) * C90 +
            C650 * C91 + C651 * C92) *
               C1565 +
           (((C182 * C1570 - C139824 * C1653) * C265 +
             (C182 * C2074 - C139824 * C2150) * C139835) *
                C89 +
            ((C1664 - C1665) * C265 + (C2156 - C2157) * C139835) * C90 +
            ((C1668 - C1669) * C265 + (C2158 - C2159) * C139835) * C91 +
            ((C1672 - C1673) * C265 + (C2160 - C2161) * C139835) * C92) *
               C140002) *
              C2322 +
          ((((C182 * C813 - C139824 * C896) * C265 +
             (C182 * C1317 - C139824 * C1393) * C139835) *
                C89 +
            ((C907 - C908) * C265 + (C1399 - C1400) * C139835) * C90 +
            ((C911 - C912) * C265 + (C1401 - C1402) * C139835) * C91 +
            ((C915 - C916) * C265 + (C1403 - C1404) * C139835) * C92) *
               C1565 +
           (((C139824 * C3520 - C182 * C3438) * C265 +
             (C139824 * C3956 - C182 * C3882) * C139835) *
                C89 +
            ((C139824 * C3521 - C182 * C3439) * C265 +
             (C139824 * C3957 - C182 * C3883) * C139835) *
                C90 +
            ((C139824 * C3522 - C182 * C3440) * C265 +
             (C139824 * C3958 - C182 * C3884) * C139835) *
                C91 +
            ((C139824 * C3523 - C182 * C3441) * C265 +
             (C139824 * C3959 - C182 * C3885) * C139835) *
                C92) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C139824 * C183 - C182 * C108) * C14015 +
             (C139824 * C629 - C182 * C567) * C13856 +
             (C15795 - C15796) * C14016 + (C16525 - C16526) * C13857 +
             (C15801 - C15802) * C14017 + (C16527 - C16528) * C13858) *
                C5811 +
            ((C196 - C197) * C14015 + (C636 - C637) * C13856 + C15799 * C14016 +
             C16529 * C13857 + C15805 * C14017 + C16530 * C13858) *
                C139736) *
               C1565 +
           (((C15796 - C15795) * C14015 + (C16526 - C16525) * C13856 +
             (C15802 - C15801) * C14016 + (C16528 - C16527) * C13857 +
             (C182 * C15623 - C139824 * C15788) * C14017 +
             (C182 * C16401 - C139824 * C16521) * C13858) *
                C5811 +
            (C15807 * C14015 + C16531 * C13856 + C15809 * C14016 +
             C16532 * C13857 + (C15811 - C15812) * C14017 +
             (C16533 - C16534) * C13858) *
                C139736) *
               C140002) *
              C2322 +
          ((((C182 * C813 - C139824 * C896) * C14015 +
             (C182 * C1317 - C139824 * C1393) * C13856 +
             (C18427 - C18428) * C14016 + (C19071 - C19072) * C13857 +
             (C18431 - C18432) * C14017 + (C19073 - C19074) * C13858) *
                C5811 +
            ((C907 - C908) * C14015 + (C1399 - C1400) * C13856 +
             (C14764 - C14765) * C14016 + (C15401 - C15402) * C13857 +
             (C14768 - C14769) * C14017 + (C15403 - C15404) * C13858) *
                C139736) *
               C1565 +
           (((C18428 - C18427) * C14015 + (C19072 - C19071) * C13856 +
             (C18432 - C18431) * C14016 + (C19074 - C19073) * C13857 +
             (C139824 * C18422 - C182 * C18302) * C14017 +
             (C139824 * C19068 - C182 * C18962) * C13858) *
                C5811 +
            ((C14765 - C14764) * C14015 + (C15402 - C15401) * C13856 +
             (C14769 - C14768) * C14016 + (C15404 - C15403) * C13857 +
             (C139824 * C18423 - C182 * C18303) * C14017 +
             (C139824 * C19069 - C182 * C18963) * C13858) *
                C139736) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eezz[23] +=
        (-std::pow(Pi, 2.5) *
         (((((C265 * C266 - C701 * C108 - C265 * C567 + C139835 * C702) *
                 C5813 +
             C7652 * C5814 + C7653 * C5815) *
                C5811 +
            (C6509 + C6510 + C6527) * C139736) *
               C1565 -
           ((C8652 + C8653 + C8645) * C139736 +
            (C11287 * C5815 + C11288 * C5814 +
             (C265 * C1741 - C701 * C1570 - C265 * C2074 + C139835 * C2230) *
                 C5813) *
                C5811) *
               C140002) *
              C2322 +
          (((C11288 * C5813 + C11287 * C5814 +
             (C265 * C10630 - C701 * C10394 - C265 * C11062 +
              C139835 * C11272) *
                 C5815) *
                C5811 +
            (C8651 * C5813 + C8650 * C5814 +
             (C265 * C10631 - C701 * C10395 - C265 * C11063 +
              C139835 * C11273) *
                 C5815) *
                C139736) *
               C140002 -
           ((C7655 + C7644 + C7645) * C139736 +
            (C10296 * C5815 + C7653 * C5814 + C7652 * C5813) * C5811) *
               C1565) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C265 * C266 - C701 * C108 - C265 * C567 + C139835 * C702) *
                C139824 * C89 +
            C737 * C90 + C738 * C91 + C739 * C92) *
               C1565 -
           (C2254 * C92 + C2255 * C91 + C2256 * C90 +
            (C265 * C1741 - C701 * C1570 - C265 * C2074 + C139835 * C2230) *
                C139824 * C89) *
               C140002) *
              C2322 +
          (((C265 * C3594 - C701 * C3438 - C265 * C3882 + C139835 * C4026) *
                C139824 * C89 +
            (C265 * C3595 - C701 * C3439 - C265 * C3883 + C139835 * C4027) *
                C139824 * C90 +
            (C265 * C3596 - C701 * C3440 - C265 * C3884 + C139835 * C4028) *
                C139824 * C91 +
            (C265 * C3597 - C701 * C3441 - C265 * C3885 + C139835 * C4029) *
                C139824 * C92) *
               C140002 -
           (C1497 * C92 + C1498 * C91 + C1499 * C90 +
            (C265 * C984 - C701 * C813 - C265 * C1317 + C139835 * C1473) *
                C139824 * C89) *
               C1565) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C14015 * C266 - C14516 * C108 - C14015 * C567 + C13856 * C702 +
             C14016 * C1741 - C14517 * C1570 - C14016 * C2074 + C13857 * C2230 +
             C14017 * C5397 - C14518 * C5273 - C14017 * C5621 +
             C13858 * C5733) *
                C139824 * C5811 +
            (C14556 + C14557 + C14558) * C139824 * C139736) *
               C1565 -
           ((C16654 + C16655 + C16656) * C139824 * C139736 +
            (C14017 * C15912 - C14518 * C15623 - C14017 * C16401 +
             C13858 * C16633 + C14016 * C5397 - C14517 * C5273 -
             C14016 * C5621 + C13857 * C5733 + C14015 * C1741 - C14516 * C1570 -
             C14015 * C2074 + C13856 * C2230) *
                C139824 * C5811) *
               C140002) *
              C2322 +
          (((C14015 * C3594 - C14516 * C3438 - C14015 * C3882 + C13856 * C4026 +
             C14016 * C13298 - C14517 * C13126 - C14016 * C13618 +
             C13857 * C13778 + C14017 * C18532 - C14518 * C18302 -
             C14017 * C18962 + C13858 * C19172) *
                C139824 * C5811 +
            (C14015 * C3595 - C14516 * C3439 - C14015 * C3883 + C13856 * C4027 +
             C14016 * C13299 - C14517 * C13127 - C14016 * C13619 +
             C13857 * C13780 + C14017 * C18533 - C14518 * C18303 -
             C14017 * C18963 + C13858 * C19173) *
                C139824 * C139736) *
               C140002 -
           ((C15522 + C15523 + C15524) * C139824 * C139736 +
            (C14017 * C13298 - C14518 * C13126 - C14017 * C13618 +
             C13858 * C13778 + C14016 * C3594 - C14517 * C3438 -
             C14016 * C3882 + C13857 * C4026 + C14015 * C984 - C14516 * C813 -
             C14015 * C1317 + C13856 * C1473) *
                C139824 * C5811) *
               C1565) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eexx[24] +=
        (-std::pow(Pi, 2.5) *
         ((((C5816 * C114 - C5817 * C108 - C5816 * C115 + C5811 * C126 +
             C5818 * C116 - C5819 * C109 - C5818 * C117 + C139736 * C127) *
                C139835 * C5813 +
            (C6687 + C6688) * C139835 * C5814 + C9627 * C5815) *
               C4096 -
           ((C10427 + C10428) * C139835 * C5815 +
            (C10429 + C10430) * C139835 * C5814 +
            (C5818 * C1576 - C5819 * C1569 - C5818 * C1577 + C139736 * C1584 +
             C5816 * C1578 - C5817 * C1570 - C5816 * C1579 + C5811 * C1585) *
                C139835 * C5813) *
               C140002) *
              C139792 * C2324 +
          (((C5816 * C1576 - C5817 * C1569 - C5816 * C1577 + C5811 * C1584 +
             C5818 * C1574 - C5819 * C1568 - C5818 * C1575 + C139736 * C1583) *
                C139835 * C5813 +
            (C5816 * C3444 - C5817 * C3439 - C5816 * C3445 + C5811 * C3451 +
             C5818 * C3446 - C5819 * C3440 - C5818 * C3447 + C139736 * C3452) *
                C139835 * C5814 +
            (C5816 * C7756 - C5817 * C7753 - C5816 * C7757 + C5811 * C7762 +
             C5818 * C7760 - C5819 * C7755 - C5818 * C7761 + C139736 * C7764) *
                C139835 * C5815) *
               C140002 -
           ((C6694 + C6693) * C139835 * C5815 +
            (C6692 + C6691) * C139835 * C5814 +
            (C5818 * C118 - C5819 * C110 - C5818 * C119 + C139736 * C128 +
             C5816 * C116 - C5817 * C109 - C5816 * C117 + C5811 * C127) *
                C139835 * C5813) *
               C4096) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C100 * C114 - C101 * C108 - C100 * C115 + C89 * C126 + C102 * C116 -
            C103 * C109 - C102 * C117 + C90 * C127 + C104 * C118 - C105 * C110 -
            C104 * C119 + C91 * C128 + C106 * C120 - C107 * C111 - C106 * C121 +
            C92 * C129) *
               C139835 * C139824 * C4096 -
           (C106 * C1572 - C107 * C1567 - C106 * C1573 + C92 * C1582 +
            C104 * C1574 - C105 * C1568 - C104 * C1575 + C91 * C1583 +
            C102 * C1576 - C103 * C1569 - C102 * C1577 + C90 * C1584 +
            C100 * C1578 - C101 * C1570 - C100 * C1579 + C89 * C1585) *
               C139835 * C139824 * C140002) *
              C139792 * C2324 +
          ((C100 * C1576 - C101 * C1569 - C100 * C1577 + C89 * C1584 +
            C102 * C1574 - C103 * C1568 - C102 * C1575 + C90 * C1583 +
            C104 * C1572 - C105 * C1567 - C104 * C1573 + C91 * C1582 +
            C106 * C1580 - C107 * C1571 - C106 * C1581 + C92 * C1586) *
               C139835 * C139824 * C140002 -
           (C106 * C122 - C107 * C112 - C106 * C123 + C92 * C130 + C104 * C120 -
            C105 * C111 - C104 * C121 + C91 * C129 + C102 * C118 - C103 * C110 -
            C102 * C119 + C90 * C128 + C100 * C116 - C101 * C109 - C100 * C117 +
            C89 * C127) *
               C139835 * C139824 * C4096) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C5816 * C114 - C5817 * C108 - C5816 * C115 + C5811 * C126 +
             C5818 * C116 - C5819 * C109 - C5818 * C117 + C139736 * C127) *
                C13856 +
            (C15683 + C15684) * C13857 + (C15685 + C15686) * C13858) *
               C139824 * C4096 -
           ((C5818 * C15625 - C5819 * C15622 - C5818 * C15626 +
             C139736 * C15631 + C5816 * C15627 - C5817 * C15623 -
             C5816 * C15628 + C5811 * C15632) *
                C13858 +
            (C15686 + C15685) * C13857 + (C15684 + C15683) * C13856) *
               C139824 * C140002) *
              C139792 * C2324 +
          (((C15687 + C15688) * C13856 + (C15689 + C15690) * C13857 +
            (C5816 * C15625 - C5817 * C15622 - C5816 * C15626 + C5811 * C15631 +
             C5818 * C15629 - C5819 * C15624 - C5818 * C15630 +
             C139736 * C15633) *
                C13858) *
               C139824 * C140002 -
           ((C15690 + C15689) * C13858 + (C15688 + C15687) * C13857 +
            (C5818 * C118 - C5819 * C110 - C5818 * C119 + C139736 * C128 +
             C5816 * C116 - C5817 * C109 - C5816 * C117 + C5811 * C127) *
                C13856) *
               C139824 * C4096) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eexy[24] +=
        (-std::pow(Pi, 2.5) *
         ((((C5813 * C183 - C5894 * C108 + C5814 * C896 - C5895 * C813 +
             C5815 * C2974 - C5896 * C2908) *
                C5816 +
            (C5813 * C189 - C5894 * C115 + C5814 * C901 - C5895 * C822 +
             C5815 * C2978 - C5896 * C2913) *
                C5811 +
            (C5898 - C5899 + C5900 - C5901 + C5902 - C5903) * C5818 +
            (C5904 - C5905 + C5906 - C5907 + C5908 - C5909) * C139736) *
               C139835 * C4096 +
           ((C5894 * C1570 - C5813 * C1653 + C5895 * C3438 - C5814 * C3520 +
             C5896 * C7754 - C5815 * C7863) *
                C5816 +
            (C5894 * C1579 - C5813 * C1658 + C5895 * C3443 - C5814 * C3524 +
             C5896 * C7759 - C5815 * C7866) *
                C5811 +
            (C7870 - C7871 + C7872 - C7873 + C7874 - C7875) * C5818 +
            (C7876 - C7877 + C7878 - C7879 + C7880 - C7881) * C139736) *
               C139835 * C140002) *
              C139792 * C2324 +
          (((C5899 - C5898 + C5901 - C5900 + C5903 - C5902) * C5816 +
            (C5905 - C5904 + C5907 - C5906 + C5909 - C5908) * C5811 +
            (C5910 - C5911 + C5912 - C5913 + C5914 - C5915) * C5818 +
            (C5916 - C5917 + C5918 - C5919 + C5920 - C5921) * C139736) *
               C139835 * C4096 +
           ((C7871 - C7870 + C7873 - C7872 + C7875 - C7874) * C5816 +
            (C7877 - C7876 + C7879 - C7878 + C7881 - C7880) * C5811 +
            (C5813 * C1655 - C5894 * C1568 + C5814 * C3522 - C5895 * C3440 +
             C5815 * C7865 - C5896 * C7755) *
                C5818 +
            (C5813 * C1660 - C5894 * C1575 + C5814 * C3526 - C5895 * C3447 +
             C5815 * C7868 - C5896 * C7761) *
                C139736) *
               C139835 * C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C139824 * C183 - C182 * C108) * C100 +
            (C139824 * C189 - C182 * C115) * C89 + (C196 - C197) * C102 +
            (C198 - C199) * C90 + C212 * C104 + C213 * C91 + C214 * C106 +
            C215 * C92) *
               C139835 * C4096 +
           ((C182 * C1570 - C139824 * C1653) * C100 +
            (C182 * C1579 - C139824 * C1658) * C89 + (C1664 - C1665) * C102 +
            (C1666 - C1667) * C90 + (C1668 - C1669) * C104 +
            (C1670 - C1671) * C91 + (C1672 - C1673) * C106 +
            (C1674 - C1675) * C92) *
               C139835 * C140002) *
              C139792 * C2324 +
          (((C197 - C196) * C100 + (C199 - C198) * C89 + (C201 - C200) * C102 +
            (C203 - C202) * C90 + (C205 - C204) * C104 + (C207 - C206) * C91 +
            (C208 - C209) * C106 + (C210 - C211) * C92) *
               C139835 * C4096 +
           ((C1665 - C1664) * C100 + (C1667 - C1666) * C89 +
            (C1669 - C1668) * C102 + (C1671 - C1670) * C90 +
            (C1673 - C1672) * C104 + (C1675 - C1674) * C91 +
            (C139824 * C1657 - C182 * C1571) * C106 +
            (C139824 * C1662 - C182 * C1581) * C92) *
               C139835 * C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C139824 * C183 - C182 * C108) * C5816 +
             (C139824 * C189 - C182 * C115) * C5811 + (C196 - C197) * C5818 +
             (C198 - C199) * C139736) *
                C13856 +
            ((C15795 - C15796) * C5816 + (C15797 - C15798) * C5811 +
             C15799 * C5818 + C15800 * C139736) *
                C13857 +
            ((C15801 - C15802) * C5816 + (C15803 - C15804) * C5811 +
             C15805 * C5818 + C15806 * C139736) *
                C13858) *
               C4096 +
           (((C15796 - C15795) * C5816 + (C15798 - C15797) * C5811 +
             C15807 * C5818 + C15808 * C139736) *
                C13856 +
            ((C15802 - C15801) * C5816 + (C15804 - C15803) * C5811 +
             C15809 * C5818 + C15810 * C139736) *
                C13857 +
            ((C182 * C15623 - C139824 * C15788) * C5816 +
             (C182 * C15628 - C139824 * C15791) * C5811 +
             (C15811 - C15812) * C5818 + (C15813 - C15814) * C139736) *
                C13858) *
               C140002) *
              C139792 * C2324 +
          ((((C197 - C196) * C5816 + (C199 - C198) * C5811 +
             (C201 - C200) * C5818 + (C203 - C202) * C139736) *
                C13856 +
            (C15807 * C5816 + C15808 * C5811 + (C1668 - C1669) * C5818 +
             (C1670 - C1671) * C139736) *
                C13857 +
            (C15809 * C5816 + C15810 * C5811 + (C13938 - C13939) * C5818 +
             (C13940 - C13941) * C139736) *
                C13858) *
               C4096 +
           ((C15799 * C5816 + C15800 * C5811 + (C1669 - C1668) * C5818 +
             (C1671 - C1670) * C139736) *
                C13856 +
            (C15805 * C5816 + C15806 * C5811 + (C13939 - C13938) * C5818 +
             (C13941 - C13940) * C139736) *
                C13857 +
            ((C15812 - C15811) * C5816 + (C15814 - C15813) * C5811 +
             (C139824 * C15790 - C182 * C15624) * C5818 +
             (C139824 * C15793 - C182 * C15630) * C139736) *
                C13858) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eexz[24] +=
        (-std::pow(Pi, 2.5) *
         (((((C139835 * C266 - C265 * C108) * C5816 +
             (C139835 * C272 - C265 * C115) * C5811 + (C279 - C280) * C5818 +
             (C281 - C282) * C139736) *
                C5813 +
            ((C6915 - C6916) * C5816 + (C6917 - C6918) * C5811 + C6919 * C5818 +
             C6920 * C139736) *
                C5814 +
            C9802 * C5815) *
               C4096 +
           (((C265 * C1570 - C139835 * C1741) * C5816 +
             (C265 * C1579 - C139835 * C1746) * C5811 +
             (C1752 - C1753) * C5818 + (C1754 - C1755) * C139736) *
                C5813 +
            ((C10635 - C10636) * C5816 + (C10637 - C10638) * C5811 +
             (C7986 - C7987) * C5818 + (C7988 - C7989) * C139736) *
                C5814 +
            ((C10639 - C10640) * C5816 + (C10641 - C10642) * C5811 +
             (C7990 - C7991) * C5818 + (C7992 - C7993) * C139736) *
                C5815) *
               C140002) *
              C139792 * C2324 +
          ((((C280 - C279) * C5816 + (C282 - C281) * C5811 +
             (C284 - C283) * C5818 + (C286 - C285) * C139736) *
                C5813 +
            (C6927 * C5816 + C6928 * C5811 + (C999 - C1000) * C5818 +
             (C1001 - C1002) * C139736) *
                C5814 +
            (C6929 * C5816 + C6930 * C5811 + (C6000 - C6001) * C5818 +
             (C6002 - C6003) * C139736) *
                C5815) *
               C4096 +
           (((C1753 - C1752) * C5816 + (C1755 - C1754) * C5811 +
             (C1757 - C1756) * C5818 + (C1759 - C1758) * C139736) *
                C5813 +
            ((C7987 - C7986) * C5816 + (C7989 - C7988) * C5811 +
             (C139835 * C3596 - C265 * C3440) * C5818 +
             (C139835 * C3600 - C265 * C3447) * C139736) *
                C5814 +
            ((C7991 - C7990) * C5816 + (C7993 - C7992) * C5811 +
             (C139835 * C7981 - C265 * C7755) * C5818 +
             (C139835 * C7984 - C265 * C7761) * C139736) *
                C5815) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C139835 * C266 - C265 * C108) * C100 +
            (C139835 * C272 - C265 * C115) * C89 + (C279 - C280) * C102 +
            (C281 - C282) * C90 + C295 * C104 + C296 * C91 + C297 * C106 +
            C298 * C92) *
               C139824 * C4096 +
           ((C265 * C1570 - C139835 * C1741) * C100 +
            (C265 * C1579 - C139835 * C1746) * C89 + (C1752 - C1753) * C102 +
            (C1754 - C1755) * C90 + (C1756 - C1757) * C104 +
            (C1758 - C1759) * C91 + (C1760 - C1761) * C106 +
            (C1762 - C1763) * C92) *
               C139824 * C140002) *
              C139792 * C2324 +
          (((C280 - C279) * C100 + (C282 - C281) * C89 + (C284 - C283) * C102 +
            (C286 - C285) * C90 + (C288 - C287) * C104 + (C290 - C289) * C91 +
            (C291 - C292) * C106 + (C293 - C294) * C92) *
               C139824 * C4096 +
           ((C1753 - C1752) * C100 + (C1755 - C1754) * C89 +
            (C1757 - C1756) * C102 + (C1759 - C1758) * C90 +
            (C1761 - C1760) * C104 + (C1763 - C1762) * C91 +
            (C139835 * C1745 - C265 * C1571) * C106 +
            (C139835 * C1750 - C265 * C1581) * C92) *
               C139824 * C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C13856 * C266 - C14015 * C108 + C13857 * C1741 - C14016 * C1570 +
             C13858 * C5397 - C14017 * C5273) *
                C5816 +
            (C13856 * C272 - C14015 * C115 + C13857 * C1746 - C14016 * C1579 +
             C13858 * C5401 - C14017 * C5278) *
                C5811 +
            (C14019 - C14020 + C14021 - C14022 + C14023 - C14024) * C5818 +
            (C14025 - C14026 + C14027 - C14028 + C14029 - C14030) * C139736) *
               C139824 * C4096 +
           ((C14015 * C1570 - C13856 * C1741 + C14016 * C5273 - C13857 * C5397 +
             C14017 * C15623 - C13858 * C15912) *
                C5816 +
            (C14015 * C1579 - C13856 * C1746 + C14016 * C5278 - C13857 * C5401 +
             C14017 * C15628 - C13858 * C15915) *
                C5811 +
            (C15919 - C15920 + C15921 - C15922 + C15923 - C15924) * C5818 +
            (C15925 - C15926 + C15927 - C15928 + C15929 - C15930) * C139736) *
               C139824 * C140002) *
              C139792 * C2324 +
          (((C14020 - C14019 + C14022 - C14021 + C14024 - C14023) * C5816 +
            (C14026 - C14025 + C14028 - C14027 + C14030 - C14029) * C5811 +
            (C14031 - C14032 + C14033 - C14034 + C14035 - C14036) * C5818 +
            (C14037 - C14038 + C14039 - C14040 + C14041 - C14042) * C139736) *
               C139824 * C4096 +
           ((C15920 - C15919 + C15922 - C15921 + C15924 - C15923) * C5816 +
            (C15926 - C15925 + C15928 - C15927 + C15930 - C15929) * C5811 +
            (C13856 * C1743 - C14015 * C1568 + C13857 * C5399 - C14016 * C5275 +
             C13858 * C15914 - C14017 * C15624) *
                C5818 +
            (C13856 * C1748 - C14015 * C1575 + C13857 * C5403 - C14016 * C5282 +
             C13858 * C15917 - C14017 * C15630) *
                C139736) *
               C139824 * C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[24] +=
        (-std::pow(Pi, 2.5) *
         ((((C5811 * C114 - C5816 * C108 + C139736 * C116 - C5818 * C109) *
                C5894 +
            (C5811 * C354 - C5816 * C348 + C139736 * C355 - C5818 * C349) *
                C5813 +
            (C7039 - C7040 + C7041 - C7042) * C5895 +
            (C7043 - C7044 + C7045 - C7046) * C5814 + C9893 * C5896 +
            C9894 * C5815) *
               C139835 * C4096 +
           ((C5816 * C1570 - C5811 * C1578 + C5818 * C1569 - C139736 * C1576) *
                C5894 +
            (C5816 * C1829 - C5811 * C1834 + C5818 * C1830 - C139736 * C1835) *
                C5813 +
            (C10745 - C10746 + C10747 - C10748) * C5895 +
            (C10749 - C10750 + C10751 - C10752) * C5814 +
            (C10753 - C10754 + C10755 - C10756) * C5896 +
            (C10757 - C10758 + C10759 - C10760) * C5815) *
               C139835 * C140002) *
              C139792 * C2324 +
          (((C5816 * C109 - C5811 * C116 + C5818 * C110 - C139736 * C118) *
                C5894 +
            (C5816 * C349 - C5811 * C355 + C5818 * C350 - C139736 * C356) *
                C5813 +
            (C7055 - C7056 + C7057 - C7058) * C5895 +
            (C7059 - C7060 + C7061 - C7062) * C5814 +
            (C7063 - C7064 + C7065 - C7066) * C5896 +
            (C7067 - C7068 + C7069 - C7070) * C5815) *
               C139835 * C4096 +
           ((C5811 * C1576 - C5816 * C1569 + C139736 * C1574 - C5818 * C1568) *
                C5894 +
            (C5811 * C1835 - C5816 * C1830 + C139736 * C1836 - C5818 * C1831) *
                C5813 +
            (C5811 * C3444 - C5816 * C3439 + C139736 * C3446 - C5818 * C3440) *
                C5895 +
            (C5811 * C3673 - C5816 * C3669 + C139736 * C3674 - C5818 * C3670) *
                C5814 +
            (C5811 * C7756 - C5816 * C7753 + C139736 * C7760 - C5818 * C7755) *
                C5896 +
            (C5811 * C8095 - C5816 * C8092 + C139736 * C8096 - C5818 * C8093) *
                C5815) *
               C139835 * C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C89 * C114 - C100 * C108 + C90 * C116 - C102 * C109 + C91 * C118 -
             C104 * C110 + C92 * C120 - C106 * C111) *
                C182 +
            (C89 * C354 - C100 * C348 + C90 * C355 - C102 * C349 + C91 * C356 -
             C104 * C350 + C92 * C357 - C106 * C351) *
                C139824) *
               C139835 * C4096 +
           ((C100 * C1570 - C89 * C1578 + C102 * C1569 - C90 * C1576 +
             C104 * C1568 - C91 * C1574 + C106 * C1567 - C92 * C1572) *
                C182 +
            (C100 * C1829 - C89 * C1834 + C102 * C1830 - C90 * C1835 +
             C104 * C1831 - C91 * C1836 + C106 * C1832 - C92 * C1837) *
                C139824) *
               C139835 * C140002) *
              C139792 * C2324 +
          (((C100 * C109 - C89 * C116 + C102 * C110 - C90 * C118 + C104 * C111 -
             C91 * C120 + C106 * C112 - C92 * C122) *
                C182 +
            (C100 * C349 - C89 * C355 + C102 * C350 - C90 * C356 + C104 * C351 -
             C91 * C357 + C106 * C352 - C92 * C358) *
                C139824) *
               C139835 * C4096 +
           ((C89 * C1576 - C100 * C1569 + C90 * C1574 - C102 * C1568 +
             C91 * C1572 - C104 * C1567 + C92 * C1580 - C106 * C1571) *
                C182 +
            (C89 * C1835 - C100 * C1830 + C90 * C1836 - C102 * C1831 +
             C91 * C1837 - C104 * C1832 + C92 * C1838 - C106 * C1833) *
                C139824) *
               C139835 * C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C5811 * C114 - C5816 * C108 + C139736 * C116 - C5818 * C109) *
                 C182 +
             (C5811 * C354 - C5816 * C348 + C139736 * C355 - C5818 * C349) *
                 C139824) *
                C13856 +
            ((C16035 - C16036 + C16037 - C16038) * C182 +
             (C16039 - C16040 + C16041 - C16042) * C139824) *
                C13857 +
            ((C16043 - C16044 + C16045 - C16046) * C182 +
             (C16047 - C16048 + C16049 - C16050) * C139824) *
                C13858) *
               C4096 +
           (((C16036 - C16035 + C16038 - C16037) * C182 +
             (C16040 - C16039 + C16042 - C16041) * C139824) *
                C13856 +
            ((C16044 - C16043 + C16046 - C16045) * C182 +
             (C16048 - C16047 + C16050 - C16049) * C139824) *
                C13857 +
            ((C5816 * C15623 - C5811 * C15627 + C5818 * C15622 -
              C139736 * C15625) *
                 C182 +
             (C5816 * C16028 - C5811 * C16031 + C5818 * C16029 -
              C139736 * C16032) *
                 C139824) *
                C13858) *
               C140002) *
              C139792 * C2324 +
          ((((C5816 * C109 - C5811 * C116 + C5818 * C110 - C139736 * C118) *
                 C182 +
             (C5816 * C349 - C5811 * C355 + C5818 * C350 - C139736 * C356) *
                 C139824) *
                C13856 +
            ((C16051 - C16052 + C16053 - C16054) * C182 +
             (C16055 - C16056 + C16057 - C16058) * C139824) *
                C13857 +
            ((C16059 - C16060 + C16061 - C16062) * C182 +
             (C16063 - C16064 + C16065 - C16066) * C139824) *
                C13858) *
               C4096 +
           (((C16052 - C16051 + C16054 - C16053) * C182 +
             (C16056 - C16055 + C16058 - C16057) * C139824) *
                C13856 +
            ((C16060 - C16059 + C16062 - C16061) * C182 +
             (C16064 - C16063 + C16066 - C16065) * C139824) *
                C13857 +
            ((C5811 * C15625 - C5816 * C15622 + C139736 * C15629 -
              C5818 * C15624) *
                 C182 +
             (C5811 * C16032 - C5816 * C16029 + C139736 * C16033 -
              C5818 * C16030) *
                 C139824) *
                C13858) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[24] +=
        (-std::pow(Pi, 2.5) *
         ((((C5894 * C183 - C6151 * C108 - C5894 * C348 + C5813 * C411 +
             C5895 * C896 - C6152 * C813 - C5895 * C1072 + C5814 * C1151 +
             C5896 * C2974 - C6153 * C2908 - C5896 * C3090 + C5815 * C3148) *
                C5811 +
            (C6191 + C6192 + C6193) * C139736) *
               C139835 * C4096 -
           ((C8217 + C8218 + C8219) * C139736 +
            (C5896 * C7863 - C6153 * C7754 - C5896 * C8091 + C5815 * C8196 +
             C5895 * C3520 - C6152 * C3438 - C5895 * C3668 + C5814 * C3742 +
             C5894 * C1653 - C6151 * C1570 - C5894 * C1829 + C5813 * C1908) *
                C5811) *
               C139835 * C140002) *
              C139792 * C2324 +
          (((C8219 + C8218 + C8217) * C5811 +
            (C5894 * C1655 - C6151 * C1568 - C5894 * C1831 + C5813 * C1906 +
             C5895 * C3522 - C6152 * C3440 - C5895 * C3670 + C5814 * C3744 +
             C5896 * C7865 - C6153 * C7755 - C5896 * C8093 + C5815 * C8197) *
                C139736) *
               C139835 * C140002 -
           ((C6194 + C6195 + C6196) * C139736 +
            (C6193 + C6192 + C6191) * C5811) *
               C139835 * C4096) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C182 * C183 - C410 * C108 - C182 * C348 + C139824 * C411) * C89 +
            C442 * C90 + C443 * C91 + C444 * C92) *
               C139835 * C4096 -
           (C1929 * C92 + C1930 * C91 + C1931 * C90 +
            (C182 * C1653 - C410 * C1570 - C182 * C1829 + C139824 * C1908) *
                C89) *
               C139835 * C140002) *
              C139792 * C2324 +
          ((C1931 * C89 + C1930 * C90 + C1929 * C91 +
            (C182 * C1657 - C410 * C1571 - C182 * C1833 + C139824 * C1909) *
                C92) *
               C139835 * C140002 -
           (C445 * C92 + C444 * C91 + C443 * C90 + C442 * C89) * C139835 *
               C4096) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C182 * C183 - C410 * C108 - C182 * C348 + C139824 * C411) *
                 C5811 +
             C442 * C139736) *
                C13856 +
            (C16195 + C16172) * C13857 + (C16196 + C16177) * C13858) *
               C4096 -
           ((C16194 * C139736 + (C182 * C15788 - C410 * C15623 - C182 * C16028 +
                                 C139824 * C16165) *
                                    C5811) *
                C13858 +
            (C16177 + C16196) * C13857 + (C16172 + C16195) * C13856) *
               C140002) *
              C139792 * C2324 +
          (((C16182 + C16183) * C13856 + (C16184 + C16185) * C13857 +
            (C16194 * C5811 + (C182 * C15790 - C410 * C15624 - C182 * C16030 +
                               C139824 * C16166) *
                                  C139736) *
                C13858) *
               C140002 -
           ((C16185 + C16184) * C13858 + (C16183 + C16182) * C13857 +
            (C443 * C139736 + C442 * C5811) * C13856) *
               C4096) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[24] +=
        (-std::pow(Pi, 2.5) *
         (((((C139835 * C266 - C265 * C108) * C5894 +
             (C139835 * C495 - C265 * C348) * C5813 + (C6915 - C6916) * C5895 +
             (C7294 - C7295) * C5814 + C9790 * C5896 + C10047 * C5815) *
                C5811 +
            ((C279 - C280) * C5894 + (C502 - C503) * C5813 + C6919 * C5895 +
             C7298 * C5814 + C6925 * C5896 + C7299 * C5815) *
                C139736) *
               C4096 +
           (((C265 * C1570 - C139835 * C1741) * C5894 +
             (C265 * C1829 - C139835 * C1997) * C5813 +
             (C10635 - C10636) * C5895 + (C10961 - C10962) * C5814 +
             (C10639 - C10640) * C5896 + (C10963 - C10964) * C5815) *
                C5811 +
            ((C1752 - C1753) * C5894 + (C2003 - C2004) * C5813 +
             (C7986 - C7987) * C5895 + (C8321 - C8322) * C5814 +
             (C7990 - C7991) * C5896 + (C8323 - C8324) * C5815) *
                C139736) *
               C140002) *
              C139792 * C2324 +
          ((((C280 - C279) * C5894 + (C503 - C502) * C5813 + C6927 * C5895 +
             C7300 * C5814 + C6929 * C5896 + C7301 * C5815) *
                C5811 +
            ((C284 - C283) * C5894 + (C506 - C505) * C5813 +
             (C999 - C1000) * C5895 + (C1248 - C1249) * C5814 +
             (C6000 - C6001) * C5896 + (C6273 - C6274) * C5815) *
                C139736) *
               C4096 +
           (((C1753 - C1752) * C5894 + (C2004 - C2003) * C5813 +
             (C7987 - C7986) * C5895 + (C8322 - C8321) * C5814 +
             (C7991 - C7990) * C5896 + (C8324 - C8323) * C5815) *
                C5811 +
            ((C1757 - C1756) * C5894 + (C2006 - C2005) * C5813 +
             (C139835 * C3596 - C265 * C3440) * C5895 +
             (C139835 * C3814 - C265 * C3670) * C5814 +
             (C139835 * C7981 - C265 * C7755) * C5896 +
             (C139835 * C8319 - C265 * C8093) * C5815) *
                C139736) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C139835 * C266 - C265 * C108) * C182 +
             (C139835 * C495 - C265 * C348) * C139824) *
                C89 +
            ((C279 - C280) * C182 + (C502 - C503) * C139824) * C90 +
            C516 * C91 + C517 * C92) *
               C4096 +
           (((C265 * C1570 - C139835 * C1741) * C182 +
             (C265 * C1829 - C139835 * C1997) * C139824) *
                C89 +
            ((C1752 - C1753) * C182 + (C2003 - C2004) * C139824) * C90 +
            ((C1756 - C1757) * C182 + (C2005 - C2006) * C139824) * C91 +
            ((C1760 - C1761) * C182 + (C2007 - C2008) * C139824) * C92) *
               C140002) *
              C139792 * C2324 +
          ((((C280 - C279) * C182 + (C503 - C502) * C139824) * C89 +
            ((C284 - C283) * C182 + (C506 - C505) * C139824) * C90 +
            ((C288 - C287) * C182 + (C509 - C508) * C139824) * C91 +
            ((C291 - C292) * C182 + (C510 - C511) * C139824) * C92) *
               C4096 +
           (((C1753 - C1752) * C182 + (C2004 - C2003) * C139824) * C89 +
            ((C1757 - C1756) * C182 + (C2006 - C2005) * C139824) * C90 +
            ((C1761 - C1760) * C182 + (C2008 - C2007) * C139824) * C91 +
            ((C139835 * C1745 - C265 * C1571) * C182 +
             (C139835 * C2001 - C265 * C1833) * C139824) *
                C92) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C13856 * C266 - C14015 * C108 + C13857 * C1741 - C14016 * C1570 +
              C13858 * C5397 - C14017 * C5273) *
                 C182 +
             (C13856 * C495 - C14015 * C348 + C13857 * C1997 - C14016 * C1829 +
              C13858 * C5567 - C14017 * C5455) *
                 C139824) *
                C5811 +
            ((C14019 - C14020 + C14021 - C14022 + C14023 - C14024) * C182 +
             (C14279 - C14280 + C14281 - C14282 + C14283 - C14284) * C139824) *
                C139736) *
               C4096 +
           (((C14015 * C1570 - C13856 * C1741 + C14016 * C5273 -
              C13857 * C5397 + C14017 * C15623 - C13858 * C15912) *
                 C182 +
             (C14015 * C1829 - C13856 * C1997 + C14016 * C5455 -
              C13857 * C5567 + C14017 * C16028 - C13858 * C16294) *
                 C139824) *
                C5811 +
            ((C15919 - C15920 + C15921 - C15922 + C15923 - C15924) * C182 +
             (C16298 - C16299 + C16300 - C16301 + C16302 - C16303) * C139824) *
                C139736) *
               C140002) *
              C139792 * C2324 +
          ((((C14020 - C14019 + C14022 - C14021 + C14024 - C14023) * C182 +
             (C14280 - C14279 + C14282 - C14281 + C14284 - C14283) * C139824) *
                C5811 +
            ((C14031 - C14032 + C14033 - C14034 + C14035 - C14036) * C182 +
             (C14285 - C14286 + C14287 - C14288 + C14289 - C14290) * C139824) *
                C139736) *
               C4096 +
           (((C15920 - C15919 + C15922 - C15921 + C15924 - C15923) * C182 +
             (C16299 - C16298 + C16301 - C16300 + C16303 - C16302) * C139824) *
                C5811 +
            ((C13856 * C1743 - C14015 * C1568 + C13857 * C5399 -
              C14016 * C5275 + C13858 * C15914 - C14017 * C15624) *
                 C182 +
             (C13856 * C1999 - C14015 * C1831 + C13857 * C5569 -
              C14016 * C5457 + C13858 * C16296 - C14017 * C16030) *
                 C139824) *
                C139736) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eezx[24] +=
        (-std::pow(Pi, 2.5) *
         (((((C5811 * C114 - C5816 * C108 + C139736 * C116 - C5818 * C109) *
                 C265 +
             (C5811 * C573 - C5816 * C567 + C139736 * C574 - C5818 * C568) *
                 C139835) *
                C5813 +
            ((C7039 - C7040 + C7041 - C7042) * C265 +
             (C7408 - C7409 + C7410 - C7411) * C139835) *
                C5814 +
            C10137 * C5815) *
               C4096 +
           (((C5816 * C1570 - C5811 * C1578 + C5818 * C1569 - C139736 * C1576) *
                 C265 +
             (C5816 * C2074 - C5811 * C2079 + C5818 * C2075 - C139736 * C2080) *
                 C139835) *
                C5813 +
            ((C10745 - C10746 + C10747 - C10748) * C265 +
             (C11067 - C11068 + C11069 - C11070) * C139835) *
                C5814 +
            ((C10753 - C10754 + C10755 - C10756) * C265 +
             (C11071 - C11072 + C11073 - C11074) * C139835) *
                C5815) *
               C140002) *
              C139792 * C2324 +
          ((((C5816 * C109 - C5811 * C116 + C5818 * C110 - C139736 * C118) *
                 C265 +
             (C5816 * C568 - C5811 * C574 + C5818 * C569 - C139736 * C575) *
                 C139835) *
                C5813 +
            ((C7055 - C7056 + C7057 - C7058) * C265 +
             (C7416 - C7417 + C7418 - C7419) * C139835) *
                C5814 +
            ((C7063 - C7064 + C7065 - C7066) * C265 +
             (C7420 - C7421 + C7422 - C7423) * C139835) *
                C5815) *
               C4096 +
           (((C5811 * C1576 - C5816 * C1569 + C139736 * C1574 - C5818 * C1568) *
                 C265 +
             (C5811 * C2080 - C5816 * C2075 + C139736 * C2081 - C5818 * C2076) *
                 C139835) *
                C5813 +
            ((C5811 * C3444 - C5816 * C3439 + C139736 * C3446 - C5818 * C3440) *
                 C265 +
             (C5811 * C3887 - C5816 * C3883 + C139736 * C3888 - C5818 * C3884) *
                 C139835) *
                C5814 +
            ((C5811 * C7756 - C5816 * C7753 + C139736 * C7760 - C5818 * C7755) *
                 C265 +
             (C5811 * C8426 - C5816 * C8423 + C139736 * C8427 - C5818 * C8424) *
                 C139835) *
                C5815) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C89 * C114 - C100 * C108 + C90 * C116 - C102 * C109 + C91 * C118 -
             C104 * C110 + C92 * C120 - C106 * C111) *
                C265 +
            (C89 * C573 - C100 * C567 + C90 * C574 - C102 * C568 + C91 * C575 -
             C104 * C569 + C92 * C576 - C106 * C570) *
                C139835) *
               C139824 * C4096 +
           ((C100 * C1570 - C89 * C1578 + C102 * C1569 - C90 * C1576 +
             C104 * C1568 - C91 * C1574 + C106 * C1567 - C92 * C1572) *
                C265 +
            (C100 * C2074 - C89 * C2079 + C102 * C2075 - C90 * C2080 +
             C104 * C2076 - C91 * C2081 + C106 * C2077 - C92 * C2082) *
                C139835) *
               C139824 * C140002) *
              C139792 * C2324 +
          (((C100 * C109 - C89 * C116 + C102 * C110 - C90 * C118 + C104 * C111 -
             C91 * C120 + C106 * C112 - C92 * C122) *
                C265 +
            (C100 * C568 - C89 * C574 + C102 * C569 - C90 * C575 + C104 * C570 -
             C91 * C576 + C106 * C571 - C92 * C577) *
                C139835) *
               C139824 * C4096 +
           ((C89 * C1576 - C100 * C1569 + C90 * C1574 - C102 * C1568 +
             C91 * C1572 - C104 * C1567 + C92 * C1580 - C106 * C1571) *
                C265 +
            (C89 * C2080 - C100 * C2075 + C90 * C2081 - C102 * C2076 +
             C91 * C2082 - C104 * C2077 + C92 * C2083 - C106 * C2078) *
                C139835) *
               C139824 * C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C5811 * C114 - C5816 * C108 + C139736 * C116 - C5818 * C109) *
                C14015 +
            (C5811 * C573 - C5816 * C567 + C139736 * C574 - C5818 * C568) *
                C13856 +
            (C16035 - C16036 + C16037 - C16038) * C14016 +
            (C16408 - C16409 + C16410 - C16411) * C13857 +
            (C16043 - C16044 + C16045 - C16046) * C14017 +
            (C16412 - C16413 + C16414 - C16415) * C13858) *
               C139824 * C4096 +
           ((C16036 - C16035 + C16038 - C16037) * C14015 +
            (C16409 - C16408 + C16411 - C16410) * C13856 +
            (C16044 - C16043 + C16046 - C16045) * C14016 +
            (C16413 - C16412 + C16415 - C16414) * C13857 +
            (C5816 * C15623 - C5811 * C15627 + C5818 * C15622 -
             C139736 * C15625) *
                C14017 +
            (C5816 * C16401 - C5811 * C16404 + C5818 * C16402 -
             C139736 * C16405) *
                C13858) *
               C139824 * C140002) *
              C139792 * C2324 +
          (((C5816 * C109 - C5811 * C116 + C5818 * C110 - C139736 * C118) *
                C14015 +
            (C5816 * C568 - C5811 * C574 + C5818 * C569 - C139736 * C575) *
                C13856 +
            (C16051 - C16052 + C16053 - C16054) * C14016 +
            (C16416 - C16417 + C16418 - C16419) * C13857 +
            (C16059 - C16060 + C16061 - C16062) * C14017 +
            (C16420 - C16421 + C16422 - C16423) * C13858) *
               C139824 * C4096 +
           ((C16052 - C16051 + C16054 - C16053) * C14015 +
            (C16417 - C16416 + C16419 - C16418) * C13856 +
            (C16060 - C16059 + C16062 - C16061) * C14016 +
            (C16421 - C16420 + C16423 - C16422) * C13857 +
            (C5811 * C15625 - C5816 * C15622 + C139736 * C15629 -
             C5818 * C15624) *
                C14017 +
            (C5811 * C16405 - C5816 * C16402 + C139736 * C16406 -
             C5818 * C16403) *
                C13858) *
               C139824 * C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eezy[24] +=
        (-std::pow(Pi, 2.5) *
         (((((C5813 * C183 - C5894 * C108 + C5814 * C896 - C5895 * C813 +
              C5815 * C2974 - C5896 * C2908) *
                 C265 +
             (C5813 * C629 - C5894 * C567 + C5814 * C1393 - C5895 * C1317 +
              C5815 * C3314 - C5896 * C3256) *
                 C139835) *
                C5811 +
            ((C5898 - C5899 + C5900 - C5901 + C5902 - C5903) * C265 +
             (C6423 - C6424 + C6425 - C6426 + C6427 - C6428) * C139835) *
                C139736) *
               C4096 +
           (((C5894 * C1570 - C5813 * C1653 + C5895 * C3438 - C5814 * C3520 +
              C5896 * C7754 - C5815 * C7863) *
                 C265 +
             (C5894 * C2074 - C5813 * C2150 + C5895 * C3882 - C5814 * C3956 +
              C5896 * C8422 - C5815 * C8526) *
                 C139835) *
                C5811 +
            ((C7870 - C7871 + C7872 - C7873 + C7874 - C7875) * C265 +
             (C8530 - C8531 + C8532 - C8533 + C8534 - C8535) * C139835) *
                C139736) *
               C140002) *
              C139792 * C2324 +
          ((((C5899 - C5898 + C5901 - C5900 + C5903 - C5902) * C265 +
             (C6424 - C6423 + C6426 - C6425 + C6428 - C6427) * C139835) *
                C5811 +
            ((C5910 - C5911 + C5912 - C5913 + C5914 - C5915) * C265 +
             (C6429 - C6430 + C6431 - C6432 + C6433 - C6434) * C139835) *
                C139736) *
               C4096 +
           (((C7871 - C7870 + C7873 - C7872 + C7875 - C7874) * C265 +
             (C8531 - C8530 + C8533 - C8532 + C8535 - C8534) * C139835) *
                C5811 +
            ((C5813 * C1655 - C5894 * C1568 + C5814 * C3522 - C5895 * C3440 +
              C5815 * C7865 - C5896 * C7755) *
                 C265 +
             (C5813 * C2152 - C5894 * C2076 + C5814 * C3958 - C5895 * C3884 +
              C5815 * C8528 - C5896 * C8424) *
                 C139835) *
                C139736) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C139824 * C183 - C182 * C108) * C265 +
             (C139824 * C629 - C182 * C567) * C139835) *
                C89 +
            ((C196 - C197) * C265 + (C636 - C637) * C139835) * C90 +
            C650 * C91 + C651 * C92) *
               C4096 +
           (((C182 * C1570 - C139824 * C1653) * C265 +
             (C182 * C2074 - C139824 * C2150) * C139835) *
                C89 +
            ((C1664 - C1665) * C265 + (C2156 - C2157) * C139835) * C90 +
            ((C1668 - C1669) * C265 + (C2158 - C2159) * C139835) * C91 +
            ((C1672 - C1673) * C265 + (C2160 - C2161) * C139835) * C92) *
               C140002) *
              C139792 * C2324 +
          ((((C197 - C196) * C265 + (C637 - C636) * C139835) * C89 +
            ((C201 - C200) * C265 + (C640 - C639) * C139835) * C90 +
            ((C205 - C204) * C265 + (C643 - C642) * C139835) * C91 +
            ((C208 - C209) * C265 + (C644 - C645) * C139835) * C92) *
               C4096 +
           (((C1665 - C1664) * C265 + (C2157 - C2156) * C139835) * C89 +
            ((C1669 - C1668) * C265 + (C2159 - C2158) * C139835) * C90 +
            ((C1673 - C1672) * C265 + (C2161 - C2160) * C139835) * C91 +
            ((C139824 * C1657 - C182 * C1571) * C265 +
             (C139824 * C2154 - C182 * C2078) * C139835) *
                C92) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C139824 * C183 - C182 * C108) * C14015 +
             (C139824 * C629 - C182 * C567) * C13856 +
             (C15795 - C15796) * C14016 + (C16525 - C16526) * C13857 +
             (C15801 - C15802) * C14017 + (C16527 - C16528) * C13858) *
                C5811 +
            ((C196 - C197) * C14015 + (C636 - C637) * C13856 + C15799 * C14016 +
             C16529 * C13857 + C15805 * C14017 + C16530 * C13858) *
                C139736) *
               C4096 +
           (((C15796 - C15795) * C14015 + (C16526 - C16525) * C13856 +
             (C15802 - C15801) * C14016 + (C16528 - C16527) * C13857 +
             (C182 * C15623 - C139824 * C15788) * C14017 +
             (C182 * C16401 - C139824 * C16521) * C13858) *
                C5811 +
            (C15807 * C14015 + C16531 * C13856 + C15809 * C14016 +
             C16532 * C13857 + (C15811 - C15812) * C14017 +
             (C16533 - C16534) * C13858) *
                C139736) *
               C140002) *
              C139792 * C2324 +
          ((((C197 - C196) * C14015 + (C637 - C636) * C13856 + C15807 * C14016 +
             C16531 * C13857 + C15809 * C14017 + C16532 * C13858) *
                C5811 +
            ((C201 - C200) * C14015 + (C640 - C639) * C13856 +
             (C1668 - C1669) * C14016 + (C2158 - C2159) * C13857 +
             (C13938 - C13939) * C14017 + (C14441 - C14442) * C13858) *
                C139736) *
               C4096 +
           ((C15799 * C14015 + C16529 * C13856 + C15805 * C14016 +
             C16530 * C13857 + (C15812 - C15811) * C14017 +
             (C16534 - C16533) * C13858) *
                C5811 +
            ((C1669 - C1668) * C14015 + (C2159 - C2158) * C13856 +
             (C13939 - C13938) * C14016 + (C14442 - C14441) * C13857 +
             (C139824 * C15790 - C182 * C15624) * C14017 +
             (C139824 * C16523 - C182 * C16403) * C13858) *
                C139736) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eezz[24] +=
        (-std::pow(Pi, 2.5) *
         (((((C265 * C266 - C701 * C108 - C265 * C567 + C139835 * C702) *
                 C5813 +
             C7652 * C5814 + C7653 * C5815) *
                C5811 +
            (C6509 + C6510 + C6527) * C139736) *
               C4096 -
           ((C8652 + C8653 + C8645) * C139736 +
            (C11287 * C5815 + C11288 * C5814 +
             (C265 * C1741 - C701 * C1570 - C265 * C2074 + C139835 * C2230) *
                 C5813) *
                C5811) *
               C140002) *
              C139792 * C2324 +
          (((C8645 + C8653 + C8652) * C5811 +
            (C2252 * C5813 +
             (C265 * C3596 - C701 * C3440 - C265 * C3884 + C139835 * C4028) *
                 C5814 +
             (C265 * C7981 - C701 * C7755 - C265 * C8424 + C139835 * C8635) *
                 C5815) *
                C139736) *
               C140002 -
           ((C6528 + C6519 + C6520) * C139736 +
            (C6527 + C6510 + C6509) * C5811) *
               C4096) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C265 * C266 - C701 * C108 - C265 * C567 + C139835 * C702) *
                C139824 * C89 +
            C737 * C90 + C738 * C91 + C739 * C92) *
               C4096 -
           (C2254 * C92 + C2255 * C91 + C2256 * C90 +
            (C265 * C1741 - C701 * C1570 - C265 * C2074 + C139835 * C2230) *
                C139824 * C89) *
               C140002) *
              C139792 * C2324 +
          ((C2256 * C89 + C2255 * C90 + C2254 * C91 +
            (C265 * C1745 - C701 * C1571 - C265 * C2078 + C139835 * C2231) *
                C139824 * C92) *
               C140002 -
           (C740 * C92 + C739 * C91 + C738 * C90 + C737 * C89) * C4096) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C14015 * C266 - C14516 * C108 - C14015 * C567 + C13856 * C702 +
             C14016 * C1741 - C14517 * C1570 - C14016 * C2074 + C13857 * C2230 +
             C14017 * C5397 - C14518 * C5273 - C14017 * C5621 +
             C13858 * C5733) *
                C139824 * C5811 +
            (C14556 + C14557 + C14558) * C139824 * C139736) *
               C4096 -
           ((C16654 + C16655 + C16656) * C139824 * C139736 +
            (C14017 * C15912 - C14518 * C15623 - C14017 * C16401 +
             C13858 * C16633 + C14016 * C5397 - C14517 * C5273 -
             C14016 * C5621 + C13857 * C5733 + C14015 * C1741 - C14516 * C1570 -
             C14015 * C2074 + C13856 * C2230) *
                C139824 * C5811) *
               C140002) *
              C139792 * C2324 +
          (((C16656 + C16655 + C16654) * C139824 * C5811 +
            (C14015 * C1743 - C14516 * C1568 - C14015 * C2076 + C13856 * C2228 +
             C14016 * C5399 - C14517 * C5275 - C14016 * C5623 + C13857 * C5735 +
             C14017 * C15914 - C14518 * C15624 - C14017 * C16403 +
             C13858 * C16634) *
                C139824 * C139736) *
               C140002 -
           ((C14559 + C14560 + C14561) * C139824 * C139736 +
            (C14558 + C14557 + C14556) * C139824 * C5811) *
               C4096) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eexx[25] +=
        (-std::pow(Pi, 2.5) *
         ((((C5816 * C114 - C5817 * C108 - C5816 * C115 + C5811 * C126 +
             C5818 * C116 - C5819 * C109 - C5818 * C117 + C139736 * C127) *
                C139835 * C5813 +
            (C6687 + C6688) * C139835 * C5814 + C9627 * C5815) *
               C4096 -
           ((C10427 + C10428) * C139835 * C5815 +
            (C10429 + C10430) * C139835 * C5814 +
            (C5818 * C1576 - C5819 * C1569 - C5818 * C1577 + C139736 * C1584 +
             C5816 * C1578 - C5817 * C1570 - C5816 * C1579 + C5811 * C1585) *
                C139835 * C5813) *
               C140002) *
              C806 +
          (((C10430 + C10429) * C139835 * C5813 +
            (C10428 + C10427) * C139835 * C5814 +
            (C5816 * C10396 - C5817 * C10394 - C5816 * C10397 + C5811 * C10400 +
             C5818 * C10398 - C5819 * C10395 - C5818 * C10399 +
             C139736 * C10401) *
                C139835 * C5815) *
               C140002 -
           ((C9632 + C9633) * C139835 * C5815 +
            (C6690 + C6689) * C139835 * C5814 +
            (C6688 + C6687) * C139835 * C5813) *
               C4096) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C100 * C114 - C101 * C108 - C100 * C115 + C89 * C126 + C102 * C116 -
            C103 * C109 - C102 * C117 + C90 * C127 + C104 * C118 - C105 * C110 -
            C104 * C119 + C91 * C128 + C106 * C120 - C107 * C111 - C106 * C121 +
            C92 * C129) *
               C139835 * C139824 * C4096 -
           (C106 * C1572 - C107 * C1567 - C106 * C1573 + C92 * C1582 +
            C104 * C1574 - C105 * C1568 - C104 * C1575 + C91 * C1583 +
            C102 * C1576 - C103 * C1569 - C102 * C1577 + C90 * C1584 +
            C100 * C1578 - C101 * C1570 - C100 * C1579 + C89 * C1585) *
               C139835 * C139824 * C140002) *
              C806 +
          ((C100 * C3442 - C101 * C3438 - C100 * C3443 + C89 * C3450 +
            C102 * C3444 - C103 * C3439 - C102 * C3445 + C90 * C3451 +
            C104 * C3446 - C105 * C3440 - C104 * C3447 + C91 * C3452 +
            C106 * C3448 - C107 * C3441 - C106 * C3449 + C92 * C3453) *
               C139835 * C139824 * C140002 -
           (C106 * C815 - C107 * C810 - C106 * C816 + C92 * C825 + C104 * C817 -
            C105 * C811 - C104 * C818 + C91 * C826 + C102 * C819 - C103 * C812 -
            C102 * C820 + C90 * C827 + C100 * C821 - C101 * C813 - C100 * C822 +
            C89 * C828) *
               C139835 * C139824 * C4096) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C5816 * C114 - C5817 * C108 - C5816 * C115 + C5811 * C126 +
             C5818 * C116 - C5819 * C109 - C5818 * C117 + C139736 * C127) *
                C13856 +
            (C15683 + C15684) * C13857 + (C15685 + C15686) * C13858) *
               C139824 * C4096 -
           ((C5818 * C15625 - C5819 * C15622 - C5818 * C15626 +
             C139736 * C15631 + C5816 * C15627 - C5817 * C15623 -
             C5816 * C15628 + C5811 * C15632) *
                C13858 +
            (C15686 + C15685) * C13857 + (C15684 + C15683) * C13856) *
               C139824 * C140002) *
              C806 +
          (((C10430 + C10429) * C13856 + (C18323 + C18324) * C13857 +
            (C5816 * C18304 - C5817 * C18302 - C5816 * C18305 + C5811 * C18308 +
             C5818 * C18306 - C5819 * C18303 - C5818 * C18307 +
             C139736 * C18309) *
                C13858) *
               C139824 * C140002 -
           ((C18324 + C18323) * C13858 + (C10429 + C10430) * C13857 +
            (C6688 + C6687) * C13856) *
               C139824 * C4096) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eexy[25] +=
        (-std::pow(Pi, 2.5) *
         ((((C5813 * C183 - C5894 * C108 + C5814 * C896 - C5895 * C813 +
             C5815 * C2974 - C5896 * C2908) *
                C5816 +
            (C5813 * C189 - C5894 * C115 + C5814 * C901 - C5895 * C822 +
             C5815 * C2978 - C5896 * C2913) *
                C5811 +
            (C5898 - C5899 + C5900 - C5901 + C5902 - C5903) * C5818 +
            (C5904 - C5905 + C5906 - C5907 + C5908 - C5909) * C139736) *
               C139835 * C4096 +
           ((C5894 * C1570 - C5813 * C1653 + C5895 * C3438 - C5814 * C3520 +
             C5896 * C7754 - C5815 * C7863) *
                C5816 +
            (C5894 * C1579 - C5813 * C1658 + C5895 * C3443 - C5814 * C3524 +
             C5896 * C7759 - C5815 * C7866) *
                C5811 +
            (C7870 - C7871 + C7872 - C7873 + C7874 - C7875) * C5818 +
            (C7876 - C7877 + C7878 - C7879 + C7880 - C7881) * C139736) *
               C139835 * C140002) *
              C806 +
          (((C5894 * C813 - C5813 * C896 + C5895 * C2908 - C5814 * C2974 +
             C5896 * C6627 - C5815 * C6792) *
                C5816 +
            (C5894 * C822 - C5813 * C901 + C5895 * C2913 - C5814 * C2978 +
             C5896 * C6632 - C5815 * C6795) *
                C5811 +
            (C6799 - C6800 + C6801 - C6802 + C6803 - C6804) * C5818 +
            (C6805 - C6806 + C6807 - C6808 + C6809 - C6810) * C139736) *
               C139835 * C4096 +
           ((C5813 * C3520 - C5894 * C3438 + C5814 * C7863 - C5895 * C7754 +
             C5815 * C10528 - C5896 * C10394) *
                C5816 +
            (C5813 * C3524 - C5894 * C3443 + C5814 * C7866 - C5895 * C7759 +
             C5815 * C10530 - C5896 * C10397) *
                C5811 +
            (C5813 * C3521 - C5894 * C3439 + C5814 * C7864 - C5895 * C7753 +
             C5815 * C10529 - C5896 * C10395) *
                C5818 +
            (C5813 * C3525 - C5894 * C3445 + C5814 * C7867 - C5895 * C7757 +
             C5815 * C10531 - C5896 * C10399) *
                C139736) *
               C139835 * C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C139824 * C183 - C182 * C108) * C100 +
            (C139824 * C189 - C182 * C115) * C89 + (C196 - C197) * C102 +
            (C198 - C199) * C90 + C212 * C104 + C213 * C91 + C214 * C106 +
            C215 * C92) *
               C139835 * C4096 +
           ((C182 * C1570 - C139824 * C1653) * C100 +
            (C182 * C1579 - C139824 * C1658) * C89 + (C1664 - C1665) * C102 +
            (C1666 - C1667) * C90 + (C1668 - C1669) * C104 +
            (C1670 - C1671) * C91 + (C1672 - C1673) * C106 +
            (C1674 - C1675) * C92) *
               C139835 * C140002) *
              C806 +
          (((C182 * C813 - C139824 * C896) * C100 +
            (C182 * C822 - C139824 * C901) * C89 + (C907 - C908) * C102 +
            (C909 - C910) * C90 + (C911 - C912) * C104 + (C913 - C914) * C91 +
            (C915 - C916) * C106 + (C917 - C918) * C92) *
               C139835 * C4096 +
           ((C139824 * C3520 - C182 * C3438) * C100 +
            (C139824 * C3524 - C182 * C3443) * C89 +
            (C139824 * C3521 - C182 * C3439) * C102 +
            (C139824 * C3525 - C182 * C3445) * C90 +
            (C139824 * C3522 - C182 * C3440) * C104 +
            (C139824 * C3526 - C182 * C3447) * C91 +
            (C139824 * C3523 - C182 * C3441) * C106 +
            (C139824 * C3527 - C182 * C3449) * C92) *
               C139835 * C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C139824 * C183 - C182 * C108) * C5816 +
             (C139824 * C189 - C182 * C115) * C5811 + (C196 - C197) * C5818 +
             (C198 - C199) * C139736) *
                C13856 +
            ((C15795 - C15796) * C5816 + (C15797 - C15798) * C5811 +
             C15799 * C5818 + C15800 * C139736) *
                C13857 +
            ((C15801 - C15802) * C5816 + (C15803 - C15804) * C5811 +
             C15805 * C5818 + C15806 * C139736) *
                C13858) *
               C4096 +
           (((C15796 - C15795) * C5816 + (C15798 - C15797) * C5811 +
             C15807 * C5818 + C15808 * C139736) *
                C13856 +
            ((C15802 - C15801) * C5816 + (C15804 - C15803) * C5811 +
             C15809 * C5818 + C15810 * C139736) *
                C13857 +
            ((C182 * C15623 - C139824 * C15788) * C5816 +
             (C182 * C15628 - C139824 * C15791) * C5811 +
             (C15811 - C15812) * C5818 + (C15813 - C15814) * C139736) *
                C13858) *
               C140002) *
              C806 +
          ((((C182 * C813 - C139824 * C896) * C5816 +
             (C182 * C822 - C139824 * C901) * C5811 + (C907 - C908) * C5818 +
             (C909 - C910) * C139736) *
                C13856 +
            ((C18427 - C18428) * C5816 + (C18429 - C18430) * C5811 +
             (C14764 - C14765) * C5818 + (C14766 - C14767) * C139736) *
                C13857 +
            ((C18431 - C18432) * C5816 + (C18433 - C18434) * C5811 +
             (C14768 - C14769) * C5818 + (C14770 - C14771) * C139736) *
                C13858) *
               C4096 +
           (((C18428 - C18427) * C5816 + (C18430 - C18429) * C5811 +
             (C14765 - C14764) * C5818 + (C14767 - C14766) * C139736) *
                C13856 +
            ((C18432 - C18431) * C5816 + (C18434 - C18433) * C5811 +
             (C14769 - C14768) * C5818 + (C14771 - C14770) * C139736) *
                C13857 +
            ((C139824 * C18422 - C182 * C18302) * C5816 +
             (C139824 * C18424 - C182 * C18305) * C5811 +
             (C139824 * C18423 - C182 * C18303) * C5818 +
             (C139824 * C18425 - C182 * C18307) * C139736) *
                C13858) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eexz[25] +=
        (-std::pow(Pi, 2.5) *
         (((((C139835 * C266 - C265 * C108) * C5816 +
             (C139835 * C272 - C265 * C115) * C5811 + (C279 - C280) * C5818 +
             (C281 - C282) * C139736) *
                C5813 +
            ((C6915 - C6916) * C5816 + (C6917 - C6918) * C5811 + C6919 * C5818 +
             C6920 * C139736) *
                C5814 +
            C9802 * C5815) *
               C4096 +
           (((C265 * C1570 - C139835 * C1741) * C5816 +
             (C265 * C1579 - C139835 * C1746) * C5811 +
             (C1752 - C1753) * C5818 + (C1754 - C1755) * C139736) *
                C5813 +
            ((C10635 - C10636) * C5816 + (C10637 - C10638) * C5811 +
             (C7986 - C7987) * C5818 + (C7988 - C7989) * C139736) *
                C5814 +
            ((C10639 - C10640) * C5816 + (C10641 - C10642) * C5811 +
             (C7990 - C7991) * C5818 + (C7992 - C7993) * C139736) *
                C5815) *
               C140002) *
              C806 +
          ((((C6916 - C6915) * C5816 + (C6918 - C6917) * C5811 + C6927 * C5818 +
             C6928 * C139736) *
                C5813 +
            ((C6922 - C6921) * C5816 + (C6924 - C6923) * C5811 + C6929 * C5818 +
             C6930 * C139736) *
                C5814 +
            ((C9794 - C9795) * C5816 + (C9796 - C9797) * C5811 +
             (C6931 - C6932) * C5818 + (C6933 - C6934) * C139736) *
                C5815) *
               C4096 +
           (((C10636 - C10635) * C5816 + (C10638 - C10637) * C5811 +
             (C7987 - C7986) * C5818 + (C7989 - C7988) * C139736) *
                C5813 +
            ((C10640 - C10639) * C5816 + (C10642 - C10641) * C5811 +
             (C7991 - C7990) * C5818 + (C7993 - C7992) * C139736) *
                C5814 +
            ((C139835 * C10630 - C265 * C10394) * C5816 +
             (C139835 * C10632 - C265 * C10397) * C5811 +
             (C139835 * C10631 - C265 * C10395) * C5818 +
             (C139835 * C10633 - C265 * C10399) * C139736) *
                C5815) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C139835 * C266 - C265 * C108) * C100 +
            (C139835 * C272 - C265 * C115) * C89 + (C279 - C280) * C102 +
            (C281 - C282) * C90 + C295 * C104 + C296 * C91 + C297 * C106 +
            C298 * C92) *
               C139824 * C4096 +
           ((C265 * C1570 - C139835 * C1741) * C100 +
            (C265 * C1579 - C139835 * C1746) * C89 + (C1752 - C1753) * C102 +
            (C1754 - C1755) * C90 + (C1756 - C1757) * C104 +
            (C1758 - C1759) * C91 + (C1760 - C1761) * C106 +
            (C1762 - C1763) * C92) *
               C139824 * C140002) *
              C806 +
          (((C265 * C813 - C139835 * C984) * C100 +
            (C265 * C822 - C139835 * C989) * C89 + (C995 - C996) * C102 +
            (C997 - C998) * C90 + (C999 - C1000) * C104 +
            (C1001 - C1002) * C91 + (C1003 - C1004) * C106 +
            (C1005 - C1006) * C92) *
               C139824 * C4096 +
           ((C139835 * C3594 - C265 * C3438) * C100 +
            (C139835 * C3598 - C265 * C3443) * C89 +
            (C139835 * C3595 - C265 * C3439) * C102 +
            (C139835 * C3599 - C265 * C3445) * C90 +
            (C139835 * C3596 - C265 * C3440) * C104 +
            (C139835 * C3600 - C265 * C3447) * C91 +
            (C139835 * C3597 - C265 * C3441) * C106 +
            (C139835 * C3601 - C265 * C3449) * C92) *
               C139824 * C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C13856 * C266 - C14015 * C108 + C13857 * C1741 - C14016 * C1570 +
             C13858 * C5397 - C14017 * C5273) *
                C5816 +
            (C13856 * C272 - C14015 * C115 + C13857 * C1746 - C14016 * C1579 +
             C13858 * C5401 - C14017 * C5278) *
                C5811 +
            (C14019 - C14020 + C14021 - C14022 + C14023 - C14024) * C5818 +
            (C14025 - C14026 + C14027 - C14028 + C14029 - C14030) * C139736) *
               C139824 * C4096 +
           ((C14015 * C1570 - C13856 * C1741 + C14016 * C5273 - C13857 * C5397 +
             C14017 * C15623 - C13858 * C15912) *
                C5816 +
            (C14015 * C1579 - C13856 * C1746 + C14016 * C5278 - C13857 * C5401 +
             C14017 * C15628 - C13858 * C15915) *
                C5811 +
            (C15919 - C15920 + C15921 - C15922 + C15923 - C15924) * C5818 +
            (C15925 - C15926 + C15927 - C15928 + C15929 - C15930) * C139736) *
               C139824 * C140002) *
              C806 +
          (((C14015 * C813 - C13856 * C984 + C14016 * C3438 - C13857 * C3594 +
             C14017 * C13126 - C13858 * C13298) *
                C5816 +
            (C14015 * C822 - C13856 * C989 + C14016 * C3443 - C13857 * C3598 +
             C14017 * C13131 - C13858 * C13302) *
                C5811 +
            (C14872 - C14873 + C14874 - C14875 + C14876 - C14877) * C5818 +
            (C14878 - C14879 + C14880 - C14881 + C14882 - C14883) * C139736) *
               C139824 * C4096 +
           ((C13856 * C3594 - C14015 * C3438 + C13857 * C13298 -
             C14016 * C13126 + C13858 * C18532 - C14017 * C18302) *
                C5816 +
            (C13856 * C3598 - C14015 * C3443 + C13857 * C13302 -
             C14016 * C13131 + C13858 * C18534 - C14017 * C18305) *
                C5811 +
            (C13856 * C3595 - C14015 * C3439 + C13857 * C13299 -
             C14016 * C13127 + C13858 * C18533 - C14017 * C18303) *
                C5818 +
            (C13856 * C3599 - C14015 * C3445 + C13857 * C13303 -
             C14016 * C13133 + C13858 * C18535 - C14017 * C18307) *
                C139736) *
               C139824 * C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eeyx[25] +=
        (-std::pow(Pi, 2.5) *
         ((((C5811 * C114 - C5816 * C108 + C139736 * C116 - C5818 * C109) *
                C5894 +
            (C5811 * C354 - C5816 * C348 + C139736 * C355 - C5818 * C349) *
                C5813 +
            (C7039 - C7040 + C7041 - C7042) * C5895 +
            (C7043 - C7044 + C7045 - C7046) * C5814 + C9893 * C5896 +
            C9894 * C5815) *
               C139835 * C4096 +
           ((C5816 * C1570 - C5811 * C1578 + C5818 * C1569 - C139736 * C1576) *
                C5894 +
            (C5816 * C1829 - C5811 * C1834 + C5818 * C1830 - C139736 * C1835) *
                C5813 +
            (C10745 - C10746 + C10747 - C10748) * C5895 +
            (C10749 - C10750 + C10751 - C10752) * C5814 +
            (C10753 - C10754 + C10755 - C10756) * C5896 +
            (C10757 - C10758 + C10759 - C10760) * C5815) *
               C139835 * C140002) *
              C806 +
          (((C7040 - C7039 + C7042 - C7041) * C5894 +
            (C7044 - C7043 + C7046 - C7045) * C5813 +
            (C7048 - C7047 + C7050 - C7049) * C5895 +
            (C7052 - C7051 + C7054 - C7053) * C5814 +
            (C9885 - C9886 + C9887 - C9888) * C5896 +
            (C9889 - C9890 + C9891 - C9892) * C5815) *
               C139835 * C4096 +
           ((C10746 - C10745 + C10748 - C10747) * C5894 +
            (C10750 - C10749 + C10752 - C10751) * C5813 +
            (C10754 - C10753 + C10756 - C10755) * C5895 +
            (C10758 - C10757 + C10760 - C10759) * C5814 +
            (C5811 * C10396 - C5816 * C10394 + C139736 * C10398 -
             C5818 * C10395) *
                C5896 +
            (C5811 * C10742 - C5816 * C10740 + C139736 * C10743 -
             C5818 * C10741) *
                C5815) *
               C139835 * C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C89 * C114 - C100 * C108 + C90 * C116 - C102 * C109 + C91 * C118 -
             C104 * C110 + C92 * C120 - C106 * C111) *
                C182 +
            (C89 * C354 - C100 * C348 + C90 * C355 - C102 * C349 + C91 * C356 -
             C104 * C350 + C92 * C357 - C106 * C351) *
                C139824) *
               C139835 * C4096 +
           ((C100 * C1570 - C89 * C1578 + C102 * C1569 - C90 * C1576 +
             C104 * C1568 - C91 * C1574 + C106 * C1567 - C92 * C1572) *
                C182 +
            (C100 * C1829 - C89 * C1834 + C102 * C1830 - C90 * C1835 +
             C104 * C1831 - C91 * C1836 + C106 * C1832 - C92 * C1837) *
                C139824) *
               C139835 * C140002) *
              C806 +
          (((C100 * C813 - C89 * C821 + C102 * C812 - C90 * C819 + C104 * C811 -
             C91 * C817 + C106 * C810 - C92 * C815) *
                C182 +
            (C100 * C1072 - C89 * C1077 + C102 * C1073 - C90 * C1078 +
             C104 * C1074 - C91 * C1079 + C106 * C1075 - C92 * C1080) *
                C139824) *
               C139835 * C4096 +
           ((C89 * C3442 - C100 * C3438 + C90 * C3444 - C102 * C3439 +
             C91 * C3446 - C104 * C3440 + C92 * C3448 - C106 * C3441) *
                C182 +
            (C89 * C3672 - C100 * C3668 + C90 * C3673 - C102 * C3669 +
             C91 * C3674 - C104 * C3670 + C92 * C3675 - C106 * C3671) *
                C139824) *
               C139835 * C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C5811 * C114 - C5816 * C108 + C139736 * C116 - C5818 * C109) *
                 C182 +
             (C5811 * C354 - C5816 * C348 + C139736 * C355 - C5818 * C349) *
                 C139824) *
                C13856 +
            ((C16035 - C16036 + C16037 - C16038) * C182 +
             (C16039 - C16040 + C16041 - C16042) * C139824) *
                C13857 +
            ((C16043 - C16044 + C16045 - C16046) * C182 +
             (C16047 - C16048 + C16049 - C16050) * C139824) *
                C13858) *
               C4096 +
           (((C16036 - C16035 + C16038 - C16037) * C182 +
             (C16040 - C16039 + C16042 - C16041) * C139824) *
                C13856 +
            ((C16044 - C16043 + C16046 - C16045) * C182 +
             (C16048 - C16047 + C16050 - C16049) * C139824) *
                C13857 +
            ((C5816 * C15623 - C5811 * C15627 + C5818 * C15622 -
              C139736 * C15625) *
                 C182 +
             (C5816 * C16028 - C5811 * C16031 + C5818 * C16029 -
              C139736 * C16032) *
                 C139824) *
                C13858) *
               C140002) *
              C806 +
          ((((C7040 - C7039 + C7042 - C7041) * C182 +
             (C7044 - C7043 + C7046 - C7045) * C139824) *
                C13856 +
            ((C10745 - C10746 + C10747 - C10748) * C182 +
             (C10749 - C10750 + C10751 - C10752) * C139824) *
                C13857 +
            ((C18639 - C18640 + C18641 - C18642) * C182 +
             (C18643 - C18644 + C18645 - C18646) * C139824) *
                C13858) *
               C4096 +
           (((C10746 - C10745 + C10748 - C10747) * C182 +
             (C10750 - C10749 + C10752 - C10751) * C139824) *
                C13856 +
            ((C18640 - C18639 + C18642 - C18641) * C182 +
             (C18644 - C18643 + C18646 - C18645) * C139824) *
                C13857 +
            ((C5811 * C18304 - C5816 * C18302 + C139736 * C18306 -
              C5818 * C18303) *
                 C182 +
             (C5811 * C18636 - C5816 * C18634 + C139736 * C18637 -
              C5818 * C18635) *
                 C139824) *
                C13858) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eeyy[25] +=
        (-std::pow(Pi, 2.5) *
         ((((C5894 * C183 - C6151 * C108 - C5894 * C348 + C5813 * C411 +
             C5895 * C896 - C6152 * C813 - C5895 * C1072 + C5814 * C1151 +
             C5896 * C2974 - C6153 * C2908 - C5896 * C3090 + C5815 * C3148) *
                C5811 +
            (C6191 + C6192 + C6193) * C139736) *
               C139835 * C4096 -
           ((C8217 + C8218 + C8219) * C139736 +
            (C5896 * C7863 - C6153 * C7754 - C5896 * C8091 + C5815 * C8196 +
             C5895 * C3520 - C6152 * C3438 - C5895 * C3668 + C5814 * C3742 +
             C5894 * C1653 - C6151 * C1570 - C5894 * C1829 + C5813 * C1908) *
                C5811) *
               C139835 * C140002) *
              C806 +
          (((C5894 * C3520 - C6151 * C3438 - C5894 * C3668 + C5813 * C3742 +
             C5895 * C7863 - C6152 * C7754 - C5895 * C8091 + C5814 * C8196 +
             C5896 * C10528 - C6153 * C10394 - C5896 * C10740 +
             C5815 * C10858) *
                C5811 +
            (C5894 * C3521 - C6151 * C3439 - C5894 * C3669 + C5813 * C3743 +
             C5895 * C7864 - C6152 * C7753 - C5895 * C8092 + C5814 * C8195 +
             C5896 * C10529 - C6153 * C10395 - C5896 * C10741 +
             C5815 * C10859) *
                C139736) *
               C139835 * C140002 -
           ((C7190 + C7191 + C7192) * C139736 +
            (C5896 * C6792 - C6153 * C6627 - C5896 * C7032 + C5815 * C7169 +
             C5895 * C2974 - C6152 * C2908 - C5895 * C3090 + C5814 * C3148 +
             C5894 * C896 - C6151 * C813 - C5894 * C1072 + C5813 * C1151) *
                C5811) *
               C139835 * C4096) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C182 * C183 - C410 * C108 - C182 * C348 + C139824 * C411) * C89 +
            C442 * C90 + C443 * C91 + C444 * C92) *
               C139835 * C4096 -
           (C1929 * C92 + C1930 * C91 + C1931 * C90 +
            (C182 * C1653 - C410 * C1570 - C182 * C1829 + C139824 * C1908) *
                C89) *
               C139835 * C140002) *
              C806 +
          (((C182 * C3520 - C410 * C3438 - C182 * C3668 + C139824 * C3742) *
                C89 +
            (C182 * C3521 - C410 * C3439 - C182 * C3669 + C139824 * C3743) *
                C90 +
            (C182 * C3522 - C410 * C3440 - C182 * C3670 + C139824 * C3744) *
                C91 +
            (C182 * C3523 - C410 * C3441 - C182 * C3671 + C139824 * C3745) *
                C92) *
               C139835 * C140002 -
           (C1172 * C92 + C1173 * C91 + C1174 * C90 +
            (C182 * C896 - C410 * C813 - C182 * C1072 + C139824 * C1151) *
                C89) *
               C139835 * C4096) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C182 * C183 - C410 * C108 - C182 * C348 + C139824 * C411) *
                 C5811 +
             C442 * C139736) *
                C13856 +
            (C16195 + C16172) * C13857 + (C16196 + C16177) * C13858) *
               C4096 -
           ((C16194 * C139736 + (C182 * C15788 - C410 * C15623 - C182 * C16028 +
                                 C139824 * C16165) *
                                    C5811) *
                C13858 +
            (C16177 + C16196) * C13857 + (C16172 + C16195) * C13856) *
               C140002) *
              C806 +
          (((C18763 + C18751) * C13856 + (C18764 + C18756) * C13857 +
            ((C182 * C18422 - C410 * C18302 - C182 * C18634 +
              C139824 * C18744) *
                 C5811 +
             (C182 * C18423 - C410 * C18303 - C182 * C18635 +
              C139824 * C18745) *
                 C139736) *
                C13858) *
               C140002 -
           ((C18756 + C18764) * C13858 + (C18751 + C18763) * C13857 +
            (C1174 * C139736 +
             (C182 * C896 - C410 * C813 - C182 * C1072 + C139824 * C1151) *
                 C5811) *
                C13856) *
               C4096) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eeyz[25] +=
        (-std::pow(Pi, 2.5) *
         (((((C139835 * C266 - C265 * C108) * C5894 +
             (C139835 * C495 - C265 * C348) * C5813 + (C6915 - C6916) * C5895 +
             (C7294 - C7295) * C5814 + C9790 * C5896 + C10047 * C5815) *
                C5811 +
            ((C279 - C280) * C5894 + (C502 - C503) * C5813 + C6919 * C5895 +
             C7298 * C5814 + C6925 * C5896 + C7299 * C5815) *
                C139736) *
               C4096 +
           (((C265 * C1570 - C139835 * C1741) * C5894 +
             (C265 * C1829 - C139835 * C1997) * C5813 +
             (C10635 - C10636) * C5895 + (C10961 - C10962) * C5814 +
             (C10639 - C10640) * C5896 + (C10963 - C10964) * C5815) *
                C5811 +
            ((C1752 - C1753) * C5894 + (C2003 - C2004) * C5813 +
             (C7986 - C7987) * C5895 + (C8321 - C8322) * C5814 +
             (C7990 - C7991) * C5896 + (C8323 - C8324) * C5815) *
                C139736) *
               C140002) *
              C806 +
          ((((C6916 - C6915) * C5894 + (C7295 - C7294) * C5813 +
             (C6922 - C6921) * C5895 + (C7297 - C7296) * C5814 +
             (C9794 - C9795) * C5896 + (C10048 - C10049) * C5815) *
                C5811 +
            (C6927 * C5894 + C7300 * C5813 + C6929 * C5895 + C7301 * C5814 +
             (C6931 - C6932) * C5896 + (C7302 - C7303) * C5815) *
                C139736) *
               C4096 +
           (((C10636 - C10635) * C5894 + (C10962 - C10961) * C5813 +
             (C10640 - C10639) * C5895 + (C10964 - C10963) * C5814 +
             (C139835 * C10630 - C265 * C10394) * C5896 +
             (C139835 * C10958 - C265 * C10740) * C5815) *
                C5811 +
            ((C7987 - C7986) * C5894 + (C8322 - C8321) * C5813 +
             (C7991 - C7990) * C5895 + (C8324 - C8323) * C5814 +
             (C139835 * C10631 - C265 * C10395) * C5896 +
             (C139835 * C10959 - C265 * C10741) * C5815) *
                C139736) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C139835 * C266 - C265 * C108) * C182 +
             (C139835 * C495 - C265 * C348) * C139824) *
                C89 +
            ((C279 - C280) * C182 + (C502 - C503) * C139824) * C90 +
            C516 * C91 + C517 * C92) *
               C4096 +
           (((C265 * C1570 - C139835 * C1741) * C182 +
             (C265 * C1829 - C139835 * C1997) * C139824) *
                C89 +
            ((C1752 - C1753) * C182 + (C2003 - C2004) * C139824) * C90 +
            ((C1756 - C1757) * C182 + (C2005 - C2006) * C139824) * C91 +
            ((C1760 - C1761) * C182 + (C2007 - C2008) * C139824) * C92) *
               C140002) *
              C806 +
          ((((C265 * C813 - C139835 * C984) * C182 +
             (C265 * C1072 - C139835 * C1240) * C139824) *
                C89 +
            ((C995 - C996) * C182 + (C1246 - C1247) * C139824) * C90 +
            ((C999 - C1000) * C182 + (C1248 - C1249) * C139824) * C91 +
            ((C1003 - C1004) * C182 + (C1250 - C1251) * C139824) * C92) *
               C4096 +
           (((C139835 * C3594 - C265 * C3438) * C182 +
             (C139835 * C3812 - C265 * C3668) * C139824) *
                C89 +
            ((C139835 * C3595 - C265 * C3439) * C182 +
             (C139835 * C3813 - C265 * C3669) * C139824) *
                C90 +
            ((C139835 * C3596 - C265 * C3440) * C182 +
             (C139835 * C3814 - C265 * C3670) * C139824) *
                C91 +
            ((C139835 * C3597 - C265 * C3441) * C182 +
             (C139835 * C3815 - C265 * C3671) * C139824) *
                C92) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C13856 * C266 - C14015 * C108 + C13857 * C1741 - C14016 * C1570 +
              C13858 * C5397 - C14017 * C5273) *
                 C182 +
             (C13856 * C495 - C14015 * C348 + C13857 * C1997 - C14016 * C1829 +
              C13858 * C5567 - C14017 * C5455) *
                 C139824) *
                C5811 +
            ((C14019 - C14020 + C14021 - C14022 + C14023 - C14024) * C182 +
             (C14279 - C14280 + C14281 - C14282 + C14283 - C14284) * C139824) *
                C139736) *
               C4096 +
           (((C14015 * C1570 - C13856 * C1741 + C14016 * C5273 -
              C13857 * C5397 + C14017 * C15623 - C13858 * C15912) *
                 C182 +
             (C14015 * C1829 - C13856 * C1997 + C14016 * C5455 -
              C13857 * C5567 + C14017 * C16028 - C13858 * C16294) *
                 C139824) *
                C5811 +
            ((C15919 - C15920 + C15921 - C15922 + C15923 - C15924) * C182 +
             (C16298 - C16299 + C16300 - C16301 + C16302 - C16303) * C139824) *
                C139736) *
               C140002) *
              C806 +
          ((((C14015 * C813 - C13856 * C984 + C14016 * C3438 - C13857 * C3594 +
              C14017 * C13126 - C13858 * C13298) *
                 C182 +
             (C14015 * C1072 - C13856 * C1240 + C14016 * C3668 -
              C13857 * C3812 + C14017 * C13380 - C13858 * C13540) *
                 C139824) *
                C5811 +
            ((C14872 - C14873 + C14874 - C14875 + C14876 - C14877) * C182 +
             (C15196 - C15197 + C15198 - C15199 + C15200 - C15201) * C139824) *
                C139736) *
               C4096 +
           (((C13856 * C3594 - C14015 * C3438 + C13857 * C13298 -
              C14016 * C13126 + C13858 * C18532 - C14017 * C18302) *
                 C182 +
             (C13856 * C3812 - C14015 * C3668 + C13857 * C13540 -
              C14016 * C13380 + C13858 * C18862 - C14017 * C18634) *
                 C139824) *
                C5811 +
            ((C13856 * C3595 - C14015 * C3439 + C13857 * C13299 -
              C14016 * C13127 + C13858 * C18533 - C14017 * C18303) *
                 C182 +
             (C13856 * C3813 - C14015 * C3669 + C13857 * C13542 -
              C14016 * C13381 + C13858 * C18863 - C14017 * C18635) *
                 C139824) *
                C139736) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eezx[25] +=
        (-std::pow(Pi, 2.5) *
         (((((C5811 * C114 - C5816 * C108 + C139736 * C116 - C5818 * C109) *
                 C265 +
             (C5811 * C573 - C5816 * C567 + C139736 * C574 - C5818 * C568) *
                 C139835) *
                C5813 +
            ((C7039 - C7040 + C7041 - C7042) * C265 +
             (C7408 - C7409 + C7410 - C7411) * C139835) *
                C5814 +
            C10137 * C5815) *
               C4096 +
           (((C5816 * C1570 - C5811 * C1578 + C5818 * C1569 - C139736 * C1576) *
                 C265 +
             (C5816 * C2074 - C5811 * C2079 + C5818 * C2075 - C139736 * C2080) *
                 C139835) *
                C5813 +
            ((C10745 - C10746 + C10747 - C10748) * C265 +
             (C11067 - C11068 + C11069 - C11070) * C139835) *
                C5814 +
            ((C10753 - C10754 + C10755 - C10756) * C265 +
             (C11071 - C11072 + C11073 - C11074) * C139835) *
                C5815) *
               C140002) *
              C806 +
          ((((C7040 - C7039 + C7042 - C7041) * C265 +
             (C7409 - C7408 + C7411 - C7410) * C139835) *
                C5813 +
            ((C7048 - C7047 + C7050 - C7049) * C265 +
             (C7413 - C7412 + C7415 - C7414) * C139835) *
                C5814 +
            ((C9885 - C9886 + C9887 - C9888) * C265 +
             (C10131 - C10132 + C10133 - C10134) * C139835) *
                C5815) *
               C4096 +
           (((C10746 - C10745 + C10748 - C10747) * C265 +
             (C11068 - C11067 + C11070 - C11069) * C139835) *
                C5813 +
            ((C10754 - C10753 + C10756 - C10755) * C265 +
             (C11072 - C11071 + C11074 - C11073) * C139835) *
                C5814 +
            ((C5811 * C10396 - C5816 * C10394 + C139736 * C10398 -
              C5818 * C10395) *
                 C265 +
             (C5811 * C11064 - C5816 * C11062 + C139736 * C11065 -
              C5818 * C11063) *
                 C139835) *
                C5815) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C89 * C114 - C100 * C108 + C90 * C116 - C102 * C109 + C91 * C118 -
             C104 * C110 + C92 * C120 - C106 * C111) *
                C265 +
            (C89 * C573 - C100 * C567 + C90 * C574 - C102 * C568 + C91 * C575 -
             C104 * C569 + C92 * C576 - C106 * C570) *
                C139835) *
               C139824 * C4096 +
           ((C100 * C1570 - C89 * C1578 + C102 * C1569 - C90 * C1576 +
             C104 * C1568 - C91 * C1574 + C106 * C1567 - C92 * C1572) *
                C265 +
            (C100 * C2074 - C89 * C2079 + C102 * C2075 - C90 * C2080 +
             C104 * C2076 - C91 * C2081 + C106 * C2077 - C92 * C2082) *
                C139835) *
               C139824 * C140002) *
              C806 +
          (((C100 * C813 - C89 * C821 + C102 * C812 - C90 * C819 + C104 * C811 -
             C91 * C817 + C106 * C810 - C92 * C815) *
                C265 +
            (C100 * C1317 - C89 * C1322 + C102 * C1318 - C90 * C1323 +
             C104 * C1319 - C91 * C1324 + C106 * C1320 - C92 * C1325) *
                C139835) *
               C139824 * C4096 +
           ((C89 * C3442 - C100 * C3438 + C90 * C3444 - C102 * C3439 +
             C91 * C3446 - C104 * C3440 + C92 * C3448 - C106 * C3441) *
                C265 +
            (C89 * C3886 - C100 * C3882 + C90 * C3887 - C102 * C3883 +
             C91 * C3888 - C104 * C3884 + C92 * C3889 - C106 * C3885) *
                C139835) *
               C139824 * C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C5811 * C114 - C5816 * C108 + C139736 * C116 - C5818 * C109) *
                C14015 +
            (C5811 * C573 - C5816 * C567 + C139736 * C574 - C5818 * C568) *
                C13856 +
            (C16035 - C16036 + C16037 - C16038) * C14016 +
            (C16408 - C16409 + C16410 - C16411) * C13857 +
            (C16043 - C16044 + C16045 - C16046) * C14017 +
            (C16412 - C16413 + C16414 - C16415) * C13858) *
               C139824 * C4096 +
           ((C16036 - C16035 + C16038 - C16037) * C14015 +
            (C16409 - C16408 + C16411 - C16410) * C13856 +
            (C16044 - C16043 + C16046 - C16045) * C14016 +
            (C16413 - C16412 + C16415 - C16414) * C13857 +
            (C5816 * C15623 - C5811 * C15627 + C5818 * C15622 -
             C139736 * C15625) *
                C14017 +
            (C5816 * C16401 - C5811 * C16404 + C5818 * C16402 -
             C139736 * C16405) *
                C13858) *
               C139824 * C140002) *
              C806 +
          (((C7040 - C7039 + C7042 - C7041) * C14015 +
            (C7409 - C7408 + C7411 - C7410) * C13856 +
            (C10745 - C10746 + C10747 - C10748) * C14016 +
            (C11067 - C11068 + C11069 - C11070) * C13857 +
            (C18639 - C18640 + C18641 - C18642) * C14017 +
            (C18967 - C18968 + C18969 - C18970) * C13858) *
               C139824 * C4096 +
           ((C10746 - C10745 + C10748 - C10747) * C14015 +
            (C11068 - C11067 + C11070 - C11069) * C13856 +
            (C18640 - C18639 + C18642 - C18641) * C14016 +
            (C18968 - C18967 + C18970 - C18969) * C13857 +
            (C5811 * C18304 - C5816 * C18302 + C139736 * C18306 -
             C5818 * C18303) *
                C14017 +
            (C5811 * C18964 - C5816 * C18962 + C139736 * C18965 -
             C5818 * C18963) *
                C13858) *
               C139824 * C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eezy[25] +=
        (-std::pow(Pi, 2.5) *
         (((((C5813 * C183 - C5894 * C108 + C5814 * C896 - C5895 * C813 +
              C5815 * C2974 - C5896 * C2908) *
                 C265 +
             (C5813 * C629 - C5894 * C567 + C5814 * C1393 - C5895 * C1317 +
              C5815 * C3314 - C5896 * C3256) *
                 C139835) *
                C5811 +
            ((C5898 - C5899 + C5900 - C5901 + C5902 - C5903) * C265 +
             (C6423 - C6424 + C6425 - C6426 + C6427 - C6428) * C139835) *
                C139736) *
               C4096 +
           (((C5894 * C1570 - C5813 * C1653 + C5895 * C3438 - C5814 * C3520 +
              C5896 * C7754 - C5815 * C7863) *
                 C265 +
             (C5894 * C2074 - C5813 * C2150 + C5895 * C3882 - C5814 * C3956 +
              C5896 * C8422 - C5815 * C8526) *
                 C139835) *
                C5811 +
            ((C7870 - C7871 + C7872 - C7873 + C7874 - C7875) * C265 +
             (C8530 - C8531 + C8532 - C8533 + C8534 - C8535) * C139835) *
                C139736) *
               C140002) *
              C806 +
          ((((C5894 * C813 - C5813 * C896 + C5895 * C2908 - C5814 * C2974 +
              C5896 * C6627 - C5815 * C6792) *
                 C265 +
             (C5894 * C1317 - C5813 * C1393 + C5895 * C3256 - C5814 * C3314 +
              C5896 * C7401 - C5815 * C7521) *
                 C139835) *
                C5811 +
            ((C6799 - C6800 + C6801 - C6802 + C6803 - C6804) * C265 +
             (C7525 - C7526 + C7527 - C7528 + C7529 - C7530) * C139835) *
                C139736) *
               C4096 +
           (((C5813 * C3520 - C5894 * C3438 + C5814 * C7863 - C5895 * C7754 +
              C5815 * C10528 - C5896 * C10394) *
                 C265 +
             (C5813 * C3956 - C5894 * C3882 + C5814 * C8526 - C5895 * C8422 +
              C5815 * C11172 - C5896 * C11062) *
                 C139835) *
                C5811 +
            ((C5813 * C3521 - C5894 * C3439 + C5814 * C7864 - C5895 * C7753 +
              C5815 * C10529 - C5896 * C10395) *
                 C265 +
             (C5813 * C3957 - C5894 * C3883 + C5814 * C8527 - C5895 * C8423 +
              C5815 * C11173 - C5896 * C11063) *
                 C139835) *
                C139736) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C139824 * C183 - C182 * C108) * C265 +
             (C139824 * C629 - C182 * C567) * C139835) *
                C89 +
            ((C196 - C197) * C265 + (C636 - C637) * C139835) * C90 +
            C650 * C91 + C651 * C92) *
               C4096 +
           (((C182 * C1570 - C139824 * C1653) * C265 +
             (C182 * C2074 - C139824 * C2150) * C139835) *
                C89 +
            ((C1664 - C1665) * C265 + (C2156 - C2157) * C139835) * C90 +
            ((C1668 - C1669) * C265 + (C2158 - C2159) * C139835) * C91 +
            ((C1672 - C1673) * C265 + (C2160 - C2161) * C139835) * C92) *
               C140002) *
              C806 +
          ((((C182 * C813 - C139824 * C896) * C265 +
             (C182 * C1317 - C139824 * C1393) * C139835) *
                C89 +
            ((C907 - C908) * C265 + (C1399 - C1400) * C139835) * C90 +
            ((C911 - C912) * C265 + (C1401 - C1402) * C139835) * C91 +
            ((C915 - C916) * C265 + (C1403 - C1404) * C139835) * C92) *
               C4096 +
           (((C139824 * C3520 - C182 * C3438) * C265 +
             (C139824 * C3956 - C182 * C3882) * C139835) *
                C89 +
            ((C139824 * C3521 - C182 * C3439) * C265 +
             (C139824 * C3957 - C182 * C3883) * C139835) *
                C90 +
            ((C139824 * C3522 - C182 * C3440) * C265 +
             (C139824 * C3958 - C182 * C3884) * C139835) *
                C91 +
            ((C139824 * C3523 - C182 * C3441) * C265 +
             (C139824 * C3959 - C182 * C3885) * C139835) *
                C92) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C139824 * C183 - C182 * C108) * C14015 +
             (C139824 * C629 - C182 * C567) * C13856 +
             (C15795 - C15796) * C14016 + (C16525 - C16526) * C13857 +
             (C15801 - C15802) * C14017 + (C16527 - C16528) * C13858) *
                C5811 +
            ((C196 - C197) * C14015 + (C636 - C637) * C13856 + C15799 * C14016 +
             C16529 * C13857 + C15805 * C14017 + C16530 * C13858) *
                C139736) *
               C4096 +
           (((C15796 - C15795) * C14015 + (C16526 - C16525) * C13856 +
             (C15802 - C15801) * C14016 + (C16528 - C16527) * C13857 +
             (C182 * C15623 - C139824 * C15788) * C14017 +
             (C182 * C16401 - C139824 * C16521) * C13858) *
                C5811 +
            (C15807 * C14015 + C16531 * C13856 + C15809 * C14016 +
             C16532 * C13857 + (C15811 - C15812) * C14017 +
             (C16533 - C16534) * C13858) *
                C139736) *
               C140002) *
              C806 +
          ((((C182 * C813 - C139824 * C896) * C14015 +
             (C182 * C1317 - C139824 * C1393) * C13856 +
             (C18427 - C18428) * C14016 + (C19071 - C19072) * C13857 +
             (C18431 - C18432) * C14017 + (C19073 - C19074) * C13858) *
                C5811 +
            ((C907 - C908) * C14015 + (C1399 - C1400) * C13856 +
             (C14764 - C14765) * C14016 + (C15401 - C15402) * C13857 +
             (C14768 - C14769) * C14017 + (C15403 - C15404) * C13858) *
                C139736) *
               C4096 +
           (((C18428 - C18427) * C14015 + (C19072 - C19071) * C13856 +
             (C18432 - C18431) * C14016 + (C19074 - C19073) * C13857 +
             (C139824 * C18422 - C182 * C18302) * C14017 +
             (C139824 * C19068 - C182 * C18962) * C13858) *
                C5811 +
            ((C14765 - C14764) * C14015 + (C15402 - C15401) * C13856 +
             (C14769 - C14768) * C14016 + (C15404 - C15403) * C13857 +
             (C139824 * C18423 - C182 * C18303) * C14017 +
             (C139824 * C19069 - C182 * C18963) * C13858) *
                C139736) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eezz[25] +=
        (-std::pow(Pi, 2.5) *
         (((((C265 * C266 - C701 * C108 - C265 * C567 + C139835 * C702) *
                 C5813 +
             C7652 * C5814 + C7653 * C5815) *
                C5811 +
            (C6509 + C6510 + C6527) * C139736) *
               C4096 -
           ((C8652 + C8653 + C8645) * C139736 +
            (C11287 * C5815 + C11288 * C5814 +
             (C265 * C1741 - C701 * C1570 - C265 * C2074 + C139835 * C2230) *
                 C5813) *
                C5811) *
               C140002) *
              C806 +
          (((C11288 * C5813 + C11287 * C5814 +
             (C265 * C10630 - C701 * C10394 - C265 * C11062 +
              C139835 * C11272) *
                 C5815) *
                C5811 +
            (C8651 * C5813 + C8650 * C5814 +
             (C265 * C10631 - C701 * C10395 - C265 * C11063 +
              C139835 * C11273) *
                 C5815) *
                C139736) *
               C140002 -
           ((C7655 + C7644 + C7645) * C139736 +
            (C10296 * C5815 + C7653 * C5814 + C7652 * C5813) * C5811) *
               C4096) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C265 * C266 - C701 * C108 - C265 * C567 + C139835 * C702) *
                C139824 * C89 +
            C737 * C90 + C738 * C91 + C739 * C92) *
               C4096 -
           (C2254 * C92 + C2255 * C91 + C2256 * C90 +
            (C265 * C1741 - C701 * C1570 - C265 * C2074 + C139835 * C2230) *
                C139824 * C89) *
               C140002) *
              C806 +
          (((C265 * C3594 - C701 * C3438 - C265 * C3882 + C139835 * C4026) *
                C139824 * C89 +
            (C265 * C3595 - C701 * C3439 - C265 * C3883 + C139835 * C4027) *
                C139824 * C90 +
            (C265 * C3596 - C701 * C3440 - C265 * C3884 + C139835 * C4028) *
                C139824 * C91 +
            (C265 * C3597 - C701 * C3441 - C265 * C3885 + C139835 * C4029) *
                C139824 * C92) *
               C140002 -
           (C1497 * C92 + C1498 * C91 + C1499 * C90 +
            (C265 * C984 - C701 * C813 - C265 * C1317 + C139835 * C1473) *
                C139824 * C89) *
               C4096) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C14015 * C266 - C14516 * C108 - C14015 * C567 + C13856 * C702 +
             C14016 * C1741 - C14517 * C1570 - C14016 * C2074 + C13857 * C2230 +
             C14017 * C5397 - C14518 * C5273 - C14017 * C5621 +
             C13858 * C5733) *
                C139824 * C5811 +
            (C14556 + C14557 + C14558) * C139824 * C139736) *
               C4096 -
           ((C16654 + C16655 + C16656) * C139824 * C139736 +
            (C14017 * C15912 - C14518 * C15623 - C14017 * C16401 +
             C13858 * C16633 + C14016 * C5397 - C14517 * C5273 -
             C14016 * C5621 + C13857 * C5733 + C14015 * C1741 - C14516 * C1570 -
             C14015 * C2074 + C13856 * C2230) *
                C139824 * C5811) *
               C140002) *
              C806 +
          (((C14015 * C3594 - C14516 * C3438 - C14015 * C3882 + C13856 * C4026 +
             C14016 * C13298 - C14517 * C13126 - C14016 * C13618 +
             C13857 * C13778 + C14017 * C18532 - C14518 * C18302 -
             C14017 * C18962 + C13858 * C19172) *
                C139824 * C5811 +
            (C14015 * C3595 - C14516 * C3439 - C14015 * C3883 + C13856 * C4027 +
             C14016 * C13299 - C14517 * C13127 - C14016 * C13619 +
             C13857 * C13780 + C14017 * C18533 - C14518 * C18303 -
             C14017 * C18963 + C13858 * C19173) *
                C139824 * C139736) *
               C140002 -
           ((C15522 + C15523 + C15524) * C139824 * C139736 +
            (C14017 * C13298 - C14518 * C13126 - C14017 * C13618 +
             C13858 * C13778 + C14016 * C3594 - C14517 * C3438 -
             C14016 * C3882 + C13857 * C4026 + C14015 * C984 - C14516 * C813 -
             C14015 * C1317 + C13856 * C1473) *
                C139824 * C5811) *
               C4096) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eexx[26] +=
        (-std::pow(Pi, 2.5) *
         (((C5816 * C114 - C5817 * C108 - C5816 * C115 + C5811 * C126 +
            C5818 * C116 - C5819 * C109 - C5818 * C117 + C139736 * C127) *
               C139835 * C5813 +
           (C6687 + C6688) * C139835 * C5814 + C9627 * C5815) *
              C5270 -
          ((C10427 + C10428) * C139835 * C5815 +
           (C10429 + C10430) * C139835 * C5814 +
           (C5818 * C1576 - C5819 * C1569 - C5818 * C1577 + C139736 * C1584 +
            C5816 * C1578 - C5817 * C1570 - C5816 * C1579 + C5811 * C1585) *
               C139835 * C5813) *
              C5271 +
          ((C5816 * C5277 - C5817 * C5273 - C5816 * C5278 + C5811 * C5285 +
            C5818 * C5279 - C5819 * C5274 - C5818 * C5280 + C139736 * C5286) *
               C139835 * C5813 +
           (C5816 * C13130 - C5817 * C13126 - C5816 * C13131 + C5811 * C13138 +
            C5818 * C13132 - C5819 * C13127 - C5818 * C13133 +
            C139736 * C13139) *
               C139835 * C5814 +
           (C5816 * C13134 - C5817 * C13128 - C5816 * C13135 + C5811 * C13140 +
            C5818 * C13136 - C5819 * C13129 - C5818 * C13137 +
            C139736 * C13141) *
               C139835 * C5815) *
              C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((C100 * C114 - C101 * C108 - C100 * C115 + C89 * C126 + C102 * C116 -
           C103 * C109 - C102 * C117 + C90 * C127 + C104 * C118 - C105 * C110 -
           C104 * C119 + C91 * C128 + C106 * C120 - C107 * C111 - C106 * C121 +
           C92 * C129) *
              C139835 * C139824 * C5270 -
          (C106 * C1572 - C107 * C1567 - C106 * C1573 + C92 * C1582 +
           C104 * C1574 - C105 * C1568 - C104 * C1575 + C91 * C1583 +
           C102 * C1576 - C103 * C1569 - C102 * C1577 + C90 * C1584 +
           C100 * C1578 - C101 * C1570 - C100 * C1579 + C89 * C1585) *
              C139835 * C139824 * C5271 +
          (C100 * C5277 - C101 * C5273 - C100 * C5278 + C89 * C5285 +
           C102 * C5279 - C103 * C5274 - C102 * C5280 + C90 * C5286 +
           C104 * C5281 - C105 * C5275 - C104 * C5282 + C91 * C5287 +
           C106 * C5283 - C107 * C5276 - C106 * C5284 + C92 * C5288) *
              C139835 * C139824 * C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C5816 * C114 - C5817 * C108 - C5816 * C115 + C5811 * C126 +
            C5818 * C116 - C5819 * C109 - C5818 * C117 + C139736 * C127) *
               C13856 +
           (C15683 + C15684) * C13857 + C21021 * C13858) *
              C139824 * C5270 -
          ((C21034 + C21035) * C13858 + (C15686 + C15685) * C13857 +
           (C15684 + C15683) * C13856) *
              C139824 * C5271 +
          (C21021 * C13856 + (C21035 + C21034) * C13857 +
           (C5816 * C21014 - C5817 * C21012 - C5816 * C21015 + C5811 * C21018 +
            C5818 * C21016 - C5819 * C21013 - C5818 * C21017 +
            C139736 * C21019) *
               C13858) *
              C139824 * C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q));
    d2eexy[26] +=
        (-std::pow(Pi, 2.5) *
         (((C5813 * C183 - C5894 * C108 + C5814 * C896 - C5895 * C813 +
            C5815 * C2974 - C5896 * C2908) *
               C5816 +
           (C5813 * C189 - C5894 * C115 + C5814 * C901 - C5895 * C822 +
            C5815 * C2978 - C5896 * C2913) *
               C5811 +
           (C5898 - C5899 + C5900 - C5901 + C5902 - C5903) * C5818 +
           (C5904 - C5905 + C5906 - C5907 + C5908 - C5909) * C139736) *
              C139835 * C5270 +
          ((C5894 * C1570 - C5813 * C1653 + C5895 * C3438 - C5814 * C3520 +
            C5896 * C7754 - C5815 * C7863) *
               C5816 +
           (C5894 * C1579 - C5813 * C1658 + C5895 * C3443 - C5814 * C3524 +
            C5896 * C7759 - C5815 * C7866) *
               C5811 +
           (C7870 - C7871 + C7872 - C7873 + C7874 - C7875) * C5818 +
           (C7876 - C7877 + C7878 - C7879 + C7880 - C7881) * C139736) *
              C139835 * C5271 +
          ((C5813 * C5339 - C5894 * C5273 + C5814 * C13216 - C5895 * C13126 +
            C5815 * C13217 - C5896 * C13128) *
               C5816 +
           (C5813 * C5343 - C5894 * C5278 + C5814 * C13220 - C5895 * C13131 +
            C5815 * C13221 - C5896 * C13135) *
               C5811 +
           (C5813 * C5340 - C5894 * C5274 + C5814 * C13218 - C5895 * C13127 +
            C5815 * C13219 - C5896 * C13129) *
               C5818 +
           (C5813 * C5344 - C5894 * C5280 + C5814 * C13222 - C5895 * C13133 +
            C5815 * C13223 - C5896 * C13137) *
               C139736) *
              C139835 * C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C139824 * C183 - C182 * C108) * C100 +
           (C139824 * C189 - C182 * C115) * C89 + (C196 - C197) * C102 +
           (C198 - C199) * C90 + C212 * C104 + C213 * C91 + C214 * C106 +
           C215 * C92) *
              C139835 * C5270 +
          ((C182 * C1570 - C139824 * C1653) * C100 +
           (C182 * C1579 - C139824 * C1658) * C89 + (C1664 - C1665) * C102 +
           (C1666 - C1667) * C90 + (C1668 - C1669) * C104 +
           (C1670 - C1671) * C91 + (C1672 - C1673) * C106 +
           (C1674 - C1675) * C92) *
              C139835 * C5271 +
          ((C139824 * C5339 - C182 * C5273) * C100 +
           (C139824 * C5343 - C182 * C5278) * C89 +
           (C139824 * C5340 - C182 * C5274) * C102 +
           (C139824 * C5344 - C182 * C5280) * C90 +
           (C139824 * C5341 - C182 * C5275) * C104 +
           (C139824 * C5345 - C182 * C5282) * C91 +
           (C139824 * C5342 - C182 * C5276) * C106 +
           (C139824 * C5346 - C182 * C5284) * C92) *
              C139835 * C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C139824 * C183 - C182 * C108) * C5816 +
            (C139824 * C189 - C182 * C115) * C5811 + (C196 - C197) * C5818 +
            (C198 - C199) * C139736) *
               C13856 +
           ((C15795 - C15796) * C5816 + (C15797 - C15798) * C5811 +
            C15799 * C5818 + C15800 * C139736) *
               C13857 +
           C21126 * C13858) *
              C5270 +
          (((C15796 - C15795) * C5816 + (C15798 - C15797) * C5811 +
            C15807 * C5818 + C15808 * C139736) *
               C13856 +
           ((C15802 - C15801) * C5816 + (C15804 - C15803) * C5811 +
            C15809 * C5818 + C15810 * C139736) *
               C13857 +
           ((C21118 - C21119) * C5816 + (C21120 - C21121) * C5811 +
            (C15811 - C15812) * C5818 + (C15813 - C15814) * C139736) *
               C13858) *
              C5271 +
          (C21126 * C13856 +
           ((C21119 - C21118) * C5816 + (C21121 - C21120) * C5811 +
            (C15812 - C15811) * C5818 + (C15814 - C15813) * C139736) *
               C13857 +
           ((C139824 * C21109 - C182 * C21012) * C5816 +
            (C139824 * C21111 - C182 * C21015) * C5811 +
            (C139824 * C21110 - C182 * C21013) * C5818 +
            (C139824 * C21112 - C182 * C21017) * C139736) *
               C13858) *
              C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q));
    d2eexz[26] +=
        (-std::pow(Pi, 2.5) *
         ((((C139835 * C266 - C265 * C108) * C5816 +
            (C139835 * C272 - C265 * C115) * C5811 + (C279 - C280) * C5818 +
            (C281 - C282) * C139736) *
               C5813 +
           ((C6915 - C6916) * C5816 + (C6917 - C6918) * C5811 + C6919 * C5818 +
            C6920 * C139736) *
               C5814 +
           C9802 * C5815) *
              C5270 +
          (((C265 * C1570 - C139835 * C1741) * C5816 +
            (C265 * C1579 - C139835 * C1746) * C5811 + (C1752 - C1753) * C5818 +
            (C1754 - C1755) * C139736) *
               C5813 +
           ((C10635 - C10636) * C5816 + (C10637 - C10638) * C5811 +
            (C7986 - C7987) * C5818 + (C7988 - C7989) * C139736) *
               C5814 +
           ((C10639 - C10640) * C5816 + (C10641 - C10642) * C5811 +
            (C7990 - C7991) * C5818 + (C7992 - C7993) * C139736) *
               C5815) *
              C5271 +
          (((C139835 * C5397 - C265 * C5273) * C5816 +
            (C139835 * C5401 - C265 * C5278) * C5811 +
            (C139835 * C5398 - C265 * C5274) * C5818 +
            (C139835 * C5402 - C265 * C5280) * C139736) *
               C5813 +
           ((C139835 * C13298 - C265 * C13126) * C5816 +
            (C139835 * C13302 - C265 * C13131) * C5811 +
            (C139835 * C13299 - C265 * C13127) * C5818 +
            (C139835 * C13303 - C265 * C13133) * C139736) *
               C5814 +
           ((C139835 * C13300 - C265 * C13128) * C5816 +
            (C139835 * C13304 - C265 * C13135) * C5811 +
            (C139835 * C13301 - C265 * C13129) * C5818 +
            (C139835 * C13305 - C265 * C13137) * C139736) *
               C5815) *
              C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C139835 * C266 - C265 * C108) * C100 +
           (C139835 * C272 - C265 * C115) * C89 + (C279 - C280) * C102 +
           (C281 - C282) * C90 + C295 * C104 + C296 * C91 + C297 * C106 +
           C298 * C92) *
              C139824 * C5270 +
          ((C265 * C1570 - C139835 * C1741) * C100 +
           (C265 * C1579 - C139835 * C1746) * C89 + (C1752 - C1753) * C102 +
           (C1754 - C1755) * C90 + (C1756 - C1757) * C104 +
           (C1758 - C1759) * C91 + (C1760 - C1761) * C106 +
           (C1762 - C1763) * C92) *
              C139824 * C5271 +
          ((C139835 * C5397 - C265 * C5273) * C100 +
           (C139835 * C5401 - C265 * C5278) * C89 +
           (C139835 * C5398 - C265 * C5274) * C102 +
           (C139835 * C5402 - C265 * C5280) * C90 +
           (C139835 * C5399 - C265 * C5275) * C104 +
           (C139835 * C5403 - C265 * C5282) * C91 +
           (C139835 * C5400 - C265 * C5276) * C106 +
           (C139835 * C5404 - C265 * C5284) * C92) *
              C139824 * C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C13856 * C266 - C14015 * C108 + C13857 * C1741 - C14016 * C1570 +
            C13858 * C5397 - C14017 * C5273) *
               C5816 +
           (C13856 * C272 - C14015 * C115 + C13857 * C1746 - C14016 * C1579 +
            C13858 * C5401 - C14017 * C5278) *
               C5811 +
           (C14019 - C14020 + C14021 - C14022 + C14023 - C14024) * C5818 +
           (C14025 - C14026 + C14027 - C14028 + C14029 - C14030) * C139736) *
              C139824 * C5270 +
          ((C14015 * C1570 - C13856 * C1741 + C14016 * C5273 - C13857 * C5397 +
            C14017 * C15623 - C13858 * C15912) *
               C5816 +
           (C14015 * C1579 - C13856 * C1746 + C14016 * C5278 - C13857 * C5401 +
            C14017 * C15628 - C13858 * C15915) *
               C5811 +
           (C15919 - C15920 + C15921 - C15922 + C15923 - C15924) * C5818 +
           (C15925 - C15926 + C15927 - C15928 + C15929 - C15930) * C139736) *
              C139824 * C5271 +
          ((C13856 * C5397 - C14015 * C5273 + C13857 * C15912 -
            C14016 * C15623 + C13858 * C21200 - C14017 * C21012) *
               C5816 +
           (C13856 * C5401 - C14015 * C5278 + C13857 * C15915 -
            C14016 * C15628 + C13858 * C21202 - C14017 * C21015) *
               C5811 +
           (C13856 * C5398 - C14015 * C5274 + C13857 * C15913 -
            C14016 * C15622 + C13858 * C21201 - C14017 * C21013) *
               C5818 +
           (C13856 * C5402 - C14015 * C5280 + C13857 * C15916 -
            C14016 * C15626 + C13858 * C21203 - C14017 * C21017) *
               C139736) *
              C139824 * C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q));
    d2eeyx[26] +=
        (-std::pow(Pi, 2.5) *
         (((C5811 * C114 - C5816 * C108 + C139736 * C116 - C5818 * C109) *
               C5894 +
           (C5811 * C354 - C5816 * C348 + C139736 * C355 - C5818 * C349) *
               C5813 +
           (C7039 - C7040 + C7041 - C7042) * C5895 +
           (C7043 - C7044 + C7045 - C7046) * C5814 + C9893 * C5896 +
           C9894 * C5815) *
              C139835 * C5270 +
          ((C5816 * C1570 - C5811 * C1578 + C5818 * C1569 - C139736 * C1576) *
               C5894 +
           (C5816 * C1829 - C5811 * C1834 + C5818 * C1830 - C139736 * C1835) *
               C5813 +
           (C10745 - C10746 + C10747 - C10748) * C5895 +
           (C10749 - C10750 + C10751 - C10752) * C5814 +
           (C10753 - C10754 + C10755 - C10756) * C5896 +
           (C10757 - C10758 + C10759 - C10760) * C5815) *
              C139835 * C5271 +
          ((C5811 * C5277 - C5816 * C5273 + C139736 * C5279 - C5818 * C5274) *
               C5894 +
           (C5811 * C5459 - C5816 * C5455 + C139736 * C5460 - C5818 * C5456) *
               C5813 +
           (C5811 * C13130 - C5816 * C13126 + C139736 * C13132 -
            C5818 * C13127) *
               C5895 +
           (C5811 * C13384 - C5816 * C13380 + C139736 * C13385 -
            C5818 * C13381) *
               C5814 +
           (C5811 * C13134 - C5816 * C13128 + C139736 * C13136 -
            C5818 * C13129) *
               C5896 +
           (C5811 * C13386 - C5816 * C13382 + C139736 * C13387 -
            C5818 * C13383) *
               C5815) *
              C139835 * C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C89 * C114 - C100 * C108 + C90 * C116 - C102 * C109 + C91 * C118 -
            C104 * C110 + C92 * C120 - C106 * C111) *
               C182 +
           (C89 * C354 - C100 * C348 + C90 * C355 - C102 * C349 + C91 * C356 -
            C104 * C350 + C92 * C357 - C106 * C351) *
               C139824) *
              C139835 * C5270 +
          ((C100 * C1570 - C89 * C1578 + C102 * C1569 - C90 * C1576 +
            C104 * C1568 - C91 * C1574 + C106 * C1567 - C92 * C1572) *
               C182 +
           (C100 * C1829 - C89 * C1834 + C102 * C1830 - C90 * C1835 +
            C104 * C1831 - C91 * C1836 + C106 * C1832 - C92 * C1837) *
               C139824) *
              C139835 * C5271 +
          ((C89 * C5277 - C100 * C5273 + C90 * C5279 - C102 * C5274 +
            C91 * C5281 - C104 * C5275 + C92 * C5283 - C106 * C5276) *
               C182 +
           (C89 * C5459 - C100 * C5455 + C90 * C5460 - C102 * C5456 +
            C91 * C5461 - C104 * C5457 + C92 * C5462 - C106 * C5458) *
               C139824) *
              C139835 * C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C5811 * C114 - C5816 * C108 + C139736 * C116 - C5818 * C109) *
                C182 +
            (C5811 * C354 - C5816 * C348 + C139736 * C355 - C5818 * C349) *
                C139824) *
               C13856 +
           ((C16035 - C16036 + C16037 - C16038) * C182 +
            (C16039 - C16040 + C16041 - C16042) * C139824) *
               C13857 +
           C21299 * C13858) *
              C5270 +
          (((C16036 - C16035 + C16038 - C16037) * C182 +
            (C16040 - C16039 + C16042 - C16041) * C139824) *
               C13856 +
           ((C16044 - C16043 + C16046 - C16045) * C182 +
            (C16048 - C16047 + C16050 - C16049) * C139824) *
               C13857 +
           ((C21287 - C21288 + C21289 - C21290) * C182 +
            (C21291 - C21292 + C21293 - C21294) * C139824) *
               C13858) *
              C5271 +
          (C21299 * C13856 +
           ((C21288 - C21287 + C21290 - C21289) * C182 +
            (C21292 - C21291 + C21294 - C21293) * C139824) *
               C13857 +
           ((C5811 * C21014 - C5816 * C21012 + C139736 * C21016 -
             C5818 * C21013) *
                C182 +
            (C5811 * C21280 - C5816 * C21278 + C139736 * C21281 -
             C5818 * C21279) *
                C139824) *
               C13858) *
              C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q));
    d2eeyy[26] +=
        (-std::pow(Pi, 2.5) *
         (((C5894 * C183 - C6151 * C108 - C5894 * C348 + C5813 * C411 +
            C5895 * C896 - C6152 * C813 - C5895 * C1072 + C5814 * C1151 +
            C5896 * C2974 - C6153 * C2908 - C5896 * C3090 + C5815 * C3148) *
               C5811 +
           (C6191 + C6192 + C6193) * C139736) *
              C139835 * C5270 -
          ((C8217 + C8218 + C8219) * C139736 +
           (C5896 * C7863 - C6153 * C7754 - C5896 * C8091 + C5815 * C8196 +
            C5895 * C3520 - C6152 * C3438 - C5895 * C3668 + C5814 * C3742 +
            C5894 * C1653 - C6151 * C1570 - C5894 * C1829 + C5813 * C1908) *
               C5811) *
              C139835 * C5271 +
          ((C5894 * C5339 - C6151 * C5273 - C5894 * C5455 + C5813 * C5513 +
            C5895 * C13216 - C6152 * C13126 - C5895 * C13380 + C5814 * C13462 +
            C5896 * C13217 - C6153 * C13128 - C5896 * C13382 + C5815 * C13463) *
               C5811 +
           (C5894 * C5340 - C6151 * C5274 - C5894 * C5456 + C5813 * C5514 +
            C5895 * C13218 - C6152 * C13127 - C5895 * C13381 + C5814 * C13464 +
            C5896 * C13219 - C6153 * C13129 - C5896 * C13383 + C5815 * C13465) *
               C139736) *
              C139835 * C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C182 * C183 - C410 * C108 - C182 * C348 + C139824 * C411) * C89 +
           C442 * C90 + C443 * C91 + C444 * C92) *
              C139835 * C5270 -
          (C1929 * C92 + C1930 * C91 + C1931 * C90 +
           (C182 * C1653 - C410 * C1570 - C182 * C1829 + C139824 * C1908) *
               C89) *
              C139835 * C5271 +
          ((C182 * C5339 - C410 * C5273 - C182 * C5455 + C139824 * C5513) *
               C89 +
           (C182 * C5340 - C410 * C5274 - C182 * C5456 + C139824 * C5514) *
               C90 +
           (C182 * C5341 - C410 * C5275 - C182 * C5457 + C139824 * C5515) *
               C91 +
           (C182 * C5342 - C410 * C5276 - C182 * C5458 + C139824 * C5516) *
               C92) *
              C139835 * C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C182 * C183 - C410 * C108 - C182 * C348 + C139824 * C411) * C5811 +
            C442 * C139736) *
               C13856 +
           (C16195 + C16172) * C13857 + C21376 * C13858) *
              C5270 -
          ((C21377 + C21385) * C13858 + (C16177 + C16196) * C13857 +
           (C16172 + C16195) * C13856) *
              C5271 +
          (C21376 * C13856 + (C21385 + C21377) * C13857 +
           ((C182 * C21109 - C410 * C21012 - C182 * C21278 + C139824 * C21373) *
                C5811 +
            (C182 * C21110 - C410 * C21013 - C182 * C21279 + C139824 * C21374) *
                C139736) *
               C13858) *
              C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q));
    d2eeyz[26] +=
        (-std::pow(Pi, 2.5) *
         ((((C139835 * C266 - C265 * C108) * C5894 +
            (C139835 * C495 - C265 * C348) * C5813 + (C6915 - C6916) * C5895 +
            (C7294 - C7295) * C5814 + C9790 * C5896 + C10047 * C5815) *
               C5811 +
           ((C279 - C280) * C5894 + (C502 - C503) * C5813 + C6919 * C5895 +
            C7298 * C5814 + C6925 * C5896 + C7299 * C5815) *
               C139736) *
              C5270 +
          (((C265 * C1570 - C139835 * C1741) * C5894 +
            (C265 * C1829 - C139835 * C1997) * C5813 +
            (C10635 - C10636) * C5895 + (C10961 - C10962) * C5814 +
            (C10639 - C10640) * C5896 + (C10963 - C10964) * C5815) *
               C5811 +
           ((C1752 - C1753) * C5894 + (C2003 - C2004) * C5813 +
            (C7986 - C7987) * C5895 + (C8321 - C8322) * C5814 +
            (C7990 - C7991) * C5896 + (C8323 - C8324) * C5815) *
               C139736) *
              C5271 +
          (((C139835 * C5397 - C265 * C5273) * C5894 +
            (C139835 * C5567 - C265 * C5455) * C5813 +
            (C139835 * C13298 - C265 * C13126) * C5895 +
            (C139835 * C13540 - C265 * C13380) * C5814 +
            (C139835 * C13300 - C265 * C13128) * C5896 +
            (C139835 * C13541 - C265 * C13382) * C5815) *
               C5811 +
           ((C139835 * C5398 - C265 * C5274) * C5894 +
            (C139835 * C5568 - C265 * C5456) * C5813 +
            (C139835 * C13299 - C265 * C13127) * C5895 +
            (C139835 * C13542 - C265 * C13381) * C5814 +
            (C139835 * C13301 - C265 * C13129) * C5896 +
            (C139835 * C13543 - C265 * C13383) * C5815) *
               C139736) *
              C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C139835 * C266 - C265 * C108) * C182 +
            (C139835 * C495 - C265 * C348) * C139824) *
               C89 +
           ((C279 - C280) * C182 + (C502 - C503) * C139824) * C90 + C516 * C91 +
           C517 * C92) *
              C5270 +
          (((C265 * C1570 - C139835 * C1741) * C182 +
            (C265 * C1829 - C139835 * C1997) * C139824) *
               C89 +
           ((C1752 - C1753) * C182 + (C2003 - C2004) * C139824) * C90 +
           ((C1756 - C1757) * C182 + (C2005 - C2006) * C139824) * C91 +
           ((C1760 - C1761) * C182 + (C2007 - C2008) * C139824) * C92) *
              C5271 +
          (((C139835 * C5397 - C265 * C5273) * C182 +
            (C139835 * C5567 - C265 * C5455) * C139824) *
               C89 +
           ((C139835 * C5398 - C265 * C5274) * C182 +
            (C139835 * C5568 - C265 * C5456) * C139824) *
               C90 +
           ((C139835 * C5399 - C265 * C5275) * C182 +
            (C139835 * C5569 - C265 * C5457) * C139824) *
               C91 +
           ((C139835 * C5400 - C265 * C5276) * C182 +
            (C139835 * C5570 - C265 * C5458) * C139824) *
               C92) *
              C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C13856 * C266 - C14015 * C108 + C13857 * C1741 - C14016 * C1570 +
             C13858 * C5397 - C14017 * C5273) *
                C182 +
            (C13856 * C495 - C14015 * C348 + C13857 * C1997 - C14016 * C1829 +
             C13858 * C5567 - C14017 * C5455) *
                C139824) *
               C5811 +
           ((C14019 - C14020 + C14021 - C14022 + C14023 - C14024) * C182 +
            (C14279 - C14280 + C14281 - C14282 + C14283 - C14284) * C139824) *
               C139736) *
              C5270 +
          (((C14015 * C1570 - C13856 * C1741 + C14016 * C5273 - C13857 * C5397 +
             C14017 * C15623 - C13858 * C15912) *
                C182 +
            (C14015 * C1829 - C13856 * C1997 + C14016 * C5455 - C13857 * C5567 +
             C14017 * C16028 - C13858 * C16294) *
                C139824) *
               C5811 +
           ((C15919 - C15920 + C15921 - C15922 + C15923 - C15924) * C182 +
            (C16298 - C16299 + C16300 - C16301 + C16302 - C16303) * C139824) *
               C139736) *
              C5271 +
          (((C13856 * C5397 - C14015 * C5273 + C13857 * C15912 -
             C14016 * C15623 + C13858 * C21200 - C14017 * C21012) *
                C182 +
            (C13856 * C5567 - C14015 * C5455 + C13857 * C16294 -
             C14016 * C16028 + C13858 * C21459 - C14017 * C21278) *
                C139824) *
               C5811 +
           ((C13856 * C5398 - C14015 * C5274 + C13857 * C15913 -
             C14016 * C15622 + C13858 * C21201 - C14017 * C21013) *
                C182 +
            (C13856 * C5568 - C14015 * C5456 + C13857 * C16295 -
             C14016 * C16029 + C13858 * C21460 - C14017 * C21279) *
                C139824) *
               C139736) *
              C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q));
    d2eezx[26] +=
        (-std::pow(Pi, 2.5) *
         ((((C5811 * C114 - C5816 * C108 + C139736 * C116 - C5818 * C109) *
                C265 +
            (C5811 * C573 - C5816 * C567 + C139736 * C574 - C5818 * C568) *
                C139835) *
               C5813 +
           ((C7039 - C7040 + C7041 - C7042) * C265 +
            (C7408 - C7409 + C7410 - C7411) * C139835) *
               C5814 +
           C10137 * C5815) *
              C5270 +
          (((C5816 * C1570 - C5811 * C1578 + C5818 * C1569 - C139736 * C1576) *
                C265 +
            (C5816 * C2074 - C5811 * C2079 + C5818 * C2075 - C139736 * C2080) *
                C139835) *
               C5813 +
           ((C10745 - C10746 + C10747 - C10748) * C265 +
            (C11067 - C11068 + C11069 - C11070) * C139835) *
               C5814 +
           ((C10753 - C10754 + C10755 - C10756) * C265 +
            (C11071 - C11072 + C11073 - C11074) * C139835) *
               C5815) *
              C5271 +
          (((C5811 * C5277 - C5816 * C5273 + C139736 * C5279 - C5818 * C5274) *
                C265 +
            (C5811 * C5625 - C5816 * C5621 + C139736 * C5626 - C5818 * C5622) *
                C139835) *
               C5813 +
           ((C5811 * C13130 - C5816 * C13126 + C139736 * C13132 -
             C5818 * C13127) *
                C265 +
            (C5811 * C13622 - C5816 * C13618 + C139736 * C13623 -
             C5818 * C13619) *
                C139835) *
               C5814 +
           ((C5811 * C13134 - C5816 * C13128 + C139736 * C13136 -
             C5818 * C13129) *
                C265 +
            (C5811 * C13624 - C5816 * C13620 + C139736 * C13625 -
             C5818 * C13621) *
                C139835) *
               C5815) *
              C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C89 * C114 - C100 * C108 + C90 * C116 - C102 * C109 + C91 * C118 -
            C104 * C110 + C92 * C120 - C106 * C111) *
               C265 +
           (C89 * C573 - C100 * C567 + C90 * C574 - C102 * C568 + C91 * C575 -
            C104 * C569 + C92 * C576 - C106 * C570) *
               C139835) *
              C139824 * C5270 +
          ((C100 * C1570 - C89 * C1578 + C102 * C1569 - C90 * C1576 +
            C104 * C1568 - C91 * C1574 + C106 * C1567 - C92 * C1572) *
               C265 +
           (C100 * C2074 - C89 * C2079 + C102 * C2075 - C90 * C2080 +
            C104 * C2076 - C91 * C2081 + C106 * C2077 - C92 * C2082) *
               C139835) *
              C139824 * C5271 +
          ((C89 * C5277 - C100 * C5273 + C90 * C5279 - C102 * C5274 +
            C91 * C5281 - C104 * C5275 + C92 * C5283 - C106 * C5276) *
               C265 +
           (C89 * C5625 - C100 * C5621 + C90 * C5626 - C102 * C5622 +
            C91 * C5627 - C104 * C5623 + C92 * C5628 - C106 * C5624) *
               C139835) *
              C139824 * C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C5811 * C114 - C5816 * C108 + C139736 * C116 - C5818 * C109) *
               C14015 +
           (C5811 * C573 - C5816 * C567 + C139736 * C574 - C5818 * C568) *
               C13856 +
           (C16035 - C16036 + C16037 - C16038) * C14016 +
           (C16408 - C16409 + C16410 - C16411) * C13857 + C21295 * C14017 +
           C21546 * C13858) *
              C139824 * C5270 +
          ((C16036 - C16035 + C16038 - C16037) * C14015 +
           (C16409 - C16408 + C16411 - C16410) * C13856 +
           (C16044 - C16043 + C16046 - C16045) * C14016 +
           (C16413 - C16412 + C16415 - C16414) * C13857 +
           (C21287 - C21288 + C21289 - C21290) * C14017 +
           (C21542 - C21543 + C21544 - C21545) * C13858) *
              C139824 * C5271 +
          (C21295 * C14015 + C21546 * C13856 +
           (C21288 - C21287 + C21290 - C21289) * C14016 +
           (C21543 - C21542 + C21545 - C21544) * C13857 +
           (C5811 * C21014 - C5816 * C21012 + C139736 * C21016 -
            C5818 * C21013) *
               C14017 +
           (C5811 * C21537 - C5816 * C21535 + C139736 * C21538 -
            C5818 * C21536) *
               C13858) *
              C139824 * C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q));
    d2eezy[26] +=
        (-std::pow(Pi, 2.5) *
         ((((C5813 * C183 - C5894 * C108 + C5814 * C896 - C5895 * C813 +
             C5815 * C2974 - C5896 * C2908) *
                C265 +
            (C5813 * C629 - C5894 * C567 + C5814 * C1393 - C5895 * C1317 +
             C5815 * C3314 - C5896 * C3256) *
                C139835) *
               C5811 +
           ((C5898 - C5899 + C5900 - C5901 + C5902 - C5903) * C265 +
            (C6423 - C6424 + C6425 - C6426 + C6427 - C6428) * C139835) *
               C139736) *
              C5270 +
          (((C5894 * C1570 - C5813 * C1653 + C5895 * C3438 - C5814 * C3520 +
             C5896 * C7754 - C5815 * C7863) *
                C265 +
            (C5894 * C2074 - C5813 * C2150 + C5895 * C3882 - C5814 * C3956 +
             C5896 * C8422 - C5815 * C8526) *
                C139835) *
               C5811 +
           ((C7870 - C7871 + C7872 - C7873 + C7874 - C7875) * C265 +
            (C8530 - C8531 + C8532 - C8533 + C8534 - C8535) * C139835) *
               C139736) *
              C5271 +
          (((C5813 * C5339 - C5894 * C5273 + C5814 * C13216 - C5895 * C13126 +
             C5815 * C13217 - C5896 * C13128) *
                C265 +
            (C5813 * C5679 - C5894 * C5621 + C5814 * C13700 - C5895 * C13618 +
             C5815 * C13701 - C5896 * C13620) *
                C139835) *
               C5811 +
           ((C5813 * C5340 - C5894 * C5274 + C5814 * C13218 - C5895 * C13127 +
             C5815 * C13219 - C5896 * C13129) *
                C265 +
            (C5813 * C5680 - C5894 * C5622 + C5814 * C13702 - C5895 * C13619 +
             C5815 * C13703 - C5896 * C13621) *
                C139835) *
               C139736) *
              C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C139824 * C183 - C182 * C108) * C265 +
            (C139824 * C629 - C182 * C567) * C139835) *
               C89 +
           ((C196 - C197) * C265 + (C636 - C637) * C139835) * C90 + C650 * C91 +
           C651 * C92) *
              C5270 +
          (((C182 * C1570 - C139824 * C1653) * C265 +
            (C182 * C2074 - C139824 * C2150) * C139835) *
               C89 +
           ((C1664 - C1665) * C265 + (C2156 - C2157) * C139835) * C90 +
           ((C1668 - C1669) * C265 + (C2158 - C2159) * C139835) * C91 +
           ((C1672 - C1673) * C265 + (C2160 - C2161) * C139835) * C92) *
              C5271 +
          (((C139824 * C5339 - C182 * C5273) * C265 +
            (C139824 * C5679 - C182 * C5621) * C139835) *
               C89 +
           ((C139824 * C5340 - C182 * C5274) * C265 +
            (C139824 * C5680 - C182 * C5622) * C139835) *
               C90 +
           ((C139824 * C5341 - C182 * C5275) * C265 +
            (C139824 * C5681 - C182 * C5623) * C139835) *
               C91 +
           ((C139824 * C5342 - C182 * C5276) * C265 +
            (C139824 * C5682 - C182 * C5624) * C139835) *
               C92) *
              C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C139824 * C183 - C182 * C108) * C14015 +
            (C139824 * C629 - C182 * C567) * C13856 +
            (C15795 - C15796) * C14016 + (C16525 - C16526) * C13857 +
            C21114 * C14017 + C21623 * C13858) *
               C5811 +
           ((C196 - C197) * C14015 + (C636 - C637) * C13856 + C15799 * C14016 +
            C16529 * C13857 + C15805 * C14017 + C16530 * C13858) *
               C139736) *
              C5270 +
          (((C15796 - C15795) * C14015 + (C16526 - C16525) * C13856 +
            (C15802 - C15801) * C14016 + (C16528 - C16527) * C13857 +
            (C21118 - C21119) * C14017 + (C21624 - C21625) * C13858) *
               C5811 +
           (C15807 * C14015 + C16531 * C13856 + C15809 * C14016 +
            C16532 * C13857 + (C15811 - C15812) * C14017 +
            (C16533 - C16534) * C13858) *
               C139736) *
              C5271 +
          ((C21114 * C14015 + C21623 * C13856 + (C21119 - C21118) * C14016 +
            (C21625 - C21624) * C13857 +
            (C139824 * C21109 - C182 * C21012) * C14017 +
            (C139824 * C21620 - C182 * C21535) * C13858) *
               C5811 +
           (C15805 * C14015 + C16530 * C13856 + (C15812 - C15811) * C14016 +
            (C16534 - C16533) * C13857 +
            (C139824 * C21110 - C182 * C21013) * C14017 +
            (C139824 * C21621 - C182 * C21536) * C13858) *
               C139736) *
              C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q));
    d2eezz[26] +=
        (-std::pow(Pi, 2.5) *
         ((((C265 * C266 - C701 * C108 - C265 * C567 + C139835 * C702) * C5813 +
            C7652 * C5814 + C7653 * C5815) *
               C5811 +
           (C6509 + C6510 + C6527) * C139736) *
              C5270 -
          ((C8652 + C8653 + C8645) * C139736 +
           (C11287 * C5815 + C11288 * C5814 +
            (C265 * C1741 - C701 * C1570 - C265 * C2074 + C139835 * C2230) *
                C5813) *
               C5811) *
              C5271 +
          (((C265 * C5397 - C701 * C5273 - C265 * C5621 + C139835 * C5733) *
                C5813 +
            (C265 * C13298 - C701 * C13126 - C265 * C13618 + C139835 * C13778) *
                C5814 +
            (C265 * C13300 - C701 * C13128 - C265 * C13620 + C139835 * C13779) *
                C5815) *
               C5811 +
           ((C265 * C5398 - C701 * C5274 - C265 * C5622 + C139835 * C5734) *
                C5813 +
            (C265 * C13299 - C701 * C13127 - C265 * C13619 + C139835 * C13780) *
                C5814 +
            (C265 * C13301 - C701 * C13129 - C265 * C13621 + C139835 * C13781) *
                C5815) *
               C139736) *
              C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C265 * C266 - C701 * C108 - C265 * C567 + C139835 * C702) *
               C139824 * C89 +
           C737 * C90 + C738 * C91 + C739 * C92) *
              C5270 -
          (C2254 * C92 + C2255 * C91 + C2256 * C90 +
           (C265 * C1741 - C701 * C1570 - C265 * C2074 + C139835 * C2230) *
               C139824 * C89) *
              C5271 +
          ((C265 * C5397 - C701 * C5273 - C265 * C5621 + C139835 * C5733) *
               C139824 * C89 +
           (C265 * C5398 - C701 * C5274 - C265 * C5622 + C139835 * C5734) *
               C139824 * C90 +
           (C265 * C5399 - C701 * C5275 - C265 * C5623 + C139835 * C5735) *
               C139824 * C91 +
           (C265 * C5400 - C701 * C5276 - C265 * C5624 + C139835 * C5736) *
               C139824 * C92) *
              C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C14015 * C266 - C14516 * C108 - C14015 * C567 + C13856 * C702 +
            C14016 * C1741 - C14517 * C1570 - C14016 * C2074 + C13857 * C2230 +
            C14017 * C5397 - C14518 * C5273 - C14017 * C5621 + C13858 * C5733) *
               C139824 * C5811 +
           (C14556 + C14557 + C14558) * C139824 * C139736) *
              C5270 -
          ((C16654 + C16655 + C16656) * C139824 * C139736 +
           (C14017 * C15912 - C14518 * C15623 - C14017 * C16401 +
            C13858 * C16633 + C14016 * C5397 - C14517 * C5273 - C14016 * C5621 +
            C13857 * C5733 + C14015 * C1741 - C14516 * C1570 - C14015 * C2074 +
            C13856 * C2230) *
               C139824 * C5811) *
              C5271 +
          ((C14015 * C5397 - C14516 * C5273 - C14015 * C5621 + C13856 * C5733 +
            C14016 * C15912 - C14517 * C15623 - C14016 * C16401 +
            C13857 * C16633 + C14017 * C21200 - C14518 * C21012 -
            C14017 * C21535 + C13858 * C21699) *
               C139824 * C5811 +
           (C14015 * C5398 - C14516 * C5274 - C14015 * C5622 + C13856 * C5734 +
            C14016 * C15913 - C14517 * C15622 - C14016 * C16402 +
            C13857 * C16632 + C14017 * C21201 - C14518 * C21013 -
            C14017 * C21536 + C13858 * C21700) *
               C139824 * C139736) *
              C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q));
    d2eexx[27] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C21780 * C114 - C21781 * C108 - C21780 * C115 + C140009 * C126 +
            C21782 * C116 - C21783 * C109 - C21782 * C117 + C140010 * C127 +
            C21784 * C118 - C21785 * C110 - C21784 * C119 + C21777 * C128) *
               C139984 +
           (C21780 * C1578 - C21781 * C1570 - C21780 * C1579 + C140009 * C1585 +
            C21782 * C1576 - C21783 * C1569 - C21782 * C1577 + C140010 * C1584 +
            C21784 * C1574 - C21785 * C1568 - C21784 * C1575 + C21777 * C1583) *
               C139899) *
              C139824 * C139809 * C139792 * C97 -
          ((C21784 * C1572 - C21785 * C1567 - C21784 * C1573 + C21777 * C1582 +
            C21782 * C1574 - C21783 * C1568 - C21782 * C1575 + C140010 * C1583 +
            C21780 * C1576 - C21781 * C1569 - C21780 * C1577 +
            C140009 * C1584) *
               C139899 +
           (C21784 * C120 - C21785 * C111 - C21784 * C121 + C21777 * C129 +
            C21782 * C118 - C21783 * C110 - C21782 * C119 + C140010 * C128 +
            C21780 * C116 - C21781 * C109 - C21780 * C117 + C140009 * C127) *
               C139984) *
              C139824 * C139809 * C139792 * C98 +
          ((C21780 * C118 - C21781 * C110 - C21780 * C119 + C140009 * C128 +
            C21782 * C120 - C21783 * C111 - C21782 * C121 + C140010 * C129 +
            C21784 * C122 - C21785 * C112 - C21784 * C123 + C21777 * C130) *
               C139984 +
           (C21780 * C1574 - C21781 * C1568 - C21780 * C1575 + C140009 * C1583 +
            C21782 * C1572 - C21783 * C1567 - C21782 * C1573 + C140010 * C1582 +
            C21784 * C1580 - C21785 * C1571 - C21784 * C1581 + C21777 * C1586) *
               C139899) *
              C139824 * C139809 * C139792 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eexy[27] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139824 * C183 - C182 * C108) * C21780 +
            (C139824 * C189 - C182 * C115) * C140009 + (C196 - C197) * C21782 +
            (C198 - C199) * C140010 + C212 * C21784 + C213 * C21777) *
               C139984 +
           ((C15795 - C15796) * C21780 + (C15797 - C15798) * C140009 +
            C15799 * C21782 + C15800 * C140010 + C29549 * C21784 +
            C29550 * C21777) *
               C139899) *
              C139809 * C139792 * C97 +
          (((C197 - C196) * C21780 + (C199 - C198) * C140009 +
            (C201 - C200) * C21782 + (C203 - C202) * C140010 +
            (C205 - C204) * C21784 + (C207 - C206) * C21777) *
               C139984 +
           (C15807 * C21780 + C15808 * C140009 + (C1668 - C1669) * C21782 +
            (C1670 - C1671) * C140010 + (C1672 - C1673) * C21784 +
            (C1674 - C1675) * C21777) *
               C139899) *
              C139809 * C139792 * C98 +
          ((C212 * C21780 + C213 * C140009 + C214 * C21782 + C215 * C140010 +
            (C209 - C208) * C21784 + (C211 - C210) * C21777) *
               C139984 +
           (C29549 * C21780 + C29550 * C140009 + (C1673 - C1672) * C21782 +
            (C1675 - C1674) * C140010 +
            (C139824 * C1657 - C182 * C1571) * C21784 +
            (C139824 * C1662 - C182 * C1581) * C21777) *
               C139899) *
              C139809 * C139792 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eexz[27] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C139984 * C266 - C29624 * C108 + C139899 * C1741 - C29625 * C1570) *
               C21780 +
           (C139984 * C272 - C29624 * C115 + C139899 * C1746 - C29625 * C1579) *
               C140009 +
           (C29627 - C29628 + C29629 - C29630) * C21782 +
           (C29631 - C29632 + C29633 - C29634) * C140010 + C29655 * C21784 +
           C29656 * C21777) *
              C139824 * C139809 * C139792 * C97 +
          ((C29628 - C29627 + C29630 - C29629) * C21780 +
           (C29632 - C29631 + C29634 - C29633) * C140009 +
           (C29636 - C29635 + C29638 - C29637) * C21782 +
           (C29640 - C29639 + C29642 - C29641) * C140010 +
           (C29643 - C29644 + C29645 - C29646) * C21784 +
           (C29647 - C29648 + C29649 - C29650) * C21777) *
              C139824 * C139809 * C139792 * C98 +
          (C29655 * C21780 + C29656 * C140009 +
           (C29644 - C29643 + C29646 - C29645) * C21782 +
           (C29648 - C29647 + C29650 - C29649) * C140010 +
           (C139984 * C270 - C29624 * C112 + C139899 * C1745 - C29625 * C1571) *
               C21784 +
           (C139984 * C276 - C29624 * C123 + C139899 * C1750 - C29625 * C1581) *
               C21777) *
              C139824 * C139809 * C139792 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[27] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C140009 * C114 - C21780 * C108 + C140010 * C116 -
                       C21782 * C109 + C21777 * C118 - C21784 * C110) *
                          C182 +
                      (C140009 * C354 - C21780 * C348 + C140010 * C355 -
                       C21782 * C349 + C21777 * C356 - C21784 * C350) *
                          C139824) *
                         C139984 +
                     ((C140009 * C1578 - C21780 * C1570 + C140010 * C1576 -
                       C21782 * C1569 + C21777 * C1574 - C21784 * C1568) *
                          C182 +
                      (C140009 * C1834 - C21780 * C1829 + C140010 * C1835 -
                       C21782 * C1830 + C21777 * C1836 - C21784 * C1831) *
                          C139824) *
                         C139899) *
                        C139809 * C139792 * C97 +
                    (((C21780 * C109 - C140009 * C116 + C21782 * C110 -
                       C140010 * C118 + C21784 * C111 - C21777 * C120) *
                          C182 +
                      (C21780 * C349 - C140009 * C355 + C21782 * C350 -
                       C140010 * C356 + C21784 * C351 - C21777 * C357) *
                          C139824) *
                         C139984 +
                     ((C21780 * C1569 - C140009 * C1576 + C21782 * C1568 -
                       C140010 * C1574 + C21784 * C1567 - C21777 * C1572) *
                          C182 +
                      (C21780 * C1830 - C140009 * C1835 + C21782 * C1831 -
                       C140010 * C1836 + C21784 * C1832 - C21777 * C1837) *
                          C139824) *
                         C139899) *
                        C139809 * C139792 * C98 +
                    (((C140009 * C118 - C21780 * C110 + C140010 * C120 -
                       C21782 * C111 + C21777 * C122 - C21784 * C112) *
                          C182 +
                      (C140009 * C356 - C21780 * C350 + C140010 * C357 -
                       C21782 * C351 + C21777 * C358 - C21784 * C352) *
                          C139824) *
                         C139984 +
                     ((C140009 * C1574 - C21780 * C1568 + C140010 * C1572 -
                       C21782 * C1567 + C21777 * C1580 - C21784 * C1571) *
                          C182 +
                      (C140009 * C1836 - C21780 * C1831 + C140010 * C1837 -
                       C21782 * C1832 + C21777 * C1838 - C21784 * C1833) *
                          C139824) *
                         C139899) *
                        C139809 * C139792 * C99)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[27] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C182 * C183 - C410 * C108 - C182 * C348 + C139824 * C411) *
                C140009 +
            C442 * C140010 + C443 * C21777) *
               C139984 +
           (C16192 * C140009 + C1931 * C140010 + C1930 * C21777) * C139899) *
              C139809 * C139792 * C97 -
          ((C1929 * C21777 + C1930 * C140010 + C1931 * C140009) * C139899 +
           (C444 * C21777 + C443 * C140010 + C442 * C140009) * C139984) *
              C139809 * C139792 * C98 +
          ((C443 * C140009 + C444 * C140010 + C445 * C21777) * C139984 +
           (C1930 * C140009 + C1929 * C140010 +
            (C182 * C1657 - C410 * C1571 - C182 * C1833 + C139824 * C1909) *
                C21777) *
               C139899) *
              C139809 * C139792 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[27] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C139984 * C266 - C29624 * C108 + C139899 * C1741 -
                       C29625 * C1570) *
                          C182 +
                      (C139984 * C495 - C29624 * C348 + C139899 * C1997 -
                       C29625 * C1829) *
                          C139824) *
                         C140009 +
                     ((C29627 - C29628 + C29629 - C29630) * C182 +
                      (C29879 - C29880 + C29881 - C29882) * C139824) *
                         C140010 +
                     C29896 * C21777) *
                        C139809 * C139792 * C97 +
                    (((C29628 - C29627 + C29630 - C29629) * C182 +
                      (C29880 - C29879 + C29882 - C29881) * C139824) *
                         C140009 +
                     ((C29636 - C29635 + C29638 - C29637) * C182 +
                      (C29885 - C29884 + C29887 - C29886) * C139824) *
                         C140010 +
                     ((C29643 - C29644 + C29645 - C29646) * C182 +
                      (C29888 - C29889 + C29890 - C29891) * C139824) *
                         C21777) *
                        C139809 * C139792 * C98 +
                    (C29896 * C140009 +
                     ((C29644 - C29643 + C29646 - C29645) * C182 +
                      (C29889 - C29888 + C29891 - C29890) * C139824) *
                         C140010 +
                     ((C139984 * C270 - C29624 * C112 + C139899 * C1745 -
                       C29625 * C1571) *
                          C182 +
                      (C139984 * C499 - C29624 * C352 + C139899 * C2001 -
                       C29625 * C1833) *
                          C139824) *
                         C21777) *
                        C139809 * C139792 * C99)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[27] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C140009 * C114 - C21780 * C108 + C140010 * C116 -
                      C21782 * C109 + C21777 * C118 - C21784 * C110) *
                         C29624 +
                     (C140009 * C573 - C21780 * C567 + C140010 * C574 -
                      C21782 * C568 + C21777 * C575 - C21784 * C569) *
                         C139984 +
                     (C140009 * C1578 - C21780 * C1570 + C140010 * C1576 -
                      C21782 * C1569 + C21777 * C1574 - C21784 * C1568) *
                         C29625 +
                     (C140009 * C2079 - C21780 * C2074 + C140010 * C2080 -
                      C21782 * C2075 + C21777 * C2081 - C21784 * C2076) *
                         C139899) *
                        C139824 * C139809 * C139792 * C97 +
                    ((C21780 * C109 - C140009 * C116 + C21782 * C110 -
                      C140010 * C118 + C21784 * C111 - C21777 * C120) *
                         C29624 +
                     (C21780 * C568 - C140009 * C574 + C21782 * C569 -
                      C140010 * C575 + C21784 * C570 - C21777 * C576) *
                         C139984 +
                     (C21780 * C1569 - C140009 * C1576 + C21782 * C1568 -
                      C140010 * C1574 + C21784 * C1567 - C21777 * C1572) *
                         C29625 +
                     (C21780 * C2075 - C140009 * C2080 + C21782 * C2076 -
                      C140010 * C2081 + C21784 * C2077 - C21777 * C2082) *
                         C139899) *
                        C139824 * C139809 * C139792 * C98 +
                    ((C140009 * C118 - C21780 * C110 + C140010 * C120 -
                      C21782 * C111 + C21777 * C122 - C21784 * C112) *
                         C29624 +
                     (C140009 * C575 - C21780 * C569 + C140010 * C576 -
                      C21782 * C570 + C21777 * C577 - C21784 * C571) *
                         C139984 +
                     (C140009 * C1574 - C21780 * C1568 + C140010 * C1572 -
                      C21782 * C1567 + C21777 * C1580 - C21784 * C1571) *
                         C29625 +
                     (C140009 * C2081 - C21780 * C2076 + C140010 * C2082 -
                      C21782 * C2077 + C21777 * C2083 - C21784 * C2078) *
                         C139899) *
                        C139824 * C139809 * C139792 * C99)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[27] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139824 * C183 - C182 * C108) * C29624 +
            (C139824 * C629 - C182 * C567) * C139984 +
            (C15795 - C15796) * C29625 + (C16525 - C16526) * C139899) *
               C140009 +
           ((C196 - C197) * C29624 + (C636 - C637) * C139984 + C15799 * C29625 +
            C16529 * C139899) *
               C140010 +
           C30052 * C21777) *
              C139809 * C139792 * C97 +
          (((C197 - C196) * C29624 + (C637 - C636) * C139984 + C15807 * C29625 +
            C16531 * C139899) *
               C140009 +
           ((C201 - C200) * C29624 + (C640 - C639) * C139984 +
            (C1668 - C1669) * C29625 + (C2158 - C2159) * C139899) *
               C140010 +
           ((C205 - C204) * C29624 + (C643 - C642) * C139984 +
            (C1672 - C1673) * C29625 + (C2160 - C2161) * C139899) *
               C21777) *
              C139809 * C139792 * C98 +
          (C30052 * C140009 +
           (C214 * C29624 + C647 * C139984 + (C1673 - C1672) * C29625 +
            (C2161 - C2160) * C139899) *
               C140010 +
           ((C209 - C208) * C29624 + (C645 - C644) * C139984 +
            (C139824 * C1657 - C182 * C1571) * C29625 +
            (C139824 * C2154 - C182 * C2078) * C139899) *
               C21777) *
              C139809 * C139792 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eezz[27] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C29624 * C266 - C30126 * C108 - C29624 * C567 +
                      C139984 * C702 + C29625 * C1741 - C30127 * C1570 -
                      C29625 * C2074 + C139899 * C2230) *
                         C139824 * C140009 +
                     (C30165 + C30166) * C139824 * C140010 + C30172 * C21777) *
                        C139809 * C139792 * C97 -
                    ((C30169 + C30170) * C139824 * C21777 +
                     (C30168 + C30167) * C139824 * C140010 +
                     (C30166 + C30165) * C139824 * C140009) *
                        C139809 * C139792 * C98 +
                    (C30172 * C140009 + (C30170 + C30169) * C139824 * C140010 +
                     (C29624 * C270 - C30126 * C112 - C29624 * C571 +
                      C139984 * C706 + C29625 * C1745 - C30127 * C1571 -
                      C29625 * C2078 + C139899 * C2231) *
                         C139824 * C21777) *
                        C139809 * C139792 * C99)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[28] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C21780 * C114 - C21781 * C108 - C21780 * C115 + C140009 * C126 +
             C21782 * C116 - C21783 * C109 - C21782 * C117 + C140010 * C127 +
             C21784 * C118 - C21785 * C110 - C21784 * C119 + C21777 * C128) *
                C139984 +
            (C21780 * C1578 - C21781 * C1570 - C21780 * C1579 +
             C140009 * C1585 + C21782 * C1576 - C21783 * C1569 -
             C21782 * C1577 + C140010 * C1584 + C21784 * C1574 -
             C21785 * C1568 - C21784 * C1575 + C21777 * C1583) *
                C139899) *
               C139824 * C139809 * C806 -
           ((C26164 + C26165 + C26166) * C139899 +
            (C22627 + C22626 + C22625) * C139984) *
               C139824 * C139809 * C140000) *
              C808 +
          (((C22628 + C22629 + C22630) * C139984 +
            (C21780 * C3444 - C21781 * C3439 - C21780 * C3445 +
             C140009 * C3451 + C21782 * C3446 - C21783 * C3440 -
             C21782 * C3447 + C140010 * C3452 + C21784 * C3448 -
             C21785 * C3441 - C21784 * C3449 + C21777 * C3453) *
                C139899) *
               C139824 * C139809 * C140000 -
           ((C21784 * C1572 - C21785 * C1567 - C21784 * C1573 + C21777 * C1582 +
             C21782 * C1574 - C21783 * C1568 - C21782 * C1575 +
             C140010 * C1583 + C21780 * C1576 - C21781 * C1569 -
             C21780 * C1577 + C140009 * C1584) *
                C139899 +
            (C21784 * C120 - C21785 * C111 - C21784 * C121 + C21777 * C129 +
             C21782 * C118 - C21783 * C110 - C21782 * C119 + C140010 * C128 +
             C21780 * C116 - C21781 * C109 - C21780 * C117 + C140009 * C127) *
                C139984) *
               C139824 * C139809 * C806) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexy[28] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139824 * C183 - C182 * C108) * C21780 +
             (C139824 * C189 - C182 * C115) * C140009 + (C196 - C197) * C21782 +
             (C198 - C199) * C140010 + C212 * C21784 + C213 * C21777) *
                C139984 +
            ((C15795 - C15796) * C21780 + (C15797 - C15798) * C140009 +
             C15799 * C21782 + C15800 * C140010 + C29549 * C21784 +
             C29550 * C21777) *
                C139899) *
               C139809 * C806 +
           (((C182 * C813 - C139824 * C896) * C21780 +
             (C182 * C822 - C139824 * C901) * C140009 + (C907 - C908) * C21782 +
             (C909 - C910) * C140010 + (C911 - C912) * C21784 +
             (C913 - C914) * C21777) *
                C139984 +
            ((C18427 - C18428) * C21780 + (C18429 - C18430) * C140009 +
             (C14764 - C14765) * C21782 + (C14766 - C14767) * C140010 +
             (C30369 - C30370) * C21784 + (C30371 - C30372) * C21777) *
                C139899) *
               C139809 * C140000) *
              C808 +
          ((((C197 - C196) * C21780 + (C199 - C198) * C140009 +
             (C201 - C200) * C21782 + (C203 - C202) * C140010 +
             (C205 - C204) * C21784 + (C207 - C206) * C21777) *
                C139984 +
            (C15807 * C21780 + C15808 * C140009 + (C1668 - C1669) * C21782 +
             (C1670 - C1671) * C140010 + (C1672 - C1673) * C21784 +
             (C1674 - C1675) * C21777) *
                C139899) *
               C139809 * C806 +
           (((C908 - C907) * C21780 + (C910 - C909) * C140009 +
             (C912 - C911) * C21782 + (C914 - C913) * C140010 +
             (C916 - C915) * C21784 + (C918 - C917) * C21777) *
                C139984 +
            ((C14765 - C14764) * C21780 + (C14767 - C14766) * C140009 +
             (C30370 - C30369) * C21782 + (C30372 - C30371) * C140010 +
             (C139824 * C3523 - C182 * C3441) * C21784 +
             (C139824 * C3527 - C182 * C3449) * C21777) *
                C139899) *
               C139809 * C140000) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexz[28] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C139984 * C266 - C29624 * C108 + C139899 * C1741 -
                       C29625 * C1570) *
                          C21780 +
                      (C139984 * C272 - C29624 * C115 + C139899 * C1746 -
                       C29625 * C1579) *
                          C140009 +
                      (C29627 - C29628 + C29629 - C29630) * C21782 +
                      (C29631 - C29632 + C29633 - C29634) * C140010 +
                      C29655 * C21784 + C29656 * C21777) *
                         C139824 * C139809 * C806 +
                     ((C29624 * C813 - C139984 * C984 + C29625 * C3438 -
                       C139899 * C3594) *
                          C21780 +
                      (C29624 * C822 - C139984 * C989 + C29625 * C3443 -
                       C139899 * C3598) *
                          C140009 +
                      (C30471 - C30472 + C30473 - C30474) * C21782 +
                      (C30475 - C30476 + C30477 - C30478) * C140010 +
                      (C30479 - C30480 + C30481 - C30482) * C21784 +
                      (C30483 - C30484 + C30485 - C30486) * C21777) *
                         C139824 * C139809 * C140000) *
                        C808 +
                    (((C29628 - C29627 + C29630 - C29629) * C21780 +
                      (C29632 - C29631 + C29634 - C29633) * C140009 +
                      (C29636 - C29635 + C29638 - C29637) * C21782 +
                      (C29640 - C29639 + C29642 - C29641) * C140010 +
                      (C29643 - C29644 + C29645 - C29646) * C21784 +
                      (C29647 - C29648 + C29649 - C29650) * C21777) *
                         C139824 * C139809 * C806 +
                     ((C30472 - C30471 + C30474 - C30473) * C21780 +
                      (C30476 - C30475 + C30478 - C30477) * C140009 +
                      (C30480 - C30479 + C30482 - C30481) * C21782 +
                      (C30484 - C30483 + C30486 - C30485) * C140010 +
                      (C139984 * C987 - C29624 * C810 + C139899 * C3597 -
                       C29625 * C3441) *
                          C21784 +
                      (C139984 * C992 - C29624 * C816 + C139899 * C3601 -
                       C29625 * C3449) *
                          C21777) *
                         C139824 * C139809 * C140000) *
                        C139998)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[28] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C140009 * C114 - C21780 * C108 + C140010 * C116 - C21782 * C109 +
              C21777 * C118 - C21784 * C110) *
                 C182 +
             (C140009 * C354 - C21780 * C348 + C140010 * C355 - C21782 * C349 +
              C21777 * C356 - C21784 * C350) *
                 C139824) *
                C139984 +
            ((C140009 * C1578 - C21780 * C1570 + C140010 * C1576 -
              C21782 * C1569 + C21777 * C1574 - C21784 * C1568) *
                 C182 +
             (C140009 * C1834 - C21780 * C1829 + C140010 * C1835 -
              C21782 * C1830 + C21777 * C1836 - C21784 * C1831) *
                 C139824) *
                C139899) *
               C139809 * C806 +
           (((C22944 - C22943 + C22946 - C22945 + C22948 - C22947) * C182 +
             (C22950 - C22949 + C22952 - C22951 + C22954 - C22953) * C139824) *
                C139984 +
            ((C26461 - C26462 + C26463 - C26464 + C26465 - C26466) * C182 +
             (C26467 - C26468 + C26469 - C26470 + C26471 - C26472) * C139824) *
                C139899) *
               C139809 * C140000) *
              C808 +
          ((((C21780 * C109 - C140009 * C116 + C21782 * C110 - C140010 * C118 +
              C21784 * C111 - C21777 * C120) *
                 C182 +
             (C21780 * C349 - C140009 * C355 + C21782 * C350 - C140010 * C356 +
              C21784 * C351 - C21777 * C357) *
                 C139824) *
                C139984 +
            ((C21780 * C1569 - C140009 * C1576 + C21782 * C1568 -
              C140010 * C1574 + C21784 * C1567 - C21777 * C1572) *
                 C182 +
             (C21780 * C1830 - C140009 * C1835 + C21782 * C1831 -
              C140010 * C1836 + C21784 * C1832 - C21777 * C1837) *
                 C139824) *
                C139899) *
               C139809 * C806 +
           (((C22956 - C22955 + C22958 - C22957 + C22960 - C22959) * C182 +
             (C22962 - C22961 + C22964 - C22963 + C22966 - C22965) * C139824) *
                C139984 +
            ((C140009 * C3444 - C21780 * C3439 + C140010 * C3446 -
              C21782 * C3440 + C21777 * C3448 - C21784 * C3441) *
                 C182 +
             (C140009 * C3673 - C21780 * C3669 + C140010 * C3674 -
              C21782 * C3670 + C21777 * C3675 - C21784 * C3671) *
                 C139824) *
                C139899) *
               C139809 * C140000) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[28] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C182 * C183 - C410 * C108 - C182 * C348 + C139824 * C411) *
                 C140009 +
             C442 * C140010 + C443 * C21777) *
                C139984 +
            (C16192 * C140009 + C1931 * C140010 + C1930 * C21777) * C139899) *
               C139809 * C806 -
           ((C30689 * C21777 + C15096 * C140010 + C18761 * C140009) * C139899 +
            (C1173 * C21777 + C1174 * C140010 +
             (C182 * C896 - C410 * C813 - C182 * C1072 + C139824 * C1151) *
                 C140009) *
                C139984) *
               C139809 * C140000) *
              C808 +
          (((C1174 * C140009 + C1173 * C140010 + C1172 * C21777) * C139984 +
            (C15096 * C140009 + C30689 * C140010 +
             (C182 * C3523 - C410 * C3441 - C182 * C3671 + C139824 * C3745) *
                 C21777) *
                C139899) *
               C139809 * C140000 -
           ((C1929 * C21777 + C1930 * C140010 + C1931 * C140009) * C139899 +
            (C444 * C21777 + C443 * C140010 + C442 * C140009) * C139984) *
               C139809 * C806) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[28] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C139984 * C266 - C29624 * C108 + C139899 * C1741 -
                        C29625 * C1570) *
                           C182 +
                       (C139984 * C495 - C29624 * C348 + C139899 * C1997 -
                        C29625 * C1829) *
                           C139824) *
                          C140009 +
                      ((C29627 - C29628 + C29629 - C29630) * C182 +
                       (C29879 - C29880 + C29881 - C29882) * C139824) *
                          C140010 +
                      C29896 * C21777) *
                         C139809 * C806 +
                     (((C29624 * C813 - C139984 * C984 + C29625 * C3438 -
                        C139899 * C3594) *
                           C182 +
                       (C29624 * C1072 - C139984 * C1240 + C29625 * C3668 -
                        C139899 * C3812) *
                           C139824) *
                          C140009 +
                      ((C30471 - C30472 + C30473 - C30474) * C182 +
                       (C30788 - C30789 + C30790 - C30791) * C139824) *
                          C140010 +
                      ((C30479 - C30480 + C30481 - C30482) * C182 +
                       (C30792 - C30793 + C30794 - C30795) * C139824) *
                          C21777) *
                         C139809 * C140000) *
                        C808 +
                    ((((C29628 - C29627 + C29630 - C29629) * C182 +
                       (C29880 - C29879 + C29882 - C29881) * C139824) *
                          C140009 +
                      ((C29636 - C29635 + C29638 - C29637) * C182 +
                       (C29885 - C29884 + C29887 - C29886) * C139824) *
                          C140010 +
                      ((C29643 - C29644 + C29645 - C29646) * C182 +
                       (C29888 - C29889 + C29890 - C29891) * C139824) *
                          C21777) *
                         C139809 * C806 +
                     (((C30472 - C30471 + C30474 - C30473) * C182 +
                       (C30789 - C30788 + C30791 - C30790) * C139824) *
                          C140009 +
                      ((C30480 - C30479 + C30482 - C30481) * C182 +
                       (C30793 - C30792 + C30795 - C30794) * C139824) *
                          C140010 +
                      ((C139984 * C987 - C29624 * C810 + C139899 * C3597 -
                        C29625 * C3441) *
                           C182 +
                       (C139984 * C1243 - C29624 * C1075 + C139899 * C3815 -
                        C29625 * C3671) *
                           C139824) *
                          C21777) *
                         C139809 * C140000) *
                        C139998)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[28] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C140009 * C114 - C21780 * C108 + C140010 * C116 - C21782 * C109 +
             C21777 * C118 - C21784 * C110) *
                C29624 +
            (C140009 * C573 - C21780 * C567 + C140010 * C574 - C21782 * C568 +
             C21777 * C575 - C21784 * C569) *
                C139984 +
            (C140009 * C1578 - C21780 * C1570 + C140010 * C1576 -
             C21782 * C1569 + C21777 * C1574 - C21784 * C1568) *
                C29625 +
            (C140009 * C2079 - C21780 * C2074 + C140010 * C2080 -
             C21782 * C2075 + C21777 * C2081 - C21784 * C2076) *
                C139899) *
               C139824 * C139809 * C806 +
           ((C22944 - C22943 + C22946 - C22945 + C22948 - C22947) * C29624 +
            (C23291 - C23290 + C23293 - C23292 + C23295 - C23294) * C139984 +
            (C26461 - C26462 + C26463 - C26464 + C26465 - C26466) * C29625 +
            (C26767 - C26768 + C26769 - C26770 + C26771 - C26772) * C139899) *
               C139824 * C139809 * C140000) *
              C808 +
          (((C21780 * C109 - C140009 * C116 + C21782 * C110 - C140010 * C118 +
             C21784 * C111 - C21777 * C120) *
                C29624 +
            (C21780 * C568 - C140009 * C574 + C21782 * C569 - C140010 * C575 +
             C21784 * C570 - C21777 * C576) *
                C139984 +
            (C21780 * C1569 - C140009 * C1576 + C21782 * C1568 -
             C140010 * C1574 + C21784 * C1567 - C21777 * C1572) *
                C29625 +
            (C21780 * C2075 - C140009 * C2080 + C21782 * C2076 -
             C140010 * C2081 + C21784 * C2077 - C21777 * C2082) *
                C139899) *
               C139824 * C139809 * C806 +
           ((C22956 - C22955 + C22958 - C22957 + C22960 - C22959) * C29624 +
            (C23297 - C23296 + C23299 - C23298 + C23301 - C23300) * C139984 +
            (C140009 * C3444 - C21780 * C3439 + C140010 * C3446 -
             C21782 * C3440 + C21777 * C3448 - C21784 * C3441) *
                C29625 +
            (C140009 * C3887 - C21780 * C3883 + C140010 * C3888 -
             C21782 * C3884 + C21777 * C3889 - C21784 * C3885) *
                C139899) *
               C139824 * C139809 * C140000) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eezy[28] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139824 * C183 - C182 * C108) * C29624 +
             (C139824 * C629 - C182 * C567) * C139984 +
             (C15795 - C15796) * C29625 + (C16525 - C16526) * C139899) *
                C140009 +
            ((C196 - C197) * C29624 + (C636 - C637) * C139984 +
             C15799 * C29625 + C16529 * C139899) *
                C140010 +
            C30052 * C21777) *
               C139809 * C806 +
           (((C182 * C813 - C139824 * C896) * C29624 +
             (C182 * C1317 - C139824 * C1393) * C139984 +
             (C18427 - C18428) * C29625 + (C19071 - C19072) * C139899) *
                C140009 +
            ((C907 - C908) * C29624 + (C1399 - C1400) * C139984 +
             (C14764 - C14765) * C29625 + (C15401 - C15402) * C139899) *
                C140010 +
            ((C911 - C912) * C29624 + (C1401 - C1402) * C139984 +
             (C30369 - C30370) * C29625 + (C30992 - C30993) * C139899) *
                C21777) *
               C139809 * C140000) *
              C808 +
          ((((C197 - C196) * C29624 + (C637 - C636) * C139984 +
             C15807 * C29625 + C16531 * C139899) *
                C140009 +
            ((C201 - C200) * C29624 + (C640 - C639) * C139984 +
             (C1668 - C1669) * C29625 + (C2158 - C2159) * C139899) *
                C140010 +
            ((C205 - C204) * C29624 + (C643 - C642) * C139984 +
             (C1672 - C1673) * C29625 + (C2160 - C2161) * C139899) *
                C21777) *
               C139809 * C806 +
           (((C908 - C907) * C29624 + (C1400 - C1399) * C139984 +
             (C14765 - C14764) * C29625 + (C15402 - C15401) * C139899) *
                C140009 +
            ((C912 - C911) * C29624 + (C1402 - C1401) * C139984 +
             (C30370 - C30369) * C29625 + (C30993 - C30992) * C139899) *
                C140010 +
            ((C916 - C915) * C29624 + (C1404 - C1403) * C139984 +
             (C139824 * C3523 - C182 * C3441) * C29625 +
             (C139824 * C3959 - C182 * C3885) * C139899) *
                C21777) *
               C139809 * C140000) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eezz[28] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C29624 * C266 - C30126 * C108 - C29624 * C567 +
                       C139984 * C702 + C29625 * C1741 - C30127 * C1570 -
                       C29625 * C2074 + C139899 * C2230) *
                          C139824 * C140009 +
                      (C30165 + C30166) * C139824 * C140010 + C30172 * C21777) *
                         C139809 * C806 -
                     ((C31116 + C31117) * C139824 * C21777 +
                      (C31118 + C31119) * C139824 * C140010 +
                      (C29625 * C3594 - C30127 * C3438 - C29625 * C3882 +
                       C139899 * C4026 + C29624 * C984 - C30126 * C813 -
                       C29624 * C1317 + C139984 * C1473) *
                          C139824 * C140009) *
                         C139809 * C140000) *
                        C808 +
                    (((C31119 + C31118) * C139824 * C140009 +
                      (C31117 + C31116) * C139824 * C140010 +
                      (C29624 * C987 - C30126 * C810 - C29624 * C1320 +
                       C139984 * C1470 + C29625 * C3597 - C30127 * C3441 -
                       C29625 * C3885 + C139899 * C4029) *
                          C139824 * C21777) *
                         C139809 * C140000 -
                     ((C30169 + C30170) * C139824 * C21777 +
                      (C30168 + C30167) * C139824 * C140010 +
                      (C30166 + C30165) * C139824 * C140009) *
                         C139809 * C806) *
                        C139998)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[29] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C21780 * C114 - C21781 * C108 - C21780 * C115 + C140009 * C126 +
             C21782 * C116 - C21783 * C109 - C21782 * C117 + C140010 * C127 +
             C21784 * C118 - C21785 * C110 - C21784 * C119 + C21777 * C128) *
                C139984 +
            (C31254 + C31255 + C31256) * C139899) *
               C139824 * C1565 -
           ((C21784 * C5281 - C21785 * C5275 - C21784 * C5282 + C21777 * C5287 +
             C21782 * C5279 - C21783 * C5274 - C21782 * C5280 +
             C140010 * C5286 + C21780 * C5277 - C21781 * C5273 -
             C21780 * C5278 + C140009 * C5285) *
                C139899 +
            (C31256 + C31255 + C31254) * C139984) *
               C139824 * C140002) *
              C139792 * C808 +
          (((C31257 + C31258 + C31259) * C139984 +
            (C21780 * C5279 - C21781 * C5274 - C21780 * C5280 +
             C140009 * C5286 + C21782 * C5281 - C21783 * C5275 -
             C21782 * C5282 + C140010 * C5287 + C21784 * C5283 -
             C21785 * C5276 - C21784 * C5284 + C21777 * C5288) *
                C139899) *
               C139824 * C140002 -
           ((C31259 + C31258 + C31257) * C139899 +
            (C21784 * C120 - C21785 * C111 - C21784 * C121 + C21777 * C129 +
             C21782 * C118 - C21783 * C110 - C21782 * C119 + C140010 * C128 +
             C21780 * C116 - C21781 * C109 - C21780 * C117 + C140009 * C127) *
                C139984) *
               C139824 * C1565) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexy[29] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139824 * C183 - C182 * C108) * C21780 +
             (C139824 * C189 - C182 * C115) * C140009 + (C196 - C197) * C21782 +
             (C198 - C199) * C140010 + C212 * C21784 + C213 * C21777) *
                C139984 +
            ((C15795 - C15796) * C21780 + (C15797 - C15798) * C140009 +
             C15799 * C21782 + C15800 * C140010 + C29549 * C21784 +
             C29550 * C21777) *
                C139899) *
               C1565 +
           (((C15796 - C15795) * C21780 + (C15798 - C15797) * C140009 +
             C15807 * C21782 + C15808 * C140010 + C31358 * C21784 +
             C31359 * C21777) *
                C139984 +
            ((C15802 - C15801) * C21780 + (C15804 - C15803) * C140009 +
             C15809 * C21782 + C15810 * C140010 + (C13938 - C13939) * C21784 +
             (C13940 - C13941) * C21777) *
                C139899) *
               C140002) *
              C139792 * C808 +
          ((((C197 - C196) * C21780 + (C199 - C198) * C140009 +
             (C201 - C200) * C21782 + (C203 - C202) * C140010 +
             (C205 - C204) * C21784 + (C207 - C206) * C21777) *
                C139984 +
            (C15807 * C21780 + C15808 * C140009 + C31358 * C21782 +
             C31359 * C140010 + (C1672 - C1673) * C21784 +
             (C1674 - C1675) * C21777) *
                C139899) *
               C1565 +
           ((C15799 * C21780 + C15800 * C140009 + C29549 * C21782 +
             C29550 * C140010 + (C1673 - C1672) * C21784 +
             (C1675 - C1674) * C21777) *
                C139984 +
            (C15805 * C21780 + C15806 * C140009 + (C13939 - C13938) * C21782 +
             (C13941 - C13940) * C140010 +
             (C139824 * C5342 - C182 * C5276) * C21784 +
             (C139824 * C5346 - C182 * C5284) * C21777) *
                C139899) *
               C140002) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexz[29] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C139984 * C266 - C29624 * C108 + C139899 * C1741 -
                       C29625 * C1570) *
                          C21780 +
                      (C139984 * C272 - C29624 * C115 + C139899 * C1746 -
                       C29625 * C1579) *
                          C140009 +
                      (C29627 - C29628 + C29629 - C29630) * C21782 +
                      (C29631 - C29632 + C29633 - C29634) * C140010 +
                      C29655 * C21784 + C29656 * C21777) *
                         C139824 * C1565 +
                     ((C29624 * C1570 - C139984 * C1741 + C29625 * C5273 -
                       C139899 * C5397) *
                          C21780 +
                      (C29624 * C1579 - C139984 * C1746 + C29625 * C5278 -
                       C139899 * C5401) *
                          C140009 +
                      (C31458 - C31459 + C31460 - C31461) * C21782 +
                      (C31462 - C31463 + C31464 - C31465) * C140010 +
                      (C31466 - C31467 + C31468 - C31469) * C21784 +
                      (C31470 - C31471 + C31472 - C31473) * C21777) *
                         C139824 * C140002) *
                        C139792 * C808 +
                    (((C29628 - C29627 + C29630 - C29629) * C21780 +
                      (C29632 - C29631 + C29634 - C29633) * C140009 +
                      (C29636 - C29635 + C29638 - C29637) * C21782 +
                      (C29640 - C29639 + C29642 - C29641) * C140010 +
                      (C29643 - C29644 + C29645 - C29646) * C21784 +
                      (C29647 - C29648 + C29649 - C29650) * C21777) *
                         C139824 * C1565 +
                     ((C31459 - C31458 + C31461 - C31460) * C21780 +
                      (C31463 - C31462 + C31465 - C31464) * C140009 +
                      (C31467 - C31466 + C31469 - C31468) * C21782 +
                      (C31471 - C31470 + C31473 - C31472) * C140010 +
                      (C139984 * C1744 - C29624 * C1567 + C139899 * C5400 -
                       C29625 * C5276) *
                          C21784 +
                      (C139984 * C1749 - C29624 * C1573 + C139899 * C5404 -
                       C29625 * C5284) *
                          C21777) *
                         C139824 * C140002) *
                        C139792 * C139998)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[29] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C140009 * C114 - C21780 * C108 + C140010 * C116 - C21782 * C109 +
              C21777 * C118 - C21784 * C110) *
                 C182 +
             (C140009 * C354 - C21780 * C348 + C140010 * C355 - C21782 * C349 +
              C21777 * C356 - C21784 * C350) *
                 C139824) *
                C139984 +
            ((C31572 - C31573 + C31574 - C31575 + C31576 - C31577) * C182 +
             (C31578 - C31579 + C31580 - C31581 + C31582 - C31583) * C139824) *
                C139899) *
               C1565 +
           (((C31573 - C31572 + C31575 - C31574 + C31577 - C31576) * C182 +
             (C31579 - C31578 + C31581 - C31580 + C31583 - C31582) * C139824) *
                C139984 +
            ((C21780 * C5273 - C140009 * C5277 + C21782 * C5274 -
              C140010 * C5279 + C21784 * C5275 - C21777 * C5281) *
                 C182 +
             (C21780 * C5455 - C140009 * C5459 + C21782 * C5456 -
              C140010 * C5460 + C21784 * C5457 - C21777 * C5461) *
                 C139824) *
                C139899) *
               C140002) *
              C139792 * C808 +
          ((((C21780 * C109 - C140009 * C116 + C21782 * C110 - C140010 * C118 +
              C21784 * C111 - C21777 * C120) *
                 C182 +
             (C21780 * C349 - C140009 * C355 + C21782 * C350 - C140010 * C356 +
              C21784 * C351 - C21777 * C357) *
                 C139824) *
                C139984 +
            ((C31584 - C31585 + C31586 - C31587 + C31588 - C31589) * C182 +
             (C31590 - C31591 + C31592 - C31593 + C31594 - C31595) * C139824) *
                C139899) *
               C1565 +
           (((C31585 - C31584 + C31587 - C31586 + C31589 - C31588) * C182 +
             (C31591 - C31590 + C31593 - C31592 + C31595 - C31594) * C139824) *
                C139984 +
            ((C140009 * C5279 - C21780 * C5274 + C140010 * C5281 -
              C21782 * C5275 + C21777 * C5283 - C21784 * C5276) *
                 C182 +
             (C140009 * C5460 - C21780 * C5456 + C140010 * C5461 -
              C21782 * C5457 + C21777 * C5462 - C21784 * C5458) *
                 C139824) *
                C139899) *
               C140002) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[29] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C182 * C183 - C410 * C108 - C182 * C348 + C139824 * C411) *
                 C140009 +
             C442 * C140010 + C443 * C21777) *
                C139984 +
            (C31694 + C31695 + C31696) * C139899) *
               C1565 -
           ((C14204 * C21777 + C14203 * C140010 + C16193 * C140009) * C139899 +
            (C31696 + C31695 + C31694) * C139984) *
               C140002) *
              C139792 * C808 +
          (((C31697 + C31698 + C31699) * C139984 +
            (C14203 * C140009 + C14204 * C140010 +
             (C182 * C5342 - C410 * C5276 - C182 * C5458 + C139824 * C5516) *
                 C21777) *
                C139899) *
               C140002 -
           ((C31699 + C31698 + C31697) * C139899 +
            (C444 * C21777 + C443 * C140010 + C442 * C140009) * C139984) *
               C1565) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[29] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C139984 * C266 - C29624 * C108 + C139899 * C1741 -
                        C29625 * C1570) *
                           C182 +
                       (C139984 * C495 - C29624 * C348 + C139899 * C1997 -
                        C29625 * C1829) *
                           C139824) *
                          C140009 +
                      ((C29627 - C29628 + C29629 - C29630) * C182 +
                       (C29879 - C29880 + C29881 - C29882) * C139824) *
                          C140010 +
                      C29896 * C21777) *
                         C1565 +
                     (((C29624 * C1570 - C139984 * C1741 + C29625 * C5273 -
                        C139899 * C5397) *
                           C182 +
                       (C29624 * C1829 - C139984 * C1997 + C29625 * C5455 -
                        C139899 * C5567) *
                           C139824) *
                          C140009 +
                      ((C31458 - C31459 + C31460 - C31461) * C182 +
                       (C31798 - C31799 + C31800 - C31801) * C139824) *
                          C140010 +
                      ((C31466 - C31467 + C31468 - C31469) * C182 +
                       (C31802 - C31803 + C31804 - C31805) * C139824) *
                          C21777) *
                         C140002) *
                        C139792 * C808 +
                    ((((C29628 - C29627 + C29630 - C29629) * C182 +
                       (C29880 - C29879 + C29882 - C29881) * C139824) *
                          C140009 +
                      ((C29636 - C29635 + C29638 - C29637) * C182 +
                       (C29885 - C29884 + C29887 - C29886) * C139824) *
                          C140010 +
                      ((C29643 - C29644 + C29645 - C29646) * C182 +
                       (C29888 - C29889 + C29890 - C29891) * C139824) *
                          C21777) *
                         C1565 +
                     (((C31459 - C31458 + C31461 - C31460) * C182 +
                       (C31799 - C31798 + C31801 - C31800) * C139824) *
                          C140009 +
                      ((C31467 - C31466 + C31469 - C31468) * C182 +
                       (C31803 - C31802 + C31805 - C31804) * C139824) *
                          C140010 +
                      ((C139984 * C1744 - C29624 * C1567 + C139899 * C5400 -
                        C29625 * C5276) *
                           C182 +
                       (C139984 * C2000 - C29624 * C1832 + C139899 * C5570 -
                        C29625 * C5458) *
                           C139824) *
                          C21777) *
                         C140002) *
                        C139792 * C139998)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[29] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C140009 * C114 - C21780 * C108 + C140010 * C116 - C21782 * C109 +
             C21777 * C118 - C21784 * C110) *
                C29624 +
            (C140009 * C573 - C21780 * C567 + C140010 * C574 - C21782 * C568 +
             C21777 * C575 - C21784 * C569) *
                C139984 +
            (C31572 - C31573 + C31574 - C31575 + C31576 - C31577) * C29625 +
            (C31904 - C31905 + C31906 - C31907 + C31908 - C31909) * C139899) *
               C139824 * C1565 +
           ((C31573 - C31572 + C31575 - C31574 + C31577 - C31576) * C29624 +
            (C31905 - C31904 + C31907 - C31906 + C31909 - C31908) * C139984 +
            (C21780 * C5273 - C140009 * C5277 + C21782 * C5274 -
             C140010 * C5279 + C21784 * C5275 - C21777 * C5281) *
                C29625 +
            (C21780 * C5621 - C140009 * C5625 + C21782 * C5622 -
             C140010 * C5626 + C21784 * C5623 - C21777 * C5627) *
                C139899) *
               C139824 * C140002) *
              C139792 * C808 +
          (((C21780 * C109 - C140009 * C116 + C21782 * C110 - C140010 * C118 +
             C21784 * C111 - C21777 * C120) *
                C29624 +
            (C21780 * C568 - C140009 * C574 + C21782 * C569 - C140010 * C575 +
             C21784 * C570 - C21777 * C576) *
                C139984 +
            (C31584 - C31585 + C31586 - C31587 + C31588 - C31589) * C29625 +
            (C31910 - C31911 + C31912 - C31913 + C31914 - C31915) * C139899) *
               C139824 * C1565 +
           ((C31585 - C31584 + C31587 - C31586 + C31589 - C31588) * C29624 +
            (C31911 - C31910 + C31913 - C31912 + C31915 - C31914) * C139984 +
            (C140009 * C5279 - C21780 * C5274 + C140010 * C5281 -
             C21782 * C5275 + C21777 * C5283 - C21784 * C5276) *
                C29625 +
            (C140009 * C5626 - C21780 * C5622 + C140010 * C5627 -
             C21782 * C5623 + C21777 * C5628 - C21784 * C5624) *
                C139899) *
               C139824 * C140002) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eezy[29] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139824 * C183 - C182 * C108) * C29624 +
             (C139824 * C629 - C182 * C567) * C139984 +
             (C15795 - C15796) * C29625 + (C16525 - C16526) * C139899) *
                C140009 +
            ((C196 - C197) * C29624 + (C636 - C637) * C139984 +
             C15799 * C29625 + C16529 * C139899) *
                C140010 +
            C30052 * C21777) *
               C1565 +
           (((C15796 - C15795) * C29624 + (C16526 - C16525) * C139984 +
             (C15802 - C15801) * C29625 + (C16528 - C16527) * C139899) *
                C140009 +
            (C15807 * C29624 + C16531 * C139984 + C15809 * C29625 +
             C16532 * C139899) *
                C140010 +
            (C31358 * C29624 + C32014 * C139984 + (C13938 - C13939) * C29625 +
             (C14441 - C14442) * C139899) *
                C21777) *
               C140002) *
              C139792 * C808 +
          ((((C197 - C196) * C29624 + (C637 - C636) * C139984 +
             C15807 * C29625 + C16531 * C139899) *
                C140009 +
            ((C201 - C200) * C29624 + (C640 - C639) * C139984 +
             C31358 * C29625 + C32014 * C139899) *
                C140010 +
            ((C205 - C204) * C29624 + (C643 - C642) * C139984 +
             (C1672 - C1673) * C29625 + (C2160 - C2161) * C139899) *
                C21777) *
               C1565 +
           ((C15799 * C29624 + C16529 * C139984 + C15805 * C29625 +
             C16530 * C139899) *
                C140009 +
            (C29549 * C29624 + C30048 * C139984 + (C13939 - C13938) * C29625 +
             (C14442 - C14441) * C139899) *
                C140010 +
            ((C1673 - C1672) * C29624 + (C2161 - C2160) * C139984 +
             (C139824 * C5342 - C182 * C5276) * C29625 +
             (C139824 * C5682 - C182 * C5624) * C139899) *
                C21777) *
               C140002) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eezz[29] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C29624 * C266 - C30126 * C108 - C29624 * C567 +
                       C139984 * C702 + C29625 * C1741 - C30127 * C1570 -
                       C29625 * C2074 + C139899 * C2230) *
                          C139824 * C140009 +
                      (C30165 + C30166) * C139824 * C140010 + C30172 * C21777) *
                         C1565 -
                     ((C32137 + C32138) * C139824 * C21777 +
                      (C32139 + C32140) * C139824 * C140010 +
                      (C29625 * C5397 - C30127 * C5273 - C29625 * C5621 +
                       C139899 * C5733 + C29624 * C1741 - C30126 * C1570 -
                       C29624 * C2074 + C139984 * C2230) *
                          C139824 * C140009) *
                         C140002) *
                        C139792 * C808 +
                    (((C32140 + C32139) * C139824 * C140009 +
                      (C32138 + C32137) * C139824 * C140010 +
                      (C29624 * C1744 - C30126 * C1567 - C29624 * C2077 +
                       C139984 * C2227 + C29625 * C5400 - C30127 * C5276 -
                       C29625 * C5624 + C139899 * C5736) *
                          C139824 * C21777) *
                         C140002 -
                     ((C30169 + C30170) * C139824 * C21777 +
                      (C30168 + C30167) * C139824 * C140010 +
                      (C30166 + C30165) * C139824 * C140009) *
                         C1565) *
                        C139792 * C139998)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[30] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C21780 * C114 - C21781 * C108 - C21780 * C115 + C140009 * C126 +
             C21782 * C116 - C21783 * C109 - C21782 * C117 + C140010 * C127 +
             C21784 * C118 - C21785 * C110 - C21784 * C119 + C21777 * C128) *
                C139984 +
            (C31254 + C31255 + C31256) * C139899) *
               C139824 * C139809 * C2322 -
           ((C26164 + C26165 + C26166) * C139899 +
            (C22627 + C22626 + C22625) * C139984) *
               C139824 * C139809 * C140000) *
              C2324 +
          (((C22628 + C22629 + C22630) * C139984 +
            (C21780 * C3444 - C21781 * C3439 - C21780 * C3445 +
             C140009 * C3451 + C21782 * C3446 - C21783 * C3440 -
             C21782 * C3447 + C140010 * C3452 + C21784 * C3448 -
             C21785 * C3441 - C21784 * C3449 + C21777 * C3453) *
                C139899) *
               C139824 * C139809 * C140000 -
           ((C31259 + C31258 + C31257) * C139899 +
            (C21784 * C120 - C21785 * C111 - C21784 * C121 + C21777 * C129 +
             C21782 * C118 - C21783 * C110 - C21782 * C119 + C140010 * C128 +
             C21780 * C116 - C21781 * C109 - C21780 * C117 + C140009 * C127) *
                C139984) *
               C139824 * C139809 * C2322) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexy[30] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139824 * C183 - C182 * C108) * C21780 +
             (C139824 * C189 - C182 * C115) * C140009 + (C196 - C197) * C21782 +
             (C198 - C199) * C140010 + C212 * C21784 + C213 * C21777) *
                C139984 +
            ((C15795 - C15796) * C21780 + (C15797 - C15798) * C140009 +
             C15799 * C21782 + C15800 * C140010 + C29549 * C21784 +
             C29550 * C21777) *
                C139899) *
               C139809 * C2322 +
           (((C182 * C813 - C139824 * C896) * C21780 +
             (C182 * C822 - C139824 * C901) * C140009 + (C907 - C908) * C21782 +
             (C909 - C910) * C140010 + (C911 - C912) * C21784 +
             (C913 - C914) * C21777) *
                C139984 +
            ((C18427 - C18428) * C21780 + (C18429 - C18430) * C140009 +
             (C14764 - C14765) * C21782 + (C14766 - C14767) * C140010 +
             (C30369 - C30370) * C21784 + (C30371 - C30372) * C21777) *
                C139899) *
               C139809 * C140000) *
              C2324 +
          ((((C197 - C196) * C21780 + (C199 - C198) * C140009 +
             (C201 - C200) * C21782 + (C203 - C202) * C140010 +
             (C205 - C204) * C21784 + (C207 - C206) * C21777) *
                C139984 +
            (C15807 * C21780 + C15808 * C140009 + C31358 * C21782 +
             C31359 * C140010 + (C1672 - C1673) * C21784 +
             (C1674 - C1675) * C21777) *
                C139899) *
               C139809 * C2322 +
           (((C908 - C907) * C21780 + (C910 - C909) * C140009 +
             (C912 - C911) * C21782 + (C914 - C913) * C140010 +
             (C916 - C915) * C21784 + (C918 - C917) * C21777) *
                C139984 +
            ((C14765 - C14764) * C21780 + (C14767 - C14766) * C140009 +
             (C30370 - C30369) * C21782 + (C30372 - C30371) * C140010 +
             (C139824 * C3523 - C182 * C3441) * C21784 +
             (C139824 * C3527 - C182 * C3449) * C21777) *
                C139899) *
               C139809 * C140000) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexz[30] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C139984 * C266 - C29624 * C108 + C139899 * C1741 -
                       C29625 * C1570) *
                          C21780 +
                      (C139984 * C272 - C29624 * C115 + C139899 * C1746 -
                       C29625 * C1579) *
                          C140009 +
                      (C29627 - C29628 + C29629 - C29630) * C21782 +
                      (C29631 - C29632 + C29633 - C29634) * C140010 +
                      C29655 * C21784 + C29656 * C21777) *
                         C139824 * C139809 * C2322 +
                     ((C29624 * C813 - C139984 * C984 + C29625 * C3438 -
                       C139899 * C3594) *
                          C21780 +
                      (C29624 * C822 - C139984 * C989 + C29625 * C3443 -
                       C139899 * C3598) *
                          C140009 +
                      (C30471 - C30472 + C30473 - C30474) * C21782 +
                      (C30475 - C30476 + C30477 - C30478) * C140010 +
                      (C30479 - C30480 + C30481 - C30482) * C21784 +
                      (C30483 - C30484 + C30485 - C30486) * C21777) *
                         C139824 * C139809 * C140000) *
                        C2324 +
                    (((C29628 - C29627 + C29630 - C29629) * C21780 +
                      (C29632 - C29631 + C29634 - C29633) * C140009 +
                      (C29636 - C29635 + C29638 - C29637) * C21782 +
                      (C29640 - C29639 + C29642 - C29641) * C140010 +
                      (C29643 - C29644 + C29645 - C29646) * C21784 +
                      (C29647 - C29648 + C29649 - C29650) * C21777) *
                         C139824 * C139809 * C2322 +
                     ((C30472 - C30471 + C30474 - C30473) * C21780 +
                      (C30476 - C30475 + C30478 - C30477) * C140009 +
                      (C30480 - C30479 + C30482 - C30481) * C21782 +
                      (C30484 - C30483 + C30486 - C30485) * C140010 +
                      (C139984 * C987 - C29624 * C810 + C139899 * C3597 -
                       C29625 * C3441) *
                          C21784 +
                      (C139984 * C992 - C29624 * C816 + C139899 * C3601 -
                       C29625 * C3449) *
                          C21777) *
                         C139824 * C139809 * C140000) *
                        C139998)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[30] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C140009 * C114 - C21780 * C108 + C140010 * C116 - C21782 * C109 +
              C21777 * C118 - C21784 * C110) *
                 C182 +
             (C140009 * C354 - C21780 * C348 + C140010 * C355 - C21782 * C349 +
              C21777 * C356 - C21784 * C350) *
                 C139824) *
                C139984 +
            ((C31572 - C31573 + C31574 - C31575 + C31576 - C31577) * C182 +
             (C31578 - C31579 + C31580 - C31581 + C31582 - C31583) * C139824) *
                C139899) *
               C139809 * C2322 +
           (((C22944 - C22943 + C22946 - C22945 + C22948 - C22947) * C182 +
             (C22950 - C22949 + C22952 - C22951 + C22954 - C22953) * C139824) *
                C139984 +
            ((C26461 - C26462 + C26463 - C26464 + C26465 - C26466) * C182 +
             (C26467 - C26468 + C26469 - C26470 + C26471 - C26472) * C139824) *
                C139899) *
               C139809 * C140000) *
              C2324 +
          ((((C21780 * C109 - C140009 * C116 + C21782 * C110 - C140010 * C118 +
              C21784 * C111 - C21777 * C120) *
                 C182 +
             (C21780 * C349 - C140009 * C355 + C21782 * C350 - C140010 * C356 +
              C21784 * C351 - C21777 * C357) *
                 C139824) *
                C139984 +
            ((C31584 - C31585 + C31586 - C31587 + C31588 - C31589) * C182 +
             (C31590 - C31591 + C31592 - C31593 + C31594 - C31595) * C139824) *
                C139899) *
               C139809 * C2322 +
           (((C22956 - C22955 + C22958 - C22957 + C22960 - C22959) * C182 +
             (C22962 - C22961 + C22964 - C22963 + C22966 - C22965) * C139824) *
                C139984 +
            ((C140009 * C3444 - C21780 * C3439 + C140010 * C3446 -
              C21782 * C3440 + C21777 * C3448 - C21784 * C3441) *
                 C182 +
             (C140009 * C3673 - C21780 * C3669 + C140010 * C3674 -
              C21782 * C3670 + C21777 * C3675 - C21784 * C3671) *
                 C139824) *
                C139899) *
               C139809 * C140000) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[30] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C182 * C183 - C410 * C108 - C182 * C348 + C139824 * C411) *
                 C140009 +
             C442 * C140010 + C443 * C21777) *
                C139984 +
            (C31694 + C31695 + C31696) * C139899) *
               C139809 * C2322 -
           ((C30689 * C21777 + C15096 * C140010 + C18761 * C140009) * C139899 +
            (C1173 * C21777 + C1174 * C140010 +
             (C182 * C896 - C410 * C813 - C182 * C1072 + C139824 * C1151) *
                 C140009) *
                C139984) *
               C139809 * C140000) *
              C2324 +
          (((C1174 * C140009 + C1173 * C140010 + C1172 * C21777) * C139984 +
            (C15096 * C140009 + C30689 * C140010 +
             (C182 * C3523 - C410 * C3441 - C182 * C3671 + C139824 * C3745) *
                 C21777) *
                C139899) *
               C139809 * C140000 -
           ((C31699 + C31698 + C31697) * C139899 +
            (C444 * C21777 + C443 * C140010 + C442 * C140009) * C139984) *
               C139809 * C2322) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[30] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C139984 * C266 - C29624 * C108 + C139899 * C1741 -
                        C29625 * C1570) *
                           C182 +
                       (C139984 * C495 - C29624 * C348 + C139899 * C1997 -
                        C29625 * C1829) *
                           C139824) *
                          C140009 +
                      ((C29627 - C29628 + C29629 - C29630) * C182 +
                       (C29879 - C29880 + C29881 - C29882) * C139824) *
                          C140010 +
                      C29896 * C21777) *
                         C139809 * C2322 +
                     (((C29624 * C813 - C139984 * C984 + C29625 * C3438 -
                        C139899 * C3594) *
                           C182 +
                       (C29624 * C1072 - C139984 * C1240 + C29625 * C3668 -
                        C139899 * C3812) *
                           C139824) *
                          C140009 +
                      ((C30471 - C30472 + C30473 - C30474) * C182 +
                       (C30788 - C30789 + C30790 - C30791) * C139824) *
                          C140010 +
                      ((C30479 - C30480 + C30481 - C30482) * C182 +
                       (C30792 - C30793 + C30794 - C30795) * C139824) *
                          C21777) *
                         C139809 * C140000) *
                        C2324 +
                    ((((C29628 - C29627 + C29630 - C29629) * C182 +
                       (C29880 - C29879 + C29882 - C29881) * C139824) *
                          C140009 +
                      ((C29636 - C29635 + C29638 - C29637) * C182 +
                       (C29885 - C29884 + C29887 - C29886) * C139824) *
                          C140010 +
                      ((C29643 - C29644 + C29645 - C29646) * C182 +
                       (C29888 - C29889 + C29890 - C29891) * C139824) *
                          C21777) *
                         C139809 * C2322 +
                     (((C30472 - C30471 + C30474 - C30473) * C182 +
                       (C30789 - C30788 + C30791 - C30790) * C139824) *
                          C140009 +
                      ((C30480 - C30479 + C30482 - C30481) * C182 +
                       (C30793 - C30792 + C30795 - C30794) * C139824) *
                          C140010 +
                      ((C139984 * C987 - C29624 * C810 + C139899 * C3597 -
                        C29625 * C3441) *
                           C182 +
                       (C139984 * C1243 - C29624 * C1075 + C139899 * C3815 -
                        C29625 * C3671) *
                           C139824) *
                          C21777) *
                         C139809 * C140000) *
                        C139998)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[30] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C140009 * C114 - C21780 * C108 + C140010 * C116 - C21782 * C109 +
             C21777 * C118 - C21784 * C110) *
                C29624 +
            (C140009 * C573 - C21780 * C567 + C140010 * C574 - C21782 * C568 +
             C21777 * C575 - C21784 * C569) *
                C139984 +
            (C31572 - C31573 + C31574 - C31575 + C31576 - C31577) * C29625 +
            (C31904 - C31905 + C31906 - C31907 + C31908 - C31909) * C139899) *
               C139824 * C139809 * C2322 +
           ((C22944 - C22943 + C22946 - C22945 + C22948 - C22947) * C29624 +
            (C23291 - C23290 + C23293 - C23292 + C23295 - C23294) * C139984 +
            (C26461 - C26462 + C26463 - C26464 + C26465 - C26466) * C29625 +
            (C26767 - C26768 + C26769 - C26770 + C26771 - C26772) * C139899) *
               C139824 * C139809 * C140000) *
              C2324 +
          (((C21780 * C109 - C140009 * C116 + C21782 * C110 - C140010 * C118 +
             C21784 * C111 - C21777 * C120) *
                C29624 +
            (C21780 * C568 - C140009 * C574 + C21782 * C569 - C140010 * C575 +
             C21784 * C570 - C21777 * C576) *
                C139984 +
            (C31584 - C31585 + C31586 - C31587 + C31588 - C31589) * C29625 +
            (C31910 - C31911 + C31912 - C31913 + C31914 - C31915) * C139899) *
               C139824 * C139809 * C2322 +
           ((C22956 - C22955 + C22958 - C22957 + C22960 - C22959) * C29624 +
            (C23297 - C23296 + C23299 - C23298 + C23301 - C23300) * C139984 +
            (C140009 * C3444 - C21780 * C3439 + C140010 * C3446 -
             C21782 * C3440 + C21777 * C3448 - C21784 * C3441) *
                C29625 +
            (C140009 * C3887 - C21780 * C3883 + C140010 * C3888 -
             C21782 * C3884 + C21777 * C3889 - C21784 * C3885) *
                C139899) *
               C139824 * C139809 * C140000) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eezy[30] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139824 * C183 - C182 * C108) * C29624 +
             (C139824 * C629 - C182 * C567) * C139984 +
             (C15795 - C15796) * C29625 + (C16525 - C16526) * C139899) *
                C140009 +
            ((C196 - C197) * C29624 + (C636 - C637) * C139984 +
             C15799 * C29625 + C16529 * C139899) *
                C140010 +
            C30052 * C21777) *
               C139809 * C2322 +
           (((C182 * C813 - C139824 * C896) * C29624 +
             (C182 * C1317 - C139824 * C1393) * C139984 +
             (C18427 - C18428) * C29625 + (C19071 - C19072) * C139899) *
                C140009 +
            ((C907 - C908) * C29624 + (C1399 - C1400) * C139984 +
             (C14764 - C14765) * C29625 + (C15401 - C15402) * C139899) *
                C140010 +
            ((C911 - C912) * C29624 + (C1401 - C1402) * C139984 +
             (C30369 - C30370) * C29625 + (C30992 - C30993) * C139899) *
                C21777) *
               C139809 * C140000) *
              C2324 +
          ((((C197 - C196) * C29624 + (C637 - C636) * C139984 +
             C15807 * C29625 + C16531 * C139899) *
                C140009 +
            ((C201 - C200) * C29624 + (C640 - C639) * C139984 +
             C31358 * C29625 + C32014 * C139899) *
                C140010 +
            ((C205 - C204) * C29624 + (C643 - C642) * C139984 +
             (C1672 - C1673) * C29625 + (C2160 - C2161) * C139899) *
                C21777) *
               C139809 * C2322 +
           (((C908 - C907) * C29624 + (C1400 - C1399) * C139984 +
             (C14765 - C14764) * C29625 + (C15402 - C15401) * C139899) *
                C140009 +
            ((C912 - C911) * C29624 + (C1402 - C1401) * C139984 +
             (C30370 - C30369) * C29625 + (C30993 - C30992) * C139899) *
                C140010 +
            ((C916 - C915) * C29624 + (C1404 - C1403) * C139984 +
             (C139824 * C3523 - C182 * C3441) * C29625 +
             (C139824 * C3959 - C182 * C3885) * C139899) *
                C21777) *
               C139809 * C140000) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eezz[30] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C29624 * C266 - C30126 * C108 - C29624 * C567 +
                       C139984 * C702 + C29625 * C1741 - C30127 * C1570 -
                       C29625 * C2074 + C139899 * C2230) *
                          C139824 * C140009 +
                      (C30165 + C30166) * C139824 * C140010 + C30172 * C21777) *
                         C139809 * C2322 -
                     ((C31116 + C31117) * C139824 * C21777 +
                      (C31118 + C31119) * C139824 * C140010 +
                      (C29625 * C3594 - C30127 * C3438 - C29625 * C3882 +
                       C139899 * C4026 + C29624 * C984 - C30126 * C813 -
                       C29624 * C1317 + C139984 * C1473) *
                          C139824 * C140009) *
                         C139809 * C140000) *
                        C2324 +
                    (((C31119 + C31118) * C139824 * C140009 +
                      (C31117 + C31116) * C139824 * C140010 +
                      (C29624 * C987 - C30126 * C810 - C29624 * C1320 +
                       C139984 * C1470 + C29625 * C3597 - C30127 * C3441 -
                       C29625 * C3885 + C139899 * C4029) *
                          C139824 * C21777) *
                         C139809 * C140000 -
                     ((C30169 + C30170) * C139824 * C21777 +
                      (C30168 + C30167) * C139824 * C140010 +
                      (C30166 + C30165) * C139824 * C140009) *
                         C139809 * C2322) *
                        C139998)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[31] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C21780 * C114 - C21781 * C108 - C21780 * C115 + C140009 * C126 +
            C21782 * C116 - C21783 * C109 - C21782 * C117 + C140010 * C127 +
            C21784 * C118 - C21785 * C110 - C21784 * C119 + C21777 * C128) *
               C139984 +
           (C31254 + C31255 + C31256) * C139899) *
              C139824 * C139809 * C2904 -
          ((C26164 + C26165 + C26166) * C139899 +
           (C22627 + C22626 + C22625) * C139984) *
              C139824 * C139809 * C2905 +
          ((C25437 + C25436 + C25435) * C139984 +
           (C21780 * C7758 - C21781 * C7754 - C21780 * C7759 + C140009 * C7763 +
            C21782 * C7756 - C21783 * C7753 - C21782 * C7757 + C140010 * C7762 +
            C21784 * C7760 - C21785 * C7755 - C21784 * C7761 + C21777 * C7764) *
               C139899) *
              C139824 * C139809 * C2906) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eexy[31] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139824 * C183 - C182 * C108) * C21780 +
            (C139824 * C189 - C182 * C115) * C140009 + (C196 - C197) * C21782 +
            (C198 - C199) * C140010 + C212 * C21784 + C213 * C21777) *
               C139984 +
           ((C15795 - C15796) * C21780 + (C15797 - C15798) * C140009 +
            C15799 * C21782 + C15800 * C140010 + C29549 * C21784 +
            C29550 * C21777) *
               C139899) *
              C139809 * C2904 +
          (((C182 * C813 - C139824 * C896) * C21780 +
            (C182 * C822 - C139824 * C901) * C140009 + (C907 - C908) * C21782 +
            (C909 - C910) * C140010 + (C911 - C912) * C21784 +
            (C913 - C914) * C21777) *
               C139984 +
           ((C18427 - C18428) * C21780 + (C18429 - C18430) * C140009 +
            (C14764 - C14765) * C21782 + (C14766 - C14767) * C140010 +
            (C30369 - C30370) * C21784 + (C30371 - C30372) * C21777) *
               C139899) *
              C139809 * C2905 +
          (((C139824 * C2974 - C182 * C2908) * C21780 +
            (C139824 * C2978 - C182 * C2913) * C140009 +
            (C139824 * C2975 - C182 * C2909) * C21782 +
            (C139824 * C2979 - C182 * C2915) * C140010 +
            (C139824 * C2976 - C182 * C2910) * C21784 +
            (C139824 * C2980 - C182 * C2917) * C21777) *
               C139984 +
           ((C139824 * C7863 - C182 * C7754) * C21780 +
            (C139824 * C7866 - C182 * C7759) * C140009 +
            (C139824 * C7864 - C182 * C7753) * C21782 +
            (C139824 * C7867 - C182 * C7757) * C140010 +
            (C139824 * C7865 - C182 * C7755) * C21784 +
            (C139824 * C7868 - C182 * C7761) * C21777) *
               C139899) *
              C139809 * C2906) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eexz[31] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C139984 * C266 - C29624 * C108 + C139899 * C1741 - C29625 * C1570) *
               C21780 +
           (C139984 * C272 - C29624 * C115 + C139899 * C1746 - C29625 * C1579) *
               C140009 +
           (C29627 - C29628 + C29629 - C29630) * C21782 +
           (C29631 - C29632 + C29633 - C29634) * C140010 + C29655 * C21784 +
           C29656 * C21777) *
              C139824 * C139809 * C2904 +
          ((C29624 * C813 - C139984 * C984 + C29625 * C3438 - C139899 * C3594) *
               C21780 +
           (C29624 * C822 - C139984 * C989 + C29625 * C3443 - C139899 * C3598) *
               C140009 +
           (C30471 - C30472 + C30473 - C30474) * C21782 +
           (C30475 - C30476 + C30477 - C30478) * C140010 +
           (C30479 - C30480 + C30481 - C30482) * C21784 +
           (C30483 - C30484 + C30485 - C30486) * C21777) *
              C139824 * C139809 * C2905 +
          ((C139984 * C3032 - C29624 * C2908 + C139899 * C7979 -
            C29625 * C7754) *
               C21780 +
           (C139984 * C3036 - C29624 * C2913 + C139899 * C7982 -
            C29625 * C7759) *
               C140009 +
           (C139984 * C3033 - C29624 * C2909 + C139899 * C7980 -
            C29625 * C7753) *
               C21782 +
           (C139984 * C3037 - C29624 * C2915 + C139899 * C7983 -
            C29625 * C7757) *
               C140010 +
           (C139984 * C3034 - C29624 * C2910 + C139899 * C7981 -
            C29625 * C7755) *
               C21784 +
           (C139984 * C3038 - C29624 * C2917 + C139899 * C7984 -
            C29625 * C7761) *
               C21777) *
              C139824 * C139809 * C2906) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eeyx[31] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C140009 * C114 - C21780 * C108 + C140010 * C116 - C21782 * C109 +
             C21777 * C118 - C21784 * C110) *
                C182 +
            (C140009 * C354 - C21780 * C348 + C140010 * C355 - C21782 * C349 +
             C21777 * C356 - C21784 * C350) *
                C139824) *
               C139984 +
           ((C31572 - C31573 + C31574 - C31575 + C31576 - C31577) * C182 +
            (C31578 - C31579 + C31580 - C31581 + C31582 - C31583) * C139824) *
               C139899) *
              C139809 * C2904 +
          (((C22944 - C22943 + C22946 - C22945 + C22948 - C22947) * C182 +
            (C22950 - C22949 + C22952 - C22951 + C22954 - C22953) * C139824) *
               C139984 +
           ((C26461 - C26462 + C26463 - C26464 + C26465 - C26466) * C182 +
            (C26467 - C26468 + C26469 - C26470 + C26471 - C26472) * C139824) *
               C139899) *
              C139809 * C2905 +
          (((C25661 - C25660 + C25663 - C25662 + C25665 - C25664) * C182 +
            (C25667 - C25666 + C25669 - C25668 + C25671 - C25670) * C139824) *
               C139984 +
           ((C140009 * C7758 - C21780 * C7754 + C140010 * C7756 -
             C21782 * C7753 + C21777 * C7760 - C21784 * C7755) *
                C182 +
            (C140009 * C8094 - C21780 * C8091 + C140010 * C8095 -
             C21782 * C8092 + C21777 * C8096 - C21784 * C8093) *
                C139824) *
               C139899) *
              C139809 * C2906) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eeyy[31] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C182 * C183 - C410 * C108 - C182 * C348 + C139824 * C411) *
                C140009 +
            C442 * C140010 + C443 * C21777) *
               C139984 +
           (C31694 + C31695 + C31696) * C139899) *
              C139809 * C2904 -
          ((C30689 * C21777 + C15096 * C140010 + C18761 * C140009) * C139899 +
           (C1173 * C21777 + C1174 * C140010 +
            (C182 * C896 - C410 * C813 - C182 * C1072 + C139824 * C1151) *
                C140009) *
               C139984) *
              C139809 * C2905 +
          (((C182 * C2974 - C410 * C2908 - C182 * C3090 + C139824 * C3148) *
                C140009 +
            (C182 * C2975 - C410 * C2909 - C182 * C3091 + C139824 * C3149) *
                C140010 +
            (C182 * C2976 - C410 * C2910 - C182 * C3092 + C139824 * C3150) *
                C21777) *
               C139984 +
           ((C182 * C7863 - C410 * C7754 - C182 * C8091 + C139824 * C8196) *
                C140009 +
            (C182 * C7864 - C410 * C7753 - C182 * C8092 + C139824 * C8195) *
                C140010 +
            (C182 * C7865 - C410 * C7755 - C182 * C8093 + C139824 * C8197) *
                C21777) *
               C139899) *
              C139809 * C2906) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eeyz[31] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C139984 * C266 - C29624 * C108 + C139899 * C1741 -
                       C29625 * C1570) *
                          C182 +
                      (C139984 * C495 - C29624 * C348 + C139899 * C1997 -
                       C29625 * C1829) *
                          C139824) *
                         C140009 +
                     ((C29627 - C29628 + C29629 - C29630) * C182 +
                      (C29879 - C29880 + C29881 - C29882) * C139824) *
                         C140010 +
                     C29896 * C21777) *
                        C139809 * C2904 +
                    (((C29624 * C813 - C139984 * C984 + C29625 * C3438 -
                       C139899 * C3594) *
                          C182 +
                      (C29624 * C1072 - C139984 * C1240 + C29625 * C3668 -
                       C139899 * C3812) *
                          C139824) *
                         C140009 +
                     ((C30471 - C30472 + C30473 - C30474) * C182 +
                      (C30788 - C30789 + C30790 - C30791) * C139824) *
                         C140010 +
                     ((C30479 - C30480 + C30481 - C30482) * C182 +
                      (C30792 - C30793 + C30794 - C30795) * C139824) *
                         C21777) *
                        C139809 * C2905 +
                    (((C139984 * C3032 - C29624 * C2908 + C139899 * C7979 -
                       C29625 * C7754) *
                          C182 +
                      (C139984 * C3202 - C29624 * C3090 + C139899 * C8317 -
                       C29625 * C8091) *
                          C139824) *
                         C140009 +
                     ((C139984 * C3033 - C29624 * C2909 + C139899 * C7980 -
                       C29625 * C7753) *
                          C182 +
                      (C139984 * C3203 - C29624 * C3091 + C139899 * C8318 -
                       C29625 * C8092) *
                          C139824) *
                         C140010 +
                     ((C139984 * C3034 - C29624 * C2910 + C139899 * C7981 -
                       C29625 * C7755) *
                          C182 +
                      (C139984 * C3204 - C29624 * C3092 + C139899 * C8319 -
                       C29625 * C8093) *
                          C139824) *
                         C21777) *
                        C139809 * C2906) *
                   C139758) /
                  (p * q * std::sqrt(p + q));
    d2eezx[31] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C140009 * C114 - C21780 * C108 + C140010 * C116 - C21782 * C109 +
            C21777 * C118 - C21784 * C110) *
               C29624 +
           (C140009 * C573 - C21780 * C567 + C140010 * C574 - C21782 * C568 +
            C21777 * C575 - C21784 * C569) *
               C139984 +
           (C31572 - C31573 + C31574 - C31575 + C31576 - C31577) * C29625 +
           (C31904 - C31905 + C31906 - C31907 + C31908 - C31909) * C139899) *
              C139824 * C139809 * C2904 +
          ((C22944 - C22943 + C22946 - C22945 + C22948 - C22947) * C29624 +
           (C23291 - C23290 + C23293 - C23292 + C23295 - C23294) * C139984 +
           (C26461 - C26462 + C26463 - C26464 + C26465 - C26466) * C29625 +
           (C26767 - C26768 + C26769 - C26770 + C26771 - C26772) * C139899) *
              C139824 * C139809 * C2905 +
          ((C25661 - C25660 + C25663 - C25662 + C25665 - C25664) * C29624 +
           (C25895 - C25894 + C25897 - C25896 + C25899 - C25898) * C139984 +
           (C140009 * C7758 - C21780 * C7754 + C140010 * C7756 -
            C21782 * C7753 + C21777 * C7760 - C21784 * C7755) *
               C29625 +
           (C140009 * C8425 - C21780 * C8422 + C140010 * C8426 -
            C21782 * C8423 + C21777 * C8427 - C21784 * C8424) *
               C139899) *
              C139824 * C139809 * C2906) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eezy[31] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139824 * C183 - C182 * C108) * C29624 +
            (C139824 * C629 - C182 * C567) * C139984 +
            (C15795 - C15796) * C29625 + (C16525 - C16526) * C139899) *
               C140009 +
           ((C196 - C197) * C29624 + (C636 - C637) * C139984 + C15799 * C29625 +
            C16529 * C139899) *
               C140010 +
           C30052 * C21777) *
              C139809 * C2904 +
          (((C182 * C813 - C139824 * C896) * C29624 +
            (C182 * C1317 - C139824 * C1393) * C139984 +
            (C18427 - C18428) * C29625 + (C19071 - C19072) * C139899) *
               C140009 +
           ((C907 - C908) * C29624 + (C1399 - C1400) * C139984 +
            (C14764 - C14765) * C29625 + (C15401 - C15402) * C139899) *
               C140010 +
           ((C911 - C912) * C29624 + (C1401 - C1402) * C139984 +
            (C30369 - C30370) * C29625 + (C30992 - C30993) * C139899) *
               C21777) *
              C139809 * C2905 +
          (((C139824 * C2974 - C182 * C2908) * C29624 +
            (C139824 * C3314 - C182 * C3256) * C139984 +
            (C139824 * C7863 - C182 * C7754) * C29625 +
            (C139824 * C8526 - C182 * C8422) * C139899) *
               C140009 +
           ((C139824 * C2975 - C182 * C2909) * C29624 +
            (C139824 * C3315 - C182 * C3257) * C139984 +
            (C139824 * C7864 - C182 * C7753) * C29625 +
            (C139824 * C8527 - C182 * C8423) * C139899) *
               C140010 +
           ((C139824 * C2976 - C182 * C2910) * C29624 +
            (C139824 * C3316 - C182 * C3258) * C139984 +
            (C139824 * C7865 - C182 * C7755) * C29625 +
            (C139824 * C8528 - C182 * C8424) * C139899) *
               C21777) *
              C139809 * C2906) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eezz[31] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C29624 * C266 - C30126 * C108 - C29624 * C567 + C139984 * C702 +
            C29625 * C1741 - C30127 * C1570 - C29625 * C2074 +
            C139899 * C2230) *
               C139824 * C140009 +
           (C30165 + C30166) * C139824 * C140010 + C30172 * C21777) *
              C139809 * C2904 -
          ((C31116 + C31117) * C139824 * C21777 +
           (C31118 + C31119) * C139824 * C140010 +
           (C29625 * C3594 - C30127 * C3438 - C29625 * C3882 + C139899 * C4026 +
            C29624 * C984 - C30126 * C813 - C29624 * C1317 + C139984 * C1473) *
               C139824 * C140009) *
              C139809 * C2905 +
          ((C29624 * C3032 - C30126 * C2908 - C29624 * C3256 + C139984 * C3368 +
            C29625 * C7979 - C30127 * C7754 - C29625 * C8422 +
            C139899 * C8634) *
               C139824 * C140009 +
           (C29624 * C3033 - C30126 * C2909 - C29624 * C3257 + C139984 * C3369 +
            C29625 * C7980 - C30127 * C7753 - C29625 * C8423 +
            C139899 * C8633) *
               C139824 * C140010 +
           (C29624 * C3034 - C30126 * C2910 - C29624 * C3258 + C139984 * C3370 +
            C29625 * C7981 - C30127 * C7755 - C29625 * C8424 +
            C139899 * C8635) *
               C139824 * C21777) *
              C139809 * C2906) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eexx[32] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C21780 * C114 - C21781 * C108 - C21780 * C115 + C140009 * C126 +
             C21782 * C116 - C21783 * C109 - C21782 * C117 + C140010 * C127 +
             C21784 * C118 - C21785 * C110 - C21784 * C119 + C21777 * C128) *
                C139984 +
            (C31254 + C31255 + C31256) * C139899) *
               C139824 * C1565 -
           ((C21784 * C5281 - C21785 * C5275 - C21784 * C5282 + C21777 * C5287 +
             C21782 * C5279 - C21783 * C5274 - C21782 * C5280 +
             C140010 * C5286 + C21780 * C5277 - C21781 * C5273 -
             C21780 * C5278 + C140009 * C5285) *
                C139899 +
            (C31256 + C31255 + C31254) * C139984) *
               C139824 * C140002) *
              C2322 +
          (((C26166 + C26165 + C26164) * C139984 +
            (C21780 * C13130 - C21781 * C13126 - C21780 * C13131 +
             C140009 * C13138 + C21782 * C13132 - C21783 * C13127 -
             C21782 * C13133 + C140010 * C13139 + C21784 * C14660 -
             C21785 * C14659 - C21784 * C14661 + C21777 * C14662) *
                C139899) *
               C139824 * C140002 -
           ((C26164 + C26165 + C26166) * C139899 +
            (C22627 + C22626 + C22625) * C139984) *
               C139824 * C1565) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eexy[32] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139824 * C183 - C182 * C108) * C21780 +
             (C139824 * C189 - C182 * C115) * C140009 + (C196 - C197) * C21782 +
             (C198 - C199) * C140010 + C212 * C21784 + C213 * C21777) *
                C139984 +
            ((C15795 - C15796) * C21780 + (C15797 - C15798) * C140009 +
             C15799 * C21782 + C15800 * C140010 + C29549 * C21784 +
             C29550 * C21777) *
                C139899) *
               C1565 +
           (((C15796 - C15795) * C21780 + (C15798 - C15797) * C140009 +
             C15807 * C21782 + C15808 * C140010 + C31358 * C21784 +
             C31359 * C21777) *
                C139984 +
            ((C15802 - C15801) * C21780 + (C15804 - C15803) * C140009 +
             C15809 * C21782 + C15810 * C140010 + (C13938 - C13939) * C21784 +
             (C13940 - C13941) * C21777) *
                C139899) *
               C140002) *
              C2322 +
          ((((C182 * C813 - C139824 * C896) * C21780 +
             (C182 * C822 - C139824 * C901) * C140009 + (C907 - C908) * C21782 +
             (C909 - C910) * C140010 + (C911 - C912) * C21784 +
             (C913 - C914) * C21777) *
                C139984 +
            ((C18427 - C18428) * C21780 + (C18429 - C18430) * C140009 +
             (C14764 - C14765) * C21782 + (C14766 - C14767) * C140010 +
             (C30369 - C30370) * C21784 + (C30371 - C30372) * C21777) *
                C139899) *
               C1565 +
           (((C18428 - C18427) * C21780 + (C18430 - C18429) * C140009 +
             (C14765 - C14764) * C21782 + (C14767 - C14766) * C140010 +
             (C30370 - C30369) * C21784 + (C30372 - C30371) * C21777) *
                C139984 +
            ((C18432 - C18431) * C21780 + (C18434 - C18433) * C140009 +
             (C14769 - C14768) * C21782 + (C14771 - C14770) * C140010 +
             (C139824 * C14761 - C182 * C14659) * C21784 +
             (C139824 * C14762 - C182 * C14661) * C21777) *
                C139899) *
               C140002) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eexz[32] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C139984 * C266 - C29624 * C108 + C139899 * C1741 -
                       C29625 * C1570) *
                          C21780 +
                      (C139984 * C272 - C29624 * C115 + C139899 * C1746 -
                       C29625 * C1579) *
                          C140009 +
                      (C29627 - C29628 + C29629 - C29630) * C21782 +
                      (C29631 - C29632 + C29633 - C29634) * C140010 +
                      C29655 * C21784 + C29656 * C21777) *
                         C139824 * C1565 +
                     ((C29624 * C1570 - C139984 * C1741 + C29625 * C5273 -
                       C139899 * C5397) *
                          C21780 +
                      (C29624 * C1579 - C139984 * C1746 + C29625 * C5278 -
                       C139899 * C5401) *
                          C140009 +
                      (C31458 - C31459 + C31460 - C31461) * C21782 +
                      (C31462 - C31463 + C31464 - C31465) * C140010 +
                      (C31466 - C31467 + C31468 - C31469) * C21784 +
                      (C31470 - C31471 + C31472 - C31473) * C21777) *
                         C139824 * C140002) *
                        C2322 +
                    (((C29624 * C813 - C139984 * C984 + C29625 * C3438 -
                       C139899 * C3594) *
                          C21780 +
                      (C29624 * C822 - C139984 * C989 + C29625 * C3443 -
                       C139899 * C3598) *
                          C140009 +
                      (C30471 - C30472 + C30473 - C30474) * C21782 +
                      (C30475 - C30476 + C30477 - C30478) * C140010 +
                      (C30479 - C30480 + C30481 - C30482) * C21784 +
                      (C30483 - C30484 + C30485 - C30486) * C21777) *
                         C139824 * C1565 +
                     ((C139984 * C3594 - C29624 * C3438 + C139899 * C13298 -
                       C29625 * C13126) *
                          C21780 +
                      (C139984 * C3598 - C29624 * C3443 + C139899 * C13302 -
                       C29625 * C13131) *
                          C140009 +
                      (C139984 * C3595 - C29624 * C3439 + C139899 * C13299 -
                       C29625 * C13127) *
                          C21782 +
                      (C139984 * C3599 - C29624 * C3445 + C139899 * C13303 -
                       C29625 * C13133) *
                          C140010 +
                      (C139984 * C3596 - C29624 * C3440 + C139899 * C14869 -
                       C29625 * C14659) *
                          C21784 +
                      (C139984 * C3600 - C29624 * C3447 + C139899 * C14870 -
                       C29625 * C14661) *
                          C21777) *
                         C139824 * C140002) *
                        C140000) *
                   C139758) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[32] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C140009 * C114 - C21780 * C108 + C140010 * C116 - C21782 * C109 +
              C21777 * C118 - C21784 * C110) *
                 C182 +
             (C140009 * C354 - C21780 * C348 + C140010 * C355 - C21782 * C349 +
              C21777 * C356 - C21784 * C350) *
                 C139824) *
                C139984 +
            ((C31572 - C31573 + C31574 - C31575 + C31576 - C31577) * C182 +
             (C31578 - C31579 + C31580 - C31581 + C31582 - C31583) * C139824) *
                C139899) *
               C1565 +
           (((C31573 - C31572 + C31575 - C31574 + C31577 - C31576) * C182 +
             (C31579 - C31578 + C31581 - C31580 + C31583 - C31582) * C139824) *
                C139984 +
            ((C21780 * C5273 - C140009 * C5277 + C21782 * C5274 -
              C140010 * C5279 + C21784 * C5275 - C21777 * C5281) *
                 C182 +
             (C21780 * C5455 - C140009 * C5459 + C21782 * C5456 -
              C140010 * C5460 + C21784 * C5457 - C21777 * C5461) *
                 C139824) *
                C139899) *
               C140002) *
              C2322 +
          ((((C22944 - C22943 + C22946 - C22945 + C22948 - C22947) * C182 +
             (C22950 - C22949 + C22952 - C22951 + C22954 - C22953) * C139824) *
                C139984 +
            ((C26461 - C26462 + C26463 - C26464 + C26465 - C26466) * C182 +
             (C26467 - C26468 + C26469 - C26470 + C26471 - C26472) * C139824) *
                C139899) *
               C1565 +
           (((C26462 - C26461 + C26464 - C26463 + C26466 - C26465) * C182 +
             (C26468 - C26467 + C26470 - C26469 + C26472 - C26471) * C139824) *
                C139984 +
            ((C140009 * C13130 - C21780 * C13126 + C140010 * C13132 -
              C21782 * C13127 + C21777 * C14660 - C21784 * C14659) *
                 C182 +
             (C140009 * C13384 - C21780 * C13380 + C140010 * C13385 -
              C21782 * C13381 + C21777 * C14982 - C21784 * C14981) *
                 C139824) *
                C139899) *
               C140002) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eeyy[32] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C182 * C183 - C410 * C108 - C182 * C348 + C139824 * C411) *
                 C140009 +
             C442 * C140010 + C443 * C21777) *
                C139984 +
            (C31694 + C31695 + C31696) * C139899) *
               C1565 -
           ((C14204 * C21777 + C14203 * C140010 + C16193 * C140009) * C139899 +
            (C31696 + C31695 + C31694) * C139984) *
               C140002) *
              C2322 +
          (((C34179 + C34180 + C34181) * C139984 +
            (C18762 * C140009 + C15095 * C140010 +
             (C182 * C14761 - C410 * C14659 - C182 * C14981 +
              C139824 * C15081) *
                 C21777) *
                C139899) *
               C140002 -
           ((C34181 + C34180 + C34179) * C139899 +
            (C1173 * C21777 + C1174 * C140010 +
             (C182 * C896 - C410 * C813 - C182 * C1072 + C139824 * C1151) *
                 C140009) *
                C139984) *
               C1565) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eeyz[32] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C139984 * C266 - C29624 * C108 + C139899 * C1741 -
                        C29625 * C1570) *
                           C182 +
                       (C139984 * C495 - C29624 * C348 + C139899 * C1997 -
                        C29625 * C1829) *
                           C139824) *
                          C140009 +
                      ((C29627 - C29628 + C29629 - C29630) * C182 +
                       (C29879 - C29880 + C29881 - C29882) * C139824) *
                          C140010 +
                      C29896 * C21777) *
                         C1565 +
                     (((C29624 * C1570 - C139984 * C1741 + C29625 * C5273 -
                        C139899 * C5397) *
                           C182 +
                       (C29624 * C1829 - C139984 * C1997 + C29625 * C5455 -
                        C139899 * C5567) *
                           C139824) *
                          C140009 +
                      ((C31458 - C31459 + C31460 - C31461) * C182 +
                       (C31798 - C31799 + C31800 - C31801) * C139824) *
                          C140010 +
                      ((C31466 - C31467 + C31468 - C31469) * C182 +
                       (C31802 - C31803 + C31804 - C31805) * C139824) *
                          C21777) *
                         C140002) *
                        C2322 +
                    ((((C29624 * C813 - C139984 * C984 + C29625 * C3438 -
                        C139899 * C3594) *
                           C182 +
                       (C29624 * C1072 - C139984 * C1240 + C29625 * C3668 -
                        C139899 * C3812) *
                           C139824) *
                          C140009 +
                      ((C30471 - C30472 + C30473 - C30474) * C182 +
                       (C30788 - C30789 + C30790 - C30791) * C139824) *
                          C140010 +
                      ((C30479 - C30480 + C30481 - C30482) * C182 +
                       (C30792 - C30793 + C30794 - C30795) * C139824) *
                          C21777) *
                         C1565 +
                     (((C139984 * C3594 - C29624 * C3438 + C139899 * C13298 -
                        C29625 * C13126) *
                           C182 +
                       (C139984 * C3812 - C29624 * C3668 + C139899 * C13540 -
                        C29625 * C13380) *
                           C139824) *
                          C140009 +
                      ((C139984 * C3595 - C29624 * C3439 + C139899 * C13299 -
                        C29625 * C13127) *
                           C182 +
                       (C139984 * C3813 - C29624 * C3669 + C139899 * C13542 -
                        C29625 * C13381) *
                           C139824) *
                          C140010 +
                      ((C139984 * C3596 - C29624 * C3440 + C139899 * C14869 -
                        C29625 * C14659) *
                           C182 +
                       (C139984 * C3814 - C29624 * C3670 + C139899 * C15194 -
                        C29625 * C14981) *
                           C139824) *
                          C21777) *
                         C140002) *
                        C140000) *
                   C139758) /
                  (p * q * std::sqrt(p + q));
    d2eezx[32] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C140009 * C114 - C21780 * C108 + C140010 * C116 - C21782 * C109 +
             C21777 * C118 - C21784 * C110) *
                C29624 +
            (C140009 * C573 - C21780 * C567 + C140010 * C574 - C21782 * C568 +
             C21777 * C575 - C21784 * C569) *
                C139984 +
            (C31572 - C31573 + C31574 - C31575 + C31576 - C31577) * C29625 +
            (C31904 - C31905 + C31906 - C31907 + C31908 - C31909) * C139899) *
               C139824 * C1565 +
           ((C31573 - C31572 + C31575 - C31574 + C31577 - C31576) * C29624 +
            (C31905 - C31904 + C31907 - C31906 + C31909 - C31908) * C139984 +
            (C21780 * C5273 - C140009 * C5277 + C21782 * C5274 -
             C140010 * C5279 + C21784 * C5275 - C21777 * C5281) *
                C29625 +
            (C21780 * C5621 - C140009 * C5625 + C21782 * C5622 -
             C140010 * C5626 + C21784 * C5623 - C21777 * C5627) *
                C139899) *
               C139824 * C140002) *
              C2322 +
          (((C22944 - C22943 + C22946 - C22945 + C22948 - C22947) * C29624 +
            (C23291 - C23290 + C23293 - C23292 + C23295 - C23294) * C139984 +
            (C26461 - C26462 + C26463 - C26464 + C26465 - C26466) * C29625 +
            (C26767 - C26768 + C26769 - C26770 + C26771 - C26772) * C139899) *
               C139824 * C1565 +
           ((C26462 - C26461 + C26464 - C26463 + C26466 - C26465) * C29624 +
            (C26768 - C26767 + C26770 - C26769 + C26772 - C26771) * C139984 +
            (C140009 * C13130 - C21780 * C13126 + C140010 * C13132 -
             C21782 * C13127 + C21777 * C14660 - C21784 * C14659) *
                C29625 +
            (C140009 * C13622 - C21780 * C13618 + C140010 * C13623 -
             C21782 * C13619 + C21777 * C15300 - C21784 * C15299) *
                C139899) *
               C139824 * C140002) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eezy[32] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139824 * C183 - C182 * C108) * C29624 +
             (C139824 * C629 - C182 * C567) * C139984 +
             (C15795 - C15796) * C29625 + (C16525 - C16526) * C139899) *
                C140009 +
            ((C196 - C197) * C29624 + (C636 - C637) * C139984 +
             C15799 * C29625 + C16529 * C139899) *
                C140010 +
            C30052 * C21777) *
               C1565 +
           (((C15796 - C15795) * C29624 + (C16526 - C16525) * C139984 +
             (C15802 - C15801) * C29625 + (C16528 - C16527) * C139899) *
                C140009 +
            (C15807 * C29624 + C16531 * C139984 + C15809 * C29625 +
             C16532 * C139899) *
                C140010 +
            (C31358 * C29624 + C32014 * C139984 + (C13938 - C13939) * C29625 +
             (C14441 - C14442) * C139899) *
                C21777) *
               C140002) *
              C2322 +
          ((((C182 * C813 - C139824 * C896) * C29624 +
             (C182 * C1317 - C139824 * C1393) * C139984 +
             (C18427 - C18428) * C29625 + (C19071 - C19072) * C139899) *
                C140009 +
            ((C907 - C908) * C29624 + (C1399 - C1400) * C139984 +
             (C14764 - C14765) * C29625 + (C15401 - C15402) * C139899) *
                C140010 +
            ((C911 - C912) * C29624 + (C1401 - C1402) * C139984 +
             (C30369 - C30370) * C29625 + (C30992 - C30993) * C139899) *
                C21777) *
               C1565 +
           (((C18428 - C18427) * C29624 + (C19072 - C19071) * C139984 +
             (C18432 - C18431) * C29625 + (C19074 - C19073) * C139899) *
                C140009 +
            ((C14765 - C14764) * C29624 + (C15402 - C15401) * C139984 +
             (C14769 - C14768) * C29625 + (C15404 - C15403) * C139899) *
                C140010 +
            ((C30370 - C30369) * C29624 + (C30993 - C30992) * C139984 +
             (C139824 * C14761 - C182 * C14659) * C29625 +
             (C139824 * C15399 - C182 * C15299) * C139899) *
                C21777) *
               C140002) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eezz[32] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C29624 * C266 - C30126 * C108 - C29624 * C567 +
                       C139984 * C702 + C29625 * C1741 - C30127 * C1570 -
                       C29625 * C2074 + C139899 * C2230) *
                          C139824 * C140009 +
                      (C30165 + C30166) * C139824 * C140010 + C30172 * C21777) *
                         C1565 -
                     ((C32137 + C32138) * C139824 * C21777 +
                      (C32139 + C32140) * C139824 * C140010 +
                      (C29625 * C5397 - C30127 * C5273 - C29625 * C5621 +
                       C139899 * C5733 + C29624 * C1741 - C30126 * C1570 -
                       C29624 * C2074 + C139984 * C2230) *
                          C139824 * C140009) *
                         C140002) *
                        C2322 +
                    (((C29624 * C3594 - C30126 * C3438 - C29624 * C3882 +
                       C139984 * C4026 + C29625 * C13298 - C30127 * C13126 -
                       C29625 * C13618 + C139899 * C13778) *
                          C139824 * C140009 +
                      (C29624 * C3595 - C30126 * C3439 - C29624 * C3883 +
                       C139984 * C4027 + C29625 * C13299 - C30127 * C13127 -
                       C29625 * C13619 + C139899 * C13780) *
                          C139824 * C140010 +
                      (C29624 * C3596 - C30126 * C3440 - C29624 * C3884 +
                       C139984 * C4028 + C29625 * C14869 - C30127 * C14659 -
                       C29625 * C15299 + C139899 * C15502) *
                          C139824 * C21777) *
                         C140002 -
                     ((C31116 + C31117) * C139824 * C21777 +
                      (C31118 + C31119) * C139824 * C140010 +
                      (C29625 * C3594 - C30127 * C3438 - C29625 * C3882 +
                       C139899 * C4026 + C29624 * C984 - C30126 * C813 -
                       C29624 * C1317 + C139984 * C1473) *
                          C139824 * C140009) *
                         C1565) *
                        C140000) *
                   C139758) /
                  (p * q * std::sqrt(p + q));
    d2eexx[33] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C21780 * C114 - C21781 * C108 - C21780 * C115 + C140009 * C126 +
             C21782 * C116 - C21783 * C109 - C21782 * C117 + C140010 * C127 +
             C21784 * C118 - C21785 * C110 - C21784 * C119 + C21777 * C128) *
                C139984 +
            (C31254 + C31255 + C31256) * C139899) *
               C139824 * C4096 -
           ((C21784 * C5281 - C21785 * C5275 - C21784 * C5282 + C21777 * C5287 +
             C21782 * C5279 - C21783 * C5274 - C21782 * C5280 +
             C140010 * C5286 + C21780 * C5277 - C21781 * C5273 -
             C21780 * C5278 + C140009 * C5285) *
                C139899 +
            (C31256 + C31255 + C31254) * C139984) *
               C139824 * C140002) *
              C139792 * C2324 +
          (((C31257 + C31258 + C31259) * C139984 +
            (C21780 * C5279 - C21781 * C5274 - C21780 * C5280 +
             C140009 * C5286 + C21782 * C5281 - C21783 * C5275 -
             C21782 * C5282 + C140010 * C5287 + C21784 * C5283 -
             C21785 * C5276 - C21784 * C5284 + C21777 * C5288) *
                C139899) *
               C139824 * C140002 -
           ((C31259 + C31258 + C31257) * C139899 +
            (C21784 * C120 - C21785 * C111 - C21784 * C121 + C21777 * C129 +
             C21782 * C118 - C21783 * C110 - C21782 * C119 + C140010 * C128 +
             C21780 * C116 - C21781 * C109 - C21780 * C117 + C140009 * C127) *
                C139984) *
               C139824 * C4096) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexy[33] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139824 * C183 - C182 * C108) * C21780 +
             (C139824 * C189 - C182 * C115) * C140009 + (C196 - C197) * C21782 +
             (C198 - C199) * C140010 + C212 * C21784 + C213 * C21777) *
                C139984 +
            ((C15795 - C15796) * C21780 + (C15797 - C15798) * C140009 +
             C15799 * C21782 + C15800 * C140010 + C29549 * C21784 +
             C29550 * C21777) *
                C139899) *
               C4096 +
           (((C15796 - C15795) * C21780 + (C15798 - C15797) * C140009 +
             C15807 * C21782 + C15808 * C140010 + C31358 * C21784 +
             C31359 * C21777) *
                C139984 +
            ((C15802 - C15801) * C21780 + (C15804 - C15803) * C140009 +
             C15809 * C21782 + C15810 * C140010 + (C13938 - C13939) * C21784 +
             (C13940 - C13941) * C21777) *
                C139899) *
               C140002) *
              C139792 * C2324 +
          ((((C197 - C196) * C21780 + (C199 - C198) * C140009 +
             (C201 - C200) * C21782 + (C203 - C202) * C140010 +
             (C205 - C204) * C21784 + (C207 - C206) * C21777) *
                C139984 +
            (C15807 * C21780 + C15808 * C140009 + C31358 * C21782 +
             C31359 * C140010 + (C1672 - C1673) * C21784 +
             (C1674 - C1675) * C21777) *
                C139899) *
               C4096 +
           ((C15799 * C21780 + C15800 * C140009 + C29549 * C21782 +
             C29550 * C140010 + (C1673 - C1672) * C21784 +
             (C1675 - C1674) * C21777) *
                C139984 +
            (C15805 * C21780 + C15806 * C140009 + (C13939 - C13938) * C21782 +
             (C13941 - C13940) * C140010 +
             (C139824 * C5342 - C182 * C5276) * C21784 +
             (C139824 * C5346 - C182 * C5284) * C21777) *
                C139899) *
               C140002) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexz[33] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C139984 * C266 - C29624 * C108 + C139899 * C1741 -
                       C29625 * C1570) *
                          C21780 +
                      (C139984 * C272 - C29624 * C115 + C139899 * C1746 -
                       C29625 * C1579) *
                          C140009 +
                      (C29627 - C29628 + C29629 - C29630) * C21782 +
                      (C29631 - C29632 + C29633 - C29634) * C140010 +
                      C29655 * C21784 + C29656 * C21777) *
                         C139824 * C4096 +
                     ((C29624 * C1570 - C139984 * C1741 + C29625 * C5273 -
                       C139899 * C5397) *
                          C21780 +
                      (C29624 * C1579 - C139984 * C1746 + C29625 * C5278 -
                       C139899 * C5401) *
                          C140009 +
                      (C31458 - C31459 + C31460 - C31461) * C21782 +
                      (C31462 - C31463 + C31464 - C31465) * C140010 +
                      (C31466 - C31467 + C31468 - C31469) * C21784 +
                      (C31470 - C31471 + C31472 - C31473) * C21777) *
                         C139824 * C140002) *
                        C139792 * C2324 +
                    (((C29628 - C29627 + C29630 - C29629) * C21780 +
                      (C29632 - C29631 + C29634 - C29633) * C140009 +
                      (C29636 - C29635 + C29638 - C29637) * C21782 +
                      (C29640 - C29639 + C29642 - C29641) * C140010 +
                      (C29643 - C29644 + C29645 - C29646) * C21784 +
                      (C29647 - C29648 + C29649 - C29650) * C21777) *
                         C139824 * C4096 +
                     ((C31459 - C31458 + C31461 - C31460) * C21780 +
                      (C31463 - C31462 + C31465 - C31464) * C140009 +
                      (C31467 - C31466 + C31469 - C31468) * C21782 +
                      (C31471 - C31470 + C31473 - C31472) * C140010 +
                      (C139984 * C1744 - C29624 * C1567 + C139899 * C5400 -
                       C29625 * C5276) *
                          C21784 +
                      (C139984 * C1749 - C29624 * C1573 + C139899 * C5404 -
                       C29625 * C5284) *
                          C21777) *
                         C139824 * C140002) *
                        C139792 * C139998)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[33] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C140009 * C114 - C21780 * C108 + C140010 * C116 - C21782 * C109 +
              C21777 * C118 - C21784 * C110) *
                 C182 +
             (C140009 * C354 - C21780 * C348 + C140010 * C355 - C21782 * C349 +
              C21777 * C356 - C21784 * C350) *
                 C139824) *
                C139984 +
            ((C31572 - C31573 + C31574 - C31575 + C31576 - C31577) * C182 +
             (C31578 - C31579 + C31580 - C31581 + C31582 - C31583) * C139824) *
                C139899) *
               C4096 +
           (((C31573 - C31572 + C31575 - C31574 + C31577 - C31576) * C182 +
             (C31579 - C31578 + C31581 - C31580 + C31583 - C31582) * C139824) *
                C139984 +
            ((C21780 * C5273 - C140009 * C5277 + C21782 * C5274 -
              C140010 * C5279 + C21784 * C5275 - C21777 * C5281) *
                 C182 +
             (C21780 * C5455 - C140009 * C5459 + C21782 * C5456 -
              C140010 * C5460 + C21784 * C5457 - C21777 * C5461) *
                 C139824) *
                C139899) *
               C140002) *
              C139792 * C2324 +
          ((((C21780 * C109 - C140009 * C116 + C21782 * C110 - C140010 * C118 +
              C21784 * C111 - C21777 * C120) *
                 C182 +
             (C21780 * C349 - C140009 * C355 + C21782 * C350 - C140010 * C356 +
              C21784 * C351 - C21777 * C357) *
                 C139824) *
                C139984 +
            ((C31584 - C31585 + C31586 - C31587 + C31588 - C31589) * C182 +
             (C31590 - C31591 + C31592 - C31593 + C31594 - C31595) * C139824) *
                C139899) *
               C4096 +
           (((C31585 - C31584 + C31587 - C31586 + C31589 - C31588) * C182 +
             (C31591 - C31590 + C31593 - C31592 + C31595 - C31594) * C139824) *
                C139984 +
            ((C140009 * C5279 - C21780 * C5274 + C140010 * C5281 -
              C21782 * C5275 + C21777 * C5283 - C21784 * C5276) *
                 C182 +
             (C140009 * C5460 - C21780 * C5456 + C140010 * C5461 -
              C21782 * C5457 + C21777 * C5462 - C21784 * C5458) *
                 C139824) *
                C139899) *
               C140002) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[33] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C182 * C183 - C410 * C108 - C182 * C348 + C139824 * C411) *
                 C140009 +
             C442 * C140010 + C443 * C21777) *
                C139984 +
            (C31694 + C31695 + C31696) * C139899) *
               C4096 -
           ((C14204 * C21777 + C14203 * C140010 + C16193 * C140009) * C139899 +
            (C31696 + C31695 + C31694) * C139984) *
               C140002) *
              C139792 * C2324 +
          (((C31697 + C31698 + C31699) * C139984 +
            (C14203 * C140009 + C14204 * C140010 +
             (C182 * C5342 - C410 * C5276 - C182 * C5458 + C139824 * C5516) *
                 C21777) *
                C139899) *
               C140002 -
           ((C31699 + C31698 + C31697) * C139899 +
            (C444 * C21777 + C443 * C140010 + C442 * C140009) * C139984) *
               C4096) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[33] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C139984 * C266 - C29624 * C108 + C139899 * C1741 -
                        C29625 * C1570) *
                           C182 +
                       (C139984 * C495 - C29624 * C348 + C139899 * C1997 -
                        C29625 * C1829) *
                           C139824) *
                          C140009 +
                      ((C29627 - C29628 + C29629 - C29630) * C182 +
                       (C29879 - C29880 + C29881 - C29882) * C139824) *
                          C140010 +
                      C29896 * C21777) *
                         C4096 +
                     (((C29624 * C1570 - C139984 * C1741 + C29625 * C5273 -
                        C139899 * C5397) *
                           C182 +
                       (C29624 * C1829 - C139984 * C1997 + C29625 * C5455 -
                        C139899 * C5567) *
                           C139824) *
                          C140009 +
                      ((C31458 - C31459 + C31460 - C31461) * C182 +
                       (C31798 - C31799 + C31800 - C31801) * C139824) *
                          C140010 +
                      ((C31466 - C31467 + C31468 - C31469) * C182 +
                       (C31802 - C31803 + C31804 - C31805) * C139824) *
                          C21777) *
                         C140002) *
                        C139792 * C2324 +
                    ((((C29628 - C29627 + C29630 - C29629) * C182 +
                       (C29880 - C29879 + C29882 - C29881) * C139824) *
                          C140009 +
                      ((C29636 - C29635 + C29638 - C29637) * C182 +
                       (C29885 - C29884 + C29887 - C29886) * C139824) *
                          C140010 +
                      ((C29643 - C29644 + C29645 - C29646) * C182 +
                       (C29888 - C29889 + C29890 - C29891) * C139824) *
                          C21777) *
                         C4096 +
                     (((C31459 - C31458 + C31461 - C31460) * C182 +
                       (C31799 - C31798 + C31801 - C31800) * C139824) *
                          C140009 +
                      ((C31467 - C31466 + C31469 - C31468) * C182 +
                       (C31803 - C31802 + C31805 - C31804) * C139824) *
                          C140010 +
                      ((C139984 * C1744 - C29624 * C1567 + C139899 * C5400 -
                        C29625 * C5276) *
                           C182 +
                       (C139984 * C2000 - C29624 * C1832 + C139899 * C5570 -
                        C29625 * C5458) *
                           C139824) *
                          C21777) *
                         C140002) *
                        C139792 * C139998)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[33] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C140009 * C114 - C21780 * C108 + C140010 * C116 - C21782 * C109 +
             C21777 * C118 - C21784 * C110) *
                C29624 +
            (C140009 * C573 - C21780 * C567 + C140010 * C574 - C21782 * C568 +
             C21777 * C575 - C21784 * C569) *
                C139984 +
            (C31572 - C31573 + C31574 - C31575 + C31576 - C31577) * C29625 +
            (C31904 - C31905 + C31906 - C31907 + C31908 - C31909) * C139899) *
               C139824 * C4096 +
           ((C31573 - C31572 + C31575 - C31574 + C31577 - C31576) * C29624 +
            (C31905 - C31904 + C31907 - C31906 + C31909 - C31908) * C139984 +
            (C21780 * C5273 - C140009 * C5277 + C21782 * C5274 -
             C140010 * C5279 + C21784 * C5275 - C21777 * C5281) *
                C29625 +
            (C21780 * C5621 - C140009 * C5625 + C21782 * C5622 -
             C140010 * C5626 + C21784 * C5623 - C21777 * C5627) *
                C139899) *
               C139824 * C140002) *
              C139792 * C2324 +
          (((C21780 * C109 - C140009 * C116 + C21782 * C110 - C140010 * C118 +
             C21784 * C111 - C21777 * C120) *
                C29624 +
            (C21780 * C568 - C140009 * C574 + C21782 * C569 - C140010 * C575 +
             C21784 * C570 - C21777 * C576) *
                C139984 +
            (C31584 - C31585 + C31586 - C31587 + C31588 - C31589) * C29625 +
            (C31910 - C31911 + C31912 - C31913 + C31914 - C31915) * C139899) *
               C139824 * C4096 +
           ((C31585 - C31584 + C31587 - C31586 + C31589 - C31588) * C29624 +
            (C31911 - C31910 + C31913 - C31912 + C31915 - C31914) * C139984 +
            (C140009 * C5279 - C21780 * C5274 + C140010 * C5281 -
             C21782 * C5275 + C21777 * C5283 - C21784 * C5276) *
                C29625 +
            (C140009 * C5626 - C21780 * C5622 + C140010 * C5627 -
             C21782 * C5623 + C21777 * C5628 - C21784 * C5624) *
                C139899) *
               C139824 * C140002) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eezy[33] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139824 * C183 - C182 * C108) * C29624 +
             (C139824 * C629 - C182 * C567) * C139984 +
             (C15795 - C15796) * C29625 + (C16525 - C16526) * C139899) *
                C140009 +
            ((C196 - C197) * C29624 + (C636 - C637) * C139984 +
             C15799 * C29625 + C16529 * C139899) *
                C140010 +
            C30052 * C21777) *
               C4096 +
           (((C15796 - C15795) * C29624 + (C16526 - C16525) * C139984 +
             (C15802 - C15801) * C29625 + (C16528 - C16527) * C139899) *
                C140009 +
            (C15807 * C29624 + C16531 * C139984 + C15809 * C29625 +
             C16532 * C139899) *
                C140010 +
            (C31358 * C29624 + C32014 * C139984 + (C13938 - C13939) * C29625 +
             (C14441 - C14442) * C139899) *
                C21777) *
               C140002) *
              C139792 * C2324 +
          ((((C197 - C196) * C29624 + (C637 - C636) * C139984 +
             C15807 * C29625 + C16531 * C139899) *
                C140009 +
            ((C201 - C200) * C29624 + (C640 - C639) * C139984 +
             C31358 * C29625 + C32014 * C139899) *
                C140010 +
            ((C205 - C204) * C29624 + (C643 - C642) * C139984 +
             (C1672 - C1673) * C29625 + (C2160 - C2161) * C139899) *
                C21777) *
               C4096 +
           ((C15799 * C29624 + C16529 * C139984 + C15805 * C29625 +
             C16530 * C139899) *
                C140009 +
            (C29549 * C29624 + C30048 * C139984 + (C13939 - C13938) * C29625 +
             (C14442 - C14441) * C139899) *
                C140010 +
            ((C1673 - C1672) * C29624 + (C2161 - C2160) * C139984 +
             (C139824 * C5342 - C182 * C5276) * C29625 +
             (C139824 * C5682 - C182 * C5624) * C139899) *
                C21777) *
               C140002) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eezz[33] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C29624 * C266 - C30126 * C108 - C29624 * C567 +
                       C139984 * C702 + C29625 * C1741 - C30127 * C1570 -
                       C29625 * C2074 + C139899 * C2230) *
                          C139824 * C140009 +
                      (C30165 + C30166) * C139824 * C140010 + C30172 * C21777) *
                         C4096 -
                     ((C32137 + C32138) * C139824 * C21777 +
                      (C32139 + C32140) * C139824 * C140010 +
                      (C29625 * C5397 - C30127 * C5273 - C29625 * C5621 +
                       C139899 * C5733 + C29624 * C1741 - C30126 * C1570 -
                       C29624 * C2074 + C139984 * C2230) *
                          C139824 * C140009) *
                         C140002) *
                        C139792 * C2324 +
                    (((C32140 + C32139) * C139824 * C140009 +
                      (C32138 + C32137) * C139824 * C140010 +
                      (C29624 * C1744 - C30126 * C1567 - C29624 * C2077 +
                       C139984 * C2227 + C29625 * C5400 - C30127 * C5276 -
                       C29625 * C5624 + C139899 * C5736) *
                          C139824 * C21777) *
                         C140002 -
                     ((C30169 + C30170) * C139824 * C21777 +
                      (C30168 + C30167) * C139824 * C140010 +
                      (C30166 + C30165) * C139824 * C140009) *
                         C4096) *
                        C139792 * C139998)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[34] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C21780 * C114 - C21781 * C108 - C21780 * C115 + C140009 * C126 +
             C21782 * C116 - C21783 * C109 - C21782 * C117 + C140010 * C127 +
             C21784 * C118 - C21785 * C110 - C21784 * C119 + C21777 * C128) *
                C139984 +
            (C31254 + C31255 + C31256) * C139899) *
               C139824 * C4096 -
           ((C21784 * C5281 - C21785 * C5275 - C21784 * C5282 + C21777 * C5287 +
             C21782 * C5279 - C21783 * C5274 - C21782 * C5280 +
             C140010 * C5286 + C21780 * C5277 - C21781 * C5273 -
             C21780 * C5278 + C140009 * C5285) *
                C139899 +
            (C31256 + C31255 + C31254) * C139984) *
               C139824 * C140002) *
              C806 +
          (((C26166 + C26165 + C26164) * C139984 +
            (C21780 * C13130 - C21781 * C13126 - C21780 * C13131 +
             C140009 * C13138 + C21782 * C13132 - C21783 * C13127 -
             C21782 * C13133 + C140010 * C13139 + C21784 * C14660 -
             C21785 * C14659 - C21784 * C14661 + C21777 * C14662) *
                C139899) *
               C139824 * C140002 -
           ((C26164 + C26165 + C26166) * C139899 +
            (C22627 + C22626 + C22625) * C139984) *
               C139824 * C4096) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eexy[34] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139824 * C183 - C182 * C108) * C21780 +
             (C139824 * C189 - C182 * C115) * C140009 + (C196 - C197) * C21782 +
             (C198 - C199) * C140010 + C212 * C21784 + C213 * C21777) *
                C139984 +
            ((C15795 - C15796) * C21780 + (C15797 - C15798) * C140009 +
             C15799 * C21782 + C15800 * C140010 + C29549 * C21784 +
             C29550 * C21777) *
                C139899) *
               C4096 +
           (((C15796 - C15795) * C21780 + (C15798 - C15797) * C140009 +
             C15807 * C21782 + C15808 * C140010 + C31358 * C21784 +
             C31359 * C21777) *
                C139984 +
            ((C15802 - C15801) * C21780 + (C15804 - C15803) * C140009 +
             C15809 * C21782 + C15810 * C140010 + (C13938 - C13939) * C21784 +
             (C13940 - C13941) * C21777) *
                C139899) *
               C140002) *
              C806 +
          ((((C182 * C813 - C139824 * C896) * C21780 +
             (C182 * C822 - C139824 * C901) * C140009 + (C907 - C908) * C21782 +
             (C909 - C910) * C140010 + (C911 - C912) * C21784 +
             (C913 - C914) * C21777) *
                C139984 +
            ((C18427 - C18428) * C21780 + (C18429 - C18430) * C140009 +
             (C14764 - C14765) * C21782 + (C14766 - C14767) * C140010 +
             (C30369 - C30370) * C21784 + (C30371 - C30372) * C21777) *
                C139899) *
               C4096 +
           (((C18428 - C18427) * C21780 + (C18430 - C18429) * C140009 +
             (C14765 - C14764) * C21782 + (C14767 - C14766) * C140010 +
             (C30370 - C30369) * C21784 + (C30372 - C30371) * C21777) *
                C139984 +
            ((C18432 - C18431) * C21780 + (C18434 - C18433) * C140009 +
             (C14769 - C14768) * C21782 + (C14771 - C14770) * C140010 +
             (C139824 * C14761 - C182 * C14659) * C21784 +
             (C139824 * C14762 - C182 * C14661) * C21777) *
                C139899) *
               C140002) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eexz[34] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C139984 * C266 - C29624 * C108 + C139899 * C1741 -
                       C29625 * C1570) *
                          C21780 +
                      (C139984 * C272 - C29624 * C115 + C139899 * C1746 -
                       C29625 * C1579) *
                          C140009 +
                      (C29627 - C29628 + C29629 - C29630) * C21782 +
                      (C29631 - C29632 + C29633 - C29634) * C140010 +
                      C29655 * C21784 + C29656 * C21777) *
                         C139824 * C4096 +
                     ((C29624 * C1570 - C139984 * C1741 + C29625 * C5273 -
                       C139899 * C5397) *
                          C21780 +
                      (C29624 * C1579 - C139984 * C1746 + C29625 * C5278 -
                       C139899 * C5401) *
                          C140009 +
                      (C31458 - C31459 + C31460 - C31461) * C21782 +
                      (C31462 - C31463 + C31464 - C31465) * C140010 +
                      (C31466 - C31467 + C31468 - C31469) * C21784 +
                      (C31470 - C31471 + C31472 - C31473) * C21777) *
                         C139824 * C140002) *
                        C806 +
                    (((C29624 * C813 - C139984 * C984 + C29625 * C3438 -
                       C139899 * C3594) *
                          C21780 +
                      (C29624 * C822 - C139984 * C989 + C29625 * C3443 -
                       C139899 * C3598) *
                          C140009 +
                      (C30471 - C30472 + C30473 - C30474) * C21782 +
                      (C30475 - C30476 + C30477 - C30478) * C140010 +
                      (C30479 - C30480 + C30481 - C30482) * C21784 +
                      (C30483 - C30484 + C30485 - C30486) * C21777) *
                         C139824 * C4096 +
                     ((C139984 * C3594 - C29624 * C3438 + C139899 * C13298 -
                       C29625 * C13126) *
                          C21780 +
                      (C139984 * C3598 - C29624 * C3443 + C139899 * C13302 -
                       C29625 * C13131) *
                          C140009 +
                      (C139984 * C3595 - C29624 * C3439 + C139899 * C13299 -
                       C29625 * C13127) *
                          C21782 +
                      (C139984 * C3599 - C29624 * C3445 + C139899 * C13303 -
                       C29625 * C13133) *
                          C140010 +
                      (C139984 * C3596 - C29624 * C3440 + C139899 * C14869 -
                       C29625 * C14659) *
                          C21784 +
                      (C139984 * C3600 - C29624 * C3447 + C139899 * C14870 -
                       C29625 * C14661) *
                          C21777) *
                         C139824 * C140002) *
                        C140000) *
                   C139758) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[34] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C140009 * C114 - C21780 * C108 + C140010 * C116 - C21782 * C109 +
              C21777 * C118 - C21784 * C110) *
                 C182 +
             (C140009 * C354 - C21780 * C348 + C140010 * C355 - C21782 * C349 +
              C21777 * C356 - C21784 * C350) *
                 C139824) *
                C139984 +
            ((C31572 - C31573 + C31574 - C31575 + C31576 - C31577) * C182 +
             (C31578 - C31579 + C31580 - C31581 + C31582 - C31583) * C139824) *
                C139899) *
               C4096 +
           (((C31573 - C31572 + C31575 - C31574 + C31577 - C31576) * C182 +
             (C31579 - C31578 + C31581 - C31580 + C31583 - C31582) * C139824) *
                C139984 +
            ((C21780 * C5273 - C140009 * C5277 + C21782 * C5274 -
              C140010 * C5279 + C21784 * C5275 - C21777 * C5281) *
                 C182 +
             (C21780 * C5455 - C140009 * C5459 + C21782 * C5456 -
              C140010 * C5460 + C21784 * C5457 - C21777 * C5461) *
                 C139824) *
                C139899) *
               C140002) *
              C806 +
          ((((C22944 - C22943 + C22946 - C22945 + C22948 - C22947) * C182 +
             (C22950 - C22949 + C22952 - C22951 + C22954 - C22953) * C139824) *
                C139984 +
            ((C26461 - C26462 + C26463 - C26464 + C26465 - C26466) * C182 +
             (C26467 - C26468 + C26469 - C26470 + C26471 - C26472) * C139824) *
                C139899) *
               C4096 +
           (((C26462 - C26461 + C26464 - C26463 + C26466 - C26465) * C182 +
             (C26468 - C26467 + C26470 - C26469 + C26472 - C26471) * C139824) *
                C139984 +
            ((C140009 * C13130 - C21780 * C13126 + C140010 * C13132 -
              C21782 * C13127 + C21777 * C14660 - C21784 * C14659) *
                 C182 +
             (C140009 * C13384 - C21780 * C13380 + C140010 * C13385 -
              C21782 * C13381 + C21777 * C14982 - C21784 * C14981) *
                 C139824) *
                C139899) *
               C140002) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eeyy[34] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C182 * C183 - C410 * C108 - C182 * C348 + C139824 * C411) *
                 C140009 +
             C442 * C140010 + C443 * C21777) *
                C139984 +
            (C31694 + C31695 + C31696) * C139899) *
               C4096 -
           ((C14204 * C21777 + C14203 * C140010 + C16193 * C140009) * C139899 +
            (C31696 + C31695 + C31694) * C139984) *
               C140002) *
              C806 +
          (((C34179 + C34180 + C34181) * C139984 +
            (C18762 * C140009 + C15095 * C140010 +
             (C182 * C14761 - C410 * C14659 - C182 * C14981 +
              C139824 * C15081) *
                 C21777) *
                C139899) *
               C140002 -
           ((C34181 + C34180 + C34179) * C139899 +
            (C1173 * C21777 + C1174 * C140010 +
             (C182 * C896 - C410 * C813 - C182 * C1072 + C139824 * C1151) *
                 C140009) *
                C139984) *
               C4096) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eeyz[34] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C139984 * C266 - C29624 * C108 + C139899 * C1741 -
                        C29625 * C1570) *
                           C182 +
                       (C139984 * C495 - C29624 * C348 + C139899 * C1997 -
                        C29625 * C1829) *
                           C139824) *
                          C140009 +
                      ((C29627 - C29628 + C29629 - C29630) * C182 +
                       (C29879 - C29880 + C29881 - C29882) * C139824) *
                          C140010 +
                      C29896 * C21777) *
                         C4096 +
                     (((C29624 * C1570 - C139984 * C1741 + C29625 * C5273 -
                        C139899 * C5397) *
                           C182 +
                       (C29624 * C1829 - C139984 * C1997 + C29625 * C5455 -
                        C139899 * C5567) *
                           C139824) *
                          C140009 +
                      ((C31458 - C31459 + C31460 - C31461) * C182 +
                       (C31798 - C31799 + C31800 - C31801) * C139824) *
                          C140010 +
                      ((C31466 - C31467 + C31468 - C31469) * C182 +
                       (C31802 - C31803 + C31804 - C31805) * C139824) *
                          C21777) *
                         C140002) *
                        C806 +
                    ((((C29624 * C813 - C139984 * C984 + C29625 * C3438 -
                        C139899 * C3594) *
                           C182 +
                       (C29624 * C1072 - C139984 * C1240 + C29625 * C3668 -
                        C139899 * C3812) *
                           C139824) *
                          C140009 +
                      ((C30471 - C30472 + C30473 - C30474) * C182 +
                       (C30788 - C30789 + C30790 - C30791) * C139824) *
                          C140010 +
                      ((C30479 - C30480 + C30481 - C30482) * C182 +
                       (C30792 - C30793 + C30794 - C30795) * C139824) *
                          C21777) *
                         C4096 +
                     (((C139984 * C3594 - C29624 * C3438 + C139899 * C13298 -
                        C29625 * C13126) *
                           C182 +
                       (C139984 * C3812 - C29624 * C3668 + C139899 * C13540 -
                        C29625 * C13380) *
                           C139824) *
                          C140009 +
                      ((C139984 * C3595 - C29624 * C3439 + C139899 * C13299 -
                        C29625 * C13127) *
                           C182 +
                       (C139984 * C3813 - C29624 * C3669 + C139899 * C13542 -
                        C29625 * C13381) *
                           C139824) *
                          C140010 +
                      ((C139984 * C3596 - C29624 * C3440 + C139899 * C14869 -
                        C29625 * C14659) *
                           C182 +
                       (C139984 * C3814 - C29624 * C3670 + C139899 * C15194 -
                        C29625 * C14981) *
                           C139824) *
                          C21777) *
                         C140002) *
                        C140000) *
                   C139758) /
                  (p * q * std::sqrt(p + q));
    d2eezx[34] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C140009 * C114 - C21780 * C108 + C140010 * C116 - C21782 * C109 +
             C21777 * C118 - C21784 * C110) *
                C29624 +
            (C140009 * C573 - C21780 * C567 + C140010 * C574 - C21782 * C568 +
             C21777 * C575 - C21784 * C569) *
                C139984 +
            (C31572 - C31573 + C31574 - C31575 + C31576 - C31577) * C29625 +
            (C31904 - C31905 + C31906 - C31907 + C31908 - C31909) * C139899) *
               C139824 * C4096 +
           ((C31573 - C31572 + C31575 - C31574 + C31577 - C31576) * C29624 +
            (C31905 - C31904 + C31907 - C31906 + C31909 - C31908) * C139984 +
            (C21780 * C5273 - C140009 * C5277 + C21782 * C5274 -
             C140010 * C5279 + C21784 * C5275 - C21777 * C5281) *
                C29625 +
            (C21780 * C5621 - C140009 * C5625 + C21782 * C5622 -
             C140010 * C5626 + C21784 * C5623 - C21777 * C5627) *
                C139899) *
               C139824 * C140002) *
              C806 +
          (((C22944 - C22943 + C22946 - C22945 + C22948 - C22947) * C29624 +
            (C23291 - C23290 + C23293 - C23292 + C23295 - C23294) * C139984 +
            (C26461 - C26462 + C26463 - C26464 + C26465 - C26466) * C29625 +
            (C26767 - C26768 + C26769 - C26770 + C26771 - C26772) * C139899) *
               C139824 * C4096 +
           ((C26462 - C26461 + C26464 - C26463 + C26466 - C26465) * C29624 +
            (C26768 - C26767 + C26770 - C26769 + C26772 - C26771) * C139984 +
            (C140009 * C13130 - C21780 * C13126 + C140010 * C13132 -
             C21782 * C13127 + C21777 * C14660 - C21784 * C14659) *
                C29625 +
            (C140009 * C13622 - C21780 * C13618 + C140010 * C13623 -
             C21782 * C13619 + C21777 * C15300 - C21784 * C15299) *
                C139899) *
               C139824 * C140002) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eezy[34] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139824 * C183 - C182 * C108) * C29624 +
             (C139824 * C629 - C182 * C567) * C139984 +
             (C15795 - C15796) * C29625 + (C16525 - C16526) * C139899) *
                C140009 +
            ((C196 - C197) * C29624 + (C636 - C637) * C139984 +
             C15799 * C29625 + C16529 * C139899) *
                C140010 +
            C30052 * C21777) *
               C4096 +
           (((C15796 - C15795) * C29624 + (C16526 - C16525) * C139984 +
             (C15802 - C15801) * C29625 + (C16528 - C16527) * C139899) *
                C140009 +
            (C15807 * C29624 + C16531 * C139984 + C15809 * C29625 +
             C16532 * C139899) *
                C140010 +
            (C31358 * C29624 + C32014 * C139984 + (C13938 - C13939) * C29625 +
             (C14441 - C14442) * C139899) *
                C21777) *
               C140002) *
              C806 +
          ((((C182 * C813 - C139824 * C896) * C29624 +
             (C182 * C1317 - C139824 * C1393) * C139984 +
             (C18427 - C18428) * C29625 + (C19071 - C19072) * C139899) *
                C140009 +
            ((C907 - C908) * C29624 + (C1399 - C1400) * C139984 +
             (C14764 - C14765) * C29625 + (C15401 - C15402) * C139899) *
                C140010 +
            ((C911 - C912) * C29624 + (C1401 - C1402) * C139984 +
             (C30369 - C30370) * C29625 + (C30992 - C30993) * C139899) *
                C21777) *
               C4096 +
           (((C18428 - C18427) * C29624 + (C19072 - C19071) * C139984 +
             (C18432 - C18431) * C29625 + (C19074 - C19073) * C139899) *
                C140009 +
            ((C14765 - C14764) * C29624 + (C15402 - C15401) * C139984 +
             (C14769 - C14768) * C29625 + (C15404 - C15403) * C139899) *
                C140010 +
            ((C30370 - C30369) * C29624 + (C30993 - C30992) * C139984 +
             (C139824 * C14761 - C182 * C14659) * C29625 +
             (C139824 * C15399 - C182 * C15299) * C139899) *
                C21777) *
               C140002) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eezz[34] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C29624 * C266 - C30126 * C108 - C29624 * C567 +
                       C139984 * C702 + C29625 * C1741 - C30127 * C1570 -
                       C29625 * C2074 + C139899 * C2230) *
                          C139824 * C140009 +
                      (C30165 + C30166) * C139824 * C140010 + C30172 * C21777) *
                         C4096 -
                     ((C32137 + C32138) * C139824 * C21777 +
                      (C32139 + C32140) * C139824 * C140010 +
                      (C29625 * C5397 - C30127 * C5273 - C29625 * C5621 +
                       C139899 * C5733 + C29624 * C1741 - C30126 * C1570 -
                       C29624 * C2074 + C139984 * C2230) *
                          C139824 * C140009) *
                         C140002) *
                        C806 +
                    (((C29624 * C3594 - C30126 * C3438 - C29624 * C3882 +
                       C139984 * C4026 + C29625 * C13298 - C30127 * C13126 -
                       C29625 * C13618 + C139899 * C13778) *
                          C139824 * C140009 +
                      (C29624 * C3595 - C30126 * C3439 - C29624 * C3883 +
                       C139984 * C4027 + C29625 * C13299 - C30127 * C13127 -
                       C29625 * C13619 + C139899 * C13780) *
                          C139824 * C140010 +
                      (C29624 * C3596 - C30126 * C3440 - C29624 * C3884 +
                       C139984 * C4028 + C29625 * C14869 - C30127 * C14659 -
                       C29625 * C15299 + C139899 * C15502) *
                          C139824 * C21777) *
                         C140002 -
                     ((C31116 + C31117) * C139824 * C21777 +
                      (C31118 + C31119) * C139824 * C140010 +
                      (C29625 * C3594 - C30127 * C3438 - C29625 * C3882 +
                       C139899 * C4026 + C29624 * C984 - C30126 * C813 -
                       C29624 * C1317 + C139984 * C1473) *
                          C139824 * C140009) *
                         C4096) *
                        C140000) *
                   C139758) /
                  (p * q * std::sqrt(p + q));
    d2eexx[35] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C21780 * C114 - C21781 * C108 - C21780 * C115 + C140009 * C126 +
            C21782 * C116 - C21783 * C109 - C21782 * C117 + C140010 * C127 +
            C21784 * C118 - C21785 * C110 - C21784 * C119 + C21777 * C128) *
               C139984 +
           (C31254 + C31255 + C31256) * C139899) *
              C139824 * C5270 -
          ((C36430 + C36431 + C36432) * C139899 +
           (C31256 + C31255 + C31254) * C139984) *
              C139824 * C5271 +
          ((C36432 + C36431 + C36430) * C139984 +
           (C21780 * C15627 - C21781 * C15623 - C21780 * C15628 +
            C140009 * C15632 + C21782 * C15625 - C21783 * C15622 -
            C21782 * C15626 + C140010 * C15631 + C21784 * C15629 -
            C21785 * C15624 - C21784 * C15630 + C21777 * C15633) *
               C139899) *
              C139824 * C5272) *
         C139792 * C139758) /
        (p * q * std::sqrt(p + q));
    d2eexy[35] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139824 * C183 - C182 * C108) * C21780 +
            (C139824 * C189 - C182 * C115) * C140009 + (C196 - C197) * C21782 +
            (C198 - C199) * C140010 + C212 * C21784 + C213 * C21777) *
               C139984 +
           ((C15795 - C15796) * C21780 + (C15797 - C15798) * C140009 +
            C15799 * C21782 + C15800 * C140010 + C29549 * C21784 +
            C29550 * C21777) *
               C139899) *
              C5270 +
          (((C15796 - C15795) * C21780 + (C15798 - C15797) * C140009 +
            C15807 * C21782 + C15808 * C140010 + C31358 * C21784 +
            C31359 * C21777) *
               C139984 +
           ((C15802 - C15801) * C21780 + (C15804 - C15803) * C140009 +
            C15809 * C21782 + C15810 * C140010 + (C13938 - C13939) * C21784 +
            (C13940 - C13941) * C21777) *
               C139899) *
              C5271 +
          ((C21114 * C21780 + C21115 * C140009 + C15805 * C21782 +
            C15806 * C140010 + (C13939 - C13938) * C21784 +
            (C13941 - C13940) * C21777) *
               C139984 +
           ((C21119 - C21118) * C21780 + (C21121 - C21120) * C140009 +
            (C15812 - C15811) * C21782 + (C15814 - C15813) * C140010 +
            (C139824 * C15790 - C182 * C15624) * C21784 +
            (C139824 * C15793 - C182 * C15630) * C21777) *
               C139899) *
              C5272) *
         C139792 * C139758) /
        (p * q * std::sqrt(p + q));
    d2eexz[35] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C139984 * C266 - C29624 * C108 + C139899 * C1741 - C29625 * C1570) *
               C21780 +
           (C139984 * C272 - C29624 * C115 + C139899 * C1746 - C29625 * C1579) *
               C140009 +
           (C29627 - C29628 + C29629 - C29630) * C21782 +
           (C29631 - C29632 + C29633 - C29634) * C140010 + C29655 * C21784 +
           C29656 * C21777) *
              C139824 * C5270 +
          ((C29624 * C1570 - C139984 * C1741 + C29625 * C5273 -
            C139899 * C5397) *
               C21780 +
           (C29624 * C1579 - C139984 * C1746 + C29625 * C5278 -
            C139899 * C5401) *
               C140009 +
           (C31458 - C31459 + C31460 - C31461) * C21782 +
           (C31462 - C31463 + C31464 - C31465) * C140010 +
           (C31466 - C31467 + C31468 - C31469) * C21784 +
           (C31470 - C31471 + C31472 - C31473) * C21777) *
              C139824 * C5271 +
          ((C139984 * C5397 - C29624 * C5273 + C139899 * C15912 -
            C29625 * C15623) *
               C21780 +
           (C139984 * C5401 - C29624 * C5278 + C139899 * C15915 -
            C29625 * C15628) *
               C140009 +
           (C139984 * C5398 - C29624 * C5274 + C139899 * C15913 -
            C29625 * C15622) *
               C21782 +
           (C139984 * C5402 - C29624 * C5280 + C139899 * C15916 -
            C29625 * C15626) *
               C140010 +
           (C139984 * C5399 - C29624 * C5275 + C139899 * C15914 -
            C29625 * C15624) *
               C21784 +
           (C139984 * C5403 - C29624 * C5282 + C139899 * C15917 -
            C29625 * C15630) *
               C21777) *
              C139824 * C5272) *
         C139792 * C139758) /
        (p * q * std::sqrt(p + q));
    d2eeyx[35] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C140009 * C114 - C21780 * C108 + C140010 * C116 - C21782 * C109 +
             C21777 * C118 - C21784 * C110) *
                C182 +
            (C140009 * C354 - C21780 * C348 + C140010 * C355 - C21782 * C349 +
             C21777 * C356 - C21784 * C350) *
                C139824) *
               C139984 +
           ((C31572 - C31573 + C31574 - C31575 + C31576 - C31577) * C182 +
            (C31578 - C31579 + C31580 - C31581 + C31582 - C31583) * C139824) *
               C139899) *
              C5270 +
          (((C31573 - C31572 + C31575 - C31574 + C31577 - C31576) * C182 +
            (C31579 - C31578 + C31581 - C31580 + C31583 - C31582) * C139824) *
               C139984 +
           ((C36655 - C36656 + C36657 - C36658 + C36659 - C36660) * C182 +
            (C36661 - C36662 + C36663 - C36664 + C36665 - C36666) * C139824) *
               C139899) *
              C5271 +
          (((C36656 - C36655 + C36658 - C36657 + C36660 - C36659) * C182 +
            (C36662 - C36661 + C36664 - C36663 + C36666 - C36665) * C139824) *
               C139984 +
           ((C140009 * C15627 - C21780 * C15623 + C140010 * C15625 -
             C21782 * C15622 + C21777 * C15629 - C21784 * C15624) *
                C182 +
            (C140009 * C16031 - C21780 * C16028 + C140010 * C16032 -
             C21782 * C16029 + C21777 * C16033 - C21784 * C16030) *
                C139824) *
               C139899) *
              C5272) *
         C139792 * C139758) /
        (p * q * std::sqrt(p + q));
    d2eeyy[35] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C182 * C183 - C410 * C108 - C182 * C348 + C139824 * C411) *
                C140009 +
            C442 * C140010 + C443 * C21777) *
               C139984 +
           (C31694 + C31695 + C31696) * C139899) *
              C5270 -
          ((C36741 + C36742 + C36743) * C139899 +
           (C31696 + C31695 + C31694) * C139984) *
              C5271 +
          ((C36743 + C36742 + C36741) * C139984 +
           (C21384 * C140009 + C16194 * C140010 +
            (C182 * C15790 - C410 * C15624 - C182 * C16030 + C139824 * C16166) *
                C21777) *
               C139899) *
              C5272) *
         C139792 * C139758) /
        (p * q * std::sqrt(p + q));
    d2eeyz[35] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C139984 * C266 - C29624 * C108 + C139899 * C1741 -
                       C29625 * C1570) *
                          C182 +
                      (C139984 * C495 - C29624 * C348 + C139899 * C1997 -
                       C29625 * C1829) *
                          C139824) *
                         C140009 +
                     ((C29627 - C29628 + C29629 - C29630) * C182 +
                      (C29879 - C29880 + C29881 - C29882) * C139824) *
                         C140010 +
                     C29896 * C21777) *
                        C5270 +
                    (((C29624 * C1570 - C139984 * C1741 + C29625 * C5273 -
                       C139899 * C5397) *
                          C182 +
                      (C29624 * C1829 - C139984 * C1997 + C29625 * C5455 -
                       C139899 * C5567) *
                          C139824) *
                         C140009 +
                     ((C31458 - C31459 + C31460 - C31461) * C182 +
                      (C31798 - C31799 + C31800 - C31801) * C139824) *
                         C140010 +
                     ((C31466 - C31467 + C31468 - C31469) * C182 +
                      (C31802 - C31803 + C31804 - C31805) * C139824) *
                         C21777) *
                        C5271 +
                    (((C139984 * C5397 - C29624 * C5273 + C139899 * C15912 -
                       C29625 * C15623) *
                          C182 +
                      (C139984 * C5567 - C29624 * C5455 + C139899 * C16294 -
                       C29625 * C16028) *
                          C139824) *
                         C140009 +
                     ((C139984 * C5398 - C29624 * C5274 + C139899 * C15913 -
                       C29625 * C15622) *
                          C182 +
                      (C139984 * C5568 - C29624 * C5456 + C139899 * C16295 -
                       C29625 * C16029) *
                          C139824) *
                         C140010 +
                     ((C139984 * C5399 - C29624 * C5275 + C139899 * C15914 -
                       C29625 * C15624) *
                          C182 +
                      (C139984 * C5569 - C29624 * C5457 + C139899 * C16296 -
                       C29625 * C16030) *
                          C139824) *
                         C21777) *
                        C5272) *
                   C139792 * C139758) /
                  (p * q * std::sqrt(p + q));
    d2eezx[35] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C140009 * C114 - C21780 * C108 + C140010 * C116 - C21782 * C109 +
            C21777 * C118 - C21784 * C110) *
               C29624 +
           (C140009 * C573 - C21780 * C567 + C140010 * C574 - C21782 * C568 +
            C21777 * C575 - C21784 * C569) *
               C139984 +
           (C31572 - C31573 + C31574 - C31575 + C31576 - C31577) * C29625 +
           (C31904 - C31905 + C31906 - C31907 + C31908 - C31909) * C139899) *
              C139824 * C5270 +
          ((C31573 - C31572 + C31575 - C31574 + C31577 - C31576) * C29624 +
           (C31905 - C31904 + C31907 - C31906 + C31909 - C31908) * C139984 +
           (C36655 - C36656 + C36657 - C36658 + C36659 - C36660) * C29625 +
           (C36892 - C36893 + C36894 - C36895 + C36896 - C36897) * C139899) *
              C139824 * C5271 +
          ((C36656 - C36655 + C36658 - C36657 + C36660 - C36659) * C29624 +
           (C36893 - C36892 + C36895 - C36894 + C36897 - C36896) * C139984 +
           (C140009 * C15627 - C21780 * C15623 + C140010 * C15625 -
            C21782 * C15622 + C21777 * C15629 - C21784 * C15624) *
               C29625 +
           (C140009 * C16404 - C21780 * C16401 + C140010 * C16405 -
            C21782 * C16402 + C21777 * C16406 - C21784 * C16403) *
               C139899) *
              C139824 * C5272) *
         C139792 * C139758) /
        (p * q * std::sqrt(p + q));
    d2eezy[35] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139824 * C183 - C182 * C108) * C29624 +
            (C139824 * C629 - C182 * C567) * C139984 +
            (C15795 - C15796) * C29625 + (C16525 - C16526) * C139899) *
               C140009 +
           ((C196 - C197) * C29624 + (C636 - C637) * C139984 + C15799 * C29625 +
            C16529 * C139899) *
               C140010 +
           C30052 * C21777) *
              C5270 +
          (((C15796 - C15795) * C29624 + (C16526 - C16525) * C139984 +
            (C15802 - C15801) * C29625 + (C16528 - C16527) * C139899) *
               C140009 +
           (C15807 * C29624 + C16531 * C139984 + C15809 * C29625 +
            C16532 * C139899) *
               C140010 +
           (C31358 * C29624 + C32014 * C139984 + (C13938 - C13939) * C29625 +
            (C14441 - C14442) * C139899) *
               C21777) *
              C5271 +
          ((C21114 * C29624 + C21623 * C139984 + (C21119 - C21118) * C29625 +
            (C21625 - C21624) * C139899) *
               C140009 +
           (C15805 * C29624 + C16530 * C139984 + (C15812 - C15811) * C29625 +
            (C16534 - C16533) * C139899) *
               C140010 +
           ((C13939 - C13938) * C29624 + (C14442 - C14441) * C139984 +
            (C139824 * C15790 - C182 * C15624) * C29625 +
            (C139824 * C16523 - C182 * C16403) * C139899) *
               C21777) *
              C5272) *
         C139792 * C139758) /
        (p * q * std::sqrt(p + q));
    d2eezz[35] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C29624 * C266 - C30126 * C108 - C29624 * C567 +
                      C139984 * C702 + C29625 * C1741 - C30127 * C1570 -
                      C29625 * C2074 + C139899 * C2230) *
                         C139824 * C140009 +
                     (C30165 + C30166) * C139824 * C140010 + C30172 * C21777) *
                        C5270 -
                    ((C32137 + C32138) * C139824 * C21777 +
                     (C32139 + C32140) * C139824 * C140010 +
                     (C29625 * C5397 - C30127 * C5273 - C29625 * C5621 +
                      C139899 * C5733 + C29624 * C1741 - C30126 * C1570 -
                      C29624 * C2074 + C139984 * C2230) *
                         C139824 * C140009) *
                        C5271 +
                    ((C29624 * C5397 - C30126 * C5273 - C29624 * C5621 +
                      C139984 * C5733 + C29625 * C15912 - C30127 * C15623 -
                      C29625 * C16401 + C139899 * C16633) *
                         C139824 * C140009 +
                     (C29624 * C5398 - C30126 * C5274 - C29624 * C5622 +
                      C139984 * C5734 + C29625 * C15913 - C30127 * C15622 -
                      C29625 * C16402 + C139899 * C16632) *
                         C139824 * C140010 +
                     (C29624 * C5399 - C30126 * C5275 - C29624 * C5623 +
                      C139984 * C5735 + C29625 * C15914 - C30127 * C15624 -
                      C29625 * C16403 + C139899 * C16634) *
                         C139824 * C21777) *
                        C5272) *
                   C139792 * C139758) /
                  (p * q * std::sqrt(p + q));
    d2eexx[36] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((C100 * C114 - C101 * C108 - C100 * C115 + C89 * C126 + C102 * C116 -
           C103 * C109 - C102 * C117 + C90 * C127 + C104 * C118 - C105 * C110 -
           C104 * C119 + C91 * C128 + C106 * C120 - C107 * C111 - C106 * C121 +
           C92 * C129) *
              C139835 * C139824 * C139809 * C139792 * C97 -
          (C106 * C122 - C107 * C112 - C106 * C123 + C92 * C130 + C104 * C120 -
           C105 * C111 - C104 * C121 + C91 * C129 + C102 * C118 - C103 * C110 -
           C102 * C119 + C90 * C128 + C100 * C116 - C101 * C109 - C100 * C117 +
           C89 * C127) *
              C139835 * C139824 * C139809 * C139792 * C98 +
          (C100 * C118 - C101 * C110 - C100 * C119 + C89 * C128 + C102 * C120 -
           C103 * C111 - C102 * C121 + C90 * C129 + C104 * C122 - C105 * C112 -
           C104 * C123 + C91 * C130 + C106 * C124 - C107 * C113 - C106 * C125 +
           C92 * C131) *
              C139835 * C139824 * C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C5816 * C114 - C5817 * C108 - C5816 * C115 + C5811 * C126 +
            C5818 * C116 - C5819 * C109 - C5818 * C117 + C139736 * C127) *
               C139835 * C5813 +
           (C5816 * C821 - C5817 * C813 - C5816 * C822 + C5811 * C828 +
            C5818 * C819 - C5819 * C812 - C5818 * C820 + C139736 * C827) *
               C139835 * C5814 +
           (C5816 * C2912 - C5817 * C2908 - C5816 * C2913 + C5811 * C2920 +
            C5818 * C2914 - C5819 * C2909 - C5818 * C2915 + C139736 * C2921) *
               C139835 * C5815) *
              C139809 * C139792 * C97 -
          ((C5818 * C2916 - C5819 * C2910 - C5818 * C2917 + C139736 * C2922 +
            C5816 * C2914 - C5817 * C2909 - C5816 * C2915 + C5811 * C2921) *
               C139835 * C5815 +
           (C5818 * C817 - C5819 * C811 - C5818 * C818 + C139736 * C826 +
            C5816 * C819 - C5817 * C812 - C5816 * C820 + C5811 * C827) *
               C139835 * C5814 +
           (C5818 * C118 - C5819 * C110 - C5818 * C119 + C139736 * C128 +
            C5816 * C116 - C5817 * C109 - C5816 * C117 + C5811 * C127) *
               C139835 * C5813) *
              C139809 * C139792 * C98 +
          ((C5816 * C118 - C5817 * C110 - C5816 * C119 + C5811 * C128 +
            C5818 * C120 - C5819 * C111 - C5818 * C121 + C139736 * C129) *
               C139835 * C5813 +
           (C5816 * C817 - C5817 * C811 - C5816 * C818 + C5811 * C826 +
            C5818 * C815 - C5819 * C810 - C5818 * C816 + C139736 * C825) *
               C139835 * C5814 +
           (C5816 * C2916 - C5817 * C2910 - C5816 * C2917 + C5811 * C2922 +
            C5818 * C2918 - C5819 * C2911 - C5818 * C2919 + C139736 * C2923) *
               C139835 * C5815) *
              C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eexy[36] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C139824 * C183 - C182 * C108) * C100 +
           (C139824 * C189 - C182 * C115) * C89 + (C196 - C197) * C102 +
           (C198 - C199) * C90 + C212 * C104 + C213 * C91 + C214 * C106 +
           C215 * C92) *
              C139835 * C139809 * C139792 * C97 +
          ((C197 - C196) * C100 + (C199 - C198) * C89 + (C201 - C200) * C102 +
           (C203 - C202) * C90 + (C205 - C204) * C104 + (C207 - C206) * C91 +
           (C208 - C209) * C106 + (C210 - C211) * C92) *
              C139835 * C139809 * C139792 * C98 +
          (C212 * C100 + C213 * C89 + C214 * C102 + C215 * C90 +
           (C209 - C208) * C104 + (C211 - C210) * C91 +
           (C139824 * C188 - C182 * C113) * C106 +
           (C139824 * C194 - C182 * C125) * C92) *
              C139835 * C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C5813 * C183 - C5894 * C108 + C5814 * C896 - C5895 * C813 +
            C5815 * C2974 - C5896 * C2908) *
               C5816 +
           (C5813 * C189 - C5894 * C115 + C5814 * C901 - C5895 * C822 +
            C5815 * C2978 - C5896 * C2913) *
               C5811 +
           (C5898 - C5899 + C5900 - C5901 + C5902 - C5903) * C5818 +
           (C5904 - C5905 + C5906 - C5907 + C5908 - C5909) * C139736) *
              C139835 * C139809 * C139792 * C97 +
          ((C5899 - C5898 + C5901 - C5900 + C5903 - C5902) * C5816 +
           (C5905 - C5904 + C5907 - C5906 + C5909 - C5908) * C5811 +
           (C5910 - C5911 + C5912 - C5913 + C5914 - C5915) * C5818 +
           (C5916 - C5917 + C5918 - C5919 + C5920 - C5921) * C139736) *
              C139835 * C139809 * C139792 * C98 +
          ((C5911 - C5910 + C5913 - C5912 + C5915 - C5914) * C5816 +
           (C5917 - C5916 + C5919 - C5918 + C5921 - C5920) * C5811 +
           (C5813 * C186 - C5894 * C111 + C5814 * C899 - C5895 * C810 +
            C5815 * C2977 - C5896 * C2911) *
               C5818 +
           (C5813 * C192 - C5894 * C121 + C5814 * C904 - C5895 * C816 +
            C5815 * C2981 - C5896 * C2919) *
               C139736) *
              C139835 * C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eexz[36] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C139835 * C266 - C265 * C108) * C100 +
           (C139835 * C272 - C265 * C115) * C89 + (C279 - C280) * C102 +
           (C281 - C282) * C90 + C295 * C104 + C296 * C91 + C297 * C106 +
           C298 * C92) *
              C139824 * C139809 * C139792 * C97 +
          ((C280 - C279) * C100 + (C282 - C281) * C89 + (C284 - C283) * C102 +
           (C286 - C285) * C90 + (C288 - C287) * C104 + (C290 - C289) * C91 +
           (C291 - C292) * C106 + (C293 - C294) * C92) *
              C139824 * C139809 * C139792 * C98 +
          (C295 * C100 + C296 * C89 + C297 * C102 + C298 * C90 +
           (C292 - C291) * C104 + (C294 - C293) * C91 +
           (C139835 * C271 - C265 * C113) * C106 +
           (C139835 * C277 - C265 * C125) * C92) *
              C139824 * C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C139835 * C266 - C265 * C108) * C5816 +
            (C139835 * C272 - C265 * C115) * C5811 + (C279 - C280) * C5818 +
            (C281 - C282) * C139736) *
               C5813 +
           ((C139835 * C984 - C265 * C813) * C5816 +
            (C139835 * C989 - C265 * C822) * C5811 + (C996 - C995) * C5818 +
            (C998 - C997) * C139736) *
               C5814 +
           ((C139835 * C3032 - C265 * C2908) * C5816 +
            (C139835 * C3036 - C265 * C2913) * C5811 + (C5996 - C5997) * C5818 +
            (C5998 - C5999) * C139736) *
               C5815) *
              C139809 * C139792 * C97 +
          (((C280 - C279) * C5816 + (C282 - C281) * C5811 +
            (C284 - C283) * C5818 + (C286 - C285) * C139736) *
               C5813 +
           ((C995 - C996) * C5816 + (C997 - C998) * C5811 +
            (C999 - C1000) * C5818 + (C1001 - C1002) * C139736) *
               C5814 +
           ((C5997 - C5996) * C5816 + (C5999 - C5998) * C5811 +
            (C6000 - C6001) * C5818 + (C6002 - C6003) * C139736) *
               C5815) *
              C139809 * C139792 * C98 +
          ((C295 * C5816 + C296 * C5811 + C297 * C5818 + C298 * C139736) *
               C5813 +
           ((C1000 - C999) * C5816 + (C1002 - C1001) * C5811 +
            (C1004 - C1003) * C5818 + (C1006 - C1005) * C139736) *
               C5814 +
           ((C6001 - C6000) * C5816 + (C6003 - C6002) * C5811 +
            (C139835 * C3035 - C265 * C2911) * C5818 +
            (C139835 * C3039 - C265 * C2919) * C139736) *
               C5815) *
              C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[36] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C89 * C114 - C100 * C108 + C90 * C116 - C102 * C109 + C91 * C118 -
            C104 * C110 + C92 * C120 - C106 * C111) *
               C182 +
           (C89 * C354 - C100 * C348 + C90 * C355 - C102 * C349 + C91 * C356 -
            C104 * C350 + C92 * C357 - C106 * C351) *
               C139824) *
              C139835 * C139809 * C139792 * C97 +
          ((C100 * C109 - C89 * C116 + C102 * C110 - C90 * C118 + C104 * C111 -
            C91 * C120 + C106 * C112 - C92 * C122) *
               C182 +
           (C100 * C349 - C89 * C355 + C102 * C350 - C90 * C356 + C104 * C351 -
            C91 * C357 + C106 * C352 - C92 * C358) *
               C139824) *
              C139835 * C139809 * C139792 * C98 +
          ((C89 * C118 - C100 * C110 + C90 * C120 - C102 * C111 + C91 * C122 -
            C104 * C112 + C92 * C124 - C106 * C113) *
               C182 +
           (C89 * C356 - C100 * C350 + C90 * C357 - C102 * C351 + C91 * C358 -
            C104 * C352 + C92 * C359 - C106 * C353) *
               C139824) *
              C139835 * C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C5811 * C114 - C5816 * C108 + C139736 * C116 - C5818 * C109) *
               C5894 +
           (C5811 * C354 - C5816 * C348 + C139736 * C355 - C5818 * C349) *
               C5813 +
           (C5811 * C821 - C5816 * C813 + C139736 * C819 - C5818 * C812) *
               C5895 +
           (C5811 * C1077 - C5816 * C1072 + C139736 * C1078 - C5818 * C1073) *
               C5814 +
           (C5811 * C2912 - C5816 * C2908 + C139736 * C2914 - C5818 * C2909) *
               C5896 +
           (C5811 * C3094 - C5816 * C3090 + C139736 * C3095 - C5818 * C3091) *
               C5815) *
              C139835 * C139809 * C139792 * C97 +
          ((C5816 * C109 - C5811 * C116 + C5818 * C110 - C139736 * C118) *
               C5894 +
           (C5816 * C349 - C5811 * C355 + C5818 * C350 - C139736 * C356) *
               C5813 +
           (C5816 * C812 - C5811 * C819 + C5818 * C811 - C139736 * C817) *
               C5895 +
           (C5816 * C1073 - C5811 * C1078 + C5818 * C1074 - C139736 * C1079) *
               C5814 +
           (C5816 * C2909 - C5811 * C2914 + C5818 * C2910 - C139736 * C2916) *
               C5896 +
           (C5816 * C3091 - C5811 * C3095 + C5818 * C3092 - C139736 * C3096) *
               C5815) *
              C139835 * C139809 * C139792 * C98 +
          ((C5811 * C118 - C5816 * C110 + C139736 * C120 - C5818 * C111) *
               C5894 +
           (C5811 * C356 - C5816 * C350 + C139736 * C357 - C5818 * C351) *
               C5813 +
           (C5811 * C817 - C5816 * C811 + C139736 * C815 - C5818 * C810) *
               C5895 +
           (C5811 * C1079 - C5816 * C1074 + C139736 * C1080 - C5818 * C1075) *
               C5814 +
           (C5811 * C2916 - C5816 * C2910 + C139736 * C2918 - C5818 * C2911) *
               C5896 +
           (C5811 * C3096 - C5816 * C3092 + C139736 * C3097 - C5818 * C3093) *
               C5815) *
              C139835 * C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[36] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C182 * C183 - C410 * C108 - C182 * C348 + C139824 * C411) * C89 +
           C442 * C90 + C443 * C91 + C444 * C92) *
              C139835 * C139809 * C139792 * C97 -
          (C445 * C92 + C444 * C91 + C443 * C90 + C442 * C89) * C139835 *
              C139809 * C139792 * C98 +
          (C443 * C89 + C444 * C90 + C445 * C91 +
           (C182 * C188 - C410 * C113 - C182 * C353 + C139824 * C416) * C92) *
              C139835 * C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C5894 * C183 - C6151 * C108 - C5894 * C348 + C5813 * C411 +
            C5895 * C896 - C6152 * C813 - C5895 * C1072 + C5814 * C1151 +
            C5896 * C2974 - C6153 * C2908 - C5896 * C3090 + C5815 * C3148) *
               C5811 +
           (C6191 + C6192 + C6193) * C139736) *
              C139835 * C139809 * C139792 * C97 -
          ((C6194 + C6195 + C6196) * C139736 +
           (C6193 + C6192 + C6191) * C5811) *
              C139835 * C139809 * C139792 * C98 +
          ((C6196 + C6195 + C6194) * C5811 +
           (C5894 * C186 - C6151 * C111 - C5894 * C351 + C5813 * C414 +
            C5895 * C899 - C6152 * C810 - C5895 * C1075 + C5814 * C1148 +
            C5896 * C2977 - C6153 * C2911 - C5896 * C3093 + C5815 * C3151) *
               C139736) *
              C139835 * C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[36] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C139835 * C266 - C265 * C108) * C182 +
            (C139835 * C495 - C265 * C348) * C139824) *
               C89 +
           ((C279 - C280) * C182 + (C502 - C503) * C139824) * C90 + C516 * C91 +
           C517 * C92) *
              C139809 * C139792 * C97 +
          (((C280 - C279) * C182 + (C503 - C502) * C139824) * C89 +
           ((C284 - C283) * C182 + (C506 - C505) * C139824) * C90 +
           ((C288 - C287) * C182 + (C509 - C508) * C139824) * C91 +
           ((C291 - C292) * C182 + (C510 - C511) * C139824) * C92) *
              C139809 * C139792 * C98 +
          (C516 * C89 + C517 * C90 +
           ((C292 - C291) * C182 + (C511 - C510) * C139824) * C91 +
           ((C139835 * C271 - C265 * C113) * C182 +
            (C139835 * C500 - C265 * C353) * C139824) *
               C92) *
              C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C139835 * C266 - C265 * C108) * C5894 +
            (C139835 * C495 - C265 * C348) * C5813 +
            (C139835 * C984 - C265 * C813) * C5895 +
            (C139835 * C1240 - C265 * C1072) * C5814 +
            (C139835 * C3032 - C265 * C2908) * C5896 +
            (C139835 * C3202 - C265 * C3090) * C5815) *
               C5811 +
           ((C279 - C280) * C5894 + (C502 - C503) * C5813 +
            (C996 - C995) * C5895 + (C1247 - C1246) * C5814 +
            (C5996 - C5997) * C5896 + (C6271 - C6272) * C5815) *
               C139736) *
              C139809 * C139792 * C97 +
          (((C280 - C279) * C5894 + (C503 - C502) * C5813 +
            (C995 - C996) * C5895 + (C1246 - C1247) * C5814 +
            (C5997 - C5996) * C5896 + (C6272 - C6271) * C5815) *
               C5811 +
           ((C284 - C283) * C5894 + (C506 - C505) * C5813 +
            (C999 - C1000) * C5895 + (C1248 - C1249) * C5814 +
            (C6000 - C6001) * C5896 + (C6273 - C6274) * C5815) *
               C139736) *
              C139809 * C139792 * C98 +
          ((C295 * C5894 + C512 * C5813 + (C1000 - C999) * C5895 +
            (C1249 - C1248) * C5814 + (C6001 - C6000) * C5896 +
            (C6274 - C6273) * C5815) *
               C5811 +
           (C297 * C5894 + C513 * C5813 + (C1004 - C1003) * C5895 +
            (C1251 - C1250) * C5814 + (C139835 * C3035 - C265 * C2911) * C5896 +
            (C139835 * C3205 - C265 * C3093) * C5815) *
               C139736) *
              C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eezx[36] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C89 * C114 - C100 * C108 + C90 * C116 - C102 * C109 + C91 * C118 -
            C104 * C110 + C92 * C120 - C106 * C111) *
               C265 +
           (C89 * C573 - C100 * C567 + C90 * C574 - C102 * C568 + C91 * C575 -
            C104 * C569 + C92 * C576 - C106 * C570) *
               C139835) *
              C139824 * C139809 * C139792 * C97 +
          ((C100 * C109 - C89 * C116 + C102 * C110 - C90 * C118 + C104 * C111 -
            C91 * C120 + C106 * C112 - C92 * C122) *
               C265 +
           (C100 * C568 - C89 * C574 + C102 * C569 - C90 * C575 + C104 * C570 -
            C91 * C576 + C106 * C571 - C92 * C577) *
               C139835) *
              C139824 * C139809 * C139792 * C98 +
          ((C89 * C118 - C100 * C110 + C90 * C120 - C102 * C111 + C91 * C122 -
            C104 * C112 + C92 * C124 - C106 * C113) *
               C265 +
           (C89 * C575 - C100 * C569 + C90 * C576 - C102 * C570 + C91 * C577 -
            C104 * C571 + C92 * C578 - C106 * C572) *
               C139835) *
              C139824 * C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5811 * C114 - C5816 * C108 + C139736 * C116 - C5818 * C109) *
                C265 +
            (C5811 * C573 - C5816 * C567 + C139736 * C574 - C5818 * C568) *
                C139835) *
               C5813 +
           ((C5811 * C821 - C5816 * C813 + C139736 * C819 - C5818 * C812) *
                C265 +
            (C5811 * C1322 - C5816 * C1317 + C139736 * C1323 - C5818 * C1318) *
                C139835) *
               C5814 +
           ((C5811 * C2912 - C5816 * C2908 + C139736 * C2914 - C5818 * C2909) *
                C265 +
            (C5811 * C3260 - C5816 * C3256 + C139736 * C3261 - C5818 * C3257) *
                C139835) *
               C5815) *
              C139809 * C139792 * C97 +
          (((C5816 * C109 - C5811 * C116 + C5818 * C110 - C139736 * C118) *
                C265 +
            (C5816 * C568 - C5811 * C574 + C5818 * C569 - C139736 * C575) *
                C139835) *
               C5813 +
           ((C5816 * C812 - C5811 * C819 + C5818 * C811 - C139736 * C817) *
                C265 +
            (C5816 * C1318 - C5811 * C1323 + C5818 * C1319 - C139736 * C1324) *
                C139835) *
               C5814 +
           ((C5816 * C2909 - C5811 * C2914 + C5818 * C2910 - C139736 * C2916) *
                C265 +
            (C5816 * C3257 - C5811 * C3261 + C5818 * C3258 - C139736 * C3262) *
                C139835) *
               C5815) *
              C139809 * C139792 * C98 +
          (((C5811 * C118 - C5816 * C110 + C139736 * C120 - C5818 * C111) *
                C265 +
            (C5811 * C575 - C5816 * C569 + C139736 * C576 - C5818 * C570) *
                C139835) *
               C5813 +
           ((C5811 * C817 - C5816 * C811 + C139736 * C815 - C5818 * C810) *
                C265 +
            (C5811 * C1324 - C5816 * C1319 + C139736 * C1325 - C5818 * C1320) *
                C139835) *
               C5814 +
           ((C5811 * C2916 - C5816 * C2910 + C139736 * C2918 - C5818 * C2911) *
                C265 +
            (C5811 * C3262 - C5816 * C3258 + C139736 * C3263 - C5818 * C3259) *
                C139835) *
               C5815) *
              C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eezy[36] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C139824 * C183 - C182 * C108) * C265 +
            (C139824 * C629 - C182 * C567) * C139835) *
               C89 +
           ((C196 - C197) * C265 + (C636 - C637) * C139835) * C90 + C650 * C91 +
           C651 * C92) *
              C139809 * C139792 * C97 +
          (((C197 - C196) * C265 + (C637 - C636) * C139835) * C89 +
           ((C201 - C200) * C265 + (C640 - C639) * C139835) * C90 +
           ((C205 - C204) * C265 + (C643 - C642) * C139835) * C91 +
           ((C208 - C209) * C265 + (C644 - C645) * C139835) * C92) *
              C139809 * C139792 * C98 +
          (C650 * C89 + C651 * C90 +
           ((C209 - C208) * C265 + (C645 - C644) * C139835) * C91 +
           ((C139824 * C188 - C182 * C113) * C265 +
            (C139824 * C634 - C182 * C572) * C139835) *
               C92) *
              C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5813 * C183 - C5894 * C108 + C5814 * C896 - C5895 * C813 +
             C5815 * C2974 - C5896 * C2908) *
                C265 +
            (C5813 * C629 - C5894 * C567 + C5814 * C1393 - C5895 * C1317 +
             C5815 * C3314 - C5896 * C3256) *
                C139835) *
               C5811 +
           ((C5898 - C5899 + C5900 - C5901 + C5902 - C5903) * C265 +
            (C6423 - C6424 + C6425 - C6426 + C6427 - C6428) * C139835) *
               C139736) *
              C139809 * C139792 * C97 +
          (((C5899 - C5898 + C5901 - C5900 + C5903 - C5902) * C265 +
            (C6424 - C6423 + C6426 - C6425 + C6428 - C6427) * C139835) *
               C5811 +
           ((C5910 - C5911 + C5912 - C5913 + C5914 - C5915) * C265 +
            (C6429 - C6430 + C6431 - C6432 + C6433 - C6434) * C139835) *
               C139736) *
              C139809 * C139792 * C98 +
          (((C5911 - C5910 + C5913 - C5912 + C5915 - C5914) * C265 +
            (C6430 - C6429 + C6432 - C6431 + C6434 - C6433) * C139835) *
               C5811 +
           ((C5813 * C186 - C5894 * C111 + C5814 * C899 - C5895 * C810 +
             C5815 * C2977 - C5896 * C2911) *
                C265 +
            (C5813 * C632 - C5894 * C570 + C5814 * C1396 - C5895 * C1320 +
             C5815 * C3317 - C5896 * C3259) *
                C139835) *
               C139736) *
              C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eezz[36] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C265 * C266 - C701 * C108 - C265 * C567 + C139835 * C702) *
               C139824 * C89 +
           C737 * C90 + C738 * C91 + C739 * C92) *
              C139809 * C139792 * C97 -
          (C740 * C92 + C739 * C91 + C738 * C90 + C737 * C89) * C139809 *
              C139792 * C98 +
          (C738 * C89 + C739 * C90 + C740 * C91 +
           (C265 * C271 - C701 * C113 - C265 * C572 + C139835 * C707) *
               C139824 * C92) *
              C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C265 * C266 - C701 * C108 - C265 * C567 + C139835 * C702) * C5813 +
            (C265 * C984 - C701 * C813 - C265 * C1317 + C139835 * C1473) *
                C5814 +
            (C265 * C3032 - C701 * C2908 - C265 * C3256 + C139835 * C3368) *
                C5815) *
               C5811 +
           (C6509 + C6510 + C6527) * C139736) *
              C139809 * C139792 * C97 -
          ((C6528 + C6519 + C6520) * C139736 +
           (C6527 + C6510 + C6509) * C5811) *
              C139809 * C139792 * C98 +
          ((C6520 + C6519 + C6528) * C5811 +
           (C735 * C5813 + C1494 * C5814 +
            (C265 * C3035 - C701 * C2911 - C265 * C3259 + C139835 * C3371) *
                C5815) *
               C139736) *
              C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eexx[37] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C114 - C101 * C108 - C100 * C115 + C89 * C126 + C102 * C116 -
            C103 * C109 - C102 * C117 + C90 * C127 + C104 * C118 - C105 * C110 -
            C104 * C119 + C91 * C128 + C106 * C120 - C107 * C111 - C106 * C121 +
            C92 * C129) *
               C139835 * C139824 * C139809 * C806 -
           (C106 * C815 - C107 * C810 - C106 * C816 + C92 * C825 + C104 * C817 -
            C105 * C811 - C104 * C818 + C91 * C826 + C102 * C819 - C103 * C812 -
            C102 * C820 + C90 * C827 + C100 * C821 - C101 * C813 - C100 * C822 +
            C89 * C828) *
               C139835 * C139824 * C139809 * C140000) *
              C808 +
          ((C100 * C819 - C101 * C812 - C100 * C820 + C89 * C827 + C102 * C817 -
            C103 * C811 - C102 * C818 + C90 * C826 + C104 * C815 - C105 * C810 -
            C104 * C816 + C91 * C825 + C106 * C823 - C107 * C814 - C106 * C824 +
            C92 * C829) *
               C139835 * C139824 * C139809 * C140000 -
           (C106 * C122 - C107 * C112 - C106 * C123 + C92 * C130 + C104 * C120 -
            C105 * C111 - C104 * C121 + C91 * C129 + C102 * C118 - C103 * C110 -
            C102 * C119 + C90 * C128 + C100 * C116 - C101 * C109 - C100 * C117 +
            C89 * C127) *
               C139835 * C139824 * C139809 * C806) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5816 * C114 - C5817 * C108 - C5816 * C115 + C5811 * C126 +
             C5818 * C116 - C5819 * C109 - C5818 * C117 + C139736 * C127) *
                C139835 * C5813 +
            (C6687 + C6688) * C139835 * C5814 +
            (C6689 + C6690) * C139835 * C5815) *
               C139809 * C806 -
           ((C5818 * C6629 - C5819 * C6626 - C5818 * C6630 + C139736 * C6635 +
             C5816 * C6631 - C5817 * C6627 - C5816 * C6632 + C5811 * C6636) *
                C139835 * C5815 +
            (C6690 + C6689) * C139835 * C5814 +
            (C6688 + C6687) * C139835 * C5813) *
               C139809 * C140000) *
              C808 +
          (((C6691 + C6692) * C139835 * C5813 +
            (C6693 + C6694) * C139835 * C5814 +
            (C5816 * C6629 - C5817 * C6626 - C5816 * C6630 + C5811 * C6635 +
             C5818 * C6633 - C5819 * C6628 - C5818 * C6634 + C139736 * C6637) *
                C139835 * C5815) *
               C139809 * C140000 -
           ((C6694 + C6693) * C139835 * C5815 +
            (C6692 + C6691) * C139835 * C5814 +
            (C5818 * C118 - C5819 * C110 - C5818 * C119 + C139736 * C128 +
             C5816 * C116 - C5817 * C109 - C5816 * C117 + C5811 * C127) *
                C139835 * C5813) *
               C139809 * C806) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eexy[37] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C139824 * C183 - C182 * C108) * C100 +
            (C139824 * C189 - C182 * C115) * C89 + (C196 - C197) * C102 +
            (C198 - C199) * C90 + C212 * C104 + C213 * C91 + C214 * C106 +
            C215 * C92) *
               C139835 * C139809 * C806 +
           ((C182 * C813 - C139824 * C896) * C100 +
            (C182 * C822 - C139824 * C901) * C89 + (C907 - C908) * C102 +
            (C909 - C910) * C90 + (C911 - C912) * C104 + (C913 - C914) * C91 +
            (C915 - C916) * C106 + (C917 - C918) * C92) *
               C139835 * C139809 * C140000) *
              C808 +
          (((C197 - C196) * C100 + (C199 - C198) * C89 + (C201 - C200) * C102 +
            (C203 - C202) * C90 + (C205 - C204) * C104 + (C207 - C206) * C91 +
            (C208 - C209) * C106 + (C210 - C211) * C92) *
               C139835 * C139809 * C806 +
           ((C908 - C907) * C100 + (C910 - C909) * C89 + (C912 - C911) * C102 +
            (C914 - C913) * C90 + (C916 - C915) * C104 + (C918 - C917) * C91 +
            (C139824 * C900 - C182 * C814) * C106 +
            (C139824 * C905 - C182 * C824) * C92) *
               C139835 * C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5813 * C183 - C5894 * C108 + C5814 * C896 - C5895 * C813 +
             C5815 * C2974 - C5896 * C2908) *
                C5816 +
            (C5813 * C189 - C5894 * C115 + C5814 * C901 - C5895 * C822 +
             C5815 * C2978 - C5896 * C2913) *
                C5811 +
            (C5898 - C5899 + C5900 - C5901 + C5902 - C5903) * C5818 +
            (C5904 - C5905 + C5906 - C5907 + C5908 - C5909) * C139736) *
               C139835 * C139809 * C806 +
           ((C5894 * C813 - C5813 * C896 + C5895 * C2908 - C5814 * C2974 +
             C5896 * C6627 - C5815 * C6792) *
                C5816 +
            (C5894 * C822 - C5813 * C901 + C5895 * C2913 - C5814 * C2978 +
             C5896 * C6632 - C5815 * C6795) *
                C5811 +
            (C6799 - C6800 + C6801 - C6802 + C6803 - C6804) * C5818 +
            (C6805 - C6806 + C6807 - C6808 + C6809 - C6810) * C139736) *
               C139835 * C139809 * C140000) *
              C808 +
          (((C5899 - C5898 + C5901 - C5900 + C5903 - C5902) * C5816 +
            (C5905 - C5904 + C5907 - C5906 + C5909 - C5908) * C5811 +
            (C5910 - C5911 + C5912 - C5913 + C5914 - C5915) * C5818 +
            (C5916 - C5917 + C5918 - C5919 + C5920 - C5921) * C139736) *
               C139835 * C139809 * C806 +
           ((C6800 - C6799 + C6802 - C6801 + C6804 - C6803) * C5816 +
            (C6806 - C6805 + C6808 - C6807 + C6810 - C6809) * C5811 +
            (C5813 * C898 - C5894 * C811 + C5814 * C2976 - C5895 * C2910 +
             C5815 * C6794 - C5896 * C6628) *
                C5818 +
            (C5813 * C903 - C5894 * C818 + C5814 * C2980 - C5895 * C2917 +
             C5815 * C6797 - C5896 * C6634) *
                C139736) *
               C139835 * C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eexz[37] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C139835 * C266 - C265 * C108) * C100 +
            (C139835 * C272 - C265 * C115) * C89 + (C279 - C280) * C102 +
            (C281 - C282) * C90 + C295 * C104 + C296 * C91 + C297 * C106 +
            C298 * C92) *
               C139824 * C139809 * C806 +
           ((C265 * C813 - C139835 * C984) * C100 +
            (C265 * C822 - C139835 * C989) * C89 + (C995 - C996) * C102 +
            (C997 - C998) * C90 + (C999 - C1000) * C104 +
            (C1001 - C1002) * C91 + (C1003 - C1004) * C106 +
            (C1005 - C1006) * C92) *
               C139824 * C139809 * C140000) *
              C808 +
          (((C280 - C279) * C100 + (C282 - C281) * C89 + (C284 - C283) * C102 +
            (C286 - C285) * C90 + (C288 - C287) * C104 + (C290 - C289) * C91 +
            (C291 - C292) * C106 + (C293 - C294) * C92) *
               C139824 * C139809 * C806 +
           ((C996 - C995) * C100 + (C998 - C997) * C89 + (C1000 - C999) * C102 +
            (C1002 - C1001) * C90 + (C1004 - C1003) * C104 +
            (C1006 - C1005) * C91 + (C139835 * C988 - C265 * C814) * C106 +
            (C139835 * C993 - C265 * C824) * C92) *
               C139824 * C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C139835 * C266 - C265 * C108) * C5816 +
             (C139835 * C272 - C265 * C115) * C5811 + (C279 - C280) * C5818 +
             (C281 - C282) * C139736) *
                C5813 +
            ((C6915 - C6916) * C5816 + (C6917 - C6918) * C5811 + C6919 * C5818 +
             C6920 * C139736) *
                C5814 +
            ((C6921 - C6922) * C5816 + (C6923 - C6924) * C5811 + C6925 * C5818 +
             C6926 * C139736) *
                C5815) *
               C139809 * C806 +
           (((C6916 - C6915) * C5816 + (C6918 - C6917) * C5811 + C6927 * C5818 +
             C6928 * C139736) *
                C5813 +
            ((C6922 - C6921) * C5816 + (C6924 - C6923) * C5811 + C6929 * C5818 +
             C6930 * C139736) *
                C5814 +
            ((C265 * C6627 - C139835 * C6908) * C5816 +
             (C265 * C6632 - C139835 * C6911) * C5811 +
             (C6931 - C6932) * C5818 + (C6933 - C6934) * C139736) *
                C5815) *
               C139809 * C140000) *
              C808 +
          ((((C280 - C279) * C5816 + (C282 - C281) * C5811 +
             (C284 - C283) * C5818 + (C286 - C285) * C139736) *
                C5813 +
            (C6927 * C5816 + C6928 * C5811 + (C999 - C1000) * C5818 +
             (C1001 - C1002) * C139736) *
                C5814 +
            (C6929 * C5816 + C6930 * C5811 + (C6000 - C6001) * C5818 +
             (C6002 - C6003) * C139736) *
                C5815) *
               C139809 * C806 +
           ((C6919 * C5816 + C6920 * C5811 + (C1000 - C999) * C5818 +
             (C1002 - C1001) * C139736) *
                C5813 +
            (C6925 * C5816 + C6926 * C5811 + (C6001 - C6000) * C5818 +
             (C6003 - C6002) * C139736) *
                C5814 +
            ((C6932 - C6931) * C5816 + (C6934 - C6933) * C5811 +
             (C139835 * C6910 - C265 * C6628) * C5818 +
             (C139835 * C6913 - C265 * C6634) * C139736) *
                C5815) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[37] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C89 * C114 - C100 * C108 + C90 * C116 - C102 * C109 + C91 * C118 -
             C104 * C110 + C92 * C120 - C106 * C111) *
                C182 +
            (C89 * C354 - C100 * C348 + C90 * C355 - C102 * C349 + C91 * C356 -
             C104 * C350 + C92 * C357 - C106 * C351) *
                C139824) *
               C139835 * C139809 * C806 +
           ((C100 * C813 - C89 * C821 + C102 * C812 - C90 * C819 + C104 * C811 -
             C91 * C817 + C106 * C810 - C92 * C815) *
                C182 +
            (C100 * C1072 - C89 * C1077 + C102 * C1073 - C90 * C1078 +
             C104 * C1074 - C91 * C1079 + C106 * C1075 - C92 * C1080) *
                C139824) *
               C139835 * C139809 * C140000) *
              C808 +
          (((C100 * C109 - C89 * C116 + C102 * C110 - C90 * C118 + C104 * C111 -
             C91 * C120 + C106 * C112 - C92 * C122) *
                C182 +
            (C100 * C349 - C89 * C355 + C102 * C350 - C90 * C356 + C104 * C351 -
             C91 * C357 + C106 * C352 - C92 * C358) *
                C139824) *
               C139835 * C139809 * C806 +
           ((C89 * C819 - C100 * C812 + C90 * C817 - C102 * C811 + C91 * C815 -
             C104 * C810 + C92 * C823 - C106 * C814) *
                C182 +
            (C89 * C1078 - C100 * C1073 + C90 * C1079 - C102 * C1074 +
             C91 * C1080 - C104 * C1075 + C92 * C1081 - C106 * C1076) *
                C139824) *
               C139835 * C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5811 * C114 - C5816 * C108 + C139736 * C116 - C5818 * C109) *
                C5894 +
            (C5811 * C354 - C5816 * C348 + C139736 * C355 - C5818 * C349) *
                C5813 +
            (C7039 - C7040 + C7041 - C7042) * C5895 +
            (C7043 - C7044 + C7045 - C7046) * C5814 +
            (C7047 - C7048 + C7049 - C7050) * C5896 +
            (C7051 - C7052 + C7053 - C7054) * C5815) *
               C139835 * C139809 * C806 +
           ((C7040 - C7039 + C7042 - C7041) * C5894 +
            (C7044 - C7043 + C7046 - C7045) * C5813 +
            (C7048 - C7047 + C7050 - C7049) * C5895 +
            (C7052 - C7051 + C7054 - C7053) * C5814 +
            (C5816 * C6627 - C5811 * C6631 + C5818 * C6626 - C139736 * C6629) *
                C5896 +
            (C5816 * C7032 - C5811 * C7035 + C5818 * C7033 - C139736 * C7036) *
                C5815) *
               C139835 * C139809 * C140000) *
              C808 +
          (((C5816 * C109 - C5811 * C116 + C5818 * C110 - C139736 * C118) *
                C5894 +
            (C5816 * C349 - C5811 * C355 + C5818 * C350 - C139736 * C356) *
                C5813 +
            (C7055 - C7056 + C7057 - C7058) * C5895 +
            (C7059 - C7060 + C7061 - C7062) * C5814 +
            (C7063 - C7064 + C7065 - C7066) * C5896 +
            (C7067 - C7068 + C7069 - C7070) * C5815) *
               C139835 * C139809 * C806 +
           ((C7056 - C7055 + C7058 - C7057) * C5894 +
            (C7060 - C7059 + C7062 - C7061) * C5813 +
            (C7064 - C7063 + C7066 - C7065) * C5895 +
            (C7068 - C7067 + C7070 - C7069) * C5814 +
            (C5811 * C6629 - C5816 * C6626 + C139736 * C6633 - C5818 * C6628) *
                C5896 +
            (C5811 * C7036 - C5816 * C7033 + C139736 * C7037 - C5818 * C7034) *
                C5815) *
               C139835 * C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[37] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C182 * C183 - C410 * C108 - C182 * C348 + C139824 * C411) * C89 +
            C442 * C90 + C443 * C91 + C444 * C92) *
               C139835 * C139809 * C806 -
           (C1172 * C92 + C1173 * C91 + C1174 * C90 +
            (C182 * C896 - C410 * C813 - C182 * C1072 + C139824 * C1151) *
                C89) *
               C139835 * C139809 * C140000) *
              C808 +
          ((C1174 * C89 + C1173 * C90 + C1172 * C91 +
            (C182 * C900 - C410 * C814 - C182 * C1076 + C139824 * C1152) *
                C92) *
               C139835 * C139809 * C140000 -
           (C445 * C92 + C444 * C91 + C443 * C90 + C442 * C89) * C139835 *
               C139809 * C806) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5894 * C183 - C6151 * C108 - C5894 * C348 + C5813 * C411 +
             C5895 * C896 - C6152 * C813 - C5895 * C1072 + C5814 * C1151 +
             C5896 * C2974 - C6153 * C2908 - C5896 * C3090 + C5815 * C3148) *
                C5811 +
            (C6191 + C6192 + C6193) * C139736) *
               C139835 * C139809 * C806 -
           ((C7190 + C7191 + C7192) * C139736 +
            (C5896 * C6792 - C6153 * C6627 - C5896 * C7032 + C5815 * C7169 +
             C5895 * C2974 - C6152 * C2908 - C5895 * C3090 + C5814 * C3148 +
             C5894 * C896 - C6151 * C813 - C5894 * C1072 + C5813 * C1151) *
                C5811) *
               C139835 * C139809 * C140000) *
              C808 +
          (((C7192 + C7191 + C7190) * C5811 +
            (C5894 * C898 - C6151 * C811 - C5894 * C1074 + C5813 * C1149 +
             C5895 * C2976 - C6152 * C2910 - C5895 * C3092 + C5814 * C3150 +
             C5896 * C6794 - C6153 * C6628 - C5896 * C7034 + C5815 * C7170) *
                C139736) *
               C139835 * C139809 * C140000 -
           ((C6194 + C6195 + C6196) * C139736 +
            (C6193 + C6192 + C6191) * C5811) *
               C139835 * C139809 * C806) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[37] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C139835 * C266 - C265 * C108) * C182 +
             (C139835 * C495 - C265 * C348) * C139824) *
                C89 +
            ((C279 - C280) * C182 + (C502 - C503) * C139824) * C90 +
            C516 * C91 + C517 * C92) *
               C139809 * C806 +
           (((C265 * C813 - C139835 * C984) * C182 +
             (C265 * C1072 - C139835 * C1240) * C139824) *
                C89 +
            ((C995 - C996) * C182 + (C1246 - C1247) * C139824) * C90 +
            ((C999 - C1000) * C182 + (C1248 - C1249) * C139824) * C91 +
            ((C1003 - C1004) * C182 + (C1250 - C1251) * C139824) * C92) *
               C139809 * C140000) *
              C808 +
          ((((C280 - C279) * C182 + (C503 - C502) * C139824) * C89 +
            ((C284 - C283) * C182 + (C506 - C505) * C139824) * C90 +
            ((C288 - C287) * C182 + (C509 - C508) * C139824) * C91 +
            ((C291 - C292) * C182 + (C510 - C511) * C139824) * C92) *
               C139809 * C806 +
           (((C996 - C995) * C182 + (C1247 - C1246) * C139824) * C89 +
            ((C1000 - C999) * C182 + (C1249 - C1248) * C139824) * C90 +
            ((C1004 - C1003) * C182 + (C1251 - C1250) * C139824) * C91 +
            ((C139835 * C988 - C265 * C814) * C182 +
             (C139835 * C1244 - C265 * C1076) * C139824) *
                C92) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C139835 * C266 - C265 * C108) * C5894 +
             (C139835 * C495 - C265 * C348) * C5813 + (C6915 - C6916) * C5895 +
             (C7294 - C7295) * C5814 + (C6921 - C6922) * C5896 +
             (C7296 - C7297) * C5815) *
                C5811 +
            ((C279 - C280) * C5894 + (C502 - C503) * C5813 + C6919 * C5895 +
             C7298 * C5814 + C6925 * C5896 + C7299 * C5815) *
                C139736) *
               C139809 * C806 +
           (((C6916 - C6915) * C5894 + (C7295 - C7294) * C5813 +
             (C6922 - C6921) * C5895 + (C7297 - C7296) * C5814 +
             (C265 * C6627 - C139835 * C6908) * C5896 +
             (C265 * C7032 - C139835 * C7290) * C5815) *
                C5811 +
            (C6927 * C5894 + C7300 * C5813 + C6929 * C5895 + C7301 * C5814 +
             (C6931 - C6932) * C5896 + (C7302 - C7303) * C5815) *
                C139736) *
               C139809 * C140000) *
              C808 +
          ((((C280 - C279) * C5894 + (C503 - C502) * C5813 + C6927 * C5895 +
             C7300 * C5814 + C6929 * C5896 + C7301 * C5815) *
                C5811 +
            ((C284 - C283) * C5894 + (C506 - C505) * C5813 +
             (C999 - C1000) * C5895 + (C1248 - C1249) * C5814 +
             (C6000 - C6001) * C5896 + (C6273 - C6274) * C5815) *
                C139736) *
               C139809 * C806 +
           ((C6919 * C5894 + C7298 * C5813 + C6925 * C5895 + C7299 * C5814 +
             (C6932 - C6931) * C5896 + (C7303 - C7302) * C5815) *
                C5811 +
            ((C1000 - C999) * C5894 + (C1249 - C1248) * C5813 +
             (C6001 - C6000) * C5895 + (C6274 - C6273) * C5814 +
             (C139835 * C6910 - C265 * C6628) * C5896 +
             (C139835 * C7292 - C265 * C7034) * C5815) *
                C139736) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eezx[37] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C89 * C114 - C100 * C108 + C90 * C116 - C102 * C109 + C91 * C118 -
             C104 * C110 + C92 * C120 - C106 * C111) *
                C265 +
            (C89 * C573 - C100 * C567 + C90 * C574 - C102 * C568 + C91 * C575 -
             C104 * C569 + C92 * C576 - C106 * C570) *
                C139835) *
               C139824 * C139809 * C806 +
           ((C100 * C813 - C89 * C821 + C102 * C812 - C90 * C819 + C104 * C811 -
             C91 * C817 + C106 * C810 - C92 * C815) *
                C265 +
            (C100 * C1317 - C89 * C1322 + C102 * C1318 - C90 * C1323 +
             C104 * C1319 - C91 * C1324 + C106 * C1320 - C92 * C1325) *
                C139835) *
               C139824 * C139809 * C140000) *
              C808 +
          (((C100 * C109 - C89 * C116 + C102 * C110 - C90 * C118 + C104 * C111 -
             C91 * C120 + C106 * C112 - C92 * C122) *
                C265 +
            (C100 * C568 - C89 * C574 + C102 * C569 - C90 * C575 + C104 * C570 -
             C91 * C576 + C106 * C571 - C92 * C577) *
                C139835) *
               C139824 * C139809 * C806 +
           ((C89 * C819 - C100 * C812 + C90 * C817 - C102 * C811 + C91 * C815 -
             C104 * C810 + C92 * C823 - C106 * C814) *
                C265 +
            (C89 * C1323 - C100 * C1318 + C90 * C1324 - C102 * C1319 +
             C91 * C1325 - C104 * C1320 + C92 * C1326 - C106 * C1321) *
                C139835) *
               C139824 * C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5811 * C114 - C5816 * C108 + C139736 * C116 - C5818 * C109) *
                 C265 +
             (C5811 * C573 - C5816 * C567 + C139736 * C574 - C5818 * C568) *
                 C139835) *
                C5813 +
            ((C7039 - C7040 + C7041 - C7042) * C265 +
             (C7408 - C7409 + C7410 - C7411) * C139835) *
                C5814 +
            ((C7047 - C7048 + C7049 - C7050) * C265 +
             (C7412 - C7413 + C7414 - C7415) * C139835) *
                C5815) *
               C139809 * C806 +
           (((C7040 - C7039 + C7042 - C7041) * C265 +
             (C7409 - C7408 + C7411 - C7410) * C139835) *
                C5813 +
            ((C7048 - C7047 + C7050 - C7049) * C265 +
             (C7413 - C7412 + C7415 - C7414) * C139835) *
                C5814 +
            ((C5816 * C6627 - C5811 * C6631 + C5818 * C6626 - C139736 * C6629) *
                 C265 +
             (C5816 * C7401 - C5811 * C7404 + C5818 * C7402 - C139736 * C7405) *
                 C139835) *
                C5815) *
               C139809 * C140000) *
              C808 +
          ((((C5816 * C109 - C5811 * C116 + C5818 * C110 - C139736 * C118) *
                 C265 +
             (C5816 * C568 - C5811 * C574 + C5818 * C569 - C139736 * C575) *
                 C139835) *
                C5813 +
            ((C7055 - C7056 + C7057 - C7058) * C265 +
             (C7416 - C7417 + C7418 - C7419) * C139835) *
                C5814 +
            ((C7063 - C7064 + C7065 - C7066) * C265 +
             (C7420 - C7421 + C7422 - C7423) * C139835) *
                C5815) *
               C139809 * C806 +
           (((C7056 - C7055 + C7058 - C7057) * C265 +
             (C7417 - C7416 + C7419 - C7418) * C139835) *
                C5813 +
            ((C7064 - C7063 + C7066 - C7065) * C265 +
             (C7421 - C7420 + C7423 - C7422) * C139835) *
                C5814 +
            ((C5811 * C6629 - C5816 * C6626 + C139736 * C6633 - C5818 * C6628) *
                 C265 +
             (C5811 * C7405 - C5816 * C7402 + C139736 * C7406 - C5818 * C7403) *
                 C139835) *
                C5815) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eezy[37] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C139824 * C183 - C182 * C108) * C265 +
             (C139824 * C629 - C182 * C567) * C139835) *
                C89 +
            ((C196 - C197) * C265 + (C636 - C637) * C139835) * C90 +
            C650 * C91 + C651 * C92) *
               C139809 * C806 +
           (((C182 * C813 - C139824 * C896) * C265 +
             (C182 * C1317 - C139824 * C1393) * C139835) *
                C89 +
            ((C907 - C908) * C265 + (C1399 - C1400) * C139835) * C90 +
            ((C911 - C912) * C265 + (C1401 - C1402) * C139835) * C91 +
            ((C915 - C916) * C265 + (C1403 - C1404) * C139835) * C92) *
               C139809 * C140000) *
              C808 +
          ((((C197 - C196) * C265 + (C637 - C636) * C139835) * C89 +
            ((C201 - C200) * C265 + (C640 - C639) * C139835) * C90 +
            ((C205 - C204) * C265 + (C643 - C642) * C139835) * C91 +
            ((C208 - C209) * C265 + (C644 - C645) * C139835) * C92) *
               C139809 * C806 +
           (((C908 - C907) * C265 + (C1400 - C1399) * C139835) * C89 +
            ((C912 - C911) * C265 + (C1402 - C1401) * C139835) * C90 +
            ((C916 - C915) * C265 + (C1404 - C1403) * C139835) * C91 +
            ((C139824 * C900 - C182 * C814) * C265 +
             (C139824 * C1397 - C182 * C1321) * C139835) *
                C92) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5813 * C183 - C5894 * C108 + C5814 * C896 - C5895 * C813 +
              C5815 * C2974 - C5896 * C2908) *
                 C265 +
             (C5813 * C629 - C5894 * C567 + C5814 * C1393 - C5895 * C1317 +
              C5815 * C3314 - C5896 * C3256) *
                 C139835) *
                C5811 +
            ((C5898 - C5899 + C5900 - C5901 + C5902 - C5903) * C265 +
             (C6423 - C6424 + C6425 - C6426 + C6427 - C6428) * C139835) *
                C139736) *
               C139809 * C806 +
           (((C5894 * C813 - C5813 * C896 + C5895 * C2908 - C5814 * C2974 +
              C5896 * C6627 - C5815 * C6792) *
                 C265 +
             (C5894 * C1317 - C5813 * C1393 + C5895 * C3256 - C5814 * C3314 +
              C5896 * C7401 - C5815 * C7521) *
                 C139835) *
                C5811 +
            ((C6799 - C6800 + C6801 - C6802 + C6803 - C6804) * C265 +
             (C7525 - C7526 + C7527 - C7528 + C7529 - C7530) * C139835) *
                C139736) *
               C139809 * C140000) *
              C808 +
          ((((C5899 - C5898 + C5901 - C5900 + C5903 - C5902) * C265 +
             (C6424 - C6423 + C6426 - C6425 + C6428 - C6427) * C139835) *
                C5811 +
            ((C5910 - C5911 + C5912 - C5913 + C5914 - C5915) * C265 +
             (C6429 - C6430 + C6431 - C6432 + C6433 - C6434) * C139835) *
                C139736) *
               C139809 * C806 +
           (((C6800 - C6799 + C6802 - C6801 + C6804 - C6803) * C265 +
             (C7526 - C7525 + C7528 - C7527 + C7530 - C7529) * C139835) *
                C5811 +
            ((C5813 * C898 - C5894 * C811 + C5814 * C2976 - C5895 * C2910 +
              C5815 * C6794 - C5896 * C6628) *
                 C265 +
             (C5813 * C1395 - C5894 * C1319 + C5814 * C3316 - C5895 * C3258 +
              C5815 * C7523 - C5896 * C7403) *
                 C139835) *
                C139736) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eezz[37] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C265 * C266 - C701 * C108 - C265 * C567 + C139835 * C702) *
                C139824 * C89 +
            C737 * C90 + C738 * C91 + C739 * C92) *
               C139809 * C806 -
           (C1497 * C92 + C1498 * C91 + C1499 * C90 +
            (C265 * C984 - C701 * C813 - C265 * C1317 + C139835 * C1473) *
                C139824 * C89) *
               C139809 * C140000) *
              C808 +
          ((C1499 * C89 + C1498 * C90 + C1497 * C91 +
            (C265 * C988 - C701 * C814 - C265 * C1321 + C139835 * C1474) *
                C139824 * C92) *
               C139809 * C140000 -
           (C740 * C92 + C739 * C91 + C738 * C90 + C737 * C89) * C139809 *
               C806) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C265 * C266 - C701 * C108 - C265 * C567 + C139835 * C702) *
                 C5813 +
             C7652 * C5814 + C7653 * C5815) *
                C5811 +
            (C6509 + C6510 + C6527) * C139736) *
               C139809 * C806 -
           ((C7655 + C7644 + C7645) * C139736 +
            ((C265 * C6908 - C701 * C6627 - C265 * C7401 + C139835 * C7629) *
                 C5815 +
             C7653 * C5814 + C7652 * C5813) *
                C5811) *
               C139809 * C140000) *
              C808 +
          (((C7645 + C7644 + C7655) * C5811 +
            (C1495 * C5813 + C6526 * C5814 +
             (C265 * C6910 - C701 * C6628 - C265 * C7403 + C139835 * C7630) *
                 C5815) *
                C139736) *
               C139809 * C140000 -
           ((C6528 + C6519 + C6520) * C139736 +
            (C6527 + C6510 + C6509) * C5811) *
               C139809 * C806) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eexx[38] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C114 - C101 * C108 - C100 * C115 + C89 * C126 + C102 * C116 -
            C103 * C109 - C102 * C117 + C90 * C127 + C104 * C118 - C105 * C110 -
            C104 * C119 + C91 * C128 + C106 * C120 - C107 * C111 - C106 * C121 +
            C92 * C129) *
               C139835 * C139824 * C1565 -
           (C106 * C1572 - C107 * C1567 - C106 * C1573 + C92 * C1582 +
            C104 * C1574 - C105 * C1568 - C104 * C1575 + C91 * C1583 +
            C102 * C1576 - C103 * C1569 - C102 * C1577 + C90 * C1584 +
            C100 * C1578 - C101 * C1570 - C100 * C1579 + C89 * C1585) *
               C139835 * C139824 * C140002) *
              C139792 * C808 +
          ((C100 * C1576 - C101 * C1569 - C100 * C1577 + C89 * C1584 +
            C102 * C1574 - C103 * C1568 - C102 * C1575 + C90 * C1583 +
            C104 * C1572 - C105 * C1567 - C104 * C1573 + C91 * C1582 +
            C106 * C1580 - C107 * C1571 - C106 * C1581 + C92 * C1586) *
               C139835 * C139824 * C140002 -
           (C106 * C122 - C107 * C112 - C106 * C123 + C92 * C130 + C104 * C120 -
            C105 * C111 - C104 * C121 + C91 * C129 + C102 * C118 - C103 * C110 -
            C102 * C119 + C90 * C128 + C100 * C116 - C101 * C109 - C100 * C117 +
            C89 * C127) *
               C139835 * C139824 * C1565) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5816 * C114 - C5817 * C108 - C5816 * C115 + C5811 * C126 +
             C5818 * C116 - C5819 * C109 - C5818 * C117 + C139736 * C127) *
                C139835 * C5813 +
            (C6687 + C6688) * C139835 * C5814 +
            (C6689 + C6690) * C139835 * C5815) *
               C1565 -
           ((C5818 * C7756 - C5819 * C7753 - C5818 * C7757 + C139736 * C7762 +
             C5816 * C7758 - C5817 * C7754 - C5816 * C7759 + C5811 * C7763) *
                C139835 * C5815 +
            (C5818 * C3444 - C5819 * C3439 - C5818 * C3445 + C139736 * C3451 +
             C5816 * C3442 - C5817 * C3438 - C5816 * C3443 + C5811 * C3450) *
                C139835 * C5814 +
            (C5818 * C1576 - C5819 * C1569 - C5818 * C1577 + C139736 * C1584 +
             C5816 * C1578 - C5817 * C1570 - C5816 * C1579 + C5811 * C1585) *
                C139835 * C5813) *
               C140002) *
              C139792 * C808 +
          (((C5816 * C1576 - C5817 * C1569 - C5816 * C1577 + C5811 * C1584 +
             C5818 * C1574 - C5819 * C1568 - C5818 * C1575 + C139736 * C1583) *
                C139835 * C5813 +
            (C5816 * C3444 - C5817 * C3439 - C5816 * C3445 + C5811 * C3451 +
             C5818 * C3446 - C5819 * C3440 - C5818 * C3447 + C139736 * C3452) *
                C139835 * C5814 +
            (C5816 * C7756 - C5817 * C7753 - C5816 * C7757 + C5811 * C7762 +
             C5818 * C7760 - C5819 * C7755 - C5818 * C7761 + C139736 * C7764) *
                C139835 * C5815) *
               C140002 -
           ((C6694 + C6693) * C139835 * C5815 +
            (C6692 + C6691) * C139835 * C5814 +
            (C5818 * C118 - C5819 * C110 - C5818 * C119 + C139736 * C128 +
             C5816 * C116 - C5817 * C109 - C5816 * C117 + C5811 * C127) *
                C139835 * C5813) *
               C1565) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eexy[38] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C139824 * C183 - C182 * C108) * C100 +
            (C139824 * C189 - C182 * C115) * C89 + (C196 - C197) * C102 +
            (C198 - C199) * C90 + C212 * C104 + C213 * C91 + C214 * C106 +
            C215 * C92) *
               C139835 * C1565 +
           ((C182 * C1570 - C139824 * C1653) * C100 +
            (C182 * C1579 - C139824 * C1658) * C89 + (C1664 - C1665) * C102 +
            (C1666 - C1667) * C90 + (C1668 - C1669) * C104 +
            (C1670 - C1671) * C91 + (C1672 - C1673) * C106 +
            (C1674 - C1675) * C92) *
               C139835 * C140002) *
              C139792 * C808 +
          (((C197 - C196) * C100 + (C199 - C198) * C89 + (C201 - C200) * C102 +
            (C203 - C202) * C90 + (C205 - C204) * C104 + (C207 - C206) * C91 +
            (C208 - C209) * C106 + (C210 - C211) * C92) *
               C139835 * C1565 +
           ((C1665 - C1664) * C100 + (C1667 - C1666) * C89 +
            (C1669 - C1668) * C102 + (C1671 - C1670) * C90 +
            (C1673 - C1672) * C104 + (C1675 - C1674) * C91 +
            (C139824 * C1657 - C182 * C1571) * C106 +
            (C139824 * C1662 - C182 * C1581) * C92) *
               C139835 * C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5813 * C183 - C5894 * C108 + C5814 * C896 - C5895 * C813 +
             C5815 * C2974 - C5896 * C2908) *
                C5816 +
            (C5813 * C189 - C5894 * C115 + C5814 * C901 - C5895 * C822 +
             C5815 * C2978 - C5896 * C2913) *
                C5811 +
            (C5898 - C5899 + C5900 - C5901 + C5902 - C5903) * C5818 +
            (C5904 - C5905 + C5906 - C5907 + C5908 - C5909) * C139736) *
               C139835 * C1565 +
           ((C5894 * C1570 - C5813 * C1653 + C5895 * C3438 - C5814 * C3520 +
             C5896 * C7754 - C5815 * C7863) *
                C5816 +
            (C5894 * C1579 - C5813 * C1658 + C5895 * C3443 - C5814 * C3524 +
             C5896 * C7759 - C5815 * C7866) *
                C5811 +
            (C7870 - C7871 + C7872 - C7873 + C7874 - C7875) * C5818 +
            (C7876 - C7877 + C7878 - C7879 + C7880 - C7881) * C139736) *
               C139835 * C140002) *
              C139792 * C808 +
          (((C5899 - C5898 + C5901 - C5900 + C5903 - C5902) * C5816 +
            (C5905 - C5904 + C5907 - C5906 + C5909 - C5908) * C5811 +
            (C5910 - C5911 + C5912 - C5913 + C5914 - C5915) * C5818 +
            (C5916 - C5917 + C5918 - C5919 + C5920 - C5921) * C139736) *
               C139835 * C1565 +
           ((C7871 - C7870 + C7873 - C7872 + C7875 - C7874) * C5816 +
            (C7877 - C7876 + C7879 - C7878 + C7881 - C7880) * C5811 +
            (C5813 * C1655 - C5894 * C1568 + C5814 * C3522 - C5895 * C3440 +
             C5815 * C7865 - C5896 * C7755) *
                C5818 +
            (C5813 * C1660 - C5894 * C1575 + C5814 * C3526 - C5895 * C3447 +
             C5815 * C7868 - C5896 * C7761) *
                C139736) *
               C139835 * C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eexz[38] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C139835 * C266 - C265 * C108) * C100 +
            (C139835 * C272 - C265 * C115) * C89 + (C279 - C280) * C102 +
            (C281 - C282) * C90 + C295 * C104 + C296 * C91 + C297 * C106 +
            C298 * C92) *
               C139824 * C1565 +
           ((C265 * C1570 - C139835 * C1741) * C100 +
            (C265 * C1579 - C139835 * C1746) * C89 + (C1752 - C1753) * C102 +
            (C1754 - C1755) * C90 + (C1756 - C1757) * C104 +
            (C1758 - C1759) * C91 + (C1760 - C1761) * C106 +
            (C1762 - C1763) * C92) *
               C139824 * C140002) *
              C139792 * C808 +
          (((C280 - C279) * C100 + (C282 - C281) * C89 + (C284 - C283) * C102 +
            (C286 - C285) * C90 + (C288 - C287) * C104 + (C290 - C289) * C91 +
            (C291 - C292) * C106 + (C293 - C294) * C92) *
               C139824 * C1565 +
           ((C1753 - C1752) * C100 + (C1755 - C1754) * C89 +
            (C1757 - C1756) * C102 + (C1759 - C1758) * C90 +
            (C1761 - C1760) * C104 + (C1763 - C1762) * C91 +
            (C139835 * C1745 - C265 * C1571) * C106 +
            (C139835 * C1750 - C265 * C1581) * C92) *
               C139824 * C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C139835 * C266 - C265 * C108) * C5816 +
             (C139835 * C272 - C265 * C115) * C5811 + (C279 - C280) * C5818 +
             (C281 - C282) * C139736) *
                C5813 +
            ((C6915 - C6916) * C5816 + (C6917 - C6918) * C5811 + C6919 * C5818 +
             C6920 * C139736) *
                C5814 +
            ((C6921 - C6922) * C5816 + (C6923 - C6924) * C5811 + C6925 * C5818 +
             C6926 * C139736) *
                C5815) *
               C1565 +
           (((C265 * C1570 - C139835 * C1741) * C5816 +
             (C265 * C1579 - C139835 * C1746) * C5811 +
             (C1752 - C1753) * C5818 + (C1754 - C1755) * C139736) *
                C5813 +
            ((C265 * C3438 - C139835 * C3594) * C5816 +
             (C265 * C3443 - C139835 * C3598) * C5811 +
             (C7986 - C7987) * C5818 + (C7988 - C7989) * C139736) *
                C5814 +
            ((C265 * C7754 - C139835 * C7979) * C5816 +
             (C265 * C7759 - C139835 * C7982) * C5811 +
             (C7990 - C7991) * C5818 + (C7992 - C7993) * C139736) *
                C5815) *
               C140002) *
              C139792 * C808 +
          ((((C280 - C279) * C5816 + (C282 - C281) * C5811 +
             (C284 - C283) * C5818 + (C286 - C285) * C139736) *
                C5813 +
            (C6927 * C5816 + C6928 * C5811 + (C999 - C1000) * C5818 +
             (C1001 - C1002) * C139736) *
                C5814 +
            (C6929 * C5816 + C6930 * C5811 + (C6000 - C6001) * C5818 +
             (C6002 - C6003) * C139736) *
                C5815) *
               C1565 +
           (((C1753 - C1752) * C5816 + (C1755 - C1754) * C5811 +
             (C1757 - C1756) * C5818 + (C1759 - C1758) * C139736) *
                C5813 +
            ((C7987 - C7986) * C5816 + (C7989 - C7988) * C5811 +
             (C139835 * C3596 - C265 * C3440) * C5818 +
             (C139835 * C3600 - C265 * C3447) * C139736) *
                C5814 +
            ((C7991 - C7990) * C5816 + (C7993 - C7992) * C5811 +
             (C139835 * C7981 - C265 * C7755) * C5818 +
             (C139835 * C7984 - C265 * C7761) * C139736) *
                C5815) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[38] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C89 * C114 - C100 * C108 + C90 * C116 - C102 * C109 + C91 * C118 -
             C104 * C110 + C92 * C120 - C106 * C111) *
                C182 +
            (C89 * C354 - C100 * C348 + C90 * C355 - C102 * C349 + C91 * C356 -
             C104 * C350 + C92 * C357 - C106 * C351) *
                C139824) *
               C139835 * C1565 +
           ((C100 * C1570 - C89 * C1578 + C102 * C1569 - C90 * C1576 +
             C104 * C1568 - C91 * C1574 + C106 * C1567 - C92 * C1572) *
                C182 +
            (C100 * C1829 - C89 * C1834 + C102 * C1830 - C90 * C1835 +
             C104 * C1831 - C91 * C1836 + C106 * C1832 - C92 * C1837) *
                C139824) *
               C139835 * C140002) *
              C139792 * C808 +
          (((C100 * C109 - C89 * C116 + C102 * C110 - C90 * C118 + C104 * C111 -
             C91 * C120 + C106 * C112 - C92 * C122) *
                C182 +
            (C100 * C349 - C89 * C355 + C102 * C350 - C90 * C356 + C104 * C351 -
             C91 * C357 + C106 * C352 - C92 * C358) *
                C139824) *
               C139835 * C1565 +
           ((C89 * C1576 - C100 * C1569 + C90 * C1574 - C102 * C1568 +
             C91 * C1572 - C104 * C1567 + C92 * C1580 - C106 * C1571) *
                C182 +
            (C89 * C1835 - C100 * C1830 + C90 * C1836 - C102 * C1831 +
             C91 * C1837 - C104 * C1832 + C92 * C1838 - C106 * C1833) *
                C139824) *
               C139835 * C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5811 * C114 - C5816 * C108 + C139736 * C116 - C5818 * C109) *
                C5894 +
            (C5811 * C354 - C5816 * C348 + C139736 * C355 - C5818 * C349) *
                C5813 +
            (C7039 - C7040 + C7041 - C7042) * C5895 +
            (C7043 - C7044 + C7045 - C7046) * C5814 +
            (C7047 - C7048 + C7049 - C7050) * C5896 +
            (C7051 - C7052 + C7053 - C7054) * C5815) *
               C139835 * C1565 +
           ((C5816 * C1570 - C5811 * C1578 + C5818 * C1569 - C139736 * C1576) *
                C5894 +
            (C5816 * C1829 - C5811 * C1834 + C5818 * C1830 - C139736 * C1835) *
                C5813 +
            (C5816 * C3438 - C5811 * C3442 + C5818 * C3439 - C139736 * C3444) *
                C5895 +
            (C5816 * C3668 - C5811 * C3672 + C5818 * C3669 - C139736 * C3673) *
                C5814 +
            (C5816 * C7754 - C5811 * C7758 + C5818 * C7753 - C139736 * C7756) *
                C5896 +
            (C5816 * C8091 - C5811 * C8094 + C5818 * C8092 - C139736 * C8095) *
                C5815) *
               C139835 * C140002) *
              C139792 * C808 +
          (((C5816 * C109 - C5811 * C116 + C5818 * C110 - C139736 * C118) *
                C5894 +
            (C5816 * C349 - C5811 * C355 + C5818 * C350 - C139736 * C356) *
                C5813 +
            (C7055 - C7056 + C7057 - C7058) * C5895 +
            (C7059 - C7060 + C7061 - C7062) * C5814 +
            (C7063 - C7064 + C7065 - C7066) * C5896 +
            (C7067 - C7068 + C7069 - C7070) * C5815) *
               C139835 * C1565 +
           ((C5811 * C1576 - C5816 * C1569 + C139736 * C1574 - C5818 * C1568) *
                C5894 +
            (C5811 * C1835 - C5816 * C1830 + C139736 * C1836 - C5818 * C1831) *
                C5813 +
            (C5811 * C3444 - C5816 * C3439 + C139736 * C3446 - C5818 * C3440) *
                C5895 +
            (C5811 * C3673 - C5816 * C3669 + C139736 * C3674 - C5818 * C3670) *
                C5814 +
            (C5811 * C7756 - C5816 * C7753 + C139736 * C7760 - C5818 * C7755) *
                C5896 +
            (C5811 * C8095 - C5816 * C8092 + C139736 * C8096 - C5818 * C8093) *
                C5815) *
               C139835 * C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[38] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C182 * C183 - C410 * C108 - C182 * C348 + C139824 * C411) * C89 +
            C442 * C90 + C443 * C91 + C444 * C92) *
               C139835 * C1565 -
           (C1929 * C92 + C1930 * C91 + C1931 * C90 +
            (C182 * C1653 - C410 * C1570 - C182 * C1829 + C139824 * C1908) *
                C89) *
               C139835 * C140002) *
              C139792 * C808 +
          ((C1931 * C89 + C1930 * C90 + C1929 * C91 +
            (C182 * C1657 - C410 * C1571 - C182 * C1833 + C139824 * C1909) *
                C92) *
               C139835 * C140002 -
           (C445 * C92 + C444 * C91 + C443 * C90 + C442 * C89) * C139835 *
               C1565) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5894 * C183 - C6151 * C108 - C5894 * C348 + C5813 * C411 +
             C5895 * C896 - C6152 * C813 - C5895 * C1072 + C5814 * C1151 +
             C5896 * C2974 - C6153 * C2908 - C5896 * C3090 + C5815 * C3148) *
                C5811 +
            (C6191 + C6192 + C6193) * C139736) *
               C139835 * C1565 -
           ((C8217 + C8218 + C8219) * C139736 +
            (C5896 * C7863 - C6153 * C7754 - C5896 * C8091 + C5815 * C8196 +
             C5895 * C3520 - C6152 * C3438 - C5895 * C3668 + C5814 * C3742 +
             C5894 * C1653 - C6151 * C1570 - C5894 * C1829 + C5813 * C1908) *
                C5811) *
               C139835 * C140002) *
              C139792 * C808 +
          (((C8219 + C8218 + C8217) * C5811 +
            (C5894 * C1655 - C6151 * C1568 - C5894 * C1831 + C5813 * C1906 +
             C5895 * C3522 - C6152 * C3440 - C5895 * C3670 + C5814 * C3744 +
             C5896 * C7865 - C6153 * C7755 - C5896 * C8093 + C5815 * C8197) *
                C139736) *
               C139835 * C140002 -
           ((C6194 + C6195 + C6196) * C139736 +
            (C6193 + C6192 + C6191) * C5811) *
               C139835 * C1565) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[38] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C139835 * C266 - C265 * C108) * C182 +
             (C139835 * C495 - C265 * C348) * C139824) *
                C89 +
            ((C279 - C280) * C182 + (C502 - C503) * C139824) * C90 +
            C516 * C91 + C517 * C92) *
               C1565 +
           (((C265 * C1570 - C139835 * C1741) * C182 +
             (C265 * C1829 - C139835 * C1997) * C139824) *
                C89 +
            ((C1752 - C1753) * C182 + (C2003 - C2004) * C139824) * C90 +
            ((C1756 - C1757) * C182 + (C2005 - C2006) * C139824) * C91 +
            ((C1760 - C1761) * C182 + (C2007 - C2008) * C139824) * C92) *
               C140002) *
              C139792 * C808 +
          ((((C280 - C279) * C182 + (C503 - C502) * C139824) * C89 +
            ((C284 - C283) * C182 + (C506 - C505) * C139824) * C90 +
            ((C288 - C287) * C182 + (C509 - C508) * C139824) * C91 +
            ((C291 - C292) * C182 + (C510 - C511) * C139824) * C92) *
               C1565 +
           (((C1753 - C1752) * C182 + (C2004 - C2003) * C139824) * C89 +
            ((C1757 - C1756) * C182 + (C2006 - C2005) * C139824) * C90 +
            ((C1761 - C1760) * C182 + (C2008 - C2007) * C139824) * C91 +
            ((C139835 * C1745 - C265 * C1571) * C182 +
             (C139835 * C2001 - C265 * C1833) * C139824) *
                C92) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C139835 * C266 - C265 * C108) * C5894 +
             (C139835 * C495 - C265 * C348) * C5813 + (C6915 - C6916) * C5895 +
             (C7294 - C7295) * C5814 + (C6921 - C6922) * C5896 +
             (C7296 - C7297) * C5815) *
                C5811 +
            ((C279 - C280) * C5894 + (C502 - C503) * C5813 + C6919 * C5895 +
             C7298 * C5814 + C6925 * C5896 + C7299 * C5815) *
                C139736) *
               C1565 +
           (((C265 * C1570 - C139835 * C1741) * C5894 +
             (C265 * C1829 - C139835 * C1997) * C5813 +
             (C265 * C3438 - C139835 * C3594) * C5895 +
             (C265 * C3668 - C139835 * C3812) * C5814 +
             (C265 * C7754 - C139835 * C7979) * C5896 +
             (C265 * C8091 - C139835 * C8317) * C5815) *
                C5811 +
            ((C1752 - C1753) * C5894 + (C2003 - C2004) * C5813 +
             (C7986 - C7987) * C5895 + (C8321 - C8322) * C5814 +
             (C7990 - C7991) * C5896 + (C8323 - C8324) * C5815) *
                C139736) *
               C140002) *
              C139792 * C808 +
          ((((C280 - C279) * C5894 + (C503 - C502) * C5813 + C6927 * C5895 +
             C7300 * C5814 + C6929 * C5896 + C7301 * C5815) *
                C5811 +
            ((C284 - C283) * C5894 + (C506 - C505) * C5813 +
             (C999 - C1000) * C5895 + (C1248 - C1249) * C5814 +
             (C6000 - C6001) * C5896 + (C6273 - C6274) * C5815) *
                C139736) *
               C1565 +
           (((C1753 - C1752) * C5894 + (C2004 - C2003) * C5813 +
             (C7987 - C7986) * C5895 + (C8322 - C8321) * C5814 +
             (C7991 - C7990) * C5896 + (C8324 - C8323) * C5815) *
                C5811 +
            ((C1757 - C1756) * C5894 + (C2006 - C2005) * C5813 +
             (C139835 * C3596 - C265 * C3440) * C5895 +
             (C139835 * C3814 - C265 * C3670) * C5814 +
             (C139835 * C7981 - C265 * C7755) * C5896 +
             (C139835 * C8319 - C265 * C8093) * C5815) *
                C139736) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eezx[38] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C89 * C114 - C100 * C108 + C90 * C116 - C102 * C109 + C91 * C118 -
             C104 * C110 + C92 * C120 - C106 * C111) *
                C265 +
            (C89 * C573 - C100 * C567 + C90 * C574 - C102 * C568 + C91 * C575 -
             C104 * C569 + C92 * C576 - C106 * C570) *
                C139835) *
               C139824 * C1565 +
           ((C100 * C1570 - C89 * C1578 + C102 * C1569 - C90 * C1576 +
             C104 * C1568 - C91 * C1574 + C106 * C1567 - C92 * C1572) *
                C265 +
            (C100 * C2074 - C89 * C2079 + C102 * C2075 - C90 * C2080 +
             C104 * C2076 - C91 * C2081 + C106 * C2077 - C92 * C2082) *
                C139835) *
               C139824 * C140002) *
              C139792 * C808 +
          (((C100 * C109 - C89 * C116 + C102 * C110 - C90 * C118 + C104 * C111 -
             C91 * C120 + C106 * C112 - C92 * C122) *
                C265 +
            (C100 * C568 - C89 * C574 + C102 * C569 - C90 * C575 + C104 * C570 -
             C91 * C576 + C106 * C571 - C92 * C577) *
                C139835) *
               C139824 * C1565 +
           ((C89 * C1576 - C100 * C1569 + C90 * C1574 - C102 * C1568 +
             C91 * C1572 - C104 * C1567 + C92 * C1580 - C106 * C1571) *
                C265 +
            (C89 * C2080 - C100 * C2075 + C90 * C2081 - C102 * C2076 +
             C91 * C2082 - C104 * C2077 + C92 * C2083 - C106 * C2078) *
                C139835) *
               C139824 * C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5811 * C114 - C5816 * C108 + C139736 * C116 - C5818 * C109) *
                 C265 +
             (C5811 * C573 - C5816 * C567 + C139736 * C574 - C5818 * C568) *
                 C139835) *
                C5813 +
            ((C7039 - C7040 + C7041 - C7042) * C265 +
             (C7408 - C7409 + C7410 - C7411) * C139835) *
                C5814 +
            ((C7047 - C7048 + C7049 - C7050) * C265 +
             (C7412 - C7413 + C7414 - C7415) * C139835) *
                C5815) *
               C1565 +
           (((C5816 * C1570 - C5811 * C1578 + C5818 * C1569 - C139736 * C1576) *
                 C265 +
             (C5816 * C2074 - C5811 * C2079 + C5818 * C2075 - C139736 * C2080) *
                 C139835) *
                C5813 +
            ((C5816 * C3438 - C5811 * C3442 + C5818 * C3439 - C139736 * C3444) *
                 C265 +
             (C5816 * C3882 - C5811 * C3886 + C5818 * C3883 - C139736 * C3887) *
                 C139835) *
                C5814 +
            ((C5816 * C7754 - C5811 * C7758 + C5818 * C7753 - C139736 * C7756) *
                 C265 +
             (C5816 * C8422 - C5811 * C8425 + C5818 * C8423 - C139736 * C8426) *
                 C139835) *
                C5815) *
               C140002) *
              C139792 * C808 +
          ((((C5816 * C109 - C5811 * C116 + C5818 * C110 - C139736 * C118) *
                 C265 +
             (C5816 * C568 - C5811 * C574 + C5818 * C569 - C139736 * C575) *
                 C139835) *
                C5813 +
            ((C7055 - C7056 + C7057 - C7058) * C265 +
             (C7416 - C7417 + C7418 - C7419) * C139835) *
                C5814 +
            ((C7063 - C7064 + C7065 - C7066) * C265 +
             (C7420 - C7421 + C7422 - C7423) * C139835) *
                C5815) *
               C1565 +
           (((C5811 * C1576 - C5816 * C1569 + C139736 * C1574 - C5818 * C1568) *
                 C265 +
             (C5811 * C2080 - C5816 * C2075 + C139736 * C2081 - C5818 * C2076) *
                 C139835) *
                C5813 +
            ((C5811 * C3444 - C5816 * C3439 + C139736 * C3446 - C5818 * C3440) *
                 C265 +
             (C5811 * C3887 - C5816 * C3883 + C139736 * C3888 - C5818 * C3884) *
                 C139835) *
                C5814 +
            ((C5811 * C7756 - C5816 * C7753 + C139736 * C7760 - C5818 * C7755) *
                 C265 +
             (C5811 * C8426 - C5816 * C8423 + C139736 * C8427 - C5818 * C8424) *
                 C139835) *
                C5815) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eezy[38] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C139824 * C183 - C182 * C108) * C265 +
             (C139824 * C629 - C182 * C567) * C139835) *
                C89 +
            ((C196 - C197) * C265 + (C636 - C637) * C139835) * C90 +
            C650 * C91 + C651 * C92) *
               C1565 +
           (((C182 * C1570 - C139824 * C1653) * C265 +
             (C182 * C2074 - C139824 * C2150) * C139835) *
                C89 +
            ((C1664 - C1665) * C265 + (C2156 - C2157) * C139835) * C90 +
            ((C1668 - C1669) * C265 + (C2158 - C2159) * C139835) * C91 +
            ((C1672 - C1673) * C265 + (C2160 - C2161) * C139835) * C92) *
               C140002) *
              C139792 * C808 +
          ((((C197 - C196) * C265 + (C637 - C636) * C139835) * C89 +
            ((C201 - C200) * C265 + (C640 - C639) * C139835) * C90 +
            ((C205 - C204) * C265 + (C643 - C642) * C139835) * C91 +
            ((C208 - C209) * C265 + (C644 - C645) * C139835) * C92) *
               C1565 +
           (((C1665 - C1664) * C265 + (C2157 - C2156) * C139835) * C89 +
            ((C1669 - C1668) * C265 + (C2159 - C2158) * C139835) * C90 +
            ((C1673 - C1672) * C265 + (C2161 - C2160) * C139835) * C91 +
            ((C139824 * C1657 - C182 * C1571) * C265 +
             (C139824 * C2154 - C182 * C2078) * C139835) *
                C92) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5813 * C183 - C5894 * C108 + C5814 * C896 - C5895 * C813 +
              C5815 * C2974 - C5896 * C2908) *
                 C265 +
             (C5813 * C629 - C5894 * C567 + C5814 * C1393 - C5895 * C1317 +
              C5815 * C3314 - C5896 * C3256) *
                 C139835) *
                C5811 +
            ((C5898 - C5899 + C5900 - C5901 + C5902 - C5903) * C265 +
             (C6423 - C6424 + C6425 - C6426 + C6427 - C6428) * C139835) *
                C139736) *
               C1565 +
           (((C5894 * C1570 - C5813 * C1653 + C5895 * C3438 - C5814 * C3520 +
              C5896 * C7754 - C5815 * C7863) *
                 C265 +
             (C5894 * C2074 - C5813 * C2150 + C5895 * C3882 - C5814 * C3956 +
              C5896 * C8422 - C5815 * C8526) *
                 C139835) *
                C5811 +
            ((C7870 - C7871 + C7872 - C7873 + C7874 - C7875) * C265 +
             (C8530 - C8531 + C8532 - C8533 + C8534 - C8535) * C139835) *
                C139736) *
               C140002) *
              C139792 * C808 +
          ((((C5899 - C5898 + C5901 - C5900 + C5903 - C5902) * C265 +
             (C6424 - C6423 + C6426 - C6425 + C6428 - C6427) * C139835) *
                C5811 +
            ((C5910 - C5911 + C5912 - C5913 + C5914 - C5915) * C265 +
             (C6429 - C6430 + C6431 - C6432 + C6433 - C6434) * C139835) *
                C139736) *
               C1565 +
           (((C7871 - C7870 + C7873 - C7872 + C7875 - C7874) * C265 +
             (C8531 - C8530 + C8533 - C8532 + C8535 - C8534) * C139835) *
                C5811 +
            ((C5813 * C1655 - C5894 * C1568 + C5814 * C3522 - C5895 * C3440 +
              C5815 * C7865 - C5896 * C7755) *
                 C265 +
             (C5813 * C2152 - C5894 * C2076 + C5814 * C3958 - C5895 * C3884 +
              C5815 * C8528 - C5896 * C8424) *
                 C139835) *
                C139736) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eezz[38] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C265 * C266 - C701 * C108 - C265 * C567 + C139835 * C702) *
                C139824 * C89 +
            C737 * C90 + C738 * C91 + C739 * C92) *
               C1565 -
           (C2254 * C92 + C2255 * C91 + C2256 * C90 +
            (C265 * C1741 - C701 * C1570 - C265 * C2074 + C139835 * C2230) *
                C139824 * C89) *
               C140002) *
              C139792 * C808 +
          ((C2256 * C89 + C2255 * C90 + C2254 * C91 +
            (C265 * C1745 - C701 * C1571 - C265 * C2078 + C139835 * C2231) *
                C139824 * C92) *
               C140002 -
           (C740 * C92 + C739 * C91 + C738 * C90 + C737 * C89) * C1565) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C265 * C266 - C701 * C108 - C265 * C567 + C139835 * C702) *
                 C5813 +
             C7652 * C5814 + C7653 * C5815) *
                C5811 +
            (C6509 + C6510 + C6527) * C139736) *
               C1565 -
           ((C8652 + C8653 + C8645) * C139736 +
            ((C265 * C7979 - C701 * C7754 - C265 * C8422 + C139835 * C8634) *
                 C5815 +
             (C265 * C3594 - C701 * C3438 - C265 * C3882 + C139835 * C4026) *
                 C5814 +
             (C265 * C1741 - C701 * C1570 - C265 * C2074 + C139835 * C2230) *
                 C5813) *
                C5811) *
               C140002) *
              C139792 * C808 +
          (((C8645 + C8653 + C8652) * C5811 +
            (C2252 * C5813 +
             (C265 * C3596 - C701 * C3440 - C265 * C3884 + C139835 * C4028) *
                 C5814 +
             (C265 * C7981 - C701 * C7755 - C265 * C8424 + C139835 * C8635) *
                 C5815) *
                C139736) *
               C140002 -
           ((C6528 + C6519 + C6520) * C139736 +
            (C6527 + C6510 + C6509) * C5811) *
               C1565) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eexx[39] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C114 - C101 * C108 - C100 * C115 + C89 * C126 + C102 * C116 -
            C103 * C109 - C102 * C117 + C90 * C127 + C104 * C118 - C105 * C110 -
            C104 * C119 + C91 * C128 + C106 * C120 - C107 * C111 - C106 * C121 +
            C92 * C129) *
               C139835 * C139824 * C139809 * C2322 -
           (C106 * C815 - C107 * C810 - C106 * C816 + C92 * C825 + C104 * C817 -
            C105 * C811 - C104 * C818 + C91 * C826 + C102 * C819 - C103 * C812 -
            C102 * C820 + C90 * C827 + C100 * C821 - C101 * C813 - C100 * C822 +
            C89 * C828) *
               C139835 * C139824 * C139809 * C140000) *
              C2324 +
          ((C100 * C819 - C101 * C812 - C100 * C820 + C89 * C827 + C102 * C817 -
            C103 * C811 - C102 * C818 + C90 * C826 + C104 * C815 - C105 * C810 -
            C104 * C816 + C91 * C825 + C106 * C823 - C107 * C814 - C106 * C824 +
            C92 * C829) *
               C139835 * C139824 * C139809 * C140000 -
           (C106 * C122 - C107 * C112 - C106 * C123 + C92 * C130 + C104 * C120 -
            C105 * C111 - C104 * C121 + C91 * C129 + C102 * C118 - C103 * C110 -
            C102 * C119 + C90 * C128 + C100 * C116 - C101 * C109 - C100 * C117 +
            C89 * C127) *
               C139835 * C139824 * C139809 * C2322) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5816 * C114 - C5817 * C108 - C5816 * C115 + C5811 * C126 +
             C5818 * C116 - C5819 * C109 - C5818 * C117 + C139736 * C127) *
                C139835 * C5813 +
            (C6687 + C6688) * C139835 * C5814 +
            (C6689 + C6690) * C139835 * C5815) *
               C139809 * C2322 -
           ((C5818 * C6629 - C5819 * C6626 - C5818 * C6630 + C139736 * C6635 +
             C5816 * C6631 - C5817 * C6627 - C5816 * C6632 + C5811 * C6636) *
                C139835 * C5815 +
            (C6690 + C6689) * C139835 * C5814 +
            (C6688 + C6687) * C139835 * C5813) *
               C139809 * C140000) *
              C2324 +
          (((C6691 + C6692) * C139835 * C5813 +
            (C6693 + C6694) * C139835 * C5814 +
            (C5816 * C6629 - C5817 * C6626 - C5816 * C6630 + C5811 * C6635 +
             C5818 * C6633 - C5819 * C6628 - C5818 * C6634 + C139736 * C6637) *
                C139835 * C5815) *
               C139809 * C140000 -
           ((C6694 + C6693) * C139835 * C5815 +
            (C6692 + C6691) * C139835 * C5814 +
            (C5818 * C118 - C5819 * C110 - C5818 * C119 + C139736 * C128 +
             C5816 * C116 - C5817 * C109 - C5816 * C117 + C5811 * C127) *
                C139835 * C5813) *
               C139809 * C2322) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eexy[39] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C139824 * C183 - C182 * C108) * C100 +
            (C139824 * C189 - C182 * C115) * C89 + (C196 - C197) * C102 +
            (C198 - C199) * C90 + C212 * C104 + C213 * C91 + C214 * C106 +
            C215 * C92) *
               C139835 * C139809 * C2322 +
           ((C182 * C813 - C139824 * C896) * C100 +
            (C182 * C822 - C139824 * C901) * C89 + (C907 - C908) * C102 +
            (C909 - C910) * C90 + (C911 - C912) * C104 + (C913 - C914) * C91 +
            (C915 - C916) * C106 + (C917 - C918) * C92) *
               C139835 * C139809 * C140000) *
              C2324 +
          (((C197 - C196) * C100 + (C199 - C198) * C89 + (C201 - C200) * C102 +
            (C203 - C202) * C90 + (C205 - C204) * C104 + (C207 - C206) * C91 +
            (C208 - C209) * C106 + (C210 - C211) * C92) *
               C139835 * C139809 * C2322 +
           ((C908 - C907) * C100 + (C910 - C909) * C89 + (C912 - C911) * C102 +
            (C914 - C913) * C90 + (C916 - C915) * C104 + (C918 - C917) * C91 +
            (C139824 * C900 - C182 * C814) * C106 +
            (C139824 * C905 - C182 * C824) * C92) *
               C139835 * C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5813 * C183 - C5894 * C108 + C5814 * C896 - C5895 * C813 +
             C5815 * C2974 - C5896 * C2908) *
                C5816 +
            (C5813 * C189 - C5894 * C115 + C5814 * C901 - C5895 * C822 +
             C5815 * C2978 - C5896 * C2913) *
                C5811 +
            (C5898 - C5899 + C5900 - C5901 + C5902 - C5903) * C5818 +
            (C5904 - C5905 + C5906 - C5907 + C5908 - C5909) * C139736) *
               C139835 * C139809 * C2322 +
           ((C5894 * C813 - C5813 * C896 + C5895 * C2908 - C5814 * C2974 +
             C5896 * C6627 - C5815 * C6792) *
                C5816 +
            (C5894 * C822 - C5813 * C901 + C5895 * C2913 - C5814 * C2978 +
             C5896 * C6632 - C5815 * C6795) *
                C5811 +
            (C6799 - C6800 + C6801 - C6802 + C6803 - C6804) * C5818 +
            (C6805 - C6806 + C6807 - C6808 + C6809 - C6810) * C139736) *
               C139835 * C139809 * C140000) *
              C2324 +
          (((C5899 - C5898 + C5901 - C5900 + C5903 - C5902) * C5816 +
            (C5905 - C5904 + C5907 - C5906 + C5909 - C5908) * C5811 +
            (C5910 - C5911 + C5912 - C5913 + C5914 - C5915) * C5818 +
            (C5916 - C5917 + C5918 - C5919 + C5920 - C5921) * C139736) *
               C139835 * C139809 * C2322 +
           ((C6800 - C6799 + C6802 - C6801 + C6804 - C6803) * C5816 +
            (C6806 - C6805 + C6808 - C6807 + C6810 - C6809) * C5811 +
            (C5813 * C898 - C5894 * C811 + C5814 * C2976 - C5895 * C2910 +
             C5815 * C6794 - C5896 * C6628) *
                C5818 +
            (C5813 * C903 - C5894 * C818 + C5814 * C2980 - C5895 * C2917 +
             C5815 * C6797 - C5896 * C6634) *
                C139736) *
               C139835 * C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eexz[39] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C139835 * C266 - C265 * C108) * C100 +
            (C139835 * C272 - C265 * C115) * C89 + (C279 - C280) * C102 +
            (C281 - C282) * C90 + C295 * C104 + C296 * C91 + C297 * C106 +
            C298 * C92) *
               C139824 * C139809 * C2322 +
           ((C265 * C813 - C139835 * C984) * C100 +
            (C265 * C822 - C139835 * C989) * C89 + (C995 - C996) * C102 +
            (C997 - C998) * C90 + (C999 - C1000) * C104 +
            (C1001 - C1002) * C91 + (C1003 - C1004) * C106 +
            (C1005 - C1006) * C92) *
               C139824 * C139809 * C140000) *
              C2324 +
          (((C280 - C279) * C100 + (C282 - C281) * C89 + (C284 - C283) * C102 +
            (C286 - C285) * C90 + (C288 - C287) * C104 + (C290 - C289) * C91 +
            (C291 - C292) * C106 + (C293 - C294) * C92) *
               C139824 * C139809 * C2322 +
           ((C996 - C995) * C100 + (C998 - C997) * C89 + (C1000 - C999) * C102 +
            (C1002 - C1001) * C90 + (C1004 - C1003) * C104 +
            (C1006 - C1005) * C91 + (C139835 * C988 - C265 * C814) * C106 +
            (C139835 * C993 - C265 * C824) * C92) *
               C139824 * C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C139835 * C266 - C265 * C108) * C5816 +
             (C139835 * C272 - C265 * C115) * C5811 + (C279 - C280) * C5818 +
             (C281 - C282) * C139736) *
                C5813 +
            ((C6915 - C6916) * C5816 + (C6917 - C6918) * C5811 + C6919 * C5818 +
             C6920 * C139736) *
                C5814 +
            ((C6921 - C6922) * C5816 + (C6923 - C6924) * C5811 + C6925 * C5818 +
             C6926 * C139736) *
                C5815) *
               C139809 * C2322 +
           (((C6916 - C6915) * C5816 + (C6918 - C6917) * C5811 + C6927 * C5818 +
             C6928 * C139736) *
                C5813 +
            ((C6922 - C6921) * C5816 + (C6924 - C6923) * C5811 + C6929 * C5818 +
             C6930 * C139736) *
                C5814 +
            ((C265 * C6627 - C139835 * C6908) * C5816 +
             (C265 * C6632 - C139835 * C6911) * C5811 +
             (C6931 - C6932) * C5818 + (C6933 - C6934) * C139736) *
                C5815) *
               C139809 * C140000) *
              C2324 +
          ((((C280 - C279) * C5816 + (C282 - C281) * C5811 +
             (C284 - C283) * C5818 + (C286 - C285) * C139736) *
                C5813 +
            (C6927 * C5816 + C6928 * C5811 + (C999 - C1000) * C5818 +
             (C1001 - C1002) * C139736) *
                C5814 +
            (C6929 * C5816 + C6930 * C5811 + (C6000 - C6001) * C5818 +
             (C6002 - C6003) * C139736) *
                C5815) *
               C139809 * C2322 +
           ((C6919 * C5816 + C6920 * C5811 + (C1000 - C999) * C5818 +
             (C1002 - C1001) * C139736) *
                C5813 +
            (C6925 * C5816 + C6926 * C5811 + (C6001 - C6000) * C5818 +
             (C6003 - C6002) * C139736) *
                C5814 +
            ((C6932 - C6931) * C5816 + (C6934 - C6933) * C5811 +
             (C139835 * C6910 - C265 * C6628) * C5818 +
             (C139835 * C6913 - C265 * C6634) * C139736) *
                C5815) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[39] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C89 * C114 - C100 * C108 + C90 * C116 - C102 * C109 + C91 * C118 -
             C104 * C110 + C92 * C120 - C106 * C111) *
                C182 +
            (C89 * C354 - C100 * C348 + C90 * C355 - C102 * C349 + C91 * C356 -
             C104 * C350 + C92 * C357 - C106 * C351) *
                C139824) *
               C139835 * C139809 * C2322 +
           ((C100 * C813 - C89 * C821 + C102 * C812 - C90 * C819 + C104 * C811 -
             C91 * C817 + C106 * C810 - C92 * C815) *
                C182 +
            (C100 * C1072 - C89 * C1077 + C102 * C1073 - C90 * C1078 +
             C104 * C1074 - C91 * C1079 + C106 * C1075 - C92 * C1080) *
                C139824) *
               C139835 * C139809 * C140000) *
              C2324 +
          (((C100 * C109 - C89 * C116 + C102 * C110 - C90 * C118 + C104 * C111 -
             C91 * C120 + C106 * C112 - C92 * C122) *
                C182 +
            (C100 * C349 - C89 * C355 + C102 * C350 - C90 * C356 + C104 * C351 -
             C91 * C357 + C106 * C352 - C92 * C358) *
                C139824) *
               C139835 * C139809 * C2322 +
           ((C89 * C819 - C100 * C812 + C90 * C817 - C102 * C811 + C91 * C815 -
             C104 * C810 + C92 * C823 - C106 * C814) *
                C182 +
            (C89 * C1078 - C100 * C1073 + C90 * C1079 - C102 * C1074 +
             C91 * C1080 - C104 * C1075 + C92 * C1081 - C106 * C1076) *
                C139824) *
               C139835 * C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5811 * C114 - C5816 * C108 + C139736 * C116 - C5818 * C109) *
                C5894 +
            (C5811 * C354 - C5816 * C348 + C139736 * C355 - C5818 * C349) *
                C5813 +
            (C7039 - C7040 + C7041 - C7042) * C5895 +
            (C7043 - C7044 + C7045 - C7046) * C5814 +
            (C7047 - C7048 + C7049 - C7050) * C5896 +
            (C7051 - C7052 + C7053 - C7054) * C5815) *
               C139835 * C139809 * C2322 +
           ((C7040 - C7039 + C7042 - C7041) * C5894 +
            (C7044 - C7043 + C7046 - C7045) * C5813 +
            (C7048 - C7047 + C7050 - C7049) * C5895 +
            (C7052 - C7051 + C7054 - C7053) * C5814 +
            (C5816 * C6627 - C5811 * C6631 + C5818 * C6626 - C139736 * C6629) *
                C5896 +
            (C5816 * C7032 - C5811 * C7035 + C5818 * C7033 - C139736 * C7036) *
                C5815) *
               C139835 * C139809 * C140000) *
              C2324 +
          (((C5816 * C109 - C5811 * C116 + C5818 * C110 - C139736 * C118) *
                C5894 +
            (C5816 * C349 - C5811 * C355 + C5818 * C350 - C139736 * C356) *
                C5813 +
            (C7055 - C7056 + C7057 - C7058) * C5895 +
            (C7059 - C7060 + C7061 - C7062) * C5814 +
            (C7063 - C7064 + C7065 - C7066) * C5896 +
            (C7067 - C7068 + C7069 - C7070) * C5815) *
               C139835 * C139809 * C2322 +
           ((C7056 - C7055 + C7058 - C7057) * C5894 +
            (C7060 - C7059 + C7062 - C7061) * C5813 +
            (C7064 - C7063 + C7066 - C7065) * C5895 +
            (C7068 - C7067 + C7070 - C7069) * C5814 +
            (C5811 * C6629 - C5816 * C6626 + C139736 * C6633 - C5818 * C6628) *
                C5896 +
            (C5811 * C7036 - C5816 * C7033 + C139736 * C7037 - C5818 * C7034) *
                C5815) *
               C139835 * C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[39] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C182 * C183 - C410 * C108 - C182 * C348 + C139824 * C411) * C89 +
            C442 * C90 + C443 * C91 + C444 * C92) *
               C139835 * C139809 * C2322 -
           (C1172 * C92 + C1173 * C91 + C1174 * C90 +
            (C182 * C896 - C410 * C813 - C182 * C1072 + C139824 * C1151) *
                C89) *
               C139835 * C139809 * C140000) *
              C2324 +
          ((C1174 * C89 + C1173 * C90 + C1172 * C91 +
            (C182 * C900 - C410 * C814 - C182 * C1076 + C139824 * C1152) *
                C92) *
               C139835 * C139809 * C140000 -
           (C445 * C92 + C444 * C91 + C443 * C90 + C442 * C89) * C139835 *
               C139809 * C2322) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5894 * C183 - C6151 * C108 - C5894 * C348 + C5813 * C411 +
             C5895 * C896 - C6152 * C813 - C5895 * C1072 + C5814 * C1151 +
             C5896 * C2974 - C6153 * C2908 - C5896 * C3090 + C5815 * C3148) *
                C5811 +
            (C6191 + C6192 + C6193) * C139736) *
               C139835 * C139809 * C2322 -
           ((C7190 + C7191 + C7192) * C139736 +
            (C5896 * C6792 - C6153 * C6627 - C5896 * C7032 + C5815 * C7169 +
             C5895 * C2974 - C6152 * C2908 - C5895 * C3090 + C5814 * C3148 +
             C5894 * C896 - C6151 * C813 - C5894 * C1072 + C5813 * C1151) *
                C5811) *
               C139835 * C139809 * C140000) *
              C2324 +
          (((C7192 + C7191 + C7190) * C5811 +
            (C5894 * C898 - C6151 * C811 - C5894 * C1074 + C5813 * C1149 +
             C5895 * C2976 - C6152 * C2910 - C5895 * C3092 + C5814 * C3150 +
             C5896 * C6794 - C6153 * C6628 - C5896 * C7034 + C5815 * C7170) *
                C139736) *
               C139835 * C139809 * C140000 -
           ((C6194 + C6195 + C6196) * C139736 +
            (C6193 + C6192 + C6191) * C5811) *
               C139835 * C139809 * C2322) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[39] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C139835 * C266 - C265 * C108) * C182 +
             (C139835 * C495 - C265 * C348) * C139824) *
                C89 +
            ((C279 - C280) * C182 + (C502 - C503) * C139824) * C90 +
            C516 * C91 + C517 * C92) *
               C139809 * C2322 +
           (((C265 * C813 - C139835 * C984) * C182 +
             (C265 * C1072 - C139835 * C1240) * C139824) *
                C89 +
            ((C995 - C996) * C182 + (C1246 - C1247) * C139824) * C90 +
            ((C999 - C1000) * C182 + (C1248 - C1249) * C139824) * C91 +
            ((C1003 - C1004) * C182 + (C1250 - C1251) * C139824) * C92) *
               C139809 * C140000) *
              C2324 +
          ((((C280 - C279) * C182 + (C503 - C502) * C139824) * C89 +
            ((C284 - C283) * C182 + (C506 - C505) * C139824) * C90 +
            ((C288 - C287) * C182 + (C509 - C508) * C139824) * C91 +
            ((C291 - C292) * C182 + (C510 - C511) * C139824) * C92) *
               C139809 * C2322 +
           (((C996 - C995) * C182 + (C1247 - C1246) * C139824) * C89 +
            ((C1000 - C999) * C182 + (C1249 - C1248) * C139824) * C90 +
            ((C1004 - C1003) * C182 + (C1251 - C1250) * C139824) * C91 +
            ((C139835 * C988 - C265 * C814) * C182 +
             (C139835 * C1244 - C265 * C1076) * C139824) *
                C92) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C139835 * C266 - C265 * C108) * C5894 +
             (C139835 * C495 - C265 * C348) * C5813 + (C6915 - C6916) * C5895 +
             (C7294 - C7295) * C5814 + (C6921 - C6922) * C5896 +
             (C7296 - C7297) * C5815) *
                C5811 +
            ((C279 - C280) * C5894 + (C502 - C503) * C5813 + C6919 * C5895 +
             C7298 * C5814 + C6925 * C5896 + C7299 * C5815) *
                C139736) *
               C139809 * C2322 +
           (((C6916 - C6915) * C5894 + (C7295 - C7294) * C5813 +
             (C6922 - C6921) * C5895 + (C7297 - C7296) * C5814 +
             (C265 * C6627 - C139835 * C6908) * C5896 +
             (C265 * C7032 - C139835 * C7290) * C5815) *
                C5811 +
            (C6927 * C5894 + C7300 * C5813 + C6929 * C5895 + C7301 * C5814 +
             (C6931 - C6932) * C5896 + (C7302 - C7303) * C5815) *
                C139736) *
               C139809 * C140000) *
              C2324 +
          ((((C280 - C279) * C5894 + (C503 - C502) * C5813 + C6927 * C5895 +
             C7300 * C5814 + C6929 * C5896 + C7301 * C5815) *
                C5811 +
            ((C284 - C283) * C5894 + (C506 - C505) * C5813 +
             (C999 - C1000) * C5895 + (C1248 - C1249) * C5814 +
             (C6000 - C6001) * C5896 + (C6273 - C6274) * C5815) *
                C139736) *
               C139809 * C2322 +
           ((C6919 * C5894 + C7298 * C5813 + C6925 * C5895 + C7299 * C5814 +
             (C6932 - C6931) * C5896 + (C7303 - C7302) * C5815) *
                C5811 +
            ((C1000 - C999) * C5894 + (C1249 - C1248) * C5813 +
             (C6001 - C6000) * C5895 + (C6274 - C6273) * C5814 +
             (C139835 * C6910 - C265 * C6628) * C5896 +
             (C139835 * C7292 - C265 * C7034) * C5815) *
                C139736) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eezx[39] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C89 * C114 - C100 * C108 + C90 * C116 - C102 * C109 + C91 * C118 -
             C104 * C110 + C92 * C120 - C106 * C111) *
                C265 +
            (C89 * C573 - C100 * C567 + C90 * C574 - C102 * C568 + C91 * C575 -
             C104 * C569 + C92 * C576 - C106 * C570) *
                C139835) *
               C139824 * C139809 * C2322 +
           ((C100 * C813 - C89 * C821 + C102 * C812 - C90 * C819 + C104 * C811 -
             C91 * C817 + C106 * C810 - C92 * C815) *
                C265 +
            (C100 * C1317 - C89 * C1322 + C102 * C1318 - C90 * C1323 +
             C104 * C1319 - C91 * C1324 + C106 * C1320 - C92 * C1325) *
                C139835) *
               C139824 * C139809 * C140000) *
              C2324 +
          (((C100 * C109 - C89 * C116 + C102 * C110 - C90 * C118 + C104 * C111 -
             C91 * C120 + C106 * C112 - C92 * C122) *
                C265 +
            (C100 * C568 - C89 * C574 + C102 * C569 - C90 * C575 + C104 * C570 -
             C91 * C576 + C106 * C571 - C92 * C577) *
                C139835) *
               C139824 * C139809 * C2322 +
           ((C89 * C819 - C100 * C812 + C90 * C817 - C102 * C811 + C91 * C815 -
             C104 * C810 + C92 * C823 - C106 * C814) *
                C265 +
            (C89 * C1323 - C100 * C1318 + C90 * C1324 - C102 * C1319 +
             C91 * C1325 - C104 * C1320 + C92 * C1326 - C106 * C1321) *
                C139835) *
               C139824 * C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5811 * C114 - C5816 * C108 + C139736 * C116 - C5818 * C109) *
                 C265 +
             (C5811 * C573 - C5816 * C567 + C139736 * C574 - C5818 * C568) *
                 C139835) *
                C5813 +
            ((C7039 - C7040 + C7041 - C7042) * C265 +
             (C7408 - C7409 + C7410 - C7411) * C139835) *
                C5814 +
            ((C7047 - C7048 + C7049 - C7050) * C265 +
             (C7412 - C7413 + C7414 - C7415) * C139835) *
                C5815) *
               C139809 * C2322 +
           (((C7040 - C7039 + C7042 - C7041) * C265 +
             (C7409 - C7408 + C7411 - C7410) * C139835) *
                C5813 +
            ((C7048 - C7047 + C7050 - C7049) * C265 +
             (C7413 - C7412 + C7415 - C7414) * C139835) *
                C5814 +
            ((C5816 * C6627 - C5811 * C6631 + C5818 * C6626 - C139736 * C6629) *
                 C265 +
             (C5816 * C7401 - C5811 * C7404 + C5818 * C7402 - C139736 * C7405) *
                 C139835) *
                C5815) *
               C139809 * C140000) *
              C2324 +
          ((((C5816 * C109 - C5811 * C116 + C5818 * C110 - C139736 * C118) *
                 C265 +
             (C5816 * C568 - C5811 * C574 + C5818 * C569 - C139736 * C575) *
                 C139835) *
                C5813 +
            ((C7055 - C7056 + C7057 - C7058) * C265 +
             (C7416 - C7417 + C7418 - C7419) * C139835) *
                C5814 +
            ((C7063 - C7064 + C7065 - C7066) * C265 +
             (C7420 - C7421 + C7422 - C7423) * C139835) *
                C5815) *
               C139809 * C2322 +
           (((C7056 - C7055 + C7058 - C7057) * C265 +
             (C7417 - C7416 + C7419 - C7418) * C139835) *
                C5813 +
            ((C7064 - C7063 + C7066 - C7065) * C265 +
             (C7421 - C7420 + C7423 - C7422) * C139835) *
                C5814 +
            ((C5811 * C6629 - C5816 * C6626 + C139736 * C6633 - C5818 * C6628) *
                 C265 +
             (C5811 * C7405 - C5816 * C7402 + C139736 * C7406 - C5818 * C7403) *
                 C139835) *
                C5815) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eezy[39] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C139824 * C183 - C182 * C108) * C265 +
             (C139824 * C629 - C182 * C567) * C139835) *
                C89 +
            ((C196 - C197) * C265 + (C636 - C637) * C139835) * C90 +
            C650 * C91 + C651 * C92) *
               C139809 * C2322 +
           (((C182 * C813 - C139824 * C896) * C265 +
             (C182 * C1317 - C139824 * C1393) * C139835) *
                C89 +
            ((C907 - C908) * C265 + (C1399 - C1400) * C139835) * C90 +
            ((C911 - C912) * C265 + (C1401 - C1402) * C139835) * C91 +
            ((C915 - C916) * C265 + (C1403 - C1404) * C139835) * C92) *
               C139809 * C140000) *
              C2324 +
          ((((C197 - C196) * C265 + (C637 - C636) * C139835) * C89 +
            ((C201 - C200) * C265 + (C640 - C639) * C139835) * C90 +
            ((C205 - C204) * C265 + (C643 - C642) * C139835) * C91 +
            ((C208 - C209) * C265 + (C644 - C645) * C139835) * C92) *
               C139809 * C2322 +
           (((C908 - C907) * C265 + (C1400 - C1399) * C139835) * C89 +
            ((C912 - C911) * C265 + (C1402 - C1401) * C139835) * C90 +
            ((C916 - C915) * C265 + (C1404 - C1403) * C139835) * C91 +
            ((C139824 * C900 - C182 * C814) * C265 +
             (C139824 * C1397 - C182 * C1321) * C139835) *
                C92) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5813 * C183 - C5894 * C108 + C5814 * C896 - C5895 * C813 +
              C5815 * C2974 - C5896 * C2908) *
                 C265 +
             (C5813 * C629 - C5894 * C567 + C5814 * C1393 - C5895 * C1317 +
              C5815 * C3314 - C5896 * C3256) *
                 C139835) *
                C5811 +
            ((C5898 - C5899 + C5900 - C5901 + C5902 - C5903) * C265 +
             (C6423 - C6424 + C6425 - C6426 + C6427 - C6428) * C139835) *
                C139736) *
               C139809 * C2322 +
           (((C5894 * C813 - C5813 * C896 + C5895 * C2908 - C5814 * C2974 +
              C5896 * C6627 - C5815 * C6792) *
                 C265 +
             (C5894 * C1317 - C5813 * C1393 + C5895 * C3256 - C5814 * C3314 +
              C5896 * C7401 - C5815 * C7521) *
                 C139835) *
                C5811 +
            ((C6799 - C6800 + C6801 - C6802 + C6803 - C6804) * C265 +
             (C7525 - C7526 + C7527 - C7528 + C7529 - C7530) * C139835) *
                C139736) *
               C139809 * C140000) *
              C2324 +
          ((((C5899 - C5898 + C5901 - C5900 + C5903 - C5902) * C265 +
             (C6424 - C6423 + C6426 - C6425 + C6428 - C6427) * C139835) *
                C5811 +
            ((C5910 - C5911 + C5912 - C5913 + C5914 - C5915) * C265 +
             (C6429 - C6430 + C6431 - C6432 + C6433 - C6434) * C139835) *
                C139736) *
               C139809 * C2322 +
           (((C6800 - C6799 + C6802 - C6801 + C6804 - C6803) * C265 +
             (C7526 - C7525 + C7528 - C7527 + C7530 - C7529) * C139835) *
                C5811 +
            ((C5813 * C898 - C5894 * C811 + C5814 * C2976 - C5895 * C2910 +
              C5815 * C6794 - C5896 * C6628) *
                 C265 +
             (C5813 * C1395 - C5894 * C1319 + C5814 * C3316 - C5895 * C3258 +
              C5815 * C7523 - C5896 * C7403) *
                 C139835) *
                C139736) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eezz[39] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C265 * C266 - C701 * C108 - C265 * C567 + C139835 * C702) *
                C139824 * C89 +
            C737 * C90 + C738 * C91 + C739 * C92) *
               C139809 * C2322 -
           (C1497 * C92 + C1498 * C91 + C1499 * C90 +
            (C265 * C984 - C701 * C813 - C265 * C1317 + C139835 * C1473) *
                C139824 * C89) *
               C139809 * C140000) *
              C2324 +
          ((C1499 * C89 + C1498 * C90 + C1497 * C91 +
            (C265 * C988 - C701 * C814 - C265 * C1321 + C139835 * C1474) *
                C139824 * C92) *
               C139809 * C140000 -
           (C740 * C92 + C739 * C91 + C738 * C90 + C737 * C89) * C139809 *
               C2322) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C265 * C266 - C701 * C108 - C265 * C567 + C139835 * C702) *
                 C5813 +
             C7652 * C5814 + C7653 * C5815) *
                C5811 +
            (C6509 + C6510 + C6527) * C139736) *
               C139809 * C2322 -
           ((C7655 + C7644 + C7645) * C139736 +
            ((C265 * C6908 - C701 * C6627 - C265 * C7401 + C139835 * C7629) *
                 C5815 +
             C7653 * C5814 + C7652 * C5813) *
                C5811) *
               C139809 * C140000) *
              C2324 +
          (((C7645 + C7644 + C7655) * C5811 +
            (C1495 * C5813 + C6526 * C5814 +
             (C265 * C6910 - C701 * C6628 - C265 * C7403 + C139835 * C7630) *
                 C5815) *
                C139736) *
               C139809 * C140000 -
           ((C6528 + C6519 + C6520) * C139736 +
            (C6527 + C6510 + C6509) * C5811) *
               C139809 * C2322) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eexx[40] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((C100 * C114 - C101 * C108 - C100 * C115 + C89 * C126 + C102 * C116 -
           C103 * C109 - C102 * C117 + C90 * C127 + C104 * C118 - C105 * C110 -
           C104 * C119 + C91 * C128 + C106 * C120 - C107 * C111 - C106 * C121 +
           C92 * C129) *
              C139835 * C139824 * C139809 * C2904 -
          (C106 * C815 - C107 * C810 - C106 * C816 + C92 * C825 + C104 * C817 -
           C105 * C811 - C104 * C818 + C91 * C826 + C102 * C819 - C103 * C812 -
           C102 * C820 + C90 * C827 + C100 * C821 - C101 * C813 - C100 * C822 +
           C89 * C828) *
              C139835 * C139824 * C139809 * C2905 +
          (C100 * C2912 - C101 * C2908 - C100 * C2913 + C89 * C2920 +
           C102 * C2914 - C103 * C2909 - C102 * C2915 + C90 * C2921 +
           C104 * C2916 - C105 * C2910 - C104 * C2917 + C91 * C2922 +
           C106 * C2918 - C107 * C2911 - C106 * C2919 + C92 * C2923) *
              C139835 * C139824 * C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C5816 * C114 - C5817 * C108 - C5816 * C115 + C5811 * C126 +
            C5818 * C116 - C5819 * C109 - C5818 * C117 + C139736 * C127) *
               C139835 * C5813 +
           (C6687 + C6688) * C139835 * C5814 + C9627 * C5815) *
              C139809 * C2904 -
          ((C9632 + C9633) * C139835 * C5815 +
           (C6690 + C6689) * C139835 * C5814 +
           (C6688 + C6687) * C139835 * C5813) *
              C139809 * C2905 +
          (C9627 * C5813 + (C9633 + C9632) * C139835 * C5814 +
           (C5816 * C9611 - C5817 * C9609 - C5816 * C9612 + C5811 * C9615 +
            C5818 * C9613 - C5819 * C9610 - C5818 * C9614 + C139736 * C9616) *
               C139835 * C5815) *
              C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eexy[40] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C139824 * C183 - C182 * C108) * C100 +
           (C139824 * C189 - C182 * C115) * C89 + (C196 - C197) * C102 +
           (C198 - C199) * C90 + C212 * C104 + C213 * C91 + C214 * C106 +
           C215 * C92) *
              C139835 * C139809 * C2904 +
          ((C182 * C813 - C139824 * C896) * C100 +
           (C182 * C822 - C139824 * C901) * C89 + (C907 - C908) * C102 +
           (C909 - C910) * C90 + (C911 - C912) * C104 + (C913 - C914) * C91 +
           (C915 - C916) * C106 + (C917 - C918) * C92) *
              C139835 * C139809 * C2905 +
          ((C139824 * C2974 - C182 * C2908) * C100 +
           (C139824 * C2978 - C182 * C2913) * C89 +
           (C139824 * C2975 - C182 * C2909) * C102 +
           (C139824 * C2979 - C182 * C2915) * C90 +
           (C139824 * C2976 - C182 * C2910) * C104 +
           (C139824 * C2980 - C182 * C2917) * C91 +
           (C139824 * C2977 - C182 * C2911) * C106 +
           (C139824 * C2981 - C182 * C2919) * C92) *
              C139835 * C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C5813 * C183 - C5894 * C108 + C5814 * C896 - C5895 * C813 +
            C5815 * C2974 - C5896 * C2908) *
               C5816 +
           (C5813 * C189 - C5894 * C115 + C5814 * C901 - C5895 * C822 +
            C5815 * C2978 - C5896 * C2913) *
               C5811 +
           (C5898 - C5899 + C5900 - C5901 + C5902 - C5903) * C5818 +
           (C5904 - C5905 + C5906 - C5907 + C5908 - C5909) * C139736) *
              C139835 * C139809 * C2904 +
          ((C5894 * C813 - C5813 * C896 + C5895 * C2908 - C5814 * C2974 +
            C5896 * C6627 - C5815 * C6792) *
               C5816 +
           (C5894 * C822 - C5813 * C901 + C5895 * C2913 - C5814 * C2978 +
            C5896 * C6632 - C5815 * C6795) *
               C5811 +
           (C6799 - C6800 + C6801 - C6802 + C6803 - C6804) * C5818 +
           (C6805 - C6806 + C6807 - C6808 + C6809 - C6810) * C139736) *
              C139835 * C139809 * C2905 +
          ((C5813 * C2974 - C5894 * C2908 + C5814 * C6792 - C5895 * C6627 +
            C5815 * C9707 - C5896 * C9609) *
               C5816 +
           (C5813 * C2978 - C5894 * C2913 + C5814 * C6795 - C5895 * C6632 +
            C5815 * C9709 - C5896 * C9612) *
               C5811 +
           (C5813 * C2975 - C5894 * C2909 + C5814 * C6793 - C5895 * C6626 +
            C5815 * C9708 - C5896 * C9610) *
               C5818 +
           (C5813 * C2979 - C5894 * C2915 + C5814 * C6796 - C5895 * C6630 +
            C5815 * C9710 - C5896 * C9614) *
               C139736) *
              C139835 * C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eexz[40] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C139835 * C266 - C265 * C108) * C100 +
           (C139835 * C272 - C265 * C115) * C89 + (C279 - C280) * C102 +
           (C281 - C282) * C90 + C295 * C104 + C296 * C91 + C297 * C106 +
           C298 * C92) *
              C139824 * C139809 * C2904 +
          ((C265 * C813 - C139835 * C984) * C100 +
           (C265 * C822 - C139835 * C989) * C89 + (C995 - C996) * C102 +
           (C997 - C998) * C90 + (C999 - C1000) * C104 + (C1001 - C1002) * C91 +
           (C1003 - C1004) * C106 + (C1005 - C1006) * C92) *
              C139824 * C139809 * C2905 +
          ((C139835 * C3032 - C265 * C2908) * C100 +
           (C139835 * C3036 - C265 * C2913) * C89 +
           (C139835 * C3033 - C265 * C2909) * C102 +
           (C139835 * C3037 - C265 * C2915) * C90 +
           (C139835 * C3034 - C265 * C2910) * C104 +
           (C139835 * C3038 - C265 * C2917) * C91 +
           (C139835 * C3035 - C265 * C2911) * C106 +
           (C139835 * C3039 - C265 * C2919) * C92) *
              C139824 * C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C139835 * C266 - C265 * C108) * C5816 +
            (C139835 * C272 - C265 * C115) * C5811 + (C279 - C280) * C5818 +
            (C281 - C282) * C139736) *
               C5813 +
           ((C6915 - C6916) * C5816 + (C6917 - C6918) * C5811 + C6919 * C5818 +
            C6920 * C139736) *
               C5814 +
           C9802 * C5815) *
              C139809 * C2904 +
          (((C6916 - C6915) * C5816 + (C6918 - C6917) * C5811 + C6927 * C5818 +
            C6928 * C139736) *
               C5813 +
           ((C6922 - C6921) * C5816 + (C6924 - C6923) * C5811 + C6929 * C5818 +
            C6930 * C139736) *
               C5814 +
           ((C9794 - C9795) * C5816 + (C9796 - C9797) * C5811 +
            (C6931 - C6932) * C5818 + (C6933 - C6934) * C139736) *
               C5815) *
              C139809 * C2905 +
          (C9802 * C5813 +
           ((C9795 - C9794) * C5816 + (C9797 - C9796) * C5811 +
            (C6932 - C6931) * C5818 + (C6934 - C6933) * C139736) *
               C5814 +
           ((C139835 * C9785 - C265 * C9609) * C5816 +
            (C139835 * C9787 - C265 * C9612) * C5811 +
            (C139835 * C9786 - C265 * C9610) * C5818 +
            (C139835 * C9788 - C265 * C9614) * C139736) *
               C5815) *
              C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eeyx[40] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C89 * C114 - C100 * C108 + C90 * C116 - C102 * C109 + C91 * C118 -
            C104 * C110 + C92 * C120 - C106 * C111) *
               C182 +
           (C89 * C354 - C100 * C348 + C90 * C355 - C102 * C349 + C91 * C356 -
            C104 * C350 + C92 * C357 - C106 * C351) *
               C139824) *
              C139835 * C139809 * C2904 +
          ((C100 * C813 - C89 * C821 + C102 * C812 - C90 * C819 + C104 * C811 -
            C91 * C817 + C106 * C810 - C92 * C815) *
               C182 +
           (C100 * C1072 - C89 * C1077 + C102 * C1073 - C90 * C1078 +
            C104 * C1074 - C91 * C1079 + C106 * C1075 - C92 * C1080) *
               C139824) *
              C139835 * C139809 * C2905 +
          ((C89 * C2912 - C100 * C2908 + C90 * C2914 - C102 * C2909 +
            C91 * C2916 - C104 * C2910 + C92 * C2918 - C106 * C2911) *
               C182 +
           (C89 * C3094 - C100 * C3090 + C90 * C3095 - C102 * C3091 +
            C91 * C3096 - C104 * C3092 + C92 * C3097 - C106 * C3093) *
               C139824) *
              C139835 * C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C5811 * C114 - C5816 * C108 + C139736 * C116 - C5818 * C109) *
               C5894 +
           (C5811 * C354 - C5816 * C348 + C139736 * C355 - C5818 * C349) *
               C5813 +
           (C7039 - C7040 + C7041 - C7042) * C5895 +
           (C7043 - C7044 + C7045 - C7046) * C5814 + C9893 * C5896 +
           C9894 * C5815) *
              C139835 * C139809 * C2904 +
          ((C7040 - C7039 + C7042 - C7041) * C5894 +
           (C7044 - C7043 + C7046 - C7045) * C5813 +
           (C7048 - C7047 + C7050 - C7049) * C5895 +
           (C7052 - C7051 + C7054 - C7053) * C5814 +
           (C9885 - C9886 + C9887 - C9888) * C5896 +
           (C9889 - C9890 + C9891 - C9892) * C5815) *
              C139835 * C139809 * C2905 +
          (C9893 * C5894 + C9894 * C5813 +
           (C9886 - C9885 + C9888 - C9887) * C5895 +
           (C9890 - C9889 + C9892 - C9891) * C5814 +
           (C5811 * C9611 - C5816 * C9609 + C139736 * C9613 - C5818 * C9610) *
               C5896 +
           (C5811 * C9878 - C5816 * C9876 + C139736 * C9879 - C5818 * C9877) *
               C5815) *
              C139835 * C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eeyy[40] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C182 * C183 - C410 * C108 - C182 * C348 + C139824 * C411) * C89 +
           C442 * C90 + C443 * C91 + C444 * C92) *
              C139835 * C139809 * C2904 -
          (C1172 * C92 + C1173 * C91 + C1174 * C90 +
           (C182 * C896 - C410 * C813 - C182 * C1072 + C139824 * C1151) * C89) *
              C139835 * C139809 * C2905 +
          ((C182 * C2974 - C410 * C2908 - C182 * C3090 + C139824 * C3148) *
               C89 +
           (C182 * C2975 - C410 * C2909 - C182 * C3091 + C139824 * C3149) *
               C90 +
           (C182 * C2976 - C410 * C2910 - C182 * C3092 + C139824 * C3150) *
               C91 +
           (C182 * C2977 - C410 * C2911 - C182 * C3093 + C139824 * C3151) *
               C92) *
              C139835 * C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C5894 * C183 - C6151 * C108 - C5894 * C348 + C5813 * C411 +
            C5895 * C896 - C6152 * C813 - C5895 * C1072 + C5814 * C1151 +
            C5896 * C2974 - C6153 * C2908 - C5896 * C3090 + C5815 * C3148) *
               C5811 +
           (C6191 + C6192 + C6193) * C139736) *
              C139835 * C139809 * C2904 -
          ((C7190 + C7191 + C7192) * C139736 +
           (C5896 * C6792 - C6153 * C6627 - C5896 * C7032 + C5815 * C7169 +
            C5895 * C2974 - C6152 * C2908 - C5895 * C3090 + C5814 * C3148 +
            C5894 * C896 - C6151 * C813 - C5894 * C1072 + C5813 * C1151) *
               C5811) *
              C139835 * C139809 * C2905 +
          ((C5894 * C2974 - C6151 * C2908 - C5894 * C3090 + C5813 * C3148 +
            C5895 * C6792 - C6152 * C6627 - C5895 * C7032 + C5814 * C7169 +
            C5896 * C9707 - C6153 * C9609 - C5896 * C9876 + C5815 * C9968) *
               C5811 +
           (C5894 * C2975 - C6151 * C2909 - C5894 * C3091 + C5813 * C3149 +
            C5895 * C6793 - C6152 * C6626 - C5895 * C7033 + C5814 * C7168 +
            C5896 * C9708 - C6153 * C9610 - C5896 * C9877 + C5815 * C9969) *
               C139736) *
              C139835 * C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eeyz[40] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C139835 * C266 - C265 * C108) * C182 +
            (C139835 * C495 - C265 * C348) * C139824) *
               C89 +
           ((C279 - C280) * C182 + (C502 - C503) * C139824) * C90 + C516 * C91 +
           C517 * C92) *
              C139809 * C2904 +
          (((C265 * C813 - C139835 * C984) * C182 +
            (C265 * C1072 - C139835 * C1240) * C139824) *
               C89 +
           ((C995 - C996) * C182 + (C1246 - C1247) * C139824) * C90 +
           ((C999 - C1000) * C182 + (C1248 - C1249) * C139824) * C91 +
           ((C1003 - C1004) * C182 + (C1250 - C1251) * C139824) * C92) *
              C139809 * C2905 +
          (((C139835 * C3032 - C265 * C2908) * C182 +
            (C139835 * C3202 - C265 * C3090) * C139824) *
               C89 +
           ((C139835 * C3033 - C265 * C2909) * C182 +
            (C139835 * C3203 - C265 * C3091) * C139824) *
               C90 +
           ((C139835 * C3034 - C265 * C2910) * C182 +
            (C139835 * C3204 - C265 * C3092) * C139824) *
               C91 +
           ((C139835 * C3035 - C265 * C2911) * C182 +
            (C139835 * C3205 - C265 * C3093) * C139824) *
               C92) *
              C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C139835 * C266 - C265 * C108) * C5894 +
            (C139835 * C495 - C265 * C348) * C5813 + (C6915 - C6916) * C5895 +
            (C7294 - C7295) * C5814 + C9790 * C5896 + C10047 * C5815) *
               C5811 +
           ((C279 - C280) * C5894 + (C502 - C503) * C5813 + C6919 * C5895 +
            C7298 * C5814 + C6925 * C5896 + C7299 * C5815) *
               C139736) *
              C139809 * C2904 +
          (((C6916 - C6915) * C5894 + (C7295 - C7294) * C5813 +
            (C6922 - C6921) * C5895 + (C7297 - C7296) * C5814 +
            (C9794 - C9795) * C5896 + (C10048 - C10049) * C5815) *
               C5811 +
           (C6927 * C5894 + C7300 * C5813 + C6929 * C5895 + C7301 * C5814 +
            (C6931 - C6932) * C5896 + (C7302 - C7303) * C5815) *
               C139736) *
              C139809 * C2905 +
          ((C9790 * C5894 + C10047 * C5813 + (C9795 - C9794) * C5895 +
            (C10049 - C10048) * C5814 +
            (C139835 * C9785 - C265 * C9609) * C5896 +
            (C139835 * C10044 - C265 * C9876) * C5815) *
               C5811 +
           (C6925 * C5894 + C7299 * C5813 + (C6932 - C6931) * C5895 +
            (C7303 - C7302) * C5814 + (C139835 * C9786 - C265 * C9610) * C5896 +
            (C139835 * C10045 - C265 * C9877) * C5815) *
               C139736) *
              C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eezx[40] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C89 * C114 - C100 * C108 + C90 * C116 - C102 * C109 + C91 * C118 -
            C104 * C110 + C92 * C120 - C106 * C111) *
               C265 +
           (C89 * C573 - C100 * C567 + C90 * C574 - C102 * C568 + C91 * C575 -
            C104 * C569 + C92 * C576 - C106 * C570) *
               C139835) *
              C139824 * C139809 * C2904 +
          ((C100 * C813 - C89 * C821 + C102 * C812 - C90 * C819 + C104 * C811 -
            C91 * C817 + C106 * C810 - C92 * C815) *
               C265 +
           (C100 * C1317 - C89 * C1322 + C102 * C1318 - C90 * C1323 +
            C104 * C1319 - C91 * C1324 + C106 * C1320 - C92 * C1325) *
               C139835) *
              C139824 * C139809 * C2905 +
          ((C89 * C2912 - C100 * C2908 + C90 * C2914 - C102 * C2909 +
            C91 * C2916 - C104 * C2910 + C92 * C2918 - C106 * C2911) *
               C265 +
           (C89 * C3260 - C100 * C3256 + C90 * C3261 - C102 * C3257 +
            C91 * C3262 - C104 * C3258 + C92 * C3263 - C106 * C3259) *
               C139835) *
              C139824 * C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5811 * C114 - C5816 * C108 + C139736 * C116 - C5818 * C109) *
                C265 +
            (C5811 * C573 - C5816 * C567 + C139736 * C574 - C5818 * C568) *
                C139835) *
               C5813 +
           ((C7039 - C7040 + C7041 - C7042) * C265 +
            (C7408 - C7409 + C7410 - C7411) * C139835) *
               C5814 +
           C10137 * C5815) *
              C139809 * C2904 +
          (((C7040 - C7039 + C7042 - C7041) * C265 +
            (C7409 - C7408 + C7411 - C7410) * C139835) *
               C5813 +
           ((C7048 - C7047 + C7050 - C7049) * C265 +
            (C7413 - C7412 + C7415 - C7414) * C139835) *
               C5814 +
           ((C9885 - C9886 + C9887 - C9888) * C265 +
            (C10131 - C10132 + C10133 - C10134) * C139835) *
               C5815) *
              C139809 * C2905 +
          (C10137 * C5813 +
           ((C9886 - C9885 + C9888 - C9887) * C265 +
            (C10132 - C10131 + C10134 - C10133) * C139835) *
               C5814 +
           ((C5811 * C9611 - C5816 * C9609 + C139736 * C9613 - C5818 * C9610) *
                C265 +
            (C5811 * C10125 - C5816 * C10123 + C139736 * C10126 -
             C5818 * C10124) *
                C139835) *
               C5815) *
              C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eezy[40] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C139824 * C183 - C182 * C108) * C265 +
            (C139824 * C629 - C182 * C567) * C139835) *
               C89 +
           ((C196 - C197) * C265 + (C636 - C637) * C139835) * C90 + C650 * C91 +
           C651 * C92) *
              C139809 * C2904 +
          (((C182 * C813 - C139824 * C896) * C265 +
            (C182 * C1317 - C139824 * C1393) * C139835) *
               C89 +
           ((C907 - C908) * C265 + (C1399 - C1400) * C139835) * C90 +
           ((C911 - C912) * C265 + (C1401 - C1402) * C139835) * C91 +
           ((C915 - C916) * C265 + (C1403 - C1404) * C139835) * C92) *
              C139809 * C2905 +
          (((C139824 * C2974 - C182 * C2908) * C265 +
            (C139824 * C3314 - C182 * C3256) * C139835) *
               C89 +
           ((C139824 * C2975 - C182 * C2909) * C265 +
            (C139824 * C3315 - C182 * C3257) * C139835) *
               C90 +
           ((C139824 * C2976 - C182 * C2910) * C265 +
            (C139824 * C3316 - C182 * C3258) * C139835) *
               C91 +
           ((C139824 * C2977 - C182 * C2911) * C265 +
            (C139824 * C3317 - C182 * C3259) * C139835) *
               C92) *
              C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5813 * C183 - C5894 * C108 + C5814 * C896 - C5895 * C813 +
             C5815 * C2974 - C5896 * C2908) *
                C265 +
            (C5813 * C629 - C5894 * C567 + C5814 * C1393 - C5895 * C1317 +
             C5815 * C3314 - C5896 * C3256) *
                C139835) *
               C5811 +
           ((C5898 - C5899 + C5900 - C5901 + C5902 - C5903) * C265 +
            (C6423 - C6424 + C6425 - C6426 + C6427 - C6428) * C139835) *
               C139736) *
              C139809 * C2904 +
          (((C5894 * C813 - C5813 * C896 + C5895 * C2908 - C5814 * C2974 +
             C5896 * C6627 - C5815 * C6792) *
                C265 +
            (C5894 * C1317 - C5813 * C1393 + C5895 * C3256 - C5814 * C3314 +
             C5896 * C7401 - C5815 * C7521) *
                C139835) *
               C5811 +
           ((C6799 - C6800 + C6801 - C6802 + C6803 - C6804) * C265 +
            (C7525 - C7526 + C7527 - C7528 + C7529 - C7530) * C139835) *
               C139736) *
              C139809 * C2905 +
          (((C5813 * C2974 - C5894 * C2908 + C5814 * C6792 - C5895 * C6627 +
             C5815 * C9707 - C5896 * C9609) *
                C265 +
            (C5813 * C3314 - C5894 * C3256 + C5814 * C7521 - C5895 * C7401 +
             C5815 * C10211 - C5896 * C10123) *
                C139835) *
               C5811 +
           ((C5813 * C2975 - C5894 * C2909 + C5814 * C6793 - C5895 * C6626 +
             C5815 * C9708 - C5896 * C9610) *
                C265 +
            (C5813 * C3315 - C5894 * C3257 + C5814 * C7522 - C5895 * C7402 +
             C5815 * C10212 - C5896 * C10124) *
                C139835) *
               C139736) *
              C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eezz[40] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C265 * C266 - C701 * C108 - C265 * C567 + C139835 * C702) *
               C139824 * C89 +
           C737 * C90 + C738 * C91 + C739 * C92) *
              C139809 * C2904 -
          (C1497 * C92 + C1498 * C91 + C1499 * C90 +
           (C265 * C984 - C701 * C813 - C265 * C1317 + C139835 * C1473) *
               C139824 * C89) *
              C139809 * C2905 +
          ((C265 * C3032 - C701 * C2908 - C265 * C3256 + C139835 * C3368) *
               C139824 * C89 +
           (C265 * C3033 - C701 * C2909 - C265 * C3257 + C139835 * C3369) *
               C139824 * C90 +
           (C265 * C3034 - C701 * C2910 - C265 * C3258 + C139835 * C3370) *
               C139824 * C91 +
           (C265 * C3035 - C701 * C2911 - C265 * C3259 + C139835 * C3371) *
               C139824 * C92) *
              C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C265 * C266 - C701 * C108 - C265 * C567 + C139835 * C702) * C5813 +
            C7652 * C5814 + C7653 * C5815) *
               C5811 +
           (C6509 + C6510 + C6527) * C139736) *
              C139809 * C2904 -
          ((C7655 + C7644 + C7645) * C139736 +
           (C10296 * C5815 + C7653 * C5814 + C7652 * C5813) * C5811) *
              C139809 * C2905 +
          ((C7653 * C5813 + C10296 * C5814 +
            (C265 * C9785 - C701 * C9609 - C265 * C10123 + C139835 * C10287) *
                C5815) *
               C5811 +
           (C6525 * C5813 + C7654 * C5814 +
            (C265 * C9786 - C701 * C9610 - C265 * C10124 + C139835 * C10288) *
                C5815) *
               C139736) *
              C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eexx[41] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C114 - C101 * C108 - C100 * C115 + C89 * C126 + C102 * C116 -
            C103 * C109 - C102 * C117 + C90 * C127 + C104 * C118 - C105 * C110 -
            C104 * C119 + C91 * C128 + C106 * C120 - C107 * C111 - C106 * C121 +
            C92 * C129) *
               C139835 * C139824 * C1565 -
           (C106 * C1572 - C107 * C1567 - C106 * C1573 + C92 * C1582 +
            C104 * C1574 - C105 * C1568 - C104 * C1575 + C91 * C1583 +
            C102 * C1576 - C103 * C1569 - C102 * C1577 + C90 * C1584 +
            C100 * C1578 - C101 * C1570 - C100 * C1579 + C89 * C1585) *
               C139835 * C139824 * C140002) *
              C2322 +
          ((C100 * C3442 - C101 * C3438 - C100 * C3443 + C89 * C3450 +
            C102 * C3444 - C103 * C3439 - C102 * C3445 + C90 * C3451 +
            C104 * C3446 - C105 * C3440 - C104 * C3447 + C91 * C3452 +
            C106 * C3448 - C107 * C3441 - C106 * C3449 + C92 * C3453) *
               C139835 * C139824 * C140002 -
           (C106 * C815 - C107 * C810 - C106 * C816 + C92 * C825 + C104 * C817 -
            C105 * C811 - C104 * C818 + C91 * C826 + C102 * C819 - C103 * C812 -
            C102 * C820 + C90 * C827 + C100 * C821 - C101 * C813 - C100 * C822 +
            C89 * C828) *
               C139835 * C139824 * C1565) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5816 * C114 - C5817 * C108 - C5816 * C115 + C5811 * C126 +
             C5818 * C116 - C5819 * C109 - C5818 * C117 + C139736 * C127) *
                C139835 * C5813 +
            (C6687 + C6688) * C139835 * C5814 + C9627 * C5815) *
               C1565 -
           ((C10427 + C10428) * C139835 * C5815 +
            (C10429 + C10430) * C139835 * C5814 +
            (C5818 * C1576 - C5819 * C1569 - C5818 * C1577 + C139736 * C1584 +
             C5816 * C1578 - C5817 * C1570 - C5816 * C1579 + C5811 * C1585) *
                C139835 * C5813) *
               C140002) *
              C2322 +
          (((C10430 + C10429) * C139835 * C5813 +
            (C10428 + C10427) * C139835 * C5814 +
            (C5816 * C10396 - C5817 * C10394 - C5816 * C10397 + C5811 * C10400 +
             C5818 * C10398 - C5819 * C10395 - C5818 * C10399 +
             C139736 * C10401) *
                C139835 * C5815) *
               C140002 -
           ((C9632 + C9633) * C139835 * C5815 +
            (C6690 + C6689) * C139835 * C5814 +
            (C6688 + C6687) * C139835 * C5813) *
               C1565) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eexy[41] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C139824 * C183 - C182 * C108) * C100 +
            (C139824 * C189 - C182 * C115) * C89 + (C196 - C197) * C102 +
            (C198 - C199) * C90 + C212 * C104 + C213 * C91 + C214 * C106 +
            C215 * C92) *
               C139835 * C1565 +
           ((C182 * C1570 - C139824 * C1653) * C100 +
            (C182 * C1579 - C139824 * C1658) * C89 + (C1664 - C1665) * C102 +
            (C1666 - C1667) * C90 + (C1668 - C1669) * C104 +
            (C1670 - C1671) * C91 + (C1672 - C1673) * C106 +
            (C1674 - C1675) * C92) *
               C139835 * C140002) *
              C2322 +
          (((C182 * C813 - C139824 * C896) * C100 +
            (C182 * C822 - C139824 * C901) * C89 + (C907 - C908) * C102 +
            (C909 - C910) * C90 + (C911 - C912) * C104 + (C913 - C914) * C91 +
            (C915 - C916) * C106 + (C917 - C918) * C92) *
               C139835 * C1565 +
           ((C139824 * C3520 - C182 * C3438) * C100 +
            (C139824 * C3524 - C182 * C3443) * C89 +
            (C139824 * C3521 - C182 * C3439) * C102 +
            (C139824 * C3525 - C182 * C3445) * C90 +
            (C139824 * C3522 - C182 * C3440) * C104 +
            (C139824 * C3526 - C182 * C3447) * C91 +
            (C139824 * C3523 - C182 * C3441) * C106 +
            (C139824 * C3527 - C182 * C3449) * C92) *
               C139835 * C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5813 * C183 - C5894 * C108 + C5814 * C896 - C5895 * C813 +
             C5815 * C2974 - C5896 * C2908) *
                C5816 +
            (C5813 * C189 - C5894 * C115 + C5814 * C901 - C5895 * C822 +
             C5815 * C2978 - C5896 * C2913) *
                C5811 +
            (C5898 - C5899 + C5900 - C5901 + C5902 - C5903) * C5818 +
            (C5904 - C5905 + C5906 - C5907 + C5908 - C5909) * C139736) *
               C139835 * C1565 +
           ((C5894 * C1570 - C5813 * C1653 + C5895 * C3438 - C5814 * C3520 +
             C5896 * C7754 - C5815 * C7863) *
                C5816 +
            (C5894 * C1579 - C5813 * C1658 + C5895 * C3443 - C5814 * C3524 +
             C5896 * C7759 - C5815 * C7866) *
                C5811 +
            (C7870 - C7871 + C7872 - C7873 + C7874 - C7875) * C5818 +
            (C7876 - C7877 + C7878 - C7879 + C7880 - C7881) * C139736) *
               C139835 * C140002) *
              C2322 +
          (((C5894 * C813 - C5813 * C896 + C5895 * C2908 - C5814 * C2974 +
             C5896 * C6627 - C5815 * C6792) *
                C5816 +
            (C5894 * C822 - C5813 * C901 + C5895 * C2913 - C5814 * C2978 +
             C5896 * C6632 - C5815 * C6795) *
                C5811 +
            (C6799 - C6800 + C6801 - C6802 + C6803 - C6804) * C5818 +
            (C6805 - C6806 + C6807 - C6808 + C6809 - C6810) * C139736) *
               C139835 * C1565 +
           ((C5813 * C3520 - C5894 * C3438 + C5814 * C7863 - C5895 * C7754 +
             C5815 * C10528 - C5896 * C10394) *
                C5816 +
            (C5813 * C3524 - C5894 * C3443 + C5814 * C7866 - C5895 * C7759 +
             C5815 * C10530 - C5896 * C10397) *
                C5811 +
            (C5813 * C3521 - C5894 * C3439 + C5814 * C7864 - C5895 * C7753 +
             C5815 * C10529 - C5896 * C10395) *
                C5818 +
            (C5813 * C3525 - C5894 * C3445 + C5814 * C7867 - C5895 * C7757 +
             C5815 * C10531 - C5896 * C10399) *
                C139736) *
               C139835 * C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eexz[41] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C139835 * C266 - C265 * C108) * C100 +
                      (C139835 * C272 - C265 * C115) * C89 +
                      (C279 - C280) * C102 + (C281 - C282) * C90 + C295 * C104 +
                      C296 * C91 + C297 * C106 + C298 * C92) *
                         C139824 * C1565 +
                     ((C265 * C1570 - C139835 * C1741) * C100 +
                      (C265 * C1579 - C139835 * C1746) * C89 +
                      (C1752 - C1753) * C102 + (C1754 - C1755) * C90 +
                      (C1756 - C1757) * C104 + (C1758 - C1759) * C91 +
                      (C1760 - C1761) * C106 + (C1762 - C1763) * C92) *
                         C139824 * C140002) *
                        C2322 +
                    (((C265 * C813 - C139835 * C984) * C100 +
                      (C265 * C822 - C139835 * C989) * C89 +
                      (C995 - C996) * C102 + (C997 - C998) * C90 +
                      (C999 - C1000) * C104 + (C1001 - C1002) * C91 +
                      (C1003 - C1004) * C106 + (C1005 - C1006) * C92) *
                         C139824 * C1565 +
                     ((C139835 * C3594 - C265 * C3438) * C100 +
                      (C139835 * C3598 - C265 * C3443) * C89 +
                      (C139835 * C3595 - C265 * C3439) * C102 +
                      (C139835 * C3599 - C265 * C3445) * C90 +
                      (C139835 * C3596 - C265 * C3440) * C104 +
                      (C139835 * C3600 - C265 * C3447) * C91 +
                      (C139835 * C3597 - C265 * C3441) * C106 +
                      (C139835 * C3601 - C265 * C3449) * C92) *
                         C139824 * C140002) *
                        C140000) *
                   C139758) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C139835 * C266 - C265 * C108) * C5816 +
                       (C139835 * C272 - C265 * C115) * C5811 +
                       (C279 - C280) * C5818 + (C281 - C282) * C139736) *
                          C5813 +
                      ((C6915 - C6916) * C5816 + (C6917 - C6918) * C5811 +
                       C6919 * C5818 + C6920 * C139736) *
                          C5814 +
                      C9802 * C5815) *
                         C1565 +
                     (((C265 * C1570 - C139835 * C1741) * C5816 +
                       (C265 * C1579 - C139835 * C1746) * C5811 +
                       (C1752 - C1753) * C5818 + (C1754 - C1755) * C139736) *
                          C5813 +
                      ((C10635 - C10636) * C5816 + (C10637 - C10638) * C5811 +
                       (C7986 - C7987) * C5818 + (C7988 - C7989) * C139736) *
                          C5814 +
                      ((C10639 - C10640) * C5816 + (C10641 - C10642) * C5811 +
                       (C7990 - C7991) * C5818 + (C7992 - C7993) * C139736) *
                          C5815) *
                         C140002) *
                        C2322 +
                    ((((C6916 - C6915) * C5816 + (C6918 - C6917) * C5811 +
                       C6927 * C5818 + C6928 * C139736) *
                          C5813 +
                      ((C6922 - C6921) * C5816 + (C6924 - C6923) * C5811 +
                       C6929 * C5818 + C6930 * C139736) *
                          C5814 +
                      ((C9794 - C9795) * C5816 + (C9796 - C9797) * C5811 +
                       (C6931 - C6932) * C5818 + (C6933 - C6934) * C139736) *
                          C5815) *
                         C1565 +
                     (((C10636 - C10635) * C5816 + (C10638 - C10637) * C5811 +
                       (C7987 - C7986) * C5818 + (C7989 - C7988) * C139736) *
                          C5813 +
                      ((C10640 - C10639) * C5816 + (C10642 - C10641) * C5811 +
                       (C7991 - C7990) * C5818 + (C7993 - C7992) * C139736) *
                          C5814 +
                      ((C139835 * C10630 - C265 * C10394) * C5816 +
                       (C139835 * C10632 - C265 * C10397) * C5811 +
                       (C139835 * C10631 - C265 * C10395) * C5818 +
                       (C139835 * C10633 - C265 * C10399) * C139736) *
                          C5815) *
                         C140002) *
                        C140000) *
                   C139758) /
                      (p * q * std::sqrt(p + q));
    d2eeyx[41] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C89 * C114 - C100 * C108 + C90 * C116 - C102 * C109 + C91 * C118 -
             C104 * C110 + C92 * C120 - C106 * C111) *
                C182 +
            (C89 * C354 - C100 * C348 + C90 * C355 - C102 * C349 + C91 * C356 -
             C104 * C350 + C92 * C357 - C106 * C351) *
                C139824) *
               C139835 * C1565 +
           ((C100 * C1570 - C89 * C1578 + C102 * C1569 - C90 * C1576 +
             C104 * C1568 - C91 * C1574 + C106 * C1567 - C92 * C1572) *
                C182 +
            (C100 * C1829 - C89 * C1834 + C102 * C1830 - C90 * C1835 +
             C104 * C1831 - C91 * C1836 + C106 * C1832 - C92 * C1837) *
                C139824) *
               C139835 * C140002) *
              C2322 +
          (((C100 * C813 - C89 * C821 + C102 * C812 - C90 * C819 + C104 * C811 -
             C91 * C817 + C106 * C810 - C92 * C815) *
                C182 +
            (C100 * C1072 - C89 * C1077 + C102 * C1073 - C90 * C1078 +
             C104 * C1074 - C91 * C1079 + C106 * C1075 - C92 * C1080) *
                C139824) *
               C139835 * C1565 +
           ((C89 * C3442 - C100 * C3438 + C90 * C3444 - C102 * C3439 +
             C91 * C3446 - C104 * C3440 + C92 * C3448 - C106 * C3441) *
                C182 +
            (C89 * C3672 - C100 * C3668 + C90 * C3673 - C102 * C3669 +
             C91 * C3674 - C104 * C3670 + C92 * C3675 - C106 * C3671) *
                C139824) *
               C139835 * C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5811 * C114 - C5816 * C108 + C139736 * C116 - C5818 * C109) *
                C5894 +
            (C5811 * C354 - C5816 * C348 + C139736 * C355 - C5818 * C349) *
                C5813 +
            (C7039 - C7040 + C7041 - C7042) * C5895 +
            (C7043 - C7044 + C7045 - C7046) * C5814 + C9893 * C5896 +
            C9894 * C5815) *
               C139835 * C1565 +
           ((C5816 * C1570 - C5811 * C1578 + C5818 * C1569 - C139736 * C1576) *
                C5894 +
            (C5816 * C1829 - C5811 * C1834 + C5818 * C1830 - C139736 * C1835) *
                C5813 +
            (C10745 - C10746 + C10747 - C10748) * C5895 +
            (C10749 - C10750 + C10751 - C10752) * C5814 +
            (C10753 - C10754 + C10755 - C10756) * C5896 +
            (C10757 - C10758 + C10759 - C10760) * C5815) *
               C139835 * C140002) *
              C2322 +
          (((C7040 - C7039 + C7042 - C7041) * C5894 +
            (C7044 - C7043 + C7046 - C7045) * C5813 +
            (C7048 - C7047 + C7050 - C7049) * C5895 +
            (C7052 - C7051 + C7054 - C7053) * C5814 +
            (C9885 - C9886 + C9887 - C9888) * C5896 +
            (C9889 - C9890 + C9891 - C9892) * C5815) *
               C139835 * C1565 +
           ((C10746 - C10745 + C10748 - C10747) * C5894 +
            (C10750 - C10749 + C10752 - C10751) * C5813 +
            (C10754 - C10753 + C10756 - C10755) * C5895 +
            (C10758 - C10757 + C10760 - C10759) * C5814 +
            (C5811 * C10396 - C5816 * C10394 + C139736 * C10398 -
             C5818 * C10395) *
                C5896 +
            (C5811 * C10742 - C5816 * C10740 + C139736 * C10743 -
             C5818 * C10741) *
                C5815) *
               C139835 * C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eeyy[41] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C182 * C183 - C410 * C108 - C182 * C348 + C139824 * C411) * C89 +
            C442 * C90 + C443 * C91 + C444 * C92) *
               C139835 * C1565 -
           (C1929 * C92 + C1930 * C91 + C1931 * C90 +
            (C182 * C1653 - C410 * C1570 - C182 * C1829 + C139824 * C1908) *
                C89) *
               C139835 * C140002) *
              C2322 +
          (((C182 * C3520 - C410 * C3438 - C182 * C3668 + C139824 * C3742) *
                C89 +
            (C182 * C3521 - C410 * C3439 - C182 * C3669 + C139824 * C3743) *
                C90 +
            (C182 * C3522 - C410 * C3440 - C182 * C3670 + C139824 * C3744) *
                C91 +
            (C182 * C3523 - C410 * C3441 - C182 * C3671 + C139824 * C3745) *
                C92) *
               C139835 * C140002 -
           (C1172 * C92 + C1173 * C91 + C1174 * C90 +
            (C182 * C896 - C410 * C813 - C182 * C1072 + C139824 * C1151) *
                C89) *
               C139835 * C1565) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5894 * C183 - C6151 * C108 - C5894 * C348 + C5813 * C411 +
             C5895 * C896 - C6152 * C813 - C5895 * C1072 + C5814 * C1151 +
             C5896 * C2974 - C6153 * C2908 - C5896 * C3090 + C5815 * C3148) *
                C5811 +
            (C6191 + C6192 + C6193) * C139736) *
               C139835 * C1565 -
           ((C8217 + C8218 + C8219) * C139736 +
            (C5896 * C7863 - C6153 * C7754 - C5896 * C8091 + C5815 * C8196 +
             C5895 * C3520 - C6152 * C3438 - C5895 * C3668 + C5814 * C3742 +
             C5894 * C1653 - C6151 * C1570 - C5894 * C1829 + C5813 * C1908) *
                C5811) *
               C139835 * C140002) *
              C2322 +
          (((C5894 * C3520 - C6151 * C3438 - C5894 * C3668 + C5813 * C3742 +
             C5895 * C7863 - C6152 * C7754 - C5895 * C8091 + C5814 * C8196 +
             C5896 * C10528 - C6153 * C10394 - C5896 * C10740 +
             C5815 * C10858) *
                C5811 +
            (C5894 * C3521 - C6151 * C3439 - C5894 * C3669 + C5813 * C3743 +
             C5895 * C7864 - C6152 * C7753 - C5895 * C8092 + C5814 * C8195 +
             C5896 * C10529 - C6153 * C10395 - C5896 * C10741 +
             C5815 * C10859) *
                C139736) *
               C139835 * C140002 -
           ((C7190 + C7191 + C7192) * C139736 +
            (C5896 * C6792 - C6153 * C6627 - C5896 * C7032 + C5815 * C7169 +
             C5895 * C2974 - C6152 * C2908 - C5895 * C3090 + C5814 * C3148 +
             C5894 * C896 - C6151 * C813 - C5894 * C1072 + C5813 * C1151) *
                C5811) *
               C139835 * C1565) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eeyz[41] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C139835 * C266 - C265 * C108) * C182 +
             (C139835 * C495 - C265 * C348) * C139824) *
                C89 +
            ((C279 - C280) * C182 + (C502 - C503) * C139824) * C90 +
            C516 * C91 + C517 * C92) *
               C1565 +
           (((C265 * C1570 - C139835 * C1741) * C182 +
             (C265 * C1829 - C139835 * C1997) * C139824) *
                C89 +
            ((C1752 - C1753) * C182 + (C2003 - C2004) * C139824) * C90 +
            ((C1756 - C1757) * C182 + (C2005 - C2006) * C139824) * C91 +
            ((C1760 - C1761) * C182 + (C2007 - C2008) * C139824) * C92) *
               C140002) *
              C2322 +
          ((((C265 * C813 - C139835 * C984) * C182 +
             (C265 * C1072 - C139835 * C1240) * C139824) *
                C89 +
            ((C995 - C996) * C182 + (C1246 - C1247) * C139824) * C90 +
            ((C999 - C1000) * C182 + (C1248 - C1249) * C139824) * C91 +
            ((C1003 - C1004) * C182 + (C1250 - C1251) * C139824) * C92) *
               C1565 +
           (((C139835 * C3594 - C265 * C3438) * C182 +
             (C139835 * C3812 - C265 * C3668) * C139824) *
                C89 +
            ((C139835 * C3595 - C265 * C3439) * C182 +
             (C139835 * C3813 - C265 * C3669) * C139824) *
                C90 +
            ((C139835 * C3596 - C265 * C3440) * C182 +
             (C139835 * C3814 - C265 * C3670) * C139824) *
                C91 +
            ((C139835 * C3597 - C265 * C3441) * C182 +
             (C139835 * C3815 - C265 * C3671) * C139824) *
                C92) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C139835 * C266 - C265 * C108) * C5894 +
             (C139835 * C495 - C265 * C348) * C5813 + (C6915 - C6916) * C5895 +
             (C7294 - C7295) * C5814 + C9790 * C5896 + C10047 * C5815) *
                C5811 +
            ((C279 - C280) * C5894 + (C502 - C503) * C5813 + C6919 * C5895 +
             C7298 * C5814 + C6925 * C5896 + C7299 * C5815) *
                C139736) *
               C1565 +
           (((C265 * C1570 - C139835 * C1741) * C5894 +
             (C265 * C1829 - C139835 * C1997) * C5813 +
             (C10635 - C10636) * C5895 + (C10961 - C10962) * C5814 +
             (C10639 - C10640) * C5896 + (C10963 - C10964) * C5815) *
                C5811 +
            ((C1752 - C1753) * C5894 + (C2003 - C2004) * C5813 +
             (C7986 - C7987) * C5895 + (C8321 - C8322) * C5814 +
             (C7990 - C7991) * C5896 + (C8323 - C8324) * C5815) *
                C139736) *
               C140002) *
              C2322 +
          ((((C6916 - C6915) * C5894 + (C7295 - C7294) * C5813 +
             (C6922 - C6921) * C5895 + (C7297 - C7296) * C5814 +
             (C9794 - C9795) * C5896 + (C10048 - C10049) * C5815) *
                C5811 +
            (C6927 * C5894 + C7300 * C5813 + C6929 * C5895 + C7301 * C5814 +
             (C6931 - C6932) * C5896 + (C7302 - C7303) * C5815) *
                C139736) *
               C1565 +
           (((C10636 - C10635) * C5894 + (C10962 - C10961) * C5813 +
             (C10640 - C10639) * C5895 + (C10964 - C10963) * C5814 +
             (C139835 * C10630 - C265 * C10394) * C5896 +
             (C139835 * C10958 - C265 * C10740) * C5815) *
                C5811 +
            ((C7987 - C7986) * C5894 + (C8322 - C8321) * C5813 +
             (C7991 - C7990) * C5895 + (C8324 - C8323) * C5814 +
             (C139835 * C10631 - C265 * C10395) * C5896 +
             (C139835 * C10959 - C265 * C10741) * C5815) *
                C139736) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eezx[41] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C89 * C114 - C100 * C108 + C90 * C116 - C102 * C109 + C91 * C118 -
             C104 * C110 + C92 * C120 - C106 * C111) *
                C265 +
            (C89 * C573 - C100 * C567 + C90 * C574 - C102 * C568 + C91 * C575 -
             C104 * C569 + C92 * C576 - C106 * C570) *
                C139835) *
               C139824 * C1565 +
           ((C100 * C1570 - C89 * C1578 + C102 * C1569 - C90 * C1576 +
             C104 * C1568 - C91 * C1574 + C106 * C1567 - C92 * C1572) *
                C265 +
            (C100 * C2074 - C89 * C2079 + C102 * C2075 - C90 * C2080 +
             C104 * C2076 - C91 * C2081 + C106 * C2077 - C92 * C2082) *
                C139835) *
               C139824 * C140002) *
              C2322 +
          (((C100 * C813 - C89 * C821 + C102 * C812 - C90 * C819 + C104 * C811 -
             C91 * C817 + C106 * C810 - C92 * C815) *
                C265 +
            (C100 * C1317 - C89 * C1322 + C102 * C1318 - C90 * C1323 +
             C104 * C1319 - C91 * C1324 + C106 * C1320 - C92 * C1325) *
                C139835) *
               C139824 * C1565 +
           ((C89 * C3442 - C100 * C3438 + C90 * C3444 - C102 * C3439 +
             C91 * C3446 - C104 * C3440 + C92 * C3448 - C106 * C3441) *
                C265 +
            (C89 * C3886 - C100 * C3882 + C90 * C3887 - C102 * C3883 +
             C91 * C3888 - C104 * C3884 + C92 * C3889 - C106 * C3885) *
                C139835) *
               C139824 * C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5811 * C114 - C5816 * C108 + C139736 * C116 - C5818 * C109) *
                 C265 +
             (C5811 * C573 - C5816 * C567 + C139736 * C574 - C5818 * C568) *
                 C139835) *
                C5813 +
            ((C7039 - C7040 + C7041 - C7042) * C265 +
             (C7408 - C7409 + C7410 - C7411) * C139835) *
                C5814 +
            C10137 * C5815) *
               C1565 +
           (((C5816 * C1570 - C5811 * C1578 + C5818 * C1569 - C139736 * C1576) *
                 C265 +
             (C5816 * C2074 - C5811 * C2079 + C5818 * C2075 - C139736 * C2080) *
                 C139835) *
                C5813 +
            ((C10745 - C10746 + C10747 - C10748) * C265 +
             (C11067 - C11068 + C11069 - C11070) * C139835) *
                C5814 +
            ((C10753 - C10754 + C10755 - C10756) * C265 +
             (C11071 - C11072 + C11073 - C11074) * C139835) *
                C5815) *
               C140002) *
              C2322 +
          ((((C7040 - C7039 + C7042 - C7041) * C265 +
             (C7409 - C7408 + C7411 - C7410) * C139835) *
                C5813 +
            ((C7048 - C7047 + C7050 - C7049) * C265 +
             (C7413 - C7412 + C7415 - C7414) * C139835) *
                C5814 +
            ((C9885 - C9886 + C9887 - C9888) * C265 +
             (C10131 - C10132 + C10133 - C10134) * C139835) *
                C5815) *
               C1565 +
           (((C10746 - C10745 + C10748 - C10747) * C265 +
             (C11068 - C11067 + C11070 - C11069) * C139835) *
                C5813 +
            ((C10754 - C10753 + C10756 - C10755) * C265 +
             (C11072 - C11071 + C11074 - C11073) * C139835) *
                C5814 +
            ((C5811 * C10396 - C5816 * C10394 + C139736 * C10398 -
              C5818 * C10395) *
                 C265 +
             (C5811 * C11064 - C5816 * C11062 + C139736 * C11065 -
              C5818 * C11063) *
                 C139835) *
                C5815) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eezy[41] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C139824 * C183 - C182 * C108) * C265 +
             (C139824 * C629 - C182 * C567) * C139835) *
                C89 +
            ((C196 - C197) * C265 + (C636 - C637) * C139835) * C90 +
            C650 * C91 + C651 * C92) *
               C1565 +
           (((C182 * C1570 - C139824 * C1653) * C265 +
             (C182 * C2074 - C139824 * C2150) * C139835) *
                C89 +
            ((C1664 - C1665) * C265 + (C2156 - C2157) * C139835) * C90 +
            ((C1668 - C1669) * C265 + (C2158 - C2159) * C139835) * C91 +
            ((C1672 - C1673) * C265 + (C2160 - C2161) * C139835) * C92) *
               C140002) *
              C2322 +
          ((((C182 * C813 - C139824 * C896) * C265 +
             (C182 * C1317 - C139824 * C1393) * C139835) *
                C89 +
            ((C907 - C908) * C265 + (C1399 - C1400) * C139835) * C90 +
            ((C911 - C912) * C265 + (C1401 - C1402) * C139835) * C91 +
            ((C915 - C916) * C265 + (C1403 - C1404) * C139835) * C92) *
               C1565 +
           (((C139824 * C3520 - C182 * C3438) * C265 +
             (C139824 * C3956 - C182 * C3882) * C139835) *
                C89 +
            ((C139824 * C3521 - C182 * C3439) * C265 +
             (C139824 * C3957 - C182 * C3883) * C139835) *
                C90 +
            ((C139824 * C3522 - C182 * C3440) * C265 +
             (C139824 * C3958 - C182 * C3884) * C139835) *
                C91 +
            ((C139824 * C3523 - C182 * C3441) * C265 +
             (C139824 * C3959 - C182 * C3885) * C139835) *
                C92) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5813 * C183 - C5894 * C108 + C5814 * C896 - C5895 * C813 +
              C5815 * C2974 - C5896 * C2908) *
                 C265 +
             (C5813 * C629 - C5894 * C567 + C5814 * C1393 - C5895 * C1317 +
              C5815 * C3314 - C5896 * C3256) *
                 C139835) *
                C5811 +
            ((C5898 - C5899 + C5900 - C5901 + C5902 - C5903) * C265 +
             (C6423 - C6424 + C6425 - C6426 + C6427 - C6428) * C139835) *
                C139736) *
               C1565 +
           (((C5894 * C1570 - C5813 * C1653 + C5895 * C3438 - C5814 * C3520 +
              C5896 * C7754 - C5815 * C7863) *
                 C265 +
             (C5894 * C2074 - C5813 * C2150 + C5895 * C3882 - C5814 * C3956 +
              C5896 * C8422 - C5815 * C8526) *
                 C139835) *
                C5811 +
            ((C7870 - C7871 + C7872 - C7873 + C7874 - C7875) * C265 +
             (C8530 - C8531 + C8532 - C8533 + C8534 - C8535) * C139835) *
                C139736) *
               C140002) *
              C2322 +
          ((((C5894 * C813 - C5813 * C896 + C5895 * C2908 - C5814 * C2974 +
              C5896 * C6627 - C5815 * C6792) *
                 C265 +
             (C5894 * C1317 - C5813 * C1393 + C5895 * C3256 - C5814 * C3314 +
              C5896 * C7401 - C5815 * C7521) *
                 C139835) *
                C5811 +
            ((C6799 - C6800 + C6801 - C6802 + C6803 - C6804) * C265 +
             (C7525 - C7526 + C7527 - C7528 + C7529 - C7530) * C139835) *
                C139736) *
               C1565 +
           (((C5813 * C3520 - C5894 * C3438 + C5814 * C7863 - C5895 * C7754 +
              C5815 * C10528 - C5896 * C10394) *
                 C265 +
             (C5813 * C3956 - C5894 * C3882 + C5814 * C8526 - C5895 * C8422 +
              C5815 * C11172 - C5896 * C11062) *
                 C139835) *
                C5811 +
            ((C5813 * C3521 - C5894 * C3439 + C5814 * C7864 - C5895 * C7753 +
              C5815 * C10529 - C5896 * C10395) *
                 C265 +
             (C5813 * C3957 - C5894 * C3883 + C5814 * C8527 - C5895 * C8423 +
              C5815 * C11173 - C5896 * C11063) *
                 C139835) *
                C139736) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eezz[41] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C265 * C266 - C701 * C108 - C265 * C567 + C139835 * C702) *
                C139824 * C89 +
            C737 * C90 + C738 * C91 + C739 * C92) *
               C1565 -
           (C2254 * C92 + C2255 * C91 + C2256 * C90 +
            (C265 * C1741 - C701 * C1570 - C265 * C2074 + C139835 * C2230) *
                C139824 * C89) *
               C140002) *
              C2322 +
          (((C265 * C3594 - C701 * C3438 - C265 * C3882 + C139835 * C4026) *
                C139824 * C89 +
            (C265 * C3595 - C701 * C3439 - C265 * C3883 + C139835 * C4027) *
                C139824 * C90 +
            (C265 * C3596 - C701 * C3440 - C265 * C3884 + C139835 * C4028) *
                C139824 * C91 +
            (C265 * C3597 - C701 * C3441 - C265 * C3885 + C139835 * C4029) *
                C139824 * C92) *
               C140002 -
           (C1497 * C92 + C1498 * C91 + C1499 * C90 +
            (C265 * C984 - C701 * C813 - C265 * C1317 + C139835 * C1473) *
                C139824 * C89) *
               C1565) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C265 * C266 - C701 * C108 - C265 * C567 + C139835 * C702) *
                 C5813 +
             C7652 * C5814 + C7653 * C5815) *
                C5811 +
            (C6509 + C6510 + C6527) * C139736) *
               C1565 -
           ((C8652 + C8653 + C8645) * C139736 +
            (C11287 * C5815 + C11288 * C5814 +
             (C265 * C1741 - C701 * C1570 - C265 * C2074 + C139835 * C2230) *
                 C5813) *
                C5811) *
               C140002) *
              C2322 +
          (((C11288 * C5813 + C11287 * C5814 +
             (C265 * C10630 - C701 * C10394 - C265 * C11062 +
              C139835 * C11272) *
                 C5815) *
                C5811 +
            (C8651 * C5813 + C8650 * C5814 +
             (C265 * C10631 - C701 * C10395 - C265 * C11063 +
              C139835 * C11273) *
                 C5815) *
                C139736) *
               C140002 -
           ((C7655 + C7644 + C7645) * C139736 +
            (C10296 * C5815 + C7653 * C5814 + C7652 * C5813) * C5811) *
               C1565) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eexx[42] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C114 - C101 * C108 - C100 * C115 + C89 * C126 + C102 * C116 -
            C103 * C109 - C102 * C117 + C90 * C127 + C104 * C118 - C105 * C110 -
            C104 * C119 + C91 * C128 + C106 * C120 - C107 * C111 - C106 * C121 +
            C92 * C129) *
               C139835 * C139824 * C4096 -
           (C106 * C1572 - C107 * C1567 - C106 * C1573 + C92 * C1582 +
            C104 * C1574 - C105 * C1568 - C104 * C1575 + C91 * C1583 +
            C102 * C1576 - C103 * C1569 - C102 * C1577 + C90 * C1584 +
            C100 * C1578 - C101 * C1570 - C100 * C1579 + C89 * C1585) *
               C139835 * C139824 * C140002) *
              C139792 * C2324 +
          ((C100 * C1576 - C101 * C1569 - C100 * C1577 + C89 * C1584 +
            C102 * C1574 - C103 * C1568 - C102 * C1575 + C90 * C1583 +
            C104 * C1572 - C105 * C1567 - C104 * C1573 + C91 * C1582 +
            C106 * C1580 - C107 * C1571 - C106 * C1581 + C92 * C1586) *
               C139835 * C139824 * C140002 -
           (C106 * C122 - C107 * C112 - C106 * C123 + C92 * C130 + C104 * C120 -
            C105 * C111 - C104 * C121 + C91 * C129 + C102 * C118 - C103 * C110 -
            C102 * C119 + C90 * C128 + C100 * C116 - C101 * C109 - C100 * C117 +
            C89 * C127) *
               C139835 * C139824 * C4096) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5816 * C114 - C5817 * C108 - C5816 * C115 + C5811 * C126 +
             C5818 * C116 - C5819 * C109 - C5818 * C117 + C139736 * C127) *
                C139835 * C5813 +
            (C6687 + C6688) * C139835 * C5814 + C9627 * C5815) *
               C4096 -
           ((C10427 + C10428) * C139835 * C5815 +
            (C10429 + C10430) * C139835 * C5814 +
            (C5818 * C1576 - C5819 * C1569 - C5818 * C1577 + C139736 * C1584 +
             C5816 * C1578 - C5817 * C1570 - C5816 * C1579 + C5811 * C1585) *
                C139835 * C5813) *
               C140002) *
              C139792 * C2324 +
          (((C5816 * C1576 - C5817 * C1569 - C5816 * C1577 + C5811 * C1584 +
             C5818 * C1574 - C5819 * C1568 - C5818 * C1575 + C139736 * C1583) *
                C139835 * C5813 +
            (C5816 * C3444 - C5817 * C3439 - C5816 * C3445 + C5811 * C3451 +
             C5818 * C3446 - C5819 * C3440 - C5818 * C3447 + C139736 * C3452) *
                C139835 * C5814 +
            (C5816 * C7756 - C5817 * C7753 - C5816 * C7757 + C5811 * C7762 +
             C5818 * C7760 - C5819 * C7755 - C5818 * C7761 + C139736 * C7764) *
                C139835 * C5815) *
               C140002 -
           ((C6694 + C6693) * C139835 * C5815 +
            (C6692 + C6691) * C139835 * C5814 +
            (C5818 * C118 - C5819 * C110 - C5818 * C119 + C139736 * C128 +
             C5816 * C116 - C5817 * C109 - C5816 * C117 + C5811 * C127) *
                C139835 * C5813) *
               C4096) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eexy[42] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C139824 * C183 - C182 * C108) * C100 +
            (C139824 * C189 - C182 * C115) * C89 + (C196 - C197) * C102 +
            (C198 - C199) * C90 + C212 * C104 + C213 * C91 + C214 * C106 +
            C215 * C92) *
               C139835 * C4096 +
           ((C182 * C1570 - C139824 * C1653) * C100 +
            (C182 * C1579 - C139824 * C1658) * C89 + (C1664 - C1665) * C102 +
            (C1666 - C1667) * C90 + (C1668 - C1669) * C104 +
            (C1670 - C1671) * C91 + (C1672 - C1673) * C106 +
            (C1674 - C1675) * C92) *
               C139835 * C140002) *
              C139792 * C2324 +
          (((C197 - C196) * C100 + (C199 - C198) * C89 + (C201 - C200) * C102 +
            (C203 - C202) * C90 + (C205 - C204) * C104 + (C207 - C206) * C91 +
            (C208 - C209) * C106 + (C210 - C211) * C92) *
               C139835 * C4096 +
           ((C1665 - C1664) * C100 + (C1667 - C1666) * C89 +
            (C1669 - C1668) * C102 + (C1671 - C1670) * C90 +
            (C1673 - C1672) * C104 + (C1675 - C1674) * C91 +
            (C139824 * C1657 - C182 * C1571) * C106 +
            (C139824 * C1662 - C182 * C1581) * C92) *
               C139835 * C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5813 * C183 - C5894 * C108 + C5814 * C896 - C5895 * C813 +
             C5815 * C2974 - C5896 * C2908) *
                C5816 +
            (C5813 * C189 - C5894 * C115 + C5814 * C901 - C5895 * C822 +
             C5815 * C2978 - C5896 * C2913) *
                C5811 +
            (C5898 - C5899 + C5900 - C5901 + C5902 - C5903) * C5818 +
            (C5904 - C5905 + C5906 - C5907 + C5908 - C5909) * C139736) *
               C139835 * C4096 +
           ((C5894 * C1570 - C5813 * C1653 + C5895 * C3438 - C5814 * C3520 +
             C5896 * C7754 - C5815 * C7863) *
                C5816 +
            (C5894 * C1579 - C5813 * C1658 + C5895 * C3443 - C5814 * C3524 +
             C5896 * C7759 - C5815 * C7866) *
                C5811 +
            (C7870 - C7871 + C7872 - C7873 + C7874 - C7875) * C5818 +
            (C7876 - C7877 + C7878 - C7879 + C7880 - C7881) * C139736) *
               C139835 * C140002) *
              C139792 * C2324 +
          (((C5899 - C5898 + C5901 - C5900 + C5903 - C5902) * C5816 +
            (C5905 - C5904 + C5907 - C5906 + C5909 - C5908) * C5811 +
            (C5910 - C5911 + C5912 - C5913 + C5914 - C5915) * C5818 +
            (C5916 - C5917 + C5918 - C5919 + C5920 - C5921) * C139736) *
               C139835 * C4096 +
           ((C7871 - C7870 + C7873 - C7872 + C7875 - C7874) * C5816 +
            (C7877 - C7876 + C7879 - C7878 + C7881 - C7880) * C5811 +
            (C5813 * C1655 - C5894 * C1568 + C5814 * C3522 - C5895 * C3440 +
             C5815 * C7865 - C5896 * C7755) *
                C5818 +
            (C5813 * C1660 - C5894 * C1575 + C5814 * C3526 - C5895 * C3447 +
             C5815 * C7868 - C5896 * C7761) *
                C139736) *
               C139835 * C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eexz[42] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C139835 * C266 - C265 * C108) * C100 +
            (C139835 * C272 - C265 * C115) * C89 + (C279 - C280) * C102 +
            (C281 - C282) * C90 + C295 * C104 + C296 * C91 + C297 * C106 +
            C298 * C92) *
               C139824 * C4096 +
           ((C265 * C1570 - C139835 * C1741) * C100 +
            (C265 * C1579 - C139835 * C1746) * C89 + (C1752 - C1753) * C102 +
            (C1754 - C1755) * C90 + (C1756 - C1757) * C104 +
            (C1758 - C1759) * C91 + (C1760 - C1761) * C106 +
            (C1762 - C1763) * C92) *
               C139824 * C140002) *
              C139792 * C2324 +
          (((C280 - C279) * C100 + (C282 - C281) * C89 + (C284 - C283) * C102 +
            (C286 - C285) * C90 + (C288 - C287) * C104 + (C290 - C289) * C91 +
            (C291 - C292) * C106 + (C293 - C294) * C92) *
               C139824 * C4096 +
           ((C1753 - C1752) * C100 + (C1755 - C1754) * C89 +
            (C1757 - C1756) * C102 + (C1759 - C1758) * C90 +
            (C1761 - C1760) * C104 + (C1763 - C1762) * C91 +
            (C139835 * C1745 - C265 * C1571) * C106 +
            (C139835 * C1750 - C265 * C1581) * C92) *
               C139824 * C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C139835 * C266 - C265 * C108) * C5816 +
             (C139835 * C272 - C265 * C115) * C5811 + (C279 - C280) * C5818 +
             (C281 - C282) * C139736) *
                C5813 +
            ((C6915 - C6916) * C5816 + (C6917 - C6918) * C5811 + C6919 * C5818 +
             C6920 * C139736) *
                C5814 +
            C9802 * C5815) *
               C4096 +
           (((C265 * C1570 - C139835 * C1741) * C5816 +
             (C265 * C1579 - C139835 * C1746) * C5811 +
             (C1752 - C1753) * C5818 + (C1754 - C1755) * C139736) *
                C5813 +
            ((C10635 - C10636) * C5816 + (C10637 - C10638) * C5811 +
             (C7986 - C7987) * C5818 + (C7988 - C7989) * C139736) *
                C5814 +
            ((C10639 - C10640) * C5816 + (C10641 - C10642) * C5811 +
             (C7990 - C7991) * C5818 + (C7992 - C7993) * C139736) *
                C5815) *
               C140002) *
              C139792 * C2324 +
          ((((C280 - C279) * C5816 + (C282 - C281) * C5811 +
             (C284 - C283) * C5818 + (C286 - C285) * C139736) *
                C5813 +
            (C6927 * C5816 + C6928 * C5811 + (C999 - C1000) * C5818 +
             (C1001 - C1002) * C139736) *
                C5814 +
            (C6929 * C5816 + C6930 * C5811 + (C6000 - C6001) * C5818 +
             (C6002 - C6003) * C139736) *
                C5815) *
               C4096 +
           (((C1753 - C1752) * C5816 + (C1755 - C1754) * C5811 +
             (C1757 - C1756) * C5818 + (C1759 - C1758) * C139736) *
                C5813 +
            ((C7987 - C7986) * C5816 + (C7989 - C7988) * C5811 +
             (C139835 * C3596 - C265 * C3440) * C5818 +
             (C139835 * C3600 - C265 * C3447) * C139736) *
                C5814 +
            ((C7991 - C7990) * C5816 + (C7993 - C7992) * C5811 +
             (C139835 * C7981 - C265 * C7755) * C5818 +
             (C139835 * C7984 - C265 * C7761) * C139736) *
                C5815) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[42] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C89 * C114 - C100 * C108 + C90 * C116 - C102 * C109 + C91 * C118 -
             C104 * C110 + C92 * C120 - C106 * C111) *
                C182 +
            (C89 * C354 - C100 * C348 + C90 * C355 - C102 * C349 + C91 * C356 -
             C104 * C350 + C92 * C357 - C106 * C351) *
                C139824) *
               C139835 * C4096 +
           ((C100 * C1570 - C89 * C1578 + C102 * C1569 - C90 * C1576 +
             C104 * C1568 - C91 * C1574 + C106 * C1567 - C92 * C1572) *
                C182 +
            (C100 * C1829 - C89 * C1834 + C102 * C1830 - C90 * C1835 +
             C104 * C1831 - C91 * C1836 + C106 * C1832 - C92 * C1837) *
                C139824) *
               C139835 * C140002) *
              C139792 * C2324 +
          (((C100 * C109 - C89 * C116 + C102 * C110 - C90 * C118 + C104 * C111 -
             C91 * C120 + C106 * C112 - C92 * C122) *
                C182 +
            (C100 * C349 - C89 * C355 + C102 * C350 - C90 * C356 + C104 * C351 -
             C91 * C357 + C106 * C352 - C92 * C358) *
                C139824) *
               C139835 * C4096 +
           ((C89 * C1576 - C100 * C1569 + C90 * C1574 - C102 * C1568 +
             C91 * C1572 - C104 * C1567 + C92 * C1580 - C106 * C1571) *
                C182 +
            (C89 * C1835 - C100 * C1830 + C90 * C1836 - C102 * C1831 +
             C91 * C1837 - C104 * C1832 + C92 * C1838 - C106 * C1833) *
                C139824) *
               C139835 * C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5811 * C114 - C5816 * C108 + C139736 * C116 - C5818 * C109) *
                C5894 +
            (C5811 * C354 - C5816 * C348 + C139736 * C355 - C5818 * C349) *
                C5813 +
            (C7039 - C7040 + C7041 - C7042) * C5895 +
            (C7043 - C7044 + C7045 - C7046) * C5814 + C9893 * C5896 +
            C9894 * C5815) *
               C139835 * C4096 +
           ((C5816 * C1570 - C5811 * C1578 + C5818 * C1569 - C139736 * C1576) *
                C5894 +
            (C5816 * C1829 - C5811 * C1834 + C5818 * C1830 - C139736 * C1835) *
                C5813 +
            (C10745 - C10746 + C10747 - C10748) * C5895 +
            (C10749 - C10750 + C10751 - C10752) * C5814 +
            (C10753 - C10754 + C10755 - C10756) * C5896 +
            (C10757 - C10758 + C10759 - C10760) * C5815) *
               C139835 * C140002) *
              C139792 * C2324 +
          (((C5816 * C109 - C5811 * C116 + C5818 * C110 - C139736 * C118) *
                C5894 +
            (C5816 * C349 - C5811 * C355 + C5818 * C350 - C139736 * C356) *
                C5813 +
            (C7055 - C7056 + C7057 - C7058) * C5895 +
            (C7059 - C7060 + C7061 - C7062) * C5814 +
            (C7063 - C7064 + C7065 - C7066) * C5896 +
            (C7067 - C7068 + C7069 - C7070) * C5815) *
               C139835 * C4096 +
           ((C5811 * C1576 - C5816 * C1569 + C139736 * C1574 - C5818 * C1568) *
                C5894 +
            (C5811 * C1835 - C5816 * C1830 + C139736 * C1836 - C5818 * C1831) *
                C5813 +
            (C5811 * C3444 - C5816 * C3439 + C139736 * C3446 - C5818 * C3440) *
                C5895 +
            (C5811 * C3673 - C5816 * C3669 + C139736 * C3674 - C5818 * C3670) *
                C5814 +
            (C5811 * C7756 - C5816 * C7753 + C139736 * C7760 - C5818 * C7755) *
                C5896 +
            (C5811 * C8095 - C5816 * C8092 + C139736 * C8096 - C5818 * C8093) *
                C5815) *
               C139835 * C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[42] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C182 * C183 - C410 * C108 - C182 * C348 + C139824 * C411) * C89 +
            C442 * C90 + C443 * C91 + C444 * C92) *
               C139835 * C4096 -
           (C1929 * C92 + C1930 * C91 + C1931 * C90 +
            (C182 * C1653 - C410 * C1570 - C182 * C1829 + C139824 * C1908) *
                C89) *
               C139835 * C140002) *
              C139792 * C2324 +
          ((C1931 * C89 + C1930 * C90 + C1929 * C91 +
            (C182 * C1657 - C410 * C1571 - C182 * C1833 + C139824 * C1909) *
                C92) *
               C139835 * C140002 -
           (C445 * C92 + C444 * C91 + C443 * C90 + C442 * C89) * C139835 *
               C4096) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5894 * C183 - C6151 * C108 - C5894 * C348 + C5813 * C411 +
             C5895 * C896 - C6152 * C813 - C5895 * C1072 + C5814 * C1151 +
             C5896 * C2974 - C6153 * C2908 - C5896 * C3090 + C5815 * C3148) *
                C5811 +
            (C6191 + C6192 + C6193) * C139736) *
               C139835 * C4096 -
           ((C8217 + C8218 + C8219) * C139736 +
            (C5896 * C7863 - C6153 * C7754 - C5896 * C8091 + C5815 * C8196 +
             C5895 * C3520 - C6152 * C3438 - C5895 * C3668 + C5814 * C3742 +
             C5894 * C1653 - C6151 * C1570 - C5894 * C1829 + C5813 * C1908) *
                C5811) *
               C139835 * C140002) *
              C139792 * C2324 +
          (((C8219 + C8218 + C8217) * C5811 +
            (C5894 * C1655 - C6151 * C1568 - C5894 * C1831 + C5813 * C1906 +
             C5895 * C3522 - C6152 * C3440 - C5895 * C3670 + C5814 * C3744 +
             C5896 * C7865 - C6153 * C7755 - C5896 * C8093 + C5815 * C8197) *
                C139736) *
               C139835 * C140002 -
           ((C6194 + C6195 + C6196) * C139736 +
            (C6193 + C6192 + C6191) * C5811) *
               C139835 * C4096) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[42] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C139835 * C266 - C265 * C108) * C182 +
             (C139835 * C495 - C265 * C348) * C139824) *
                C89 +
            ((C279 - C280) * C182 + (C502 - C503) * C139824) * C90 +
            C516 * C91 + C517 * C92) *
               C4096 +
           (((C265 * C1570 - C139835 * C1741) * C182 +
             (C265 * C1829 - C139835 * C1997) * C139824) *
                C89 +
            ((C1752 - C1753) * C182 + (C2003 - C2004) * C139824) * C90 +
            ((C1756 - C1757) * C182 + (C2005 - C2006) * C139824) * C91 +
            ((C1760 - C1761) * C182 + (C2007 - C2008) * C139824) * C92) *
               C140002) *
              C139792 * C2324 +
          ((((C280 - C279) * C182 + (C503 - C502) * C139824) * C89 +
            ((C284 - C283) * C182 + (C506 - C505) * C139824) * C90 +
            ((C288 - C287) * C182 + (C509 - C508) * C139824) * C91 +
            ((C291 - C292) * C182 + (C510 - C511) * C139824) * C92) *
               C4096 +
           (((C1753 - C1752) * C182 + (C2004 - C2003) * C139824) * C89 +
            ((C1757 - C1756) * C182 + (C2006 - C2005) * C139824) * C90 +
            ((C1761 - C1760) * C182 + (C2008 - C2007) * C139824) * C91 +
            ((C139835 * C1745 - C265 * C1571) * C182 +
             (C139835 * C2001 - C265 * C1833) * C139824) *
                C92) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C139835 * C266 - C265 * C108) * C5894 +
             (C139835 * C495 - C265 * C348) * C5813 + (C6915 - C6916) * C5895 +
             (C7294 - C7295) * C5814 + C9790 * C5896 + C10047 * C5815) *
                C5811 +
            ((C279 - C280) * C5894 + (C502 - C503) * C5813 + C6919 * C5895 +
             C7298 * C5814 + C6925 * C5896 + C7299 * C5815) *
                C139736) *
               C4096 +
           (((C265 * C1570 - C139835 * C1741) * C5894 +
             (C265 * C1829 - C139835 * C1997) * C5813 +
             (C10635 - C10636) * C5895 + (C10961 - C10962) * C5814 +
             (C10639 - C10640) * C5896 + (C10963 - C10964) * C5815) *
                C5811 +
            ((C1752 - C1753) * C5894 + (C2003 - C2004) * C5813 +
             (C7986 - C7987) * C5895 + (C8321 - C8322) * C5814 +
             (C7990 - C7991) * C5896 + (C8323 - C8324) * C5815) *
                C139736) *
               C140002) *
              C139792 * C2324 +
          ((((C280 - C279) * C5894 + (C503 - C502) * C5813 + C6927 * C5895 +
             C7300 * C5814 + C6929 * C5896 + C7301 * C5815) *
                C5811 +
            ((C284 - C283) * C5894 + (C506 - C505) * C5813 +
             (C999 - C1000) * C5895 + (C1248 - C1249) * C5814 +
             (C6000 - C6001) * C5896 + (C6273 - C6274) * C5815) *
                C139736) *
               C4096 +
           (((C1753 - C1752) * C5894 + (C2004 - C2003) * C5813 +
             (C7987 - C7986) * C5895 + (C8322 - C8321) * C5814 +
             (C7991 - C7990) * C5896 + (C8324 - C8323) * C5815) *
                C5811 +
            ((C1757 - C1756) * C5894 + (C2006 - C2005) * C5813 +
             (C139835 * C3596 - C265 * C3440) * C5895 +
             (C139835 * C3814 - C265 * C3670) * C5814 +
             (C139835 * C7981 - C265 * C7755) * C5896 +
             (C139835 * C8319 - C265 * C8093) * C5815) *
                C139736) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eezx[42] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C89 * C114 - C100 * C108 + C90 * C116 - C102 * C109 + C91 * C118 -
             C104 * C110 + C92 * C120 - C106 * C111) *
                C265 +
            (C89 * C573 - C100 * C567 + C90 * C574 - C102 * C568 + C91 * C575 -
             C104 * C569 + C92 * C576 - C106 * C570) *
                C139835) *
               C139824 * C4096 +
           ((C100 * C1570 - C89 * C1578 + C102 * C1569 - C90 * C1576 +
             C104 * C1568 - C91 * C1574 + C106 * C1567 - C92 * C1572) *
                C265 +
            (C100 * C2074 - C89 * C2079 + C102 * C2075 - C90 * C2080 +
             C104 * C2076 - C91 * C2081 + C106 * C2077 - C92 * C2082) *
                C139835) *
               C139824 * C140002) *
              C139792 * C2324 +
          (((C100 * C109 - C89 * C116 + C102 * C110 - C90 * C118 + C104 * C111 -
             C91 * C120 + C106 * C112 - C92 * C122) *
                C265 +
            (C100 * C568 - C89 * C574 + C102 * C569 - C90 * C575 + C104 * C570 -
             C91 * C576 + C106 * C571 - C92 * C577) *
                C139835) *
               C139824 * C4096 +
           ((C89 * C1576 - C100 * C1569 + C90 * C1574 - C102 * C1568 +
             C91 * C1572 - C104 * C1567 + C92 * C1580 - C106 * C1571) *
                C265 +
            (C89 * C2080 - C100 * C2075 + C90 * C2081 - C102 * C2076 +
             C91 * C2082 - C104 * C2077 + C92 * C2083 - C106 * C2078) *
                C139835) *
               C139824 * C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5811 * C114 - C5816 * C108 + C139736 * C116 - C5818 * C109) *
                 C265 +
             (C5811 * C573 - C5816 * C567 + C139736 * C574 - C5818 * C568) *
                 C139835) *
                C5813 +
            ((C7039 - C7040 + C7041 - C7042) * C265 +
             (C7408 - C7409 + C7410 - C7411) * C139835) *
                C5814 +
            C10137 * C5815) *
               C4096 +
           (((C5816 * C1570 - C5811 * C1578 + C5818 * C1569 - C139736 * C1576) *
                 C265 +
             (C5816 * C2074 - C5811 * C2079 + C5818 * C2075 - C139736 * C2080) *
                 C139835) *
                C5813 +
            ((C10745 - C10746 + C10747 - C10748) * C265 +
             (C11067 - C11068 + C11069 - C11070) * C139835) *
                C5814 +
            ((C10753 - C10754 + C10755 - C10756) * C265 +
             (C11071 - C11072 + C11073 - C11074) * C139835) *
                C5815) *
               C140002) *
              C139792 * C2324 +
          ((((C5816 * C109 - C5811 * C116 + C5818 * C110 - C139736 * C118) *
                 C265 +
             (C5816 * C568 - C5811 * C574 + C5818 * C569 - C139736 * C575) *
                 C139835) *
                C5813 +
            ((C7055 - C7056 + C7057 - C7058) * C265 +
             (C7416 - C7417 + C7418 - C7419) * C139835) *
                C5814 +
            ((C7063 - C7064 + C7065 - C7066) * C265 +
             (C7420 - C7421 + C7422 - C7423) * C139835) *
                C5815) *
               C4096 +
           (((C5811 * C1576 - C5816 * C1569 + C139736 * C1574 - C5818 * C1568) *
                 C265 +
             (C5811 * C2080 - C5816 * C2075 + C139736 * C2081 - C5818 * C2076) *
                 C139835) *
                C5813 +
            ((C5811 * C3444 - C5816 * C3439 + C139736 * C3446 - C5818 * C3440) *
                 C265 +
             (C5811 * C3887 - C5816 * C3883 + C139736 * C3888 - C5818 * C3884) *
                 C139835) *
                C5814 +
            ((C5811 * C7756 - C5816 * C7753 + C139736 * C7760 - C5818 * C7755) *
                 C265 +
             (C5811 * C8426 - C5816 * C8423 + C139736 * C8427 - C5818 * C8424) *
                 C139835) *
                C5815) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eezy[42] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C139824 * C183 - C182 * C108) * C265 +
             (C139824 * C629 - C182 * C567) * C139835) *
                C89 +
            ((C196 - C197) * C265 + (C636 - C637) * C139835) * C90 +
            C650 * C91 + C651 * C92) *
               C4096 +
           (((C182 * C1570 - C139824 * C1653) * C265 +
             (C182 * C2074 - C139824 * C2150) * C139835) *
                C89 +
            ((C1664 - C1665) * C265 + (C2156 - C2157) * C139835) * C90 +
            ((C1668 - C1669) * C265 + (C2158 - C2159) * C139835) * C91 +
            ((C1672 - C1673) * C265 + (C2160 - C2161) * C139835) * C92) *
               C140002) *
              C139792 * C2324 +
          ((((C197 - C196) * C265 + (C637 - C636) * C139835) * C89 +
            ((C201 - C200) * C265 + (C640 - C639) * C139835) * C90 +
            ((C205 - C204) * C265 + (C643 - C642) * C139835) * C91 +
            ((C208 - C209) * C265 + (C644 - C645) * C139835) * C92) *
               C4096 +
           (((C1665 - C1664) * C265 + (C2157 - C2156) * C139835) * C89 +
            ((C1669 - C1668) * C265 + (C2159 - C2158) * C139835) * C90 +
            ((C1673 - C1672) * C265 + (C2161 - C2160) * C139835) * C91 +
            ((C139824 * C1657 - C182 * C1571) * C265 +
             (C139824 * C2154 - C182 * C2078) * C139835) *
                C92) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5813 * C183 - C5894 * C108 + C5814 * C896 - C5895 * C813 +
              C5815 * C2974 - C5896 * C2908) *
                 C265 +
             (C5813 * C629 - C5894 * C567 + C5814 * C1393 - C5895 * C1317 +
              C5815 * C3314 - C5896 * C3256) *
                 C139835) *
                C5811 +
            ((C5898 - C5899 + C5900 - C5901 + C5902 - C5903) * C265 +
             (C6423 - C6424 + C6425 - C6426 + C6427 - C6428) * C139835) *
                C139736) *
               C4096 +
           (((C5894 * C1570 - C5813 * C1653 + C5895 * C3438 - C5814 * C3520 +
              C5896 * C7754 - C5815 * C7863) *
                 C265 +
             (C5894 * C2074 - C5813 * C2150 + C5895 * C3882 - C5814 * C3956 +
              C5896 * C8422 - C5815 * C8526) *
                 C139835) *
                C5811 +
            ((C7870 - C7871 + C7872 - C7873 + C7874 - C7875) * C265 +
             (C8530 - C8531 + C8532 - C8533 + C8534 - C8535) * C139835) *
                C139736) *
               C140002) *
              C139792 * C2324 +
          ((((C5899 - C5898 + C5901 - C5900 + C5903 - C5902) * C265 +
             (C6424 - C6423 + C6426 - C6425 + C6428 - C6427) * C139835) *
                C5811 +
            ((C5910 - C5911 + C5912 - C5913 + C5914 - C5915) * C265 +
             (C6429 - C6430 + C6431 - C6432 + C6433 - C6434) * C139835) *
                C139736) *
               C4096 +
           (((C7871 - C7870 + C7873 - C7872 + C7875 - C7874) * C265 +
             (C8531 - C8530 + C8533 - C8532 + C8535 - C8534) * C139835) *
                C5811 +
            ((C5813 * C1655 - C5894 * C1568 + C5814 * C3522 - C5895 * C3440 +
              C5815 * C7865 - C5896 * C7755) *
                 C265 +
             (C5813 * C2152 - C5894 * C2076 + C5814 * C3958 - C5895 * C3884 +
              C5815 * C8528 - C5896 * C8424) *
                 C139835) *
                C139736) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eezz[42] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C265 * C266 - C701 * C108 - C265 * C567 + C139835 * C702) *
                C139824 * C89 +
            C737 * C90 + C738 * C91 + C739 * C92) *
               C4096 -
           (C2254 * C92 + C2255 * C91 + C2256 * C90 +
            (C265 * C1741 - C701 * C1570 - C265 * C2074 + C139835 * C2230) *
                C139824 * C89) *
               C140002) *
              C139792 * C2324 +
          ((C2256 * C89 + C2255 * C90 + C2254 * C91 +
            (C265 * C1745 - C701 * C1571 - C265 * C2078 + C139835 * C2231) *
                C139824 * C92) *
               C140002 -
           (C740 * C92 + C739 * C91 + C738 * C90 + C737 * C89) * C4096) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C265 * C266 - C701 * C108 - C265 * C567 + C139835 * C702) *
                 C5813 +
             C7652 * C5814 + C7653 * C5815) *
                C5811 +
            (C6509 + C6510 + C6527) * C139736) *
               C4096 -
           ((C8652 + C8653 + C8645) * C139736 +
            (C11287 * C5815 + C11288 * C5814 +
             (C265 * C1741 - C701 * C1570 - C265 * C2074 + C139835 * C2230) *
                 C5813) *
                C5811) *
               C140002) *
              C139792 * C2324 +
          (((C8645 + C8653 + C8652) * C5811 +
            (C2252 * C5813 +
             (C265 * C3596 - C701 * C3440 - C265 * C3884 + C139835 * C4028) *
                 C5814 +
             (C265 * C7981 - C701 * C7755 - C265 * C8424 + C139835 * C8635) *
                 C5815) *
                C139736) *
               C140002 -
           ((C6528 + C6519 + C6520) * C139736 +
            (C6527 + C6510 + C6509) * C5811) *
               C4096) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eexx[43] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C114 - C101 * C108 - C100 * C115 + C89 * C126 + C102 * C116 -
            C103 * C109 - C102 * C117 + C90 * C127 + C104 * C118 - C105 * C110 -
            C104 * C119 + C91 * C128 + C106 * C120 - C107 * C111 - C106 * C121 +
            C92 * C129) *
               C139835 * C139824 * C4096 -
           (C106 * C1572 - C107 * C1567 - C106 * C1573 + C92 * C1582 +
            C104 * C1574 - C105 * C1568 - C104 * C1575 + C91 * C1583 +
            C102 * C1576 - C103 * C1569 - C102 * C1577 + C90 * C1584 +
            C100 * C1578 - C101 * C1570 - C100 * C1579 + C89 * C1585) *
               C139835 * C139824 * C140002) *
              C806 +
          ((C100 * C3442 - C101 * C3438 - C100 * C3443 + C89 * C3450 +
            C102 * C3444 - C103 * C3439 - C102 * C3445 + C90 * C3451 +
            C104 * C3446 - C105 * C3440 - C104 * C3447 + C91 * C3452 +
            C106 * C3448 - C107 * C3441 - C106 * C3449 + C92 * C3453) *
               C139835 * C139824 * C140002 -
           (C106 * C815 - C107 * C810 - C106 * C816 + C92 * C825 + C104 * C817 -
            C105 * C811 - C104 * C818 + C91 * C826 + C102 * C819 - C103 * C812 -
            C102 * C820 + C90 * C827 + C100 * C821 - C101 * C813 - C100 * C822 +
            C89 * C828) *
               C139835 * C139824 * C4096) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5816 * C114 - C5817 * C108 - C5816 * C115 + C5811 * C126 +
             C5818 * C116 - C5819 * C109 - C5818 * C117 + C139736 * C127) *
                C139835 * C5813 +
            (C6687 + C6688) * C139835 * C5814 + C9627 * C5815) *
               C4096 -
           ((C10427 + C10428) * C139835 * C5815 +
            (C10429 + C10430) * C139835 * C5814 +
            (C5818 * C1576 - C5819 * C1569 - C5818 * C1577 + C139736 * C1584 +
             C5816 * C1578 - C5817 * C1570 - C5816 * C1579 + C5811 * C1585) *
                C139835 * C5813) *
               C140002) *
              C806 +
          (((C10430 + C10429) * C139835 * C5813 +
            (C10428 + C10427) * C139835 * C5814 +
            (C5816 * C10396 - C5817 * C10394 - C5816 * C10397 + C5811 * C10400 +
             C5818 * C10398 - C5819 * C10395 - C5818 * C10399 +
             C139736 * C10401) *
                C139835 * C5815) *
               C140002 -
           ((C9632 + C9633) * C139835 * C5815 +
            (C6690 + C6689) * C139835 * C5814 +
            (C6688 + C6687) * C139835 * C5813) *
               C4096) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eexy[43] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C139824 * C183 - C182 * C108) * C100 +
            (C139824 * C189 - C182 * C115) * C89 + (C196 - C197) * C102 +
            (C198 - C199) * C90 + C212 * C104 + C213 * C91 + C214 * C106 +
            C215 * C92) *
               C139835 * C4096 +
           ((C182 * C1570 - C139824 * C1653) * C100 +
            (C182 * C1579 - C139824 * C1658) * C89 + (C1664 - C1665) * C102 +
            (C1666 - C1667) * C90 + (C1668 - C1669) * C104 +
            (C1670 - C1671) * C91 + (C1672 - C1673) * C106 +
            (C1674 - C1675) * C92) *
               C139835 * C140002) *
              C806 +
          (((C182 * C813 - C139824 * C896) * C100 +
            (C182 * C822 - C139824 * C901) * C89 + (C907 - C908) * C102 +
            (C909 - C910) * C90 + (C911 - C912) * C104 + (C913 - C914) * C91 +
            (C915 - C916) * C106 + (C917 - C918) * C92) *
               C139835 * C4096 +
           ((C139824 * C3520 - C182 * C3438) * C100 +
            (C139824 * C3524 - C182 * C3443) * C89 +
            (C139824 * C3521 - C182 * C3439) * C102 +
            (C139824 * C3525 - C182 * C3445) * C90 +
            (C139824 * C3522 - C182 * C3440) * C104 +
            (C139824 * C3526 - C182 * C3447) * C91 +
            (C139824 * C3523 - C182 * C3441) * C106 +
            (C139824 * C3527 - C182 * C3449) * C92) *
               C139835 * C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5813 * C183 - C5894 * C108 + C5814 * C896 - C5895 * C813 +
             C5815 * C2974 - C5896 * C2908) *
                C5816 +
            (C5813 * C189 - C5894 * C115 + C5814 * C901 - C5895 * C822 +
             C5815 * C2978 - C5896 * C2913) *
                C5811 +
            (C5898 - C5899 + C5900 - C5901 + C5902 - C5903) * C5818 +
            (C5904 - C5905 + C5906 - C5907 + C5908 - C5909) * C139736) *
               C139835 * C4096 +
           ((C5894 * C1570 - C5813 * C1653 + C5895 * C3438 - C5814 * C3520 +
             C5896 * C7754 - C5815 * C7863) *
                C5816 +
            (C5894 * C1579 - C5813 * C1658 + C5895 * C3443 - C5814 * C3524 +
             C5896 * C7759 - C5815 * C7866) *
                C5811 +
            (C7870 - C7871 + C7872 - C7873 + C7874 - C7875) * C5818 +
            (C7876 - C7877 + C7878 - C7879 + C7880 - C7881) * C139736) *
               C139835 * C140002) *
              C806 +
          (((C5894 * C813 - C5813 * C896 + C5895 * C2908 - C5814 * C2974 +
             C5896 * C6627 - C5815 * C6792) *
                C5816 +
            (C5894 * C822 - C5813 * C901 + C5895 * C2913 - C5814 * C2978 +
             C5896 * C6632 - C5815 * C6795) *
                C5811 +
            (C6799 - C6800 + C6801 - C6802 + C6803 - C6804) * C5818 +
            (C6805 - C6806 + C6807 - C6808 + C6809 - C6810) * C139736) *
               C139835 * C4096 +
           ((C5813 * C3520 - C5894 * C3438 + C5814 * C7863 - C5895 * C7754 +
             C5815 * C10528 - C5896 * C10394) *
                C5816 +
            (C5813 * C3524 - C5894 * C3443 + C5814 * C7866 - C5895 * C7759 +
             C5815 * C10530 - C5896 * C10397) *
                C5811 +
            (C5813 * C3521 - C5894 * C3439 + C5814 * C7864 - C5895 * C7753 +
             C5815 * C10529 - C5896 * C10395) *
                C5818 +
            (C5813 * C3525 - C5894 * C3445 + C5814 * C7867 - C5895 * C7757 +
             C5815 * C10531 - C5896 * C10399) *
                C139736) *
               C139835 * C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eexz[43] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C139835 * C266 - C265 * C108) * C100 +
                      (C139835 * C272 - C265 * C115) * C89 +
                      (C279 - C280) * C102 + (C281 - C282) * C90 + C295 * C104 +
                      C296 * C91 + C297 * C106 + C298 * C92) *
                         C139824 * C4096 +
                     ((C265 * C1570 - C139835 * C1741) * C100 +
                      (C265 * C1579 - C139835 * C1746) * C89 +
                      (C1752 - C1753) * C102 + (C1754 - C1755) * C90 +
                      (C1756 - C1757) * C104 + (C1758 - C1759) * C91 +
                      (C1760 - C1761) * C106 + (C1762 - C1763) * C92) *
                         C139824 * C140002) *
                        C806 +
                    (((C265 * C813 - C139835 * C984) * C100 +
                      (C265 * C822 - C139835 * C989) * C89 +
                      (C995 - C996) * C102 + (C997 - C998) * C90 +
                      (C999 - C1000) * C104 + (C1001 - C1002) * C91 +
                      (C1003 - C1004) * C106 + (C1005 - C1006) * C92) *
                         C139824 * C4096 +
                     ((C139835 * C3594 - C265 * C3438) * C100 +
                      (C139835 * C3598 - C265 * C3443) * C89 +
                      (C139835 * C3595 - C265 * C3439) * C102 +
                      (C139835 * C3599 - C265 * C3445) * C90 +
                      (C139835 * C3596 - C265 * C3440) * C104 +
                      (C139835 * C3600 - C265 * C3447) * C91 +
                      (C139835 * C3597 - C265 * C3441) * C106 +
                      (C139835 * C3601 - C265 * C3449) * C92) *
                         C139824 * C140002) *
                        C140000) *
                   C139758) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C139835 * C266 - C265 * C108) * C5816 +
                       (C139835 * C272 - C265 * C115) * C5811 +
                       (C279 - C280) * C5818 + (C281 - C282) * C139736) *
                          C5813 +
                      ((C6915 - C6916) * C5816 + (C6917 - C6918) * C5811 +
                       C6919 * C5818 + C6920 * C139736) *
                          C5814 +
                      C9802 * C5815) *
                         C4096 +
                     (((C265 * C1570 - C139835 * C1741) * C5816 +
                       (C265 * C1579 - C139835 * C1746) * C5811 +
                       (C1752 - C1753) * C5818 + (C1754 - C1755) * C139736) *
                          C5813 +
                      ((C10635 - C10636) * C5816 + (C10637 - C10638) * C5811 +
                       (C7986 - C7987) * C5818 + (C7988 - C7989) * C139736) *
                          C5814 +
                      ((C10639 - C10640) * C5816 + (C10641 - C10642) * C5811 +
                       (C7990 - C7991) * C5818 + (C7992 - C7993) * C139736) *
                          C5815) *
                         C140002) *
                        C806 +
                    ((((C6916 - C6915) * C5816 + (C6918 - C6917) * C5811 +
                       C6927 * C5818 + C6928 * C139736) *
                          C5813 +
                      ((C6922 - C6921) * C5816 + (C6924 - C6923) * C5811 +
                       C6929 * C5818 + C6930 * C139736) *
                          C5814 +
                      ((C9794 - C9795) * C5816 + (C9796 - C9797) * C5811 +
                       (C6931 - C6932) * C5818 + (C6933 - C6934) * C139736) *
                          C5815) *
                         C4096 +
                     (((C10636 - C10635) * C5816 + (C10638 - C10637) * C5811 +
                       (C7987 - C7986) * C5818 + (C7989 - C7988) * C139736) *
                          C5813 +
                      ((C10640 - C10639) * C5816 + (C10642 - C10641) * C5811 +
                       (C7991 - C7990) * C5818 + (C7993 - C7992) * C139736) *
                          C5814 +
                      ((C139835 * C10630 - C265 * C10394) * C5816 +
                       (C139835 * C10632 - C265 * C10397) * C5811 +
                       (C139835 * C10631 - C265 * C10395) * C5818 +
                       (C139835 * C10633 - C265 * C10399) * C139736) *
                          C5815) *
                         C140002) *
                        C140000) *
                   C139758) /
                      (p * q * std::sqrt(p + q));
    d2eeyx[43] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C89 * C114 - C100 * C108 + C90 * C116 - C102 * C109 + C91 * C118 -
             C104 * C110 + C92 * C120 - C106 * C111) *
                C182 +
            (C89 * C354 - C100 * C348 + C90 * C355 - C102 * C349 + C91 * C356 -
             C104 * C350 + C92 * C357 - C106 * C351) *
                C139824) *
               C139835 * C4096 +
           ((C100 * C1570 - C89 * C1578 + C102 * C1569 - C90 * C1576 +
             C104 * C1568 - C91 * C1574 + C106 * C1567 - C92 * C1572) *
                C182 +
            (C100 * C1829 - C89 * C1834 + C102 * C1830 - C90 * C1835 +
             C104 * C1831 - C91 * C1836 + C106 * C1832 - C92 * C1837) *
                C139824) *
               C139835 * C140002) *
              C806 +
          (((C100 * C813 - C89 * C821 + C102 * C812 - C90 * C819 + C104 * C811 -
             C91 * C817 + C106 * C810 - C92 * C815) *
                C182 +
            (C100 * C1072 - C89 * C1077 + C102 * C1073 - C90 * C1078 +
             C104 * C1074 - C91 * C1079 + C106 * C1075 - C92 * C1080) *
                C139824) *
               C139835 * C4096 +
           ((C89 * C3442 - C100 * C3438 + C90 * C3444 - C102 * C3439 +
             C91 * C3446 - C104 * C3440 + C92 * C3448 - C106 * C3441) *
                C182 +
            (C89 * C3672 - C100 * C3668 + C90 * C3673 - C102 * C3669 +
             C91 * C3674 - C104 * C3670 + C92 * C3675 - C106 * C3671) *
                C139824) *
               C139835 * C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5811 * C114 - C5816 * C108 + C139736 * C116 - C5818 * C109) *
                C5894 +
            (C5811 * C354 - C5816 * C348 + C139736 * C355 - C5818 * C349) *
                C5813 +
            (C7039 - C7040 + C7041 - C7042) * C5895 +
            (C7043 - C7044 + C7045 - C7046) * C5814 + C9893 * C5896 +
            C9894 * C5815) *
               C139835 * C4096 +
           ((C5816 * C1570 - C5811 * C1578 + C5818 * C1569 - C139736 * C1576) *
                C5894 +
            (C5816 * C1829 - C5811 * C1834 + C5818 * C1830 - C139736 * C1835) *
                C5813 +
            (C10745 - C10746 + C10747 - C10748) * C5895 +
            (C10749 - C10750 + C10751 - C10752) * C5814 +
            (C10753 - C10754 + C10755 - C10756) * C5896 +
            (C10757 - C10758 + C10759 - C10760) * C5815) *
               C139835 * C140002) *
              C806 +
          (((C7040 - C7039 + C7042 - C7041) * C5894 +
            (C7044 - C7043 + C7046 - C7045) * C5813 +
            (C7048 - C7047 + C7050 - C7049) * C5895 +
            (C7052 - C7051 + C7054 - C7053) * C5814 +
            (C9885 - C9886 + C9887 - C9888) * C5896 +
            (C9889 - C9890 + C9891 - C9892) * C5815) *
               C139835 * C4096 +
           ((C10746 - C10745 + C10748 - C10747) * C5894 +
            (C10750 - C10749 + C10752 - C10751) * C5813 +
            (C10754 - C10753 + C10756 - C10755) * C5895 +
            (C10758 - C10757 + C10760 - C10759) * C5814 +
            (C5811 * C10396 - C5816 * C10394 + C139736 * C10398 -
             C5818 * C10395) *
                C5896 +
            (C5811 * C10742 - C5816 * C10740 + C139736 * C10743 -
             C5818 * C10741) *
                C5815) *
               C139835 * C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eeyy[43] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C182 * C183 - C410 * C108 - C182 * C348 + C139824 * C411) * C89 +
            C442 * C90 + C443 * C91 + C444 * C92) *
               C139835 * C4096 -
           (C1929 * C92 + C1930 * C91 + C1931 * C90 +
            (C182 * C1653 - C410 * C1570 - C182 * C1829 + C139824 * C1908) *
                C89) *
               C139835 * C140002) *
              C806 +
          (((C182 * C3520 - C410 * C3438 - C182 * C3668 + C139824 * C3742) *
                C89 +
            (C182 * C3521 - C410 * C3439 - C182 * C3669 + C139824 * C3743) *
                C90 +
            (C182 * C3522 - C410 * C3440 - C182 * C3670 + C139824 * C3744) *
                C91 +
            (C182 * C3523 - C410 * C3441 - C182 * C3671 + C139824 * C3745) *
                C92) *
               C139835 * C140002 -
           (C1172 * C92 + C1173 * C91 + C1174 * C90 +
            (C182 * C896 - C410 * C813 - C182 * C1072 + C139824 * C1151) *
                C89) *
               C139835 * C4096) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5894 * C183 - C6151 * C108 - C5894 * C348 + C5813 * C411 +
             C5895 * C896 - C6152 * C813 - C5895 * C1072 + C5814 * C1151 +
             C5896 * C2974 - C6153 * C2908 - C5896 * C3090 + C5815 * C3148) *
                C5811 +
            (C6191 + C6192 + C6193) * C139736) *
               C139835 * C4096 -
           ((C8217 + C8218 + C8219) * C139736 +
            (C5896 * C7863 - C6153 * C7754 - C5896 * C8091 + C5815 * C8196 +
             C5895 * C3520 - C6152 * C3438 - C5895 * C3668 + C5814 * C3742 +
             C5894 * C1653 - C6151 * C1570 - C5894 * C1829 + C5813 * C1908) *
                C5811) *
               C139835 * C140002) *
              C806 +
          (((C5894 * C3520 - C6151 * C3438 - C5894 * C3668 + C5813 * C3742 +
             C5895 * C7863 - C6152 * C7754 - C5895 * C8091 + C5814 * C8196 +
             C5896 * C10528 - C6153 * C10394 - C5896 * C10740 +
             C5815 * C10858) *
                C5811 +
            (C5894 * C3521 - C6151 * C3439 - C5894 * C3669 + C5813 * C3743 +
             C5895 * C7864 - C6152 * C7753 - C5895 * C8092 + C5814 * C8195 +
             C5896 * C10529 - C6153 * C10395 - C5896 * C10741 +
             C5815 * C10859) *
                C139736) *
               C139835 * C140002 -
           ((C7190 + C7191 + C7192) * C139736 +
            (C5896 * C6792 - C6153 * C6627 - C5896 * C7032 + C5815 * C7169 +
             C5895 * C2974 - C6152 * C2908 - C5895 * C3090 + C5814 * C3148 +
             C5894 * C896 - C6151 * C813 - C5894 * C1072 + C5813 * C1151) *
                C5811) *
               C139835 * C4096) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eeyz[43] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C139835 * C266 - C265 * C108) * C182 +
             (C139835 * C495 - C265 * C348) * C139824) *
                C89 +
            ((C279 - C280) * C182 + (C502 - C503) * C139824) * C90 +
            C516 * C91 + C517 * C92) *
               C4096 +
           (((C265 * C1570 - C139835 * C1741) * C182 +
             (C265 * C1829 - C139835 * C1997) * C139824) *
                C89 +
            ((C1752 - C1753) * C182 + (C2003 - C2004) * C139824) * C90 +
            ((C1756 - C1757) * C182 + (C2005 - C2006) * C139824) * C91 +
            ((C1760 - C1761) * C182 + (C2007 - C2008) * C139824) * C92) *
               C140002) *
              C806 +
          ((((C265 * C813 - C139835 * C984) * C182 +
             (C265 * C1072 - C139835 * C1240) * C139824) *
                C89 +
            ((C995 - C996) * C182 + (C1246 - C1247) * C139824) * C90 +
            ((C999 - C1000) * C182 + (C1248 - C1249) * C139824) * C91 +
            ((C1003 - C1004) * C182 + (C1250 - C1251) * C139824) * C92) *
               C4096 +
           (((C139835 * C3594 - C265 * C3438) * C182 +
             (C139835 * C3812 - C265 * C3668) * C139824) *
                C89 +
            ((C139835 * C3595 - C265 * C3439) * C182 +
             (C139835 * C3813 - C265 * C3669) * C139824) *
                C90 +
            ((C139835 * C3596 - C265 * C3440) * C182 +
             (C139835 * C3814 - C265 * C3670) * C139824) *
                C91 +
            ((C139835 * C3597 - C265 * C3441) * C182 +
             (C139835 * C3815 - C265 * C3671) * C139824) *
                C92) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C139835 * C266 - C265 * C108) * C5894 +
             (C139835 * C495 - C265 * C348) * C5813 + (C6915 - C6916) * C5895 +
             (C7294 - C7295) * C5814 + C9790 * C5896 + C10047 * C5815) *
                C5811 +
            ((C279 - C280) * C5894 + (C502 - C503) * C5813 + C6919 * C5895 +
             C7298 * C5814 + C6925 * C5896 + C7299 * C5815) *
                C139736) *
               C4096 +
           (((C265 * C1570 - C139835 * C1741) * C5894 +
             (C265 * C1829 - C139835 * C1997) * C5813 +
             (C10635 - C10636) * C5895 + (C10961 - C10962) * C5814 +
             (C10639 - C10640) * C5896 + (C10963 - C10964) * C5815) *
                C5811 +
            ((C1752 - C1753) * C5894 + (C2003 - C2004) * C5813 +
             (C7986 - C7987) * C5895 + (C8321 - C8322) * C5814 +
             (C7990 - C7991) * C5896 + (C8323 - C8324) * C5815) *
                C139736) *
               C140002) *
              C806 +
          ((((C6916 - C6915) * C5894 + (C7295 - C7294) * C5813 +
             (C6922 - C6921) * C5895 + (C7297 - C7296) * C5814 +
             (C9794 - C9795) * C5896 + (C10048 - C10049) * C5815) *
                C5811 +
            (C6927 * C5894 + C7300 * C5813 + C6929 * C5895 + C7301 * C5814 +
             (C6931 - C6932) * C5896 + (C7302 - C7303) * C5815) *
                C139736) *
               C4096 +
           (((C10636 - C10635) * C5894 + (C10962 - C10961) * C5813 +
             (C10640 - C10639) * C5895 + (C10964 - C10963) * C5814 +
             (C139835 * C10630 - C265 * C10394) * C5896 +
             (C139835 * C10958 - C265 * C10740) * C5815) *
                C5811 +
            ((C7987 - C7986) * C5894 + (C8322 - C8321) * C5813 +
             (C7991 - C7990) * C5895 + (C8324 - C8323) * C5814 +
             (C139835 * C10631 - C265 * C10395) * C5896 +
             (C139835 * C10959 - C265 * C10741) * C5815) *
                C139736) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eezx[43] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C89 * C114 - C100 * C108 + C90 * C116 - C102 * C109 + C91 * C118 -
             C104 * C110 + C92 * C120 - C106 * C111) *
                C265 +
            (C89 * C573 - C100 * C567 + C90 * C574 - C102 * C568 + C91 * C575 -
             C104 * C569 + C92 * C576 - C106 * C570) *
                C139835) *
               C139824 * C4096 +
           ((C100 * C1570 - C89 * C1578 + C102 * C1569 - C90 * C1576 +
             C104 * C1568 - C91 * C1574 + C106 * C1567 - C92 * C1572) *
                C265 +
            (C100 * C2074 - C89 * C2079 + C102 * C2075 - C90 * C2080 +
             C104 * C2076 - C91 * C2081 + C106 * C2077 - C92 * C2082) *
                C139835) *
               C139824 * C140002) *
              C806 +
          (((C100 * C813 - C89 * C821 + C102 * C812 - C90 * C819 + C104 * C811 -
             C91 * C817 + C106 * C810 - C92 * C815) *
                C265 +
            (C100 * C1317 - C89 * C1322 + C102 * C1318 - C90 * C1323 +
             C104 * C1319 - C91 * C1324 + C106 * C1320 - C92 * C1325) *
                C139835) *
               C139824 * C4096 +
           ((C89 * C3442 - C100 * C3438 + C90 * C3444 - C102 * C3439 +
             C91 * C3446 - C104 * C3440 + C92 * C3448 - C106 * C3441) *
                C265 +
            (C89 * C3886 - C100 * C3882 + C90 * C3887 - C102 * C3883 +
             C91 * C3888 - C104 * C3884 + C92 * C3889 - C106 * C3885) *
                C139835) *
               C139824 * C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5811 * C114 - C5816 * C108 + C139736 * C116 - C5818 * C109) *
                 C265 +
             (C5811 * C573 - C5816 * C567 + C139736 * C574 - C5818 * C568) *
                 C139835) *
                C5813 +
            ((C7039 - C7040 + C7041 - C7042) * C265 +
             (C7408 - C7409 + C7410 - C7411) * C139835) *
                C5814 +
            C10137 * C5815) *
               C4096 +
           (((C5816 * C1570 - C5811 * C1578 + C5818 * C1569 - C139736 * C1576) *
                 C265 +
             (C5816 * C2074 - C5811 * C2079 + C5818 * C2075 - C139736 * C2080) *
                 C139835) *
                C5813 +
            ((C10745 - C10746 + C10747 - C10748) * C265 +
             (C11067 - C11068 + C11069 - C11070) * C139835) *
                C5814 +
            ((C10753 - C10754 + C10755 - C10756) * C265 +
             (C11071 - C11072 + C11073 - C11074) * C139835) *
                C5815) *
               C140002) *
              C806 +
          ((((C7040 - C7039 + C7042 - C7041) * C265 +
             (C7409 - C7408 + C7411 - C7410) * C139835) *
                C5813 +
            ((C7048 - C7047 + C7050 - C7049) * C265 +
             (C7413 - C7412 + C7415 - C7414) * C139835) *
                C5814 +
            ((C9885 - C9886 + C9887 - C9888) * C265 +
             (C10131 - C10132 + C10133 - C10134) * C139835) *
                C5815) *
               C4096 +
           (((C10746 - C10745 + C10748 - C10747) * C265 +
             (C11068 - C11067 + C11070 - C11069) * C139835) *
                C5813 +
            ((C10754 - C10753 + C10756 - C10755) * C265 +
             (C11072 - C11071 + C11074 - C11073) * C139835) *
                C5814 +
            ((C5811 * C10396 - C5816 * C10394 + C139736 * C10398 -
              C5818 * C10395) *
                 C265 +
             (C5811 * C11064 - C5816 * C11062 + C139736 * C11065 -
              C5818 * C11063) *
                 C139835) *
                C5815) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eezy[43] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C139824 * C183 - C182 * C108) * C265 +
             (C139824 * C629 - C182 * C567) * C139835) *
                C89 +
            ((C196 - C197) * C265 + (C636 - C637) * C139835) * C90 +
            C650 * C91 + C651 * C92) *
               C4096 +
           (((C182 * C1570 - C139824 * C1653) * C265 +
             (C182 * C2074 - C139824 * C2150) * C139835) *
                C89 +
            ((C1664 - C1665) * C265 + (C2156 - C2157) * C139835) * C90 +
            ((C1668 - C1669) * C265 + (C2158 - C2159) * C139835) * C91 +
            ((C1672 - C1673) * C265 + (C2160 - C2161) * C139835) * C92) *
               C140002) *
              C806 +
          ((((C182 * C813 - C139824 * C896) * C265 +
             (C182 * C1317 - C139824 * C1393) * C139835) *
                C89 +
            ((C907 - C908) * C265 + (C1399 - C1400) * C139835) * C90 +
            ((C911 - C912) * C265 + (C1401 - C1402) * C139835) * C91 +
            ((C915 - C916) * C265 + (C1403 - C1404) * C139835) * C92) *
               C4096 +
           (((C139824 * C3520 - C182 * C3438) * C265 +
             (C139824 * C3956 - C182 * C3882) * C139835) *
                C89 +
            ((C139824 * C3521 - C182 * C3439) * C265 +
             (C139824 * C3957 - C182 * C3883) * C139835) *
                C90 +
            ((C139824 * C3522 - C182 * C3440) * C265 +
             (C139824 * C3958 - C182 * C3884) * C139835) *
                C91 +
            ((C139824 * C3523 - C182 * C3441) * C265 +
             (C139824 * C3959 - C182 * C3885) * C139835) *
                C92) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5813 * C183 - C5894 * C108 + C5814 * C896 - C5895 * C813 +
              C5815 * C2974 - C5896 * C2908) *
                 C265 +
             (C5813 * C629 - C5894 * C567 + C5814 * C1393 - C5895 * C1317 +
              C5815 * C3314 - C5896 * C3256) *
                 C139835) *
                C5811 +
            ((C5898 - C5899 + C5900 - C5901 + C5902 - C5903) * C265 +
             (C6423 - C6424 + C6425 - C6426 + C6427 - C6428) * C139835) *
                C139736) *
               C4096 +
           (((C5894 * C1570 - C5813 * C1653 + C5895 * C3438 - C5814 * C3520 +
              C5896 * C7754 - C5815 * C7863) *
                 C265 +
             (C5894 * C2074 - C5813 * C2150 + C5895 * C3882 - C5814 * C3956 +
              C5896 * C8422 - C5815 * C8526) *
                 C139835) *
                C5811 +
            ((C7870 - C7871 + C7872 - C7873 + C7874 - C7875) * C265 +
             (C8530 - C8531 + C8532 - C8533 + C8534 - C8535) * C139835) *
                C139736) *
               C140002) *
              C806 +
          ((((C5894 * C813 - C5813 * C896 + C5895 * C2908 - C5814 * C2974 +
              C5896 * C6627 - C5815 * C6792) *
                 C265 +
             (C5894 * C1317 - C5813 * C1393 + C5895 * C3256 - C5814 * C3314 +
              C5896 * C7401 - C5815 * C7521) *
                 C139835) *
                C5811 +
            ((C6799 - C6800 + C6801 - C6802 + C6803 - C6804) * C265 +
             (C7525 - C7526 + C7527 - C7528 + C7529 - C7530) * C139835) *
                C139736) *
               C4096 +
           (((C5813 * C3520 - C5894 * C3438 + C5814 * C7863 - C5895 * C7754 +
              C5815 * C10528 - C5896 * C10394) *
                 C265 +
             (C5813 * C3956 - C5894 * C3882 + C5814 * C8526 - C5895 * C8422 +
              C5815 * C11172 - C5896 * C11062) *
                 C139835) *
                C5811 +
            ((C5813 * C3521 - C5894 * C3439 + C5814 * C7864 - C5895 * C7753 +
              C5815 * C10529 - C5896 * C10395) *
                 C265 +
             (C5813 * C3957 - C5894 * C3883 + C5814 * C8527 - C5895 * C8423 +
              C5815 * C11173 - C5896 * C11063) *
                 C139835) *
                C139736) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eezz[43] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C265 * C266 - C701 * C108 - C265 * C567 + C139835 * C702) *
                C139824 * C89 +
            C737 * C90 + C738 * C91 + C739 * C92) *
               C4096 -
           (C2254 * C92 + C2255 * C91 + C2256 * C90 +
            (C265 * C1741 - C701 * C1570 - C265 * C2074 + C139835 * C2230) *
                C139824 * C89) *
               C140002) *
              C806 +
          (((C265 * C3594 - C701 * C3438 - C265 * C3882 + C139835 * C4026) *
                C139824 * C89 +
            (C265 * C3595 - C701 * C3439 - C265 * C3883 + C139835 * C4027) *
                C139824 * C90 +
            (C265 * C3596 - C701 * C3440 - C265 * C3884 + C139835 * C4028) *
                C139824 * C91 +
            (C265 * C3597 - C701 * C3441 - C265 * C3885 + C139835 * C4029) *
                C139824 * C92) *
               C140002 -
           (C1497 * C92 + C1498 * C91 + C1499 * C90 +
            (C265 * C984 - C701 * C813 - C265 * C1317 + C139835 * C1473) *
                C139824 * C89) *
               C4096) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C265 * C266 - C701 * C108 - C265 * C567 + C139835 * C702) *
                 C5813 +
             C7652 * C5814 + C7653 * C5815) *
                C5811 +
            (C6509 + C6510 + C6527) * C139736) *
               C4096 -
           ((C8652 + C8653 + C8645) * C139736 +
            (C11287 * C5815 + C11288 * C5814 +
             (C265 * C1741 - C701 * C1570 - C265 * C2074 + C139835 * C2230) *
                 C5813) *
                C5811) *
               C140002) *
              C806 +
          (((C11288 * C5813 + C11287 * C5814 +
             (C265 * C10630 - C701 * C10394 - C265 * C11062 +
              C139835 * C11272) *
                 C5815) *
                C5811 +
            (C8651 * C5813 + C8650 * C5814 +
             (C265 * C10631 - C701 * C10395 - C265 * C11063 +
              C139835 * C11273) *
                 C5815) *
                C139736) *
               C140002 -
           ((C7655 + C7644 + C7645) * C139736 +
            (C10296 * C5815 + C7653 * C5814 + C7652 * C5813) * C5811) *
               C4096) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eexx[44] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((C100 * C114 - C101 * C108 - C100 * C115 + C89 * C126 + C102 * C116 -
           C103 * C109 - C102 * C117 + C90 * C127 + C104 * C118 - C105 * C110 -
           C104 * C119 + C91 * C128 + C106 * C120 - C107 * C111 - C106 * C121 +
           C92 * C129) *
              C139835 * C139824 * C5270 -
          (C106 * C1572 - C107 * C1567 - C106 * C1573 + C92 * C1582 +
           C104 * C1574 - C105 * C1568 - C104 * C1575 + C91 * C1583 +
           C102 * C1576 - C103 * C1569 - C102 * C1577 + C90 * C1584 +
           C100 * C1578 - C101 * C1570 - C100 * C1579 + C89 * C1585) *
              C139835 * C139824 * C5271 +
          (C100 * C5277 - C101 * C5273 - C100 * C5278 + C89 * C5285 +
           C102 * C5279 - C103 * C5274 - C102 * C5280 + C90 * C5286 +
           C104 * C5281 - C105 * C5275 - C104 * C5282 + C91 * C5287 +
           C106 * C5283 - C107 * C5276 - C106 * C5284 + C92 * C5288) *
              C139835 * C139824 * C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C5816 * C114 - C5817 * C108 - C5816 * C115 + C5811 * C126 +
            C5818 * C116 - C5819 * C109 - C5818 * C117 + C139736 * C127) *
               C139835 * C5813 +
           (C6687 + C6688) * C139835 * C5814 + C9627 * C5815) *
              C5270 -
          ((C10427 + C10428) * C139835 * C5815 +
           (C10429 + C10430) * C139835 * C5814 +
           (C5818 * C1576 - C5819 * C1569 - C5818 * C1577 + C139736 * C1584 +
            C5816 * C1578 - C5817 * C1570 - C5816 * C1579 + C5811 * C1585) *
               C139835 * C5813) *
              C5271 +
          ((C5816 * C5277 - C5817 * C5273 - C5816 * C5278 + C5811 * C5285 +
            C5818 * C5279 - C5819 * C5274 - C5818 * C5280 + C139736 * C5286) *
               C139835 * C5813 +
           (C5816 * C13130 - C5817 * C13126 - C5816 * C13131 + C5811 * C13138 +
            C5818 * C13132 - C5819 * C13127 - C5818 * C13133 +
            C139736 * C13139) *
               C139835 * C5814 +
           (C5816 * C13134 - C5817 * C13128 - C5816 * C13135 + C5811 * C13140 +
            C5818 * C13136 - C5819 * C13129 - C5818 * C13137 +
            C139736 * C13141) *
               C139835 * C5815) *
              C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q));
    d2eexy[44] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C139824 * C183 - C182 * C108) * C100 +
           (C139824 * C189 - C182 * C115) * C89 + (C196 - C197) * C102 +
           (C198 - C199) * C90 + C212 * C104 + C213 * C91 + C214 * C106 +
           C215 * C92) *
              C139835 * C5270 +
          ((C182 * C1570 - C139824 * C1653) * C100 +
           (C182 * C1579 - C139824 * C1658) * C89 + (C1664 - C1665) * C102 +
           (C1666 - C1667) * C90 + (C1668 - C1669) * C104 +
           (C1670 - C1671) * C91 + (C1672 - C1673) * C106 +
           (C1674 - C1675) * C92) *
              C139835 * C5271 +
          ((C139824 * C5339 - C182 * C5273) * C100 +
           (C139824 * C5343 - C182 * C5278) * C89 +
           (C139824 * C5340 - C182 * C5274) * C102 +
           (C139824 * C5344 - C182 * C5280) * C90 +
           (C139824 * C5341 - C182 * C5275) * C104 +
           (C139824 * C5345 - C182 * C5282) * C91 +
           (C139824 * C5342 - C182 * C5276) * C106 +
           (C139824 * C5346 - C182 * C5284) * C92) *
              C139835 * C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C5813 * C183 - C5894 * C108 + C5814 * C896 - C5895 * C813 +
            C5815 * C2974 - C5896 * C2908) *
               C5816 +
           (C5813 * C189 - C5894 * C115 + C5814 * C901 - C5895 * C822 +
            C5815 * C2978 - C5896 * C2913) *
               C5811 +
           (C5898 - C5899 + C5900 - C5901 + C5902 - C5903) * C5818 +
           (C5904 - C5905 + C5906 - C5907 + C5908 - C5909) * C139736) *
              C139835 * C5270 +
          ((C5894 * C1570 - C5813 * C1653 + C5895 * C3438 - C5814 * C3520 +
            C5896 * C7754 - C5815 * C7863) *
               C5816 +
           (C5894 * C1579 - C5813 * C1658 + C5895 * C3443 - C5814 * C3524 +
            C5896 * C7759 - C5815 * C7866) *
               C5811 +
           (C7870 - C7871 + C7872 - C7873 + C7874 - C7875) * C5818 +
           (C7876 - C7877 + C7878 - C7879 + C7880 - C7881) * C139736) *
              C139835 * C5271 +
          ((C5813 * C5339 - C5894 * C5273 + C5814 * C13216 - C5895 * C13126 +
            C5815 * C13217 - C5896 * C13128) *
               C5816 +
           (C5813 * C5343 - C5894 * C5278 + C5814 * C13220 - C5895 * C13131 +
            C5815 * C13221 - C5896 * C13135) *
               C5811 +
           (C5813 * C5340 - C5894 * C5274 + C5814 * C13218 - C5895 * C13127 +
            C5815 * C13219 - C5896 * C13129) *
               C5818 +
           (C5813 * C5344 - C5894 * C5280 + C5814 * C13222 - C5895 * C13133 +
            C5815 * C13223 - C5896 * C13137) *
               C139736) *
              C139835 * C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q));
    d2eexz[44] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C139835 * C266 - C265 * C108) * C100 +
                     (C139835 * C272 - C265 * C115) * C89 +
                     (C279 - C280) * C102 + (C281 - C282) * C90 + C295 * C104 +
                     C296 * C91 + C297 * C106 + C298 * C92) *
                        C139824 * C5270 +
                    ((C265 * C1570 - C139835 * C1741) * C100 +
                     (C265 * C1579 - C139835 * C1746) * C89 +
                     (C1752 - C1753) * C102 + (C1754 - C1755) * C90 +
                     (C1756 - C1757) * C104 + (C1758 - C1759) * C91 +
                     (C1760 - C1761) * C106 + (C1762 - C1763) * C92) *
                        C139824 * C5271 +
                    ((C139835 * C5397 - C265 * C5273) * C100 +
                     (C139835 * C5401 - C265 * C5278) * C89 +
                     (C139835 * C5398 - C265 * C5274) * C102 +
                     (C139835 * C5402 - C265 * C5280) * C90 +
                     (C139835 * C5399 - C265 * C5275) * C104 +
                     (C139835 * C5403 - C265 * C5282) * C91 +
                     (C139835 * C5400 - C265 * C5276) * C106 +
                     (C139835 * C5404 - C265 * C5284) * C92) *
                        C139824 * C5272) *
                   C139792 * C139758) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C139835 * C266 - C265 * C108) * C5816 +
                      (C139835 * C272 - C265 * C115) * C5811 +
                      (C279 - C280) * C5818 + (C281 - C282) * C139736) *
                         C5813 +
                     ((C6915 - C6916) * C5816 + (C6917 - C6918) * C5811 +
                      C6919 * C5818 + C6920 * C139736) *
                         C5814 +
                     C9802 * C5815) *
                        C5270 +
                    (((C265 * C1570 - C139835 * C1741) * C5816 +
                      (C265 * C1579 - C139835 * C1746) * C5811 +
                      (C1752 - C1753) * C5818 + (C1754 - C1755) * C139736) *
                         C5813 +
                     ((C10635 - C10636) * C5816 + (C10637 - C10638) * C5811 +
                      (C7986 - C7987) * C5818 + (C7988 - C7989) * C139736) *
                         C5814 +
                     ((C10639 - C10640) * C5816 + (C10641 - C10642) * C5811 +
                      (C7990 - C7991) * C5818 + (C7992 - C7993) * C139736) *
                         C5815) *
                        C5271 +
                    (((C139835 * C5397 - C265 * C5273) * C5816 +
                      (C139835 * C5401 - C265 * C5278) * C5811 +
                      (C139835 * C5398 - C265 * C5274) * C5818 +
                      (C139835 * C5402 - C265 * C5280) * C139736) *
                         C5813 +
                     ((C139835 * C13298 - C265 * C13126) * C5816 +
                      (C139835 * C13302 - C265 * C13131) * C5811 +
                      (C139835 * C13299 - C265 * C13127) * C5818 +
                      (C139835 * C13303 - C265 * C13133) * C139736) *
                         C5814 +
                     ((C139835 * C13300 - C265 * C13128) * C5816 +
                      (C139835 * C13304 - C265 * C13135) * C5811 +
                      (C139835 * C13301 - C265 * C13129) * C5818 +
                      (C139835 * C13305 - C265 * C13137) * C139736) *
                         C5815) *
                        C5272) *
                   C139792 * C139758) /
                      (p * q * std::sqrt(p + q));
    d2eeyx[44] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C89 * C114 - C100 * C108 + C90 * C116 - C102 * C109 + C91 * C118 -
            C104 * C110 + C92 * C120 - C106 * C111) *
               C182 +
           (C89 * C354 - C100 * C348 + C90 * C355 - C102 * C349 + C91 * C356 -
            C104 * C350 + C92 * C357 - C106 * C351) *
               C139824) *
              C139835 * C5270 +
          ((C100 * C1570 - C89 * C1578 + C102 * C1569 - C90 * C1576 +
            C104 * C1568 - C91 * C1574 + C106 * C1567 - C92 * C1572) *
               C182 +
           (C100 * C1829 - C89 * C1834 + C102 * C1830 - C90 * C1835 +
            C104 * C1831 - C91 * C1836 + C106 * C1832 - C92 * C1837) *
               C139824) *
              C139835 * C5271 +
          ((C89 * C5277 - C100 * C5273 + C90 * C5279 - C102 * C5274 +
            C91 * C5281 - C104 * C5275 + C92 * C5283 - C106 * C5276) *
               C182 +
           (C89 * C5459 - C100 * C5455 + C90 * C5460 - C102 * C5456 +
            C91 * C5461 - C104 * C5457 + C92 * C5462 - C106 * C5458) *
               C139824) *
              C139835 * C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C5811 * C114 - C5816 * C108 + C139736 * C116 - C5818 * C109) *
               C5894 +
           (C5811 * C354 - C5816 * C348 + C139736 * C355 - C5818 * C349) *
               C5813 +
           (C7039 - C7040 + C7041 - C7042) * C5895 +
           (C7043 - C7044 + C7045 - C7046) * C5814 + C9893 * C5896 +
           C9894 * C5815) *
              C139835 * C5270 +
          ((C5816 * C1570 - C5811 * C1578 + C5818 * C1569 - C139736 * C1576) *
               C5894 +
           (C5816 * C1829 - C5811 * C1834 + C5818 * C1830 - C139736 * C1835) *
               C5813 +
           (C10745 - C10746 + C10747 - C10748) * C5895 +
           (C10749 - C10750 + C10751 - C10752) * C5814 +
           (C10753 - C10754 + C10755 - C10756) * C5896 +
           (C10757 - C10758 + C10759 - C10760) * C5815) *
              C139835 * C5271 +
          ((C5811 * C5277 - C5816 * C5273 + C139736 * C5279 - C5818 * C5274) *
               C5894 +
           (C5811 * C5459 - C5816 * C5455 + C139736 * C5460 - C5818 * C5456) *
               C5813 +
           (C5811 * C13130 - C5816 * C13126 + C139736 * C13132 -
            C5818 * C13127) *
               C5895 +
           (C5811 * C13384 - C5816 * C13380 + C139736 * C13385 -
            C5818 * C13381) *
               C5814 +
           (C5811 * C13134 - C5816 * C13128 + C139736 * C13136 -
            C5818 * C13129) *
               C5896 +
           (C5811 * C13386 - C5816 * C13382 + C139736 * C13387 -
            C5818 * C13383) *
               C5815) *
              C139835 * C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q));
    d2eeyy[44] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C182 * C183 - C410 * C108 - C182 * C348 + C139824 * C411) * C89 +
           C442 * C90 + C443 * C91 + C444 * C92) *
              C139835 * C5270 -
          (C1929 * C92 + C1930 * C91 + C1931 * C90 +
           (C182 * C1653 - C410 * C1570 - C182 * C1829 + C139824 * C1908) *
               C89) *
              C139835 * C5271 +
          ((C182 * C5339 - C410 * C5273 - C182 * C5455 + C139824 * C5513) *
               C89 +
           (C182 * C5340 - C410 * C5274 - C182 * C5456 + C139824 * C5514) *
               C90 +
           (C182 * C5341 - C410 * C5275 - C182 * C5457 + C139824 * C5515) *
               C91 +
           (C182 * C5342 - C410 * C5276 - C182 * C5458 + C139824 * C5516) *
               C92) *
              C139835 * C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C5894 * C183 - C6151 * C108 - C5894 * C348 + C5813 * C411 +
            C5895 * C896 - C6152 * C813 - C5895 * C1072 + C5814 * C1151 +
            C5896 * C2974 - C6153 * C2908 - C5896 * C3090 + C5815 * C3148) *
               C5811 +
           (C6191 + C6192 + C6193) * C139736) *
              C139835 * C5270 -
          ((C8217 + C8218 + C8219) * C139736 +
           (C5896 * C7863 - C6153 * C7754 - C5896 * C8091 + C5815 * C8196 +
            C5895 * C3520 - C6152 * C3438 - C5895 * C3668 + C5814 * C3742 +
            C5894 * C1653 - C6151 * C1570 - C5894 * C1829 + C5813 * C1908) *
               C5811) *
              C139835 * C5271 +
          ((C5894 * C5339 - C6151 * C5273 - C5894 * C5455 + C5813 * C5513 +
            C5895 * C13216 - C6152 * C13126 - C5895 * C13380 + C5814 * C13462 +
            C5896 * C13217 - C6153 * C13128 - C5896 * C13382 + C5815 * C13463) *
               C5811 +
           (C5894 * C5340 - C6151 * C5274 - C5894 * C5456 + C5813 * C5514 +
            C5895 * C13218 - C6152 * C13127 - C5895 * C13381 + C5814 * C13464 +
            C5896 * C13219 - C6153 * C13129 - C5896 * C13383 + C5815 * C13465) *
               C139736) *
              C139835 * C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q));
    d2eeyz[44] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C139835 * C266 - C265 * C108) * C182 +
            (C139835 * C495 - C265 * C348) * C139824) *
               C89 +
           ((C279 - C280) * C182 + (C502 - C503) * C139824) * C90 + C516 * C91 +
           C517 * C92) *
              C5270 +
          (((C265 * C1570 - C139835 * C1741) * C182 +
            (C265 * C1829 - C139835 * C1997) * C139824) *
               C89 +
           ((C1752 - C1753) * C182 + (C2003 - C2004) * C139824) * C90 +
           ((C1756 - C1757) * C182 + (C2005 - C2006) * C139824) * C91 +
           ((C1760 - C1761) * C182 + (C2007 - C2008) * C139824) * C92) *
              C5271 +
          (((C139835 * C5397 - C265 * C5273) * C182 +
            (C139835 * C5567 - C265 * C5455) * C139824) *
               C89 +
           ((C139835 * C5398 - C265 * C5274) * C182 +
            (C139835 * C5568 - C265 * C5456) * C139824) *
               C90 +
           ((C139835 * C5399 - C265 * C5275) * C182 +
            (C139835 * C5569 - C265 * C5457) * C139824) *
               C91 +
           ((C139835 * C5400 - C265 * C5276) * C182 +
            (C139835 * C5570 - C265 * C5458) * C139824) *
               C92) *
              C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C139835 * C266 - C265 * C108) * C5894 +
            (C139835 * C495 - C265 * C348) * C5813 + (C6915 - C6916) * C5895 +
            (C7294 - C7295) * C5814 + C9790 * C5896 + C10047 * C5815) *
               C5811 +
           ((C279 - C280) * C5894 + (C502 - C503) * C5813 + C6919 * C5895 +
            C7298 * C5814 + C6925 * C5896 + C7299 * C5815) *
               C139736) *
              C5270 +
          (((C265 * C1570 - C139835 * C1741) * C5894 +
            (C265 * C1829 - C139835 * C1997) * C5813 +
            (C10635 - C10636) * C5895 + (C10961 - C10962) * C5814 +
            (C10639 - C10640) * C5896 + (C10963 - C10964) * C5815) *
               C5811 +
           ((C1752 - C1753) * C5894 + (C2003 - C2004) * C5813 +
            (C7986 - C7987) * C5895 + (C8321 - C8322) * C5814 +
            (C7990 - C7991) * C5896 + (C8323 - C8324) * C5815) *
               C139736) *
              C5271 +
          (((C139835 * C5397 - C265 * C5273) * C5894 +
            (C139835 * C5567 - C265 * C5455) * C5813 +
            (C139835 * C13298 - C265 * C13126) * C5895 +
            (C139835 * C13540 - C265 * C13380) * C5814 +
            (C139835 * C13300 - C265 * C13128) * C5896 +
            (C139835 * C13541 - C265 * C13382) * C5815) *
               C5811 +
           ((C139835 * C5398 - C265 * C5274) * C5894 +
            (C139835 * C5568 - C265 * C5456) * C5813 +
            (C139835 * C13299 - C265 * C13127) * C5895 +
            (C139835 * C13542 - C265 * C13381) * C5814 +
            (C139835 * C13301 - C265 * C13129) * C5896 +
            (C139835 * C13543 - C265 * C13383) * C5815) *
               C139736) *
              C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q));
    d2eezx[44] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C89 * C114 - C100 * C108 + C90 * C116 - C102 * C109 + C91 * C118 -
            C104 * C110 + C92 * C120 - C106 * C111) *
               C265 +
           (C89 * C573 - C100 * C567 + C90 * C574 - C102 * C568 + C91 * C575 -
            C104 * C569 + C92 * C576 - C106 * C570) *
               C139835) *
              C139824 * C5270 +
          ((C100 * C1570 - C89 * C1578 + C102 * C1569 - C90 * C1576 +
            C104 * C1568 - C91 * C1574 + C106 * C1567 - C92 * C1572) *
               C265 +
           (C100 * C2074 - C89 * C2079 + C102 * C2075 - C90 * C2080 +
            C104 * C2076 - C91 * C2081 + C106 * C2077 - C92 * C2082) *
               C139835) *
              C139824 * C5271 +
          ((C89 * C5277 - C100 * C5273 + C90 * C5279 - C102 * C5274 +
            C91 * C5281 - C104 * C5275 + C92 * C5283 - C106 * C5276) *
               C265 +
           (C89 * C5625 - C100 * C5621 + C90 * C5626 - C102 * C5622 +
            C91 * C5627 - C104 * C5623 + C92 * C5628 - C106 * C5624) *
               C139835) *
              C139824 * C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5811 * C114 - C5816 * C108 + C139736 * C116 - C5818 * C109) *
                C265 +
            (C5811 * C573 - C5816 * C567 + C139736 * C574 - C5818 * C568) *
                C139835) *
               C5813 +
           ((C7039 - C7040 + C7041 - C7042) * C265 +
            (C7408 - C7409 + C7410 - C7411) * C139835) *
               C5814 +
           C10137 * C5815) *
              C5270 +
          (((C5816 * C1570 - C5811 * C1578 + C5818 * C1569 - C139736 * C1576) *
                C265 +
            (C5816 * C2074 - C5811 * C2079 + C5818 * C2075 - C139736 * C2080) *
                C139835) *
               C5813 +
           ((C10745 - C10746 + C10747 - C10748) * C265 +
            (C11067 - C11068 + C11069 - C11070) * C139835) *
               C5814 +
           ((C10753 - C10754 + C10755 - C10756) * C265 +
            (C11071 - C11072 + C11073 - C11074) * C139835) *
               C5815) *
              C5271 +
          (((C5811 * C5277 - C5816 * C5273 + C139736 * C5279 - C5818 * C5274) *
                C265 +
            (C5811 * C5625 - C5816 * C5621 + C139736 * C5626 - C5818 * C5622) *
                C139835) *
               C5813 +
           ((C5811 * C13130 - C5816 * C13126 + C139736 * C13132 -
             C5818 * C13127) *
                C265 +
            (C5811 * C13622 - C5816 * C13618 + C139736 * C13623 -
             C5818 * C13619) *
                C139835) *
               C5814 +
           ((C5811 * C13134 - C5816 * C13128 + C139736 * C13136 -
             C5818 * C13129) *
                C265 +
            (C5811 * C13624 - C5816 * C13620 + C139736 * C13625 -
             C5818 * C13621) *
                C139835) *
               C5815) *
              C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q));
    d2eezy[44] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C139824 * C183 - C182 * C108) * C265 +
            (C139824 * C629 - C182 * C567) * C139835) *
               C89 +
           ((C196 - C197) * C265 + (C636 - C637) * C139835) * C90 + C650 * C91 +
           C651 * C92) *
              C5270 +
          (((C182 * C1570 - C139824 * C1653) * C265 +
            (C182 * C2074 - C139824 * C2150) * C139835) *
               C89 +
           ((C1664 - C1665) * C265 + (C2156 - C2157) * C139835) * C90 +
           ((C1668 - C1669) * C265 + (C2158 - C2159) * C139835) * C91 +
           ((C1672 - C1673) * C265 + (C2160 - C2161) * C139835) * C92) *
              C5271 +
          (((C139824 * C5339 - C182 * C5273) * C265 +
            (C139824 * C5679 - C182 * C5621) * C139835) *
               C89 +
           ((C139824 * C5340 - C182 * C5274) * C265 +
            (C139824 * C5680 - C182 * C5622) * C139835) *
               C90 +
           ((C139824 * C5341 - C182 * C5275) * C265 +
            (C139824 * C5681 - C182 * C5623) * C139835) *
               C91 +
           ((C139824 * C5342 - C182 * C5276) * C265 +
            (C139824 * C5682 - C182 * C5624) * C139835) *
               C92) *
              C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5813 * C183 - C5894 * C108 + C5814 * C896 - C5895 * C813 +
             C5815 * C2974 - C5896 * C2908) *
                C265 +
            (C5813 * C629 - C5894 * C567 + C5814 * C1393 - C5895 * C1317 +
             C5815 * C3314 - C5896 * C3256) *
                C139835) *
               C5811 +
           ((C5898 - C5899 + C5900 - C5901 + C5902 - C5903) * C265 +
            (C6423 - C6424 + C6425 - C6426 + C6427 - C6428) * C139835) *
               C139736) *
              C5270 +
          (((C5894 * C1570 - C5813 * C1653 + C5895 * C3438 - C5814 * C3520 +
             C5896 * C7754 - C5815 * C7863) *
                C265 +
            (C5894 * C2074 - C5813 * C2150 + C5895 * C3882 - C5814 * C3956 +
             C5896 * C8422 - C5815 * C8526) *
                C139835) *
               C5811 +
           ((C7870 - C7871 + C7872 - C7873 + C7874 - C7875) * C265 +
            (C8530 - C8531 + C8532 - C8533 + C8534 - C8535) * C139835) *
               C139736) *
              C5271 +
          (((C5813 * C5339 - C5894 * C5273 + C5814 * C13216 - C5895 * C13126 +
             C5815 * C13217 - C5896 * C13128) *
                C265 +
            (C5813 * C5679 - C5894 * C5621 + C5814 * C13700 - C5895 * C13618 +
             C5815 * C13701 - C5896 * C13620) *
                C139835) *
               C5811 +
           ((C5813 * C5340 - C5894 * C5274 + C5814 * C13218 - C5895 * C13127 +
             C5815 * C13219 - C5896 * C13129) *
                C265 +
            (C5813 * C5680 - C5894 * C5622 + C5814 * C13702 - C5895 * C13619 +
             C5815 * C13703 - C5896 * C13621) *
                C139835) *
               C139736) *
              C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q));
    d2eezz[44] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C265 * C266 - C701 * C108 - C265 * C567 + C139835 * C702) *
               C139824 * C89 +
           C737 * C90 + C738 * C91 + C739 * C92) *
              C5270 -
          (C2254 * C92 + C2255 * C91 + C2256 * C90 +
           (C265 * C1741 - C701 * C1570 - C265 * C2074 + C139835 * C2230) *
               C139824 * C89) *
              C5271 +
          ((C265 * C5397 - C701 * C5273 - C265 * C5621 + C139835 * C5733) *
               C139824 * C89 +
           (C265 * C5398 - C701 * C5274 - C265 * C5622 + C139835 * C5734) *
               C139824 * C90 +
           (C265 * C5399 - C701 * C5275 - C265 * C5623 + C139835 * C5735) *
               C139824 * C91 +
           (C265 * C5400 - C701 * C5276 - C265 * C5624 + C139835 * C5736) *
               C139824 * C92) *
              C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C265 * C266 - C701 * C108 - C265 * C567 + C139835 * C702) * C5813 +
            C7652 * C5814 + C7653 * C5815) *
               C5811 +
           (C6509 + C6510 + C6527) * C139736) *
              C5270 -
          ((C8652 + C8653 + C8645) * C139736 +
           (C11287 * C5815 + C11288 * C5814 +
            (C265 * C1741 - C701 * C1570 - C265 * C2074 + C139835 * C2230) *
                C5813) *
               C5811) *
              C5271 +
          (((C265 * C5397 - C701 * C5273 - C265 * C5621 + C139835 * C5733) *
                C5813 +
            (C265 * C13298 - C701 * C13126 - C265 * C13618 + C139835 * C13778) *
                C5814 +
            (C265 * C13300 - C701 * C13128 - C265 * C13620 + C139835 * C13779) *
                C5815) *
               C5811 +
           ((C265 * C5398 - C701 * C5274 - C265 * C5622 + C139835 * C5734) *
                C5813 +
            (C265 * C13299 - C701 * C13127 - C265 * C13619 + C139835 * C13780) *
                C5814 +
            (C265 * C13301 - C701 * C13129 - C265 * C13621 + C139835 * C13781) *
                C5815) *
               C139736) *
              C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q));
    d2eexx[45] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C137755 * C114 - C67752 * C108 - C137755 * C115 + C139967 * C126 +
            C137748 * C116 - C67754 * C109 - C137748 * C117 + C139736 * C127) *
               C139835 * C140011 +
           (C137755 * C821 - C67752 * C813 - C137755 * C822 + C139967 * C828 +
            C137748 * C819 - C67754 * C812 - C137748 * C820 + C139736 * C827) *
               C139835 * C140012 +
           (C137755 * C2912 - C67752 * C2908 - C137755 * C2913 +
            C139967 * C2920 + C137748 * C2914 - C67754 * C2909 -
            C137748 * C2915 + C139736 * C2921) *
               C139835 * C67750) *
              C139809 * C139792 * C97 -
          ((C137748 * C2916 - C67754 * C2910 - C137748 * C2917 +
            C139736 * C2922 + C137755 * C2914 - C67752 * C2909 -
            C137755 * C2915 + C139967 * C2921) *
               C139835 * C67750 +
           (C137748 * C817 - C67754 * C811 - C137748 * C818 + C139736 * C826 +
            C137755 * C819 - C67752 * C812 - C137755 * C820 + C139967 * C827) *
               C139835 * C140012 +
           (C137748 * C118 - C67754 * C110 - C137748 * C119 + C139736 * C128 +
            C137755 * C116 - C67752 * C109 - C137755 * C117 + C139967 * C127) *
               C139835 * C140011) *
              C139809 * C139792 * C98 +
          ((C137755 * C118 - C67752 * C110 - C137755 * C119 + C139967 * C128 +
            C137748 * C120 - C67754 * C111 - C137748 * C121 + C139736 * C129) *
               C139835 * C140011 +
           (C137755 * C817 - C67752 * C811 - C137755 * C818 + C139967 * C826 +
            C137748 * C815 - C67754 * C810 - C137748 * C816 + C139736 * C825) *
               C139835 * C140012 +
           (C137755 * C2916 - C67752 * C2910 - C137755 * C2917 +
            C139967 * C2922 + C137748 * C2918 - C67754 * C2911 -
            C137748 * C2919 + C139736 * C2923) *
               C139835 * C67750) *
              C139809 * C139792 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eexy[45] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C140011 * C183 - C67829 * C108 + C140012 * C896 - C67830 * C813 +
            C67750 * C2974 - C67831 * C2908) *
               C137755 +
           (C140011 * C189 - C67829 * C115 + C140012 * C901 - C67830 * C822 +
            C67750 * C2978 - C67831 * C2913) *
               C139967 +
           (C67833 - C67834 + C67835 - C67836 + C67837 - C67838) * C137748 +
           (C67839 - C67840 + C67841 - C67842 + C67843 - C67844) * C139736) *
              C139835 * C139809 * C139792 * C97 +
          ((C67834 - C67833 + C67836 - C67835 + C67838 - C67837) * C137755 +
           (C67840 - C67839 + C67842 - C67841 + C67844 - C67843) * C139967 +
           (C67845 - C67846 + C67847 - C67848 + C67849 - C67850) * C137748 +
           (C67851 - C67852 + C67853 - C67854 + C67855 - C67856) * C139736) *
              C139835 * C139809 * C139792 * C98 +
          ((C67846 - C67845 + C67848 - C67847 + C67850 - C67849) * C137755 +
           (C67852 - C67851 + C67854 - C67853 + C67856 - C67855) * C139967 +
           (C140011 * C186 - C67829 * C111 + C140012 * C899 - C67830 * C810 +
            C67750 * C2977 - C67831 * C2911) *
               C137748 +
           (C140011 * C192 - C67829 * C121 + C140012 * C904 - C67830 * C816 +
            C67750 * C2981 - C67831 * C2919) *
               C139736) *
              C139835 * C139809 * C139792 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eexz[45] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139835 * C266 - C265 * C108) * C137755 +
            (C139835 * C272 - C265 * C115) * C139967 + (C279 - C280) * C137748 +
            (C281 - C282) * C139736) *
               C140011 +
           ((C6915 - C6916) * C137755 + (C6917 - C6918) * C139967 +
            C6919 * C137748 + C6920 * C139736) *
               C140012 +
           (C9790 * C137755 + C9791 * C139967 + C6925 * C137748 +
            C6926 * C139736) *
               C67750) *
              C139809 * C139792 * C97 +
          (((C280 - C279) * C137755 + (C282 - C281) * C139967 +
            (C284 - C283) * C137748 + (C286 - C285) * C139736) *
               C140011 +
           (C6927 * C137755 + C6928 * C139967 + C22843 * C137748 +
            C22844 * C139736) *
               C140012 +
           (C6929 * C137755 + C6930 * C139967 + (C6000 - C6001) * C137748 +
            (C6002 - C6003) * C139736) *
               C67750) *
              C139809 * C139792 * C98 +
          ((C295 * C137755 + C296 * C139967 + C297 * C137748 + C298 * C139736) *
               C140011 +
           (C21967 * C137755 + C21968 * C139967 + (C1004 - C1003) * C137748 +
            (C1006 - C1005) * C139736) *
               C140012 +
           ((C6001 - C6000) * C137755 + (C6003 - C6002) * C139967 +
            (C139835 * C3035 - C265 * C2911) * C137748 +
            (C139835 * C3039 - C265 * C2919) * C139736) *
               C67750) *
              C139809 * C139792 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[45] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C139967 * C114 - C137755 * C108 + C139736 * C116 - C137748 * C109) *
               C67829 +
           (C139967 * C354 - C137755 * C348 + C139736 * C355 - C137748 * C349) *
               C140011 +
           (C139967 * C821 - C137755 * C813 + C139736 * C819 - C137748 * C812) *
               C67830 +
           (C139967 * C1077 - C137755 * C1072 + C139736 * C1078 -
            C137748 * C1073) *
               C140012 +
           (C139967 * C2912 - C137755 * C2908 + C139736 * C2914 -
            C137748 * C2909) *
               C67831 +
           (C139967 * C3094 - C137755 * C3090 + C139736 * C3095 -
            C137748 * C3091) *
               C67750) *
              C139835 * C139809 * C139792 * C97 +
          ((C137755 * C109 - C139967 * C116 + C137748 * C110 - C139736 * C118) *
               C67829 +
           (C137755 * C349 - C139967 * C355 + C137748 * C350 - C139736 * C356) *
               C140011 +
           (C137755 * C812 - C139967 * C819 + C137748 * C811 - C139736 * C817) *
               C67830 +
           (C137755 * C1073 - C139967 * C1078 + C137748 * C1074 -
            C139736 * C1079) *
               C140012 +
           (C137755 * C2909 - C139967 * C2914 + C137748 * C2910 -
            C139736 * C2916) *
               C67831 +
           (C137755 * C3091 - C139967 * C3095 + C137748 * C3092 -
            C139736 * C3096) *
               C67750) *
              C139835 * C139809 * C139792 * C98 +
          ((C139967 * C118 - C137755 * C110 + C139736 * C120 - C137748 * C111) *
               C67829 +
           (C139967 * C356 - C137755 * C350 + C139736 * C357 - C137748 * C351) *
               C140011 +
           (C139967 * C817 - C137755 * C811 + C139736 * C815 - C137748 * C810) *
               C67830 +
           (C139967 * C1079 - C137755 * C1074 + C139736 * C1080 -
            C137748 * C1075) *
               C140012 +
           (C139967 * C2916 - C137755 * C2910 + C139736 * C2918 -
            C137748 * C2911) *
               C67831 +
           (C139967 * C3096 - C137755 * C3092 + C139736 * C3097 -
            C137748 * C3093) *
               C67750) *
              C139835 * C139809 * C139792 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[45] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C67829 * C183 - C68078 * C108 - C67829 * C348 + C140011 * C411 +
            C67830 * C896 - C68079 * C813 - C67830 * C1072 + C140012 * C1151 +
            C67831 * C2974 - C68080 * C2908 - C67831 * C3090 + C67750 * C3148) *
               C139967 +
           (C68118 + C68119 + C68120) * C139736) *
              C139835 * C139809 * C139792 * C97 -
          ((C68121 + C68122 + C68123) * C139736 +
           (C68120 + C68119 + C68118) * C139967) *
              C139835 * C139809 * C139792 * C98 +
          ((C68123 + C68122 + C68121) * C139967 +
           (C67829 * C186 - C68078 * C111 - C67829 * C351 + C140011 * C414 +
            C67830 * C899 - C68079 * C810 - C67830 * C1075 + C140012 * C1148 +
            C67831 * C2977 - C68080 * C2911 - C67831 * C3093 + C67750 * C3151) *
               C139736) *
              C139835 * C139809 * C139792 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[45] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139835 * C266 - C265 * C108) * C67829 +
            (C139835 * C495 - C265 * C348) * C140011 +
            (C6915 - C6916) * C67830 + (C7294 - C7295) * C140012 +
            C9790 * C67831 + C10047 * C67750) *
               C139967 +
           ((C279 - C280) * C67829 + (C502 - C503) * C140011 + C6919 * C67830 +
            C7298 * C140012 + C6925 * C67831 + C7299 * C67750) *
               C139736) *
              C139809 * C139792 * C97 +
          (((C280 - C279) * C67829 + (C503 - C502) * C140011 + C6927 * C67830 +
            C7300 * C140012 + C6929 * C67831 + C7301 * C67750) *
               C139967 +
           ((C284 - C283) * C67829 + (C506 - C505) * C140011 + C22843 * C67830 +
            C23191 * C140012 + (C6000 - C6001) * C67831 +
            (C6273 - C6274) * C67750) *
               C139736) *
              C139809 * C139792 * C98 +
          ((C295 * C67829 + C512 * C140011 + C21967 * C67830 +
            C22239 * C140012 + (C6001 - C6000) * C67831 +
            (C6274 - C6273) * C67750) *
               C139967 +
           (C297 * C67829 + C513 * C140011 + (C1004 - C1003) * C67830 +
            (C1251 - C1250) * C140012 +
            (C139835 * C3035 - C265 * C2911) * C67831 +
            (C139835 * C3205 - C265 * C3093) * C67750) *
               C139736) *
              C139809 * C139792 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eezx[45] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C139967 * C114 - C137755 * C108 + C139736 * C116 -
                       C137748 * C109) *
                          C265 +
                      (C139967 * C573 - C137755 * C567 + C139736 * C574 -
                       C137748 * C568) *
                          C139835) *
                         C140011 +
                     ((C139967 * C821 - C137755 * C813 + C139736 * C819 -
                       C137748 * C812) *
                          C265 +
                      (C139967 * C1322 - C137755 * C1317 + C139736 * C1323 -
                       C137748 * C1318) *
                          C139835) *
                         C140012 +
                     ((C139967 * C2912 - C137755 * C2908 + C139736 * C2914 -
                       C137748 * C2909) *
                          C265 +
                      (C139967 * C3260 - C137755 * C3256 + C139736 * C3261 -
                       C137748 * C3257) *
                          C139835) *
                         C67750) *
                        C139809 * C139792 * C97 +
                    (((C137755 * C109 - C139967 * C116 + C137748 * C110 -
                       C139736 * C118) *
                          C265 +
                      (C137755 * C568 - C139967 * C574 + C137748 * C569 -
                       C139736 * C575) *
                          C139835) *
                         C140011 +
                     ((C137755 * C812 - C139967 * C819 + C137748 * C811 -
                       C139736 * C817) *
                          C265 +
                      (C137755 * C1318 - C139967 * C1323 + C137748 * C1319 -
                       C139736 * C1324) *
                          C139835) *
                         C140012 +
                     ((C137755 * C2909 - C139967 * C2914 + C137748 * C2910 -
                       C139736 * C2916) *
                          C265 +
                      (C137755 * C3257 - C139967 * C3261 + C137748 * C3258 -
                       C139736 * C3262) *
                          C139835) *
                         C67750) *
                        C139809 * C139792 * C98 +
                    (((C139967 * C118 - C137755 * C110 + C139736 * C120 -
                       C137748 * C111) *
                          C265 +
                      (C139967 * C575 - C137755 * C569 + C139736 * C576 -
                       C137748 * C570) *
                          C139835) *
                         C140011 +
                     ((C139967 * C817 - C137755 * C811 + C139736 * C815 -
                       C137748 * C810) *
                          C265 +
                      (C139967 * C1324 - C137755 * C1319 + C139736 * C1325 -
                       C137748 * C1320) *
                          C139835) *
                         C140012 +
                     ((C139967 * C2916 - C137755 * C2910 + C139736 * C2918 -
                       C137748 * C2911) *
                          C265 +
                      (C139967 * C3262 - C137755 * C3258 + C139736 * C3263 -
                       C137748 * C3259) *
                          C139835) *
                         C67750) *
                        C139809 * C139792 * C99)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[45] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C140011 * C183 - C67829 * C108 + C140012 * C896 - C67830 * C813 +
             C67750 * C2974 - C67831 * C2908) *
                C265 +
            (C140011 * C629 - C67829 * C567 + C140012 * C1393 - C67830 * C1317 +
             C67750 * C3314 - C67831 * C3256) *
                C139835) *
               C139967 +
           ((C67833 - C67834 + C67835 - C67836 + C67837 - C67838) * C265 +
            (C68346 - C68347 + C68348 - C68349 + C68350 - C68351) * C139835) *
               C139736) *
              C139809 * C139792 * C97 +
          (((C67834 - C67833 + C67836 - C67835 + C67838 - C67837) * C265 +
            (C68347 - C68346 + C68349 - C68348 + C68351 - C68350) * C139835) *
               C139967 +
           ((C67845 - C67846 + C67847 - C67848 + C67849 - C67850) * C265 +
            (C68352 - C68353 + C68354 - C68355 + C68356 - C68357) * C139835) *
               C139736) *
              C139809 * C139792 * C98 +
          (((C67846 - C67845 + C67848 - C67847 + C67850 - C67849) * C265 +
            (C68353 - C68352 + C68355 - C68354 + C68357 - C68356) * C139835) *
               C139967 +
           ((C140011 * C186 - C67829 * C111 + C140012 * C899 - C67830 * C810 +
             C67750 * C2977 - C67831 * C2911) *
                C265 +
            (C140011 * C632 - C67829 * C570 + C140012 * C1396 - C67830 * C1320 +
             C67750 * C3317 - C67831 * C3259) *
                C139835) *
               C139736) *
              C139809 * C139792 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eezz[45] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C265 * C266 - C701 * C108 - C265 * C567 + C139835 * C702) *
                C140011 +
            C7652 * C140012 + C7653 * C67750) *
               C139967 +
           (C68432 + C68433 + C68434) * C139736) *
              C139809 * C139792 * C97 -
          ((C68435 + C68436 + C68437) * C139736 +
           (C68434 + C68433 + C68432) * C139967) *
              C139809 * C139792 * C98 +
          ((C68437 + C68436 + C68435) * C139967 +
           (C735 * C140011 + C1494 * C140012 +
            (C265 * C3035 - C701 * C2911 - C265 * C3259 + C139835 * C3371) *
                C67750) *
               C139736) *
              C139809 * C139792 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eexx[46] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C137755 * C114 - C67752 * C108 - C137755 * C115 + C139967 * C126 +
             C137748 * C116 - C67754 * C109 - C137748 * C117 + C139736 * C127) *
                C139835 * C140011 +
            (C68584 + C68585) * C139835 * C140012 +
            (C68586 + C68587) * C139835 * C67750) *
               C139809 * C806 -
           ((C137748 * C6629 - C67754 * C6626 - C137748 * C6630 +
             C139736 * C6635 + C137755 * C6631 - C67752 * C6627 -
             C137755 * C6632 + C139967 * C6636) *
                C139835 * C67750 +
            (C68587 + C68586) * C139835 * C140012 +
            (C68585 + C68584) * C139835 * C140011) *
               C139809 * C140000) *
              C808 +
          (((C68588 + C68589) * C139835 * C140011 +
            (C68590 + C68591) * C139835 * C140012 +
            (C137755 * C6629 - C67752 * C6626 - C137755 * C6630 +
             C139967 * C6635 + C137748 * C6633 - C67754 * C6628 -
             C137748 * C6634 + C139736 * C6637) *
                C139835 * C67750) *
               C139809 * C140000 -
           ((C68591 + C68590) * C139835 * C67750 +
            (C68589 + C68588) * C139835 * C140012 +
            (C137748 * C118 - C67754 * C110 - C137748 * C119 + C139736 * C128 +
             C137755 * C116 - C67752 * C109 - C137755 * C117 + C139967 * C127) *
                C139835 * C140011) *
               C139809 * C806) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexy[46] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C140011 * C183 - C67829 * C108 + C140012 * C896 - C67830 * C813 +
             C67750 * C2974 - C67831 * C2908) *
                C137755 +
            (C140011 * C189 - C67829 * C115 + C140012 * C901 - C67830 * C822 +
             C67750 * C2978 - C67831 * C2913) *
                C139967 +
            (C67833 - C67834 + C67835 - C67836 + C67837 - C67838) * C137748 +
            (C67839 - C67840 + C67841 - C67842 + C67843 - C67844) * C139736) *
               C139835 * C139809 * C806 +
           ((C67829 * C813 - C140011 * C896 + C67830 * C2908 - C140012 * C2974 +
             C67831 * C6627 - C67750 * C6792) *
                C137755 +
            (C67829 * C822 - C140011 * C901 + C67830 * C2913 - C140012 * C2978 +
             C67831 * C6632 - C67750 * C6795) *
                C139967 +
            (C68690 - C68691 + C68692 - C68693 + C68694 - C68695) * C137748 +
            (C68696 - C68697 + C68698 - C68699 + C68700 - C68701) * C139736) *
               C139835 * C139809 * C140000) *
              C808 +
          (((C67834 - C67833 + C67836 - C67835 + C67838 - C67837) * C137755 +
            (C67840 - C67839 + C67842 - C67841 + C67844 - C67843) * C139967 +
            (C67845 - C67846 + C67847 - C67848 + C67849 - C67850) * C137748 +
            (C67851 - C67852 + C67853 - C67854 + C67855 - C67856) * C139736) *
               C139835 * C139809 * C806 +
           ((C68691 - C68690 + C68693 - C68692 + C68695 - C68694) * C137755 +
            (C68697 - C68696 + C68699 - C68698 + C68701 - C68700) * C139967 +
            (C140011 * C898 - C67829 * C811 + C140012 * C2976 - C67830 * C2910 +
             C67750 * C6794 - C67831 * C6628) *
                C137748 +
            (C140011 * C903 - C67829 * C818 + C140012 * C2980 - C67830 * C2917 +
             C67750 * C6797 - C67831 * C6634) *
                C139736) *
               C139835 * C139809 * C140000) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexz[46] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C139835 * C266 - C265 * C108) * C137755 +
                       (C139835 * C272 - C265 * C115) * C139967 +
                       (C279 - C280) * C137748 + (C281 - C282) * C139736) *
                          C140011 +
                      ((C6915 - C6916) * C137755 + (C6917 - C6918) * C139967 +
                       C6919 * C137748 + C6920 * C139736) *
                          C140012 +
                      (C9790 * C137755 + C9791 * C139967 + C6925 * C137748 +
                       C6926 * C139736) *
                          C67750) *
                         C139809 * C806 +
                     (((C6916 - C6915) * C137755 + (C6918 - C6917) * C139967 +
                       C6927 * C137748 + C6928 * C139736) *
                          C140011 +
                      ((C6922 - C6921) * C137755 + (C6924 - C6923) * C139967 +
                       C6929 * C137748 + C6930 * C139736) *
                          C140012 +
                      ((C9794 - C9795) * C137755 + (C9796 - C9797) * C139967 +
                       (C6931 - C6932) * C137748 + (C6933 - C6934) * C139736) *
                          C67750) *
                         C139809 * C140000) *
                        C808 +
                    ((((C280 - C279) * C137755 + (C282 - C281) * C139967 +
                       (C284 - C283) * C137748 + (C286 - C285) * C139736) *
                          C140011 +
                      (C6927 * C137755 + C6928 * C139967 + C22843 * C137748 +
                       C22844 * C139736) *
                          C140012 +
                      (C6929 * C137755 + C6930 * C139967 +
                       (C6000 - C6001) * C137748 + (C6002 - C6003) * C139736) *
                          C67750) *
                         C139809 * C806 +
                     ((C6919 * C137755 + C6920 * C139967 + C21967 * C137748 +
                       C21968 * C139736) *
                          C140011 +
                      (C6925 * C137755 + C6926 * C139967 +
                       (C6001 - C6000) * C137748 + (C6003 - C6002) * C139736) *
                          C140012 +
                      ((C6932 - C6931) * C137755 + (C6934 - C6933) * C139967 +
                       (C139835 * C6910 - C265 * C6628) * C137748 +
                       (C139835 * C6913 - C265 * C6634) * C139736) *
                          C67750) *
                         C139809 * C140000) *
                        C139998)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[46] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C139967 * C114 - C137755 * C108 + C139736 * C116 -
                       C137748 * C109) *
                          C67829 +
                      (C139967 * C354 - C137755 * C348 + C139736 * C355 -
                       C137748 * C349) *
                          C140011 +
                      (C68898 - C68899 + C68900 - C68901) * C67830 +
                      (C68902 - C68903 + C68904 - C68905) * C140012 +
                      (C68906 - C68907 + C68908 - C68909) * C67831 +
                      (C68910 - C68911 + C68912 - C68913) * C67750) *
                         C139835 * C139809 * C806 +
                     ((C68899 - C68898 + C68901 - C68900) * C67829 +
                      (C68903 - C68902 + C68905 - C68904) * C140011 +
                      (C68907 - C68906 + C68909 - C68908) * C67830 +
                      (C68911 - C68910 + C68913 - C68912) * C140012 +
                      (C137755 * C6627 - C139967 * C6631 + C137748 * C6626 -
                       C139736 * C6629) *
                          C67831 +
                      (C137755 * C7032 - C139967 * C7035 + C137748 * C7033 -
                       C139736 * C7036) *
                          C67750) *
                         C139835 * C139809 * C140000) *
                        C808 +
                    (((C137755 * C109 - C139967 * C116 + C137748 * C110 -
                       C139736 * C118) *
                          C67829 +
                      (C137755 * C349 - C139967 * C355 + C137748 * C350 -
                       C139736 * C356) *
                          C140011 +
                      (C68914 - C68915 + C68916 - C68917) * C67830 +
                      (C68918 - C68919 + C68920 - C68921) * C140012 +
                      (C68922 - C68923 + C68924 - C68925) * C67831 +
                      (C68926 - C68927 + C68928 - C68929) * C67750) *
                         C139835 * C139809 * C806 +
                     ((C68915 - C68914 + C68917 - C68916) * C67829 +
                      (C68919 - C68918 + C68921 - C68920) * C140011 +
                      (C68923 - C68922 + C68925 - C68924) * C67830 +
                      (C68927 - C68926 + C68929 - C68928) * C140012 +
                      (C139967 * C6629 - C137755 * C6626 + C139736 * C6633 -
                       C137748 * C6628) *
                          C67831 +
                      (C139967 * C7036 - C137755 * C7033 + C139736 * C7037 -
                       C137748 * C7034) *
                          C67750) *
                         C139835 * C139809 * C140000) *
                        C139998)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[46] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C67829 * C183 - C68078 * C108 - C67829 * C348 +
                       C140011 * C411 + C67830 * C896 - C68079 * C813 -
                       C67830 * C1072 + C140012 * C1151 + C67831 * C2974 -
                       C68080 * C2908 - C67831 * C3090 + C67750 * C3148) *
                          C139967 +
                      (C68118 + C68119 + C68120) * C139736) *
                         C139835 * C139809 * C806 -
                     ((C69046 + C69047 + C69048) * C139736 +
                      (C67831 * C6792 - C68080 * C6627 - C67831 * C7032 +
                       C67750 * C7169 + C67830 * C2974 - C68079 * C2908 -
                       C67830 * C3090 + C140012 * C3148 + C67829 * C896 -
                       C68078 * C813 - C67829 * C1072 + C140011 * C1151) *
                          C139967) *
                         C139835 * C139809 * C140000) *
                        C808 +
                    (((C69048 + C69047 + C69046) * C139967 +
                      (C67829 * C898 - C68078 * C811 - C67829 * C1074 +
                       C140011 * C1149 + C67830 * C2976 - C68079 * C2910 -
                       C67830 * C3092 + C140012 * C3150 + C67831 * C6794 -
                       C68080 * C6628 - C67831 * C7034 + C67750 * C7170) *
                          C139736) *
                         C139835 * C139809 * C140000 -
                     ((C68121 + C68122 + C68123) * C139736 +
                      (C68120 + C68119 + C68118) * C139967) *
                         C139835 * C139809 * C806) *
                        C139998)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[46] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139835 * C266 - C265 * C108) * C67829 +
             (C139835 * C495 - C265 * C348) * C140011 +
             (C6915 - C6916) * C67830 + (C7294 - C7295) * C140012 +
             C9790 * C67831 + C10047 * C67750) *
                C139967 +
            ((C279 - C280) * C67829 + (C502 - C503) * C140011 + C6919 * C67830 +
             C7298 * C140012 + C6925 * C67831 + C7299 * C67750) *
                C139736) *
               C139809 * C806 +
           (((C6916 - C6915) * C67829 + (C7295 - C7294) * C140011 +
             (C6922 - C6921) * C67830 + (C7297 - C7296) * C140012 +
             (C9794 - C9795) * C67831 + (C10048 - C10049) * C67750) *
                C139967 +
            (C6927 * C67829 + C7300 * C140011 + C6929 * C67830 +
             C7301 * C140012 + (C6931 - C6932) * C67831 +
             (C7302 - C7303) * C67750) *
                C139736) *
               C139809 * C140000) *
              C808 +
          ((((C280 - C279) * C67829 + (C503 - C502) * C140011 + C6927 * C67830 +
             C7300 * C140012 + C6929 * C67831 + C7301 * C67750) *
                C139967 +
            ((C284 - C283) * C67829 + (C506 - C505) * C140011 +
             C22843 * C67830 + C23191 * C140012 + (C6000 - C6001) * C67831 +
             (C6273 - C6274) * C67750) *
                C139736) *
               C139809 * C806 +
           ((C6919 * C67829 + C7298 * C140011 + C6925 * C67830 +
             C7299 * C140012 + (C6932 - C6931) * C67831 +
             (C7303 - C7302) * C67750) *
                C139967 +
            (C21967 * C67829 + C22239 * C140011 + (C6001 - C6000) * C67830 +
             (C6274 - C6273) * C140012 +
             (C139835 * C6910 - C265 * C6628) * C67831 +
             (C139835 * C7292 - C265 * C7034) * C67750) *
                C139736) *
               C139809 * C140000) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eezx[46] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C139967 * C114 - C137755 * C108 + C139736 * C116 -
                        C137748 * C109) *
                           C265 +
                       (C139967 * C573 - C137755 * C567 + C139736 * C574 -
                        C137748 * C568) *
                           C139835) *
                          C140011 +
                      ((C68898 - C68899 + C68900 - C68901) * C265 +
                       (C69245 - C69246 + C69247 - C69248) * C139835) *
                          C140012 +
                      ((C68906 - C68907 + C68908 - C68909) * C265 +
                       (C69249 - C69250 + C69251 - C69252) * C139835) *
                          C67750) *
                         C139809 * C806 +
                     (((C68899 - C68898 + C68901 - C68900) * C265 +
                       (C69246 - C69245 + C69248 - C69247) * C139835) *
                          C140011 +
                      ((C68907 - C68906 + C68909 - C68908) * C265 +
                       (C69250 - C69249 + C69252 - C69251) * C139835) *
                          C140012 +
                      ((C137755 * C6627 - C139967 * C6631 + C137748 * C6626 -
                        C139736 * C6629) *
                           C265 +
                       (C137755 * C7401 - C139967 * C7404 + C137748 * C7402 -
                        C139736 * C7405) *
                           C139835) *
                          C67750) *
                         C139809 * C140000) *
                        C808 +
                    ((((C137755 * C109 - C139967 * C116 + C137748 * C110 -
                        C139736 * C118) *
                           C265 +
                       (C137755 * C568 - C139967 * C574 + C137748 * C569 -
                        C139736 * C575) *
                           C139835) *
                          C140011 +
                      ((C68914 - C68915 + C68916 - C68917) * C265 +
                       (C69253 - C69254 + C69255 - C69256) * C139835) *
                          C140012 +
                      ((C68922 - C68923 + C68924 - C68925) * C265 +
                       (C69257 - C69258 + C69259 - C69260) * C139835) *
                          C67750) *
                         C139809 * C806 +
                     (((C68915 - C68914 + C68917 - C68916) * C265 +
                       (C69254 - C69253 + C69256 - C69255) * C139835) *
                          C140011 +
                      ((C68923 - C68922 + C68925 - C68924) * C265 +
                       (C69258 - C69257 + C69260 - C69259) * C139835) *
                          C140012 +
                      ((C139967 * C6629 - C137755 * C6626 + C139736 * C6633 -
                        C137748 * C6628) *
                           C265 +
                       (C139967 * C7405 - C137755 * C7402 + C139736 * C7406 -
                        C137748 * C7403) *
                           C139835) *
                          C67750) *
                         C139809 * C140000) *
                        C139998)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[46] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C140011 * C183 - C67829 * C108 + C140012 * C896 - C67830 * C813 +
              C67750 * C2974 - C67831 * C2908) *
                 C265 +
             (C140011 * C629 - C67829 * C567 + C140012 * C1393 -
              C67830 * C1317 + C67750 * C3314 - C67831 * C3256) *
                 C139835) *
                C139967 +
            ((C67833 - C67834 + C67835 - C67836 + C67837 - C67838) * C265 +
             (C68346 - C68347 + C68348 - C68349 + C68350 - C68351) * C139835) *
                C139736) *
               C139809 * C806 +
           (((C67829 * C813 - C140011 * C896 + C67830 * C2908 -
              C140012 * C2974 + C67831 * C6627 - C67750 * C6792) *
                 C265 +
             (C67829 * C1317 - C140011 * C1393 + C67830 * C3256 -
              C140012 * C3314 + C67831 * C7401 - C67750 * C7521) *
                 C139835) *
                C139967 +
            ((C68690 - C68691 + C68692 - C68693 + C68694 - C68695) * C265 +
             (C69359 - C69360 + C69361 - C69362 + C69363 - C69364) * C139835) *
                C139736) *
               C139809 * C140000) *
              C808 +
          ((((C67834 - C67833 + C67836 - C67835 + C67838 - C67837) * C265 +
             (C68347 - C68346 + C68349 - C68348 + C68351 - C68350) * C139835) *
                C139967 +
            ((C67845 - C67846 + C67847 - C67848 + C67849 - C67850) * C265 +
             (C68352 - C68353 + C68354 - C68355 + C68356 - C68357) * C139835) *
                C139736) *
               C139809 * C806 +
           (((C68691 - C68690 + C68693 - C68692 + C68695 - C68694) * C265 +
             (C69360 - C69359 + C69362 - C69361 + C69364 - C69363) * C139835) *
                C139967 +
            ((C140011 * C898 - C67829 * C811 + C140012 * C2976 -
              C67830 * C2910 + C67750 * C6794 - C67831 * C6628) *
                 C265 +
             (C140011 * C1395 - C67829 * C1319 + C140012 * C3316 -
              C67830 * C3258 + C67750 * C7523 - C67831 * C7403) *
                 C139835) *
                C139736) *
               C139809 * C140000) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eezz[46] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C265 * C266 - C701 * C108 - C265 * C567 + C139835 * C702) *
                 C140011 +
             C7652 * C140012 + C7653 * C67750) *
                C139967 +
            (C68432 + C68433 + C68434) * C139736) *
               C139809 * C806 -
           ((C69463 + C69464 + C69465) * C139736 +
            (C10296 * C67750 + C7653 * C140012 + C7652 * C140011) * C139967) *
               C139809 * C140000) *
              C808 +
          (((C69465 + C69464 + C69463) * C139967 +
            (C1495 * C140011 + C6526 * C140012 +
             (C265 * C6910 - C701 * C6628 - C265 * C7403 + C139835 * C7630) *
                 C67750) *
                C139736) *
               C139809 * C140000 -
           ((C68435 + C68436 + C68437) * C139736 +
            (C68434 + C68433 + C68432) * C139967) *
               C139809 * C806) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexx[47] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C137755 * C114 - C67752 * C108 - C137755 * C115 + C139967 * C126 +
             C137748 * C116 - C67754 * C109 - C137748 * C117 + C139736 * C127) *
                C139835 * C140011 +
            (C68584 + C68585) * C139835 * C140012 +
            (C68586 + C68587) * C139835 * C67750) *
               C1565 -
           ((C137748 * C7756 - C67754 * C7753 - C137748 * C7757 +
             C139736 * C7762 + C137755 * C7758 - C67752 * C7754 -
             C137755 * C7759 + C139967 * C7763) *
                C139835 * C67750 +
            (C137748 * C3444 - C67754 * C3439 - C137748 * C3445 +
             C139736 * C3451 + C137755 * C3442 - C67752 * C3438 -
             C137755 * C3443 + C139967 * C3450) *
                C139835 * C140012 +
            (C137748 * C1576 - C67754 * C1569 - C137748 * C1577 +
             C139736 * C1584 + C137755 * C1578 - C67752 * C1570 -
             C137755 * C1579 + C139967 * C1585) *
                C139835 * C140011) *
               C140002) *
              C139792 * C808 +
          (((C137755 * C1576 - C67752 * C1569 - C137755 * C1577 +
             C139967 * C1584 + C137748 * C1574 - C67754 * C1568 -
             C137748 * C1575 + C139736 * C1583) *
                C139835 * C140011 +
            (C137755 * C3444 - C67752 * C3439 - C137755 * C3445 +
             C139967 * C3451 + C137748 * C3446 - C67754 * C3440 -
             C137748 * C3447 + C139736 * C3452) *
                C139835 * C140012 +
            (C137755 * C7756 - C67752 * C7753 - C137755 * C7757 +
             C139967 * C7762 + C137748 * C7760 - C67754 * C7755 -
             C137748 * C7761 + C139736 * C7764) *
                C139835 * C67750) *
               C140002 -
           ((C68591 + C68590) * C139835 * C67750 +
            (C68589 + C68588) * C139835 * C140012 +
            (C137748 * C118 - C67754 * C110 - C137748 * C119 + C139736 * C128 +
             C137755 * C116 - C67752 * C109 - C137755 * C117 + C139967 * C127) *
                C139835 * C140011) *
               C1565) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexy[47] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C140011 * C183 - C67829 * C108 + C140012 * C896 - C67830 * C813 +
             C67750 * C2974 - C67831 * C2908) *
                C137755 +
            (C140011 * C189 - C67829 * C115 + C140012 * C901 - C67830 * C822 +
             C67750 * C2978 - C67831 * C2913) *
                C139967 +
            (C67833 - C67834 + C67835 - C67836 + C67837 - C67838) * C137748 +
            (C67839 - C67840 + C67841 - C67842 + C67843 - C67844) * C139736) *
               C139835 * C1565 +
           ((C67829 * C1570 - C140011 * C1653 + C67830 * C3438 -
             C140012 * C3520 + C67831 * C7754 - C67750 * C7863) *
                C137755 +
            (C67829 * C1579 - C140011 * C1658 + C67830 * C3443 -
             C140012 * C3524 + C67831 * C7759 - C67750 * C7866) *
                C139967 +
            (C69662 - C69663 + C69664 - C69665 + C69666 - C69667) * C137748 +
            (C69668 - C69669 + C69670 - C69671 + C69672 - C69673) * C139736) *
               C139835 * C140002) *
              C139792 * C808 +
          (((C67834 - C67833 + C67836 - C67835 + C67838 - C67837) * C137755 +
            (C67840 - C67839 + C67842 - C67841 + C67844 - C67843) * C139967 +
            (C67845 - C67846 + C67847 - C67848 + C67849 - C67850) * C137748 +
            (C67851 - C67852 + C67853 - C67854 + C67855 - C67856) * C139736) *
               C139835 * C1565 +
           ((C69663 - C69662 + C69665 - C69664 + C69667 - C69666) * C137755 +
            (C69669 - C69668 + C69671 - C69670 + C69673 - C69672) * C139967 +
            (C140011 * C1655 - C67829 * C1568 + C140012 * C3522 -
             C67830 * C3440 + C67750 * C7865 - C67831 * C7755) *
                C137748 +
            (C140011 * C1660 - C67829 * C1575 + C140012 * C3526 -
             C67830 * C3447 + C67750 * C7868 - C67831 * C7761) *
                C139736) *
               C139835 * C140002) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexz[47] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139835 * C266 - C265 * C108) * C137755 +
             (C139835 * C272 - C265 * C115) * C139967 +
             (C279 - C280) * C137748 + (C281 - C282) * C139736) *
                C140011 +
            ((C6915 - C6916) * C137755 + (C6917 - C6918) * C139967 +
             C6919 * C137748 + C6920 * C139736) *
                C140012 +
            (C9790 * C137755 + C9791 * C139967 + C6925 * C137748 +
             C6926 * C139736) *
                C67750) *
               C1565 +
           (((C265 * C1570 - C139835 * C1741) * C137755 +
             (C265 * C1579 - C139835 * C1746) * C139967 +
             (C1752 - C1753) * C137748 + (C1754 - C1755) * C139736) *
                C140011 +
            ((C10635 - C10636) * C137755 + (C10637 - C10638) * C139967 +
             (C7986 - C7987) * C137748 + (C7988 - C7989) * C139736) *
                C140012 +
            ((C10639 - C10640) * C137755 + (C10641 - C10642) * C139967 +
             (C7990 - C7991) * C137748 + (C7992 - C7993) * C139736) *
                C67750) *
               C140002) *
              C139792 * C808 +
          ((((C280 - C279) * C137755 + (C282 - C281) * C139967 +
             (C284 - C283) * C137748 + (C286 - C285) * C139736) *
                C140011 +
            (C6927 * C137755 + C6928 * C139967 + C22843 * C137748 +
             C22844 * C139736) *
                C140012 +
            (C6929 * C137755 + C6930 * C139967 + (C6000 - C6001) * C137748 +
             (C6002 - C6003) * C139736) *
                C67750) *
               C1565 +
           (((C1753 - C1752) * C137755 + (C1755 - C1754) * C139967 +
             (C1757 - C1756) * C137748 + (C1759 - C1758) * C139736) *
                C140011 +
            ((C7987 - C7986) * C137755 + (C7989 - C7988) * C139967 +
             (C23821 - C23820) * C137748 + (C23823 - C23822) * C139736) *
                C140012 +
            ((C7991 - C7990) * C137755 + (C7993 - C7992) * C139967 +
             (C139835 * C7981 - C265 * C7755) * C137748 +
             (C139835 * C7984 - C265 * C7761) * C139736) *
                C67750) *
               C140002) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[47] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C139967 * C114 - C137755 * C108 + C139736 * C116 -
                       C137748 * C109) *
                          C67829 +
                      (C139967 * C354 - C137755 * C348 + C139736 * C355 -
                       C137748 * C349) *
                          C140011 +
                      (C68898 - C68899 + C68900 - C68901) * C67830 +
                      (C68902 - C68903 + C68904 - C68905) * C140012 +
                      (C68906 - C68907 + C68908 - C68909) * C67831 +
                      (C68910 - C68911 + C68912 - C68913) * C67750) *
                         C139835 * C1565 +
                     ((C137755 * C1570 - C139967 * C1578 + C137748 * C1569 -
                       C139736 * C1576) *
                          C67829 +
                      (C137755 * C1829 - C139967 * C1834 + C137748 * C1830 -
                       C139736 * C1835) *
                          C140011 +
                      (C137755 * C3438 - C139967 * C3442 + C137748 * C3439 -
                       C139736 * C3444) *
                          C67830 +
                      (C137755 * C3668 - C139967 * C3672 + C137748 * C3669 -
                       C139736 * C3673) *
                          C140012 +
                      (C137755 * C7754 - C139967 * C7758 + C137748 * C7753 -
                       C139736 * C7756) *
                          C67831 +
                      (C137755 * C8091 - C139967 * C8094 + C137748 * C8092 -
                       C139736 * C8095) *
                          C67750) *
                         C139835 * C140002) *
                        C139792 * C808 +
                    (((C137755 * C109 - C139967 * C116 + C137748 * C110 -
                       C139736 * C118) *
                          C67829 +
                      (C137755 * C349 - C139967 * C355 + C137748 * C350 -
                       C139736 * C356) *
                          C140011 +
                      (C68914 - C68915 + C68916 - C68917) * C67830 +
                      (C68918 - C68919 + C68920 - C68921) * C140012 +
                      (C68922 - C68923 + C68924 - C68925) * C67831 +
                      (C68926 - C68927 + C68928 - C68929) * C67750) *
                         C139835 * C1565 +
                     ((C139967 * C1576 - C137755 * C1569 + C139736 * C1574 -
                       C137748 * C1568) *
                          C67829 +
                      (C139967 * C1835 - C137755 * C1830 + C139736 * C1836 -
                       C137748 * C1831) *
                          C140011 +
                      (C139967 * C3444 - C137755 * C3439 + C139736 * C3446 -
                       C137748 * C3440) *
                          C67830 +
                      (C139967 * C3673 - C137755 * C3669 + C139736 * C3674 -
                       C137748 * C3670) *
                          C140012 +
                      (C139967 * C7756 - C137755 * C7753 + C139736 * C7760 -
                       C137748 * C7755) *
                          C67831 +
                      (C139967 * C8095 - C137755 * C8092 + C139736 * C8096 -
                       C137748 * C8093) *
                          C67750) *
                         C139835 * C140002) *
                        C139792 * C139998)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[47] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C67829 * C183 - C68078 * C108 - C67829 * C348 +
                       C140011 * C411 + C67830 * C896 - C68079 * C813 -
                       C67830 * C1072 + C140012 * C1151 + C67831 * C2974 -
                       C68080 * C2908 - C67831 * C3090 + C67750 * C3148) *
                          C139967 +
                      (C68118 + C68119 + C68120) * C139736) *
                         C139835 * C1565 -
                     ((C69986 + C69987 + C69988) * C139736 +
                      (C67831 * C7863 - C68080 * C7754 - C67831 * C8091 +
                       C67750 * C8196 + C67830 * C3520 - C68079 * C3438 -
                       C67830 * C3668 + C140012 * C3742 + C67829 * C1653 -
                       C68078 * C1570 - C67829 * C1829 + C140011 * C1908) *
                          C139967) *
                         C139835 * C140002) *
                        C139792 * C808 +
                    (((C69988 + C69987 + C69986) * C139967 +
                      (C67829 * C1655 - C68078 * C1568 - C67829 * C1831 +
                       C140011 * C1906 + C67830 * C3522 - C68079 * C3440 -
                       C67830 * C3670 + C140012 * C3744 + C67831 * C7865 -
                       C68080 * C7755 - C67831 * C8093 + C67750 * C8197) *
                          C139736) *
                         C139835 * C140002 -
                     ((C68121 + C68122 + C68123) * C139736 +
                      (C68120 + C68119 + C68118) * C139967) *
                         C139835 * C1565) *
                        C139792 * C139998)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[47] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139835 * C266 - C265 * C108) * C67829 +
             (C139835 * C495 - C265 * C348) * C140011 +
             (C6915 - C6916) * C67830 + (C7294 - C7295) * C140012 +
             C9790 * C67831 + C10047 * C67750) *
                C139967 +
            ((C279 - C280) * C67829 + (C502 - C503) * C140011 + C6919 * C67830 +
             C7298 * C140012 + C6925 * C67831 + C7299 * C67750) *
                C139736) *
               C1565 +
           (((C265 * C1570 - C139835 * C1741) * C67829 +
             (C265 * C1829 - C139835 * C1997) * C140011 +
             (C10635 - C10636) * C67830 + (C10961 - C10962) * C140012 +
             (C10639 - C10640) * C67831 + (C10963 - C10964) * C67750) *
                C139967 +
            ((C1752 - C1753) * C67829 + (C2003 - C2004) * C140011 +
             (C7986 - C7987) * C67830 + (C8321 - C8322) * C140012 +
             (C7990 - C7991) * C67831 + (C8323 - C8324) * C67750) *
                C139736) *
               C140002) *
              C139792 * C808 +
          ((((C280 - C279) * C67829 + (C503 - C502) * C140011 + C6927 * C67830 +
             C7300 * C140012 + C6929 * C67831 + C7301 * C67750) *
                C139967 +
            ((C284 - C283) * C67829 + (C506 - C505) * C140011 +
             C22843 * C67830 + C23191 * C140012 + (C6000 - C6001) * C67831 +
             (C6273 - C6274) * C67750) *
                C139736) *
               C1565 +
           (((C1753 - C1752) * C67829 + (C2004 - C2003) * C140011 +
             (C7987 - C7986) * C67830 + (C8322 - C8321) * C140012 +
             (C7991 - C7990) * C67831 + (C8324 - C8323) * C67750) *
                C139967 +
            ((C1757 - C1756) * C67829 + (C2006 - C2005) * C140011 +
             (C23821 - C23820) * C67830 + (C24147 - C24146) * C140012 +
             (C139835 * C7981 - C265 * C7755) * C67831 +
             (C139835 * C8319 - C265 * C8093) * C67750) *
                C139736) *
               C140002) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eezx[47] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C139967 * C114 - C137755 * C108 + C139736 * C116 -
                        C137748 * C109) *
                           C265 +
                       (C139967 * C573 - C137755 * C567 + C139736 * C574 -
                        C137748 * C568) *
                           C139835) *
                          C140011 +
                      ((C68898 - C68899 + C68900 - C68901) * C265 +
                       (C69245 - C69246 + C69247 - C69248) * C139835) *
                          C140012 +
                      ((C68906 - C68907 + C68908 - C68909) * C265 +
                       (C69249 - C69250 + C69251 - C69252) * C139835) *
                          C67750) *
                         C1565 +
                     (((C137755 * C1570 - C139967 * C1578 + C137748 * C1569 -
                        C139736 * C1576) *
                           C265 +
                       (C137755 * C2074 - C139967 * C2079 + C137748 * C2075 -
                        C139736 * C2080) *
                           C139835) *
                          C140011 +
                      ((C137755 * C3438 - C139967 * C3442 + C137748 * C3439 -
                        C139736 * C3444) *
                           C265 +
                       (C137755 * C3882 - C139967 * C3886 + C137748 * C3883 -
                        C139736 * C3887) *
                           C139835) *
                          C140012 +
                      ((C137755 * C7754 - C139967 * C7758 + C137748 * C7753 -
                        C139736 * C7756) *
                           C265 +
                       (C137755 * C8422 - C139967 * C8425 + C137748 * C8423 -
                        C139736 * C8426) *
                           C139835) *
                          C67750) *
                         C140002) *
                        C139792 * C808 +
                    ((((C137755 * C109 - C139967 * C116 + C137748 * C110 -
                        C139736 * C118) *
                           C265 +
                       (C137755 * C568 - C139967 * C574 + C137748 * C569 -
                        C139736 * C575) *
                           C139835) *
                          C140011 +
                      ((C68914 - C68915 + C68916 - C68917) * C265 +
                       (C69253 - C69254 + C69255 - C69256) * C139835) *
                          C140012 +
                      ((C68922 - C68923 + C68924 - C68925) * C265 +
                       (C69257 - C69258 + C69259 - C69260) * C139835) *
                          C67750) *
                         C1565 +
                     (((C139967 * C1576 - C137755 * C1569 + C139736 * C1574 -
                        C137748 * C1568) *
                           C265 +
                       (C139967 * C2080 - C137755 * C2075 + C139736 * C2081 -
                        C137748 * C2076) *
                           C139835) *
                          C140011 +
                      ((C139967 * C3444 - C137755 * C3439 + C139736 * C3446 -
                        C137748 * C3440) *
                           C265 +
                       (C139967 * C3887 - C137755 * C3883 + C139736 * C3888 -
                        C137748 * C3884) *
                           C139835) *
                          C140012 +
                      ((C139967 * C7756 - C137755 * C7753 + C139736 * C7760 -
                        C137748 * C7755) *
                           C265 +
                       (C139967 * C8426 - C137755 * C8423 + C139736 * C8427 -
                        C137748 * C8424) *
                           C139835) *
                          C67750) *
                         C140002) *
                        C139792 * C139998)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[47] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C140011 * C183 - C67829 * C108 + C140012 * C896 - C67830 * C813 +
              C67750 * C2974 - C67831 * C2908) *
                 C265 +
             (C140011 * C629 - C67829 * C567 + C140012 * C1393 -
              C67830 * C1317 + C67750 * C3314 - C67831 * C3256) *
                 C139835) *
                C139967 +
            ((C67833 - C67834 + C67835 - C67836 + C67837 - C67838) * C265 +
             (C68346 - C68347 + C68348 - C68349 + C68350 - C68351) * C139835) *
                C139736) *
               C1565 +
           (((C67829 * C1570 - C140011 * C1653 + C67830 * C3438 -
              C140012 * C3520 + C67831 * C7754 - C67750 * C7863) *
                 C265 +
             (C67829 * C2074 - C140011 * C2150 + C67830 * C3882 -
              C140012 * C3956 + C67831 * C8422 - C67750 * C8526) *
                 C139835) *
                C139967 +
            ((C69662 - C69663 + C69664 - C69665 + C69666 - C69667) * C265 +
             (C70283 - C70284 + C70285 - C70286 + C70287 - C70288) * C139835) *
                C139736) *
               C140002) *
              C139792 * C808 +
          ((((C67834 - C67833 + C67836 - C67835 + C67838 - C67837) * C265 +
             (C68347 - C68346 + C68349 - C68348 + C68351 - C68350) * C139835) *
                C139967 +
            ((C67845 - C67846 + C67847 - C67848 + C67849 - C67850) * C265 +
             (C68352 - C68353 + C68354 - C68355 + C68356 - C68357) * C139835) *
                C139736) *
               C1565 +
           (((C69663 - C69662 + C69665 - C69664 + C69667 - C69666) * C265 +
             (C70284 - C70283 + C70286 - C70285 + C70288 - C70287) * C139835) *
                C139967 +
            ((C140011 * C1655 - C67829 * C1568 + C140012 * C3522 -
              C67830 * C3440 + C67750 * C7865 - C67831 * C7755) *
                 C265 +
             (C140011 * C2152 - C67829 * C2076 + C140012 * C3958 -
              C67830 * C3884 + C67750 * C8528 - C67831 * C8424) *
                 C139835) *
                C139736) *
               C140002) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eezz[47] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C265 * C266 - C701 * C108 - C265 * C567 + C139835 * C702) *
                 C140011 +
             C7652 * C140012 + C7653 * C67750) *
                C139967 +
            (C68432 + C68433 + C68434) * C139736) *
               C1565 -
           ((C70387 + C70388 + C70389) * C139736 +
            (C11287 * C67750 + C11288 * C140012 +
             (C265 * C1741 - C701 * C1570 - C265 * C2074 + C139835 * C2230) *
                 C140011) *
                C139967) *
               C140002) *
              C139792 * C808 +
          (((C70389 + C70388 + C70387) * C139967 +
            (C2252 * C140011 + C24459 * C140012 +
             (C265 * C7981 - C701 * C7755 - C265 * C8424 + C139835 * C8635) *
                 C67750) *
                C139736) *
               C140002 -
           ((C68435 + C68436 + C68437) * C139736 +
            (C68434 + C68433 + C68432) * C139967) *
               C1565) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexx[48] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C137755 * C114 - C67752 * C108 - C137755 * C115 + C139967 * C126 +
             C137748 * C116 - C67754 * C109 - C137748 * C117 + C139736 * C127) *
                C139835 * C140011 +
            (C68584 + C68585) * C139835 * C140012 +
            (C68586 + C68587) * C139835 * C67750) *
               C139809 * C2322 -
           ((C137748 * C6629 - C67754 * C6626 - C137748 * C6630 +
             C139736 * C6635 + C137755 * C6631 - C67752 * C6627 -
             C137755 * C6632 + C139967 * C6636) *
                C139835 * C67750 +
            (C68587 + C68586) * C139835 * C140012 +
            (C68585 + C68584) * C139835 * C140011) *
               C139809 * C140000) *
              C2324 +
          (((C68588 + C68589) * C139835 * C140011 +
            (C68590 + C68591) * C139835 * C140012 +
            (C137755 * C6629 - C67752 * C6626 - C137755 * C6630 +
             C139967 * C6635 + C137748 * C6633 - C67754 * C6628 -
             C137748 * C6634 + C139736 * C6637) *
                C139835 * C67750) *
               C139809 * C140000 -
           ((C68591 + C68590) * C139835 * C67750 +
            (C68589 + C68588) * C139835 * C140012 +
            (C137748 * C118 - C67754 * C110 - C137748 * C119 + C139736 * C128 +
             C137755 * C116 - C67752 * C109 - C137755 * C117 + C139967 * C127) *
                C139835 * C140011) *
               C139809 * C2322) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexy[48] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C140011 * C183 - C67829 * C108 + C140012 * C896 - C67830 * C813 +
             C67750 * C2974 - C67831 * C2908) *
                C137755 +
            (C140011 * C189 - C67829 * C115 + C140012 * C901 - C67830 * C822 +
             C67750 * C2978 - C67831 * C2913) *
                C139967 +
            (C67833 - C67834 + C67835 - C67836 + C67837 - C67838) * C137748 +
            (C67839 - C67840 + C67841 - C67842 + C67843 - C67844) * C139736) *
               C139835 * C139809 * C2322 +
           ((C67829 * C813 - C140011 * C896 + C67830 * C2908 - C140012 * C2974 +
             C67831 * C6627 - C67750 * C6792) *
                C137755 +
            (C67829 * C822 - C140011 * C901 + C67830 * C2913 - C140012 * C2978 +
             C67831 * C6632 - C67750 * C6795) *
                C139967 +
            (C68690 - C68691 + C68692 - C68693 + C68694 - C68695) * C137748 +
            (C68696 - C68697 + C68698 - C68699 + C68700 - C68701) * C139736) *
               C139835 * C139809 * C140000) *
              C2324 +
          (((C67834 - C67833 + C67836 - C67835 + C67838 - C67837) * C137755 +
            (C67840 - C67839 + C67842 - C67841 + C67844 - C67843) * C139967 +
            (C67845 - C67846 + C67847 - C67848 + C67849 - C67850) * C137748 +
            (C67851 - C67852 + C67853 - C67854 + C67855 - C67856) * C139736) *
               C139835 * C139809 * C2322 +
           ((C68691 - C68690 + C68693 - C68692 + C68695 - C68694) * C137755 +
            (C68697 - C68696 + C68699 - C68698 + C68701 - C68700) * C139967 +
            (C140011 * C898 - C67829 * C811 + C140012 * C2976 - C67830 * C2910 +
             C67750 * C6794 - C67831 * C6628) *
                C137748 +
            (C140011 * C903 - C67829 * C818 + C140012 * C2980 - C67830 * C2917 +
             C67750 * C6797 - C67831 * C6634) *
                C139736) *
               C139835 * C139809 * C140000) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexz[48] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C139835 * C266 - C265 * C108) * C137755 +
                       (C139835 * C272 - C265 * C115) * C139967 +
                       (C279 - C280) * C137748 + (C281 - C282) * C139736) *
                          C140011 +
                      ((C6915 - C6916) * C137755 + (C6917 - C6918) * C139967 +
                       C6919 * C137748 + C6920 * C139736) *
                          C140012 +
                      (C9790 * C137755 + C9791 * C139967 + C6925 * C137748 +
                       C6926 * C139736) *
                          C67750) *
                         C139809 * C2322 +
                     (((C6916 - C6915) * C137755 + (C6918 - C6917) * C139967 +
                       C6927 * C137748 + C6928 * C139736) *
                          C140011 +
                      ((C6922 - C6921) * C137755 + (C6924 - C6923) * C139967 +
                       C6929 * C137748 + C6930 * C139736) *
                          C140012 +
                      ((C9794 - C9795) * C137755 + (C9796 - C9797) * C139967 +
                       (C6931 - C6932) * C137748 + (C6933 - C6934) * C139736) *
                          C67750) *
                         C139809 * C140000) *
                        C2324 +
                    ((((C280 - C279) * C137755 + (C282 - C281) * C139967 +
                       (C284 - C283) * C137748 + (C286 - C285) * C139736) *
                          C140011 +
                      (C6927 * C137755 + C6928 * C139967 + C22843 * C137748 +
                       C22844 * C139736) *
                          C140012 +
                      (C6929 * C137755 + C6930 * C139967 +
                       (C6000 - C6001) * C137748 + (C6002 - C6003) * C139736) *
                          C67750) *
                         C139809 * C2322 +
                     ((C6919 * C137755 + C6920 * C139967 + C21967 * C137748 +
                       C21968 * C139736) *
                          C140011 +
                      (C6925 * C137755 + C6926 * C139967 +
                       (C6001 - C6000) * C137748 + (C6003 - C6002) * C139736) *
                          C140012 +
                      ((C6932 - C6931) * C137755 + (C6934 - C6933) * C139967 +
                       (C139835 * C6910 - C265 * C6628) * C137748 +
                       (C139835 * C6913 - C265 * C6634) * C139736) *
                          C67750) *
                         C139809 * C140000) *
                        C139998)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[48] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C139967 * C114 - C137755 * C108 + C139736 * C116 -
                       C137748 * C109) *
                          C67829 +
                      (C139967 * C354 - C137755 * C348 + C139736 * C355 -
                       C137748 * C349) *
                          C140011 +
                      (C68898 - C68899 + C68900 - C68901) * C67830 +
                      (C68902 - C68903 + C68904 - C68905) * C140012 +
                      (C68906 - C68907 + C68908 - C68909) * C67831 +
                      (C68910 - C68911 + C68912 - C68913) * C67750) *
                         C139835 * C139809 * C2322 +
                     ((C68899 - C68898 + C68901 - C68900) * C67829 +
                      (C68903 - C68902 + C68905 - C68904) * C140011 +
                      (C68907 - C68906 + C68909 - C68908) * C67830 +
                      (C68911 - C68910 + C68913 - C68912) * C140012 +
                      (C137755 * C6627 - C139967 * C6631 + C137748 * C6626 -
                       C139736 * C6629) *
                          C67831 +
                      (C137755 * C7032 - C139967 * C7035 + C137748 * C7033 -
                       C139736 * C7036) *
                          C67750) *
                         C139835 * C139809 * C140000) *
                        C2324 +
                    (((C137755 * C109 - C139967 * C116 + C137748 * C110 -
                       C139736 * C118) *
                          C67829 +
                      (C137755 * C349 - C139967 * C355 + C137748 * C350 -
                       C139736 * C356) *
                          C140011 +
                      (C68914 - C68915 + C68916 - C68917) * C67830 +
                      (C68918 - C68919 + C68920 - C68921) * C140012 +
                      (C68922 - C68923 + C68924 - C68925) * C67831 +
                      (C68926 - C68927 + C68928 - C68929) * C67750) *
                         C139835 * C139809 * C2322 +
                     ((C68915 - C68914 + C68917 - C68916) * C67829 +
                      (C68919 - C68918 + C68921 - C68920) * C140011 +
                      (C68923 - C68922 + C68925 - C68924) * C67830 +
                      (C68927 - C68926 + C68929 - C68928) * C140012 +
                      (C139967 * C6629 - C137755 * C6626 + C139736 * C6633 -
                       C137748 * C6628) *
                          C67831 +
                      (C139967 * C7036 - C137755 * C7033 + C139736 * C7037 -
                       C137748 * C7034) *
                          C67750) *
                         C139835 * C139809 * C140000) *
                        C139998)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[48] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C67829 * C183 - C68078 * C108 - C67829 * C348 +
                       C140011 * C411 + C67830 * C896 - C68079 * C813 -
                       C67830 * C1072 + C140012 * C1151 + C67831 * C2974 -
                       C68080 * C2908 - C67831 * C3090 + C67750 * C3148) *
                          C139967 +
                      (C68118 + C68119 + C68120) * C139736) *
                         C139835 * C139809 * C2322 -
                     ((C69046 + C69047 + C69048) * C139736 +
                      (C67831 * C6792 - C68080 * C6627 - C67831 * C7032 +
                       C67750 * C7169 + C67830 * C2974 - C68079 * C2908 -
                       C67830 * C3090 + C140012 * C3148 + C67829 * C896 -
                       C68078 * C813 - C67829 * C1072 + C140011 * C1151) *
                          C139967) *
                         C139835 * C139809 * C140000) *
                        C2324 +
                    (((C69048 + C69047 + C69046) * C139967 +
                      (C67829 * C898 - C68078 * C811 - C67829 * C1074 +
                       C140011 * C1149 + C67830 * C2976 - C68079 * C2910 -
                       C67830 * C3092 + C140012 * C3150 + C67831 * C6794 -
                       C68080 * C6628 - C67831 * C7034 + C67750 * C7170) *
                          C139736) *
                         C139835 * C139809 * C140000 -
                     ((C68121 + C68122 + C68123) * C139736 +
                      (C68120 + C68119 + C68118) * C139967) *
                         C139835 * C139809 * C2322) *
                        C139998)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[48] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139835 * C266 - C265 * C108) * C67829 +
             (C139835 * C495 - C265 * C348) * C140011 +
             (C6915 - C6916) * C67830 + (C7294 - C7295) * C140012 +
             C9790 * C67831 + C10047 * C67750) *
                C139967 +
            ((C279 - C280) * C67829 + (C502 - C503) * C140011 + C6919 * C67830 +
             C7298 * C140012 + C6925 * C67831 + C7299 * C67750) *
                C139736) *
               C139809 * C2322 +
           (((C6916 - C6915) * C67829 + (C7295 - C7294) * C140011 +
             (C6922 - C6921) * C67830 + (C7297 - C7296) * C140012 +
             (C9794 - C9795) * C67831 + (C10048 - C10049) * C67750) *
                C139967 +
            (C6927 * C67829 + C7300 * C140011 + C6929 * C67830 +
             C7301 * C140012 + (C6931 - C6932) * C67831 +
             (C7302 - C7303) * C67750) *
                C139736) *
               C139809 * C140000) *
              C2324 +
          ((((C280 - C279) * C67829 + (C503 - C502) * C140011 + C6927 * C67830 +
             C7300 * C140012 + C6929 * C67831 + C7301 * C67750) *
                C139967 +
            ((C284 - C283) * C67829 + (C506 - C505) * C140011 +
             C22843 * C67830 + C23191 * C140012 + (C6000 - C6001) * C67831 +
             (C6273 - C6274) * C67750) *
                C139736) *
               C139809 * C2322 +
           ((C6919 * C67829 + C7298 * C140011 + C6925 * C67830 +
             C7299 * C140012 + (C6932 - C6931) * C67831 +
             (C7303 - C7302) * C67750) *
                C139967 +
            (C21967 * C67829 + C22239 * C140011 + (C6001 - C6000) * C67830 +
             (C6274 - C6273) * C140012 +
             (C139835 * C6910 - C265 * C6628) * C67831 +
             (C139835 * C7292 - C265 * C7034) * C67750) *
                C139736) *
               C139809 * C140000) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eezx[48] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C139967 * C114 - C137755 * C108 + C139736 * C116 -
                        C137748 * C109) *
                           C265 +
                       (C139967 * C573 - C137755 * C567 + C139736 * C574 -
                        C137748 * C568) *
                           C139835) *
                          C140011 +
                      ((C68898 - C68899 + C68900 - C68901) * C265 +
                       (C69245 - C69246 + C69247 - C69248) * C139835) *
                          C140012 +
                      ((C68906 - C68907 + C68908 - C68909) * C265 +
                       (C69249 - C69250 + C69251 - C69252) * C139835) *
                          C67750) *
                         C139809 * C2322 +
                     (((C68899 - C68898 + C68901 - C68900) * C265 +
                       (C69246 - C69245 + C69248 - C69247) * C139835) *
                          C140011 +
                      ((C68907 - C68906 + C68909 - C68908) * C265 +
                       (C69250 - C69249 + C69252 - C69251) * C139835) *
                          C140012 +
                      ((C137755 * C6627 - C139967 * C6631 + C137748 * C6626 -
                        C139736 * C6629) *
                           C265 +
                       (C137755 * C7401 - C139967 * C7404 + C137748 * C7402 -
                        C139736 * C7405) *
                           C139835) *
                          C67750) *
                         C139809 * C140000) *
                        C2324 +
                    ((((C137755 * C109 - C139967 * C116 + C137748 * C110 -
                        C139736 * C118) *
                           C265 +
                       (C137755 * C568 - C139967 * C574 + C137748 * C569 -
                        C139736 * C575) *
                           C139835) *
                          C140011 +
                      ((C68914 - C68915 + C68916 - C68917) * C265 +
                       (C69253 - C69254 + C69255 - C69256) * C139835) *
                          C140012 +
                      ((C68922 - C68923 + C68924 - C68925) * C265 +
                       (C69257 - C69258 + C69259 - C69260) * C139835) *
                          C67750) *
                         C139809 * C2322 +
                     (((C68915 - C68914 + C68917 - C68916) * C265 +
                       (C69254 - C69253 + C69256 - C69255) * C139835) *
                          C140011 +
                      ((C68923 - C68922 + C68925 - C68924) * C265 +
                       (C69258 - C69257 + C69260 - C69259) * C139835) *
                          C140012 +
                      ((C139967 * C6629 - C137755 * C6626 + C139736 * C6633 -
                        C137748 * C6628) *
                           C265 +
                       (C139967 * C7405 - C137755 * C7402 + C139736 * C7406 -
                        C137748 * C7403) *
                           C139835) *
                          C67750) *
                         C139809 * C140000) *
                        C139998)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[48] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C140011 * C183 - C67829 * C108 + C140012 * C896 - C67830 * C813 +
              C67750 * C2974 - C67831 * C2908) *
                 C265 +
             (C140011 * C629 - C67829 * C567 + C140012 * C1393 -
              C67830 * C1317 + C67750 * C3314 - C67831 * C3256) *
                 C139835) *
                C139967 +
            ((C67833 - C67834 + C67835 - C67836 + C67837 - C67838) * C265 +
             (C68346 - C68347 + C68348 - C68349 + C68350 - C68351) * C139835) *
                C139736) *
               C139809 * C2322 +
           (((C67829 * C813 - C140011 * C896 + C67830 * C2908 -
              C140012 * C2974 + C67831 * C6627 - C67750 * C6792) *
                 C265 +
             (C67829 * C1317 - C140011 * C1393 + C67830 * C3256 -
              C140012 * C3314 + C67831 * C7401 - C67750 * C7521) *
                 C139835) *
                C139967 +
            ((C68690 - C68691 + C68692 - C68693 + C68694 - C68695) * C265 +
             (C69359 - C69360 + C69361 - C69362 + C69363 - C69364) * C139835) *
                C139736) *
               C139809 * C140000) *
              C2324 +
          ((((C67834 - C67833 + C67836 - C67835 + C67838 - C67837) * C265 +
             (C68347 - C68346 + C68349 - C68348 + C68351 - C68350) * C139835) *
                C139967 +
            ((C67845 - C67846 + C67847 - C67848 + C67849 - C67850) * C265 +
             (C68352 - C68353 + C68354 - C68355 + C68356 - C68357) * C139835) *
                C139736) *
               C139809 * C2322 +
           (((C68691 - C68690 + C68693 - C68692 + C68695 - C68694) * C265 +
             (C69360 - C69359 + C69362 - C69361 + C69364 - C69363) * C139835) *
                C139967 +
            ((C140011 * C898 - C67829 * C811 + C140012 * C2976 -
              C67830 * C2910 + C67750 * C6794 - C67831 * C6628) *
                 C265 +
             (C140011 * C1395 - C67829 * C1319 + C140012 * C3316 -
              C67830 * C3258 + C67750 * C7523 - C67831 * C7403) *
                 C139835) *
                C139736) *
               C139809 * C140000) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eezz[48] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C265 * C266 - C701 * C108 - C265 * C567 + C139835 * C702) *
                 C140011 +
             C7652 * C140012 + C7653 * C67750) *
                C139967 +
            (C68432 + C68433 + C68434) * C139736) *
               C139809 * C2322 -
           ((C69463 + C69464 + C69465) * C139736 +
            (C10296 * C67750 + C7653 * C140012 + C7652 * C140011) * C139967) *
               C139809 * C140000) *
              C2324 +
          (((C69465 + C69464 + C69463) * C139967 +
            (C1495 * C140011 + C6526 * C140012 +
             (C265 * C6910 - C701 * C6628 - C265 * C7403 + C139835 * C7630) *
                 C67750) *
                C139736) *
               C139809 * C140000 -
           ((C68435 + C68436 + C68437) * C139736 +
            (C68434 + C68433 + C68432) * C139967) *
               C139809 * C2322) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexx[49] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C137755 * C114 - C67752 * C108 - C137755 * C115 + C139967 * C126 +
            C137748 * C116 - C67754 * C109 - C137748 * C117 + C139736 * C127) *
               C139835 * C140011 +
           (C68584 + C68585) * C139835 * C140012 + C71355 * C67750) *
              C139809 * C2904 -
          ((C71360 + C71361) * C139835 * C67750 +
           (C68587 + C68586) * C139835 * C140012 +
           (C68585 + C68584) * C139835 * C140011) *
              C139809 * C2905 +
          (C71355 * C140011 + (C71361 + C71360) * C139835 * C140012 +
           (C137755 * C9611 - C67752 * C9609 - C137755 * C9612 +
            C139967 * C9615 + C137748 * C9613 - C67754 * C9610 -
            C137748 * C9614 + C139736 * C9616) *
               C139835 * C67750) *
              C139809 * C2906) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eexy[49] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C140011 * C183 - C67829 * C108 + C140012 * C896 - C67830 * C813 +
            C67750 * C2974 - C67831 * C2908) *
               C137755 +
           (C140011 * C189 - C67829 * C115 + C140012 * C901 - C67830 * C822 +
            C67750 * C2978 - C67831 * C2913) *
               C139967 +
           (C67833 - C67834 + C67835 - C67836 + C67837 - C67838) * C137748 +
           (C67839 - C67840 + C67841 - C67842 + C67843 - C67844) * C139736) *
              C139835 * C139809 * C2904 +
          ((C67829 * C813 - C140011 * C896 + C67830 * C2908 - C140012 * C2974 +
            C67831 * C6627 - C67750 * C6792) *
               C137755 +
           (C67829 * C822 - C140011 * C901 + C67830 * C2913 - C140012 * C2978 +
            C67831 * C6632 - C67750 * C6795) *
               C139967 +
           (C68690 - C68691 + C68692 - C68693 + C68694 - C68695) * C137748 +
           (C68696 - C68697 + C68698 - C68699 + C68700 - C68701) * C139736) *
              C139835 * C139809 * C2905 +
          ((C140011 * C2974 - C67829 * C2908 + C140012 * C6792 -
            C67830 * C6627 + C67750 * C9707 - C67831 * C9609) *
               C137755 +
           (C140011 * C2978 - C67829 * C2913 + C140012 * C6795 -
            C67830 * C6632 + C67750 * C9709 - C67831 * C9612) *
               C139967 +
           (C140011 * C2975 - C67829 * C2909 + C140012 * C6793 -
            C67830 * C6626 + C67750 * C9708 - C67831 * C9610) *
               C137748 +
           (C140011 * C2979 - C67829 * C2915 + C140012 * C6796 -
            C67830 * C6630 + C67750 * C9710 - C67831 * C9614) *
               C139736) *
              C139835 * C139809 * C2906) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eexz[49] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139835 * C266 - C265 * C108) * C137755 +
            (C139835 * C272 - C265 * C115) * C139967 + (C279 - C280) * C137748 +
            (C281 - C282) * C139736) *
               C140011 +
           ((C6915 - C6916) * C137755 + (C6917 - C6918) * C139967 +
            C6919 * C137748 + C6920 * C139736) *
               C140012 +
           C71516 * C67750) *
              C139809 * C2904 +
          (((C6916 - C6915) * C137755 + (C6918 - C6917) * C139967 +
            C6927 * C137748 + C6928 * C139736) *
               C140011 +
           ((C6922 - C6921) * C137755 + (C6924 - C6923) * C139967 +
            C6929 * C137748 + C6930 * C139736) *
               C140012 +
           ((C9794 - C9795) * C137755 + (C9796 - C9797) * C139967 +
            (C6931 - C6932) * C137748 + (C6933 - C6934) * C139736) *
               C67750) *
              C139809 * C2905 +
          (C71516 * C140011 +
           (C57235 * C137755 + C57236 * C139967 + (C6932 - C6931) * C137748 +
            (C6934 - C6933) * C139736) *
               C140012 +
           ((C57238 - C57237) * C137755 + (C57240 - C57239) * C139967 +
            (C139835 * C9786 - C265 * C9610) * C137748 +
            (C139835 * C9788 - C265 * C9614) * C139736) *
               C67750) *
              C139809 * C2906) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eeyx[49] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C139967 * C114 - C137755 * C108 + C139736 * C116 - C137748 * C109) *
               C67829 +
           (C139967 * C354 - C137755 * C348 + C139736 * C355 - C137748 * C349) *
               C140011 +
           (C68898 - C68899 + C68900 - C68901) * C67830 +
           (C68902 - C68903 + C68904 - C68905) * C140012 + C71603 * C67831 +
           C71604 * C67750) *
              C139835 * C139809 * C2904 +
          ((C68899 - C68898 + C68901 - C68900) * C67829 +
           (C68903 - C68902 + C68905 - C68904) * C140011 +
           (C68907 - C68906 + C68909 - C68908) * C67830 +
           (C68911 - C68910 + C68913 - C68912) * C140012 +
           (C71595 - C71596 + C71597 - C71598) * C67831 +
           (C71599 - C71600 + C71601 - C71602) * C67750) *
              C139835 * C139809 * C2905 +
          (C71603 * C67829 + C71604 * C140011 +
           (C71596 - C71595 + C71598 - C71597) * C67830 +
           (C71600 - C71599 + C71602 - C71601) * C140012 +
           (C139967 * C9611 - C137755 * C9609 + C139736 * C9613 -
            C137748 * C9610) *
               C67831 +
           (C139967 * C9878 - C137755 * C9876 + C139736 * C9879 -
            C137748 * C9877) *
               C67750) *
              C139835 * C139809 * C2906) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eeyy[49] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C67829 * C183 - C68078 * C108 - C67829 * C348 + C140011 * C411 +
            C67830 * C896 - C68079 * C813 - C67830 * C1072 + C140012 * C1151 +
            C67831 * C2974 - C68080 * C2908 - C67831 * C3090 + C67750 * C3148) *
               C139967 +
           (C68118 + C68119 + C68120) * C139736) *
              C139835 * C139809 * C2904 -
          ((C69046 + C69047 + C69048) * C139736 +
           (C67831 * C6792 - C68080 * C6627 - C67831 * C7032 + C67750 * C7169 +
            C67830 * C2974 - C68079 * C2908 - C67830 * C3090 + C140012 * C3148 +
            C67829 * C896 - C68078 * C813 - C67829 * C1072 + C140011 * C1151) *
               C139967) *
              C139835 * C139809 * C2905 +
          ((C67829 * C2974 - C68078 * C2908 - C67829 * C3090 + C140011 * C3148 +
            C67830 * C6792 - C68079 * C6627 - C67830 * C7032 + C140012 * C7169 +
            C67831 * C9707 - C68080 * C9609 - C67831 * C9876 + C67750 * C9968) *
               C139967 +
           (C67829 * C2975 - C68078 * C2909 - C67829 * C3091 + C140011 * C3149 +
            C67830 * C6793 - C68079 * C6626 - C67830 * C7033 + C140012 * C7168 +
            C67831 * C9708 - C68080 * C9610 - C67831 * C9877 + C67750 * C9969) *
               C139736) *
              C139835 * C139809 * C2906) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eeyz[49] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139835 * C266 - C265 * C108) * C67829 +
            (C139835 * C495 - C265 * C348) * C140011 +
            (C6915 - C6916) * C67830 + (C7294 - C7295) * C140012 +
            C9790 * C67831 + C10047 * C67750) *
               C139967 +
           ((C279 - C280) * C67829 + (C502 - C503) * C140011 + C6919 * C67830 +
            C7298 * C140012 + C6925 * C67831 + C7299 * C67750) *
               C139736) *
              C139809 * C2904 +
          (((C6916 - C6915) * C67829 + (C7295 - C7294) * C140011 +
            (C6922 - C6921) * C67830 + (C7297 - C7296) * C140012 +
            (C9794 - C9795) * C67831 + (C10048 - C10049) * C67750) *
               C139967 +
           (C6927 * C67829 + C7300 * C140011 + C6929 * C67830 +
            C7301 * C140012 + (C6931 - C6932) * C67831 +
            (C7302 - C7303) * C67750) *
               C139736) *
              C139809 * C2905 +
          ((C9790 * C67829 + C10047 * C140011 + C57235 * C67830 +
            C57407 * C140012 + (C57238 - C57237) * C67831 +
            (C57409 - C57408) * C67750) *
               C139967 +
           (C6925 * C67829 + C7299 * C140011 + (C6932 - C6931) * C67830 +
            (C7303 - C7302) * C140012 +
            (C139835 * C9786 - C265 * C9610) * C67831 +
            (C139835 * C10045 - C265 * C9877) * C67750) *
               C139736) *
              C139809 * C2906) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eezx[49] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C139967 * C114 - C137755 * C108 + C139736 * C116 -
                       C137748 * C109) *
                          C265 +
                      (C139967 * C573 - C137755 * C567 + C139736 * C574 -
                       C137748 * C568) *
                          C139835) *
                         C140011 +
                     ((C68898 - C68899 + C68900 - C68901) * C265 +
                      (C69245 - C69246 + C69247 - C69248) * C139835) *
                         C140012 +
                     C71836 * C67750) *
                        C139809 * C2904 +
                    (((C68899 - C68898 + C68901 - C68900) * C265 +
                      (C69246 - C69245 + C69248 - C69247) * C139835) *
                         C140011 +
                     ((C68907 - C68906 + C68909 - C68908) * C265 +
                      (C69250 - C69249 + C69252 - C69251) * C139835) *
                         C140012 +
                     ((C71595 - C71596 + C71597 - C71598) * C265 +
                      (C71830 - C71831 + C71832 - C71833) * C139835) *
                         C67750) *
                        C139809 * C2905 +
                    (C71836 * C140011 +
                     ((C71596 - C71595 + C71598 - C71597) * C265 +
                      (C71831 - C71830 + C71833 - C71832) * C139835) *
                         C140012 +
                     ((C139967 * C9611 - C137755 * C9609 + C139736 * C9613 -
                       C137748 * C9610) *
                          C265 +
                      (C139967 * C10125 - C137755 * C10123 + C139736 * C10126 -
                       C137748 * C10124) *
                          C139835) *
                         C67750) *
                        C139809 * C2906) *
                   C139758) /
                  (p * q * std::sqrt(p + q));
    d2eezy[49] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C140011 * C183 - C67829 * C108 + C140012 * C896 - C67830 * C813 +
             C67750 * C2974 - C67831 * C2908) *
                C265 +
            (C140011 * C629 - C67829 * C567 + C140012 * C1393 - C67830 * C1317 +
             C67750 * C3314 - C67831 * C3256) *
                C139835) *
               C139967 +
           ((C67833 - C67834 + C67835 - C67836 + C67837 - C67838) * C265 +
            (C68346 - C68347 + C68348 - C68349 + C68350 - C68351) * C139835) *
               C139736) *
              C139809 * C2904 +
          (((C67829 * C813 - C140011 * C896 + C67830 * C2908 - C140012 * C2974 +
             C67831 * C6627 - C67750 * C6792) *
                C265 +
            (C67829 * C1317 - C140011 * C1393 + C67830 * C3256 -
             C140012 * C3314 + C67831 * C7401 - C67750 * C7521) *
                C139835) *
               C139967 +
           ((C68690 - C68691 + C68692 - C68693 + C68694 - C68695) * C265 +
            (C69359 - C69360 + C69361 - C69362 + C69363 - C69364) * C139835) *
               C139736) *
              C139809 * C2905 +
          (((C140011 * C2974 - C67829 * C2908 + C140012 * C6792 -
             C67830 * C6627 + C67750 * C9707 - C67831 * C9609) *
                C265 +
            (C140011 * C3314 - C67829 * C3256 + C140012 * C7521 -
             C67830 * C7401 + C67750 * C10211 - C67831 * C10123) *
                C139835) *
               C139967 +
           ((C140011 * C2975 - C67829 * C2909 + C140012 * C6793 -
             C67830 * C6626 + C67750 * C9708 - C67831 * C9610) *
                C265 +
            (C140011 * C3315 - C67829 * C3257 + C140012 * C7522 -
             C67830 * C7402 + C67750 * C10212 - C67831 * C10124) *
                C139835) *
               C139736) *
              C139809 * C2906) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eezz[49] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C265 * C266 - C701 * C108 - C265 * C567 + C139835 * C702) *
                C140011 +
            C7652 * C140012 + C7653 * C67750) *
               C139967 +
           (C68432 + C68433 + C68434) * C139736) *
              C139809 * C2904 -
          ((C69463 + C69464 + C69465) * C139736 +
           (C10296 * C67750 + C7653 * C140012 + C7652 * C140011) * C139967) *
              C139809 * C2905 +
          ((C7653 * C140011 + C10296 * C140012 + C57580 * C67750) * C139967 +
           (C6525 * C140011 + C7654 * C140012 +
            (C265 * C9786 - C701 * C9610 - C265 * C10124 + C139835 * C10288) *
                C67750) *
               C139736) *
              C139809 * C2906) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eexx[50] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C137755 * C114 - C67752 * C108 - C137755 * C115 + C139967 * C126 +
             C137748 * C116 - C67754 * C109 - C137748 * C117 + C139736 * C127) *
                C139835 * C140011 +
            (C68584 + C68585) * C139835 * C140012 + C71355 * C67750) *
               C1565 -
           ((C72107 + C72108) * C139835 * C67750 +
            (C72109 + C72110) * C139835 * C140012 +
            (C137748 * C1576 - C67754 * C1569 - C137748 * C1577 +
             C139736 * C1584 + C137755 * C1578 - C67752 * C1570 -
             C137755 * C1579 + C139967 * C1585) *
                C139835 * C140011) *
               C140002) *
              C2322 +
          (((C72110 + C72109) * C139835 * C140011 +
            (C72108 + C72107) * C139835 * C140012 +
            (C137755 * C10396 - C67752 * C10394 - C137755 * C10397 +
             C139967 * C10400 + C137748 * C10398 - C67754 * C10395 -
             C137748 * C10399 + C139736 * C10401) *
                C139835 * C67750) *
               C140002 -
           ((C71360 + C71361) * C139835 * C67750 +
            (C68587 + C68586) * C139835 * C140012 +
            (C68585 + C68584) * C139835 * C140011) *
               C1565) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eexy[50] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C140011 * C183 - C67829 * C108 + C140012 * C896 - C67830 * C813 +
             C67750 * C2974 - C67831 * C2908) *
                C137755 +
            (C140011 * C189 - C67829 * C115 + C140012 * C901 - C67830 * C822 +
             C67750 * C2978 - C67831 * C2913) *
                C139967 +
            (C67833 - C67834 + C67835 - C67836 + C67837 - C67838) * C137748 +
            (C67839 - C67840 + C67841 - C67842 + C67843 - C67844) * C139736) *
               C139835 * C1565 +
           ((C67829 * C1570 - C140011 * C1653 + C67830 * C3438 -
             C140012 * C3520 + C67831 * C7754 - C67750 * C7863) *
                C137755 +
            (C67829 * C1579 - C140011 * C1658 + C67830 * C3443 -
             C140012 * C3524 + C67831 * C7759 - C67750 * C7866) *
                C139967 +
            (C69662 - C69663 + C69664 - C69665 + C69666 - C69667) * C137748 +
            (C69668 - C69669 + C69670 - C69671 + C69672 - C69673) * C139736) *
               C139835 * C140002) *
              C2322 +
          (((C67829 * C813 - C140011 * C896 + C67830 * C2908 - C140012 * C2974 +
             C67831 * C6627 - C67750 * C6792) *
                C137755 +
            (C67829 * C822 - C140011 * C901 + C67830 * C2913 - C140012 * C2978 +
             C67831 * C6632 - C67750 * C6795) *
                C139967 +
            (C68690 - C68691 + C68692 - C68693 + C68694 - C68695) * C137748 +
            (C68696 - C68697 + C68698 - C68699 + C68700 - C68701) * C139736) *
               C139835 * C1565 +
           ((C140011 * C3520 - C67829 * C3438 + C140012 * C7863 -
             C67830 * C7754 + C67750 * C10528 - C67831 * C10394) *
                C137755 +
            (C140011 * C3524 - C67829 * C3443 + C140012 * C7866 -
             C67830 * C7759 + C67750 * C10530 - C67831 * C10397) *
                C139967 +
            (C140011 * C3521 - C67829 * C3439 + C140012 * C7864 -
             C67830 * C7753 + C67750 * C10529 - C67831 * C10395) *
                C137748 +
            (C140011 * C3525 - C67829 * C3445 + C140012 * C7867 -
             C67830 * C7757 + C67750 * C10531 - C67831 * C10399) *
                C139736) *
               C139835 * C140002) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eexz[50] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139835 * C266 - C265 * C108) * C137755 +
             (C139835 * C272 - C265 * C115) * C139967 +
             (C279 - C280) * C137748 + (C281 - C282) * C139736) *
                C140011 +
            ((C6915 - C6916) * C137755 + (C6917 - C6918) * C139967 +
             C6919 * C137748 + C6920 * C139736) *
                C140012 +
            C71516 * C67750) *
               C1565 +
           (((C265 * C1570 - C139835 * C1741) * C137755 +
             (C265 * C1579 - C139835 * C1746) * C139967 +
             (C1752 - C1753) * C137748 + (C1754 - C1755) * C139736) *
                C140011 +
            ((C10635 - C10636) * C137755 + (C10637 - C10638) * C139967 +
             (C7986 - C7987) * C137748 + (C7988 - C7989) * C139736) *
                C140012 +
            ((C10639 - C10640) * C137755 + (C10641 - C10642) * C139967 +
             (C7990 - C7991) * C137748 + (C7992 - C7993) * C139736) *
                C67750) *
               C140002) *
              C2322 +
          ((((C6916 - C6915) * C137755 + (C6918 - C6917) * C139967 +
             C6927 * C137748 + C6928 * C139736) *
                C140011 +
            ((C6922 - C6921) * C137755 + (C6924 - C6923) * C139967 +
             C6929 * C137748 + C6930 * C139736) *
                C140012 +
            ((C9794 - C9795) * C137755 + (C9796 - C9797) * C139967 +
             (C6931 - C6932) * C137748 + (C6933 - C6934) * C139736) *
                C67750) *
               C1565 +
           (((C10636 - C10635) * C137755 + (C10638 - C10637) * C139967 +
             (C7987 - C7986) * C137748 + (C7989 - C7988) * C139736) *
                C140011 +
            ((C10640 - C10639) * C137755 + (C10642 - C10641) * C139967 +
             (C7991 - C7990) * C137748 + (C7993 - C7992) * C139736) *
                C140012 +
            ((C57812 - C57811) * C137755 + (C57814 - C57813) * C139967 +
             (C139835 * C10631 - C265 * C10395) * C137748 +
             (C139835 * C10633 - C265 * C10399) * C139736) *
                C67750) *
               C140002) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eeyx[50] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C139967 * C114 - C137755 * C108 + C139736 * C116 -
                       C137748 * C109) *
                          C67829 +
                      (C139967 * C354 - C137755 * C348 + C139736 * C355 -
                       C137748 * C349) *
                          C140011 +
                      (C68898 - C68899 + C68900 - C68901) * C67830 +
                      (C68902 - C68903 + C68904 - C68905) * C140012 +
                      C71603 * C67831 + C71604 * C67750) *
                         C139835 * C1565 +
                     ((C137755 * C1570 - C139967 * C1578 + C137748 * C1569 -
                       C139736 * C1576) *
                          C67829 +
                      (C137755 * C1829 - C139967 * C1834 + C137748 * C1830 -
                       C139736 * C1835) *
                          C140011 +
                      (C72405 - C72406 + C72407 - C72408) * C67830 +
                      (C72409 - C72410 + C72411 - C72412) * C140012 +
                      (C72413 - C72414 + C72415 - C72416) * C67831 +
                      (C72417 - C72418 + C72419 - C72420) * C67750) *
                         C139835 * C140002) *
                        C2322 +
                    (((C68899 - C68898 + C68901 - C68900) * C67829 +
                      (C68903 - C68902 + C68905 - C68904) * C140011 +
                      (C68907 - C68906 + C68909 - C68908) * C67830 +
                      (C68911 - C68910 + C68913 - C68912) * C140012 +
                      (C71595 - C71596 + C71597 - C71598) * C67831 +
                      (C71599 - C71600 + C71601 - C71602) * C67750) *
                         C139835 * C1565 +
                     ((C72406 - C72405 + C72408 - C72407) * C67829 +
                      (C72410 - C72409 + C72412 - C72411) * C140011 +
                      (C72414 - C72413 + C72416 - C72415) * C67830 +
                      (C72418 - C72417 + C72420 - C72419) * C140012 +
                      (C139967 * C10396 - C137755 * C10394 + C139736 * C10398 -
                       C137748 * C10395) *
                          C67831 +
                      (C139967 * C10742 - C137755 * C10740 + C139736 * C10743 -
                       C137748 * C10741) *
                          C67750) *
                         C139835 * C140002) *
                        C140000) *
                   C139758) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[50] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C67829 * C183 - C68078 * C108 - C67829 * C348 +
                       C140011 * C411 + C67830 * C896 - C68079 * C813 -
                       C67830 * C1072 + C140012 * C1151 + C67831 * C2974 -
                       C68080 * C2908 - C67831 * C3090 + C67750 * C3148) *
                          C139967 +
                      (C68118 + C68119 + C68120) * C139736) *
                         C139835 * C1565 -
                     ((C69986 + C69987 + C69988) * C139736 +
                      (C67831 * C7863 - C68080 * C7754 - C67831 * C8091 +
                       C67750 * C8196 + C67830 * C3520 - C68079 * C3438 -
                       C67830 * C3668 + C140012 * C3742 + C67829 * C1653 -
                       C68078 * C1570 - C67829 * C1829 + C140011 * C1908) *
                          C139967) *
                         C139835 * C140002) *
                        C2322 +
                    (((C67829 * C3520 - C68078 * C3438 - C67829 * C3668 +
                       C140011 * C3742 + C67830 * C7863 - C68079 * C7754 -
                       C67830 * C8091 + C140012 * C8196 + C67831 * C10528 -
                       C68080 * C10394 - C67831 * C10740 + C67750 * C10858) *
                          C139967 +
                      (C67829 * C3521 - C68078 * C3439 - C67829 * C3669 +
                       C140011 * C3743 + C67830 * C7864 - C68079 * C7753 -
                       C67830 * C8092 + C140012 * C8195 + C67831 * C10529 -
                       C68080 * C10395 - C67831 * C10741 + C67750 * C10859) *
                          C139736) *
                         C139835 * C140002 -
                     ((C69046 + C69047 + C69048) * C139736 +
                      (C67831 * C6792 - C68080 * C6627 - C67831 * C7032 +
                       C67750 * C7169 + C67830 * C2974 - C68079 * C2908 -
                       C67830 * C3090 + C140012 * C3148 + C67829 * C896 -
                       C68078 * C813 - C67829 * C1072 + C140011 * C1151) *
                          C139967) *
                         C139835 * C1565) *
                        C140000) *
                   C139758) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[50] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139835 * C266 - C265 * C108) * C67829 +
             (C139835 * C495 - C265 * C348) * C140011 +
             (C6915 - C6916) * C67830 + (C7294 - C7295) * C140012 +
             C9790 * C67831 + C10047 * C67750) *
                C139967 +
            ((C279 - C280) * C67829 + (C502 - C503) * C140011 + C6919 * C67830 +
             C7298 * C140012 + C6925 * C67831 + C7299 * C67750) *
                C139736) *
               C1565 +
           (((C265 * C1570 - C139835 * C1741) * C67829 +
             (C265 * C1829 - C139835 * C1997) * C140011 +
             (C10635 - C10636) * C67830 + (C10961 - C10962) * C140012 +
             (C10639 - C10640) * C67831 + (C10963 - C10964) * C67750) *
                C139967 +
            ((C1752 - C1753) * C67829 + (C2003 - C2004) * C140011 +
             (C7986 - C7987) * C67830 + (C8321 - C8322) * C140012 +
             (C7990 - C7991) * C67831 + (C8323 - C8324) * C67750) *
                C139736) *
               C140002) *
              C2322 +
          ((((C6916 - C6915) * C67829 + (C7295 - C7294) * C140011 +
             (C6922 - C6921) * C67830 + (C7297 - C7296) * C140012 +
             (C9794 - C9795) * C67831 + (C10048 - C10049) * C67750) *
                C139967 +
            (C6927 * C67829 + C7300 * C140011 + C6929 * C67830 +
             C7301 * C140012 + (C6931 - C6932) * C67831 +
             (C7302 - C7303) * C67750) *
                C139736) *
               C1565 +
           (((C10636 - C10635) * C67829 + (C10962 - C10961) * C140011 +
             (C10640 - C10639) * C67830 + (C10964 - C10963) * C140012 +
             (C57812 - C57811) * C67831 + (C58030 - C58029) * C67750) *
                C139967 +
            ((C7987 - C7986) * C67829 + (C8322 - C8321) * C140011 +
             (C7991 - C7990) * C67830 + (C8324 - C8323) * C140012 +
             (C139835 * C10631 - C265 * C10395) * C67831 +
             (C139835 * C10959 - C265 * C10741) * C67750) *
                C139736) *
               C140002) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eezx[50] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C139967 * C114 - C137755 * C108 + C139736 * C116 -
                        C137748 * C109) *
                           C265 +
                       (C139967 * C573 - C137755 * C567 + C139736 * C574 -
                        C137748 * C568) *
                           C139835) *
                          C140011 +
                      ((C68898 - C68899 + C68900 - C68901) * C265 +
                       (C69245 - C69246 + C69247 - C69248) * C139835) *
                          C140012 +
                      C71836 * C67750) *
                         C1565 +
                     (((C137755 * C1570 - C139967 * C1578 + C137748 * C1569 -
                        C139736 * C1576) *
                           C265 +
                       (C137755 * C2074 - C139967 * C2079 + C137748 * C2075 -
                        C139736 * C2080) *
                           C139835) *
                          C140011 +
                      ((C72405 - C72406 + C72407 - C72408) * C265 +
                       (C72715 - C72716 + C72717 - C72718) * C139835) *
                          C140012 +
                      ((C72413 - C72414 + C72415 - C72416) * C265 +
                       (C72719 - C72720 + C72721 - C72722) * C139835) *
                          C67750) *
                         C140002) *
                        C2322 +
                    ((((C68899 - C68898 + C68901 - C68900) * C265 +
                       (C69246 - C69245 + C69248 - C69247) * C139835) *
                          C140011 +
                      ((C68907 - C68906 + C68909 - C68908) * C265 +
                       (C69250 - C69249 + C69252 - C69251) * C139835) *
                          C140012 +
                      ((C71595 - C71596 + C71597 - C71598) * C265 +
                       (C71830 - C71831 + C71832 - C71833) * C139835) *
                          C67750) *
                         C1565 +
                     (((C72406 - C72405 + C72408 - C72407) * C265 +
                       (C72716 - C72715 + C72718 - C72717) * C139835) *
                          C140011 +
                      ((C72414 - C72413 + C72416 - C72415) * C265 +
                       (C72720 - C72719 + C72722 - C72721) * C139835) *
                          C140012 +
                      ((C139967 * C10396 - C137755 * C10394 + C139736 * C10398 -
                        C137748 * C10395) *
                           C265 +
                       (C139967 * C11064 - C137755 * C11062 + C139736 * C11065 -
                        C137748 * C11063) *
                           C139835) *
                          C67750) *
                         C140002) *
                        C140000) *
                   C139758) /
                  (p * q * std::sqrt(p + q));
    d2eezy[50] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C140011 * C183 - C67829 * C108 + C140012 * C896 - C67830 * C813 +
              C67750 * C2974 - C67831 * C2908) *
                 C265 +
             (C140011 * C629 - C67829 * C567 + C140012 * C1393 -
              C67830 * C1317 + C67750 * C3314 - C67831 * C3256) *
                 C139835) *
                C139967 +
            ((C67833 - C67834 + C67835 - C67836 + C67837 - C67838) * C265 +
             (C68346 - C68347 + C68348 - C68349 + C68350 - C68351) * C139835) *
                C139736) *
               C1565 +
           (((C67829 * C1570 - C140011 * C1653 + C67830 * C3438 -
              C140012 * C3520 + C67831 * C7754 - C67750 * C7863) *
                 C265 +
             (C67829 * C2074 - C140011 * C2150 + C67830 * C3882 -
              C140012 * C3956 + C67831 * C8422 - C67750 * C8526) *
                 C139835) *
                C139967 +
            ((C69662 - C69663 + C69664 - C69665 + C69666 - C69667) * C265 +
             (C70283 - C70284 + C70285 - C70286 + C70287 - C70288) * C139835) *
                C139736) *
               C140002) *
              C2322 +
          ((((C67829 * C813 - C140011 * C896 + C67830 * C2908 -
              C140012 * C2974 + C67831 * C6627 - C67750 * C6792) *
                 C265 +
             (C67829 * C1317 - C140011 * C1393 + C67830 * C3256 -
              C140012 * C3314 + C67831 * C7401 - C67750 * C7521) *
                 C139835) *
                C139967 +
            ((C68690 - C68691 + C68692 - C68693 + C68694 - C68695) * C265 +
             (C69359 - C69360 + C69361 - C69362 + C69363 - C69364) * C139835) *
                C139736) *
               C1565 +
           (((C140011 * C3520 - C67829 * C3438 + C140012 * C7863 -
              C67830 * C7754 + C67750 * C10528 - C67831 * C10394) *
                 C265 +
             (C140011 * C3956 - C67829 * C3882 + C140012 * C8526 -
              C67830 * C8422 + C67750 * C11172 - C67831 * C11062) *
                 C139835) *
                C139967 +
            ((C140011 * C3521 - C67829 * C3439 + C140012 * C7864 -
              C67830 * C7753 + C67750 * C10529 - C67831 * C10395) *
                 C265 +
             (C140011 * C3957 - C67829 * C3883 + C140012 * C8527 -
              C67830 * C8423 + C67750 * C11173 - C67831 * C11063) *
                 C139835) *
                C139736) *
               C140002) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eezz[50] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C265 * C266 - C701 * C108 - C265 * C567 + C139835 * C702) *
                 C140011 +
             C7652 * C140012 + C7653 * C67750) *
                C139967 +
            (C68432 + C68433 + C68434) * C139736) *
               C1565 -
           ((C70387 + C70388 + C70389) * C139736 +
            (C11287 * C67750 + C11288 * C140012 +
             (C265 * C1741 - C701 * C1570 - C265 * C2074 + C139835 * C2230) *
                 C140011) *
                C139967) *
               C140002) *
              C2322 +
          (((C11288 * C140011 + C11287 * C140012 + C58245 * C67750) * C139967 +
            (C8651 * C140011 + C8650 * C140012 +
             (C265 * C10631 - C701 * C10395 - C265 * C11063 +
              C139835 * C11273) *
                 C67750) *
                C139736) *
               C140002 -
           ((C69463 + C69464 + C69465) * C139736 +
            (C10296 * C67750 + C7653 * C140012 + C7652 * C140011) * C139967) *
               C1565) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eexx[51] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C137755 * C114 - C67752 * C108 - C137755 * C115 + C139967 * C126 +
             C137748 * C116 - C67754 * C109 - C137748 * C117 + C139736 * C127) *
                C139835 * C140011 +
            (C68584 + C68585) * C139835 * C140012 + C71355 * C67750) *
               C4096 -
           ((C72107 + C72108) * C139835 * C67750 +
            (C72109 + C72110) * C139835 * C140012 +
            (C137748 * C1576 - C67754 * C1569 - C137748 * C1577 +
             C139736 * C1584 + C137755 * C1578 - C67752 * C1570 -
             C137755 * C1579 + C139967 * C1585) *
                C139835 * C140011) *
               C140002) *
              C139792 * C2324 +
          (((C137755 * C1576 - C67752 * C1569 - C137755 * C1577 +
             C139967 * C1584 + C137748 * C1574 - C67754 * C1568 -
             C137748 * C1575 + C139736 * C1583) *
                C139835 * C140011 +
            (C137755 * C3444 - C67752 * C3439 - C137755 * C3445 +
             C139967 * C3451 + C137748 * C3446 - C67754 * C3440 -
             C137748 * C3447 + C139736 * C3452) *
                C139835 * C140012 +
            (C137755 * C7756 - C67752 * C7753 - C137755 * C7757 +
             C139967 * C7762 + C137748 * C7760 - C67754 * C7755 -
             C137748 * C7761 + C139736 * C7764) *
                C139835 * C67750) *
               C140002 -
           ((C68591 + C68590) * C139835 * C67750 +
            (C68589 + C68588) * C139835 * C140012 +
            (C137748 * C118 - C67754 * C110 - C137748 * C119 + C139736 * C128 +
             C137755 * C116 - C67752 * C109 - C137755 * C117 + C139967 * C127) *
                C139835 * C140011) *
               C4096) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexy[51] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C140011 * C183 - C67829 * C108 + C140012 * C896 - C67830 * C813 +
             C67750 * C2974 - C67831 * C2908) *
                C137755 +
            (C140011 * C189 - C67829 * C115 + C140012 * C901 - C67830 * C822 +
             C67750 * C2978 - C67831 * C2913) *
                C139967 +
            (C67833 - C67834 + C67835 - C67836 + C67837 - C67838) * C137748 +
            (C67839 - C67840 + C67841 - C67842 + C67843 - C67844) * C139736) *
               C139835 * C4096 +
           ((C67829 * C1570 - C140011 * C1653 + C67830 * C3438 -
             C140012 * C3520 + C67831 * C7754 - C67750 * C7863) *
                C137755 +
            (C67829 * C1579 - C140011 * C1658 + C67830 * C3443 -
             C140012 * C3524 + C67831 * C7759 - C67750 * C7866) *
                C139967 +
            (C69662 - C69663 + C69664 - C69665 + C69666 - C69667) * C137748 +
            (C69668 - C69669 + C69670 - C69671 + C69672 - C69673) * C139736) *
               C139835 * C140002) *
              C139792 * C2324 +
          (((C67834 - C67833 + C67836 - C67835 + C67838 - C67837) * C137755 +
            (C67840 - C67839 + C67842 - C67841 + C67844 - C67843) * C139967 +
            (C67845 - C67846 + C67847 - C67848 + C67849 - C67850) * C137748 +
            (C67851 - C67852 + C67853 - C67854 + C67855 - C67856) * C139736) *
               C139835 * C4096 +
           ((C69663 - C69662 + C69665 - C69664 + C69667 - C69666) * C137755 +
            (C69669 - C69668 + C69671 - C69670 + C69673 - C69672) * C139967 +
            (C140011 * C1655 - C67829 * C1568 + C140012 * C3522 -
             C67830 * C3440 + C67750 * C7865 - C67831 * C7755) *
                C137748 +
            (C140011 * C1660 - C67829 * C1575 + C140012 * C3526 -
             C67830 * C3447 + C67750 * C7868 - C67831 * C7761) *
                C139736) *
               C139835 * C140002) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexz[51] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139835 * C266 - C265 * C108) * C137755 +
             (C139835 * C272 - C265 * C115) * C139967 +
             (C279 - C280) * C137748 + (C281 - C282) * C139736) *
                C140011 +
            ((C6915 - C6916) * C137755 + (C6917 - C6918) * C139967 +
             C6919 * C137748 + C6920 * C139736) *
                C140012 +
            C71516 * C67750) *
               C4096 +
           (((C265 * C1570 - C139835 * C1741) * C137755 +
             (C265 * C1579 - C139835 * C1746) * C139967 +
             (C1752 - C1753) * C137748 + (C1754 - C1755) * C139736) *
                C140011 +
            ((C10635 - C10636) * C137755 + (C10637 - C10638) * C139967 +
             (C7986 - C7987) * C137748 + (C7988 - C7989) * C139736) *
                C140012 +
            ((C10639 - C10640) * C137755 + (C10641 - C10642) * C139967 +
             (C7990 - C7991) * C137748 + (C7992 - C7993) * C139736) *
                C67750) *
               C140002) *
              C139792 * C2324 +
          ((((C280 - C279) * C137755 + (C282 - C281) * C139967 +
             (C284 - C283) * C137748 + (C286 - C285) * C139736) *
                C140011 +
            (C6927 * C137755 + C6928 * C139967 + C22843 * C137748 +
             C22844 * C139736) *
                C140012 +
            (C6929 * C137755 + C6930 * C139967 + (C6000 - C6001) * C137748 +
             (C6002 - C6003) * C139736) *
                C67750) *
               C4096 +
           (((C1753 - C1752) * C137755 + (C1755 - C1754) * C139967 +
             (C1757 - C1756) * C137748 + (C1759 - C1758) * C139736) *
                C140011 +
            ((C7987 - C7986) * C137755 + (C7989 - C7988) * C139967 +
             (C23821 - C23820) * C137748 + (C23823 - C23822) * C139736) *
                C140012 +
            ((C7991 - C7990) * C137755 + (C7993 - C7992) * C139967 +
             (C139835 * C7981 - C265 * C7755) * C137748 +
             (C139835 * C7984 - C265 * C7761) * C139736) *
                C67750) *
               C140002) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[51] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C139967 * C114 - C137755 * C108 + C139736 * C116 -
                       C137748 * C109) *
                          C67829 +
                      (C139967 * C354 - C137755 * C348 + C139736 * C355 -
                       C137748 * C349) *
                          C140011 +
                      (C68898 - C68899 + C68900 - C68901) * C67830 +
                      (C68902 - C68903 + C68904 - C68905) * C140012 +
                      C71603 * C67831 + C71604 * C67750) *
                         C139835 * C4096 +
                     ((C137755 * C1570 - C139967 * C1578 + C137748 * C1569 -
                       C139736 * C1576) *
                          C67829 +
                      (C137755 * C1829 - C139967 * C1834 + C137748 * C1830 -
                       C139736 * C1835) *
                          C140011 +
                      (C72405 - C72406 + C72407 - C72408) * C67830 +
                      (C72409 - C72410 + C72411 - C72412) * C140012 +
                      (C72413 - C72414 + C72415 - C72416) * C67831 +
                      (C72417 - C72418 + C72419 - C72420) * C67750) *
                         C139835 * C140002) *
                        C139792 * C2324 +
                    (((C137755 * C109 - C139967 * C116 + C137748 * C110 -
                       C139736 * C118) *
                          C67829 +
                      (C137755 * C349 - C139967 * C355 + C137748 * C350 -
                       C139736 * C356) *
                          C140011 +
                      (C68914 - C68915 + C68916 - C68917) * C67830 +
                      (C68918 - C68919 + C68920 - C68921) * C140012 +
                      (C68922 - C68923 + C68924 - C68925) * C67831 +
                      (C68926 - C68927 + C68928 - C68929) * C67750) *
                         C139835 * C4096 +
                     ((C139967 * C1576 - C137755 * C1569 + C139736 * C1574 -
                       C137748 * C1568) *
                          C67829 +
                      (C139967 * C1835 - C137755 * C1830 + C139736 * C1836 -
                       C137748 * C1831) *
                          C140011 +
                      (C139967 * C3444 - C137755 * C3439 + C139736 * C3446 -
                       C137748 * C3440) *
                          C67830 +
                      (C139967 * C3673 - C137755 * C3669 + C139736 * C3674 -
                       C137748 * C3670) *
                          C140012 +
                      (C139967 * C7756 - C137755 * C7753 + C139736 * C7760 -
                       C137748 * C7755) *
                          C67831 +
                      (C139967 * C8095 - C137755 * C8092 + C139736 * C8096 -
                       C137748 * C8093) *
                          C67750) *
                         C139835 * C140002) *
                        C139792 * C139998)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[51] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C67829 * C183 - C68078 * C108 - C67829 * C348 +
                       C140011 * C411 + C67830 * C896 - C68079 * C813 -
                       C67830 * C1072 + C140012 * C1151 + C67831 * C2974 -
                       C68080 * C2908 - C67831 * C3090 + C67750 * C3148) *
                          C139967 +
                      (C68118 + C68119 + C68120) * C139736) *
                         C139835 * C4096 -
                     ((C69986 + C69987 + C69988) * C139736 +
                      (C67831 * C7863 - C68080 * C7754 - C67831 * C8091 +
                       C67750 * C8196 + C67830 * C3520 - C68079 * C3438 -
                       C67830 * C3668 + C140012 * C3742 + C67829 * C1653 -
                       C68078 * C1570 - C67829 * C1829 + C140011 * C1908) *
                          C139967) *
                         C139835 * C140002) *
                        C139792 * C2324 +
                    (((C69988 + C69987 + C69986) * C139967 +
                      (C67829 * C1655 - C68078 * C1568 - C67829 * C1831 +
                       C140011 * C1906 + C67830 * C3522 - C68079 * C3440 -
                       C67830 * C3670 + C140012 * C3744 + C67831 * C7865 -
                       C68080 * C7755 - C67831 * C8093 + C67750 * C8197) *
                          C139736) *
                         C139835 * C140002 -
                     ((C68121 + C68122 + C68123) * C139736 +
                      (C68120 + C68119 + C68118) * C139967) *
                         C139835 * C4096) *
                        C139792 * C139998)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[51] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139835 * C266 - C265 * C108) * C67829 +
             (C139835 * C495 - C265 * C348) * C140011 +
             (C6915 - C6916) * C67830 + (C7294 - C7295) * C140012 +
             C9790 * C67831 + C10047 * C67750) *
                C139967 +
            ((C279 - C280) * C67829 + (C502 - C503) * C140011 + C6919 * C67830 +
             C7298 * C140012 + C6925 * C67831 + C7299 * C67750) *
                C139736) *
               C4096 +
           (((C265 * C1570 - C139835 * C1741) * C67829 +
             (C265 * C1829 - C139835 * C1997) * C140011 +
             (C10635 - C10636) * C67830 + (C10961 - C10962) * C140012 +
             (C10639 - C10640) * C67831 + (C10963 - C10964) * C67750) *
                C139967 +
            ((C1752 - C1753) * C67829 + (C2003 - C2004) * C140011 +
             (C7986 - C7987) * C67830 + (C8321 - C8322) * C140012 +
             (C7990 - C7991) * C67831 + (C8323 - C8324) * C67750) *
                C139736) *
               C140002) *
              C139792 * C2324 +
          ((((C280 - C279) * C67829 + (C503 - C502) * C140011 + C6927 * C67830 +
             C7300 * C140012 + C6929 * C67831 + C7301 * C67750) *
                C139967 +
            ((C284 - C283) * C67829 + (C506 - C505) * C140011 +
             C22843 * C67830 + C23191 * C140012 + (C6000 - C6001) * C67831 +
             (C6273 - C6274) * C67750) *
                C139736) *
               C4096 +
           (((C1753 - C1752) * C67829 + (C2004 - C2003) * C140011 +
             (C7987 - C7986) * C67830 + (C8322 - C8321) * C140012 +
             (C7991 - C7990) * C67831 + (C8324 - C8323) * C67750) *
                C139967 +
            ((C1757 - C1756) * C67829 + (C2006 - C2005) * C140011 +
             (C23821 - C23820) * C67830 + (C24147 - C24146) * C140012 +
             (C139835 * C7981 - C265 * C7755) * C67831 +
             (C139835 * C8319 - C265 * C8093) * C67750) *
                C139736) *
               C140002) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eezx[51] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C139967 * C114 - C137755 * C108 + C139736 * C116 -
                        C137748 * C109) *
                           C265 +
                       (C139967 * C573 - C137755 * C567 + C139736 * C574 -
                        C137748 * C568) *
                           C139835) *
                          C140011 +
                      ((C68898 - C68899 + C68900 - C68901) * C265 +
                       (C69245 - C69246 + C69247 - C69248) * C139835) *
                          C140012 +
                      C71836 * C67750) *
                         C4096 +
                     (((C137755 * C1570 - C139967 * C1578 + C137748 * C1569 -
                        C139736 * C1576) *
                           C265 +
                       (C137755 * C2074 - C139967 * C2079 + C137748 * C2075 -
                        C139736 * C2080) *
                           C139835) *
                          C140011 +
                      ((C72405 - C72406 + C72407 - C72408) * C265 +
                       (C72715 - C72716 + C72717 - C72718) * C139835) *
                          C140012 +
                      ((C72413 - C72414 + C72415 - C72416) * C265 +
                       (C72719 - C72720 + C72721 - C72722) * C139835) *
                          C67750) *
                         C140002) *
                        C139792 * C2324 +
                    ((((C137755 * C109 - C139967 * C116 + C137748 * C110 -
                        C139736 * C118) *
                           C265 +
                       (C137755 * C568 - C139967 * C574 + C137748 * C569 -
                        C139736 * C575) *
                           C139835) *
                          C140011 +
                      ((C68914 - C68915 + C68916 - C68917) * C265 +
                       (C69253 - C69254 + C69255 - C69256) * C139835) *
                          C140012 +
                      ((C68922 - C68923 + C68924 - C68925) * C265 +
                       (C69257 - C69258 + C69259 - C69260) * C139835) *
                          C67750) *
                         C4096 +
                     (((C139967 * C1576 - C137755 * C1569 + C139736 * C1574 -
                        C137748 * C1568) *
                           C265 +
                       (C139967 * C2080 - C137755 * C2075 + C139736 * C2081 -
                        C137748 * C2076) *
                           C139835) *
                          C140011 +
                      ((C139967 * C3444 - C137755 * C3439 + C139736 * C3446 -
                        C137748 * C3440) *
                           C265 +
                       (C139967 * C3887 - C137755 * C3883 + C139736 * C3888 -
                        C137748 * C3884) *
                           C139835) *
                          C140012 +
                      ((C139967 * C7756 - C137755 * C7753 + C139736 * C7760 -
                        C137748 * C7755) *
                           C265 +
                       (C139967 * C8426 - C137755 * C8423 + C139736 * C8427 -
                        C137748 * C8424) *
                           C139835) *
                          C67750) *
                         C140002) *
                        C139792 * C139998)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[51] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C140011 * C183 - C67829 * C108 + C140012 * C896 - C67830 * C813 +
              C67750 * C2974 - C67831 * C2908) *
                 C265 +
             (C140011 * C629 - C67829 * C567 + C140012 * C1393 -
              C67830 * C1317 + C67750 * C3314 - C67831 * C3256) *
                 C139835) *
                C139967 +
            ((C67833 - C67834 + C67835 - C67836 + C67837 - C67838) * C265 +
             (C68346 - C68347 + C68348 - C68349 + C68350 - C68351) * C139835) *
                C139736) *
               C4096 +
           (((C67829 * C1570 - C140011 * C1653 + C67830 * C3438 -
              C140012 * C3520 + C67831 * C7754 - C67750 * C7863) *
                 C265 +
             (C67829 * C2074 - C140011 * C2150 + C67830 * C3882 -
              C140012 * C3956 + C67831 * C8422 - C67750 * C8526) *
                 C139835) *
                C139967 +
            ((C69662 - C69663 + C69664 - C69665 + C69666 - C69667) * C265 +
             (C70283 - C70284 + C70285 - C70286 + C70287 - C70288) * C139835) *
                C139736) *
               C140002) *
              C139792 * C2324 +
          ((((C67834 - C67833 + C67836 - C67835 + C67838 - C67837) * C265 +
             (C68347 - C68346 + C68349 - C68348 + C68351 - C68350) * C139835) *
                C139967 +
            ((C67845 - C67846 + C67847 - C67848 + C67849 - C67850) * C265 +
             (C68352 - C68353 + C68354 - C68355 + C68356 - C68357) * C139835) *
                C139736) *
               C4096 +
           (((C69663 - C69662 + C69665 - C69664 + C69667 - C69666) * C265 +
             (C70284 - C70283 + C70286 - C70285 + C70288 - C70287) * C139835) *
                C139967 +
            ((C140011 * C1655 - C67829 * C1568 + C140012 * C3522 -
              C67830 * C3440 + C67750 * C7865 - C67831 * C7755) *
                 C265 +
             (C140011 * C2152 - C67829 * C2076 + C140012 * C3958 -
              C67830 * C3884 + C67750 * C8528 - C67831 * C8424) *
                 C139835) *
                C139736) *
               C140002) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eezz[51] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C265 * C266 - C701 * C108 - C265 * C567 + C139835 * C702) *
                 C140011 +
             C7652 * C140012 + C7653 * C67750) *
                C139967 +
            (C68432 + C68433 + C68434) * C139736) *
               C4096 -
           ((C70387 + C70388 + C70389) * C139736 +
            (C11287 * C67750 + C11288 * C140012 +
             (C265 * C1741 - C701 * C1570 - C265 * C2074 + C139835 * C2230) *
                 C140011) *
                C139967) *
               C140002) *
              C139792 * C2324 +
          (((C70389 + C70388 + C70387) * C139967 +
            (C2252 * C140011 + C24459 * C140012 +
             (C265 * C7981 - C701 * C7755 - C265 * C8424 + C139835 * C8635) *
                 C67750) *
                C139736) *
               C140002 -
           ((C68435 + C68436 + C68437) * C139736 +
            (C68434 + C68433 + C68432) * C139967) *
               C4096) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexx[52] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C137755 * C114 - C67752 * C108 - C137755 * C115 + C139967 * C126 +
             C137748 * C116 - C67754 * C109 - C137748 * C117 + C139736 * C127) *
                C139835 * C140011 +
            (C68584 + C68585) * C139835 * C140012 + C71355 * C67750) *
               C4096 -
           ((C72107 + C72108) * C139835 * C67750 +
            (C72109 + C72110) * C139835 * C140012 +
            (C137748 * C1576 - C67754 * C1569 - C137748 * C1577 +
             C139736 * C1584 + C137755 * C1578 - C67752 * C1570 -
             C137755 * C1579 + C139967 * C1585) *
                C139835 * C140011) *
               C140002) *
              C806 +
          (((C72110 + C72109) * C139835 * C140011 +
            (C72108 + C72107) * C139835 * C140012 +
            (C137755 * C10396 - C67752 * C10394 - C137755 * C10397 +
             C139967 * C10400 + C137748 * C10398 - C67754 * C10395 -
             C137748 * C10399 + C139736 * C10401) *
                C139835 * C67750) *
               C140002 -
           ((C71360 + C71361) * C139835 * C67750 +
            (C68587 + C68586) * C139835 * C140012 +
            (C68585 + C68584) * C139835 * C140011) *
               C4096) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eexy[52] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C140011 * C183 - C67829 * C108 + C140012 * C896 - C67830 * C813 +
             C67750 * C2974 - C67831 * C2908) *
                C137755 +
            (C140011 * C189 - C67829 * C115 + C140012 * C901 - C67830 * C822 +
             C67750 * C2978 - C67831 * C2913) *
                C139967 +
            (C67833 - C67834 + C67835 - C67836 + C67837 - C67838) * C137748 +
            (C67839 - C67840 + C67841 - C67842 + C67843 - C67844) * C139736) *
               C139835 * C4096 +
           ((C67829 * C1570 - C140011 * C1653 + C67830 * C3438 -
             C140012 * C3520 + C67831 * C7754 - C67750 * C7863) *
                C137755 +
            (C67829 * C1579 - C140011 * C1658 + C67830 * C3443 -
             C140012 * C3524 + C67831 * C7759 - C67750 * C7866) *
                C139967 +
            (C69662 - C69663 + C69664 - C69665 + C69666 - C69667) * C137748 +
            (C69668 - C69669 + C69670 - C69671 + C69672 - C69673) * C139736) *
               C139835 * C140002) *
              C806 +
          (((C67829 * C813 - C140011 * C896 + C67830 * C2908 - C140012 * C2974 +
             C67831 * C6627 - C67750 * C6792) *
                C137755 +
            (C67829 * C822 - C140011 * C901 + C67830 * C2913 - C140012 * C2978 +
             C67831 * C6632 - C67750 * C6795) *
                C139967 +
            (C68690 - C68691 + C68692 - C68693 + C68694 - C68695) * C137748 +
            (C68696 - C68697 + C68698 - C68699 + C68700 - C68701) * C139736) *
               C139835 * C4096 +
           ((C140011 * C3520 - C67829 * C3438 + C140012 * C7863 -
             C67830 * C7754 + C67750 * C10528 - C67831 * C10394) *
                C137755 +
            (C140011 * C3524 - C67829 * C3443 + C140012 * C7866 -
             C67830 * C7759 + C67750 * C10530 - C67831 * C10397) *
                C139967 +
            (C140011 * C3521 - C67829 * C3439 + C140012 * C7864 -
             C67830 * C7753 + C67750 * C10529 - C67831 * C10395) *
                C137748 +
            (C140011 * C3525 - C67829 * C3445 + C140012 * C7867 -
             C67830 * C7757 + C67750 * C10531 - C67831 * C10399) *
                C139736) *
               C139835 * C140002) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eexz[52] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139835 * C266 - C265 * C108) * C137755 +
             (C139835 * C272 - C265 * C115) * C139967 +
             (C279 - C280) * C137748 + (C281 - C282) * C139736) *
                C140011 +
            ((C6915 - C6916) * C137755 + (C6917 - C6918) * C139967 +
             C6919 * C137748 + C6920 * C139736) *
                C140012 +
            C71516 * C67750) *
               C4096 +
           (((C265 * C1570 - C139835 * C1741) * C137755 +
             (C265 * C1579 - C139835 * C1746) * C139967 +
             (C1752 - C1753) * C137748 + (C1754 - C1755) * C139736) *
                C140011 +
            ((C10635 - C10636) * C137755 + (C10637 - C10638) * C139967 +
             (C7986 - C7987) * C137748 + (C7988 - C7989) * C139736) *
                C140012 +
            ((C10639 - C10640) * C137755 + (C10641 - C10642) * C139967 +
             (C7990 - C7991) * C137748 + (C7992 - C7993) * C139736) *
                C67750) *
               C140002) *
              C806 +
          ((((C6916 - C6915) * C137755 + (C6918 - C6917) * C139967 +
             C6927 * C137748 + C6928 * C139736) *
                C140011 +
            ((C6922 - C6921) * C137755 + (C6924 - C6923) * C139967 +
             C6929 * C137748 + C6930 * C139736) *
                C140012 +
            ((C9794 - C9795) * C137755 + (C9796 - C9797) * C139967 +
             (C6931 - C6932) * C137748 + (C6933 - C6934) * C139736) *
                C67750) *
               C4096 +
           (((C10636 - C10635) * C137755 + (C10638 - C10637) * C139967 +
             (C7987 - C7986) * C137748 + (C7989 - C7988) * C139736) *
                C140011 +
            ((C10640 - C10639) * C137755 + (C10642 - C10641) * C139967 +
             (C7991 - C7990) * C137748 + (C7993 - C7992) * C139736) *
                C140012 +
            ((C57812 - C57811) * C137755 + (C57814 - C57813) * C139967 +
             (C139835 * C10631 - C265 * C10395) * C137748 +
             (C139835 * C10633 - C265 * C10399) * C139736) *
                C67750) *
               C140002) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eeyx[52] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C139967 * C114 - C137755 * C108 + C139736 * C116 -
                       C137748 * C109) *
                          C67829 +
                      (C139967 * C354 - C137755 * C348 + C139736 * C355 -
                       C137748 * C349) *
                          C140011 +
                      (C68898 - C68899 + C68900 - C68901) * C67830 +
                      (C68902 - C68903 + C68904 - C68905) * C140012 +
                      C71603 * C67831 + C71604 * C67750) *
                         C139835 * C4096 +
                     ((C137755 * C1570 - C139967 * C1578 + C137748 * C1569 -
                       C139736 * C1576) *
                          C67829 +
                      (C137755 * C1829 - C139967 * C1834 + C137748 * C1830 -
                       C139736 * C1835) *
                          C140011 +
                      (C72405 - C72406 + C72407 - C72408) * C67830 +
                      (C72409 - C72410 + C72411 - C72412) * C140012 +
                      (C72413 - C72414 + C72415 - C72416) * C67831 +
                      (C72417 - C72418 + C72419 - C72420) * C67750) *
                         C139835 * C140002) *
                        C806 +
                    (((C68899 - C68898 + C68901 - C68900) * C67829 +
                      (C68903 - C68902 + C68905 - C68904) * C140011 +
                      (C68907 - C68906 + C68909 - C68908) * C67830 +
                      (C68911 - C68910 + C68913 - C68912) * C140012 +
                      (C71595 - C71596 + C71597 - C71598) * C67831 +
                      (C71599 - C71600 + C71601 - C71602) * C67750) *
                         C139835 * C4096 +
                     ((C72406 - C72405 + C72408 - C72407) * C67829 +
                      (C72410 - C72409 + C72412 - C72411) * C140011 +
                      (C72414 - C72413 + C72416 - C72415) * C67830 +
                      (C72418 - C72417 + C72420 - C72419) * C140012 +
                      (C139967 * C10396 - C137755 * C10394 + C139736 * C10398 -
                       C137748 * C10395) *
                          C67831 +
                      (C139967 * C10742 - C137755 * C10740 + C139736 * C10743 -
                       C137748 * C10741) *
                          C67750) *
                         C139835 * C140002) *
                        C140000) *
                   C139758) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[52] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C67829 * C183 - C68078 * C108 - C67829 * C348 +
                       C140011 * C411 + C67830 * C896 - C68079 * C813 -
                       C67830 * C1072 + C140012 * C1151 + C67831 * C2974 -
                       C68080 * C2908 - C67831 * C3090 + C67750 * C3148) *
                          C139967 +
                      (C68118 + C68119 + C68120) * C139736) *
                         C139835 * C4096 -
                     ((C69986 + C69987 + C69988) * C139736 +
                      (C67831 * C7863 - C68080 * C7754 - C67831 * C8091 +
                       C67750 * C8196 + C67830 * C3520 - C68079 * C3438 -
                       C67830 * C3668 + C140012 * C3742 + C67829 * C1653 -
                       C68078 * C1570 - C67829 * C1829 + C140011 * C1908) *
                          C139967) *
                         C139835 * C140002) *
                        C806 +
                    (((C67829 * C3520 - C68078 * C3438 - C67829 * C3668 +
                       C140011 * C3742 + C67830 * C7863 - C68079 * C7754 -
                       C67830 * C8091 + C140012 * C8196 + C67831 * C10528 -
                       C68080 * C10394 - C67831 * C10740 + C67750 * C10858) *
                          C139967 +
                      (C67829 * C3521 - C68078 * C3439 - C67829 * C3669 +
                       C140011 * C3743 + C67830 * C7864 - C68079 * C7753 -
                       C67830 * C8092 + C140012 * C8195 + C67831 * C10529 -
                       C68080 * C10395 - C67831 * C10741 + C67750 * C10859) *
                          C139736) *
                         C139835 * C140002 -
                     ((C69046 + C69047 + C69048) * C139736 +
                      (C67831 * C6792 - C68080 * C6627 - C67831 * C7032 +
                       C67750 * C7169 + C67830 * C2974 - C68079 * C2908 -
                       C67830 * C3090 + C140012 * C3148 + C67829 * C896 -
                       C68078 * C813 - C67829 * C1072 + C140011 * C1151) *
                          C139967) *
                         C139835 * C4096) *
                        C140000) *
                   C139758) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[52] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139835 * C266 - C265 * C108) * C67829 +
             (C139835 * C495 - C265 * C348) * C140011 +
             (C6915 - C6916) * C67830 + (C7294 - C7295) * C140012 +
             C9790 * C67831 + C10047 * C67750) *
                C139967 +
            ((C279 - C280) * C67829 + (C502 - C503) * C140011 + C6919 * C67830 +
             C7298 * C140012 + C6925 * C67831 + C7299 * C67750) *
                C139736) *
               C4096 +
           (((C265 * C1570 - C139835 * C1741) * C67829 +
             (C265 * C1829 - C139835 * C1997) * C140011 +
             (C10635 - C10636) * C67830 + (C10961 - C10962) * C140012 +
             (C10639 - C10640) * C67831 + (C10963 - C10964) * C67750) *
                C139967 +
            ((C1752 - C1753) * C67829 + (C2003 - C2004) * C140011 +
             (C7986 - C7987) * C67830 + (C8321 - C8322) * C140012 +
             (C7990 - C7991) * C67831 + (C8323 - C8324) * C67750) *
                C139736) *
               C140002) *
              C806 +
          ((((C6916 - C6915) * C67829 + (C7295 - C7294) * C140011 +
             (C6922 - C6921) * C67830 + (C7297 - C7296) * C140012 +
             (C9794 - C9795) * C67831 + (C10048 - C10049) * C67750) *
                C139967 +
            (C6927 * C67829 + C7300 * C140011 + C6929 * C67830 +
             C7301 * C140012 + (C6931 - C6932) * C67831 +
             (C7302 - C7303) * C67750) *
                C139736) *
               C4096 +
           (((C10636 - C10635) * C67829 + (C10962 - C10961) * C140011 +
             (C10640 - C10639) * C67830 + (C10964 - C10963) * C140012 +
             (C57812 - C57811) * C67831 + (C58030 - C58029) * C67750) *
                C139967 +
            ((C7987 - C7986) * C67829 + (C8322 - C8321) * C140011 +
             (C7991 - C7990) * C67830 + (C8324 - C8323) * C140012 +
             (C139835 * C10631 - C265 * C10395) * C67831 +
             (C139835 * C10959 - C265 * C10741) * C67750) *
                C139736) *
               C140002) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eezx[52] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C139967 * C114 - C137755 * C108 + C139736 * C116 -
                        C137748 * C109) *
                           C265 +
                       (C139967 * C573 - C137755 * C567 + C139736 * C574 -
                        C137748 * C568) *
                           C139835) *
                          C140011 +
                      ((C68898 - C68899 + C68900 - C68901) * C265 +
                       (C69245 - C69246 + C69247 - C69248) * C139835) *
                          C140012 +
                      C71836 * C67750) *
                         C4096 +
                     (((C137755 * C1570 - C139967 * C1578 + C137748 * C1569 -
                        C139736 * C1576) *
                           C265 +
                       (C137755 * C2074 - C139967 * C2079 + C137748 * C2075 -
                        C139736 * C2080) *
                           C139835) *
                          C140011 +
                      ((C72405 - C72406 + C72407 - C72408) * C265 +
                       (C72715 - C72716 + C72717 - C72718) * C139835) *
                          C140012 +
                      ((C72413 - C72414 + C72415 - C72416) * C265 +
                       (C72719 - C72720 + C72721 - C72722) * C139835) *
                          C67750) *
                         C140002) *
                        C806 +
                    ((((C68899 - C68898 + C68901 - C68900) * C265 +
                       (C69246 - C69245 + C69248 - C69247) * C139835) *
                          C140011 +
                      ((C68907 - C68906 + C68909 - C68908) * C265 +
                       (C69250 - C69249 + C69252 - C69251) * C139835) *
                          C140012 +
                      ((C71595 - C71596 + C71597 - C71598) * C265 +
                       (C71830 - C71831 + C71832 - C71833) * C139835) *
                          C67750) *
                         C4096 +
                     (((C72406 - C72405 + C72408 - C72407) * C265 +
                       (C72716 - C72715 + C72718 - C72717) * C139835) *
                          C140011 +
                      ((C72414 - C72413 + C72416 - C72415) * C265 +
                       (C72720 - C72719 + C72722 - C72721) * C139835) *
                          C140012 +
                      ((C139967 * C10396 - C137755 * C10394 + C139736 * C10398 -
                        C137748 * C10395) *
                           C265 +
                       (C139967 * C11064 - C137755 * C11062 + C139736 * C11065 -
                        C137748 * C11063) *
                           C139835) *
                          C67750) *
                         C140002) *
                        C140000) *
                   C139758) /
                  (p * q * std::sqrt(p + q));
    d2eezy[52] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C140011 * C183 - C67829 * C108 + C140012 * C896 - C67830 * C813 +
              C67750 * C2974 - C67831 * C2908) *
                 C265 +
             (C140011 * C629 - C67829 * C567 + C140012 * C1393 -
              C67830 * C1317 + C67750 * C3314 - C67831 * C3256) *
                 C139835) *
                C139967 +
            ((C67833 - C67834 + C67835 - C67836 + C67837 - C67838) * C265 +
             (C68346 - C68347 + C68348 - C68349 + C68350 - C68351) * C139835) *
                C139736) *
               C4096 +
           (((C67829 * C1570 - C140011 * C1653 + C67830 * C3438 -
              C140012 * C3520 + C67831 * C7754 - C67750 * C7863) *
                 C265 +
             (C67829 * C2074 - C140011 * C2150 + C67830 * C3882 -
              C140012 * C3956 + C67831 * C8422 - C67750 * C8526) *
                 C139835) *
                C139967 +
            ((C69662 - C69663 + C69664 - C69665 + C69666 - C69667) * C265 +
             (C70283 - C70284 + C70285 - C70286 + C70287 - C70288) * C139835) *
                C139736) *
               C140002) *
              C806 +
          ((((C67829 * C813 - C140011 * C896 + C67830 * C2908 -
              C140012 * C2974 + C67831 * C6627 - C67750 * C6792) *
                 C265 +
             (C67829 * C1317 - C140011 * C1393 + C67830 * C3256 -
              C140012 * C3314 + C67831 * C7401 - C67750 * C7521) *
                 C139835) *
                C139967 +
            ((C68690 - C68691 + C68692 - C68693 + C68694 - C68695) * C265 +
             (C69359 - C69360 + C69361 - C69362 + C69363 - C69364) * C139835) *
                C139736) *
               C4096 +
           (((C140011 * C3520 - C67829 * C3438 + C140012 * C7863 -
              C67830 * C7754 + C67750 * C10528 - C67831 * C10394) *
                 C265 +
             (C140011 * C3956 - C67829 * C3882 + C140012 * C8526 -
              C67830 * C8422 + C67750 * C11172 - C67831 * C11062) *
                 C139835) *
                C139967 +
            ((C140011 * C3521 - C67829 * C3439 + C140012 * C7864 -
              C67830 * C7753 + C67750 * C10529 - C67831 * C10395) *
                 C265 +
             (C140011 * C3957 - C67829 * C3883 + C140012 * C8527 -
              C67830 * C8423 + C67750 * C11173 - C67831 * C11063) *
                 C139835) *
                C139736) *
               C140002) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eezz[52] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C265 * C266 - C701 * C108 - C265 * C567 + C139835 * C702) *
                 C140011 +
             C7652 * C140012 + C7653 * C67750) *
                C139967 +
            (C68432 + C68433 + C68434) * C139736) *
               C4096 -
           ((C70387 + C70388 + C70389) * C139736 +
            (C11287 * C67750 + C11288 * C140012 +
             (C265 * C1741 - C701 * C1570 - C265 * C2074 + C139835 * C2230) *
                 C140011) *
                C139967) *
               C140002) *
              C806 +
          (((C11288 * C140011 + C11287 * C140012 + C58245 * C67750) * C139967 +
            (C8651 * C140011 + C8650 * C140012 +
             (C265 * C10631 - C701 * C10395 - C265 * C11063 +
              C139835 * C11273) *
                 C67750) *
                C139736) *
               C140002 -
           ((C69463 + C69464 + C69465) * C139736 +
            (C10296 * C67750 + C7653 * C140012 + C7652 * C140011) * C139967) *
               C4096) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eexx[53] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C137755 * C114 - C67752 * C108 - C137755 * C115 + C139967 * C126 +
            C137748 * C116 - C67754 * C109 - C137748 * C117 + C139736 * C127) *
               C139835 * C140011 +
           (C68584 + C68585) * C139835 * C140012 + C71355 * C67750) *
              C5270 -
          ((C72107 + C72108) * C139835 * C67750 +
           (C72109 + C72110) * C139835 * C140012 +
           (C137748 * C1576 - C67754 * C1569 - C137748 * C1577 +
            C139736 * C1584 + C137755 * C1578 - C67752 * C1570 -
            C137755 * C1579 + C139967 * C1585) *
               C139835 * C140011) *
              C5271 +
          ((C137755 * C5277 - C67752 * C5273 - C137755 * C5278 +
            C139967 * C5285 + C137748 * C5279 - C67754 * C5274 -
            C137748 * C5280 + C139736 * C5286) *
               C139835 * C140011 +
           (C137755 * C13130 - C67752 * C13126 - C137755 * C13131 +
            C139967 * C13138 + C137748 * C13132 - C67754 * C13127 -
            C137748 * C13133 + C139736 * C13139) *
               C139835 * C140012 +
           (C137755 * C13134 - C67752 * C13128 - C137755 * C13135 +
            C139967 * C13140 + C137748 * C13136 - C67754 * C13129 -
            C137748 * C13137 + C139736 * C13141) *
               C139835 * C67750) *
              C5272) *
         C139792 * C139758) /
        (p * q * std::sqrt(p + q));
    d2eexy[53] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C140011 * C183 - C67829 * C108 + C140012 * C896 - C67830 * C813 +
            C67750 * C2974 - C67831 * C2908) *
               C137755 +
           (C140011 * C189 - C67829 * C115 + C140012 * C901 - C67830 * C822 +
            C67750 * C2978 - C67831 * C2913) *
               C139967 +
           (C67833 - C67834 + C67835 - C67836 + C67837 - C67838) * C137748 +
           (C67839 - C67840 + C67841 - C67842 + C67843 - C67844) * C139736) *
              C139835 * C5270 +
          ((C67829 * C1570 - C140011 * C1653 + C67830 * C3438 -
            C140012 * C3520 + C67831 * C7754 - C67750 * C7863) *
               C137755 +
           (C67829 * C1579 - C140011 * C1658 + C67830 * C3443 -
            C140012 * C3524 + C67831 * C7759 - C67750 * C7866) *
               C139967 +
           (C69662 - C69663 + C69664 - C69665 + C69666 - C69667) * C137748 +
           (C69668 - C69669 + C69670 - C69671 + C69672 - C69673) * C139736) *
              C139835 * C5271 +
          ((C140011 * C5339 - C67829 * C5273 + C140012 * C13216 -
            C67830 * C13126 + C67750 * C13217 - C67831 * C13128) *
               C137755 +
           (C140011 * C5343 - C67829 * C5278 + C140012 * C13220 -
            C67830 * C13131 + C67750 * C13221 - C67831 * C13135) *
               C139967 +
           (C140011 * C5340 - C67829 * C5274 + C140012 * C13218 -
            C67830 * C13127 + C67750 * C13219 - C67831 * C13129) *
               C137748 +
           (C140011 * C5344 - C67829 * C5280 + C140012 * C13222 -
            C67830 * C13133 + C67750 * C13223 - C67831 * C13137) *
               C139736) *
              C139835 * C5272) *
         C139792 * C139758) /
        (p * q * std::sqrt(p + q));
    d2eexz[53] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139835 * C266 - C265 * C108) * C137755 +
            (C139835 * C272 - C265 * C115) * C139967 + (C279 - C280) * C137748 +
            (C281 - C282) * C139736) *
               C140011 +
           ((C6915 - C6916) * C137755 + (C6917 - C6918) * C139967 +
            C6919 * C137748 + C6920 * C139736) *
               C140012 +
           C71516 * C67750) *
              C5270 +
          (((C265 * C1570 - C139835 * C1741) * C137755 +
            (C265 * C1579 - C139835 * C1746) * C139967 +
            (C1752 - C1753) * C137748 + (C1754 - C1755) * C139736) *
               C140011 +
           ((C10635 - C10636) * C137755 + (C10637 - C10638) * C139967 +
            (C7986 - C7987) * C137748 + (C7988 - C7989) * C139736) *
               C140012 +
           ((C10639 - C10640) * C137755 + (C10641 - C10642) * C139967 +
            (C7990 - C7991) * C137748 + (C7992 - C7993) * C139736) *
               C67750) *
              C5271 +
          (((C139835 * C5397 - C265 * C5273) * C137755 +
            (C139835 * C5401 - C265 * C5278) * C139967 +
            (C139835 * C5398 - C265 * C5274) * C137748 +
            (C139835 * C5402 - C265 * C5280) * C139736) *
               C140011 +
           ((C139835 * C13298 - C265 * C13126) * C137755 +
            (C139835 * C13302 - C265 * C13131) * C139967 +
            (C139835 * C13299 - C265 * C13127) * C137748 +
            (C139835 * C13303 - C265 * C13133) * C139736) *
               C140012 +
           ((C139835 * C13300 - C265 * C13128) * C137755 +
            (C139835 * C13304 - C265 * C13135) * C139967 +
            (C139835 * C13301 - C265 * C13129) * C137748 +
            (C139835 * C13305 - C265 * C13137) * C139736) *
               C67750) *
              C5272) *
         C139792 * C139758) /
        (p * q * std::sqrt(p + q));
    d2eeyx[53] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C139967 * C114 - C137755 * C108 + C139736 * C116 - C137748 * C109) *
               C67829 +
           (C139967 * C354 - C137755 * C348 + C139736 * C355 - C137748 * C349) *
               C140011 +
           (C68898 - C68899 + C68900 - C68901) * C67830 +
           (C68902 - C68903 + C68904 - C68905) * C140012 + C71603 * C67831 +
           C71604 * C67750) *
              C139835 * C5270 +
          ((C137755 * C1570 - C139967 * C1578 + C137748 * C1569 -
            C139736 * C1576) *
               C67829 +
           (C137755 * C1829 - C139967 * C1834 + C137748 * C1830 -
            C139736 * C1835) *
               C140011 +
           (C72405 - C72406 + C72407 - C72408) * C67830 +
           (C72409 - C72410 + C72411 - C72412) * C140012 +
           (C72413 - C72414 + C72415 - C72416) * C67831 +
           (C72417 - C72418 + C72419 - C72420) * C67750) *
              C139835 * C5271 +
          ((C139967 * C5277 - C137755 * C5273 + C139736 * C5279 -
            C137748 * C5274) *
               C67829 +
           (C139967 * C5459 - C137755 * C5455 + C139736 * C5460 -
            C137748 * C5456) *
               C140011 +
           (C139967 * C13130 - C137755 * C13126 + C139736 * C13132 -
            C137748 * C13127) *
               C67830 +
           (C139967 * C13384 - C137755 * C13380 + C139736 * C13385 -
            C137748 * C13381) *
               C140012 +
           (C139967 * C13134 - C137755 * C13128 + C139736 * C13136 -
            C137748 * C13129) *
               C67831 +
           (C139967 * C13386 - C137755 * C13382 + C139736 * C13387 -
            C137748 * C13383) *
               C67750) *
              C139835 * C5272) *
         C139792 * C139758) /
        (p * q * std::sqrt(p + q));
    d2eeyy[53] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C67829 * C183 - C68078 * C108 - C67829 * C348 + C140011 * C411 +
            C67830 * C896 - C68079 * C813 - C67830 * C1072 + C140012 * C1151 +
            C67831 * C2974 - C68080 * C2908 - C67831 * C3090 + C67750 * C3148) *
               C139967 +
           (C68118 + C68119 + C68120) * C139736) *
              C139835 * C5270 -
          ((C69986 + C69987 + C69988) * C139736 +
           (C67831 * C7863 - C68080 * C7754 - C67831 * C8091 + C67750 * C8196 +
            C67830 * C3520 - C68079 * C3438 - C67830 * C3668 + C140012 * C3742 +
            C67829 * C1653 - C68078 * C1570 - C67829 * C1829 +
            C140011 * C1908) *
               C139967) *
              C139835 * C5271 +
          ((C67829 * C5339 - C68078 * C5273 - C67829 * C5455 + C140011 * C5513 +
            C67830 * C13216 - C68079 * C13126 - C67830 * C13380 +
            C140012 * C13462 + C67831 * C13217 - C68080 * C13128 -
            C67831 * C13382 + C67750 * C13463) *
               C139967 +
           (C67829 * C5340 - C68078 * C5274 - C67829 * C5456 + C140011 * C5514 +
            C67830 * C13218 - C68079 * C13127 - C67830 * C13381 +
            C140012 * C13464 + C67831 * C13219 - C68080 * C13129 -
            C67831 * C13383 + C67750 * C13465) *
               C139736) *
              C139835 * C5272) *
         C139792 * C139758) /
        (p * q * std::sqrt(p + q));
    d2eeyz[53] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139835 * C266 - C265 * C108) * C67829 +
            (C139835 * C495 - C265 * C348) * C140011 +
            (C6915 - C6916) * C67830 + (C7294 - C7295) * C140012 +
            C9790 * C67831 + C10047 * C67750) *
               C139967 +
           ((C279 - C280) * C67829 + (C502 - C503) * C140011 + C6919 * C67830 +
            C7298 * C140012 + C6925 * C67831 + C7299 * C67750) *
               C139736) *
              C5270 +
          (((C265 * C1570 - C139835 * C1741) * C67829 +
            (C265 * C1829 - C139835 * C1997) * C140011 +
            (C10635 - C10636) * C67830 + (C10961 - C10962) * C140012 +
            (C10639 - C10640) * C67831 + (C10963 - C10964) * C67750) *
               C139967 +
           ((C1752 - C1753) * C67829 + (C2003 - C2004) * C140011 +
            (C7986 - C7987) * C67830 + (C8321 - C8322) * C140012 +
            (C7990 - C7991) * C67831 + (C8323 - C8324) * C67750) *
               C139736) *
              C5271 +
          (((C139835 * C5397 - C265 * C5273) * C67829 +
            (C139835 * C5567 - C265 * C5455) * C140011 +
            (C139835 * C13298 - C265 * C13126) * C67830 +
            (C139835 * C13540 - C265 * C13380) * C140012 +
            (C139835 * C13300 - C265 * C13128) * C67831 +
            (C139835 * C13541 - C265 * C13382) * C67750) *
               C139967 +
           ((C139835 * C5398 - C265 * C5274) * C67829 +
            (C139835 * C5568 - C265 * C5456) * C140011 +
            (C139835 * C13299 - C265 * C13127) * C67830 +
            (C139835 * C13542 - C265 * C13381) * C140012 +
            (C139835 * C13301 - C265 * C13129) * C67831 +
            (C139835 * C13543 - C265 * C13383) * C67750) *
               C139736) *
              C5272) *
         C139792 * C139758) /
        (p * q * std::sqrt(p + q));
    d2eezx[53] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C139967 * C114 - C137755 * C108 + C139736 * C116 -
                       C137748 * C109) *
                          C265 +
                      (C139967 * C573 - C137755 * C567 + C139736 * C574 -
                       C137748 * C568) *
                          C139835) *
                         C140011 +
                     ((C68898 - C68899 + C68900 - C68901) * C265 +
                      (C69245 - C69246 + C69247 - C69248) * C139835) *
                         C140012 +
                     C71836 * C67750) *
                        C5270 +
                    (((C137755 * C1570 - C139967 * C1578 + C137748 * C1569 -
                       C139736 * C1576) *
                          C265 +
                      (C137755 * C2074 - C139967 * C2079 + C137748 * C2075 -
                       C139736 * C2080) *
                          C139835) *
                         C140011 +
                     ((C72405 - C72406 + C72407 - C72408) * C265 +
                      (C72715 - C72716 + C72717 - C72718) * C139835) *
                         C140012 +
                     ((C72413 - C72414 + C72415 - C72416) * C265 +
                      (C72719 - C72720 + C72721 - C72722) * C139835) *
                         C67750) *
                        C5271 +
                    (((C139967 * C5277 - C137755 * C5273 + C139736 * C5279 -
                       C137748 * C5274) *
                          C265 +
                      (C139967 * C5625 - C137755 * C5621 + C139736 * C5626 -
                       C137748 * C5622) *
                          C139835) *
                         C140011 +
                     ((C139967 * C13130 - C137755 * C13126 + C139736 * C13132 -
                       C137748 * C13127) *
                          C265 +
                      (C139967 * C13622 - C137755 * C13618 + C139736 * C13623 -
                       C137748 * C13619) *
                          C139835) *
                         C140012 +
                     ((C139967 * C13134 - C137755 * C13128 + C139736 * C13136 -
                       C137748 * C13129) *
                          C265 +
                      (C139967 * C13624 - C137755 * C13620 + C139736 * C13625 -
                       C137748 * C13621) *
                          C139835) *
                         C67750) *
                        C5272) *
                   C139792 * C139758) /
                  (p * q * std::sqrt(p + q));
    d2eezy[53] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C140011 * C183 - C67829 * C108 + C140012 * C896 - C67830 * C813 +
             C67750 * C2974 - C67831 * C2908) *
                C265 +
            (C140011 * C629 - C67829 * C567 + C140012 * C1393 - C67830 * C1317 +
             C67750 * C3314 - C67831 * C3256) *
                C139835) *
               C139967 +
           ((C67833 - C67834 + C67835 - C67836 + C67837 - C67838) * C265 +
            (C68346 - C68347 + C68348 - C68349 + C68350 - C68351) * C139835) *
               C139736) *
              C5270 +
          (((C67829 * C1570 - C140011 * C1653 + C67830 * C3438 -
             C140012 * C3520 + C67831 * C7754 - C67750 * C7863) *
                C265 +
            (C67829 * C2074 - C140011 * C2150 + C67830 * C3882 -
             C140012 * C3956 + C67831 * C8422 - C67750 * C8526) *
                C139835) *
               C139967 +
           ((C69662 - C69663 + C69664 - C69665 + C69666 - C69667) * C265 +
            (C70283 - C70284 + C70285 - C70286 + C70287 - C70288) * C139835) *
               C139736) *
              C5271 +
          (((C140011 * C5339 - C67829 * C5273 + C140012 * C13216 -
             C67830 * C13126 + C67750 * C13217 - C67831 * C13128) *
                C265 +
            (C140011 * C5679 - C67829 * C5621 + C140012 * C13700 -
             C67830 * C13618 + C67750 * C13701 - C67831 * C13620) *
                C139835) *
               C139967 +
           ((C140011 * C5340 - C67829 * C5274 + C140012 * C13218 -
             C67830 * C13127 + C67750 * C13219 - C67831 * C13129) *
                C265 +
            (C140011 * C5680 - C67829 * C5622 + C140012 * C13702 -
             C67830 * C13619 + C67750 * C13703 - C67831 * C13621) *
                C139835) *
               C139736) *
              C5272) *
         C139792 * C139758) /
        (p * q * std::sqrt(p + q));
    d2eezz[53] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C265 * C266 - C701 * C108 - C265 * C567 + C139835 * C702) *
                C140011 +
            C7652 * C140012 + C7653 * C67750) *
               C139967 +
           (C68432 + C68433 + C68434) * C139736) *
              C5270 -
          ((C70387 + C70388 + C70389) * C139736 +
           (C11287 * C67750 + C11288 * C140012 +
            (C265 * C1741 - C701 * C1570 - C265 * C2074 + C139835 * C2230) *
                C140011) *
               C139967) *
              C5271 +
          (((C265 * C5397 - C701 * C5273 - C265 * C5621 + C139835 * C5733) *
                C140011 +
            (C265 * C13298 - C701 * C13126 - C265 * C13618 + C139835 * C13778) *
                C140012 +
            (C265 * C13300 - C701 * C13128 - C265 * C13620 + C139835 * C13779) *
                C67750) *
               C139967 +
           ((C265 * C5398 - C701 * C5274 - C265 * C5622 + C139835 * C5734) *
                C140011 +
            (C265 * C13299 - C701 * C13127 - C265 * C13619 + C139835 * C13780) *
                C140012 +
            (C265 * C13301 - C701 * C13129 - C265 * C13621 + C139835 * C13781) *
                C67750) *
               C139736) *
              C5272) *
         C139792 * C139758) /
        (p * q * std::sqrt(p + q));
    d2eexx[54] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C54790 * C114 - C54791 * C108 - C54790 * C115 + C139731 * C126) *
                C139984 +
            C61654 * C139899) *
               C140011 +
           (C55303 * C139984 + C57671 * C139899) * C140012 +
           (C55304 * C139984 + C57670 * C139899) * C67750) *
              C139809 * C139792 * C97 -
          (((C54790 * C7756 - C54791 * C7753 - C54790 * C7757 +
             C139731 * C7762) *
                C139899 +
            C55307 * C139984) *
               C67750 +
           (C60686 * C139899 + C55306 * C139984) * C140012 +
           (C61656 * C139899 +
            (C54790 * C116 - C54791 * C109 - C54790 * C117 + C139731 * C127) *
                C139984) *
               C140011) *
              C139809 * C139792 * C98 +
          (((C54790 * C118 - C54791 * C110 - C54790 * C119 + C139731 * C128) *
                C139984 +
            (C54790 * C1574 - C54791 * C1568 - C54790 * C1575 +
             C139731 * C1583) *
                C139899) *
               C140011 +
           ((C54790 * C817 - C54791 * C811 - C54790 * C818 + C139731 * C826) *
                C139984 +
            (C54790 * C3446 - C54791 * C3440 - C54790 * C3447 +
             C139731 * C3452) *
                C139899) *
               C140012 +
           ((C54790 * C2916 - C54791 * C2910 - C54790 * C2917 +
             C139731 * C2922) *
                C139984 +
            (C54790 * C7760 - C54791 * C7755 - C54790 * C7761 +
             C139731 * C7764) *
                C139899) *
               C67750) *
              C139809 * C139792 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eexy[54] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C140011 * C183 - C67829 * C108 + C140012 * C896 - C67830 * C813 +
             C67750 * C2974 - C67831 * C2908) *
                C54790 +
            (C140011 * C189 - C67829 * C115 + C140012 * C901 - C67830 * C822 +
             C67750 * C2978 - C67831 * C2913) *
                C139731) *
               C139984 +
           ((C140011 * C1653 - C67829 * C1570 + C140012 * C3520 -
             C67830 * C3438 + C67750 * C7863 - C67831 * C7754) *
                C54790 +
            (C140011 * C1658 - C67829 * C1579 + C140012 * C3524 -
             C67830 * C3443 + C67750 * C7866 - C67831 * C7759) *
                C139731) *
               C139899) *
              C139809 * C139792 * C97 +
          (((C67834 - C67833 + C67836 - C67835 + C67838 - C67837) * C54790 +
            (C67840 - C67839 + C67842 - C67841 + C67844 - C67843) * C139731) *
               C139984 +
           ((C69662 - C69663 + C69664 - C69665 + C69666 - C69667) * C54790 +
            (C69668 - C69669 + C69670 - C69671 + C69672 - C69673) * C139731) *
               C139899) *
              C139809 * C139792 * C98 +
          (((C67846 - C67845 + C67848 - C67847 + C67850 - C67849) * C54790 +
            (C67852 - C67851 + C67854 - C67853 + C67856 - C67855) * C139731) *
               C139984 +
           ((C140011 * C1655 - C67829 * C1568 + C140012 * C3522 -
             C67830 * C3440 + C67750 * C7865 - C67831 * C7755) *
                C54790 +
            (C140011 * C1660 - C67829 * C1575 + C140012 * C3526 -
             C67830 * C3447 + C67750 * C7868 - C67831 * C7761) *
                C139731) *
               C139899) *
              C139809 * C139792 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eexz[54] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C139984 * C266 - C29624 * C108 + C139899 * C1741 -
                       C29625 * C1570) *
                          C54790 +
                      (C139984 * C272 - C29624 * C115 + C139899 * C1746 -
                       C29625 * C1579) *
                          C139731) *
                         C140011 +
                     ((C38340 - C38341 + C38342 - C38343) * C54790 +
                      (C38344 - C38345 + C38346 - C38347) * C139731) *
                         C140012 +
                     ((C41955 - C41954 + C41957 - C41956) * C54790 +
                      (C41959 - C41958 + C41961 - C41960) * C139731) *
                         C67750) *
                        C139809 * C139792 * C97 +
                    (((C29628 - C29627 + C29630 - C29629) * C54790 +
                      (C29632 - C29631 + C29634 - C29633) * C139731) *
                         C140011 +
                     (C38366 * C54790 + C38367 * C139731) * C140012 +
                     ((C38356 - C38357 + C38358 - C38359) * C54790 +
                      (C38360 - C38361 + C38362 - C38363) * C139731) *
                         C67750) *
                        C139809 * C139792 * C98 +
                    ((C29655 * C54790 + C29656 * C139731) * C140011 +
                     ((C30480 - C30479 + C30482 - C30481) * C54790 +
                      (C30484 - C30483 + C30486 - C30485) * C139731) *
                         C140012 +
                     ((C139984 * C3034 - C29624 * C2910 + C139899 * C7981 -
                       C29625 * C7755) *
                          C54790 +
                      (C139984 * C3038 - C29624 * C2917 + C139899 * C7984 -
                       C29625 * C7761) *
                          C139731) *
                         C67750) *
                        C139809 * C139792 * C99)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[54] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C139731 * C114 - C54790 * C108) * C67829 +
                      (C139731 * C354 - C54790 * C348) * C140011 +
                      (C55513 - C55514) * C67830 + (C55515 - C55516) * C140012 +
                      C57297 * C67831 + C57298 * C67750) *
                         C139984 +
                     ((C61976 - C61977) * C67829 + (C61978 - C61979) * C140011 +
                      C64587 * C67830 + C64588 * C140012 +
                      (C57888 - C57887) * C67831 + (C57890 - C57889) * C67750) *
                         C139899) *
                        C139809 * C139792 * C97 +
                    (((C54790 * C109 - C139731 * C116) * C67829 +
                      (C54790 * C349 - C139731 * C355) * C140011 +
                      (C55525 - C55526) * C67830 + (C55527 - C55528) * C140012 +
                      (C55529 - C55530) * C67831 + (C55531 - C55532) * C67750) *
                         C139984 +
                     ((C61984 - C61985) * C67829 + (C61986 - C61987) * C140011 +
                      (C61001 - C61002) * C67830 + (C61003 - C61004) * C140012 +
                      (C54790 * C7753 - C139731 * C7756) * C67831 +
                      (C54790 * C8092 - C139731 * C8095) * C67750) *
                         C139899) *
                        C139809 * C139792 * C98 +
                    (((C139731 * C118 - C54790 * C110) * C67829 +
                      (C139731 * C356 - C54790 * C350) * C140011 +
                      (C139731 * C817 - C54790 * C811) * C67830 +
                      (C139731 * C1079 - C54790 * C1074) * C140012 +
                      (C139731 * C2916 - C54790 * C2910) * C67831 +
                      (C139731 * C3096 - C54790 * C3092) * C67750) *
                         C139984 +
                     ((C139731 * C1574 - C54790 * C1568) * C67829 +
                      (C139731 * C1836 - C54790 * C1831) * C140011 +
                      (C139731 * C3446 - C54790 * C3440) * C67830 +
                      (C139731 * C3674 - C54790 * C3670) * C140012 +
                      (C139731 * C7760 - C54790 * C7755) * C67831 +
                      (C139731 * C8096 - C54790 * C8093) * C67750) *
                         C139899) *
                        C139809 * C139792 * C99)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[54] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C67829 * C183 - C68078 * C108 - C67829 * C348 + C140011 * C411 +
            C67830 * C896 - C68079 * C813 - C67830 * C1072 + C140012 * C1151 +
            C67831 * C2974 - C68080 * C2908 - C67831 * C3090 + C67750 * C3148) *
               C139731 * C139984 +
           (C67829 * C1653 - C68078 * C1570 - C67829 * C1829 + C140011 * C1908 +
            C67830 * C3520 - C68079 * C3438 - C67830 * C3668 + C140012 * C3742 +
            C67831 * C7863 - C68080 * C7754 - C67831 * C8091 + C67750 * C8196) *
               C139731 * C139899) *
              C139809 * C139792 * C97 -
          ((C69986 + C69987 + C69988) * C139731 * C139899 +
           (C68120 + C68119 + C68118) * C139731 * C139984) *
              C139809 * C139792 * C98 +
          ((C68123 + C68122 + C68121) * C139731 * C139984 +
           (C67829 * C1655 - C68078 * C1568 - C67829 * C1831 + C140011 * C1906 +
            C67830 * C3522 - C68079 * C3440 - C67830 * C3670 + C140012 * C3744 +
            C67831 * C7865 - C68080 * C7755 - C67831 * C8093 + C67750 * C8197) *
               C139731 * C139899) *
              C139809 * C139792 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[54] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C139984 * C266 - C29624 * C108 + C139899 * C1741 - C29625 * C1570) *
               C67829 +
           (C139984 * C495 - C29624 * C348 + C139899 * C1997 - C29625 * C1829) *
               C140011 +
           (C38340 - C38341 + C38342 - C38343) * C67830 +
           (C38780 - C38781 + C38782 - C38783) * C140012 +
           (C41955 - C41954 + C41957 - C41956) * C67831 +
           (C42257 - C42256 + C42259 - C42258) * C67750) *
              C139731 * C139809 * C139792 * C97 +
          ((C29628 - C29627 + C29630 - C29629) * C67829 +
           (C29880 - C29879 + C29882 - C29881) * C140011 + C38366 * C67830 +
           C38793 * C140012 + (C38356 - C38357 + C38358 - C38359) * C67831 +
           (C38788 - C38789 + C38790 - C38791) * C67750) *
              C139731 * C139809 * C139792 * C98 +
          (C29655 * C67829 + C29894 * C140011 +
           (C30480 - C30479 + C30482 - C30481) * C67830 +
           (C30793 - C30792 + C30795 - C30794) * C140012 +
           (C139984 * C3034 - C29624 * C2910 + C139899 * C7981 -
            C29625 * C7755) *
               C67831 +
           (C139984 * C3204 - C29624 * C3092 + C139899 * C8319 -
            C29625 * C8093) *
               C67750) *
              C139731 * C139809 * C139792 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eezx[54] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139731 * C114 - C54790 * C108) * C29624 +
            (C139731 * C573 - C54790 * C567) * C139984 +
            (C61976 - C61977) * C29625 + (C62328 - C62329) * C139899) *
               C140011 +
           ((C55513 - C55514) * C29624 + (C55735 - C55736) * C139984 +
            C64587 * C29625 + C64931 * C139899) *
               C140012 +
           (C57297 * C29624 + C57463 * C139984 + (C57888 - C57887) * C29625 +
            (C58102 - C58101) * C139899) *
               C67750) *
              C139809 * C139792 * C97 +
          (((C54790 * C109 - C139731 * C116) * C29624 +
            (C54790 * C568 - C139731 * C574) * C139984 +
            (C61984 - C61985) * C29625 + (C62332 - C62333) * C139899) *
               C140011 +
           ((C55525 - C55526) * C29624 + (C55741 - C55742) * C139984 +
            (C61001 - C61002) * C29625 + (C61311 - C61312) * C139899) *
               C140012 +
           ((C55529 - C55530) * C29624 + (C55743 - C55744) * C139984 +
            (C54790 * C7753 - C139731 * C7756) * C29625 +
            (C54790 * C8423 - C139731 * C8426) * C139899) *
               C67750) *
              C139809 * C139792 * C98 +
          (((C139731 * C118 - C54790 * C110) * C29624 +
            (C139731 * C575 - C54790 * C569) * C139984 +
            (C139731 * C1574 - C54790 * C1568) * C29625 +
            (C139731 * C2081 - C54790 * C2076) * C139899) *
               C140011 +
           ((C139731 * C817 - C54790 * C811) * C29624 +
            (C139731 * C1324 - C54790 * C1319) * C139984 +
            (C139731 * C3446 - C54790 * C3440) * C29625 +
            (C139731 * C3888 - C54790 * C3884) * C139899) *
               C140012 +
           ((C139731 * C2916 - C54790 * C2910) * C29624 +
            (C139731 * C3262 - C54790 * C3258) * C139984 +
            (C139731 * C7760 - C54790 * C7755) * C29625 +
            (C139731 * C8427 - C54790 * C8424) * C139899) *
               C67750) *
              C139809 * C139792 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eezy[54] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C140011 * C183 - C67829 * C108 + C140012 * C896 - C67830 * C813 +
            C67750 * C2974 - C67831 * C2908) *
               C29624 +
           (C140011 * C629 - C67829 * C567 + C140012 * C1393 - C67830 * C1317 +
            C67750 * C3314 - C67831 * C3256) *
               C139984 +
           (C140011 * C1653 - C67829 * C1570 + C140012 * C3520 -
            C67830 * C3438 + C67750 * C7863 - C67831 * C7754) *
               C29625 +
           (C140011 * C2150 - C67829 * C2074 + C140012 * C3956 -
            C67830 * C3882 + C67750 * C8526 - C67831 * C8422) *
               C139899) *
              C139731 * C139809 * C139792 * C97 +
          ((C67834 - C67833 + C67836 - C67835 + C67838 - C67837) * C29624 +
           (C68347 - C68346 + C68349 - C68348 + C68351 - C68350) * C139984 +
           (C69662 - C69663 + C69664 - C69665 + C69666 - C69667) * C29625 +
           (C70283 - C70284 + C70285 - C70286 + C70287 - C70288) * C139899) *
              C139731 * C139809 * C139792 * C98 +
          ((C67846 - C67845 + C67848 - C67847 + C67850 - C67849) * C29624 +
           (C68353 - C68352 + C68355 - C68354 + C68357 - C68356) * C139984 +
           (C140011 * C1655 - C67829 * C1568 + C140012 * C3522 -
            C67830 * C3440 + C67750 * C7865 - C67831 * C7755) *
               C29625 +
           (C140011 * C2152 - C67829 * C2076 + C140012 * C3958 -
            C67830 * C3884 + C67750 * C8528 - C67831 * C8424) *
               C139899) *
              C139731 * C139809 * C139792 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eezz[54] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C29624 * C266 - C30126 * C108 - C29624 * C567 +
                      C139984 * C702 + C29625 * C1741 - C30127 * C1570 -
                      C29625 * C2074 + C139899 * C2230) *
                         C140011 +
                     (C39218 + C39219) * C140012 + (C42567 + C42566) * C67750) *
                        C139731 * C139809 * C139792 * C97 -
                    ((C39220 + C39221) * C67750 + C39209 * C140012 +
                     (C30166 + C30165) * C140011) *
                        C139731 * C139809 * C139792 * C98 +
                    (C30171 * C140011 + (C31117 + C31116) * C140012 +
                     (C29624 * C3034 - C30126 * C2910 - C29624 * C3258 +
                      C139984 * C3370 + C29625 * C7981 - C30127 * C7755 -
                      C29625 * C8424 + C139899 * C8635) *
                         C67750) *
                        C139731 * C139809 * C139792 * C99)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[55] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C54790 * C114 - C54791 * C108 - C54790 * C115 + C139731 * C126) *
                 C139984 +
             C61654 * C139899) *
                C140011 +
            (C85975 + C85976) * C140012 + (C85977 + C85978) * C67750) *
               C139809 * C806 -
           ((C57669 * C139899 + C55305 * C139984) * C67750 +
            (C85978 + C85977) * C140012 + (C85976 + C85975) * C140011) *
               C139809 * C140000) *
              C808 +
          (((C85979 + C85980) * C140011 + (C85981 + C85989) * C140012 +
            (C55308 * C139984 + (C54790 * C10398 - C54791 * C10395 -
                                 C54790 * C10399 + C139731 * C10401) *
                                    C139899) *
                C67750) *
               C139809 * C140000 -
           ((C85989 + C85981) * C67750 + (C85980 + C85979) * C140012 +
            (C61656 * C139899 +
             (C54790 * C116 - C54791 * C109 - C54790 * C117 + C139731 * C127) *
                 C139984) *
                C140011) *
               C139809 * C806) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexy[55] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C140011 * C183 - C67829 * C108 + C140012 * C896 - C67830 * C813 +
              C67750 * C2974 - C67831 * C2908) *
                 C54790 +
             (C140011 * C189 - C67829 * C115 + C140012 * C901 - C67830 * C822 +
              C67750 * C2978 - C67831 * C2913) *
                 C139731) *
                C139984 +
            ((C140011 * C1653 - C67829 * C1570 + C140012 * C3520 -
              C67830 * C3438 + C67750 * C7863 - C67831 * C7754) *
                 C54790 +
             (C140011 * C1658 - C67829 * C1579 + C140012 * C3524 -
              C67830 * C3443 + C67750 * C7866 - C67831 * C7759) *
                 C139731) *
                C139899) *
               C139809 * C806 +
           (((C67829 * C813 - C140011 * C896 + C67830 * C2908 -
              C140012 * C2974 + C67831 * C6627 - C67750 * C6792) *
                 C54790 +
             (C67829 * C822 - C140011 * C901 + C67830 * C2913 -
              C140012 * C2978 + C67831 * C6632 - C67750 * C6795) *
                 C139731) *
                C139984 +
            ((C67829 * C3438 - C140011 * C3520 + C67830 * C7754 -
              C140012 * C7863 + C67831 * C10394 - C67750 * C10528) *
                 C54790 +
             (C67829 * C3443 - C140011 * C3524 + C67830 * C7759 -
              C140012 * C7866 + C67831 * C10397 - C67750 * C10530) *
                 C139731) *
                C139899) *
               C139809 * C140000) *
              C808 +
          ((((C67834 - C67833 + C67836 - C67835 + C67838 - C67837) * C54790 +
             (C67840 - C67839 + C67842 - C67841 + C67844 - C67843) * C139731) *
                C139984 +
            ((C69662 - C69663 + C69664 - C69665 + C69666 - C69667) * C54790 +
             (C69668 - C69669 + C69670 - C69671 + C69672 - C69673) * C139731) *
                C139899) *
               C139809 * C806 +
           (((C68691 - C68690 + C68693 - C68692 + C68695 - C68694) * C54790 +
             (C68697 - C68696 + C68699 - C68698 + C68701 - C68700) * C139731) *
                C139984 +
            ((C140011 * C3521 - C67829 * C3439 + C140012 * C7864 -
              C67830 * C7753 + C67750 * C10529 - C67831 * C10395) *
                 C54790 +
             (C140011 * C3525 - C67829 * C3445 + C140012 * C7867 -
              C67830 * C7757 + C67750 * C10531 - C67831 * C10399) *
                 C139731) *
                C139899) *
               C139809 * C140000) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexz[55] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C139984 * C266 - C29624 * C108 + C139899 * C1741 -
                        C29625 * C1570) *
                           C54790 +
                       (C139984 * C272 - C29624 * C115 + C139899 * C1746 -
                        C29625 * C1579) *
                           C139731) *
                          C140011 +
                      ((C38340 - C38341 + C38342 - C38343) * C54790 +
                       (C38344 - C38345 + C38346 - C38347) * C139731) *
                          C140012 +
                      ((C41955 - C41954 + C41957 - C41956) * C54790 +
                       (C41959 - C41958 + C41961 - C41960) * C139731) *
                          C67750) *
                         C139809 * C806 +
                     (((C38341 - C38340 + C38343 - C38342) * C54790 +
                       (C38345 - C38344 + C38347 - C38346) * C139731) *
                          C140011 +
                      ((C41954 - C41955 + C41956 - C41957) * C54790 +
                       (C41958 - C41959 + C41960 - C41961) * C139731) *
                          C140012 +
                      ((C29624 * C6627 - C139984 * C6908 + C29625 * C10394 -
                        C139899 * C10630) *
                           C54790 +
                       (C29624 * C6632 - C139984 * C6911 + C29625 * C10397 -
                        C139899 * C10632) *
                           C139731) *
                          C67750) *
                         C139809 * C140000) *
                        C808 +
                    ((((C29628 - C29627 + C29630 - C29629) * C54790 +
                       (C29632 - C29631 + C29634 - C29633) * C139731) *
                          C140011 +
                      (C38366 * C54790 + C38367 * C139731) * C140012 +
                      ((C38356 - C38357 + C38358 - C38359) * C54790 +
                       (C38360 - C38361 + C38362 - C38363) * C139731) *
                          C67750) *
                         C139809 * C806 +
                     ((C38364 * C54790 + C38365 * C139731) * C140011 +
                      ((C38357 - C38356 + C38359 - C38358) * C54790 +
                       (C38361 - C38360 + C38363 - C38362) * C139731) *
                          C140012 +
                      ((C139984 * C6909 - C29624 * C6626 + C139899 * C10631 -
                        C29625 * C10395) *
                           C54790 +
                       (C139984 * C6912 - C29624 * C6630 + C139899 * C10633 -
                        C29625 * C10399) *
                           C139731) *
                          C67750) *
                         C139809 * C140000) *
                        C139998)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[55] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139731 * C114 - C54790 * C108) * C67829 +
             (C139731 * C354 - C54790 * C348) * C140011 +
             (C55513 - C55514) * C67830 + (C55515 - C55516) * C140012 +
             C57297 * C67831 + C57298 * C67750) *
                C139984 +
            ((C61976 - C61977) * C67829 + (C61978 - C61979) * C140011 +
             C64587 * C67830 + C64588 * C140012 + (C57888 - C57887) * C67831 +
             (C57890 - C57889) * C67750) *
                C139899) *
               C139809 * C806 +
           (((C55514 - C55513) * C67829 + (C55516 - C55515) * C140011 +
             (C55518 - C55517) * C67830 + (C55520 - C55519) * C140012 +
             (C55522 - C55521) * C67831 + (C55524 - C55523) * C67750) *
                C139984 +
            (C64591 * C67829 + C64592 * C140011 + (C57887 - C57888) * C67830 +
             (C57889 - C57890) * C140012 + (C57891 - C57892) * C67831 +
             (C57893 - C57894) * C67750) *
                C139899) *
               C139809 * C140000) *
              C808 +
          ((((C54790 * C109 - C139731 * C116) * C67829 +
             (C54790 * C349 - C139731 * C355) * C140011 +
             (C55525 - C55526) * C67830 + (C55527 - C55528) * C140012 +
             (C55529 - C55530) * C67831 + (C55531 - C55532) * C67750) *
                C139984 +
            ((C61984 - C61985) * C67829 + (C61986 - C61987) * C140011 +
             (C61001 - C61002) * C67830 + (C61003 - C61004) * C140012 +
             (C86284 - C86285) * C67831 + (C86286 - C86287) * C67750) *
                C139899) *
               C139809 * C806 +
           (((C55526 - C55525) * C67829 + (C55528 - C55527) * C140011 +
             (C55530 - C55529) * C67830 + (C55532 - C55531) * C140012 +
             (C55534 - C55533) * C67831 + (C55536 - C55535) * C67750) *
                C139984 +
            ((C61002 - C61001) * C67829 + (C61004 - C61003) * C140011 +
             (C86285 - C86284) * C67830 + (C86287 - C86286) * C140012 +
             (C139731 * C10398 - C54790 * C10395) * C67831 +
             (C139731 * C10743 - C54790 * C10741) * C67750) *
                C139899) *
               C139809 * C140000) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[55] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C67829 * C183 - C68078 * C108 - C67829 * C348 +
                       C140011 * C411 + C67830 * C896 - C68079 * C813 -
                       C67830 * C1072 + C140012 * C1151 + C67831 * C2974 -
                       C68080 * C2908 - C67831 * C3090 + C67750 * C3148) *
                          C139731 * C139984 +
                      (C67829 * C1653 - C68078 * C1570 - C67829 * C1829 +
                       C140011 * C1908 + C67830 * C3520 - C68079 * C3438 -
                       C67830 * C3668 + C140012 * C3742 + C67831 * C7863 -
                       C68080 * C7754 - C67831 * C8091 + C67750 * C8196) *
                          C139731 * C139899) *
                         C139809 * C806 -
                     ((C67831 * C10528 - C68080 * C10394 - C67831 * C10740 +
                       C67750 * C10858 + C67830 * C7863 - C68079 * C7754 -
                       C67830 * C8091 + C140012 * C8196 + C67829 * C3520 -
                       C68078 * C3438 - C67829 * C3668 + C140011 * C3742) *
                          C139731 * C139899 +
                      (C67831 * C6792 - C68080 * C6627 - C67831 * C7032 +
                       C67750 * C7169 + C67830 * C2974 - C68079 * C2908 -
                       C67830 * C3090 + C140012 * C3148 + C67829 * C896 -
                       C68078 * C813 - C67829 * C1072 + C140011 * C1151) *
                          C139731 * C139984) *
                         C139809 * C140000) *
                        C808 +
                    (((C69048 + C69047 + C69046) * C139731 * C139984 +
                      (C67829 * C3521 - C68078 * C3439 - C67829 * C3669 +
                       C140011 * C3743 + C67830 * C7864 - C68079 * C7753 -
                       C67830 * C8092 + C140012 * C8195 + C67831 * C10529 -
                       C68080 * C10395 - C67831 * C10741 + C67750 * C10859) *
                          C139731 * C139899) *
                         C139809 * C140000 -
                     ((C69986 + C69987 + C69988) * C139731 * C139899 +
                      (C68120 + C68119 + C68118) * C139731 * C139984) *
                         C139809 * C806) *
                        C139998)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[55] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139984 * C266 - C29624 * C108 + C139899 * C1741 -
             C29625 * C1570) *
                C67829 +
            (C139984 * C495 - C29624 * C348 + C139899 * C1997 -
             C29625 * C1829) *
                C140011 +
            (C38340 - C38341 + C38342 - C38343) * C67830 +
            (C38780 - C38781 + C38782 - C38783) * C140012 +
            (C41955 - C41954 + C41957 - C41956) * C67831 +
            (C42257 - C42256 + C42259 - C42258) * C67750) *
               C139731 * C139809 * C806 +
           ((C38341 - C38340 + C38343 - C38342) * C67829 +
            (C38781 - C38780 + C38783 - C38782) * C140011 +
            (C41954 - C41955 + C41956 - C41957) * C67830 +
            (C42256 - C42257 + C42258 - C42259) * C140012 +
            (C29624 * C6627 - C139984 * C6908 + C29625 * C10394 -
             C139899 * C10630) *
                C67831 +
            (C29624 * C7032 - C139984 * C7290 + C29625 * C10740 -
             C139899 * C10958) *
                C67750) *
               C139731 * C139809 * C140000) *
              C808 +
          (((C29628 - C29627 + C29630 - C29629) * C67829 +
            (C29880 - C29879 + C29882 - C29881) * C140011 + C38366 * C67830 +
            C38793 * C140012 + (C38356 - C38357 + C38358 - C38359) * C67831 +
            (C38788 - C38789 + C38790 - C38791) * C67750) *
               C139731 * C139809 * C806 +
           (C38364 * C67829 + C38792 * C140011 +
            (C38357 - C38356 + C38359 - C38358) * C67830 +
            (C38789 - C38788 + C38791 - C38790) * C140012 +
            (C139984 * C6909 - C29624 * C6626 + C139899 * C10631 -
             C29625 * C10395) *
                C67831 +
            (C139984 * C7291 - C29624 * C7033 + C139899 * C10959 -
             C29625 * C10741) *
                C67750) *
               C139731 * C139809 * C140000) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eezx[55] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139731 * C114 - C54790 * C108) * C29624 +
             (C139731 * C573 - C54790 * C567) * C139984 +
             (C61976 - C61977) * C29625 + (C62328 - C62329) * C139899) *
                C140011 +
            ((C55513 - C55514) * C29624 + (C55735 - C55736) * C139984 +
             C64587 * C29625 + C64931 * C139899) *
                C140012 +
            (C57297 * C29624 + C57463 * C139984 + (C57888 - C57887) * C29625 +
             (C58102 - C58101) * C139899) *
                C67750) *
               C139809 * C806 +
           (((C55514 - C55513) * C29624 + (C55736 - C55735) * C139984 +
             C64591 * C29625 + C64933 * C139899) *
                C140011 +
            ((C55518 - C55517) * C29624 + (C55738 - C55737) * C139984 +
             (C57887 - C57888) * C29625 + (C58101 - C58102) * C139899) *
                C140012 +
            ((C55522 - C55521) * C29624 + (C55740 - C55739) * C139984 +
             (C57891 - C57892) * C29625 + (C58103 - C58104) * C139899) *
                C67750) *
               C139809 * C140000) *
              C808 +
          ((((C54790 * C109 - C139731 * C116) * C29624 +
             (C54790 * C568 - C139731 * C574) * C139984 +
             (C61984 - C61985) * C29625 + (C62332 - C62333) * C139899) *
                C140011 +
            ((C55525 - C55526) * C29624 + (C55741 - C55742) * C139984 +
             (C61001 - C61002) * C29625 + (C61311 - C61312) * C139899) *
                C140012 +
            ((C55529 - C55530) * C29624 + (C55743 - C55744) * C139984 +
             (C86284 - C86285) * C29625 + (C86582 - C86583) * C139899) *
                C67750) *
               C139809 * C806 +
           (((C55526 - C55525) * C29624 + (C55742 - C55741) * C139984 +
             (C61002 - C61001) * C29625 + (C61312 - C61311) * C139899) *
                C140011 +
            ((C55530 - C55529) * C29624 + (C55744 - C55743) * C139984 +
             (C86285 - C86284) * C29625 + (C86583 - C86582) * C139899) *
                C140012 +
            ((C55534 - C55533) * C29624 + (C55746 - C55745) * C139984 +
             (C139731 * C10398 - C54790 * C10395) * C29625 +
             (C139731 * C11065 - C54790 * C11063) * C139899) *
                C67750) *
               C139809 * C140000) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eezy[55] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C140011 * C183 - C67829 * C108 + C140012 * C896 - C67830 * C813 +
             C67750 * C2974 - C67831 * C2908) *
                C29624 +
            (C140011 * C629 - C67829 * C567 + C140012 * C1393 - C67830 * C1317 +
             C67750 * C3314 - C67831 * C3256) *
                C139984 +
            (C140011 * C1653 - C67829 * C1570 + C140012 * C3520 -
             C67830 * C3438 + C67750 * C7863 - C67831 * C7754) *
                C29625 +
            (C140011 * C2150 - C67829 * C2074 + C140012 * C3956 -
             C67830 * C3882 + C67750 * C8526 - C67831 * C8422) *
                C139899) *
               C139731 * C139809 * C806 +
           ((C67829 * C813 - C140011 * C896 + C67830 * C2908 - C140012 * C2974 +
             C67831 * C6627 - C67750 * C6792) *
                C29624 +
            (C67829 * C1317 - C140011 * C1393 + C67830 * C3256 -
             C140012 * C3314 + C67831 * C7401 - C67750 * C7521) *
                C139984 +
            (C67829 * C3438 - C140011 * C3520 + C67830 * C7754 -
             C140012 * C7863 + C67831 * C10394 - C67750 * C10528) *
                C29625 +
            (C67829 * C3882 - C140011 * C3956 + C67830 * C8422 -
             C140012 * C8526 + C67831 * C11062 - C67750 * C11172) *
                C139899) *
               C139731 * C139809 * C140000) *
              C808 +
          (((C67834 - C67833 + C67836 - C67835 + C67838 - C67837) * C29624 +
            (C68347 - C68346 + C68349 - C68348 + C68351 - C68350) * C139984 +
            (C69662 - C69663 + C69664 - C69665 + C69666 - C69667) * C29625 +
            (C70283 - C70284 + C70285 - C70286 + C70287 - C70288) * C139899) *
               C139731 * C139809 * C806 +
           ((C68691 - C68690 + C68693 - C68692 + C68695 - C68694) * C29624 +
            (C69360 - C69359 + C69362 - C69361 + C69364 - C69363) * C139984 +
            (C140011 * C3521 - C67829 * C3439 + C140012 * C7864 -
             C67830 * C7753 + C67750 * C10529 - C67831 * C10395) *
                C29625 +
            (C140011 * C3957 - C67829 * C3883 + C140012 * C8527 -
             C67830 * C8423 + C67750 * C11173 - C67831 * C11063) *
                C139899) *
               C139731 * C139809 * C140000) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eezz[55] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C29624 * C266 - C30126 * C108 - C29624 * C567 + C139984 * C702 +
             C29625 * C1741 - C30127 * C1570 - C29625 * C2074 +
             C139899 * C2230) *
                C140011 +
            (C39218 + C39219) * C140012 + (C42567 + C42566) * C67750) *
               C139731 * C139809 * C806 -
           ((C29625 * C10630 - C30127 * C10394 - C29625 * C11062 +
             C139899 * C11272 + C29624 * C6908 - C30126 * C6627 -
             C29624 * C7401 + C139984 * C7629) *
                C67750 +
            (C42566 + C42567) * C140012 + (C39219 + C39218) * C140011) *
               C139731 * C139809 * C140000) *
              C808 +
          ((C39200 * C140011 + (C39221 + C39220) * C140012 +
            (C29624 * C6909 - C30126 * C6626 - C29624 * C7402 +
             C139984 * C7628 + C29625 * C10631 - C30127 * C10395 -
             C29625 * C11063 + C139899 * C11273) *
                C67750) *
               C139731 * C139809 * C140000 -
           ((C39220 + C39221) * C67750 + C39209 * C140012 +
            (C30166 + C30165) * C140011) *
               C139731 * C139809 * C806) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexx[56] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C54790 * C114 - C54791 * C108 - C54790 * C115 + C139731 * C126) *
                 C139984 +
             C61654 * C139899) *
                C140011 +
            (C85975 + C85976) * C140012 + (C85977 + C85978) * C67750) *
               C1565 -
           ((C63508 * C139899 + C57670 * C139984) * C67750 +
            (C60685 * C139899 + C57671 * C139984) * C140012 +
            (C61655 * C139899 + C61654 * C139984) * C140011) *
               C140002) *
              C139792 * C808 +
          (((C61656 * C139984 + C61657 * C139899) * C140011 +
            (C60686 * C139984 + C60687 * C139899) * C140012 +
            (C85988 * C139984 + (C54790 * C13136 - C54791 * C13129 -
                                 C54790 * C13137 + C139731 * C13141) *
                                    C139899) *
                C67750) *
               C140002 -
           ((C85989 + C85981) * C67750 + (C85980 + C85979) * C140012 +
            (C61656 * C139899 +
             (C54790 * C116 - C54791 * C109 - C54790 * C117 + C139731 * C127) *
                 C139984) *
                C140011) *
               C1565) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexy[56] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C140011 * C183 - C67829 * C108 + C140012 * C896 - C67830 * C813 +
              C67750 * C2974 - C67831 * C2908) *
                 C54790 +
             (C140011 * C189 - C67829 * C115 + C140012 * C901 - C67830 * C822 +
              C67750 * C2978 - C67831 * C2913) *
                 C139731) *
                C139984 +
            ((C86976 - C86977 + C86978 - C86979 + C86980 - C86981) * C54790 +
             (C86982 - C86983 + C86984 - C86985 + C86986 - C86987) * C139731) *
                C139899) *
               C1565 +
           (((C86977 - C86976 + C86979 - C86978 + C86981 - C86980) * C54790 +
             (C86983 - C86982 + C86985 - C86984 + C86987 - C86986) * C139731) *
                C139984 +
            ((C67829 * C5273 - C140011 * C5339 + C67830 * C13126 -
              C140012 * C13216 + C67831 * C13128 - C67750 * C13217) *
                 C54790 +
             (C67829 * C5278 - C140011 * C5343 + C67830 * C13131 -
              C140012 * C13220 + C67831 * C13135 - C67750 * C13221) *
                 C139731) *
                C139899) *
               C140002) *
              C139792 * C808 +
          ((((C67834 - C67833 + C67836 - C67835 + C67838 - C67837) * C54790 +
             (C67840 - C67839 + C67842 - C67841 + C67844 - C67843) * C139731) *
                C139984 +
            ((C69662 - C69663 + C69664 - C69665 + C69666 - C69667) * C54790 +
             (C69668 - C69669 + C69670 - C69671 + C69672 - C69673) * C139731) *
                C139899) *
               C1565 +
           (((C69663 - C69662 + C69665 - C69664 + C69667 - C69666) * C54790 +
             (C69669 - C69668 + C69671 - C69670 + C69673 - C69672) * C139731) *
                C139984 +
            ((C140011 * C5340 - C67829 * C5274 + C140012 * C13218 -
              C67830 * C13127 + C67750 * C13219 - C67831 * C13129) *
                 C54790 +
             (C140011 * C5344 - C67829 * C5280 + C140012 * C13222 -
              C67830 * C13133 + C67750 * C13223 - C67831 * C13137) *
                 C139731) *
                C139899) *
               C140002) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexz[56] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C139984 * C266 - C29624 * C108 + C139899 * C1741 -
                        C29625 * C1570) *
                           C54790 +
                       (C139984 * C272 - C29624 * C115 + C139899 * C1746 -
                        C29625 * C1579) *
                           C139731) *
                          C140011 +
                      ((C38340 - C38341 + C38342 - C38343) * C54790 +
                       (C38344 - C38345 + C38346 - C38347) * C139731) *
                          C140012 +
                      ((C41955 - C41954 + C41957 - C41956) * C54790 +
                       (C41959 - C41958 + C41961 - C41960) * C139731) *
                          C67750) *
                         C1565 +
                     (((C29624 * C1570 - C139984 * C1741 + C29625 * C5273 -
                        C139899 * C5397) *
                           C54790 +
                       (C29624 * C1579 - C139984 * C1746 + C29625 * C5278 -
                        C139899 * C5401) *
                           C139731) *
                          C140011 +
                      ((C42968 - C42969 + C42970 - C42971) * C54790 +
                       (C42972 - C42973 + C42974 - C42975) * C139731) *
                          C140012 +
                      ((C29624 * C7754 - C139984 * C7979 + C29625 * C13128 -
                        C139899 * C13300) *
                           C54790 +
                       (C29624 * C7759 - C139984 * C7982 + C29625 * C13135 -
                        C139899 * C13304) *
                           C139731) *
                          C67750) *
                         C140002) *
                        C139792 * C808 +
                    ((((C29628 - C29627 + C29630 - C29629) * C54790 +
                       (C29632 - C29631 + C29634 - C29633) * C139731) *
                          C140011 +
                      (C38366 * C54790 + C38367 * C139731) * C140012 +
                      ((C38356 - C38357 + C38358 - C38359) * C54790 +
                       (C38360 - C38361 + C38362 - C38363) * C139731) *
                          C67750) *
                         C1565 +
                     (((C31459 - C31458 + C31461 - C31460) * C54790 +
                       (C31463 - C31462 + C31465 - C31464) * C139731) *
                          C140011 +
                      ((C39641 - C39640 + C39643 - C39642) * C54790 +
                       (C39645 - C39644 + C39647 - C39646) * C139731) *
                          C140012 +
                      ((C139984 * C7980 - C29624 * C7753 + C139899 * C13301 -
                        C29625 * C13129) *
                           C54790 +
                       (C139984 * C7983 - C29624 * C7757 + C139899 * C13305 -
                        C29625 * C13137) *
                           C139731) *
                          C67750) *
                         C140002) *
                        C139792 * C139998)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[56] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139731 * C114 - C54790 * C108) * C67829 +
             (C139731 * C354 - C54790 * C348) * C140011 +
             (C55513 - C55514) * C67830 + (C55515 - C55516) * C140012 +
             C57297 * C67831 + C57298 * C67750) *
                C139984 +
            ((C61976 - C61977) * C67829 + (C61978 - C61979) * C140011 +
             C64587 * C67830 + C64588 * C140012 + (C57888 - C57887) * C67831 +
             (C57890 - C57889) * C67750) *
                C139899) *
               C1565 +
           (((C61977 - C61976) * C67829 + (C61979 - C61978) * C140011 +
             C64591 * C67830 + C64592 * C140012 + (C57887 - C57888) * C67831 +
             (C57889 - C57890) * C67750) *
                C139984 +
            ((C61981 - C61980) * C67829 + (C61983 - C61982) * C140011 +
             C64593 * C67830 + C64594 * C140012 + (C63744 - C63745) * C67831 +
             (C63746 - C63747) * C67750) *
                C139899) *
               C140002) *
              C139792 * C808 +
          ((((C54790 * C109 - C139731 * C116) * C67829 +
             (C54790 * C349 - C139731 * C355) * C140011 +
             (C55525 - C55526) * C67830 + (C55527 - C55528) * C140012 +
             (C55529 - C55530) * C67831 + (C55531 - C55532) * C67750) *
                C139984 +
            ((C61984 - C61985) * C67829 + (C61986 - C61987) * C140011 +
             (C61001 - C61002) * C67830 + (C61003 - C61004) * C140012 +
             (C86284 - C86285) * C67831 + (C86286 - C86287) * C67750) *
                C139899) *
               C1565 +
           (((C61985 - C61984) * C67829 + (C61987 - C61986) * C140011 +
             (C61002 - C61001) * C67830 + (C61004 - C61003) * C140012 +
             (C86285 - C86284) * C67831 + (C86287 - C86286) * C67750) *
                C139984 +
            ((C61989 - C61988) * C67829 + (C61991 - C61990) * C140011 +
             (C61006 - C61005) * C67830 + (C61008 - C61007) * C140012 +
             (C139731 * C13136 - C54790 * C13129) * C67831 +
             (C139731 * C13387 - C54790 * C13383) * C67750) *
                C139899) *
               C140002) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[56] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C67829 * C183 - C68078 * C108 - C67829 * C348 +
                       C140011 * C411 + C67830 * C896 - C68079 * C813 -
                       C67830 * C1072 + C140012 * C1151 + C67831 * C2974 -
                       C68080 * C2908 - C67831 * C3090 + C67750 * C3148) *
                          C139731 * C139984 +
                      (C87300 + C87301 + C87302) * C139731 * C139899) *
                         C1565 -
                     ((C67831 * C13217 - C68080 * C13128 - C67831 * C13382 +
                       C67750 * C13463 + C67830 * C13216 - C68079 * C13126 -
                       C67830 * C13380 + C140012 * C13462 + C67829 * C5339 -
                       C68078 * C5273 - C67829 * C5455 + C140011 * C5513) *
                          C139731 * C139899 +
                      (C87302 + C87301 + C87300) * C139731 * C139984) *
                         C140002) *
                        C139792 * C808 +
                    (((C69988 + C69987 + C69986) * C139731 * C139984 +
                      (C67829 * C5340 - C68078 * C5274 - C67829 * C5456 +
                       C140011 * C5514 + C67830 * C13218 - C68079 * C13127 -
                       C67830 * C13381 + C140012 * C13464 + C67831 * C13219 -
                       C68080 * C13129 - C67831 * C13383 + C67750 * C13465) *
                          C139731 * C139899) *
                         C140002 -
                     ((C69986 + C69987 + C69988) * C139731 * C139899 +
                      (C68120 + C68119 + C68118) * C139731 * C139984) *
                         C1565) *
                        C139792 * C139998)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[56] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139984 * C266 - C29624 * C108 + C139899 * C1741 -
             C29625 * C1570) *
                C67829 +
            (C139984 * C495 - C29624 * C348 + C139899 * C1997 -
             C29625 * C1829) *
                C140011 +
            (C38340 - C38341 + C38342 - C38343) * C67830 +
            (C38780 - C38781 + C38782 - C38783) * C140012 +
            (C41955 - C41954 + C41957 - C41956) * C67831 +
            (C42257 - C42256 + C42259 - C42258) * C67750) *
               C139731 * C1565 +
           ((C29624 * C1570 - C139984 * C1741 + C29625 * C5273 -
             C139899 * C5397) *
                C67829 +
            (C29624 * C1829 - C139984 * C1997 + C29625 * C5455 -
             C139899 * C5567) *
                C140011 +
            (C42968 - C42969 + C42970 - C42971) * C67830 +
            (C43392 - C43393 + C43394 - C43395) * C140012 +
            (C29624 * C7754 - C139984 * C7979 + C29625 * C13128 -
             C139899 * C13300) *
                C67831 +
            (C29624 * C8091 - C139984 * C8317 + C29625 * C13382 -
             C139899 * C13541) *
                C67750) *
               C139731 * C140002) *
              C139792 * C808 +
          (((C29628 - C29627 + C29630 - C29629) * C67829 +
            (C29880 - C29879 + C29882 - C29881) * C140011 + C38366 * C67830 +
            C38793 * C140012 + (C38356 - C38357 + C38358 - C38359) * C67831 +
            (C38788 - C38789 + C38790 - C38791) * C67750) *
               C139731 * C1565 +
           ((C31459 - C31458 + C31461 - C31460) * C67829 +
            (C31799 - C31798 + C31801 - C31800) * C140011 +
            (C39641 - C39640 + C39643 - C39642) * C67830 +
            (C40069 - C40068 + C40071 - C40070) * C140012 +
            (C139984 * C7980 - C29624 * C7753 + C139899 * C13301 -
             C29625 * C13129) *
                C67831 +
            (C139984 * C8318 - C29624 * C8092 + C139899 * C13543 -
             C29625 * C13383) *
                C67750) *
               C139731 * C140002) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eezx[56] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139731 * C114 - C54790 * C108) * C29624 +
             (C139731 * C573 - C54790 * C567) * C139984 +
             (C61976 - C61977) * C29625 + (C62328 - C62329) * C139899) *
                C140011 +
            ((C55513 - C55514) * C29624 + (C55735 - C55736) * C139984 +
             C64587 * C29625 + C64931 * C139899) *
                C140012 +
            (C57297 * C29624 + C57463 * C139984 + (C57888 - C57887) * C29625 +
             (C58102 - C58101) * C139899) *
                C67750) *
               C1565 +
           (((C61977 - C61976) * C29624 + (C62329 - C62328) * C139984 +
             (C61981 - C61980) * C29625 + (C62331 - C62330) * C139899) *
                C140011 +
            (C64591 * C29624 + C64933 * C139984 + C64593 * C29625 +
             C64934 * C139899) *
                C140012 +
            ((C57887 - C57888) * C29624 + (C58101 - C58102) * C139984 +
             (C63744 - C63745) * C29625 + (C63976 - C63977) * C139899) *
                C67750) *
               C140002) *
              C139792 * C808 +
          ((((C54790 * C109 - C139731 * C116) * C29624 +
             (C54790 * C568 - C139731 * C574) * C139984 +
             (C61984 - C61985) * C29625 + (C62332 - C62333) * C139899) *
                C140011 +
            ((C55525 - C55526) * C29624 + (C55741 - C55742) * C139984 +
             (C61001 - C61002) * C29625 + (C61311 - C61312) * C139899) *
                C140012 +
            ((C55529 - C55530) * C29624 + (C55743 - C55744) * C139984 +
             (C86284 - C86285) * C29625 + (C86582 - C86583) * C139899) *
                C67750) *
               C1565 +
           (((C61985 - C61984) * C29624 + (C62333 - C62332) * C139984 +
             (C61989 - C61988) * C29625 + (C62335 - C62334) * C139899) *
                C140011 +
            ((C61002 - C61001) * C29624 + (C61312 - C61311) * C139984 +
             (C61006 - C61005) * C29625 + (C61314 - C61313) * C139899) *
                C140012 +
            ((C86285 - C86284) * C29624 + (C86583 - C86582) * C139984 +
             (C139731 * C13136 - C54790 * C13129) * C29625 +
             (C139731 * C13625 - C54790 * C13621) * C139899) *
                C67750) *
               C140002) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eezy[56] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C140011 * C183 - C67829 * C108 + C140012 * C896 - C67830 * C813 +
             C67750 * C2974 - C67831 * C2908) *
                C29624 +
            (C140011 * C629 - C67829 * C567 + C140012 * C1393 - C67830 * C1317 +
             C67750 * C3314 - C67831 * C3256) *
                C139984 +
            (C86976 - C86977 + C86978 - C86979 + C86980 - C86981) * C29625 +
            (C87597 - C87598 + C87599 - C87600 + C87601 - C87602) * C139899) *
               C139731 * C1565 +
           ((C86977 - C86976 + C86979 - C86978 + C86981 - C86980) * C29624 +
            (C87598 - C87597 + C87600 - C87599 + C87602 - C87601) * C139984 +
            (C67829 * C5273 - C140011 * C5339 + C67830 * C13126 -
             C140012 * C13216 + C67831 * C13128 - C67750 * C13217) *
                C29625 +
            (C67829 * C5621 - C140011 * C5679 + C67830 * C13618 -
             C140012 * C13700 + C67831 * C13620 - C67750 * C13701) *
                C139899) *
               C139731 * C140002) *
              C139792 * C808 +
          (((C67834 - C67833 + C67836 - C67835 + C67838 - C67837) * C29624 +
            (C68347 - C68346 + C68349 - C68348 + C68351 - C68350) * C139984 +
            (C69662 - C69663 + C69664 - C69665 + C69666 - C69667) * C29625 +
            (C70283 - C70284 + C70285 - C70286 + C70287 - C70288) * C139899) *
               C139731 * C1565 +
           ((C69663 - C69662 + C69665 - C69664 + C69667 - C69666) * C29624 +
            (C70284 - C70283 + C70286 - C70285 + C70288 - C70287) * C139984 +
            (C140011 * C5340 - C67829 * C5274 + C140012 * C13218 -
             C67830 * C13127 + C67750 * C13219 - C67831 * C13129) *
                C29625 +
            (C140011 * C5680 - C67829 * C5622 + C140012 * C13702 -
             C67830 * C13619 + C67750 * C13703 - C67831 * C13621) *
                C139899) *
               C139731 * C140002) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eezz[56] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C29624 * C266 - C30126 * C108 - C29624 * C567 + C139984 * C702 +
             C29625 * C1741 - C30127 * C1570 - C29625 * C2074 +
             C139899 * C2230) *
                C140011 +
            (C39218 + C39219) * C140012 + (C42567 + C42566) * C67750) *
               C139731 * C1565 -
           ((C29625 * C13300 - C30127 * C13128 - C29625 * C13620 +
             C139899 * C13779 + C29624 * C7979 - C30126 * C7754 -
             C29624 * C8422 + C139984 * C8634) *
                C67750 +
            (C43808 + C43809) * C140012 +
            (C29625 * C5397 - C30127 * C5273 - C29625 * C5621 +
             C139899 * C5733 + C29624 * C1741 - C30126 * C1570 -
             C29624 * C2074 + C139984 * C2230) *
                C140011) *
               C139731 * C140002) *
              C139792 * C808 +
          (((C32140 + C32139) * C140011 + (C40489 + C40488) * C140012 +
            (C29624 * C7980 - C30126 * C7753 - C29624 * C8423 +
             C139984 * C8633 + C29625 * C13301 - C30127 * C13129 -
             C29625 * C13621 + C139899 * C13781) *
                C67750) *
               C139731 * C140002 -
           ((C39220 + C39221) * C67750 + C39209 * C140012 +
            (C30166 + C30165) * C140011) *
               C139731 * C1565) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexx[57] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C54790 * C114 - C54791 * C108 - C54790 * C115 + C139731 * C126) *
                 C139984 +
             C61654 * C139899) *
                C140011 +
            (C85975 + C85976) * C140012 + (C85977 + C85978) * C67750) *
               C139809 * C2322 -
           ((C57669 * C139899 + C55305 * C139984) * C67750 +
            (C85978 + C85977) * C140012 + (C85976 + C85975) * C140011) *
               C139809 * C140000) *
              C2324 +
          (((C85979 + C85980) * C140011 + (C85981 + C85989) * C140012 +
            (C55308 * C139984 + (C54790 * C10398 - C54791 * C10395 -
                                 C54790 * C10399 + C139731 * C10401) *
                                    C139899) *
                C67750) *
               C139809 * C140000 -
           ((C85989 + C85981) * C67750 + (C85980 + C85979) * C140012 +
            (C61656 * C139899 +
             (C54790 * C116 - C54791 * C109 - C54790 * C117 + C139731 * C127) *
                 C139984) *
                C140011) *
               C139809 * C2322) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexy[57] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C140011 * C183 - C67829 * C108 + C140012 * C896 - C67830 * C813 +
              C67750 * C2974 - C67831 * C2908) *
                 C54790 +
             (C140011 * C189 - C67829 * C115 + C140012 * C901 - C67830 * C822 +
              C67750 * C2978 - C67831 * C2913) *
                 C139731) *
                C139984 +
            ((C86976 - C86977 + C86978 - C86979 + C86980 - C86981) * C54790 +
             (C86982 - C86983 + C86984 - C86985 + C86986 - C86987) * C139731) *
                C139899) *
               C139809 * C2322 +
           (((C67829 * C813 - C140011 * C896 + C67830 * C2908 -
              C140012 * C2974 + C67831 * C6627 - C67750 * C6792) *
                 C54790 +
             (C67829 * C822 - C140011 * C901 + C67830 * C2913 -
              C140012 * C2978 + C67831 * C6632 - C67750 * C6795) *
                 C139731) *
                C139984 +
            ((C67829 * C3438 - C140011 * C3520 + C67830 * C7754 -
              C140012 * C7863 + C67831 * C10394 - C67750 * C10528) *
                 C54790 +
             (C67829 * C3443 - C140011 * C3524 + C67830 * C7759 -
              C140012 * C7866 + C67831 * C10397 - C67750 * C10530) *
                 C139731) *
                C139899) *
               C139809 * C140000) *
              C2324 +
          ((((C67834 - C67833 + C67836 - C67835 + C67838 - C67837) * C54790 +
             (C67840 - C67839 + C67842 - C67841 + C67844 - C67843) * C139731) *
                C139984 +
            ((C69662 - C69663 + C69664 - C69665 + C69666 - C69667) * C54790 +
             (C69668 - C69669 + C69670 - C69671 + C69672 - C69673) * C139731) *
                C139899) *
               C139809 * C2322 +
           (((C68691 - C68690 + C68693 - C68692 + C68695 - C68694) * C54790 +
             (C68697 - C68696 + C68699 - C68698 + C68701 - C68700) * C139731) *
                C139984 +
            ((C140011 * C3521 - C67829 * C3439 + C140012 * C7864 -
              C67830 * C7753 + C67750 * C10529 - C67831 * C10395) *
                 C54790 +
             (C140011 * C3525 - C67829 * C3445 + C140012 * C7867 -
              C67830 * C7757 + C67750 * C10531 - C67831 * C10399) *
                 C139731) *
                C139899) *
               C139809 * C140000) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexz[57] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C139984 * C266 - C29624 * C108 + C139899 * C1741 -
                        C29625 * C1570) *
                           C54790 +
                       (C139984 * C272 - C29624 * C115 + C139899 * C1746 -
                        C29625 * C1579) *
                           C139731) *
                          C140011 +
                      ((C38340 - C38341 + C38342 - C38343) * C54790 +
                       (C38344 - C38345 + C38346 - C38347) * C139731) *
                          C140012 +
                      ((C41955 - C41954 + C41957 - C41956) * C54790 +
                       (C41959 - C41958 + C41961 - C41960) * C139731) *
                          C67750) *
                         C139809 * C2322 +
                     (((C38341 - C38340 + C38343 - C38342) * C54790 +
                       (C38345 - C38344 + C38347 - C38346) * C139731) *
                          C140011 +
                      ((C41954 - C41955 + C41956 - C41957) * C54790 +
                       (C41958 - C41959 + C41960 - C41961) * C139731) *
                          C140012 +
                      ((C29624 * C6627 - C139984 * C6908 + C29625 * C10394 -
                        C139899 * C10630) *
                           C54790 +
                       (C29624 * C6632 - C139984 * C6911 + C29625 * C10397 -
                        C139899 * C10632) *
                           C139731) *
                          C67750) *
                         C139809 * C140000) *
                        C2324 +
                    ((((C29628 - C29627 + C29630 - C29629) * C54790 +
                       (C29632 - C29631 + C29634 - C29633) * C139731) *
                          C140011 +
                      (C38366 * C54790 + C38367 * C139731) * C140012 +
                      ((C38356 - C38357 + C38358 - C38359) * C54790 +
                       (C38360 - C38361 + C38362 - C38363) * C139731) *
                          C67750) *
                         C139809 * C2322 +
                     ((C38364 * C54790 + C38365 * C139731) * C140011 +
                      ((C38357 - C38356 + C38359 - C38358) * C54790 +
                       (C38361 - C38360 + C38363 - C38362) * C139731) *
                          C140012 +
                      ((C139984 * C6909 - C29624 * C6626 + C139899 * C10631 -
                        C29625 * C10395) *
                           C54790 +
                       (C139984 * C6912 - C29624 * C6630 + C139899 * C10633 -
                        C29625 * C10399) *
                           C139731) *
                          C67750) *
                         C139809 * C140000) *
                        C139998)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[57] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139731 * C114 - C54790 * C108) * C67829 +
             (C139731 * C354 - C54790 * C348) * C140011 +
             (C55513 - C55514) * C67830 + (C55515 - C55516) * C140012 +
             C57297 * C67831 + C57298 * C67750) *
                C139984 +
            ((C61976 - C61977) * C67829 + (C61978 - C61979) * C140011 +
             C64587 * C67830 + C64588 * C140012 + (C57888 - C57887) * C67831 +
             (C57890 - C57889) * C67750) *
                C139899) *
               C139809 * C2322 +
           (((C55514 - C55513) * C67829 + (C55516 - C55515) * C140011 +
             (C55518 - C55517) * C67830 + (C55520 - C55519) * C140012 +
             (C55522 - C55521) * C67831 + (C55524 - C55523) * C67750) *
                C139984 +
            (C64591 * C67829 + C64592 * C140011 + (C57887 - C57888) * C67830 +
             (C57889 - C57890) * C140012 + (C57891 - C57892) * C67831 +
             (C57893 - C57894) * C67750) *
                C139899) *
               C139809 * C140000) *
              C2324 +
          ((((C54790 * C109 - C139731 * C116) * C67829 +
             (C54790 * C349 - C139731 * C355) * C140011 +
             (C55525 - C55526) * C67830 + (C55527 - C55528) * C140012 +
             (C55529 - C55530) * C67831 + (C55531 - C55532) * C67750) *
                C139984 +
            ((C61984 - C61985) * C67829 + (C61986 - C61987) * C140011 +
             (C61001 - C61002) * C67830 + (C61003 - C61004) * C140012 +
             (C86284 - C86285) * C67831 + (C86286 - C86287) * C67750) *
                C139899) *
               C139809 * C2322 +
           (((C55526 - C55525) * C67829 + (C55528 - C55527) * C140011 +
             (C55530 - C55529) * C67830 + (C55532 - C55531) * C140012 +
             (C55534 - C55533) * C67831 + (C55536 - C55535) * C67750) *
                C139984 +
            ((C61002 - C61001) * C67829 + (C61004 - C61003) * C140011 +
             (C86285 - C86284) * C67830 + (C86287 - C86286) * C140012 +
             (C139731 * C10398 - C54790 * C10395) * C67831 +
             (C139731 * C10743 - C54790 * C10741) * C67750) *
                C139899) *
               C139809 * C140000) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[57] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C67829 * C183 - C68078 * C108 - C67829 * C348 +
                       C140011 * C411 + C67830 * C896 - C68079 * C813 -
                       C67830 * C1072 + C140012 * C1151 + C67831 * C2974 -
                       C68080 * C2908 - C67831 * C3090 + C67750 * C3148) *
                          C139731 * C139984 +
                      (C87300 + C87301 + C87302) * C139731 * C139899) *
                         C139809 * C2322 -
                     ((C67831 * C10528 - C68080 * C10394 - C67831 * C10740 +
                       C67750 * C10858 + C67830 * C7863 - C68079 * C7754 -
                       C67830 * C8091 + C140012 * C8196 + C67829 * C3520 -
                       C68078 * C3438 - C67829 * C3668 + C140011 * C3742) *
                          C139731 * C139899 +
                      (C67831 * C6792 - C68080 * C6627 - C67831 * C7032 +
                       C67750 * C7169 + C67830 * C2974 - C68079 * C2908 -
                       C67830 * C3090 + C140012 * C3148 + C67829 * C896 -
                       C68078 * C813 - C67829 * C1072 + C140011 * C1151) *
                          C139731 * C139984) *
                         C139809 * C140000) *
                        C2324 +
                    (((C69048 + C69047 + C69046) * C139731 * C139984 +
                      (C67829 * C3521 - C68078 * C3439 - C67829 * C3669 +
                       C140011 * C3743 + C67830 * C7864 - C68079 * C7753 -
                       C67830 * C8092 + C140012 * C8195 + C67831 * C10529 -
                       C68080 * C10395 - C67831 * C10741 + C67750 * C10859) *
                          C139731 * C139899) *
                         C139809 * C140000 -
                     ((C69986 + C69987 + C69988) * C139731 * C139899 +
                      (C68120 + C68119 + C68118) * C139731 * C139984) *
                         C139809 * C2322) *
                        C139998)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[57] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139984 * C266 - C29624 * C108 + C139899 * C1741 -
             C29625 * C1570) *
                C67829 +
            (C139984 * C495 - C29624 * C348 + C139899 * C1997 -
             C29625 * C1829) *
                C140011 +
            (C38340 - C38341 + C38342 - C38343) * C67830 +
            (C38780 - C38781 + C38782 - C38783) * C140012 +
            (C41955 - C41954 + C41957 - C41956) * C67831 +
            (C42257 - C42256 + C42259 - C42258) * C67750) *
               C139731 * C139809 * C2322 +
           ((C38341 - C38340 + C38343 - C38342) * C67829 +
            (C38781 - C38780 + C38783 - C38782) * C140011 +
            (C41954 - C41955 + C41956 - C41957) * C67830 +
            (C42256 - C42257 + C42258 - C42259) * C140012 +
            (C29624 * C6627 - C139984 * C6908 + C29625 * C10394 -
             C139899 * C10630) *
                C67831 +
            (C29624 * C7032 - C139984 * C7290 + C29625 * C10740 -
             C139899 * C10958) *
                C67750) *
               C139731 * C139809 * C140000) *
              C2324 +
          (((C29628 - C29627 + C29630 - C29629) * C67829 +
            (C29880 - C29879 + C29882 - C29881) * C140011 + C38366 * C67830 +
            C38793 * C140012 + (C38356 - C38357 + C38358 - C38359) * C67831 +
            (C38788 - C38789 + C38790 - C38791) * C67750) *
               C139731 * C139809 * C2322 +
           (C38364 * C67829 + C38792 * C140011 +
            (C38357 - C38356 + C38359 - C38358) * C67830 +
            (C38789 - C38788 + C38791 - C38790) * C140012 +
            (C139984 * C6909 - C29624 * C6626 + C139899 * C10631 -
             C29625 * C10395) *
                C67831 +
            (C139984 * C7291 - C29624 * C7033 + C139899 * C10959 -
             C29625 * C10741) *
                C67750) *
               C139731 * C139809 * C140000) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eezx[57] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139731 * C114 - C54790 * C108) * C29624 +
             (C139731 * C573 - C54790 * C567) * C139984 +
             (C61976 - C61977) * C29625 + (C62328 - C62329) * C139899) *
                C140011 +
            ((C55513 - C55514) * C29624 + (C55735 - C55736) * C139984 +
             C64587 * C29625 + C64931 * C139899) *
                C140012 +
            (C57297 * C29624 + C57463 * C139984 + (C57888 - C57887) * C29625 +
             (C58102 - C58101) * C139899) *
                C67750) *
               C139809 * C2322 +
           (((C55514 - C55513) * C29624 + (C55736 - C55735) * C139984 +
             C64591 * C29625 + C64933 * C139899) *
                C140011 +
            ((C55518 - C55517) * C29624 + (C55738 - C55737) * C139984 +
             (C57887 - C57888) * C29625 + (C58101 - C58102) * C139899) *
                C140012 +
            ((C55522 - C55521) * C29624 + (C55740 - C55739) * C139984 +
             (C57891 - C57892) * C29625 + (C58103 - C58104) * C139899) *
                C67750) *
               C139809 * C140000) *
              C2324 +
          ((((C54790 * C109 - C139731 * C116) * C29624 +
             (C54790 * C568 - C139731 * C574) * C139984 +
             (C61984 - C61985) * C29625 + (C62332 - C62333) * C139899) *
                C140011 +
            ((C55525 - C55526) * C29624 + (C55741 - C55742) * C139984 +
             (C61001 - C61002) * C29625 + (C61311 - C61312) * C139899) *
                C140012 +
            ((C55529 - C55530) * C29624 + (C55743 - C55744) * C139984 +
             (C86284 - C86285) * C29625 + (C86582 - C86583) * C139899) *
                C67750) *
               C139809 * C2322 +
           (((C55526 - C55525) * C29624 + (C55742 - C55741) * C139984 +
             (C61002 - C61001) * C29625 + (C61312 - C61311) * C139899) *
                C140011 +
            ((C55530 - C55529) * C29624 + (C55744 - C55743) * C139984 +
             (C86285 - C86284) * C29625 + (C86583 - C86582) * C139899) *
                C140012 +
            ((C55534 - C55533) * C29624 + (C55746 - C55745) * C139984 +
             (C139731 * C10398 - C54790 * C10395) * C29625 +
             (C139731 * C11065 - C54790 * C11063) * C139899) *
                C67750) *
               C139809 * C140000) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eezy[57] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C140011 * C183 - C67829 * C108 + C140012 * C896 - C67830 * C813 +
             C67750 * C2974 - C67831 * C2908) *
                C29624 +
            (C140011 * C629 - C67829 * C567 + C140012 * C1393 - C67830 * C1317 +
             C67750 * C3314 - C67831 * C3256) *
                C139984 +
            (C86976 - C86977 + C86978 - C86979 + C86980 - C86981) * C29625 +
            (C87597 - C87598 + C87599 - C87600 + C87601 - C87602) * C139899) *
               C139731 * C139809 * C2322 +
           ((C67829 * C813 - C140011 * C896 + C67830 * C2908 - C140012 * C2974 +
             C67831 * C6627 - C67750 * C6792) *
                C29624 +
            (C67829 * C1317 - C140011 * C1393 + C67830 * C3256 -
             C140012 * C3314 + C67831 * C7401 - C67750 * C7521) *
                C139984 +
            (C67829 * C3438 - C140011 * C3520 + C67830 * C7754 -
             C140012 * C7863 + C67831 * C10394 - C67750 * C10528) *
                C29625 +
            (C67829 * C3882 - C140011 * C3956 + C67830 * C8422 -
             C140012 * C8526 + C67831 * C11062 - C67750 * C11172) *
                C139899) *
               C139731 * C139809 * C140000) *
              C2324 +
          (((C67834 - C67833 + C67836 - C67835 + C67838 - C67837) * C29624 +
            (C68347 - C68346 + C68349 - C68348 + C68351 - C68350) * C139984 +
            (C69662 - C69663 + C69664 - C69665 + C69666 - C69667) * C29625 +
            (C70283 - C70284 + C70285 - C70286 + C70287 - C70288) * C139899) *
               C139731 * C139809 * C2322 +
           ((C68691 - C68690 + C68693 - C68692 + C68695 - C68694) * C29624 +
            (C69360 - C69359 + C69362 - C69361 + C69364 - C69363) * C139984 +
            (C140011 * C3521 - C67829 * C3439 + C140012 * C7864 -
             C67830 * C7753 + C67750 * C10529 - C67831 * C10395) *
                C29625 +
            (C140011 * C3957 - C67829 * C3883 + C140012 * C8527 -
             C67830 * C8423 + C67750 * C11173 - C67831 * C11063) *
                C139899) *
               C139731 * C139809 * C140000) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eezz[57] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C29624 * C266 - C30126 * C108 - C29624 * C567 + C139984 * C702 +
             C29625 * C1741 - C30127 * C1570 - C29625 * C2074 +
             C139899 * C2230) *
                C140011 +
            (C39218 + C39219) * C140012 + (C42567 + C42566) * C67750) *
               C139731 * C139809 * C2322 -
           ((C29625 * C10630 - C30127 * C10394 - C29625 * C11062 +
             C139899 * C11272 + C29624 * C6908 - C30126 * C6627 -
             C29624 * C7401 + C139984 * C7629) *
                C67750 +
            (C42566 + C42567) * C140012 + (C39219 + C39218) * C140011) *
               C139731 * C139809 * C140000) *
              C2324 +
          ((C39200 * C140011 + (C39221 + C39220) * C140012 +
            (C29624 * C6909 - C30126 * C6626 - C29624 * C7402 +
             C139984 * C7628 + C29625 * C10631 - C30127 * C10395 -
             C29625 * C11063 + C139899 * C11273) *
                C67750) *
               C139731 * C139809 * C140000 -
           ((C39220 + C39221) * C67750 + C39209 * C140012 +
            (C30166 + C30165) * C140011) *
               C139731 * C139809 * C2322) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexx[58] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C54790 * C114 - C54791 * C108 - C54790 * C115 + C139731 * C126) *
                C139984 +
            C61654 * C139899) *
               C140011 +
           (C85975 + C85976) * C140012 + C88657 * C67750) *
              C139809 * C2904 -
          ((C88658 + C88659) * C67750 + (C85978 + C85977) * C140012 +
           (C85976 + C85975) * C140011) *
              C139809 * C2905 +
          (C88657 * C140011 + (C88659 + C88658) * C140012 +
           (C57127 * C139984 + (C54790 * C57647 - C54791 * C57646 -
                                C54790 * C57648 + C139731 * C57649) *
                                   C139899) *
               C67750) *
              C139809 * C2906) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eexy[58] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C140011 * C183 - C67829 * C108 + C140012 * C896 - C67830 * C813 +
             C67750 * C2974 - C67831 * C2908) *
                C54790 +
            (C140011 * C189 - C67829 * C115 + C140012 * C901 - C67830 * C822 +
             C67750 * C2978 - C67831 * C2913) *
                C139731) *
               C139984 +
           ((C86976 - C86977 + C86978 - C86979 + C86980 - C86981) * C54790 +
            (C86982 - C86983 + C86984 - C86985 + C86986 - C86987) * C139731) *
               C139899) *
              C139809 * C2904 +
          (((C67829 * C813 - C140011 * C896 + C67830 * C2908 - C140012 * C2974 +
             C67831 * C6627 - C67750 * C6792) *
                C54790 +
            (C67829 * C822 - C140011 * C901 + C67830 * C2913 - C140012 * C2978 +
             C67831 * C6632 - C67750 * C6795) *
                C139731) *
               C139984 +
           ((C67829 * C3438 - C140011 * C3520 + C67830 * C7754 -
             C140012 * C7863 + C67831 * C10394 - C67750 * C10528) *
                C54790 +
            (C67829 * C3443 - C140011 * C3524 + C67830 * C7759 -
             C140012 * C7866 + C67831 * C10397 - C67750 * C10530) *
                C139731) *
               C139899) *
              C139809 * C2905 +
          (((C140011 * C2974 - C67829 * C2908 + C140012 * C6792 -
             C67830 * C6627 + C67750 * C9707 - C67831 * C9609) *
                C54790 +
            (C140011 * C2978 - C67829 * C2913 + C140012 * C6795 -
             C67830 * C6632 + C67750 * C9709 - C67831 * C9612) *
                C139731) *
               C139984 +
           ((C140011 * C7863 - C67829 * C7754 + C140012 * C10528 -
             C67830 * C10394 + C67750 * C57740 - C67831 * C57646) *
                C54790 +
            (C140011 * C7866 - C67829 * C7759 + C140012 * C10530 -
             C67830 * C10397 + C67750 * C57741 - C67831 * C57648) *
                C139731) *
               C139899) *
              C139809 * C2906) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eexz[58] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C139984 * C266 - C29624 * C108 + C139899 * C1741 -
                       C29625 * C1570) *
                          C54790 +
                      (C139984 * C272 - C29624 * C115 + C139899 * C1746 -
                       C29625 * C1579) *
                          C139731) *
                         C140011 +
                     ((C38340 - C38341 + C38342 - C38343) * C54790 +
                      (C38344 - C38345 + C38346 - C38347) * C139731) *
                         C140012 +
                     C88824 * C67750) *
                        C139809 * C2904 +
                    (((C38341 - C38340 + C38343 - C38342) * C54790 +
                      (C38345 - C38344 + C38347 - C38346) * C139731) *
                         C140011 +
                     ((C41954 - C41955 + C41956 - C41957) * C54790 +
                      (C41958 - C41959 + C41960 - C41961) * C139731) *
                         C140012 +
                     ((C88812 - C88813 + C88814 - C88815) * C54790 +
                      (C88816 - C88817 + C88818 - C88819) * C139731) *
                         C67750) *
                        C139809 * C2905 +
                    (C88824 * C140011 +
                     ((C88813 - C88812 + C88815 - C88814) * C54790 +
                      (C88817 - C88816 + C88819 - C88818) * C139731) *
                         C140012 +
                     ((C139984 * C9785 - C29624 * C9609 + C139899 * C57808 -
                       C29625 * C57646) *
                          C54790 +
                      (C139984 * C9787 - C29624 * C9612 + C139899 * C57809 -
                       C29625 * C57648) *
                          C139731) *
                         C67750) *
                        C139809 * C2906) *
                   C139758) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[58] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C139731 * C114 - C54790 * C108) * C67829 +
                      (C139731 * C354 - C54790 * C348) * C140011 +
                      (C55513 - C55514) * C67830 + (C55515 - C55516) * C140012 +
                      C57297 * C67831 + C57298 * C67750) *
                         C139984 +
                     ((C61976 - C61977) * C67829 + (C61978 - C61979) * C140011 +
                      C64587 * C67830 + C64588 * C140012 + C88899 * C67831 +
                      C88900 * C67750) *
                         C139899) *
                        C139809 * C2904 +
                    (((C55514 - C55513) * C67829 + (C55516 - C55515) * C140011 +
                      (C55518 - C55517) * C67830 + (C55520 - C55519) * C140012 +
                      (C55522 - C55521) * C67831 + (C55524 - C55523) * C67750) *
                         C139984 +
                     (C64591 * C67829 + C64592 * C140011 +
                      (C57887 - C57888) * C67830 + (C57889 - C57890) * C140012 +
                      (C57891 - C57892) * C67831 + (C57893 - C57894) * C67750) *
                         C139899) *
                        C139809 * C2905 +
                    ((C57297 * C67829 + C57298 * C140011 + C57299 * C67830 +
                      C57300 * C140012 + (C57302 - C57301) * C67831 +
                      (C57304 - C57303) * C67750) *
                         C139984 +
                     (C88899 * C67829 + C88900 * C140011 +
                      (C57892 - C57891) * C67830 + (C57894 - C57893) * C140012 +
                      (C139731 * C57647 - C54790 * C57646) * C67831 +
                      (C139731 * C57881 - C54790 * C57880) * C67750) *
                         C139899) *
                        C139809 * C2906) *
                   C139758) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[58] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C67829 * C183 - C68078 * C108 - C67829 * C348 + C140011 * C411 +
            C67830 * C896 - C68079 * C813 - C67830 * C1072 + C140012 * C1151 +
            C67831 * C2974 - C68080 * C2908 - C67831 * C3090 + C67750 * C3148) *
               C139731 * C139984 +
           (C87300 + C87301 + C87302) * C139731 * C139899) *
              C139809 * C2904 -
          ((C67831 * C10528 - C68080 * C10394 - C67831 * C10740 +
            C67750 * C10858 + C67830 * C7863 - C68079 * C7754 - C67830 * C8091 +
            C140012 * C8196 + C67829 * C3520 - C68078 * C3438 - C67829 * C3668 +
            C140011 * C3742) *
               C139731 * C139899 +
           (C67831 * C6792 - C68080 * C6627 - C67831 * C7032 + C67750 * C7169 +
            C67830 * C2974 - C68079 * C2908 - C67830 * C3090 + C140012 * C3148 +
            C67829 * C896 - C68078 * C813 - C67829 * C1072 + C140011 * C1151) *
               C139731 * C139984) *
              C139809 * C2905 +
          ((C67829 * C2974 - C68078 * C2908 - C67829 * C3090 + C140011 * C3148 +
            C67830 * C6792 - C68079 * C6627 - C67830 * C7032 + C140012 * C7169 +
            C67831 * C9707 - C68080 * C9609 - C67831 * C9876 + C67750 * C9968) *
               C139731 * C139984 +
           (C67829 * C7863 - C68078 * C7754 - C67829 * C8091 + C140011 * C8196 +
            C67830 * C10528 - C68079 * C10394 - C67830 * C10740 +
            C140012 * C10858 + C67831 * C57740 - C68080 * C57646 -
            C67831 * C57880 + C67750 * C57960) *
               C139731 * C139899) *
              C139809 * C2906) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eeyz[58] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C139984 * C266 - C29624 * C108 + C139899 * C1741 - C29625 * C1570) *
               C67829 +
           (C139984 * C495 - C29624 * C348 + C139899 * C1997 - C29625 * C1829) *
               C140011 +
           (C38340 - C38341 + C38342 - C38343) * C67830 +
           (C38780 - C38781 + C38782 - C38783) * C140012 + C88820 * C67831 +
           C89055 * C67750) *
              C139731 * C139809 * C2904 +
          ((C38341 - C38340 + C38343 - C38342) * C67829 +
           (C38781 - C38780 + C38783 - C38782) * C140011 +
           (C41954 - C41955 + C41956 - C41957) * C67830 +
           (C42256 - C42257 + C42258 - C42259) * C140012 +
           (C88812 - C88813 + C88814 - C88815) * C67831 +
           (C89051 - C89052 + C89053 - C89054) * C67750) *
              C139731 * C139809 * C2905 +
          (C88820 * C67829 + C89055 * C140011 +
           (C88813 - C88812 + C88815 - C88814) * C67830 +
           (C89052 - C89051 + C89054 - C89053) * C140012 +
           (C139984 * C9785 - C29624 * C9609 + C139899 * C57808 -
            C29625 * C57646) *
               C67831 +
           (C139984 * C10044 - C29624 * C9876 + C139899 * C58027 -
            C29625 * C57880) *
               C67750) *
              C139731 * C139809 * C2906) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eezx[58] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139731 * C114 - C54790 * C108) * C29624 +
            (C139731 * C573 - C54790 * C567) * C139984 +
            (C61976 - C61977) * C29625 + (C62328 - C62329) * C139899) *
               C140011 +
           ((C55513 - C55514) * C29624 + (C55735 - C55736) * C139984 +
            C64587 * C29625 + C64931 * C139899) *
               C140012 +
           C89137 * C67750) *
              C139809 * C2904 +
          (((C55514 - C55513) * C29624 + (C55736 - C55735) * C139984 +
            C64591 * C29625 + C64933 * C139899) *
               C140011 +
           ((C55518 - C55517) * C29624 + (C55738 - C55737) * C139984 +
            (C57887 - C57888) * C29625 + (C58101 - C58102) * C139899) *
               C140012 +
           ((C55522 - C55521) * C29624 + (C55740 - C55739) * C139984 +
            (C57891 - C57892) * C29625 + (C58103 - C58104) * C139899) *
               C67750) *
              C139809 * C2905 +
          (C89137 * C140011 +
           (C57299 * C29624 + C57465 * C139984 + (C57892 - C57891) * C29625 +
            (C58104 - C58103) * C139899) *
               C140012 +
           ((C57302 - C57301) * C29624 + (C57467 - C57466) * C139984 +
            (C139731 * C57647 - C54790 * C57646) * C29625 +
            (C139731 * C58097 - C54790 * C58096) * C139899) *
               C67750) *
              C139809 * C2906) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eezy[58] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C140011 * C183 - C67829 * C108 + C140012 * C896 - C67830 * C813 +
            C67750 * C2974 - C67831 * C2908) *
               C29624 +
           (C140011 * C629 - C67829 * C567 + C140012 * C1393 - C67830 * C1317 +
            C67750 * C3314 - C67831 * C3256) *
               C139984 +
           (C86976 - C86977 + C86978 - C86979 + C86980 - C86981) * C29625 +
           (C87597 - C87598 + C87599 - C87600 + C87601 - C87602) * C139899) *
              C139731 * C139809 * C2904 +
          ((C67829 * C813 - C140011 * C896 + C67830 * C2908 - C140012 * C2974 +
            C67831 * C6627 - C67750 * C6792) *
               C29624 +
           (C67829 * C1317 - C140011 * C1393 + C67830 * C3256 -
            C140012 * C3314 + C67831 * C7401 - C67750 * C7521) *
               C139984 +
           (C67829 * C3438 - C140011 * C3520 + C67830 * C7754 -
            C140012 * C7863 + C67831 * C10394 - C67750 * C10528) *
               C29625 +
           (C67829 * C3882 - C140011 * C3956 + C67830 * C8422 -
            C140012 * C8526 + C67831 * C11062 - C67750 * C11172) *
               C139899) *
              C139731 * C139809 * C2905 +
          ((C140011 * C2974 - C67829 * C2908 + C140012 * C6792 -
            C67830 * C6627 + C67750 * C9707 - C67831 * C9609) *
               C29624 +
           (C140011 * C3314 - C67829 * C3256 + C140012 * C7521 -
            C67830 * C7401 + C67750 * C10211 - C67831 * C10123) *
               C139984 +
           (C140011 * C7863 - C67829 * C7754 + C140012 * C10528 -
            C67830 * C10394 + C67750 * C57740 - C67831 * C57646) *
               C29625 +
           (C140011 * C8526 - C67829 * C8422 + C140012 * C11172 -
            C67830 * C11062 + C67750 * C58170 - C67831 * C58096) *
               C139899) *
              C139731 * C139809 * C2906) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eezz[58] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C29624 * C266 - C30126 * C108 - C29624 * C567 +
                      C139984 * C702 + C29625 * C1741 - C30127 * C1570 -
                      C29625 * C2074 + C139899 * C2230) *
                         C140011 +
                     (C39218 + C39219) * C140012 + C89286 * C67750) *
                        C139731 * C139809 * C2904 -
                    ((C89299 + C89300) * C67750 + (C42566 + C42567) * C140012 +
                     (C39219 + C39218) * C140011) *
                        C139731 * C139809 * C2905 +
                    (C89286 * C140011 + (C89300 + C89299) * C140012 +
                     (C29624 * C9785 - C30126 * C9609 - C29624 * C10123 +
                      C139984 * C10287 + C29625 * C57808 - C30127 * C57646 -
                      C29625 * C58096 + C139899 * C58237) *
                         C67750) *
                        C139731 * C139809 * C2906) *
                   C139758) /
                  (p * q * std::sqrt(p + q));
    d2eexx[59] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C54790 * C114 - C54791 * C108 - C54790 * C115 + C139731 * C126) *
                 C139984 +
             C61654 * C139899) *
                C140011 +
            (C85975 + C85976) * C140012 + C88657 * C67750) *
               C1565 -
           ((C89399 + C89400) * C67750 + (C89401 + C89402) * C140012 +
            (C61655 * C139899 + C61654 * C139984) * C140011) *
               C140002) *
              C2322 +
          (((C89402 + C89401) * C140011 + (C89400 + C89399) * C140012 +
            (C57669 * C139984 + (C54790 * C59484 - C54791 * C59483 -
                                 C54790 * C59485 + C139731 * C59486) *
                                    C139899) *
                C67750) *
               C140002 -
           ((C88658 + C88659) * C67750 + (C85978 + C85977) * C140012 +
            (C85976 + C85975) * C140011) *
               C1565) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eexy[59] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C140011 * C183 - C67829 * C108 + C140012 * C896 - C67830 * C813 +
              C67750 * C2974 - C67831 * C2908) *
                 C54790 +
             (C140011 * C189 - C67829 * C115 + C140012 * C901 - C67830 * C822 +
              C67750 * C2978 - C67831 * C2913) *
                 C139731) *
                C139984 +
            ((C86976 - C86977 + C86978 - C86979 + C86980 - C86981) * C54790 +
             (C86982 - C86983 + C86984 - C86985 + C86986 - C86987) * C139731) *
                C139899) *
               C1565 +
           (((C86977 - C86976 + C86979 - C86978 + C86981 - C86980) * C54790 +
             (C86983 - C86982 + C86985 - C86984 + C86987 - C86986) * C139731) *
                C139984 +
            ((C67829 * C5273 - C140011 * C5339 + C67830 * C13126 -
              C140012 * C13216 + C67831 * C13128 - C67750 * C13217) *
                 C54790 +
             (C67829 * C5278 - C140011 * C5343 + C67830 * C13131 -
              C140012 * C13220 + C67831 * C13135 - C67750 * C13221) *
                 C139731) *
                C139899) *
               C140002) *
              C2322 +
          ((((C67829 * C813 - C140011 * C896 + C67830 * C2908 -
              C140012 * C2974 + C67831 * C6627 - C67750 * C6792) *
                 C54790 +
             (C67829 * C822 - C140011 * C901 + C67830 * C2913 -
              C140012 * C2978 + C67831 * C6632 - C67750 * C6795) *
                 C139731) *
                C139984 +
            ((C89501 - C89502 + C89503 - C89504 + C89505 - C89506) * C54790 +
             (C89507 - C89508 + C89509 - C89510 + C89511 - C89512) * C139731) *
                C139899) *
               C1565 +
           (((C89502 - C89501 + C89504 - C89503 + C89506 - C89505) * C54790 +
             (C89508 - C89507 + C89510 - C89509 + C89512 - C89511) * C139731) *
                C139984 +
            ((C140011 * C13216 - C67829 * C13126 + C140012 * C13217 -
              C67830 * C13128 + C67750 * C59537 - C67831 * C59483) *
                 C54790 +
             (C140011 * C13220 - C67829 * C13131 + C140012 * C13221 -
              C67830 * C13135 + C67750 * C59538 - C67831 * C59485) *
                 C139731) *
                C139899) *
               C140002) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eexz[59] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C139984 * C266 - C29624 * C108 + C139899 * C1741 -
                        C29625 * C1570) *
                           C54790 +
                       (C139984 * C272 - C29624 * C115 + C139899 * C1746 -
                        C29625 * C1579) *
                           C139731) *
                          C140011 +
                      ((C38340 - C38341 + C38342 - C38343) * C54790 +
                       (C38344 - C38345 + C38346 - C38347) * C139731) *
                          C140012 +
                      C88824 * C67750) *
                         C1565 +
                     (((C29624 * C1570 - C139984 * C1741 + C29625 * C5273 -
                        C139899 * C5397) *
                           C54790 +
                       (C29624 * C1579 - C139984 * C1746 + C29625 * C5278 -
                        C139899 * C5401) *
                           C139731) *
                          C140011 +
                      ((C42968 - C42969 + C42970 - C42971) * C54790 +
                       (C42972 - C42973 + C42974 - C42975) * C139731) *
                          C140012 +
                      ((C89611 - C89612 + C89613 - C89614) * C54790 +
                       (C89615 - C89616 + C89617 - C89618) * C139731) *
                          C67750) *
                         C140002) *
                        C2322 +
                    ((((C38341 - C38340 + C38343 - C38342) * C54790 +
                       (C38345 - C38344 + C38347 - C38346) * C139731) *
                          C140011 +
                      ((C41954 - C41955 + C41956 - C41957) * C54790 +
                       (C41958 - C41959 + C41960 - C41961) * C139731) *
                          C140012 +
                      ((C88812 - C88813 + C88814 - C88815) * C54790 +
                       (C88816 - C88817 + C88818 - C88819) * C139731) *
                          C67750) *
                         C1565 +
                     (((C42969 - C42968 + C42971 - C42970) * C54790 +
                       (C42973 - C42972 + C42975 - C42974) * C139731) *
                          C140011 +
                      ((C89612 - C89611 + C89614 - C89613) * C54790 +
                       (C89616 - C89615 + C89618 - C89617) * C139731) *
                          C140012 +
                      ((C139984 * C10630 - C29624 * C10394 + C139899 * C59589 -
                        C29625 * C59483) *
                           C54790 +
                       (C139984 * C10632 - C29624 * C10397 + C139899 * C59590 -
                        C29625 * C59485) *
                           C139731) *
                          C67750) *
                         C140002) *
                        C140000) *
                   C139758) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[59] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139731 * C114 - C54790 * C108) * C67829 +
             (C139731 * C354 - C54790 * C348) * C140011 +
             (C55513 - C55514) * C67830 + (C55515 - C55516) * C140012 +
             C57297 * C67831 + C57298 * C67750) *
                C139984 +
            ((C61976 - C61977) * C67829 + (C61978 - C61979) * C140011 +
             C64587 * C67830 + C64588 * C140012 + C88899 * C67831 +
             C88900 * C67750) *
                C139899) *
               C1565 +
           (((C61977 - C61976) * C67829 + (C61979 - C61978) * C140011 +
             C64591 * C67830 + C64592 * C140012 + C89717 * C67831 +
             C89718 * C67750) *
                C139984 +
            ((C61981 - C61980) * C67829 + (C61983 - C61982) * C140011 +
             C64593 * C67830 + C64594 * C140012 + (C63744 - C63745) * C67831 +
             (C63746 - C63747) * C67750) *
                C139899) *
               C140002) *
              C2322 +
          ((((C55514 - C55513) * C67829 + (C55516 - C55515) * C140011 +
             (C55518 - C55517) * C67830 + (C55520 - C55519) * C140012 +
             (C55522 - C55521) * C67831 + (C55524 - C55523) * C67750) *
                C139984 +
            (C64591 * C67829 + C64592 * C140011 + C89717 * C67830 +
             C89718 * C140012 + (C57891 - C57892) * C67831 +
             (C57893 - C57894) * C67750) *
                C139899) *
               C1565 +
           ((C64587 * C67829 + C64588 * C140011 + C88899 * C67830 +
             C88900 * C140012 + (C57892 - C57891) * C67831 +
             (C57894 - C57893) * C67750) *
                C139984 +
            (C64589 * C67829 + C64590 * C140011 + (C63745 - C63744) * C67830 +
             (C63747 - C63746) * C140012 +
             (C139731 * C59484 - C54790 * C59483) * C67831 +
             (C139731 * C59642 - C54790 * C59641) * C67750) *
                C139899) *
               C140002) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eeyy[59] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C67829 * C183 - C68078 * C108 - C67829 * C348 +
                       C140011 * C411 + C67830 * C896 - C68079 * C813 -
                       C67830 * C1072 + C140012 * C1151 + C67831 * C2974 -
                       C68080 * C2908 - C67831 * C3090 + C67750 * C3148) *
                          C139731 * C139984 +
                      (C87300 + C87301 + C87302) * C139731 * C139899) *
                         C1565 -
                     ((C67831 * C13217 - C68080 * C13128 - C67831 * C13382 +
                       C67750 * C13463 + C67830 * C13216 - C68079 * C13126 -
                       C67830 * C13380 + C140012 * C13462 + C67829 * C5339 -
                       C68078 * C5273 - C67829 * C5455 + C140011 * C5513) *
                          C139731 * C139899 +
                      (C87302 + C87301 + C87300) * C139731 * C139984) *
                         C140002) *
                        C2322 +
                    (((C89835 + C89836 + C89837) * C139731 * C139984 +
                      (C67829 * C13216 - C68078 * C13126 - C67829 * C13380 +
                       C140011 * C13462 + C67830 * C13217 - C68079 * C13128 -
                       C67830 * C13382 + C140012 * C13463 + C67831 * C59537 -
                       C68080 * C59483 - C67831 * C59641 + C67750 * C59693) *
                          C139731 * C139899) *
                         C140002 -
                     ((C89837 + C89836 + C89835) * C139731 * C139899 +
                      (C67831 * C6792 - C68080 * C6627 - C67831 * C7032 +
                       C67750 * C7169 + C67830 * C2974 - C68079 * C2908 -
                       C67830 * C3090 + C140012 * C3148 + C67829 * C896 -
                       C68078 * C813 - C67829 * C1072 + C140011 * C1151) *
                          C139731 * C139984) *
                         C1565) *
                        C140000) *
                   C139758) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[59] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C139984 * C266 - C29624 * C108 + C139899 * C1741 -
                       C29625 * C1570) *
                          C67829 +
                      (C139984 * C495 - C29624 * C348 + C139899 * C1997 -
                       C29625 * C1829) *
                          C140011 +
                      (C38340 - C38341 + C38342 - C38343) * C67830 +
                      (C38780 - C38781 + C38782 - C38783) * C140012 +
                      C88820 * C67831 + C89055 * C67750) *
                         C139731 * C1565 +
                     ((C29624 * C1570 - C139984 * C1741 + C29625 * C5273 -
                       C139899 * C5397) *
                          C67829 +
                      (C29624 * C1829 - C139984 * C1997 + C29625 * C5455 -
                       C139899 * C5567) *
                          C140011 +
                      (C42968 - C42969 + C42970 - C42971) * C67830 +
                      (C43392 - C43393 + C43394 - C43395) * C140012 +
                      (C89611 - C89612 + C89613 - C89614) * C67831 +
                      (C89936 - C89937 + C89938 - C89939) * C67750) *
                         C139731 * C140002) *
                        C2322 +
                    (((C38341 - C38340 + C38343 - C38342) * C67829 +
                      (C38781 - C38780 + C38783 - C38782) * C140011 +
                      (C41954 - C41955 + C41956 - C41957) * C67830 +
                      (C42256 - C42257 + C42258 - C42259) * C140012 +
                      (C88812 - C88813 + C88814 - C88815) * C67831 +
                      (C89051 - C89052 + C89053 - C89054) * C67750) *
                         C139731 * C1565 +
                     ((C42969 - C42968 + C42971 - C42970) * C67829 +
                      (C43393 - C43392 + C43395 - C43394) * C140011 +
                      (C89612 - C89611 + C89614 - C89613) * C67830 +
                      (C89937 - C89936 + C89939 - C89938) * C140012 +
                      (C139984 * C10630 - C29624 * C10394 + C139899 * C59589 -
                       C29625 * C59483) *
                          C67831 +
                      (C139984 * C10958 - C29624 * C10740 + C139899 * C59744 -
                       C29625 * C59641) *
                          C67750) *
                         C139731 * C140002) *
                        C140000) *
                   C139758) /
                  (p * q * std::sqrt(p + q));
    d2eezx[59] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139731 * C114 - C54790 * C108) * C29624 +
             (C139731 * C573 - C54790 * C567) * C139984 +
             (C61976 - C61977) * C29625 + (C62328 - C62329) * C139899) *
                C140011 +
            ((C55513 - C55514) * C29624 + (C55735 - C55736) * C139984 +
             C64587 * C29625 + C64931 * C139899) *
                C140012 +
            C89137 * C67750) *
               C1565 +
           (((C61977 - C61976) * C29624 + (C62329 - C62328) * C139984 +
             (C61981 - C61980) * C29625 + (C62331 - C62330) * C139899) *
                C140011 +
            (C64591 * C29624 + C64933 * C139984 + C64593 * C29625 +
             C64934 * C139899) *
                C140012 +
            (C89717 * C29624 + C90038 * C139984 + (C63744 - C63745) * C29625 +
             (C63976 - C63977) * C139899) *
                C67750) *
               C140002) *
              C2322 +
          ((((C55514 - C55513) * C29624 + (C55736 - C55735) * C139984 +
             C64591 * C29625 + C64933 * C139899) *
                C140011 +
            ((C55518 - C55517) * C29624 + (C55738 - C55737) * C139984 +
             C89717 * C29625 + C90038 * C139899) *
                C140012 +
            ((C55522 - C55521) * C29624 + (C55740 - C55739) * C139984 +
             (C57891 - C57892) * C29625 + (C58103 - C58104) * C139899) *
                C67750) *
               C1565 +
           ((C64587 * C29624 + C64931 * C139984 + C64589 * C29625 +
             C64932 * C139899) *
                C140011 +
            (C88899 * C29624 + C89133 * C139984 + (C63745 - C63744) * C29625 +
             (C63977 - C63976) * C139899) *
                C140012 +
            ((C57892 - C57891) * C29624 + (C58104 - C58103) * C139984 +
             (C139731 * C59484 - C54790 * C59483) * C29625 +
             (C139731 * C59796 - C54790 * C59795) * C139899) *
                C67750) *
               C140002) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eezy[59] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C140011 * C183 - C67829 * C108 + C140012 * C896 - C67830 * C813 +
             C67750 * C2974 - C67831 * C2908) *
                C29624 +
            (C140011 * C629 - C67829 * C567 + C140012 * C1393 - C67830 * C1317 +
             C67750 * C3314 - C67831 * C3256) *
                C139984 +
            (C86976 - C86977 + C86978 - C86979 + C86980 - C86981) * C29625 +
            (C87597 - C87598 + C87599 - C87600 + C87601 - C87602) * C139899) *
               C139731 * C1565 +
           ((C86977 - C86976 + C86979 - C86978 + C86981 - C86980) * C29624 +
            (C87598 - C87597 + C87600 - C87599 + C87602 - C87601) * C139984 +
            (C67829 * C5273 - C140011 * C5339 + C67830 * C13126 -
             C140012 * C13216 + C67831 * C13128 - C67750 * C13217) *
                C29625 +
            (C67829 * C5621 - C140011 * C5679 + C67830 * C13618 -
             C140012 * C13700 + C67831 * C13620 - C67750 * C13701) *
                C139899) *
               C139731 * C140002) *
              C2322 +
          (((C67829 * C813 - C140011 * C896 + C67830 * C2908 - C140012 * C2974 +
             C67831 * C6627 - C67750 * C6792) *
                C29624 +
            (C67829 * C1317 - C140011 * C1393 + C67830 * C3256 -
             C140012 * C3314 + C67831 * C7401 - C67750 * C7521) *
                C139984 +
            (C89501 - C89502 + C89503 - C89504 + C89505 - C89506) * C29625 +
            (C90137 - C90138 + C90139 - C90140 + C90141 - C90142) * C139899) *
               C139731 * C1565 +
           ((C89502 - C89501 + C89504 - C89503 + C89506 - C89505) * C29624 +
            (C90138 - C90137 + C90140 - C90139 + C90142 - C90141) * C139984 +
            (C140011 * C13216 - C67829 * C13126 + C140012 * C13217 -
             C67830 * C13128 + C67750 * C59537 - C67831 * C59483) *
                C29625 +
            (C140011 * C13700 - C67829 * C13618 + C140012 * C13701 -
             C67830 * C13620 + C67750 * C59847 - C67831 * C59795) *
                C139899) *
               C139731 * C140002) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eezz[59] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C29624 * C266 - C30126 * C108 - C29624 * C567 + C139984 * C702 +
             C29625 * C1741 - C30127 * C1570 - C29625 * C2074 +
             C139899 * C2230) *
                C140011 +
            (C39218 + C39219) * C140012 + C89286 * C67750) *
               C139731 * C1565 -
           ((C90253 + C90254) * C67750 + (C43808 + C43809) * C140012 +
            (C29625 * C5397 - C30127 * C5273 - C29625 * C5621 +
             C139899 * C5733 + C29624 * C1741 - C30126 * C1570 -
             C29624 * C2074 + C139984 * C2230) *
                C140011) *
               C139731 * C140002) *
              C2322 +
          (((C43809 + C43808) * C140011 + (C90254 + C90253) * C140012 +
            (C29624 * C10630 - C30126 * C10394 - C29624 * C11062 +
             C139984 * C11272 + C29625 * C59589 - C30127 * C59483 -
             C29625 * C59795 + C139899 * C59898) *
                C67750) *
               C139731 * C140002 -
           ((C89299 + C89300) * C67750 + (C42566 + C42567) * C140012 +
            (C39219 + C39218) * C140011) *
               C139731 * C1565) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eexx[60] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C54790 * C114 - C54791 * C108 - C54790 * C115 + C139731 * C126) *
                 C139984 +
             C61654 * C139899) *
                C140011 +
            (C85975 + C85976) * C140012 + C88657 * C67750) *
               C4096 -
           ((C89399 + C89400) * C67750 + (C89401 + C89402) * C140012 +
            (C61655 * C139899 + C61654 * C139984) * C140011) *
               C140002) *
              C139792 * C2324 +
          (((C61656 * C139984 + C61657 * C139899) * C140011 +
            (C60686 * C139984 + C60687 * C139899) * C140012 +
            (C85988 * C139984 + (C54790 * C13136 - C54791 * C13129 -
                                 C54790 * C13137 + C139731 * C13141) *
                                    C139899) *
                C67750) *
               C140002 -
           ((C85989 + C85981) * C67750 + (C85980 + C85979) * C140012 +
            (C61656 * C139899 +
             (C54790 * C116 - C54791 * C109 - C54790 * C117 + C139731 * C127) *
                 C139984) *
                C140011) *
               C4096) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexy[60] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C140011 * C183 - C67829 * C108 + C140012 * C896 - C67830 * C813 +
              C67750 * C2974 - C67831 * C2908) *
                 C54790 +
             (C140011 * C189 - C67829 * C115 + C140012 * C901 - C67830 * C822 +
              C67750 * C2978 - C67831 * C2913) *
                 C139731) *
                C139984 +
            ((C86976 - C86977 + C86978 - C86979 + C86980 - C86981) * C54790 +
             (C86982 - C86983 + C86984 - C86985 + C86986 - C86987) * C139731) *
                C139899) *
               C4096 +
           (((C86977 - C86976 + C86979 - C86978 + C86981 - C86980) * C54790 +
             (C86983 - C86982 + C86985 - C86984 + C86987 - C86986) * C139731) *
                C139984 +
            ((C67829 * C5273 - C140011 * C5339 + C67830 * C13126 -
              C140012 * C13216 + C67831 * C13128 - C67750 * C13217) *
                 C54790 +
             (C67829 * C5278 - C140011 * C5343 + C67830 * C13131 -
              C140012 * C13220 + C67831 * C13135 - C67750 * C13221) *
                 C139731) *
                C139899) *
               C140002) *
              C139792 * C2324 +
          ((((C67834 - C67833 + C67836 - C67835 + C67838 - C67837) * C54790 +
             (C67840 - C67839 + C67842 - C67841 + C67844 - C67843) * C139731) *
                C139984 +
            ((C69662 - C69663 + C69664 - C69665 + C69666 - C69667) * C54790 +
             (C69668 - C69669 + C69670 - C69671 + C69672 - C69673) * C139731) *
                C139899) *
               C4096 +
           (((C69663 - C69662 + C69665 - C69664 + C69667 - C69666) * C54790 +
             (C69669 - C69668 + C69671 - C69670 + C69673 - C69672) * C139731) *
                C139984 +
            ((C140011 * C5340 - C67829 * C5274 + C140012 * C13218 -
              C67830 * C13127 + C67750 * C13219 - C67831 * C13129) *
                 C54790 +
             (C140011 * C5344 - C67829 * C5280 + C140012 * C13222 -
              C67830 * C13133 + C67750 * C13223 - C67831 * C13137) *
                 C139731) *
                C139899) *
               C140002) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexz[60] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C139984 * C266 - C29624 * C108 + C139899 * C1741 -
                        C29625 * C1570) *
                           C54790 +
                       (C139984 * C272 - C29624 * C115 + C139899 * C1746 -
                        C29625 * C1579) *
                           C139731) *
                          C140011 +
                      ((C38340 - C38341 + C38342 - C38343) * C54790 +
                       (C38344 - C38345 + C38346 - C38347) * C139731) *
                          C140012 +
                      C88824 * C67750) *
                         C4096 +
                     (((C29624 * C1570 - C139984 * C1741 + C29625 * C5273 -
                        C139899 * C5397) *
                           C54790 +
                       (C29624 * C1579 - C139984 * C1746 + C29625 * C5278 -
                        C139899 * C5401) *
                           C139731) *
                          C140011 +
                      ((C42968 - C42969 + C42970 - C42971) * C54790 +
                       (C42972 - C42973 + C42974 - C42975) * C139731) *
                          C140012 +
                      ((C89611 - C89612 + C89613 - C89614) * C54790 +
                       (C89615 - C89616 + C89617 - C89618) * C139731) *
                          C67750) *
                         C140002) *
                        C139792 * C2324 +
                    ((((C29628 - C29627 + C29630 - C29629) * C54790 +
                       (C29632 - C29631 + C29634 - C29633) * C139731) *
                          C140011 +
                      (C38366 * C54790 + C38367 * C139731) * C140012 +
                      ((C38356 - C38357 + C38358 - C38359) * C54790 +
                       (C38360 - C38361 + C38362 - C38363) * C139731) *
                          C67750) *
                         C4096 +
                     (((C31459 - C31458 + C31461 - C31460) * C54790 +
                       (C31463 - C31462 + C31465 - C31464) * C139731) *
                          C140011 +
                      ((C39641 - C39640 + C39643 - C39642) * C54790 +
                       (C39645 - C39644 + C39647 - C39646) * C139731) *
                          C140012 +
                      ((C139984 * C7980 - C29624 * C7753 + C139899 * C13301 -
                        C29625 * C13129) *
                           C54790 +
                       (C139984 * C7983 - C29624 * C7757 + C139899 * C13305 -
                        C29625 * C13137) *
                           C139731) *
                          C67750) *
                         C140002) *
                        C139792 * C139998)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[60] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139731 * C114 - C54790 * C108) * C67829 +
             (C139731 * C354 - C54790 * C348) * C140011 +
             (C55513 - C55514) * C67830 + (C55515 - C55516) * C140012 +
             C57297 * C67831 + C57298 * C67750) *
                C139984 +
            ((C61976 - C61977) * C67829 + (C61978 - C61979) * C140011 +
             C64587 * C67830 + C64588 * C140012 + C88899 * C67831 +
             C88900 * C67750) *
                C139899) *
               C4096 +
           (((C61977 - C61976) * C67829 + (C61979 - C61978) * C140011 +
             C64591 * C67830 + C64592 * C140012 + C89717 * C67831 +
             C89718 * C67750) *
                C139984 +
            ((C61981 - C61980) * C67829 + (C61983 - C61982) * C140011 +
             C64593 * C67830 + C64594 * C140012 + (C63744 - C63745) * C67831 +
             (C63746 - C63747) * C67750) *
                C139899) *
               C140002) *
              C139792 * C2324 +
          ((((C54790 * C109 - C139731 * C116) * C67829 +
             (C54790 * C349 - C139731 * C355) * C140011 +
             (C55525 - C55526) * C67830 + (C55527 - C55528) * C140012 +
             (C55529 - C55530) * C67831 + (C55531 - C55532) * C67750) *
                C139984 +
            ((C61984 - C61985) * C67829 + (C61986 - C61987) * C140011 +
             (C61001 - C61002) * C67830 + (C61003 - C61004) * C140012 +
             (C86284 - C86285) * C67831 + (C86286 - C86287) * C67750) *
                C139899) *
               C4096 +
           (((C61985 - C61984) * C67829 + (C61987 - C61986) * C140011 +
             (C61002 - C61001) * C67830 + (C61004 - C61003) * C140012 +
             (C86285 - C86284) * C67831 + (C86287 - C86286) * C67750) *
                C139984 +
            ((C61989 - C61988) * C67829 + (C61991 - C61990) * C140011 +
             (C61006 - C61005) * C67830 + (C61008 - C61007) * C140012 +
             (C139731 * C13136 - C54790 * C13129) * C67831 +
             (C139731 * C13387 - C54790 * C13383) * C67750) *
                C139899) *
               C140002) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[60] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C67829 * C183 - C68078 * C108 - C67829 * C348 +
                       C140011 * C411 + C67830 * C896 - C68079 * C813 -
                       C67830 * C1072 + C140012 * C1151 + C67831 * C2974 -
                       C68080 * C2908 - C67831 * C3090 + C67750 * C3148) *
                          C139731 * C139984 +
                      (C87300 + C87301 + C87302) * C139731 * C139899) *
                         C4096 -
                     ((C67831 * C13217 - C68080 * C13128 - C67831 * C13382 +
                       C67750 * C13463 + C67830 * C13216 - C68079 * C13126 -
                       C67830 * C13380 + C140012 * C13462 + C67829 * C5339 -
                       C68078 * C5273 - C67829 * C5455 + C140011 * C5513) *
                          C139731 * C139899 +
                      (C87302 + C87301 + C87300) * C139731 * C139984) *
                         C140002) *
                        C139792 * C2324 +
                    (((C69988 + C69987 + C69986) * C139731 * C139984 +
                      (C67829 * C5340 - C68078 * C5274 - C67829 * C5456 +
                       C140011 * C5514 + C67830 * C13218 - C68079 * C13127 -
                       C67830 * C13381 + C140012 * C13464 + C67831 * C13219 -
                       C68080 * C13129 - C67831 * C13383 + C67750 * C13465) *
                          C139731 * C139899) *
                         C140002 -
                     ((C69986 + C69987 + C69988) * C139731 * C139899 +
                      (C68120 + C68119 + C68118) * C139731 * C139984) *
                         C4096) *
                        C139792 * C139998)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[60] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139984 * C266 - C29624 * C108 + C139899 * C1741 -
             C29625 * C1570) *
                C67829 +
            (C139984 * C495 - C29624 * C348 + C139899 * C1997 -
             C29625 * C1829) *
                C140011 +
            (C38340 - C38341 + C38342 - C38343) * C67830 +
            (C38780 - C38781 + C38782 - C38783) * C140012 + C88820 * C67831 +
            C89055 * C67750) *
               C139731 * C4096 +
           ((C29624 * C1570 - C139984 * C1741 + C29625 * C5273 -
             C139899 * C5397) *
                C67829 +
            (C29624 * C1829 - C139984 * C1997 + C29625 * C5455 -
             C139899 * C5567) *
                C140011 +
            (C42968 - C42969 + C42970 - C42971) * C67830 +
            (C43392 - C43393 + C43394 - C43395) * C140012 +
            (C89611 - C89612 + C89613 - C89614) * C67831 +
            (C89936 - C89937 + C89938 - C89939) * C67750) *
               C139731 * C140002) *
              C139792 * C2324 +
          (((C29628 - C29627 + C29630 - C29629) * C67829 +
            (C29880 - C29879 + C29882 - C29881) * C140011 + C38366 * C67830 +
            C38793 * C140012 + (C38356 - C38357 + C38358 - C38359) * C67831 +
            (C38788 - C38789 + C38790 - C38791) * C67750) *
               C139731 * C4096 +
           ((C31459 - C31458 + C31461 - C31460) * C67829 +
            (C31799 - C31798 + C31801 - C31800) * C140011 +
            (C39641 - C39640 + C39643 - C39642) * C67830 +
            (C40069 - C40068 + C40071 - C40070) * C140012 +
            (C139984 * C7980 - C29624 * C7753 + C139899 * C13301 -
             C29625 * C13129) *
                C67831 +
            (C139984 * C8318 - C29624 * C8092 + C139899 * C13543 -
             C29625 * C13383) *
                C67750) *
               C139731 * C140002) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eezx[60] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139731 * C114 - C54790 * C108) * C29624 +
             (C139731 * C573 - C54790 * C567) * C139984 +
             (C61976 - C61977) * C29625 + (C62328 - C62329) * C139899) *
                C140011 +
            ((C55513 - C55514) * C29624 + (C55735 - C55736) * C139984 +
             C64587 * C29625 + C64931 * C139899) *
                C140012 +
            C89137 * C67750) *
               C4096 +
           (((C61977 - C61976) * C29624 + (C62329 - C62328) * C139984 +
             (C61981 - C61980) * C29625 + (C62331 - C62330) * C139899) *
                C140011 +
            (C64591 * C29624 + C64933 * C139984 + C64593 * C29625 +
             C64934 * C139899) *
                C140012 +
            (C89717 * C29624 + C90038 * C139984 + (C63744 - C63745) * C29625 +
             (C63976 - C63977) * C139899) *
                C67750) *
               C140002) *
              C139792 * C2324 +
          ((((C54790 * C109 - C139731 * C116) * C29624 +
             (C54790 * C568 - C139731 * C574) * C139984 +
             (C61984 - C61985) * C29625 + (C62332 - C62333) * C139899) *
                C140011 +
            ((C55525 - C55526) * C29624 + (C55741 - C55742) * C139984 +
             (C61001 - C61002) * C29625 + (C61311 - C61312) * C139899) *
                C140012 +
            ((C55529 - C55530) * C29624 + (C55743 - C55744) * C139984 +
             (C86284 - C86285) * C29625 + (C86582 - C86583) * C139899) *
                C67750) *
               C4096 +
           (((C61985 - C61984) * C29624 + (C62333 - C62332) * C139984 +
             (C61989 - C61988) * C29625 + (C62335 - C62334) * C139899) *
                C140011 +
            ((C61002 - C61001) * C29624 + (C61312 - C61311) * C139984 +
             (C61006 - C61005) * C29625 + (C61314 - C61313) * C139899) *
                C140012 +
            ((C86285 - C86284) * C29624 + (C86583 - C86582) * C139984 +
             (C139731 * C13136 - C54790 * C13129) * C29625 +
             (C139731 * C13625 - C54790 * C13621) * C139899) *
                C67750) *
               C140002) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eezy[60] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C140011 * C183 - C67829 * C108 + C140012 * C896 - C67830 * C813 +
             C67750 * C2974 - C67831 * C2908) *
                C29624 +
            (C140011 * C629 - C67829 * C567 + C140012 * C1393 - C67830 * C1317 +
             C67750 * C3314 - C67831 * C3256) *
                C139984 +
            (C86976 - C86977 + C86978 - C86979 + C86980 - C86981) * C29625 +
            (C87597 - C87598 + C87599 - C87600 + C87601 - C87602) * C139899) *
               C139731 * C4096 +
           ((C86977 - C86976 + C86979 - C86978 + C86981 - C86980) * C29624 +
            (C87598 - C87597 + C87600 - C87599 + C87602 - C87601) * C139984 +
            (C67829 * C5273 - C140011 * C5339 + C67830 * C13126 -
             C140012 * C13216 + C67831 * C13128 - C67750 * C13217) *
                C29625 +
            (C67829 * C5621 - C140011 * C5679 + C67830 * C13618 -
             C140012 * C13700 + C67831 * C13620 - C67750 * C13701) *
                C139899) *
               C139731 * C140002) *
              C139792 * C2324 +
          (((C67834 - C67833 + C67836 - C67835 + C67838 - C67837) * C29624 +
            (C68347 - C68346 + C68349 - C68348 + C68351 - C68350) * C139984 +
            (C69662 - C69663 + C69664 - C69665 + C69666 - C69667) * C29625 +
            (C70283 - C70284 + C70285 - C70286 + C70287 - C70288) * C139899) *
               C139731 * C4096 +
           ((C69663 - C69662 + C69665 - C69664 + C69667 - C69666) * C29624 +
            (C70284 - C70283 + C70286 - C70285 + C70288 - C70287) * C139984 +
            (C140011 * C5340 - C67829 * C5274 + C140012 * C13218 -
             C67830 * C13127 + C67750 * C13219 - C67831 * C13129) *
                C29625 +
            (C140011 * C5680 - C67829 * C5622 + C140012 * C13702 -
             C67830 * C13619 + C67750 * C13703 - C67831 * C13621) *
                C139899) *
               C139731 * C140002) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eezz[60] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C29624 * C266 - C30126 * C108 - C29624 * C567 + C139984 * C702 +
             C29625 * C1741 - C30127 * C1570 - C29625 * C2074 +
             C139899 * C2230) *
                C140011 +
            (C39218 + C39219) * C140012 + C89286 * C67750) *
               C139731 * C4096 -
           ((C90253 + C90254) * C67750 + (C43808 + C43809) * C140012 +
            (C29625 * C5397 - C30127 * C5273 - C29625 * C5621 +
             C139899 * C5733 + C29624 * C1741 - C30126 * C1570 -
             C29624 * C2074 + C139984 * C2230) *
                C140011) *
               C139731 * C140002) *
              C139792 * C2324 +
          (((C32140 + C32139) * C140011 + (C40489 + C40488) * C140012 +
            (C29624 * C7980 - C30126 * C7753 - C29624 * C8423 +
             C139984 * C8633 + C29625 * C13301 - C30127 * C13129 -
             C29625 * C13621 + C139899 * C13781) *
                C67750) *
               C139731 * C140002 -
           ((C39220 + C39221) * C67750 + C39209 * C140012 +
            (C30166 + C30165) * C140011) *
               C139731 * C4096) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexx[61] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C54790 * C114 - C54791 * C108 - C54790 * C115 + C139731 * C126) *
                 C139984 +
             C61654 * C139899) *
                C140011 +
            (C85975 + C85976) * C140012 + C88657 * C67750) *
               C4096 -
           ((C89399 + C89400) * C67750 + (C89401 + C89402) * C140012 +
            (C61655 * C139899 + C61654 * C139984) * C140011) *
               C140002) *
              C806 +
          (((C89402 + C89401) * C140011 + (C89400 + C89399) * C140012 +
            (C57669 * C139984 + (C54790 * C59484 - C54791 * C59483 -
                                 C54790 * C59485 + C139731 * C59486) *
                                    C139899) *
                C67750) *
               C140002 -
           ((C88658 + C88659) * C67750 + (C85978 + C85977) * C140012 +
            (C85976 + C85975) * C140011) *
               C4096) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eexy[61] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C140011 * C183 - C67829 * C108 + C140012 * C896 - C67830 * C813 +
              C67750 * C2974 - C67831 * C2908) *
                 C54790 +
             (C140011 * C189 - C67829 * C115 + C140012 * C901 - C67830 * C822 +
              C67750 * C2978 - C67831 * C2913) *
                 C139731) *
                C139984 +
            ((C86976 - C86977 + C86978 - C86979 + C86980 - C86981) * C54790 +
             (C86982 - C86983 + C86984 - C86985 + C86986 - C86987) * C139731) *
                C139899) *
               C4096 +
           (((C86977 - C86976 + C86979 - C86978 + C86981 - C86980) * C54790 +
             (C86983 - C86982 + C86985 - C86984 + C86987 - C86986) * C139731) *
                C139984 +
            ((C67829 * C5273 - C140011 * C5339 + C67830 * C13126 -
              C140012 * C13216 + C67831 * C13128 - C67750 * C13217) *
                 C54790 +
             (C67829 * C5278 - C140011 * C5343 + C67830 * C13131 -
              C140012 * C13220 + C67831 * C13135 - C67750 * C13221) *
                 C139731) *
                C139899) *
               C140002) *
              C806 +
          ((((C67829 * C813 - C140011 * C896 + C67830 * C2908 -
              C140012 * C2974 + C67831 * C6627 - C67750 * C6792) *
                 C54790 +
             (C67829 * C822 - C140011 * C901 + C67830 * C2913 -
              C140012 * C2978 + C67831 * C6632 - C67750 * C6795) *
                 C139731) *
                C139984 +
            ((C89501 - C89502 + C89503 - C89504 + C89505 - C89506) * C54790 +
             (C89507 - C89508 + C89509 - C89510 + C89511 - C89512) * C139731) *
                C139899) *
               C4096 +
           (((C89502 - C89501 + C89504 - C89503 + C89506 - C89505) * C54790 +
             (C89508 - C89507 + C89510 - C89509 + C89512 - C89511) * C139731) *
                C139984 +
            ((C140011 * C13216 - C67829 * C13126 + C140012 * C13217 -
              C67830 * C13128 + C67750 * C59537 - C67831 * C59483) *
                 C54790 +
             (C140011 * C13220 - C67829 * C13131 + C140012 * C13221 -
              C67830 * C13135 + C67750 * C59538 - C67831 * C59485) *
                 C139731) *
                C139899) *
               C140002) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eexz[61] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C139984 * C266 - C29624 * C108 + C139899 * C1741 -
                        C29625 * C1570) *
                           C54790 +
                       (C139984 * C272 - C29624 * C115 + C139899 * C1746 -
                        C29625 * C1579) *
                           C139731) *
                          C140011 +
                      ((C38340 - C38341 + C38342 - C38343) * C54790 +
                       (C38344 - C38345 + C38346 - C38347) * C139731) *
                          C140012 +
                      C88824 * C67750) *
                         C4096 +
                     (((C29624 * C1570 - C139984 * C1741 + C29625 * C5273 -
                        C139899 * C5397) *
                           C54790 +
                       (C29624 * C1579 - C139984 * C1746 + C29625 * C5278 -
                        C139899 * C5401) *
                           C139731) *
                          C140011 +
                      ((C42968 - C42969 + C42970 - C42971) * C54790 +
                       (C42972 - C42973 + C42974 - C42975) * C139731) *
                          C140012 +
                      ((C89611 - C89612 + C89613 - C89614) * C54790 +
                       (C89615 - C89616 + C89617 - C89618) * C139731) *
                          C67750) *
                         C140002) *
                        C806 +
                    ((((C38341 - C38340 + C38343 - C38342) * C54790 +
                       (C38345 - C38344 + C38347 - C38346) * C139731) *
                          C140011 +
                      ((C41954 - C41955 + C41956 - C41957) * C54790 +
                       (C41958 - C41959 + C41960 - C41961) * C139731) *
                          C140012 +
                      ((C88812 - C88813 + C88814 - C88815) * C54790 +
                       (C88816 - C88817 + C88818 - C88819) * C139731) *
                          C67750) *
                         C4096 +
                     (((C42969 - C42968 + C42971 - C42970) * C54790 +
                       (C42973 - C42972 + C42975 - C42974) * C139731) *
                          C140011 +
                      ((C89612 - C89611 + C89614 - C89613) * C54790 +
                       (C89616 - C89615 + C89618 - C89617) * C139731) *
                          C140012 +
                      ((C139984 * C10630 - C29624 * C10394 + C139899 * C59589 -
                        C29625 * C59483) *
                           C54790 +
                       (C139984 * C10632 - C29624 * C10397 + C139899 * C59590 -
                        C29625 * C59485) *
                           C139731) *
                          C67750) *
                         C140002) *
                        C140000) *
                   C139758) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[61] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139731 * C114 - C54790 * C108) * C67829 +
             (C139731 * C354 - C54790 * C348) * C140011 +
             (C55513 - C55514) * C67830 + (C55515 - C55516) * C140012 +
             C57297 * C67831 + C57298 * C67750) *
                C139984 +
            ((C61976 - C61977) * C67829 + (C61978 - C61979) * C140011 +
             C64587 * C67830 + C64588 * C140012 + C88899 * C67831 +
             C88900 * C67750) *
                C139899) *
               C4096 +
           (((C61977 - C61976) * C67829 + (C61979 - C61978) * C140011 +
             C64591 * C67830 + C64592 * C140012 + C89717 * C67831 +
             C89718 * C67750) *
                C139984 +
            ((C61981 - C61980) * C67829 + (C61983 - C61982) * C140011 +
             C64593 * C67830 + C64594 * C140012 + (C63744 - C63745) * C67831 +
             (C63746 - C63747) * C67750) *
                C139899) *
               C140002) *
              C806 +
          ((((C55514 - C55513) * C67829 + (C55516 - C55515) * C140011 +
             (C55518 - C55517) * C67830 + (C55520 - C55519) * C140012 +
             (C55522 - C55521) * C67831 + (C55524 - C55523) * C67750) *
                C139984 +
            (C64591 * C67829 + C64592 * C140011 + C89717 * C67830 +
             C89718 * C140012 + (C57891 - C57892) * C67831 +
             (C57893 - C57894) * C67750) *
                C139899) *
               C4096 +
           ((C64587 * C67829 + C64588 * C140011 + C88899 * C67830 +
             C88900 * C140012 + (C57892 - C57891) * C67831 +
             (C57894 - C57893) * C67750) *
                C139984 +
            (C64589 * C67829 + C64590 * C140011 + (C63745 - C63744) * C67830 +
             (C63747 - C63746) * C140012 +
             (C139731 * C59484 - C54790 * C59483) * C67831 +
             (C139731 * C59642 - C54790 * C59641) * C67750) *
                C139899) *
               C140002) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eeyy[61] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C67829 * C183 - C68078 * C108 - C67829 * C348 +
                       C140011 * C411 + C67830 * C896 - C68079 * C813 -
                       C67830 * C1072 + C140012 * C1151 + C67831 * C2974 -
                       C68080 * C2908 - C67831 * C3090 + C67750 * C3148) *
                          C139731 * C139984 +
                      (C87300 + C87301 + C87302) * C139731 * C139899) *
                         C4096 -
                     ((C67831 * C13217 - C68080 * C13128 - C67831 * C13382 +
                       C67750 * C13463 + C67830 * C13216 - C68079 * C13126 -
                       C67830 * C13380 + C140012 * C13462 + C67829 * C5339 -
                       C68078 * C5273 - C67829 * C5455 + C140011 * C5513) *
                          C139731 * C139899 +
                      (C87302 + C87301 + C87300) * C139731 * C139984) *
                         C140002) *
                        C806 +
                    (((C89835 + C89836 + C89837) * C139731 * C139984 +
                      (C67829 * C13216 - C68078 * C13126 - C67829 * C13380 +
                       C140011 * C13462 + C67830 * C13217 - C68079 * C13128 -
                       C67830 * C13382 + C140012 * C13463 + C67831 * C59537 -
                       C68080 * C59483 - C67831 * C59641 + C67750 * C59693) *
                          C139731 * C139899) *
                         C140002 -
                     ((C89837 + C89836 + C89835) * C139731 * C139899 +
                      (C67831 * C6792 - C68080 * C6627 - C67831 * C7032 +
                       C67750 * C7169 + C67830 * C2974 - C68079 * C2908 -
                       C67830 * C3090 + C140012 * C3148 + C67829 * C896 -
                       C68078 * C813 - C67829 * C1072 + C140011 * C1151) *
                          C139731 * C139984) *
                         C4096) *
                        C140000) *
                   C139758) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[61] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C139984 * C266 - C29624 * C108 + C139899 * C1741 -
                       C29625 * C1570) *
                          C67829 +
                      (C139984 * C495 - C29624 * C348 + C139899 * C1997 -
                       C29625 * C1829) *
                          C140011 +
                      (C38340 - C38341 + C38342 - C38343) * C67830 +
                      (C38780 - C38781 + C38782 - C38783) * C140012 +
                      C88820 * C67831 + C89055 * C67750) *
                         C139731 * C4096 +
                     ((C29624 * C1570 - C139984 * C1741 + C29625 * C5273 -
                       C139899 * C5397) *
                          C67829 +
                      (C29624 * C1829 - C139984 * C1997 + C29625 * C5455 -
                       C139899 * C5567) *
                          C140011 +
                      (C42968 - C42969 + C42970 - C42971) * C67830 +
                      (C43392 - C43393 + C43394 - C43395) * C140012 +
                      (C89611 - C89612 + C89613 - C89614) * C67831 +
                      (C89936 - C89937 + C89938 - C89939) * C67750) *
                         C139731 * C140002) *
                        C806 +
                    (((C38341 - C38340 + C38343 - C38342) * C67829 +
                      (C38781 - C38780 + C38783 - C38782) * C140011 +
                      (C41954 - C41955 + C41956 - C41957) * C67830 +
                      (C42256 - C42257 + C42258 - C42259) * C140012 +
                      (C88812 - C88813 + C88814 - C88815) * C67831 +
                      (C89051 - C89052 + C89053 - C89054) * C67750) *
                         C139731 * C4096 +
                     ((C42969 - C42968 + C42971 - C42970) * C67829 +
                      (C43393 - C43392 + C43395 - C43394) * C140011 +
                      (C89612 - C89611 + C89614 - C89613) * C67830 +
                      (C89937 - C89936 + C89939 - C89938) * C140012 +
                      (C139984 * C10630 - C29624 * C10394 + C139899 * C59589 -
                       C29625 * C59483) *
                          C67831 +
                      (C139984 * C10958 - C29624 * C10740 + C139899 * C59744 -
                       C29625 * C59641) *
                          C67750) *
                         C139731 * C140002) *
                        C140000) *
                   C139758) /
                  (p * q * std::sqrt(p + q));
    d2eezx[61] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139731 * C114 - C54790 * C108) * C29624 +
             (C139731 * C573 - C54790 * C567) * C139984 +
             (C61976 - C61977) * C29625 + (C62328 - C62329) * C139899) *
                C140011 +
            ((C55513 - C55514) * C29624 + (C55735 - C55736) * C139984 +
             C64587 * C29625 + C64931 * C139899) *
                C140012 +
            C89137 * C67750) *
               C4096 +
           (((C61977 - C61976) * C29624 + (C62329 - C62328) * C139984 +
             (C61981 - C61980) * C29625 + (C62331 - C62330) * C139899) *
                C140011 +
            (C64591 * C29624 + C64933 * C139984 + C64593 * C29625 +
             C64934 * C139899) *
                C140012 +
            (C89717 * C29624 + C90038 * C139984 + (C63744 - C63745) * C29625 +
             (C63976 - C63977) * C139899) *
                C67750) *
               C140002) *
              C806 +
          ((((C55514 - C55513) * C29624 + (C55736 - C55735) * C139984 +
             C64591 * C29625 + C64933 * C139899) *
                C140011 +
            ((C55518 - C55517) * C29624 + (C55738 - C55737) * C139984 +
             C89717 * C29625 + C90038 * C139899) *
                C140012 +
            ((C55522 - C55521) * C29624 + (C55740 - C55739) * C139984 +
             (C57891 - C57892) * C29625 + (C58103 - C58104) * C139899) *
                C67750) *
               C4096 +
           ((C64587 * C29624 + C64931 * C139984 + C64589 * C29625 +
             C64932 * C139899) *
                C140011 +
            (C88899 * C29624 + C89133 * C139984 + (C63745 - C63744) * C29625 +
             (C63977 - C63976) * C139899) *
                C140012 +
            ((C57892 - C57891) * C29624 + (C58104 - C58103) * C139984 +
             (C139731 * C59484 - C54790 * C59483) * C29625 +
             (C139731 * C59796 - C54790 * C59795) * C139899) *
                C67750) *
               C140002) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eezy[61] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C140011 * C183 - C67829 * C108 + C140012 * C896 - C67830 * C813 +
             C67750 * C2974 - C67831 * C2908) *
                C29624 +
            (C140011 * C629 - C67829 * C567 + C140012 * C1393 - C67830 * C1317 +
             C67750 * C3314 - C67831 * C3256) *
                C139984 +
            (C86976 - C86977 + C86978 - C86979 + C86980 - C86981) * C29625 +
            (C87597 - C87598 + C87599 - C87600 + C87601 - C87602) * C139899) *
               C139731 * C4096 +
           ((C86977 - C86976 + C86979 - C86978 + C86981 - C86980) * C29624 +
            (C87598 - C87597 + C87600 - C87599 + C87602 - C87601) * C139984 +
            (C67829 * C5273 - C140011 * C5339 + C67830 * C13126 -
             C140012 * C13216 + C67831 * C13128 - C67750 * C13217) *
                C29625 +
            (C67829 * C5621 - C140011 * C5679 + C67830 * C13618 -
             C140012 * C13700 + C67831 * C13620 - C67750 * C13701) *
                C139899) *
               C139731 * C140002) *
              C806 +
          (((C67829 * C813 - C140011 * C896 + C67830 * C2908 - C140012 * C2974 +
             C67831 * C6627 - C67750 * C6792) *
                C29624 +
            (C67829 * C1317 - C140011 * C1393 + C67830 * C3256 -
             C140012 * C3314 + C67831 * C7401 - C67750 * C7521) *
                C139984 +
            (C89501 - C89502 + C89503 - C89504 + C89505 - C89506) * C29625 +
            (C90137 - C90138 + C90139 - C90140 + C90141 - C90142) * C139899) *
               C139731 * C4096 +
           ((C89502 - C89501 + C89504 - C89503 + C89506 - C89505) * C29624 +
            (C90138 - C90137 + C90140 - C90139 + C90142 - C90141) * C139984 +
            (C140011 * C13216 - C67829 * C13126 + C140012 * C13217 -
             C67830 * C13128 + C67750 * C59537 - C67831 * C59483) *
                C29625 +
            (C140011 * C13700 - C67829 * C13618 + C140012 * C13701 -
             C67830 * C13620 + C67750 * C59847 - C67831 * C59795) *
                C139899) *
               C139731 * C140002) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eezz[61] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C29624 * C266 - C30126 * C108 - C29624 * C567 + C139984 * C702 +
             C29625 * C1741 - C30127 * C1570 - C29625 * C2074 +
             C139899 * C2230) *
                C140011 +
            (C39218 + C39219) * C140012 + C89286 * C67750) *
               C139731 * C4096 -
           ((C90253 + C90254) * C67750 + (C43808 + C43809) * C140012 +
            (C29625 * C5397 - C30127 * C5273 - C29625 * C5621 +
             C139899 * C5733 + C29624 * C1741 - C30126 * C1570 -
             C29624 * C2074 + C139984 * C2230) *
                C140011) *
               C139731 * C140002) *
              C806 +
          (((C43809 + C43808) * C140011 + (C90254 + C90253) * C140012 +
            (C29624 * C10630 - C30126 * C10394 - C29624 * C11062 +
             C139984 * C11272 + C29625 * C59589 - C30127 * C59483 -
             C29625 * C59795 + C139899 * C59898) *
                C67750) *
               C139731 * C140002 -
           ((C89299 + C89300) * C67750 + (C42566 + C42567) * C140012 +
            (C39219 + C39218) * C140011) *
               C139731 * C4096) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eexx[62] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C54790 * C114 - C54791 * C108 - C54790 * C115 + C139731 * C126) *
                C139984 +
            C61654 * C139899) *
               C140011 +
           (C85975 + C85976) * C140012 + C88657 * C67750) *
              C5270 -
          ((C89399 + C89400) * C67750 + (C89401 + C89402) * C140012 +
           (C61655 * C139899 + C61654 * C139984) * C140011) *
              C5271 +
          ((C61655 * C139984 + C67012 * C139899) * C140011 +
           (C60685 * C139984 + C64257 * C139899) * C140012 +
           (C63508 * C139984 + (C54790 * C64245 - C54791 * C64244 -
                                C54790 * C64246 + C139731 * C64247) *
                                   C139899) *
               C67750) *
              C5272) *
         C139792 * C139758) /
        (p * q * std::sqrt(p + q));
    d2eexy[62] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C140011 * C183 - C67829 * C108 + C140012 * C896 - C67830 * C813 +
             C67750 * C2974 - C67831 * C2908) *
                C54790 +
            (C140011 * C189 - C67829 * C115 + C140012 * C901 - C67830 * C822 +
             C67750 * C2978 - C67831 * C2913) *
                C139731) *
               C139984 +
           ((C86976 - C86977 + C86978 - C86979 + C86980 - C86981) * C54790 +
            (C86982 - C86983 + C86984 - C86985 + C86986 - C86987) * C139731) *
               C139899) *
              C5270 +
          (((C86977 - C86976 + C86979 - C86978 + C86981 - C86980) * C54790 +
            (C86983 - C86982 + C86985 - C86984 + C86987 - C86986) * C139731) *
               C139984 +
           ((C92167 - C92168 + C92169 - C92170 + C92171 - C92172) * C54790 +
            (C92173 - C92174 + C92175 - C92176 + C92177 - C92178) * C139731) *
               C139899) *
              C5271 +
          (((C92168 - C92167 + C92170 - C92169 + C92172 - C92171) * C54790 +
            (C92174 - C92173 + C92176 - C92175 + C92178 - C92177) * C139731) *
               C139984 +
           ((C140011 * C15788 - C67829 * C15623 + C140012 * C18422 -
             C67830 * C18302 + C67750 * C64356 - C67831 * C64244) *
                C54790 +
            (C140011 * C15791 - C67829 * C15628 + C140012 * C18424 -
             C67830 * C18305 + C67750 * C64357 - C67831 * C64246) *
                C139731) *
               C139899) *
              C5272) *
         C139792 * C139758) /
        (p * q * std::sqrt(p + q));
    d2eexz[62] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C139984 * C266 - C29624 * C108 + C139899 * C1741 -
                       C29625 * C1570) *
                          C54790 +
                      (C139984 * C272 - C29624 * C115 + C139899 * C1746 -
                       C29625 * C1579) *
                          C139731) *
                         C140011 +
                     ((C38340 - C38341 + C38342 - C38343) * C54790 +
                      (C38344 - C38345 + C38346 - C38347) * C139731) *
                         C140012 +
                     C88824 * C67750) *
                        C5270 +
                    (((C29624 * C1570 - C139984 * C1741 + C29625 * C5273 -
                       C139899 * C5397) *
                          C54790 +
                      (C29624 * C1579 - C139984 * C1746 + C29625 * C5278 -
                       C139899 * C5401) *
                          C139731) *
                         C140011 +
                     ((C42968 - C42969 + C42970 - C42971) * C54790 +
                      (C42972 - C42973 + C42974 - C42975) * C139731) *
                         C140012 +
                     ((C89611 - C89612 + C89613 - C89614) * C54790 +
                      (C89615 - C89616 + C89617 - C89618) * C139731) *
                         C67750) *
                        C5271 +
                    (((C139984 * C5397 - C29624 * C5273 + C139899 * C15912 -
                       C29625 * C15623) *
                          C54790 +
                      (C139984 * C5401 - C29624 * C5278 + C139899 * C15915 -
                       C29625 * C15628) *
                          C139731) *
                         C140011 +
                     ((C139984 * C13298 - C29624 * C13126 + C139899 * C18532 -
                       C29625 * C18302) *
                          C54790 +
                      (C139984 * C13302 - C29624 * C13131 + C139899 * C18534 -
                       C29625 * C18305) *
                          C139731) *
                         C140012 +
                     ((C139984 * C13300 - C29624 * C13128 + C139899 * C64472 -
                       C29625 * C64244) *
                          C54790 +
                      (C139984 * C13304 - C29624 * C13135 + C139899 * C64473 -
                       C29625 * C64246) *
                          C139731) *
                         C67750) *
                        C5272) *
                   C139792 * C139758) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[62] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C139731 * C114 - C54790 * C108) * C67829 +
                      (C139731 * C354 - C54790 * C348) * C140011 +
                      (C55513 - C55514) * C67830 + (C55515 - C55516) * C140012 +
                      C57297 * C67831 + C57298 * C67750) *
                         C139984 +
                     ((C61976 - C61977) * C67829 + (C61978 - C61979) * C140011 +
                      C64587 * C67830 + C64588 * C140012 + C88899 * C67831 +
                      C88900 * C67750) *
                         C139899) *
                        C5270 +
                    (((C61977 - C61976) * C67829 + (C61979 - C61978) * C140011 +
                      C64591 * C67830 + C64592 * C140012 + C89717 * C67831 +
                      C89718 * C67750) *
                         C139984 +
                     ((C61981 - C61980) * C67829 + (C61983 - C61982) * C140011 +
                      C64593 * C67830 + C64594 * C140012 +
                      (C63744 - C63745) * C67831 + (C63746 - C63747) * C67750) *
                         C139899) *
                        C5271 +
                    ((C67258 * C67829 + C67259 * C140011 + C64589 * C67830 +
                      C64590 * C140012 + (C63745 - C63744) * C67831 +
                      (C63747 - C63746) * C67750) *
                         C139984 +
                     ((C67263 - C67262) * C67829 + (C67265 - C67264) * C140011 +
                      (C64596 - C64595) * C67830 + (C64598 - C64597) * C140012 +
                      (C139731 * C64245 - C54790 * C64244) * C67831 +
                      (C139731 * C64585 - C54790 * C64584) * C67750) *
                         C139899) *
                        C5272) *
                   C139792 * C139758) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[62] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C67829 * C183 - C68078 * C108 - C67829 * C348 + C140011 * C411 +
            C67830 * C896 - C68079 * C813 - C67830 * C1072 + C140012 * C1151 +
            C67831 * C2974 - C68080 * C2908 - C67831 * C3090 + C67750 * C3148) *
               C139731 * C139984 +
           (C87300 + C87301 + C87302) * C139731 * C139899) *
              C5270 -
          ((C92419 + C92420 + C92421) * C139731 * C139899 +
           (C87302 + C87301 + C87300) * C139731 * C139984) *
              C5271 +
          ((C92421 + C92420 + C92419) * C139731 * C139984 +
           (C67829 * C15788 - C68078 * C15623 - C67829 * C16028 +
            C140011 * C16165 + C67830 * C18422 - C68079 * C18302 -
            C67830 * C18634 + C140012 * C18744 + C67831 * C64356 -
            C68080 * C64244 - C67831 * C64584 + C67750 * C64696) *
               C139731 * C139899) *
              C5272) *
         C139792 * C139758) /
        (p * q * std::sqrt(p + q));
    d2eeyz[62] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C139984 * C266 - C29624 * C108 + C139899 * C1741 - C29625 * C1570) *
               C67829 +
           (C139984 * C495 - C29624 * C348 + C139899 * C1997 - C29625 * C1829) *
               C140011 +
           (C38340 - C38341 + C38342 - C38343) * C67830 +
           (C38780 - C38781 + C38782 - C38783) * C140012 + C88820 * C67831 +
           C89055 * C67750) *
              C139731 * C5270 +
          ((C29624 * C1570 - C139984 * C1741 + C29625 * C5273 -
            C139899 * C5397) *
               C67829 +
           (C29624 * C1829 - C139984 * C1997 + C29625 * C5455 -
            C139899 * C5567) *
               C140011 +
           (C42968 - C42969 + C42970 - C42971) * C67830 +
           (C43392 - C43393 + C43394 - C43395) * C140012 +
           (C89611 - C89612 + C89613 - C89614) * C67831 +
           (C89936 - C89937 + C89938 - C89939) * C67750) *
              C139731 * C5271 +
          ((C139984 * C5397 - C29624 * C5273 + C139899 * C15912 -
            C29625 * C15623) *
               C67829 +
           (C139984 * C5567 - C29624 * C5455 + C139899 * C16294 -
            C29625 * C16028) *
               C140011 +
           (C139984 * C13298 - C29624 * C13126 + C139899 * C18532 -
            C29625 * C18302) *
               C67830 +
           (C139984 * C13540 - C29624 * C13380 + C139899 * C18862 -
            C29625 * C18634) *
               C140012 +
           (C139984 * C13300 - C29624 * C13128 + C139899 * C64472 -
            C29625 * C64244) *
               C67831 +
           (C139984 * C13541 - C29624 * C13382 + C139899 * C64823 -
            C29625 * C64584) *
               C67750) *
              C139731 * C5272) *
         C139792 * C139758) /
        (p * q * std::sqrt(p + q));
    d2eezx[62] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139731 * C114 - C54790 * C108) * C29624 +
            (C139731 * C573 - C54790 * C567) * C139984 +
            (C61976 - C61977) * C29625 + (C62328 - C62329) * C139899) *
               C140011 +
           ((C55513 - C55514) * C29624 + (C55735 - C55736) * C139984 +
            C64587 * C29625 + C64931 * C139899) *
               C140012 +
           C89137 * C67750) *
              C5270 +
          (((C61977 - C61976) * C29624 + (C62329 - C62328) * C139984 +
            (C61981 - C61980) * C29625 + (C62331 - C62330) * C139899) *
               C140011 +
           (C64591 * C29624 + C64933 * C139984 + C64593 * C29625 +
            C64934 * C139899) *
               C140012 +
           (C89717 * C29624 + C90038 * C139984 + (C63744 - C63745) * C29625 +
            (C63976 - C63977) * C139899) *
               C67750) *
              C5271 +
          ((C67258 * C29624 + C67513 * C139984 + (C67263 - C67262) * C29625 +
            (C67515 - C67514) * C139899) *
               C140011 +
           (C64589 * C29624 + C64932 * C139984 + (C64596 - C64595) * C29625 +
            (C64936 - C64935) * C139899) *
               C140012 +
           ((C63745 - C63744) * C29624 + (C63977 - C63976) * C139984 +
            (C139731 * C64245 - C54790 * C64244) * C29625 +
            (C139731 * C64929 - C54790 * C64928) * C139899) *
               C67750) *
              C5272) *
         C139792 * C139758) /
        (p * q * std::sqrt(p + q));
    d2eezy[62] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C140011 * C183 - C67829 * C108 + C140012 * C896 - C67830 * C813 +
            C67750 * C2974 - C67831 * C2908) *
               C29624 +
           (C140011 * C629 - C67829 * C567 + C140012 * C1393 - C67830 * C1317 +
            C67750 * C3314 - C67831 * C3256) *
               C139984 +
           (C86976 - C86977 + C86978 - C86979 + C86980 - C86981) * C29625 +
           (C87597 - C87598 + C87599 - C87600 + C87601 - C87602) * C139899) *
              C139731 * C5270 +
          ((C86977 - C86976 + C86979 - C86978 + C86981 - C86980) * C29624 +
           (C87598 - C87597 + C87600 - C87599 + C87602 - C87601) * C139984 +
           (C92167 - C92168 + C92169 - C92170 + C92171 - C92172) * C29625 +
           (C92644 - C92645 + C92646 - C92647 + C92648 - C92649) * C139899) *
              C139731 * C5271 +
          ((C92168 - C92167 + C92170 - C92169 + C92172 - C92171) * C29624 +
           (C92645 - C92644 + C92647 - C92646 + C92649 - C92648) * C139984 +
           (C140011 * C15788 - C67829 * C15623 + C140012 * C18422 -
            C67830 * C18302 + C67750 * C64356 - C67831 * C64244) *
               C29625 +
           (C140011 * C16521 - C67829 * C16401 + C140012 * C19068 -
            C67830 * C18962 + C67750 * C65034 - C67831 * C64928) *
               C139899) *
              C139731 * C5272) *
         C139792 * C139758) /
        (p * q * std::sqrt(p + q));
    d2eezz[62] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C29624 * C266 - C30126 * C108 - C29624 * C567 +
                      C139984 * C702 + C29625 * C1741 - C30127 * C1570 -
                      C29625 * C2074 + C139899 * C2230) *
                         C140011 +
                     (C39218 + C39219) * C140012 + C89286 * C67750) *
                        C139731 * C5270 -
                    ((C90253 + C90254) * C67750 + (C43808 + C43809) * C140012 +
                     (C29625 * C5397 - C30127 * C5273 - C29625 * C5621 +
                      C139899 * C5733 + C29624 * C1741 - C30126 * C1570 -
                      C29624 * C2074 + C139984 * C2230) *
                         C140011) *
                        C139731 * C5271 +
                    ((C29624 * C5397 - C30126 * C5273 - C29624 * C5621 +
                      C139984 * C5733 + C29625 * C15912 - C30127 * C15623 -
                      C29625 * C16401 + C139899 * C16633) *
                         C140011 +
                     (C29624 * C13298 - C30126 * C13126 - C29624 * C13618 +
                      C139984 * C13778 + C29625 * C18532 - C30127 * C18302 -
                      C29625 * C18962 + C139899 * C19172) *
                         C140012 +
                     (C29624 * C13300 - C30126 * C13128 - C29624 * C13620 +
                      C139984 * C13779 + C29625 * C64472 - C30127 * C64244 -
                      C29625 * C64928 + C139899 * C65141) *
                         C67750) *
                        C139731 * C5272) *
                   C139792 * C139758) /
                  (p * q * std::sqrt(p + q));
    d2eexx[63] +=
        (-std::pow(Pi, 2.5) *
         (((C54790 * C114 - C54791 * C108 - C54790 * C115 + C139731 * C126) *
               C139835 * C54786 +
           (C54790 * C821 - C54791 * C813 - C54790 * C822 + C139731 * C828) *
               C139835 * C54787 +
           (C54790 * C2912 - C54791 * C2908 - C54790 * C2913 +
            C139731 * C2920) *
               C139835 * C54788 +
           (C54790 * C6631 - C54791 * C6627 - C54790 * C6632 +
            C139731 * C6636) *
               C139835 * C54789) *
              C139809 * C139792 * C97 -
          ((C54790 * C6629 - C54791 * C6626 - C54790 * C6630 +
            C139731 * C6635) *
               C139835 * C54789 +
           (C54790 * C2914 - C54791 * C2909 - C54790 * C2915 +
            C139731 * C2921) *
               C139835 * C54788 +
           (C54790 * C819 - C54791 * C812 - C54790 * C820 + C139731 * C827) *
               C139835 * C54787 +
           (C54790 * C116 - C54791 * C109 - C54790 * C117 + C139731 * C127) *
               C139835 * C54786) *
              C139809 * C139792 * C98 +
          ((C54790 * C118 - C54791 * C110 - C54790 * C119 + C139731 * C128) *
               C139835 * C54786 +
           (C54790 * C817 - C54791 * C811 - C54790 * C818 + C139731 * C826) *
               C139835 * C54787 +
           (C54790 * C2916 - C54791 * C2910 - C54790 * C2917 +
            C139731 * C2922) *
               C139835 * C54788 +
           (C54790 * C6633 - C54791 * C6628 - C54790 * C6634 +
            C139731 * C6637) *
               C139835 * C54789) *
              C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C47136 * C114 - C47137 * C108 - C47136 * C115 + C47131 * C126 +
            C47138 * C116 - C47139 * C109 - C47138 * C117 + C47132 * C127 +
            C47140 * C118 - C47141 * C110 - C47140 * C119 + C47133 * C128) *
               C139835 * C47134 +
           (C47136 * C821 - C47137 * C813 - C47136 * C822 + C47131 * C828 +
            C47138 * C819 - C47139 * C812 - C47138 * C820 + C47132 * C827 +
            C47140 * C817 - C47141 * C811 - C47140 * C818 + C47133 * C826) *
               C139835 * C139873) *
              C139809 * C139792 * C97 -
          ((C47140 * C815 - C47141 * C810 - C47140 * C816 + C47133 * C825 +
            C47138 * C817 - C47139 * C811 - C47138 * C818 + C47132 * C826 +
            C47136 * C819 - C47137 * C812 - C47136 * C820 + C47131 * C827) *
               C139835 * C139873 +
           (C47140 * C120 - C47141 * C111 - C47140 * C121 + C47133 * C129 +
            C47138 * C118 - C47139 * C110 - C47138 * C119 + C47132 * C128 +
            C47136 * C116 - C47137 * C109 - C47136 * C117 + C47131 * C127) *
               C139835 * C47134) *
              C139809 * C139792 * C98 +
          ((C47136 * C118 - C47137 * C110 - C47136 * C119 + C47131 * C128 +
            C47138 * C120 - C47139 * C111 - C47138 * C121 + C47132 * C129 +
            C47140 * C122 - C47141 * C112 - C47140 * C123 + C47133 * C130) *
               C139835 * C47134 +
           (C47136 * C817 - C47137 * C811 - C47136 * C818 + C47131 * C826 +
            C47138 * C815 - C47139 * C810 - C47138 * C816 + C47132 * C825 +
            C47140 * C823 - C47141 * C814 - C47140 * C824 + C47133 * C829) *
               C139835 * C139873) *
              C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C54790 * C114 - C54791 * C108 - C54790 * C115 + C139731 * C126) *
                C13856 +
            (C54790 * C1578 - C54791 * C1570 - C54790 * C1579 +
             C139731 * C1585) *
                C13857 +
            (C54790 * C5277 - C54791 * C5273 - C54790 * C5278 +
             C139731 * C5285) *
                C13858) *
               C47134 +
           (C55303 * C13856 + C57671 * C13857 +
            (C54790 * C13130 - C54791 * C13126 - C54790 * C13131 +
             C139731 * C13138) *
                C13858) *
               C139873) *
              C139809 * C139792 * C97 -
          (((C54790 * C13132 - C54791 * C13127 - C54790 * C13133 +
             C139731 * C13139) *
                C13858 +
            (C54790 * C3444 - C54791 * C3439 - C54790 * C3445 +
             C139731 * C3451) *
                C13857 +
            C55306 * C13856) *
               C139873 +
           ((C54790 * C5279 - C54791 * C5274 - C54790 * C5280 +
             C139731 * C5286) *
                C13858 +
            (C54790 * C1576 - C54791 * C1569 - C54790 * C1577 +
             C139731 * C1584) *
                C13857 +
            (C54790 * C116 - C54791 * C109 - C54790 * C117 + C139731 * C127) *
                C13856) *
               C47134) *
              C139809 * C139792 * C98 +
          (((C54790 * C118 - C54791 * C110 - C54790 * C119 + C139731 * C128) *
                C13856 +
            (C54790 * C1574 - C54791 * C1568 - C54790 * C1575 +
             C139731 * C1583) *
                C13857 +
            (C54790 * C5281 - C54791 * C5275 - C54790 * C5282 +
             C139731 * C5287) *
                C13858) *
               C47134 +
           ((C54790 * C817 - C54791 * C811 - C54790 * C818 + C139731 * C826) *
                C13856 +
            (C54790 * C3446 - C54791 * C3440 - C54790 * C3447 +
             C139731 * C3452) *
                C13857 +
            (C54790 * C14660 - C54791 * C14659 - C54790 * C14661 +
             C139731 * C14662) *
                C13858) *
               C139873) *
              C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eexy[63] +=
        (-std::pow(Pi, 2.5) *
         (((C54786 * C183 - C54842 * C108 + C54787 * C896 - C54843 * C813 +
            C54788 * C2974 - C54844 * C2908 + C54789 * C6792 - C54845 * C6627) *
               C54790 +
           (C54786 * C189 - C54842 * C115 + C54787 * C901 - C54843 * C822 +
            C54788 * C2978 - C54844 * C2913 + C54789 * C6795 - C54845 * C6632) *
               C139731) *
              C139835 * C139809 * C139792 * C97 +
          ((C54842 * C109 - C54786 * C184 + C54843 * C812 - C54787 * C897 +
            C54844 * C2909 - C54788 * C2975 + C54845 * C6626 - C54789 * C6793) *
               C54790 +
           (C54842 * C117 - C54786 * C190 + C54843 * C820 - C54787 * C902 +
            C54844 * C2915 - C54788 * C2979 + C54845 * C6630 - C54789 * C6796) *
               C139731) *
              C139835 * C139809 * C139792 * C98 +
          ((C54786 * C185 - C54842 * C110 + C54787 * C898 - C54843 * C811 +
            C54788 * C2976 - C54844 * C2910 + C54789 * C6794 - C54845 * C6628) *
               C54790 +
           (C54786 * C191 - C54842 * C119 + C54787 * C903 - C54843 * C818 +
            C54788 * C2980 - C54844 * C2917 + C54789 * C6797 - C54845 * C6634) *
               C139731) *
              C139835 * C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C47134 * C183 - C47216 * C108 + C139873 * C896 - C47217 * C813) *
               C47136 +
           (C47134 * C189 - C47216 * C115 + C139873 * C901 - C47217 * C822) *
               C47131 +
           (C47219 - C47220 + C47221 - C47222) * C47138 +
           (C47223 - C47224 + C47225 - C47226) * C47132 + C47247 * C47140 +
           C47248 * C47133) *
              C139835 * C139809 * C139792 * C97 +
          ((C47220 - C47219 + C47222 - C47221) * C47136 +
           (C47224 - C47223 + C47226 - C47225) * C47131 +
           (C47228 - C47227 + C47230 - C47229) * C47138 +
           (C47232 - C47231 + C47234 - C47233) * C47132 +
           (C47235 - C47236 + C47237 - C47238) * C47140 +
           (C47239 - C47240 + C47241 - C47242) * C47133) *
              C139835 * C139809 * C139792 * C98 +
          (C47247 * C47136 + C47248 * C47131 +
           (C47236 - C47235 + C47238 - C47237) * C47138 +
           (C47240 - C47239 + C47242 - C47241) * C47132 +
           (C47134 * C187 - C47216 * C112 + C139873 * C900 - C47217 * C814) *
               C47140 +
           (C47134 * C193 - C47216 * C123 + C139873 * C905 - C47217 * C824) *
               C47133) *
              C139835 * C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47134 * C183 - C47216 * C108 + C139873 * C896 - C47217 * C813) *
                C54790 +
            (C47134 * C189 - C47216 * C115 + C139873 * C901 - C47217 * C822) *
                C139731) *
               C13856 +
           ((C47134 * C1653 - C47216 * C1570 + C139873 * C3520 -
             C47217 * C3438) *
                C54790 +
            (C47134 * C1658 - C47216 * C1579 + C139873 * C3524 -
             C47217 * C3443) *
                C139731) *
               C13857 +
           ((C47134 * C5339 - C47216 * C5273 + C139873 * C13216 -
             C47217 * C13126) *
                C54790 +
            (C47134 * C5343 - C47216 * C5278 + C139873 * C13220 -
             C47217 * C13131) *
                C139731) *
               C13858) *
              C139809 * C139792 * C97 +
          (((C47220 - C47219 + C47222 - C47221) * C54790 +
            (C47224 - C47223 + C47226 - C47225) * C139731) *
               C13856 +
           ((C49056 - C49057 + C49058 - C49059) * C54790 +
            (C49060 - C49061 + C49062 - C49063) * C139731) *
               C13857 +
           ((C47216 * C5274 - C47134 * C5340 + C47217 * C13127 -
             C139873 * C13218) *
                C54790 +
            (C47216 * C5280 - C47134 * C5344 + C47217 * C13133 -
             C139873 * C13222) *
                C139731) *
               C13858) *
              C139809 * C139792 * C98 +
          ((C47247 * C54790 + C47248 * C139731) * C13856 +
           ((C49065 - C49064 + C49067 - C49066) * C54790 +
            (C49069 - C49068 + C49071 - C49070) * C139731) *
               C13857 +
           ((C47134 * C5341 - C47216 * C5275 + C139873 * C14761 -
             C47217 * C14659) *
                C54790 +
            (C47134 * C5345 - C47216 * C5282 + C139873 * C14762 -
             C47217 * C14661) *
                C139731) *
               C13858) *
              C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eexz[63] +=
        (-std::pow(Pi, 2.5) *
         ((((C139835 * C266 - C265 * C108) * C54790 +
            (C139835 * C272 - C265 * C115) * C139731) *
               C54786 +
           ((C6915 - C6916) * C54790 + (C6917 - C6918) * C139731) * C54787 +
           (C9790 * C54790 + C9791 * C139731) * C54788 +
           ((C9795 - C9794) * C54790 + (C9797 - C9796) * C139731) * C54789) *
              C139809 * C139792 * C97 +
          (((C280 - C279) * C54790 + (C282 - C281) * C139731) * C54786 +
           (C6927 * C54790 + C6928 * C139731) * C54787 +
           (C6929 * C54790 + C6930 * C139731) * C54788 +
           ((C6931 - C6932) * C54790 + (C6933 - C6934) * C139731) * C54789) *
              C139809 * C139792 * C98 +
          ((C295 * C54790 + C296 * C139731) * C54786 +
           (C21967 * C54790 + C21968 * C139731) * C54787 +
           ((C6001 - C6000) * C54790 + (C6003 - C6002) * C139731) * C54788 +
           ((C139835 * C6910 - C265 * C6628) * C54790 +
            (C139835 * C6913 - C265 * C6634) * C139731) *
               C54789) *
              C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C139835 * C266 - C265 * C108) * C47136 +
            (C139835 * C272 - C265 * C115) * C47131 + (C279 - C280) * C47138 +
            (C281 - C282) * C47132 + C295 * C47140 + C296 * C47133) *
               C47134 +
           ((C6915 - C6916) * C47136 + (C6917 - C6918) * C47131 +
            C6919 * C47138 + C6920 * C47132 + C21967 * C47140 +
            C21968 * C47133) *
               C139873) *
              C139809 * C139792 * C97 +
          (((C280 - C279) * C47136 + (C282 - C281) * C47131 +
            (C284 - C283) * C47138 + (C286 - C285) * C47132 +
            (C288 - C287) * C47140 + (C290 - C289) * C47133) *
               C47134 +
           (C6927 * C47136 + C6928 * C47131 + C22843 * C47138 +
            C22844 * C47132 + (C1003 - C1004) * C47140 +
            (C1005 - C1006) * C47133) *
               C139873) *
              C139809 * C139792 * C98 +
          ((C295 * C47136 + C296 * C47131 + C297 * C47138 + C298 * C47132 +
            (C292 - C291) * C47140 + (C294 - C293) * C47133) *
               C47134 +
           (C21967 * C47136 + C21968 * C47131 + (C1004 - C1003) * C47138 +
            (C1006 - C1005) * C47132 + (C139835 * C988 - C265 * C814) * C47140 +
            (C139835 * C993 - C265 * C824) * C47133) *
               C139873) *
              C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C13856 * C266 - C14015 * C108 + C13857 * C1741 - C14016 * C1570 +
             C13858 * C5397 - C14017 * C5273) *
                C54790 +
            (C13856 * C272 - C14015 * C115 + C13857 * C1746 - C14016 * C1579 +
             C13858 * C5401 - C14017 * C5278) *
                C139731) *
               C47134 +
           ((C13856 * C984 - C14015 * C813 + C13857 * C3594 - C14016 * C3438 +
             C13858 * C13298 - C14017 * C13126) *
                C54790 +
            (C13856 * C989 - C14015 * C822 + C13857 * C3598 - C14016 * C3443 +
             C13858 * C13302 - C14017 * C13131) *
                C139731) *
               C139873) *
              C139809 * C139792 * C97 +
          (((C14020 - C14019 + C14022 - C14021 + C14024 - C14023) * C54790 +
            (C14026 - C14025 + C14028 - C14027 + C14030 - C14029) * C139731) *
               C47134 +
           ((C14872 - C14873 + C14874 - C14875 + C14876 - C14877) * C54790 +
            (C14878 - C14879 + C14880 - C14881 + C14882 - C14883) * C139731) *
               C139873) *
              C139809 * C139792 * C98 +
          (((C14032 - C14031 + C14034 - C14033 + C14036 - C14035) * C54790 +
            (C14038 - C14037 + C14040 - C14039 + C14042 - C14041) * C139731) *
               C47134 +
           ((C13856 * C986 - C14015 * C811 + C13857 * C3596 - C14016 * C3440 +
             C13858 * C14869 - C14017 * C14659) *
                C54790 +
            (C13856 * C991 - C14015 * C818 + C13857 * C3600 - C14016 * C3447 +
             C13858 * C14870 - C14017 * C14661) *
                C139731) *
               C139873) *
              C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[63] +=
        (-std::pow(Pi, 2.5) * (((C139731 * C114 - C54790 * C108) * C54842 +
                                (C139731 * C354 - C54790 * C348) * C54786 +
                                (C139731 * C821 - C54790 * C813) * C54843 +
                                (C139731 * C1077 - C54790 * C1072) * C54787 +
                                (C139731 * C2912 - C54790 * C2908) * C54844 +
                                (C139731 * C3094 - C54790 * C3090) * C54788 +
                                (C139731 * C6631 - C54790 * C6627) * C54845 +
                                (C139731 * C7035 - C54790 * C7032) * C54789) *
                                   C139835 * C139809 * C139792 * C97 +
                               ((C54790 * C109 - C139731 * C116) * C54842 +
                                (C54790 * C349 - C139731 * C355) * C54786 +
                                (C54790 * C812 - C139731 * C819) * C54843 +
                                (C54790 * C1073 - C139731 * C1078) * C54787 +
                                (C54790 * C2909 - C139731 * C2914) * C54844 +
                                (C54790 * C3091 - C139731 * C3095) * C54788 +
                                (C54790 * C6626 - C139731 * C6629) * C54845 +
                                (C54790 * C7033 - C139731 * C7036) * C54789) *
                                   C139835 * C139809 * C139792 * C98 +
                               ((C139731 * C118 - C54790 * C110) * C54842 +
                                (C139731 * C356 - C54790 * C350) * C54786 +
                                (C139731 * C817 - C54790 * C811) * C54843 +
                                (C139731 * C1079 - C54790 * C1074) * C54787 +
                                (C139731 * C2916 - C54790 * C2910) * C54844 +
                                (C139731 * C3096 - C54790 * C3092) * C54788 +
                                (C139731 * C6633 - C54790 * C6628) * C54845 +
                                (C139731 * C7037 - C54790 * C7034) * C54789) *
                                   C139835 * C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C47131 * C114 - C47136 * C108 + C47132 * C116 - C47138 * C109 +
            C47133 * C118 - C47140 * C110) *
               C47216 +
           (C47131 * C354 - C47136 * C348 + C47132 * C355 - C47138 * C349 +
            C47133 * C356 - C47140 * C350) *
               C47134 +
           (C47131 * C821 - C47136 * C813 + C47132 * C819 - C47138 * C812 +
            C47133 * C817 - C47140 * C811) *
               C47217 +
           (C47131 * C1077 - C47136 * C1072 + C47132 * C1078 - C47138 * C1073 +
            C47133 * C1079 - C47140 * C1074) *
               C139873) *
              C139835 * C139809 * C139792 * C97 +
          ((C47136 * C109 - C47131 * C116 + C47138 * C110 - C47132 * C118 +
            C47140 * C111 - C47133 * C120) *
               C47216 +
           (C47136 * C349 - C47131 * C355 + C47138 * C350 - C47132 * C356 +
            C47140 * C351 - C47133 * C357) *
               C47134 +
           (C47136 * C812 - C47131 * C819 + C47138 * C811 - C47132 * C817 +
            C47140 * C810 - C47133 * C815) *
               C47217 +
           (C47136 * C1073 - C47131 * C1078 + C47138 * C1074 - C47132 * C1079 +
            C47140 * C1075 - C47133 * C1080) *
               C139873) *
              C139835 * C139809 * C139792 * C98 +
          ((C47131 * C118 - C47136 * C110 + C47132 * C120 - C47138 * C111 +
            C47133 * C122 - C47140 * C112) *
               C47216 +
           (C47131 * C356 - C47136 * C350 + C47132 * C357 - C47138 * C351 +
            C47133 * C358 - C47140 * C352) *
               C47134 +
           (C47131 * C817 - C47136 * C811 + C47132 * C815 - C47138 * C810 +
            C47133 * C823 - C47140 * C814) *
               C47217 +
           (C47131 * C1079 - C47136 * C1074 + C47132 * C1080 - C47138 * C1075 +
            C47133 * C1081 - C47140 * C1076) *
               C139873) *
              C139835 * C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C139731 * C114 - C54790 * C108) * C47216 +
            (C139731 * C354 - C54790 * C348) * C47134 +
            (C55513 - C55514) * C47217 + (C55515 - C55516) * C139873) *
               C13856 +
           ((C139731 * C1578 - C54790 * C1570) * C47216 +
            (C139731 * C1834 - C54790 * C1829) * C47134 +
            (C57884 - C57883) * C47217 + (C57886 - C57885) * C139873) *
               C13857 +
           ((C139731 * C5277 - C54790 * C5273) * C47216 +
            (C139731 * C5459 - C54790 * C5455) * C47134 +
            (C139731 * C13130 - C54790 * C13126) * C47217 +
            (C139731 * C13384 - C54790 * C13380) * C139873) *
               C13858) *
              C139809 * C139792 * C97 +
          (((C54790 * C109 - C139731 * C116) * C47216 +
            (C54790 * C349 - C139731 * C355) * C47134 +
            (C55525 - C55526) * C47217 + (C55527 - C55528) * C139873) *
               C13856 +
           ((C54790 * C1569 - C139731 * C1576) * C47216 +
            (C54790 * C1830 - C139731 * C1835) * C47134 +
            (C54790 * C3439 - C139731 * C3444) * C47217 +
            (C54790 * C3669 - C139731 * C3673) * C139873) *
               C13857 +
           ((C54790 * C5274 - C139731 * C5279) * C47216 +
            (C54790 * C5456 - C139731 * C5460) * C47134 +
            (C54790 * C13127 - C139731 * C13132) * C47217 +
            (C54790 * C13381 - C139731 * C13385) * C139873) *
               C13858) *
              C139809 * C139792 * C98 +
          (((C139731 * C118 - C54790 * C110) * C47216 +
            (C139731 * C356 - C54790 * C350) * C47134 +
            (C139731 * C817 - C54790 * C811) * C47217 +
            (C139731 * C1079 - C54790 * C1074) * C139873) *
               C13856 +
           ((C139731 * C1574 - C54790 * C1568) * C47216 +
            (C139731 * C1836 - C54790 * C1831) * C47134 +
            (C139731 * C3446 - C54790 * C3440) * C47217 +
            (C139731 * C3674 - C54790 * C3670) * C139873) *
               C13857 +
           ((C139731 * C5281 - C54790 * C5275) * C47216 +
            (C139731 * C5461 - C54790 * C5457) * C47134 +
            (C139731 * C14660 - C54790 * C14659) * C47217 +
            (C139731 * C14982 - C54790 * C14981) * C139873) *
               C13858) *
              C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[63] +=
        (-std::pow(Pi, 2.5) *
         ((C54842 * C183 - C54996 * C108 - C54842 * C348 + C54786 * C411 +
           C54843 * C896 - C54997 * C813 - C54843 * C1072 + C54787 * C1151 +
           C54844 * C2974 - C54998 * C2908 - C54844 * C3090 + C54788 * C3148 +
           C54845 * C6792 - C54999 * C6627 - C54845 * C7032 + C54789 * C7169) *
              C139731 * C139835 * C139809 * C139792 * C97 -
          (C54845 * C6793 - C54999 * C6626 - C54845 * C7033 + C54789 * C7168 +
           C54844 * C2975 - C54998 * C2909 - C54844 * C3091 + C54788 * C3149 +
           C54843 * C897 - C54997 * C812 - C54843 * C1073 + C54787 * C1150 +
           C54842 * C184 - C54996 * C109 - C54842 * C349 + C54786 * C412) *
              C139731 * C139835 * C139809 * C139792 * C98 +
          (C54842 * C185 - C54996 * C110 - C54842 * C350 + C54786 * C413 +
           C54843 * C898 - C54997 * C811 - C54843 * C1074 + C54787 * C1149 +
           C54844 * C2976 - C54998 * C2910 - C54844 * C3092 + C54788 * C3150 +
           C54845 * C6794 - C54999 * C6628 - C54845 * C7034 + C54789 * C7170) *
              C139731 * C139835 * C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C47216 * C183 - C47470 * C108 - C47216 * C348 + C47134 * C411 +
            C47217 * C896 - C47471 * C813 - C47217 * C1072 + C139873 * C1151) *
               C47131 +
           (C47509 + C47510) * C47132 + C47515 * C47133) *
              C139835 * C139809 * C139792 * C97 -
          ((C47513 + C47514) * C47133 + (C47512 + C47511) * C47132 +
           (C47510 + C47509) * C47131) *
              C139835 * C139809 * C139792 * C98 +
          (C47515 * C47131 + (C47514 + C47513) * C47132 +
           (C47216 * C187 - C47470 * C112 - C47216 * C352 + C47134 * C415 +
            C47217 * C900 - C47471 * C814 - C47217 * C1076 + C139873 * C1152) *
               C47133) *
              C139835 * C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C47216 * C183 - C47470 * C108 - C47216 * C348 + C47134 * C411 +
            C47217 * C896 - C47471 * C813 - C47217 * C1072 + C139873 * C1151) *
               C139731 * C13856 +
           (C47216 * C1653 - C47470 * C1570 - C47216 * C1829 + C47134 * C1908 +
            C47217 * C3520 - C47471 * C3438 - C47217 * C3668 +
            C139873 * C3742) *
               C139731 * C13857 +
           (C47216 * C5339 - C47470 * C5273 - C47216 * C5455 + C47134 * C5513 +
            C47217 * C13216 - C47471 * C13126 - C47217 * C13380 +
            C139873 * C13462) *
               C139731 * C13858) *
              C139809 * C139792 * C97 -
          ((C47217 * C13218 - C47471 * C13127 - C47217 * C13381 +
            C139873 * C13464 + C47216 * C5340 - C47470 * C5274 -
            C47216 * C5456 + C47134 * C5514) *
               C139731 * C13858 +
           (C49392 + C49393) * C139731 * C13857 +
           (C47510 + C47509) * C139731 * C13856) *
              C139809 * C139792 * C98 +
          (C47515 * C139731 * C13856 + (C49391 + C49390) * C139731 * C13857 +
           (C47216 * C5341 - C47470 * C5275 - C47216 * C5457 + C47134 * C5515 +
            C47217 * C14761 - C47471 * C14659 - C47217 * C14981 +
            C139873 * C15081) *
               C139731 * C13858) *
              C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[63] +=
        (-std::pow(Pi, 2.5) *
         (((C139835 * C266 - C265 * C108) * C54842 +
           (C139835 * C495 - C265 * C348) * C54786 + (C6915 - C6916) * C54843 +
           (C7294 - C7295) * C54787 + C9790 * C54844 + C10047 * C54788 +
           (C9795 - C9794) * C54845 + (C10049 - C10048) * C54789) *
              C139731 * C139809 * C139792 * C97 +
          ((C280 - C279) * C54842 + (C503 - C502) * C54786 + C6927 * C54843 +
           C7300 * C54787 + C6929 * C54844 + C7301 * C54788 +
           (C6931 - C6932) * C54845 + (C7302 - C7303) * C54789) *
              C139731 * C139809 * C139792 * C98 +
          (C295 * C54842 + C512 * C54786 + C21967 * C54843 + C22239 * C54787 +
           (C6001 - C6000) * C54844 + (C6274 - C6273) * C54788 +
           (C139835 * C6910 - C265 * C6628) * C54845 +
           (C139835 * C7292 - C265 * C7034) * C54789) *
              C139731 * C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C139835 * C266 - C265 * C108) * C47216 +
            (C139835 * C495 - C265 * C348) * C47134 + (C6915 - C6916) * C47217 +
            (C7294 - C7295) * C139873) *
               C47131 +
           ((C279 - C280) * C47216 + (C502 - C503) * C47134 + C6919 * C47217 +
            C7298 * C139873) *
               C47132 +
           C47596 * C47133) *
              C139809 * C139792 * C97 +
          (((C280 - C279) * C47216 + (C503 - C502) * C47134 + C6927 * C47217 +
            C7300 * C139873) *
               C47131 +
           ((C284 - C283) * C47216 + (C506 - C505) * C47134 + C22843 * C47217 +
            C23191 * C139873) *
               C47132 +
           ((C288 - C287) * C47216 + (C509 - C508) * C47134 +
            (C1003 - C1004) * C47217 + (C1250 - C1251) * C139873) *
               C47133) *
              C139809 * C139792 * C98 +
          (C47596 * C47131 +
           (C297 * C47216 + C513 * C47134 + (C1004 - C1003) * C47217 +
            (C1251 - C1250) * C139873) *
               C47132 +
           ((C292 - C291) * C47216 + (C511 - C510) * C47134 +
            (C139835 * C988 - C265 * C814) * C47217 +
            (C139835 * C1244 - C265 * C1076) * C139873) *
               C47133) *
              C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C13856 * C266 - C14015 * C108 + C13857 * C1741 - C14016 * C1570 +
            C13858 * C5397 - C14017 * C5273) *
               C47216 +
           (C13856 * C495 - C14015 * C348 + C13857 * C1997 - C14016 * C1829 +
            C13858 * C5567 - C14017 * C5455) *
               C47134 +
           (C13856 * C984 - C14015 * C813 + C13857 * C3594 - C14016 * C3438 +
            C13858 * C13298 - C14017 * C13126) *
               C47217 +
           (C13856 * C1240 - C14015 * C1072 + C13857 * C3812 - C14016 * C3668 +
            C13858 * C13540 - C14017 * C13380) *
               C139873) *
              C139731 * C139809 * C139792 * C97 +
          ((C14020 - C14019 + C14022 - C14021 + C14024 - C14023) * C47216 +
           (C14280 - C14279 + C14282 - C14281 + C14284 - C14283) * C47134 +
           (C14872 - C14873 + C14874 - C14875 + C14876 - C14877) * C47217 +
           (C15196 - C15197 + C15198 - C15199 + C15200 - C15201) * C139873) *
              C139731 * C139809 * C139792 * C98 +
          ((C14032 - C14031 + C14034 - C14033 + C14036 - C14035) * C47216 +
           (C14286 - C14285 + C14288 - C14287 + C14290 - C14289) * C47134 +
           (C13856 * C986 - C14015 * C811 + C13857 * C3596 - C14016 * C3440 +
            C13858 * C14869 - C14017 * C14659) *
               C47217 +
           (C13856 * C1242 - C14015 * C1074 + C13857 * C3814 - C14016 * C3670 +
            C13858 * C15194 - C14017 * C14981) *
               C139873) *
              C139731 * C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eezx[63] +=
        (-std::pow(Pi, 2.5) * ((((C139731 * C114 - C54790 * C108) * C265 +
                                 (C139731 * C573 - C54790 * C567) * C139835) *
                                    C54786 +
                                ((C139731 * C821 - C54790 * C813) * C265 +
                                 (C139731 * C1322 - C54790 * C1317) * C139835) *
                                    C54787 +
                                ((C139731 * C2912 - C54790 * C2908) * C265 +
                                 (C139731 * C3260 - C54790 * C3256) * C139835) *
                                    C54788 +
                                ((C139731 * C6631 - C54790 * C6627) * C265 +
                                 (C139731 * C7404 - C54790 * C7401) * C139835) *
                                    C54789) *
                                   C139809 * C139792 * C97 +
                               (((C54790 * C109 - C139731 * C116) * C265 +
                                 (C54790 * C568 - C139731 * C574) * C139835) *
                                    C54786 +
                                ((C54790 * C812 - C139731 * C819) * C265 +
                                 (C54790 * C1318 - C139731 * C1323) * C139835) *
                                    C54787 +
                                ((C54790 * C2909 - C139731 * C2914) * C265 +
                                 (C54790 * C3257 - C139731 * C3261) * C139835) *
                                    C54788 +
                                ((C54790 * C6626 - C139731 * C6629) * C265 +
                                 (C54790 * C7402 - C139731 * C7405) * C139835) *
                                    C54789) *
                                   C139809 * C139792 * C98 +
                               (((C139731 * C118 - C54790 * C110) * C265 +
                                 (C139731 * C575 - C54790 * C569) * C139835) *
                                    C54786 +
                                ((C139731 * C817 - C54790 * C811) * C265 +
                                 (C139731 * C1324 - C54790 * C1319) * C139835) *
                                    C54787 +
                                ((C139731 * C2916 - C54790 * C2910) * C265 +
                                 (C139731 * C3262 - C54790 * C3258) * C139835) *
                                    C54788 +
                                ((C139731 * C6633 - C54790 * C6628) * C265 +
                                 (C139731 * C7406 - C54790 * C7403) * C139835) *
                                    C54789) *
                                   C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47131 * C114 - C47136 * C108 + C47132 * C116 - C47138 * C109 +
             C47133 * C118 - C47140 * C110) *
                C265 +
            (C47131 * C573 - C47136 * C567 + C47132 * C574 - C47138 * C568 +
             C47133 * C575 - C47140 * C569) *
                C139835) *
               C47134 +
           ((C47131 * C821 - C47136 * C813 + C47132 * C819 - C47138 * C812 +
             C47133 * C817 - C47140 * C811) *
                C265 +
            (C47131 * C1322 - C47136 * C1317 + C47132 * C1323 - C47138 * C1318 +
             C47133 * C1324 - C47140 * C1319) *
                C139835) *
               C139873) *
              C139809 * C139792 * C97 +
          (((C47136 * C109 - C47131 * C116 + C47138 * C110 - C47132 * C118 +
             C47140 * C111 - C47133 * C120) *
                C265 +
            (C47136 * C568 - C47131 * C574 + C47138 * C569 - C47132 * C575 +
             C47140 * C570 - C47133 * C576) *
                C139835) *
               C47134 +
           ((C47136 * C812 - C47131 * C819 + C47138 * C811 - C47132 * C817 +
             C47140 * C810 - C47133 * C815) *
                C265 +
            (C47136 * C1318 - C47131 * C1323 + C47138 * C1319 - C47132 * C1324 +
             C47140 * C1320 - C47133 * C1325) *
                C139835) *
               C139873) *
              C139809 * C139792 * C98 +
          (((C47131 * C118 - C47136 * C110 + C47132 * C120 - C47138 * C111 +
             C47133 * C122 - C47140 * C112) *
                C265 +
            (C47131 * C575 - C47136 * C569 + C47132 * C576 - C47138 * C570 +
             C47133 * C577 - C47140 * C571) *
                C139835) *
               C47134 +
           ((C47131 * C817 - C47136 * C811 + C47132 * C815 - C47138 * C810 +
             C47133 * C823 - C47140 * C814) *
                C265 +
            (C47131 * C1324 - C47136 * C1319 + C47132 * C1325 - C47138 * C1320 +
             C47133 * C1326 - C47140 * C1321) *
                C139835) *
               C139873) *
              C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C139731 * C114 - C54790 * C108) * C14015 +
            (C139731 * C573 - C54790 * C567) * C13856 +
            (C139731 * C1578 - C54790 * C1570) * C14016 +
            (C139731 * C2079 - C54790 * C2074) * C13857 +
            (C139731 * C5277 - C54790 * C5273) * C14017 +
            (C139731 * C5625 - C54790 * C5621) * C13858) *
               C47134 +
           ((C55513 - C55514) * C14015 + (C55735 - C55736) * C13856 +
            (C57884 - C57883) * C14016 + (C58100 - C58099) * C13857 +
            (C139731 * C13130 - C54790 * C13126) * C14017 +
            (C139731 * C13622 - C54790 * C13618) * C13858) *
               C139873) *
              C139809 * C139792 * C97 +
          (((C54790 * C109 - C139731 * C116) * C14015 +
            (C54790 * C568 - C139731 * C574) * C13856 +
            (C54790 * C1569 - C139731 * C1576) * C14016 +
            (C54790 * C2075 - C139731 * C2080) * C13857 +
            (C54790 * C5274 - C139731 * C5279) * C14017 +
            (C54790 * C5622 - C139731 * C5626) * C13858) *
               C47134 +
           ((C55525 - C55526) * C14015 + (C55741 - C55742) * C13856 +
            (C54790 * C3439 - C139731 * C3444) * C14016 +
            (C54790 * C3883 - C139731 * C3887) * C13857 +
            (C54790 * C13127 - C139731 * C13132) * C14017 +
            (C54790 * C13619 - C139731 * C13623) * C13858) *
               C139873) *
              C139809 * C139792 * C98 +
          (((C139731 * C118 - C54790 * C110) * C14015 +
            (C139731 * C575 - C54790 * C569) * C13856 +
            (C139731 * C1574 - C54790 * C1568) * C14016 +
            (C139731 * C2081 - C54790 * C2076) * C13857 +
            (C139731 * C5281 - C54790 * C5275) * C14017 +
            (C139731 * C5627 - C54790 * C5623) * C13858) *
               C47134 +
           ((C139731 * C817 - C54790 * C811) * C14015 +
            (C139731 * C1324 - C54790 * C1319) * C13856 +
            (C139731 * C3446 - C54790 * C3440) * C14016 +
            (C139731 * C3888 - C54790 * C3884) * C13857 +
            (C139731 * C14660 - C54790 * C14659) * C14017 +
            (C139731 * C15300 - C54790 * C15299) * C13858) *
               C139873) *
              C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eezy[63] +=
        (-std::pow(Pi, 2.5) *
         (((C54786 * C183 - C54842 * C108 + C54787 * C896 - C54843 * C813 +
            C54788 * C2974 - C54844 * C2908 + C54789 * C6792 - C54845 * C6627) *
               C265 +
           (C54786 * C629 - C54842 * C567 + C54787 * C1393 - C54843 * C1317 +
            C54788 * C3314 - C54844 * C3256 + C54789 * C7521 - C54845 * C7401) *
               C139835) *
              C139731 * C139809 * C139792 * C97 +
          ((C54842 * C109 - C54786 * C184 + C54843 * C812 - C54787 * C897 +
            C54844 * C2909 - C54788 * C2975 + C54845 * C6626 - C54789 * C6793) *
               C265 +
           (C54842 * C568 - C54786 * C630 + C54843 * C1318 - C54787 * C1394 +
            C54844 * C3257 - C54788 * C3315 + C54845 * C7402 - C54789 * C7522) *
               C139835) *
              C139731 * C139809 * C139792 * C98 +
          ((C54786 * C185 - C54842 * C110 + C54787 * C898 - C54843 * C811 +
            C54788 * C2976 - C54844 * C2910 + C54789 * C6794 - C54845 * C6628) *
               C265 +
           (C54786 * C631 - C54842 * C569 + C54787 * C1395 - C54843 * C1319 +
            C54788 * C3316 - C54844 * C3258 + C54789 * C7523 - C54845 * C7403) *
               C139835) *
              C139731 * C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47134 * C183 - C47216 * C108 + C139873 * C896 - C47217 * C813) *
                C265 +
            (C47134 * C629 - C47216 * C567 + C139873 * C1393 - C47217 * C1317) *
                C139835) *
               C47131 +
           ((C47219 - C47220 + C47221 - C47222) * C265 +
            (C47745 - C47746 + C47747 - C47748) * C139835) *
               C47132 +
           C47762 * C47133) *
              C139809 * C139792 * C97 +
          (((C47220 - C47219 + C47222 - C47221) * C265 +
            (C47746 - C47745 + C47748 - C47747) * C139835) *
               C47131 +
           ((C47228 - C47227 + C47230 - C47229) * C265 +
            (C47751 - C47750 + C47753 - C47752) * C139835) *
               C47132 +
           ((C47235 - C47236 + C47237 - C47238) * C265 +
            (C47754 - C47755 + C47756 - C47757) * C139835) *
               C47133) *
              C139809 * C139792 * C98 +
          (C47762 * C47131 +
           ((C47236 - C47235 + C47238 - C47237) * C265 +
            (C47755 - C47754 + C47757 - C47756) * C139835) *
               C47132 +
           ((C47134 * C187 - C47216 * C112 + C139873 * C900 - C47217 * C814) *
                C265 +
            (C47134 * C633 - C47216 * C571 + C139873 * C1397 - C47217 * C1321) *
                C139835) *
               C47133) *
              C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C47134 * C183 - C47216 * C108 + C139873 * C896 - C47217 * C813) *
               C14015 +
           (C47134 * C629 - C47216 * C567 + C139873 * C1393 - C47217 * C1317) *
               C13856 +
           (C47134 * C1653 - C47216 * C1570 + C139873 * C3520 -
            C47217 * C3438) *
               C14016 +
           (C47134 * C2150 - C47216 * C2074 + C139873 * C3956 -
            C47217 * C3882) *
               C13857 +
           (C47134 * C5339 - C47216 * C5273 + C139873 * C13216 -
            C47217 * C13126) *
               C14017 +
           (C47134 * C5679 - C47216 * C5621 + C139873 * C13700 -
            C47217 * C13618) *
               C13858) *
              C139731 * C139809 * C139792 * C97 +
          ((C47220 - C47219 + C47222 - C47221) * C14015 +
           (C47746 - C47745 + C47748 - C47747) * C13856 +
           (C49056 - C49057 + C49058 - C49059) * C14016 +
           (C49688 - C49689 + C49690 - C49691) * C13857 +
           (C47216 * C5274 - C47134 * C5340 + C47217 * C13127 -
            C139873 * C13218) *
               C14017 +
           (C47216 * C5622 - C47134 * C5680 + C47217 * C13619 -
            C139873 * C13702) *
               C13858) *
              C139731 * C139809 * C139792 * C98 +
          (C47247 * C14015 + C47760 * C13856 +
           (C49065 - C49064 + C49067 - C49066) * C14016 +
           (C49693 - C49692 + C49695 - C49694) * C13857 +
           (C47134 * C5341 - C47216 * C5275 + C139873 * C14761 -
            C47217 * C14659) *
               C14017 +
           (C47134 * C5681 - C47216 * C5623 + C139873 * C15399 -
            C47217 * C15299) *
               C13858) *
              C139731 * C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eezz[63] +=
        (-std::pow(Pi, 2.5) *
         (((C265 * C266 - C701 * C108 - C265 * C567 + C139835 * C702) * C54786 +
           C7652 * C54787 + C7653 * C54788 + C10296 * C54789) *
              C139731 * C139809 * C139792 * C97 -
          (C7654 * C54789 + C6525 * C54788 + C1496 * C54787 + C733 * C54786) *
              C139731 * C139809 * C139792 * C98 +
          (C734 * C54786 + C1495 * C54787 + C6526 * C54788 +
           (C265 * C6910 - C701 * C6628 - C265 * C7403 + C139835 * C7630) *
               C54789) *
              C139731 * C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C265 * C266 - C701 * C108 - C265 * C567 + C139835 * C702) *
                C47134 +
            C7652 * C139873) *
               C47131 +
           (C47837 + C47838) * C47132 + C47843 * C47133) *
              C139809 * C139792 * C97 -
          ((C47841 + C47842) * C47133 + (C47840 + C47839) * C47132 +
           (C47838 + C47837) * C47131) *
              C139809 * C139792 * C98 +
          (C47843 * C47131 + (C47842 + C47841) * C47132 +
           (C736 * C47134 +
            (C265 * C988 - C701 * C814 - C265 * C1321 + C139835 * C1474) *
                C139873) *
               C47133) *
              C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C14015 * C266 - C14516 * C108 - C14015 * C567 + C13856 * C702 +
            C14016 * C1741 - C14517 * C1570 - C14016 * C2074 + C13857 * C2230 +
            C14017 * C5397 - C14518 * C5273 - C14017 * C5621 + C13858 * C5733) *
               C47134 +
           (C14015 * C984 - C14516 * C813 - C14015 * C1317 + C13856 * C1473 +
            C14016 * C3594 - C14517 * C3438 - C14016 * C3882 + C13857 * C4026 +
            C14017 * C13298 - C14518 * C13126 - C14017 * C13618 +
            C13858 * C13778) *
               C139873) *
              C139731 * C139809 * C139792 * C97 -
          ((C15522 + C15523 + C15524) * C139873 +
           (C14558 + C14557 + C14556) * C47134) *
              C139731 * C139809 * C139792 * C98 +
          ((C14561 + C14560 + C14559) * C47134 +
           (C14015 * C986 - C14516 * C811 - C14015 * C1319 + C13856 * C1471 +
            C14016 * C3596 - C14517 * C3440 - C14016 * C3884 + C13857 * C4028 +
            C14017 * C14869 - C14518 * C14659 - C14017 * C15299 +
            C13858 * C15502) *
               C139873) *
              C139731 * C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eexx[64] +=
        (-std::pow(Pi, 2.5) *
         ((((C54790 * C114 - C54791 * C108 - C54790 * C115 + C139731 * C126) *
                C139835 * C54786 +
            C55309 * C54787 + C55310 * C54788 + C55311 * C54789) *
               C139809 * C806 -
           ((C54790 * C9611 - C54791 * C9609 - C54790 * C9612 +
             C139731 * C9615) *
                C139835 * C54789 +
            C55311 * C54788 + C55310 * C54787 + C55309 * C54786) *
               C139809 * C140000) *
              C808 +
          ((C55312 * C54786 + C55313 * C54787 + C55314 * C54788 +
            (C54790 * C9613 - C54791 * C9610 - C54790 * C9614 +
             C139731 * C9616) *
                C139835 * C54789) *
               C139809 * C140000 -
           (C55314 * C54789 + C55313 * C54788 + C55312 * C54787 +
            (C54790 * C116 - C54791 * C109 - C54790 * C117 + C139731 * C127) *
                C139835 * C54786) *
               C139809 * C806) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47136 * C114 - C47137 * C108 - C47136 * C115 + C47131 * C126 +
             C47138 * C116 - C47139 * C109 - C47138 * C117 + C47132 * C127 +
             C47140 * C118 - C47141 * C110 - C47140 * C119 + C47133 * C128) *
                C139835 * C47134 +
            (C47978 + C47979 + C47980) * C139835 * C139873) *
               C139809 * C806 -
           ((C47140 * C2916 - C47141 * C2910 - C47140 * C2917 + C47133 * C2922 +
             C47138 * C2914 - C47139 * C2909 - C47138 * C2915 + C47132 * C2921 +
             C47136 * C2912 - C47137 * C2908 - C47136 * C2913 +
             C47131 * C2920) *
                C139835 * C139873 +
            (C47980 + C47979 + C47978) * C139835 * C47134) *
               C139809 * C140000) *
              C808 +
          (((C47981 + C47982 + C47983) * C139835 * C47134 +
            (C47136 * C2914 - C47137 * C2909 - C47136 * C2915 + C47131 * C2921 +
             C47138 * C2916 - C47139 * C2910 - C47138 * C2917 + C47132 * C2922 +
             C47140 * C2918 - C47141 * C2911 - C47140 * C2919 +
             C47133 * C2923) *
                C139835 * C139873) *
               C139809 * C140000 -
           ((C47983 + C47982 + C47981) * C139835 * C139873 +
            (C47140 * C120 - C47141 * C111 - C47140 * C121 + C47133 * C129 +
             C47138 * C118 - C47139 * C110 - C47138 * C119 + C47132 * C128 +
             C47136 * C116 - C47137 * C109 - C47136 * C117 + C47131 * C127) *
                C139835 * C47134) *
               C139809 * C806) *
              C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C54790 * C114 - C54791 * C108 - C54790 * C115 + C139731 * C126) *
                 C13856 +
             (C54790 * C1578 - C54791 * C1570 - C54790 * C1579 +
              C139731 * C1585) *
                 C13857 +
             (C54790 * C5277 - C54791 * C5273 - C54790 * C5278 +
              C139731 * C5285) *
                 C13858) *
                C47134 +
            (C60664 + C60665 + C60688) * C139873) *
               C139809 * C806 -
           (((C54790 * C13134 - C54791 * C13128 - C54790 * C13135 +
              C139731 * C13140) *
                 C13858 +
             C57670 * C13857 + C55304 * C13856) *
                C139873 +
            (C60688 + C60665 + C60664) * C47134) *
               C139809 * C140000) *
              C808 +
          (((C60670 + C60689 + C60690) * C47134 +
            (C55307 * C13856 +
             (C54790 * C7756 - C54791 * C7753 - C54790 * C7757 +
              C139731 * C7762) *
                 C13857 +
             (C54790 * C13136 - C54791 * C13129 - C54790 * C13137 +
              C139731 * C13141) *
                 C13858) *
                C139873) *
               C139809 * C140000 -
           ((C60690 + C60689 + C60670) * C139873 +
            ((C54790 * C5279 - C54791 * C5274 - C54790 * C5280 +
              C139731 * C5286) *
                 C13858 +
             (C54790 * C1576 - C54791 * C1569 - C54790 * C1577 +
              C139731 * C1584) *
                 C13857 +
             (C54790 * C116 - C54791 * C109 - C54790 * C117 + C139731 * C127) *
                 C13856) *
                C47134) *
               C139809 * C806) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eexy[64] +=
        (-std::pow(Pi, 2.5) *
         ((((C54786 * C183 - C54842 * C108 + C54787 * C896 - C54843 * C813 +
             C54788 * C2974 - C54844 * C2908 + C54789 * C6792 -
             C54845 * C6627) *
                C54790 +
            (C54786 * C189 - C54842 * C115 + C54787 * C901 - C54843 * C822 +
             C54788 * C2978 - C54844 * C2913 + C54789 * C6795 -
             C54845 * C6632) *
                C139731) *
               C139835 * C139809 * C806 +
           ((C54842 * C813 - C54786 * C896 + C54843 * C2908 - C54787 * C2974 +
             C54844 * C6627 - C54788 * C6792 + C54845 * C9609 -
             C54789 * C9707) *
                C54790 +
            (C54842 * C822 - C54786 * C901 + C54843 * C2913 - C54787 * C2978 +
             C54844 * C6632 - C54788 * C6795 + C54845 * C9612 -
             C54789 * C9709) *
                C139731) *
               C139835 * C139809 * C140000) *
              C808 +
          (((C54842 * C109 - C54786 * C184 + C54843 * C812 - C54787 * C897 +
             C54844 * C2909 - C54788 * C2975 + C54845 * C6626 -
             C54789 * C6793) *
                C54790 +
            (C54842 * C117 - C54786 * C190 + C54843 * C820 - C54787 * C902 +
             C54844 * C2915 - C54788 * C2979 + C54845 * C6630 -
             C54789 * C6796) *
                C139731) *
               C139835 * C139809 * C806 +
           ((C54786 * C897 - C54842 * C812 + C54787 * C2975 - C54843 * C2909 +
             C54788 * C6793 - C54844 * C6626 + C54789 * C9708 -
             C54845 * C9610) *
                C54790 +
            (C54786 * C902 - C54842 * C820 + C54787 * C2979 - C54843 * C2915 +
             C54788 * C6796 - C54844 * C6630 + C54789 * C9710 -
             C54845 * C9614) *
                C139731) *
               C139835 * C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47134 * C183 - C47216 * C108 + C139873 * C896 - C47217 * C813) *
                C47136 +
            (C47134 * C189 - C47216 * C115 + C139873 * C901 - C47217 * C822) *
                C47131 +
            (C47219 - C47220 + C47221 - C47222) * C47138 +
            (C47223 - C47224 + C47225 - C47226) * C47132 + C47247 * C47140 +
            C47248 * C47133) *
               C139835 * C139809 * C806 +
           ((C47216 * C813 - C47134 * C896 + C47217 * C2908 - C139873 * C2974) *
                C47136 +
            (C47216 * C822 - C47134 * C901 + C47217 * C2913 - C139873 * C2978) *
                C47131 +
            (C48082 - C48083 + C48084 - C48085) * C47138 +
            (C48086 - C48087 + C48088 - C48089) * C47132 +
            (C48090 - C48091 + C48092 - C48093) * C47140 +
            (C48094 - C48095 + C48096 - C48097) * C47133) *
               C139835 * C139809 * C140000) *
              C808 +
          (((C47220 - C47219 + C47222 - C47221) * C47136 +
            (C47224 - C47223 + C47226 - C47225) * C47131 +
            (C47228 - C47227 + C47230 - C47229) * C47138 +
            (C47232 - C47231 + C47234 - C47233) * C47132 +
            (C47235 - C47236 + C47237 - C47238) * C47140 +
            (C47239 - C47240 + C47241 - C47242) * C47133) *
               C139835 * C139809 * C806 +
           ((C48083 - C48082 + C48085 - C48084) * C47136 +
            (C48087 - C48086 + C48089 - C48088) * C47131 +
            (C48091 - C48090 + C48093 - C48092) * C47138 +
            (C48095 - C48094 + C48097 - C48096) * C47132 +
            (C47134 * C899 - C47216 * C810 + C139873 * C2977 - C47217 * C2911) *
                C47140 +
            (C47134 * C904 - C47216 * C816 + C139873 * C2981 - C47217 * C2919) *
                C47133) *
               C139835 * C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C47134 * C183 - C47216 * C108 + C139873 * C896 - C47217 * C813) *
                 C54790 +
             (C47134 * C189 - C47216 * C115 + C139873 * C901 - C47217 * C822) *
                 C139731) *
                C13856 +
            ((C47134 * C1653 - C47216 * C1570 + C139873 * C3520 -
              C47217 * C3438) *
                 C54790 +
             (C47134 * C1658 - C47216 * C1579 + C139873 * C3524 -
              C47217 * C3443) *
                 C139731) *
                C13857 +
            ((C47134 * C5339 - C47216 * C5273 + C139873 * C13216 -
              C47217 * C13126) *
                 C54790 +
             (C47134 * C5343 - C47216 * C5278 + C139873 * C13220 -
              C47217 * C13131) *
                 C139731) *
                C13858) *
               C139809 * C806 +
           (((C47216 * C813 - C47134 * C896 + C47217 * C2908 -
              C139873 * C2974) *
                 C54790 +
             (C47216 * C822 - C47134 * C901 + C47217 * C2913 -
              C139873 * C2978) *
                 C139731) *
                C13856 +
            ((C47216 * C3438 - C47134 * C3520 + C47217 * C7754 -
              C139873 * C7863) *
                 C54790 +
             (C47216 * C3443 - C47134 * C3524 + C47217 * C7759 -
              C139873 * C7866) *
                 C139731) *
                C13857 +
            ((C47216 * C13126 - C47134 * C13216 + C47217 * C13128 -
              C139873 * C13217) *
                 C54790 +
             (C47216 * C13131 - C47134 * C13220 + C47217 * C13135 -
              C139873 * C13221) *
                 C139731) *
                C13858) *
               C139809 * C140000) *
              C808 +
          ((((C47220 - C47219 + C47222 - C47221) * C54790 +
             (C47224 - C47223 + C47226 - C47225) * C139731) *
                C13856 +
            ((C49056 - C49057 + C49058 - C49059) * C54790 +
             (C49060 - C49061 + C49062 - C49063) * C139731) *
                C13857 +
            ((C47216 * C5274 - C47134 * C5340 + C47217 * C13127 -
              C139873 * C13218) *
                 C54790 +
             (C47216 * C5280 - C47134 * C5344 + C47217 * C13133 -
              C139873 * C13222) *
                 C139731) *
                C13858) *
               C139809 * C806 +
           (((C48083 - C48082 + C48085 - C48084) * C54790 +
             (C48087 - C48086 + C48089 - C48088) * C139731) *
                C13856 +
            ((C47134 * C3521 - C47216 * C3439 + C139873 * C7864 -
              C47217 * C7753) *
                 C54790 +
             (C47134 * C3525 - C47216 * C3445 + C139873 * C7867 -
              C47217 * C7757) *
                 C139731) *
                C13857 +
            ((C47134 * C13218 - C47216 * C13127 + C139873 * C13219 -
              C47217 * C13129) *
                 C54790 +
             (C47134 * C13222 - C47216 * C13133 + C139873 * C13223 -
              C47217 * C13137) *
                 C139731) *
                C13858) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eexz[64] +=
        (-std::pow(Pi, 2.5) *
         (((((C139835 * C266 - C265 * C108) * C54790 +
             (C139835 * C272 - C265 * C115) * C139731) *
                C54786 +
            ((C6915 - C6916) * C54790 + (C6917 - C6918) * C139731) * C54787 +
            (C9790 * C54790 + C9791 * C139731) * C54788 +
            ((C9795 - C9794) * C54790 + (C9797 - C9796) * C139731) * C54789) *
               C139809 * C806 +
           (((C6916 - C6915) * C54790 + (C6918 - C6917) * C139731) * C54786 +
            ((C6922 - C6921) * C54790 + (C6924 - C6923) * C139731) * C54787 +
            ((C9794 - C9795) * C54790 + (C9796 - C9797) * C139731) * C54788 +
            ((C265 * C9609 - C139835 * C9785) * C54790 +
             (C265 * C9612 - C139835 * C9787) * C139731) *
                C54789) *
               C139809 * C140000) *
              C808 +
          ((((C280 - C279) * C54790 + (C282 - C281) * C139731) * C54786 +
            (C6927 * C54790 + C6928 * C139731) * C54787 +
            (C6929 * C54790 + C6930 * C139731) * C54788 +
            ((C6931 - C6932) * C54790 + (C6933 - C6934) * C139731) * C54789) *
               C139809 * C806 +
           ((C6919 * C54790 + C6920 * C139731) * C54786 +
            (C6925 * C54790 + C6926 * C139731) * C54787 +
            ((C6932 - C6931) * C54790 + (C6934 - C6933) * C139731) * C54788 +
            ((C139835 * C9786 - C265 * C9610) * C54790 +
             (C139835 * C9788 - C265 * C9614) * C139731) *
                C54789) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C139835 * C266 - C265 * C108) * C47136 +
             (C139835 * C272 - C265 * C115) * C47131 + (C279 - C280) * C47138 +
             (C281 - C282) * C47132 + C295 * C47140 + C296 * C47133) *
                C47134 +
            ((C6915 - C6916) * C47136 + (C6917 - C6918) * C47131 +
             C6919 * C47138 + C6920 * C47132 + C21967 * C47140 +
             C21968 * C47133) *
                C139873) *
               C139809 * C806 +
           (((C6916 - C6915) * C47136 + (C6918 - C6917) * C47131 +
             C6927 * C47138 + C6928 * C47132 + C22843 * C47140 +
             C22844 * C47133) *
                C47134 +
            ((C6922 - C6921) * C47136 + (C6924 - C6923) * C47131 +
             C6929 * C47138 + C6930 * C47132 + (C6000 - C6001) * C47140 +
             (C6002 - C6003) * C47133) *
                C139873) *
               C139809 * C140000) *
              C808 +
          ((((C280 - C279) * C47136 + (C282 - C281) * C47131 +
             (C284 - C283) * C47138 + (C286 - C285) * C47132 +
             (C288 - C287) * C47140 + (C290 - C289) * C47133) *
                C47134 +
            (C6927 * C47136 + C6928 * C47131 + C22843 * C47138 +
             C22844 * C47132 + (C1003 - C1004) * C47140 +
             (C1005 - C1006) * C47133) *
                C139873) *
               C139809 * C806 +
           ((C6919 * C47136 + C6920 * C47131 + C21967 * C47138 +
             C21968 * C47132 + (C1004 - C1003) * C47140 +
             (C1006 - C1005) * C47133) *
                C47134 +
            (C6925 * C47136 + C6926 * C47131 + (C6001 - C6000) * C47138 +
             (C6003 - C6002) * C47132 +
             (C139835 * C3035 - C265 * C2911) * C47140 +
             (C139835 * C3039 - C265 * C2919) * C47133) *
                C139873) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C13856 * C266 - C14015 * C108 + C13857 * C1741 - C14016 * C1570 +
              C13858 * C5397 - C14017 * C5273) *
                 C54790 +
             (C13856 * C272 - C14015 * C115 + C13857 * C1746 - C14016 * C1579 +
              C13858 * C5401 - C14017 * C5278) *
                 C139731) *
                C47134 +
            ((C60887 - C60888 + C60889 - C60890 + C60891 - C60892) * C54790 +
             (C60893 - C60894 + C60895 - C60896 + C60897 - C60898) * C139731) *
                C139873) *
               C139809 * C806 +
           (((C60888 - C60887 + C60890 - C60889 + C60892 - C60891) * C54790 +
             (C60894 - C60893 + C60896 - C60895 + C60898 - C60897) * C139731) *
                C47134 +
            ((C14015 * C2908 - C13856 * C3032 + C14016 * C7754 -
              C13857 * C7979 + C14017 * C13128 - C13858 * C13300) *
                 C54790 +
             (C14015 * C2913 - C13856 * C3036 + C14016 * C7759 -
              C13857 * C7982 + C14017 * C13135 - C13858 * C13304) *
                 C139731) *
                C139873) *
               C139809 * C140000) *
              C808 +
          ((((C14020 - C14019 + C14022 - C14021 + C14024 - C14023) * C54790 +
             (C14026 - C14025 + C14028 - C14027 + C14030 - C14029) * C139731) *
                C47134 +
            ((C14872 - C14873 + C14874 - C14875 + C14876 - C14877) * C54790 +
             (C14878 - C14879 + C14880 - C14881 + C14882 - C14883) * C139731) *
                C139873) *
               C139809 * C806 +
           (((C14873 - C14872 + C14875 - C14874 + C14877 - C14876) * C54790 +
             (C14879 - C14878 + C14881 - C14880 + C14883 - C14882) * C139731) *
                C47134 +
            ((C13856 * C3033 - C14015 * C2909 + C13857 * C7980 -
              C14016 * C7753 + C13858 * C13301 - C14017 * C13129) *
                 C54790 +
             (C13856 * C3037 - C14015 * C2915 + C13857 * C7983 -
              C14016 * C7757 + C13858 * C13305 - C14017 * C13137) *
                 C139731) *
                C139873) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[64] +=
        (-std::pow(Pi, 2.5) *
         ((((C139731 * C114 - C54790 * C108) * C54842 +
            (C139731 * C354 - C54790 * C348) * C54786 +
            (C55513 - C55514) * C54843 + (C55515 - C55516) * C54787 +
            (C55517 - C55518) * C54844 + (C55519 - C55520) * C54788 +
            (C55521 - C55522) * C54845 + (C55523 - C55524) * C54789) *
               C139835 * C139809 * C806 +
           ((C55514 - C55513) * C54842 + (C55516 - C55515) * C54786 +
            (C55518 - C55517) * C54843 + (C55520 - C55519) * C54787 +
            (C55522 - C55521) * C54844 + (C55524 - C55523) * C54788 +
            (C54790 * C9609 - C139731 * C9611) * C54845 +
            (C54790 * C9876 - C139731 * C9878) * C54789) *
               C139835 * C139809 * C140000) *
              C808 +
          (((C54790 * C109 - C139731 * C116) * C54842 +
            (C54790 * C349 - C139731 * C355) * C54786 +
            (C55525 - C55526) * C54843 + (C55527 - C55528) * C54787 +
            (C55529 - C55530) * C54844 + (C55531 - C55532) * C54788 +
            (C55533 - C55534) * C54845 + (C55535 - C55536) * C54789) *
               C139835 * C139809 * C806 +
           ((C55526 - C55525) * C54842 + (C55528 - C55527) * C54786 +
            (C55530 - C55529) * C54843 + (C55532 - C55531) * C54787 +
            (C55534 - C55533) * C54844 + (C55536 - C55535) * C54788 +
            (C139731 * C9613 - C54790 * C9610) * C54845 +
            (C139731 * C9879 - C54790 * C9877) * C54789) *
               C139835 * C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47131 * C114 - C47136 * C108 + C47132 * C116 - C47138 * C109 +
             C47133 * C118 - C47140 * C110) *
                C47216 +
            (C47131 * C354 - C47136 * C348 + C47132 * C355 - C47138 * C349 +
             C47133 * C356 - C47140 * C350) *
                C47134 +
            (C48294 - C48295 + C48296 - C48297 + C48298 - C48299) * C47217 +
            (C48300 - C48301 + C48302 - C48303 + C48304 - C48305) * C139873) *
               C139835 * C139809 * C806 +
           ((C48295 - C48294 + C48297 - C48296 + C48299 - C48298) * C47216 +
            (C48301 - C48300 + C48303 - C48302 + C48305 - C48304) * C47134 +
            (C47136 * C2908 - C47131 * C2912 + C47138 * C2909 - C47132 * C2914 +
             C47140 * C2910 - C47133 * C2916) *
                C47217 +
            (C47136 * C3090 - C47131 * C3094 + C47138 * C3091 - C47132 * C3095 +
             C47140 * C3092 - C47133 * C3096) *
                C139873) *
               C139835 * C139809 * C140000) *
              C808 +
          (((C47136 * C109 - C47131 * C116 + C47138 * C110 - C47132 * C118 +
             C47140 * C111 - C47133 * C120) *
                C47216 +
            (C47136 * C349 - C47131 * C355 + C47138 * C350 - C47132 * C356 +
             C47140 * C351 - C47133 * C357) *
                C47134 +
            (C48306 - C48307 + C48308 - C48309 + C48310 - C48311) * C47217 +
            (C48312 - C48313 + C48314 - C48315 + C48316 - C48317) * C139873) *
               C139835 * C139809 * C806 +
           ((C48307 - C48306 + C48309 - C48308 + C48311 - C48310) * C47216 +
            (C48313 - C48312 + C48315 - C48314 + C48317 - C48316) * C47134 +
            (C47131 * C2914 - C47136 * C2909 + C47132 * C2916 - C47138 * C2910 +
             C47133 * C2918 - C47140 * C2911) *
                C47217 +
            (C47131 * C3095 - C47136 * C3091 + C47132 * C3096 - C47138 * C3092 +
             C47133 * C3097 - C47140 * C3093) *
                C139873) *
               C139835 * C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C139731 * C114 - C54790 * C108) * C47216 +
             (C139731 * C354 - C54790 * C348) * C47134 +
             (C55513 - C55514) * C47217 + (C55515 - C55516) * C139873) *
                C13856 +
            ((C139731 * C1578 - C54790 * C1570) * C47216 +
             (C139731 * C1834 - C54790 * C1829) * C47134 +
             (C57884 - C57883) * C47217 + (C57886 - C57885) * C139873) *
                C13857 +
            ((C139731 * C5277 - C54790 * C5273) * C47216 +
             (C139731 * C5459 - C54790 * C5455) * C47134 +
             (C60997 - C60998) * C47217 + (C60999 - C61000) * C139873) *
                C13858) *
               C139809 * C806 +
           (((C55514 - C55513) * C47216 + (C55516 - C55515) * C47134 +
             (C55518 - C55517) * C47217 + (C55520 - C55519) * C139873) *
                C13856 +
            ((C57883 - C57884) * C47216 + (C57885 - C57886) * C47134 +
             (C57887 - C57888) * C47217 + (C57889 - C57890) * C139873) *
                C13857 +
            ((C60998 - C60997) * C47216 + (C61000 - C60999) * C47134 +
             (C54790 * C13128 - C139731 * C13134) * C47217 +
             (C54790 * C13382 - C139731 * C13386) * C139873) *
                C13858) *
               C139809 * C140000) *
              C808 +
          ((((C54790 * C109 - C139731 * C116) * C47216 +
             (C54790 * C349 - C139731 * C355) * C47134 +
             (C55525 - C55526) * C47217 + (C55527 - C55528) * C139873) *
                C13856 +
            ((C54790 * C1569 - C139731 * C1576) * C47216 +
             (C54790 * C1830 - C139731 * C1835) * C47134 +
             (C61001 - C61002) * C47217 + (C61003 - C61004) * C139873) *
                C13857 +
            ((C54790 * C5274 - C139731 * C5279) * C47216 +
             (C54790 * C5456 - C139731 * C5460) * C47134 +
             (C61005 - C61006) * C47217 + (C61007 - C61008) * C139873) *
                C13858) *
               C139809 * C806 +
           (((C55526 - C55525) * C47216 + (C55528 - C55527) * C47134 +
             (C55530 - C55529) * C47217 + (C55532 - C55531) * C139873) *
                C13856 +
            ((C61002 - C61001) * C47216 + (C61004 - C61003) * C47134 +
             (C139731 * C7756 - C54790 * C7753) * C47217 +
             (C139731 * C8095 - C54790 * C8092) * C139873) *
                C13857 +
            ((C61006 - C61005) * C47216 + (C61008 - C61007) * C47134 +
             (C139731 * C13136 - C54790 * C13129) * C47217 +
             (C139731 * C13387 - C54790 * C13383) * C139873) *
                C13858) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[64] +=
        (-std::pow(Pi, 2.5) *
         (((C54842 * C183 - C54996 * C108 - C54842 * C348 + C54786 * C411 +
            C54843 * C896 - C54997 * C813 - C54843 * C1072 + C54787 * C1151 +
            C54844 * C2974 - C54998 * C2908 - C54844 * C3090 + C54788 * C3148 +
            C54845 * C6792 - C54999 * C6627 - C54845 * C7032 + C54789 * C7169) *
               C139731 * C139835 * C139809 * C806 -
           (C54845 * C9707 - C54999 * C9609 - C54845 * C9876 + C54789 * C9968 +
            C54844 * C6792 - C54998 * C6627 - C54844 * C7032 + C54788 * C7169 +
            C54843 * C2974 - C54997 * C2908 - C54843 * C3090 + C54787 * C3148 +
            C54842 * C896 - C54996 * C813 - C54842 * C1072 + C54786 * C1151) *
               C139731 * C139835 * C139809 * C140000) *
              C808 +
          ((C54842 * C897 - C54996 * C812 - C54842 * C1073 + C54786 * C1150 +
            C54843 * C2975 - C54997 * C2909 - C54843 * C3091 + C54787 * C3149 +
            C54844 * C6793 - C54998 * C6626 - C54844 * C7033 + C54788 * C7168 +
            C54845 * C9708 - C54999 * C9610 - C54845 * C9877 + C54789 * C9969) *
               C139731 * C139835 * C139809 * C140000 -
           (C54845 * C6793 - C54999 * C6626 - C54845 * C7033 + C54789 * C7168 +
            C54844 * C2975 - C54998 * C2909 - C54844 * C3091 + C54788 * C3149 +
            C54843 * C897 - C54997 * C812 - C54843 * C1073 + C54787 * C1150 +
            C54842 * C184 - C54996 * C109 - C54842 * C349 + C54786 * C412) *
               C139731 * C139835 * C139809 * C806) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47216 * C183 - C47470 * C108 - C47216 * C348 + C47134 * C411 +
             C47217 * C896 - C47471 * C813 - C47217 * C1072 + C139873 * C1151) *
                C47131 +
            (C47509 + C47510) * C47132 + C47515 * C47133) *
               C139835 * C139809 * C806 -
           ((C48440 + C48441) * C47133 + (C48442 + C48443) * C47132 +
            (C47217 * C2974 - C47471 * C2908 - C47217 * C3090 +
             C139873 * C3148 + C47216 * C896 - C47470 * C813 - C47216 * C1072 +
             C47134 * C1151) *
                C47131) *
               C139835 * C139809 * C140000) *
              C808 +
          (((C48443 + C48442) * C47131 + (C48441 + C48440) * C47132 +
            (C47216 * C899 - C47470 * C810 - C47216 * C1075 + C47134 * C1148 +
             C47217 * C2977 - C47471 * C2911 - C47217 * C3093 +
             C139873 * C3151) *
                C47133) *
               C139835 * C139809 * C140000 -
           ((C47513 + C47514) * C47133 + (C47512 + C47511) * C47132 +
            (C47510 + C47509) * C47131) *
               C139835 * C139809 * C806) *
              C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47216 * C183 - C47470 * C108 - C47216 * C348 + C47134 * C411 +
             C47217 * C896 - C47471 * C813 - C47217 * C1072 + C139873 * C1151) *
                C139731 * C13856 +
            (C47216 * C1653 - C47470 * C1570 - C47216 * C1829 + C47134 * C1908 +
             C47217 * C3520 - C47471 * C3438 - C47217 * C3668 +
             C139873 * C3742) *
                C139731 * C13857 +
            (C47216 * C5339 - C47470 * C5273 - C47216 * C5455 + C47134 * C5513 +
             C47217 * C13216 - C47471 * C13126 - C47217 * C13380 +
             C139873 * C13462) *
                C139731 * C13858) *
               C139809 * C806 -
           ((C47217 * C13217 - C47471 * C13128 - C47217 * C13382 +
             C139873 * C13463 + C47216 * C13216 - C47470 * C13126 -
             C47216 * C13380 + C47134 * C13462) *
                C139731 * C13858 +
            (C47217 * C7863 - C47471 * C7754 - C47217 * C8091 +
             C139873 * C8196 + C47216 * C3520 - C47470 * C3438 -
             C47216 * C3668 + C47134 * C3742) *
                C139731 * C13857 +
            (C47217 * C2974 - C47471 * C2908 - C47217 * C3090 +
             C139873 * C3148 + C47216 * C896 - C47470 * C813 - C47216 * C1072 +
             C47134 * C1151) *
                C139731 * C13856) *
               C139809 * C140000) *
              C808 +
          (((C48443 + C48442) * C139731 * C13856 +
            (C47216 * C3521 - C47470 * C3439 - C47216 * C3669 + C47134 * C3743 +
             C47217 * C7864 - C47471 * C7753 - C47217 * C8092 +
             C139873 * C8195) *
                C139731 * C13857 +
            (C47216 * C13218 - C47470 * C13127 - C47216 * C13381 +
             C47134 * C13464 + C47217 * C13219 - C47471 * C13129 -
             C47217 * C13383 + C139873 * C13465) *
                C139731 * C13858) *
               C139809 * C140000 -
           ((C47217 * C13218 - C47471 * C13127 - C47217 * C13381 +
             C139873 * C13464 + C47216 * C5340 - C47470 * C5274 -
             C47216 * C5456 + C47134 * C5514) *
                C139731 * C13858 +
            (C49392 + C49393) * C139731 * C13857 +
            (C47510 + C47509) * C139731 * C13856) *
               C139809 * C806) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[64] +=
        (-std::pow(Pi, 2.5) *
         ((((C139835 * C266 - C265 * C108) * C54842 +
            (C139835 * C495 - C265 * C348) * C54786 + (C6915 - C6916) * C54843 +
            (C7294 - C7295) * C54787 + C9790 * C54844 + C10047 * C54788 +
            (C9795 - C9794) * C54845 + (C10049 - C10048) * C54789) *
               C139731 * C139809 * C806 +
           ((C6916 - C6915) * C54842 + (C7295 - C7294) * C54786 +
            (C6922 - C6921) * C54843 + (C7297 - C7296) * C54787 +
            (C9794 - C9795) * C54844 + (C10048 - C10049) * C54788 +
            (C265 * C9609 - C139835 * C9785) * C54845 +
            (C265 * C9876 - C139835 * C10044) * C54789) *
               C139731 * C139809 * C140000) *
              C808 +
          (((C280 - C279) * C54842 + (C503 - C502) * C54786 + C6927 * C54843 +
            C7300 * C54787 + C6929 * C54844 + C7301 * C54788 +
            (C6931 - C6932) * C54845 + (C7302 - C7303) * C54789) *
               C139731 * C139809 * C806 +
           (C6919 * C54842 + C7298 * C54786 + C6925 * C54843 + C7299 * C54787 +
            (C6932 - C6931) * C54844 + (C7303 - C7302) * C54788 +
            (C139835 * C9786 - C265 * C9610) * C54845 +
            (C139835 * C10045 - C265 * C9877) * C54789) *
               C139731 * C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C139835 * C266 - C265 * C108) * C47216 +
             (C139835 * C495 - C265 * C348) * C47134 +
             (C6915 - C6916) * C47217 + (C7294 - C7295) * C139873) *
                C47131 +
            ((C279 - C280) * C47216 + (C502 - C503) * C47134 + C6919 * C47217 +
             C7298 * C139873) *
                C47132 +
            C47596 * C47133) *
               C139809 * C806 +
           (((C6916 - C6915) * C47216 + (C7295 - C7294) * C47134 +
             (C6922 - C6921) * C47217 + (C7297 - C7296) * C139873) *
                C47131 +
            (C6927 * C47216 + C7300 * C47134 + C6929 * C47217 +
             C7301 * C139873) *
                C47132 +
            (C22843 * C47216 + C23191 * C47134 + (C6000 - C6001) * C47217 +
             (C6273 - C6274) * C139873) *
                C47133) *
               C139809 * C140000) *
              C808 +
          ((((C280 - C279) * C47216 + (C503 - C502) * C47134 + C6927 * C47217 +
             C7300 * C139873) *
                C47131 +
            ((C284 - C283) * C47216 + (C506 - C505) * C47134 + C22843 * C47217 +
             C23191 * C139873) *
                C47132 +
            ((C288 - C287) * C47216 + (C509 - C508) * C47134 +
             (C1003 - C1004) * C47217 + (C1250 - C1251) * C139873) *
                C47133) *
               C139809 * C806 +
           ((C6919 * C47216 + C7298 * C47134 + C6925 * C47217 +
             C7299 * C139873) *
                C47131 +
            (C21967 * C47216 + C22239 * C47134 + (C6001 - C6000) * C47217 +
             (C6274 - C6273) * C139873) *
                C47132 +
            ((C1004 - C1003) * C47216 + (C1251 - C1250) * C47134 +
             (C139835 * C3035 - C265 * C2911) * C47217 +
             (C139835 * C3205 - C265 * C3093) * C139873) *
                C47133) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C13856 * C266 - C14015 * C108 + C13857 * C1741 - C14016 * C1570 +
             C13858 * C5397 - C14017 * C5273) *
                C47216 +
            (C13856 * C495 - C14015 * C348 + C13857 * C1997 - C14016 * C1829 +
             C13858 * C5567 - C14017 * C5455) *
                C47134 +
            (C60887 - C60888 + C60889 - C60890 + C60891 - C60892) * C47217 +
            (C61205 - C61206 + C61207 - C61208 + C61209 - C61210) * C139873) *
               C139731 * C139809 * C806 +
           ((C60888 - C60887 + C60890 - C60889 + C60892 - C60891) * C47216 +
            (C61206 - C61205 + C61208 - C61207 + C61210 - C61209) * C47134 +
            (C14015 * C2908 - C13856 * C3032 + C14016 * C7754 - C13857 * C7979 +
             C14017 * C13128 - C13858 * C13300) *
                C47217 +
            (C14015 * C3090 - C13856 * C3202 + C14016 * C8091 - C13857 * C8317 +
             C14017 * C13382 - C13858 * C13541) *
                C139873) *
               C139731 * C139809 * C140000) *
              C808 +
          (((C14020 - C14019 + C14022 - C14021 + C14024 - C14023) * C47216 +
            (C14280 - C14279 + C14282 - C14281 + C14284 - C14283) * C47134 +
            (C14872 - C14873 + C14874 - C14875 + C14876 - C14877) * C47217 +
            (C15196 - C15197 + C15198 - C15199 + C15200 - C15201) * C139873) *
               C139731 * C139809 * C806 +
           ((C14873 - C14872 + C14875 - C14874 + C14877 - C14876) * C47216 +
            (C15197 - C15196 + C15199 - C15198 + C15201 - C15200) * C47134 +
            (C13856 * C3033 - C14015 * C2909 + C13857 * C7980 - C14016 * C7753 +
             C13858 * C13301 - C14017 * C13129) *
                C47217 +
            (C13856 * C3203 - C14015 * C3091 + C13857 * C8318 - C14016 * C8092 +
             C13858 * C13543 - C14017 * C13383) *
                C139873) *
               C139731 * C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eezx[64] +=
        (-std::pow(Pi, 2.5) *
         (((((C139731 * C114 - C54790 * C108) * C265 +
             (C139731 * C573 - C54790 * C567) * C139835) *
                C54786 +
            ((C55513 - C55514) * C265 + (C55735 - C55736) * C139835) * C54787 +
            ((C55517 - C55518) * C265 + (C55737 - C55738) * C139835) * C54788 +
            ((C55521 - C55522) * C265 + (C55739 - C55740) * C139835) * C54789) *
               C139809 * C806 +
           (((C55514 - C55513) * C265 + (C55736 - C55735) * C139835) * C54786 +
            ((C55518 - C55517) * C265 + (C55738 - C55737) * C139835) * C54787 +
            ((C55522 - C55521) * C265 + (C55740 - C55739) * C139835) * C54788 +
            ((C54790 * C9609 - C139731 * C9611) * C265 +
             (C54790 * C10123 - C139731 * C10125) * C139835) *
                C54789) *
               C139809 * C140000) *
              C808 +
          ((((C54790 * C109 - C139731 * C116) * C265 +
             (C54790 * C568 - C139731 * C574) * C139835) *
                C54786 +
            ((C55525 - C55526) * C265 + (C55741 - C55742) * C139835) * C54787 +
            ((C55529 - C55530) * C265 + (C55743 - C55744) * C139835) * C54788 +
            ((C55533 - C55534) * C265 + (C55745 - C55746) * C139835) * C54789) *
               C139809 * C806 +
           (((C55526 - C55525) * C265 + (C55742 - C55741) * C139835) * C54786 +
            ((C55530 - C55529) * C265 + (C55744 - C55743) * C139835) * C54787 +
            ((C55534 - C55533) * C265 + (C55746 - C55745) * C139835) * C54788 +
            ((C139731 * C9613 - C54790 * C9610) * C265 +
             (C139731 * C10126 - C54790 * C10124) * C139835) *
                C54789) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47131 * C114 - C47136 * C108 + C47132 * C116 - C47138 * C109 +
              C47133 * C118 - C47140 * C110) *
                 C265 +
             (C47131 * C573 - C47136 * C567 + C47132 * C574 - C47138 * C568 +
              C47133 * C575 - C47140 * C569) *
                 C139835) *
                C47134 +
            ((C48294 - C48295 + C48296 - C48297 + C48298 - C48299) * C265 +
             (C48640 - C48641 + C48642 - C48643 + C48644 - C48645) * C139835) *
                C139873) *
               C139809 * C806 +
           (((C48295 - C48294 + C48297 - C48296 + C48299 - C48298) * C265 +
             (C48641 - C48640 + C48643 - C48642 + C48645 - C48644) * C139835) *
                C47134 +
            ((C47136 * C2908 - C47131 * C2912 + C47138 * C2909 -
              C47132 * C2914 + C47140 * C2910 - C47133 * C2916) *
                 C265 +
             (C47136 * C3256 - C47131 * C3260 + C47138 * C3257 -
              C47132 * C3261 + C47140 * C3258 - C47133 * C3262) *
                 C139835) *
                C139873) *
               C139809 * C140000) *
              C808 +
          ((((C47136 * C109 - C47131 * C116 + C47138 * C110 - C47132 * C118 +
              C47140 * C111 - C47133 * C120) *
                 C265 +
             (C47136 * C568 - C47131 * C574 + C47138 * C569 - C47132 * C575 +
              C47140 * C570 - C47133 * C576) *
                 C139835) *
                C47134 +
            ((C48306 - C48307 + C48308 - C48309 + C48310 - C48311) * C265 +
             (C48646 - C48647 + C48648 - C48649 + C48650 - C48651) * C139835) *
                C139873) *
               C139809 * C806 +
           (((C48307 - C48306 + C48309 - C48308 + C48311 - C48310) * C265 +
             (C48647 - C48646 + C48649 - C48648 + C48651 - C48650) * C139835) *
                C47134 +
            ((C47131 * C2914 - C47136 * C2909 + C47132 * C2916 -
              C47138 * C2910 + C47133 * C2918 - C47140 * C2911) *
                 C265 +
             (C47131 * C3261 - C47136 * C3257 + C47132 * C3262 -
              C47138 * C3258 + C47133 * C3263 - C47140 * C3259) *
                 C139835) *
                C139873) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C139731 * C114 - C54790 * C108) * C14015 +
             (C139731 * C573 - C54790 * C567) * C13856 +
             (C139731 * C1578 - C54790 * C1570) * C14016 +
             (C139731 * C2079 - C54790 * C2074) * C13857 +
             (C139731 * C5277 - C54790 * C5273) * C14017 +
             (C139731 * C5625 - C54790 * C5621) * C13858) *
                C47134 +
            ((C55513 - C55514) * C14015 + (C55735 - C55736) * C13856 +
             (C57884 - C57883) * C14016 + (C58100 - C58099) * C13857 +
             (C60997 - C60998) * C14017 + (C61309 - C61310) * C13858) *
                C139873) *
               C139809 * C806 +
           (((C55514 - C55513) * C14015 + (C55736 - C55735) * C13856 +
             (C57883 - C57884) * C14016 + (C58099 - C58100) * C13857 +
             (C60998 - C60997) * C14017 + (C61310 - C61309) * C13858) *
                C47134 +
            ((C55518 - C55517) * C14015 + (C55738 - C55737) * C13856 +
             (C57887 - C57888) * C14016 + (C58101 - C58102) * C13857 +
             (C54790 * C13128 - C139731 * C13134) * C14017 +
             (C54790 * C13620 - C139731 * C13624) * C13858) *
                C139873) *
               C139809 * C140000) *
              C808 +
          ((((C54790 * C109 - C139731 * C116) * C14015 +
             (C54790 * C568 - C139731 * C574) * C13856 +
             (C54790 * C1569 - C139731 * C1576) * C14016 +
             (C54790 * C2075 - C139731 * C2080) * C13857 +
             (C54790 * C5274 - C139731 * C5279) * C14017 +
             (C54790 * C5622 - C139731 * C5626) * C13858) *
                C47134 +
            ((C55525 - C55526) * C14015 + (C55741 - C55742) * C13856 +
             (C61001 - C61002) * C14016 + (C61311 - C61312) * C13857 +
             (C61005 - C61006) * C14017 + (C61313 - C61314) * C13858) *
                C139873) *
               C139809 * C806 +
           (((C55526 - C55525) * C14015 + (C55742 - C55741) * C13856 +
             (C61002 - C61001) * C14016 + (C61312 - C61311) * C13857 +
             (C61006 - C61005) * C14017 + (C61314 - C61313) * C13858) *
                C47134 +
            ((C55530 - C55529) * C14015 + (C55744 - C55743) * C13856 +
             (C139731 * C7756 - C54790 * C7753) * C14016 +
             (C139731 * C8426 - C54790 * C8423) * C13857 +
             (C139731 * C13136 - C54790 * C13129) * C14017 +
             (C139731 * C13625 - C54790 * C13621) * C13858) *
                C139873) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eezy[64] +=
        (-std::pow(Pi, 2.5) *
         ((((C54786 * C183 - C54842 * C108 + C54787 * C896 - C54843 * C813 +
             C54788 * C2974 - C54844 * C2908 + C54789 * C6792 -
             C54845 * C6627) *
                C265 +
            (C54786 * C629 - C54842 * C567 + C54787 * C1393 - C54843 * C1317 +
             C54788 * C3314 - C54844 * C3256 + C54789 * C7521 -
             C54845 * C7401) *
                C139835) *
               C139731 * C139809 * C806 +
           ((C54842 * C813 - C54786 * C896 + C54843 * C2908 - C54787 * C2974 +
             C54844 * C6627 - C54788 * C6792 + C54845 * C9609 -
             C54789 * C9707) *
                C265 +
            (C54842 * C1317 - C54786 * C1393 + C54843 * C3256 - C54787 * C3314 +
             C54844 * C7401 - C54788 * C7521 + C54845 * C10123 -
             C54789 * C10211) *
                C139835) *
               C139731 * C139809 * C140000) *
              C808 +
          (((C54842 * C109 - C54786 * C184 + C54843 * C812 - C54787 * C897 +
             C54844 * C2909 - C54788 * C2975 + C54845 * C6626 -
             C54789 * C6793) *
                C265 +
            (C54842 * C568 - C54786 * C630 + C54843 * C1318 - C54787 * C1394 +
             C54844 * C3257 - C54788 * C3315 + C54845 * C7402 -
             C54789 * C7522) *
                C139835) *
               C139731 * C139809 * C806 +
           ((C54786 * C897 - C54842 * C812 + C54787 * C2975 - C54843 * C2909 +
             C54788 * C6793 - C54844 * C6626 + C54789 * C9708 -
             C54845 * C9610) *
                C265 +
            (C54786 * C1394 - C54842 * C1318 + C54787 * C3315 - C54843 * C3257 +
             C54788 * C7522 - C54844 * C7402 + C54789 * C10212 -
             C54845 * C10124) *
                C139835) *
               C139731 * C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47134 * C183 - C47216 * C108 + C139873 * C896 - C47217 * C813) *
                 C265 +
             (C47134 * C629 - C47216 * C567 + C139873 * C1393 -
              C47217 * C1317) *
                 C139835) *
                C47131 +
            ((C47219 - C47220 + C47221 - C47222) * C265 +
             (C47745 - C47746 + C47747 - C47748) * C139835) *
                C47132 +
            C47762 * C47133) *
               C139809 * C806 +
           (((C47216 * C813 - C47134 * C896 + C47217 * C2908 -
              C139873 * C2974) *
                 C265 +
             (C47216 * C1317 - C47134 * C1393 + C47217 * C3256 -
              C139873 * C3314) *
                 C139835) *
                C47131 +
            ((C48082 - C48083 + C48084 - C48085) * C265 +
             (C48750 - C48751 + C48752 - C48753) * C139835) *
                C47132 +
            ((C48090 - C48091 + C48092 - C48093) * C265 +
             (C48754 - C48755 + C48756 - C48757) * C139835) *
                C47133) *
               C139809 * C140000) *
              C808 +
          ((((C47220 - C47219 + C47222 - C47221) * C265 +
             (C47746 - C47745 + C47748 - C47747) * C139835) *
                C47131 +
            ((C47228 - C47227 + C47230 - C47229) * C265 +
             (C47751 - C47750 + C47753 - C47752) * C139835) *
                C47132 +
            ((C47235 - C47236 + C47237 - C47238) * C265 +
             (C47754 - C47755 + C47756 - C47757) * C139835) *
                C47133) *
               C139809 * C806 +
           (((C48083 - C48082 + C48085 - C48084) * C265 +
             (C48751 - C48750 + C48753 - C48752) * C139835) *
                C47131 +
            ((C48091 - C48090 + C48093 - C48092) * C265 +
             (C48755 - C48754 + C48757 - C48756) * C139835) *
                C47132 +
            ((C47134 * C899 - C47216 * C810 + C139873 * C2977 -
              C47217 * C2911) *
                 C265 +
             (C47134 * C1396 - C47216 * C1320 + C139873 * C3317 -
              C47217 * C3259) *
                 C139835) *
                C47133) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47134 * C183 - C47216 * C108 + C139873 * C896 - C47217 * C813) *
                C14015 +
            (C47134 * C629 - C47216 * C567 + C139873 * C1393 - C47217 * C1317) *
                C13856 +
            (C47134 * C1653 - C47216 * C1570 + C139873 * C3520 -
             C47217 * C3438) *
                C14016 +
            (C47134 * C2150 - C47216 * C2074 + C139873 * C3956 -
             C47217 * C3882) *
                C13857 +
            (C47134 * C5339 - C47216 * C5273 + C139873 * C13216 -
             C47217 * C13126) *
                C14017 +
            (C47134 * C5679 - C47216 * C5621 + C139873 * C13700 -
             C47217 * C13618) *
                C13858) *
               C139731 * C139809 * C806 +
           ((C47216 * C813 - C47134 * C896 + C47217 * C2908 - C139873 * C2974) *
                C14015 +
            (C47216 * C1317 - C47134 * C1393 + C47217 * C3256 -
             C139873 * C3314) *
                C13856 +
            (C47216 * C3438 - C47134 * C3520 + C47217 * C7754 -
             C139873 * C7863) *
                C14016 +
            (C47216 * C3882 - C47134 * C3956 + C47217 * C8422 -
             C139873 * C8526) *
                C13857 +
            (C47216 * C13126 - C47134 * C13216 + C47217 * C13128 -
             C139873 * C13217) *
                C14017 +
            (C47216 * C13618 - C47134 * C13700 + C47217 * C13620 -
             C139873 * C13701) *
                C13858) *
               C139731 * C139809 * C140000) *
              C808 +
          (((C47220 - C47219 + C47222 - C47221) * C14015 +
            (C47746 - C47745 + C47748 - C47747) * C13856 +
            (C49056 - C49057 + C49058 - C49059) * C14016 +
            (C49688 - C49689 + C49690 - C49691) * C13857 +
            (C47216 * C5274 - C47134 * C5340 + C47217 * C13127 -
             C139873 * C13218) *
                C14017 +
            (C47216 * C5622 - C47134 * C5680 + C47217 * C13619 -
             C139873 * C13702) *
                C13858) *
               C139731 * C139809 * C806 +
           ((C48083 - C48082 + C48085 - C48084) * C14015 +
            (C48751 - C48750 + C48753 - C48752) * C13856 +
            (C47134 * C3521 - C47216 * C3439 + C139873 * C7864 -
             C47217 * C7753) *
                C14016 +
            (C47134 * C3957 - C47216 * C3883 + C139873 * C8527 -
             C47217 * C8423) *
                C13857 +
            (C47134 * C13218 - C47216 * C13127 + C139873 * C13219 -
             C47217 * C13129) *
                C14017 +
            (C47134 * C13702 - C47216 * C13619 + C139873 * C13703 -
             C47217 * C13621) *
                C13858) *
               C139731 * C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eezz[64] +=
        (-std::pow(Pi, 2.5) *
         ((((C265 * C266 - C701 * C108 - C265 * C567 + C139835 * C702) *
                C54786 +
            C7652 * C54787 + C7653 * C54788 + C10296 * C54789) *
               C139731 * C139809 * C806 -
           ((C265 * C9785 - C701 * C9609 - C265 * C10123 + C139835 * C10287) *
                C54789 +
            C10296 * C54788 + C7653 * C54787 + C7652 * C54786) *
               C139731 * C139809 * C140000) *
              C808 +
          ((C1496 * C54786 + C6525 * C54787 + C7654 * C54788 +
            (C265 * C9786 - C701 * C9610 - C265 * C10124 + C139835 * C10288) *
                C54789) *
               C139731 * C139809 * C140000 -
           (C7654 * C54789 + C6525 * C54788 + C1496 * C54787 + C733 * C54786) *
               C139731 * C139809 * C806) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C265 * C266 - C701 * C108 - C265 * C567 + C139835 * C702) *
                 C47134 +
             C7652 * C139873) *
                C47131 +
            (C47837 + C47838) * C47132 + C47843 * C47133) *
               C139809 * C806 -
           ((C48856 + C48857) * C47133 + (C48858 + C48859) * C47132 +
            (C7653 * C139873 + C7652 * C47134) * C47131) *
               C139809 * C140000) *
              C808 +
          (((C48859 + C48858) * C47131 + (C48857 + C48856) * C47132 +
            (C1494 * C47134 +
             (C265 * C3035 - C701 * C2911 - C265 * C3259 + C139835 * C3371) *
                 C139873) *
                C47133) *
               C139809 * C140000 -
           ((C47841 + C47842) * C47133 + (C47840 + C47839) * C47132 +
            (C47838 + C47837) * C47131) *
               C139809 * C806) *
              C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C14015 * C266 - C14516 * C108 - C14015 * C567 + C13856 * C702 +
             C14016 * C1741 - C14517 * C1570 - C14016 * C2074 + C13857 * C2230 +
             C14017 * C5397 - C14518 * C5273 - C14017 * C5621 +
             C13858 * C5733) *
                C47134 +
            (C61529 + C61530 + C61531) * C139873) *
               C139731 * C139809 * C806 -
           ((C14017 * C13300 - C14518 * C13128 - C14017 * C13620 +
             C13858 * C13779 + C14016 * C7979 - C14517 * C7754 -
             C14016 * C8422 + C13857 * C8634 + C14015 * C3032 - C14516 * C2908 -
             C14015 * C3256 + C13856 * C3368) *
                C139873 +
            (C61531 + C61530 + C61529) * C47134) *
               C139731 * C139809 * C140000) *
              C808 +
          (((C15524 + C15523 + C15522) * C47134 +
            (C14015 * C3033 - C14516 * C2909 - C14015 * C3257 + C13856 * C3369 +
             C14016 * C7980 - C14517 * C7753 - C14016 * C8423 + C13857 * C8633 +
             C14017 * C13301 - C14518 * C13129 - C14017 * C13621 +
             C13858 * C13781) *
                C139873) *
               C139731 * C139809 * C140000 -
           ((C15522 + C15523 + C15524) * C139873 +
            (C14558 + C14557 + C14556) * C47134) *
               C139731 * C139809 * C806) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eexx[65] +=
        (-std::pow(Pi, 2.5) *
         ((((C54790 * C114 - C54791 * C108 - C54790 * C115 + C139731 * C126) *
                C139835 * C54786 +
            C55309 * C54787 + C55310 * C54788 + C55311 * C54789) *
               C1565 -
           ((C54790 * C10396 - C54791 * C10394 - C54790 * C10397 +
             C139731 * C10400) *
                C139835 * C54789 +
            (C54790 * C7758 - C54791 * C7754 - C54790 * C7759 +
             C139731 * C7763) *
                C139835 * C54788 +
            (C54790 * C3442 - C54791 * C3438 - C54790 * C3443 +
             C139731 * C3450) *
                C139835 * C54787 +
            (C54790 * C1578 - C54791 * C1570 - C54790 * C1579 +
             C139731 * C1585) *
                C139835 * C54786) *
               C140002) *
              C139792 * C808 +
          (((C54790 * C1576 - C54791 * C1569 - C54790 * C1577 +
             C139731 * C1584) *
                C139835 * C54786 +
            (C54790 * C3444 - C54791 * C3439 - C54790 * C3445 +
             C139731 * C3451) *
                C139835 * C54787 +
            (C54790 * C7756 - C54791 * C7753 - C54790 * C7757 +
             C139731 * C7762) *
                C139835 * C54788 +
            (C54790 * C10398 - C54791 * C10395 - C54790 * C10399 +
             C139731 * C10401) *
                C139835 * C54789) *
               C140002 -
           (C55314 * C54789 + C55313 * C54788 + C55312 * C54787 +
            (C54790 * C116 - C54791 * C109 - C54790 * C117 + C139731 * C127) *
                C139835 * C54786) *
               C1565) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47136 * C114 - C47137 * C108 - C47136 * C115 + C47131 * C126 +
             C47138 * C116 - C47139 * C109 - C47138 * C117 + C47132 * C127 +
             C47140 * C118 - C47141 * C110 - C47140 * C119 + C47133 * C128) *
                C139835 * C47134 +
            (C47978 + C47979 + C47980) * C139835 * C139873) *
               C1565 -
           ((C47140 * C3446 - C47141 * C3440 - C47140 * C3447 + C47133 * C3452 +
             C47138 * C3444 - C47139 * C3439 - C47138 * C3445 + C47132 * C3451 +
             C47136 * C3442 - C47137 * C3438 - C47136 * C3443 +
             C47131 * C3450) *
                C139835 * C139873 +
            (C47140 * C1574 - C47141 * C1568 - C47140 * C1575 + C47133 * C1583 +
             C47138 * C1576 - C47139 * C1569 - C47138 * C1577 + C47132 * C1584 +
             C47136 * C1578 - C47137 * C1570 - C47136 * C1579 +
             C47131 * C1585) *
                C139835 * C47134) *
               C140002) *
              C139792 * C808 +
          (((C47136 * C1576 - C47137 * C1569 - C47136 * C1577 + C47131 * C1584 +
             C47138 * C1574 - C47139 * C1568 - C47138 * C1575 + C47132 * C1583 +
             C47140 * C1572 - C47141 * C1567 - C47140 * C1573 +
             C47133 * C1582) *
                C139835 * C47134 +
            (C47136 * C3444 - C47137 * C3439 - C47136 * C3445 + C47131 * C3451 +
             C47138 * C3446 - C47139 * C3440 - C47138 * C3447 + C47132 * C3452 +
             C47140 * C3448 - C47141 * C3441 - C47140 * C3449 +
             C47133 * C3453) *
                C139835 * C139873) *
               C140002 -
           ((C47983 + C47982 + C47981) * C139835 * C139873 +
            (C47140 * C120 - C47141 * C111 - C47140 * C121 + C47133 * C129 +
             C47138 * C118 - C47139 * C110 - C47138 * C119 + C47132 * C128 +
             C47136 * C116 - C47137 * C109 - C47136 * C117 + C47131 * C127) *
                C139835 * C47134) *
               C1565) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C54790 * C114 - C54791 * C108 - C54790 * C115 + C139731 * C126) *
                 C13856 +
             C61654 * C13857 + C61655 * C13858) *
                C47134 +
            (C60664 + C60665 + C60688) * C139873) *
               C1565 -
           (((C54790 * C18304 - C54791 * C18302 - C54790 * C18305 +
              C139731 * C18308) *
                 C13858 +
             C60685 * C13857 + C57671 * C13856) *
                C139873 +
            ((C54790 * C15627 - C54791 * C15623 - C54790 * C15628 +
              C139731 * C15632) *
                 C13858 +
             C61655 * C13857 + C61654 * C13856) *
                C47134) *
               C140002) *
              C139792 * C808 +
          (((C61656 * C13856 + C61657 * C13857 +
             (C54790 * C15625 - C54791 * C15622 - C54790 * C15626 +
              C139731 * C15631) *
                 C13858) *
                C47134 +
            (C60686 * C13856 + C60687 * C13857 +
             (C54790 * C18306 - C54791 * C18303 - C54790 * C18307 +
              C139731 * C18309) *
                 C13858) *
                C139873) *
               C140002 -
           ((C60690 + C60689 + C60670) * C139873 +
            (C61657 * C13858 + C61656 * C13857 +
             (C54790 * C116 - C54791 * C109 - C54790 * C117 + C139731 * C127) *
                 C13856) *
                C47134) *
               C1565) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eexy[65] +=
        (-std::pow(Pi, 2.5) *
         ((((C54786 * C183 - C54842 * C108 + C54787 * C896 - C54843 * C813 +
             C54788 * C2974 - C54844 * C2908 + C54789 * C6792 -
             C54845 * C6627) *
                C54790 +
            (C54786 * C189 - C54842 * C115 + C54787 * C901 - C54843 * C822 +
             C54788 * C2978 - C54844 * C2913 + C54789 * C6795 -
             C54845 * C6632) *
                C139731) *
               C139835 * C1565 +
           ((C54842 * C1570 - C54786 * C1653 + C54843 * C3438 - C54787 * C3520 +
             C54844 * C7754 - C54788 * C7863 + C54845 * C10394 -
             C54789 * C10528) *
                C54790 +
            (C54842 * C1579 - C54786 * C1658 + C54843 * C3443 - C54787 * C3524 +
             C54844 * C7759 - C54788 * C7866 + C54845 * C10397 -
             C54789 * C10530) *
                C139731) *
               C139835 * C140002) *
              C139792 * C808 +
          (((C54842 * C109 - C54786 * C184 + C54843 * C812 - C54787 * C897 +
             C54844 * C2909 - C54788 * C2975 + C54845 * C6626 -
             C54789 * C6793) *
                C54790 +
            (C54842 * C117 - C54786 * C190 + C54843 * C820 - C54787 * C902 +
             C54844 * C2915 - C54788 * C2979 + C54845 * C6630 -
             C54789 * C6796) *
                C139731) *
               C139835 * C1565 +
           ((C54786 * C1654 - C54842 * C1569 + C54787 * C3521 - C54843 * C3439 +
             C54788 * C7864 - C54844 * C7753 + C54789 * C10529 -
             C54845 * C10395) *
                C54790 +
            (C54786 * C1659 - C54842 * C1577 + C54787 * C3525 - C54843 * C3445 +
             C54788 * C7867 - C54844 * C7757 + C54789 * C10531 -
             C54845 * C10399) *
                C139731) *
               C139835 * C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47134 * C183 - C47216 * C108 + C139873 * C896 - C47217 * C813) *
                C47136 +
            (C47134 * C189 - C47216 * C115 + C139873 * C901 - C47217 * C822) *
                C47131 +
            (C47219 - C47220 + C47221 - C47222) * C47138 +
            (C47223 - C47224 + C47225 - C47226) * C47132 + C47247 * C47140 +
            C47248 * C47133) *
               C139835 * C1565 +
           ((C47216 * C1570 - C47134 * C1653 + C47217 * C3438 -
             C139873 * C3520) *
                C47136 +
            (C47216 * C1579 - C47134 * C1658 + C47217 * C3443 -
             C139873 * C3524) *
                C47131 +
            (C49056 - C49057 + C49058 - C49059) * C47138 +
            (C49060 - C49061 + C49062 - C49063) * C47132 +
            (C49064 - C49065 + C49066 - C49067) * C47140 +
            (C49068 - C49069 + C49070 - C49071) * C47133) *
               C139835 * C140002) *
              C139792 * C808 +
          (((C47220 - C47219 + C47222 - C47221) * C47136 +
            (C47224 - C47223 + C47226 - C47225) * C47131 +
            (C47228 - C47227 + C47230 - C47229) * C47138 +
            (C47232 - C47231 + C47234 - C47233) * C47132 +
            (C47235 - C47236 + C47237 - C47238) * C47140 +
            (C47239 - C47240 + C47241 - C47242) * C47133) *
               C139835 * C1565 +
           ((C49057 - C49056 + C49059 - C49058) * C47136 +
            (C49061 - C49060 + C49063 - C49062) * C47131 +
            (C49065 - C49064 + C49067 - C49066) * C47138 +
            (C49069 - C49068 + C49071 - C49070) * C47132 +
            (C47134 * C1656 - C47216 * C1567 + C139873 * C3523 -
             C47217 * C3441) *
                C47140 +
            (C47134 * C1661 - C47216 * C1573 + C139873 * C3527 -
             C47217 * C3449) *
                C47133) *
               C139835 * C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C47134 * C183 - C47216 * C108 + C139873 * C896 - C47217 * C813) *
                 C54790 +
             (C47134 * C189 - C47216 * C115 + C139873 * C901 - C47217 * C822) *
                 C139731) *
                C13856 +
            ((C61756 - C61757 + C61758 - C61759) * C54790 +
             (C61760 - C61761 + C61762 - C61763) * C139731) *
                C13857 +
            ((C61764 - C61765 + C61766 - C61767) * C54790 +
             (C61768 - C61769 + C61770 - C61771) * C139731) *
                C13858) *
               C1565 +
           (((C61757 - C61756 + C61759 - C61758) * C54790 +
             (C61761 - C61760 + C61763 - C61762) * C139731) *
                C13856 +
            ((C61765 - C61764 + C61767 - C61766) * C54790 +
             (C61769 - C61768 + C61771 - C61770) * C139731) *
                C13857 +
            ((C47216 * C15623 - C47134 * C15788 + C47217 * C18302 -
              C139873 * C18422) *
                 C54790 +
             (C47216 * C15628 - C47134 * C15791 + C47217 * C18305 -
              C139873 * C18424) *
                 C139731) *
                C13858) *
               C140002) *
              C139792 * C808 +
          ((((C47220 - C47219 + C47222 - C47221) * C54790 +
             (C47224 - C47223 + C47226 - C47225) * C139731) *
                C13856 +
            ((C49056 - C49057 + C49058 - C49059) * C54790 +
             (C49060 - C49061 + C49062 - C49063) * C139731) *
                C13857 +
            ((C61772 - C61773 + C61774 - C61775) * C54790 +
             (C61776 - C61777 + C61778 - C61779) * C139731) *
                C13858) *
               C1565 +
           (((C49057 - C49056 + C49059 - C49058) * C54790 +
             (C49061 - C49060 + C49063 - C49062) * C139731) *
                C13856 +
            ((C61773 - C61772 + C61775 - C61774) * C54790 +
             (C61777 - C61776 + C61779 - C61778) * C139731) *
                C13857 +
            ((C47134 * C15789 - C47216 * C15622 + C139873 * C18423 -
              C47217 * C18303) *
                 C54790 +
             (C47134 * C15792 - C47216 * C15626 + C139873 * C18425 -
              C47217 * C18307) *
                 C139731) *
                C13858) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eexz[65] +=
        (-std::pow(Pi, 2.5) *
         (((((C139835 * C266 - C265 * C108) * C54790 +
             (C139835 * C272 - C265 * C115) * C139731) *
                C54786 +
            ((C6915 - C6916) * C54790 + (C6917 - C6918) * C139731) * C54787 +
            (C9790 * C54790 + C9791 * C139731) * C54788 +
            ((C9795 - C9794) * C54790 + (C9797 - C9796) * C139731) * C54789) *
               C1565 +
           (((C265 * C1570 - C139835 * C1741) * C54790 +
             (C265 * C1579 - C139835 * C1746) * C139731) *
                C54786 +
            ((C10635 - C10636) * C54790 + (C10637 - C10638) * C139731) *
                C54787 +
            ((C10639 - C10640) * C54790 + (C10641 - C10642) * C139731) *
                C54788 +
            ((C265 * C10394 - C139835 * C10630) * C54790 +
             (C265 * C10397 - C139835 * C10632) * C139731) *
                C54789) *
               C140002) *
              C139792 * C808 +
          ((((C280 - C279) * C54790 + (C282 - C281) * C139731) * C54786 +
            (C6927 * C54790 + C6928 * C139731) * C54787 +
            (C6929 * C54790 + C6930 * C139731) * C54788 +
            ((C6931 - C6932) * C54790 + (C6933 - C6934) * C139731) * C54789) *
               C1565 +
           (((C1753 - C1752) * C54790 + (C1755 - C1754) * C139731) * C54786 +
            ((C7987 - C7986) * C54790 + (C7989 - C7988) * C139731) * C54787 +
            ((C7991 - C7990) * C54790 + (C7993 - C7992) * C139731) * C54788 +
            ((C139835 * C10631 - C265 * C10395) * C54790 +
             (C139835 * C10633 - C265 * C10399) * C139731) *
                C54789) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C139835 * C266 - C265 * C108) * C47136 +
             (C139835 * C272 - C265 * C115) * C47131 + (C279 - C280) * C47138 +
             (C281 - C282) * C47132 + C295 * C47140 + C296 * C47133) *
                C47134 +
            ((C6915 - C6916) * C47136 + (C6917 - C6918) * C47131 +
             C6919 * C47138 + C6920 * C47132 + C21967 * C47140 +
             C21968 * C47133) *
                C139873) *
               C1565 +
           (((C265 * C1570 - C139835 * C1741) * C47136 +
             (C265 * C1579 - C139835 * C1746) * C47131 +
             (C1752 - C1753) * C47138 + (C1754 - C1755) * C47132 +
             (C1756 - C1757) * C47140 + (C1758 - C1759) * C47133) *
                C47134 +
            ((C10635 - C10636) * C47136 + (C10637 - C10638) * C47131 +
             (C7986 - C7987) * C47138 + (C7988 - C7989) * C47132 +
             (C23820 - C23821) * C47140 + (C23822 - C23823) * C47133) *
                C139873) *
               C140002) *
              C139792 * C808 +
          ((((C280 - C279) * C47136 + (C282 - C281) * C47131 +
             (C284 - C283) * C47138 + (C286 - C285) * C47132 +
             (C288 - C287) * C47140 + (C290 - C289) * C47133) *
                C47134 +
            (C6927 * C47136 + C6928 * C47131 + C22843 * C47138 +
             C22844 * C47132 + (C1003 - C1004) * C47140 +
             (C1005 - C1006) * C47133) *
                C139873) *
               C1565 +
           (((C1753 - C1752) * C47136 + (C1755 - C1754) * C47131 +
             (C1757 - C1756) * C47138 + (C1759 - C1758) * C47132 +
             (C1761 - C1760) * C47140 + (C1763 - C1762) * C47133) *
                C47134 +
            ((C7987 - C7986) * C47136 + (C7989 - C7988) * C47131 +
             (C23821 - C23820) * C47138 + (C23823 - C23822) * C47132 +
             (C139835 * C3597 - C265 * C3441) * C47140 +
             (C139835 * C3601 - C265 * C3449) * C47133) *
                C139873) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C13856 * C266 - C14015 * C108 + C13857 * C1741 - C14016 * C1570 +
              C13858 * C5397 - C14017 * C5273) *
                 C54790 +
             (C13856 * C272 - C14015 * C115 + C13857 * C1746 - C14016 * C1579 +
              C13858 * C5401 - C14017 * C5278) *
                 C139731) *
                C47134 +
            ((C60887 - C60888 + C60889 - C60890 + C60891 - C60892) * C54790 +
             (C60893 - C60894 + C60895 - C60896 + C60897 - C60898) * C139731) *
                C139873) *
               C1565 +
           (((C14015 * C1570 - C13856 * C1741 + C14016 * C5273 -
              C13857 * C5397 + C14017 * C15623 - C13858 * C15912) *
                 C54790 +
             (C14015 * C1579 - C13856 * C1746 + C14016 * C5278 -
              C13857 * C5401 + C14017 * C15628 - C13858 * C15915) *
                 C139731) *
                C47134 +
            ((C14015 * C3438 - C13856 * C3594 + C14016 * C13126 -
              C13857 * C13298 + C14017 * C18302 - C13858 * C18532) *
                 C54790 +
             (C14015 * C3443 - C13856 * C3598 + C14016 * C13131 -
              C13857 * C13302 + C14017 * C18305 - C13858 * C18534) *
                 C139731) *
                C139873) *
               C140002) *
              C139792 * C808 +
          ((((C14020 - C14019 + C14022 - C14021 + C14024 - C14023) * C54790 +
             (C14026 - C14025 + C14028 - C14027 + C14030 - C14029) * C139731) *
                C47134 +
            ((C14872 - C14873 + C14874 - C14875 + C14876 - C14877) * C54790 +
             (C14878 - C14879 + C14880 - C14881 + C14882 - C14883) * C139731) *
                C139873) *
               C1565 +
           (((C15920 - C15919 + C15922 - C15921 + C15924 - C15923) * C54790 +
             (C15926 - C15925 + C15928 - C15927 + C15930 - C15929) * C139731) *
                C47134 +
            ((C13856 * C3595 - C14015 * C3439 + C13857 * C13299 -
              C14016 * C13127 + C13858 * C18533 - C14017 * C18303) *
                 C54790 +
             (C13856 * C3599 - C14015 * C3445 + C13857 * C13303 -
              C14016 * C13133 + C13858 * C18535 - C14017 * C18307) *
                 C139731) *
                C139873) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[65] +=
        (-std::pow(Pi, 2.5) *
         ((((C139731 * C114 - C54790 * C108) * C54842 +
            (C139731 * C354 - C54790 * C348) * C54786 +
            (C55513 - C55514) * C54843 + (C55515 - C55516) * C54787 +
            (C55517 - C55518) * C54844 + (C55519 - C55520) * C54788 +
            (C55521 - C55522) * C54845 + (C55523 - C55524) * C54789) *
               C139835 * C1565 +
           ((C54790 * C1570 - C139731 * C1578) * C54842 +
            (C54790 * C1829 - C139731 * C1834) * C54786 +
            (C54790 * C3438 - C139731 * C3442) * C54843 +
            (C54790 * C3668 - C139731 * C3672) * C54787 +
            (C54790 * C7754 - C139731 * C7758) * C54844 +
            (C54790 * C8091 - C139731 * C8094) * C54788 +
            (C54790 * C10394 - C139731 * C10396) * C54845 +
            (C54790 * C10740 - C139731 * C10742) * C54789) *
               C139835 * C140002) *
              C139792 * C808 +
          (((C54790 * C109 - C139731 * C116) * C54842 +
            (C54790 * C349 - C139731 * C355) * C54786 +
            (C55525 - C55526) * C54843 + (C55527 - C55528) * C54787 +
            (C55529 - C55530) * C54844 + (C55531 - C55532) * C54788 +
            (C55533 - C55534) * C54845 + (C55535 - C55536) * C54789) *
               C139835 * C1565 +
           ((C139731 * C1576 - C54790 * C1569) * C54842 +
            (C139731 * C1835 - C54790 * C1830) * C54786 +
            (C139731 * C3444 - C54790 * C3439) * C54843 +
            (C139731 * C3673 - C54790 * C3669) * C54787 +
            (C139731 * C7756 - C54790 * C7753) * C54844 +
            (C139731 * C8095 - C54790 * C8092) * C54788 +
            (C139731 * C10398 - C54790 * C10395) * C54845 +
            (C139731 * C10743 - C54790 * C10741) * C54789) *
               C139835 * C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47131 * C114 - C47136 * C108 + C47132 * C116 - C47138 * C109 +
             C47133 * C118 - C47140 * C110) *
                C47216 +
            (C47131 * C354 - C47136 * C348 + C47132 * C355 - C47138 * C349 +
             C47133 * C356 - C47140 * C350) *
                C47134 +
            (C48294 - C48295 + C48296 - C48297 + C48298 - C48299) * C47217 +
            (C48300 - C48301 + C48302 - C48303 + C48304 - C48305) * C139873) *
               C139835 * C1565 +
           ((C47136 * C1570 - C47131 * C1578 + C47138 * C1569 - C47132 * C1576 +
             C47140 * C1568 - C47133 * C1574) *
                C47216 +
            (C47136 * C1829 - C47131 * C1834 + C47138 * C1830 - C47132 * C1835 +
             C47140 * C1831 - C47133 * C1836) *
                C47134 +
            (C47136 * C3438 - C47131 * C3442 + C47138 * C3439 - C47132 * C3444 +
             C47140 * C3440 - C47133 * C3446) *
                C47217 +
            (C47136 * C3668 - C47131 * C3672 + C47138 * C3669 - C47132 * C3673 +
             C47140 * C3670 - C47133 * C3674) *
                C139873) *
               C139835 * C140002) *
              C139792 * C808 +
          (((C47136 * C109 - C47131 * C116 + C47138 * C110 - C47132 * C118 +
             C47140 * C111 - C47133 * C120) *
                C47216 +
            (C47136 * C349 - C47131 * C355 + C47138 * C350 - C47132 * C356 +
             C47140 * C351 - C47133 * C357) *
                C47134 +
            (C48306 - C48307 + C48308 - C48309 + C48310 - C48311) * C47217 +
            (C48312 - C48313 + C48314 - C48315 + C48316 - C48317) * C139873) *
               C139835 * C1565 +
           ((C47131 * C1576 - C47136 * C1569 + C47132 * C1574 - C47138 * C1568 +
             C47133 * C1572 - C47140 * C1567) *
                C47216 +
            (C47131 * C1835 - C47136 * C1830 + C47132 * C1836 - C47138 * C1831 +
             C47133 * C1837 - C47140 * C1832) *
                C47134 +
            (C47131 * C3444 - C47136 * C3439 + C47132 * C3446 - C47138 * C3440 +
             C47133 * C3448 - C47140 * C3441) *
                C47217 +
            (C47131 * C3673 - C47136 * C3669 + C47132 * C3674 - C47138 * C3670 +
             C47133 * C3675 - C47140 * C3671) *
                C139873) *
               C139835 * C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C139731 * C114 - C54790 * C108) * C47216 +
             (C139731 * C354 - C54790 * C348) * C47134 +
             (C55513 - C55514) * C47217 + (C55515 - C55516) * C139873) *
                C13856 +
            ((C61976 - C61977) * C47216 + (C61978 - C61979) * C47134 +
             (C57884 - C57883) * C47217 + (C57886 - C57885) * C139873) *
                C13857 +
            ((C61980 - C61981) * C47216 + (C61982 - C61983) * C47134 +
             (C60997 - C60998) * C47217 + (C60999 - C61000) * C139873) *
                C13858) *
               C1565 +
           (((C61977 - C61976) * C47216 + (C61979 - C61978) * C47134 +
             (C57883 - C57884) * C47217 + (C57885 - C57886) * C139873) *
                C13856 +
            ((C61981 - C61980) * C47216 + (C61983 - C61982) * C47134 +
             (C60998 - C60997) * C47217 + (C61000 - C60999) * C139873) *
                C13857 +
            ((C54790 * C15623 - C139731 * C15627) * C47216 +
             (C54790 * C16028 - C139731 * C16031) * C47134 +
             (C54790 * C18302 - C139731 * C18304) * C47217 +
             (C54790 * C18634 - C139731 * C18636) * C139873) *
                C13858) *
               C140002) *
              C139792 * C808 +
          ((((C54790 * C109 - C139731 * C116) * C47216 +
             (C54790 * C349 - C139731 * C355) * C47134 +
             (C55525 - C55526) * C47217 + (C55527 - C55528) * C139873) *
                C13856 +
            ((C61984 - C61985) * C47216 + (C61986 - C61987) * C47134 +
             (C61001 - C61002) * C47217 + (C61003 - C61004) * C139873) *
                C13857 +
            ((C61988 - C61989) * C47216 + (C61990 - C61991) * C47134 +
             (C61005 - C61006) * C47217 + (C61007 - C61008) * C139873) *
                C13858) *
               C1565 +
           (((C61985 - C61984) * C47216 + (C61987 - C61986) * C47134 +
             (C61002 - C61001) * C47217 + (C61004 - C61003) * C139873) *
                C13856 +
            ((C61989 - C61988) * C47216 + (C61991 - C61990) * C47134 +
             (C61006 - C61005) * C47217 + (C61008 - C61007) * C139873) *
                C13857 +
            ((C139731 * C15625 - C54790 * C15622) * C47216 +
             (C139731 * C16032 - C54790 * C16029) * C47134 +
             (C139731 * C18306 - C54790 * C18303) * C47217 +
             (C139731 * C18637 - C54790 * C18635) * C139873) *
                C13858) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[65] +=
        (-std::pow(Pi, 2.5) *
         (((C54842 * C183 - C54996 * C108 - C54842 * C348 + C54786 * C411 +
            C54843 * C896 - C54997 * C813 - C54843 * C1072 + C54787 * C1151 +
            C54844 * C2974 - C54998 * C2908 - C54844 * C3090 + C54788 * C3148 +
            C54845 * C6792 - C54999 * C6627 - C54845 * C7032 + C54789 * C7169) *
               C139731 * C139835 * C1565 -
           (C54845 * C10528 - C54999 * C10394 - C54845 * C10740 +
            C54789 * C10858 + C54844 * C7863 - C54998 * C7754 - C54844 * C8091 +
            C54788 * C8196 + C54843 * C3520 - C54997 * C3438 - C54843 * C3668 +
            C54787 * C3742 + C54842 * C1653 - C54996 * C1570 - C54842 * C1829 +
            C54786 * C1908) *
               C139731 * C139835 * C140002) *
              C139792 * C808 +
          ((C54842 * C1654 - C54996 * C1569 - C54842 * C1830 + C54786 * C1907 +
            C54843 * C3521 - C54997 * C3439 - C54843 * C3669 + C54787 * C3743 +
            C54844 * C7864 - C54998 * C7753 - C54844 * C8092 + C54788 * C8195 +
            C54845 * C10529 - C54999 * C10395 - C54845 * C10741 +
            C54789 * C10859) *
               C139731 * C139835 * C140002 -
           (C54845 * C6793 - C54999 * C6626 - C54845 * C7033 + C54789 * C7168 +
            C54844 * C2975 - C54998 * C2909 - C54844 * C3091 + C54788 * C3149 +
            C54843 * C897 - C54997 * C812 - C54843 * C1073 + C54787 * C1150 +
            C54842 * C184 - C54996 * C109 - C54842 * C349 + C54786 * C412) *
               C139731 * C139835 * C1565) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47216 * C183 - C47470 * C108 - C47216 * C348 + C47134 * C411 +
             C47217 * C896 - C47471 * C813 - C47217 * C1072 + C139873 * C1151) *
                C47131 +
            (C47509 + C47510) * C47132 + C47515 * C47133) *
               C139835 * C1565 -
           ((C49390 + C49391) * C47133 + (C49392 + C49393) * C47132 +
            (C47217 * C3520 - C47471 * C3438 - C47217 * C3668 +
             C139873 * C3742 + C47216 * C1653 - C47470 * C1570 -
             C47216 * C1829 + C47134 * C1908) *
                C47131) *
               C139835 * C140002) *
              C139792 * C808 +
          (((C49393 + C49392) * C47131 + (C49391 + C49390) * C47132 +
            (C47216 * C1656 - C47470 * C1567 - C47216 * C1832 + C47134 * C1905 +
             C47217 * C3523 - C47471 * C3441 - C47217 * C3671 +
             C139873 * C3745) *
                C47133) *
               C139835 * C140002 -
           ((C47513 + C47514) * C47133 + (C47512 + C47511) * C47132 +
            (C47510 + C47509) * C47131) *
               C139835 * C1565) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47216 * C183 - C47470 * C108 - C47216 * C348 + C47134 * C411 +
             C47217 * C896 - C47471 * C813 - C47217 * C1072 + C139873 * C1151) *
                C139731 * C13856 +
            (C62126 + C62127) * C139731 * C13857 +
            (C62128 + C62129) * C139731 * C13858) *
               C1565 -
           ((C47217 * C18422 - C47471 * C18302 - C47217 * C18634 +
             C139873 * C18744 + C47216 * C15788 - C47470 * C15623 -
             C47216 * C16028 + C47134 * C16165) *
                C139731 * C13858 +
            (C62129 + C62128) * C139731 * C13857 +
            (C62127 + C62126) * C139731 * C13856) *
               C140002) *
              C139792 * C808 +
          (((C49393 + C49392) * C139731 * C13856 +
            (C62130 + C62131) * C139731 * C13857 +
            (C47216 * C15789 - C47470 * C15622 - C47216 * C16029 +
             C47134 * C16164 + C47217 * C18423 - C47471 * C18303 -
             C47217 * C18635 + C139873 * C18745) *
                C139731 * C13858) *
               C140002 -
           ((C62131 + C62130) * C139731 * C13858 +
            (C49392 + C49393) * C139731 * C13857 +
            (C47510 + C47509) * C139731 * C13856) *
               C1565) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[65] +=
        (-std::pow(Pi, 2.5) *
         ((((C139835 * C266 - C265 * C108) * C54842 +
            (C139835 * C495 - C265 * C348) * C54786 + (C6915 - C6916) * C54843 +
            (C7294 - C7295) * C54787 + C9790 * C54844 + C10047 * C54788 +
            (C9795 - C9794) * C54845 + (C10049 - C10048) * C54789) *
               C139731 * C1565 +
           ((C265 * C1570 - C139835 * C1741) * C54842 +
            (C265 * C1829 - C139835 * C1997) * C54786 +
            (C10635 - C10636) * C54843 + (C10961 - C10962) * C54787 +
            (C10639 - C10640) * C54844 + (C10963 - C10964) * C54788 +
            (C265 * C10394 - C139835 * C10630) * C54845 +
            (C265 * C10740 - C139835 * C10958) * C54789) *
               C139731 * C140002) *
              C139792 * C808 +
          (((C280 - C279) * C54842 + (C503 - C502) * C54786 + C6927 * C54843 +
            C7300 * C54787 + C6929 * C54844 + C7301 * C54788 +
            (C6931 - C6932) * C54845 + (C7302 - C7303) * C54789) *
               C139731 * C1565 +
           ((C1753 - C1752) * C54842 + (C2004 - C2003) * C54786 +
            (C7987 - C7986) * C54843 + (C8322 - C8321) * C54787 +
            (C7991 - C7990) * C54844 + (C8324 - C8323) * C54788 +
            (C139835 * C10631 - C265 * C10395) * C54845 +
            (C139835 * C10959 - C265 * C10741) * C54789) *
               C139731 * C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C139835 * C266 - C265 * C108) * C47216 +
             (C139835 * C495 - C265 * C348) * C47134 +
             (C6915 - C6916) * C47217 + (C7294 - C7295) * C139873) *
                C47131 +
            ((C279 - C280) * C47216 + (C502 - C503) * C47134 + C6919 * C47217 +
             C7298 * C139873) *
                C47132 +
            C47596 * C47133) *
               C1565 +
           (((C265 * C1570 - C139835 * C1741) * C47216 +
             (C265 * C1829 - C139835 * C1997) * C47134 +
             (C10635 - C10636) * C47217 + (C10961 - C10962) * C139873) *
                C47131 +
            ((C1752 - C1753) * C47216 + (C2003 - C2004) * C47134 +
             (C7986 - C7987) * C47217 + (C8321 - C8322) * C139873) *
                C47132 +
            ((C1756 - C1757) * C47216 + (C2005 - C2006) * C47134 +
             (C23820 - C23821) * C47217 + (C24146 - C24147) * C139873) *
                C47133) *
               C140002) *
              C139792 * C808 +
          ((((C280 - C279) * C47216 + (C503 - C502) * C47134 + C6927 * C47217 +
             C7300 * C139873) *
                C47131 +
            ((C284 - C283) * C47216 + (C506 - C505) * C47134 + C22843 * C47217 +
             C23191 * C139873) *
                C47132 +
            ((C288 - C287) * C47216 + (C509 - C508) * C47134 +
             (C1003 - C1004) * C47217 + (C1250 - C1251) * C139873) *
                C47133) *
               C1565 +
           (((C1753 - C1752) * C47216 + (C2004 - C2003) * C47134 +
             (C7987 - C7986) * C47217 + (C8322 - C8321) * C139873) *
                C47131 +
            ((C1757 - C1756) * C47216 + (C2006 - C2005) * C47134 +
             (C23821 - C23820) * C47217 + (C24147 - C24146) * C139873) *
                C47132 +
            ((C1761 - C1760) * C47216 + (C2008 - C2007) * C47134 +
             (C139835 * C3597 - C265 * C3441) * C47217 +
             (C139835 * C3815 - C265 * C3671) * C139873) *
                C47133) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C13856 * C266 - C14015 * C108 + C13857 * C1741 - C14016 * C1570 +
             C13858 * C5397 - C14017 * C5273) *
                C47216 +
            (C13856 * C495 - C14015 * C348 + C13857 * C1997 - C14016 * C1829 +
             C13858 * C5567 - C14017 * C5455) *
                C47134 +
            (C60887 - C60888 + C60889 - C60890 + C60891 - C60892) * C47217 +
            (C61205 - C61206 + C61207 - C61208 + C61209 - C61210) * C139873) *
               C139731 * C1565 +
           ((C14015 * C1570 - C13856 * C1741 + C14016 * C5273 - C13857 * C5397 +
             C14017 * C15623 - C13858 * C15912) *
                C47216 +
            (C14015 * C1829 - C13856 * C1997 + C14016 * C5455 - C13857 * C5567 +
             C14017 * C16028 - C13858 * C16294) *
                C47134 +
            (C14015 * C3438 - C13856 * C3594 + C14016 * C13126 -
             C13857 * C13298 + C14017 * C18302 - C13858 * C18532) *
                C47217 +
            (C14015 * C3668 - C13856 * C3812 + C14016 * C13380 -
             C13857 * C13540 + C14017 * C18634 - C13858 * C18862) *
                C139873) *
               C139731 * C140002) *
              C139792 * C808 +
          (((C14020 - C14019 + C14022 - C14021 + C14024 - C14023) * C47216 +
            (C14280 - C14279 + C14282 - C14281 + C14284 - C14283) * C47134 +
            (C14872 - C14873 + C14874 - C14875 + C14876 - C14877) * C47217 +
            (C15196 - C15197 + C15198 - C15199 + C15200 - C15201) * C139873) *
               C139731 * C1565 +
           ((C15920 - C15919 + C15922 - C15921 + C15924 - C15923) * C47216 +
            (C16299 - C16298 + C16301 - C16300 + C16303 - C16302) * C47134 +
            (C13856 * C3595 - C14015 * C3439 + C13857 * C13299 -
             C14016 * C13127 + C13858 * C18533 - C14017 * C18303) *
                C47217 +
            (C13856 * C3813 - C14015 * C3669 + C13857 * C13542 -
             C14016 * C13381 + C13858 * C18863 - C14017 * C18635) *
                C139873) *
               C139731 * C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eezx[65] +=
        (-std::pow(Pi, 2.5) *
         (((((C139731 * C114 - C54790 * C108) * C265 +
             (C139731 * C573 - C54790 * C567) * C139835) *
                C54786 +
            ((C55513 - C55514) * C265 + (C55735 - C55736) * C139835) * C54787 +
            ((C55517 - C55518) * C265 + (C55737 - C55738) * C139835) * C54788 +
            ((C55521 - C55522) * C265 + (C55739 - C55740) * C139835) * C54789) *
               C1565 +
           (((C54790 * C1570 - C139731 * C1578) * C265 +
             (C54790 * C2074 - C139731 * C2079) * C139835) *
                C54786 +
            ((C54790 * C3438 - C139731 * C3442) * C265 +
             (C54790 * C3882 - C139731 * C3886) * C139835) *
                C54787 +
            ((C54790 * C7754 - C139731 * C7758) * C265 +
             (C54790 * C8422 - C139731 * C8425) * C139835) *
                C54788 +
            ((C54790 * C10394 - C139731 * C10396) * C265 +
             (C54790 * C11062 - C139731 * C11064) * C139835) *
                C54789) *
               C140002) *
              C139792 * C808 +
          ((((C54790 * C109 - C139731 * C116) * C265 +
             (C54790 * C568 - C139731 * C574) * C139835) *
                C54786 +
            ((C55525 - C55526) * C265 + (C55741 - C55742) * C139835) * C54787 +
            ((C55529 - C55530) * C265 + (C55743 - C55744) * C139835) * C54788 +
            ((C55533 - C55534) * C265 + (C55745 - C55746) * C139835) * C54789) *
               C1565 +
           (((C139731 * C1576 - C54790 * C1569) * C265 +
             (C139731 * C2080 - C54790 * C2075) * C139835) *
                C54786 +
            ((C139731 * C3444 - C54790 * C3439) * C265 +
             (C139731 * C3887 - C54790 * C3883) * C139835) *
                C54787 +
            ((C139731 * C7756 - C54790 * C7753) * C265 +
             (C139731 * C8426 - C54790 * C8423) * C139835) *
                C54788 +
            ((C139731 * C10398 - C54790 * C10395) * C265 +
             (C139731 * C11065 - C54790 * C11063) * C139835) *
                C54789) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47131 * C114 - C47136 * C108 + C47132 * C116 - C47138 * C109 +
              C47133 * C118 - C47140 * C110) *
                 C265 +
             (C47131 * C573 - C47136 * C567 + C47132 * C574 - C47138 * C568 +
              C47133 * C575 - C47140 * C569) *
                 C139835) *
                C47134 +
            ((C48294 - C48295 + C48296 - C48297 + C48298 - C48299) * C265 +
             (C48640 - C48641 + C48642 - C48643 + C48644 - C48645) * C139835) *
                C139873) *
               C1565 +
           (((C47136 * C1570 - C47131 * C1578 + C47138 * C1569 -
              C47132 * C1576 + C47140 * C1568 - C47133 * C1574) *
                 C265 +
             (C47136 * C2074 - C47131 * C2079 + C47138 * C2075 -
              C47132 * C2080 + C47140 * C2076 - C47133 * C2081) *
                 C139835) *
                C47134 +
            ((C47136 * C3438 - C47131 * C3442 + C47138 * C3439 -
              C47132 * C3444 + C47140 * C3440 - C47133 * C3446) *
                 C265 +
             (C47136 * C3882 - C47131 * C3886 + C47138 * C3883 -
              C47132 * C3887 + C47140 * C3884 - C47133 * C3888) *
                 C139835) *
                C139873) *
               C140002) *
              C139792 * C808 +
          ((((C47136 * C109 - C47131 * C116 + C47138 * C110 - C47132 * C118 +
              C47140 * C111 - C47133 * C120) *
                 C265 +
             (C47136 * C568 - C47131 * C574 + C47138 * C569 - C47132 * C575 +
              C47140 * C570 - C47133 * C576) *
                 C139835) *
                C47134 +
            ((C48306 - C48307 + C48308 - C48309 + C48310 - C48311) * C265 +
             (C48646 - C48647 + C48648 - C48649 + C48650 - C48651) * C139835) *
                C139873) *
               C1565 +
           (((C47131 * C1576 - C47136 * C1569 + C47132 * C1574 -
              C47138 * C1568 + C47133 * C1572 - C47140 * C1567) *
                 C265 +
             (C47131 * C2080 - C47136 * C2075 + C47132 * C2081 -
              C47138 * C2076 + C47133 * C2082 - C47140 * C2077) *
                 C139835) *
                C47134 +
            ((C47131 * C3444 - C47136 * C3439 + C47132 * C3446 -
              C47138 * C3440 + C47133 * C3448 - C47140 * C3441) *
                 C265 +
             (C47131 * C3887 - C47136 * C3883 + C47132 * C3888 -
              C47138 * C3884 + C47133 * C3889 - C47140 * C3885) *
                 C139835) *
                C139873) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C139731 * C114 - C54790 * C108) * C14015 +
             (C139731 * C573 - C54790 * C567) * C13856 +
             (C61976 - C61977) * C14016 + (C62328 - C62329) * C13857 +
             (C61980 - C61981) * C14017 + (C62330 - C62331) * C13858) *
                C47134 +
            ((C55513 - C55514) * C14015 + (C55735 - C55736) * C13856 +
             (C57884 - C57883) * C14016 + (C58100 - C58099) * C13857 +
             (C60997 - C60998) * C14017 + (C61309 - C61310) * C13858) *
                C139873) *
               C1565 +
           (((C61977 - C61976) * C14015 + (C62329 - C62328) * C13856 +
             (C61981 - C61980) * C14016 + (C62331 - C62330) * C13857 +
             (C54790 * C15623 - C139731 * C15627) * C14017 +
             (C54790 * C16401 - C139731 * C16404) * C13858) *
                C47134 +
            ((C57883 - C57884) * C14015 + (C58099 - C58100) * C13856 +
             (C60998 - C60997) * C14016 + (C61310 - C61309) * C13857 +
             (C54790 * C18302 - C139731 * C18304) * C14017 +
             (C54790 * C18962 - C139731 * C18964) * C13858) *
                C139873) *
               C140002) *
              C139792 * C808 +
          ((((C54790 * C109 - C139731 * C116) * C14015 +
             (C54790 * C568 - C139731 * C574) * C13856 +
             (C61984 - C61985) * C14016 + (C62332 - C62333) * C13857 +
             (C61988 - C61989) * C14017 + (C62334 - C62335) * C13858) *
                C47134 +
            ((C55525 - C55526) * C14015 + (C55741 - C55742) * C13856 +
             (C61001 - C61002) * C14016 + (C61311 - C61312) * C13857 +
             (C61005 - C61006) * C14017 + (C61313 - C61314) * C13858) *
                C139873) *
               C1565 +
           (((C61985 - C61984) * C14015 + (C62333 - C62332) * C13856 +
             (C61989 - C61988) * C14016 + (C62335 - C62334) * C13857 +
             (C139731 * C15625 - C54790 * C15622) * C14017 +
             (C139731 * C16405 - C54790 * C16402) * C13858) *
                C47134 +
            ((C61002 - C61001) * C14015 + (C61312 - C61311) * C13856 +
             (C61006 - C61005) * C14016 + (C61314 - C61313) * C13857 +
             (C139731 * C18306 - C54790 * C18303) * C14017 +
             (C139731 * C18965 - C54790 * C18963) * C13858) *
                C139873) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eezy[65] +=
        (-std::pow(Pi, 2.5) *
         ((((C54786 * C183 - C54842 * C108 + C54787 * C896 - C54843 * C813 +
             C54788 * C2974 - C54844 * C2908 + C54789 * C6792 -
             C54845 * C6627) *
                C265 +
            (C54786 * C629 - C54842 * C567 + C54787 * C1393 - C54843 * C1317 +
             C54788 * C3314 - C54844 * C3256 + C54789 * C7521 -
             C54845 * C7401) *
                C139835) *
               C139731 * C1565 +
           ((C54842 * C1570 - C54786 * C1653 + C54843 * C3438 - C54787 * C3520 +
             C54844 * C7754 - C54788 * C7863 + C54845 * C10394 -
             C54789 * C10528) *
                C265 +
            (C54842 * C2074 - C54786 * C2150 + C54843 * C3882 - C54787 * C3956 +
             C54844 * C8422 - C54788 * C8526 + C54845 * C11062 -
             C54789 * C11172) *
                C139835) *
               C139731 * C140002) *
              C139792 * C808 +
          (((C54842 * C109 - C54786 * C184 + C54843 * C812 - C54787 * C897 +
             C54844 * C2909 - C54788 * C2975 + C54845 * C6626 -
             C54789 * C6793) *
                C265 +
            (C54842 * C568 - C54786 * C630 + C54843 * C1318 - C54787 * C1394 +
             C54844 * C3257 - C54788 * C3315 + C54845 * C7402 -
             C54789 * C7522) *
                C139835) *
               C139731 * C1565 +
           ((C54786 * C1654 - C54842 * C1569 + C54787 * C3521 - C54843 * C3439 +
             C54788 * C7864 - C54844 * C7753 + C54789 * C10529 -
             C54845 * C10395) *
                C265 +
            (C54786 * C2151 - C54842 * C2075 + C54787 * C3957 - C54843 * C3883 +
             C54788 * C8527 - C54844 * C8423 + C54789 * C11173 -
             C54845 * C11063) *
                C139835) *
               C139731 * C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47134 * C183 - C47216 * C108 + C139873 * C896 - C47217 * C813) *
                 C265 +
             (C47134 * C629 - C47216 * C567 + C139873 * C1393 -
              C47217 * C1317) *
                 C139835) *
                C47131 +
            ((C47219 - C47220 + C47221 - C47222) * C265 +
             (C47745 - C47746 + C47747 - C47748) * C139835) *
                C47132 +
            C47762 * C47133) *
               C1565 +
           (((C47216 * C1570 - C47134 * C1653 + C47217 * C3438 -
              C139873 * C3520) *
                 C265 +
             (C47216 * C2074 - C47134 * C2150 + C47217 * C3882 -
              C139873 * C3956) *
                 C139835) *
                C47131 +
            ((C49056 - C49057 + C49058 - C49059) * C265 +
             (C49688 - C49689 + C49690 - C49691) * C139835) *
                C47132 +
            ((C49064 - C49065 + C49066 - C49067) * C265 +
             (C49692 - C49693 + C49694 - C49695) * C139835) *
                C47133) *
               C140002) *
              C139792 * C808 +
          ((((C47220 - C47219 + C47222 - C47221) * C265 +
             (C47746 - C47745 + C47748 - C47747) * C139835) *
                C47131 +
            ((C47228 - C47227 + C47230 - C47229) * C265 +
             (C47751 - C47750 + C47753 - C47752) * C139835) *
                C47132 +
            ((C47235 - C47236 + C47237 - C47238) * C265 +
             (C47754 - C47755 + C47756 - C47757) * C139835) *
                C47133) *
               C1565 +
           (((C49057 - C49056 + C49059 - C49058) * C265 +
             (C49689 - C49688 + C49691 - C49690) * C139835) *
                C47131 +
            ((C49065 - C49064 + C49067 - C49066) * C265 +
             (C49693 - C49692 + C49695 - C49694) * C139835) *
                C47132 +
            ((C47134 * C1656 - C47216 * C1567 + C139873 * C3523 -
              C47217 * C3441) *
                 C265 +
             (C47134 * C2153 - C47216 * C2077 + C139873 * C3959 -
              C47217 * C3885) *
                 C139835) *
                C47133) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47134 * C183 - C47216 * C108 + C139873 * C896 - C47217 * C813) *
                C14015 +
            (C47134 * C629 - C47216 * C567 + C139873 * C1393 - C47217 * C1317) *
                C13856 +
            (C61756 - C61757 + C61758 - C61759) * C14016 +
            (C62434 - C62435 + C62436 - C62437) * C13857 +
            (C61764 - C61765 + C61766 - C61767) * C14017 +
            (C62438 - C62439 + C62440 - C62441) * C13858) *
               C139731 * C1565 +
           ((C61757 - C61756 + C61759 - C61758) * C14015 +
            (C62435 - C62434 + C62437 - C62436) * C13856 +
            (C61765 - C61764 + C61767 - C61766) * C14016 +
            (C62439 - C62438 + C62441 - C62440) * C13857 +
            (C47216 * C15623 - C47134 * C15788 + C47217 * C18302 -
             C139873 * C18422) *
                C14017 +
            (C47216 * C16401 - C47134 * C16521 + C47217 * C18962 -
             C139873 * C19068) *
                C13858) *
               C139731 * C140002) *
              C139792 * C808 +
          (((C47220 - C47219 + C47222 - C47221) * C14015 +
            (C47746 - C47745 + C47748 - C47747) * C13856 +
            (C49056 - C49057 + C49058 - C49059) * C14016 +
            (C49688 - C49689 + C49690 - C49691) * C13857 +
            (C61772 - C61773 + C61774 - C61775) * C14017 +
            (C62442 - C62443 + C62444 - C62445) * C13858) *
               C139731 * C1565 +
           ((C49057 - C49056 + C49059 - C49058) * C14015 +
            (C49689 - C49688 + C49691 - C49690) * C13856 +
            (C61773 - C61772 + C61775 - C61774) * C14016 +
            (C62443 - C62442 + C62445 - C62444) * C13857 +
            (C47134 * C15789 - C47216 * C15622 + C139873 * C18423 -
             C47217 * C18303) *
                C14017 +
            (C47134 * C16522 - C47216 * C16402 + C139873 * C19069 -
             C47217 * C18963) *
                C13858) *
               C139731 * C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eezz[65] +=
        (-std::pow(Pi, 2.5) *
         ((((C265 * C266 - C701 * C108 - C265 * C567 + C139835 * C702) *
                C54786 +
            C7652 * C54787 + C7653 * C54788 + C10296 * C54789) *
               C139731 * C1565 -
           ((C265 * C10630 - C701 * C10394 - C265 * C11062 + C139835 * C11272) *
                C54789 +
            C11287 * C54788 + C11288 * C54787 +
            (C265 * C1741 - C701 * C1570 - C265 * C2074 + C139835 * C2230) *
                C54786) *
               C139731 * C140002) *
              C139792 * C808 +
          ((C2253 * C54786 + C8651 * C54787 + C8650 * C54788 +
            (C265 * C10631 - C701 * C10395 - C265 * C11063 + C139835 * C11273) *
                C54789) *
               C139731 * C140002 -
           (C7654 * C54789 + C6525 * C54788 + C1496 * C54787 + C733 * C54786) *
               C139731 * C1565) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C265 * C266 - C701 * C108 - C265 * C567 + C139835 * C702) *
                 C47134 +
             C7652 * C139873) *
                C47131 +
            (C47837 + C47838) * C47132 + C47843 * C47133) *
               C1565 -
           ((C49794 + C49795) * C47133 + (C49796 + C49797) * C47132 +
            (C11288 * C139873 +
             (C265 * C1741 - C701 * C1570 - C265 * C2074 + C139835 * C2230) *
                 C47134) *
                C47131) *
               C140002) *
              C139792 * C808 +
          (((C49797 + C49796) * C47131 + (C49795 + C49794) * C47132 +
            (C2251 * C47134 +
             (C265 * C3597 - C701 * C3441 - C265 * C3885 + C139835 * C4029) *
                 C139873) *
                C47133) *
               C140002 -
           ((C47841 + C47842) * C47133 + (C47840 + C47839) * C47132 +
            (C47838 + C47837) * C47131) *
               C1565) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C14015 * C266 - C14516 * C108 - C14015 * C567 + C13856 * C702 +
             C14016 * C1741 - C14517 * C1570 - C14016 * C2074 + C13857 * C2230 +
             C14017 * C5397 - C14518 * C5273 - C14017 * C5621 +
             C13858 * C5733) *
                C47134 +
            (C61529 + C61530 + C61531) * C139873) *
               C139731 * C1565 -
           ((C14017 * C18532 - C14518 * C18302 - C14017 * C18962 +
             C13858 * C19172 + C14016 * C13298 - C14517 * C13126 -
             C14016 * C13618 + C13857 * C13778 + C14015 * C3594 -
             C14516 * C3438 - C14015 * C3882 + C13856 * C4026) *
                C139873 +
            (C14017 * C15912 - C14518 * C15623 - C14017 * C16401 +
             C13858 * C16633 + C14016 * C5397 - C14517 * C5273 -
             C14016 * C5621 + C13857 * C5733 + C14015 * C1741 - C14516 * C1570 -
             C14015 * C2074 + C13856 * C2230) *
                C47134) *
               C139731 * C140002) *
              C139792 * C808 +
          (((C16656 + C16655 + C16654) * C47134 +
            (C14015 * C3595 - C14516 * C3439 - C14015 * C3883 + C13856 * C4027 +
             C14016 * C13299 - C14517 * C13127 - C14016 * C13619 +
             C13857 * C13780 + C14017 * C18533 - C14518 * C18303 -
             C14017 * C18963 + C13858 * C19173) *
                C139873) *
               C139731 * C140002 -
           ((C15522 + C15523 + C15524) * C139873 +
            (C14558 + C14557 + C14556) * C47134) *
               C139731 * C1565) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eexx[66] +=
        (-std::pow(Pi, 2.5) *
         ((((C54790 * C114 - C54791 * C108 - C54790 * C115 + C139731 * C126) *
                C139835 * C54786 +
            C55309 * C54787 + C55310 * C54788 + C55311 * C54789) *
               C139809 * C2322 -
           ((C54790 * C9611 - C54791 * C9609 - C54790 * C9612 +
             C139731 * C9615) *
                C139835 * C54789 +
            C55311 * C54788 + C55310 * C54787 + C55309 * C54786) *
               C139809 * C140000) *
              C2324 +
          ((C55312 * C54786 + C55313 * C54787 + C55314 * C54788 +
            (C54790 * C9613 - C54791 * C9610 - C54790 * C9614 +
             C139731 * C9616) *
                C139835 * C54789) *
               C139809 * C140000 -
           (C55314 * C54789 + C55313 * C54788 + C55312 * C54787 +
            (C54790 * C116 - C54791 * C109 - C54790 * C117 + C139731 * C127) *
                C139835 * C54786) *
               C139809 * C2322) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47136 * C114 - C47137 * C108 - C47136 * C115 + C47131 * C126 +
             C47138 * C116 - C47139 * C109 - C47138 * C117 + C47132 * C127 +
             C47140 * C118 - C47141 * C110 - C47140 * C119 + C47133 * C128) *
                C139835 * C47134 +
            (C47978 + C47979 + C47980) * C139835 * C139873) *
               C139809 * C2322 -
           ((C47140 * C2916 - C47141 * C2910 - C47140 * C2917 + C47133 * C2922 +
             C47138 * C2914 - C47139 * C2909 - C47138 * C2915 + C47132 * C2921 +
             C47136 * C2912 - C47137 * C2908 - C47136 * C2913 +
             C47131 * C2920) *
                C139835 * C139873 +
            (C47980 + C47979 + C47978) * C139835 * C47134) *
               C139809 * C140000) *
              C2324 +
          (((C47981 + C47982 + C47983) * C139835 * C47134 +
            (C47136 * C2914 - C47137 * C2909 - C47136 * C2915 + C47131 * C2921 +
             C47138 * C2916 - C47139 * C2910 - C47138 * C2917 + C47132 * C2922 +
             C47140 * C2918 - C47141 * C2911 - C47140 * C2919 +
             C47133 * C2923) *
                C139835 * C139873) *
               C139809 * C140000 -
           ((C47983 + C47982 + C47981) * C139835 * C139873 +
            (C47140 * C120 - C47141 * C111 - C47140 * C121 + C47133 * C129 +
             C47138 * C118 - C47139 * C110 - C47138 * C119 + C47132 * C128 +
             C47136 * C116 - C47137 * C109 - C47136 * C117 + C47131 * C127) *
                C139835 * C47134) *
               C139809 * C2322) *
              C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C54790 * C114 - C54791 * C108 - C54790 * C115 + C139731 * C126) *
                 C13856 +
             C61654 * C13857 + C61655 * C13858) *
                C47134 +
            (C60664 + C60665 + C60688) * C139873) *
               C139809 * C2322 -
           (((C54790 * C13134 - C54791 * C13128 - C54790 * C13135 +
              C139731 * C13140) *
                 C13858 +
             C57670 * C13857 + C55304 * C13856) *
                C139873 +
            (C60688 + C60665 + C60664) * C47134) *
               C139809 * C140000) *
              C2324 +
          (((C60670 + C60689 + C60690) * C47134 +
            (C55307 * C13856 +
             (C54790 * C7756 - C54791 * C7753 - C54790 * C7757 +
              C139731 * C7762) *
                 C13857 +
             (C54790 * C13136 - C54791 * C13129 - C54790 * C13137 +
              C139731 * C13141) *
                 C13858) *
                C139873) *
               C139809 * C140000 -
           ((C60690 + C60689 + C60670) * C139873 +
            (C61657 * C13858 + C61656 * C13857 +
             (C54790 * C116 - C54791 * C109 - C54790 * C117 + C139731 * C127) *
                 C13856) *
                C47134) *
               C139809 * C2322) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eexy[66] +=
        (-std::pow(Pi, 2.5) *
         ((((C54786 * C183 - C54842 * C108 + C54787 * C896 - C54843 * C813 +
             C54788 * C2974 - C54844 * C2908 + C54789 * C6792 -
             C54845 * C6627) *
                C54790 +
            (C54786 * C189 - C54842 * C115 + C54787 * C901 - C54843 * C822 +
             C54788 * C2978 - C54844 * C2913 + C54789 * C6795 -
             C54845 * C6632) *
                C139731) *
               C139835 * C139809 * C2322 +
           ((C54842 * C813 - C54786 * C896 + C54843 * C2908 - C54787 * C2974 +
             C54844 * C6627 - C54788 * C6792 + C54845 * C9609 -
             C54789 * C9707) *
                C54790 +
            (C54842 * C822 - C54786 * C901 + C54843 * C2913 - C54787 * C2978 +
             C54844 * C6632 - C54788 * C6795 + C54845 * C9612 -
             C54789 * C9709) *
                C139731) *
               C139835 * C139809 * C140000) *
              C2324 +
          (((C54842 * C109 - C54786 * C184 + C54843 * C812 - C54787 * C897 +
             C54844 * C2909 - C54788 * C2975 + C54845 * C6626 -
             C54789 * C6793) *
                C54790 +
            (C54842 * C117 - C54786 * C190 + C54843 * C820 - C54787 * C902 +
             C54844 * C2915 - C54788 * C2979 + C54845 * C6630 -
             C54789 * C6796) *
                C139731) *
               C139835 * C139809 * C2322 +
           ((C54786 * C897 - C54842 * C812 + C54787 * C2975 - C54843 * C2909 +
             C54788 * C6793 - C54844 * C6626 + C54789 * C9708 -
             C54845 * C9610) *
                C54790 +
            (C54786 * C902 - C54842 * C820 + C54787 * C2979 - C54843 * C2915 +
             C54788 * C6796 - C54844 * C6630 + C54789 * C9710 -
             C54845 * C9614) *
                C139731) *
               C139835 * C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47134 * C183 - C47216 * C108 + C139873 * C896 - C47217 * C813) *
                C47136 +
            (C47134 * C189 - C47216 * C115 + C139873 * C901 - C47217 * C822) *
                C47131 +
            (C47219 - C47220 + C47221 - C47222) * C47138 +
            (C47223 - C47224 + C47225 - C47226) * C47132 + C47247 * C47140 +
            C47248 * C47133) *
               C139835 * C139809 * C2322 +
           ((C47216 * C813 - C47134 * C896 + C47217 * C2908 - C139873 * C2974) *
                C47136 +
            (C47216 * C822 - C47134 * C901 + C47217 * C2913 - C139873 * C2978) *
                C47131 +
            (C48082 - C48083 + C48084 - C48085) * C47138 +
            (C48086 - C48087 + C48088 - C48089) * C47132 +
            (C48090 - C48091 + C48092 - C48093) * C47140 +
            (C48094 - C48095 + C48096 - C48097) * C47133) *
               C139835 * C139809 * C140000) *
              C2324 +
          (((C47220 - C47219 + C47222 - C47221) * C47136 +
            (C47224 - C47223 + C47226 - C47225) * C47131 +
            (C47228 - C47227 + C47230 - C47229) * C47138 +
            (C47232 - C47231 + C47234 - C47233) * C47132 +
            (C47235 - C47236 + C47237 - C47238) * C47140 +
            (C47239 - C47240 + C47241 - C47242) * C47133) *
               C139835 * C139809 * C2322 +
           ((C48083 - C48082 + C48085 - C48084) * C47136 +
            (C48087 - C48086 + C48089 - C48088) * C47131 +
            (C48091 - C48090 + C48093 - C48092) * C47138 +
            (C48095 - C48094 + C48097 - C48096) * C47132 +
            (C47134 * C899 - C47216 * C810 + C139873 * C2977 - C47217 * C2911) *
                C47140 +
            (C47134 * C904 - C47216 * C816 + C139873 * C2981 - C47217 * C2919) *
                C47133) *
               C139835 * C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C47134 * C183 - C47216 * C108 + C139873 * C896 - C47217 * C813) *
                 C54790 +
             (C47134 * C189 - C47216 * C115 + C139873 * C901 - C47217 * C822) *
                 C139731) *
                C13856 +
            ((C61756 - C61757 + C61758 - C61759) * C54790 +
             (C61760 - C61761 + C61762 - C61763) * C139731) *
                C13857 +
            ((C61764 - C61765 + C61766 - C61767) * C54790 +
             (C61768 - C61769 + C61770 - C61771) * C139731) *
                C13858) *
               C139809 * C2322 +
           (((C47216 * C813 - C47134 * C896 + C47217 * C2908 -
              C139873 * C2974) *
                 C54790 +
             (C47216 * C822 - C47134 * C901 + C47217 * C2913 -
              C139873 * C2978) *
                 C139731) *
                C13856 +
            ((C47216 * C3438 - C47134 * C3520 + C47217 * C7754 -
              C139873 * C7863) *
                 C54790 +
             (C47216 * C3443 - C47134 * C3524 + C47217 * C7759 -
              C139873 * C7866) *
                 C139731) *
                C13857 +
            ((C47216 * C13126 - C47134 * C13216 + C47217 * C13128 -
              C139873 * C13217) *
                 C54790 +
             (C47216 * C13131 - C47134 * C13220 + C47217 * C13135 -
              C139873 * C13221) *
                 C139731) *
                C13858) *
               C139809 * C140000) *
              C2324 +
          ((((C47220 - C47219 + C47222 - C47221) * C54790 +
             (C47224 - C47223 + C47226 - C47225) * C139731) *
                C13856 +
            ((C49056 - C49057 + C49058 - C49059) * C54790 +
             (C49060 - C49061 + C49062 - C49063) * C139731) *
                C13857 +
            ((C61772 - C61773 + C61774 - C61775) * C54790 +
             (C61776 - C61777 + C61778 - C61779) * C139731) *
                C13858) *
               C139809 * C2322 +
           (((C48083 - C48082 + C48085 - C48084) * C54790 +
             (C48087 - C48086 + C48089 - C48088) * C139731) *
                C13856 +
            ((C47134 * C3521 - C47216 * C3439 + C139873 * C7864 -
              C47217 * C7753) *
                 C54790 +
             (C47134 * C3525 - C47216 * C3445 + C139873 * C7867 -
              C47217 * C7757) *
                 C139731) *
                C13857 +
            ((C47134 * C13218 - C47216 * C13127 + C139873 * C13219 -
              C47217 * C13129) *
                 C54790 +
             (C47134 * C13222 - C47216 * C13133 + C139873 * C13223 -
              C47217 * C13137) *
                 C139731) *
                C13858) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eexz[66] +=
        (-std::pow(Pi, 2.5) *
         (((((C139835 * C266 - C265 * C108) * C54790 +
             (C139835 * C272 - C265 * C115) * C139731) *
                C54786 +
            ((C6915 - C6916) * C54790 + (C6917 - C6918) * C139731) * C54787 +
            (C9790 * C54790 + C9791 * C139731) * C54788 +
            ((C9795 - C9794) * C54790 + (C9797 - C9796) * C139731) * C54789) *
               C139809 * C2322 +
           (((C6916 - C6915) * C54790 + (C6918 - C6917) * C139731) * C54786 +
            ((C6922 - C6921) * C54790 + (C6924 - C6923) * C139731) * C54787 +
            ((C9794 - C9795) * C54790 + (C9796 - C9797) * C139731) * C54788 +
            ((C265 * C9609 - C139835 * C9785) * C54790 +
             (C265 * C9612 - C139835 * C9787) * C139731) *
                C54789) *
               C139809 * C140000) *
              C2324 +
          ((((C280 - C279) * C54790 + (C282 - C281) * C139731) * C54786 +
            (C6927 * C54790 + C6928 * C139731) * C54787 +
            (C6929 * C54790 + C6930 * C139731) * C54788 +
            ((C6931 - C6932) * C54790 + (C6933 - C6934) * C139731) * C54789) *
               C139809 * C2322 +
           ((C6919 * C54790 + C6920 * C139731) * C54786 +
            (C6925 * C54790 + C6926 * C139731) * C54787 +
            ((C6932 - C6931) * C54790 + (C6934 - C6933) * C139731) * C54788 +
            ((C139835 * C9786 - C265 * C9610) * C54790 +
             (C139835 * C9788 - C265 * C9614) * C139731) *
                C54789) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C139835 * C266 - C265 * C108) * C47136 +
             (C139835 * C272 - C265 * C115) * C47131 + (C279 - C280) * C47138 +
             (C281 - C282) * C47132 + C295 * C47140 + C296 * C47133) *
                C47134 +
            ((C6915 - C6916) * C47136 + (C6917 - C6918) * C47131 +
             C6919 * C47138 + C6920 * C47132 + C21967 * C47140 +
             C21968 * C47133) *
                C139873) *
               C139809 * C2322 +
           (((C6916 - C6915) * C47136 + (C6918 - C6917) * C47131 +
             C6927 * C47138 + C6928 * C47132 + C22843 * C47140 +
             C22844 * C47133) *
                C47134 +
            ((C6922 - C6921) * C47136 + (C6924 - C6923) * C47131 +
             C6929 * C47138 + C6930 * C47132 + (C6000 - C6001) * C47140 +
             (C6002 - C6003) * C47133) *
                C139873) *
               C139809 * C140000) *
              C2324 +
          ((((C280 - C279) * C47136 + (C282 - C281) * C47131 +
             (C284 - C283) * C47138 + (C286 - C285) * C47132 +
             (C288 - C287) * C47140 + (C290 - C289) * C47133) *
                C47134 +
            (C6927 * C47136 + C6928 * C47131 + C22843 * C47138 +
             C22844 * C47132 + (C1003 - C1004) * C47140 +
             (C1005 - C1006) * C47133) *
                C139873) *
               C139809 * C2322 +
           ((C6919 * C47136 + C6920 * C47131 + C21967 * C47138 +
             C21968 * C47132 + (C1004 - C1003) * C47140 +
             (C1006 - C1005) * C47133) *
                C47134 +
            (C6925 * C47136 + C6926 * C47131 + (C6001 - C6000) * C47138 +
             (C6003 - C6002) * C47132 +
             (C139835 * C3035 - C265 * C2911) * C47140 +
             (C139835 * C3039 - C265 * C2919) * C47133) *
                C139873) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C13856 * C266 - C14015 * C108 + C13857 * C1741 - C14016 * C1570 +
              C13858 * C5397 - C14017 * C5273) *
                 C54790 +
             (C13856 * C272 - C14015 * C115 + C13857 * C1746 - C14016 * C1579 +
              C13858 * C5401 - C14017 * C5278) *
                 C139731) *
                C47134 +
            ((C60887 - C60888 + C60889 - C60890 + C60891 - C60892) * C54790 +
             (C60893 - C60894 + C60895 - C60896 + C60897 - C60898) * C139731) *
                C139873) *
               C139809 * C2322 +
           (((C60888 - C60887 + C60890 - C60889 + C60892 - C60891) * C54790 +
             (C60894 - C60893 + C60896 - C60895 + C60898 - C60897) * C139731) *
                C47134 +
            ((C14015 * C2908 - C13856 * C3032 + C14016 * C7754 -
              C13857 * C7979 + C14017 * C13128 - C13858 * C13300) *
                 C54790 +
             (C14015 * C2913 - C13856 * C3036 + C14016 * C7759 -
              C13857 * C7982 + C14017 * C13135 - C13858 * C13304) *
                 C139731) *
                C139873) *
               C139809 * C140000) *
              C2324 +
          ((((C14020 - C14019 + C14022 - C14021 + C14024 - C14023) * C54790 +
             (C14026 - C14025 + C14028 - C14027 + C14030 - C14029) * C139731) *
                C47134 +
            ((C14872 - C14873 + C14874 - C14875 + C14876 - C14877) * C54790 +
             (C14878 - C14879 + C14880 - C14881 + C14882 - C14883) * C139731) *
                C139873) *
               C139809 * C2322 +
           (((C14873 - C14872 + C14875 - C14874 + C14877 - C14876) * C54790 +
             (C14879 - C14878 + C14881 - C14880 + C14883 - C14882) * C139731) *
                C47134 +
            ((C13856 * C3033 - C14015 * C2909 + C13857 * C7980 -
              C14016 * C7753 + C13858 * C13301 - C14017 * C13129) *
                 C54790 +
             (C13856 * C3037 - C14015 * C2915 + C13857 * C7983 -
              C14016 * C7757 + C13858 * C13305 - C14017 * C13137) *
                 C139731) *
                C139873) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[66] +=
        (-std::pow(Pi, 2.5) *
         ((((C139731 * C114 - C54790 * C108) * C54842 +
            (C139731 * C354 - C54790 * C348) * C54786 +
            (C55513 - C55514) * C54843 + (C55515 - C55516) * C54787 +
            (C55517 - C55518) * C54844 + (C55519 - C55520) * C54788 +
            (C55521 - C55522) * C54845 + (C55523 - C55524) * C54789) *
               C139835 * C139809 * C2322 +
           ((C55514 - C55513) * C54842 + (C55516 - C55515) * C54786 +
            (C55518 - C55517) * C54843 + (C55520 - C55519) * C54787 +
            (C55522 - C55521) * C54844 + (C55524 - C55523) * C54788 +
            (C54790 * C9609 - C139731 * C9611) * C54845 +
            (C54790 * C9876 - C139731 * C9878) * C54789) *
               C139835 * C139809 * C140000) *
              C2324 +
          (((C54790 * C109 - C139731 * C116) * C54842 +
            (C54790 * C349 - C139731 * C355) * C54786 +
            (C55525 - C55526) * C54843 + (C55527 - C55528) * C54787 +
            (C55529 - C55530) * C54844 + (C55531 - C55532) * C54788 +
            (C55533 - C55534) * C54845 + (C55535 - C55536) * C54789) *
               C139835 * C139809 * C2322 +
           ((C55526 - C55525) * C54842 + (C55528 - C55527) * C54786 +
            (C55530 - C55529) * C54843 + (C55532 - C55531) * C54787 +
            (C55534 - C55533) * C54844 + (C55536 - C55535) * C54788 +
            (C139731 * C9613 - C54790 * C9610) * C54845 +
            (C139731 * C9879 - C54790 * C9877) * C54789) *
               C139835 * C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47131 * C114 - C47136 * C108 + C47132 * C116 - C47138 * C109 +
             C47133 * C118 - C47140 * C110) *
                C47216 +
            (C47131 * C354 - C47136 * C348 + C47132 * C355 - C47138 * C349 +
             C47133 * C356 - C47140 * C350) *
                C47134 +
            (C48294 - C48295 + C48296 - C48297 + C48298 - C48299) * C47217 +
            (C48300 - C48301 + C48302 - C48303 + C48304 - C48305) * C139873) *
               C139835 * C139809 * C2322 +
           ((C48295 - C48294 + C48297 - C48296 + C48299 - C48298) * C47216 +
            (C48301 - C48300 + C48303 - C48302 + C48305 - C48304) * C47134 +
            (C47136 * C2908 - C47131 * C2912 + C47138 * C2909 - C47132 * C2914 +
             C47140 * C2910 - C47133 * C2916) *
                C47217 +
            (C47136 * C3090 - C47131 * C3094 + C47138 * C3091 - C47132 * C3095 +
             C47140 * C3092 - C47133 * C3096) *
                C139873) *
               C139835 * C139809 * C140000) *
              C2324 +
          (((C47136 * C109 - C47131 * C116 + C47138 * C110 - C47132 * C118 +
             C47140 * C111 - C47133 * C120) *
                C47216 +
            (C47136 * C349 - C47131 * C355 + C47138 * C350 - C47132 * C356 +
             C47140 * C351 - C47133 * C357) *
                C47134 +
            (C48306 - C48307 + C48308 - C48309 + C48310 - C48311) * C47217 +
            (C48312 - C48313 + C48314 - C48315 + C48316 - C48317) * C139873) *
               C139835 * C139809 * C2322 +
           ((C48307 - C48306 + C48309 - C48308 + C48311 - C48310) * C47216 +
            (C48313 - C48312 + C48315 - C48314 + C48317 - C48316) * C47134 +
            (C47131 * C2914 - C47136 * C2909 + C47132 * C2916 - C47138 * C2910 +
             C47133 * C2918 - C47140 * C2911) *
                C47217 +
            (C47131 * C3095 - C47136 * C3091 + C47132 * C3096 - C47138 * C3092 +
             C47133 * C3097 - C47140 * C3093) *
                C139873) *
               C139835 * C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C139731 * C114 - C54790 * C108) * C47216 +
             (C139731 * C354 - C54790 * C348) * C47134 +
             (C55513 - C55514) * C47217 + (C55515 - C55516) * C139873) *
                C13856 +
            ((C61976 - C61977) * C47216 + (C61978 - C61979) * C47134 +
             (C57884 - C57883) * C47217 + (C57886 - C57885) * C139873) *
                C13857 +
            ((C61980 - C61981) * C47216 + (C61982 - C61983) * C47134 +
             (C60997 - C60998) * C47217 + (C60999 - C61000) * C139873) *
                C13858) *
               C139809 * C2322 +
           (((C55514 - C55513) * C47216 + (C55516 - C55515) * C47134 +
             (C55518 - C55517) * C47217 + (C55520 - C55519) * C139873) *
                C13856 +
            ((C57883 - C57884) * C47216 + (C57885 - C57886) * C47134 +
             (C57887 - C57888) * C47217 + (C57889 - C57890) * C139873) *
                C13857 +
            ((C60998 - C60997) * C47216 + (C61000 - C60999) * C47134 +
             (C54790 * C13128 - C139731 * C13134) * C47217 +
             (C54790 * C13382 - C139731 * C13386) * C139873) *
                C13858) *
               C139809 * C140000) *
              C2324 +
          ((((C54790 * C109 - C139731 * C116) * C47216 +
             (C54790 * C349 - C139731 * C355) * C47134 +
             (C55525 - C55526) * C47217 + (C55527 - C55528) * C139873) *
                C13856 +
            ((C61984 - C61985) * C47216 + (C61986 - C61987) * C47134 +
             (C61001 - C61002) * C47217 + (C61003 - C61004) * C139873) *
                C13857 +
            ((C61988 - C61989) * C47216 + (C61990 - C61991) * C47134 +
             (C61005 - C61006) * C47217 + (C61007 - C61008) * C139873) *
                C13858) *
               C139809 * C2322 +
           (((C55526 - C55525) * C47216 + (C55528 - C55527) * C47134 +
             (C55530 - C55529) * C47217 + (C55532 - C55531) * C139873) *
                C13856 +
            ((C61002 - C61001) * C47216 + (C61004 - C61003) * C47134 +
             (C139731 * C7756 - C54790 * C7753) * C47217 +
             (C139731 * C8095 - C54790 * C8092) * C139873) *
                C13857 +
            ((C61006 - C61005) * C47216 + (C61008 - C61007) * C47134 +
             (C139731 * C13136 - C54790 * C13129) * C47217 +
             (C139731 * C13387 - C54790 * C13383) * C139873) *
                C13858) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[66] +=
        (-std::pow(Pi, 2.5) *
         (((C54842 * C183 - C54996 * C108 - C54842 * C348 + C54786 * C411 +
            C54843 * C896 - C54997 * C813 - C54843 * C1072 + C54787 * C1151 +
            C54844 * C2974 - C54998 * C2908 - C54844 * C3090 + C54788 * C3148 +
            C54845 * C6792 - C54999 * C6627 - C54845 * C7032 + C54789 * C7169) *
               C139731 * C139835 * C139809 * C2322 -
           (C54845 * C9707 - C54999 * C9609 - C54845 * C9876 + C54789 * C9968 +
            C54844 * C6792 - C54998 * C6627 - C54844 * C7032 + C54788 * C7169 +
            C54843 * C2974 - C54997 * C2908 - C54843 * C3090 + C54787 * C3148 +
            C54842 * C896 - C54996 * C813 - C54842 * C1072 + C54786 * C1151) *
               C139731 * C139835 * C139809 * C140000) *
              C2324 +
          ((C54842 * C897 - C54996 * C812 - C54842 * C1073 + C54786 * C1150 +
            C54843 * C2975 - C54997 * C2909 - C54843 * C3091 + C54787 * C3149 +
            C54844 * C6793 - C54998 * C6626 - C54844 * C7033 + C54788 * C7168 +
            C54845 * C9708 - C54999 * C9610 - C54845 * C9877 + C54789 * C9969) *
               C139731 * C139835 * C139809 * C140000 -
           (C54845 * C6793 - C54999 * C6626 - C54845 * C7033 + C54789 * C7168 +
            C54844 * C2975 - C54998 * C2909 - C54844 * C3091 + C54788 * C3149 +
            C54843 * C897 - C54997 * C812 - C54843 * C1073 + C54787 * C1150 +
            C54842 * C184 - C54996 * C109 - C54842 * C349 + C54786 * C412) *
               C139731 * C139835 * C139809 * C2322) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47216 * C183 - C47470 * C108 - C47216 * C348 + C47134 * C411 +
             C47217 * C896 - C47471 * C813 - C47217 * C1072 + C139873 * C1151) *
                C47131 +
            (C47509 + C47510) * C47132 + C47515 * C47133) *
               C139835 * C139809 * C2322 -
           ((C48440 + C48441) * C47133 + (C48442 + C48443) * C47132 +
            (C47217 * C2974 - C47471 * C2908 - C47217 * C3090 +
             C139873 * C3148 + C47216 * C896 - C47470 * C813 - C47216 * C1072 +
             C47134 * C1151) *
                C47131) *
               C139835 * C139809 * C140000) *
              C2324 +
          (((C48443 + C48442) * C47131 + (C48441 + C48440) * C47132 +
            (C47216 * C899 - C47470 * C810 - C47216 * C1075 + C47134 * C1148 +
             C47217 * C2977 - C47471 * C2911 - C47217 * C3093 +
             C139873 * C3151) *
                C47133) *
               C139835 * C139809 * C140000 -
           ((C47513 + C47514) * C47133 + (C47512 + C47511) * C47132 +
            (C47510 + C47509) * C47131) *
               C139835 * C139809 * C2322) *
              C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47216 * C183 - C47470 * C108 - C47216 * C348 + C47134 * C411 +
             C47217 * C896 - C47471 * C813 - C47217 * C1072 + C139873 * C1151) *
                C139731 * C13856 +
            (C62126 + C62127) * C139731 * C13857 +
            (C62128 + C62129) * C139731 * C13858) *
               C139809 * C2322 -
           ((C47217 * C13217 - C47471 * C13128 - C47217 * C13382 +
             C139873 * C13463 + C47216 * C13216 - C47470 * C13126 -
             C47216 * C13380 + C47134 * C13462) *
                C139731 * C13858 +
            (C47217 * C7863 - C47471 * C7754 - C47217 * C8091 +
             C139873 * C8196 + C47216 * C3520 - C47470 * C3438 -
             C47216 * C3668 + C47134 * C3742) *
                C139731 * C13857 +
            (C47217 * C2974 - C47471 * C2908 - C47217 * C3090 +
             C139873 * C3148 + C47216 * C896 - C47470 * C813 - C47216 * C1072 +
             C47134 * C1151) *
                C139731 * C13856) *
               C139809 * C140000) *
              C2324 +
          (((C48443 + C48442) * C139731 * C13856 +
            (C47216 * C3521 - C47470 * C3439 - C47216 * C3669 + C47134 * C3743 +
             C47217 * C7864 - C47471 * C7753 - C47217 * C8092 +
             C139873 * C8195) *
                C139731 * C13857 +
            (C47216 * C13218 - C47470 * C13127 - C47216 * C13381 +
             C47134 * C13464 + C47217 * C13219 - C47471 * C13129 -
             C47217 * C13383 + C139873 * C13465) *
                C139731 * C13858) *
               C139809 * C140000 -
           ((C62131 + C62130) * C139731 * C13858 +
            (C49392 + C49393) * C139731 * C13857 +
            (C47510 + C47509) * C139731 * C13856) *
               C139809 * C2322) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[66] +=
        (-std::pow(Pi, 2.5) *
         ((((C139835 * C266 - C265 * C108) * C54842 +
            (C139835 * C495 - C265 * C348) * C54786 + (C6915 - C6916) * C54843 +
            (C7294 - C7295) * C54787 + C9790 * C54844 + C10047 * C54788 +
            (C9795 - C9794) * C54845 + (C10049 - C10048) * C54789) *
               C139731 * C139809 * C2322 +
           ((C6916 - C6915) * C54842 + (C7295 - C7294) * C54786 +
            (C6922 - C6921) * C54843 + (C7297 - C7296) * C54787 +
            (C9794 - C9795) * C54844 + (C10048 - C10049) * C54788 +
            (C265 * C9609 - C139835 * C9785) * C54845 +
            (C265 * C9876 - C139835 * C10044) * C54789) *
               C139731 * C139809 * C140000) *
              C2324 +
          (((C280 - C279) * C54842 + (C503 - C502) * C54786 + C6927 * C54843 +
            C7300 * C54787 + C6929 * C54844 + C7301 * C54788 +
            (C6931 - C6932) * C54845 + (C7302 - C7303) * C54789) *
               C139731 * C139809 * C2322 +
           (C6919 * C54842 + C7298 * C54786 + C6925 * C54843 + C7299 * C54787 +
            (C6932 - C6931) * C54844 + (C7303 - C7302) * C54788 +
            (C139835 * C9786 - C265 * C9610) * C54845 +
            (C139835 * C10045 - C265 * C9877) * C54789) *
               C139731 * C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C139835 * C266 - C265 * C108) * C47216 +
             (C139835 * C495 - C265 * C348) * C47134 +
             (C6915 - C6916) * C47217 + (C7294 - C7295) * C139873) *
                C47131 +
            ((C279 - C280) * C47216 + (C502 - C503) * C47134 + C6919 * C47217 +
             C7298 * C139873) *
                C47132 +
            C47596 * C47133) *
               C139809 * C2322 +
           (((C6916 - C6915) * C47216 + (C7295 - C7294) * C47134 +
             (C6922 - C6921) * C47217 + (C7297 - C7296) * C139873) *
                C47131 +
            (C6927 * C47216 + C7300 * C47134 + C6929 * C47217 +
             C7301 * C139873) *
                C47132 +
            (C22843 * C47216 + C23191 * C47134 + (C6000 - C6001) * C47217 +
             (C6273 - C6274) * C139873) *
                C47133) *
               C139809 * C140000) *
              C2324 +
          ((((C280 - C279) * C47216 + (C503 - C502) * C47134 + C6927 * C47217 +
             C7300 * C139873) *
                C47131 +
            ((C284 - C283) * C47216 + (C506 - C505) * C47134 + C22843 * C47217 +
             C23191 * C139873) *
                C47132 +
            ((C288 - C287) * C47216 + (C509 - C508) * C47134 +
             (C1003 - C1004) * C47217 + (C1250 - C1251) * C139873) *
                C47133) *
               C139809 * C2322 +
           ((C6919 * C47216 + C7298 * C47134 + C6925 * C47217 +
             C7299 * C139873) *
                C47131 +
            (C21967 * C47216 + C22239 * C47134 + (C6001 - C6000) * C47217 +
             (C6274 - C6273) * C139873) *
                C47132 +
            ((C1004 - C1003) * C47216 + (C1251 - C1250) * C47134 +
             (C139835 * C3035 - C265 * C2911) * C47217 +
             (C139835 * C3205 - C265 * C3093) * C139873) *
                C47133) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C13856 * C266 - C14015 * C108 + C13857 * C1741 - C14016 * C1570 +
             C13858 * C5397 - C14017 * C5273) *
                C47216 +
            (C13856 * C495 - C14015 * C348 + C13857 * C1997 - C14016 * C1829 +
             C13858 * C5567 - C14017 * C5455) *
                C47134 +
            (C60887 - C60888 + C60889 - C60890 + C60891 - C60892) * C47217 +
            (C61205 - C61206 + C61207 - C61208 + C61209 - C61210) * C139873) *
               C139731 * C139809 * C2322 +
           ((C60888 - C60887 + C60890 - C60889 + C60892 - C60891) * C47216 +
            (C61206 - C61205 + C61208 - C61207 + C61210 - C61209) * C47134 +
            (C14015 * C2908 - C13856 * C3032 + C14016 * C7754 - C13857 * C7979 +
             C14017 * C13128 - C13858 * C13300) *
                C47217 +
            (C14015 * C3090 - C13856 * C3202 + C14016 * C8091 - C13857 * C8317 +
             C14017 * C13382 - C13858 * C13541) *
                C139873) *
               C139731 * C139809 * C140000) *
              C2324 +
          (((C14020 - C14019 + C14022 - C14021 + C14024 - C14023) * C47216 +
            (C14280 - C14279 + C14282 - C14281 + C14284 - C14283) * C47134 +
            (C14872 - C14873 + C14874 - C14875 + C14876 - C14877) * C47217 +
            (C15196 - C15197 + C15198 - C15199 + C15200 - C15201) * C139873) *
               C139731 * C139809 * C2322 +
           ((C14873 - C14872 + C14875 - C14874 + C14877 - C14876) * C47216 +
            (C15197 - C15196 + C15199 - C15198 + C15201 - C15200) * C47134 +
            (C13856 * C3033 - C14015 * C2909 + C13857 * C7980 - C14016 * C7753 +
             C13858 * C13301 - C14017 * C13129) *
                C47217 +
            (C13856 * C3203 - C14015 * C3091 + C13857 * C8318 - C14016 * C8092 +
             C13858 * C13543 - C14017 * C13383) *
                C139873) *
               C139731 * C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eezx[66] +=
        (-std::pow(Pi, 2.5) *
         (((((C139731 * C114 - C54790 * C108) * C265 +
             (C139731 * C573 - C54790 * C567) * C139835) *
                C54786 +
            ((C55513 - C55514) * C265 + (C55735 - C55736) * C139835) * C54787 +
            ((C55517 - C55518) * C265 + (C55737 - C55738) * C139835) * C54788 +
            ((C55521 - C55522) * C265 + (C55739 - C55740) * C139835) * C54789) *
               C139809 * C2322 +
           (((C55514 - C55513) * C265 + (C55736 - C55735) * C139835) * C54786 +
            ((C55518 - C55517) * C265 + (C55738 - C55737) * C139835) * C54787 +
            ((C55522 - C55521) * C265 + (C55740 - C55739) * C139835) * C54788 +
            ((C54790 * C9609 - C139731 * C9611) * C265 +
             (C54790 * C10123 - C139731 * C10125) * C139835) *
                C54789) *
               C139809 * C140000) *
              C2324 +
          ((((C54790 * C109 - C139731 * C116) * C265 +
             (C54790 * C568 - C139731 * C574) * C139835) *
                C54786 +
            ((C55525 - C55526) * C265 + (C55741 - C55742) * C139835) * C54787 +
            ((C55529 - C55530) * C265 + (C55743 - C55744) * C139835) * C54788 +
            ((C55533 - C55534) * C265 + (C55745 - C55746) * C139835) * C54789) *
               C139809 * C2322 +
           (((C55526 - C55525) * C265 + (C55742 - C55741) * C139835) * C54786 +
            ((C55530 - C55529) * C265 + (C55744 - C55743) * C139835) * C54787 +
            ((C55534 - C55533) * C265 + (C55746 - C55745) * C139835) * C54788 +
            ((C139731 * C9613 - C54790 * C9610) * C265 +
             (C139731 * C10126 - C54790 * C10124) * C139835) *
                C54789) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47131 * C114 - C47136 * C108 + C47132 * C116 - C47138 * C109 +
              C47133 * C118 - C47140 * C110) *
                 C265 +
             (C47131 * C573 - C47136 * C567 + C47132 * C574 - C47138 * C568 +
              C47133 * C575 - C47140 * C569) *
                 C139835) *
                C47134 +
            ((C48294 - C48295 + C48296 - C48297 + C48298 - C48299) * C265 +
             (C48640 - C48641 + C48642 - C48643 + C48644 - C48645) * C139835) *
                C139873) *
               C139809 * C2322 +
           (((C48295 - C48294 + C48297 - C48296 + C48299 - C48298) * C265 +
             (C48641 - C48640 + C48643 - C48642 + C48645 - C48644) * C139835) *
                C47134 +
            ((C47136 * C2908 - C47131 * C2912 + C47138 * C2909 -
              C47132 * C2914 + C47140 * C2910 - C47133 * C2916) *
                 C265 +
             (C47136 * C3256 - C47131 * C3260 + C47138 * C3257 -
              C47132 * C3261 + C47140 * C3258 - C47133 * C3262) *
                 C139835) *
                C139873) *
               C139809 * C140000) *
              C2324 +
          ((((C47136 * C109 - C47131 * C116 + C47138 * C110 - C47132 * C118 +
              C47140 * C111 - C47133 * C120) *
                 C265 +
             (C47136 * C568 - C47131 * C574 + C47138 * C569 - C47132 * C575 +
              C47140 * C570 - C47133 * C576) *
                 C139835) *
                C47134 +
            ((C48306 - C48307 + C48308 - C48309 + C48310 - C48311) * C265 +
             (C48646 - C48647 + C48648 - C48649 + C48650 - C48651) * C139835) *
                C139873) *
               C139809 * C2322 +
           (((C48307 - C48306 + C48309 - C48308 + C48311 - C48310) * C265 +
             (C48647 - C48646 + C48649 - C48648 + C48651 - C48650) * C139835) *
                C47134 +
            ((C47131 * C2914 - C47136 * C2909 + C47132 * C2916 -
              C47138 * C2910 + C47133 * C2918 - C47140 * C2911) *
                 C265 +
             (C47131 * C3261 - C47136 * C3257 + C47132 * C3262 -
              C47138 * C3258 + C47133 * C3263 - C47140 * C3259) *
                 C139835) *
                C139873) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C139731 * C114 - C54790 * C108) * C14015 +
             (C139731 * C573 - C54790 * C567) * C13856 +
             (C61976 - C61977) * C14016 + (C62328 - C62329) * C13857 +
             (C61980 - C61981) * C14017 + (C62330 - C62331) * C13858) *
                C47134 +
            ((C55513 - C55514) * C14015 + (C55735 - C55736) * C13856 +
             (C57884 - C57883) * C14016 + (C58100 - C58099) * C13857 +
             (C60997 - C60998) * C14017 + (C61309 - C61310) * C13858) *
                C139873) *
               C139809 * C2322 +
           (((C55514 - C55513) * C14015 + (C55736 - C55735) * C13856 +
             (C57883 - C57884) * C14016 + (C58099 - C58100) * C13857 +
             (C60998 - C60997) * C14017 + (C61310 - C61309) * C13858) *
                C47134 +
            ((C55518 - C55517) * C14015 + (C55738 - C55737) * C13856 +
             (C57887 - C57888) * C14016 + (C58101 - C58102) * C13857 +
             (C54790 * C13128 - C139731 * C13134) * C14017 +
             (C54790 * C13620 - C139731 * C13624) * C13858) *
                C139873) *
               C139809 * C140000) *
              C2324 +
          ((((C54790 * C109 - C139731 * C116) * C14015 +
             (C54790 * C568 - C139731 * C574) * C13856 +
             (C61984 - C61985) * C14016 + (C62332 - C62333) * C13857 +
             (C61988 - C61989) * C14017 + (C62334 - C62335) * C13858) *
                C47134 +
            ((C55525 - C55526) * C14015 + (C55741 - C55742) * C13856 +
             (C61001 - C61002) * C14016 + (C61311 - C61312) * C13857 +
             (C61005 - C61006) * C14017 + (C61313 - C61314) * C13858) *
                C139873) *
               C139809 * C2322 +
           (((C55526 - C55525) * C14015 + (C55742 - C55741) * C13856 +
             (C61002 - C61001) * C14016 + (C61312 - C61311) * C13857 +
             (C61006 - C61005) * C14017 + (C61314 - C61313) * C13858) *
                C47134 +
            ((C55530 - C55529) * C14015 + (C55744 - C55743) * C13856 +
             (C139731 * C7756 - C54790 * C7753) * C14016 +
             (C139731 * C8426 - C54790 * C8423) * C13857 +
             (C139731 * C13136 - C54790 * C13129) * C14017 +
             (C139731 * C13625 - C54790 * C13621) * C13858) *
                C139873) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eezy[66] +=
        (-std::pow(Pi, 2.5) *
         ((((C54786 * C183 - C54842 * C108 + C54787 * C896 - C54843 * C813 +
             C54788 * C2974 - C54844 * C2908 + C54789 * C6792 -
             C54845 * C6627) *
                C265 +
            (C54786 * C629 - C54842 * C567 + C54787 * C1393 - C54843 * C1317 +
             C54788 * C3314 - C54844 * C3256 + C54789 * C7521 -
             C54845 * C7401) *
                C139835) *
               C139731 * C139809 * C2322 +
           ((C54842 * C813 - C54786 * C896 + C54843 * C2908 - C54787 * C2974 +
             C54844 * C6627 - C54788 * C6792 + C54845 * C9609 -
             C54789 * C9707) *
                C265 +
            (C54842 * C1317 - C54786 * C1393 + C54843 * C3256 - C54787 * C3314 +
             C54844 * C7401 - C54788 * C7521 + C54845 * C10123 -
             C54789 * C10211) *
                C139835) *
               C139731 * C139809 * C140000) *
              C2324 +
          (((C54842 * C109 - C54786 * C184 + C54843 * C812 - C54787 * C897 +
             C54844 * C2909 - C54788 * C2975 + C54845 * C6626 -
             C54789 * C6793) *
                C265 +
            (C54842 * C568 - C54786 * C630 + C54843 * C1318 - C54787 * C1394 +
             C54844 * C3257 - C54788 * C3315 + C54845 * C7402 -
             C54789 * C7522) *
                C139835) *
               C139731 * C139809 * C2322 +
           ((C54786 * C897 - C54842 * C812 + C54787 * C2975 - C54843 * C2909 +
             C54788 * C6793 - C54844 * C6626 + C54789 * C9708 -
             C54845 * C9610) *
                C265 +
            (C54786 * C1394 - C54842 * C1318 + C54787 * C3315 - C54843 * C3257 +
             C54788 * C7522 - C54844 * C7402 + C54789 * C10212 -
             C54845 * C10124) *
                C139835) *
               C139731 * C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47134 * C183 - C47216 * C108 + C139873 * C896 - C47217 * C813) *
                 C265 +
             (C47134 * C629 - C47216 * C567 + C139873 * C1393 -
              C47217 * C1317) *
                 C139835) *
                C47131 +
            ((C47219 - C47220 + C47221 - C47222) * C265 +
             (C47745 - C47746 + C47747 - C47748) * C139835) *
                C47132 +
            C47762 * C47133) *
               C139809 * C2322 +
           (((C47216 * C813 - C47134 * C896 + C47217 * C2908 -
              C139873 * C2974) *
                 C265 +
             (C47216 * C1317 - C47134 * C1393 + C47217 * C3256 -
              C139873 * C3314) *
                 C139835) *
                C47131 +
            ((C48082 - C48083 + C48084 - C48085) * C265 +
             (C48750 - C48751 + C48752 - C48753) * C139835) *
                C47132 +
            ((C48090 - C48091 + C48092 - C48093) * C265 +
             (C48754 - C48755 + C48756 - C48757) * C139835) *
                C47133) *
               C139809 * C140000) *
              C2324 +
          ((((C47220 - C47219 + C47222 - C47221) * C265 +
             (C47746 - C47745 + C47748 - C47747) * C139835) *
                C47131 +
            ((C47228 - C47227 + C47230 - C47229) * C265 +
             (C47751 - C47750 + C47753 - C47752) * C139835) *
                C47132 +
            ((C47235 - C47236 + C47237 - C47238) * C265 +
             (C47754 - C47755 + C47756 - C47757) * C139835) *
                C47133) *
               C139809 * C2322 +
           (((C48083 - C48082 + C48085 - C48084) * C265 +
             (C48751 - C48750 + C48753 - C48752) * C139835) *
                C47131 +
            ((C48091 - C48090 + C48093 - C48092) * C265 +
             (C48755 - C48754 + C48757 - C48756) * C139835) *
                C47132 +
            ((C47134 * C899 - C47216 * C810 + C139873 * C2977 -
              C47217 * C2911) *
                 C265 +
             (C47134 * C1396 - C47216 * C1320 + C139873 * C3317 -
              C47217 * C3259) *
                 C139835) *
                C47133) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47134 * C183 - C47216 * C108 + C139873 * C896 - C47217 * C813) *
                C14015 +
            (C47134 * C629 - C47216 * C567 + C139873 * C1393 - C47217 * C1317) *
                C13856 +
            (C61756 - C61757 + C61758 - C61759) * C14016 +
            (C62434 - C62435 + C62436 - C62437) * C13857 +
            (C61764 - C61765 + C61766 - C61767) * C14017 +
            (C62438 - C62439 + C62440 - C62441) * C13858) *
               C139731 * C139809 * C2322 +
           ((C47216 * C813 - C47134 * C896 + C47217 * C2908 - C139873 * C2974) *
                C14015 +
            (C47216 * C1317 - C47134 * C1393 + C47217 * C3256 -
             C139873 * C3314) *
                C13856 +
            (C47216 * C3438 - C47134 * C3520 + C47217 * C7754 -
             C139873 * C7863) *
                C14016 +
            (C47216 * C3882 - C47134 * C3956 + C47217 * C8422 -
             C139873 * C8526) *
                C13857 +
            (C47216 * C13126 - C47134 * C13216 + C47217 * C13128 -
             C139873 * C13217) *
                C14017 +
            (C47216 * C13618 - C47134 * C13700 + C47217 * C13620 -
             C139873 * C13701) *
                C13858) *
               C139731 * C139809 * C140000) *
              C2324 +
          (((C47220 - C47219 + C47222 - C47221) * C14015 +
            (C47746 - C47745 + C47748 - C47747) * C13856 +
            (C49056 - C49057 + C49058 - C49059) * C14016 +
            (C49688 - C49689 + C49690 - C49691) * C13857 +
            (C61772 - C61773 + C61774 - C61775) * C14017 +
            (C62442 - C62443 + C62444 - C62445) * C13858) *
               C139731 * C139809 * C2322 +
           ((C48083 - C48082 + C48085 - C48084) * C14015 +
            (C48751 - C48750 + C48753 - C48752) * C13856 +
            (C47134 * C3521 - C47216 * C3439 + C139873 * C7864 -
             C47217 * C7753) *
                C14016 +
            (C47134 * C3957 - C47216 * C3883 + C139873 * C8527 -
             C47217 * C8423) *
                C13857 +
            (C47134 * C13218 - C47216 * C13127 + C139873 * C13219 -
             C47217 * C13129) *
                C14017 +
            (C47134 * C13702 - C47216 * C13619 + C139873 * C13703 -
             C47217 * C13621) *
                C13858) *
               C139731 * C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eezz[66] +=
        (-std::pow(Pi, 2.5) *
         ((((C265 * C266 - C701 * C108 - C265 * C567 + C139835 * C702) *
                C54786 +
            C7652 * C54787 + C7653 * C54788 + C10296 * C54789) *
               C139731 * C139809 * C2322 -
           ((C265 * C9785 - C701 * C9609 - C265 * C10123 + C139835 * C10287) *
                C54789 +
            C10296 * C54788 + C7653 * C54787 + C7652 * C54786) *
               C139731 * C139809 * C140000) *
              C2324 +
          ((C1496 * C54786 + C6525 * C54787 + C7654 * C54788 +
            (C265 * C9786 - C701 * C9610 - C265 * C10124 + C139835 * C10288) *
                C54789) *
               C139731 * C139809 * C140000 -
           (C7654 * C54789 + C6525 * C54788 + C1496 * C54787 + C733 * C54786) *
               C139731 * C139809 * C2322) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C265 * C266 - C701 * C108 - C265 * C567 + C139835 * C702) *
                 C47134 +
             C7652 * C139873) *
                C47131 +
            (C47837 + C47838) * C47132 + C47843 * C47133) *
               C139809 * C2322 -
           ((C48856 + C48857) * C47133 + (C48858 + C48859) * C47132 +
            (C7653 * C139873 + C7652 * C47134) * C47131) *
               C139809 * C140000) *
              C2324 +
          (((C48859 + C48858) * C47131 + (C48857 + C48856) * C47132 +
            (C1494 * C47134 +
             (C265 * C3035 - C701 * C2911 - C265 * C3259 + C139835 * C3371) *
                 C139873) *
                C47133) *
               C139809 * C140000 -
           ((C47841 + C47842) * C47133 + (C47840 + C47839) * C47132 +
            (C47838 + C47837) * C47131) *
               C139809 * C2322) *
              C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C14015 * C266 - C14516 * C108 - C14015 * C567 + C13856 * C702 +
             C14016 * C1741 - C14517 * C1570 - C14016 * C2074 + C13857 * C2230 +
             C14017 * C5397 - C14518 * C5273 - C14017 * C5621 +
             C13858 * C5733) *
                C47134 +
            (C61529 + C61530 + C61531) * C139873) *
               C139731 * C139809 * C2322 -
           ((C14017 * C13300 - C14518 * C13128 - C14017 * C13620 +
             C13858 * C13779 + C14016 * C7979 - C14517 * C7754 -
             C14016 * C8422 + C13857 * C8634 + C14015 * C3032 - C14516 * C2908 -
             C14015 * C3256 + C13856 * C3368) *
                C139873 +
            (C61531 + C61530 + C61529) * C47134) *
               C139731 * C139809 * C140000) *
              C2324 +
          (((C15524 + C15523 + C15522) * C47134 +
            (C14015 * C3033 - C14516 * C2909 - C14015 * C3257 + C13856 * C3369 +
             C14016 * C7980 - C14517 * C7753 - C14016 * C8423 + C13857 * C8633 +
             C14017 * C13301 - C14518 * C13129 - C14017 * C13621 +
             C13858 * C13781) *
                C139873) *
               C139731 * C139809 * C140000 -
           ((C15522 + C15523 + C15524) * C139873 +
            (C14558 + C14557 + C14556) * C47134) *
               C139731 * C139809 * C2322) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eexx[67] +=
        (-std::pow(Pi, 2.5) *
         (((C54790 * C114 - C54791 * C108 - C54790 * C115 + C139731 * C126) *
               C139835 * C54786 +
           C55309 * C54787 + C55310 * C54788 + C55311 * C54789) *
              C139809 * C2904 -
          (C57128 * C54789 + C55311 * C54788 + C55310 * C54787 +
           C55309 * C54786) *
              C139809 * C2905 +
          (C55310 * C54786 + C55311 * C54787 + C57128 * C54788 +
           (C54790 * C57117 - C54791 * C57116 - C54790 * C57118 +
            C139731 * C57119) *
               C139835 * C54789) *
              C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C47136 * C114 - C47137 * C108 - C47136 * C115 + C47131 * C126 +
            C47138 * C116 - C47139 * C109 - C47138 * C117 + C47132 * C127 +
            C47140 * C118 - C47141 * C110 - C47140 * C119 + C47133 * C128) *
               C139835 * C47134 +
           (C47978 + C47979 + C47980) * C139835 * C139873) *
              C139809 * C2904 -
          ((C50772 + C50773 + C50774) * C139835 * C139873 +
           (C47980 + C47979 + C47978) * C139835 * C47134) *
              C139809 * C2905 +
          ((C50774 + C50773 + C50772) * C139835 * C47134 +
           (C47136 * C6631 - C47137 * C6627 - C47136 * C6632 + C47131 * C6636 +
            C47138 * C6629 - C47139 * C6626 - C47138 * C6630 + C47132 * C6635 +
            C47140 * C6633 - C47141 * C6628 - C47140 * C6634 + C47133 * C6637) *
               C139835 * C139873) *
              C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C54790 * C114 - C54791 * C108 - C54790 * C115 + C139731 * C126) *
                C13856 +
            C61654 * C13857 + C61655 * C13858) *
               C47134 +
           (C60664 + C60665 + C60688) * C139873) *
              C139809 * C2904 -
          ((C63509 + C63504 + C63505) * C139873 +
           (C60688 + C60665 + C60664) * C47134) *
              C139809 * C2905 +
          ((C63505 + C63504 + C63509) * C47134 +
           (C55305 * C13856 + C57669 * C13857 +
            (C54790 * C59484 - C54791 * C59483 - C54790 * C59485 +
             C139731 * C59486) *
                C13858) *
               C139873) *
              C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eexy[67] +=
        (-std::pow(Pi, 2.5) *
         (((C54786 * C183 - C54842 * C108 + C54787 * C896 - C54843 * C813 +
            C54788 * C2974 - C54844 * C2908 + C54789 * C6792 - C54845 * C6627) *
               C54790 +
           (C54786 * C189 - C54842 * C115 + C54787 * C901 - C54843 * C822 +
            C54788 * C2978 - C54844 * C2913 + C54789 * C6795 - C54845 * C6632) *
               C139731) *
              C139835 * C139809 * C2904 +
          ((C54842 * C813 - C54786 * C896 + C54843 * C2908 - C54787 * C2974 +
            C54844 * C6627 - C54788 * C6792 + C54845 * C9609 - C54789 * C9707) *
               C54790 +
           (C54842 * C822 - C54786 * C901 + C54843 * C2913 - C54787 * C2978 +
            C54844 * C6632 - C54788 * C6795 + C54845 * C9612 - C54789 * C9709) *
               C139731) *
              C139835 * C139809 * C2905 +
          ((C54786 * C2974 - C54842 * C2908 + C54787 * C6792 - C54843 * C6627 +
            C54788 * C9707 - C54844 * C9609 + C54789 * C57178 -
            C54845 * C57116) *
               C54790 +
           (C54786 * C2978 - C54842 * C2913 + C54787 * C6795 - C54843 * C6632 +
            C54788 * C9709 - C54844 * C9612 + C54789 * C57179 -
            C54845 * C57118) *
               C139731) *
              C139835 * C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C47134 * C183 - C47216 * C108 + C139873 * C896 - C47217 * C813) *
               C47136 +
           (C47134 * C189 - C47216 * C115 + C139873 * C901 - C47217 * C822) *
               C47131 +
           (C47219 - C47220 + C47221 - C47222) * C47138 +
           (C47223 - C47224 + C47225 - C47226) * C47132 + C47247 * C47140 +
           C47248 * C47133) *
              C139835 * C139809 * C2904 +
          ((C47216 * C813 - C47134 * C896 + C47217 * C2908 - C139873 * C2974) *
               C47136 +
           (C47216 * C822 - C47134 * C901 + C47217 * C2913 - C139873 * C2978) *
               C47131 +
           (C48082 - C48083 + C48084 - C48085) * C47138 +
           (C48086 - C48087 + C48088 - C48089) * C47132 +
           (C48090 - C48091 + C48092 - C48093) * C47140 +
           (C48094 - C48095 + C48096 - C48097) * C47133) *
              C139835 * C139809 * C2905 +
          ((C47134 * C2974 - C47216 * C2908 + C139873 * C6792 -
            C47217 * C6627) *
               C47136 +
           (C47134 * C2978 - C47216 * C2913 + C139873 * C6795 -
            C47217 * C6632) *
               C47131 +
           (C47134 * C2975 - C47216 * C2909 + C139873 * C6793 -
            C47217 * C6626) *
               C47138 +
           (C47134 * C2979 - C47216 * C2915 + C139873 * C6796 -
            C47217 * C6630) *
               C47132 +
           (C47134 * C2976 - C47216 * C2910 + C139873 * C6794 -
            C47217 * C6628) *
               C47140 +
           (C47134 * C2980 - C47216 * C2917 + C139873 * C6797 -
            C47217 * C6634) *
               C47133) *
              C139835 * C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47134 * C183 - C47216 * C108 + C139873 * C896 - C47217 * C813) *
                C54790 +
            (C47134 * C189 - C47216 * C115 + C139873 * C901 - C47217 * C822) *
                C139731) *
               C13856 +
           ((C61756 - C61757 + C61758 - C61759) * C54790 +
            (C61760 - C61761 + C61762 - C61763) * C139731) *
               C13857 +
           ((C61764 - C61765 + C61766 - C61767) * C54790 +
            (C61768 - C61769 + C61770 - C61771) * C139731) *
               C13858) *
              C139809 * C2904 +
          (((C47216 * C813 - C47134 * C896 + C47217 * C2908 - C139873 * C2974) *
                C54790 +
            (C47216 * C822 - C47134 * C901 + C47217 * C2913 - C139873 * C2978) *
                C139731) *
               C13856 +
           ((C47216 * C3438 - C47134 * C3520 + C47217 * C7754 -
             C139873 * C7863) *
                C54790 +
            (C47216 * C3443 - C47134 * C3524 + C47217 * C7759 -
             C139873 * C7866) *
                C139731) *
               C13857 +
           ((C47216 * C13126 - C47134 * C13216 + C47217 * C13128 -
             C139873 * C13217) *
                C54790 +
            (C47216 * C13131 - C47134 * C13220 + C47217 * C13135 -
             C139873 * C13221) *
                C139731) *
               C13858) *
              C139809 * C2905 +
          (((C47134 * C2974 - C47216 * C2908 + C139873 * C6792 -
             C47217 * C6627) *
                C54790 +
            (C47134 * C2978 - C47216 * C2913 + C139873 * C6795 -
             C47217 * C6632) *
                C139731) *
               C13856 +
           ((C47134 * C7863 - C47216 * C7754 + C139873 * C10528 -
             C47217 * C10394) *
                C54790 +
            (C47134 * C7866 - C47216 * C7759 + C139873 * C10530 -
             C47217 * C10397) *
                C139731) *
               C13857 +
           ((C47134 * C13217 - C47216 * C13128 + C139873 * C59537 -
             C47217 * C59483) *
                C54790 +
            (C47134 * C13221 - C47216 * C13135 + C139873 * C59538 -
             C47217 * C59485) *
                C139731) *
               C13858) *
              C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eexz[67] +=
        (-std::pow(Pi, 2.5) *
         ((((C139835 * C266 - C265 * C108) * C54790 +
            (C139835 * C272 - C265 * C115) * C139731) *
               C54786 +
           ((C6915 - C6916) * C54790 + (C6917 - C6918) * C139731) * C54787 +
           C57241 * C54788 + C57244 * C54789) *
              C139809 * C2904 +
          (((C6916 - C6915) * C54790 + (C6918 - C6917) * C139731) * C54786 +
           ((C6922 - C6921) * C54790 + (C6924 - C6923) * C139731) * C54787 +
           ((C9794 - C9795) * C54790 + (C9796 - C9797) * C139731) * C54788 +
           ((C57237 - C57238) * C54790 + (C57239 - C57240) * C139731) *
               C54789) *
              C139809 * C2905 +
          (C57241 * C54786 + C57244 * C54787 +
           ((C57238 - C57237) * C54790 + (C57240 - C57239) * C139731) * C54788 +
           ((C139835 * C57230 - C265 * C57116) * C54790 +
            (C139835 * C57231 - C265 * C57118) * C139731) *
               C54789) *
              C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C139835 * C266 - C265 * C108) * C47136 +
            (C139835 * C272 - C265 * C115) * C47131 + (C279 - C280) * C47138 +
            (C281 - C282) * C47132 + C295 * C47140 + C296 * C47133) *
               C47134 +
           ((C6915 - C6916) * C47136 + (C6917 - C6918) * C47131 +
            C6919 * C47138 + C6920 * C47132 + C21967 * C47140 +
            C21968 * C47133) *
               C139873) *
              C139809 * C2904 +
          (((C6916 - C6915) * C47136 + (C6918 - C6917) * C47131 +
            C6927 * C47138 + C6928 * C47132 + C22843 * C47140 +
            C22844 * C47133) *
               C47134 +
           ((C6922 - C6921) * C47136 + (C6924 - C6923) * C47131 +
            C6929 * C47138 + C6930 * C47132 + (C6000 - C6001) * C47140 +
            (C6002 - C6003) * C47133) *
               C139873) *
              C139809 * C2905 +
          ((C9790 * C47136 + C9791 * C47131 + C6925 * C47138 + C6926 * C47132 +
            (C6001 - C6000) * C47140 + (C6003 - C6002) * C47133) *
               C47134 +
           ((C9795 - C9794) * C47136 + (C9797 - C9796) * C47131 +
            (C6932 - C6931) * C47138 + (C6934 - C6933) * C47132 +
            (C139835 * C6910 - C265 * C6628) * C47140 +
            (C139835 * C6913 - C265 * C6634) * C47133) *
               C139873) *
              C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C13856 * C266 - C14015 * C108 + C13857 * C1741 - C14016 * C1570 +
             C13858 * C5397 - C14017 * C5273) *
                C54790 +
            (C13856 * C272 - C14015 * C115 + C13857 * C1746 - C14016 * C1579 +
             C13858 * C5401 - C14017 * C5278) *
                C139731) *
               C47134 +
           ((C60887 - C60888 + C60889 - C60890 + C60891 - C60892) * C54790 +
            (C60893 - C60894 + C60895 - C60896 + C60897 - C60898) * C139731) *
               C139873) *
              C139809 * C2904 +
          (((C60888 - C60887 + C60890 - C60889 + C60892 - C60891) * C54790 +
            (C60894 - C60893 + C60896 - C60895 + C60898 - C60897) * C139731) *
               C47134 +
           ((C63658 - C63659 + C63660 - C63661 + C63662 - C63663) * C54790 +
            (C63664 - C63665 + C63666 - C63667 + C63668 - C63669) * C139731) *
               C139873) *
              C139809 * C2905 +
          (((C63659 - C63658 + C63661 - C63660 + C63663 - C63662) * C54790 +
            (C63665 - C63664 + C63667 - C63666 + C63669 - C63668) * C139731) *
               C47134 +
           ((C13856 * C6908 - C14015 * C6627 + C13857 * C10630 -
             C14016 * C10394 + C13858 * C59589 - C14017 * C59483) *
                C54790 +
            (C13856 * C6911 - C14015 * C6632 + C13857 * C10632 -
             C14016 * C10397 + C13858 * C59590 - C14017 * C59485) *
                C139731) *
               C139873) *
              C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eeyx[67] +=
        (-std::pow(Pi, 2.5) *
         (((C139731 * C114 - C54790 * C108) * C54842 +
           (C139731 * C354 - C54790 * C348) * C54786 +
           (C55513 - C55514) * C54843 + (C55515 - C55516) * C54787 +
           C57297 * C54844 + C57298 * C54788 + C57299 * C54845 +
           C57300 * C54789) *
              C139835 * C139809 * C2904 +
          ((C55514 - C55513) * C54842 + (C55516 - C55515) * C54786 +
           (C55518 - C55517) * C54843 + (C55520 - C55519) * C54787 +
           (C55522 - C55521) * C54844 + (C55524 - C55523) * C54788 +
           (C57301 - C57302) * C54845 + (C57303 - C57304) * C54789) *
              C139835 * C139809 * C2905 +
          (C57297 * C54842 + C57298 * C54786 + C57299 * C54843 +
           C57300 * C54787 + (C57302 - C57301) * C54844 +
           (C57304 - C57303) * C54788 +
           (C139731 * C57117 - C54790 * C57116) * C54845 +
           (C139731 * C57295 - C54790 * C57294) * C54789) *
              C139835 * C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C47131 * C114 - C47136 * C108 + C47132 * C116 - C47138 * C109 +
            C47133 * C118 - C47140 * C110) *
               C47216 +
           (C47131 * C354 - C47136 * C348 + C47132 * C355 - C47138 * C349 +
            C47133 * C356 - C47140 * C350) *
               C47134 +
           (C48294 - C48295 + C48296 - C48297 + C48298 - C48299) * C47217 +
           (C48300 - C48301 + C48302 - C48303 + C48304 - C48305) * C139873) *
              C139835 * C139809 * C2904 +
          ((C48295 - C48294 + C48297 - C48296 + C48299 - C48298) * C47216 +
           (C48301 - C48300 + C48303 - C48302 + C48305 - C48304) * C47134 +
           (C50997 - C50998 + C50999 - C51000 + C51001 - C51002) * C47217 +
           (C51003 - C51004 + C51005 - C51006 + C51007 - C51008) * C139873) *
              C139835 * C139809 * C2905 +
          ((C50998 - C50997 + C51000 - C50999 + C51002 - C51001) * C47216 +
           (C51004 - C51003 + C51006 - C51005 + C51008 - C51007) * C47134 +
           (C47131 * C6631 - C47136 * C6627 + C47132 * C6629 - C47138 * C6626 +
            C47133 * C6633 - C47140 * C6628) *
               C47217 +
           (C47131 * C7035 - C47136 * C7032 + C47132 * C7036 - C47138 * C7033 +
            C47133 * C7037 - C47140 * C7034) *
               C139873) *
              C139835 * C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C139731 * C114 - C54790 * C108) * C47216 +
            (C139731 * C354 - C54790 * C348) * C47134 +
            (C55513 - C55514) * C47217 + (C55515 - C55516) * C139873) *
               C13856 +
           ((C61976 - C61977) * C47216 + (C61978 - C61979) * C47134 +
            (C57884 - C57883) * C47217 + (C57886 - C57885) * C139873) *
               C13857 +
           ((C61980 - C61981) * C47216 + (C61982 - C61983) * C47134 +
            (C60997 - C60998) * C47217 + (C60999 - C61000) * C139873) *
               C13858) *
              C139809 * C2904 +
          (((C55514 - C55513) * C47216 + (C55516 - C55515) * C47134 +
            (C55518 - C55517) * C47217 + (C55520 - C55519) * C139873) *
               C13856 +
           ((C57883 - C57884) * C47216 + (C57885 - C57886) * C47134 +
            (C57887 - C57888) * C47217 + (C57889 - C57890) * C139873) *
               C13857 +
           ((C60998 - C60997) * C47216 + (C61000 - C60999) * C47134 +
            (C63744 - C63745) * C47217 + (C63746 - C63747) * C139873) *
               C13858) *
              C139809 * C2905 +
          ((C57297 * C47216 + C57298 * C47134 + C57299 * C47217 +
            C57300 * C139873) *
               C13856 +
           ((C57888 - C57887) * C47216 + (C57890 - C57889) * C47134 +
            (C57892 - C57891) * C47217 + (C57894 - C57893) * C139873) *
               C13857 +
           ((C63745 - C63744) * C47216 + (C63747 - C63746) * C47134 +
            (C139731 * C59484 - C54790 * C59483) * C47217 +
            (C139731 * C59642 - C54790 * C59641) * C139873) *
               C13858) *
              C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eeyy[67] +=
        (-std::pow(Pi, 2.5) *
         ((C54842 * C183 - C54996 * C108 - C54842 * C348 + C54786 * C411 +
           C54843 * C896 - C54997 * C813 - C54843 * C1072 + C54787 * C1151 +
           C54844 * C2974 - C54998 * C2908 - C54844 * C3090 + C54788 * C3148 +
           C54845 * C6792 - C54999 * C6627 - C54845 * C7032 + C54789 * C7169) *
              C139731 * C139835 * C139809 * C2904 -
          (C54845 * C9707 - C54999 * C9609 - C54845 * C9876 + C54789 * C9968 +
           C54844 * C6792 - C54998 * C6627 - C54844 * C7032 + C54788 * C7169 +
           C54843 * C2974 - C54997 * C2908 - C54843 * C3090 + C54787 * C3148 +
           C54842 * C896 - C54996 * C813 - C54842 * C1072 + C54786 * C1151) *
              C139731 * C139835 * C139809 * C2905 +
          (C54842 * C2974 - C54996 * C2908 - C54842 * C3090 + C54786 * C3148 +
           C54843 * C6792 - C54997 * C6627 - C54843 * C7032 + C54787 * C7169 +
           C54844 * C9707 - C54998 * C9609 - C54844 * C9876 + C54788 * C9968 +
           C54845 * C57178 - C54999 * C57116 - C54845 * C57294 +
           C54789 * C57354) *
              C139731 * C139835 * C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C47216 * C183 - C47470 * C108 - C47216 * C348 + C47134 * C411 +
            C47217 * C896 - C47471 * C813 - C47217 * C1072 + C139873 * C1151) *
               C47131 +
           (C47509 + C47510) * C47132 + C47515 * C47133) *
              C139835 * C139809 * C2904 -
          ((C48440 + C48441) * C47133 + (C48442 + C48443) * C47132 +
           (C47217 * C2974 - C47471 * C2908 - C47217 * C3090 + C139873 * C3148 +
            C47216 * C896 - C47470 * C813 - C47216 * C1072 + C47134 * C1151) *
               C47131) *
              C139835 * C139809 * C2905 +
          ((C47216 * C2974 - C47470 * C2908 - C47216 * C3090 + C47134 * C3148 +
            C47217 * C6792 - C47471 * C6627 - C47217 * C7032 +
            C139873 * C7169) *
               C47131 +
           (C47216 * C2975 - C47470 * C2909 - C47216 * C3091 + C47134 * C3149 +
            C47217 * C6793 - C47471 * C6626 - C47217 * C7033 +
            C139873 * C7168) *
               C47132 +
           (C47216 * C2976 - C47470 * C2910 - C47216 * C3092 + C47134 * C3150 +
            C47217 * C6794 - C47471 * C6628 - C47217 * C7034 +
            C139873 * C7170) *
               C47133) *
              C139835 * C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C47216 * C183 - C47470 * C108 - C47216 * C348 + C47134 * C411 +
            C47217 * C896 - C47471 * C813 - C47217 * C1072 + C139873 * C1151) *
               C139731 * C13856 +
           (C62126 + C62127) * C139731 * C13857 +
           (C62128 + C62129) * C139731 * C13858) *
              C139809 * C2904 -
          ((C47217 * C13217 - C47471 * C13128 - C47217 * C13382 +
            C139873 * C13463 + C47216 * C13216 - C47470 * C13126 -
            C47216 * C13380 + C47134 * C13462) *
               C139731 * C13858 +
           (C47217 * C7863 - C47471 * C7754 - C47217 * C8091 + C139873 * C8196 +
            C47216 * C3520 - C47470 * C3438 - C47216 * C3668 + C47134 * C3742) *
               C139731 * C13857 +
           (C47217 * C2974 - C47471 * C2908 - C47217 * C3090 + C139873 * C3148 +
            C47216 * C896 - C47470 * C813 - C47216 * C1072 + C47134 * C1151) *
               C139731 * C13856) *
              C139809 * C2905 +
          ((C47216 * C2974 - C47470 * C2908 - C47216 * C3090 + C47134 * C3148 +
            C47217 * C6792 - C47471 * C6627 - C47217 * C7032 +
            C139873 * C7169) *
               C139731 * C13856 +
           (C47216 * C7863 - C47470 * C7754 - C47216 * C8091 + C47134 * C8196 +
            C47217 * C10528 - C47471 * C10394 - C47217 * C10740 +
            C139873 * C10858) *
               C139731 * C13857 +
           (C47216 * C13217 - C47470 * C13128 - C47216 * C13382 +
            C47134 * C13463 + C47217 * C59537 - C47471 * C59483 -
            C47217 * C59641 + C139873 * C59693) *
               C139731 * C13858) *
              C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eeyz[67] +=
        (-std::pow(Pi, 2.5) *
         (((C139835 * C266 - C265 * C108) * C54842 +
           (C139835 * C495 - C265 * C348) * C54786 + (C6915 - C6916) * C54843 +
           (C7294 - C7295) * C54787 + C9790 * C54844 + C10047 * C54788 +
           C57235 * C54845 + C57407 * C54789) *
              C139731 * C139809 * C2904 +
          ((C6916 - C6915) * C54842 + (C7295 - C7294) * C54786 +
           (C6922 - C6921) * C54843 + (C7297 - C7296) * C54787 +
           (C9794 - C9795) * C54844 + (C10048 - C10049) * C54788 +
           (C57237 - C57238) * C54845 + (C57408 - C57409) * C54789) *
              C139731 * C139809 * C2905 +
          (C9790 * C54842 + C10047 * C54786 + C57235 * C54843 +
           C57407 * C54787 + (C57238 - C57237) * C54844 +
           (C57409 - C57408) * C54788 +
           (C139835 * C57230 - C265 * C57116) * C54845 +
           (C139835 * C57405 - C265 * C57294) * C54789) *
              C139731 * C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C139835 * C266 - C265 * C108) * C47216 +
            (C139835 * C495 - C265 * C348) * C47134 + (C6915 - C6916) * C47217 +
            (C7294 - C7295) * C139873) *
               C47131 +
           ((C279 - C280) * C47216 + (C502 - C503) * C47134 + C6919 * C47217 +
            C7298 * C139873) *
               C47132 +
           C47596 * C47133) *
              C139809 * C2904 +
          (((C6916 - C6915) * C47216 + (C7295 - C7294) * C47134 +
            (C6922 - C6921) * C47217 + (C7297 - C7296) * C139873) *
               C47131 +
           (C6927 * C47216 + C7300 * C47134 + C6929 * C47217 +
            C7301 * C139873) *
               C47132 +
           (C22843 * C47216 + C23191 * C47134 + (C6000 - C6001) * C47217 +
            (C6273 - C6274) * C139873) *
               C47133) *
              C139809 * C2905 +
          ((C9790 * C47216 + C10047 * C47134 + (C9795 - C9794) * C47217 +
            (C10049 - C10048) * C139873) *
               C47131 +
           (C6925 * C47216 + C7299 * C47134 + (C6932 - C6931) * C47217 +
            (C7303 - C7302) * C139873) *
               C47132 +
           ((C6001 - C6000) * C47216 + (C6274 - C6273) * C47134 +
            (C139835 * C6910 - C265 * C6628) * C47217 +
            (C139835 * C7292 - C265 * C7034) * C139873) *
               C47133) *
              C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C13856 * C266 - C14015 * C108 + C13857 * C1741 - C14016 * C1570 +
            C13858 * C5397 - C14017 * C5273) *
               C47216 +
           (C13856 * C495 - C14015 * C348 + C13857 * C1997 - C14016 * C1829 +
            C13858 * C5567 - C14017 * C5455) *
               C47134 +
           (C60887 - C60888 + C60889 - C60890 + C60891 - C60892) * C47217 +
           (C61205 - C61206 + C61207 - C61208 + C61209 - C61210) * C139873) *
              C139731 * C139809 * C2904 +
          ((C60888 - C60887 + C60890 - C60889 + C60892 - C60891) * C47216 +
           (C61206 - C61205 + C61208 - C61207 + C61210 - C61209) * C47134 +
           (C63658 - C63659 + C63660 - C63661 + C63662 - C63663) * C47217 +
           (C63896 - C63897 + C63898 - C63899 + C63900 - C63901) * C139873) *
              C139731 * C139809 * C2905 +
          ((C63659 - C63658 + C63661 - C63660 + C63663 - C63662) * C47216 +
           (C63897 - C63896 + C63899 - C63898 + C63901 - C63900) * C47134 +
           (C13856 * C6908 - C14015 * C6627 + C13857 * C10630 -
            C14016 * C10394 + C13858 * C59589 - C14017 * C59483) *
               C47217 +
           (C13856 * C7290 - C14015 * C7032 + C13857 * C10958 -
            C14016 * C10740 + C13858 * C59744 - C14017 * C59641) *
               C139873) *
              C139731 * C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eezx[67] +=
        (-std::pow(Pi, 2.5) *
         ((((C139731 * C114 - C54790 * C108) * C265 +
            (C139731 * C573 - C54790 * C567) * C139835) *
               C54786 +
           ((C55513 - C55514) * C265 + (C55735 - C55736) * C139835) * C54787 +
           C57470 * C54788 + C57471 * C54789) *
              C139809 * C2904 +
          (((C55514 - C55513) * C265 + (C55736 - C55735) * C139835) * C54786 +
           ((C55518 - C55517) * C265 + (C55738 - C55737) * C139835) * C54787 +
           ((C55522 - C55521) * C265 + (C55740 - C55739) * C139835) * C54788 +
           ((C57301 - C57302) * C265 + (C57466 - C57467) * C139835) * C54789) *
              C139809 * C2905 +
          (C57470 * C54786 + C57471 * C54787 +
           ((C57302 - C57301) * C265 + (C57467 - C57466) * C139835) * C54788 +
           ((C139731 * C57117 - C54790 * C57116) * C265 +
            (C139731 * C57460 - C54790 * C57459) * C139835) *
               C54789) *
              C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47131 * C114 - C47136 * C108 + C47132 * C116 - C47138 * C109 +
             C47133 * C118 - C47140 * C110) *
                C265 +
            (C47131 * C573 - C47136 * C567 + C47132 * C574 - C47138 * C568 +
             C47133 * C575 - C47140 * C569) *
                C139835) *
               C47134 +
           ((C48294 - C48295 + C48296 - C48297 + C48298 - C48299) * C265 +
            (C48640 - C48641 + C48642 - C48643 + C48644 - C48645) * C139835) *
               C139873) *
              C139809 * C2904 +
          (((C48295 - C48294 + C48297 - C48296 + C48299 - C48298) * C265 +
            (C48641 - C48640 + C48643 - C48642 + C48645 - C48644) * C139835) *
               C47134 +
           ((C50997 - C50998 + C50999 - C51000 + C51001 - C51002) * C265 +
            (C51231 - C51232 + C51233 - C51234 + C51235 - C51236) * C139835) *
               C139873) *
              C139809 * C2905 +
          (((C50998 - C50997 + C51000 - C50999 + C51002 - C51001) * C265 +
            (C51232 - C51231 + C51234 - C51233 + C51236 - C51235) * C139835) *
               C47134 +
           ((C47131 * C6631 - C47136 * C6627 + C47132 * C6629 - C47138 * C6626 +
             C47133 * C6633 - C47140 * C6628) *
                C265 +
            (C47131 * C7404 - C47136 * C7401 + C47132 * C7405 - C47138 * C7402 +
             C47133 * C7406 - C47140 * C7403) *
                C139835) *
               C139873) *
              C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C139731 * C114 - C54790 * C108) * C14015 +
            (C139731 * C573 - C54790 * C567) * C13856 +
            (C61976 - C61977) * C14016 + (C62328 - C62329) * C13857 +
            (C61980 - C61981) * C14017 + (C62330 - C62331) * C13858) *
               C47134 +
           ((C55513 - C55514) * C14015 + (C55735 - C55736) * C13856 +
            (C57884 - C57883) * C14016 + (C58100 - C58099) * C13857 +
            (C60997 - C60998) * C14017 + (C61309 - C61310) * C13858) *
               C139873) *
              C139809 * C2904 +
          (((C55514 - C55513) * C14015 + (C55736 - C55735) * C13856 +
            (C57883 - C57884) * C14016 + (C58099 - C58100) * C13857 +
            (C60998 - C60997) * C14017 + (C61310 - C61309) * C13858) *
               C47134 +
           ((C55518 - C55517) * C14015 + (C55738 - C55737) * C13856 +
            (C57887 - C57888) * C14016 + (C58101 - C58102) * C13857 +
            (C63744 - C63745) * C14017 + (C63976 - C63977) * C13858) *
               C139873) *
              C139809 * C2905 +
          ((C57297 * C14015 + C57463 * C13856 + (C57888 - C57887) * C14016 +
            (C58102 - C58101) * C13857 + (C63745 - C63744) * C14017 +
            (C63977 - C63976) * C13858) *
               C47134 +
           (C57299 * C14015 + C57465 * C13856 + (C57892 - C57891) * C14016 +
            (C58104 - C58103) * C13857 +
            (C139731 * C59484 - C54790 * C59483) * C14017 +
            (C139731 * C59796 - C54790 * C59795) * C13858) *
               C139873) *
              C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eezy[67] +=
        (-std::pow(Pi, 2.5) *
         (((C54786 * C183 - C54842 * C108 + C54787 * C896 - C54843 * C813 +
            C54788 * C2974 - C54844 * C2908 + C54789 * C6792 - C54845 * C6627) *
               C265 +
           (C54786 * C629 - C54842 * C567 + C54787 * C1393 - C54843 * C1317 +
            C54788 * C3314 - C54844 * C3256 + C54789 * C7521 - C54845 * C7401) *
               C139835) *
              C139731 * C139809 * C2904 +
          ((C54842 * C813 - C54786 * C896 + C54843 * C2908 - C54787 * C2974 +
            C54844 * C6627 - C54788 * C6792 + C54845 * C9609 - C54789 * C9707) *
               C265 +
           (C54842 * C1317 - C54786 * C1393 + C54843 * C3256 - C54787 * C3314 +
            C54844 * C7401 - C54788 * C7521 + C54845 * C10123 -
            C54789 * C10211) *
               C139835) *
              C139731 * C139809 * C2905 +
          ((C54786 * C2974 - C54842 * C2908 + C54787 * C6792 - C54843 * C6627 +
            C54788 * C9707 - C54844 * C9609 + C54789 * C57178 -
            C54845 * C57116) *
               C265 +
           (C54786 * C3314 - C54842 * C3256 + C54787 * C7521 - C54843 * C7401 +
            C54788 * C10211 - C54844 * C10123 + C54789 * C57521 -
            C54845 * C57459) *
               C139835) *
              C139731 * C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47134 * C183 - C47216 * C108 + C139873 * C896 - C47217 * C813) *
                C265 +
            (C47134 * C629 - C47216 * C567 + C139873 * C1393 - C47217 * C1317) *
                C139835) *
               C47131 +
           ((C47219 - C47220 + C47221 - C47222) * C265 +
            (C47745 - C47746 + C47747 - C47748) * C139835) *
               C47132 +
           C47762 * C47133) *
              C139809 * C2904 +
          (((C47216 * C813 - C47134 * C896 + C47217 * C2908 - C139873 * C2974) *
                C265 +
            (C47216 * C1317 - C47134 * C1393 + C47217 * C3256 -
             C139873 * C3314) *
                C139835) *
               C47131 +
           ((C48082 - C48083 + C48084 - C48085) * C265 +
            (C48750 - C48751 + C48752 - C48753) * C139835) *
               C47132 +
           ((C48090 - C48091 + C48092 - C48093) * C265 +
            (C48754 - C48755 + C48756 - C48757) * C139835) *
               C47133) *
              C139809 * C2905 +
          (((C47134 * C2974 - C47216 * C2908 + C139873 * C6792 -
             C47217 * C6627) *
                C265 +
            (C47134 * C3314 - C47216 * C3256 + C139873 * C7521 -
             C47217 * C7401) *
                C139835) *
               C47131 +
           ((C47134 * C2975 - C47216 * C2909 + C139873 * C6793 -
             C47217 * C6626) *
                C265 +
            (C47134 * C3315 - C47216 * C3257 + C139873 * C7522 -
             C47217 * C7402) *
                C139835) *
               C47132 +
           ((C47134 * C2976 - C47216 * C2910 + C139873 * C6794 -
             C47217 * C6628) *
                C265 +
            (C47134 * C3316 - C47216 * C3258 + C139873 * C7523 -
             C47217 * C7403) *
                C139835) *
               C47133) *
              C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C47134 * C183 - C47216 * C108 + C139873 * C896 - C47217 * C813) *
               C14015 +
           (C47134 * C629 - C47216 * C567 + C139873 * C1393 - C47217 * C1317) *
               C13856 +
           (C61756 - C61757 + C61758 - C61759) * C14016 +
           (C62434 - C62435 + C62436 - C62437) * C13857 +
           (C61764 - C61765 + C61766 - C61767) * C14017 +
           (C62438 - C62439 + C62440 - C62441) * C13858) *
              C139731 * C139809 * C2904 +
          ((C47216 * C813 - C47134 * C896 + C47217 * C2908 - C139873 * C2974) *
               C14015 +
           (C47216 * C1317 - C47134 * C1393 + C47217 * C3256 -
            C139873 * C3314) *
               C13856 +
           (C47216 * C3438 - C47134 * C3520 + C47217 * C7754 -
            C139873 * C7863) *
               C14016 +
           (C47216 * C3882 - C47134 * C3956 + C47217 * C8422 -
            C139873 * C8526) *
               C13857 +
           (C47216 * C13126 - C47134 * C13216 + C47217 * C13128 -
            C139873 * C13217) *
               C14017 +
           (C47216 * C13618 - C47134 * C13700 + C47217 * C13620 -
            C139873 * C13701) *
               C13858) *
              C139731 * C139809 * C2905 +
          ((C47134 * C2974 - C47216 * C2908 + C139873 * C6792 -
            C47217 * C6627) *
               C14015 +
           (C47134 * C3314 - C47216 * C3256 + C139873 * C7521 -
            C47217 * C7401) *
               C13856 +
           (C47134 * C7863 - C47216 * C7754 + C139873 * C10528 -
            C47217 * C10394) *
               C14016 +
           (C47134 * C8526 - C47216 * C8422 + C139873 * C11172 -
            C47217 * C11062) *
               C13857 +
           (C47134 * C13217 - C47216 * C13128 + C139873 * C59537 -
            C47217 * C59483) *
               C14017 +
           (C47134 * C13701 - C47216 * C13620 + C139873 * C59847 -
            C47217 * C59795) *
               C13858) *
              C139731 * C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eezz[67] +=
        (-std::pow(Pi, 2.5) *
         (((C265 * C266 - C701 * C108 - C265 * C567 + C139835 * C702) * C54786 +
           C7652 * C54787 + C7653 * C54788 + C10296 * C54789) *
              C139731 * C139809 * C2904 -
          (C57580 * C54789 + C10296 * C54788 + C7653 * C54787 +
           C7652 * C54786) *
              C139731 * C139809 * C2905 +
          (C7653 * C54786 + C10296 * C54787 + C57580 * C54788 +
           (C265 * C57230 - C701 * C57116 - C265 * C57459 + C139835 * C57572) *
               C54789) *
              C139731 * C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C265 * C266 - C701 * C108 - C265 * C567 + C139835 * C702) *
                C47134 +
            C7652 * C139873) *
               C47131 +
           (C47837 + C47838) * C47132 + C47843 * C47133) *
              C139809 * C2904 -
          ((C48856 + C48857) * C47133 + (C48858 + C48859) * C47132 +
           (C7653 * C139873 + C7652 * C47134) * C47131) *
              C139809 * C2905 +
          ((C7653 * C47134 + C10296 * C139873) * C47131 +
           (C6525 * C47134 + C7654 * C139873) * C47132 +
           (C6526 * C47134 +
            (C265 * C6910 - C701 * C6628 - C265 * C7403 + C139835 * C7630) *
                C139873) *
               C47133) *
              C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C14015 * C266 - C14516 * C108 - C14015 * C567 + C13856 * C702 +
            C14016 * C1741 - C14517 * C1570 - C14016 * C2074 + C13857 * C2230 +
            C14017 * C5397 - C14518 * C5273 - C14017 * C5621 + C13858 * C5733) *
               C47134 +
           (C61529 + C61530 + C61531) * C139873) *
              C139731 * C139809 * C2904 -
          ((C64144 + C64145 + C64146) * C139873 +
           (C61531 + C61530 + C61529) * C47134) *
              C139731 * C139809 * C2905 +
          ((C64146 + C64145 + C64144) * C47134 +
           (C14015 * C6908 - C14516 * C6627 - C14015 * C7401 + C13856 * C7629 +
            C14016 * C10630 - C14517 * C10394 - C14016 * C11062 +
            C13857 * C11272 + C14017 * C59589 - C14518 * C59483 -
            C14017 * C59795 + C13858 * C59898) *
               C139873) *
              C139731 * C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eexx[68] +=
        (-std::pow(Pi, 2.5) *
         ((((C54790 * C114 - C54791 * C108 - C54790 * C115 + C139731 * C126) *
                C139835 * C54786 +
            C55309 * C54787 + C55310 * C54788 + C55311 * C54789) *
               C1565 -
           (C57672 * C54789 + C57673 * C54788 + C57674 * C54787 +
            (C54790 * C1578 - C54791 * C1570 - C54790 * C1579 +
             C139731 * C1585) *
                C139835 * C54786) *
               C140002) *
              C2322 +
          ((C57674 * C54786 + C57673 * C54787 + C57672 * C54788 +
            (C54790 * C57647 - C54791 * C57646 - C54790 * C57648 +
             C139731 * C57649) *
                C139835 * C54789) *
               C140002 -
           (C57128 * C54789 + C55311 * C54788 + C55310 * C54787 +
            C55309 * C54786) *
               C1565) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47136 * C114 - C47137 * C108 - C47136 * C115 + C47131 * C126 +
             C47138 * C116 - C47139 * C109 - C47138 * C117 + C47132 * C127 +
             C47140 * C118 - C47141 * C110 - C47140 * C119 + C47133 * C128) *
                C139835 * C47134 +
            (C47978 + C47979 + C47980) * C139835 * C139873) *
               C1565 -
           ((C51501 + C51502 + C51503) * C139835 * C139873 +
            (C47140 * C1574 - C47141 * C1568 - C47140 * C1575 + C47133 * C1583 +
             C47138 * C1576 - C47139 * C1569 - C47138 * C1577 + C47132 * C1584 +
             C47136 * C1578 - C47137 * C1570 - C47136 * C1579 +
             C47131 * C1585) *
                C139835 * C47134) *
               C140002) *
              C2322 +
          (((C51503 + C51502 + C51501) * C139835 * C47134 +
            (C47136 * C7758 - C47137 * C7754 - C47136 * C7759 + C47131 * C7763 +
             C47138 * C7756 - C47139 * C7753 - C47138 * C7757 + C47132 * C7762 +
             C47140 * C7760 - C47141 * C7755 - C47140 * C7761 +
             C47133 * C7764) *
                C139835 * C139873) *
               C140002 -
           ((C50772 + C50773 + C50774) * C139835 * C139873 +
            (C47980 + C47979 + C47978) * C139835 * C47134) *
               C1565) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C54790 * C114 - C54791 * C108 - C54790 * C115 + C139731 * C126) *
                 C13856 +
             C61654 * C13857 + C61655 * C13858) *
                C47134 +
            (C60664 + C60665 + C60688) * C139873) *
               C1565 -
           ((C64258 + C64253 + C64254) * C139873 +
            ((C54790 * C15627 - C54791 * C15623 - C54790 * C15628 +
              C139731 * C15632) *
                 C13858 +
             C61655 * C13857 + C61654 * C13856) *
                C47134) *
               C140002) *
              C2322 +
          (((C64254 + C64253 + C64258) * C47134 +
            (C57670 * C13856 + C63508 * C13857 +
             (C54790 * C64245 - C54791 * C64244 - C54790 * C64246 +
              C139731 * C64247) *
                 C13858) *
                C139873) *
               C140002 -
           ((C63509 + C63504 + C63505) * C139873 +
            (C60688 + C60665 + C60664) * C47134) *
               C1565) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eexy[68] +=
        (-std::pow(Pi, 2.5) *
         ((((C54786 * C183 - C54842 * C108 + C54787 * C896 - C54843 * C813 +
             C54788 * C2974 - C54844 * C2908 + C54789 * C6792 -
             C54845 * C6627) *
                C54790 +
            (C54786 * C189 - C54842 * C115 + C54787 * C901 - C54843 * C822 +
             C54788 * C2978 - C54844 * C2913 + C54789 * C6795 -
             C54845 * C6632) *
                C139731) *
               C139835 * C1565 +
           ((C54842 * C1570 - C54786 * C1653 + C54843 * C3438 - C54787 * C3520 +
             C54844 * C7754 - C54788 * C7863 + C54845 * C10394 -
             C54789 * C10528) *
                C54790 +
            (C54842 * C1579 - C54786 * C1658 + C54843 * C3443 - C54787 * C3524 +
             C54844 * C7759 - C54788 * C7866 + C54845 * C10397 -
             C54789 * C10530) *
                C139731) *
               C139835 * C140002) *
              C2322 +
          (((C54842 * C813 - C54786 * C896 + C54843 * C2908 - C54787 * C2974 +
             C54844 * C6627 - C54788 * C6792 + C54845 * C9609 -
             C54789 * C9707) *
                C54790 +
            (C54842 * C822 - C54786 * C901 + C54843 * C2913 - C54787 * C2978 +
             C54844 * C6632 - C54788 * C6795 + C54845 * C9612 -
             C54789 * C9709) *
                C139731) *
               C139835 * C1565 +
           ((C54786 * C3520 - C54842 * C3438 + C54787 * C7863 - C54843 * C7754 +
             C54788 * C10528 - C54844 * C10394 + C54789 * C57740 -
             C54845 * C57646) *
                C54790 +
            (C54786 * C3524 - C54842 * C3443 + C54787 * C7866 - C54843 * C7759 +
             C54788 * C10530 - C54844 * C10397 + C54789 * C57741 -
             C54845 * C57648) *
                C139731) *
               C139835 * C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47134 * C183 - C47216 * C108 + C139873 * C896 - C47217 * C813) *
                C47136 +
            (C47134 * C189 - C47216 * C115 + C139873 * C901 - C47217 * C822) *
                C47131 +
            (C47219 - C47220 + C47221 - C47222) * C47138 +
            (C47223 - C47224 + C47225 - C47226) * C47132 + C47247 * C47140 +
            C47248 * C47133) *
               C139835 * C1565 +
           ((C47216 * C1570 - C47134 * C1653 + C47217 * C3438 -
             C139873 * C3520) *
                C47136 +
            (C47216 * C1579 - C47134 * C1658 + C47217 * C3443 -
             C139873 * C3524) *
                C47131 +
            (C49056 - C49057 + C49058 - C49059) * C47138 +
            (C49060 - C49061 + C49062 - C49063) * C47132 +
            (C49064 - C49065 + C49066 - C49067) * C47140 +
            (C49068 - C49069 + C49070 - C49071) * C47133) *
               C139835 * C140002) *
              C2322 +
          (((C47216 * C813 - C47134 * C896 + C47217 * C2908 - C139873 * C2974) *
                C47136 +
            (C47216 * C822 - C47134 * C901 + C47217 * C2913 - C139873 * C2978) *
                C47131 +
            (C48082 - C48083 + C48084 - C48085) * C47138 +
            (C48086 - C48087 + C48088 - C48089) * C47132 +
            (C48090 - C48091 + C48092 - C48093) * C47140 +
            (C48094 - C48095 + C48096 - C48097) * C47133) *
               C139835 * C1565 +
           ((C47134 * C3520 - C47216 * C3438 + C139873 * C7863 -
             C47217 * C7754) *
                C47136 +
            (C47134 * C3524 - C47216 * C3443 + C139873 * C7866 -
             C47217 * C7759) *
                C47131 +
            (C47134 * C3521 - C47216 * C3439 + C139873 * C7864 -
             C47217 * C7753) *
                C47138 +
            (C47134 * C3525 - C47216 * C3445 + C139873 * C7867 -
             C47217 * C7757) *
                C47132 +
            (C47134 * C3522 - C47216 * C3440 + C139873 * C7865 -
             C47217 * C7755) *
                C47140 +
            (C47134 * C3526 - C47216 * C3447 + C139873 * C7868 -
             C47217 * C7761) *
                C47133) *
               C139835 * C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C47134 * C183 - C47216 * C108 + C139873 * C896 - C47217 * C813) *
                 C54790 +
             (C47134 * C189 - C47216 * C115 + C139873 * C901 - C47217 * C822) *
                 C139731) *
                C13856 +
            ((C61756 - C61757 + C61758 - C61759) * C54790 +
             (C61760 - C61761 + C61762 - C61763) * C139731) *
                C13857 +
            ((C61764 - C61765 + C61766 - C61767) * C54790 +
             (C61768 - C61769 + C61770 - C61771) * C139731) *
                C13858) *
               C1565 +
           (((C61757 - C61756 + C61759 - C61758) * C54790 +
             (C61761 - C61760 + C61763 - C61762) * C139731) *
                C13856 +
            ((C61765 - C61764 + C61767 - C61766) * C54790 +
             (C61769 - C61768 + C61771 - C61770) * C139731) *
                C13857 +
            ((C47216 * C15623 - C47134 * C15788 + C47217 * C18302 -
              C139873 * C18422) *
                 C54790 +
             (C47216 * C15628 - C47134 * C15791 + C47217 * C18305 -
              C139873 * C18424) *
                 C139731) *
                C13858) *
               C140002) *
              C2322 +
          ((((C47216 * C813 - C47134 * C896 + C47217 * C2908 -
              C139873 * C2974) *
                 C54790 +
             (C47216 * C822 - C47134 * C901 + C47217 * C2913 -
              C139873 * C2978) *
                 C139731) *
                C13856 +
            ((C64359 - C64360 + C64361 - C64362) * C54790 +
             (C64363 - C64364 + C64365 - C64366) * C139731) *
                C13857 +
            ((C64367 - C64368 + C64369 - C64370) * C54790 +
             (C64371 - C64372 + C64373 - C64374) * C139731) *
                C13858) *
               C1565 +
           (((C64360 - C64359 + C64362 - C64361) * C54790 +
             (C64364 - C64363 + C64366 - C64365) * C139731) *
                C13856 +
            ((C64368 - C64367 + C64370 - C64369) * C54790 +
             (C64372 - C64371 + C64374 - C64373) * C139731) *
                C13857 +
            ((C47134 * C18422 - C47216 * C18302 + C139873 * C64356 -
              C47217 * C64244) *
                 C54790 +
             (C47134 * C18424 - C47216 * C18305 + C139873 * C64357 -
              C47217 * C64246) *
                 C139731) *
                C13858) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eexz[68] +=
        (-std::pow(Pi, 2.5) *
         (((((C139835 * C266 - C265 * C108) * C54790 +
             (C139835 * C272 - C265 * C115) * C139731) *
                C54786 +
            ((C6915 - C6916) * C54790 + (C6917 - C6918) * C139731) * C54787 +
            C57241 * C54788 + C57244 * C54789) *
               C1565 +
           (((C265 * C1570 - C139835 * C1741) * C54790 +
             (C265 * C1579 - C139835 * C1746) * C139731) *
                C54786 +
            ((C10635 - C10636) * C54790 + (C10637 - C10638) * C139731) *
                C54787 +
            ((C10639 - C10640) * C54790 + (C10641 - C10642) * C139731) *
                C54788 +
            ((C57811 - C57812) * C54790 + (C57813 - C57814) * C139731) *
                C54789) *
               C140002) *
              C2322 +
          ((((C6916 - C6915) * C54790 + (C6918 - C6917) * C139731) * C54786 +
            ((C6922 - C6921) * C54790 + (C6924 - C6923) * C139731) * C54787 +
            ((C9794 - C9795) * C54790 + (C9796 - C9797) * C139731) * C54788 +
            ((C57237 - C57238) * C54790 + (C57239 - C57240) * C139731) *
                C54789) *
               C1565 +
           (((C10636 - C10635) * C54790 + (C10638 - C10637) * C139731) *
                C54786 +
            ((C10640 - C10639) * C54790 + (C10642 - C10641) * C139731) *
                C54787 +
            ((C57812 - C57811) * C54790 + (C57814 - C57813) * C139731) *
                C54788 +
            ((C139835 * C57808 - C265 * C57646) * C54790 +
             (C139835 * C57809 - C265 * C57648) * C139731) *
                C54789) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C139835 * C266 - C265 * C108) * C47136 +
             (C139835 * C272 - C265 * C115) * C47131 + (C279 - C280) * C47138 +
             (C281 - C282) * C47132 + C295 * C47140 + C296 * C47133) *
                C47134 +
            ((C6915 - C6916) * C47136 + (C6917 - C6918) * C47131 +
             C6919 * C47138 + C6920 * C47132 + C21967 * C47140 +
             C21968 * C47133) *
                C139873) *
               C1565 +
           (((C265 * C1570 - C139835 * C1741) * C47136 +
             (C265 * C1579 - C139835 * C1746) * C47131 +
             (C1752 - C1753) * C47138 + (C1754 - C1755) * C47132 +
             (C1756 - C1757) * C47140 + (C1758 - C1759) * C47133) *
                C47134 +
            ((C10635 - C10636) * C47136 + (C10637 - C10638) * C47131 +
             (C7986 - C7987) * C47138 + (C7988 - C7989) * C47132 +
             (C23820 - C23821) * C47140 + (C23822 - C23823) * C47133) *
                C139873) *
               C140002) *
              C2322 +
          ((((C6916 - C6915) * C47136 + (C6918 - C6917) * C47131 +
             C6927 * C47138 + C6928 * C47132 + C22843 * C47140 +
             C22844 * C47133) *
                C47134 +
            ((C6922 - C6921) * C47136 + (C6924 - C6923) * C47131 +
             C6929 * C47138 + C6930 * C47132 + (C6000 - C6001) * C47140 +
             (C6002 - C6003) * C47133) *
                C139873) *
               C1565 +
           (((C10636 - C10635) * C47136 + (C10638 - C10637) * C47131 +
             (C7987 - C7986) * C47138 + (C7989 - C7988) * C47132 +
             (C23821 - C23820) * C47140 + (C23823 - C23822) * C47133) *
                C47134 +
            ((C10640 - C10639) * C47136 + (C10642 - C10641) * C47131 +
             (C7991 - C7990) * C47138 + (C7993 - C7992) * C47132 +
             (C139835 * C7981 - C265 * C7755) * C47140 +
             (C139835 * C7984 - C265 * C7761) * C47133) *
                C139873) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C13856 * C266 - C14015 * C108 + C13857 * C1741 - C14016 * C1570 +
              C13858 * C5397 - C14017 * C5273) *
                 C54790 +
             (C13856 * C272 - C14015 * C115 + C13857 * C1746 - C14016 * C1579 +
              C13858 * C5401 - C14017 * C5278) *
                 C139731) *
                C47134 +
            ((C60887 - C60888 + C60889 - C60890 + C60891 - C60892) * C54790 +
             (C60893 - C60894 + C60895 - C60896 + C60897 - C60898) * C139731) *
                C139873) *
               C1565 +
           (((C14015 * C1570 - C13856 * C1741 + C14016 * C5273 -
              C13857 * C5397 + C14017 * C15623 - C13858 * C15912) *
                 C54790 +
             (C14015 * C1579 - C13856 * C1746 + C14016 * C5278 -
              C13857 * C5401 + C14017 * C15628 - C13858 * C15915) *
                 C139731) *
                C47134 +
            ((C64475 - C64476 + C64477 - C64478 + C64479 - C64480) * C54790 +
             (C64481 - C64482 + C64483 - C64484 + C64485 - C64486) * C139731) *
                C139873) *
               C140002) *
              C2322 +
          ((((C60888 - C60887 + C60890 - C60889 + C60892 - C60891) * C54790 +
             (C60894 - C60893 + C60896 - C60895 + C60898 - C60897) * C139731) *
                C47134 +
            ((C63658 - C63659 + C63660 - C63661 + C63662 - C63663) * C54790 +
             (C63664 - C63665 + C63666 - C63667 + C63668 - C63669) * C139731) *
                C139873) *
               C1565 +
           (((C64476 - C64475 + C64478 - C64477 + C64480 - C64479) * C54790 +
             (C64482 - C64481 + C64484 - C64483 + C64486 - C64485) * C139731) *
                C47134 +
            ((C13856 * C7979 - C14015 * C7754 + C13857 * C13300 -
              C14016 * C13128 + C13858 * C64472 - C14017 * C64244) *
                 C54790 +
             (C13856 * C7982 - C14015 * C7759 + C13857 * C13304 -
              C14016 * C13135 + C13858 * C64473 - C14017 * C64246) *
                 C139731) *
                C139873) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eeyx[68] +=
        (-std::pow(Pi, 2.5) *
         ((((C139731 * C114 - C54790 * C108) * C54842 +
            (C139731 * C354 - C54790 * C348) * C54786 +
            (C55513 - C55514) * C54843 + (C55515 - C55516) * C54787 +
            C57297 * C54844 + C57298 * C54788 + C57299 * C54845 +
            C57300 * C54789) *
               C139835 * C1565 +
           ((C54790 * C1570 - C139731 * C1578) * C54842 +
            (C54790 * C1829 - C139731 * C1834) * C54786 +
            (C57883 - C57884) * C54843 + (C57885 - C57886) * C54787 +
            (C57887 - C57888) * C54844 + (C57889 - C57890) * C54788 +
            (C57891 - C57892) * C54845 + (C57893 - C57894) * C54789) *
               C139835 * C140002) *
              C2322 +
          (((C55514 - C55513) * C54842 + (C55516 - C55515) * C54786 +
            (C55518 - C55517) * C54843 + (C55520 - C55519) * C54787 +
            (C55522 - C55521) * C54844 + (C55524 - C55523) * C54788 +
            (C57301 - C57302) * C54845 + (C57303 - C57304) * C54789) *
               C139835 * C1565 +
           ((C57884 - C57883) * C54842 + (C57886 - C57885) * C54786 +
            (C57888 - C57887) * C54843 + (C57890 - C57889) * C54787 +
            (C57892 - C57891) * C54844 + (C57894 - C57893) * C54788 +
            (C139731 * C57647 - C54790 * C57646) * C54845 +
            (C139731 * C57881 - C54790 * C57880) * C54789) *
               C139835 * C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47131 * C114 - C47136 * C108 + C47132 * C116 - C47138 * C109 +
             C47133 * C118 - C47140 * C110) *
                C47216 +
            (C47131 * C354 - C47136 * C348 + C47132 * C355 - C47138 * C349 +
             C47133 * C356 - C47140 * C350) *
                C47134 +
            (C48294 - C48295 + C48296 - C48297 + C48298 - C48299) * C47217 +
            (C48300 - C48301 + C48302 - C48303 + C48304 - C48305) * C139873) *
               C139835 * C1565 +
           ((C47136 * C1570 - C47131 * C1578 + C47138 * C1569 - C47132 * C1576 +
             C47140 * C1568 - C47133 * C1574) *
                C47216 +
            (C47136 * C1829 - C47131 * C1834 + C47138 * C1830 - C47132 * C1835 +
             C47140 * C1831 - C47133 * C1836) *
                C47134 +
            (C51798 - C51799 + C51800 - C51801 + C51802 - C51803) * C47217 +
            (C51804 - C51805 + C51806 - C51807 + C51808 - C51809) * C139873) *
               C139835 * C140002) *
              C2322 +
          (((C48295 - C48294 + C48297 - C48296 + C48299 - C48298) * C47216 +
            (C48301 - C48300 + C48303 - C48302 + C48305 - C48304) * C47134 +
            (C50997 - C50998 + C50999 - C51000 + C51001 - C51002) * C47217 +
            (C51003 - C51004 + C51005 - C51006 + C51007 - C51008) * C139873) *
               C139835 * C1565 +
           ((C51799 - C51798 + C51801 - C51800 + C51803 - C51802) * C47216 +
            (C51805 - C51804 + C51807 - C51806 + C51809 - C51808) * C47134 +
            (C47131 * C7758 - C47136 * C7754 + C47132 * C7756 - C47138 * C7753 +
             C47133 * C7760 - C47140 * C7755) *
                C47217 +
            (C47131 * C8094 - C47136 * C8091 + C47132 * C8095 - C47138 * C8092 +
             C47133 * C8096 - C47140 * C8093) *
                C139873) *
               C139835 * C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C139731 * C114 - C54790 * C108) * C47216 +
             (C139731 * C354 - C54790 * C348) * C47134 +
             (C55513 - C55514) * C47217 + (C55515 - C55516) * C139873) *
                C13856 +
            ((C61976 - C61977) * C47216 + (C61978 - C61979) * C47134 +
             C64587 * C47217 + C64588 * C139873) *
                C13857 +
            ((C61980 - C61981) * C47216 + (C61982 - C61983) * C47134 +
             C64589 * C47217 + C64590 * C139873) *
                C13858) *
               C1565 +
           (((C61977 - C61976) * C47216 + (C61979 - C61978) * C47134 +
             C64591 * C47217 + C64592 * C139873) *
                C13856 +
            ((C61981 - C61980) * C47216 + (C61983 - C61982) * C47134 +
             C64593 * C47217 + C64594 * C139873) *
                C13857 +
            ((C54790 * C15623 - C139731 * C15627) * C47216 +
             (C54790 * C16028 - C139731 * C16031) * C47134 +
             (C64595 - C64596) * C47217 + (C64597 - C64598) * C139873) *
                C13858) *
               C140002) *
              C2322 +
          ((((C55514 - C55513) * C47216 + (C55516 - C55515) * C47134 +
             (C55518 - C55517) * C47217 + (C55520 - C55519) * C139873) *
                C13856 +
            (C64591 * C47216 + C64592 * C47134 + (C57887 - C57888) * C47217 +
             (C57889 - C57890) * C139873) *
                C13857 +
            (C64593 * C47216 + C64594 * C47134 + (C63744 - C63745) * C47217 +
             (C63746 - C63747) * C139873) *
                C13858) *
               C1565 +
           ((C64587 * C47216 + C64588 * C47134 + (C57888 - C57887) * C47217 +
             (C57890 - C57889) * C139873) *
                C13856 +
            (C64589 * C47216 + C64590 * C47134 + (C63745 - C63744) * C47217 +
             (C63747 - C63746) * C139873) *
                C13857 +
            ((C64596 - C64595) * C47216 + (C64598 - C64597) * C47134 +
             (C139731 * C64245 - C54790 * C64244) * C47217 +
             (C139731 * C64585 - C54790 * C64584) * C139873) *
                C13858) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eeyy[68] +=
        (-std::pow(Pi, 2.5) *
         (((C54842 * C183 - C54996 * C108 - C54842 * C348 + C54786 * C411 +
            C54843 * C896 - C54997 * C813 - C54843 * C1072 + C54787 * C1151 +
            C54844 * C2974 - C54998 * C2908 - C54844 * C3090 + C54788 * C3148 +
            C54845 * C6792 - C54999 * C6627 - C54845 * C7032 + C54789 * C7169) *
               C139731 * C139835 * C1565 -
           (C54845 * C10528 - C54999 * C10394 - C54845 * C10740 +
            C54789 * C10858 + C54844 * C7863 - C54998 * C7754 - C54844 * C8091 +
            C54788 * C8196 + C54843 * C3520 - C54997 * C3438 - C54843 * C3668 +
            C54787 * C3742 + C54842 * C1653 - C54996 * C1570 - C54842 * C1829 +
            C54786 * C1908) *
               C139731 * C139835 * C140002) *
              C2322 +
          ((C54842 * C3520 - C54996 * C3438 - C54842 * C3668 + C54786 * C3742 +
            C54843 * C7863 - C54997 * C7754 - C54843 * C8091 + C54787 * C8196 +
            C54844 * C10528 - C54998 * C10394 - C54844 * C10740 +
            C54788 * C10858 + C54845 * C57740 - C54999 * C57646 -
            C54845 * C57880 + C54789 * C57960) *
               C139731 * C139835 * C140002 -
           (C54845 * C9707 - C54999 * C9609 - C54845 * C9876 + C54789 * C9968 +
            C54844 * C6792 - C54998 * C6627 - C54844 * C7032 + C54788 * C7169 +
            C54843 * C2974 - C54997 * C2908 - C54843 * C3090 + C54787 * C3148 +
            C54842 * C896 - C54996 * C813 - C54842 * C1072 + C54786 * C1151) *
               C139731 * C139835 * C1565) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47216 * C183 - C47470 * C108 - C47216 * C348 + C47134 * C411 +
             C47217 * C896 - C47471 * C813 - C47217 * C1072 + C139873 * C1151) *
                C47131 +
            (C47509 + C47510) * C47132 + C47515 * C47133) *
               C139835 * C1565 -
           ((C49390 + C49391) * C47133 + (C49392 + C49393) * C47132 +
            (C47217 * C3520 - C47471 * C3438 - C47217 * C3668 +
             C139873 * C3742 + C47216 * C1653 - C47470 * C1570 -
             C47216 * C1829 + C47134 * C1908) *
                C47131) *
               C139835 * C140002) *
              C2322 +
          (((C47216 * C3520 - C47470 * C3438 - C47216 * C3668 + C47134 * C3742 +
             C47217 * C7863 - C47471 * C7754 - C47217 * C8091 +
             C139873 * C8196) *
                C47131 +
            (C47216 * C3521 - C47470 * C3439 - C47216 * C3669 + C47134 * C3743 +
             C47217 * C7864 - C47471 * C7753 - C47217 * C8092 +
             C139873 * C8195) *
                C47132 +
            (C47216 * C3522 - C47470 * C3440 - C47216 * C3670 + C47134 * C3744 +
             C47217 * C7865 - C47471 * C7755 - C47217 * C8093 +
             C139873 * C8197) *
                C47133) *
               C139835 * C140002 -
           ((C48440 + C48441) * C47133 + (C48442 + C48443) * C47132 +
            (C47217 * C2974 - C47471 * C2908 - C47217 * C3090 +
             C139873 * C3148 + C47216 * C896 - C47470 * C813 - C47216 * C1072 +
             C47134 * C1151) *
                C47131) *
               C139835 * C1565) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47216 * C183 - C47470 * C108 - C47216 * C348 + C47134 * C411 +
             C47217 * C896 - C47471 * C813 - C47217 * C1072 + C139873 * C1151) *
                C139731 * C13856 +
            (C62126 + C62127) * C139731 * C13857 +
            (C62128 + C62129) * C139731 * C13858) *
               C1565 -
           ((C47217 * C18422 - C47471 * C18302 - C47217 * C18634 +
             C139873 * C18744 + C47216 * C15788 - C47470 * C15623 -
             C47216 * C16028 + C47134 * C16165) *
                C139731 * C13858 +
            (C62129 + C62128) * C139731 * C13857 +
            (C62127 + C62126) * C139731 * C13856) *
               C140002) *
              C2322 +
          (((C64722 + C64723) * C139731 * C13856 +
            (C64724 + C64725) * C139731 * C13857 +
            (C47216 * C18422 - C47470 * C18302 - C47216 * C18634 +
             C47134 * C18744 + C47217 * C64356 - C47471 * C64244 -
             C47217 * C64584 + C139873 * C64696) *
                C139731 * C13858) *
               C140002 -
           ((C64725 + C64724) * C139731 * C13858 +
            (C64723 + C64722) * C139731 * C13857 +
            (C47217 * C2974 - C47471 * C2908 - C47217 * C3090 +
             C139873 * C3148 + C47216 * C896 - C47470 * C813 - C47216 * C1072 +
             C47134 * C1151) *
                C139731 * C13856) *
               C1565) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eeyz[68] +=
        (-std::pow(Pi, 2.5) *
         ((((C139835 * C266 - C265 * C108) * C54842 +
            (C139835 * C495 - C265 * C348) * C54786 + (C6915 - C6916) * C54843 +
            (C7294 - C7295) * C54787 + C9790 * C54844 + C10047 * C54788 +
            C57235 * C54845 + C57407 * C54789) *
               C139731 * C1565 +
           ((C265 * C1570 - C139835 * C1741) * C54842 +
            (C265 * C1829 - C139835 * C1997) * C54786 +
            (C10635 - C10636) * C54843 + (C10961 - C10962) * C54787 +
            (C10639 - C10640) * C54844 + (C10963 - C10964) * C54788 +
            (C57811 - C57812) * C54845 + (C58029 - C58030) * C54789) *
               C139731 * C140002) *
              C2322 +
          (((C6916 - C6915) * C54842 + (C7295 - C7294) * C54786 +
            (C6922 - C6921) * C54843 + (C7297 - C7296) * C54787 +
            (C9794 - C9795) * C54844 + (C10048 - C10049) * C54788 +
            (C57237 - C57238) * C54845 + (C57408 - C57409) * C54789) *
               C139731 * C1565 +
           ((C10636 - C10635) * C54842 + (C10962 - C10961) * C54786 +
            (C10640 - C10639) * C54843 + (C10964 - C10963) * C54787 +
            (C57812 - C57811) * C54844 + (C58030 - C58029) * C54788 +
            (C139835 * C57808 - C265 * C57646) * C54845 +
            (C139835 * C58027 - C265 * C57880) * C54789) *
               C139731 * C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C139835 * C266 - C265 * C108) * C47216 +
             (C139835 * C495 - C265 * C348) * C47134 +
             (C6915 - C6916) * C47217 + (C7294 - C7295) * C139873) *
                C47131 +
            ((C279 - C280) * C47216 + (C502 - C503) * C47134 + C6919 * C47217 +
             C7298 * C139873) *
                C47132 +
            C47596 * C47133) *
               C1565 +
           (((C265 * C1570 - C139835 * C1741) * C47216 +
             (C265 * C1829 - C139835 * C1997) * C47134 +
             (C10635 - C10636) * C47217 + (C10961 - C10962) * C139873) *
                C47131 +
            ((C1752 - C1753) * C47216 + (C2003 - C2004) * C47134 +
             (C7986 - C7987) * C47217 + (C8321 - C8322) * C139873) *
                C47132 +
            ((C1756 - C1757) * C47216 + (C2005 - C2006) * C47134 +
             (C23820 - C23821) * C47217 + (C24146 - C24147) * C139873) *
                C47133) *
               C140002) *
              C2322 +
          ((((C6916 - C6915) * C47216 + (C7295 - C7294) * C47134 +
             (C6922 - C6921) * C47217 + (C7297 - C7296) * C139873) *
                C47131 +
            (C6927 * C47216 + C7300 * C47134 + C6929 * C47217 +
             C7301 * C139873) *
                C47132 +
            (C22843 * C47216 + C23191 * C47134 + (C6000 - C6001) * C47217 +
             (C6273 - C6274) * C139873) *
                C47133) *
               C1565 +
           (((C10636 - C10635) * C47216 + (C10962 - C10961) * C47134 +
             (C10640 - C10639) * C47217 + (C10964 - C10963) * C139873) *
                C47131 +
            ((C7987 - C7986) * C47216 + (C8322 - C8321) * C47134 +
             (C7991 - C7990) * C47217 + (C8324 - C8323) * C139873) *
                C47132 +
            ((C23821 - C23820) * C47216 + (C24147 - C24146) * C47134 +
             (C139835 * C7981 - C265 * C7755) * C47217 +
             (C139835 * C8319 - C265 * C8093) * C139873) *
                C47133) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C13856 * C266 - C14015 * C108 + C13857 * C1741 - C14016 * C1570 +
             C13858 * C5397 - C14017 * C5273) *
                C47216 +
            (C13856 * C495 - C14015 * C348 + C13857 * C1997 - C14016 * C1829 +
             C13858 * C5567 - C14017 * C5455) *
                C47134 +
            (C60887 - C60888 + C60889 - C60890 + C60891 - C60892) * C47217 +
            (C61205 - C61206 + C61207 - C61208 + C61209 - C61210) * C139873) *
               C139731 * C1565 +
           ((C14015 * C1570 - C13856 * C1741 + C14016 * C5273 - C13857 * C5397 +
             C14017 * C15623 - C13858 * C15912) *
                C47216 +
            (C14015 * C1829 - C13856 * C1997 + C14016 * C5455 - C13857 * C5567 +
             C14017 * C16028 - C13858 * C16294) *
                C47134 +
            (C64475 - C64476 + C64477 - C64478 + C64479 - C64480) * C47217 +
            (C64825 - C64826 + C64827 - C64828 + C64829 - C64830) * C139873) *
               C139731 * C140002) *
              C2322 +
          (((C60888 - C60887 + C60890 - C60889 + C60892 - C60891) * C47216 +
            (C61206 - C61205 + C61208 - C61207 + C61210 - C61209) * C47134 +
            (C63658 - C63659 + C63660 - C63661 + C63662 - C63663) * C47217 +
            (C63896 - C63897 + C63898 - C63899 + C63900 - C63901) * C139873) *
               C139731 * C1565 +
           ((C64476 - C64475 + C64478 - C64477 + C64480 - C64479) * C47216 +
            (C64826 - C64825 + C64828 - C64827 + C64830 - C64829) * C47134 +
            (C13856 * C7979 - C14015 * C7754 + C13857 * C13300 -
             C14016 * C13128 + C13858 * C64472 - C14017 * C64244) *
                C47217 +
            (C13856 * C8317 - C14015 * C8091 + C13857 * C13541 -
             C14016 * C13382 + C13858 * C64823 - C14017 * C64584) *
                C139873) *
               C139731 * C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eezx[68] +=
        (-std::pow(Pi, 2.5) *
         (((((C139731 * C114 - C54790 * C108) * C265 +
             (C139731 * C573 - C54790 * C567) * C139835) *
                C54786 +
            ((C55513 - C55514) * C265 + (C55735 - C55736) * C139835) * C54787 +
            C57470 * C54788 + C57471 * C54789) *
               C1565 +
           (((C54790 * C1570 - C139731 * C1578) * C265 +
             (C54790 * C2074 - C139731 * C2079) * C139835) *
                C54786 +
            ((C57883 - C57884) * C265 + (C58099 - C58100) * C139835) * C54787 +
            ((C57887 - C57888) * C265 + (C58101 - C58102) * C139835) * C54788 +
            ((C57891 - C57892) * C265 + (C58103 - C58104) * C139835) * C54789) *
               C140002) *
              C2322 +
          ((((C55514 - C55513) * C265 + (C55736 - C55735) * C139835) * C54786 +
            ((C55518 - C55517) * C265 + (C55738 - C55737) * C139835) * C54787 +
            ((C55522 - C55521) * C265 + (C55740 - C55739) * C139835) * C54788 +
            ((C57301 - C57302) * C265 + (C57466 - C57467) * C139835) * C54789) *
               C1565 +
           (((C57884 - C57883) * C265 + (C58100 - C58099) * C139835) * C54786 +
            ((C57888 - C57887) * C265 + (C58102 - C58101) * C139835) * C54787 +
            ((C57892 - C57891) * C265 + (C58104 - C58103) * C139835) * C54788 +
            ((C139731 * C57647 - C54790 * C57646) * C265 +
             (C139731 * C58097 - C54790 * C58096) * C139835) *
                C54789) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47131 * C114 - C47136 * C108 + C47132 * C116 - C47138 * C109 +
              C47133 * C118 - C47140 * C110) *
                 C265 +
             (C47131 * C573 - C47136 * C567 + C47132 * C574 - C47138 * C568 +
              C47133 * C575 - C47140 * C569) *
                 C139835) *
                C47134 +
            ((C48294 - C48295 + C48296 - C48297 + C48298 - C48299) * C265 +
             (C48640 - C48641 + C48642 - C48643 + C48644 - C48645) * C139835) *
                C139873) *
               C1565 +
           (((C47136 * C1570 - C47131 * C1578 + C47138 * C1569 -
              C47132 * C1576 + C47140 * C1568 - C47133 * C1574) *
                 C265 +
             (C47136 * C2074 - C47131 * C2079 + C47138 * C2075 -
              C47132 * C2080 + C47140 * C2076 - C47133 * C2081) *
                 C139835) *
                C47134 +
            ((C51798 - C51799 + C51800 - C51801 + C51802 - C51803) * C265 +
             (C52104 - C52105 + C52106 - C52107 + C52108 - C52109) * C139835) *
                C139873) *
               C140002) *
              C2322 +
          ((((C48295 - C48294 + C48297 - C48296 + C48299 - C48298) * C265 +
             (C48641 - C48640 + C48643 - C48642 + C48645 - C48644) * C139835) *
                C47134 +
            ((C50997 - C50998 + C50999 - C51000 + C51001 - C51002) * C265 +
             (C51231 - C51232 + C51233 - C51234 + C51235 - C51236) * C139835) *
                C139873) *
               C1565 +
           (((C51799 - C51798 + C51801 - C51800 + C51803 - C51802) * C265 +
             (C52105 - C52104 + C52107 - C52106 + C52109 - C52108) * C139835) *
                C47134 +
            ((C47131 * C7758 - C47136 * C7754 + C47132 * C7756 -
              C47138 * C7753 + C47133 * C7760 - C47140 * C7755) *
                 C265 +
             (C47131 * C8425 - C47136 * C8422 + C47132 * C8426 -
              C47138 * C8423 + C47133 * C8427 - C47140 * C8424) *
                 C139835) *
                C139873) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C139731 * C114 - C54790 * C108) * C14015 +
             (C139731 * C573 - C54790 * C567) * C13856 +
             (C61976 - C61977) * C14016 + (C62328 - C62329) * C13857 +
             (C61980 - C61981) * C14017 + (C62330 - C62331) * C13858) *
                C47134 +
            ((C55513 - C55514) * C14015 + (C55735 - C55736) * C13856 +
             C64587 * C14016 + C64931 * C13857 + C64589 * C14017 +
             C64932 * C13858) *
                C139873) *
               C1565 +
           (((C61977 - C61976) * C14015 + (C62329 - C62328) * C13856 +
             (C61981 - C61980) * C14016 + (C62331 - C62330) * C13857 +
             (C54790 * C15623 - C139731 * C15627) * C14017 +
             (C54790 * C16401 - C139731 * C16404) * C13858) *
                C47134 +
            (C64591 * C14015 + C64933 * C13856 + C64593 * C14016 +
             C64934 * C13857 + (C64595 - C64596) * C14017 +
             (C64935 - C64936) * C13858) *
                C139873) *
               C140002) *
              C2322 +
          ((((C55514 - C55513) * C14015 + (C55736 - C55735) * C13856 +
             C64591 * C14016 + C64933 * C13857 + C64593 * C14017 +
             C64934 * C13858) *
                C47134 +
            ((C55518 - C55517) * C14015 + (C55738 - C55737) * C13856 +
             (C57887 - C57888) * C14016 + (C58101 - C58102) * C13857 +
             (C63744 - C63745) * C14017 + (C63976 - C63977) * C13858) *
                C139873) *
               C1565 +
           ((C64587 * C14015 + C64931 * C13856 + C64589 * C14016 +
             C64932 * C13857 + (C64596 - C64595) * C14017 +
             (C64936 - C64935) * C13858) *
                C47134 +
            ((C57888 - C57887) * C14015 + (C58102 - C58101) * C13856 +
             (C63745 - C63744) * C14016 + (C63977 - C63976) * C13857 +
             (C139731 * C64245 - C54790 * C64244) * C14017 +
             (C139731 * C64929 - C54790 * C64928) * C13858) *
                C139873) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eezy[68] +=
        (-std::pow(Pi, 2.5) *
         ((((C54786 * C183 - C54842 * C108 + C54787 * C896 - C54843 * C813 +
             C54788 * C2974 - C54844 * C2908 + C54789 * C6792 -
             C54845 * C6627) *
                C265 +
            (C54786 * C629 - C54842 * C567 + C54787 * C1393 - C54843 * C1317 +
             C54788 * C3314 - C54844 * C3256 + C54789 * C7521 -
             C54845 * C7401) *
                C139835) *
               C139731 * C1565 +
           ((C54842 * C1570 - C54786 * C1653 + C54843 * C3438 - C54787 * C3520 +
             C54844 * C7754 - C54788 * C7863 + C54845 * C10394 -
             C54789 * C10528) *
                C265 +
            (C54842 * C2074 - C54786 * C2150 + C54843 * C3882 - C54787 * C3956 +
             C54844 * C8422 - C54788 * C8526 + C54845 * C11062 -
             C54789 * C11172) *
                C139835) *
               C139731 * C140002) *
              C2322 +
          (((C54842 * C813 - C54786 * C896 + C54843 * C2908 - C54787 * C2974 +
             C54844 * C6627 - C54788 * C6792 + C54845 * C9609 -
             C54789 * C9707) *
                C265 +
            (C54842 * C1317 - C54786 * C1393 + C54843 * C3256 - C54787 * C3314 +
             C54844 * C7401 - C54788 * C7521 + C54845 * C10123 -
             C54789 * C10211) *
                C139835) *
               C139731 * C1565 +
           ((C54786 * C3520 - C54842 * C3438 + C54787 * C7863 - C54843 * C7754 +
             C54788 * C10528 - C54844 * C10394 + C54789 * C57740 -
             C54845 * C57646) *
                C265 +
            (C54786 * C3956 - C54842 * C3882 + C54787 * C8526 - C54843 * C8422 +
             C54788 * C11172 - C54844 * C11062 + C54789 * C58170 -
             C54845 * C58096) *
                C139835) *
               C139731 * C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47134 * C183 - C47216 * C108 + C139873 * C896 - C47217 * C813) *
                 C265 +
             (C47134 * C629 - C47216 * C567 + C139873 * C1393 -
              C47217 * C1317) *
                 C139835) *
                C47131 +
            ((C47219 - C47220 + C47221 - C47222) * C265 +
             (C47745 - C47746 + C47747 - C47748) * C139835) *
                C47132 +
            C47762 * C47133) *
               C1565 +
           (((C47216 * C1570 - C47134 * C1653 + C47217 * C3438 -
              C139873 * C3520) *
                 C265 +
             (C47216 * C2074 - C47134 * C2150 + C47217 * C3882 -
              C139873 * C3956) *
                 C139835) *
                C47131 +
            ((C49056 - C49057 + C49058 - C49059) * C265 +
             (C49688 - C49689 + C49690 - C49691) * C139835) *
                C47132 +
            ((C49064 - C49065 + C49066 - C49067) * C265 +
             (C49692 - C49693 + C49694 - C49695) * C139835) *
                C47133) *
               C140002) *
              C2322 +
          ((((C47216 * C813 - C47134 * C896 + C47217 * C2908 -
              C139873 * C2974) *
                 C265 +
             (C47216 * C1317 - C47134 * C1393 + C47217 * C3256 -
              C139873 * C3314) *
                 C139835) *
                C47131 +
            ((C48082 - C48083 + C48084 - C48085) * C265 +
             (C48750 - C48751 + C48752 - C48753) * C139835) *
                C47132 +
            ((C48090 - C48091 + C48092 - C48093) * C265 +
             (C48754 - C48755 + C48756 - C48757) * C139835) *
                C47133) *
               C1565 +
           (((C47134 * C3520 - C47216 * C3438 + C139873 * C7863 -
              C47217 * C7754) *
                 C265 +
             (C47134 * C3956 - C47216 * C3882 + C139873 * C8526 -
              C47217 * C8422) *
                 C139835) *
                C47131 +
            ((C47134 * C3521 - C47216 * C3439 + C139873 * C7864 -
              C47217 * C7753) *
                 C265 +
             (C47134 * C3957 - C47216 * C3883 + C139873 * C8527 -
              C47217 * C8423) *
                 C139835) *
                C47132 +
            ((C47134 * C3522 - C47216 * C3440 + C139873 * C7865 -
              C47217 * C7755) *
                 C265 +
             (C47134 * C3958 - C47216 * C3884 + C139873 * C8528 -
              C47217 * C8424) *
                 C139835) *
                C47133) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47134 * C183 - C47216 * C108 + C139873 * C896 - C47217 * C813) *
                C14015 +
            (C47134 * C629 - C47216 * C567 + C139873 * C1393 - C47217 * C1317) *
                C13856 +
            (C61756 - C61757 + C61758 - C61759) * C14016 +
            (C62434 - C62435 + C62436 - C62437) * C13857 +
            (C61764 - C61765 + C61766 - C61767) * C14017 +
            (C62438 - C62439 + C62440 - C62441) * C13858) *
               C139731 * C1565 +
           ((C61757 - C61756 + C61759 - C61758) * C14015 +
            (C62435 - C62434 + C62437 - C62436) * C13856 +
            (C61765 - C61764 + C61767 - C61766) * C14016 +
            (C62439 - C62438 + C62441 - C62440) * C13857 +
            (C47216 * C15623 - C47134 * C15788 + C47217 * C18302 -
             C139873 * C18422) *
                C14017 +
            (C47216 * C16401 - C47134 * C16521 + C47217 * C18962 -
             C139873 * C19068) *
                C13858) *
               C139731 * C140002) *
              C2322 +
          (((C47216 * C813 - C47134 * C896 + C47217 * C2908 - C139873 * C2974) *
                C14015 +
            (C47216 * C1317 - C47134 * C1393 + C47217 * C3256 -
             C139873 * C3314) *
                C13856 +
            (C64359 - C64360 + C64361 - C64362) * C14016 +
            (C65036 - C65037 + C65038 - C65039) * C13857 +
            (C64367 - C64368 + C64369 - C64370) * C14017 +
            (C65040 - C65041 + C65042 - C65043) * C13858) *
               C139731 * C1565 +
           ((C64360 - C64359 + C64362 - C64361) * C14015 +
            (C65037 - C65036 + C65039 - C65038) * C13856 +
            (C64368 - C64367 + C64370 - C64369) * C14016 +
            (C65041 - C65040 + C65043 - C65042) * C13857 +
            (C47134 * C18422 - C47216 * C18302 + C139873 * C64356 -
             C47217 * C64244) *
                C14017 +
            (C47134 * C19068 - C47216 * C18962 + C139873 * C65034 -
             C47217 * C64928) *
                C13858) *
               C139731 * C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eezz[68] +=
        (-std::pow(Pi, 2.5) *
         ((((C265 * C266 - C701 * C108 - C265 * C567 + C139835 * C702) *
                C54786 +
            C7652 * C54787 + C7653 * C54788 + C10296 * C54789) *
               C139731 * C1565 -
           (C58245 * C54789 + C11287 * C54788 + C11288 * C54787 +
            (C265 * C1741 - C701 * C1570 - C265 * C2074 + C139835 * C2230) *
                C54786) *
               C139731 * C140002) *
              C2322 +
          ((C11288 * C54786 + C11287 * C54787 + C58245 * C54788 +
            (C265 * C57808 - C701 * C57646 - C265 * C58096 + C139835 * C58237) *
                C54789) *
               C139731 * C140002 -
           (C57580 * C54789 + C10296 * C54788 + C7653 * C54787 +
            C7652 * C54786) *
               C139731 * C1565) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C265 * C266 - C701 * C108 - C265 * C567 + C139835 * C702) *
                 C47134 +
             C7652 * C139873) *
                C47131 +
            (C47837 + C47838) * C47132 + C47843 * C47133) *
               C1565 -
           ((C49794 + C49795) * C47133 + (C49796 + C49797) * C47132 +
            (C11288 * C139873 +
             (C265 * C1741 - C701 * C1570 - C265 * C2074 + C139835 * C2230) *
                 C47134) *
                C47131) *
               C140002) *
              C2322 +
          (((C11288 * C47134 + C11287 * C139873) * C47131 +
            (C8651 * C47134 + C8650 * C139873) * C47132 +
            (C24459 * C47134 +
             (C265 * C7981 - C701 * C7755 - C265 * C8424 + C139835 * C8635) *
                 C139873) *
                C47133) *
               C140002 -
           ((C48856 + C48857) * C47133 + (C48858 + C48859) * C47132 +
            (C7653 * C139873 + C7652 * C47134) * C47131) *
               C1565) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C14015 * C266 - C14516 * C108 - C14015 * C567 + C13856 * C702 +
             C14016 * C1741 - C14517 * C1570 - C14016 * C2074 + C13857 * C2230 +
             C14017 * C5397 - C14518 * C5273 - C14017 * C5621 +
             C13858 * C5733) *
                C47134 +
            (C61529 + C61530 + C61531) * C139873) *
               C139731 * C1565 -
           ((C65161 + C65162 + C65163) * C139873 +
            (C14017 * C15912 - C14518 * C15623 - C14017 * C16401 +
             C13858 * C16633 + C14016 * C5397 - C14517 * C5273 -
             C14016 * C5621 + C13857 * C5733 + C14015 * C1741 - C14516 * C1570 -
             C14015 * C2074 + C13856 * C2230) *
                C47134) *
               C139731 * C140002) *
              C2322 +
          (((C65163 + C65162 + C65161) * C47134 +
            (C14015 * C7979 - C14516 * C7754 - C14015 * C8422 + C13856 * C8634 +
             C14016 * C13300 - C14517 * C13128 - C14016 * C13620 +
             C13857 * C13779 + C14017 * C64472 - C14518 * C64244 -
             C14017 * C64928 + C13858 * C65141) *
                C139873) *
               C139731 * C140002 -
           ((C64144 + C64145 + C64146) * C139873 +
            (C61531 + C61530 + C61529) * C47134) *
               C139731 * C1565) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eexx[69] +=
        (-std::pow(Pi, 2.5) *
         ((((C54790 * C114 - C54791 * C108 - C54790 * C115 + C139731 * C126) *
                C139835 * C54786 +
            C55309 * C54787 + C55310 * C54788 + C55311 * C54789) *
               C4096 -
           (C57672 * C54789 + C57673 * C54788 + C57674 * C54787 +
            (C54790 * C1578 - C54791 * C1570 - C54790 * C1579 +
             C139731 * C1585) *
                C139835 * C54786) *
               C140002) *
              C139792 * C2324 +
          (((C54790 * C1576 - C54791 * C1569 - C54790 * C1577 +
             C139731 * C1584) *
                C139835 * C54786 +
            (C54790 * C3444 - C54791 * C3439 - C54790 * C3445 +
             C139731 * C3451) *
                C139835 * C54787 +
            (C54790 * C7756 - C54791 * C7753 - C54790 * C7757 +
             C139731 * C7762) *
                C139835 * C54788 +
            (C54790 * C10398 - C54791 * C10395 - C54790 * C10399 +
             C139731 * C10401) *
                C139835 * C54789) *
               C140002 -
           (C55314 * C54789 + C55313 * C54788 + C55312 * C54787 +
            (C54790 * C116 - C54791 * C109 - C54790 * C117 + C139731 * C127) *
                C139835 * C54786) *
               C4096) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47136 * C114 - C47137 * C108 - C47136 * C115 + C47131 * C126 +
             C47138 * C116 - C47139 * C109 - C47138 * C117 + C47132 * C127 +
             C47140 * C118 - C47141 * C110 - C47140 * C119 + C47133 * C128) *
                C139835 * C47134 +
            (C47978 + C47979 + C47980) * C139835 * C139873) *
               C4096 -
           ((C51501 + C51502 + C51503) * C139835 * C139873 +
            (C47140 * C1574 - C47141 * C1568 - C47140 * C1575 + C47133 * C1583 +
             C47138 * C1576 - C47139 * C1569 - C47138 * C1577 + C47132 * C1584 +
             C47136 * C1578 - C47137 * C1570 - C47136 * C1579 +
             C47131 * C1585) *
                C139835 * C47134) *
               C140002) *
              C139792 * C2324 +
          (((C47136 * C1576 - C47137 * C1569 - C47136 * C1577 + C47131 * C1584 +
             C47138 * C1574 - C47139 * C1568 - C47138 * C1575 + C47132 * C1583 +
             C47140 * C1572 - C47141 * C1567 - C47140 * C1573 +
             C47133 * C1582) *
                C139835 * C47134 +
            (C47136 * C3444 - C47137 * C3439 - C47136 * C3445 + C47131 * C3451 +
             C47138 * C3446 - C47139 * C3440 - C47138 * C3447 + C47132 * C3452 +
             C47140 * C3448 - C47141 * C3441 - C47140 * C3449 +
             C47133 * C3453) *
                C139835 * C139873) *
               C140002 -
           ((C47983 + C47982 + C47981) * C139835 * C139873 +
            (C47140 * C120 - C47141 * C111 - C47140 * C121 + C47133 * C129 +
             C47138 * C118 - C47139 * C110 - C47138 * C119 + C47132 * C128 +
             C47136 * C116 - C47137 * C109 - C47136 * C117 + C47131 * C127) *
                C139835 * C47134) *
               C4096) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C54790 * C114 - C54791 * C108 - C54790 * C115 + C139731 * C126) *
                 C13856 +
             C61654 * C13857 + C61655 * C13858) *
                C47134 +
            (C60664 + C60665 + C60688) * C139873) *
               C4096 -
           ((C64258 + C64253 + C64254) * C139873 +
            ((C54790 * C15627 - C54791 * C15623 - C54790 * C15628 +
              C139731 * C15632) *
                 C13858 +
             C61655 * C13857 + C61654 * C13856) *
                C47134) *
               C140002) *
              C139792 * C2324 +
          (((C61656 * C13856 + C61657 * C13857 +
             (C54790 * C15625 - C54791 * C15622 - C54790 * C15626 +
              C139731 * C15631) *
                 C13858) *
                C47134 +
            (C60686 * C13856 + C60687 * C13857 +
             (C54790 * C18306 - C54791 * C18303 - C54790 * C18307 +
              C139731 * C18309) *
                 C13858) *
                C139873) *
               C140002 -
           ((C60690 + C60689 + C60670) * C139873 +
            (C61657 * C13858 + C61656 * C13857 +
             (C54790 * C116 - C54791 * C109 - C54790 * C117 + C139731 * C127) *
                 C13856) *
                C47134) *
               C4096) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eexy[69] +=
        (-std::pow(Pi, 2.5) *
         ((((C54786 * C183 - C54842 * C108 + C54787 * C896 - C54843 * C813 +
             C54788 * C2974 - C54844 * C2908 + C54789 * C6792 -
             C54845 * C6627) *
                C54790 +
            (C54786 * C189 - C54842 * C115 + C54787 * C901 - C54843 * C822 +
             C54788 * C2978 - C54844 * C2913 + C54789 * C6795 -
             C54845 * C6632) *
                C139731) *
               C139835 * C4096 +
           ((C54842 * C1570 - C54786 * C1653 + C54843 * C3438 - C54787 * C3520 +
             C54844 * C7754 - C54788 * C7863 + C54845 * C10394 -
             C54789 * C10528) *
                C54790 +
            (C54842 * C1579 - C54786 * C1658 + C54843 * C3443 - C54787 * C3524 +
             C54844 * C7759 - C54788 * C7866 + C54845 * C10397 -
             C54789 * C10530) *
                C139731) *
               C139835 * C140002) *
              C139792 * C2324 +
          (((C54842 * C109 - C54786 * C184 + C54843 * C812 - C54787 * C897 +
             C54844 * C2909 - C54788 * C2975 + C54845 * C6626 -
             C54789 * C6793) *
                C54790 +
            (C54842 * C117 - C54786 * C190 + C54843 * C820 - C54787 * C902 +
             C54844 * C2915 - C54788 * C2979 + C54845 * C6630 -
             C54789 * C6796) *
                C139731) *
               C139835 * C4096 +
           ((C54786 * C1654 - C54842 * C1569 + C54787 * C3521 - C54843 * C3439 +
             C54788 * C7864 - C54844 * C7753 + C54789 * C10529 -
             C54845 * C10395) *
                C54790 +
            (C54786 * C1659 - C54842 * C1577 + C54787 * C3525 - C54843 * C3445 +
             C54788 * C7867 - C54844 * C7757 + C54789 * C10531 -
             C54845 * C10399) *
                C139731) *
               C139835 * C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47134 * C183 - C47216 * C108 + C139873 * C896 - C47217 * C813) *
                C47136 +
            (C47134 * C189 - C47216 * C115 + C139873 * C901 - C47217 * C822) *
                C47131 +
            (C47219 - C47220 + C47221 - C47222) * C47138 +
            (C47223 - C47224 + C47225 - C47226) * C47132 + C47247 * C47140 +
            C47248 * C47133) *
               C139835 * C4096 +
           ((C47216 * C1570 - C47134 * C1653 + C47217 * C3438 -
             C139873 * C3520) *
                C47136 +
            (C47216 * C1579 - C47134 * C1658 + C47217 * C3443 -
             C139873 * C3524) *
                C47131 +
            (C49056 - C49057 + C49058 - C49059) * C47138 +
            (C49060 - C49061 + C49062 - C49063) * C47132 +
            (C49064 - C49065 + C49066 - C49067) * C47140 +
            (C49068 - C49069 + C49070 - C49071) * C47133) *
               C139835 * C140002) *
              C139792 * C2324 +
          (((C47220 - C47219 + C47222 - C47221) * C47136 +
            (C47224 - C47223 + C47226 - C47225) * C47131 +
            (C47228 - C47227 + C47230 - C47229) * C47138 +
            (C47232 - C47231 + C47234 - C47233) * C47132 +
            (C47235 - C47236 + C47237 - C47238) * C47140 +
            (C47239 - C47240 + C47241 - C47242) * C47133) *
               C139835 * C4096 +
           ((C49057 - C49056 + C49059 - C49058) * C47136 +
            (C49061 - C49060 + C49063 - C49062) * C47131 +
            (C49065 - C49064 + C49067 - C49066) * C47138 +
            (C49069 - C49068 + C49071 - C49070) * C47132 +
            (C47134 * C1656 - C47216 * C1567 + C139873 * C3523 -
             C47217 * C3441) *
                C47140 +
            (C47134 * C1661 - C47216 * C1573 + C139873 * C3527 -
             C47217 * C3449) *
                C47133) *
               C139835 * C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C47134 * C183 - C47216 * C108 + C139873 * C896 - C47217 * C813) *
                 C54790 +
             (C47134 * C189 - C47216 * C115 + C139873 * C901 - C47217 * C822) *
                 C139731) *
                C13856 +
            ((C61756 - C61757 + C61758 - C61759) * C54790 +
             (C61760 - C61761 + C61762 - C61763) * C139731) *
                C13857 +
            ((C61764 - C61765 + C61766 - C61767) * C54790 +
             (C61768 - C61769 + C61770 - C61771) * C139731) *
                C13858) *
               C4096 +
           (((C61757 - C61756 + C61759 - C61758) * C54790 +
             (C61761 - C61760 + C61763 - C61762) * C139731) *
                C13856 +
            ((C61765 - C61764 + C61767 - C61766) * C54790 +
             (C61769 - C61768 + C61771 - C61770) * C139731) *
                C13857 +
            ((C47216 * C15623 - C47134 * C15788 + C47217 * C18302 -
              C139873 * C18422) *
                 C54790 +
             (C47216 * C15628 - C47134 * C15791 + C47217 * C18305 -
              C139873 * C18424) *
                 C139731) *
                C13858) *
               C140002) *
              C139792 * C2324 +
          ((((C47220 - C47219 + C47222 - C47221) * C54790 +
             (C47224 - C47223 + C47226 - C47225) * C139731) *
                C13856 +
            ((C49056 - C49057 + C49058 - C49059) * C54790 +
             (C49060 - C49061 + C49062 - C49063) * C139731) *
                C13857 +
            ((C61772 - C61773 + C61774 - C61775) * C54790 +
             (C61776 - C61777 + C61778 - C61779) * C139731) *
                C13858) *
               C4096 +
           (((C49057 - C49056 + C49059 - C49058) * C54790 +
             (C49061 - C49060 + C49063 - C49062) * C139731) *
                C13856 +
            ((C61773 - C61772 + C61775 - C61774) * C54790 +
             (C61777 - C61776 + C61779 - C61778) * C139731) *
                C13857 +
            ((C47134 * C15789 - C47216 * C15622 + C139873 * C18423 -
              C47217 * C18303) *
                 C54790 +
             (C47134 * C15792 - C47216 * C15626 + C139873 * C18425 -
              C47217 * C18307) *
                 C139731) *
                C13858) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eexz[69] +=
        (-std::pow(Pi, 2.5) *
         (((((C139835 * C266 - C265 * C108) * C54790 +
             (C139835 * C272 - C265 * C115) * C139731) *
                C54786 +
            ((C6915 - C6916) * C54790 + (C6917 - C6918) * C139731) * C54787 +
            C57241 * C54788 + C57244 * C54789) *
               C4096 +
           (((C265 * C1570 - C139835 * C1741) * C54790 +
             (C265 * C1579 - C139835 * C1746) * C139731) *
                C54786 +
            ((C10635 - C10636) * C54790 + (C10637 - C10638) * C139731) *
                C54787 +
            ((C10639 - C10640) * C54790 + (C10641 - C10642) * C139731) *
                C54788 +
            ((C57811 - C57812) * C54790 + (C57813 - C57814) * C139731) *
                C54789) *
               C140002) *
              C139792 * C2324 +
          ((((C280 - C279) * C54790 + (C282 - C281) * C139731) * C54786 +
            (C6927 * C54790 + C6928 * C139731) * C54787 +
            (C6929 * C54790 + C6930 * C139731) * C54788 +
            ((C6931 - C6932) * C54790 + (C6933 - C6934) * C139731) * C54789) *
               C4096 +
           (((C1753 - C1752) * C54790 + (C1755 - C1754) * C139731) * C54786 +
            ((C7987 - C7986) * C54790 + (C7989 - C7988) * C139731) * C54787 +
            ((C7991 - C7990) * C54790 + (C7993 - C7992) * C139731) * C54788 +
            ((C139835 * C10631 - C265 * C10395) * C54790 +
             (C139835 * C10633 - C265 * C10399) * C139731) *
                C54789) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C139835 * C266 - C265 * C108) * C47136 +
             (C139835 * C272 - C265 * C115) * C47131 + (C279 - C280) * C47138 +
             (C281 - C282) * C47132 + C295 * C47140 + C296 * C47133) *
                C47134 +
            ((C6915 - C6916) * C47136 + (C6917 - C6918) * C47131 +
             C6919 * C47138 + C6920 * C47132 + C21967 * C47140 +
             C21968 * C47133) *
                C139873) *
               C4096 +
           (((C265 * C1570 - C139835 * C1741) * C47136 +
             (C265 * C1579 - C139835 * C1746) * C47131 +
             (C1752 - C1753) * C47138 + (C1754 - C1755) * C47132 +
             (C1756 - C1757) * C47140 + (C1758 - C1759) * C47133) *
                C47134 +
            ((C10635 - C10636) * C47136 + (C10637 - C10638) * C47131 +
             (C7986 - C7987) * C47138 + (C7988 - C7989) * C47132 +
             (C23820 - C23821) * C47140 + (C23822 - C23823) * C47133) *
                C139873) *
               C140002) *
              C139792 * C2324 +
          ((((C280 - C279) * C47136 + (C282 - C281) * C47131 +
             (C284 - C283) * C47138 + (C286 - C285) * C47132 +
             (C288 - C287) * C47140 + (C290 - C289) * C47133) *
                C47134 +
            (C6927 * C47136 + C6928 * C47131 + C22843 * C47138 +
             C22844 * C47132 + (C1003 - C1004) * C47140 +
             (C1005 - C1006) * C47133) *
                C139873) *
               C4096 +
           (((C1753 - C1752) * C47136 + (C1755 - C1754) * C47131 +
             (C1757 - C1756) * C47138 + (C1759 - C1758) * C47132 +
             (C1761 - C1760) * C47140 + (C1763 - C1762) * C47133) *
                C47134 +
            ((C7987 - C7986) * C47136 + (C7989 - C7988) * C47131 +
             (C23821 - C23820) * C47138 + (C23823 - C23822) * C47132 +
             (C139835 * C3597 - C265 * C3441) * C47140 +
             (C139835 * C3601 - C265 * C3449) * C47133) *
                C139873) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C13856 * C266 - C14015 * C108 + C13857 * C1741 - C14016 * C1570 +
              C13858 * C5397 - C14017 * C5273) *
                 C54790 +
             (C13856 * C272 - C14015 * C115 + C13857 * C1746 - C14016 * C1579 +
              C13858 * C5401 - C14017 * C5278) *
                 C139731) *
                C47134 +
            ((C60887 - C60888 + C60889 - C60890 + C60891 - C60892) * C54790 +
             (C60893 - C60894 + C60895 - C60896 + C60897 - C60898) * C139731) *
                C139873) *
               C4096 +
           (((C14015 * C1570 - C13856 * C1741 + C14016 * C5273 -
              C13857 * C5397 + C14017 * C15623 - C13858 * C15912) *
                 C54790 +
             (C14015 * C1579 - C13856 * C1746 + C14016 * C5278 -
              C13857 * C5401 + C14017 * C15628 - C13858 * C15915) *
                 C139731) *
                C47134 +
            ((C64475 - C64476 + C64477 - C64478 + C64479 - C64480) * C54790 +
             (C64481 - C64482 + C64483 - C64484 + C64485 - C64486) * C139731) *
                C139873) *
               C140002) *
              C139792 * C2324 +
          ((((C14020 - C14019 + C14022 - C14021 + C14024 - C14023) * C54790 +
             (C14026 - C14025 + C14028 - C14027 + C14030 - C14029) * C139731) *
                C47134 +
            ((C14872 - C14873 + C14874 - C14875 + C14876 - C14877) * C54790 +
             (C14878 - C14879 + C14880 - C14881 + C14882 - C14883) * C139731) *
                C139873) *
               C4096 +
           (((C15920 - C15919 + C15922 - C15921 + C15924 - C15923) * C54790 +
             (C15926 - C15925 + C15928 - C15927 + C15930 - C15929) * C139731) *
                C47134 +
            ((C13856 * C3595 - C14015 * C3439 + C13857 * C13299 -
              C14016 * C13127 + C13858 * C18533 - C14017 * C18303) *
                 C54790 +
             (C13856 * C3599 - C14015 * C3445 + C13857 * C13303 -
              C14016 * C13133 + C13858 * C18535 - C14017 * C18307) *
                 C139731) *
                C139873) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[69] +=
        (-std::pow(Pi, 2.5) *
         ((((C139731 * C114 - C54790 * C108) * C54842 +
            (C139731 * C354 - C54790 * C348) * C54786 +
            (C55513 - C55514) * C54843 + (C55515 - C55516) * C54787 +
            C57297 * C54844 + C57298 * C54788 + C57299 * C54845 +
            C57300 * C54789) *
               C139835 * C4096 +
           ((C54790 * C1570 - C139731 * C1578) * C54842 +
            (C54790 * C1829 - C139731 * C1834) * C54786 +
            (C57883 - C57884) * C54843 + (C57885 - C57886) * C54787 +
            (C57887 - C57888) * C54844 + (C57889 - C57890) * C54788 +
            (C57891 - C57892) * C54845 + (C57893 - C57894) * C54789) *
               C139835 * C140002) *
              C139792 * C2324 +
          (((C54790 * C109 - C139731 * C116) * C54842 +
            (C54790 * C349 - C139731 * C355) * C54786 +
            (C55525 - C55526) * C54843 + (C55527 - C55528) * C54787 +
            (C55529 - C55530) * C54844 + (C55531 - C55532) * C54788 +
            (C55533 - C55534) * C54845 + (C55535 - C55536) * C54789) *
               C139835 * C4096 +
           ((C139731 * C1576 - C54790 * C1569) * C54842 +
            (C139731 * C1835 - C54790 * C1830) * C54786 +
            (C139731 * C3444 - C54790 * C3439) * C54843 +
            (C139731 * C3673 - C54790 * C3669) * C54787 +
            (C139731 * C7756 - C54790 * C7753) * C54844 +
            (C139731 * C8095 - C54790 * C8092) * C54788 +
            (C139731 * C10398 - C54790 * C10395) * C54845 +
            (C139731 * C10743 - C54790 * C10741) * C54789) *
               C139835 * C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47131 * C114 - C47136 * C108 + C47132 * C116 - C47138 * C109 +
             C47133 * C118 - C47140 * C110) *
                C47216 +
            (C47131 * C354 - C47136 * C348 + C47132 * C355 - C47138 * C349 +
             C47133 * C356 - C47140 * C350) *
                C47134 +
            (C48294 - C48295 + C48296 - C48297 + C48298 - C48299) * C47217 +
            (C48300 - C48301 + C48302 - C48303 + C48304 - C48305) * C139873) *
               C139835 * C4096 +
           ((C47136 * C1570 - C47131 * C1578 + C47138 * C1569 - C47132 * C1576 +
             C47140 * C1568 - C47133 * C1574) *
                C47216 +
            (C47136 * C1829 - C47131 * C1834 + C47138 * C1830 - C47132 * C1835 +
             C47140 * C1831 - C47133 * C1836) *
                C47134 +
            (C51798 - C51799 + C51800 - C51801 + C51802 - C51803) * C47217 +
            (C51804 - C51805 + C51806 - C51807 + C51808 - C51809) * C139873) *
               C139835 * C140002) *
              C139792 * C2324 +
          (((C47136 * C109 - C47131 * C116 + C47138 * C110 - C47132 * C118 +
             C47140 * C111 - C47133 * C120) *
                C47216 +
            (C47136 * C349 - C47131 * C355 + C47138 * C350 - C47132 * C356 +
             C47140 * C351 - C47133 * C357) *
                C47134 +
            (C48306 - C48307 + C48308 - C48309 + C48310 - C48311) * C47217 +
            (C48312 - C48313 + C48314 - C48315 + C48316 - C48317) * C139873) *
               C139835 * C4096 +
           ((C47131 * C1576 - C47136 * C1569 + C47132 * C1574 - C47138 * C1568 +
             C47133 * C1572 - C47140 * C1567) *
                C47216 +
            (C47131 * C1835 - C47136 * C1830 + C47132 * C1836 - C47138 * C1831 +
             C47133 * C1837 - C47140 * C1832) *
                C47134 +
            (C47131 * C3444 - C47136 * C3439 + C47132 * C3446 - C47138 * C3440 +
             C47133 * C3448 - C47140 * C3441) *
                C47217 +
            (C47131 * C3673 - C47136 * C3669 + C47132 * C3674 - C47138 * C3670 +
             C47133 * C3675 - C47140 * C3671) *
                C139873) *
               C139835 * C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C139731 * C114 - C54790 * C108) * C47216 +
             (C139731 * C354 - C54790 * C348) * C47134 +
             (C55513 - C55514) * C47217 + (C55515 - C55516) * C139873) *
                C13856 +
            ((C61976 - C61977) * C47216 + (C61978 - C61979) * C47134 +
             C64587 * C47217 + C64588 * C139873) *
                C13857 +
            ((C61980 - C61981) * C47216 + (C61982 - C61983) * C47134 +
             C64589 * C47217 + C64590 * C139873) *
                C13858) *
               C4096 +
           (((C61977 - C61976) * C47216 + (C61979 - C61978) * C47134 +
             C64591 * C47217 + C64592 * C139873) *
                C13856 +
            ((C61981 - C61980) * C47216 + (C61983 - C61982) * C47134 +
             C64593 * C47217 + C64594 * C139873) *
                C13857 +
            ((C54790 * C15623 - C139731 * C15627) * C47216 +
             (C54790 * C16028 - C139731 * C16031) * C47134 +
             (C64595 - C64596) * C47217 + (C64597 - C64598) * C139873) *
                C13858) *
               C140002) *
              C139792 * C2324 +
          ((((C54790 * C109 - C139731 * C116) * C47216 +
             (C54790 * C349 - C139731 * C355) * C47134 +
             (C55525 - C55526) * C47217 + (C55527 - C55528) * C139873) *
                C13856 +
            ((C61984 - C61985) * C47216 + (C61986 - C61987) * C47134 +
             (C61001 - C61002) * C47217 + (C61003 - C61004) * C139873) *
                C13857 +
            ((C61988 - C61989) * C47216 + (C61990 - C61991) * C47134 +
             (C61005 - C61006) * C47217 + (C61007 - C61008) * C139873) *
                C13858) *
               C4096 +
           (((C61985 - C61984) * C47216 + (C61987 - C61986) * C47134 +
             (C61002 - C61001) * C47217 + (C61004 - C61003) * C139873) *
                C13856 +
            ((C61989 - C61988) * C47216 + (C61991 - C61990) * C47134 +
             (C61006 - C61005) * C47217 + (C61008 - C61007) * C139873) *
                C13857 +
            ((C139731 * C15625 - C54790 * C15622) * C47216 +
             (C139731 * C16032 - C54790 * C16029) * C47134 +
             (C139731 * C18306 - C54790 * C18303) * C47217 +
             (C139731 * C18637 - C54790 * C18635) * C139873) *
                C13858) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[69] +=
        (-std::pow(Pi, 2.5) *
         (((C54842 * C183 - C54996 * C108 - C54842 * C348 + C54786 * C411 +
            C54843 * C896 - C54997 * C813 - C54843 * C1072 + C54787 * C1151 +
            C54844 * C2974 - C54998 * C2908 - C54844 * C3090 + C54788 * C3148 +
            C54845 * C6792 - C54999 * C6627 - C54845 * C7032 + C54789 * C7169) *
               C139731 * C139835 * C4096 -
           (C54845 * C10528 - C54999 * C10394 - C54845 * C10740 +
            C54789 * C10858 + C54844 * C7863 - C54998 * C7754 - C54844 * C8091 +
            C54788 * C8196 + C54843 * C3520 - C54997 * C3438 - C54843 * C3668 +
            C54787 * C3742 + C54842 * C1653 - C54996 * C1570 - C54842 * C1829 +
            C54786 * C1908) *
               C139731 * C139835 * C140002) *
              C139792 * C2324 +
          ((C54842 * C1654 - C54996 * C1569 - C54842 * C1830 + C54786 * C1907 +
            C54843 * C3521 - C54997 * C3439 - C54843 * C3669 + C54787 * C3743 +
            C54844 * C7864 - C54998 * C7753 - C54844 * C8092 + C54788 * C8195 +
            C54845 * C10529 - C54999 * C10395 - C54845 * C10741 +
            C54789 * C10859) *
               C139731 * C139835 * C140002 -
           (C54845 * C6793 - C54999 * C6626 - C54845 * C7033 + C54789 * C7168 +
            C54844 * C2975 - C54998 * C2909 - C54844 * C3091 + C54788 * C3149 +
            C54843 * C897 - C54997 * C812 - C54843 * C1073 + C54787 * C1150 +
            C54842 * C184 - C54996 * C109 - C54842 * C349 + C54786 * C412) *
               C139731 * C139835 * C4096) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47216 * C183 - C47470 * C108 - C47216 * C348 + C47134 * C411 +
             C47217 * C896 - C47471 * C813 - C47217 * C1072 + C139873 * C1151) *
                C47131 +
            (C47509 + C47510) * C47132 + C47515 * C47133) *
               C139835 * C4096 -
           ((C49390 + C49391) * C47133 + (C49392 + C49393) * C47132 +
            (C47217 * C3520 - C47471 * C3438 - C47217 * C3668 +
             C139873 * C3742 + C47216 * C1653 - C47470 * C1570 -
             C47216 * C1829 + C47134 * C1908) *
                C47131) *
               C139835 * C140002) *
              C139792 * C2324 +
          (((C49393 + C49392) * C47131 + (C49391 + C49390) * C47132 +
            (C47216 * C1656 - C47470 * C1567 - C47216 * C1832 + C47134 * C1905 +
             C47217 * C3523 - C47471 * C3441 - C47217 * C3671 +
             C139873 * C3745) *
                C47133) *
               C139835 * C140002 -
           ((C47513 + C47514) * C47133 + (C47512 + C47511) * C47132 +
            (C47510 + C47509) * C47131) *
               C139835 * C4096) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47216 * C183 - C47470 * C108 - C47216 * C348 + C47134 * C411 +
             C47217 * C896 - C47471 * C813 - C47217 * C1072 + C139873 * C1151) *
                C139731 * C13856 +
            (C62126 + C62127) * C139731 * C13857 +
            (C62128 + C62129) * C139731 * C13858) *
               C4096 -
           ((C47217 * C18422 - C47471 * C18302 - C47217 * C18634 +
             C139873 * C18744 + C47216 * C15788 - C47470 * C15623 -
             C47216 * C16028 + C47134 * C16165) *
                C139731 * C13858 +
            (C62129 + C62128) * C139731 * C13857 +
            (C62127 + C62126) * C139731 * C13856) *
               C140002) *
              C139792 * C2324 +
          (((C49393 + C49392) * C139731 * C13856 +
            (C62130 + C62131) * C139731 * C13857 +
            (C47216 * C15789 - C47470 * C15622 - C47216 * C16029 +
             C47134 * C16164 + C47217 * C18423 - C47471 * C18303 -
             C47217 * C18635 + C139873 * C18745) *
                C139731 * C13858) *
               C140002 -
           ((C62131 + C62130) * C139731 * C13858 +
            (C49392 + C49393) * C139731 * C13857 +
            (C47510 + C47509) * C139731 * C13856) *
               C4096) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[69] +=
        (-std::pow(Pi, 2.5) *
         ((((C139835 * C266 - C265 * C108) * C54842 +
            (C139835 * C495 - C265 * C348) * C54786 + (C6915 - C6916) * C54843 +
            (C7294 - C7295) * C54787 + C9790 * C54844 + C10047 * C54788 +
            C57235 * C54845 + C57407 * C54789) *
               C139731 * C4096 +
           ((C265 * C1570 - C139835 * C1741) * C54842 +
            (C265 * C1829 - C139835 * C1997) * C54786 +
            (C10635 - C10636) * C54843 + (C10961 - C10962) * C54787 +
            (C10639 - C10640) * C54844 + (C10963 - C10964) * C54788 +
            (C57811 - C57812) * C54845 + (C58029 - C58030) * C54789) *
               C139731 * C140002) *
              C139792 * C2324 +
          (((C280 - C279) * C54842 + (C503 - C502) * C54786 + C6927 * C54843 +
            C7300 * C54787 + C6929 * C54844 + C7301 * C54788 +
            (C6931 - C6932) * C54845 + (C7302 - C7303) * C54789) *
               C139731 * C4096 +
           ((C1753 - C1752) * C54842 + (C2004 - C2003) * C54786 +
            (C7987 - C7986) * C54843 + (C8322 - C8321) * C54787 +
            (C7991 - C7990) * C54844 + (C8324 - C8323) * C54788 +
            (C139835 * C10631 - C265 * C10395) * C54845 +
            (C139835 * C10959 - C265 * C10741) * C54789) *
               C139731 * C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C139835 * C266 - C265 * C108) * C47216 +
             (C139835 * C495 - C265 * C348) * C47134 +
             (C6915 - C6916) * C47217 + (C7294 - C7295) * C139873) *
                C47131 +
            ((C279 - C280) * C47216 + (C502 - C503) * C47134 + C6919 * C47217 +
             C7298 * C139873) *
                C47132 +
            C47596 * C47133) *
               C4096 +
           (((C265 * C1570 - C139835 * C1741) * C47216 +
             (C265 * C1829 - C139835 * C1997) * C47134 +
             (C10635 - C10636) * C47217 + (C10961 - C10962) * C139873) *
                C47131 +
            ((C1752 - C1753) * C47216 + (C2003 - C2004) * C47134 +
             (C7986 - C7987) * C47217 + (C8321 - C8322) * C139873) *
                C47132 +
            ((C1756 - C1757) * C47216 + (C2005 - C2006) * C47134 +
             (C23820 - C23821) * C47217 + (C24146 - C24147) * C139873) *
                C47133) *
               C140002) *
              C139792 * C2324 +
          ((((C280 - C279) * C47216 + (C503 - C502) * C47134 + C6927 * C47217 +
             C7300 * C139873) *
                C47131 +
            ((C284 - C283) * C47216 + (C506 - C505) * C47134 + C22843 * C47217 +
             C23191 * C139873) *
                C47132 +
            ((C288 - C287) * C47216 + (C509 - C508) * C47134 +
             (C1003 - C1004) * C47217 + (C1250 - C1251) * C139873) *
                C47133) *
               C4096 +
           (((C1753 - C1752) * C47216 + (C2004 - C2003) * C47134 +
             (C7987 - C7986) * C47217 + (C8322 - C8321) * C139873) *
                C47131 +
            ((C1757 - C1756) * C47216 + (C2006 - C2005) * C47134 +
             (C23821 - C23820) * C47217 + (C24147 - C24146) * C139873) *
                C47132 +
            ((C1761 - C1760) * C47216 + (C2008 - C2007) * C47134 +
             (C139835 * C3597 - C265 * C3441) * C47217 +
             (C139835 * C3815 - C265 * C3671) * C139873) *
                C47133) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C13856 * C266 - C14015 * C108 + C13857 * C1741 - C14016 * C1570 +
             C13858 * C5397 - C14017 * C5273) *
                C47216 +
            (C13856 * C495 - C14015 * C348 + C13857 * C1997 - C14016 * C1829 +
             C13858 * C5567 - C14017 * C5455) *
                C47134 +
            (C60887 - C60888 + C60889 - C60890 + C60891 - C60892) * C47217 +
            (C61205 - C61206 + C61207 - C61208 + C61209 - C61210) * C139873) *
               C139731 * C4096 +
           ((C14015 * C1570 - C13856 * C1741 + C14016 * C5273 - C13857 * C5397 +
             C14017 * C15623 - C13858 * C15912) *
                C47216 +
            (C14015 * C1829 - C13856 * C1997 + C14016 * C5455 - C13857 * C5567 +
             C14017 * C16028 - C13858 * C16294) *
                C47134 +
            (C64475 - C64476 + C64477 - C64478 + C64479 - C64480) * C47217 +
            (C64825 - C64826 + C64827 - C64828 + C64829 - C64830) * C139873) *
               C139731 * C140002) *
              C139792 * C2324 +
          (((C14020 - C14019 + C14022 - C14021 + C14024 - C14023) * C47216 +
            (C14280 - C14279 + C14282 - C14281 + C14284 - C14283) * C47134 +
            (C14872 - C14873 + C14874 - C14875 + C14876 - C14877) * C47217 +
            (C15196 - C15197 + C15198 - C15199 + C15200 - C15201) * C139873) *
               C139731 * C4096 +
           ((C15920 - C15919 + C15922 - C15921 + C15924 - C15923) * C47216 +
            (C16299 - C16298 + C16301 - C16300 + C16303 - C16302) * C47134 +
            (C13856 * C3595 - C14015 * C3439 + C13857 * C13299 -
             C14016 * C13127 + C13858 * C18533 - C14017 * C18303) *
                C47217 +
            (C13856 * C3813 - C14015 * C3669 + C13857 * C13542 -
             C14016 * C13381 + C13858 * C18863 - C14017 * C18635) *
                C139873) *
               C139731 * C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eezx[69] +=
        (-std::pow(Pi, 2.5) *
         (((((C139731 * C114 - C54790 * C108) * C265 +
             (C139731 * C573 - C54790 * C567) * C139835) *
                C54786 +
            ((C55513 - C55514) * C265 + (C55735 - C55736) * C139835) * C54787 +
            C57470 * C54788 + C57471 * C54789) *
               C4096 +
           (((C54790 * C1570 - C139731 * C1578) * C265 +
             (C54790 * C2074 - C139731 * C2079) * C139835) *
                C54786 +
            ((C57883 - C57884) * C265 + (C58099 - C58100) * C139835) * C54787 +
            ((C57887 - C57888) * C265 + (C58101 - C58102) * C139835) * C54788 +
            ((C57891 - C57892) * C265 + (C58103 - C58104) * C139835) * C54789) *
               C140002) *
              C139792 * C2324 +
          ((((C54790 * C109 - C139731 * C116) * C265 +
             (C54790 * C568 - C139731 * C574) * C139835) *
                C54786 +
            ((C55525 - C55526) * C265 + (C55741 - C55742) * C139835) * C54787 +
            ((C55529 - C55530) * C265 + (C55743 - C55744) * C139835) * C54788 +
            ((C55533 - C55534) * C265 + (C55745 - C55746) * C139835) * C54789) *
               C4096 +
           (((C139731 * C1576 - C54790 * C1569) * C265 +
             (C139731 * C2080 - C54790 * C2075) * C139835) *
                C54786 +
            ((C139731 * C3444 - C54790 * C3439) * C265 +
             (C139731 * C3887 - C54790 * C3883) * C139835) *
                C54787 +
            ((C139731 * C7756 - C54790 * C7753) * C265 +
             (C139731 * C8426 - C54790 * C8423) * C139835) *
                C54788 +
            ((C139731 * C10398 - C54790 * C10395) * C265 +
             (C139731 * C11065 - C54790 * C11063) * C139835) *
                C54789) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47131 * C114 - C47136 * C108 + C47132 * C116 - C47138 * C109 +
              C47133 * C118 - C47140 * C110) *
                 C265 +
             (C47131 * C573 - C47136 * C567 + C47132 * C574 - C47138 * C568 +
              C47133 * C575 - C47140 * C569) *
                 C139835) *
                C47134 +
            ((C48294 - C48295 + C48296 - C48297 + C48298 - C48299) * C265 +
             (C48640 - C48641 + C48642 - C48643 + C48644 - C48645) * C139835) *
                C139873) *
               C4096 +
           (((C47136 * C1570 - C47131 * C1578 + C47138 * C1569 -
              C47132 * C1576 + C47140 * C1568 - C47133 * C1574) *
                 C265 +
             (C47136 * C2074 - C47131 * C2079 + C47138 * C2075 -
              C47132 * C2080 + C47140 * C2076 - C47133 * C2081) *
                 C139835) *
                C47134 +
            ((C51798 - C51799 + C51800 - C51801 + C51802 - C51803) * C265 +
             (C52104 - C52105 + C52106 - C52107 + C52108 - C52109) * C139835) *
                C139873) *
               C140002) *
              C139792 * C2324 +
          ((((C47136 * C109 - C47131 * C116 + C47138 * C110 - C47132 * C118 +
              C47140 * C111 - C47133 * C120) *
                 C265 +
             (C47136 * C568 - C47131 * C574 + C47138 * C569 - C47132 * C575 +
              C47140 * C570 - C47133 * C576) *
                 C139835) *
                C47134 +
            ((C48306 - C48307 + C48308 - C48309 + C48310 - C48311) * C265 +
             (C48646 - C48647 + C48648 - C48649 + C48650 - C48651) * C139835) *
                C139873) *
               C4096 +
           (((C47131 * C1576 - C47136 * C1569 + C47132 * C1574 -
              C47138 * C1568 + C47133 * C1572 - C47140 * C1567) *
                 C265 +
             (C47131 * C2080 - C47136 * C2075 + C47132 * C2081 -
              C47138 * C2076 + C47133 * C2082 - C47140 * C2077) *
                 C139835) *
                C47134 +
            ((C47131 * C3444 - C47136 * C3439 + C47132 * C3446 -
              C47138 * C3440 + C47133 * C3448 - C47140 * C3441) *
                 C265 +
             (C47131 * C3887 - C47136 * C3883 + C47132 * C3888 -
              C47138 * C3884 + C47133 * C3889 - C47140 * C3885) *
                 C139835) *
                C139873) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C139731 * C114 - C54790 * C108) * C14015 +
             (C139731 * C573 - C54790 * C567) * C13856 +
             (C61976 - C61977) * C14016 + (C62328 - C62329) * C13857 +
             (C61980 - C61981) * C14017 + (C62330 - C62331) * C13858) *
                C47134 +
            ((C55513 - C55514) * C14015 + (C55735 - C55736) * C13856 +
             C64587 * C14016 + C64931 * C13857 + C64589 * C14017 +
             C64932 * C13858) *
                C139873) *
               C4096 +
           (((C61977 - C61976) * C14015 + (C62329 - C62328) * C13856 +
             (C61981 - C61980) * C14016 + (C62331 - C62330) * C13857 +
             (C54790 * C15623 - C139731 * C15627) * C14017 +
             (C54790 * C16401 - C139731 * C16404) * C13858) *
                C47134 +
            (C64591 * C14015 + C64933 * C13856 + C64593 * C14016 +
             C64934 * C13857 + (C64595 - C64596) * C14017 +
             (C64935 - C64936) * C13858) *
                C139873) *
               C140002) *
              C139792 * C2324 +
          ((((C54790 * C109 - C139731 * C116) * C14015 +
             (C54790 * C568 - C139731 * C574) * C13856 +
             (C61984 - C61985) * C14016 + (C62332 - C62333) * C13857 +
             (C61988 - C61989) * C14017 + (C62334 - C62335) * C13858) *
                C47134 +
            ((C55525 - C55526) * C14015 + (C55741 - C55742) * C13856 +
             (C61001 - C61002) * C14016 + (C61311 - C61312) * C13857 +
             (C61005 - C61006) * C14017 + (C61313 - C61314) * C13858) *
                C139873) *
               C4096 +
           (((C61985 - C61984) * C14015 + (C62333 - C62332) * C13856 +
             (C61989 - C61988) * C14016 + (C62335 - C62334) * C13857 +
             (C139731 * C15625 - C54790 * C15622) * C14017 +
             (C139731 * C16405 - C54790 * C16402) * C13858) *
                C47134 +
            ((C61002 - C61001) * C14015 + (C61312 - C61311) * C13856 +
             (C61006 - C61005) * C14016 + (C61314 - C61313) * C13857 +
             (C139731 * C18306 - C54790 * C18303) * C14017 +
             (C139731 * C18965 - C54790 * C18963) * C13858) *
                C139873) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eezy[69] +=
        (-std::pow(Pi, 2.5) *
         ((((C54786 * C183 - C54842 * C108 + C54787 * C896 - C54843 * C813 +
             C54788 * C2974 - C54844 * C2908 + C54789 * C6792 -
             C54845 * C6627) *
                C265 +
            (C54786 * C629 - C54842 * C567 + C54787 * C1393 - C54843 * C1317 +
             C54788 * C3314 - C54844 * C3256 + C54789 * C7521 -
             C54845 * C7401) *
                C139835) *
               C139731 * C4096 +
           ((C54842 * C1570 - C54786 * C1653 + C54843 * C3438 - C54787 * C3520 +
             C54844 * C7754 - C54788 * C7863 + C54845 * C10394 -
             C54789 * C10528) *
                C265 +
            (C54842 * C2074 - C54786 * C2150 + C54843 * C3882 - C54787 * C3956 +
             C54844 * C8422 - C54788 * C8526 + C54845 * C11062 -
             C54789 * C11172) *
                C139835) *
               C139731 * C140002) *
              C139792 * C2324 +
          (((C54842 * C109 - C54786 * C184 + C54843 * C812 - C54787 * C897 +
             C54844 * C2909 - C54788 * C2975 + C54845 * C6626 -
             C54789 * C6793) *
                C265 +
            (C54842 * C568 - C54786 * C630 + C54843 * C1318 - C54787 * C1394 +
             C54844 * C3257 - C54788 * C3315 + C54845 * C7402 -
             C54789 * C7522) *
                C139835) *
               C139731 * C4096 +
           ((C54786 * C1654 - C54842 * C1569 + C54787 * C3521 - C54843 * C3439 +
             C54788 * C7864 - C54844 * C7753 + C54789 * C10529 -
             C54845 * C10395) *
                C265 +
            (C54786 * C2151 - C54842 * C2075 + C54787 * C3957 - C54843 * C3883 +
             C54788 * C8527 - C54844 * C8423 + C54789 * C11173 -
             C54845 * C11063) *
                C139835) *
               C139731 * C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47134 * C183 - C47216 * C108 + C139873 * C896 - C47217 * C813) *
                 C265 +
             (C47134 * C629 - C47216 * C567 + C139873 * C1393 -
              C47217 * C1317) *
                 C139835) *
                C47131 +
            ((C47219 - C47220 + C47221 - C47222) * C265 +
             (C47745 - C47746 + C47747 - C47748) * C139835) *
                C47132 +
            C47762 * C47133) *
               C4096 +
           (((C47216 * C1570 - C47134 * C1653 + C47217 * C3438 -
              C139873 * C3520) *
                 C265 +
             (C47216 * C2074 - C47134 * C2150 + C47217 * C3882 -
              C139873 * C3956) *
                 C139835) *
                C47131 +
            ((C49056 - C49057 + C49058 - C49059) * C265 +
             (C49688 - C49689 + C49690 - C49691) * C139835) *
                C47132 +
            ((C49064 - C49065 + C49066 - C49067) * C265 +
             (C49692 - C49693 + C49694 - C49695) * C139835) *
                C47133) *
               C140002) *
              C139792 * C2324 +
          ((((C47220 - C47219 + C47222 - C47221) * C265 +
             (C47746 - C47745 + C47748 - C47747) * C139835) *
                C47131 +
            ((C47228 - C47227 + C47230 - C47229) * C265 +
             (C47751 - C47750 + C47753 - C47752) * C139835) *
                C47132 +
            ((C47235 - C47236 + C47237 - C47238) * C265 +
             (C47754 - C47755 + C47756 - C47757) * C139835) *
                C47133) *
               C4096 +
           (((C49057 - C49056 + C49059 - C49058) * C265 +
             (C49689 - C49688 + C49691 - C49690) * C139835) *
                C47131 +
            ((C49065 - C49064 + C49067 - C49066) * C265 +
             (C49693 - C49692 + C49695 - C49694) * C139835) *
                C47132 +
            ((C47134 * C1656 - C47216 * C1567 + C139873 * C3523 -
              C47217 * C3441) *
                 C265 +
             (C47134 * C2153 - C47216 * C2077 + C139873 * C3959 -
              C47217 * C3885) *
                 C139835) *
                C47133) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47134 * C183 - C47216 * C108 + C139873 * C896 - C47217 * C813) *
                C14015 +
            (C47134 * C629 - C47216 * C567 + C139873 * C1393 - C47217 * C1317) *
                C13856 +
            (C61756 - C61757 + C61758 - C61759) * C14016 +
            (C62434 - C62435 + C62436 - C62437) * C13857 +
            (C61764 - C61765 + C61766 - C61767) * C14017 +
            (C62438 - C62439 + C62440 - C62441) * C13858) *
               C139731 * C4096 +
           ((C61757 - C61756 + C61759 - C61758) * C14015 +
            (C62435 - C62434 + C62437 - C62436) * C13856 +
            (C61765 - C61764 + C61767 - C61766) * C14016 +
            (C62439 - C62438 + C62441 - C62440) * C13857 +
            (C47216 * C15623 - C47134 * C15788 + C47217 * C18302 -
             C139873 * C18422) *
                C14017 +
            (C47216 * C16401 - C47134 * C16521 + C47217 * C18962 -
             C139873 * C19068) *
                C13858) *
               C139731 * C140002) *
              C139792 * C2324 +
          (((C47220 - C47219 + C47222 - C47221) * C14015 +
            (C47746 - C47745 + C47748 - C47747) * C13856 +
            (C49056 - C49057 + C49058 - C49059) * C14016 +
            (C49688 - C49689 + C49690 - C49691) * C13857 +
            (C61772 - C61773 + C61774 - C61775) * C14017 +
            (C62442 - C62443 + C62444 - C62445) * C13858) *
               C139731 * C4096 +
           ((C49057 - C49056 + C49059 - C49058) * C14015 +
            (C49689 - C49688 + C49691 - C49690) * C13856 +
            (C61773 - C61772 + C61775 - C61774) * C14016 +
            (C62443 - C62442 + C62445 - C62444) * C13857 +
            (C47134 * C15789 - C47216 * C15622 + C139873 * C18423 -
             C47217 * C18303) *
                C14017 +
            (C47134 * C16522 - C47216 * C16402 + C139873 * C19069 -
             C47217 * C18963) *
                C13858) *
               C139731 * C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eezz[69] +=
        (-std::pow(Pi, 2.5) *
         ((((C265 * C266 - C701 * C108 - C265 * C567 + C139835 * C702) *
                C54786 +
            C7652 * C54787 + C7653 * C54788 + C10296 * C54789) *
               C139731 * C4096 -
           (C58245 * C54789 + C11287 * C54788 + C11288 * C54787 +
            (C265 * C1741 - C701 * C1570 - C265 * C2074 + C139835 * C2230) *
                C54786) *
               C139731 * C140002) *
              C139792 * C2324 +
          ((C2253 * C54786 + C8651 * C54787 + C8650 * C54788 +
            (C265 * C10631 - C701 * C10395 - C265 * C11063 + C139835 * C11273) *
                C54789) *
               C139731 * C140002 -
           (C7654 * C54789 + C6525 * C54788 + C1496 * C54787 + C733 * C54786) *
               C139731 * C4096) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C265 * C266 - C701 * C108 - C265 * C567 + C139835 * C702) *
                 C47134 +
             C7652 * C139873) *
                C47131 +
            (C47837 + C47838) * C47132 + C47843 * C47133) *
               C4096 -
           ((C49794 + C49795) * C47133 + (C49796 + C49797) * C47132 +
            (C11288 * C139873 +
             (C265 * C1741 - C701 * C1570 - C265 * C2074 + C139835 * C2230) *
                 C47134) *
                C47131) *
               C140002) *
              C139792 * C2324 +
          (((C49797 + C49796) * C47131 + (C49795 + C49794) * C47132 +
            (C2251 * C47134 +
             (C265 * C3597 - C701 * C3441 - C265 * C3885 + C139835 * C4029) *
                 C139873) *
                C47133) *
               C140002 -
           ((C47841 + C47842) * C47133 + (C47840 + C47839) * C47132 +
            (C47838 + C47837) * C47131) *
               C4096) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C14015 * C266 - C14516 * C108 - C14015 * C567 + C13856 * C702 +
             C14016 * C1741 - C14517 * C1570 - C14016 * C2074 + C13857 * C2230 +
             C14017 * C5397 - C14518 * C5273 - C14017 * C5621 +
             C13858 * C5733) *
                C47134 +
            (C61529 + C61530 + C61531) * C139873) *
               C139731 * C4096 -
           ((C65161 + C65162 + C65163) * C139873 +
            (C14017 * C15912 - C14518 * C15623 - C14017 * C16401 +
             C13858 * C16633 + C14016 * C5397 - C14517 * C5273 -
             C14016 * C5621 + C13857 * C5733 + C14015 * C1741 - C14516 * C1570 -
             C14015 * C2074 + C13856 * C2230) *
                C47134) *
               C139731 * C140002) *
              C139792 * C2324 +
          (((C16656 + C16655 + C16654) * C47134 +
            (C14015 * C3595 - C14516 * C3439 - C14015 * C3883 + C13856 * C4027 +
             C14016 * C13299 - C14517 * C13127 - C14016 * C13619 +
             C13857 * C13780 + C14017 * C18533 - C14518 * C18303 -
             C14017 * C18963 + C13858 * C19173) *
                C139873) *
               C139731 * C140002 -
           ((C15522 + C15523 + C15524) * C139873 +
            (C14558 + C14557 + C14556) * C47134) *
               C139731 * C4096) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eexx[70] +=
        (-std::pow(Pi, 2.5) *
         ((((C54790 * C114 - C54791 * C108 - C54790 * C115 + C139731 * C126) *
                C139835 * C54786 +
            C55309 * C54787 + C55310 * C54788 + C55311 * C54789) *
               C4096 -
           (C57672 * C54789 + C57673 * C54788 + C57674 * C54787 +
            (C54790 * C1578 - C54791 * C1570 - C54790 * C1579 +
             C139731 * C1585) *
                C139835 * C54786) *
               C140002) *
              C806 +
          ((C57674 * C54786 + C57673 * C54787 + C57672 * C54788 +
            (C54790 * C57647 - C54791 * C57646 - C54790 * C57648 +
             C139731 * C57649) *
                C139835 * C54789) *
               C140002 -
           (C57128 * C54789 + C55311 * C54788 + C55310 * C54787 +
            C55309 * C54786) *
               C4096) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47136 * C114 - C47137 * C108 - C47136 * C115 + C47131 * C126 +
             C47138 * C116 - C47139 * C109 - C47138 * C117 + C47132 * C127 +
             C47140 * C118 - C47141 * C110 - C47140 * C119 + C47133 * C128) *
                C139835 * C47134 +
            (C47978 + C47979 + C47980) * C139835 * C139873) *
               C4096 -
           ((C51501 + C51502 + C51503) * C139835 * C139873 +
            (C47140 * C1574 - C47141 * C1568 - C47140 * C1575 + C47133 * C1583 +
             C47138 * C1576 - C47139 * C1569 - C47138 * C1577 + C47132 * C1584 +
             C47136 * C1578 - C47137 * C1570 - C47136 * C1579 +
             C47131 * C1585) *
                C139835 * C47134) *
               C140002) *
              C806 +
          (((C51503 + C51502 + C51501) * C139835 * C47134 +
            (C47136 * C7758 - C47137 * C7754 - C47136 * C7759 + C47131 * C7763 +
             C47138 * C7756 - C47139 * C7753 - C47138 * C7757 + C47132 * C7762 +
             C47140 * C7760 - C47141 * C7755 - C47140 * C7761 +
             C47133 * C7764) *
                C139835 * C139873) *
               C140002 -
           ((C50772 + C50773 + C50774) * C139835 * C139873 +
            (C47980 + C47979 + C47978) * C139835 * C47134) *
               C4096) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C54790 * C114 - C54791 * C108 - C54790 * C115 + C139731 * C126) *
                 C13856 +
             C61654 * C13857 + C61655 * C13858) *
                C47134 +
            (C60664 + C60665 + C60688) * C139873) *
               C4096 -
           ((C64258 + C64253 + C64254) * C139873 +
            ((C54790 * C15627 - C54791 * C15623 - C54790 * C15628 +
              C139731 * C15632) *
                 C13858 +
             C61655 * C13857 + C61654 * C13856) *
                C47134) *
               C140002) *
              C806 +
          (((C64254 + C64253 + C64258) * C47134 +
            (C57670 * C13856 + C63508 * C13857 +
             (C54790 * C64245 - C54791 * C64244 - C54790 * C64246 +
              C139731 * C64247) *
                 C13858) *
                C139873) *
               C140002 -
           ((C63509 + C63504 + C63505) * C139873 +
            (C60688 + C60665 + C60664) * C47134) *
               C4096) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eexy[70] +=
        (-std::pow(Pi, 2.5) *
         ((((C54786 * C183 - C54842 * C108 + C54787 * C896 - C54843 * C813 +
             C54788 * C2974 - C54844 * C2908 + C54789 * C6792 -
             C54845 * C6627) *
                C54790 +
            (C54786 * C189 - C54842 * C115 + C54787 * C901 - C54843 * C822 +
             C54788 * C2978 - C54844 * C2913 + C54789 * C6795 -
             C54845 * C6632) *
                C139731) *
               C139835 * C4096 +
           ((C54842 * C1570 - C54786 * C1653 + C54843 * C3438 - C54787 * C3520 +
             C54844 * C7754 - C54788 * C7863 + C54845 * C10394 -
             C54789 * C10528) *
                C54790 +
            (C54842 * C1579 - C54786 * C1658 + C54843 * C3443 - C54787 * C3524 +
             C54844 * C7759 - C54788 * C7866 + C54845 * C10397 -
             C54789 * C10530) *
                C139731) *
               C139835 * C140002) *
              C806 +
          (((C54842 * C813 - C54786 * C896 + C54843 * C2908 - C54787 * C2974 +
             C54844 * C6627 - C54788 * C6792 + C54845 * C9609 -
             C54789 * C9707) *
                C54790 +
            (C54842 * C822 - C54786 * C901 + C54843 * C2913 - C54787 * C2978 +
             C54844 * C6632 - C54788 * C6795 + C54845 * C9612 -
             C54789 * C9709) *
                C139731) *
               C139835 * C4096 +
           ((C54786 * C3520 - C54842 * C3438 + C54787 * C7863 - C54843 * C7754 +
             C54788 * C10528 - C54844 * C10394 + C54789 * C57740 -
             C54845 * C57646) *
                C54790 +
            (C54786 * C3524 - C54842 * C3443 + C54787 * C7866 - C54843 * C7759 +
             C54788 * C10530 - C54844 * C10397 + C54789 * C57741 -
             C54845 * C57648) *
                C139731) *
               C139835 * C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47134 * C183 - C47216 * C108 + C139873 * C896 - C47217 * C813) *
                C47136 +
            (C47134 * C189 - C47216 * C115 + C139873 * C901 - C47217 * C822) *
                C47131 +
            (C47219 - C47220 + C47221 - C47222) * C47138 +
            (C47223 - C47224 + C47225 - C47226) * C47132 + C47247 * C47140 +
            C47248 * C47133) *
               C139835 * C4096 +
           ((C47216 * C1570 - C47134 * C1653 + C47217 * C3438 -
             C139873 * C3520) *
                C47136 +
            (C47216 * C1579 - C47134 * C1658 + C47217 * C3443 -
             C139873 * C3524) *
                C47131 +
            (C49056 - C49057 + C49058 - C49059) * C47138 +
            (C49060 - C49061 + C49062 - C49063) * C47132 +
            (C49064 - C49065 + C49066 - C49067) * C47140 +
            (C49068 - C49069 + C49070 - C49071) * C47133) *
               C139835 * C140002) *
              C806 +
          (((C47216 * C813 - C47134 * C896 + C47217 * C2908 - C139873 * C2974) *
                C47136 +
            (C47216 * C822 - C47134 * C901 + C47217 * C2913 - C139873 * C2978) *
                C47131 +
            (C48082 - C48083 + C48084 - C48085) * C47138 +
            (C48086 - C48087 + C48088 - C48089) * C47132 +
            (C48090 - C48091 + C48092 - C48093) * C47140 +
            (C48094 - C48095 + C48096 - C48097) * C47133) *
               C139835 * C4096 +
           ((C47134 * C3520 - C47216 * C3438 + C139873 * C7863 -
             C47217 * C7754) *
                C47136 +
            (C47134 * C3524 - C47216 * C3443 + C139873 * C7866 -
             C47217 * C7759) *
                C47131 +
            (C47134 * C3521 - C47216 * C3439 + C139873 * C7864 -
             C47217 * C7753) *
                C47138 +
            (C47134 * C3525 - C47216 * C3445 + C139873 * C7867 -
             C47217 * C7757) *
                C47132 +
            (C47134 * C3522 - C47216 * C3440 + C139873 * C7865 -
             C47217 * C7755) *
                C47140 +
            (C47134 * C3526 - C47216 * C3447 + C139873 * C7868 -
             C47217 * C7761) *
                C47133) *
               C139835 * C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C47134 * C183 - C47216 * C108 + C139873 * C896 - C47217 * C813) *
                 C54790 +
             (C47134 * C189 - C47216 * C115 + C139873 * C901 - C47217 * C822) *
                 C139731) *
                C13856 +
            ((C61756 - C61757 + C61758 - C61759) * C54790 +
             (C61760 - C61761 + C61762 - C61763) * C139731) *
                C13857 +
            ((C61764 - C61765 + C61766 - C61767) * C54790 +
             (C61768 - C61769 + C61770 - C61771) * C139731) *
                C13858) *
               C4096 +
           (((C61757 - C61756 + C61759 - C61758) * C54790 +
             (C61761 - C61760 + C61763 - C61762) * C139731) *
                C13856 +
            ((C61765 - C61764 + C61767 - C61766) * C54790 +
             (C61769 - C61768 + C61771 - C61770) * C139731) *
                C13857 +
            ((C47216 * C15623 - C47134 * C15788 + C47217 * C18302 -
              C139873 * C18422) *
                 C54790 +
             (C47216 * C15628 - C47134 * C15791 + C47217 * C18305 -
              C139873 * C18424) *
                 C139731) *
                C13858) *
               C140002) *
              C806 +
          ((((C47216 * C813 - C47134 * C896 + C47217 * C2908 -
              C139873 * C2974) *
                 C54790 +
             (C47216 * C822 - C47134 * C901 + C47217 * C2913 -
              C139873 * C2978) *
                 C139731) *
                C13856 +
            ((C64359 - C64360 + C64361 - C64362) * C54790 +
             (C64363 - C64364 + C64365 - C64366) * C139731) *
                C13857 +
            ((C64367 - C64368 + C64369 - C64370) * C54790 +
             (C64371 - C64372 + C64373 - C64374) * C139731) *
                C13858) *
               C4096 +
           (((C64360 - C64359 + C64362 - C64361) * C54790 +
             (C64364 - C64363 + C64366 - C64365) * C139731) *
                C13856 +
            ((C64368 - C64367 + C64370 - C64369) * C54790 +
             (C64372 - C64371 + C64374 - C64373) * C139731) *
                C13857 +
            ((C47134 * C18422 - C47216 * C18302 + C139873 * C64356 -
              C47217 * C64244) *
                 C54790 +
             (C47134 * C18424 - C47216 * C18305 + C139873 * C64357 -
              C47217 * C64246) *
                 C139731) *
                C13858) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eexz[70] +=
        (-std::pow(Pi, 2.5) *
         (((((C139835 * C266 - C265 * C108) * C54790 +
             (C139835 * C272 - C265 * C115) * C139731) *
                C54786 +
            ((C6915 - C6916) * C54790 + (C6917 - C6918) * C139731) * C54787 +
            C57241 * C54788 + C57244 * C54789) *
               C4096 +
           (((C265 * C1570 - C139835 * C1741) * C54790 +
             (C265 * C1579 - C139835 * C1746) * C139731) *
                C54786 +
            ((C10635 - C10636) * C54790 + (C10637 - C10638) * C139731) *
                C54787 +
            ((C10639 - C10640) * C54790 + (C10641 - C10642) * C139731) *
                C54788 +
            ((C57811 - C57812) * C54790 + (C57813 - C57814) * C139731) *
                C54789) *
               C140002) *
              C806 +
          ((((C6916 - C6915) * C54790 + (C6918 - C6917) * C139731) * C54786 +
            ((C6922 - C6921) * C54790 + (C6924 - C6923) * C139731) * C54787 +
            ((C9794 - C9795) * C54790 + (C9796 - C9797) * C139731) * C54788 +
            ((C57237 - C57238) * C54790 + (C57239 - C57240) * C139731) *
                C54789) *
               C4096 +
           (((C10636 - C10635) * C54790 + (C10638 - C10637) * C139731) *
                C54786 +
            ((C10640 - C10639) * C54790 + (C10642 - C10641) * C139731) *
                C54787 +
            ((C57812 - C57811) * C54790 + (C57814 - C57813) * C139731) *
                C54788 +
            ((C139835 * C57808 - C265 * C57646) * C54790 +
             (C139835 * C57809 - C265 * C57648) * C139731) *
                C54789) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C139835 * C266 - C265 * C108) * C47136 +
             (C139835 * C272 - C265 * C115) * C47131 + (C279 - C280) * C47138 +
             (C281 - C282) * C47132 + C295 * C47140 + C296 * C47133) *
                C47134 +
            ((C6915 - C6916) * C47136 + (C6917 - C6918) * C47131 +
             C6919 * C47138 + C6920 * C47132 + C21967 * C47140 +
             C21968 * C47133) *
                C139873) *
               C4096 +
           (((C265 * C1570 - C139835 * C1741) * C47136 +
             (C265 * C1579 - C139835 * C1746) * C47131 +
             (C1752 - C1753) * C47138 + (C1754 - C1755) * C47132 +
             (C1756 - C1757) * C47140 + (C1758 - C1759) * C47133) *
                C47134 +
            ((C10635 - C10636) * C47136 + (C10637 - C10638) * C47131 +
             (C7986 - C7987) * C47138 + (C7988 - C7989) * C47132 +
             (C23820 - C23821) * C47140 + (C23822 - C23823) * C47133) *
                C139873) *
               C140002) *
              C806 +
          ((((C6916 - C6915) * C47136 + (C6918 - C6917) * C47131 +
             C6927 * C47138 + C6928 * C47132 + C22843 * C47140 +
             C22844 * C47133) *
                C47134 +
            ((C6922 - C6921) * C47136 + (C6924 - C6923) * C47131 +
             C6929 * C47138 + C6930 * C47132 + (C6000 - C6001) * C47140 +
             (C6002 - C6003) * C47133) *
                C139873) *
               C4096 +
           (((C10636 - C10635) * C47136 + (C10638 - C10637) * C47131 +
             (C7987 - C7986) * C47138 + (C7989 - C7988) * C47132 +
             (C23821 - C23820) * C47140 + (C23823 - C23822) * C47133) *
                C47134 +
            ((C10640 - C10639) * C47136 + (C10642 - C10641) * C47131 +
             (C7991 - C7990) * C47138 + (C7993 - C7992) * C47132 +
             (C139835 * C7981 - C265 * C7755) * C47140 +
             (C139835 * C7984 - C265 * C7761) * C47133) *
                C139873) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C13856 * C266 - C14015 * C108 + C13857 * C1741 - C14016 * C1570 +
              C13858 * C5397 - C14017 * C5273) *
                 C54790 +
             (C13856 * C272 - C14015 * C115 + C13857 * C1746 - C14016 * C1579 +
              C13858 * C5401 - C14017 * C5278) *
                 C139731) *
                C47134 +
            ((C60887 - C60888 + C60889 - C60890 + C60891 - C60892) * C54790 +
             (C60893 - C60894 + C60895 - C60896 + C60897 - C60898) * C139731) *
                C139873) *
               C4096 +
           (((C14015 * C1570 - C13856 * C1741 + C14016 * C5273 -
              C13857 * C5397 + C14017 * C15623 - C13858 * C15912) *
                 C54790 +
             (C14015 * C1579 - C13856 * C1746 + C14016 * C5278 -
              C13857 * C5401 + C14017 * C15628 - C13858 * C15915) *
                 C139731) *
                C47134 +
            ((C64475 - C64476 + C64477 - C64478 + C64479 - C64480) * C54790 +
             (C64481 - C64482 + C64483 - C64484 + C64485 - C64486) * C139731) *
                C139873) *
               C140002) *
              C806 +
          ((((C60888 - C60887 + C60890 - C60889 + C60892 - C60891) * C54790 +
             (C60894 - C60893 + C60896 - C60895 + C60898 - C60897) * C139731) *
                C47134 +
            ((C63658 - C63659 + C63660 - C63661 + C63662 - C63663) * C54790 +
             (C63664 - C63665 + C63666 - C63667 + C63668 - C63669) * C139731) *
                C139873) *
               C4096 +
           (((C64476 - C64475 + C64478 - C64477 + C64480 - C64479) * C54790 +
             (C64482 - C64481 + C64484 - C64483 + C64486 - C64485) * C139731) *
                C47134 +
            ((C13856 * C7979 - C14015 * C7754 + C13857 * C13300 -
              C14016 * C13128 + C13858 * C64472 - C14017 * C64244) *
                 C54790 +
             (C13856 * C7982 - C14015 * C7759 + C13857 * C13304 -
              C14016 * C13135 + C13858 * C64473 - C14017 * C64246) *
                 C139731) *
                C139873) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eeyx[70] +=
        (-std::pow(Pi, 2.5) *
         ((((C139731 * C114 - C54790 * C108) * C54842 +
            (C139731 * C354 - C54790 * C348) * C54786 +
            (C55513 - C55514) * C54843 + (C55515 - C55516) * C54787 +
            C57297 * C54844 + C57298 * C54788 + C57299 * C54845 +
            C57300 * C54789) *
               C139835 * C4096 +
           ((C54790 * C1570 - C139731 * C1578) * C54842 +
            (C54790 * C1829 - C139731 * C1834) * C54786 +
            (C57883 - C57884) * C54843 + (C57885 - C57886) * C54787 +
            (C57887 - C57888) * C54844 + (C57889 - C57890) * C54788 +
            (C57891 - C57892) * C54845 + (C57893 - C57894) * C54789) *
               C139835 * C140002) *
              C806 +
          (((C55514 - C55513) * C54842 + (C55516 - C55515) * C54786 +
            (C55518 - C55517) * C54843 + (C55520 - C55519) * C54787 +
            (C55522 - C55521) * C54844 + (C55524 - C55523) * C54788 +
            (C57301 - C57302) * C54845 + (C57303 - C57304) * C54789) *
               C139835 * C4096 +
           ((C57884 - C57883) * C54842 + (C57886 - C57885) * C54786 +
            (C57888 - C57887) * C54843 + (C57890 - C57889) * C54787 +
            (C57892 - C57891) * C54844 + (C57894 - C57893) * C54788 +
            (C139731 * C57647 - C54790 * C57646) * C54845 +
            (C139731 * C57881 - C54790 * C57880) * C54789) *
               C139835 * C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47131 * C114 - C47136 * C108 + C47132 * C116 - C47138 * C109 +
             C47133 * C118 - C47140 * C110) *
                C47216 +
            (C47131 * C354 - C47136 * C348 + C47132 * C355 - C47138 * C349 +
             C47133 * C356 - C47140 * C350) *
                C47134 +
            (C48294 - C48295 + C48296 - C48297 + C48298 - C48299) * C47217 +
            (C48300 - C48301 + C48302 - C48303 + C48304 - C48305) * C139873) *
               C139835 * C4096 +
           ((C47136 * C1570 - C47131 * C1578 + C47138 * C1569 - C47132 * C1576 +
             C47140 * C1568 - C47133 * C1574) *
                C47216 +
            (C47136 * C1829 - C47131 * C1834 + C47138 * C1830 - C47132 * C1835 +
             C47140 * C1831 - C47133 * C1836) *
                C47134 +
            (C51798 - C51799 + C51800 - C51801 + C51802 - C51803) * C47217 +
            (C51804 - C51805 + C51806 - C51807 + C51808 - C51809) * C139873) *
               C139835 * C140002) *
              C806 +
          (((C48295 - C48294 + C48297 - C48296 + C48299 - C48298) * C47216 +
            (C48301 - C48300 + C48303 - C48302 + C48305 - C48304) * C47134 +
            (C50997 - C50998 + C50999 - C51000 + C51001 - C51002) * C47217 +
            (C51003 - C51004 + C51005 - C51006 + C51007 - C51008) * C139873) *
               C139835 * C4096 +
           ((C51799 - C51798 + C51801 - C51800 + C51803 - C51802) * C47216 +
            (C51805 - C51804 + C51807 - C51806 + C51809 - C51808) * C47134 +
            (C47131 * C7758 - C47136 * C7754 + C47132 * C7756 - C47138 * C7753 +
             C47133 * C7760 - C47140 * C7755) *
                C47217 +
            (C47131 * C8094 - C47136 * C8091 + C47132 * C8095 - C47138 * C8092 +
             C47133 * C8096 - C47140 * C8093) *
                C139873) *
               C139835 * C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C139731 * C114 - C54790 * C108) * C47216 +
             (C139731 * C354 - C54790 * C348) * C47134 +
             (C55513 - C55514) * C47217 + (C55515 - C55516) * C139873) *
                C13856 +
            ((C61976 - C61977) * C47216 + (C61978 - C61979) * C47134 +
             C64587 * C47217 + C64588 * C139873) *
                C13857 +
            ((C61980 - C61981) * C47216 + (C61982 - C61983) * C47134 +
             C64589 * C47217 + C64590 * C139873) *
                C13858) *
               C4096 +
           (((C61977 - C61976) * C47216 + (C61979 - C61978) * C47134 +
             C64591 * C47217 + C64592 * C139873) *
                C13856 +
            ((C61981 - C61980) * C47216 + (C61983 - C61982) * C47134 +
             C64593 * C47217 + C64594 * C139873) *
                C13857 +
            ((C54790 * C15623 - C139731 * C15627) * C47216 +
             (C54790 * C16028 - C139731 * C16031) * C47134 +
             (C64595 - C64596) * C47217 + (C64597 - C64598) * C139873) *
                C13858) *
               C140002) *
              C806 +
          ((((C55514 - C55513) * C47216 + (C55516 - C55515) * C47134 +
             (C55518 - C55517) * C47217 + (C55520 - C55519) * C139873) *
                C13856 +
            (C64591 * C47216 + C64592 * C47134 + (C57887 - C57888) * C47217 +
             (C57889 - C57890) * C139873) *
                C13857 +
            (C64593 * C47216 + C64594 * C47134 + (C63744 - C63745) * C47217 +
             (C63746 - C63747) * C139873) *
                C13858) *
               C4096 +
           ((C64587 * C47216 + C64588 * C47134 + (C57888 - C57887) * C47217 +
             (C57890 - C57889) * C139873) *
                C13856 +
            (C64589 * C47216 + C64590 * C47134 + (C63745 - C63744) * C47217 +
             (C63747 - C63746) * C139873) *
                C13857 +
            ((C64596 - C64595) * C47216 + (C64598 - C64597) * C47134 +
             (C139731 * C64245 - C54790 * C64244) * C47217 +
             (C139731 * C64585 - C54790 * C64584) * C139873) *
                C13858) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eeyy[70] +=
        (-std::pow(Pi, 2.5) *
         (((C54842 * C183 - C54996 * C108 - C54842 * C348 + C54786 * C411 +
            C54843 * C896 - C54997 * C813 - C54843 * C1072 + C54787 * C1151 +
            C54844 * C2974 - C54998 * C2908 - C54844 * C3090 + C54788 * C3148 +
            C54845 * C6792 - C54999 * C6627 - C54845 * C7032 + C54789 * C7169) *
               C139731 * C139835 * C4096 -
           (C54845 * C10528 - C54999 * C10394 - C54845 * C10740 +
            C54789 * C10858 + C54844 * C7863 - C54998 * C7754 - C54844 * C8091 +
            C54788 * C8196 + C54843 * C3520 - C54997 * C3438 - C54843 * C3668 +
            C54787 * C3742 + C54842 * C1653 - C54996 * C1570 - C54842 * C1829 +
            C54786 * C1908) *
               C139731 * C139835 * C140002) *
              C806 +
          ((C54842 * C3520 - C54996 * C3438 - C54842 * C3668 + C54786 * C3742 +
            C54843 * C7863 - C54997 * C7754 - C54843 * C8091 + C54787 * C8196 +
            C54844 * C10528 - C54998 * C10394 - C54844 * C10740 +
            C54788 * C10858 + C54845 * C57740 - C54999 * C57646 -
            C54845 * C57880 + C54789 * C57960) *
               C139731 * C139835 * C140002 -
           (C54845 * C9707 - C54999 * C9609 - C54845 * C9876 + C54789 * C9968 +
            C54844 * C6792 - C54998 * C6627 - C54844 * C7032 + C54788 * C7169 +
            C54843 * C2974 - C54997 * C2908 - C54843 * C3090 + C54787 * C3148 +
            C54842 * C896 - C54996 * C813 - C54842 * C1072 + C54786 * C1151) *
               C139731 * C139835 * C4096) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47216 * C183 - C47470 * C108 - C47216 * C348 + C47134 * C411 +
             C47217 * C896 - C47471 * C813 - C47217 * C1072 + C139873 * C1151) *
                C47131 +
            (C47509 + C47510) * C47132 + C47515 * C47133) *
               C139835 * C4096 -
           ((C49390 + C49391) * C47133 + (C49392 + C49393) * C47132 +
            (C47217 * C3520 - C47471 * C3438 - C47217 * C3668 +
             C139873 * C3742 + C47216 * C1653 - C47470 * C1570 -
             C47216 * C1829 + C47134 * C1908) *
                C47131) *
               C139835 * C140002) *
              C806 +
          (((C47216 * C3520 - C47470 * C3438 - C47216 * C3668 + C47134 * C3742 +
             C47217 * C7863 - C47471 * C7754 - C47217 * C8091 +
             C139873 * C8196) *
                C47131 +
            (C47216 * C3521 - C47470 * C3439 - C47216 * C3669 + C47134 * C3743 +
             C47217 * C7864 - C47471 * C7753 - C47217 * C8092 +
             C139873 * C8195) *
                C47132 +
            (C47216 * C3522 - C47470 * C3440 - C47216 * C3670 + C47134 * C3744 +
             C47217 * C7865 - C47471 * C7755 - C47217 * C8093 +
             C139873 * C8197) *
                C47133) *
               C139835 * C140002 -
           ((C48440 + C48441) * C47133 + (C48442 + C48443) * C47132 +
            (C47217 * C2974 - C47471 * C2908 - C47217 * C3090 +
             C139873 * C3148 + C47216 * C896 - C47470 * C813 - C47216 * C1072 +
             C47134 * C1151) *
                C47131) *
               C139835 * C4096) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47216 * C183 - C47470 * C108 - C47216 * C348 + C47134 * C411 +
             C47217 * C896 - C47471 * C813 - C47217 * C1072 + C139873 * C1151) *
                C139731 * C13856 +
            (C62126 + C62127) * C139731 * C13857 +
            (C62128 + C62129) * C139731 * C13858) *
               C4096 -
           ((C47217 * C18422 - C47471 * C18302 - C47217 * C18634 +
             C139873 * C18744 + C47216 * C15788 - C47470 * C15623 -
             C47216 * C16028 + C47134 * C16165) *
                C139731 * C13858 +
            (C62129 + C62128) * C139731 * C13857 +
            (C62127 + C62126) * C139731 * C13856) *
               C140002) *
              C806 +
          (((C64722 + C64723) * C139731 * C13856 +
            (C64724 + C64725) * C139731 * C13857 +
            (C47216 * C18422 - C47470 * C18302 - C47216 * C18634 +
             C47134 * C18744 + C47217 * C64356 - C47471 * C64244 -
             C47217 * C64584 + C139873 * C64696) *
                C139731 * C13858) *
               C140002 -
           ((C64725 + C64724) * C139731 * C13858 +
            (C64723 + C64722) * C139731 * C13857 +
            (C47217 * C2974 - C47471 * C2908 - C47217 * C3090 +
             C139873 * C3148 + C47216 * C896 - C47470 * C813 - C47216 * C1072 +
             C47134 * C1151) *
                C139731 * C13856) *
               C4096) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eeyz[70] +=
        (-std::pow(Pi, 2.5) *
         ((((C139835 * C266 - C265 * C108) * C54842 +
            (C139835 * C495 - C265 * C348) * C54786 + (C6915 - C6916) * C54843 +
            (C7294 - C7295) * C54787 + C9790 * C54844 + C10047 * C54788 +
            C57235 * C54845 + C57407 * C54789) *
               C139731 * C4096 +
           ((C265 * C1570 - C139835 * C1741) * C54842 +
            (C265 * C1829 - C139835 * C1997) * C54786 +
            (C10635 - C10636) * C54843 + (C10961 - C10962) * C54787 +
            (C10639 - C10640) * C54844 + (C10963 - C10964) * C54788 +
            (C57811 - C57812) * C54845 + (C58029 - C58030) * C54789) *
               C139731 * C140002) *
              C806 +
          (((C6916 - C6915) * C54842 + (C7295 - C7294) * C54786 +
            (C6922 - C6921) * C54843 + (C7297 - C7296) * C54787 +
            (C9794 - C9795) * C54844 + (C10048 - C10049) * C54788 +
            (C57237 - C57238) * C54845 + (C57408 - C57409) * C54789) *
               C139731 * C4096 +
           ((C10636 - C10635) * C54842 + (C10962 - C10961) * C54786 +
            (C10640 - C10639) * C54843 + (C10964 - C10963) * C54787 +
            (C57812 - C57811) * C54844 + (C58030 - C58029) * C54788 +
            (C139835 * C57808 - C265 * C57646) * C54845 +
            (C139835 * C58027 - C265 * C57880) * C54789) *
               C139731 * C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C139835 * C266 - C265 * C108) * C47216 +
             (C139835 * C495 - C265 * C348) * C47134 +
             (C6915 - C6916) * C47217 + (C7294 - C7295) * C139873) *
                C47131 +
            ((C279 - C280) * C47216 + (C502 - C503) * C47134 + C6919 * C47217 +
             C7298 * C139873) *
                C47132 +
            C47596 * C47133) *
               C4096 +
           (((C265 * C1570 - C139835 * C1741) * C47216 +
             (C265 * C1829 - C139835 * C1997) * C47134 +
             (C10635 - C10636) * C47217 + (C10961 - C10962) * C139873) *
                C47131 +
            ((C1752 - C1753) * C47216 + (C2003 - C2004) * C47134 +
             (C7986 - C7987) * C47217 + (C8321 - C8322) * C139873) *
                C47132 +
            ((C1756 - C1757) * C47216 + (C2005 - C2006) * C47134 +
             (C23820 - C23821) * C47217 + (C24146 - C24147) * C139873) *
                C47133) *
               C140002) *
              C806 +
          ((((C6916 - C6915) * C47216 + (C7295 - C7294) * C47134 +
             (C6922 - C6921) * C47217 + (C7297 - C7296) * C139873) *
                C47131 +
            (C6927 * C47216 + C7300 * C47134 + C6929 * C47217 +
             C7301 * C139873) *
                C47132 +
            (C22843 * C47216 + C23191 * C47134 + (C6000 - C6001) * C47217 +
             (C6273 - C6274) * C139873) *
                C47133) *
               C4096 +
           (((C10636 - C10635) * C47216 + (C10962 - C10961) * C47134 +
             (C10640 - C10639) * C47217 + (C10964 - C10963) * C139873) *
                C47131 +
            ((C7987 - C7986) * C47216 + (C8322 - C8321) * C47134 +
             (C7991 - C7990) * C47217 + (C8324 - C8323) * C139873) *
                C47132 +
            ((C23821 - C23820) * C47216 + (C24147 - C24146) * C47134 +
             (C139835 * C7981 - C265 * C7755) * C47217 +
             (C139835 * C8319 - C265 * C8093) * C139873) *
                C47133) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C13856 * C266 - C14015 * C108 + C13857 * C1741 - C14016 * C1570 +
             C13858 * C5397 - C14017 * C5273) *
                C47216 +
            (C13856 * C495 - C14015 * C348 + C13857 * C1997 - C14016 * C1829 +
             C13858 * C5567 - C14017 * C5455) *
                C47134 +
            (C60887 - C60888 + C60889 - C60890 + C60891 - C60892) * C47217 +
            (C61205 - C61206 + C61207 - C61208 + C61209 - C61210) * C139873) *
               C139731 * C4096 +
           ((C14015 * C1570 - C13856 * C1741 + C14016 * C5273 - C13857 * C5397 +
             C14017 * C15623 - C13858 * C15912) *
                C47216 +
            (C14015 * C1829 - C13856 * C1997 + C14016 * C5455 - C13857 * C5567 +
             C14017 * C16028 - C13858 * C16294) *
                C47134 +
            (C64475 - C64476 + C64477 - C64478 + C64479 - C64480) * C47217 +
            (C64825 - C64826 + C64827 - C64828 + C64829 - C64830) * C139873) *
               C139731 * C140002) *
              C806 +
          (((C60888 - C60887 + C60890 - C60889 + C60892 - C60891) * C47216 +
            (C61206 - C61205 + C61208 - C61207 + C61210 - C61209) * C47134 +
            (C63658 - C63659 + C63660 - C63661 + C63662 - C63663) * C47217 +
            (C63896 - C63897 + C63898 - C63899 + C63900 - C63901) * C139873) *
               C139731 * C4096 +
           ((C64476 - C64475 + C64478 - C64477 + C64480 - C64479) * C47216 +
            (C64826 - C64825 + C64828 - C64827 + C64830 - C64829) * C47134 +
            (C13856 * C7979 - C14015 * C7754 + C13857 * C13300 -
             C14016 * C13128 + C13858 * C64472 - C14017 * C64244) *
                C47217 +
            (C13856 * C8317 - C14015 * C8091 + C13857 * C13541 -
             C14016 * C13382 + C13858 * C64823 - C14017 * C64584) *
                C139873) *
               C139731 * C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eezx[70] +=
        (-std::pow(Pi, 2.5) *
         (((((C139731 * C114 - C54790 * C108) * C265 +
             (C139731 * C573 - C54790 * C567) * C139835) *
                C54786 +
            ((C55513 - C55514) * C265 + (C55735 - C55736) * C139835) * C54787 +
            C57470 * C54788 + C57471 * C54789) *
               C4096 +
           (((C54790 * C1570 - C139731 * C1578) * C265 +
             (C54790 * C2074 - C139731 * C2079) * C139835) *
                C54786 +
            ((C57883 - C57884) * C265 + (C58099 - C58100) * C139835) * C54787 +
            ((C57887 - C57888) * C265 + (C58101 - C58102) * C139835) * C54788 +
            ((C57891 - C57892) * C265 + (C58103 - C58104) * C139835) * C54789) *
               C140002) *
              C806 +
          ((((C55514 - C55513) * C265 + (C55736 - C55735) * C139835) * C54786 +
            ((C55518 - C55517) * C265 + (C55738 - C55737) * C139835) * C54787 +
            ((C55522 - C55521) * C265 + (C55740 - C55739) * C139835) * C54788 +
            ((C57301 - C57302) * C265 + (C57466 - C57467) * C139835) * C54789) *
               C4096 +
           (((C57884 - C57883) * C265 + (C58100 - C58099) * C139835) * C54786 +
            ((C57888 - C57887) * C265 + (C58102 - C58101) * C139835) * C54787 +
            ((C57892 - C57891) * C265 + (C58104 - C58103) * C139835) * C54788 +
            ((C139731 * C57647 - C54790 * C57646) * C265 +
             (C139731 * C58097 - C54790 * C58096) * C139835) *
                C54789) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47131 * C114 - C47136 * C108 + C47132 * C116 - C47138 * C109 +
              C47133 * C118 - C47140 * C110) *
                 C265 +
             (C47131 * C573 - C47136 * C567 + C47132 * C574 - C47138 * C568 +
              C47133 * C575 - C47140 * C569) *
                 C139835) *
                C47134 +
            ((C48294 - C48295 + C48296 - C48297 + C48298 - C48299) * C265 +
             (C48640 - C48641 + C48642 - C48643 + C48644 - C48645) * C139835) *
                C139873) *
               C4096 +
           (((C47136 * C1570 - C47131 * C1578 + C47138 * C1569 -
              C47132 * C1576 + C47140 * C1568 - C47133 * C1574) *
                 C265 +
             (C47136 * C2074 - C47131 * C2079 + C47138 * C2075 -
              C47132 * C2080 + C47140 * C2076 - C47133 * C2081) *
                 C139835) *
                C47134 +
            ((C51798 - C51799 + C51800 - C51801 + C51802 - C51803) * C265 +
             (C52104 - C52105 + C52106 - C52107 + C52108 - C52109) * C139835) *
                C139873) *
               C140002) *
              C806 +
          ((((C48295 - C48294 + C48297 - C48296 + C48299 - C48298) * C265 +
             (C48641 - C48640 + C48643 - C48642 + C48645 - C48644) * C139835) *
                C47134 +
            ((C50997 - C50998 + C50999 - C51000 + C51001 - C51002) * C265 +
             (C51231 - C51232 + C51233 - C51234 + C51235 - C51236) * C139835) *
                C139873) *
               C4096 +
           (((C51799 - C51798 + C51801 - C51800 + C51803 - C51802) * C265 +
             (C52105 - C52104 + C52107 - C52106 + C52109 - C52108) * C139835) *
                C47134 +
            ((C47131 * C7758 - C47136 * C7754 + C47132 * C7756 -
              C47138 * C7753 + C47133 * C7760 - C47140 * C7755) *
                 C265 +
             (C47131 * C8425 - C47136 * C8422 + C47132 * C8426 -
              C47138 * C8423 + C47133 * C8427 - C47140 * C8424) *
                 C139835) *
                C139873) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C139731 * C114 - C54790 * C108) * C14015 +
             (C139731 * C573 - C54790 * C567) * C13856 +
             (C61976 - C61977) * C14016 + (C62328 - C62329) * C13857 +
             (C61980 - C61981) * C14017 + (C62330 - C62331) * C13858) *
                C47134 +
            ((C55513 - C55514) * C14015 + (C55735 - C55736) * C13856 +
             C64587 * C14016 + C64931 * C13857 + C64589 * C14017 +
             C64932 * C13858) *
                C139873) *
               C4096 +
           (((C61977 - C61976) * C14015 + (C62329 - C62328) * C13856 +
             (C61981 - C61980) * C14016 + (C62331 - C62330) * C13857 +
             (C54790 * C15623 - C139731 * C15627) * C14017 +
             (C54790 * C16401 - C139731 * C16404) * C13858) *
                C47134 +
            (C64591 * C14015 + C64933 * C13856 + C64593 * C14016 +
             C64934 * C13857 + (C64595 - C64596) * C14017 +
             (C64935 - C64936) * C13858) *
                C139873) *
               C140002) *
              C806 +
          ((((C55514 - C55513) * C14015 + (C55736 - C55735) * C13856 +
             C64591 * C14016 + C64933 * C13857 + C64593 * C14017 +
             C64934 * C13858) *
                C47134 +
            ((C55518 - C55517) * C14015 + (C55738 - C55737) * C13856 +
             (C57887 - C57888) * C14016 + (C58101 - C58102) * C13857 +
             (C63744 - C63745) * C14017 + (C63976 - C63977) * C13858) *
                C139873) *
               C4096 +
           ((C64587 * C14015 + C64931 * C13856 + C64589 * C14016 +
             C64932 * C13857 + (C64596 - C64595) * C14017 +
             (C64936 - C64935) * C13858) *
                C47134 +
            ((C57888 - C57887) * C14015 + (C58102 - C58101) * C13856 +
             (C63745 - C63744) * C14016 + (C63977 - C63976) * C13857 +
             (C139731 * C64245 - C54790 * C64244) * C14017 +
             (C139731 * C64929 - C54790 * C64928) * C13858) *
                C139873) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eezy[70] +=
        (-std::pow(Pi, 2.5) *
         ((((C54786 * C183 - C54842 * C108 + C54787 * C896 - C54843 * C813 +
             C54788 * C2974 - C54844 * C2908 + C54789 * C6792 -
             C54845 * C6627) *
                C265 +
            (C54786 * C629 - C54842 * C567 + C54787 * C1393 - C54843 * C1317 +
             C54788 * C3314 - C54844 * C3256 + C54789 * C7521 -
             C54845 * C7401) *
                C139835) *
               C139731 * C4096 +
           ((C54842 * C1570 - C54786 * C1653 + C54843 * C3438 - C54787 * C3520 +
             C54844 * C7754 - C54788 * C7863 + C54845 * C10394 -
             C54789 * C10528) *
                C265 +
            (C54842 * C2074 - C54786 * C2150 + C54843 * C3882 - C54787 * C3956 +
             C54844 * C8422 - C54788 * C8526 + C54845 * C11062 -
             C54789 * C11172) *
                C139835) *
               C139731 * C140002) *
              C806 +
          (((C54842 * C813 - C54786 * C896 + C54843 * C2908 - C54787 * C2974 +
             C54844 * C6627 - C54788 * C6792 + C54845 * C9609 -
             C54789 * C9707) *
                C265 +
            (C54842 * C1317 - C54786 * C1393 + C54843 * C3256 - C54787 * C3314 +
             C54844 * C7401 - C54788 * C7521 + C54845 * C10123 -
             C54789 * C10211) *
                C139835) *
               C139731 * C4096 +
           ((C54786 * C3520 - C54842 * C3438 + C54787 * C7863 - C54843 * C7754 +
             C54788 * C10528 - C54844 * C10394 + C54789 * C57740 -
             C54845 * C57646) *
                C265 +
            (C54786 * C3956 - C54842 * C3882 + C54787 * C8526 - C54843 * C8422 +
             C54788 * C11172 - C54844 * C11062 + C54789 * C58170 -
             C54845 * C58096) *
                C139835) *
               C139731 * C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47134 * C183 - C47216 * C108 + C139873 * C896 - C47217 * C813) *
                 C265 +
             (C47134 * C629 - C47216 * C567 + C139873 * C1393 -
              C47217 * C1317) *
                 C139835) *
                C47131 +
            ((C47219 - C47220 + C47221 - C47222) * C265 +
             (C47745 - C47746 + C47747 - C47748) * C139835) *
                C47132 +
            C47762 * C47133) *
               C4096 +
           (((C47216 * C1570 - C47134 * C1653 + C47217 * C3438 -
              C139873 * C3520) *
                 C265 +
             (C47216 * C2074 - C47134 * C2150 + C47217 * C3882 -
              C139873 * C3956) *
                 C139835) *
                C47131 +
            ((C49056 - C49057 + C49058 - C49059) * C265 +
             (C49688 - C49689 + C49690 - C49691) * C139835) *
                C47132 +
            ((C49064 - C49065 + C49066 - C49067) * C265 +
             (C49692 - C49693 + C49694 - C49695) * C139835) *
                C47133) *
               C140002) *
              C806 +
          ((((C47216 * C813 - C47134 * C896 + C47217 * C2908 -
              C139873 * C2974) *
                 C265 +
             (C47216 * C1317 - C47134 * C1393 + C47217 * C3256 -
              C139873 * C3314) *
                 C139835) *
                C47131 +
            ((C48082 - C48083 + C48084 - C48085) * C265 +
             (C48750 - C48751 + C48752 - C48753) * C139835) *
                C47132 +
            ((C48090 - C48091 + C48092 - C48093) * C265 +
             (C48754 - C48755 + C48756 - C48757) * C139835) *
                C47133) *
               C4096 +
           (((C47134 * C3520 - C47216 * C3438 + C139873 * C7863 -
              C47217 * C7754) *
                 C265 +
             (C47134 * C3956 - C47216 * C3882 + C139873 * C8526 -
              C47217 * C8422) *
                 C139835) *
                C47131 +
            ((C47134 * C3521 - C47216 * C3439 + C139873 * C7864 -
              C47217 * C7753) *
                 C265 +
             (C47134 * C3957 - C47216 * C3883 + C139873 * C8527 -
              C47217 * C8423) *
                 C139835) *
                C47132 +
            ((C47134 * C3522 - C47216 * C3440 + C139873 * C7865 -
              C47217 * C7755) *
                 C265 +
             (C47134 * C3958 - C47216 * C3884 + C139873 * C8528 -
              C47217 * C8424) *
                 C139835) *
                C47133) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47134 * C183 - C47216 * C108 + C139873 * C896 - C47217 * C813) *
                C14015 +
            (C47134 * C629 - C47216 * C567 + C139873 * C1393 - C47217 * C1317) *
                C13856 +
            (C61756 - C61757 + C61758 - C61759) * C14016 +
            (C62434 - C62435 + C62436 - C62437) * C13857 +
            (C61764 - C61765 + C61766 - C61767) * C14017 +
            (C62438 - C62439 + C62440 - C62441) * C13858) *
               C139731 * C4096 +
           ((C61757 - C61756 + C61759 - C61758) * C14015 +
            (C62435 - C62434 + C62437 - C62436) * C13856 +
            (C61765 - C61764 + C61767 - C61766) * C14016 +
            (C62439 - C62438 + C62441 - C62440) * C13857 +
            (C47216 * C15623 - C47134 * C15788 + C47217 * C18302 -
             C139873 * C18422) *
                C14017 +
            (C47216 * C16401 - C47134 * C16521 + C47217 * C18962 -
             C139873 * C19068) *
                C13858) *
               C139731 * C140002) *
              C806 +
          (((C47216 * C813 - C47134 * C896 + C47217 * C2908 - C139873 * C2974) *
                C14015 +
            (C47216 * C1317 - C47134 * C1393 + C47217 * C3256 -
             C139873 * C3314) *
                C13856 +
            (C64359 - C64360 + C64361 - C64362) * C14016 +
            (C65036 - C65037 + C65038 - C65039) * C13857 +
            (C64367 - C64368 + C64369 - C64370) * C14017 +
            (C65040 - C65041 + C65042 - C65043) * C13858) *
               C139731 * C4096 +
           ((C64360 - C64359 + C64362 - C64361) * C14015 +
            (C65037 - C65036 + C65039 - C65038) * C13856 +
            (C64368 - C64367 + C64370 - C64369) * C14016 +
            (C65041 - C65040 + C65043 - C65042) * C13857 +
            (C47134 * C18422 - C47216 * C18302 + C139873 * C64356 -
             C47217 * C64244) *
                C14017 +
            (C47134 * C19068 - C47216 * C18962 + C139873 * C65034 -
             C47217 * C64928) *
                C13858) *
               C139731 * C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eezz[70] +=
        (-std::pow(Pi, 2.5) *
         ((((C265 * C266 - C701 * C108 - C265 * C567 + C139835 * C702) *
                C54786 +
            C7652 * C54787 + C7653 * C54788 + C10296 * C54789) *
               C139731 * C4096 -
           (C58245 * C54789 + C11287 * C54788 + C11288 * C54787 +
            (C265 * C1741 - C701 * C1570 - C265 * C2074 + C139835 * C2230) *
                C54786) *
               C139731 * C140002) *
              C806 +
          ((C11288 * C54786 + C11287 * C54787 + C58245 * C54788 +
            (C265 * C57808 - C701 * C57646 - C265 * C58096 + C139835 * C58237) *
                C54789) *
               C139731 * C140002 -
           (C57580 * C54789 + C10296 * C54788 + C7653 * C54787 +
            C7652 * C54786) *
               C139731 * C4096) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C265 * C266 - C701 * C108 - C265 * C567 + C139835 * C702) *
                 C47134 +
             C7652 * C139873) *
                C47131 +
            (C47837 + C47838) * C47132 + C47843 * C47133) *
               C4096 -
           ((C49794 + C49795) * C47133 + (C49796 + C49797) * C47132 +
            (C11288 * C139873 +
             (C265 * C1741 - C701 * C1570 - C265 * C2074 + C139835 * C2230) *
                 C47134) *
                C47131) *
               C140002) *
              C806 +
          (((C11288 * C47134 + C11287 * C139873) * C47131 +
            (C8651 * C47134 + C8650 * C139873) * C47132 +
            (C24459 * C47134 +
             (C265 * C7981 - C701 * C7755 - C265 * C8424 + C139835 * C8635) *
                 C139873) *
                C47133) *
               C140002 -
           ((C48856 + C48857) * C47133 + (C48858 + C48859) * C47132 +
            (C7653 * C139873 + C7652 * C47134) * C47131) *
               C4096) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C14015 * C266 - C14516 * C108 - C14015 * C567 + C13856 * C702 +
             C14016 * C1741 - C14517 * C1570 - C14016 * C2074 + C13857 * C2230 +
             C14017 * C5397 - C14518 * C5273 - C14017 * C5621 +
             C13858 * C5733) *
                C47134 +
            (C61529 + C61530 + C61531) * C139873) *
               C139731 * C4096 -
           ((C65161 + C65162 + C65163) * C139873 +
            (C14017 * C15912 - C14518 * C15623 - C14017 * C16401 +
             C13858 * C16633 + C14016 * C5397 - C14517 * C5273 -
             C14016 * C5621 + C13857 * C5733 + C14015 * C1741 - C14516 * C1570 -
             C14015 * C2074 + C13856 * C2230) *
                C47134) *
               C139731 * C140002) *
              C806 +
          (((C65163 + C65162 + C65161) * C47134 +
            (C14015 * C7979 - C14516 * C7754 - C14015 * C8422 + C13856 * C8634 +
             C14016 * C13300 - C14517 * C13128 - C14016 * C13620 +
             C13857 * C13779 + C14017 * C64472 - C14518 * C64244 -
             C14017 * C64928 + C13858 * C65141) *
                C139873) *
               C139731 * C140002 -
           ((C64144 + C64145 + C64146) * C139873 +
            (C61531 + C61530 + C61529) * C47134) *
               C139731 * C4096) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eexx[71] +=
        (-std::pow(Pi, 2.5) *
         (((C54790 * C114 - C54791 * C108 - C54790 * C115 + C139731 * C126) *
               C139835 * C54786 +
           C55309 * C54787 + C55310 * C54788 + C55311 * C54789) *
              C5270 -
          (C57672 * C54789 + C57673 * C54788 + C57674 * C54787 +
           (C54790 * C1578 - C54791 * C1570 - C54790 * C1579 +
            C139731 * C1585) *
               C139835 * C54786) *
              C5271 +
          ((C54790 * C5277 - C54791 * C5273 - C54790 * C5278 +
            C139731 * C5285) *
               C139835 * C54786 +
           (C54790 * C13130 - C54791 * C13126 - C54790 * C13131 +
            C139731 * C13138) *
               C139835 * C54787 +
           (C54790 * C13134 - C54791 * C13128 - C54790 * C13135 +
            C139731 * C13140) *
               C139835 * C54788 +
           (C54790 * C59484 - C54791 * C59483 - C54790 * C59485 +
            C139731 * C59486) *
               C139835 * C54789) *
              C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C47136 * C114 - C47137 * C108 - C47136 * C115 + C47131 * C126 +
            C47138 * C116 - C47139 * C109 - C47138 * C117 + C47132 * C127 +
            C47140 * C118 - C47141 * C110 - C47140 * C119 + C47133 * C128) *
               C139835 * C47134 +
           (C47978 + C47979 + C47980) * C139835 * C139873) *
              C5270 -
          ((C51501 + C51502 + C51503) * C139835 * C139873 +
           (C47140 * C1574 - C47141 * C1568 - C47140 * C1575 + C47133 * C1583 +
            C47138 * C1576 - C47139 * C1569 - C47138 * C1577 + C47132 * C1584 +
            C47136 * C1578 - C47137 * C1570 - C47136 * C1579 + C47131 * C1585) *
               C139835 * C47134) *
              C5271 +
          ((C47136 * C5277 - C47137 * C5273 - C47136 * C5278 + C47131 * C5285 +
            C47138 * C5279 - C47139 * C5274 - C47138 * C5280 + C47132 * C5286 +
            C47140 * C5281 - C47141 * C5275 - C47140 * C5282 + C47133 * C5287) *
               C139835 * C47134 +
           (C47136 * C13130 - C47137 * C13126 - C47136 * C13131 +
            C47131 * C13138 + C47138 * C13132 - C47139 * C13127 -
            C47138 * C13133 + C47132 * C13139 + C47140 * C14660 -
            C47141 * C14659 - C47140 * C14661 + C47133 * C14662) *
               C139835 * C139873) *
              C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C54790 * C114 - C54791 * C108 - C54790 * C115 + C139731 * C126) *
                C13856 +
            C61654 * C13857 + C61655 * C13858) *
               C47134 +
           (C60664 + C60665 + C60688) * C139873) *
              C5270 -
          ((C64258 + C64253 + C64254) * C139873 +
           (C67012 * C13858 + C61655 * C13857 + C61654 * C13856) * C47134) *
              C5271 +
          ((C61655 * C13856 + C67012 * C13857 +
            (C54790 * C21014 - C54791 * C21012 - C54790 * C21015 +
             C139731 * C21018) *
                C13858) *
               C47134 +
           (C60685 * C13856 + C64257 * C13857 +
            (C54790 * C67002 - C54791 * C67001 - C54790 * C67003 +
             C139731 * C67004) *
                C13858) *
               C139873) *
              C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q));
    d2eexy[71] +=
        (-std::pow(Pi, 2.5) *
         (((C54786 * C183 - C54842 * C108 + C54787 * C896 - C54843 * C813 +
            C54788 * C2974 - C54844 * C2908 + C54789 * C6792 - C54845 * C6627) *
               C54790 +
           (C54786 * C189 - C54842 * C115 + C54787 * C901 - C54843 * C822 +
            C54788 * C2978 - C54844 * C2913 + C54789 * C6795 - C54845 * C6632) *
               C139731) *
              C139835 * C5270 +
          ((C54842 * C1570 - C54786 * C1653 + C54843 * C3438 - C54787 * C3520 +
            C54844 * C7754 - C54788 * C7863 + C54845 * C10394 -
            C54789 * C10528) *
               C54790 +
           (C54842 * C1579 - C54786 * C1658 + C54843 * C3443 - C54787 * C3524 +
            C54844 * C7759 - C54788 * C7866 + C54845 * C10397 -
            C54789 * C10530) *
               C139731) *
              C139835 * C5271 +
          ((C54786 * C5339 - C54842 * C5273 + C54787 * C13216 -
            C54843 * C13126 + C54788 * C13217 - C54844 * C13128 +
            C54789 * C59537 - C54845 * C59483) *
               C54790 +
           (C54786 * C5343 - C54842 * C5278 + C54787 * C13220 -
            C54843 * C13131 + C54788 * C13221 - C54844 * C13135 +
            C54789 * C59538 - C54845 * C59485) *
               C139731) *
              C139835 * C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C47134 * C183 - C47216 * C108 + C139873 * C896 - C47217 * C813) *
               C47136 +
           (C47134 * C189 - C47216 * C115 + C139873 * C901 - C47217 * C822) *
               C47131 +
           (C47219 - C47220 + C47221 - C47222) * C47138 +
           (C47223 - C47224 + C47225 - C47226) * C47132 + C47247 * C47140 +
           C47248 * C47133) *
              C139835 * C5270 +
          ((C47216 * C1570 - C47134 * C1653 + C47217 * C3438 -
            C139873 * C3520) *
               C47136 +
           (C47216 * C1579 - C47134 * C1658 + C47217 * C3443 -
            C139873 * C3524) *
               C47131 +
           (C49056 - C49057 + C49058 - C49059) * C47138 +
           (C49060 - C49061 + C49062 - C49063) * C47132 +
           (C49064 - C49065 + C49066 - C49067) * C47140 +
           (C49068 - C49069 + C49070 - C49071) * C47133) *
              C139835 * C5271 +
          ((C47134 * C5339 - C47216 * C5273 + C139873 * C13216 -
            C47217 * C13126) *
               C47136 +
           (C47134 * C5343 - C47216 * C5278 + C139873 * C13220 -
            C47217 * C13131) *
               C47131 +
           (C47134 * C5340 - C47216 * C5274 + C139873 * C13218 -
            C47217 * C13127) *
               C47138 +
           (C47134 * C5344 - C47216 * C5280 + C139873 * C13222 -
            C47217 * C13133) *
               C47132 +
           (C47134 * C5341 - C47216 * C5275 + C139873 * C14761 -
            C47217 * C14659) *
               C47140 +
           (C47134 * C5345 - C47216 * C5282 + C139873 * C14762 -
            C47217 * C14661) *
               C47133) *
              C139835 * C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47134 * C183 - C47216 * C108 + C139873 * C896 - C47217 * C813) *
                C54790 +
            (C47134 * C189 - C47216 * C115 + C139873 * C901 - C47217 * C822) *
                C139731) *
               C13856 +
           ((C61756 - C61757 + C61758 - C61759) * C54790 +
            (C61760 - C61761 + C61762 - C61763) * C139731) *
               C13857 +
           C67105 * C13858) *
              C5270 +
          (((C61757 - C61756 + C61759 - C61758) * C54790 +
            (C61761 - C61760 + C61763 - C61762) * C139731) *
               C13856 +
           ((C61765 - C61764 + C61767 - C61766) * C54790 +
            (C61769 - C61768 + C61771 - C61770) * C139731) *
               C13857 +
           ((C67093 - C67094 + C67095 - C67096) * C54790 +
            (C67097 - C67098 + C67099 - C67100) * C139731) *
               C13858) *
              C5271 +
          (C67105 * C13856 +
           ((C67094 - C67093 + C67096 - C67095) * C54790 +
            (C67098 - C67097 + C67100 - C67099) * C139731) *
               C13857 +
           ((C47134 * C21109 - C47216 * C21012 + C139873 * C67086 -
             C47217 * C67001) *
                C54790 +
            (C47134 * C21111 - C47216 * C21015 + C139873 * C67087 -
             C47217 * C67003) *
                C139731) *
               C13858) *
              C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q));
    d2eexz[71] +=
        (-std::pow(Pi, 2.5) *
         ((((C139835 * C266 - C265 * C108) * C54790 +
            (C139835 * C272 - C265 * C115) * C139731) *
               C54786 +
           ((C6915 - C6916) * C54790 + (C6917 - C6918) * C139731) * C54787 +
           C57241 * C54788 + C57244 * C54789) *
              C5270 +
          (((C265 * C1570 - C139835 * C1741) * C54790 +
            (C265 * C1579 - C139835 * C1746) * C139731) *
               C54786 +
           ((C10635 - C10636) * C54790 + (C10637 - C10638) * C139731) * C54787 +
           ((C10639 - C10640) * C54790 + (C10641 - C10642) * C139731) * C54788 +
           ((C57811 - C57812) * C54790 + (C57813 - C57814) * C139731) *
               C54789) *
              C5271 +
          (((C139835 * C5397 - C265 * C5273) * C54790 +
            (C139835 * C5401 - C265 * C5278) * C139731) *
               C54786 +
           ((C139835 * C13298 - C265 * C13126) * C54790 +
            (C139835 * C13302 - C265 * C13131) * C139731) *
               C54787 +
           ((C139835 * C13300 - C265 * C13128) * C54790 +
            (C139835 * C13304 - C265 * C13135) * C139731) *
               C54788 +
           ((C139835 * C59589 - C265 * C59483) * C54790 +
            (C139835 * C59590 - C265 * C59485) * C139731) *
               C54789) *
              C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C139835 * C266 - C265 * C108) * C47136 +
            (C139835 * C272 - C265 * C115) * C47131 + (C279 - C280) * C47138 +
            (C281 - C282) * C47132 + C295 * C47140 + C296 * C47133) *
               C47134 +
           ((C6915 - C6916) * C47136 + (C6917 - C6918) * C47131 +
            C6919 * C47138 + C6920 * C47132 + C21967 * C47140 +
            C21968 * C47133) *
               C139873) *
              C5270 +
          (((C265 * C1570 - C139835 * C1741) * C47136 +
            (C265 * C1579 - C139835 * C1746) * C47131 +
            (C1752 - C1753) * C47138 + (C1754 - C1755) * C47132 +
            (C1756 - C1757) * C47140 + (C1758 - C1759) * C47133) *
               C47134 +
           ((C10635 - C10636) * C47136 + (C10637 - C10638) * C47131 +
            (C7986 - C7987) * C47138 + (C7988 - C7989) * C47132 +
            (C23820 - C23821) * C47140 + (C23822 - C23823) * C47133) *
               C139873) *
              C5271 +
          (((C139835 * C5397 - C265 * C5273) * C47136 +
            (C139835 * C5401 - C265 * C5278) * C47131 +
            (C139835 * C5398 - C265 * C5274) * C47138 +
            (C139835 * C5402 - C265 * C5280) * C47132 +
            (C139835 * C5399 - C265 * C5275) * C47140 +
            (C139835 * C5403 - C265 * C5282) * C47133) *
               C47134 +
           ((C139835 * C13298 - C265 * C13126) * C47136 +
            (C139835 * C13302 - C265 * C13131) * C47131 +
            (C139835 * C13299 - C265 * C13127) * C47138 +
            (C139835 * C13303 - C265 * C13133) * C47132 +
            (C139835 * C14869 - C265 * C14659) * C47140 +
            (C139835 * C14870 - C265 * C14661) * C47133) *
               C139873) *
              C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C13856 * C266 - C14015 * C108 + C13857 * C1741 - C14016 * C1570 +
             C13858 * C5397 - C14017 * C5273) *
                C54790 +
            (C13856 * C272 - C14015 * C115 + C13857 * C1746 - C14016 * C1579 +
             C13858 * C5401 - C14017 * C5278) *
                C139731) *
               C47134 +
           ((C60887 - C60888 + C60889 - C60890 + C60891 - C60892) * C54790 +
            (C60893 - C60894 + C60895 - C60896 + C60897 - C60898) * C139731) *
               C139873) *
              C5270 +
          (((C14015 * C1570 - C13856 * C1741 + C14016 * C5273 - C13857 * C5397 +
             C14017 * C15623 - C13858 * C15912) *
                C54790 +
            (C14015 * C1579 - C13856 * C1746 + C14016 * C5278 - C13857 * C5401 +
             C14017 * C15628 - C13858 * C15915) *
                C139731) *
               C47134 +
           ((C64475 - C64476 + C64477 - C64478 + C64479 - C64480) * C54790 +
            (C64481 - C64482 + C64483 - C64484 + C64485 - C64486) * C139731) *
               C139873) *
              C5271 +
          (((C13856 * C5397 - C14015 * C5273 + C13857 * C15912 -
             C14016 * C15623 + C13858 * C21200 - C14017 * C21012) *
                C54790 +
            (C13856 * C5401 - C14015 * C5278 + C13857 * C15915 -
             C14016 * C15628 + C13858 * C21202 - C14017 * C21015) *
                C139731) *
               C47134 +
           ((C13856 * C13298 - C14015 * C13126 + C13857 * C18532 -
             C14016 * C18302 + C13858 * C67179 - C14017 * C67001) *
                C54790 +
            (C13856 * C13302 - C14015 * C13131 + C13857 * C18534 -
             C14016 * C18305 + C13858 * C67180 - C14017 * C67003) *
                C139731) *
               C139873) *
              C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q));
    d2eeyx[71] +=
        (-std::pow(Pi, 2.5) *
         (((C139731 * C114 - C54790 * C108) * C54842 +
           (C139731 * C354 - C54790 * C348) * C54786 +
           (C55513 - C55514) * C54843 + (C55515 - C55516) * C54787 +
           C57297 * C54844 + C57298 * C54788 + C57299 * C54845 +
           C57300 * C54789) *
              C139835 * C5270 +
          ((C54790 * C1570 - C139731 * C1578) * C54842 +
           (C54790 * C1829 - C139731 * C1834) * C54786 +
           (C57883 - C57884) * C54843 + (C57885 - C57886) * C54787 +
           (C57887 - C57888) * C54844 + (C57889 - C57890) * C54788 +
           (C57891 - C57892) * C54845 + (C57893 - C57894) * C54789) *
              C139835 * C5271 +
          ((C139731 * C5277 - C54790 * C5273) * C54842 +
           (C139731 * C5459 - C54790 * C5455) * C54786 +
           (C139731 * C13130 - C54790 * C13126) * C54843 +
           (C139731 * C13384 - C54790 * C13380) * C54787 +
           (C139731 * C13134 - C54790 * C13128) * C54844 +
           (C139731 * C13386 - C54790 * C13382) * C54788 +
           (C139731 * C59484 - C54790 * C59483) * C54845 +
           (C139731 * C59642 - C54790 * C59641) * C54789) *
              C139835 * C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C47131 * C114 - C47136 * C108 + C47132 * C116 - C47138 * C109 +
            C47133 * C118 - C47140 * C110) *
               C47216 +
           (C47131 * C354 - C47136 * C348 + C47132 * C355 - C47138 * C349 +
            C47133 * C356 - C47140 * C350) *
               C47134 +
           (C48294 - C48295 + C48296 - C48297 + C48298 - C48299) * C47217 +
           (C48300 - C48301 + C48302 - C48303 + C48304 - C48305) * C139873) *
              C139835 * C5270 +
          ((C47136 * C1570 - C47131 * C1578 + C47138 * C1569 - C47132 * C1576 +
            C47140 * C1568 - C47133 * C1574) *
               C47216 +
           (C47136 * C1829 - C47131 * C1834 + C47138 * C1830 - C47132 * C1835 +
            C47140 * C1831 - C47133 * C1836) *
               C47134 +
           (C51798 - C51799 + C51800 - C51801 + C51802 - C51803) * C47217 +
           (C51804 - C51805 + C51806 - C51807 + C51808 - C51809) * C139873) *
              C139835 * C5271 +
          ((C47131 * C5277 - C47136 * C5273 + C47132 * C5279 - C47138 * C5274 +
            C47133 * C5281 - C47140 * C5275) *
               C47216 +
           (C47131 * C5459 - C47136 * C5455 + C47132 * C5460 - C47138 * C5456 +
            C47133 * C5461 - C47140 * C5457) *
               C47134 +
           (C47131 * C13130 - C47136 * C13126 + C47132 * C13132 -
            C47138 * C13127 + C47133 * C14660 - C47140 * C14659) *
               C47217 +
           (C47131 * C13384 - C47136 * C13380 + C47132 * C13385 -
            C47138 * C13381 + C47133 * C14982 - C47140 * C14981) *
               C139873) *
              C139835 * C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C139731 * C114 - C54790 * C108) * C47216 +
            (C139731 * C354 - C54790 * C348) * C47134 +
            (C55513 - C55514) * C47217 + (C55515 - C55516) * C139873) *
               C13856 +
           ((C61976 - C61977) * C47216 + (C61978 - C61979) * C47134 +
            C64587 * C47217 + C64588 * C139873) *
               C13857 +
           C67270 * C13858) *
              C5270 +
          (((C61977 - C61976) * C47216 + (C61979 - C61978) * C47134 +
            C64591 * C47217 + C64592 * C139873) *
               C13856 +
           ((C61981 - C61980) * C47216 + (C61983 - C61982) * C47134 +
            C64593 * C47217 + C64594 * C139873) *
               C13857 +
           ((C67262 - C67263) * C47216 + (C67264 - C67265) * C47134 +
            (C64595 - C64596) * C47217 + (C64597 - C64598) * C139873) *
               C13858) *
              C5271 +
          (C67270 * C13856 +
           ((C67263 - C67262) * C47216 + (C67265 - C67264) * C47134 +
            (C64596 - C64595) * C47217 + (C64598 - C64597) * C139873) *
               C13857 +
           ((C139731 * C21014 - C54790 * C21012) * C47216 +
            (C139731 * C21280 - C54790 * C21278) * C47134 +
            (C139731 * C67002 - C54790 * C67001) * C47217 +
            (C139731 * C67256 - C54790 * C67255) * C139873) *
               C13858) *
              C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q));
    d2eeyy[71] +=
        (-std::pow(Pi, 2.5) *
         ((C54842 * C183 - C54996 * C108 - C54842 * C348 + C54786 * C411 +
           C54843 * C896 - C54997 * C813 - C54843 * C1072 + C54787 * C1151 +
           C54844 * C2974 - C54998 * C2908 - C54844 * C3090 + C54788 * C3148 +
           C54845 * C6792 - C54999 * C6627 - C54845 * C7032 + C54789 * C7169) *
              C139731 * C139835 * C5270 -
          (C54845 * C10528 - C54999 * C10394 - C54845 * C10740 +
           C54789 * C10858 + C54844 * C7863 - C54998 * C7754 - C54844 * C8091 +
           C54788 * C8196 + C54843 * C3520 - C54997 * C3438 - C54843 * C3668 +
           C54787 * C3742 + C54842 * C1653 - C54996 * C1570 - C54842 * C1829 +
           C54786 * C1908) *
              C139731 * C139835 * C5271 +
          (C54842 * C5339 - C54996 * C5273 - C54842 * C5455 + C54786 * C5513 +
           C54843 * C13216 - C54997 * C13126 - C54843 * C13380 +
           C54787 * C13462 + C54844 * C13217 - C54998 * C13128 -
           C54844 * C13382 + C54788 * C13463 + C54845 * C59537 -
           C54999 * C59483 - C54845 * C59641 + C54789 * C59693) *
              C139731 * C139835 * C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C47216 * C183 - C47470 * C108 - C47216 * C348 + C47134 * C411 +
            C47217 * C896 - C47471 * C813 - C47217 * C1072 + C139873 * C1151) *
               C47131 +
           (C47509 + C47510) * C47132 + C47515 * C47133) *
              C139835 * C5270 -
          ((C49390 + C49391) * C47133 + (C49392 + C49393) * C47132 +
           (C47217 * C3520 - C47471 * C3438 - C47217 * C3668 + C139873 * C3742 +
            C47216 * C1653 - C47470 * C1570 - C47216 * C1829 + C47134 * C1908) *
               C47131) *
              C139835 * C5271 +
          ((C47216 * C5339 - C47470 * C5273 - C47216 * C5455 + C47134 * C5513 +
            C47217 * C13216 - C47471 * C13126 - C47217 * C13380 +
            C139873 * C13462) *
               C47131 +
           (C47216 * C5340 - C47470 * C5274 - C47216 * C5456 + C47134 * C5514 +
            C47217 * C13218 - C47471 * C13127 - C47217 * C13381 +
            C139873 * C13464) *
               C47132 +
           (C47216 * C5341 - C47470 * C5275 - C47216 * C5457 + C47134 * C5515 +
            C47217 * C14761 - C47471 * C14659 - C47217 * C14981 +
            C139873 * C15081) *
               C47133) *
              C139835 * C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C47216 * C183 - C47470 * C108 - C47216 * C348 + C47134 * C411 +
            C47217 * C896 - C47471 * C813 - C47217 * C1072 + C139873 * C1151) *
               C139731 * C13856 +
           (C62126 + C62127) * C139731 * C13857 + C67355 * C13858) *
              C5270 -
          ((C67360 + C67361) * C139731 * C13858 +
           (C62129 + C62128) * C139731 * C13857 +
           (C62127 + C62126) * C139731 * C13856) *
              C5271 +
          (C67355 * C13856 + (C67361 + C67360) * C139731 * C13857 +
           (C47216 * C21109 - C47470 * C21012 - C47216 * C21278 +
            C47134 * C21373 + C47217 * C67086 - C47471 * C67001 -
            C47217 * C67255 + C139873 * C67344) *
               C139731 * C13858) *
              C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q));
    d2eeyz[71] +=
        (-std::pow(Pi, 2.5) *
         (((C139835 * C266 - C265 * C108) * C54842 +
           (C139835 * C495 - C265 * C348) * C54786 + (C6915 - C6916) * C54843 +
           (C7294 - C7295) * C54787 + C9790 * C54844 + C10047 * C54788 +
           C57235 * C54845 + C57407 * C54789) *
              C139731 * C5270 +
          ((C265 * C1570 - C139835 * C1741) * C54842 +
           (C265 * C1829 - C139835 * C1997) * C54786 +
           (C10635 - C10636) * C54843 + (C10961 - C10962) * C54787 +
           (C10639 - C10640) * C54844 + (C10963 - C10964) * C54788 +
           (C57811 - C57812) * C54845 + (C58029 - C58030) * C54789) *
              C139731 * C5271 +
          ((C139835 * C5397 - C265 * C5273) * C54842 +
           (C139835 * C5567 - C265 * C5455) * C54786 +
           (C139835 * C13298 - C265 * C13126) * C54843 +
           (C139835 * C13540 - C265 * C13380) * C54787 +
           (C139835 * C13300 - C265 * C13128) * C54844 +
           (C139835 * C13541 - C265 * C13382) * C54788 +
           (C139835 * C59589 - C265 * C59483) * C54845 +
           (C139835 * C59744 - C265 * C59641) * C54789) *
              C139731 * C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C139835 * C266 - C265 * C108) * C47216 +
            (C139835 * C495 - C265 * C348) * C47134 + (C6915 - C6916) * C47217 +
            (C7294 - C7295) * C139873) *
               C47131 +
           ((C279 - C280) * C47216 + (C502 - C503) * C47134 + C6919 * C47217 +
            C7298 * C139873) *
               C47132 +
           C47596 * C47133) *
              C5270 +
          (((C265 * C1570 - C139835 * C1741) * C47216 +
            (C265 * C1829 - C139835 * C1997) * C47134 +
            (C10635 - C10636) * C47217 + (C10961 - C10962) * C139873) *
               C47131 +
           ((C1752 - C1753) * C47216 + (C2003 - C2004) * C47134 +
            (C7986 - C7987) * C47217 + (C8321 - C8322) * C139873) *
               C47132 +
           ((C1756 - C1757) * C47216 + (C2005 - C2006) * C47134 +
            (C23820 - C23821) * C47217 + (C24146 - C24147) * C139873) *
               C47133) *
              C5271 +
          (((C139835 * C5397 - C265 * C5273) * C47216 +
            (C139835 * C5567 - C265 * C5455) * C47134 +
            (C139835 * C13298 - C265 * C13126) * C47217 +
            (C139835 * C13540 - C265 * C13380) * C139873) *
               C47131 +
           ((C139835 * C5398 - C265 * C5274) * C47216 +
            (C139835 * C5568 - C265 * C5456) * C47134 +
            (C139835 * C13299 - C265 * C13127) * C47217 +
            (C139835 * C13542 - C265 * C13381) * C139873) *
               C47132 +
           ((C139835 * C5399 - C265 * C5275) * C47216 +
            (C139835 * C5569 - C265 * C5457) * C47134 +
            (C139835 * C14869 - C265 * C14659) * C47217 +
            (C139835 * C15194 - C265 * C14981) * C139873) *
               C47133) *
              C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C13856 * C266 - C14015 * C108 + C13857 * C1741 - C14016 * C1570 +
            C13858 * C5397 - C14017 * C5273) *
               C47216 +
           (C13856 * C495 - C14015 * C348 + C13857 * C1997 - C14016 * C1829 +
            C13858 * C5567 - C14017 * C5455) *
               C47134 +
           (C60887 - C60888 + C60889 - C60890 + C60891 - C60892) * C47217 +
           (C61205 - C61206 + C61207 - C61208 + C61209 - C61210) * C139873) *
              C139731 * C5270 +
          ((C14015 * C1570 - C13856 * C1741 + C14016 * C5273 - C13857 * C5397 +
            C14017 * C15623 - C13858 * C15912) *
               C47216 +
           (C14015 * C1829 - C13856 * C1997 + C14016 * C5455 - C13857 * C5567 +
            C14017 * C16028 - C13858 * C16294) *
               C47134 +
           (C64475 - C64476 + C64477 - C64478 + C64479 - C64480) * C47217 +
           (C64825 - C64826 + C64827 - C64828 + C64829 - C64830) * C139873) *
              C139731 * C5271 +
          ((C13856 * C5397 - C14015 * C5273 + C13857 * C15912 -
            C14016 * C15623 + C13858 * C21200 - C14017 * C21012) *
               C47216 +
           (C13856 * C5567 - C14015 * C5455 + C13857 * C16294 -
            C14016 * C16028 + C13858 * C21459 - C14017 * C21278) *
               C47134 +
           (C13856 * C13298 - C14015 * C13126 + C13857 * C18532 -
            C14016 * C18302 + C13858 * C67179 - C14017 * C67001) *
               C47217 +
           (C13856 * C13540 - C14015 * C13380 + C13857 * C18862 -
            C14016 * C18634 + C13858 * C67435 - C14017 * C67255) *
               C139873) *
              C139731 * C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q));
    d2eezx[71] +=
        (-std::pow(Pi, 2.5) *
         ((((C139731 * C114 - C54790 * C108) * C265 +
            (C139731 * C573 - C54790 * C567) * C139835) *
               C54786 +
           ((C55513 - C55514) * C265 + (C55735 - C55736) * C139835) * C54787 +
           C57470 * C54788 + C57471 * C54789) *
              C5270 +
          (((C54790 * C1570 - C139731 * C1578) * C265 +
            (C54790 * C2074 - C139731 * C2079) * C139835) *
               C54786 +
           ((C57883 - C57884) * C265 + (C58099 - C58100) * C139835) * C54787 +
           ((C57887 - C57888) * C265 + (C58101 - C58102) * C139835) * C54788 +
           ((C57891 - C57892) * C265 + (C58103 - C58104) * C139835) * C54789) *
              C5271 +
          (((C139731 * C5277 - C54790 * C5273) * C265 +
            (C139731 * C5625 - C54790 * C5621) * C139835) *
               C54786 +
           ((C139731 * C13130 - C54790 * C13126) * C265 +
            (C139731 * C13622 - C54790 * C13618) * C139835) *
               C54787 +
           ((C139731 * C13134 - C54790 * C13128) * C265 +
            (C139731 * C13624 - C54790 * C13620) * C139835) *
               C54788 +
           ((C139731 * C59484 - C54790 * C59483) * C265 +
            (C139731 * C59796 - C54790 * C59795) * C139835) *
               C54789) *
              C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47131 * C114 - C47136 * C108 + C47132 * C116 - C47138 * C109 +
             C47133 * C118 - C47140 * C110) *
                C265 +
            (C47131 * C573 - C47136 * C567 + C47132 * C574 - C47138 * C568 +
             C47133 * C575 - C47140 * C569) *
                C139835) *
               C47134 +
           ((C48294 - C48295 + C48296 - C48297 + C48298 - C48299) * C265 +
            (C48640 - C48641 + C48642 - C48643 + C48644 - C48645) * C139835) *
               C139873) *
              C5270 +
          (((C47136 * C1570 - C47131 * C1578 + C47138 * C1569 - C47132 * C1576 +
             C47140 * C1568 - C47133 * C1574) *
                C265 +
            (C47136 * C2074 - C47131 * C2079 + C47138 * C2075 - C47132 * C2080 +
             C47140 * C2076 - C47133 * C2081) *
                C139835) *
               C47134 +
           ((C51798 - C51799 + C51800 - C51801 + C51802 - C51803) * C265 +
            (C52104 - C52105 + C52106 - C52107 + C52108 - C52109) * C139835) *
               C139873) *
              C5271 +
          (((C47131 * C5277 - C47136 * C5273 + C47132 * C5279 - C47138 * C5274 +
             C47133 * C5281 - C47140 * C5275) *
                C265 +
            (C47131 * C5625 - C47136 * C5621 + C47132 * C5626 - C47138 * C5622 +
             C47133 * C5627 - C47140 * C5623) *
                C139835) *
               C47134 +
           ((C47131 * C13130 - C47136 * C13126 + C47132 * C13132 -
             C47138 * C13127 + C47133 * C14660 - C47140 * C14659) *
                C265 +
            (C47131 * C13622 - C47136 * C13618 + C47132 * C13623 -
             C47138 * C13619 + C47133 * C15300 - C47140 * C15299) *
                C139835) *
               C139873) *
              C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C139731 * C114 - C54790 * C108) * C14015 +
            (C139731 * C573 - C54790 * C567) * C13856 +
            (C61976 - C61977) * C14016 + (C62328 - C62329) * C13857 +
            C67258 * C14017 + C67513 * C13858) *
               C47134 +
           ((C55513 - C55514) * C14015 + (C55735 - C55736) * C13856 +
            C64587 * C14016 + C64931 * C13857 + C64589 * C14017 +
            C64932 * C13858) *
               C139873) *
              C5270 +
          (((C61977 - C61976) * C14015 + (C62329 - C62328) * C13856 +
            (C61981 - C61980) * C14016 + (C62331 - C62330) * C13857 +
            (C67262 - C67263) * C14017 + (C67514 - C67515) * C13858) *
               C47134 +
           (C64591 * C14015 + C64933 * C13856 + C64593 * C14016 +
            C64934 * C13857 + (C64595 - C64596) * C14017 +
            (C64935 - C64936) * C13858) *
               C139873) *
              C5271 +
          ((C67258 * C14015 + C67513 * C13856 + (C67263 - C67262) * C14016 +
            (C67515 - C67514) * C13857 +
            (C139731 * C21014 - C54790 * C21012) * C14017 +
            (C139731 * C21537 - C54790 * C21535) * C13858) *
               C47134 +
           (C64589 * C14015 + C64932 * C13856 + (C64596 - C64595) * C14016 +
            (C64936 - C64935) * C13857 +
            (C139731 * C67002 - C54790 * C67001) * C14017 +
            (C139731 * C67511 - C54790 * C67510) * C13858) *
               C139873) *
              C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q));
    d2eezy[71] +=
        (-std::pow(Pi, 2.5) *
         (((C54786 * C183 - C54842 * C108 + C54787 * C896 - C54843 * C813 +
            C54788 * C2974 - C54844 * C2908 + C54789 * C6792 - C54845 * C6627) *
               C265 +
           (C54786 * C629 - C54842 * C567 + C54787 * C1393 - C54843 * C1317 +
            C54788 * C3314 - C54844 * C3256 + C54789 * C7521 - C54845 * C7401) *
               C139835) *
              C139731 * C5270 +
          ((C54842 * C1570 - C54786 * C1653 + C54843 * C3438 - C54787 * C3520 +
            C54844 * C7754 - C54788 * C7863 + C54845 * C10394 -
            C54789 * C10528) *
               C265 +
           (C54842 * C2074 - C54786 * C2150 + C54843 * C3882 - C54787 * C3956 +
            C54844 * C8422 - C54788 * C8526 + C54845 * C11062 -
            C54789 * C11172) *
               C139835) *
              C139731 * C5271 +
          ((C54786 * C5339 - C54842 * C5273 + C54787 * C13216 -
            C54843 * C13126 + C54788 * C13217 - C54844 * C13128 +
            C54789 * C59537 - C54845 * C59483) *
               C265 +
           (C54786 * C5679 - C54842 * C5621 + C54787 * C13700 -
            C54843 * C13618 + C54788 * C13701 - C54844 * C13620 +
            C54789 * C59847 - C54845 * C59795) *
               C139835) *
              C139731 * C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47134 * C183 - C47216 * C108 + C139873 * C896 - C47217 * C813) *
                C265 +
            (C47134 * C629 - C47216 * C567 + C139873 * C1393 - C47217 * C1317) *
                C139835) *
               C47131 +
           ((C47219 - C47220 + C47221 - C47222) * C265 +
            (C47745 - C47746 + C47747 - C47748) * C139835) *
               C47132 +
           C47762 * C47133) *
              C5270 +
          (((C47216 * C1570 - C47134 * C1653 + C47217 * C3438 -
             C139873 * C3520) *
                C265 +
            (C47216 * C2074 - C47134 * C2150 + C47217 * C3882 -
             C139873 * C3956) *
                C139835) *
               C47131 +
           ((C49056 - C49057 + C49058 - C49059) * C265 +
            (C49688 - C49689 + C49690 - C49691) * C139835) *
               C47132 +
           ((C49064 - C49065 + C49066 - C49067) * C265 +
            (C49692 - C49693 + C49694 - C49695) * C139835) *
               C47133) *
              C5271 +
          (((C47134 * C5339 - C47216 * C5273 + C139873 * C13216 -
             C47217 * C13126) *
                C265 +
            (C47134 * C5679 - C47216 * C5621 + C139873 * C13700 -
             C47217 * C13618) *
                C139835) *
               C47131 +
           ((C47134 * C5340 - C47216 * C5274 + C139873 * C13218 -
             C47217 * C13127) *
                C265 +
            (C47134 * C5680 - C47216 * C5622 + C139873 * C13702 -
             C47217 * C13619) *
                C139835) *
               C47132 +
           ((C47134 * C5341 - C47216 * C5275 + C139873 * C14761 -
             C47217 * C14659) *
                C265 +
            (C47134 * C5681 - C47216 * C5623 + C139873 * C15399 -
             C47217 * C15299) *
                C139835) *
               C47133) *
              C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C47134 * C183 - C47216 * C108 + C139873 * C896 - C47217 * C813) *
               C14015 +
           (C47134 * C629 - C47216 * C567 + C139873 * C1393 - C47217 * C1317) *
               C13856 +
           (C61756 - C61757 + C61758 - C61759) * C14016 +
           (C62434 - C62435 + C62436 - C62437) * C13857 + C67101 * C14017 +
           C67597 * C13858) *
              C139731 * C5270 +
          ((C61757 - C61756 + C61759 - C61758) * C14015 +
           (C62435 - C62434 + C62437 - C62436) * C13856 +
           (C61765 - C61764 + C61767 - C61766) * C14016 +
           (C62439 - C62438 + C62441 - C62440) * C13857 +
           (C67093 - C67094 + C67095 - C67096) * C14017 +
           (C67593 - C67594 + C67595 - C67596) * C13858) *
              C139731 * C5271 +
          (C67101 * C14015 + C67597 * C13856 +
           (C67094 - C67093 + C67096 - C67095) * C14016 +
           (C67594 - C67593 + C67596 - C67595) * C13857 +
           (C47134 * C21109 - C47216 * C21012 + C139873 * C67086 -
            C47217 * C67001) *
               C14017 +
           (C47134 * C21620 - C47216 * C21535 + C139873 * C67589 -
            C47217 * C67510) *
               C13858) *
              C139731 * C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q));
    d2eezz[71] +=
        (-std::pow(Pi, 2.5) *
         (((C265 * C266 - C701 * C108 - C265 * C567 + C139835 * C702) * C54786 +
           C7652 * C54787 + C7653 * C54788 + C10296 * C54789) *
              C139731 * C5270 -
          (C58245 * C54789 + C11287 * C54788 + C11288 * C54787 +
           (C265 * C1741 - C701 * C1570 - C265 * C2074 + C139835 * C2230) *
               C54786) *
              C139731 * C5271 +
          ((C265 * C5397 - C701 * C5273 - C265 * C5621 + C139835 * C5733) *
               C54786 +
           (C265 * C13298 - C701 * C13126 - C265 * C13618 + C139835 * C13778) *
               C54787 +
           (C265 * C13300 - C701 * C13128 - C265 * C13620 + C139835 * C13779) *
               C54788 +
           (C265 * C59589 - C701 * C59483 - C265 * C59795 + C139835 * C59898) *
               C54789) *
              C139731 * C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C265 * C266 - C701 * C108 - C265 * C567 + C139835 * C702) *
                C47134 +
            C7652 * C139873) *
               C47131 +
           (C47837 + C47838) * C47132 + C47843 * C47133) *
              C5270 -
          ((C49794 + C49795) * C47133 + (C49796 + C49797) * C47132 +
           (C11288 * C139873 +
            (C265 * C1741 - C701 * C1570 - C265 * C2074 + C139835 * C2230) *
                C47134) *
               C47131) *
              C5271 +
          (((C265 * C5397 - C701 * C5273 - C265 * C5621 + C139835 * C5733) *
                C47134 +
            (C265 * C13298 - C701 * C13126 - C265 * C13618 + C139835 * C13778) *
                C139873) *
               C47131 +
           ((C265 * C5398 - C701 * C5274 - C265 * C5622 + C139835 * C5734) *
                C47134 +
            (C265 * C13299 - C701 * C13127 - C265 * C13619 + C139835 * C13780) *
                C139873) *
               C47132 +
           ((C265 * C5399 - C701 * C5275 - C265 * C5623 + C139835 * C5735) *
                C47134 +
            (C265 * C14869 - C701 * C14659 - C265 * C15299 + C139835 * C15502) *
                C139873) *
               C47133) *
              C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C14015 * C266 - C14516 * C108 - C14015 * C567 + C13856 * C702 +
            C14016 * C1741 - C14517 * C1570 - C14016 * C2074 + C13857 * C2230 +
            C14017 * C5397 - C14518 * C5273 - C14017 * C5621 + C13858 * C5733) *
               C47134 +
           (C61529 + C61530 + C61531) * C139873) *
              C139731 * C5270 -
          ((C65161 + C65162 + C65163) * C139873 +
           (C14017 * C15912 - C14518 * C15623 - C14017 * C16401 +
            C13858 * C16633 + C14016 * C5397 - C14517 * C5273 - C14016 * C5621 +
            C13857 * C5733 + C14015 * C1741 - C14516 * C1570 - C14015 * C2074 +
            C13856 * C2230) *
               C47134) *
              C139731 * C5271 +
          ((C14015 * C5397 - C14516 * C5273 - C14015 * C5621 + C13856 * C5733 +
            C14016 * C15912 - C14517 * C15623 - C14016 * C16401 +
            C13857 * C16633 + C14017 * C21200 - C14518 * C21012 -
            C14017 * C21535 + C13858 * C21699) *
               C47134 +
           (C14015 * C13298 - C14516 * C13126 - C14015 * C13618 +
            C13856 * C13778 + C14016 * C18532 - C14517 * C18302 -
            C14016 * C18962 + C13857 * C19172 + C14017 * C67179 -
            C14518 * C67001 - C14017 * C67510 + C13858 * C67671) *
               C139873) *
              C139731 * C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q));
    d2eexx[72] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C137755 * C114 - C67752 * C108 - C137755 * C115 + C139967 * C126 +
             C137748 * C116 - C67754 * C109 - C137748 * C117 + C139736 * C127) *
                C139984 +
            (C137755 * C1578 - C67752 * C1570 - C137755 * C1579 +
             C139967 * C1585 + C137748 * C1576 - C67754 * C1569 -
             C137748 * C1577 + C139736 * C1584) *
                C139899) *
               C47134 +
           ((C68584 + C68585) * C139984 + (C72110 + C72109) * C139899) *
               C139873) *
              C139809 * C139792 * C97 -
          (((C137748 * C3446 - C67754 * C3440 - C137748 * C3447 +
             C139736 * C3452 + C137755 * C3444 - C67752 * C3439 -
             C137755 * C3445 + C139967 * C3451) *
                C139899 +
            (C68589 + C68588) * C139984) *
               C139873 +
           ((C137748 * C1574 - C67754 * C1568 - C137748 * C1575 +
             C139736 * C1583 + C137755 * C1576 - C67752 * C1569 -
             C137755 * C1577 + C139967 * C1584) *
                C139899 +
            (C137748 * C118 - C67754 * C110 - C137748 * C119 + C139736 * C128 +
             C137755 * C116 - C67752 * C109 - C137755 * C117 + C139967 * C127) *
                C139984) *
               C47134) *
              C139809 * C139792 * C98 +
          (((C137755 * C118 - C67752 * C110 - C137755 * C119 + C139967 * C128 +
             C137748 * C120 - C67754 * C111 - C137748 * C121 + C139736 * C129) *
                C139984 +
            (C137755 * C1574 - C67752 * C1568 - C137755 * C1575 +
             C139967 * C1583 + C137748 * C1572 - C67754 * C1567 -
             C137748 * C1573 + C139736 * C1582) *
                C139899) *
               C47134 +
           ((C137755 * C817 - C67752 * C811 - C137755 * C818 + C139967 * C826 +
             C137748 * C815 - C67754 * C810 - C137748 * C816 + C139736 * C825) *
                C139984 +
            (C137755 * C3446 - C67752 * C3440 - C137755 * C3447 +
             C139967 * C3452 + C137748 * C3448 - C67754 * C3441 -
             C137748 * C3449 + C139736 * C3453) *
                C139899) *
               C139873) *
              C139809 * C139792 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eexy[72] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47134 * C183 - C47216 * C108 + C139873 * C896 - C47217 * C813) *
                C137755 +
            (C47134 * C189 - C47216 * C115 + C139873 * C901 - C47217 * C822) *
                C139967 +
            (C47219 - C47220 + C47221 - C47222) * C137748 +
            (C47223 - C47224 + C47225 - C47226) * C139736) *
               C139984 +
           ((C61756 - C61757 + C61758 - C61759) * C137755 +
            (C61760 - C61761 + C61762 - C61763) * C139967 +
            (C49057 - C49056 + C49059 - C49058) * C137748 +
            (C49061 - C49060 + C49063 - C49062) * C139736) *
               C139899) *
              C139809 * C139792 * C97 +
          (((C47220 - C47219 + C47222 - C47221) * C137755 +
            (C47224 - C47223 + C47226 - C47225) * C139967 +
            (C47228 - C47227 + C47230 - C47229) * C137748 +
            (C47232 - C47231 + C47234 - C47233) * C139736) *
               C139984 +
           ((C49056 - C49057 + C49058 - C49059) * C137755 +
            (C49060 - C49061 + C49062 - C49063) * C139967 +
            (C49064 - C49065 + C49066 - C49067) * C137748 +
            (C49068 - C49069 + C49070 - C49071) * C139736) *
               C139899) *
              C139809 * C139792 * C98 +
          ((C47247 * C137755 + C47248 * C139967 +
            (C47236 - C47235 + C47238 - C47237) * C137748 +
            (C47240 - C47239 + C47242 - C47241) * C139736) *
               C139984 +
           ((C49065 - C49064 + C49067 - C49066) * C137755 +
            (C49069 - C49068 + C49071 - C49070) * C139967 +
            (C47134 * C1656 - C47216 * C1567 + C139873 * C3523 -
             C47217 * C3441) *
                C137748 +
            (C47134 * C1661 - C47216 * C1573 + C139873 * C3527 -
             C47217 * C3449) *
                C139736) *
               C139899) *
              C139809 * C139792 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eexz[72] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C139984 * C266 - C29624 * C108 + C139899 * C1741 -
                       C29625 * C1570) *
                          C137755 +
                      (C139984 * C272 - C29624 * C115 + C139899 * C1746 -
                       C29625 * C1579) *
                          C139967 +
                      (C29627 - C29628 + C29629 - C29630) * C137748 +
                      (C29631 - C29632 + C29633 - C29634) * C139736) *
                         C47134 +
                     ((C38340 - C38341 + C38342 - C38343) * C137755 +
                      (C38344 - C38345 + C38346 - C38347) * C139967 +
                      C38364 * C137748 + C38365 * C139736) *
                         C139873) *
                        C139809 * C139792 * C97 +
                    (((C29628 - C29627 + C29630 - C29629) * C137755 +
                      (C29632 - C29631 + C29634 - C29633) * C139967 +
                      (C29636 - C29635 + C29638 - C29637) * C137748 +
                      (C29640 - C29639 + C29642 - C29641) * C139736) *
                         C47134 +
                     (C38366 * C137755 + C38367 * C139967 +
                      (C30479 - C30480 + C30481 - C30482) * C137748 +
                      (C30483 - C30484 + C30485 - C30486) * C139736) *
                         C139873) *
                        C139809 * C139792 * C98 +
                    ((C29655 * C137755 + C29656 * C139967 +
                      (C29644 - C29643 + C29646 - C29645) * C137748 +
                      (C29648 - C29647 + C29650 - C29649) * C139736) *
                         C47134 +
                     ((C30480 - C30479 + C30482 - C30481) * C137755 +
                      (C30484 - C30483 + C30486 - C30485) * C139967 +
                      (C139984 * C987 - C29624 * C810 + C139899 * C3597 -
                       C29625 * C3441) *
                          C137748 +
                      (C139984 * C992 - C29624 * C816 + C139899 * C3601 -
                       C29625 * C3449) *
                          C139736) *
                         C139873) *
                        C139809 * C139792 * C99)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[72] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C139967 * C114 - C137755 * C108 + C139736 * C116 -
                       C137748 * C109) *
                          C47216 +
                      (C139967 * C354 - C137755 * C348 + C139736 * C355 -
                       C137748 * C349) *
                          C47134 +
                      (C68898 - C68899 + C68900 - C68901) * C47217 +
                      (C68902 - C68903 + C68904 - C68905) * C139873) *
                         C139984 +
                     ((C139967 * C1578 - C137755 * C1570 + C139736 * C1576 -
                       C137748 * C1569) *
                          C47216 +
                      (C139967 * C1834 - C137755 * C1829 + C139736 * C1835 -
                       C137748 * C1830) *
                          C47134 +
                      (C72406 - C72405 + C72408 - C72407) * C47217 +
                      (C72410 - C72409 + C72412 - C72411) * C139873) *
                         C139899) *
                        C139809 * C139792 * C97 +
                    (((C137755 * C109 - C139967 * C116 + C137748 * C110 -
                       C139736 * C118) *
                          C47216 +
                      (C137755 * C349 - C139967 * C355 + C137748 * C350 -
                       C139736 * C356) *
                          C47134 +
                      (C68914 - C68915 + C68916 - C68917) * C47217 +
                      (C68918 - C68919 + C68920 - C68921) * C139873) *
                         C139984 +
                     ((C137755 * C1569 - C139967 * C1576 + C137748 * C1568 -
                       C139736 * C1574) *
                          C47216 +
                      (C137755 * C1830 - C139967 * C1835 + C137748 * C1831 -
                       C139736 * C1836) *
                          C47134 +
                      (C137755 * C3439 - C139967 * C3444 + C137748 * C3440 -
                       C139736 * C3446) *
                          C47217 +
                      (C137755 * C3669 - C139967 * C3673 + C137748 * C3670 -
                       C139736 * C3674) *
                          C139873) *
                         C139899) *
                        C139809 * C139792 * C98 +
                    (((C139967 * C118 - C137755 * C110 + C139736 * C120 -
                       C137748 * C111) *
                          C47216 +
                      (C139967 * C356 - C137755 * C350 + C139736 * C357 -
                       C137748 * C351) *
                          C47134 +
                      (C139967 * C817 - C137755 * C811 + C139736 * C815 -
                       C137748 * C810) *
                          C47217 +
                      (C139967 * C1079 - C137755 * C1074 + C139736 * C1080 -
                       C137748 * C1075) *
                          C139873) *
                         C139984 +
                     ((C139967 * C1574 - C137755 * C1568 + C139736 * C1572 -
                       C137748 * C1567) *
                          C47216 +
                      (C139967 * C1836 - C137755 * C1831 + C139736 * C1837 -
                       C137748 * C1832) *
                          C47134 +
                      (C139967 * C3446 - C137755 * C3440 + C139736 * C3448 -
                       C137748 * C3441) *
                          C47217 +
                      (C139967 * C3674 - C137755 * C3670 + C139736 * C3675 -
                       C137748 * C3671) *
                          C139873) *
                         C139899) *
                        C139809 * C139792 * C99)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[72] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47216 * C183 - C47470 * C108 - C47216 * C348 + C47134 * C411 +
             C47217 * C896 - C47471 * C813 - C47217 * C1072 + C139873 * C1151) *
                C139967 +
            (C47509 + C47510) * C139736) *
               C139984 +
           ((C62126 + C62127) * C139967 + (C49393 + C49392) * C139736) *
               C139899) *
              C139809 * C139792 * C97 -
          (((C49390 + C49391) * C139736 + (C49392 + C49393) * C139967) *
               C139899 +
           ((C47512 + C47511) * C139736 + (C47510 + C47509) * C139967) *
               C139984) *
              C139809 * C139792 * C98 +
          ((C47515 * C139967 + (C47514 + C47513) * C139736) * C139984 +
           ((C49391 + C49390) * C139967 +
            (C47216 * C1656 - C47470 * C1567 - C47216 * C1832 + C47134 * C1905 +
             C47217 * C3523 - C47471 * C3441 - C47217 * C3671 +
             C139873 * C3745) *
                C139736) *
               C139899) *
              C139809 * C139792 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[72] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C139984 * C266 - C29624 * C108 + C139899 * C1741 -
                       C29625 * C1570) *
                          C47216 +
                      (C139984 * C495 - C29624 * C348 + C139899 * C1997 -
                       C29625 * C1829) *
                          C47134 +
                      (C38340 - C38341 + C38342 - C38343) * C47217 +
                      (C38780 - C38781 + C38782 - C38783) * C139873) *
                         C139967 +
                     ((C29627 - C29628 + C29629 - C29630) * C47216 +
                      (C29879 - C29880 + C29881 - C29882) * C47134 +
                      C38364 * C47217 + C38792 * C139873) *
                         C139736) *
                        C139809 * C139792 * C97 +
                    (((C29628 - C29627 + C29630 - C29629) * C47216 +
                      (C29880 - C29879 + C29882 - C29881) * C47134 +
                      C38366 * C47217 + C38793 * C139873) *
                         C139967 +
                     ((C29636 - C29635 + C29638 - C29637) * C47216 +
                      (C29885 - C29884 + C29887 - C29886) * C47134 +
                      (C30479 - C30480 + C30481 - C30482) * C47217 +
                      (C30792 - C30793 + C30794 - C30795) * C139873) *
                         C139736) *
                        C139809 * C139792 * C98 +
                    ((C29655 * C47216 + C29894 * C47134 +
                      (C30480 - C30479 + C30482 - C30481) * C47217 +
                      (C30793 - C30792 + C30795 - C30794) * C139873) *
                         C139967 +
                     ((C29644 - C29643 + C29646 - C29645) * C47216 +
                      (C29889 - C29888 + C29891 - C29890) * C47134 +
                      (C139984 * C987 - C29624 * C810 + C139899 * C3597 -
                       C29625 * C3441) *
                          C47217 +
                      (C139984 * C1243 - C29624 * C1075 + C139899 * C3815 -
                       C29625 * C3671) *
                          C139873) *
                         C139736) *
                        C139809 * C139792 * C99)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[72] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C139967 * C114 - C137755 * C108 + C139736 * C116 -
                       C137748 * C109) *
                          C29624 +
                      (C139967 * C573 - C137755 * C567 + C139736 * C574 -
                       C137748 * C568) *
                          C139984 +
                      (C139967 * C1578 - C137755 * C1570 + C139736 * C1576 -
                       C137748 * C1569) *
                          C29625 +
                      (C139967 * C2079 - C137755 * C2074 + C139736 * C2080 -
                       C137748 * C2075) *
                          C139899) *
                         C47134 +
                     ((C68898 - C68899 + C68900 - C68901) * C29624 +
                      (C69245 - C69246 + C69247 - C69248) * C139984 +
                      (C72406 - C72405 + C72408 - C72407) * C29625 +
                      (C72716 - C72715 + C72718 - C72717) * C139899) *
                         C139873) *
                        C139809 * C139792 * C97 +
                    (((C137755 * C109 - C139967 * C116 + C137748 * C110 -
                       C139736 * C118) *
                          C29624 +
                      (C137755 * C568 - C139967 * C574 + C137748 * C569 -
                       C139736 * C575) *
                          C139984 +
                      (C137755 * C1569 - C139967 * C1576 + C137748 * C1568 -
                       C139736 * C1574) *
                          C29625 +
                      (C137755 * C2075 - C139967 * C2080 + C137748 * C2076 -
                       C139736 * C2081) *
                          C139899) *
                         C47134 +
                     ((C68914 - C68915 + C68916 - C68917) * C29624 +
                      (C69253 - C69254 + C69255 - C69256) * C139984 +
                      (C137755 * C3439 - C139967 * C3444 + C137748 * C3440 -
                       C139736 * C3446) *
                          C29625 +
                      (C137755 * C3883 - C139967 * C3887 + C137748 * C3884 -
                       C139736 * C3888) *
                          C139899) *
                         C139873) *
                        C139809 * C139792 * C98 +
                    (((C139967 * C118 - C137755 * C110 + C139736 * C120 -
                       C137748 * C111) *
                          C29624 +
                      (C139967 * C575 - C137755 * C569 + C139736 * C576 -
                       C137748 * C570) *
                          C139984 +
                      (C139967 * C1574 - C137755 * C1568 + C139736 * C1572 -
                       C137748 * C1567) *
                          C29625 +
                      (C139967 * C2081 - C137755 * C2076 + C139736 * C2082 -
                       C137748 * C2077) *
                          C139899) *
                         C47134 +
                     ((C139967 * C817 - C137755 * C811 + C139736 * C815 -
                       C137748 * C810) *
                          C29624 +
                      (C139967 * C1324 - C137755 * C1319 + C139736 * C1325 -
                       C137748 * C1320) *
                          C139984 +
                      (C139967 * C3446 - C137755 * C3440 + C139736 * C3448 -
                       C137748 * C3441) *
                          C29625 +
                      (C139967 * C3888 - C137755 * C3884 + C139736 * C3889 -
                       C137748 * C3885) *
                          C139899) *
                         C139873) *
                        C139809 * C139792 * C99)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[72] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47134 * C183 - C47216 * C108 + C139873 * C896 - C47217 * C813) *
                C29624 +
            (C47134 * C629 - C47216 * C567 + C139873 * C1393 - C47217 * C1317) *
                C139984 +
            (C61756 - C61757 + C61758 - C61759) * C29625 +
            (C62434 - C62435 + C62436 - C62437) * C139899) *
               C139967 +
           ((C47219 - C47220 + C47221 - C47222) * C29624 +
            (C47745 - C47746 + C47747 - C47748) * C139984 +
            (C49057 - C49056 + C49059 - C49058) * C29625 +
            (C49689 - C49688 + C49691 - C49690) * C139899) *
               C139736) *
              C139809 * C139792 * C97 +
          (((C47220 - C47219 + C47222 - C47221) * C29624 +
            (C47746 - C47745 + C47748 - C47747) * C139984 +
            (C49056 - C49057 + C49058 - C49059) * C29625 +
            (C49688 - C49689 + C49690 - C49691) * C139899) *
               C139967 +
           ((C47228 - C47227 + C47230 - C47229) * C29624 +
            (C47751 - C47750 + C47753 - C47752) * C139984 +
            (C49064 - C49065 + C49066 - C49067) * C29625 +
            (C49692 - C49693 + C49694 - C49695) * C139899) *
               C139736) *
              C139809 * C139792 * C98 +
          ((C47247 * C29624 + C47760 * C139984 +
            (C49065 - C49064 + C49067 - C49066) * C29625 +
            (C49693 - C49692 + C49695 - C49694) * C139899) *
               C139967 +
           ((C47236 - C47235 + C47238 - C47237) * C29624 +
            (C47755 - C47754 + C47757 - C47756) * C139984 +
            (C47134 * C1656 - C47216 * C1567 + C139873 * C3523 -
             C47217 * C3441) *
                C29625 +
            (C47134 * C2153 - C47216 * C2077 + C139873 * C3959 -
             C47217 * C3885) *
                C139899) *
               C139736) *
              C139809 * C139792 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eezz[72] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C29624 * C266 - C30126 * C108 - C29624 * C567 + C139984 * C702 +
             C29625 * C1741 - C30127 * C1570 - C29625 * C2074 +
             C139899 * C2230) *
                C47134 +
            (C39218 + C39219) * C139873) *
               C139967 +
           ((C30165 + C30166) * C47134 + C39200 * C139873) * C139736) *
              C139809 * C139792 * C97 -
          (((C31116 + C31117) * C139873 + (C30168 + C30167) * C47134) *
               C139736 +
           (C39209 * C139873 + (C30166 + C30165) * C47134) * C139967) *
              C139809 * C139792 * C98 +
          ((C30171 * C47134 + (C31117 + C31116) * C139873) * C139967 +
           ((C30170 + C30169) * C47134 +
            (C29624 * C987 - C30126 * C810 - C29624 * C1320 + C139984 * C1470 +
             C29625 * C3597 - C30127 * C3441 - C29625 * C3885 +
             C139899 * C4029) *
                C139873) *
               C139736) *
              C139809 * C139792 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eexx[73] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C137755 * C114 - C67752 * C108 - C137755 * C115 + C139967 * C126 +
              C137748 * C116 - C67754 * C109 - C137748 * C117 +
              C139736 * C127) *
                 C139984 +
             (C137755 * C1578 - C67752 * C1570 - C137755 * C1579 +
              C139967 * C1585 + C137748 * C1576 - C67754 * C1569 -
              C137748 * C1577 + C139736 * C1584) *
                 C139899) *
                C47134 +
            ((C68584 + C68585) * C139984 + (C72110 + C72109) * C139899) *
                C139873) *
               C139809 * C806 -
           (((C72107 + C72108) * C139899 + (C68587 + C68586) * C139984) *
                C139873 +
            ((C72109 + C72110) * C139899 + (C68585 + C68584) * C139984) *
                C47134) *
               C139809 * C140000) *
              C808 +
          ((((C68588 + C68589) * C139984 + (C76373 + C76374) * C139899) *
                C47134 +
            ((C68590 + C68591) * C139984 +
             (C137755 * C7756 - C67752 * C7753 - C137755 * C7757 +
              C139967 * C7762 + C137748 * C7760 - C67754 * C7755 -
              C137748 * C7761 + C139736 * C7764) *
                 C139899) *
                C139873) *
               C139809 * C140000 -
           (((C76374 + C76373) * C139899 + (C68589 + C68588) * C139984) *
                C139873 +
            ((C137748 * C1574 - C67754 * C1568 - C137748 * C1575 +
              C139736 * C1583 + C137755 * C1576 - C67752 * C1569 -
              C137755 * C1577 + C139967 * C1584) *
                 C139899 +
             (C137748 * C118 - C67754 * C110 - C137748 * C119 + C139736 * C128 +
              C137755 * C116 - C67752 * C109 - C137755 * C117 +
              C139967 * C127) *
                 C139984) *
                C47134) *
               C139809 * C806) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexy[73] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47134 * C183 - C47216 * C108 + C139873 * C896 - C47217 * C813) *
                 C137755 +
             (C47134 * C189 - C47216 * C115 + C139873 * C901 - C47217 * C822) *
                 C139967 +
             (C47219 - C47220 + C47221 - C47222) * C137748 +
             (C47223 - C47224 + C47225 - C47226) * C139736) *
                C139984 +
            ((C61756 - C61757 + C61758 - C61759) * C137755 +
             (C61760 - C61761 + C61762 - C61763) * C139967 +
             (C49057 - C49056 + C49059 - C49058) * C137748 +
             (C49061 - C49060 + C49063 - C49062) * C139736) *
                C139899) *
               C139809 * C806 +
           (((C47216 * C813 - C47134 * C896 + C47217 * C2908 -
              C139873 * C2974) *
                 C137755 +
             (C47216 * C822 - C47134 * C901 + C47217 * C2913 -
              C139873 * C2978) *
                 C139967 +
             (C48082 - C48083 + C48084 - C48085) * C137748 +
             (C48086 - C48087 + C48088 - C48089) * C139736) *
                C139984 +
            ((C64359 - C64360 + C64361 - C64362) * C137755 +
             (C64363 - C64364 + C64365 - C64366) * C139967 +
             (C76505 - C76506 + C76507 - C76508) * C137748 +
             (C76509 - C76510 + C76511 - C76512) * C139736) *
                C139899) *
               C139809 * C140000) *
              C808 +
          ((((C47220 - C47219 + C47222 - C47221) * C137755 +
             (C47224 - C47223 + C47226 - C47225) * C139967 +
             (C47228 - C47227 + C47230 - C47229) * C137748 +
             (C47232 - C47231 + C47234 - C47233) * C139736) *
                C139984 +
            ((C49056 - C49057 + C49058 - C49059) * C137755 +
             (C49060 - C49061 + C49062 - C49063) * C139967 +
             (C49064 - C49065 + C49066 - C49067) * C137748 +
             (C49068 - C49069 + C49070 - C49071) * C139736) *
                C139899) *
               C139809 * C806 +
           (((C48083 - C48082 + C48085 - C48084) * C137755 +
             (C48087 - C48086 + C48089 - C48088) * C139967 +
             (C48091 - C48090 + C48093 - C48092) * C137748 +
             (C48095 - C48094 + C48097 - C48096) * C139736) *
                C139984 +
            ((C76506 - C76505 + C76508 - C76507) * C137755 +
             (C76510 - C76509 + C76512 - C76511) * C139967 +
             (C47134 * C3522 - C47216 * C3440 + C139873 * C7865 -
              C47217 * C7755) *
                 C137748 +
             (C47134 * C3526 - C47216 * C3447 + C139873 * C7868 -
              C47217 * C7761) *
                 C139736) *
                C139899) *
               C139809 * C140000) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexz[73] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C139984 * C266 - C29624 * C108 + C139899 * C1741 -
                        C29625 * C1570) *
                           C137755 +
                       (C139984 * C272 - C29624 * C115 + C139899 * C1746 -
                        C29625 * C1579) *
                           C139967 +
                       (C29627 - C29628 + C29629 - C29630) * C137748 +
                       (C29631 - C29632 + C29633 - C29634) * C139736) *
                          C47134 +
                      ((C38340 - C38341 + C38342 - C38343) * C137755 +
                       (C38344 - C38345 + C38346 - C38347) * C139967 +
                       C38364 * C137748 + C38365 * C139736) *
                          C139873) *
                         C139809 * C806 +
                     (((C38341 - C38340 + C38343 - C38342) * C137755 +
                       (C38345 - C38344 + C38347 - C38346) * C139967 +
                       C38366 * C137748 + C38367 * C139736) *
                          C47134 +
                      ((C41954 - C41955 + C41956 - C41957) * C137755 +
                       (C41958 - C41959 + C41960 - C41961) * C139967 +
                       (C38356 - C38357 + C38358 - C38359) * C137748 +
                       (C38360 - C38361 + C38362 - C38363) * C139736) *
                          C139873) *
                         C139809 * C140000) *
                        C808 +
                    ((((C29628 - C29627 + C29630 - C29629) * C137755 +
                       (C29632 - C29631 + C29634 - C29633) * C139967 +
                       (C29636 - C29635 + C29638 - C29637) * C137748 +
                       (C29640 - C29639 + C29642 - C29641) * C139736) *
                          C47134 +
                      (C38366 * C137755 + C38367 * C139967 +
                       (C30479 - C30480 + C30481 - C30482) * C137748 +
                       (C30483 - C30484 + C30485 - C30486) * C139736) *
                          C139873) *
                         C139809 * C806 +
                     ((C38364 * C137755 + C38365 * C139967 +
                       (C30480 - C30479 + C30482 - C30481) * C137748 +
                       (C30484 - C30483 + C30486 - C30485) * C139736) *
                          C47134 +
                      ((C38357 - C38356 + C38359 - C38358) * C137755 +
                       (C38361 - C38360 + C38363 - C38362) * C139967 +
                       (C139984 * C3034 - C29624 * C2910 + C139899 * C7981 -
                        C29625 * C7755) *
                           C137748 +
                       (C139984 * C3038 - C29624 * C2917 + C139899 * C7984 -
                        C29625 * C7761) *
                           C139736) *
                          C139873) *
                         C139809 * C140000) *
                        C139998)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[73] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C139967 * C114 - C137755 * C108 + C139736 * C116 -
                        C137748 * C109) *
                           C47216 +
                       (C139967 * C354 - C137755 * C348 + C139736 * C355 -
                        C137748 * C349) *
                           C47134 +
                       (C68898 - C68899 + C68900 - C68901) * C47217 +
                       (C68902 - C68903 + C68904 - C68905) * C139873) *
                          C139984 +
                      ((C139967 * C1578 - C137755 * C1570 + C139736 * C1576 -
                        C137748 * C1569) *
                           C47216 +
                       (C139967 * C1834 - C137755 * C1829 + C139736 * C1835 -
                        C137748 * C1830) *
                           C47134 +
                       (C72406 - C72405 + C72408 - C72407) * C47217 +
                       (C72410 - C72409 + C72412 - C72411) * C139873) *
                          C139899) *
                         C139809 * C806 +
                     (((C68899 - C68898 + C68901 - C68900) * C47216 +
                       (C68903 - C68902 + C68905 - C68904) * C47134 +
                       (C68907 - C68906 + C68909 - C68908) * C47217 +
                       (C68911 - C68910 + C68913 - C68912) * C139873) *
                          C139984 +
                      ((C72405 - C72406 + C72407 - C72408) * C47216 +
                       (C72409 - C72410 + C72411 - C72412) * C47134 +
                       (C72413 - C72414 + C72415 - C72416) * C47217 +
                       (C72417 - C72418 + C72419 - C72420) * C139873) *
                          C139899) *
                         C139809 * C140000) *
                        C808 +
                    ((((C137755 * C109 - C139967 * C116 + C137748 * C110 -
                        C139736 * C118) *
                           C47216 +
                       (C137755 * C349 - C139967 * C355 + C137748 * C350 -
                        C139736 * C356) *
                           C47134 +
                       (C68914 - C68915 + C68916 - C68917) * C47217 +
                       (C68918 - C68919 + C68920 - C68921) * C139873) *
                          C139984 +
                      ((C137755 * C1569 - C139967 * C1576 + C137748 * C1568 -
                        C139736 * C1574) *
                           C47216 +
                       (C137755 * C1830 - C139967 * C1835 + C137748 * C1831 -
                        C139736 * C1836) *
                           C47134 +
                       (C76773 - C76774 + C76775 - C76776) * C47217 +
                       (C76777 - C76778 + C76779 - C76780) * C139873) *
                          C139899) *
                         C139809 * C806 +
                     (((C68915 - C68914 + C68917 - C68916) * C47216 +
                       (C68919 - C68918 + C68921 - C68920) * C47134 +
                       (C68923 - C68922 + C68925 - C68924) * C47217 +
                       (C68927 - C68926 + C68929 - C68928) * C139873) *
                          C139984 +
                      ((C76774 - C76773 + C76776 - C76775) * C47216 +
                       (C76778 - C76777 + C76780 - C76779) * C47134 +
                       (C139967 * C7756 - C137755 * C7753 + C139736 * C7760 -
                        C137748 * C7755) *
                           C47217 +
                       (C139967 * C8095 - C137755 * C8092 + C139736 * C8096 -
                        C137748 * C8093) *
                           C139873) *
                          C139899) *
                         C139809 * C140000) *
                        C139998)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[73] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47216 * C183 - C47470 * C108 - C47216 * C348 + C47134 * C411 +
              C47217 * C896 - C47471 * C813 - C47217 * C1072 +
              C139873 * C1151) *
                 C139967 +
             (C47509 + C47510) * C139736) *
                C139984 +
            ((C62126 + C62127) * C139967 + (C49393 + C49392) * C139736) *
                C139899) *
               C139809 * C806 -
           (((C76923 + C76924) * C139736 + (C64723 + C64722) * C139967) *
                C139899 +
            ((C48442 + C48443) * C139736 +
             (C47217 * C2974 - C47471 * C2908 - C47217 * C3090 +
              C139873 * C3148 + C47216 * C896 - C47470 * C813 - C47216 * C1072 +
              C47134 * C1151) *
                 C139967) *
                C139984) *
               C139809 * C140000) *
              C808 +
          ((((C48443 + C48442) * C139967 + (C48441 + C48440) * C139736) *
                C139984 +
            ((C76924 + C76923) * C139967 +
             (C47216 * C3522 - C47470 * C3440 - C47216 * C3670 +
              C47134 * C3744 + C47217 * C7865 - C47471 * C7755 -
              C47217 * C8093 + C139873 * C8197) *
                 C139736) *
                C139899) *
               C139809 * C140000 -
           (((C49390 + C49391) * C139736 + (C49392 + C49393) * C139967) *
                C139899 +
            ((C47512 + C47511) * C139736 + (C47510 + C47509) * C139967) *
                C139984) *
               C139809 * C806) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[73] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C139984 * C266 - C29624 * C108 + C139899 * C1741 -
                        C29625 * C1570) *
                           C47216 +
                       (C139984 * C495 - C29624 * C348 + C139899 * C1997 -
                        C29625 * C1829) *
                           C47134 +
                       (C38340 - C38341 + C38342 - C38343) * C47217 +
                       (C38780 - C38781 + C38782 - C38783) * C139873) *
                          C139967 +
                      ((C29627 - C29628 + C29629 - C29630) * C47216 +
                       (C29879 - C29880 + C29881 - C29882) * C47134 +
                       C38364 * C47217 + C38792 * C139873) *
                          C139736) *
                         C139809 * C806 +
                     (((C38341 - C38340 + C38343 - C38342) * C47216 +
                       (C38781 - C38780 + C38783 - C38782) * C47134 +
                       (C41954 - C41955 + C41956 - C41957) * C47217 +
                       (C42256 - C42257 + C42258 - C42259) * C139873) *
                          C139967 +
                      (C38366 * C47216 + C38793 * C47134 +
                       (C38356 - C38357 + C38358 - C38359) * C47217 +
                       (C38788 - C38789 + C38790 - C38791) * C139873) *
                          C139736) *
                         C139809 * C140000) *
                        C808 +
                    ((((C29628 - C29627 + C29630 - C29629) * C47216 +
                       (C29880 - C29879 + C29882 - C29881) * C47134 +
                       C38366 * C47217 + C38793 * C139873) *
                          C139967 +
                      ((C29636 - C29635 + C29638 - C29637) * C47216 +
                       (C29885 - C29884 + C29887 - C29886) * C47134 +
                       (C30479 - C30480 + C30481 - C30482) * C47217 +
                       (C30792 - C30793 + C30794 - C30795) * C139873) *
                          C139736) *
                         C139809 * C806 +
                     ((C38364 * C47216 + C38792 * C47134 +
                       (C38357 - C38356 + C38359 - C38358) * C47217 +
                       (C38789 - C38788 + C38791 - C38790) * C139873) *
                          C139967 +
                      ((C30480 - C30479 + C30482 - C30481) * C47216 +
                       (C30793 - C30792 + C30795 - C30794) * C47134 +
                       (C139984 * C3034 - C29624 * C2910 + C139899 * C7981 -
                        C29625 * C7755) *
                           C47217 +
                       (C139984 * C3204 - C29624 * C3092 + C139899 * C8319 -
                        C29625 * C8093) *
                           C139873) *
                          C139736) *
                         C139809 * C140000) *
                        C139998)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[73] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C139967 * C114 - C137755 * C108 + C139736 * C116 -
                        C137748 * C109) *
                           C29624 +
                       (C139967 * C573 - C137755 * C567 + C139736 * C574 -
                        C137748 * C568) *
                           C139984 +
                       (C139967 * C1578 - C137755 * C1570 + C139736 * C1576 -
                        C137748 * C1569) *
                           C29625 +
                       (C139967 * C2079 - C137755 * C2074 + C139736 * C2080 -
                        C137748 * C2075) *
                           C139899) *
                          C47134 +
                      ((C68898 - C68899 + C68900 - C68901) * C29624 +
                       (C69245 - C69246 + C69247 - C69248) * C139984 +
                       (C72406 - C72405 + C72408 - C72407) * C29625 +
                       (C72716 - C72715 + C72718 - C72717) * C139899) *
                          C139873) *
                         C139809 * C806 +
                     (((C68899 - C68898 + C68901 - C68900) * C29624 +
                       (C69246 - C69245 + C69248 - C69247) * C139984 +
                       (C72405 - C72406 + C72407 - C72408) * C29625 +
                       (C72715 - C72716 + C72717 - C72718) * C139899) *
                          C47134 +
                      ((C68907 - C68906 + C68909 - C68908) * C29624 +
                       (C69250 - C69249 + C69252 - C69251) * C139984 +
                       (C72413 - C72414 + C72415 - C72416) * C29625 +
                       (C72719 - C72720 + C72721 - C72722) * C139899) *
                          C139873) *
                         C139809 * C140000) *
                        C808 +
                    ((((C137755 * C109 - C139967 * C116 + C137748 * C110 -
                        C139736 * C118) *
                           C29624 +
                       (C137755 * C568 - C139967 * C574 + C137748 * C569 -
                        C139736 * C575) *
                           C139984 +
                       (C137755 * C1569 - C139967 * C1576 + C137748 * C1568 -
                        C139736 * C1574) *
                           C29625 +
                       (C137755 * C2075 - C139967 * C2080 + C137748 * C2076 -
                        C139736 * C2081) *
                           C139899) *
                          C47134 +
                      ((C68914 - C68915 + C68916 - C68917) * C29624 +
                       (C69253 - C69254 + C69255 - C69256) * C139984 +
                       (C76773 - C76774 + C76775 - C76776) * C29625 +
                       (C77185 - C77186 + C77187 - C77188) * C139899) *
                          C139873) *
                         C139809 * C806 +
                     (((C68915 - C68914 + C68917 - C68916) * C29624 +
                       (C69254 - C69253 + C69256 - C69255) * C139984 +
                       (C76774 - C76773 + C76776 - C76775) * C29625 +
                       (C77186 - C77185 + C77188 - C77187) * C139899) *
                          C47134 +
                      ((C68923 - C68922 + C68925 - C68924) * C29624 +
                       (C69258 - C69257 + C69260 - C69259) * C139984 +
                       (C139967 * C7756 - C137755 * C7753 + C139736 * C7760 -
                        C137748 * C7755) *
                           C29625 +
                       (C139967 * C8426 - C137755 * C8423 + C139736 * C8427 -
                        C137748 * C8424) *
                           C139899) *
                          C139873) *
                         C139809 * C140000) *
                        C139998)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[73] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47134 * C183 - C47216 * C108 + C139873 * C896 - C47217 * C813) *
                 C29624 +
             (C47134 * C629 - C47216 * C567 + C139873 * C1393 -
              C47217 * C1317) *
                 C139984 +
             (C61756 - C61757 + C61758 - C61759) * C29625 +
             (C62434 - C62435 + C62436 - C62437) * C139899) *
                C139967 +
            ((C47219 - C47220 + C47221 - C47222) * C29624 +
             (C47745 - C47746 + C47747 - C47748) * C139984 +
             (C49057 - C49056 + C49059 - C49058) * C29625 +
             (C49689 - C49688 + C49691 - C49690) * C139899) *
                C139736) *
               C139809 * C806 +
           (((C47216 * C813 - C47134 * C896 + C47217 * C2908 -
              C139873 * C2974) *
                 C29624 +
             (C47216 * C1317 - C47134 * C1393 + C47217 * C3256 -
              C139873 * C3314) *
                 C139984 +
             (C64359 - C64360 + C64361 - C64362) * C29625 +
             (C65036 - C65037 + C65038 - C65039) * C139899) *
                C139967 +
            ((C48082 - C48083 + C48084 - C48085) * C29624 +
             (C48750 - C48751 + C48752 - C48753) * C139984 +
             (C76505 - C76506 + C76507 - C76508) * C29625 +
             (C77319 - C77320 + C77321 - C77322) * C139899) *
                C139736) *
               C139809 * C140000) *
              C808 +
          ((((C47220 - C47219 + C47222 - C47221) * C29624 +
             (C47746 - C47745 + C47748 - C47747) * C139984 +
             (C49056 - C49057 + C49058 - C49059) * C29625 +
             (C49688 - C49689 + C49690 - C49691) * C139899) *
                C139967 +
            ((C47228 - C47227 + C47230 - C47229) * C29624 +
             (C47751 - C47750 + C47753 - C47752) * C139984 +
             (C49064 - C49065 + C49066 - C49067) * C29625 +
             (C49692 - C49693 + C49694 - C49695) * C139899) *
                C139736) *
               C139809 * C806 +
           (((C48083 - C48082 + C48085 - C48084) * C29624 +
             (C48751 - C48750 + C48753 - C48752) * C139984 +
             (C76506 - C76505 + C76508 - C76507) * C29625 +
             (C77320 - C77319 + C77322 - C77321) * C139899) *
                C139967 +
            ((C48091 - C48090 + C48093 - C48092) * C29624 +
             (C48755 - C48754 + C48757 - C48756) * C139984 +
             (C47134 * C3522 - C47216 * C3440 + C139873 * C7865 -
              C47217 * C7755) *
                 C29625 +
             (C47134 * C3958 - C47216 * C3884 + C139873 * C8528 -
              C47217 * C8424) *
                 C139899) *
                C139736) *
               C139809 * C140000) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eezz[73] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C29624 * C266 - C30126 * C108 - C29624 * C567 + C139984 * C702 +
              C29625 * C1741 - C30127 * C1570 - C29625 * C2074 +
              C139899 * C2230) *
                 C47134 +
             (C39218 + C39219) * C139873) *
                C139967 +
            ((C30165 + C30166) * C47134 + C39200 * C139873) * C139736) *
               C139809 * C806 -
           (((C39220 + C39221) * C139873 + C39209 * C47134) * C139736 +
            ((C42566 + C42567) * C139873 + (C39219 + C39218) * C47134) *
                C139967) *
               C139809 * C140000) *
              C808 +
          (((C39200 * C47134 + (C39221 + C39220) * C139873) * C139967 +
            ((C31117 + C31116) * C47134 +
             (C29624 * C3034 - C30126 * C2910 - C29624 * C3258 +
              C139984 * C3370 + C29625 * C7981 - C30127 * C7755 -
              C29625 * C8424 + C139899 * C8635) *
                 C139873) *
                C139736) *
               C139809 * C140000 -
           (((C31116 + C31117) * C139873 + (C30168 + C30167) * C47134) *
                C139736 +
            (C39209 * C139873 + (C30166 + C30165) * C47134) * C139967) *
               C139809 * C806) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexx[74] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C137755 * C114 - C67752 * C108 - C137755 * C115 + C139967 * C126 +
              C137748 * C116 - C67754 * C109 - C137748 * C117 +
              C139736 * C127) *
                 C139984 +
             (C77607 + C77608) * C139899) *
                C47134 +
            ((C68584 + C68585) * C139984 + (C72110 + C72109) * C139899) *
                C139873) *
               C1565 -
           (((C137748 * C13132 - C67754 * C13127 - C137748 * C13133 +
              C139736 * C13139 + C137755 * C13130 - C67752 * C13126 -
              C137755 * C13131 + C139967 * C13138) *
                 C139899 +
             (C72109 + C72110) * C139984) *
                C139873 +
            ((C137748 * C5279 - C67754 * C5274 - C137748 * C5280 +
              C139736 * C5286 + C137755 * C5277 - C67752 * C5273 -
              C137755 * C5278 + C139967 * C5285) *
                 C139899 +
             (C77608 + C77607) * C139984) *
                C47134) *
               C140002) *
              C139792 * C808 +
          ((((C77609 + C77610) * C139984 +
             (C137755 * C5279 - C67752 * C5274 - C137755 * C5280 +
              C139967 * C5286 + C137748 * C5281 - C67754 * C5275 -
              C137748 * C5282 + C139736 * C5287) *
                 C139899) *
                C47134 +
            ((C76373 + C76374) * C139984 +
             (C137755 * C13132 - C67752 * C13127 - C137755 * C13133 +
              C139967 * C13139 + C137748 * C14660 - C67754 * C14659 -
              C137748 * C14661 + C139736 * C14662) *
                 C139899) *
                C139873) *
               C140002 -
           (((C76374 + C76373) * C139899 + (C68589 + C68588) * C139984) *
                C139873 +
            ((C77610 + C77609) * C139899 +
             (C137748 * C118 - C67754 * C110 - C137748 * C119 + C139736 * C128 +
              C137755 * C116 - C67752 * C109 - C137755 * C117 +
              C139967 * C127) *
                 C139984) *
                C47134) *
               C1565) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexy[74] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47134 * C183 - C47216 * C108 + C139873 * C896 - C47217 * C813) *
                 C137755 +
             (C47134 * C189 - C47216 * C115 + C139873 * C901 - C47217 * C822) *
                 C139967 +
             (C47219 - C47220 + C47221 - C47222) * C137748 +
             (C47223 - C47224 + C47225 - C47226) * C139736) *
                C139984 +
            ((C61756 - C61757 + C61758 - C61759) * C137755 +
             (C61760 - C61761 + C61762 - C61763) * C139967 + C77749 * C137748 +
             C77750 * C139736) *
                C139899) *
               C1565 +
           (((C61757 - C61756 + C61759 - C61758) * C137755 +
             (C61761 - C61760 + C61763 - C61762) * C139967 + C77751 * C137748 +
             C77752 * C139736) *
                C139984 +
            ((C61765 - C61764 + C61767 - C61766) * C137755 +
             (C61769 - C61768 + C61771 - C61770) * C139967 +
             (C61772 - C61773 + C61774 - C61775) * C137748 +
             (C61776 - C61777 + C61778 - C61779) * C139736) *
                C139899) *
               C140002) *
              C139792 * C808 +
          ((((C47220 - C47219 + C47222 - C47221) * C137755 +
             (C47224 - C47223 + C47226 - C47225) * C139967 +
             (C47228 - C47227 + C47230 - C47229) * C137748 +
             (C47232 - C47231 + C47234 - C47233) * C139736) *
                C139984 +
            (C77751 * C137755 + C77752 * C139967 +
             (C49064 - C49065 + C49066 - C49067) * C137748 +
             (C49068 - C49069 + C49070 - C49071) * C139736) *
                C139899) *
               C1565 +
           ((C77749 * C137755 + C77750 * C139967 +
             (C49065 - C49064 + C49067 - C49066) * C137748 +
             (C49069 - C49068 + C49071 - C49070) * C139736) *
                C139984 +
            ((C61773 - C61772 + C61775 - C61774) * C137755 +
             (C61777 - C61776 + C61779 - C61778) * C139967 +
             (C47134 * C5341 - C47216 * C5275 + C139873 * C14761 -
              C47217 * C14659) *
                 C137748 +
             (C47134 * C5345 - C47216 * C5282 + C139873 * C14762 -
              C47217 * C14661) *
                 C139736) *
                C139899) *
               C140002) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexz[74] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C139984 * C266 - C29624 * C108 + C139899 * C1741 -
                        C29625 * C1570) *
                           C137755 +
                       (C139984 * C272 - C29624 * C115 + C139899 * C1746 -
                        C29625 * C1579) *
                           C139967 +
                       (C29627 - C29628 + C29629 - C29630) * C137748 +
                       (C29631 - C29632 + C29633 - C29634) * C139736) *
                          C47134 +
                      ((C38340 - C38341 + C38342 - C38343) * C137755 +
                       (C38344 - C38345 + C38346 - C38347) * C139967 +
                       C38364 * C137748 + C38365 * C139736) *
                          C139873) *
                         C1565 +
                     (((C29624 * C1570 - C139984 * C1741 + C29625 * C5273 -
                        C139899 * C5397) *
                           C137755 +
                       (C29624 * C1579 - C139984 * C1746 + C29625 * C5278 -
                        C139899 * C5401) *
                           C139967 +
                       (C31458 - C31459 + C31460 - C31461) * C137748 +
                       (C31462 - C31463 + C31464 - C31465) * C139736) *
                          C47134 +
                      ((C42968 - C42969 + C42970 - C42971) * C137755 +
                       (C42972 - C42973 + C42974 - C42975) * C139967 +
                       (C39640 - C39641 + C39642 - C39643) * C137748 +
                       (C39644 - C39645 + C39646 - C39647) * C139736) *
                          C139873) *
                         C140002) *
                        C139792 * C808 +
                    ((((C29628 - C29627 + C29630 - C29629) * C137755 +
                       (C29632 - C29631 + C29634 - C29633) * C139967 +
                       (C29636 - C29635 + C29638 - C29637) * C137748 +
                       (C29640 - C29639 + C29642 - C29641) * C139736) *
                          C47134 +
                      (C38366 * C137755 + C38367 * C139967 +
                       (C30479 - C30480 + C30481 - C30482) * C137748 +
                       (C30483 - C30484 + C30485 - C30486) * C139736) *
                          C139873) *
                         C1565 +
                     (((C31459 - C31458 + C31461 - C31460) * C137755 +
                       (C31463 - C31462 + C31465 - C31464) * C139967 +
                       (C31467 - C31466 + C31469 - C31468) * C137748 +
                       (C31471 - C31470 + C31473 - C31472) * C139736) *
                          C47134 +
                      ((C39641 - C39640 + C39643 - C39642) * C137755 +
                       (C39645 - C39644 + C39647 - C39646) * C139967 +
                       (C139984 * C3596 - C29624 * C3440 + C139899 * C14869 -
                        C29625 * C14659) *
                           C137748 +
                       (C139984 * C3600 - C29624 * C3447 + C139899 * C14870 -
                        C29625 * C14661) *
                           C139736) *
                          C139873) *
                         C140002) *
                        C139792 * C139998)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[74] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C139967 * C114 - C137755 * C108 + C139736 * C116 -
                        C137748 * C109) *
                           C47216 +
                       (C139967 * C354 - C137755 * C348 + C139736 * C355 -
                        C137748 * C349) *
                           C47134 +
                       (C68898 - C68899 + C68900 - C68901) * C47217 +
                       (C68902 - C68903 + C68904 - C68905) * C139873) *
                          C139984 +
                      ((C78013 - C78014 + C78015 - C78016) * C47216 +
                       (C78017 - C78018 + C78019 - C78020) * C47134 +
                       (C72406 - C72405 + C72408 - C72407) * C47217 +
                       (C72410 - C72409 + C72412 - C72411) * C139873) *
                          C139899) *
                         C1565 +
                     (((C78014 - C78013 + C78016 - C78015) * C47216 +
                       (C78018 - C78017 + C78020 - C78019) * C47134 +
                       (C72405 - C72406 + C72407 - C72408) * C47217 +
                       (C72409 - C72410 + C72411 - C72412) * C139873) *
                          C139984 +
                      ((C137755 * C5273 - C139967 * C5277 + C137748 * C5274 -
                        C139736 * C5279) *
                           C47216 +
                       (C137755 * C5455 - C139967 * C5459 + C137748 * C5456 -
                        C139736 * C5460) *
                           C47134 +
                       (C137755 * C13126 - C139967 * C13130 + C137748 * C13127 -
                        C139736 * C13132) *
                           C47217 +
                       (C137755 * C13380 - C139967 * C13384 + C137748 * C13381 -
                        C139736 * C13385) *
                           C139873) *
                          C139899) *
                         C140002) *
                        C139792 * C808 +
                    ((((C137755 * C109 - C139967 * C116 + C137748 * C110 -
                        C139736 * C118) *
                           C47216 +
                       (C137755 * C349 - C139967 * C355 + C137748 * C350 -
                        C139736 * C356) *
                           C47134 +
                       (C68914 - C68915 + C68916 - C68917) * C47217 +
                       (C68918 - C68919 + C68920 - C68921) * C139873) *
                          C139984 +
                      ((C78021 - C78022 + C78023 - C78024) * C47216 +
                       (C78025 - C78026 + C78027 - C78028) * C47134 +
                       (C76773 - C76774 + C76775 - C76776) * C47217 +
                       (C76777 - C76778 + C76779 - C76780) * C139873) *
                          C139899) *
                         C1565 +
                     (((C78022 - C78021 + C78024 - C78023) * C47216 +
                       (C78026 - C78025 + C78028 - C78027) * C47134 +
                       (C76774 - C76773 + C76776 - C76775) * C47217 +
                       (C76778 - C76777 + C76780 - C76779) * C139873) *
                          C139984 +
                      ((C139967 * C5279 - C137755 * C5274 + C139736 * C5281 -
                        C137748 * C5275) *
                           C47216 +
                       (C139967 * C5460 - C137755 * C5456 + C139736 * C5461 -
                        C137748 * C5457) *
                           C47134 +
                       (C139967 * C13132 - C137755 * C13127 + C139736 * C14660 -
                        C137748 * C14659) *
                           C47217 +
                       (C139967 * C13385 - C137755 * C13381 + C139736 * C14982 -
                        C137748 * C14981) *
                           C139873) *
                          C139899) *
                         C140002) *
                        C139792 * C139998)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[74] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47216 * C183 - C47470 * C108 - C47216 * C348 + C47134 * C411 +
              C47217 * C896 - C47471 * C813 - C47217 * C1072 +
              C139873 * C1151) *
                 C139967 +
             (C47509 + C47510) * C139736) *
                C139984 +
            ((C62126 + C62127) * C139967 + C78159 * C139736) * C139899) *
               C1565 -
           (((C62131 + C62130) * C139736 + (C62129 + C62128) * C139967) *
                C139899 +
            (C78160 * C139736 + (C62127 + C62126) * C139967) * C139984) *
               C140002) *
              C139792 * C808 +
          (((C78159 * C139967 + (C49391 + C49390) * C139736) * C139984 +
            ((C62130 + C62131) * C139967 +
             (C47216 * C5341 - C47470 * C5275 - C47216 * C5457 +
              C47134 * C5515 + C47217 * C14761 - C47471 * C14659 -
              C47217 * C14981 + C139873 * C15081) *
                 C139736) *
                C139899) *
               C140002 -
           (((C49390 + C49391) * C139736 + C78160 * C139967) * C139899 +
            ((C47512 + C47511) * C139736 + (C47510 + C47509) * C139967) *
                C139984) *
               C1565) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[74] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C139984 * C266 - C29624 * C108 + C139899 * C1741 -
                        C29625 * C1570) *
                           C47216 +
                       (C139984 * C495 - C29624 * C348 + C139899 * C1997 -
                        C29625 * C1829) *
                           C47134 +
                       (C38340 - C38341 + C38342 - C38343) * C47217 +
                       (C38780 - C38781 + C38782 - C38783) * C139873) *
                          C139967 +
                      ((C29627 - C29628 + C29629 - C29630) * C47216 +
                       (C29879 - C29880 + C29881 - C29882) * C47134 +
                       C38364 * C47217 + C38792 * C139873) *
                          C139736) *
                         C1565 +
                     (((C29624 * C1570 - C139984 * C1741 + C29625 * C5273 -
                        C139899 * C5397) *
                           C47216 +
                       (C29624 * C1829 - C139984 * C1997 + C29625 * C5455 -
                        C139899 * C5567) *
                           C47134 +
                       (C42968 - C42969 + C42970 - C42971) * C47217 +
                       (C43392 - C43393 + C43394 - C43395) * C139873) *
                          C139967 +
                      ((C31458 - C31459 + C31460 - C31461) * C47216 +
                       (C31798 - C31799 + C31800 - C31801) * C47134 +
                       (C39640 - C39641 + C39642 - C39643) * C47217 +
                       (C40068 - C40069 + C40070 - C40071) * C139873) *
                          C139736) *
                         C140002) *
                        C139792 * C808 +
                    ((((C29628 - C29627 + C29630 - C29629) * C47216 +
                       (C29880 - C29879 + C29882 - C29881) * C47134 +
                       C38366 * C47217 + C38793 * C139873) *
                          C139967 +
                      ((C29636 - C29635 + C29638 - C29637) * C47216 +
                       (C29885 - C29884 + C29887 - C29886) * C47134 +
                       (C30479 - C30480 + C30481 - C30482) * C47217 +
                       (C30792 - C30793 + C30794 - C30795) * C139873) *
                          C139736) *
                         C1565 +
                     (((C31459 - C31458 + C31461 - C31460) * C47216 +
                       (C31799 - C31798 + C31801 - C31800) * C47134 +
                       (C39641 - C39640 + C39643 - C39642) * C47217 +
                       (C40069 - C40068 + C40071 - C40070) * C139873) *
                          C139967 +
                      ((C31467 - C31466 + C31469 - C31468) * C47216 +
                       (C31803 - C31802 + C31805 - C31804) * C47134 +
                       (C139984 * C3596 - C29624 * C3440 + C139899 * C14869 -
                        C29625 * C14659) *
                           C47217 +
                       (C139984 * C3814 - C29624 * C3670 + C139899 * C15194 -
                        C29625 * C14981) *
                           C139873) *
                          C139736) *
                         C140002) *
                        C139792 * C139998)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[74] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C139967 * C114 - C137755 * C108 + C139736 * C116 -
                        C137748 * C109) *
                           C29624 +
                       (C139967 * C573 - C137755 * C567 + C139736 * C574 -
                        C137748 * C568) *
                           C139984 +
                       (C78013 - C78014 + C78015 - C78016) * C29625 +
                       (C78421 - C78422 + C78423 - C78424) * C139899) *
                          C47134 +
                      ((C68898 - C68899 + C68900 - C68901) * C29624 +
                       (C69245 - C69246 + C69247 - C69248) * C139984 +
                       (C72406 - C72405 + C72408 - C72407) * C29625 +
                       (C72716 - C72715 + C72718 - C72717) * C139899) *
                          C139873) *
                         C1565 +
                     (((C78014 - C78013 + C78016 - C78015) * C29624 +
                       (C78422 - C78421 + C78424 - C78423) * C139984 +
                       (C137755 * C5273 - C139967 * C5277 + C137748 * C5274 -
                        C139736 * C5279) *
                           C29625 +
                       (C137755 * C5621 - C139967 * C5625 + C137748 * C5622 -
                        C139736 * C5626) *
                           C139899) *
                          C47134 +
                      ((C72405 - C72406 + C72407 - C72408) * C29624 +
                       (C72715 - C72716 + C72717 - C72718) * C139984 +
                       (C137755 * C13126 - C139967 * C13130 + C137748 * C13127 -
                        C139736 * C13132) *
                           C29625 +
                       (C137755 * C13618 - C139967 * C13622 + C137748 * C13619 -
                        C139736 * C13623) *
                           C139899) *
                          C139873) *
                         C140002) *
                        C139792 * C808 +
                    ((((C137755 * C109 - C139967 * C116 + C137748 * C110 -
                        C139736 * C118) *
                           C29624 +
                       (C137755 * C568 - C139967 * C574 + C137748 * C569 -
                        C139736 * C575) *
                           C139984 +
                       (C78021 - C78022 + C78023 - C78024) * C29625 +
                       (C78425 - C78426 + C78427 - C78428) * C139899) *
                          C47134 +
                      ((C68914 - C68915 + C68916 - C68917) * C29624 +
                       (C69253 - C69254 + C69255 - C69256) * C139984 +
                       (C76773 - C76774 + C76775 - C76776) * C29625 +
                       (C77185 - C77186 + C77187 - C77188) * C139899) *
                          C139873) *
                         C1565 +
                     (((C78022 - C78021 + C78024 - C78023) * C29624 +
                       (C78426 - C78425 + C78428 - C78427) * C139984 +
                       (C139967 * C5279 - C137755 * C5274 + C139736 * C5281 -
                        C137748 * C5275) *
                           C29625 +
                       (C139967 * C5626 - C137755 * C5622 + C139736 * C5627 -
                        C137748 * C5623) *
                           C139899) *
                          C47134 +
                      ((C76774 - C76773 + C76776 - C76775) * C29624 +
                       (C77186 - C77185 + C77188 - C77187) * C139984 +
                       (C139967 * C13132 - C137755 * C13127 + C139736 * C14660 -
                        C137748 * C14659) *
                           C29625 +
                       (C139967 * C13623 - C137755 * C13619 + C139736 * C15300 -
                        C137748 * C15299) *
                           C139899) *
                          C139873) *
                         C140002) *
                        C139792 * C139998)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[74] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47134 * C183 - C47216 * C108 + C139873 * C896 - C47217 * C813) *
                 C29624 +
             (C47134 * C629 - C47216 * C567 + C139873 * C1393 -
              C47217 * C1317) *
                 C139984 +
             (C61756 - C61757 + C61758 - C61759) * C29625 +
             (C62434 - C62435 + C62436 - C62437) * C139899) *
                C139967 +
            ((C47219 - C47220 + C47221 - C47222) * C29624 +
             (C47745 - C47746 + C47747 - C47748) * C139984 + C77749 * C29625 +
             C78563 * C139899) *
                C139736) *
               C1565 +
           (((C61757 - C61756 + C61759 - C61758) * C29624 +
             (C62435 - C62434 + C62437 - C62436) * C139984 +
             (C61765 - C61764 + C61767 - C61766) * C29625 +
             (C62439 - C62438 + C62441 - C62440) * C139899) *
                C139967 +
            (C77751 * C29624 + C78564 * C139984 +
             (C61772 - C61773 + C61774 - C61775) * C29625 +
             (C62442 - C62443 + C62444 - C62445) * C139899) *
                C139736) *
               C140002) *
              C139792 * C808 +
          ((((C47220 - C47219 + C47222 - C47221) * C29624 +
             (C47746 - C47745 + C47748 - C47747) * C139984 + C77751 * C29625 +
             C78564 * C139899) *
                C139967 +
            ((C47228 - C47227 + C47230 - C47229) * C29624 +
             (C47751 - C47750 + C47753 - C47752) * C139984 +
             (C49064 - C49065 + C49066 - C49067) * C29625 +
             (C49692 - C49693 + C49694 - C49695) * C139899) *
                C139736) *
               C1565 +
           ((C77749 * C29624 + C78563 * C139984 +
             (C61773 - C61772 + C61775 - C61774) * C29625 +
             (C62443 - C62442 + C62445 - C62444) * C139899) *
                C139967 +
            ((C49065 - C49064 + C49067 - C49066) * C29624 +
             (C49693 - C49692 + C49695 - C49694) * C139984 +
             (C47134 * C5341 - C47216 * C5275 + C139873 * C14761 -
              C47217 * C14659) *
                 C29625 +
             (C47134 * C5681 - C47216 * C5623 + C139873 * C15399 -
              C47217 * C15299) *
                 C139899) *
                C139736) *
               C140002) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eezz[74] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C29624 * C266 - C30126 * C108 - C29624 * C567 + C139984 * C702 +
              C29625 * C1741 - C30127 * C1570 - C29625 * C2074 +
              C139899 * C2230) *
                 C47134 +
             (C39218 + C39219) * C139873) *
                C139967 +
            ((C30165 + C30166) * C47134 + C39200 * C139873) * C139736) *
               C1565 -
           (((C40488 + C40489) * C139873 + (C32139 + C32140) * C47134) *
                C139736 +
            ((C43808 + C43809) * C139873 +
             (C29625 * C5397 - C30127 * C5273 - C29625 * C5621 +
              C139899 * C5733 + C29624 * C1741 - C30126 * C1570 -
              C29624 * C2074 + C139984 * C2230) *
                 C47134) *
                C139967) *
               C140002) *
              C139792 * C808 +
          ((((C32140 + C32139) * C47134 + (C40489 + C40488) * C139873) *
                C139967 +
            ((C32138 + C32137) * C47134 +
             (C29624 * C3596 - C30126 * C3440 - C29624 * C3884 +
              C139984 * C4028 + C29625 * C14869 - C30127 * C14659 -
              C29625 * C15299 + C139899 * C15502) *
                 C139873) *
                C139736) *
               C140002 -
           (((C31116 + C31117) * C139873 + (C30168 + C30167) * C47134) *
                C139736 +
            (C39209 * C139873 + (C30166 + C30165) * C47134) * C139967) *
               C1565) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexx[75] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C137755 * C114 - C67752 * C108 - C137755 * C115 + C139967 * C126 +
              C137748 * C116 - C67754 * C109 - C137748 * C117 +
              C139736 * C127) *
                 C139984 +
             (C77607 + C77608) * C139899) *
                C47134 +
            ((C68584 + C68585) * C139984 + (C72110 + C72109) * C139899) *
                C139873) *
               C139809 * C2322 -
           (((C72107 + C72108) * C139899 + (C68587 + C68586) * C139984) *
                C139873 +
            ((C72109 + C72110) * C139899 + (C68585 + C68584) * C139984) *
                C47134) *
               C139809 * C140000) *
              C2324 +
          ((((C68588 + C68589) * C139984 + (C76373 + C76374) * C139899) *
                C47134 +
            ((C68590 + C68591) * C139984 +
             (C137755 * C7756 - C67752 * C7753 - C137755 * C7757 +
              C139967 * C7762 + C137748 * C7760 - C67754 * C7755 -
              C137748 * C7761 + C139736 * C7764) *
                 C139899) *
                C139873) *
               C139809 * C140000 -
           (((C76374 + C76373) * C139899 + (C68589 + C68588) * C139984) *
                C139873 +
            ((C77610 + C77609) * C139899 +
             (C137748 * C118 - C67754 * C110 - C137748 * C119 + C139736 * C128 +
              C137755 * C116 - C67752 * C109 - C137755 * C117 +
              C139967 * C127) *
                 C139984) *
                C47134) *
               C139809 * C2322) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexy[75] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47134 * C183 - C47216 * C108 + C139873 * C896 - C47217 * C813) *
                 C137755 +
             (C47134 * C189 - C47216 * C115 + C139873 * C901 - C47217 * C822) *
                 C139967 +
             (C47219 - C47220 + C47221 - C47222) * C137748 +
             (C47223 - C47224 + C47225 - C47226) * C139736) *
                C139984 +
            ((C61756 - C61757 + C61758 - C61759) * C137755 +
             (C61760 - C61761 + C61762 - C61763) * C139967 + C77749 * C137748 +
             C77750 * C139736) *
                C139899) *
               C139809 * C2322 +
           (((C47216 * C813 - C47134 * C896 + C47217 * C2908 -
              C139873 * C2974) *
                 C137755 +
             (C47216 * C822 - C47134 * C901 + C47217 * C2913 -
              C139873 * C2978) *
                 C139967 +
             (C48082 - C48083 + C48084 - C48085) * C137748 +
             (C48086 - C48087 + C48088 - C48089) * C139736) *
                C139984 +
            ((C64359 - C64360 + C64361 - C64362) * C137755 +
             (C64363 - C64364 + C64365 - C64366) * C139967 +
             (C76505 - C76506 + C76507 - C76508) * C137748 +
             (C76509 - C76510 + C76511 - C76512) * C139736) *
                C139899) *
               C139809 * C140000) *
              C2324 +
          ((((C47220 - C47219 + C47222 - C47221) * C137755 +
             (C47224 - C47223 + C47226 - C47225) * C139967 +
             (C47228 - C47227 + C47230 - C47229) * C137748 +
             (C47232 - C47231 + C47234 - C47233) * C139736) *
                C139984 +
            (C77751 * C137755 + C77752 * C139967 +
             (C49064 - C49065 + C49066 - C49067) * C137748 +
             (C49068 - C49069 + C49070 - C49071) * C139736) *
                C139899) *
               C139809 * C2322 +
           (((C48083 - C48082 + C48085 - C48084) * C137755 +
             (C48087 - C48086 + C48089 - C48088) * C139967 +
             (C48091 - C48090 + C48093 - C48092) * C137748 +
             (C48095 - C48094 + C48097 - C48096) * C139736) *
                C139984 +
            ((C76506 - C76505 + C76508 - C76507) * C137755 +
             (C76510 - C76509 + C76512 - C76511) * C139967 +
             (C47134 * C3522 - C47216 * C3440 + C139873 * C7865 -
              C47217 * C7755) *
                 C137748 +
             (C47134 * C3526 - C47216 * C3447 + C139873 * C7868 -
              C47217 * C7761) *
                 C139736) *
                C139899) *
               C139809 * C140000) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexz[75] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C139984 * C266 - C29624 * C108 + C139899 * C1741 -
                        C29625 * C1570) *
                           C137755 +
                       (C139984 * C272 - C29624 * C115 + C139899 * C1746 -
                        C29625 * C1579) *
                           C139967 +
                       (C29627 - C29628 + C29629 - C29630) * C137748 +
                       (C29631 - C29632 + C29633 - C29634) * C139736) *
                          C47134 +
                      ((C38340 - C38341 + C38342 - C38343) * C137755 +
                       (C38344 - C38345 + C38346 - C38347) * C139967 +
                       C38364 * C137748 + C38365 * C139736) *
                          C139873) *
                         C139809 * C2322 +
                     (((C38341 - C38340 + C38343 - C38342) * C137755 +
                       (C38345 - C38344 + C38347 - C38346) * C139967 +
                       C38366 * C137748 + C38367 * C139736) *
                          C47134 +
                      ((C41954 - C41955 + C41956 - C41957) * C137755 +
                       (C41958 - C41959 + C41960 - C41961) * C139967 +
                       (C38356 - C38357 + C38358 - C38359) * C137748 +
                       (C38360 - C38361 + C38362 - C38363) * C139736) *
                          C139873) *
                         C139809 * C140000) *
                        C2324 +
                    ((((C29628 - C29627 + C29630 - C29629) * C137755 +
                       (C29632 - C29631 + C29634 - C29633) * C139967 +
                       (C29636 - C29635 + C29638 - C29637) * C137748 +
                       (C29640 - C29639 + C29642 - C29641) * C139736) *
                          C47134 +
                      (C38366 * C137755 + C38367 * C139967 +
                       (C30479 - C30480 + C30481 - C30482) * C137748 +
                       (C30483 - C30484 + C30485 - C30486) * C139736) *
                          C139873) *
                         C139809 * C2322 +
                     ((C38364 * C137755 + C38365 * C139967 +
                       (C30480 - C30479 + C30482 - C30481) * C137748 +
                       (C30484 - C30483 + C30486 - C30485) * C139736) *
                          C47134 +
                      ((C38357 - C38356 + C38359 - C38358) * C137755 +
                       (C38361 - C38360 + C38363 - C38362) * C139967 +
                       (C139984 * C3034 - C29624 * C2910 + C139899 * C7981 -
                        C29625 * C7755) *
                           C137748 +
                       (C139984 * C3038 - C29624 * C2917 + C139899 * C7984 -
                        C29625 * C7761) *
                           C139736) *
                          C139873) *
                         C139809 * C140000) *
                        C139998)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[75] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C139967 * C114 - C137755 * C108 + C139736 * C116 -
                        C137748 * C109) *
                           C47216 +
                       (C139967 * C354 - C137755 * C348 + C139736 * C355 -
                        C137748 * C349) *
                           C47134 +
                       (C68898 - C68899 + C68900 - C68901) * C47217 +
                       (C68902 - C68903 + C68904 - C68905) * C139873) *
                          C139984 +
                      ((C78013 - C78014 + C78015 - C78016) * C47216 +
                       (C78017 - C78018 + C78019 - C78020) * C47134 +
                       (C72406 - C72405 + C72408 - C72407) * C47217 +
                       (C72410 - C72409 + C72412 - C72411) * C139873) *
                          C139899) *
                         C139809 * C2322 +
                     (((C68899 - C68898 + C68901 - C68900) * C47216 +
                       (C68903 - C68902 + C68905 - C68904) * C47134 +
                       (C68907 - C68906 + C68909 - C68908) * C47217 +
                       (C68911 - C68910 + C68913 - C68912) * C139873) *
                          C139984 +
                      ((C72405 - C72406 + C72407 - C72408) * C47216 +
                       (C72409 - C72410 + C72411 - C72412) * C47134 +
                       (C72413 - C72414 + C72415 - C72416) * C47217 +
                       (C72417 - C72418 + C72419 - C72420) * C139873) *
                          C139899) *
                         C139809 * C140000) *
                        C2324 +
                    ((((C137755 * C109 - C139967 * C116 + C137748 * C110 -
                        C139736 * C118) *
                           C47216 +
                       (C137755 * C349 - C139967 * C355 + C137748 * C350 -
                        C139736 * C356) *
                           C47134 +
                       (C68914 - C68915 + C68916 - C68917) * C47217 +
                       (C68918 - C68919 + C68920 - C68921) * C139873) *
                          C139984 +
                      ((C78021 - C78022 + C78023 - C78024) * C47216 +
                       (C78025 - C78026 + C78027 - C78028) * C47134 +
                       (C76773 - C76774 + C76775 - C76776) * C47217 +
                       (C76777 - C76778 + C76779 - C76780) * C139873) *
                          C139899) *
                         C139809 * C2322 +
                     (((C68915 - C68914 + C68917 - C68916) * C47216 +
                       (C68919 - C68918 + C68921 - C68920) * C47134 +
                       (C68923 - C68922 + C68925 - C68924) * C47217 +
                       (C68927 - C68926 + C68929 - C68928) * C139873) *
                          C139984 +
                      ((C76774 - C76773 + C76776 - C76775) * C47216 +
                       (C76778 - C76777 + C76780 - C76779) * C47134 +
                       (C139967 * C7756 - C137755 * C7753 + C139736 * C7760 -
                        C137748 * C7755) *
                           C47217 +
                       (C139967 * C8095 - C137755 * C8092 + C139736 * C8096 -
                        C137748 * C8093) *
                           C139873) *
                          C139899) *
                         C139809 * C140000) *
                        C139998)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[75] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47216 * C183 - C47470 * C108 - C47216 * C348 + C47134 * C411 +
              C47217 * C896 - C47471 * C813 - C47217 * C1072 +
              C139873 * C1151) *
                 C139967 +
             (C47509 + C47510) * C139736) *
                C139984 +
            ((C62126 + C62127) * C139967 + C78159 * C139736) * C139899) *
               C139809 * C2322 -
           (((C76923 + C76924) * C139736 + (C64723 + C64722) * C139967) *
                C139899 +
            ((C48442 + C48443) * C139736 +
             (C47217 * C2974 - C47471 * C2908 - C47217 * C3090 +
              C139873 * C3148 + C47216 * C896 - C47470 * C813 - C47216 * C1072 +
              C47134 * C1151) *
                 C139967) *
                C139984) *
               C139809 * C140000) *
              C2324 +
          ((((C48443 + C48442) * C139967 + (C48441 + C48440) * C139736) *
                C139984 +
            ((C76924 + C76923) * C139967 +
             (C47216 * C3522 - C47470 * C3440 - C47216 * C3670 +
              C47134 * C3744 + C47217 * C7865 - C47471 * C7755 -
              C47217 * C8093 + C139873 * C8197) *
                 C139736) *
                C139899) *
               C139809 * C140000 -
           (((C49390 + C49391) * C139736 + C78160 * C139967) * C139899 +
            ((C47512 + C47511) * C139736 + (C47510 + C47509) * C139967) *
                C139984) *
               C139809 * C2322) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[75] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C139984 * C266 - C29624 * C108 + C139899 * C1741 -
                        C29625 * C1570) *
                           C47216 +
                       (C139984 * C495 - C29624 * C348 + C139899 * C1997 -
                        C29625 * C1829) *
                           C47134 +
                       (C38340 - C38341 + C38342 - C38343) * C47217 +
                       (C38780 - C38781 + C38782 - C38783) * C139873) *
                          C139967 +
                      ((C29627 - C29628 + C29629 - C29630) * C47216 +
                       (C29879 - C29880 + C29881 - C29882) * C47134 +
                       C38364 * C47217 + C38792 * C139873) *
                          C139736) *
                         C139809 * C2322 +
                     (((C38341 - C38340 + C38343 - C38342) * C47216 +
                       (C38781 - C38780 + C38783 - C38782) * C47134 +
                       (C41954 - C41955 + C41956 - C41957) * C47217 +
                       (C42256 - C42257 + C42258 - C42259) * C139873) *
                          C139967 +
                      (C38366 * C47216 + C38793 * C47134 +
                       (C38356 - C38357 + C38358 - C38359) * C47217 +
                       (C38788 - C38789 + C38790 - C38791) * C139873) *
                          C139736) *
                         C139809 * C140000) *
                        C2324 +
                    ((((C29628 - C29627 + C29630 - C29629) * C47216 +
                       (C29880 - C29879 + C29882 - C29881) * C47134 +
                       C38366 * C47217 + C38793 * C139873) *
                          C139967 +
                      ((C29636 - C29635 + C29638 - C29637) * C47216 +
                       (C29885 - C29884 + C29887 - C29886) * C47134 +
                       (C30479 - C30480 + C30481 - C30482) * C47217 +
                       (C30792 - C30793 + C30794 - C30795) * C139873) *
                          C139736) *
                         C139809 * C2322 +
                     ((C38364 * C47216 + C38792 * C47134 +
                       (C38357 - C38356 + C38359 - C38358) * C47217 +
                       (C38789 - C38788 + C38791 - C38790) * C139873) *
                          C139967 +
                      ((C30480 - C30479 + C30482 - C30481) * C47216 +
                       (C30793 - C30792 + C30795 - C30794) * C47134 +
                       (C139984 * C3034 - C29624 * C2910 + C139899 * C7981 -
                        C29625 * C7755) *
                           C47217 +
                       (C139984 * C3204 - C29624 * C3092 + C139899 * C8319 -
                        C29625 * C8093) *
                           C139873) *
                          C139736) *
                         C139809 * C140000) *
                        C139998)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[75] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C139967 * C114 - C137755 * C108 + C139736 * C116 -
                        C137748 * C109) *
                           C29624 +
                       (C139967 * C573 - C137755 * C567 + C139736 * C574 -
                        C137748 * C568) *
                           C139984 +
                       (C78013 - C78014 + C78015 - C78016) * C29625 +
                       (C78421 - C78422 + C78423 - C78424) * C139899) *
                          C47134 +
                      ((C68898 - C68899 + C68900 - C68901) * C29624 +
                       (C69245 - C69246 + C69247 - C69248) * C139984 +
                       (C72406 - C72405 + C72408 - C72407) * C29625 +
                       (C72716 - C72715 + C72718 - C72717) * C139899) *
                          C139873) *
                         C139809 * C2322 +
                     (((C68899 - C68898 + C68901 - C68900) * C29624 +
                       (C69246 - C69245 + C69248 - C69247) * C139984 +
                       (C72405 - C72406 + C72407 - C72408) * C29625 +
                       (C72715 - C72716 + C72717 - C72718) * C139899) *
                          C47134 +
                      ((C68907 - C68906 + C68909 - C68908) * C29624 +
                       (C69250 - C69249 + C69252 - C69251) * C139984 +
                       (C72413 - C72414 + C72415 - C72416) * C29625 +
                       (C72719 - C72720 + C72721 - C72722) * C139899) *
                          C139873) *
                         C139809 * C140000) *
                        C2324 +
                    ((((C137755 * C109 - C139967 * C116 + C137748 * C110 -
                        C139736 * C118) *
                           C29624 +
                       (C137755 * C568 - C139967 * C574 + C137748 * C569 -
                        C139736 * C575) *
                           C139984 +
                       (C78021 - C78022 + C78023 - C78024) * C29625 +
                       (C78425 - C78426 + C78427 - C78428) * C139899) *
                          C47134 +
                      ((C68914 - C68915 + C68916 - C68917) * C29624 +
                       (C69253 - C69254 + C69255 - C69256) * C139984 +
                       (C76773 - C76774 + C76775 - C76776) * C29625 +
                       (C77185 - C77186 + C77187 - C77188) * C139899) *
                          C139873) *
                         C139809 * C2322 +
                     (((C68915 - C68914 + C68917 - C68916) * C29624 +
                       (C69254 - C69253 + C69256 - C69255) * C139984 +
                       (C76774 - C76773 + C76776 - C76775) * C29625 +
                       (C77186 - C77185 + C77188 - C77187) * C139899) *
                          C47134 +
                      ((C68923 - C68922 + C68925 - C68924) * C29624 +
                       (C69258 - C69257 + C69260 - C69259) * C139984 +
                       (C139967 * C7756 - C137755 * C7753 + C139736 * C7760 -
                        C137748 * C7755) *
                           C29625 +
                       (C139967 * C8426 - C137755 * C8423 + C139736 * C8427 -
                        C137748 * C8424) *
                           C139899) *
                          C139873) *
                         C139809 * C140000) *
                        C139998)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[75] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47134 * C183 - C47216 * C108 + C139873 * C896 - C47217 * C813) *
                 C29624 +
             (C47134 * C629 - C47216 * C567 + C139873 * C1393 -
              C47217 * C1317) *
                 C139984 +
             (C61756 - C61757 + C61758 - C61759) * C29625 +
             (C62434 - C62435 + C62436 - C62437) * C139899) *
                C139967 +
            ((C47219 - C47220 + C47221 - C47222) * C29624 +
             (C47745 - C47746 + C47747 - C47748) * C139984 + C77749 * C29625 +
             C78563 * C139899) *
                C139736) *
               C139809 * C2322 +
           (((C47216 * C813 - C47134 * C896 + C47217 * C2908 -
              C139873 * C2974) *
                 C29624 +
             (C47216 * C1317 - C47134 * C1393 + C47217 * C3256 -
              C139873 * C3314) *
                 C139984 +
             (C64359 - C64360 + C64361 - C64362) * C29625 +
             (C65036 - C65037 + C65038 - C65039) * C139899) *
                C139967 +
            ((C48082 - C48083 + C48084 - C48085) * C29624 +
             (C48750 - C48751 + C48752 - C48753) * C139984 +
             (C76505 - C76506 + C76507 - C76508) * C29625 +
             (C77319 - C77320 + C77321 - C77322) * C139899) *
                C139736) *
               C139809 * C140000) *
              C2324 +
          ((((C47220 - C47219 + C47222 - C47221) * C29624 +
             (C47746 - C47745 + C47748 - C47747) * C139984 + C77751 * C29625 +
             C78564 * C139899) *
                C139967 +
            ((C47228 - C47227 + C47230 - C47229) * C29624 +
             (C47751 - C47750 + C47753 - C47752) * C139984 +
             (C49064 - C49065 + C49066 - C49067) * C29625 +
             (C49692 - C49693 + C49694 - C49695) * C139899) *
                C139736) *
               C139809 * C2322 +
           (((C48083 - C48082 + C48085 - C48084) * C29624 +
             (C48751 - C48750 + C48753 - C48752) * C139984 +
             (C76506 - C76505 + C76508 - C76507) * C29625 +
             (C77320 - C77319 + C77322 - C77321) * C139899) *
                C139967 +
            ((C48091 - C48090 + C48093 - C48092) * C29624 +
             (C48755 - C48754 + C48757 - C48756) * C139984 +
             (C47134 * C3522 - C47216 * C3440 + C139873 * C7865 -
              C47217 * C7755) *
                 C29625 +
             (C47134 * C3958 - C47216 * C3884 + C139873 * C8528 -
              C47217 * C8424) *
                 C139899) *
                C139736) *
               C139809 * C140000) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eezz[75] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C29624 * C266 - C30126 * C108 - C29624 * C567 + C139984 * C702 +
              C29625 * C1741 - C30127 * C1570 - C29625 * C2074 +
              C139899 * C2230) *
                 C47134 +
             (C39218 + C39219) * C139873) *
                C139967 +
            ((C30165 + C30166) * C47134 + C39200 * C139873) * C139736) *
               C139809 * C2322 -
           (((C39220 + C39221) * C139873 + C39209 * C47134) * C139736 +
            ((C42566 + C42567) * C139873 + (C39219 + C39218) * C47134) *
                C139967) *
               C139809 * C140000) *
              C2324 +
          (((C39200 * C47134 + (C39221 + C39220) * C139873) * C139967 +
            ((C31117 + C31116) * C47134 +
             (C29624 * C3034 - C30126 * C2910 - C29624 * C3258 +
              C139984 * C3370 + C29625 * C7981 - C30127 * C7755 -
              C29625 * C8424 + C139899 * C8635) *
                 C139873) *
                C139736) *
               C139809 * C140000 -
           (((C31116 + C31117) * C139873 + (C30168 + C30167) * C47134) *
                C139736 +
            (C39209 * C139873 + (C30166 + C30165) * C47134) * C139967) *
               C139809 * C2322) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexx[76] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C137755 * C114 - C67752 * C108 - C137755 * C115 + C139967 * C126 +
             C137748 * C116 - C67754 * C109 - C137748 * C117 + C139736 * C127) *
                C139984 +
            (C77607 + C77608) * C139899) *
               C47134 +
           ((C68584 + C68585) * C139984 + (C72110 + C72109) * C139899) *
               C139873) *
              C139809 * C2904 -
          (((C72107 + C72108) * C139899 + (C68587 + C68586) * C139984) *
               C139873 +
           ((C72109 + C72110) * C139899 + (C68585 + C68584) * C139984) *
               C47134) *
              C139809 * C2905 +
          ((C71346 * C139984 + (C72108 + C72107) * C139899) * C47134 +
           ((C71361 + C71360) * C139984 +
            (C137755 * C10396 - C67752 * C10394 - C137755 * C10397 +
             C139967 * C10400 + C137748 * C10398 - C67754 * C10395 -
             C137748 * C10399 + C139736 * C10401) *
                C139899) *
               C139873) *
              C139809 * C2906) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eexy[76] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47134 * C183 - C47216 * C108 + C139873 * C896 - C47217 * C813) *
                C137755 +
            (C47134 * C189 - C47216 * C115 + C139873 * C901 - C47217 * C822) *
                C139967 +
            (C47219 - C47220 + C47221 - C47222) * C137748 +
            (C47223 - C47224 + C47225 - C47226) * C139736) *
               C139984 +
           ((C61756 - C61757 + C61758 - C61759) * C137755 +
            (C61760 - C61761 + C61762 - C61763) * C139967 + C77749 * C137748 +
            C77750 * C139736) *
               C139899) *
              C139809 * C2904 +
          (((C47216 * C813 - C47134 * C896 + C47217 * C2908 - C139873 * C2974) *
                C137755 +
            (C47216 * C822 - C47134 * C901 + C47217 * C2913 - C139873 * C2978) *
                C139967 +
            (C48082 - C48083 + C48084 - C48085) * C137748 +
            (C48086 - C48087 + C48088 - C48089) * C139736) *
               C139984 +
           ((C64359 - C64360 + C64361 - C64362) * C137755 +
            (C64363 - C64364 + C64365 - C64366) * C139967 +
            (C76505 - C76506 + C76507 - C76508) * C137748 +
            (C76509 - C76510 + C76511 - C76512) * C139736) *
               C139899) *
              C139809 * C2905 +
          (((C47134 * C2974 - C47216 * C2908 + C139873 * C6792 -
             C47217 * C6627) *
                C137755 +
            (C47134 * C2978 - C47216 * C2913 + C139873 * C6795 -
             C47217 * C6632) *
                C139967 +
            (C47134 * C2975 - C47216 * C2909 + C139873 * C6793 -
             C47217 * C6626) *
                C137748 +
            (C47134 * C2979 - C47216 * C2915 + C139873 * C6796 -
             C47217 * C6630) *
                C139736) *
               C139984 +
           ((C47134 * C7863 - C47216 * C7754 + C139873 * C10528 -
             C47217 * C10394) *
                C137755 +
            (C47134 * C7866 - C47216 * C7759 + C139873 * C10530 -
             C47217 * C10397) *
                C139967 +
            (C47134 * C7864 - C47216 * C7753 + C139873 * C10529 -
             C47217 * C10395) *
                C137748 +
            (C47134 * C7867 - C47216 * C7757 + C139873 * C10531 -
             C47217 * C10399) *
                C139736) *
               C139899) *
              C139809 * C2906) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eexz[76] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C139984 * C266 - C29624 * C108 + C139899 * C1741 -
                       C29625 * C1570) *
                          C137755 +
                      (C139984 * C272 - C29624 * C115 + C139899 * C1746 -
                       C29625 * C1579) *
                          C139967 +
                      (C29627 - C29628 + C29629 - C29630) * C137748 +
                      (C29631 - C29632 + C29633 - C29634) * C139736) *
                         C47134 +
                     ((C38340 - C38341 + C38342 - C38343) * C137755 +
                      (C38344 - C38345 + C38346 - C38347) * C139967 +
                      C38364 * C137748 + C38365 * C139736) *
                         C139873) *
                        C139809 * C2904 +
                    (((C38341 - C38340 + C38343 - C38342) * C137755 +
                      (C38345 - C38344 + C38347 - C38346) * C139967 +
                      C38366 * C137748 + C38367 * C139736) *
                         C47134 +
                     ((C41954 - C41955 + C41956 - C41957) * C137755 +
                      (C41958 - C41959 + C41960 - C41961) * C139967 +
                      (C38356 - C38357 + C38358 - C38359) * C137748 +
                      (C38360 - C38361 + C38362 - C38363) * C139736) *
                         C139873) *
                        C139809 * C2905 +
                    (((C41955 - C41954 + C41957 - C41956) * C137755 +
                      (C41959 - C41958 + C41961 - C41960) * C139967 +
                      (C38357 - C38356 + C38359 - C38358) * C137748 +
                      (C38361 - C38360 + C38363 - C38362) * C139736) *
                         C47134 +
                     ((C139984 * C6908 - C29624 * C6627 + C139899 * C10630 -
                       C29625 * C10394) *
                          C137755 +
                      (C139984 * C6911 - C29624 * C6632 + C139899 * C10632 -
                       C29625 * C10397) *
                          C139967 +
                      (C139984 * C6909 - C29624 * C6626 + C139899 * C10631 -
                       C29625 * C10395) *
                          C137748 +
                      (C139984 * C6912 - C29624 * C6630 + C139899 * C10633 -
                       C29625 * C10399) *
                          C139736) *
                         C139873) *
                        C139809 * C2906) *
                   C139758) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[76] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C139967 * C114 - C137755 * C108 + C139736 * C116 -
                       C137748 * C109) *
                          C47216 +
                      (C139967 * C354 - C137755 * C348 + C139736 * C355 -
                       C137748 * C349) *
                          C47134 +
                      (C68898 - C68899 + C68900 - C68901) * C47217 +
                      (C68902 - C68903 + C68904 - C68905) * C139873) *
                         C139984 +
                     ((C78013 - C78014 + C78015 - C78016) * C47216 +
                      (C78017 - C78018 + C78019 - C78020) * C47134 +
                      (C72406 - C72405 + C72408 - C72407) * C47217 +
                      (C72410 - C72409 + C72412 - C72411) * C139873) *
                         C139899) *
                        C139809 * C2904 +
                    (((C68899 - C68898 + C68901 - C68900) * C47216 +
                      (C68903 - C68902 + C68905 - C68904) * C47134 +
                      (C68907 - C68906 + C68909 - C68908) * C47217 +
                      (C68911 - C68910 + C68913 - C68912) * C139873) *
                         C139984 +
                     ((C72405 - C72406 + C72407 - C72408) * C47216 +
                      (C72409 - C72410 + C72411 - C72412) * C47134 +
                      (C72413 - C72414 + C72415 - C72416) * C47217 +
                      (C72417 - C72418 + C72419 - C72420) * C139873) *
                         C139899) *
                        C139809 * C2905 +
                    ((C71603 * C47216 + C71604 * C47134 +
                      (C71596 - C71595 + C71598 - C71597) * C47217 +
                      (C71600 - C71599 + C71602 - C71601) * C139873) *
                         C139984 +
                     ((C72414 - C72413 + C72416 - C72415) * C47216 +
                      (C72418 - C72417 + C72420 - C72419) * C47134 +
                      (C139967 * C10396 - C137755 * C10394 + C139736 * C10398 -
                       C137748 * C10395) *
                          C47217 +
                      (C139967 * C10742 - C137755 * C10740 + C139736 * C10743 -
                       C137748 * C10741) *
                          C139873) *
                         C139899) *
                        C139809 * C2906) *
                   C139758) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[76] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47216 * C183 - C47470 * C108 - C47216 * C348 + C47134 * C411 +
             C47217 * C896 - C47471 * C813 - C47217 * C1072 + C139873 * C1151) *
                C139967 +
            (C47509 + C47510) * C139736) *
               C139984 +
           ((C62126 + C62127) * C139967 + C78159 * C139736) * C139899) *
              C139809 * C2904 -
          (((C76923 + C76924) * C139736 + (C64723 + C64722) * C139967) *
               C139899 +
           ((C48442 + C48443) * C139736 +
            (C47217 * C2974 - C47471 * C2908 - C47217 * C3090 +
             C139873 * C3148 + C47216 * C896 - C47470 * C813 - C47216 * C1072 +
             C47134 * C1151) *
                C139967) *
               C139984) *
              C139809 * C2905 +
          (((C47216 * C2974 - C47470 * C2908 - C47216 * C3090 + C47134 * C3148 +
             C47217 * C6792 - C47471 * C6627 - C47217 * C7032 +
             C139873 * C7169) *
                C139967 +
            (C47216 * C2975 - C47470 * C2909 - C47216 * C3091 + C47134 * C3149 +
             C47217 * C6793 - C47471 * C6626 - C47217 * C7033 +
             C139873 * C7168) *
                C139736) *
               C139984 +
           ((C47216 * C7863 - C47470 * C7754 - C47216 * C8091 + C47134 * C8196 +
             C47217 * C10528 - C47471 * C10394 - C47217 * C10740 +
             C139873 * C10858) *
                C139967 +
            (C47216 * C7864 - C47470 * C7753 - C47216 * C8092 + C47134 * C8195 +
             C47217 * C10529 - C47471 * C10395 - C47217 * C10741 +
             C139873 * C10859) *
                C139736) *
               C139899) *
              C139809 * C2906) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eeyz[76] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C139984 * C266 - C29624 * C108 + C139899 * C1741 -
                       C29625 * C1570) *
                          C47216 +
                      (C139984 * C495 - C29624 * C348 + C139899 * C1997 -
                       C29625 * C1829) *
                          C47134 +
                      (C38340 - C38341 + C38342 - C38343) * C47217 +
                      (C38780 - C38781 + C38782 - C38783) * C139873) *
                         C139967 +
                     ((C29627 - C29628 + C29629 - C29630) * C47216 +
                      (C29879 - C29880 + C29881 - C29882) * C47134 +
                      C38364 * C47217 + C38792 * C139873) *
                         C139736) *
                        C139809 * C2904 +
                    (((C38341 - C38340 + C38343 - C38342) * C47216 +
                      (C38781 - C38780 + C38783 - C38782) * C47134 +
                      (C41954 - C41955 + C41956 - C41957) * C47217 +
                      (C42256 - C42257 + C42258 - C42259) * C139873) *
                         C139967 +
                     (C38366 * C47216 + C38793 * C47134 +
                      (C38356 - C38357 + C38358 - C38359) * C47217 +
                      (C38788 - C38789 + C38790 - C38791) * C139873) *
                         C139736) *
                        C139809 * C2905 +
                    (((C41955 - C41954 + C41957 - C41956) * C47216 +
                      (C42257 - C42256 + C42259 - C42258) * C47134 +
                      (C139984 * C6908 - C29624 * C6627 + C139899 * C10630 -
                       C29625 * C10394) *
                          C47217 +
                      (C139984 * C7290 - C29624 * C7032 + C139899 * C10958 -
                       C29625 * C10740) *
                          C139873) *
                         C139967 +
                     ((C38357 - C38356 + C38359 - C38358) * C47216 +
                      (C38789 - C38788 + C38791 - C38790) * C47134 +
                      (C139984 * C6909 - C29624 * C6626 + C139899 * C10631 -
                       C29625 * C10395) *
                          C47217 +
                      (C139984 * C7291 - C29624 * C7033 + C139899 * C10959 -
                       C29625 * C10741) *
                          C139873) *
                         C139736) *
                        C139809 * C2906) *
                   C139758) /
                  (p * q * std::sqrt(p + q));
    d2eezx[76] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C139967 * C114 - C137755 * C108 + C139736 * C116 -
                       C137748 * C109) *
                          C29624 +
                      (C139967 * C573 - C137755 * C567 + C139736 * C574 -
                       C137748 * C568) *
                          C139984 +
                      (C78013 - C78014 + C78015 - C78016) * C29625 +
                      (C78421 - C78422 + C78423 - C78424) * C139899) *
                         C47134 +
                     ((C68898 - C68899 + C68900 - C68901) * C29624 +
                      (C69245 - C69246 + C69247 - C69248) * C139984 +
                      (C72406 - C72405 + C72408 - C72407) * C29625 +
                      (C72716 - C72715 + C72718 - C72717) * C139899) *
                         C139873) *
                        C139809 * C2904 +
                    (((C68899 - C68898 + C68901 - C68900) * C29624 +
                      (C69246 - C69245 + C69248 - C69247) * C139984 +
                      (C72405 - C72406 + C72407 - C72408) * C29625 +
                      (C72715 - C72716 + C72717 - C72718) * C139899) *
                         C47134 +
                     ((C68907 - C68906 + C68909 - C68908) * C29624 +
                      (C69250 - C69249 + C69252 - C69251) * C139984 +
                      (C72413 - C72414 + C72415 - C72416) * C29625 +
                      (C72719 - C72720 + C72721 - C72722) * C139899) *
                         C139873) *
                        C139809 * C2905 +
                    ((C71603 * C29624 + C71834 * C139984 +
                      (C72414 - C72413 + C72416 - C72415) * C29625 +
                      (C72720 - C72719 + C72722 - C72721) * C139899) *
                         C47134 +
                     ((C71596 - C71595 + C71598 - C71597) * C29624 +
                      (C71831 - C71830 + C71833 - C71832) * C139984 +
                      (C139967 * C10396 - C137755 * C10394 + C139736 * C10398 -
                       C137748 * C10395) *
                          C29625 +
                      (C139967 * C11064 - C137755 * C11062 + C139736 * C11065 -
                       C137748 * C11063) *
                          C139899) *
                         C139873) *
                        C139809 * C2906) *
                   C139758) /
                  (p * q * std::sqrt(p + q));
    d2eezy[76] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47134 * C183 - C47216 * C108 + C139873 * C896 - C47217 * C813) *
                C29624 +
            (C47134 * C629 - C47216 * C567 + C139873 * C1393 - C47217 * C1317) *
                C139984 +
            (C61756 - C61757 + C61758 - C61759) * C29625 +
            (C62434 - C62435 + C62436 - C62437) * C139899) *
               C139967 +
           ((C47219 - C47220 + C47221 - C47222) * C29624 +
            (C47745 - C47746 + C47747 - C47748) * C139984 + C77749 * C29625 +
            C78563 * C139899) *
               C139736) *
              C139809 * C2904 +
          (((C47216 * C813 - C47134 * C896 + C47217 * C2908 - C139873 * C2974) *
                C29624 +
            (C47216 * C1317 - C47134 * C1393 + C47217 * C3256 -
             C139873 * C3314) *
                C139984 +
            (C64359 - C64360 + C64361 - C64362) * C29625 +
            (C65036 - C65037 + C65038 - C65039) * C139899) *
               C139967 +
           ((C48082 - C48083 + C48084 - C48085) * C29624 +
            (C48750 - C48751 + C48752 - C48753) * C139984 +
            (C76505 - C76506 + C76507 - C76508) * C29625 +
            (C77319 - C77320 + C77321 - C77322) * C139899) *
               C139736) *
              C139809 * C2905 +
          (((C47134 * C2974 - C47216 * C2908 + C139873 * C6792 -
             C47217 * C6627) *
                C29624 +
            (C47134 * C3314 - C47216 * C3256 + C139873 * C7521 -
             C47217 * C7401) *
                C139984 +
            (C47134 * C7863 - C47216 * C7754 + C139873 * C10528 -
             C47217 * C10394) *
                C29625 +
            (C47134 * C8526 - C47216 * C8422 + C139873 * C11172 -
             C47217 * C11062) *
                C139899) *
               C139967 +
           ((C47134 * C2975 - C47216 * C2909 + C139873 * C6793 -
             C47217 * C6626) *
                C29624 +
            (C47134 * C3315 - C47216 * C3257 + C139873 * C7522 -
             C47217 * C7402) *
                C139984 +
            (C47134 * C7864 - C47216 * C7753 + C139873 * C10529 -
             C47217 * C10395) *
                C29625 +
            (C47134 * C8527 - C47216 * C8423 + C139873 * C11173 -
             C47217 * C11063) *
                C139899) *
               C139736) *
              C139809 * C2906) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eezz[76] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C29624 * C266 - C30126 * C108 - C29624 * C567 + C139984 * C702 +
             C29625 * C1741 - C30127 * C1570 - C29625 * C2074 +
             C139899 * C2230) *
                C47134 +
            (C39218 + C39219) * C139873) *
               C139967 +
           ((C30165 + C30166) * C47134 + C39200 * C139873) * C139736) *
              C139809 * C2904 -
          (((C39220 + C39221) * C139873 + C39209 * C47134) * C139736 +
           ((C42566 + C42567) * C139873 + (C39219 + C39218) * C47134) *
               C139967) *
              C139809 * C2905 +
          (((C42567 + C42566) * C47134 +
            (C29624 * C6908 - C30126 * C6627 - C29624 * C7401 +
             C139984 * C7629 + C29625 * C10630 - C30127 * C10394 -
             C29625 * C11062 + C139899 * C11272) *
                C139873) *
               C139967 +
           ((C39221 + C39220) * C47134 +
            (C29624 * C6909 - C30126 * C6626 - C29624 * C7402 +
             C139984 * C7628 + C29625 * C10631 - C30127 * C10395 -
             C29625 * C11063 + C139899 * C11273) *
                C139873) *
               C139736) *
              C139809 * C2906) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eexx[77] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C137755 * C114 - C67752 * C108 - C137755 * C115 + C139967 * C126 +
              C137748 * C116 - C67754 * C109 - C137748 * C117 +
              C139736 * C127) *
                 C139984 +
             (C77607 + C77608) * C139899) *
                C47134 +
            ((C68584 + C68585) * C139984 + C80877 * C139899) * C139873) *
               C1565 -
           (((C80891 + C80892) * C139899 + C80886 * C139984) * C139873 +
            ((C137748 * C5279 - C67754 * C5274 - C137748 * C5280 +
              C139736 * C5286 + C137755 * C5277 - C67752 * C5273 -
              C137755 * C5278 + C139967 * C5285) *
                 C139899 +
             (C77608 + C77607) * C139984) *
                C47134) *
               C140002) *
              C2322 +
          (((C80877 * C139984 + (C80892 + C80891) * C139899) * C47134 +
            ((C72108 + C72107) * C139984 +
             (C137755 * C13134 - C67752 * C13128 - C137755 * C13135 +
              C139967 * C13140 + C137748 * C13136 - C67754 * C13129 -
              C137748 * C13137 + C139736 * C13141) *
                 C139899) *
                C139873) *
               C140002 -
           (((C72107 + C72108) * C139899 + (C68587 + C68586) * C139984) *
                C139873 +
            (C80886 * C139899 + (C68585 + C68584) * C139984) * C47134) *
               C1565) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eexy[77] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47134 * C183 - C47216 * C108 + C139873 * C896 - C47217 * C813) *
                 C137755 +
             (C47134 * C189 - C47216 * C115 + C139873 * C901 - C47217 * C822) *
                 C139967 +
             (C47219 - C47220 + C47221 - C47222) * C137748 +
             (C47223 - C47224 + C47225 - C47226) * C139736) *
                C139984 +
            ((C61756 - C61757 + C61758 - C61759) * C137755 +
             (C61760 - C61761 + C61762 - C61763) * C139967 + C77749 * C137748 +
             C77750 * C139736) *
                C139899) *
               C1565 +
           (((C61757 - C61756 + C61759 - C61758) * C137755 +
             (C61761 - C61760 + C61763 - C61762) * C139967 + C77751 * C137748 +
             C77752 * C139736) *
                C139984 +
            ((C61765 - C61764 + C61767 - C61766) * C137755 +
             (C61769 - C61768 + C61771 - C61770) * C139967 +
             (C61772 - C61773 + C61774 - C61775) * C137748 +
             (C61776 - C61777 + C61778 - C61779) * C139736) *
                C139899) *
               C140002) *
              C2322 +
          ((((C47216 * C813 - C47134 * C896 + C47217 * C2908 -
              C139873 * C2974) *
                 C137755 +
             (C47216 * C822 - C47134 * C901 + C47217 * C2913 -
              C139873 * C2978) *
                 C139967 +
             (C48082 - C48083 + C48084 - C48085) * C137748 +
             (C48086 - C48087 + C48088 - C48089) * C139736) *
                C139984 +
            ((C64359 - C64360 + C64361 - C64362) * C137755 +
             (C64363 - C64364 + C64365 - C64366) * C139967 +
             (C76505 - C76506 + C76507 - C76508) * C137748 +
             (C76509 - C76510 + C76511 - C76512) * C139736) *
                C139899) *
               C1565 +
           (((C64360 - C64359 + C64362 - C64361) * C137755 +
             (C64364 - C64363 + C64366 - C64365) * C139967 +
             (C76506 - C76505 + C76508 - C76507) * C137748 +
             (C76510 - C76509 + C76512 - C76511) * C139736) *
                C139984 +
            ((C64368 - C64367 + C64370 - C64369) * C137755 +
             (C64372 - C64371 + C64374 - C64373) * C139967 +
             (C47134 * C13218 - C47216 * C13127 + C139873 * C13219 -
              C47217 * C13129) *
                 C137748 +
             (C47134 * C13222 - C47216 * C13133 + C139873 * C13223 -
              C47217 * C13137) *
                 C139736) *
                C139899) *
               C140002) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eexz[77] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C139984 * C266 - C29624 * C108 + C139899 * C1741 -
                        C29625 * C1570) *
                           C137755 +
                       (C139984 * C272 - C29624 * C115 + C139899 * C1746 -
                        C29625 * C1579) *
                           C139967 +
                       (C29627 - C29628 + C29629 - C29630) * C137748 +
                       (C29631 - C29632 + C29633 - C29634) * C139736) *
                          C47134 +
                      ((C38340 - C38341 + C38342 - C38343) * C137755 +
                       (C38344 - C38345 + C38346 - C38347) * C139967 +
                       C38364 * C137748 + C38365 * C139736) *
                          C139873) *
                         C1565 +
                     (((C29624 * C1570 - C139984 * C1741 + C29625 * C5273 -
                        C139899 * C5397) *
                           C137755 +
                       (C29624 * C1579 - C139984 * C1746 + C29625 * C5278 -
                        C139899 * C5401) *
                           C139967 +
                       (C31458 - C31459 + C31460 - C31461) * C137748 +
                       (C31462 - C31463 + C31464 - C31465) * C139736) *
                          C47134 +
                      ((C42968 - C42969 + C42970 - C42971) * C137755 +
                       (C42972 - C42973 + C42974 - C42975) * C139967 +
                       (C39640 - C39641 + C39642 - C39643) * C137748 +
                       (C39644 - C39645 + C39646 - C39647) * C139736) *
                          C139873) *
                         C140002) *
                        C2322 +
                    ((((C38341 - C38340 + C38343 - C38342) * C137755 +
                       (C38345 - C38344 + C38347 - C38346) * C139967 +
                       C38366 * C137748 + C38367 * C139736) *
                          C47134 +
                      ((C41954 - C41955 + C41956 - C41957) * C137755 +
                       (C41958 - C41959 + C41960 - C41961) * C139967 +
                       (C38356 - C38357 + C38358 - C38359) * C137748 +
                       (C38360 - C38361 + C38362 - C38363) * C139736) *
                          C139873) *
                         C1565 +
                     (((C42969 - C42968 + C42971 - C42970) * C137755 +
                       (C42973 - C42972 + C42975 - C42974) * C139967 +
                       (C39641 - C39640 + C39643 - C39642) * C137748 +
                       (C39645 - C39644 + C39647 - C39646) * C139736) *
                          C47134 +
                      ((C139984 * C7979 - C29624 * C7754 + C139899 * C13300 -
                        C29625 * C13128) *
                           C137755 +
                       (C139984 * C7982 - C29624 * C7759 + C139899 * C13304 -
                        C29625 * C13135) *
                           C139967 +
                       (C139984 * C7980 - C29624 * C7753 + C139899 * C13301 -
                        C29625 * C13129) *
                           C137748 +
                       (C139984 * C7983 - C29624 * C7757 + C139899 * C13305 -
                        C29625 * C13137) *
                           C139736) *
                          C139873) *
                         C140002) *
                        C140000) *
                   C139758) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[77] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C139967 * C114 - C137755 * C108 + C139736 * C116 -
                        C137748 * C109) *
                           C47216 +
                       (C139967 * C354 - C137755 * C348 + C139736 * C355 -
                        C137748 * C349) *
                           C47134 +
                       (C68898 - C68899 + C68900 - C68901) * C47217 +
                       (C68902 - C68903 + C68904 - C68905) * C139873) *
                          C139984 +
                      ((C78013 - C78014 + C78015 - C78016) * C47216 +
                       (C78017 - C78018 + C78019 - C78020) * C47134 +
                       C81299 * C47217 + C81300 * C139873) *
                          C139899) *
                         C1565 +
                     (((C78014 - C78013 + C78016 - C78015) * C47216 +
                       (C78018 - C78017 + C78020 - C78019) * C47134 +
                       C81301 * C47217 + C81302 * C139873) *
                          C139984 +
                      ((C137755 * C5273 - C139967 * C5277 + C137748 * C5274 -
                        C139736 * C5279) *
                           C47216 +
                       (C137755 * C5455 - C139967 * C5459 + C137748 * C5456 -
                        C139736 * C5460) *
                           C47134 +
                       (C81291 - C81292 + C81293 - C81294) * C47217 +
                       (C81295 - C81296 + C81297 - C81298) * C139873) *
                          C139899) *
                         C140002) *
                        C2322 +
                    ((((C68899 - C68898 + C68901 - C68900) * C47216 +
                       (C68903 - C68902 + C68905 - C68904) * C47134 +
                       (C68907 - C68906 + C68909 - C68908) * C47217 +
                       (C68911 - C68910 + C68913 - C68912) * C139873) *
                          C139984 +
                      (C81301 * C47216 + C81302 * C47134 +
                       (C72413 - C72414 + C72415 - C72416) * C47217 +
                       (C72417 - C72418 + C72419 - C72420) * C139873) *
                          C139899) *
                         C1565 +
                     ((C81299 * C47216 + C81300 * C47134 +
                       (C72414 - C72413 + C72416 - C72415) * C47217 +
                       (C72418 - C72417 + C72420 - C72419) * C139873) *
                          C139984 +
                      ((C81292 - C81291 + C81294 - C81293) * C47216 +
                       (C81296 - C81295 + C81298 - C81297) * C47134 +
                       (C139967 * C13134 - C137755 * C13128 + C139736 * C13136 -
                        C137748 * C13129) *
                           C47217 +
                       (C139967 * C13386 - C137755 * C13382 + C139736 * C13387 -
                        C137748 * C13383) *
                           C139873) *
                          C139899) *
                         C140002) *
                        C140000) *
                   C139758) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[77] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47216 * C183 - C47470 * C108 - C47216 * C348 + C47134 * C411 +
              C47217 * C896 - C47471 * C813 - C47217 * C1072 +
              C139873 * C1151) *
                 C139967 +
             (C47509 + C47510) * C139736) *
                C139984 +
            ((C62126 + C62127) * C139967 + C78159 * C139736) * C139899) *
               C1565 -
           (((C62131 + C62130) * C139736 + (C62129 + C62128) * C139967) *
                C139899 +
            (C78160 * C139736 + (C62127 + C62126) * C139967) * C139984) *
               C140002) *
              C2322 +
          ((((C64722 + C64723) * C139967 + (C76924 + C76923) * C139736) *
                C139984 +
            ((C64724 + C64725) * C139967 +
             (C47216 * C13218 - C47470 * C13127 - C47216 * C13381 +
              C47134 * C13464 + C47217 * C13219 - C47471 * C13129 -
              C47217 * C13383 + C139873 * C13465) *
                 C139736) *
                C139899) *
               C140002 -
           (((C76923 + C76924) * C139736 + (C64723 + C64722) * C139967) *
                C139899 +
            ((C48442 + C48443) * C139736 +
             (C47217 * C2974 - C47471 * C2908 - C47217 * C3090 +
              C139873 * C3148 + C47216 * C896 - C47470 * C813 - C47216 * C1072 +
              C47134 * C1151) *
                 C139967) *
                C139984) *
               C1565) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eeyz[77] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C139984 * C266 - C29624 * C108 + C139899 * C1741 -
                        C29625 * C1570) *
                           C47216 +
                       (C139984 * C495 - C29624 * C348 + C139899 * C1997 -
                        C29625 * C1829) *
                           C47134 +
                       (C38340 - C38341 + C38342 - C38343) * C47217 +
                       (C38780 - C38781 + C38782 - C38783) * C139873) *
                          C139967 +
                      ((C29627 - C29628 + C29629 - C29630) * C47216 +
                       (C29879 - C29880 + C29881 - C29882) * C47134 +
                       C38364 * C47217 + C38792 * C139873) *
                          C139736) *
                         C1565 +
                     (((C29624 * C1570 - C139984 * C1741 + C29625 * C5273 -
                        C139899 * C5397) *
                           C47216 +
                       (C29624 * C1829 - C139984 * C1997 + C29625 * C5455 -
                        C139899 * C5567) *
                           C47134 +
                       (C42968 - C42969 + C42970 - C42971) * C47217 +
                       (C43392 - C43393 + C43394 - C43395) * C139873) *
                          C139967 +
                      ((C31458 - C31459 + C31460 - C31461) * C47216 +
                       (C31798 - C31799 + C31800 - C31801) * C47134 +
                       (C39640 - C39641 + C39642 - C39643) * C47217 +
                       (C40068 - C40069 + C40070 - C40071) * C139873) *
                          C139736) *
                         C140002) *
                        C2322 +
                    ((((C38341 - C38340 + C38343 - C38342) * C47216 +
                       (C38781 - C38780 + C38783 - C38782) * C47134 +
                       (C41954 - C41955 + C41956 - C41957) * C47217 +
                       (C42256 - C42257 + C42258 - C42259) * C139873) *
                          C139967 +
                      (C38366 * C47216 + C38793 * C47134 +
                       (C38356 - C38357 + C38358 - C38359) * C47217 +
                       (C38788 - C38789 + C38790 - C38791) * C139873) *
                          C139736) *
                         C1565 +
                     (((C42969 - C42968 + C42971 - C42970) * C47216 +
                       (C43393 - C43392 + C43395 - C43394) * C47134 +
                       (C139984 * C7979 - C29624 * C7754 + C139899 * C13300 -
                        C29625 * C13128) *
                           C47217 +
                       (C139984 * C8317 - C29624 * C8091 + C139899 * C13541 -
                        C29625 * C13382) *
                           C139873) *
                          C139967 +
                      ((C39641 - C39640 + C39643 - C39642) * C47216 +
                       (C40069 - C40068 + C40071 - C40070) * C47134 +
                       (C139984 * C7980 - C29624 * C7753 + C139899 * C13301 -
                        C29625 * C13129) *
                           C47217 +
                       (C139984 * C8318 - C29624 * C8092 + C139899 * C13543 -
                        C29625 * C13383) *
                           C139873) *
                          C139736) *
                         C140002) *
                        C140000) *
                   C139758) /
                  (p * q * std::sqrt(p + q));
    d2eezx[77] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C139967 * C114 - C137755 * C108 + C139736 * C116 -
                        C137748 * C109) *
                           C29624 +
                       (C139967 * C573 - C137755 * C567 + C139736 * C574 -
                        C137748 * C568) *
                           C139984 +
                       (C78013 - C78014 + C78015 - C78016) * C29625 +
                       (C78421 - C78422 + C78423 - C78424) * C139899) *
                          C47134 +
                      ((C68898 - C68899 + C68900 - C68901) * C29624 +
                       (C69245 - C69246 + C69247 - C69248) * C139984 +
                       C81299 * C29625 + C81701 * C139899) *
                          C139873) *
                         C1565 +
                     (((C78014 - C78013 + C78016 - C78015) * C29624 +
                       (C78422 - C78421 + C78424 - C78423) * C139984 +
                       (C137755 * C5273 - C139967 * C5277 + C137748 * C5274 -
                        C139736 * C5279) *
                           C29625 +
                       (C137755 * C5621 - C139967 * C5625 + C137748 * C5622 -
                        C139736 * C5626) *
                           C139899) *
                          C47134 +
                      (C81301 * C29624 + C81702 * C139984 +
                       (C81291 - C81292 + C81293 - C81294) * C29625 +
                       (C81697 - C81698 + C81699 - C81700) * C139899) *
                          C139873) *
                         C140002) *
                        C2322 +
                    ((((C68899 - C68898 + C68901 - C68900) * C29624 +
                       (C69246 - C69245 + C69248 - C69247) * C139984 +
                       C81301 * C29625 + C81702 * C139899) *
                          C47134 +
                      ((C68907 - C68906 + C68909 - C68908) * C29624 +
                       (C69250 - C69249 + C69252 - C69251) * C139984 +
                       (C72413 - C72414 + C72415 - C72416) * C29625 +
                       (C72719 - C72720 + C72721 - C72722) * C139899) *
                          C139873) *
                         C1565 +
                     ((C81299 * C29624 + C81701 * C139984 +
                       (C81292 - C81291 + C81294 - C81293) * C29625 +
                       (C81698 - C81697 + C81700 - C81699) * C139899) *
                          C47134 +
                      ((C72414 - C72413 + C72416 - C72415) * C29624 +
                       (C72720 - C72719 + C72722 - C72721) * C139984 +
                       (C139967 * C13134 - C137755 * C13128 + C139736 * C13136 -
                        C137748 * C13129) *
                           C29625 +
                       (C139967 * C13624 - C137755 * C13620 + C139736 * C13625 -
                        C137748 * C13621) *
                           C139899) *
                          C139873) *
                         C140002) *
                        C140000) *
                   C139758) /
                  (p * q * std::sqrt(p + q));
    d2eezy[77] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47134 * C183 - C47216 * C108 + C139873 * C896 - C47217 * C813) *
                 C29624 +
             (C47134 * C629 - C47216 * C567 + C139873 * C1393 -
              C47217 * C1317) *
                 C139984 +
             (C61756 - C61757 + C61758 - C61759) * C29625 +
             (C62434 - C62435 + C62436 - C62437) * C139899) *
                C139967 +
            ((C47219 - C47220 + C47221 - C47222) * C29624 +
             (C47745 - C47746 + C47747 - C47748) * C139984 + C77749 * C29625 +
             C78563 * C139899) *
                C139736) *
               C1565 +
           (((C61757 - C61756 + C61759 - C61758) * C29624 +
             (C62435 - C62434 + C62437 - C62436) * C139984 +
             (C61765 - C61764 + C61767 - C61766) * C29625 +
             (C62439 - C62438 + C62441 - C62440) * C139899) *
                C139967 +
            (C77751 * C29624 + C78564 * C139984 +
             (C61772 - C61773 + C61774 - C61775) * C29625 +
             (C62442 - C62443 + C62444 - C62445) * C139899) *
                C139736) *
               C140002) *
              C2322 +
          ((((C47216 * C813 - C47134 * C896 + C47217 * C2908 -
              C139873 * C2974) *
                 C29624 +
             (C47216 * C1317 - C47134 * C1393 + C47217 * C3256 -
              C139873 * C3314) *
                 C139984 +
             (C64359 - C64360 + C64361 - C64362) * C29625 +
             (C65036 - C65037 + C65038 - C65039) * C139899) *
                C139967 +
            ((C48082 - C48083 + C48084 - C48085) * C29624 +
             (C48750 - C48751 + C48752 - C48753) * C139984 +
             (C76505 - C76506 + C76507 - C76508) * C29625 +
             (C77319 - C77320 + C77321 - C77322) * C139899) *
                C139736) *
               C1565 +
           (((C64360 - C64359 + C64362 - C64361) * C29624 +
             (C65037 - C65036 + C65039 - C65038) * C139984 +
             (C64368 - C64367 + C64370 - C64369) * C29625 +
             (C65041 - C65040 + C65043 - C65042) * C139899) *
                C139967 +
            ((C76506 - C76505 + C76508 - C76507) * C29624 +
             (C77320 - C77319 + C77322 - C77321) * C139984 +
             (C47134 * C13218 - C47216 * C13127 + C139873 * C13219 -
              C47217 * C13129) *
                 C29625 +
             (C47134 * C13702 - C47216 * C13619 + C139873 * C13703 -
              C47217 * C13621) *
                 C139899) *
                C139736) *
               C140002) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eezz[77] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C29624 * C266 - C30126 * C108 - C29624 * C567 + C139984 * C702 +
              C29625 * C1741 - C30127 * C1570 - C29625 * C2074 +
              C139899 * C2230) *
                 C47134 +
             (C39218 + C39219) * C139873) *
                C139967 +
            ((C30165 + C30166) * C47134 + C39200 * C139873) * C139736) *
               C1565 -
           (((C40488 + C40489) * C139873 + (C32139 + C32140) * C47134) *
                C139736 +
            ((C43808 + C43809) * C139873 +
             (C29625 * C5397 - C30127 * C5273 - C29625 * C5621 +
              C139899 * C5733 + C29624 * C1741 - C30126 * C1570 -
              C29624 * C2074 + C139984 * C2230) *
                 C47134) *
                C139967) *
               C140002) *
              C2322 +
          ((((C43809 + C43808) * C47134 +
             (C29624 * C7979 - C30126 * C7754 - C29624 * C8422 +
              C139984 * C8634 + C29625 * C13300 - C30127 * C13128 -
              C29625 * C13620 + C139899 * C13779) *
                 C139873) *
                C139967 +
            ((C40489 + C40488) * C47134 +
             (C29624 * C7980 - C30126 * C7753 - C29624 * C8423 +
              C139984 * C8633 + C29625 * C13301 - C30127 * C13129 -
              C29625 * C13621 + C139899 * C13781) *
                 C139873) *
                C139736) *
               C140002 -
           (((C39220 + C39221) * C139873 + C39209 * C47134) * C139736 +
            ((C42566 + C42567) * C139873 + (C39219 + C39218) * C47134) *
                C139967) *
               C1565) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eexx[78] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C137755 * C114 - C67752 * C108 - C137755 * C115 + C139967 * C126 +
              C137748 * C116 - C67754 * C109 - C137748 * C117 +
              C139736 * C127) *
                 C139984 +
             (C77607 + C77608) * C139899) *
                C47134 +
            ((C68584 + C68585) * C139984 + C80877 * C139899) * C139873) *
               C4096 -
           (((C80891 + C80892) * C139899 + C80886 * C139984) * C139873 +
            ((C137748 * C5279 - C67754 * C5274 - C137748 * C5280 +
              C139736 * C5286 + C137755 * C5277 - C67752 * C5273 -
              C137755 * C5278 + C139967 * C5285) *
                 C139899 +
             (C77608 + C77607) * C139984) *
                C47134) *
               C140002) *
              C139792 * C2324 +
          ((((C77609 + C77610) * C139984 +
             (C137755 * C5279 - C67752 * C5274 - C137755 * C5280 +
              C139967 * C5286 + C137748 * C5281 - C67754 * C5275 -
              C137748 * C5282 + C139736 * C5287) *
                 C139899) *
                C47134 +
            ((C76373 + C76374) * C139984 +
             (C137755 * C13132 - C67752 * C13127 - C137755 * C13133 +
              C139967 * C13139 + C137748 * C14660 - C67754 * C14659 -
              C137748 * C14661 + C139736 * C14662) *
                 C139899) *
                C139873) *
               C140002 -
           (((C76374 + C76373) * C139899 + (C68589 + C68588) * C139984) *
                C139873 +
            ((C77610 + C77609) * C139899 +
             (C137748 * C118 - C67754 * C110 - C137748 * C119 + C139736 * C128 +
              C137755 * C116 - C67752 * C109 - C137755 * C117 +
              C139967 * C127) *
                 C139984) *
                C47134) *
               C4096) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexy[78] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47134 * C183 - C47216 * C108 + C139873 * C896 - C47217 * C813) *
                 C137755 +
             (C47134 * C189 - C47216 * C115 + C139873 * C901 - C47217 * C822) *
                 C139967 +
             (C47219 - C47220 + C47221 - C47222) * C137748 +
             (C47223 - C47224 + C47225 - C47226) * C139736) *
                C139984 +
            ((C61756 - C61757 + C61758 - C61759) * C137755 +
             (C61760 - C61761 + C61762 - C61763) * C139967 + C77749 * C137748 +
             C77750 * C139736) *
                C139899) *
               C4096 +
           (((C61757 - C61756 + C61759 - C61758) * C137755 +
             (C61761 - C61760 + C61763 - C61762) * C139967 + C77751 * C137748 +
             C77752 * C139736) *
                C139984 +
            ((C61765 - C61764 + C61767 - C61766) * C137755 +
             (C61769 - C61768 + C61771 - C61770) * C139967 +
             (C61772 - C61773 + C61774 - C61775) * C137748 +
             (C61776 - C61777 + C61778 - C61779) * C139736) *
                C139899) *
               C140002) *
              C139792 * C2324 +
          ((((C47220 - C47219 + C47222 - C47221) * C137755 +
             (C47224 - C47223 + C47226 - C47225) * C139967 +
             (C47228 - C47227 + C47230 - C47229) * C137748 +
             (C47232 - C47231 + C47234 - C47233) * C139736) *
                C139984 +
            (C77751 * C137755 + C77752 * C139967 +
             (C49064 - C49065 + C49066 - C49067) * C137748 +
             (C49068 - C49069 + C49070 - C49071) * C139736) *
                C139899) *
               C4096 +
           ((C77749 * C137755 + C77750 * C139967 +
             (C49065 - C49064 + C49067 - C49066) * C137748 +
             (C49069 - C49068 + C49071 - C49070) * C139736) *
                C139984 +
            ((C61773 - C61772 + C61775 - C61774) * C137755 +
             (C61777 - C61776 + C61779 - C61778) * C139967 +
             (C47134 * C5341 - C47216 * C5275 + C139873 * C14761 -
              C47217 * C14659) *
                 C137748 +
             (C47134 * C5345 - C47216 * C5282 + C139873 * C14762 -
              C47217 * C14661) *
                 C139736) *
                C139899) *
               C140002) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexz[78] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C139984 * C266 - C29624 * C108 + C139899 * C1741 -
                        C29625 * C1570) *
                           C137755 +
                       (C139984 * C272 - C29624 * C115 + C139899 * C1746 -
                        C29625 * C1579) *
                           C139967 +
                       (C29627 - C29628 + C29629 - C29630) * C137748 +
                       (C29631 - C29632 + C29633 - C29634) * C139736) *
                          C47134 +
                      ((C38340 - C38341 + C38342 - C38343) * C137755 +
                       (C38344 - C38345 + C38346 - C38347) * C139967 +
                       C38364 * C137748 + C38365 * C139736) *
                          C139873) *
                         C4096 +
                     (((C29624 * C1570 - C139984 * C1741 + C29625 * C5273 -
                        C139899 * C5397) *
                           C137755 +
                       (C29624 * C1579 - C139984 * C1746 + C29625 * C5278 -
                        C139899 * C5401) *
                           C139967 +
                       (C31458 - C31459 + C31460 - C31461) * C137748 +
                       (C31462 - C31463 + C31464 - C31465) * C139736) *
                          C47134 +
                      ((C42968 - C42969 + C42970 - C42971) * C137755 +
                       (C42972 - C42973 + C42974 - C42975) * C139967 +
                       (C39640 - C39641 + C39642 - C39643) * C137748 +
                       (C39644 - C39645 + C39646 - C39647) * C139736) *
                          C139873) *
                         C140002) *
                        C139792 * C2324 +
                    ((((C29628 - C29627 + C29630 - C29629) * C137755 +
                       (C29632 - C29631 + C29634 - C29633) * C139967 +
                       (C29636 - C29635 + C29638 - C29637) * C137748 +
                       (C29640 - C29639 + C29642 - C29641) * C139736) *
                          C47134 +
                      (C38366 * C137755 + C38367 * C139967 +
                       (C30479 - C30480 + C30481 - C30482) * C137748 +
                       (C30483 - C30484 + C30485 - C30486) * C139736) *
                          C139873) *
                         C4096 +
                     (((C31459 - C31458 + C31461 - C31460) * C137755 +
                       (C31463 - C31462 + C31465 - C31464) * C139967 +
                       (C31467 - C31466 + C31469 - C31468) * C137748 +
                       (C31471 - C31470 + C31473 - C31472) * C139736) *
                          C47134 +
                      ((C39641 - C39640 + C39643 - C39642) * C137755 +
                       (C39645 - C39644 + C39647 - C39646) * C139967 +
                       (C139984 * C3596 - C29624 * C3440 + C139899 * C14869 -
                        C29625 * C14659) *
                           C137748 +
                       (C139984 * C3600 - C29624 * C3447 + C139899 * C14870 -
                        C29625 * C14661) *
                           C139736) *
                          C139873) *
                         C140002) *
                        C139792 * C139998)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[78] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C139967 * C114 - C137755 * C108 + C139736 * C116 -
                        C137748 * C109) *
                           C47216 +
                       (C139967 * C354 - C137755 * C348 + C139736 * C355 -
                        C137748 * C349) *
                           C47134 +
                       (C68898 - C68899 + C68900 - C68901) * C47217 +
                       (C68902 - C68903 + C68904 - C68905) * C139873) *
                          C139984 +
                      ((C78013 - C78014 + C78015 - C78016) * C47216 +
                       (C78017 - C78018 + C78019 - C78020) * C47134 +
                       C81299 * C47217 + C81300 * C139873) *
                          C139899) *
                         C4096 +
                     (((C78014 - C78013 + C78016 - C78015) * C47216 +
                       (C78018 - C78017 + C78020 - C78019) * C47134 +
                       C81301 * C47217 + C81302 * C139873) *
                          C139984 +
                      ((C137755 * C5273 - C139967 * C5277 + C137748 * C5274 -
                        C139736 * C5279) *
                           C47216 +
                       (C137755 * C5455 - C139967 * C5459 + C137748 * C5456 -
                        C139736 * C5460) *
                           C47134 +
                       (C81291 - C81292 + C81293 - C81294) * C47217 +
                       (C81295 - C81296 + C81297 - C81298) * C139873) *
                          C139899) *
                         C140002) *
                        C139792 * C2324 +
                    ((((C137755 * C109 - C139967 * C116 + C137748 * C110 -
                        C139736 * C118) *
                           C47216 +
                       (C137755 * C349 - C139967 * C355 + C137748 * C350 -
                        C139736 * C356) *
                           C47134 +
                       (C68914 - C68915 + C68916 - C68917) * C47217 +
                       (C68918 - C68919 + C68920 - C68921) * C139873) *
                          C139984 +
                      ((C78021 - C78022 + C78023 - C78024) * C47216 +
                       (C78025 - C78026 + C78027 - C78028) * C47134 +
                       (C76773 - C76774 + C76775 - C76776) * C47217 +
                       (C76777 - C76778 + C76779 - C76780) * C139873) *
                          C139899) *
                         C4096 +
                     (((C78022 - C78021 + C78024 - C78023) * C47216 +
                       (C78026 - C78025 + C78028 - C78027) * C47134 +
                       (C76774 - C76773 + C76776 - C76775) * C47217 +
                       (C76778 - C76777 + C76780 - C76779) * C139873) *
                          C139984 +
                      ((C139967 * C5279 - C137755 * C5274 + C139736 * C5281 -
                        C137748 * C5275) *
                           C47216 +
                       (C139967 * C5460 - C137755 * C5456 + C139736 * C5461 -
                        C137748 * C5457) *
                           C47134 +
                       (C139967 * C13132 - C137755 * C13127 + C139736 * C14660 -
                        C137748 * C14659) *
                           C47217 +
                       (C139967 * C13385 - C137755 * C13381 + C139736 * C14982 -
                        C137748 * C14981) *
                           C139873) *
                          C139899) *
                         C140002) *
                        C139792 * C139998)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[78] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47216 * C183 - C47470 * C108 - C47216 * C348 + C47134 * C411 +
              C47217 * C896 - C47471 * C813 - C47217 * C1072 +
              C139873 * C1151) *
                 C139967 +
             (C47509 + C47510) * C139736) *
                C139984 +
            ((C62126 + C62127) * C139967 + C78159 * C139736) * C139899) *
               C4096 -
           (((C62131 + C62130) * C139736 + (C62129 + C62128) * C139967) *
                C139899 +
            (C78160 * C139736 + (C62127 + C62126) * C139967) * C139984) *
               C140002) *
              C139792 * C2324 +
          (((C78159 * C139967 + (C49391 + C49390) * C139736) * C139984 +
            ((C62130 + C62131) * C139967 +
             (C47216 * C5341 - C47470 * C5275 - C47216 * C5457 +
              C47134 * C5515 + C47217 * C14761 - C47471 * C14659 -
              C47217 * C14981 + C139873 * C15081) *
                 C139736) *
                C139899) *
               C140002 -
           (((C49390 + C49391) * C139736 + C78160 * C139967) * C139899 +
            ((C47512 + C47511) * C139736 + (C47510 + C47509) * C139967) *
                C139984) *
               C4096) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[78] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C139984 * C266 - C29624 * C108 + C139899 * C1741 -
                        C29625 * C1570) *
                           C47216 +
                       (C139984 * C495 - C29624 * C348 + C139899 * C1997 -
                        C29625 * C1829) *
                           C47134 +
                       (C38340 - C38341 + C38342 - C38343) * C47217 +
                       (C38780 - C38781 + C38782 - C38783) * C139873) *
                          C139967 +
                      ((C29627 - C29628 + C29629 - C29630) * C47216 +
                       (C29879 - C29880 + C29881 - C29882) * C47134 +
                       C38364 * C47217 + C38792 * C139873) *
                          C139736) *
                         C4096 +
                     (((C29624 * C1570 - C139984 * C1741 + C29625 * C5273 -
                        C139899 * C5397) *
                           C47216 +
                       (C29624 * C1829 - C139984 * C1997 + C29625 * C5455 -
                        C139899 * C5567) *
                           C47134 +
                       (C42968 - C42969 + C42970 - C42971) * C47217 +
                       (C43392 - C43393 + C43394 - C43395) * C139873) *
                          C139967 +
                      ((C31458 - C31459 + C31460 - C31461) * C47216 +
                       (C31798 - C31799 + C31800 - C31801) * C47134 +
                       (C39640 - C39641 + C39642 - C39643) * C47217 +
                       (C40068 - C40069 + C40070 - C40071) * C139873) *
                          C139736) *
                         C140002) *
                        C139792 * C2324 +
                    ((((C29628 - C29627 + C29630 - C29629) * C47216 +
                       (C29880 - C29879 + C29882 - C29881) * C47134 +
                       C38366 * C47217 + C38793 * C139873) *
                          C139967 +
                      ((C29636 - C29635 + C29638 - C29637) * C47216 +
                       (C29885 - C29884 + C29887 - C29886) * C47134 +
                       (C30479 - C30480 + C30481 - C30482) * C47217 +
                       (C30792 - C30793 + C30794 - C30795) * C139873) *
                          C139736) *
                         C4096 +
                     (((C31459 - C31458 + C31461 - C31460) * C47216 +
                       (C31799 - C31798 + C31801 - C31800) * C47134 +
                       (C39641 - C39640 + C39643 - C39642) * C47217 +
                       (C40069 - C40068 + C40071 - C40070) * C139873) *
                          C139967 +
                      ((C31467 - C31466 + C31469 - C31468) * C47216 +
                       (C31803 - C31802 + C31805 - C31804) * C47134 +
                       (C139984 * C3596 - C29624 * C3440 + C139899 * C14869 -
                        C29625 * C14659) *
                           C47217 +
                       (C139984 * C3814 - C29624 * C3670 + C139899 * C15194 -
                        C29625 * C14981) *
                           C139873) *
                          C139736) *
                         C140002) *
                        C139792 * C139998)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[78] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C139967 * C114 - C137755 * C108 + C139736 * C116 -
                        C137748 * C109) *
                           C29624 +
                       (C139967 * C573 - C137755 * C567 + C139736 * C574 -
                        C137748 * C568) *
                           C139984 +
                       (C78013 - C78014 + C78015 - C78016) * C29625 +
                       (C78421 - C78422 + C78423 - C78424) * C139899) *
                          C47134 +
                      ((C68898 - C68899 + C68900 - C68901) * C29624 +
                       (C69245 - C69246 + C69247 - C69248) * C139984 +
                       C81299 * C29625 + C81701 * C139899) *
                          C139873) *
                         C4096 +
                     (((C78014 - C78013 + C78016 - C78015) * C29624 +
                       (C78422 - C78421 + C78424 - C78423) * C139984 +
                       (C137755 * C5273 - C139967 * C5277 + C137748 * C5274 -
                        C139736 * C5279) *
                           C29625 +
                       (C137755 * C5621 - C139967 * C5625 + C137748 * C5622 -
                        C139736 * C5626) *
                           C139899) *
                          C47134 +
                      (C81301 * C29624 + C81702 * C139984 +
                       (C81291 - C81292 + C81293 - C81294) * C29625 +
                       (C81697 - C81698 + C81699 - C81700) * C139899) *
                          C139873) *
                         C140002) *
                        C139792 * C2324 +
                    ((((C137755 * C109 - C139967 * C116 + C137748 * C110 -
                        C139736 * C118) *
                           C29624 +
                       (C137755 * C568 - C139967 * C574 + C137748 * C569 -
                        C139736 * C575) *
                           C139984 +
                       (C78021 - C78022 + C78023 - C78024) * C29625 +
                       (C78425 - C78426 + C78427 - C78428) * C139899) *
                          C47134 +
                      ((C68914 - C68915 + C68916 - C68917) * C29624 +
                       (C69253 - C69254 + C69255 - C69256) * C139984 +
                       (C76773 - C76774 + C76775 - C76776) * C29625 +
                       (C77185 - C77186 + C77187 - C77188) * C139899) *
                          C139873) *
                         C4096 +
                     (((C78022 - C78021 + C78024 - C78023) * C29624 +
                       (C78426 - C78425 + C78428 - C78427) * C139984 +
                       (C139967 * C5279 - C137755 * C5274 + C139736 * C5281 -
                        C137748 * C5275) *
                           C29625 +
                       (C139967 * C5626 - C137755 * C5622 + C139736 * C5627 -
                        C137748 * C5623) *
                           C139899) *
                          C47134 +
                      ((C76774 - C76773 + C76776 - C76775) * C29624 +
                       (C77186 - C77185 + C77188 - C77187) * C139984 +
                       (C139967 * C13132 - C137755 * C13127 + C139736 * C14660 -
                        C137748 * C14659) *
                           C29625 +
                       (C139967 * C13623 - C137755 * C13619 + C139736 * C15300 -
                        C137748 * C15299) *
                           C139899) *
                          C139873) *
                         C140002) *
                        C139792 * C139998)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[78] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47134 * C183 - C47216 * C108 + C139873 * C896 - C47217 * C813) *
                 C29624 +
             (C47134 * C629 - C47216 * C567 + C139873 * C1393 -
              C47217 * C1317) *
                 C139984 +
             (C61756 - C61757 + C61758 - C61759) * C29625 +
             (C62434 - C62435 + C62436 - C62437) * C139899) *
                C139967 +
            ((C47219 - C47220 + C47221 - C47222) * C29624 +
             (C47745 - C47746 + C47747 - C47748) * C139984 + C77749 * C29625 +
             C78563 * C139899) *
                C139736) *
               C4096 +
           (((C61757 - C61756 + C61759 - C61758) * C29624 +
             (C62435 - C62434 + C62437 - C62436) * C139984 +
             (C61765 - C61764 + C61767 - C61766) * C29625 +
             (C62439 - C62438 + C62441 - C62440) * C139899) *
                C139967 +
            (C77751 * C29624 + C78564 * C139984 +
             (C61772 - C61773 + C61774 - C61775) * C29625 +
             (C62442 - C62443 + C62444 - C62445) * C139899) *
                C139736) *
               C140002) *
              C139792 * C2324 +
          ((((C47220 - C47219 + C47222 - C47221) * C29624 +
             (C47746 - C47745 + C47748 - C47747) * C139984 + C77751 * C29625 +
             C78564 * C139899) *
                C139967 +
            ((C47228 - C47227 + C47230 - C47229) * C29624 +
             (C47751 - C47750 + C47753 - C47752) * C139984 +
             (C49064 - C49065 + C49066 - C49067) * C29625 +
             (C49692 - C49693 + C49694 - C49695) * C139899) *
                C139736) *
               C4096 +
           ((C77749 * C29624 + C78563 * C139984 +
             (C61773 - C61772 + C61775 - C61774) * C29625 +
             (C62443 - C62442 + C62445 - C62444) * C139899) *
                C139967 +
            ((C49065 - C49064 + C49067 - C49066) * C29624 +
             (C49693 - C49692 + C49695 - C49694) * C139984 +
             (C47134 * C5341 - C47216 * C5275 + C139873 * C14761 -
              C47217 * C14659) *
                 C29625 +
             (C47134 * C5681 - C47216 * C5623 + C139873 * C15399 -
              C47217 * C15299) *
                 C139899) *
                C139736) *
               C140002) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eezz[78] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C29624 * C266 - C30126 * C108 - C29624 * C567 + C139984 * C702 +
              C29625 * C1741 - C30127 * C1570 - C29625 * C2074 +
              C139899 * C2230) *
                 C47134 +
             (C39218 + C39219) * C139873) *
                C139967 +
            ((C30165 + C30166) * C47134 + C39200 * C139873) * C139736) *
               C4096 -
           (((C40488 + C40489) * C139873 + (C32139 + C32140) * C47134) *
                C139736 +
            ((C43808 + C43809) * C139873 +
             (C29625 * C5397 - C30127 * C5273 - C29625 * C5621 +
              C139899 * C5733 + C29624 * C1741 - C30126 * C1570 -
              C29624 * C2074 + C139984 * C2230) *
                 C47134) *
                C139967) *
               C140002) *
              C139792 * C2324 +
          ((((C32140 + C32139) * C47134 + (C40489 + C40488) * C139873) *
                C139967 +
            ((C32138 + C32137) * C47134 +
             (C29624 * C3596 - C30126 * C3440 - C29624 * C3884 +
              C139984 * C4028 + C29625 * C14869 - C30127 * C14659 -
              C29625 * C15299 + C139899 * C15502) *
                 C139873) *
                C139736) *
               C140002 -
           (((C31116 + C31117) * C139873 + (C30168 + C30167) * C47134) *
                C139736 +
            (C39209 * C139873 + (C30166 + C30165) * C47134) * C139967) *
               C4096) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexx[79] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C137755 * C114 - C67752 * C108 - C137755 * C115 + C139967 * C126 +
              C137748 * C116 - C67754 * C109 - C137748 * C117 +
              C139736 * C127) *
                 C139984 +
             (C77607 + C77608) * C139899) *
                C47134 +
            ((C68584 + C68585) * C139984 + C80877 * C139899) * C139873) *
               C4096 -
           (((C80891 + C80892) * C139899 + C80886 * C139984) * C139873 +
            ((C137748 * C5279 - C67754 * C5274 - C137748 * C5280 +
              C139736 * C5286 + C137755 * C5277 - C67752 * C5273 -
              C137755 * C5278 + C139967 * C5285) *
                 C139899 +
             (C77608 + C77607) * C139984) *
                C47134) *
               C140002) *
              C806 +
          (((C80877 * C139984 + (C80892 + C80891) * C139899) * C47134 +
            ((C72108 + C72107) * C139984 +
             (C137755 * C13134 - C67752 * C13128 - C137755 * C13135 +
              C139967 * C13140 + C137748 * C13136 - C67754 * C13129 -
              C137748 * C13137 + C139736 * C13141) *
                 C139899) *
                C139873) *
               C140002 -
           (((C72107 + C72108) * C139899 + (C68587 + C68586) * C139984) *
                C139873 +
            (C80886 * C139899 + (C68585 + C68584) * C139984) * C47134) *
               C4096) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eexy[79] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47134 * C183 - C47216 * C108 + C139873 * C896 - C47217 * C813) *
                 C137755 +
             (C47134 * C189 - C47216 * C115 + C139873 * C901 - C47217 * C822) *
                 C139967 +
             (C47219 - C47220 + C47221 - C47222) * C137748 +
             (C47223 - C47224 + C47225 - C47226) * C139736) *
                C139984 +
            ((C61756 - C61757 + C61758 - C61759) * C137755 +
             (C61760 - C61761 + C61762 - C61763) * C139967 + C77749 * C137748 +
             C77750 * C139736) *
                C139899) *
               C4096 +
           (((C61757 - C61756 + C61759 - C61758) * C137755 +
             (C61761 - C61760 + C61763 - C61762) * C139967 + C77751 * C137748 +
             C77752 * C139736) *
                C139984 +
            ((C61765 - C61764 + C61767 - C61766) * C137755 +
             (C61769 - C61768 + C61771 - C61770) * C139967 +
             (C61772 - C61773 + C61774 - C61775) * C137748 +
             (C61776 - C61777 + C61778 - C61779) * C139736) *
                C139899) *
               C140002) *
              C806 +
          ((((C47216 * C813 - C47134 * C896 + C47217 * C2908 -
              C139873 * C2974) *
                 C137755 +
             (C47216 * C822 - C47134 * C901 + C47217 * C2913 -
              C139873 * C2978) *
                 C139967 +
             (C48082 - C48083 + C48084 - C48085) * C137748 +
             (C48086 - C48087 + C48088 - C48089) * C139736) *
                C139984 +
            ((C64359 - C64360 + C64361 - C64362) * C137755 +
             (C64363 - C64364 + C64365 - C64366) * C139967 +
             (C76505 - C76506 + C76507 - C76508) * C137748 +
             (C76509 - C76510 + C76511 - C76512) * C139736) *
                C139899) *
               C4096 +
           (((C64360 - C64359 + C64362 - C64361) * C137755 +
             (C64364 - C64363 + C64366 - C64365) * C139967 +
             (C76506 - C76505 + C76508 - C76507) * C137748 +
             (C76510 - C76509 + C76512 - C76511) * C139736) *
                C139984 +
            ((C64368 - C64367 + C64370 - C64369) * C137755 +
             (C64372 - C64371 + C64374 - C64373) * C139967 +
             (C47134 * C13218 - C47216 * C13127 + C139873 * C13219 -
              C47217 * C13129) *
                 C137748 +
             (C47134 * C13222 - C47216 * C13133 + C139873 * C13223 -
              C47217 * C13137) *
                 C139736) *
                C139899) *
               C140002) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eexz[79] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C139984 * C266 - C29624 * C108 + C139899 * C1741 -
                        C29625 * C1570) *
                           C137755 +
                       (C139984 * C272 - C29624 * C115 + C139899 * C1746 -
                        C29625 * C1579) *
                           C139967 +
                       (C29627 - C29628 + C29629 - C29630) * C137748 +
                       (C29631 - C29632 + C29633 - C29634) * C139736) *
                          C47134 +
                      ((C38340 - C38341 + C38342 - C38343) * C137755 +
                       (C38344 - C38345 + C38346 - C38347) * C139967 +
                       C38364 * C137748 + C38365 * C139736) *
                          C139873) *
                         C4096 +
                     (((C29624 * C1570 - C139984 * C1741 + C29625 * C5273 -
                        C139899 * C5397) *
                           C137755 +
                       (C29624 * C1579 - C139984 * C1746 + C29625 * C5278 -
                        C139899 * C5401) *
                           C139967 +
                       (C31458 - C31459 + C31460 - C31461) * C137748 +
                       (C31462 - C31463 + C31464 - C31465) * C139736) *
                          C47134 +
                      ((C42968 - C42969 + C42970 - C42971) * C137755 +
                       (C42972 - C42973 + C42974 - C42975) * C139967 +
                       (C39640 - C39641 + C39642 - C39643) * C137748 +
                       (C39644 - C39645 + C39646 - C39647) * C139736) *
                          C139873) *
                         C140002) *
                        C806 +
                    ((((C38341 - C38340 + C38343 - C38342) * C137755 +
                       (C38345 - C38344 + C38347 - C38346) * C139967 +
                       C38366 * C137748 + C38367 * C139736) *
                          C47134 +
                      ((C41954 - C41955 + C41956 - C41957) * C137755 +
                       (C41958 - C41959 + C41960 - C41961) * C139967 +
                       (C38356 - C38357 + C38358 - C38359) * C137748 +
                       (C38360 - C38361 + C38362 - C38363) * C139736) *
                          C139873) *
                         C4096 +
                     (((C42969 - C42968 + C42971 - C42970) * C137755 +
                       (C42973 - C42972 + C42975 - C42974) * C139967 +
                       (C39641 - C39640 + C39643 - C39642) * C137748 +
                       (C39645 - C39644 + C39647 - C39646) * C139736) *
                          C47134 +
                      ((C139984 * C7979 - C29624 * C7754 + C139899 * C13300 -
                        C29625 * C13128) *
                           C137755 +
                       (C139984 * C7982 - C29624 * C7759 + C139899 * C13304 -
                        C29625 * C13135) *
                           C139967 +
                       (C139984 * C7980 - C29624 * C7753 + C139899 * C13301 -
                        C29625 * C13129) *
                           C137748 +
                       (C139984 * C7983 - C29624 * C7757 + C139899 * C13305 -
                        C29625 * C13137) *
                           C139736) *
                          C139873) *
                         C140002) *
                        C140000) *
                   C139758) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[79] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C139967 * C114 - C137755 * C108 + C139736 * C116 -
                        C137748 * C109) *
                           C47216 +
                       (C139967 * C354 - C137755 * C348 + C139736 * C355 -
                        C137748 * C349) *
                           C47134 +
                       (C68898 - C68899 + C68900 - C68901) * C47217 +
                       (C68902 - C68903 + C68904 - C68905) * C139873) *
                          C139984 +
                      ((C78013 - C78014 + C78015 - C78016) * C47216 +
                       (C78017 - C78018 + C78019 - C78020) * C47134 +
                       C81299 * C47217 + C81300 * C139873) *
                          C139899) *
                         C4096 +
                     (((C78014 - C78013 + C78016 - C78015) * C47216 +
                       (C78018 - C78017 + C78020 - C78019) * C47134 +
                       C81301 * C47217 + C81302 * C139873) *
                          C139984 +
                      ((C137755 * C5273 - C139967 * C5277 + C137748 * C5274 -
                        C139736 * C5279) *
                           C47216 +
                       (C137755 * C5455 - C139967 * C5459 + C137748 * C5456 -
                        C139736 * C5460) *
                           C47134 +
                       (C81291 - C81292 + C81293 - C81294) * C47217 +
                       (C81295 - C81296 + C81297 - C81298) * C139873) *
                          C139899) *
                         C140002) *
                        C806 +
                    ((((C68899 - C68898 + C68901 - C68900) * C47216 +
                       (C68903 - C68902 + C68905 - C68904) * C47134 +
                       (C68907 - C68906 + C68909 - C68908) * C47217 +
                       (C68911 - C68910 + C68913 - C68912) * C139873) *
                          C139984 +
                      (C81301 * C47216 + C81302 * C47134 +
                       (C72413 - C72414 + C72415 - C72416) * C47217 +
                       (C72417 - C72418 + C72419 - C72420) * C139873) *
                          C139899) *
                         C4096 +
                     ((C81299 * C47216 + C81300 * C47134 +
                       (C72414 - C72413 + C72416 - C72415) * C47217 +
                       (C72418 - C72417 + C72420 - C72419) * C139873) *
                          C139984 +
                      ((C81292 - C81291 + C81294 - C81293) * C47216 +
                       (C81296 - C81295 + C81298 - C81297) * C47134 +
                       (C139967 * C13134 - C137755 * C13128 + C139736 * C13136 -
                        C137748 * C13129) *
                           C47217 +
                       (C139967 * C13386 - C137755 * C13382 + C139736 * C13387 -
                        C137748 * C13383) *
                           C139873) *
                          C139899) *
                         C140002) *
                        C140000) *
                   C139758) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[79] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47216 * C183 - C47470 * C108 - C47216 * C348 + C47134 * C411 +
              C47217 * C896 - C47471 * C813 - C47217 * C1072 +
              C139873 * C1151) *
                 C139967 +
             (C47509 + C47510) * C139736) *
                C139984 +
            ((C62126 + C62127) * C139967 + C78159 * C139736) * C139899) *
               C4096 -
           (((C62131 + C62130) * C139736 + (C62129 + C62128) * C139967) *
                C139899 +
            (C78160 * C139736 + (C62127 + C62126) * C139967) * C139984) *
               C140002) *
              C806 +
          ((((C64722 + C64723) * C139967 + (C76924 + C76923) * C139736) *
                C139984 +
            ((C64724 + C64725) * C139967 +
             (C47216 * C13218 - C47470 * C13127 - C47216 * C13381 +
              C47134 * C13464 + C47217 * C13219 - C47471 * C13129 -
              C47217 * C13383 + C139873 * C13465) *
                 C139736) *
                C139899) *
               C140002 -
           (((C76923 + C76924) * C139736 + (C64723 + C64722) * C139967) *
                C139899 +
            ((C48442 + C48443) * C139736 +
             (C47217 * C2974 - C47471 * C2908 - C47217 * C3090 +
              C139873 * C3148 + C47216 * C896 - C47470 * C813 - C47216 * C1072 +
              C47134 * C1151) *
                 C139967) *
                C139984) *
               C4096) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eeyz[79] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C139984 * C266 - C29624 * C108 + C139899 * C1741 -
                        C29625 * C1570) *
                           C47216 +
                       (C139984 * C495 - C29624 * C348 + C139899 * C1997 -
                        C29625 * C1829) *
                           C47134 +
                       (C38340 - C38341 + C38342 - C38343) * C47217 +
                       (C38780 - C38781 + C38782 - C38783) * C139873) *
                          C139967 +
                      ((C29627 - C29628 + C29629 - C29630) * C47216 +
                       (C29879 - C29880 + C29881 - C29882) * C47134 +
                       C38364 * C47217 + C38792 * C139873) *
                          C139736) *
                         C4096 +
                     (((C29624 * C1570 - C139984 * C1741 + C29625 * C5273 -
                        C139899 * C5397) *
                           C47216 +
                       (C29624 * C1829 - C139984 * C1997 + C29625 * C5455 -
                        C139899 * C5567) *
                           C47134 +
                       (C42968 - C42969 + C42970 - C42971) * C47217 +
                       (C43392 - C43393 + C43394 - C43395) * C139873) *
                          C139967 +
                      ((C31458 - C31459 + C31460 - C31461) * C47216 +
                       (C31798 - C31799 + C31800 - C31801) * C47134 +
                       (C39640 - C39641 + C39642 - C39643) * C47217 +
                       (C40068 - C40069 + C40070 - C40071) * C139873) *
                          C139736) *
                         C140002) *
                        C806 +
                    ((((C38341 - C38340 + C38343 - C38342) * C47216 +
                       (C38781 - C38780 + C38783 - C38782) * C47134 +
                       (C41954 - C41955 + C41956 - C41957) * C47217 +
                       (C42256 - C42257 + C42258 - C42259) * C139873) *
                          C139967 +
                      (C38366 * C47216 + C38793 * C47134 +
                       (C38356 - C38357 + C38358 - C38359) * C47217 +
                       (C38788 - C38789 + C38790 - C38791) * C139873) *
                          C139736) *
                         C4096 +
                     (((C42969 - C42968 + C42971 - C42970) * C47216 +
                       (C43393 - C43392 + C43395 - C43394) * C47134 +
                       (C139984 * C7979 - C29624 * C7754 + C139899 * C13300 -
                        C29625 * C13128) *
                           C47217 +
                       (C139984 * C8317 - C29624 * C8091 + C139899 * C13541 -
                        C29625 * C13382) *
                           C139873) *
                          C139967 +
                      ((C39641 - C39640 + C39643 - C39642) * C47216 +
                       (C40069 - C40068 + C40071 - C40070) * C47134 +
                       (C139984 * C7980 - C29624 * C7753 + C139899 * C13301 -
                        C29625 * C13129) *
                           C47217 +
                       (C139984 * C8318 - C29624 * C8092 + C139899 * C13543 -
                        C29625 * C13383) *
                           C139873) *
                          C139736) *
                         C140002) *
                        C140000) *
                   C139758) /
                  (p * q * std::sqrt(p + q));
    d2eezx[79] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C139967 * C114 - C137755 * C108 + C139736 * C116 -
                        C137748 * C109) *
                           C29624 +
                       (C139967 * C573 - C137755 * C567 + C139736 * C574 -
                        C137748 * C568) *
                           C139984 +
                       (C78013 - C78014 + C78015 - C78016) * C29625 +
                       (C78421 - C78422 + C78423 - C78424) * C139899) *
                          C47134 +
                      ((C68898 - C68899 + C68900 - C68901) * C29624 +
                       (C69245 - C69246 + C69247 - C69248) * C139984 +
                       C81299 * C29625 + C81701 * C139899) *
                          C139873) *
                         C4096 +
                     (((C78014 - C78013 + C78016 - C78015) * C29624 +
                       (C78422 - C78421 + C78424 - C78423) * C139984 +
                       (C137755 * C5273 - C139967 * C5277 + C137748 * C5274 -
                        C139736 * C5279) *
                           C29625 +
                       (C137755 * C5621 - C139967 * C5625 + C137748 * C5622 -
                        C139736 * C5626) *
                           C139899) *
                          C47134 +
                      (C81301 * C29624 + C81702 * C139984 +
                       (C81291 - C81292 + C81293 - C81294) * C29625 +
                       (C81697 - C81698 + C81699 - C81700) * C139899) *
                          C139873) *
                         C140002) *
                        C806 +
                    ((((C68899 - C68898 + C68901 - C68900) * C29624 +
                       (C69246 - C69245 + C69248 - C69247) * C139984 +
                       C81301 * C29625 + C81702 * C139899) *
                          C47134 +
                      ((C68907 - C68906 + C68909 - C68908) * C29624 +
                       (C69250 - C69249 + C69252 - C69251) * C139984 +
                       (C72413 - C72414 + C72415 - C72416) * C29625 +
                       (C72719 - C72720 + C72721 - C72722) * C139899) *
                          C139873) *
                         C4096 +
                     ((C81299 * C29624 + C81701 * C139984 +
                       (C81292 - C81291 + C81294 - C81293) * C29625 +
                       (C81698 - C81697 + C81700 - C81699) * C139899) *
                          C47134 +
                      ((C72414 - C72413 + C72416 - C72415) * C29624 +
                       (C72720 - C72719 + C72722 - C72721) * C139984 +
                       (C139967 * C13134 - C137755 * C13128 + C139736 * C13136 -
                        C137748 * C13129) *
                           C29625 +
                       (C139967 * C13624 - C137755 * C13620 + C139736 * C13625 -
                        C137748 * C13621) *
                           C139899) *
                          C139873) *
                         C140002) *
                        C140000) *
                   C139758) /
                  (p * q * std::sqrt(p + q));
    d2eezy[79] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47134 * C183 - C47216 * C108 + C139873 * C896 - C47217 * C813) *
                 C29624 +
             (C47134 * C629 - C47216 * C567 + C139873 * C1393 -
              C47217 * C1317) *
                 C139984 +
             (C61756 - C61757 + C61758 - C61759) * C29625 +
             (C62434 - C62435 + C62436 - C62437) * C139899) *
                C139967 +
            ((C47219 - C47220 + C47221 - C47222) * C29624 +
             (C47745 - C47746 + C47747 - C47748) * C139984 + C77749 * C29625 +
             C78563 * C139899) *
                C139736) *
               C4096 +
           (((C61757 - C61756 + C61759 - C61758) * C29624 +
             (C62435 - C62434 + C62437 - C62436) * C139984 +
             (C61765 - C61764 + C61767 - C61766) * C29625 +
             (C62439 - C62438 + C62441 - C62440) * C139899) *
                C139967 +
            (C77751 * C29624 + C78564 * C139984 +
             (C61772 - C61773 + C61774 - C61775) * C29625 +
             (C62442 - C62443 + C62444 - C62445) * C139899) *
                C139736) *
               C140002) *
              C806 +
          ((((C47216 * C813 - C47134 * C896 + C47217 * C2908 -
              C139873 * C2974) *
                 C29624 +
             (C47216 * C1317 - C47134 * C1393 + C47217 * C3256 -
              C139873 * C3314) *
                 C139984 +
             (C64359 - C64360 + C64361 - C64362) * C29625 +
             (C65036 - C65037 + C65038 - C65039) * C139899) *
                C139967 +
            ((C48082 - C48083 + C48084 - C48085) * C29624 +
             (C48750 - C48751 + C48752 - C48753) * C139984 +
             (C76505 - C76506 + C76507 - C76508) * C29625 +
             (C77319 - C77320 + C77321 - C77322) * C139899) *
                C139736) *
               C4096 +
           (((C64360 - C64359 + C64362 - C64361) * C29624 +
             (C65037 - C65036 + C65039 - C65038) * C139984 +
             (C64368 - C64367 + C64370 - C64369) * C29625 +
             (C65041 - C65040 + C65043 - C65042) * C139899) *
                C139967 +
            ((C76506 - C76505 + C76508 - C76507) * C29624 +
             (C77320 - C77319 + C77322 - C77321) * C139984 +
             (C47134 * C13218 - C47216 * C13127 + C139873 * C13219 -
              C47217 * C13129) *
                 C29625 +
             (C47134 * C13702 - C47216 * C13619 + C139873 * C13703 -
              C47217 * C13621) *
                 C139899) *
                C139736) *
               C140002) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eezz[79] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C29624 * C266 - C30126 * C108 - C29624 * C567 + C139984 * C702 +
              C29625 * C1741 - C30127 * C1570 - C29625 * C2074 +
              C139899 * C2230) *
                 C47134 +
             (C39218 + C39219) * C139873) *
                C139967 +
            ((C30165 + C30166) * C47134 + C39200 * C139873) * C139736) *
               C4096 -
           (((C40488 + C40489) * C139873 + (C32139 + C32140) * C47134) *
                C139736 +
            ((C43808 + C43809) * C139873 +
             (C29625 * C5397 - C30127 * C5273 - C29625 * C5621 +
              C139899 * C5733 + C29624 * C1741 - C30126 * C1570 -
              C29624 * C2074 + C139984 * C2230) *
                 C47134) *
                C139967) *
               C140002) *
              C806 +
          ((((C43809 + C43808) * C47134 +
             (C29624 * C7979 - C30126 * C7754 - C29624 * C8422 +
              C139984 * C8634 + C29625 * C13300 - C30127 * C13128 -
              C29625 * C13620 + C139899 * C13779) *
                 C139873) *
                C139967 +
            ((C40489 + C40488) * C47134 +
             (C29624 * C7980 - C30126 * C7753 - C29624 * C8423 +
              C139984 * C8633 + C29625 * C13301 - C30127 * C13129 -
              C29625 * C13621 + C139899 * C13781) *
                 C139873) *
                C139736) *
               C140002 -
           (((C39220 + C39221) * C139873 + C39209 * C47134) * C139736 +
            ((C42566 + C42567) * C139873 + (C39219 + C39218) * C47134) *
                C139967) *
               C4096) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eexx[80] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C137755 * C114 - C67752 * C108 - C137755 * C115 + C139967 * C126 +
             C137748 * C116 - C67754 * C109 - C137748 * C117 + C139736 * C127) *
                C139984 +
            (C77607 + C77608) * C139899) *
               C47134 +
           ((C68584 + C68585) * C139984 + C80877 * C139899) * C139873) *
              C5270 -
          (((C80891 + C80892) * C139899 + C80886 * C139984) * C139873 +
           ((C84413 + C84414) * C139899 + (C77608 + C77607) * C139984) *
               C47134) *
              C5271 +
          (((C84414 + C84413) * C139984 +
            (C137755 * C15627 - C67752 * C15623 - C137755 * C15628 +
             C139967 * C15632 + C137748 * C15625 - C67754 * C15622 -
             C137748 * C15626 + C139736 * C15631) *
                C139899) *
               C47134 +
           ((C80892 + C80891) * C139984 +
            (C137755 * C18304 - C67752 * C18302 - C137755 * C18305 +
             C139967 * C18308 + C137748 * C18306 - C67754 * C18303 -
             C137748 * C18307 + C139736 * C18309) *
                C139899) *
               C139873) *
              C5272) *
         C139792 * C139758) /
        (p * q * std::sqrt(p + q));
    d2eexy[80] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47134 * C183 - C47216 * C108 + C139873 * C896 - C47217 * C813) *
                C137755 +
            (C47134 * C189 - C47216 * C115 + C139873 * C901 - C47217 * C822) *
                C139967 +
            (C47219 - C47220 + C47221 - C47222) * C137748 +
            (C47223 - C47224 + C47225 - C47226) * C139736) *
               C139984 +
           ((C61756 - C61757 + C61758 - C61759) * C137755 +
            (C61760 - C61761 + C61762 - C61763) * C139967 + C77749 * C137748 +
            C77750 * C139736) *
               C139899) *
              C5270 +
          (((C61757 - C61756 + C61759 - C61758) * C137755 +
            (C61761 - C61760 + C61763 - C61762) * C139967 + C77751 * C137748 +
            C77752 * C139736) *
               C139984 +
           ((C61765 - C61764 + C61767 - C61766) * C137755 +
            (C61769 - C61768 + C61771 - C61770) * C139967 +
            (C61772 - C61773 + C61774 - C61775) * C137748 +
            (C61776 - C61777 + C61778 - C61779) * C139736) *
               C139899) *
              C5271 +
          ((C67101 * C137755 + C67102 * C139967 +
            (C61773 - C61772 + C61775 - C61774) * C137748 +
            (C61777 - C61776 + C61779 - C61778) * C139736) *
               C139984 +
           ((C67094 - C67093 + C67096 - C67095) * C137755 +
            (C67098 - C67097 + C67100 - C67099) * C139967 +
            (C47134 * C15789 - C47216 * C15622 + C139873 * C18423 -
             C47217 * C18303) *
                C137748 +
            (C47134 * C15792 - C47216 * C15626 + C139873 * C18425 -
             C47217 * C18307) *
                C139736) *
               C139899) *
              C5272) *
         C139792 * C139758) /
        (p * q * std::sqrt(p + q));
    d2eexz[80] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C139984 * C266 - C29624 * C108 + C139899 * C1741 -
                       C29625 * C1570) *
                          C137755 +
                      (C139984 * C272 - C29624 * C115 + C139899 * C1746 -
                       C29625 * C1579) *
                          C139967 +
                      (C29627 - C29628 + C29629 - C29630) * C137748 +
                      (C29631 - C29632 + C29633 - C29634) * C139736) *
                         C47134 +
                     ((C38340 - C38341 + C38342 - C38343) * C137755 +
                      (C38344 - C38345 + C38346 - C38347) * C139967 +
                      C38364 * C137748 + C38365 * C139736) *
                         C139873) *
                        C5270 +
                    (((C29624 * C1570 - C139984 * C1741 + C29625 * C5273 -
                       C139899 * C5397) *
                          C137755 +
                      (C29624 * C1579 - C139984 * C1746 + C29625 * C5278 -
                       C139899 * C5401) *
                          C139967 +
                      (C31458 - C31459 + C31460 - C31461) * C137748 +
                      (C31462 - C31463 + C31464 - C31465) * C139736) *
                         C47134 +
                     ((C42968 - C42969 + C42970 - C42971) * C137755 +
                      (C42972 - C42973 + C42974 - C42975) * C139967 +
                      (C39640 - C39641 + C39642 - C39643) * C137748 +
                      (C39644 - C39645 + C39646 - C39647) * C139736) *
                         C139873) *
                        C5271 +
                    (((C139984 * C5397 - C29624 * C5273 + C139899 * C15912 -
                       C29625 * C15623) *
                          C137755 +
                      (C139984 * C5401 - C29624 * C5278 + C139899 * C15915 -
                       C29625 * C15628) *
                          C139967 +
                      (C139984 * C5398 - C29624 * C5274 + C139899 * C15913 -
                       C29625 * C15622) *
                          C137748 +
                      (C139984 * C5402 - C29624 * C5280 + C139899 * C15916 -
                       C29625 * C15626) *
                          C139736) *
                         C47134 +
                     ((C139984 * C13298 - C29624 * C13126 + C139899 * C18532 -
                       C29625 * C18302) *
                          C137755 +
                      (C139984 * C13302 - C29624 * C13131 + C139899 * C18534 -
                       C29625 * C18305) *
                          C139967 +
                      (C139984 * C13299 - C29624 * C13127 + C139899 * C18533 -
                       C29625 * C18303) *
                          C137748 +
                      (C139984 * C13303 - C29624 * C13133 + C139899 * C18535 -
                       C29625 * C18307) *
                          C139736) *
                         C139873) *
                        C5272) *
                   C139792 * C139758) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[80] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C139967 * C114 - C137755 * C108 + C139736 * C116 -
                       C137748 * C109) *
                          C47216 +
                      (C139967 * C354 - C137755 * C348 + C139736 * C355 -
                       C137748 * C349) *
                          C47134 +
                      (C68898 - C68899 + C68900 - C68901) * C47217 +
                      (C68902 - C68903 + C68904 - C68905) * C139873) *
                         C139984 +
                     ((C78013 - C78014 + C78015 - C78016) * C47216 +
                      (C78017 - C78018 + C78019 - C78020) * C47134 +
                      C81299 * C47217 + C81300 * C139873) *
                         C139899) *
                        C5270 +
                    (((C78014 - C78013 + C78016 - C78015) * C47216 +
                      (C78018 - C78017 + C78020 - C78019) * C47134 +
                      C81301 * C47217 + C81302 * C139873) *
                         C139984 +
                     ((C84709 - C84710 + C84711 - C84712) * C47216 +
                      (C84713 - C84714 + C84715 - C84716) * C47134 +
                      (C81291 - C81292 + C81293 - C81294) * C47217 +
                      (C81295 - C81296 + C81297 - C81298) * C139873) *
                         C139899) *
                        C5271 +
                    (((C84710 - C84709 + C84712 - C84711) * C47216 +
                      (C84714 - C84713 + C84716 - C84715) * C47134 +
                      (C81292 - C81291 + C81294 - C81293) * C47217 +
                      (C81296 - C81295 + C81298 - C81297) * C139873) *
                         C139984 +
                     ((C139967 * C15627 - C137755 * C15623 + C139736 * C15625 -
                       C137748 * C15622) *
                          C47216 +
                      (C139967 * C16031 - C137755 * C16028 + C139736 * C16032 -
                       C137748 * C16029) *
                          C47134 +
                      (C139967 * C18304 - C137755 * C18302 + C139736 * C18306 -
                       C137748 * C18303) *
                          C47217 +
                      (C139967 * C18636 - C137755 * C18634 + C139736 * C18637 -
                       C137748 * C18635) *
                          C139873) *
                         C139899) *
                        C5272) *
                   C139792 * C139758) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[80] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47216 * C183 - C47470 * C108 - C47216 * C348 + C47134 * C411 +
             C47217 * C896 - C47471 * C813 - C47217 * C1072 + C139873 * C1151) *
                C139967 +
            (C47509 + C47510) * C139736) *
               C139984 +
           ((C62126 + C62127) * C139967 + C78159 * C139736) * C139899) *
              C5270 -
          (((C62131 + C62130) * C139736 + (C62129 + C62128) * C139967) *
               C139899 +
           (C78160 * C139736 + (C62127 + C62126) * C139967) * C139984) *
              C5271 +
          ((C67346 * C139967 + (C62130 + C62131) * C139736) * C139984 +
           ((C67361 + C67360) * C139967 +
            (C47216 * C15789 - C47470 * C15622 - C47216 * C16029 +
             C47134 * C16164 + C47217 * C18423 - C47471 * C18303 -
             C47217 * C18635 + C139873 * C18745) *
                C139736) *
               C139899) *
              C5272) *
         C139792 * C139758) /
        (p * q * std::sqrt(p + q));
    d2eeyz[80] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C139984 * C266 - C29624 * C108 + C139899 * C1741 -
                       C29625 * C1570) *
                          C47216 +
                      (C139984 * C495 - C29624 * C348 + C139899 * C1997 -
                       C29625 * C1829) *
                          C47134 +
                      (C38340 - C38341 + C38342 - C38343) * C47217 +
                      (C38780 - C38781 + C38782 - C38783) * C139873) *
                         C139967 +
                     ((C29627 - C29628 + C29629 - C29630) * C47216 +
                      (C29879 - C29880 + C29881 - C29882) * C47134 +
                      C38364 * C47217 + C38792 * C139873) *
                         C139736) *
                        C5270 +
                    (((C29624 * C1570 - C139984 * C1741 + C29625 * C5273 -
                       C139899 * C5397) *
                          C47216 +
                      (C29624 * C1829 - C139984 * C1997 + C29625 * C5455 -
                       C139899 * C5567) *
                          C47134 +
                      (C42968 - C42969 + C42970 - C42971) * C47217 +
                      (C43392 - C43393 + C43394 - C43395) * C139873) *
                         C139967 +
                     ((C31458 - C31459 + C31460 - C31461) * C47216 +
                      (C31798 - C31799 + C31800 - C31801) * C47134 +
                      (C39640 - C39641 + C39642 - C39643) * C47217 +
                      (C40068 - C40069 + C40070 - C40071) * C139873) *
                         C139736) *
                        C5271 +
                    (((C139984 * C5397 - C29624 * C5273 + C139899 * C15912 -
                       C29625 * C15623) *
                          C47216 +
                      (C139984 * C5567 - C29624 * C5455 + C139899 * C16294 -
                       C29625 * C16028) *
                          C47134 +
                      (C139984 * C13298 - C29624 * C13126 + C139899 * C18532 -
                       C29625 * C18302) *
                          C47217 +
                      (C139984 * C13540 - C29624 * C13380 + C139899 * C18862 -
                       C29625 * C18634) *
                          C139873) *
                         C139967 +
                     ((C139984 * C5398 - C29624 * C5274 + C139899 * C15913 -
                       C29625 * C15622) *
                          C47216 +
                      (C139984 * C5568 - C29624 * C5456 + C139899 * C16295 -
                       C29625 * C16029) *
                          C47134 +
                      (C139984 * C13299 - C29624 * C13127 + C139899 * C18533 -
                       C29625 * C18303) *
                          C47217 +
                      (C139984 * C13542 - C29624 * C13381 + C139899 * C18863 -
                       C29625 * C18635) *
                          C139873) *
                         C139736) *
                        C5272) *
                   C139792 * C139758) /
                  (p * q * std::sqrt(p + q));
    d2eezx[80] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C139967 * C114 - C137755 * C108 + C139736 * C116 -
                       C137748 * C109) *
                          C29624 +
                      (C139967 * C573 - C137755 * C567 + C139736 * C574 -
                       C137748 * C568) *
                          C139984 +
                      (C78013 - C78014 + C78015 - C78016) * C29625 +
                      (C78421 - C78422 + C78423 - C78424) * C139899) *
                         C47134 +
                     ((C68898 - C68899 + C68900 - C68901) * C29624 +
                      (C69245 - C69246 + C69247 - C69248) * C139984 +
                      C81299 * C29625 + C81701 * C139899) *
                         C139873) *
                        C5270 +
                    (((C78014 - C78013 + C78016 - C78015) * C29624 +
                      (C78422 - C78421 + C78424 - C78423) * C139984 +
                      (C84709 - C84710 + C84711 - C84712) * C29625 +
                      (C85011 - C85012 + C85013 - C85014) * C139899) *
                         C47134 +
                     (C81301 * C29624 + C81702 * C139984 +
                      (C81291 - C81292 + C81293 - C81294) * C29625 +
                      (C81697 - C81698 + C81699 - C81700) * C139899) *
                         C139873) *
                        C5271 +
                    (((C84710 - C84709 + C84712 - C84711) * C29624 +
                      (C85012 - C85011 + C85014 - C85013) * C139984 +
                      (C139967 * C15627 - C137755 * C15623 + C139736 * C15625 -
                       C137748 * C15622) *
                          C29625 +
                      (C139967 * C16404 - C137755 * C16401 + C139736 * C16405 -
                       C137748 * C16402) *
                          C139899) *
                         C47134 +
                     ((C81292 - C81291 + C81294 - C81293) * C29624 +
                      (C81698 - C81697 + C81700 - C81699) * C139984 +
                      (C139967 * C18304 - C137755 * C18302 + C139736 * C18306 -
                       C137748 * C18303) *
                          C29625 +
                      (C139967 * C18964 - C137755 * C18962 + C139736 * C18965 -
                       C137748 * C18963) *
                          C139899) *
                         C139873) *
                        C5272) *
                   C139792 * C139758) /
                  (p * q * std::sqrt(p + q));
    d2eezy[80] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47134 * C183 - C47216 * C108 + C139873 * C896 - C47217 * C813) *
                C29624 +
            (C47134 * C629 - C47216 * C567 + C139873 * C1393 - C47217 * C1317) *
                C139984 +
            (C61756 - C61757 + C61758 - C61759) * C29625 +
            (C62434 - C62435 + C62436 - C62437) * C139899) *
               C139967 +
           ((C47219 - C47220 + C47221 - C47222) * C29624 +
            (C47745 - C47746 + C47747 - C47748) * C139984 + C77749 * C29625 +
            C78563 * C139899) *
               C139736) *
              C5270 +
          (((C61757 - C61756 + C61759 - C61758) * C29624 +
            (C62435 - C62434 + C62437 - C62436) * C139984 +
            (C61765 - C61764 + C61767 - C61766) * C29625 +
            (C62439 - C62438 + C62441 - C62440) * C139899) *
               C139967 +
           (C77751 * C29624 + C78564 * C139984 +
            (C61772 - C61773 + C61774 - C61775) * C29625 +
            (C62442 - C62443 + C62444 - C62445) * C139899) *
               C139736) *
              C5271 +
          ((C67101 * C29624 + C67597 * C139984 +
            (C67094 - C67093 + C67096 - C67095) * C29625 +
            (C67594 - C67593 + C67596 - C67595) * C139899) *
               C139967 +
           ((C61773 - C61772 + C61775 - C61774) * C29624 +
            (C62443 - C62442 + C62445 - C62444) * C139984 +
            (C47134 * C15789 - C47216 * C15622 + C139873 * C18423 -
             C47217 * C18303) *
                C29625 +
            (C47134 * C16522 - C47216 * C16402 + C139873 * C19069 -
             C47217 * C18963) *
                C139899) *
               C139736) *
              C5272) *
         C139792 * C139758) /
        (p * q * std::sqrt(p + q));
    d2eezz[80] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C29624 * C266 - C30126 * C108 - C29624 * C567 + C139984 * C702 +
             C29625 * C1741 - C30127 * C1570 - C29625 * C2074 +
             C139899 * C2230) *
                C47134 +
            (C39218 + C39219) * C139873) *
               C139967 +
           ((C30165 + C30166) * C47134 + C39200 * C139873) * C139736) *
              C5270 -
          (((C40488 + C40489) * C139873 + (C32139 + C32140) * C47134) *
               C139736 +
           ((C43808 + C43809) * C139873 +
            (C29625 * C5397 - C30127 * C5273 - C29625 * C5621 +
             C139899 * C5733 + C29624 * C1741 - C30126 * C1570 -
             C29624 * C2074 + C139984 * C2230) *
                C47134) *
               C139967) *
              C5271 +
          (((C29624 * C5397 - C30126 * C5273 - C29624 * C5621 +
             C139984 * C5733 + C29625 * C15912 - C30127 * C15623 -
             C29625 * C16401 + C139899 * C16633) *
                C47134 +
            (C29624 * C13298 - C30126 * C13126 - C29624 * C13618 +
             C139984 * C13778 + C29625 * C18532 - C30127 * C18302 -
             C29625 * C18962 + C139899 * C19172) *
                C139873) *
               C139967 +
           ((C29624 * C5398 - C30126 * C5274 - C29624 * C5622 +
             C139984 * C5734 + C29625 * C15913 - C30127 * C15622 -
             C29625 * C16402 + C139899 * C16632) *
                C47134 +
            (C29624 * C13299 - C30126 * C13127 - C29624 * C13619 +
             C139984 * C13780 + C29625 * C18533 - C30127 * C18303 -
             C29625 * C18963 + C139899 * C19173) *
                C139873) *
               C139736) *
              C5272) *
         C139792 * C139758) /
        (p * q * std::sqrt(p + q));
    d2eexx[81] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C47136 * C114 - C47137 * C108 - C47136 * C115 + C47131 * C126 +
            C47138 * C116 - C47139 * C109 - C47138 * C117 + C47132 * C127 +
            C47140 * C118 - C47141 * C110 - C47140 * C119 + C47133 * C128) *
               C139835 * C47134 +
           (C47136 * C821 - C47137 * C813 - C47136 * C822 + C47131 * C828 +
            C47138 * C819 - C47139 * C812 - C47138 * C820 + C47132 * C827 +
            C47140 * C817 - C47141 * C811 - C47140 * C818 + C47133 * C826) *
               C139835 * C139873) *
              C139809 * C139792 * C97 -
          ((C47140 * C815 - C47141 * C810 - C47140 * C816 + C47133 * C825 +
            C47138 * C817 - C47139 * C811 - C47138 * C818 + C47132 * C826 +
            C47136 * C819 - C47137 * C812 - C47136 * C820 + C47131 * C827) *
               C139835 * C139873 +
           (C47140 * C120 - C47141 * C111 - C47140 * C121 + C47133 * C129 +
            C47138 * C118 - C47139 * C110 - C47138 * C119 + C47132 * C128 +
            C47136 * C116 - C47137 * C109 - C47136 * C117 + C47131 * C127) *
               C139835 * C47134) *
              C139809 * C139792 * C98 +
          ((C47136 * C118 - C47137 * C110 - C47136 * C119 + C47131 * C128 +
            C47138 * C120 - C47139 * C111 - C47138 * C121 + C47132 * C129 +
            C47140 * C122 - C47141 * C112 - C47140 * C123 + C47133 * C130) *
               C139835 * C47134 +
           (C47136 * C817 - C47137 * C811 - C47136 * C818 + C47131 * C826 +
            C47138 * C815 - C47139 * C810 - C47138 * C816 + C47132 * C825 +
            C47140 * C823 - C47141 * C814 - C47140 * C824 + C47133 * C829) *
               C139835 * C139873) *
              C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C54790 * C114 - C54791 * C108 - C54790 * C115 + C139731 * C126) *
               C139835 * C54786 +
           (C54790 * C821 - C54791 * C813 - C54790 * C822 + C139731 * C828) *
               C139835 * C54787 +
           (C54790 * C2912 - C54791 * C2908 - C54790 * C2913 +
            C139731 * C2920) *
               C139835 * C54788 +
           (C54790 * C6631 - C54791 * C6627 - C54790 * C6632 +
            C139731 * C6636) *
               C139835 * C54789) *
              C139809 * C139792 * C97 -
          ((C54790 * C6629 - C54791 * C6626 - C54790 * C6630 +
            C139731 * C6635) *
               C139835 * C54789 +
           (C54790 * C2914 - C54791 * C2909 - C54790 * C2915 +
            C139731 * C2921) *
               C139835 * C54788 +
           (C54790 * C819 - C54791 * C812 - C54790 * C820 + C139731 * C827) *
               C139835 * C54787 +
           (C54790 * C116 - C54791 * C109 - C54790 * C117 + C139731 * C127) *
               C139835 * C54786) *
              C139809 * C139792 * C98 +
          ((C54790 * C118 - C54791 * C110 - C54790 * C119 + C139731 * C128) *
               C139835 * C54786 +
           (C54790 * C817 - C54791 * C811 - C54790 * C818 + C139731 * C826) *
               C139835 * C54787 +
           (C54790 * C2916 - C54791 * C2910 - C54790 * C2917 +
            C139731 * C2922) *
               C139835 * C54788 +
           (C54790 * C6633 - C54791 * C6628 - C54790 * C6634 +
            C139731 * C6637) *
               C139835 * C54789) *
              C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eexy[81] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C47134 * C183 - C47216 * C108 + C139873 * C896 - C47217 * C813) *
               C47136 +
           (C47134 * C189 - C47216 * C115 + C139873 * C901 - C47217 * C822) *
               C47131 +
           (C47219 - C47220 + C47221 - C47222) * C47138 +
           (C47223 - C47224 + C47225 - C47226) * C47132 + C47247 * C47140 +
           C47248 * C47133) *
              C139835 * C139809 * C139792 * C97 +
          ((C47220 - C47219 + C47222 - C47221) * C47136 +
           (C47224 - C47223 + C47226 - C47225) * C47131 +
           (C47228 - C47227 + C47230 - C47229) * C47138 +
           (C47232 - C47231 + C47234 - C47233) * C47132 +
           (C47235 - C47236 + C47237 - C47238) * C47140 +
           (C47239 - C47240 + C47241 - C47242) * C47133) *
              C139835 * C139809 * C139792 * C98 +
          (C47247 * C47136 + C47248 * C47131 +
           (C47236 - C47235 + C47238 - C47237) * C47138 +
           (C47240 - C47239 + C47242 - C47241) * C47132 +
           (C47134 * C187 - C47216 * C112 + C139873 * C900 - C47217 * C814) *
               C47140 +
           (C47134 * C193 - C47216 * C123 + C139873 * C905 - C47217 * C824) *
               C47133) *
              C139835 * C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C54786 * C183 - C54842 * C108 + C54787 * C896 - C54843 * C813 +
            C54788 * C2974 - C54844 * C2908 + C54789 * C6792 - C54845 * C6627) *
               C54790 +
           (C54786 * C189 - C54842 * C115 + C54787 * C901 - C54843 * C822 +
            C54788 * C2978 - C54844 * C2913 + C54789 * C6795 - C54845 * C6632) *
               C139731) *
              C139835 * C139809 * C139792 * C97 +
          ((C54842 * C109 - C54786 * C184 + C54843 * C812 - C54787 * C897 +
            C54844 * C2909 - C54788 * C2975 + C54845 * C6626 - C54789 * C6793) *
               C54790 +
           (C54842 * C117 - C54786 * C190 + C54843 * C820 - C54787 * C902 +
            C54844 * C2915 - C54788 * C2979 + C54845 * C6630 - C54789 * C6796) *
               C139731) *
              C139835 * C139809 * C139792 * C98 +
          ((C54786 * C185 - C54842 * C110 + C54787 * C898 - C54843 * C811 +
            C54788 * C2976 - C54844 * C2910 + C54789 * C6794 - C54845 * C6628) *
               C54790 +
           (C54786 * C191 - C54842 * C119 + C54787 * C903 - C54843 * C818 +
            C54788 * C2980 - C54844 * C2917 + C54789 * C6797 - C54845 * C6634) *
               C139731) *
              C139835 * C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eexz[81] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C139835 * C266 - C265 * C108) * C47136 +
            (C139835 * C272 - C265 * C115) * C47131 + (C279 - C280) * C47138 +
            (C281 - C282) * C47132 + C295 * C47140 + C296 * C47133) *
               C47134 +
           ((C6915 - C6916) * C47136 + (C6917 - C6918) * C47131 +
            C6919 * C47138 + C6920 * C47132 + C21967 * C47140 +
            C21968 * C47133) *
               C139873) *
              C139809 * C139792 * C97 +
          (((C280 - C279) * C47136 + (C282 - C281) * C47131 +
            (C284 - C283) * C47138 + (C286 - C285) * C47132 +
            (C288 - C287) * C47140 + (C290 - C289) * C47133) *
               C47134 +
           (C6927 * C47136 + C6928 * C47131 + C22843 * C47138 +
            C22844 * C47132 + (C1003 - C1004) * C47140 +
            (C1005 - C1006) * C47133) *
               C139873) *
              C139809 * C139792 * C98 +
          ((C295 * C47136 + C296 * C47131 + C297 * C47138 + C298 * C47132 +
            (C292 - C291) * C47140 + (C294 - C293) * C47133) *
               C47134 +
           (C21967 * C47136 + C21968 * C47131 + (C1004 - C1003) * C47138 +
            (C1006 - C1005) * C47132 + (C139835 * C988 - C265 * C814) * C47140 +
            (C139835 * C993 - C265 * C824) * C47133) *
               C139873) *
              C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C139835 * C266 - C265 * C108) * C54790 +
            (C139835 * C272 - C265 * C115) * C139731) *
               C54786 +
           ((C6915 - C6916) * C54790 + (C6917 - C6918) * C139731) * C54787 +
           (C9790 * C54790 + C9791 * C139731) * C54788 +
           ((C9795 - C9794) * C54790 + (C9797 - C9796) * C139731) * C54789) *
              C139809 * C139792 * C97 +
          (((C280 - C279) * C54790 + (C282 - C281) * C139731) * C54786 +
           (C6927 * C54790 + C6928 * C139731) * C54787 +
           (C6929 * C54790 + C6930 * C139731) * C54788 +
           ((C6931 - C6932) * C54790 + (C6933 - C6934) * C139731) * C54789) *
              C139809 * C139792 * C98 +
          ((C295 * C54790 + C296 * C139731) * C54786 +
           (C21967 * C54790 + C21968 * C139731) * C54787 +
           ((C6001 - C6000) * C54790 + (C6003 - C6002) * C139731) * C54788 +
           ((C139835 * C6910 - C265 * C6628) * C54790 +
            (C139835 * C6913 - C265 * C6634) * C139731) *
               C54789) *
              C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[81] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C47131 * C114 - C47136 * C108 + C47132 * C116 -
                      C47138 * C109 + C47133 * C118 - C47140 * C110) *
                         C47216 +
                     (C47131 * C354 - C47136 * C348 + C47132 * C355 -
                      C47138 * C349 + C47133 * C356 - C47140 * C350) *
                         C47134 +
                     (C47131 * C821 - C47136 * C813 + C47132 * C819 -
                      C47138 * C812 + C47133 * C817 - C47140 * C811) *
                         C47217 +
                     (C47131 * C1077 - C47136 * C1072 + C47132 * C1078 -
                      C47138 * C1073 + C47133 * C1079 - C47140 * C1074) *
                         C139873) *
                        C139835 * C139809 * C139792 * C97 +
                    ((C47136 * C109 - C47131 * C116 + C47138 * C110 -
                      C47132 * C118 + C47140 * C111 - C47133 * C120) *
                         C47216 +
                     (C47136 * C349 - C47131 * C355 + C47138 * C350 -
                      C47132 * C356 + C47140 * C351 - C47133 * C357) *
                         C47134 +
                     (C47136 * C812 - C47131 * C819 + C47138 * C811 -
                      C47132 * C817 + C47140 * C810 - C47133 * C815) *
                         C47217 +
                     (C47136 * C1073 - C47131 * C1078 + C47138 * C1074 -
                      C47132 * C1079 + C47140 * C1075 - C47133 * C1080) *
                         C139873) *
                        C139835 * C139809 * C139792 * C98 +
                    ((C47131 * C118 - C47136 * C110 + C47132 * C120 -
                      C47138 * C111 + C47133 * C122 - C47140 * C112) *
                         C47216 +
                     (C47131 * C356 - C47136 * C350 + C47132 * C357 -
                      C47138 * C351 + C47133 * C358 - C47140 * C352) *
                         C47134 +
                     (C47131 * C817 - C47136 * C811 + C47132 * C815 -
                      C47138 * C810 + C47133 * C823 - C47140 * C814) *
                         C47217 +
                     (C47131 * C1079 - C47136 * C1074 + C47132 * C1080 -
                      C47138 * C1075 + C47133 * C1081 - C47140 * C1076) *
                         C139873) *
                        C139835 * C139809 * C139792 * C99)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C139731 * C114 - C54790 * C108) * C54842 +
                     (C139731 * C354 - C54790 * C348) * C54786 +
                     (C139731 * C821 - C54790 * C813) * C54843 +
                     (C139731 * C1077 - C54790 * C1072) * C54787 +
                     (C139731 * C2912 - C54790 * C2908) * C54844 +
                     (C139731 * C3094 - C54790 * C3090) * C54788 +
                     (C139731 * C6631 - C54790 * C6627) * C54845 +
                     (C139731 * C7035 - C54790 * C7032) * C54789) *
                        C139835 * C139809 * C139792 * C97 +
                    ((C54790 * C109 - C139731 * C116) * C54842 +
                     (C54790 * C349 - C139731 * C355) * C54786 +
                     (C54790 * C812 - C139731 * C819) * C54843 +
                     (C54790 * C1073 - C139731 * C1078) * C54787 +
                     (C54790 * C2909 - C139731 * C2914) * C54844 +
                     (C54790 * C3091 - C139731 * C3095) * C54788 +
                     (C54790 * C6626 - C139731 * C6629) * C54845 +
                     (C54790 * C7033 - C139731 * C7036) * C54789) *
                        C139835 * C139809 * C139792 * C98 +
                    ((C139731 * C118 - C54790 * C110) * C54842 +
                     (C139731 * C356 - C54790 * C350) * C54786 +
                     (C139731 * C817 - C54790 * C811) * C54843 +
                     (C139731 * C1079 - C54790 * C1074) * C54787 +
                     (C139731 * C2916 - C54790 * C2910) * C54844 +
                     (C139731 * C3096 - C54790 * C3092) * C54788 +
                     (C139731 * C6633 - C54790 * C6628) * C54845 +
                     (C139731 * C7037 - C54790 * C7034) * C54789) *
                        C139835 * C139809 * C139792 * C99)) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[81] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C47216 * C183 - C47470 * C108 - C47216 * C348 + C47134 * C411 +
            C47217 * C896 - C47471 * C813 - C47217 * C1072 + C139873 * C1151) *
               C47131 +
           (C47509 + C47510) * C47132 + C47515 * C47133) *
              C139835 * C139809 * C139792 * C97 -
          ((C47513 + C47514) * C47133 + (C47512 + C47511) * C47132 +
           (C47510 + C47509) * C47131) *
              C139835 * C139809 * C139792 * C98 +
          (C47515 * C47131 + (C47514 + C47513) * C47132 +
           (C47216 * C187 - C47470 * C112 - C47216 * C352 + C47134 * C415 +
            C47217 * C900 - C47471 * C814 - C47217 * C1076 + C139873 * C1152) *
               C47133) *
              C139835 * C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((C54842 * C183 - C54996 * C108 - C54842 * C348 + C54786 * C411 +
           C54843 * C896 - C54997 * C813 - C54843 * C1072 + C54787 * C1151 +
           C54844 * C2974 - C54998 * C2908 - C54844 * C3090 + C54788 * C3148 +
           C54845 * C6792 - C54999 * C6627 - C54845 * C7032 + C54789 * C7169) *
              C139731 * C139835 * C139809 * C139792 * C97 -
          (C54845 * C6793 - C54999 * C6626 - C54845 * C7033 + C54789 * C7168 +
           C54844 * C2975 - C54998 * C2909 - C54844 * C3091 + C54788 * C3149 +
           C54843 * C897 - C54997 * C812 - C54843 * C1073 + C54787 * C1150 +
           C54842 * C184 - C54996 * C109 - C54842 * C349 + C54786 * C412) *
              C139731 * C139835 * C139809 * C139792 * C98 +
          (C54842 * C185 - C54996 * C110 - C54842 * C350 + C54786 * C413 +
           C54843 * C898 - C54997 * C811 - C54843 * C1074 + C54787 * C1149 +
           C54844 * C2976 - C54998 * C2910 - C54844 * C3092 + C54788 * C3150 +
           C54845 * C6794 - C54999 * C6628 - C54845 * C7034 + C54789 * C7170) *
              C139731 * C139835 * C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[81] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C139835 * C266 - C265 * C108) * C47216 +
            (C139835 * C495 - C265 * C348) * C47134 + (C6915 - C6916) * C47217 +
            (C7294 - C7295) * C139873) *
               C47131 +
           ((C279 - C280) * C47216 + (C502 - C503) * C47134 + C6919 * C47217 +
            C7298 * C139873) *
               C47132 +
           C47596 * C47133) *
              C139809 * C139792 * C97 +
          (((C280 - C279) * C47216 + (C503 - C502) * C47134 + C6927 * C47217 +
            C7300 * C139873) *
               C47131 +
           ((C284 - C283) * C47216 + (C506 - C505) * C47134 + C22843 * C47217 +
            C23191 * C139873) *
               C47132 +
           ((C288 - C287) * C47216 + (C509 - C508) * C47134 +
            (C1003 - C1004) * C47217 + (C1250 - C1251) * C139873) *
               C47133) *
              C139809 * C139792 * C98 +
          (C47596 * C47131 +
           (C297 * C47216 + C513 * C47134 + (C1004 - C1003) * C47217 +
            (C1251 - C1250) * C139873) *
               C47132 +
           ((C292 - C291) * C47216 + (C511 - C510) * C47134 +
            (C139835 * C988 - C265 * C814) * C47217 +
            (C139835 * C1244 - C265 * C1076) * C139873) *
               C47133) *
              C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C139835 * C266 - C265 * C108) * C54842 +
           (C139835 * C495 - C265 * C348) * C54786 + (C6915 - C6916) * C54843 +
           (C7294 - C7295) * C54787 + C9790 * C54844 + C10047 * C54788 +
           (C9795 - C9794) * C54845 + (C10049 - C10048) * C54789) *
              C139731 * C139809 * C139792 * C97 +
          ((C280 - C279) * C54842 + (C503 - C502) * C54786 + C6927 * C54843 +
           C7300 * C54787 + C6929 * C54844 + C7301 * C54788 +
           (C6931 - C6932) * C54845 + (C7302 - C7303) * C54789) *
              C139731 * C139809 * C139792 * C98 +
          (C295 * C54842 + C512 * C54786 + C21967 * C54843 + C22239 * C54787 +
           (C6001 - C6000) * C54844 + (C6274 - C6273) * C54788 +
           (C139835 * C6910 - C265 * C6628) * C54845 +
           (C139835 * C7292 - C265 * C7034) * C54789) *
              C139731 * C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eezx[81] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C47131 * C114 - C47136 * C108 + C47132 * C116 -
                       C47138 * C109 + C47133 * C118 - C47140 * C110) *
                          C265 +
                      (C47131 * C573 - C47136 * C567 + C47132 * C574 -
                       C47138 * C568 + C47133 * C575 - C47140 * C569) *
                          C139835) *
                         C47134 +
                     ((C47131 * C821 - C47136 * C813 + C47132 * C819 -
                       C47138 * C812 + C47133 * C817 - C47140 * C811) *
                          C265 +
                      (C47131 * C1322 - C47136 * C1317 + C47132 * C1323 -
                       C47138 * C1318 + C47133 * C1324 - C47140 * C1319) *
                          C139835) *
                         C139873) *
                        C139809 * C139792 * C97 +
                    (((C47136 * C109 - C47131 * C116 + C47138 * C110 -
                       C47132 * C118 + C47140 * C111 - C47133 * C120) *
                          C265 +
                      (C47136 * C568 - C47131 * C574 + C47138 * C569 -
                       C47132 * C575 + C47140 * C570 - C47133 * C576) *
                          C139835) *
                         C47134 +
                     ((C47136 * C812 - C47131 * C819 + C47138 * C811 -
                       C47132 * C817 + C47140 * C810 - C47133 * C815) *
                          C265 +
                      (C47136 * C1318 - C47131 * C1323 + C47138 * C1319 -
                       C47132 * C1324 + C47140 * C1320 - C47133 * C1325) *
                          C139835) *
                         C139873) *
                        C139809 * C139792 * C98 +
                    (((C47131 * C118 - C47136 * C110 + C47132 * C120 -
                       C47138 * C111 + C47133 * C122 - C47140 * C112) *
                          C265 +
                      (C47131 * C575 - C47136 * C569 + C47132 * C576 -
                       C47138 * C570 + C47133 * C577 - C47140 * C571) *
                          C139835) *
                         C47134 +
                     ((C47131 * C817 - C47136 * C811 + C47132 * C815 -
                       C47138 * C810 + C47133 * C823 - C47140 * C814) *
                          C265 +
                      (C47131 * C1324 - C47136 * C1319 + C47132 * C1325 -
                       C47138 * C1320 + C47133 * C1326 - C47140 * C1321) *
                          C139835) *
                         C139873) *
                        C139809 * C139792 * C99)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C139731 * C114 - C54790 * C108) * C265 +
                      (C139731 * C573 - C54790 * C567) * C139835) *
                         C54786 +
                     ((C139731 * C821 - C54790 * C813) * C265 +
                      (C139731 * C1322 - C54790 * C1317) * C139835) *
                         C54787 +
                     ((C139731 * C2912 - C54790 * C2908) * C265 +
                      (C139731 * C3260 - C54790 * C3256) * C139835) *
                         C54788 +
                     ((C139731 * C6631 - C54790 * C6627) * C265 +
                      (C139731 * C7404 - C54790 * C7401) * C139835) *
                         C54789) *
                        C139809 * C139792 * C97 +
                    (((C54790 * C109 - C139731 * C116) * C265 +
                      (C54790 * C568 - C139731 * C574) * C139835) *
                         C54786 +
                     ((C54790 * C812 - C139731 * C819) * C265 +
                      (C54790 * C1318 - C139731 * C1323) * C139835) *
                         C54787 +
                     ((C54790 * C2909 - C139731 * C2914) * C265 +
                      (C54790 * C3257 - C139731 * C3261) * C139835) *
                         C54788 +
                     ((C54790 * C6626 - C139731 * C6629) * C265 +
                      (C54790 * C7402 - C139731 * C7405) * C139835) *
                         C54789) *
                        C139809 * C139792 * C98 +
                    (((C139731 * C118 - C54790 * C110) * C265 +
                      (C139731 * C575 - C54790 * C569) * C139835) *
                         C54786 +
                     ((C139731 * C817 - C54790 * C811) * C265 +
                      (C139731 * C1324 - C54790 * C1319) * C139835) *
                         C54787 +
                     ((C139731 * C2916 - C54790 * C2910) * C265 +
                      (C139731 * C3262 - C54790 * C3258) * C139835) *
                         C54788 +
                     ((C139731 * C6633 - C54790 * C6628) * C265 +
                      (C139731 * C7406 - C54790 * C7403) * C139835) *
                         C54789) *
                        C139809 * C139792 * C99)) /
                      (p * q * std::sqrt(p + q));
    d2eezy[81] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47134 * C183 - C47216 * C108 + C139873 * C896 - C47217 * C813) *
                C265 +
            (C47134 * C629 - C47216 * C567 + C139873 * C1393 - C47217 * C1317) *
                C139835) *
               C47131 +
           ((C47219 - C47220 + C47221 - C47222) * C265 +
            (C47745 - C47746 + C47747 - C47748) * C139835) *
               C47132 +
           C47762 * C47133) *
              C139809 * C139792 * C97 +
          (((C47220 - C47219 + C47222 - C47221) * C265 +
            (C47746 - C47745 + C47748 - C47747) * C139835) *
               C47131 +
           ((C47228 - C47227 + C47230 - C47229) * C265 +
            (C47751 - C47750 + C47753 - C47752) * C139835) *
               C47132 +
           ((C47235 - C47236 + C47237 - C47238) * C265 +
            (C47754 - C47755 + C47756 - C47757) * C139835) *
               C47133) *
              C139809 * C139792 * C98 +
          (C47762 * C47131 +
           ((C47236 - C47235 + C47238 - C47237) * C265 +
            (C47755 - C47754 + C47757 - C47756) * C139835) *
               C47132 +
           ((C47134 * C187 - C47216 * C112 + C139873 * C900 - C47217 * C814) *
                C265 +
            (C47134 * C633 - C47216 * C571 + C139873 * C1397 - C47217 * C1321) *
                C139835) *
               C47133) *
              C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C54786 * C183 - C54842 * C108 + C54787 * C896 - C54843 * C813 +
            C54788 * C2974 - C54844 * C2908 + C54789 * C6792 - C54845 * C6627) *
               C265 +
           (C54786 * C629 - C54842 * C567 + C54787 * C1393 - C54843 * C1317 +
            C54788 * C3314 - C54844 * C3256 + C54789 * C7521 - C54845 * C7401) *
               C139835) *
              C139731 * C139809 * C139792 * C97 +
          ((C54842 * C109 - C54786 * C184 + C54843 * C812 - C54787 * C897 +
            C54844 * C2909 - C54788 * C2975 + C54845 * C6626 - C54789 * C6793) *
               C265 +
           (C54842 * C568 - C54786 * C630 + C54843 * C1318 - C54787 * C1394 +
            C54844 * C3257 - C54788 * C3315 + C54845 * C7402 - C54789 * C7522) *
               C139835) *
              C139731 * C139809 * C139792 * C98 +
          ((C54786 * C185 - C54842 * C110 + C54787 * C898 - C54843 * C811 +
            C54788 * C2976 - C54844 * C2910 + C54789 * C6794 - C54845 * C6628) *
               C265 +
           (C54786 * C631 - C54842 * C569 + C54787 * C1395 - C54843 * C1319 +
            C54788 * C3316 - C54844 * C3258 + C54789 * C7523 - C54845 * C7403) *
               C139835) *
              C139731 * C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eezz[81] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C265 * C266 - C701 * C108 - C265 * C567 + C139835 * C702) *
                C47134 +
            C7652 * C139873) *
               C47131 +
           (C47837 + C47838) * C47132 + C47843 * C47133) *
              C139809 * C139792 * C97 -
          ((C47841 + C47842) * C47133 + (C47840 + C47839) * C47132 +
           (C47838 + C47837) * C47131) *
              C139809 * C139792 * C98 +
          (C47843 * C47131 + (C47842 + C47841) * C47132 +
           (C736 * C47134 +
            (C265 * C988 - C701 * C814 - C265 * C1321 + C139835 * C1474) *
                C139873) *
               C47133) *
              C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C265 * C266 - C701 * C108 - C265 * C567 + C139835 * C702) * C54786 +
           C7652 * C54787 + C7653 * C54788 + C10296 * C54789) *
              C139731 * C139809 * C139792 * C97 -
          (C7654 * C54789 + C6525 * C54788 + C1496 * C54787 + C733 * C54786) *
              C139731 * C139809 * C139792 * C98 +
          (C734 * C54786 + C1495 * C54787 + C6526 * C54788 +
           (C265 * C6910 - C701 * C6628 - C265 * C7403 + C139835 * C7630) *
               C54789) *
              C139731 * C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eexx[82] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47136 * C114 - C47137 * C108 - C47136 * C115 + C47131 * C126 +
             C47138 * C116 - C47139 * C109 - C47138 * C117 + C47132 * C127 +
             C47140 * C118 - C47141 * C110 - C47140 * C119 + C47133 * C128) *
                C139835 * C47134 +
            (C47978 + C47979 + C47980) * C139835 * C139873) *
               C139809 * C806 -
           ((C47140 * C2916 - C47141 * C2910 - C47140 * C2917 + C47133 * C2922 +
             C47138 * C2914 - C47139 * C2909 - C47138 * C2915 + C47132 * C2921 +
             C47136 * C2912 - C47137 * C2908 - C47136 * C2913 +
             C47131 * C2920) *
                C139835 * C139873 +
            (C47980 + C47979 + C47978) * C139835 * C47134) *
               C139809 * C140000) *
              C808 +
          (((C47981 + C47982 + C47983) * C139835 * C47134 +
            (C47136 * C2914 - C47137 * C2909 - C47136 * C2915 + C47131 * C2921 +
             C47138 * C2916 - C47139 * C2910 - C47138 * C2917 + C47132 * C2922 +
             C47140 * C2918 - C47141 * C2911 - C47140 * C2919 +
             C47133 * C2923) *
                C139835 * C139873) *
               C139809 * C140000 -
           ((C47983 + C47982 + C47981) * C139835 * C139873 +
            (C47140 * C120 - C47141 * C111 - C47140 * C121 + C47133 * C129 +
             C47138 * C118 - C47139 * C110 - C47138 * C119 + C47132 * C128 +
             C47136 * C116 - C47137 * C109 - C47136 * C117 + C47131 * C127) *
                C139835 * C47134) *
               C139809 * C806) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C54790 * C114 - C54791 * C108 - C54790 * C115 + C139731 * C126) *
                C139835 * C54786 +
            C55309 * C54787 + C55310 * C54788 + C55311 * C54789) *
               C139809 * C806 -
           ((C54790 * C9611 - C54791 * C9609 - C54790 * C9612 +
             C139731 * C9615) *
                C139835 * C54789 +
            C55311 * C54788 + C55310 * C54787 + C55309 * C54786) *
               C139809 * C140000) *
              C808 +
          ((C55312 * C54786 + C55313 * C54787 + C55314 * C54788 +
            (C54790 * C9613 - C54791 * C9610 - C54790 * C9614 +
             C139731 * C9616) *
                C139835 * C54789) *
               C139809 * C140000 -
           (C55314 * C54789 + C55313 * C54788 + C55312 * C54787 +
            (C54790 * C116 - C54791 * C109 - C54790 * C117 + C139731 * C127) *
                C139835 * C54786) *
               C139809 * C806) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eexy[82] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47134 * C183 - C47216 * C108 + C139873 * C896 - C47217 * C813) *
                C47136 +
            (C47134 * C189 - C47216 * C115 + C139873 * C901 - C47217 * C822) *
                C47131 +
            (C47219 - C47220 + C47221 - C47222) * C47138 +
            (C47223 - C47224 + C47225 - C47226) * C47132 + C47247 * C47140 +
            C47248 * C47133) *
               C139835 * C139809 * C806 +
           ((C47216 * C813 - C47134 * C896 + C47217 * C2908 - C139873 * C2974) *
                C47136 +
            (C47216 * C822 - C47134 * C901 + C47217 * C2913 - C139873 * C2978) *
                C47131 +
            (C48082 - C48083 + C48084 - C48085) * C47138 +
            (C48086 - C48087 + C48088 - C48089) * C47132 +
            (C48090 - C48091 + C48092 - C48093) * C47140 +
            (C48094 - C48095 + C48096 - C48097) * C47133) *
               C139835 * C139809 * C140000) *
              C808 +
          (((C47220 - C47219 + C47222 - C47221) * C47136 +
            (C47224 - C47223 + C47226 - C47225) * C47131 +
            (C47228 - C47227 + C47230 - C47229) * C47138 +
            (C47232 - C47231 + C47234 - C47233) * C47132 +
            (C47235 - C47236 + C47237 - C47238) * C47140 +
            (C47239 - C47240 + C47241 - C47242) * C47133) *
               C139835 * C139809 * C806 +
           ((C48083 - C48082 + C48085 - C48084) * C47136 +
            (C48087 - C48086 + C48089 - C48088) * C47131 +
            (C48091 - C48090 + C48093 - C48092) * C47138 +
            (C48095 - C48094 + C48097 - C48096) * C47132 +
            (C47134 * C899 - C47216 * C810 + C139873 * C2977 - C47217 * C2911) *
                C47140 +
            (C47134 * C904 - C47216 * C816 + C139873 * C2981 - C47217 * C2919) *
                C47133) *
               C139835 * C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C54786 * C183 - C54842 * C108 + C54787 * C896 - C54843 * C813 +
             C54788 * C2974 - C54844 * C2908 + C54789 * C6792 -
             C54845 * C6627) *
                C54790 +
            (C54786 * C189 - C54842 * C115 + C54787 * C901 - C54843 * C822 +
             C54788 * C2978 - C54844 * C2913 + C54789 * C6795 -
             C54845 * C6632) *
                C139731) *
               C139835 * C139809 * C806 +
           ((C54842 * C813 - C54786 * C896 + C54843 * C2908 - C54787 * C2974 +
             C54844 * C6627 - C54788 * C6792 + C54845 * C9609 -
             C54789 * C9707) *
                C54790 +
            (C54842 * C822 - C54786 * C901 + C54843 * C2913 - C54787 * C2978 +
             C54844 * C6632 - C54788 * C6795 + C54845 * C9612 -
             C54789 * C9709) *
                C139731) *
               C139835 * C139809 * C140000) *
              C808 +
          (((C54842 * C109 - C54786 * C184 + C54843 * C812 - C54787 * C897 +
             C54844 * C2909 - C54788 * C2975 + C54845 * C6626 -
             C54789 * C6793) *
                C54790 +
            (C54842 * C117 - C54786 * C190 + C54843 * C820 - C54787 * C902 +
             C54844 * C2915 - C54788 * C2979 + C54845 * C6630 -
             C54789 * C6796) *
                C139731) *
               C139835 * C139809 * C806 +
           ((C54786 * C897 - C54842 * C812 + C54787 * C2975 - C54843 * C2909 +
             C54788 * C6793 - C54844 * C6626 + C54789 * C9708 -
             C54845 * C9610) *
                C54790 +
            (C54786 * C902 - C54842 * C820 + C54787 * C2979 - C54843 * C2915 +
             C54788 * C6796 - C54844 * C6630 + C54789 * C9710 -
             C54845 * C9614) *
                C139731) *
               C139835 * C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eexz[82] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C139835 * C266 - C265 * C108) * C47136 +
             (C139835 * C272 - C265 * C115) * C47131 + (C279 - C280) * C47138 +
             (C281 - C282) * C47132 + C295 * C47140 + C296 * C47133) *
                C47134 +
            ((C6915 - C6916) * C47136 + (C6917 - C6918) * C47131 +
             C6919 * C47138 + C6920 * C47132 + C21967 * C47140 +
             C21968 * C47133) *
                C139873) *
               C139809 * C806 +
           (((C6916 - C6915) * C47136 + (C6918 - C6917) * C47131 +
             C6927 * C47138 + C6928 * C47132 + C22843 * C47140 +
             C22844 * C47133) *
                C47134 +
            ((C6922 - C6921) * C47136 + (C6924 - C6923) * C47131 +
             C6929 * C47138 + C6930 * C47132 + (C6000 - C6001) * C47140 +
             (C6002 - C6003) * C47133) *
                C139873) *
               C139809 * C140000) *
              C808 +
          ((((C280 - C279) * C47136 + (C282 - C281) * C47131 +
             (C284 - C283) * C47138 + (C286 - C285) * C47132 +
             (C288 - C287) * C47140 + (C290 - C289) * C47133) *
                C47134 +
            (C6927 * C47136 + C6928 * C47131 + C22843 * C47138 +
             C22844 * C47132 + (C1003 - C1004) * C47140 +
             (C1005 - C1006) * C47133) *
                C139873) *
               C139809 * C806 +
           ((C6919 * C47136 + C6920 * C47131 + C21967 * C47138 +
             C21968 * C47132 + (C1004 - C1003) * C47140 +
             (C1006 - C1005) * C47133) *
                C47134 +
            (C6925 * C47136 + C6926 * C47131 + (C6001 - C6000) * C47138 +
             (C6003 - C6002) * C47132 +
             (C139835 * C3035 - C265 * C2911) * C47140 +
             (C139835 * C3039 - C265 * C2919) * C47133) *
                C139873) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C139835 * C266 - C265 * C108) * C54790 +
             (C139835 * C272 - C265 * C115) * C139731) *
                C54786 +
            ((C6915 - C6916) * C54790 + (C6917 - C6918) * C139731) * C54787 +
            (C9790 * C54790 + C9791 * C139731) * C54788 +
            ((C9795 - C9794) * C54790 + (C9797 - C9796) * C139731) * C54789) *
               C139809 * C806 +
           (((C6916 - C6915) * C54790 + (C6918 - C6917) * C139731) * C54786 +
            ((C6922 - C6921) * C54790 + (C6924 - C6923) * C139731) * C54787 +
            ((C9794 - C9795) * C54790 + (C9796 - C9797) * C139731) * C54788 +
            ((C265 * C9609 - C139835 * C9785) * C54790 +
             (C265 * C9612 - C139835 * C9787) * C139731) *
                C54789) *
               C139809 * C140000) *
              C808 +
          ((((C280 - C279) * C54790 + (C282 - C281) * C139731) * C54786 +
            (C6927 * C54790 + C6928 * C139731) * C54787 +
            (C6929 * C54790 + C6930 * C139731) * C54788 +
            ((C6931 - C6932) * C54790 + (C6933 - C6934) * C139731) * C54789) *
               C139809 * C806 +
           ((C6919 * C54790 + C6920 * C139731) * C54786 +
            (C6925 * C54790 + C6926 * C139731) * C54787 +
            ((C6932 - C6931) * C54790 + (C6934 - C6933) * C139731) * C54788 +
            ((C139835 * C9786 - C265 * C9610) * C54790 +
             (C139835 * C9788 - C265 * C9614) * C139731) *
                C54789) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[82] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47131 * C114 - C47136 * C108 + C47132 * C116 - C47138 * C109 +
             C47133 * C118 - C47140 * C110) *
                C47216 +
            (C47131 * C354 - C47136 * C348 + C47132 * C355 - C47138 * C349 +
             C47133 * C356 - C47140 * C350) *
                C47134 +
            (C48294 - C48295 + C48296 - C48297 + C48298 - C48299) * C47217 +
            (C48300 - C48301 + C48302 - C48303 + C48304 - C48305) * C139873) *
               C139835 * C139809 * C806 +
           ((C48295 - C48294 + C48297 - C48296 + C48299 - C48298) * C47216 +
            (C48301 - C48300 + C48303 - C48302 + C48305 - C48304) * C47134 +
            (C47136 * C2908 - C47131 * C2912 + C47138 * C2909 - C47132 * C2914 +
             C47140 * C2910 - C47133 * C2916) *
                C47217 +
            (C47136 * C3090 - C47131 * C3094 + C47138 * C3091 - C47132 * C3095 +
             C47140 * C3092 - C47133 * C3096) *
                C139873) *
               C139835 * C139809 * C140000) *
              C808 +
          (((C47136 * C109 - C47131 * C116 + C47138 * C110 - C47132 * C118 +
             C47140 * C111 - C47133 * C120) *
                C47216 +
            (C47136 * C349 - C47131 * C355 + C47138 * C350 - C47132 * C356 +
             C47140 * C351 - C47133 * C357) *
                C47134 +
            (C48306 - C48307 + C48308 - C48309 + C48310 - C48311) * C47217 +
            (C48312 - C48313 + C48314 - C48315 + C48316 - C48317) * C139873) *
               C139835 * C139809 * C806 +
           ((C48307 - C48306 + C48309 - C48308 + C48311 - C48310) * C47216 +
            (C48313 - C48312 + C48315 - C48314 + C48317 - C48316) * C47134 +
            (C47131 * C2914 - C47136 * C2909 + C47132 * C2916 - C47138 * C2910 +
             C47133 * C2918 - C47140 * C2911) *
                C47217 +
            (C47131 * C3095 - C47136 * C3091 + C47132 * C3096 - C47138 * C3092 +
             C47133 * C3097 - C47140 * C3093) *
                C139873) *
               C139835 * C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C139731 * C114 - C54790 * C108) * C54842 +
            (C139731 * C354 - C54790 * C348) * C54786 +
            (C55513 - C55514) * C54843 + (C55515 - C55516) * C54787 +
            (C55517 - C55518) * C54844 + (C55519 - C55520) * C54788 +
            (C55521 - C55522) * C54845 + (C55523 - C55524) * C54789) *
               C139835 * C139809 * C806 +
           ((C55514 - C55513) * C54842 + (C55516 - C55515) * C54786 +
            (C55518 - C55517) * C54843 + (C55520 - C55519) * C54787 +
            (C55522 - C55521) * C54844 + (C55524 - C55523) * C54788 +
            (C54790 * C9609 - C139731 * C9611) * C54845 +
            (C54790 * C9876 - C139731 * C9878) * C54789) *
               C139835 * C139809 * C140000) *
              C808 +
          (((C54790 * C109 - C139731 * C116) * C54842 +
            (C54790 * C349 - C139731 * C355) * C54786 +
            (C55525 - C55526) * C54843 + (C55527 - C55528) * C54787 +
            (C55529 - C55530) * C54844 + (C55531 - C55532) * C54788 +
            (C55533 - C55534) * C54845 + (C55535 - C55536) * C54789) *
               C139835 * C139809 * C806 +
           ((C55526 - C55525) * C54842 + (C55528 - C55527) * C54786 +
            (C55530 - C55529) * C54843 + (C55532 - C55531) * C54787 +
            (C55534 - C55533) * C54844 + (C55536 - C55535) * C54788 +
            (C139731 * C9613 - C54790 * C9610) * C54845 +
            (C139731 * C9879 - C54790 * C9877) * C54789) *
               C139835 * C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[82] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47216 * C183 - C47470 * C108 - C47216 * C348 + C47134 * C411 +
             C47217 * C896 - C47471 * C813 - C47217 * C1072 + C139873 * C1151) *
                C47131 +
            (C47509 + C47510) * C47132 + C47515 * C47133) *
               C139835 * C139809 * C806 -
           ((C48440 + C48441) * C47133 + (C48442 + C48443) * C47132 +
            (C47217 * C2974 - C47471 * C2908 - C47217 * C3090 +
             C139873 * C3148 + C47216 * C896 - C47470 * C813 - C47216 * C1072 +
             C47134 * C1151) *
                C47131) *
               C139835 * C139809 * C140000) *
              C808 +
          (((C48443 + C48442) * C47131 + (C48441 + C48440) * C47132 +
            (C47216 * C899 - C47470 * C810 - C47216 * C1075 + C47134 * C1148 +
             C47217 * C2977 - C47471 * C2911 - C47217 * C3093 +
             C139873 * C3151) *
                C47133) *
               C139835 * C139809 * C140000 -
           ((C47513 + C47514) * C47133 + (C47512 + C47511) * C47132 +
            (C47510 + C47509) * C47131) *
               C139835 * C139809 * C806) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C54842 * C183 - C54996 * C108 - C54842 * C348 + C54786 * C411 +
            C54843 * C896 - C54997 * C813 - C54843 * C1072 + C54787 * C1151 +
            C54844 * C2974 - C54998 * C2908 - C54844 * C3090 + C54788 * C3148 +
            C54845 * C6792 - C54999 * C6627 - C54845 * C7032 + C54789 * C7169) *
               C139731 * C139835 * C139809 * C806 -
           (C54845 * C9707 - C54999 * C9609 - C54845 * C9876 + C54789 * C9968 +
            C54844 * C6792 - C54998 * C6627 - C54844 * C7032 + C54788 * C7169 +
            C54843 * C2974 - C54997 * C2908 - C54843 * C3090 + C54787 * C3148 +
            C54842 * C896 - C54996 * C813 - C54842 * C1072 + C54786 * C1151) *
               C139731 * C139835 * C139809 * C140000) *
              C808 +
          ((C54842 * C897 - C54996 * C812 - C54842 * C1073 + C54786 * C1150 +
            C54843 * C2975 - C54997 * C2909 - C54843 * C3091 + C54787 * C3149 +
            C54844 * C6793 - C54998 * C6626 - C54844 * C7033 + C54788 * C7168 +
            C54845 * C9708 - C54999 * C9610 - C54845 * C9877 + C54789 * C9969) *
               C139731 * C139835 * C139809 * C140000 -
           (C54845 * C6793 - C54999 * C6626 - C54845 * C7033 + C54789 * C7168 +
            C54844 * C2975 - C54998 * C2909 - C54844 * C3091 + C54788 * C3149 +
            C54843 * C897 - C54997 * C812 - C54843 * C1073 + C54787 * C1150 +
            C54842 * C184 - C54996 * C109 - C54842 * C349 + C54786 * C412) *
               C139731 * C139835 * C139809 * C806) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[82] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C139835 * C266 - C265 * C108) * C47216 +
             (C139835 * C495 - C265 * C348) * C47134 +
             (C6915 - C6916) * C47217 + (C7294 - C7295) * C139873) *
                C47131 +
            ((C279 - C280) * C47216 + (C502 - C503) * C47134 + C6919 * C47217 +
             C7298 * C139873) *
                C47132 +
            C47596 * C47133) *
               C139809 * C806 +
           (((C6916 - C6915) * C47216 + (C7295 - C7294) * C47134 +
             (C6922 - C6921) * C47217 + (C7297 - C7296) * C139873) *
                C47131 +
            (C6927 * C47216 + C7300 * C47134 + C6929 * C47217 +
             C7301 * C139873) *
                C47132 +
            (C22843 * C47216 + C23191 * C47134 + (C6000 - C6001) * C47217 +
             (C6273 - C6274) * C139873) *
                C47133) *
               C139809 * C140000) *
              C808 +
          ((((C280 - C279) * C47216 + (C503 - C502) * C47134 + C6927 * C47217 +
             C7300 * C139873) *
                C47131 +
            ((C284 - C283) * C47216 + (C506 - C505) * C47134 + C22843 * C47217 +
             C23191 * C139873) *
                C47132 +
            ((C288 - C287) * C47216 + (C509 - C508) * C47134 +
             (C1003 - C1004) * C47217 + (C1250 - C1251) * C139873) *
                C47133) *
               C139809 * C806 +
           ((C6919 * C47216 + C7298 * C47134 + C6925 * C47217 +
             C7299 * C139873) *
                C47131 +
            (C21967 * C47216 + C22239 * C47134 + (C6001 - C6000) * C47217 +
             (C6274 - C6273) * C139873) *
                C47132 +
            ((C1004 - C1003) * C47216 + (C1251 - C1250) * C47134 +
             (C139835 * C3035 - C265 * C2911) * C47217 +
             (C139835 * C3205 - C265 * C3093) * C139873) *
                C47133) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C139835 * C266 - C265 * C108) * C54842 +
            (C139835 * C495 - C265 * C348) * C54786 + (C6915 - C6916) * C54843 +
            (C7294 - C7295) * C54787 + C9790 * C54844 + C10047 * C54788 +
            (C9795 - C9794) * C54845 + (C10049 - C10048) * C54789) *
               C139731 * C139809 * C806 +
           ((C6916 - C6915) * C54842 + (C7295 - C7294) * C54786 +
            (C6922 - C6921) * C54843 + (C7297 - C7296) * C54787 +
            (C9794 - C9795) * C54844 + (C10048 - C10049) * C54788 +
            (C265 * C9609 - C139835 * C9785) * C54845 +
            (C265 * C9876 - C139835 * C10044) * C54789) *
               C139731 * C139809 * C140000) *
              C808 +
          (((C280 - C279) * C54842 + (C503 - C502) * C54786 + C6927 * C54843 +
            C7300 * C54787 + C6929 * C54844 + C7301 * C54788 +
            (C6931 - C6932) * C54845 + (C7302 - C7303) * C54789) *
               C139731 * C139809 * C806 +
           (C6919 * C54842 + C7298 * C54786 + C6925 * C54843 + C7299 * C54787 +
            (C6932 - C6931) * C54844 + (C7303 - C7302) * C54788 +
            (C139835 * C9786 - C265 * C9610) * C54845 +
            (C139835 * C10045 - C265 * C9877) * C54789) *
               C139731 * C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eezx[82] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47131 * C114 - C47136 * C108 + C47132 * C116 - C47138 * C109 +
              C47133 * C118 - C47140 * C110) *
                 C265 +
             (C47131 * C573 - C47136 * C567 + C47132 * C574 - C47138 * C568 +
              C47133 * C575 - C47140 * C569) *
                 C139835) *
                C47134 +
            ((C48294 - C48295 + C48296 - C48297 + C48298 - C48299) * C265 +
             (C48640 - C48641 + C48642 - C48643 + C48644 - C48645) * C139835) *
                C139873) *
               C139809 * C806 +
           (((C48295 - C48294 + C48297 - C48296 + C48299 - C48298) * C265 +
             (C48641 - C48640 + C48643 - C48642 + C48645 - C48644) * C139835) *
                C47134 +
            ((C47136 * C2908 - C47131 * C2912 + C47138 * C2909 -
              C47132 * C2914 + C47140 * C2910 - C47133 * C2916) *
                 C265 +
             (C47136 * C3256 - C47131 * C3260 + C47138 * C3257 -
              C47132 * C3261 + C47140 * C3258 - C47133 * C3262) *
                 C139835) *
                C139873) *
               C139809 * C140000) *
              C808 +
          ((((C47136 * C109 - C47131 * C116 + C47138 * C110 - C47132 * C118 +
              C47140 * C111 - C47133 * C120) *
                 C265 +
             (C47136 * C568 - C47131 * C574 + C47138 * C569 - C47132 * C575 +
              C47140 * C570 - C47133 * C576) *
                 C139835) *
                C47134 +
            ((C48306 - C48307 + C48308 - C48309 + C48310 - C48311) * C265 +
             (C48646 - C48647 + C48648 - C48649 + C48650 - C48651) * C139835) *
                C139873) *
               C139809 * C806 +
           (((C48307 - C48306 + C48309 - C48308 + C48311 - C48310) * C265 +
             (C48647 - C48646 + C48649 - C48648 + C48651 - C48650) * C139835) *
                C47134 +
            ((C47131 * C2914 - C47136 * C2909 + C47132 * C2916 -
              C47138 * C2910 + C47133 * C2918 - C47140 * C2911) *
                 C265 +
             (C47131 * C3261 - C47136 * C3257 + C47132 * C3262 -
              C47138 * C3258 + C47133 * C3263 - C47140 * C3259) *
                 C139835) *
                C139873) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C139731 * C114 - C54790 * C108) * C265 +
             (C139731 * C573 - C54790 * C567) * C139835) *
                C54786 +
            ((C55513 - C55514) * C265 + (C55735 - C55736) * C139835) * C54787 +
            ((C55517 - C55518) * C265 + (C55737 - C55738) * C139835) * C54788 +
            ((C55521 - C55522) * C265 + (C55739 - C55740) * C139835) * C54789) *
               C139809 * C806 +
           (((C55514 - C55513) * C265 + (C55736 - C55735) * C139835) * C54786 +
            ((C55518 - C55517) * C265 + (C55738 - C55737) * C139835) * C54787 +
            ((C55522 - C55521) * C265 + (C55740 - C55739) * C139835) * C54788 +
            ((C54790 * C9609 - C139731 * C9611) * C265 +
             (C54790 * C10123 - C139731 * C10125) * C139835) *
                C54789) *
               C139809 * C140000) *
              C808 +
          ((((C54790 * C109 - C139731 * C116) * C265 +
             (C54790 * C568 - C139731 * C574) * C139835) *
                C54786 +
            ((C55525 - C55526) * C265 + (C55741 - C55742) * C139835) * C54787 +
            ((C55529 - C55530) * C265 + (C55743 - C55744) * C139835) * C54788 +
            ((C55533 - C55534) * C265 + (C55745 - C55746) * C139835) * C54789) *
               C139809 * C806 +
           (((C55526 - C55525) * C265 + (C55742 - C55741) * C139835) * C54786 +
            ((C55530 - C55529) * C265 + (C55744 - C55743) * C139835) * C54787 +
            ((C55534 - C55533) * C265 + (C55746 - C55745) * C139835) * C54788 +
            ((C139731 * C9613 - C54790 * C9610) * C265 +
             (C139731 * C10126 - C54790 * C10124) * C139835) *
                C54789) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eezy[82] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47134 * C183 - C47216 * C108 + C139873 * C896 - C47217 * C813) *
                 C265 +
             (C47134 * C629 - C47216 * C567 + C139873 * C1393 -
              C47217 * C1317) *
                 C139835) *
                C47131 +
            ((C47219 - C47220 + C47221 - C47222) * C265 +
             (C47745 - C47746 + C47747 - C47748) * C139835) *
                C47132 +
            C47762 * C47133) *
               C139809 * C806 +
           (((C47216 * C813 - C47134 * C896 + C47217 * C2908 -
              C139873 * C2974) *
                 C265 +
             (C47216 * C1317 - C47134 * C1393 + C47217 * C3256 -
              C139873 * C3314) *
                 C139835) *
                C47131 +
            ((C48082 - C48083 + C48084 - C48085) * C265 +
             (C48750 - C48751 + C48752 - C48753) * C139835) *
                C47132 +
            ((C48090 - C48091 + C48092 - C48093) * C265 +
             (C48754 - C48755 + C48756 - C48757) * C139835) *
                C47133) *
               C139809 * C140000) *
              C808 +
          ((((C47220 - C47219 + C47222 - C47221) * C265 +
             (C47746 - C47745 + C47748 - C47747) * C139835) *
                C47131 +
            ((C47228 - C47227 + C47230 - C47229) * C265 +
             (C47751 - C47750 + C47753 - C47752) * C139835) *
                C47132 +
            ((C47235 - C47236 + C47237 - C47238) * C265 +
             (C47754 - C47755 + C47756 - C47757) * C139835) *
                C47133) *
               C139809 * C806 +
           (((C48083 - C48082 + C48085 - C48084) * C265 +
             (C48751 - C48750 + C48753 - C48752) * C139835) *
                C47131 +
            ((C48091 - C48090 + C48093 - C48092) * C265 +
             (C48755 - C48754 + C48757 - C48756) * C139835) *
                C47132 +
            ((C47134 * C899 - C47216 * C810 + C139873 * C2977 -
              C47217 * C2911) *
                 C265 +
             (C47134 * C1396 - C47216 * C1320 + C139873 * C3317 -
              C47217 * C3259) *
                 C139835) *
                C47133) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C54786 * C183 - C54842 * C108 + C54787 * C896 - C54843 * C813 +
             C54788 * C2974 - C54844 * C2908 + C54789 * C6792 -
             C54845 * C6627) *
                C265 +
            (C54786 * C629 - C54842 * C567 + C54787 * C1393 - C54843 * C1317 +
             C54788 * C3314 - C54844 * C3256 + C54789 * C7521 -
             C54845 * C7401) *
                C139835) *
               C139731 * C139809 * C806 +
           ((C54842 * C813 - C54786 * C896 + C54843 * C2908 - C54787 * C2974 +
             C54844 * C6627 - C54788 * C6792 + C54845 * C9609 -
             C54789 * C9707) *
                C265 +
            (C54842 * C1317 - C54786 * C1393 + C54843 * C3256 - C54787 * C3314 +
             C54844 * C7401 - C54788 * C7521 + C54845 * C10123 -
             C54789 * C10211) *
                C139835) *
               C139731 * C139809 * C140000) *
              C808 +
          (((C54842 * C109 - C54786 * C184 + C54843 * C812 - C54787 * C897 +
             C54844 * C2909 - C54788 * C2975 + C54845 * C6626 -
             C54789 * C6793) *
                C265 +
            (C54842 * C568 - C54786 * C630 + C54843 * C1318 - C54787 * C1394 +
             C54844 * C3257 - C54788 * C3315 + C54845 * C7402 -
             C54789 * C7522) *
                C139835) *
               C139731 * C139809 * C806 +
           ((C54786 * C897 - C54842 * C812 + C54787 * C2975 - C54843 * C2909 +
             C54788 * C6793 - C54844 * C6626 + C54789 * C9708 -
             C54845 * C9610) *
                C265 +
            (C54786 * C1394 - C54842 * C1318 + C54787 * C3315 - C54843 * C3257 +
             C54788 * C7522 - C54844 * C7402 + C54789 * C10212 -
             C54845 * C10124) *
                C139835) *
               C139731 * C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eezz[82] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C265 * C266 - C701 * C108 - C265 * C567 + C139835 * C702) *
                 C47134 +
             C7652 * C139873) *
                C47131 +
            (C47837 + C47838) * C47132 + C47843 * C47133) *
               C139809 * C806 -
           ((C48856 + C48857) * C47133 + (C48858 + C48859) * C47132 +
            (C7653 * C139873 + C7652 * C47134) * C47131) *
               C139809 * C140000) *
              C808 +
          (((C48859 + C48858) * C47131 + (C48857 + C48856) * C47132 +
            (C1494 * C47134 +
             (C265 * C3035 - C701 * C2911 - C265 * C3259 + C139835 * C3371) *
                 C139873) *
                C47133) *
               C139809 * C140000 -
           ((C47841 + C47842) * C47133 + (C47840 + C47839) * C47132 +
            (C47838 + C47837) * C47131) *
               C139809 * C806) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C265 * C266 - C701 * C108 - C265 * C567 + C139835 * C702) *
                C54786 +
            C7652 * C54787 + C7653 * C54788 + C10296 * C54789) *
               C139731 * C139809 * C806 -
           ((C265 * C9785 - C701 * C9609 - C265 * C10123 + C139835 * C10287) *
                C54789 +
            C10296 * C54788 + C7653 * C54787 + C7652 * C54786) *
               C139731 * C139809 * C140000) *
              C808 +
          ((C1496 * C54786 + C6525 * C54787 + C7654 * C54788 +
            (C265 * C9786 - C701 * C9610 - C265 * C10124 + C139835 * C10288) *
                C54789) *
               C139731 * C139809 * C140000 -
           (C7654 * C54789 + C6525 * C54788 + C1496 * C54787 + C733 * C54786) *
               C139731 * C139809 * C806) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eexx[83] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47136 * C114 - C47137 * C108 - C47136 * C115 + C47131 * C126 +
             C47138 * C116 - C47139 * C109 - C47138 * C117 + C47132 * C127 +
             C47140 * C118 - C47141 * C110 - C47140 * C119 + C47133 * C128) *
                C139835 * C47134 +
            (C47978 + C47979 + C47980) * C139835 * C139873) *
               C1565 -
           ((C47140 * C3446 - C47141 * C3440 - C47140 * C3447 + C47133 * C3452 +
             C47138 * C3444 - C47139 * C3439 - C47138 * C3445 + C47132 * C3451 +
             C47136 * C3442 - C47137 * C3438 - C47136 * C3443 +
             C47131 * C3450) *
                C139835 * C139873 +
            (C47140 * C1574 - C47141 * C1568 - C47140 * C1575 + C47133 * C1583 +
             C47138 * C1576 - C47139 * C1569 - C47138 * C1577 + C47132 * C1584 +
             C47136 * C1578 - C47137 * C1570 - C47136 * C1579 +
             C47131 * C1585) *
                C139835 * C47134) *
               C140002) *
              C139792 * C808 +
          (((C47136 * C1576 - C47137 * C1569 - C47136 * C1577 + C47131 * C1584 +
             C47138 * C1574 - C47139 * C1568 - C47138 * C1575 + C47132 * C1583 +
             C47140 * C1572 - C47141 * C1567 - C47140 * C1573 +
             C47133 * C1582) *
                C139835 * C47134 +
            (C47136 * C3444 - C47137 * C3439 - C47136 * C3445 + C47131 * C3451 +
             C47138 * C3446 - C47139 * C3440 - C47138 * C3447 + C47132 * C3452 +
             C47140 * C3448 - C47141 * C3441 - C47140 * C3449 +
             C47133 * C3453) *
                C139835 * C139873) *
               C140002 -
           ((C47983 + C47982 + C47981) * C139835 * C139873 +
            (C47140 * C120 - C47141 * C111 - C47140 * C121 + C47133 * C129 +
             C47138 * C118 - C47139 * C110 - C47138 * C119 + C47132 * C128 +
             C47136 * C116 - C47137 * C109 - C47136 * C117 + C47131 * C127) *
                C139835 * C47134) *
               C1565) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C54790 * C114 - C54791 * C108 - C54790 * C115 + C139731 * C126) *
                C139835 * C54786 +
            C55309 * C54787 + C55310 * C54788 + C55311 * C54789) *
               C1565 -
           ((C54790 * C10396 - C54791 * C10394 - C54790 * C10397 +
             C139731 * C10400) *
                C139835 * C54789 +
            (C54790 * C7758 - C54791 * C7754 - C54790 * C7759 +
             C139731 * C7763) *
                C139835 * C54788 +
            (C54790 * C3442 - C54791 * C3438 - C54790 * C3443 +
             C139731 * C3450) *
                C139835 * C54787 +
            (C54790 * C1578 - C54791 * C1570 - C54790 * C1579 +
             C139731 * C1585) *
                C139835 * C54786) *
               C140002) *
              C139792 * C808 +
          (((C54790 * C1576 - C54791 * C1569 - C54790 * C1577 +
             C139731 * C1584) *
                C139835 * C54786 +
            (C54790 * C3444 - C54791 * C3439 - C54790 * C3445 +
             C139731 * C3451) *
                C139835 * C54787 +
            (C54790 * C7756 - C54791 * C7753 - C54790 * C7757 +
             C139731 * C7762) *
                C139835 * C54788 +
            (C54790 * C10398 - C54791 * C10395 - C54790 * C10399 +
             C139731 * C10401) *
                C139835 * C54789) *
               C140002 -
           (C55314 * C54789 + C55313 * C54788 + C55312 * C54787 +
            (C54790 * C116 - C54791 * C109 - C54790 * C117 + C139731 * C127) *
                C139835 * C54786) *
               C1565) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eexy[83] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47134 * C183 - C47216 * C108 + C139873 * C896 - C47217 * C813) *
                C47136 +
            (C47134 * C189 - C47216 * C115 + C139873 * C901 - C47217 * C822) *
                C47131 +
            (C47219 - C47220 + C47221 - C47222) * C47138 +
            (C47223 - C47224 + C47225 - C47226) * C47132 + C47247 * C47140 +
            C47248 * C47133) *
               C139835 * C1565 +
           ((C47216 * C1570 - C47134 * C1653 + C47217 * C3438 -
             C139873 * C3520) *
                C47136 +
            (C47216 * C1579 - C47134 * C1658 + C47217 * C3443 -
             C139873 * C3524) *
                C47131 +
            (C49056 - C49057 + C49058 - C49059) * C47138 +
            (C49060 - C49061 + C49062 - C49063) * C47132 +
            (C49064 - C49065 + C49066 - C49067) * C47140 +
            (C49068 - C49069 + C49070 - C49071) * C47133) *
               C139835 * C140002) *
              C139792 * C808 +
          (((C47220 - C47219 + C47222 - C47221) * C47136 +
            (C47224 - C47223 + C47226 - C47225) * C47131 +
            (C47228 - C47227 + C47230 - C47229) * C47138 +
            (C47232 - C47231 + C47234 - C47233) * C47132 +
            (C47235 - C47236 + C47237 - C47238) * C47140 +
            (C47239 - C47240 + C47241 - C47242) * C47133) *
               C139835 * C1565 +
           ((C49057 - C49056 + C49059 - C49058) * C47136 +
            (C49061 - C49060 + C49063 - C49062) * C47131 +
            (C49065 - C49064 + C49067 - C49066) * C47138 +
            (C49069 - C49068 + C49071 - C49070) * C47132 +
            (C47134 * C1656 - C47216 * C1567 + C139873 * C3523 -
             C47217 * C3441) *
                C47140 +
            (C47134 * C1661 - C47216 * C1573 + C139873 * C3527 -
             C47217 * C3449) *
                C47133) *
               C139835 * C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C54786 * C183 - C54842 * C108 + C54787 * C896 - C54843 * C813 +
             C54788 * C2974 - C54844 * C2908 + C54789 * C6792 -
             C54845 * C6627) *
                C54790 +
            (C54786 * C189 - C54842 * C115 + C54787 * C901 - C54843 * C822 +
             C54788 * C2978 - C54844 * C2913 + C54789 * C6795 -
             C54845 * C6632) *
                C139731) *
               C139835 * C1565 +
           ((C54842 * C1570 - C54786 * C1653 + C54843 * C3438 - C54787 * C3520 +
             C54844 * C7754 - C54788 * C7863 + C54845 * C10394 -
             C54789 * C10528) *
                C54790 +
            (C54842 * C1579 - C54786 * C1658 + C54843 * C3443 - C54787 * C3524 +
             C54844 * C7759 - C54788 * C7866 + C54845 * C10397 -
             C54789 * C10530) *
                C139731) *
               C139835 * C140002) *
              C139792 * C808 +
          (((C54842 * C109 - C54786 * C184 + C54843 * C812 - C54787 * C897 +
             C54844 * C2909 - C54788 * C2975 + C54845 * C6626 -
             C54789 * C6793) *
                C54790 +
            (C54842 * C117 - C54786 * C190 + C54843 * C820 - C54787 * C902 +
             C54844 * C2915 - C54788 * C2979 + C54845 * C6630 -
             C54789 * C6796) *
                C139731) *
               C139835 * C1565 +
           ((C54786 * C1654 - C54842 * C1569 + C54787 * C3521 - C54843 * C3439 +
             C54788 * C7864 - C54844 * C7753 + C54789 * C10529 -
             C54845 * C10395) *
                C54790 +
            (C54786 * C1659 - C54842 * C1577 + C54787 * C3525 - C54843 * C3445 +
             C54788 * C7867 - C54844 * C7757 + C54789 * C10531 -
             C54845 * C10399) *
                C139731) *
               C139835 * C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eexz[83] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C139835 * C266 - C265 * C108) * C47136 +
             (C139835 * C272 - C265 * C115) * C47131 + (C279 - C280) * C47138 +
             (C281 - C282) * C47132 + C295 * C47140 + C296 * C47133) *
                C47134 +
            ((C6915 - C6916) * C47136 + (C6917 - C6918) * C47131 +
             C6919 * C47138 + C6920 * C47132 + C21967 * C47140 +
             C21968 * C47133) *
                C139873) *
               C1565 +
           (((C265 * C1570 - C139835 * C1741) * C47136 +
             (C265 * C1579 - C139835 * C1746) * C47131 +
             (C1752 - C1753) * C47138 + (C1754 - C1755) * C47132 +
             (C1756 - C1757) * C47140 + (C1758 - C1759) * C47133) *
                C47134 +
            ((C10635 - C10636) * C47136 + (C10637 - C10638) * C47131 +
             (C7986 - C7987) * C47138 + (C7988 - C7989) * C47132 +
             (C23820 - C23821) * C47140 + (C23822 - C23823) * C47133) *
                C139873) *
               C140002) *
              C139792 * C808 +
          ((((C280 - C279) * C47136 + (C282 - C281) * C47131 +
             (C284 - C283) * C47138 + (C286 - C285) * C47132 +
             (C288 - C287) * C47140 + (C290 - C289) * C47133) *
                C47134 +
            (C6927 * C47136 + C6928 * C47131 + C22843 * C47138 +
             C22844 * C47132 + (C1003 - C1004) * C47140 +
             (C1005 - C1006) * C47133) *
                C139873) *
               C1565 +
           (((C1753 - C1752) * C47136 + (C1755 - C1754) * C47131 +
             (C1757 - C1756) * C47138 + (C1759 - C1758) * C47132 +
             (C1761 - C1760) * C47140 + (C1763 - C1762) * C47133) *
                C47134 +
            ((C7987 - C7986) * C47136 + (C7989 - C7988) * C47131 +
             (C23821 - C23820) * C47138 + (C23823 - C23822) * C47132 +
             (C139835 * C3597 - C265 * C3441) * C47140 +
             (C139835 * C3601 - C265 * C3449) * C47133) *
                C139873) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C139835 * C266 - C265 * C108) * C54790 +
             (C139835 * C272 - C265 * C115) * C139731) *
                C54786 +
            ((C6915 - C6916) * C54790 + (C6917 - C6918) * C139731) * C54787 +
            (C9790 * C54790 + C9791 * C139731) * C54788 +
            ((C9795 - C9794) * C54790 + (C9797 - C9796) * C139731) * C54789) *
               C1565 +
           (((C265 * C1570 - C139835 * C1741) * C54790 +
             (C265 * C1579 - C139835 * C1746) * C139731) *
                C54786 +
            ((C10635 - C10636) * C54790 + (C10637 - C10638) * C139731) *
                C54787 +
            ((C10639 - C10640) * C54790 + (C10641 - C10642) * C139731) *
                C54788 +
            ((C265 * C10394 - C139835 * C10630) * C54790 +
             (C265 * C10397 - C139835 * C10632) * C139731) *
                C54789) *
               C140002) *
              C139792 * C808 +
          ((((C280 - C279) * C54790 + (C282 - C281) * C139731) * C54786 +
            (C6927 * C54790 + C6928 * C139731) * C54787 +
            (C6929 * C54790 + C6930 * C139731) * C54788 +
            ((C6931 - C6932) * C54790 + (C6933 - C6934) * C139731) * C54789) *
               C1565 +
           (((C1753 - C1752) * C54790 + (C1755 - C1754) * C139731) * C54786 +
            ((C7987 - C7986) * C54790 + (C7989 - C7988) * C139731) * C54787 +
            ((C7991 - C7990) * C54790 + (C7993 - C7992) * C139731) * C54788 +
            ((C139835 * C10631 - C265 * C10395) * C54790 +
             (C139835 * C10633 - C265 * C10399) * C139731) *
                C54789) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[83] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47131 * C114 - C47136 * C108 + C47132 * C116 - C47138 * C109 +
             C47133 * C118 - C47140 * C110) *
                C47216 +
            (C47131 * C354 - C47136 * C348 + C47132 * C355 - C47138 * C349 +
             C47133 * C356 - C47140 * C350) *
                C47134 +
            (C48294 - C48295 + C48296 - C48297 + C48298 - C48299) * C47217 +
            (C48300 - C48301 + C48302 - C48303 + C48304 - C48305) * C139873) *
               C139835 * C1565 +
           ((C47136 * C1570 - C47131 * C1578 + C47138 * C1569 - C47132 * C1576 +
             C47140 * C1568 - C47133 * C1574) *
                C47216 +
            (C47136 * C1829 - C47131 * C1834 + C47138 * C1830 - C47132 * C1835 +
             C47140 * C1831 - C47133 * C1836) *
                C47134 +
            (C47136 * C3438 - C47131 * C3442 + C47138 * C3439 - C47132 * C3444 +
             C47140 * C3440 - C47133 * C3446) *
                C47217 +
            (C47136 * C3668 - C47131 * C3672 + C47138 * C3669 - C47132 * C3673 +
             C47140 * C3670 - C47133 * C3674) *
                C139873) *
               C139835 * C140002) *
              C139792 * C808 +
          (((C47136 * C109 - C47131 * C116 + C47138 * C110 - C47132 * C118 +
             C47140 * C111 - C47133 * C120) *
                C47216 +
            (C47136 * C349 - C47131 * C355 + C47138 * C350 - C47132 * C356 +
             C47140 * C351 - C47133 * C357) *
                C47134 +
            (C48306 - C48307 + C48308 - C48309 + C48310 - C48311) * C47217 +
            (C48312 - C48313 + C48314 - C48315 + C48316 - C48317) * C139873) *
               C139835 * C1565 +
           ((C47131 * C1576 - C47136 * C1569 + C47132 * C1574 - C47138 * C1568 +
             C47133 * C1572 - C47140 * C1567) *
                C47216 +
            (C47131 * C1835 - C47136 * C1830 + C47132 * C1836 - C47138 * C1831 +
             C47133 * C1837 - C47140 * C1832) *
                C47134 +
            (C47131 * C3444 - C47136 * C3439 + C47132 * C3446 - C47138 * C3440 +
             C47133 * C3448 - C47140 * C3441) *
                C47217 +
            (C47131 * C3673 - C47136 * C3669 + C47132 * C3674 - C47138 * C3670 +
             C47133 * C3675 - C47140 * C3671) *
                C139873) *
               C139835 * C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C139731 * C114 - C54790 * C108) * C54842 +
            (C139731 * C354 - C54790 * C348) * C54786 +
            (C55513 - C55514) * C54843 + (C55515 - C55516) * C54787 +
            (C55517 - C55518) * C54844 + (C55519 - C55520) * C54788 +
            (C55521 - C55522) * C54845 + (C55523 - C55524) * C54789) *
               C139835 * C1565 +
           ((C54790 * C1570 - C139731 * C1578) * C54842 +
            (C54790 * C1829 - C139731 * C1834) * C54786 +
            (C54790 * C3438 - C139731 * C3442) * C54843 +
            (C54790 * C3668 - C139731 * C3672) * C54787 +
            (C54790 * C7754 - C139731 * C7758) * C54844 +
            (C54790 * C8091 - C139731 * C8094) * C54788 +
            (C54790 * C10394 - C139731 * C10396) * C54845 +
            (C54790 * C10740 - C139731 * C10742) * C54789) *
               C139835 * C140002) *
              C139792 * C808 +
          (((C54790 * C109 - C139731 * C116) * C54842 +
            (C54790 * C349 - C139731 * C355) * C54786 +
            (C55525 - C55526) * C54843 + (C55527 - C55528) * C54787 +
            (C55529 - C55530) * C54844 + (C55531 - C55532) * C54788 +
            (C55533 - C55534) * C54845 + (C55535 - C55536) * C54789) *
               C139835 * C1565 +
           ((C139731 * C1576 - C54790 * C1569) * C54842 +
            (C139731 * C1835 - C54790 * C1830) * C54786 +
            (C139731 * C3444 - C54790 * C3439) * C54843 +
            (C139731 * C3673 - C54790 * C3669) * C54787 +
            (C139731 * C7756 - C54790 * C7753) * C54844 +
            (C139731 * C8095 - C54790 * C8092) * C54788 +
            (C139731 * C10398 - C54790 * C10395) * C54845 +
            (C139731 * C10743 - C54790 * C10741) * C54789) *
               C139835 * C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[83] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47216 * C183 - C47470 * C108 - C47216 * C348 + C47134 * C411 +
             C47217 * C896 - C47471 * C813 - C47217 * C1072 + C139873 * C1151) *
                C47131 +
            (C47509 + C47510) * C47132 + C47515 * C47133) *
               C139835 * C1565 -
           ((C49390 + C49391) * C47133 + (C49392 + C49393) * C47132 +
            (C47217 * C3520 - C47471 * C3438 - C47217 * C3668 +
             C139873 * C3742 + C47216 * C1653 - C47470 * C1570 -
             C47216 * C1829 + C47134 * C1908) *
                C47131) *
               C139835 * C140002) *
              C139792 * C808 +
          (((C49393 + C49392) * C47131 + (C49391 + C49390) * C47132 +
            (C47216 * C1656 - C47470 * C1567 - C47216 * C1832 + C47134 * C1905 +
             C47217 * C3523 - C47471 * C3441 - C47217 * C3671 +
             C139873 * C3745) *
                C47133) *
               C139835 * C140002 -
           ((C47513 + C47514) * C47133 + (C47512 + C47511) * C47132 +
            (C47510 + C47509) * C47131) *
               C139835 * C1565) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C54842 * C183 - C54996 * C108 - C54842 * C348 + C54786 * C411 +
            C54843 * C896 - C54997 * C813 - C54843 * C1072 + C54787 * C1151 +
            C54844 * C2974 - C54998 * C2908 - C54844 * C3090 + C54788 * C3148 +
            C54845 * C6792 - C54999 * C6627 - C54845 * C7032 + C54789 * C7169) *
               C139731 * C139835 * C1565 -
           (C54845 * C10528 - C54999 * C10394 - C54845 * C10740 +
            C54789 * C10858 + C54844 * C7863 - C54998 * C7754 - C54844 * C8091 +
            C54788 * C8196 + C54843 * C3520 - C54997 * C3438 - C54843 * C3668 +
            C54787 * C3742 + C54842 * C1653 - C54996 * C1570 - C54842 * C1829 +
            C54786 * C1908) *
               C139731 * C139835 * C140002) *
              C139792 * C808 +
          ((C54842 * C1654 - C54996 * C1569 - C54842 * C1830 + C54786 * C1907 +
            C54843 * C3521 - C54997 * C3439 - C54843 * C3669 + C54787 * C3743 +
            C54844 * C7864 - C54998 * C7753 - C54844 * C8092 + C54788 * C8195 +
            C54845 * C10529 - C54999 * C10395 - C54845 * C10741 +
            C54789 * C10859) *
               C139731 * C139835 * C140002 -
           (C54845 * C6793 - C54999 * C6626 - C54845 * C7033 + C54789 * C7168 +
            C54844 * C2975 - C54998 * C2909 - C54844 * C3091 + C54788 * C3149 +
            C54843 * C897 - C54997 * C812 - C54843 * C1073 + C54787 * C1150 +
            C54842 * C184 - C54996 * C109 - C54842 * C349 + C54786 * C412) *
               C139731 * C139835 * C1565) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[83] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C139835 * C266 - C265 * C108) * C47216 +
             (C139835 * C495 - C265 * C348) * C47134 +
             (C6915 - C6916) * C47217 + (C7294 - C7295) * C139873) *
                C47131 +
            ((C279 - C280) * C47216 + (C502 - C503) * C47134 + C6919 * C47217 +
             C7298 * C139873) *
                C47132 +
            C47596 * C47133) *
               C1565 +
           (((C265 * C1570 - C139835 * C1741) * C47216 +
             (C265 * C1829 - C139835 * C1997) * C47134 +
             (C10635 - C10636) * C47217 + (C10961 - C10962) * C139873) *
                C47131 +
            ((C1752 - C1753) * C47216 + (C2003 - C2004) * C47134 +
             (C7986 - C7987) * C47217 + (C8321 - C8322) * C139873) *
                C47132 +
            ((C1756 - C1757) * C47216 + (C2005 - C2006) * C47134 +
             (C23820 - C23821) * C47217 + (C24146 - C24147) * C139873) *
                C47133) *
               C140002) *
              C139792 * C808 +
          ((((C280 - C279) * C47216 + (C503 - C502) * C47134 + C6927 * C47217 +
             C7300 * C139873) *
                C47131 +
            ((C284 - C283) * C47216 + (C506 - C505) * C47134 + C22843 * C47217 +
             C23191 * C139873) *
                C47132 +
            ((C288 - C287) * C47216 + (C509 - C508) * C47134 +
             (C1003 - C1004) * C47217 + (C1250 - C1251) * C139873) *
                C47133) *
               C1565 +
           (((C1753 - C1752) * C47216 + (C2004 - C2003) * C47134 +
             (C7987 - C7986) * C47217 + (C8322 - C8321) * C139873) *
                C47131 +
            ((C1757 - C1756) * C47216 + (C2006 - C2005) * C47134 +
             (C23821 - C23820) * C47217 + (C24147 - C24146) * C139873) *
                C47132 +
            ((C1761 - C1760) * C47216 + (C2008 - C2007) * C47134 +
             (C139835 * C3597 - C265 * C3441) * C47217 +
             (C139835 * C3815 - C265 * C3671) * C139873) *
                C47133) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C139835 * C266 - C265 * C108) * C54842 +
            (C139835 * C495 - C265 * C348) * C54786 + (C6915 - C6916) * C54843 +
            (C7294 - C7295) * C54787 + C9790 * C54844 + C10047 * C54788 +
            (C9795 - C9794) * C54845 + (C10049 - C10048) * C54789) *
               C139731 * C1565 +
           ((C265 * C1570 - C139835 * C1741) * C54842 +
            (C265 * C1829 - C139835 * C1997) * C54786 +
            (C10635 - C10636) * C54843 + (C10961 - C10962) * C54787 +
            (C10639 - C10640) * C54844 + (C10963 - C10964) * C54788 +
            (C265 * C10394 - C139835 * C10630) * C54845 +
            (C265 * C10740 - C139835 * C10958) * C54789) *
               C139731 * C140002) *
              C139792 * C808 +
          (((C280 - C279) * C54842 + (C503 - C502) * C54786 + C6927 * C54843 +
            C7300 * C54787 + C6929 * C54844 + C7301 * C54788 +
            (C6931 - C6932) * C54845 + (C7302 - C7303) * C54789) *
               C139731 * C1565 +
           ((C1753 - C1752) * C54842 + (C2004 - C2003) * C54786 +
            (C7987 - C7986) * C54843 + (C8322 - C8321) * C54787 +
            (C7991 - C7990) * C54844 + (C8324 - C8323) * C54788 +
            (C139835 * C10631 - C265 * C10395) * C54845 +
            (C139835 * C10959 - C265 * C10741) * C54789) *
               C139731 * C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eezx[83] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47131 * C114 - C47136 * C108 + C47132 * C116 - C47138 * C109 +
              C47133 * C118 - C47140 * C110) *
                 C265 +
             (C47131 * C573 - C47136 * C567 + C47132 * C574 - C47138 * C568 +
              C47133 * C575 - C47140 * C569) *
                 C139835) *
                C47134 +
            ((C48294 - C48295 + C48296 - C48297 + C48298 - C48299) * C265 +
             (C48640 - C48641 + C48642 - C48643 + C48644 - C48645) * C139835) *
                C139873) *
               C1565 +
           (((C47136 * C1570 - C47131 * C1578 + C47138 * C1569 -
              C47132 * C1576 + C47140 * C1568 - C47133 * C1574) *
                 C265 +
             (C47136 * C2074 - C47131 * C2079 + C47138 * C2075 -
              C47132 * C2080 + C47140 * C2076 - C47133 * C2081) *
                 C139835) *
                C47134 +
            ((C47136 * C3438 - C47131 * C3442 + C47138 * C3439 -
              C47132 * C3444 + C47140 * C3440 - C47133 * C3446) *
                 C265 +
             (C47136 * C3882 - C47131 * C3886 + C47138 * C3883 -
              C47132 * C3887 + C47140 * C3884 - C47133 * C3888) *
                 C139835) *
                C139873) *
               C140002) *
              C139792 * C808 +
          ((((C47136 * C109 - C47131 * C116 + C47138 * C110 - C47132 * C118 +
              C47140 * C111 - C47133 * C120) *
                 C265 +
             (C47136 * C568 - C47131 * C574 + C47138 * C569 - C47132 * C575 +
              C47140 * C570 - C47133 * C576) *
                 C139835) *
                C47134 +
            ((C48306 - C48307 + C48308 - C48309 + C48310 - C48311) * C265 +
             (C48646 - C48647 + C48648 - C48649 + C48650 - C48651) * C139835) *
                C139873) *
               C1565 +
           (((C47131 * C1576 - C47136 * C1569 + C47132 * C1574 -
              C47138 * C1568 + C47133 * C1572 - C47140 * C1567) *
                 C265 +
             (C47131 * C2080 - C47136 * C2075 + C47132 * C2081 -
              C47138 * C2076 + C47133 * C2082 - C47140 * C2077) *
                 C139835) *
                C47134 +
            ((C47131 * C3444 - C47136 * C3439 + C47132 * C3446 -
              C47138 * C3440 + C47133 * C3448 - C47140 * C3441) *
                 C265 +
             (C47131 * C3887 - C47136 * C3883 + C47132 * C3888 -
              C47138 * C3884 + C47133 * C3889 - C47140 * C3885) *
                 C139835) *
                C139873) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C139731 * C114 - C54790 * C108) * C265 +
             (C139731 * C573 - C54790 * C567) * C139835) *
                C54786 +
            ((C55513 - C55514) * C265 + (C55735 - C55736) * C139835) * C54787 +
            ((C55517 - C55518) * C265 + (C55737 - C55738) * C139835) * C54788 +
            ((C55521 - C55522) * C265 + (C55739 - C55740) * C139835) * C54789) *
               C1565 +
           (((C54790 * C1570 - C139731 * C1578) * C265 +
             (C54790 * C2074 - C139731 * C2079) * C139835) *
                C54786 +
            ((C54790 * C3438 - C139731 * C3442) * C265 +
             (C54790 * C3882 - C139731 * C3886) * C139835) *
                C54787 +
            ((C54790 * C7754 - C139731 * C7758) * C265 +
             (C54790 * C8422 - C139731 * C8425) * C139835) *
                C54788 +
            ((C54790 * C10394 - C139731 * C10396) * C265 +
             (C54790 * C11062 - C139731 * C11064) * C139835) *
                C54789) *
               C140002) *
              C139792 * C808 +
          ((((C54790 * C109 - C139731 * C116) * C265 +
             (C54790 * C568 - C139731 * C574) * C139835) *
                C54786 +
            ((C55525 - C55526) * C265 + (C55741 - C55742) * C139835) * C54787 +
            ((C55529 - C55530) * C265 + (C55743 - C55744) * C139835) * C54788 +
            ((C55533 - C55534) * C265 + (C55745 - C55746) * C139835) * C54789) *
               C1565 +
           (((C139731 * C1576 - C54790 * C1569) * C265 +
             (C139731 * C2080 - C54790 * C2075) * C139835) *
                C54786 +
            ((C139731 * C3444 - C54790 * C3439) * C265 +
             (C139731 * C3887 - C54790 * C3883) * C139835) *
                C54787 +
            ((C139731 * C7756 - C54790 * C7753) * C265 +
             (C139731 * C8426 - C54790 * C8423) * C139835) *
                C54788 +
            ((C139731 * C10398 - C54790 * C10395) * C265 +
             (C139731 * C11065 - C54790 * C11063) * C139835) *
                C54789) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eezy[83] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47134 * C183 - C47216 * C108 + C139873 * C896 - C47217 * C813) *
                 C265 +
             (C47134 * C629 - C47216 * C567 + C139873 * C1393 -
              C47217 * C1317) *
                 C139835) *
                C47131 +
            ((C47219 - C47220 + C47221 - C47222) * C265 +
             (C47745 - C47746 + C47747 - C47748) * C139835) *
                C47132 +
            C47762 * C47133) *
               C1565 +
           (((C47216 * C1570 - C47134 * C1653 + C47217 * C3438 -
              C139873 * C3520) *
                 C265 +
             (C47216 * C2074 - C47134 * C2150 + C47217 * C3882 -
              C139873 * C3956) *
                 C139835) *
                C47131 +
            ((C49056 - C49057 + C49058 - C49059) * C265 +
             (C49688 - C49689 + C49690 - C49691) * C139835) *
                C47132 +
            ((C49064 - C49065 + C49066 - C49067) * C265 +
             (C49692 - C49693 + C49694 - C49695) * C139835) *
                C47133) *
               C140002) *
              C139792 * C808 +
          ((((C47220 - C47219 + C47222 - C47221) * C265 +
             (C47746 - C47745 + C47748 - C47747) * C139835) *
                C47131 +
            ((C47228 - C47227 + C47230 - C47229) * C265 +
             (C47751 - C47750 + C47753 - C47752) * C139835) *
                C47132 +
            ((C47235 - C47236 + C47237 - C47238) * C265 +
             (C47754 - C47755 + C47756 - C47757) * C139835) *
                C47133) *
               C1565 +
           (((C49057 - C49056 + C49059 - C49058) * C265 +
             (C49689 - C49688 + C49691 - C49690) * C139835) *
                C47131 +
            ((C49065 - C49064 + C49067 - C49066) * C265 +
             (C49693 - C49692 + C49695 - C49694) * C139835) *
                C47132 +
            ((C47134 * C1656 - C47216 * C1567 + C139873 * C3523 -
              C47217 * C3441) *
                 C265 +
             (C47134 * C2153 - C47216 * C2077 + C139873 * C3959 -
              C47217 * C3885) *
                 C139835) *
                C47133) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C54786 * C183 - C54842 * C108 + C54787 * C896 - C54843 * C813 +
             C54788 * C2974 - C54844 * C2908 + C54789 * C6792 -
             C54845 * C6627) *
                C265 +
            (C54786 * C629 - C54842 * C567 + C54787 * C1393 - C54843 * C1317 +
             C54788 * C3314 - C54844 * C3256 + C54789 * C7521 -
             C54845 * C7401) *
                C139835) *
               C139731 * C1565 +
           ((C54842 * C1570 - C54786 * C1653 + C54843 * C3438 - C54787 * C3520 +
             C54844 * C7754 - C54788 * C7863 + C54845 * C10394 -
             C54789 * C10528) *
                C265 +
            (C54842 * C2074 - C54786 * C2150 + C54843 * C3882 - C54787 * C3956 +
             C54844 * C8422 - C54788 * C8526 + C54845 * C11062 -
             C54789 * C11172) *
                C139835) *
               C139731 * C140002) *
              C139792 * C808 +
          (((C54842 * C109 - C54786 * C184 + C54843 * C812 - C54787 * C897 +
             C54844 * C2909 - C54788 * C2975 + C54845 * C6626 -
             C54789 * C6793) *
                C265 +
            (C54842 * C568 - C54786 * C630 + C54843 * C1318 - C54787 * C1394 +
             C54844 * C3257 - C54788 * C3315 + C54845 * C7402 -
             C54789 * C7522) *
                C139835) *
               C139731 * C1565 +
           ((C54786 * C1654 - C54842 * C1569 + C54787 * C3521 - C54843 * C3439 +
             C54788 * C7864 - C54844 * C7753 + C54789 * C10529 -
             C54845 * C10395) *
                C265 +
            (C54786 * C2151 - C54842 * C2075 + C54787 * C3957 - C54843 * C3883 +
             C54788 * C8527 - C54844 * C8423 + C54789 * C11173 -
             C54845 * C11063) *
                C139835) *
               C139731 * C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eezz[83] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C265 * C266 - C701 * C108 - C265 * C567 + C139835 * C702) *
                 C47134 +
             C7652 * C139873) *
                C47131 +
            (C47837 + C47838) * C47132 + C47843 * C47133) *
               C1565 -
           ((C49794 + C49795) * C47133 + (C49796 + C49797) * C47132 +
            (C11288 * C139873 +
             (C265 * C1741 - C701 * C1570 - C265 * C2074 + C139835 * C2230) *
                 C47134) *
                C47131) *
               C140002) *
              C139792 * C808 +
          (((C49797 + C49796) * C47131 + (C49795 + C49794) * C47132 +
            (C2251 * C47134 +
             (C265 * C3597 - C701 * C3441 - C265 * C3885 + C139835 * C4029) *
                 C139873) *
                C47133) *
               C140002 -
           ((C47841 + C47842) * C47133 + (C47840 + C47839) * C47132 +
            (C47838 + C47837) * C47131) *
               C1565) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C265 * C266 - C701 * C108 - C265 * C567 + C139835 * C702) *
                C54786 +
            C7652 * C54787 + C7653 * C54788 + C10296 * C54789) *
               C139731 * C1565 -
           ((C265 * C10630 - C701 * C10394 - C265 * C11062 + C139835 * C11272) *
                C54789 +
            C11287 * C54788 + C11288 * C54787 +
            (C265 * C1741 - C701 * C1570 - C265 * C2074 + C139835 * C2230) *
                C54786) *
               C139731 * C140002) *
              C139792 * C808 +
          ((C2253 * C54786 + C8651 * C54787 + C8650 * C54788 +
            (C265 * C10631 - C701 * C10395 - C265 * C11063 + C139835 * C11273) *
                C54789) *
               C139731 * C140002 -
           (C7654 * C54789 + C6525 * C54788 + C1496 * C54787 + C733 * C54786) *
               C139731 * C1565) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eexx[84] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47136 * C114 - C47137 * C108 - C47136 * C115 + C47131 * C126 +
             C47138 * C116 - C47139 * C109 - C47138 * C117 + C47132 * C127 +
             C47140 * C118 - C47141 * C110 - C47140 * C119 + C47133 * C128) *
                C139835 * C47134 +
            (C47978 + C47979 + C47980) * C139835 * C139873) *
               C139809 * C2322 -
           ((C47140 * C2916 - C47141 * C2910 - C47140 * C2917 + C47133 * C2922 +
             C47138 * C2914 - C47139 * C2909 - C47138 * C2915 + C47132 * C2921 +
             C47136 * C2912 - C47137 * C2908 - C47136 * C2913 +
             C47131 * C2920) *
                C139835 * C139873 +
            (C47980 + C47979 + C47978) * C139835 * C47134) *
               C139809 * C140000) *
              C2324 +
          (((C47981 + C47982 + C47983) * C139835 * C47134 +
            (C47136 * C2914 - C47137 * C2909 - C47136 * C2915 + C47131 * C2921 +
             C47138 * C2916 - C47139 * C2910 - C47138 * C2917 + C47132 * C2922 +
             C47140 * C2918 - C47141 * C2911 - C47140 * C2919 +
             C47133 * C2923) *
                C139835 * C139873) *
               C139809 * C140000 -
           ((C47983 + C47982 + C47981) * C139835 * C139873 +
            (C47140 * C120 - C47141 * C111 - C47140 * C121 + C47133 * C129 +
             C47138 * C118 - C47139 * C110 - C47138 * C119 + C47132 * C128 +
             C47136 * C116 - C47137 * C109 - C47136 * C117 + C47131 * C127) *
                C139835 * C47134) *
               C139809 * C2322) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C54790 * C114 - C54791 * C108 - C54790 * C115 + C139731 * C126) *
                C139835 * C54786 +
            C55309 * C54787 + C55310 * C54788 + C55311 * C54789) *
               C139809 * C2322 -
           ((C54790 * C9611 - C54791 * C9609 - C54790 * C9612 +
             C139731 * C9615) *
                C139835 * C54789 +
            C55311 * C54788 + C55310 * C54787 + C55309 * C54786) *
               C139809 * C140000) *
              C2324 +
          ((C55312 * C54786 + C55313 * C54787 + C55314 * C54788 +
            (C54790 * C9613 - C54791 * C9610 - C54790 * C9614 +
             C139731 * C9616) *
                C139835 * C54789) *
               C139809 * C140000 -
           (C55314 * C54789 + C55313 * C54788 + C55312 * C54787 +
            (C54790 * C116 - C54791 * C109 - C54790 * C117 + C139731 * C127) *
                C139835 * C54786) *
               C139809 * C2322) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eexy[84] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47134 * C183 - C47216 * C108 + C139873 * C896 - C47217 * C813) *
                C47136 +
            (C47134 * C189 - C47216 * C115 + C139873 * C901 - C47217 * C822) *
                C47131 +
            (C47219 - C47220 + C47221 - C47222) * C47138 +
            (C47223 - C47224 + C47225 - C47226) * C47132 + C47247 * C47140 +
            C47248 * C47133) *
               C139835 * C139809 * C2322 +
           ((C47216 * C813 - C47134 * C896 + C47217 * C2908 - C139873 * C2974) *
                C47136 +
            (C47216 * C822 - C47134 * C901 + C47217 * C2913 - C139873 * C2978) *
                C47131 +
            (C48082 - C48083 + C48084 - C48085) * C47138 +
            (C48086 - C48087 + C48088 - C48089) * C47132 +
            (C48090 - C48091 + C48092 - C48093) * C47140 +
            (C48094 - C48095 + C48096 - C48097) * C47133) *
               C139835 * C139809 * C140000) *
              C2324 +
          (((C47220 - C47219 + C47222 - C47221) * C47136 +
            (C47224 - C47223 + C47226 - C47225) * C47131 +
            (C47228 - C47227 + C47230 - C47229) * C47138 +
            (C47232 - C47231 + C47234 - C47233) * C47132 +
            (C47235 - C47236 + C47237 - C47238) * C47140 +
            (C47239 - C47240 + C47241 - C47242) * C47133) *
               C139835 * C139809 * C2322 +
           ((C48083 - C48082 + C48085 - C48084) * C47136 +
            (C48087 - C48086 + C48089 - C48088) * C47131 +
            (C48091 - C48090 + C48093 - C48092) * C47138 +
            (C48095 - C48094 + C48097 - C48096) * C47132 +
            (C47134 * C899 - C47216 * C810 + C139873 * C2977 - C47217 * C2911) *
                C47140 +
            (C47134 * C904 - C47216 * C816 + C139873 * C2981 - C47217 * C2919) *
                C47133) *
               C139835 * C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C54786 * C183 - C54842 * C108 + C54787 * C896 - C54843 * C813 +
             C54788 * C2974 - C54844 * C2908 + C54789 * C6792 -
             C54845 * C6627) *
                C54790 +
            (C54786 * C189 - C54842 * C115 + C54787 * C901 - C54843 * C822 +
             C54788 * C2978 - C54844 * C2913 + C54789 * C6795 -
             C54845 * C6632) *
                C139731) *
               C139835 * C139809 * C2322 +
           ((C54842 * C813 - C54786 * C896 + C54843 * C2908 - C54787 * C2974 +
             C54844 * C6627 - C54788 * C6792 + C54845 * C9609 -
             C54789 * C9707) *
                C54790 +
            (C54842 * C822 - C54786 * C901 + C54843 * C2913 - C54787 * C2978 +
             C54844 * C6632 - C54788 * C6795 + C54845 * C9612 -
             C54789 * C9709) *
                C139731) *
               C139835 * C139809 * C140000) *
              C2324 +
          (((C54842 * C109 - C54786 * C184 + C54843 * C812 - C54787 * C897 +
             C54844 * C2909 - C54788 * C2975 + C54845 * C6626 -
             C54789 * C6793) *
                C54790 +
            (C54842 * C117 - C54786 * C190 + C54843 * C820 - C54787 * C902 +
             C54844 * C2915 - C54788 * C2979 + C54845 * C6630 -
             C54789 * C6796) *
                C139731) *
               C139835 * C139809 * C2322 +
           ((C54786 * C897 - C54842 * C812 + C54787 * C2975 - C54843 * C2909 +
             C54788 * C6793 - C54844 * C6626 + C54789 * C9708 -
             C54845 * C9610) *
                C54790 +
            (C54786 * C902 - C54842 * C820 + C54787 * C2979 - C54843 * C2915 +
             C54788 * C6796 - C54844 * C6630 + C54789 * C9710 -
             C54845 * C9614) *
                C139731) *
               C139835 * C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eexz[84] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C139835 * C266 - C265 * C108) * C47136 +
             (C139835 * C272 - C265 * C115) * C47131 + (C279 - C280) * C47138 +
             (C281 - C282) * C47132 + C295 * C47140 + C296 * C47133) *
                C47134 +
            ((C6915 - C6916) * C47136 + (C6917 - C6918) * C47131 +
             C6919 * C47138 + C6920 * C47132 + C21967 * C47140 +
             C21968 * C47133) *
                C139873) *
               C139809 * C2322 +
           (((C6916 - C6915) * C47136 + (C6918 - C6917) * C47131 +
             C6927 * C47138 + C6928 * C47132 + C22843 * C47140 +
             C22844 * C47133) *
                C47134 +
            ((C6922 - C6921) * C47136 + (C6924 - C6923) * C47131 +
             C6929 * C47138 + C6930 * C47132 + (C6000 - C6001) * C47140 +
             (C6002 - C6003) * C47133) *
                C139873) *
               C139809 * C140000) *
              C2324 +
          ((((C280 - C279) * C47136 + (C282 - C281) * C47131 +
             (C284 - C283) * C47138 + (C286 - C285) * C47132 +
             (C288 - C287) * C47140 + (C290 - C289) * C47133) *
                C47134 +
            (C6927 * C47136 + C6928 * C47131 + C22843 * C47138 +
             C22844 * C47132 + (C1003 - C1004) * C47140 +
             (C1005 - C1006) * C47133) *
                C139873) *
               C139809 * C2322 +
           ((C6919 * C47136 + C6920 * C47131 + C21967 * C47138 +
             C21968 * C47132 + (C1004 - C1003) * C47140 +
             (C1006 - C1005) * C47133) *
                C47134 +
            (C6925 * C47136 + C6926 * C47131 + (C6001 - C6000) * C47138 +
             (C6003 - C6002) * C47132 +
             (C139835 * C3035 - C265 * C2911) * C47140 +
             (C139835 * C3039 - C265 * C2919) * C47133) *
                C139873) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C139835 * C266 - C265 * C108) * C54790 +
             (C139835 * C272 - C265 * C115) * C139731) *
                C54786 +
            ((C6915 - C6916) * C54790 + (C6917 - C6918) * C139731) * C54787 +
            (C9790 * C54790 + C9791 * C139731) * C54788 +
            ((C9795 - C9794) * C54790 + (C9797 - C9796) * C139731) * C54789) *
               C139809 * C2322 +
           (((C6916 - C6915) * C54790 + (C6918 - C6917) * C139731) * C54786 +
            ((C6922 - C6921) * C54790 + (C6924 - C6923) * C139731) * C54787 +
            ((C9794 - C9795) * C54790 + (C9796 - C9797) * C139731) * C54788 +
            ((C265 * C9609 - C139835 * C9785) * C54790 +
             (C265 * C9612 - C139835 * C9787) * C139731) *
                C54789) *
               C139809 * C140000) *
              C2324 +
          ((((C280 - C279) * C54790 + (C282 - C281) * C139731) * C54786 +
            (C6927 * C54790 + C6928 * C139731) * C54787 +
            (C6929 * C54790 + C6930 * C139731) * C54788 +
            ((C6931 - C6932) * C54790 + (C6933 - C6934) * C139731) * C54789) *
               C139809 * C2322 +
           ((C6919 * C54790 + C6920 * C139731) * C54786 +
            (C6925 * C54790 + C6926 * C139731) * C54787 +
            ((C6932 - C6931) * C54790 + (C6934 - C6933) * C139731) * C54788 +
            ((C139835 * C9786 - C265 * C9610) * C54790 +
             (C139835 * C9788 - C265 * C9614) * C139731) *
                C54789) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[84] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47131 * C114 - C47136 * C108 + C47132 * C116 - C47138 * C109 +
             C47133 * C118 - C47140 * C110) *
                C47216 +
            (C47131 * C354 - C47136 * C348 + C47132 * C355 - C47138 * C349 +
             C47133 * C356 - C47140 * C350) *
                C47134 +
            (C48294 - C48295 + C48296 - C48297 + C48298 - C48299) * C47217 +
            (C48300 - C48301 + C48302 - C48303 + C48304 - C48305) * C139873) *
               C139835 * C139809 * C2322 +
           ((C48295 - C48294 + C48297 - C48296 + C48299 - C48298) * C47216 +
            (C48301 - C48300 + C48303 - C48302 + C48305 - C48304) * C47134 +
            (C47136 * C2908 - C47131 * C2912 + C47138 * C2909 - C47132 * C2914 +
             C47140 * C2910 - C47133 * C2916) *
                C47217 +
            (C47136 * C3090 - C47131 * C3094 + C47138 * C3091 - C47132 * C3095 +
             C47140 * C3092 - C47133 * C3096) *
                C139873) *
               C139835 * C139809 * C140000) *
              C2324 +
          (((C47136 * C109 - C47131 * C116 + C47138 * C110 - C47132 * C118 +
             C47140 * C111 - C47133 * C120) *
                C47216 +
            (C47136 * C349 - C47131 * C355 + C47138 * C350 - C47132 * C356 +
             C47140 * C351 - C47133 * C357) *
                C47134 +
            (C48306 - C48307 + C48308 - C48309 + C48310 - C48311) * C47217 +
            (C48312 - C48313 + C48314 - C48315 + C48316 - C48317) * C139873) *
               C139835 * C139809 * C2322 +
           ((C48307 - C48306 + C48309 - C48308 + C48311 - C48310) * C47216 +
            (C48313 - C48312 + C48315 - C48314 + C48317 - C48316) * C47134 +
            (C47131 * C2914 - C47136 * C2909 + C47132 * C2916 - C47138 * C2910 +
             C47133 * C2918 - C47140 * C2911) *
                C47217 +
            (C47131 * C3095 - C47136 * C3091 + C47132 * C3096 - C47138 * C3092 +
             C47133 * C3097 - C47140 * C3093) *
                C139873) *
               C139835 * C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C139731 * C114 - C54790 * C108) * C54842 +
            (C139731 * C354 - C54790 * C348) * C54786 +
            (C55513 - C55514) * C54843 + (C55515 - C55516) * C54787 +
            (C55517 - C55518) * C54844 + (C55519 - C55520) * C54788 +
            (C55521 - C55522) * C54845 + (C55523 - C55524) * C54789) *
               C139835 * C139809 * C2322 +
           ((C55514 - C55513) * C54842 + (C55516 - C55515) * C54786 +
            (C55518 - C55517) * C54843 + (C55520 - C55519) * C54787 +
            (C55522 - C55521) * C54844 + (C55524 - C55523) * C54788 +
            (C54790 * C9609 - C139731 * C9611) * C54845 +
            (C54790 * C9876 - C139731 * C9878) * C54789) *
               C139835 * C139809 * C140000) *
              C2324 +
          (((C54790 * C109 - C139731 * C116) * C54842 +
            (C54790 * C349 - C139731 * C355) * C54786 +
            (C55525 - C55526) * C54843 + (C55527 - C55528) * C54787 +
            (C55529 - C55530) * C54844 + (C55531 - C55532) * C54788 +
            (C55533 - C55534) * C54845 + (C55535 - C55536) * C54789) *
               C139835 * C139809 * C2322 +
           ((C55526 - C55525) * C54842 + (C55528 - C55527) * C54786 +
            (C55530 - C55529) * C54843 + (C55532 - C55531) * C54787 +
            (C55534 - C55533) * C54844 + (C55536 - C55535) * C54788 +
            (C139731 * C9613 - C54790 * C9610) * C54845 +
            (C139731 * C9879 - C54790 * C9877) * C54789) *
               C139835 * C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[84] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47216 * C183 - C47470 * C108 - C47216 * C348 + C47134 * C411 +
             C47217 * C896 - C47471 * C813 - C47217 * C1072 + C139873 * C1151) *
                C47131 +
            (C47509 + C47510) * C47132 + C47515 * C47133) *
               C139835 * C139809 * C2322 -
           ((C48440 + C48441) * C47133 + (C48442 + C48443) * C47132 +
            (C47217 * C2974 - C47471 * C2908 - C47217 * C3090 +
             C139873 * C3148 + C47216 * C896 - C47470 * C813 - C47216 * C1072 +
             C47134 * C1151) *
                C47131) *
               C139835 * C139809 * C140000) *
              C2324 +
          (((C48443 + C48442) * C47131 + (C48441 + C48440) * C47132 +
            (C47216 * C899 - C47470 * C810 - C47216 * C1075 + C47134 * C1148 +
             C47217 * C2977 - C47471 * C2911 - C47217 * C3093 +
             C139873 * C3151) *
                C47133) *
               C139835 * C139809 * C140000 -
           ((C47513 + C47514) * C47133 + (C47512 + C47511) * C47132 +
            (C47510 + C47509) * C47131) *
               C139835 * C139809 * C2322) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C54842 * C183 - C54996 * C108 - C54842 * C348 + C54786 * C411 +
            C54843 * C896 - C54997 * C813 - C54843 * C1072 + C54787 * C1151 +
            C54844 * C2974 - C54998 * C2908 - C54844 * C3090 + C54788 * C3148 +
            C54845 * C6792 - C54999 * C6627 - C54845 * C7032 + C54789 * C7169) *
               C139731 * C139835 * C139809 * C2322 -
           (C54845 * C9707 - C54999 * C9609 - C54845 * C9876 + C54789 * C9968 +
            C54844 * C6792 - C54998 * C6627 - C54844 * C7032 + C54788 * C7169 +
            C54843 * C2974 - C54997 * C2908 - C54843 * C3090 + C54787 * C3148 +
            C54842 * C896 - C54996 * C813 - C54842 * C1072 + C54786 * C1151) *
               C139731 * C139835 * C139809 * C140000) *
              C2324 +
          ((C54842 * C897 - C54996 * C812 - C54842 * C1073 + C54786 * C1150 +
            C54843 * C2975 - C54997 * C2909 - C54843 * C3091 + C54787 * C3149 +
            C54844 * C6793 - C54998 * C6626 - C54844 * C7033 + C54788 * C7168 +
            C54845 * C9708 - C54999 * C9610 - C54845 * C9877 + C54789 * C9969) *
               C139731 * C139835 * C139809 * C140000 -
           (C54845 * C6793 - C54999 * C6626 - C54845 * C7033 + C54789 * C7168 +
            C54844 * C2975 - C54998 * C2909 - C54844 * C3091 + C54788 * C3149 +
            C54843 * C897 - C54997 * C812 - C54843 * C1073 + C54787 * C1150 +
            C54842 * C184 - C54996 * C109 - C54842 * C349 + C54786 * C412) *
               C139731 * C139835 * C139809 * C2322) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[84] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C139835 * C266 - C265 * C108) * C47216 +
             (C139835 * C495 - C265 * C348) * C47134 +
             (C6915 - C6916) * C47217 + (C7294 - C7295) * C139873) *
                C47131 +
            ((C279 - C280) * C47216 + (C502 - C503) * C47134 + C6919 * C47217 +
             C7298 * C139873) *
                C47132 +
            C47596 * C47133) *
               C139809 * C2322 +
           (((C6916 - C6915) * C47216 + (C7295 - C7294) * C47134 +
             (C6922 - C6921) * C47217 + (C7297 - C7296) * C139873) *
                C47131 +
            (C6927 * C47216 + C7300 * C47134 + C6929 * C47217 +
             C7301 * C139873) *
                C47132 +
            (C22843 * C47216 + C23191 * C47134 + (C6000 - C6001) * C47217 +
             (C6273 - C6274) * C139873) *
                C47133) *
               C139809 * C140000) *
              C2324 +
          ((((C280 - C279) * C47216 + (C503 - C502) * C47134 + C6927 * C47217 +
             C7300 * C139873) *
                C47131 +
            ((C284 - C283) * C47216 + (C506 - C505) * C47134 + C22843 * C47217 +
             C23191 * C139873) *
                C47132 +
            ((C288 - C287) * C47216 + (C509 - C508) * C47134 +
             (C1003 - C1004) * C47217 + (C1250 - C1251) * C139873) *
                C47133) *
               C139809 * C2322 +
           ((C6919 * C47216 + C7298 * C47134 + C6925 * C47217 +
             C7299 * C139873) *
                C47131 +
            (C21967 * C47216 + C22239 * C47134 + (C6001 - C6000) * C47217 +
             (C6274 - C6273) * C139873) *
                C47132 +
            ((C1004 - C1003) * C47216 + (C1251 - C1250) * C47134 +
             (C139835 * C3035 - C265 * C2911) * C47217 +
             (C139835 * C3205 - C265 * C3093) * C139873) *
                C47133) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C139835 * C266 - C265 * C108) * C54842 +
            (C139835 * C495 - C265 * C348) * C54786 + (C6915 - C6916) * C54843 +
            (C7294 - C7295) * C54787 + C9790 * C54844 + C10047 * C54788 +
            (C9795 - C9794) * C54845 + (C10049 - C10048) * C54789) *
               C139731 * C139809 * C2322 +
           ((C6916 - C6915) * C54842 + (C7295 - C7294) * C54786 +
            (C6922 - C6921) * C54843 + (C7297 - C7296) * C54787 +
            (C9794 - C9795) * C54844 + (C10048 - C10049) * C54788 +
            (C265 * C9609 - C139835 * C9785) * C54845 +
            (C265 * C9876 - C139835 * C10044) * C54789) *
               C139731 * C139809 * C140000) *
              C2324 +
          (((C280 - C279) * C54842 + (C503 - C502) * C54786 + C6927 * C54843 +
            C7300 * C54787 + C6929 * C54844 + C7301 * C54788 +
            (C6931 - C6932) * C54845 + (C7302 - C7303) * C54789) *
               C139731 * C139809 * C2322 +
           (C6919 * C54842 + C7298 * C54786 + C6925 * C54843 + C7299 * C54787 +
            (C6932 - C6931) * C54844 + (C7303 - C7302) * C54788 +
            (C139835 * C9786 - C265 * C9610) * C54845 +
            (C139835 * C10045 - C265 * C9877) * C54789) *
               C139731 * C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eezx[84] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47131 * C114 - C47136 * C108 + C47132 * C116 - C47138 * C109 +
              C47133 * C118 - C47140 * C110) *
                 C265 +
             (C47131 * C573 - C47136 * C567 + C47132 * C574 - C47138 * C568 +
              C47133 * C575 - C47140 * C569) *
                 C139835) *
                C47134 +
            ((C48294 - C48295 + C48296 - C48297 + C48298 - C48299) * C265 +
             (C48640 - C48641 + C48642 - C48643 + C48644 - C48645) * C139835) *
                C139873) *
               C139809 * C2322 +
           (((C48295 - C48294 + C48297 - C48296 + C48299 - C48298) * C265 +
             (C48641 - C48640 + C48643 - C48642 + C48645 - C48644) * C139835) *
                C47134 +
            ((C47136 * C2908 - C47131 * C2912 + C47138 * C2909 -
              C47132 * C2914 + C47140 * C2910 - C47133 * C2916) *
                 C265 +
             (C47136 * C3256 - C47131 * C3260 + C47138 * C3257 -
              C47132 * C3261 + C47140 * C3258 - C47133 * C3262) *
                 C139835) *
                C139873) *
               C139809 * C140000) *
              C2324 +
          ((((C47136 * C109 - C47131 * C116 + C47138 * C110 - C47132 * C118 +
              C47140 * C111 - C47133 * C120) *
                 C265 +
             (C47136 * C568 - C47131 * C574 + C47138 * C569 - C47132 * C575 +
              C47140 * C570 - C47133 * C576) *
                 C139835) *
                C47134 +
            ((C48306 - C48307 + C48308 - C48309 + C48310 - C48311) * C265 +
             (C48646 - C48647 + C48648 - C48649 + C48650 - C48651) * C139835) *
                C139873) *
               C139809 * C2322 +
           (((C48307 - C48306 + C48309 - C48308 + C48311 - C48310) * C265 +
             (C48647 - C48646 + C48649 - C48648 + C48651 - C48650) * C139835) *
                C47134 +
            ((C47131 * C2914 - C47136 * C2909 + C47132 * C2916 -
              C47138 * C2910 + C47133 * C2918 - C47140 * C2911) *
                 C265 +
             (C47131 * C3261 - C47136 * C3257 + C47132 * C3262 -
              C47138 * C3258 + C47133 * C3263 - C47140 * C3259) *
                 C139835) *
                C139873) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C139731 * C114 - C54790 * C108) * C265 +
             (C139731 * C573 - C54790 * C567) * C139835) *
                C54786 +
            ((C55513 - C55514) * C265 + (C55735 - C55736) * C139835) * C54787 +
            ((C55517 - C55518) * C265 + (C55737 - C55738) * C139835) * C54788 +
            ((C55521 - C55522) * C265 + (C55739 - C55740) * C139835) * C54789) *
               C139809 * C2322 +
           (((C55514 - C55513) * C265 + (C55736 - C55735) * C139835) * C54786 +
            ((C55518 - C55517) * C265 + (C55738 - C55737) * C139835) * C54787 +
            ((C55522 - C55521) * C265 + (C55740 - C55739) * C139835) * C54788 +
            ((C54790 * C9609 - C139731 * C9611) * C265 +
             (C54790 * C10123 - C139731 * C10125) * C139835) *
                C54789) *
               C139809 * C140000) *
              C2324 +
          ((((C54790 * C109 - C139731 * C116) * C265 +
             (C54790 * C568 - C139731 * C574) * C139835) *
                C54786 +
            ((C55525 - C55526) * C265 + (C55741 - C55742) * C139835) * C54787 +
            ((C55529 - C55530) * C265 + (C55743 - C55744) * C139835) * C54788 +
            ((C55533 - C55534) * C265 + (C55745 - C55746) * C139835) * C54789) *
               C139809 * C2322 +
           (((C55526 - C55525) * C265 + (C55742 - C55741) * C139835) * C54786 +
            ((C55530 - C55529) * C265 + (C55744 - C55743) * C139835) * C54787 +
            ((C55534 - C55533) * C265 + (C55746 - C55745) * C139835) * C54788 +
            ((C139731 * C9613 - C54790 * C9610) * C265 +
             (C139731 * C10126 - C54790 * C10124) * C139835) *
                C54789) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eezy[84] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47134 * C183 - C47216 * C108 + C139873 * C896 - C47217 * C813) *
                 C265 +
             (C47134 * C629 - C47216 * C567 + C139873 * C1393 -
              C47217 * C1317) *
                 C139835) *
                C47131 +
            ((C47219 - C47220 + C47221 - C47222) * C265 +
             (C47745 - C47746 + C47747 - C47748) * C139835) *
                C47132 +
            C47762 * C47133) *
               C139809 * C2322 +
           (((C47216 * C813 - C47134 * C896 + C47217 * C2908 -
              C139873 * C2974) *
                 C265 +
             (C47216 * C1317 - C47134 * C1393 + C47217 * C3256 -
              C139873 * C3314) *
                 C139835) *
                C47131 +
            ((C48082 - C48083 + C48084 - C48085) * C265 +
             (C48750 - C48751 + C48752 - C48753) * C139835) *
                C47132 +
            ((C48090 - C48091 + C48092 - C48093) * C265 +
             (C48754 - C48755 + C48756 - C48757) * C139835) *
                C47133) *
               C139809 * C140000) *
              C2324 +
          ((((C47220 - C47219 + C47222 - C47221) * C265 +
             (C47746 - C47745 + C47748 - C47747) * C139835) *
                C47131 +
            ((C47228 - C47227 + C47230 - C47229) * C265 +
             (C47751 - C47750 + C47753 - C47752) * C139835) *
                C47132 +
            ((C47235 - C47236 + C47237 - C47238) * C265 +
             (C47754 - C47755 + C47756 - C47757) * C139835) *
                C47133) *
               C139809 * C2322 +
           (((C48083 - C48082 + C48085 - C48084) * C265 +
             (C48751 - C48750 + C48753 - C48752) * C139835) *
                C47131 +
            ((C48091 - C48090 + C48093 - C48092) * C265 +
             (C48755 - C48754 + C48757 - C48756) * C139835) *
                C47132 +
            ((C47134 * C899 - C47216 * C810 + C139873 * C2977 -
              C47217 * C2911) *
                 C265 +
             (C47134 * C1396 - C47216 * C1320 + C139873 * C3317 -
              C47217 * C3259) *
                 C139835) *
                C47133) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C54786 * C183 - C54842 * C108 + C54787 * C896 - C54843 * C813 +
             C54788 * C2974 - C54844 * C2908 + C54789 * C6792 -
             C54845 * C6627) *
                C265 +
            (C54786 * C629 - C54842 * C567 + C54787 * C1393 - C54843 * C1317 +
             C54788 * C3314 - C54844 * C3256 + C54789 * C7521 -
             C54845 * C7401) *
                C139835) *
               C139731 * C139809 * C2322 +
           ((C54842 * C813 - C54786 * C896 + C54843 * C2908 - C54787 * C2974 +
             C54844 * C6627 - C54788 * C6792 + C54845 * C9609 -
             C54789 * C9707) *
                C265 +
            (C54842 * C1317 - C54786 * C1393 + C54843 * C3256 - C54787 * C3314 +
             C54844 * C7401 - C54788 * C7521 + C54845 * C10123 -
             C54789 * C10211) *
                C139835) *
               C139731 * C139809 * C140000) *
              C2324 +
          (((C54842 * C109 - C54786 * C184 + C54843 * C812 - C54787 * C897 +
             C54844 * C2909 - C54788 * C2975 + C54845 * C6626 -
             C54789 * C6793) *
                C265 +
            (C54842 * C568 - C54786 * C630 + C54843 * C1318 - C54787 * C1394 +
             C54844 * C3257 - C54788 * C3315 + C54845 * C7402 -
             C54789 * C7522) *
                C139835) *
               C139731 * C139809 * C2322 +
           ((C54786 * C897 - C54842 * C812 + C54787 * C2975 - C54843 * C2909 +
             C54788 * C6793 - C54844 * C6626 + C54789 * C9708 -
             C54845 * C9610) *
                C265 +
            (C54786 * C1394 - C54842 * C1318 + C54787 * C3315 - C54843 * C3257 +
             C54788 * C7522 - C54844 * C7402 + C54789 * C10212 -
             C54845 * C10124) *
                C139835) *
               C139731 * C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eezz[84] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C265 * C266 - C701 * C108 - C265 * C567 + C139835 * C702) *
                 C47134 +
             C7652 * C139873) *
                C47131 +
            (C47837 + C47838) * C47132 + C47843 * C47133) *
               C139809 * C2322 -
           ((C48856 + C48857) * C47133 + (C48858 + C48859) * C47132 +
            (C7653 * C139873 + C7652 * C47134) * C47131) *
               C139809 * C140000) *
              C2324 +
          (((C48859 + C48858) * C47131 + (C48857 + C48856) * C47132 +
            (C1494 * C47134 +
             (C265 * C3035 - C701 * C2911 - C265 * C3259 + C139835 * C3371) *
                 C139873) *
                C47133) *
               C139809 * C140000 -
           ((C47841 + C47842) * C47133 + (C47840 + C47839) * C47132 +
            (C47838 + C47837) * C47131) *
               C139809 * C2322) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C265 * C266 - C701 * C108 - C265 * C567 + C139835 * C702) *
                C54786 +
            C7652 * C54787 + C7653 * C54788 + C10296 * C54789) *
               C139731 * C139809 * C2322 -
           ((C265 * C9785 - C701 * C9609 - C265 * C10123 + C139835 * C10287) *
                C54789 +
            C10296 * C54788 + C7653 * C54787 + C7652 * C54786) *
               C139731 * C139809 * C140000) *
              C2324 +
          ((C1496 * C54786 + C6525 * C54787 + C7654 * C54788 +
            (C265 * C9786 - C701 * C9610 - C265 * C10124 + C139835 * C10288) *
                C54789) *
               C139731 * C139809 * C140000 -
           (C7654 * C54789 + C6525 * C54788 + C1496 * C54787 + C733 * C54786) *
               C139731 * C139809 * C2322) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eexx[85] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C47136 * C114 - C47137 * C108 - C47136 * C115 + C47131 * C126 +
            C47138 * C116 - C47139 * C109 - C47138 * C117 + C47132 * C127 +
            C47140 * C118 - C47141 * C110 - C47140 * C119 + C47133 * C128) *
               C139835 * C47134 +
           (C47978 + C47979 + C47980) * C139835 * C139873) *
              C139809 * C2904 -
          ((C50772 + C50773 + C50774) * C139835 * C139873 +
           (C47980 + C47979 + C47978) * C139835 * C47134) *
              C139809 * C2905 +
          ((C50774 + C50773 + C50772) * C139835 * C47134 +
           (C47136 * C6631 - C47137 * C6627 - C47136 * C6632 + C47131 * C6636 +
            C47138 * C6629 - C47139 * C6626 - C47138 * C6630 + C47132 * C6635 +
            C47140 * C6633 - C47141 * C6628 - C47140 * C6634 + C47133 * C6637) *
               C139835 * C139873) *
              C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C54790 * C114 - C54791 * C108 - C54790 * C115 + C139731 * C126) *
               C139835 * C54786 +
           C55309 * C54787 + C55310 * C54788 + C55311 * C54789) *
              C139809 * C2904 -
          (C57128 * C54789 + C55311 * C54788 + C55310 * C54787 +
           C55309 * C54786) *
              C139809 * C2905 +
          (C55310 * C54786 + C55311 * C54787 + C57128 * C54788 +
           (C54790 * C57117 - C54791 * C57116 - C54790 * C57118 +
            C139731 * C57119) *
               C139835 * C54789) *
              C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eexy[85] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C47134 * C183 - C47216 * C108 + C139873 * C896 - C47217 * C813) *
               C47136 +
           (C47134 * C189 - C47216 * C115 + C139873 * C901 - C47217 * C822) *
               C47131 +
           (C47219 - C47220 + C47221 - C47222) * C47138 +
           (C47223 - C47224 + C47225 - C47226) * C47132 + C47247 * C47140 +
           C47248 * C47133) *
              C139835 * C139809 * C2904 +
          ((C47216 * C813 - C47134 * C896 + C47217 * C2908 - C139873 * C2974) *
               C47136 +
           (C47216 * C822 - C47134 * C901 + C47217 * C2913 - C139873 * C2978) *
               C47131 +
           (C48082 - C48083 + C48084 - C48085) * C47138 +
           (C48086 - C48087 + C48088 - C48089) * C47132 +
           (C48090 - C48091 + C48092 - C48093) * C47140 +
           (C48094 - C48095 + C48096 - C48097) * C47133) *
              C139835 * C139809 * C2905 +
          ((C47134 * C2974 - C47216 * C2908 + C139873 * C6792 -
            C47217 * C6627) *
               C47136 +
           (C47134 * C2978 - C47216 * C2913 + C139873 * C6795 -
            C47217 * C6632) *
               C47131 +
           (C47134 * C2975 - C47216 * C2909 + C139873 * C6793 -
            C47217 * C6626) *
               C47138 +
           (C47134 * C2979 - C47216 * C2915 + C139873 * C6796 -
            C47217 * C6630) *
               C47132 +
           (C47134 * C2976 - C47216 * C2910 + C139873 * C6794 -
            C47217 * C6628) *
               C47140 +
           (C47134 * C2980 - C47216 * C2917 + C139873 * C6797 -
            C47217 * C6634) *
               C47133) *
              C139835 * C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C54786 * C183 - C54842 * C108 + C54787 * C896 - C54843 * C813 +
            C54788 * C2974 - C54844 * C2908 + C54789 * C6792 - C54845 * C6627) *
               C54790 +
           (C54786 * C189 - C54842 * C115 + C54787 * C901 - C54843 * C822 +
            C54788 * C2978 - C54844 * C2913 + C54789 * C6795 - C54845 * C6632) *
               C139731) *
              C139835 * C139809 * C2904 +
          ((C54842 * C813 - C54786 * C896 + C54843 * C2908 - C54787 * C2974 +
            C54844 * C6627 - C54788 * C6792 + C54845 * C9609 - C54789 * C9707) *
               C54790 +
           (C54842 * C822 - C54786 * C901 + C54843 * C2913 - C54787 * C2978 +
            C54844 * C6632 - C54788 * C6795 + C54845 * C9612 - C54789 * C9709) *
               C139731) *
              C139835 * C139809 * C2905 +
          ((C54786 * C2974 - C54842 * C2908 + C54787 * C6792 - C54843 * C6627 +
            C54788 * C9707 - C54844 * C9609 + C54789 * C57178 -
            C54845 * C57116) *
               C54790 +
           (C54786 * C2978 - C54842 * C2913 + C54787 * C6795 - C54843 * C6632 +
            C54788 * C9709 - C54844 * C9612 + C54789 * C57179 -
            C54845 * C57118) *
               C139731) *
              C139835 * C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eexz[85] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C139835 * C266 - C265 * C108) * C47136 +
            (C139835 * C272 - C265 * C115) * C47131 + (C279 - C280) * C47138 +
            (C281 - C282) * C47132 + C295 * C47140 + C296 * C47133) *
               C47134 +
           ((C6915 - C6916) * C47136 + (C6917 - C6918) * C47131 +
            C6919 * C47138 + C6920 * C47132 + C21967 * C47140 +
            C21968 * C47133) *
               C139873) *
              C139809 * C2904 +
          (((C6916 - C6915) * C47136 + (C6918 - C6917) * C47131 +
            C6927 * C47138 + C6928 * C47132 + C22843 * C47140 +
            C22844 * C47133) *
               C47134 +
           ((C6922 - C6921) * C47136 + (C6924 - C6923) * C47131 +
            C6929 * C47138 + C6930 * C47132 + (C6000 - C6001) * C47140 +
            (C6002 - C6003) * C47133) *
               C139873) *
              C139809 * C2905 +
          ((C9790 * C47136 + C9791 * C47131 + C6925 * C47138 + C6926 * C47132 +
            (C6001 - C6000) * C47140 + (C6003 - C6002) * C47133) *
               C47134 +
           ((C9795 - C9794) * C47136 + (C9797 - C9796) * C47131 +
            (C6932 - C6931) * C47138 + (C6934 - C6933) * C47132 +
            (C139835 * C6910 - C265 * C6628) * C47140 +
            (C139835 * C6913 - C265 * C6634) * C47133) *
               C139873) *
              C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C139835 * C266 - C265 * C108) * C54790 +
            (C139835 * C272 - C265 * C115) * C139731) *
               C54786 +
           ((C6915 - C6916) * C54790 + (C6917 - C6918) * C139731) * C54787 +
           C57241 * C54788 + C57244 * C54789) *
              C139809 * C2904 +
          (((C6916 - C6915) * C54790 + (C6918 - C6917) * C139731) * C54786 +
           ((C6922 - C6921) * C54790 + (C6924 - C6923) * C139731) * C54787 +
           ((C9794 - C9795) * C54790 + (C9796 - C9797) * C139731) * C54788 +
           ((C57237 - C57238) * C54790 + (C57239 - C57240) * C139731) *
               C54789) *
              C139809 * C2905 +
          (C57241 * C54786 + C57244 * C54787 +
           ((C57238 - C57237) * C54790 + (C57240 - C57239) * C139731) * C54788 +
           ((C139835 * C57230 - C265 * C57116) * C54790 +
            (C139835 * C57231 - C265 * C57118) * C139731) *
               C54789) *
              C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eeyx[85] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C47131 * C114 - C47136 * C108 + C47132 * C116 - C47138 * C109 +
            C47133 * C118 - C47140 * C110) *
               C47216 +
           (C47131 * C354 - C47136 * C348 + C47132 * C355 - C47138 * C349 +
            C47133 * C356 - C47140 * C350) *
               C47134 +
           (C48294 - C48295 + C48296 - C48297 + C48298 - C48299) * C47217 +
           (C48300 - C48301 + C48302 - C48303 + C48304 - C48305) * C139873) *
              C139835 * C139809 * C2904 +
          ((C48295 - C48294 + C48297 - C48296 + C48299 - C48298) * C47216 +
           (C48301 - C48300 + C48303 - C48302 + C48305 - C48304) * C47134 +
           (C50997 - C50998 + C50999 - C51000 + C51001 - C51002) * C47217 +
           (C51003 - C51004 + C51005 - C51006 + C51007 - C51008) * C139873) *
              C139835 * C139809 * C2905 +
          ((C50998 - C50997 + C51000 - C50999 + C51002 - C51001) * C47216 +
           (C51004 - C51003 + C51006 - C51005 + C51008 - C51007) * C47134 +
           (C47131 * C6631 - C47136 * C6627 + C47132 * C6629 - C47138 * C6626 +
            C47133 * C6633 - C47140 * C6628) *
               C47217 +
           (C47131 * C7035 - C47136 * C7032 + C47132 * C7036 - C47138 * C7033 +
            C47133 * C7037 - C47140 * C7034) *
               C139873) *
              C139835 * C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C139731 * C114 - C54790 * C108) * C54842 +
           (C139731 * C354 - C54790 * C348) * C54786 +
           (C55513 - C55514) * C54843 + (C55515 - C55516) * C54787 +
           C57297 * C54844 + C57298 * C54788 + C57299 * C54845 +
           C57300 * C54789) *
              C139835 * C139809 * C2904 +
          ((C55514 - C55513) * C54842 + (C55516 - C55515) * C54786 +
           (C55518 - C55517) * C54843 + (C55520 - C55519) * C54787 +
           (C55522 - C55521) * C54844 + (C55524 - C55523) * C54788 +
           (C57301 - C57302) * C54845 + (C57303 - C57304) * C54789) *
              C139835 * C139809 * C2905 +
          (C57297 * C54842 + C57298 * C54786 + C57299 * C54843 +
           C57300 * C54787 + (C57302 - C57301) * C54844 +
           (C57304 - C57303) * C54788 +
           (C139731 * C57117 - C54790 * C57116) * C54845 +
           (C139731 * C57295 - C54790 * C57294) * C54789) *
              C139835 * C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eeyy[85] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C47216 * C183 - C47470 * C108 - C47216 * C348 + C47134 * C411 +
            C47217 * C896 - C47471 * C813 - C47217 * C1072 + C139873 * C1151) *
               C47131 +
           (C47509 + C47510) * C47132 + C47515 * C47133) *
              C139835 * C139809 * C2904 -
          ((C48440 + C48441) * C47133 + (C48442 + C48443) * C47132 +
           (C47217 * C2974 - C47471 * C2908 - C47217 * C3090 + C139873 * C3148 +
            C47216 * C896 - C47470 * C813 - C47216 * C1072 + C47134 * C1151) *
               C47131) *
              C139835 * C139809 * C2905 +
          ((C47216 * C2974 - C47470 * C2908 - C47216 * C3090 + C47134 * C3148 +
            C47217 * C6792 - C47471 * C6627 - C47217 * C7032 +
            C139873 * C7169) *
               C47131 +
           (C47216 * C2975 - C47470 * C2909 - C47216 * C3091 + C47134 * C3149 +
            C47217 * C6793 - C47471 * C6626 - C47217 * C7033 +
            C139873 * C7168) *
               C47132 +
           (C47216 * C2976 - C47470 * C2910 - C47216 * C3092 + C47134 * C3150 +
            C47217 * C6794 - C47471 * C6628 - C47217 * C7034 +
            C139873 * C7170) *
               C47133) *
              C139835 * C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((C54842 * C183 - C54996 * C108 - C54842 * C348 + C54786 * C411 +
           C54843 * C896 - C54997 * C813 - C54843 * C1072 + C54787 * C1151 +
           C54844 * C2974 - C54998 * C2908 - C54844 * C3090 + C54788 * C3148 +
           C54845 * C6792 - C54999 * C6627 - C54845 * C7032 + C54789 * C7169) *
              C139731 * C139835 * C139809 * C2904 -
          (C54845 * C9707 - C54999 * C9609 - C54845 * C9876 + C54789 * C9968 +
           C54844 * C6792 - C54998 * C6627 - C54844 * C7032 + C54788 * C7169 +
           C54843 * C2974 - C54997 * C2908 - C54843 * C3090 + C54787 * C3148 +
           C54842 * C896 - C54996 * C813 - C54842 * C1072 + C54786 * C1151) *
              C139731 * C139835 * C139809 * C2905 +
          (C54842 * C2974 - C54996 * C2908 - C54842 * C3090 + C54786 * C3148 +
           C54843 * C6792 - C54997 * C6627 - C54843 * C7032 + C54787 * C7169 +
           C54844 * C9707 - C54998 * C9609 - C54844 * C9876 + C54788 * C9968 +
           C54845 * C57178 - C54999 * C57116 - C54845 * C57294 +
           C54789 * C57354) *
              C139731 * C139835 * C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eeyz[85] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C139835 * C266 - C265 * C108) * C47216 +
            (C139835 * C495 - C265 * C348) * C47134 + (C6915 - C6916) * C47217 +
            (C7294 - C7295) * C139873) *
               C47131 +
           ((C279 - C280) * C47216 + (C502 - C503) * C47134 + C6919 * C47217 +
            C7298 * C139873) *
               C47132 +
           C47596 * C47133) *
              C139809 * C2904 +
          (((C6916 - C6915) * C47216 + (C7295 - C7294) * C47134 +
            (C6922 - C6921) * C47217 + (C7297 - C7296) * C139873) *
               C47131 +
           (C6927 * C47216 + C7300 * C47134 + C6929 * C47217 +
            C7301 * C139873) *
               C47132 +
           (C22843 * C47216 + C23191 * C47134 + (C6000 - C6001) * C47217 +
            (C6273 - C6274) * C139873) *
               C47133) *
              C139809 * C2905 +
          ((C9790 * C47216 + C10047 * C47134 + (C9795 - C9794) * C47217 +
            (C10049 - C10048) * C139873) *
               C47131 +
           (C6925 * C47216 + C7299 * C47134 + (C6932 - C6931) * C47217 +
            (C7303 - C7302) * C139873) *
               C47132 +
           ((C6001 - C6000) * C47216 + (C6274 - C6273) * C47134 +
            (C139835 * C6910 - C265 * C6628) * C47217 +
            (C139835 * C7292 - C265 * C7034) * C139873) *
               C47133) *
              C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C139835 * C266 - C265 * C108) * C54842 +
           (C139835 * C495 - C265 * C348) * C54786 + (C6915 - C6916) * C54843 +
           (C7294 - C7295) * C54787 + C9790 * C54844 + C10047 * C54788 +
           C57235 * C54845 + C57407 * C54789) *
              C139731 * C139809 * C2904 +
          ((C6916 - C6915) * C54842 + (C7295 - C7294) * C54786 +
           (C6922 - C6921) * C54843 + (C7297 - C7296) * C54787 +
           (C9794 - C9795) * C54844 + (C10048 - C10049) * C54788 +
           (C57237 - C57238) * C54845 + (C57408 - C57409) * C54789) *
              C139731 * C139809 * C2905 +
          (C9790 * C54842 + C10047 * C54786 + C57235 * C54843 +
           C57407 * C54787 + (C57238 - C57237) * C54844 +
           (C57409 - C57408) * C54788 +
           (C139835 * C57230 - C265 * C57116) * C54845 +
           (C139835 * C57405 - C265 * C57294) * C54789) *
              C139731 * C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eezx[85] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47131 * C114 - C47136 * C108 + C47132 * C116 - C47138 * C109 +
             C47133 * C118 - C47140 * C110) *
                C265 +
            (C47131 * C573 - C47136 * C567 + C47132 * C574 - C47138 * C568 +
             C47133 * C575 - C47140 * C569) *
                C139835) *
               C47134 +
           ((C48294 - C48295 + C48296 - C48297 + C48298 - C48299) * C265 +
            (C48640 - C48641 + C48642 - C48643 + C48644 - C48645) * C139835) *
               C139873) *
              C139809 * C2904 +
          (((C48295 - C48294 + C48297 - C48296 + C48299 - C48298) * C265 +
            (C48641 - C48640 + C48643 - C48642 + C48645 - C48644) * C139835) *
               C47134 +
           ((C50997 - C50998 + C50999 - C51000 + C51001 - C51002) * C265 +
            (C51231 - C51232 + C51233 - C51234 + C51235 - C51236) * C139835) *
               C139873) *
              C139809 * C2905 +
          (((C50998 - C50997 + C51000 - C50999 + C51002 - C51001) * C265 +
            (C51232 - C51231 + C51234 - C51233 + C51236 - C51235) * C139835) *
               C47134 +
           ((C47131 * C6631 - C47136 * C6627 + C47132 * C6629 - C47138 * C6626 +
             C47133 * C6633 - C47140 * C6628) *
                C265 +
            (C47131 * C7404 - C47136 * C7401 + C47132 * C7405 - C47138 * C7402 +
             C47133 * C7406 - C47140 * C7403) *
                C139835) *
               C139873) *
              C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C139731 * C114 - C54790 * C108) * C265 +
            (C139731 * C573 - C54790 * C567) * C139835) *
               C54786 +
           ((C55513 - C55514) * C265 + (C55735 - C55736) * C139835) * C54787 +
           C57470 * C54788 + C57471 * C54789) *
              C139809 * C2904 +
          (((C55514 - C55513) * C265 + (C55736 - C55735) * C139835) * C54786 +
           ((C55518 - C55517) * C265 + (C55738 - C55737) * C139835) * C54787 +
           ((C55522 - C55521) * C265 + (C55740 - C55739) * C139835) * C54788 +
           ((C57301 - C57302) * C265 + (C57466 - C57467) * C139835) * C54789) *
              C139809 * C2905 +
          (C57470 * C54786 + C57471 * C54787 +
           ((C57302 - C57301) * C265 + (C57467 - C57466) * C139835) * C54788 +
           ((C139731 * C57117 - C54790 * C57116) * C265 +
            (C139731 * C57460 - C54790 * C57459) * C139835) *
               C54789) *
              C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eezy[85] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47134 * C183 - C47216 * C108 + C139873 * C896 - C47217 * C813) *
                C265 +
            (C47134 * C629 - C47216 * C567 + C139873 * C1393 - C47217 * C1317) *
                C139835) *
               C47131 +
           ((C47219 - C47220 + C47221 - C47222) * C265 +
            (C47745 - C47746 + C47747 - C47748) * C139835) *
               C47132 +
           C47762 * C47133) *
              C139809 * C2904 +
          (((C47216 * C813 - C47134 * C896 + C47217 * C2908 - C139873 * C2974) *
                C265 +
            (C47216 * C1317 - C47134 * C1393 + C47217 * C3256 -
             C139873 * C3314) *
                C139835) *
               C47131 +
           ((C48082 - C48083 + C48084 - C48085) * C265 +
            (C48750 - C48751 + C48752 - C48753) * C139835) *
               C47132 +
           ((C48090 - C48091 + C48092 - C48093) * C265 +
            (C48754 - C48755 + C48756 - C48757) * C139835) *
               C47133) *
              C139809 * C2905 +
          (((C47134 * C2974 - C47216 * C2908 + C139873 * C6792 -
             C47217 * C6627) *
                C265 +
            (C47134 * C3314 - C47216 * C3256 + C139873 * C7521 -
             C47217 * C7401) *
                C139835) *
               C47131 +
           ((C47134 * C2975 - C47216 * C2909 + C139873 * C6793 -
             C47217 * C6626) *
                C265 +
            (C47134 * C3315 - C47216 * C3257 + C139873 * C7522 -
             C47217 * C7402) *
                C139835) *
               C47132 +
           ((C47134 * C2976 - C47216 * C2910 + C139873 * C6794 -
             C47217 * C6628) *
                C265 +
            (C47134 * C3316 - C47216 * C3258 + C139873 * C7523 -
             C47217 * C7403) *
                C139835) *
               C47133) *
              C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C54786 * C183 - C54842 * C108 + C54787 * C896 - C54843 * C813 +
            C54788 * C2974 - C54844 * C2908 + C54789 * C6792 - C54845 * C6627) *
               C265 +
           (C54786 * C629 - C54842 * C567 + C54787 * C1393 - C54843 * C1317 +
            C54788 * C3314 - C54844 * C3256 + C54789 * C7521 - C54845 * C7401) *
               C139835) *
              C139731 * C139809 * C2904 +
          ((C54842 * C813 - C54786 * C896 + C54843 * C2908 - C54787 * C2974 +
            C54844 * C6627 - C54788 * C6792 + C54845 * C9609 - C54789 * C9707) *
               C265 +
           (C54842 * C1317 - C54786 * C1393 + C54843 * C3256 - C54787 * C3314 +
            C54844 * C7401 - C54788 * C7521 + C54845 * C10123 -
            C54789 * C10211) *
               C139835) *
              C139731 * C139809 * C2905 +
          ((C54786 * C2974 - C54842 * C2908 + C54787 * C6792 - C54843 * C6627 +
            C54788 * C9707 - C54844 * C9609 + C54789 * C57178 -
            C54845 * C57116) *
               C265 +
           (C54786 * C3314 - C54842 * C3256 + C54787 * C7521 - C54843 * C7401 +
            C54788 * C10211 - C54844 * C10123 + C54789 * C57521 -
            C54845 * C57459) *
               C139835) *
              C139731 * C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eezz[85] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C265 * C266 - C701 * C108 - C265 * C567 + C139835 * C702) *
                C47134 +
            C7652 * C139873) *
               C47131 +
           (C47837 + C47838) * C47132 + C47843 * C47133) *
              C139809 * C2904 -
          ((C48856 + C48857) * C47133 + (C48858 + C48859) * C47132 +
           (C7653 * C139873 + C7652 * C47134) * C47131) *
              C139809 * C2905 +
          ((C7653 * C47134 + C10296 * C139873) * C47131 +
           (C6525 * C47134 + C7654 * C139873) * C47132 +
           (C6526 * C47134 +
            (C265 * C6910 - C701 * C6628 - C265 * C7403 + C139835 * C7630) *
                C139873) *
               C47133) *
              C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C265 * C266 - C701 * C108 - C265 * C567 + C139835 * C702) * C54786 +
           C7652 * C54787 + C7653 * C54788 + C10296 * C54789) *
              C139731 * C139809 * C2904 -
          (C57580 * C54789 + C10296 * C54788 + C7653 * C54787 +
           C7652 * C54786) *
              C139731 * C139809 * C2905 +
          (C7653 * C54786 + C10296 * C54787 + C57580 * C54788 +
           (C265 * C57230 - C701 * C57116 - C265 * C57459 + C139835 * C57572) *
               C54789) *
              C139731 * C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eexx[86] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47136 * C114 - C47137 * C108 - C47136 * C115 + C47131 * C126 +
             C47138 * C116 - C47139 * C109 - C47138 * C117 + C47132 * C127 +
             C47140 * C118 - C47141 * C110 - C47140 * C119 + C47133 * C128) *
                C139835 * C47134 +
            (C47978 + C47979 + C47980) * C139835 * C139873) *
               C1565 -
           ((C51501 + C51502 + C51503) * C139835 * C139873 +
            (C47140 * C1574 - C47141 * C1568 - C47140 * C1575 + C47133 * C1583 +
             C47138 * C1576 - C47139 * C1569 - C47138 * C1577 + C47132 * C1584 +
             C47136 * C1578 - C47137 * C1570 - C47136 * C1579 +
             C47131 * C1585) *
                C139835 * C47134) *
               C140002) *
              C2322 +
          (((C51503 + C51502 + C51501) * C139835 * C47134 +
            (C47136 * C7758 - C47137 * C7754 - C47136 * C7759 + C47131 * C7763 +
             C47138 * C7756 - C47139 * C7753 - C47138 * C7757 + C47132 * C7762 +
             C47140 * C7760 - C47141 * C7755 - C47140 * C7761 +
             C47133 * C7764) *
                C139835 * C139873) *
               C140002 -
           ((C50772 + C50773 + C50774) * C139835 * C139873 +
            (C47980 + C47979 + C47978) * C139835 * C47134) *
               C1565) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C54790 * C114 - C54791 * C108 - C54790 * C115 + C139731 * C126) *
                C139835 * C54786 +
            C55309 * C54787 + C55310 * C54788 + C55311 * C54789) *
               C1565 -
           (C57672 * C54789 + C57673 * C54788 + C57674 * C54787 +
            (C54790 * C1578 - C54791 * C1570 - C54790 * C1579 +
             C139731 * C1585) *
                C139835 * C54786) *
               C140002) *
              C2322 +
          ((C57674 * C54786 + C57673 * C54787 + C57672 * C54788 +
            (C54790 * C57647 - C54791 * C57646 - C54790 * C57648 +
             C139731 * C57649) *
                C139835 * C54789) *
               C140002 -
           (C57128 * C54789 + C55311 * C54788 + C55310 * C54787 +
            C55309 * C54786) *
               C1565) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eexy[86] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47134 * C183 - C47216 * C108 + C139873 * C896 - C47217 * C813) *
                C47136 +
            (C47134 * C189 - C47216 * C115 + C139873 * C901 - C47217 * C822) *
                C47131 +
            (C47219 - C47220 + C47221 - C47222) * C47138 +
            (C47223 - C47224 + C47225 - C47226) * C47132 + C47247 * C47140 +
            C47248 * C47133) *
               C139835 * C1565 +
           ((C47216 * C1570 - C47134 * C1653 + C47217 * C3438 -
             C139873 * C3520) *
                C47136 +
            (C47216 * C1579 - C47134 * C1658 + C47217 * C3443 -
             C139873 * C3524) *
                C47131 +
            (C49056 - C49057 + C49058 - C49059) * C47138 +
            (C49060 - C49061 + C49062 - C49063) * C47132 +
            (C49064 - C49065 + C49066 - C49067) * C47140 +
            (C49068 - C49069 + C49070 - C49071) * C47133) *
               C139835 * C140002) *
              C2322 +
          (((C47216 * C813 - C47134 * C896 + C47217 * C2908 - C139873 * C2974) *
                C47136 +
            (C47216 * C822 - C47134 * C901 + C47217 * C2913 - C139873 * C2978) *
                C47131 +
            (C48082 - C48083 + C48084 - C48085) * C47138 +
            (C48086 - C48087 + C48088 - C48089) * C47132 +
            (C48090 - C48091 + C48092 - C48093) * C47140 +
            (C48094 - C48095 + C48096 - C48097) * C47133) *
               C139835 * C1565 +
           ((C47134 * C3520 - C47216 * C3438 + C139873 * C7863 -
             C47217 * C7754) *
                C47136 +
            (C47134 * C3524 - C47216 * C3443 + C139873 * C7866 -
             C47217 * C7759) *
                C47131 +
            (C47134 * C3521 - C47216 * C3439 + C139873 * C7864 -
             C47217 * C7753) *
                C47138 +
            (C47134 * C3525 - C47216 * C3445 + C139873 * C7867 -
             C47217 * C7757) *
                C47132 +
            (C47134 * C3522 - C47216 * C3440 + C139873 * C7865 -
             C47217 * C7755) *
                C47140 +
            (C47134 * C3526 - C47216 * C3447 + C139873 * C7868 -
             C47217 * C7761) *
                C47133) *
               C139835 * C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C54786 * C183 - C54842 * C108 + C54787 * C896 - C54843 * C813 +
             C54788 * C2974 - C54844 * C2908 + C54789 * C6792 -
             C54845 * C6627) *
                C54790 +
            (C54786 * C189 - C54842 * C115 + C54787 * C901 - C54843 * C822 +
             C54788 * C2978 - C54844 * C2913 + C54789 * C6795 -
             C54845 * C6632) *
                C139731) *
               C139835 * C1565 +
           ((C54842 * C1570 - C54786 * C1653 + C54843 * C3438 - C54787 * C3520 +
             C54844 * C7754 - C54788 * C7863 + C54845 * C10394 -
             C54789 * C10528) *
                C54790 +
            (C54842 * C1579 - C54786 * C1658 + C54843 * C3443 - C54787 * C3524 +
             C54844 * C7759 - C54788 * C7866 + C54845 * C10397 -
             C54789 * C10530) *
                C139731) *
               C139835 * C140002) *
              C2322 +
          (((C54842 * C813 - C54786 * C896 + C54843 * C2908 - C54787 * C2974 +
             C54844 * C6627 - C54788 * C6792 + C54845 * C9609 -
             C54789 * C9707) *
                C54790 +
            (C54842 * C822 - C54786 * C901 + C54843 * C2913 - C54787 * C2978 +
             C54844 * C6632 - C54788 * C6795 + C54845 * C9612 -
             C54789 * C9709) *
                C139731) *
               C139835 * C1565 +
           ((C54786 * C3520 - C54842 * C3438 + C54787 * C7863 - C54843 * C7754 +
             C54788 * C10528 - C54844 * C10394 + C54789 * C57740 -
             C54845 * C57646) *
                C54790 +
            (C54786 * C3524 - C54842 * C3443 + C54787 * C7866 - C54843 * C7759 +
             C54788 * C10530 - C54844 * C10397 + C54789 * C57741 -
             C54845 * C57648) *
                C139731) *
               C139835 * C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eexz[86] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C139835 * C266 - C265 * C108) * C47136 +
             (C139835 * C272 - C265 * C115) * C47131 + (C279 - C280) * C47138 +
             (C281 - C282) * C47132 + C295 * C47140 + C296 * C47133) *
                C47134 +
            ((C6915 - C6916) * C47136 + (C6917 - C6918) * C47131 +
             C6919 * C47138 + C6920 * C47132 + C21967 * C47140 +
             C21968 * C47133) *
                C139873) *
               C1565 +
           (((C265 * C1570 - C139835 * C1741) * C47136 +
             (C265 * C1579 - C139835 * C1746) * C47131 +
             (C1752 - C1753) * C47138 + (C1754 - C1755) * C47132 +
             (C1756 - C1757) * C47140 + (C1758 - C1759) * C47133) *
                C47134 +
            ((C10635 - C10636) * C47136 + (C10637 - C10638) * C47131 +
             (C7986 - C7987) * C47138 + (C7988 - C7989) * C47132 +
             (C23820 - C23821) * C47140 + (C23822 - C23823) * C47133) *
                C139873) *
               C140002) *
              C2322 +
          ((((C6916 - C6915) * C47136 + (C6918 - C6917) * C47131 +
             C6927 * C47138 + C6928 * C47132 + C22843 * C47140 +
             C22844 * C47133) *
                C47134 +
            ((C6922 - C6921) * C47136 + (C6924 - C6923) * C47131 +
             C6929 * C47138 + C6930 * C47132 + (C6000 - C6001) * C47140 +
             (C6002 - C6003) * C47133) *
                C139873) *
               C1565 +
           (((C10636 - C10635) * C47136 + (C10638 - C10637) * C47131 +
             (C7987 - C7986) * C47138 + (C7989 - C7988) * C47132 +
             (C23821 - C23820) * C47140 + (C23823 - C23822) * C47133) *
                C47134 +
            ((C10640 - C10639) * C47136 + (C10642 - C10641) * C47131 +
             (C7991 - C7990) * C47138 + (C7993 - C7992) * C47132 +
             (C139835 * C7981 - C265 * C7755) * C47140 +
             (C139835 * C7984 - C265 * C7761) * C47133) *
                C139873) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C139835 * C266 - C265 * C108) * C54790 +
             (C139835 * C272 - C265 * C115) * C139731) *
                C54786 +
            ((C6915 - C6916) * C54790 + (C6917 - C6918) * C139731) * C54787 +
            C57241 * C54788 + C57244 * C54789) *
               C1565 +
           (((C265 * C1570 - C139835 * C1741) * C54790 +
             (C265 * C1579 - C139835 * C1746) * C139731) *
                C54786 +
            ((C10635 - C10636) * C54790 + (C10637 - C10638) * C139731) *
                C54787 +
            ((C10639 - C10640) * C54790 + (C10641 - C10642) * C139731) *
                C54788 +
            ((C57811 - C57812) * C54790 + (C57813 - C57814) * C139731) *
                C54789) *
               C140002) *
              C2322 +
          ((((C6916 - C6915) * C54790 + (C6918 - C6917) * C139731) * C54786 +
            ((C6922 - C6921) * C54790 + (C6924 - C6923) * C139731) * C54787 +
            ((C9794 - C9795) * C54790 + (C9796 - C9797) * C139731) * C54788 +
            ((C57237 - C57238) * C54790 + (C57239 - C57240) * C139731) *
                C54789) *
               C1565 +
           (((C10636 - C10635) * C54790 + (C10638 - C10637) * C139731) *
                C54786 +
            ((C10640 - C10639) * C54790 + (C10642 - C10641) * C139731) *
                C54787 +
            ((C57812 - C57811) * C54790 + (C57814 - C57813) * C139731) *
                C54788 +
            ((C139835 * C57808 - C265 * C57646) * C54790 +
             (C139835 * C57809 - C265 * C57648) * C139731) *
                C54789) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eeyx[86] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47131 * C114 - C47136 * C108 + C47132 * C116 - C47138 * C109 +
             C47133 * C118 - C47140 * C110) *
                C47216 +
            (C47131 * C354 - C47136 * C348 + C47132 * C355 - C47138 * C349 +
             C47133 * C356 - C47140 * C350) *
                C47134 +
            (C48294 - C48295 + C48296 - C48297 + C48298 - C48299) * C47217 +
            (C48300 - C48301 + C48302 - C48303 + C48304 - C48305) * C139873) *
               C139835 * C1565 +
           ((C47136 * C1570 - C47131 * C1578 + C47138 * C1569 - C47132 * C1576 +
             C47140 * C1568 - C47133 * C1574) *
                C47216 +
            (C47136 * C1829 - C47131 * C1834 + C47138 * C1830 - C47132 * C1835 +
             C47140 * C1831 - C47133 * C1836) *
                C47134 +
            (C51798 - C51799 + C51800 - C51801 + C51802 - C51803) * C47217 +
            (C51804 - C51805 + C51806 - C51807 + C51808 - C51809) * C139873) *
               C139835 * C140002) *
              C2322 +
          (((C48295 - C48294 + C48297 - C48296 + C48299 - C48298) * C47216 +
            (C48301 - C48300 + C48303 - C48302 + C48305 - C48304) * C47134 +
            (C50997 - C50998 + C50999 - C51000 + C51001 - C51002) * C47217 +
            (C51003 - C51004 + C51005 - C51006 + C51007 - C51008) * C139873) *
               C139835 * C1565 +
           ((C51799 - C51798 + C51801 - C51800 + C51803 - C51802) * C47216 +
            (C51805 - C51804 + C51807 - C51806 + C51809 - C51808) * C47134 +
            (C47131 * C7758 - C47136 * C7754 + C47132 * C7756 - C47138 * C7753 +
             C47133 * C7760 - C47140 * C7755) *
                C47217 +
            (C47131 * C8094 - C47136 * C8091 + C47132 * C8095 - C47138 * C8092 +
             C47133 * C8096 - C47140 * C8093) *
                C139873) *
               C139835 * C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C139731 * C114 - C54790 * C108) * C54842 +
            (C139731 * C354 - C54790 * C348) * C54786 +
            (C55513 - C55514) * C54843 + (C55515 - C55516) * C54787 +
            C57297 * C54844 + C57298 * C54788 + C57299 * C54845 +
            C57300 * C54789) *
               C139835 * C1565 +
           ((C54790 * C1570 - C139731 * C1578) * C54842 +
            (C54790 * C1829 - C139731 * C1834) * C54786 +
            (C57883 - C57884) * C54843 + (C57885 - C57886) * C54787 +
            (C57887 - C57888) * C54844 + (C57889 - C57890) * C54788 +
            (C57891 - C57892) * C54845 + (C57893 - C57894) * C54789) *
               C139835 * C140002) *
              C2322 +
          (((C55514 - C55513) * C54842 + (C55516 - C55515) * C54786 +
            (C55518 - C55517) * C54843 + (C55520 - C55519) * C54787 +
            (C55522 - C55521) * C54844 + (C55524 - C55523) * C54788 +
            (C57301 - C57302) * C54845 + (C57303 - C57304) * C54789) *
               C139835 * C1565 +
           ((C57884 - C57883) * C54842 + (C57886 - C57885) * C54786 +
            (C57888 - C57887) * C54843 + (C57890 - C57889) * C54787 +
            (C57892 - C57891) * C54844 + (C57894 - C57893) * C54788 +
            (C139731 * C57647 - C54790 * C57646) * C54845 +
            (C139731 * C57881 - C54790 * C57880) * C54789) *
               C139835 * C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eeyy[86] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47216 * C183 - C47470 * C108 - C47216 * C348 + C47134 * C411 +
             C47217 * C896 - C47471 * C813 - C47217 * C1072 + C139873 * C1151) *
                C47131 +
            (C47509 + C47510) * C47132 + C47515 * C47133) *
               C139835 * C1565 -
           ((C49390 + C49391) * C47133 + (C49392 + C49393) * C47132 +
            (C47217 * C3520 - C47471 * C3438 - C47217 * C3668 +
             C139873 * C3742 + C47216 * C1653 - C47470 * C1570 -
             C47216 * C1829 + C47134 * C1908) *
                C47131) *
               C139835 * C140002) *
              C2322 +
          (((C47216 * C3520 - C47470 * C3438 - C47216 * C3668 + C47134 * C3742 +
             C47217 * C7863 - C47471 * C7754 - C47217 * C8091 +
             C139873 * C8196) *
                C47131 +
            (C47216 * C3521 - C47470 * C3439 - C47216 * C3669 + C47134 * C3743 +
             C47217 * C7864 - C47471 * C7753 - C47217 * C8092 +
             C139873 * C8195) *
                C47132 +
            (C47216 * C3522 - C47470 * C3440 - C47216 * C3670 + C47134 * C3744 +
             C47217 * C7865 - C47471 * C7755 - C47217 * C8093 +
             C139873 * C8197) *
                C47133) *
               C139835 * C140002 -
           ((C48440 + C48441) * C47133 + (C48442 + C48443) * C47132 +
            (C47217 * C2974 - C47471 * C2908 - C47217 * C3090 +
             C139873 * C3148 + C47216 * C896 - C47470 * C813 - C47216 * C1072 +
             C47134 * C1151) *
                C47131) *
               C139835 * C1565) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C54842 * C183 - C54996 * C108 - C54842 * C348 + C54786 * C411 +
            C54843 * C896 - C54997 * C813 - C54843 * C1072 + C54787 * C1151 +
            C54844 * C2974 - C54998 * C2908 - C54844 * C3090 + C54788 * C3148 +
            C54845 * C6792 - C54999 * C6627 - C54845 * C7032 + C54789 * C7169) *
               C139731 * C139835 * C1565 -
           (C54845 * C10528 - C54999 * C10394 - C54845 * C10740 +
            C54789 * C10858 + C54844 * C7863 - C54998 * C7754 - C54844 * C8091 +
            C54788 * C8196 + C54843 * C3520 - C54997 * C3438 - C54843 * C3668 +
            C54787 * C3742 + C54842 * C1653 - C54996 * C1570 - C54842 * C1829 +
            C54786 * C1908) *
               C139731 * C139835 * C140002) *
              C2322 +
          ((C54842 * C3520 - C54996 * C3438 - C54842 * C3668 + C54786 * C3742 +
            C54843 * C7863 - C54997 * C7754 - C54843 * C8091 + C54787 * C8196 +
            C54844 * C10528 - C54998 * C10394 - C54844 * C10740 +
            C54788 * C10858 + C54845 * C57740 - C54999 * C57646 -
            C54845 * C57880 + C54789 * C57960) *
               C139731 * C139835 * C140002 -
           (C54845 * C9707 - C54999 * C9609 - C54845 * C9876 + C54789 * C9968 +
            C54844 * C6792 - C54998 * C6627 - C54844 * C7032 + C54788 * C7169 +
            C54843 * C2974 - C54997 * C2908 - C54843 * C3090 + C54787 * C3148 +
            C54842 * C896 - C54996 * C813 - C54842 * C1072 + C54786 * C1151) *
               C139731 * C139835 * C1565) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eeyz[86] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C139835 * C266 - C265 * C108) * C47216 +
             (C139835 * C495 - C265 * C348) * C47134 +
             (C6915 - C6916) * C47217 + (C7294 - C7295) * C139873) *
                C47131 +
            ((C279 - C280) * C47216 + (C502 - C503) * C47134 + C6919 * C47217 +
             C7298 * C139873) *
                C47132 +
            C47596 * C47133) *
               C1565 +
           (((C265 * C1570 - C139835 * C1741) * C47216 +
             (C265 * C1829 - C139835 * C1997) * C47134 +
             (C10635 - C10636) * C47217 + (C10961 - C10962) * C139873) *
                C47131 +
            ((C1752 - C1753) * C47216 + (C2003 - C2004) * C47134 +
             (C7986 - C7987) * C47217 + (C8321 - C8322) * C139873) *
                C47132 +
            ((C1756 - C1757) * C47216 + (C2005 - C2006) * C47134 +
             (C23820 - C23821) * C47217 + (C24146 - C24147) * C139873) *
                C47133) *
               C140002) *
              C2322 +
          ((((C6916 - C6915) * C47216 + (C7295 - C7294) * C47134 +
             (C6922 - C6921) * C47217 + (C7297 - C7296) * C139873) *
                C47131 +
            (C6927 * C47216 + C7300 * C47134 + C6929 * C47217 +
             C7301 * C139873) *
                C47132 +
            (C22843 * C47216 + C23191 * C47134 + (C6000 - C6001) * C47217 +
             (C6273 - C6274) * C139873) *
                C47133) *
               C1565 +
           (((C10636 - C10635) * C47216 + (C10962 - C10961) * C47134 +
             (C10640 - C10639) * C47217 + (C10964 - C10963) * C139873) *
                C47131 +
            ((C7987 - C7986) * C47216 + (C8322 - C8321) * C47134 +
             (C7991 - C7990) * C47217 + (C8324 - C8323) * C139873) *
                C47132 +
            ((C23821 - C23820) * C47216 + (C24147 - C24146) * C47134 +
             (C139835 * C7981 - C265 * C7755) * C47217 +
             (C139835 * C8319 - C265 * C8093) * C139873) *
                C47133) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C139835 * C266 - C265 * C108) * C54842 +
            (C139835 * C495 - C265 * C348) * C54786 + (C6915 - C6916) * C54843 +
            (C7294 - C7295) * C54787 + C9790 * C54844 + C10047 * C54788 +
            C57235 * C54845 + C57407 * C54789) *
               C139731 * C1565 +
           ((C265 * C1570 - C139835 * C1741) * C54842 +
            (C265 * C1829 - C139835 * C1997) * C54786 +
            (C10635 - C10636) * C54843 + (C10961 - C10962) * C54787 +
            (C10639 - C10640) * C54844 + (C10963 - C10964) * C54788 +
            (C57811 - C57812) * C54845 + (C58029 - C58030) * C54789) *
               C139731 * C140002) *
              C2322 +
          (((C6916 - C6915) * C54842 + (C7295 - C7294) * C54786 +
            (C6922 - C6921) * C54843 + (C7297 - C7296) * C54787 +
            (C9794 - C9795) * C54844 + (C10048 - C10049) * C54788 +
            (C57237 - C57238) * C54845 + (C57408 - C57409) * C54789) *
               C139731 * C1565 +
           ((C10636 - C10635) * C54842 + (C10962 - C10961) * C54786 +
            (C10640 - C10639) * C54843 + (C10964 - C10963) * C54787 +
            (C57812 - C57811) * C54844 + (C58030 - C58029) * C54788 +
            (C139835 * C57808 - C265 * C57646) * C54845 +
            (C139835 * C58027 - C265 * C57880) * C54789) *
               C139731 * C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eezx[86] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47131 * C114 - C47136 * C108 + C47132 * C116 - C47138 * C109 +
              C47133 * C118 - C47140 * C110) *
                 C265 +
             (C47131 * C573 - C47136 * C567 + C47132 * C574 - C47138 * C568 +
              C47133 * C575 - C47140 * C569) *
                 C139835) *
                C47134 +
            ((C48294 - C48295 + C48296 - C48297 + C48298 - C48299) * C265 +
             (C48640 - C48641 + C48642 - C48643 + C48644 - C48645) * C139835) *
                C139873) *
               C1565 +
           (((C47136 * C1570 - C47131 * C1578 + C47138 * C1569 -
              C47132 * C1576 + C47140 * C1568 - C47133 * C1574) *
                 C265 +
             (C47136 * C2074 - C47131 * C2079 + C47138 * C2075 -
              C47132 * C2080 + C47140 * C2076 - C47133 * C2081) *
                 C139835) *
                C47134 +
            ((C51798 - C51799 + C51800 - C51801 + C51802 - C51803) * C265 +
             (C52104 - C52105 + C52106 - C52107 + C52108 - C52109) * C139835) *
                C139873) *
               C140002) *
              C2322 +
          ((((C48295 - C48294 + C48297 - C48296 + C48299 - C48298) * C265 +
             (C48641 - C48640 + C48643 - C48642 + C48645 - C48644) * C139835) *
                C47134 +
            ((C50997 - C50998 + C50999 - C51000 + C51001 - C51002) * C265 +
             (C51231 - C51232 + C51233 - C51234 + C51235 - C51236) * C139835) *
                C139873) *
               C1565 +
           (((C51799 - C51798 + C51801 - C51800 + C51803 - C51802) * C265 +
             (C52105 - C52104 + C52107 - C52106 + C52109 - C52108) * C139835) *
                C47134 +
            ((C47131 * C7758 - C47136 * C7754 + C47132 * C7756 -
              C47138 * C7753 + C47133 * C7760 - C47140 * C7755) *
                 C265 +
             (C47131 * C8425 - C47136 * C8422 + C47132 * C8426 -
              C47138 * C8423 + C47133 * C8427 - C47140 * C8424) *
                 C139835) *
                C139873) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C139731 * C114 - C54790 * C108) * C265 +
             (C139731 * C573 - C54790 * C567) * C139835) *
                C54786 +
            ((C55513 - C55514) * C265 + (C55735 - C55736) * C139835) * C54787 +
            C57470 * C54788 + C57471 * C54789) *
               C1565 +
           (((C54790 * C1570 - C139731 * C1578) * C265 +
             (C54790 * C2074 - C139731 * C2079) * C139835) *
                C54786 +
            ((C57883 - C57884) * C265 + (C58099 - C58100) * C139835) * C54787 +
            ((C57887 - C57888) * C265 + (C58101 - C58102) * C139835) * C54788 +
            ((C57891 - C57892) * C265 + (C58103 - C58104) * C139835) * C54789) *
               C140002) *
              C2322 +
          ((((C55514 - C55513) * C265 + (C55736 - C55735) * C139835) * C54786 +
            ((C55518 - C55517) * C265 + (C55738 - C55737) * C139835) * C54787 +
            ((C55522 - C55521) * C265 + (C55740 - C55739) * C139835) * C54788 +
            ((C57301 - C57302) * C265 + (C57466 - C57467) * C139835) * C54789) *
               C1565 +
           (((C57884 - C57883) * C265 + (C58100 - C58099) * C139835) * C54786 +
            ((C57888 - C57887) * C265 + (C58102 - C58101) * C139835) * C54787 +
            ((C57892 - C57891) * C265 + (C58104 - C58103) * C139835) * C54788 +
            ((C139731 * C57647 - C54790 * C57646) * C265 +
             (C139731 * C58097 - C54790 * C58096) * C139835) *
                C54789) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eezy[86] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47134 * C183 - C47216 * C108 + C139873 * C896 - C47217 * C813) *
                 C265 +
             (C47134 * C629 - C47216 * C567 + C139873 * C1393 -
              C47217 * C1317) *
                 C139835) *
                C47131 +
            ((C47219 - C47220 + C47221 - C47222) * C265 +
             (C47745 - C47746 + C47747 - C47748) * C139835) *
                C47132 +
            C47762 * C47133) *
               C1565 +
           (((C47216 * C1570 - C47134 * C1653 + C47217 * C3438 -
              C139873 * C3520) *
                 C265 +
             (C47216 * C2074 - C47134 * C2150 + C47217 * C3882 -
              C139873 * C3956) *
                 C139835) *
                C47131 +
            ((C49056 - C49057 + C49058 - C49059) * C265 +
             (C49688 - C49689 + C49690 - C49691) * C139835) *
                C47132 +
            ((C49064 - C49065 + C49066 - C49067) * C265 +
             (C49692 - C49693 + C49694 - C49695) * C139835) *
                C47133) *
               C140002) *
              C2322 +
          ((((C47216 * C813 - C47134 * C896 + C47217 * C2908 -
              C139873 * C2974) *
                 C265 +
             (C47216 * C1317 - C47134 * C1393 + C47217 * C3256 -
              C139873 * C3314) *
                 C139835) *
                C47131 +
            ((C48082 - C48083 + C48084 - C48085) * C265 +
             (C48750 - C48751 + C48752 - C48753) * C139835) *
                C47132 +
            ((C48090 - C48091 + C48092 - C48093) * C265 +
             (C48754 - C48755 + C48756 - C48757) * C139835) *
                C47133) *
               C1565 +
           (((C47134 * C3520 - C47216 * C3438 + C139873 * C7863 -
              C47217 * C7754) *
                 C265 +
             (C47134 * C3956 - C47216 * C3882 + C139873 * C8526 -
              C47217 * C8422) *
                 C139835) *
                C47131 +
            ((C47134 * C3521 - C47216 * C3439 + C139873 * C7864 -
              C47217 * C7753) *
                 C265 +
             (C47134 * C3957 - C47216 * C3883 + C139873 * C8527 -
              C47217 * C8423) *
                 C139835) *
                C47132 +
            ((C47134 * C3522 - C47216 * C3440 + C139873 * C7865 -
              C47217 * C7755) *
                 C265 +
             (C47134 * C3958 - C47216 * C3884 + C139873 * C8528 -
              C47217 * C8424) *
                 C139835) *
                C47133) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C54786 * C183 - C54842 * C108 + C54787 * C896 - C54843 * C813 +
             C54788 * C2974 - C54844 * C2908 + C54789 * C6792 -
             C54845 * C6627) *
                C265 +
            (C54786 * C629 - C54842 * C567 + C54787 * C1393 - C54843 * C1317 +
             C54788 * C3314 - C54844 * C3256 + C54789 * C7521 -
             C54845 * C7401) *
                C139835) *
               C139731 * C1565 +
           ((C54842 * C1570 - C54786 * C1653 + C54843 * C3438 - C54787 * C3520 +
             C54844 * C7754 - C54788 * C7863 + C54845 * C10394 -
             C54789 * C10528) *
                C265 +
            (C54842 * C2074 - C54786 * C2150 + C54843 * C3882 - C54787 * C3956 +
             C54844 * C8422 - C54788 * C8526 + C54845 * C11062 -
             C54789 * C11172) *
                C139835) *
               C139731 * C140002) *
              C2322 +
          (((C54842 * C813 - C54786 * C896 + C54843 * C2908 - C54787 * C2974 +
             C54844 * C6627 - C54788 * C6792 + C54845 * C9609 -
             C54789 * C9707) *
                C265 +
            (C54842 * C1317 - C54786 * C1393 + C54843 * C3256 - C54787 * C3314 +
             C54844 * C7401 - C54788 * C7521 + C54845 * C10123 -
             C54789 * C10211) *
                C139835) *
               C139731 * C1565 +
           ((C54786 * C3520 - C54842 * C3438 + C54787 * C7863 - C54843 * C7754 +
             C54788 * C10528 - C54844 * C10394 + C54789 * C57740 -
             C54845 * C57646) *
                C265 +
            (C54786 * C3956 - C54842 * C3882 + C54787 * C8526 - C54843 * C8422 +
             C54788 * C11172 - C54844 * C11062 + C54789 * C58170 -
             C54845 * C58096) *
                C139835) *
               C139731 * C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eezz[86] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C265 * C266 - C701 * C108 - C265 * C567 + C139835 * C702) *
                 C47134 +
             C7652 * C139873) *
                C47131 +
            (C47837 + C47838) * C47132 + C47843 * C47133) *
               C1565 -
           ((C49794 + C49795) * C47133 + (C49796 + C49797) * C47132 +
            (C11288 * C139873 +
             (C265 * C1741 - C701 * C1570 - C265 * C2074 + C139835 * C2230) *
                 C47134) *
                C47131) *
               C140002) *
              C2322 +
          (((C11288 * C47134 + C11287 * C139873) * C47131 +
            (C8651 * C47134 + C8650 * C139873) * C47132 +
            (C24459 * C47134 +
             (C265 * C7981 - C701 * C7755 - C265 * C8424 + C139835 * C8635) *
                 C139873) *
                C47133) *
               C140002 -
           ((C48856 + C48857) * C47133 + (C48858 + C48859) * C47132 +
            (C7653 * C139873 + C7652 * C47134) * C47131) *
               C1565) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C265 * C266 - C701 * C108 - C265 * C567 + C139835 * C702) *
                C54786 +
            C7652 * C54787 + C7653 * C54788 + C10296 * C54789) *
               C139731 * C1565 -
           (C58245 * C54789 + C11287 * C54788 + C11288 * C54787 +
            (C265 * C1741 - C701 * C1570 - C265 * C2074 + C139835 * C2230) *
                C54786) *
               C139731 * C140002) *
              C2322 +
          ((C11288 * C54786 + C11287 * C54787 + C58245 * C54788 +
            (C265 * C57808 - C701 * C57646 - C265 * C58096 + C139835 * C58237) *
                C54789) *
               C139731 * C140002 -
           (C57580 * C54789 + C10296 * C54788 + C7653 * C54787 +
            C7652 * C54786) *
               C139731 * C1565) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eexx[87] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47136 * C114 - C47137 * C108 - C47136 * C115 + C47131 * C126 +
             C47138 * C116 - C47139 * C109 - C47138 * C117 + C47132 * C127 +
             C47140 * C118 - C47141 * C110 - C47140 * C119 + C47133 * C128) *
                C139835 * C47134 +
            (C47978 + C47979 + C47980) * C139835 * C139873) *
               C4096 -
           ((C51501 + C51502 + C51503) * C139835 * C139873 +
            (C47140 * C1574 - C47141 * C1568 - C47140 * C1575 + C47133 * C1583 +
             C47138 * C1576 - C47139 * C1569 - C47138 * C1577 + C47132 * C1584 +
             C47136 * C1578 - C47137 * C1570 - C47136 * C1579 +
             C47131 * C1585) *
                C139835 * C47134) *
               C140002) *
              C139792 * C2324 +
          (((C47136 * C1576 - C47137 * C1569 - C47136 * C1577 + C47131 * C1584 +
             C47138 * C1574 - C47139 * C1568 - C47138 * C1575 + C47132 * C1583 +
             C47140 * C1572 - C47141 * C1567 - C47140 * C1573 +
             C47133 * C1582) *
                C139835 * C47134 +
            (C47136 * C3444 - C47137 * C3439 - C47136 * C3445 + C47131 * C3451 +
             C47138 * C3446 - C47139 * C3440 - C47138 * C3447 + C47132 * C3452 +
             C47140 * C3448 - C47141 * C3441 - C47140 * C3449 +
             C47133 * C3453) *
                C139835 * C139873) *
               C140002 -
           ((C47983 + C47982 + C47981) * C139835 * C139873 +
            (C47140 * C120 - C47141 * C111 - C47140 * C121 + C47133 * C129 +
             C47138 * C118 - C47139 * C110 - C47138 * C119 + C47132 * C128 +
             C47136 * C116 - C47137 * C109 - C47136 * C117 + C47131 * C127) *
                C139835 * C47134) *
               C4096) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C54790 * C114 - C54791 * C108 - C54790 * C115 + C139731 * C126) *
                C139835 * C54786 +
            C55309 * C54787 + C55310 * C54788 + C55311 * C54789) *
               C4096 -
           (C57672 * C54789 + C57673 * C54788 + C57674 * C54787 +
            (C54790 * C1578 - C54791 * C1570 - C54790 * C1579 +
             C139731 * C1585) *
                C139835 * C54786) *
               C140002) *
              C139792 * C2324 +
          (((C54790 * C1576 - C54791 * C1569 - C54790 * C1577 +
             C139731 * C1584) *
                C139835 * C54786 +
            (C54790 * C3444 - C54791 * C3439 - C54790 * C3445 +
             C139731 * C3451) *
                C139835 * C54787 +
            (C54790 * C7756 - C54791 * C7753 - C54790 * C7757 +
             C139731 * C7762) *
                C139835 * C54788 +
            (C54790 * C10398 - C54791 * C10395 - C54790 * C10399 +
             C139731 * C10401) *
                C139835 * C54789) *
               C140002 -
           (C55314 * C54789 + C55313 * C54788 + C55312 * C54787 +
            (C54790 * C116 - C54791 * C109 - C54790 * C117 + C139731 * C127) *
                C139835 * C54786) *
               C4096) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eexy[87] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47134 * C183 - C47216 * C108 + C139873 * C896 - C47217 * C813) *
                C47136 +
            (C47134 * C189 - C47216 * C115 + C139873 * C901 - C47217 * C822) *
                C47131 +
            (C47219 - C47220 + C47221 - C47222) * C47138 +
            (C47223 - C47224 + C47225 - C47226) * C47132 + C47247 * C47140 +
            C47248 * C47133) *
               C139835 * C4096 +
           ((C47216 * C1570 - C47134 * C1653 + C47217 * C3438 -
             C139873 * C3520) *
                C47136 +
            (C47216 * C1579 - C47134 * C1658 + C47217 * C3443 -
             C139873 * C3524) *
                C47131 +
            (C49056 - C49057 + C49058 - C49059) * C47138 +
            (C49060 - C49061 + C49062 - C49063) * C47132 +
            (C49064 - C49065 + C49066 - C49067) * C47140 +
            (C49068 - C49069 + C49070 - C49071) * C47133) *
               C139835 * C140002) *
              C139792 * C2324 +
          (((C47220 - C47219 + C47222 - C47221) * C47136 +
            (C47224 - C47223 + C47226 - C47225) * C47131 +
            (C47228 - C47227 + C47230 - C47229) * C47138 +
            (C47232 - C47231 + C47234 - C47233) * C47132 +
            (C47235 - C47236 + C47237 - C47238) * C47140 +
            (C47239 - C47240 + C47241 - C47242) * C47133) *
               C139835 * C4096 +
           ((C49057 - C49056 + C49059 - C49058) * C47136 +
            (C49061 - C49060 + C49063 - C49062) * C47131 +
            (C49065 - C49064 + C49067 - C49066) * C47138 +
            (C49069 - C49068 + C49071 - C49070) * C47132 +
            (C47134 * C1656 - C47216 * C1567 + C139873 * C3523 -
             C47217 * C3441) *
                C47140 +
            (C47134 * C1661 - C47216 * C1573 + C139873 * C3527 -
             C47217 * C3449) *
                C47133) *
               C139835 * C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C54786 * C183 - C54842 * C108 + C54787 * C896 - C54843 * C813 +
             C54788 * C2974 - C54844 * C2908 + C54789 * C6792 -
             C54845 * C6627) *
                C54790 +
            (C54786 * C189 - C54842 * C115 + C54787 * C901 - C54843 * C822 +
             C54788 * C2978 - C54844 * C2913 + C54789 * C6795 -
             C54845 * C6632) *
                C139731) *
               C139835 * C4096 +
           ((C54842 * C1570 - C54786 * C1653 + C54843 * C3438 - C54787 * C3520 +
             C54844 * C7754 - C54788 * C7863 + C54845 * C10394 -
             C54789 * C10528) *
                C54790 +
            (C54842 * C1579 - C54786 * C1658 + C54843 * C3443 - C54787 * C3524 +
             C54844 * C7759 - C54788 * C7866 + C54845 * C10397 -
             C54789 * C10530) *
                C139731) *
               C139835 * C140002) *
              C139792 * C2324 +
          (((C54842 * C109 - C54786 * C184 + C54843 * C812 - C54787 * C897 +
             C54844 * C2909 - C54788 * C2975 + C54845 * C6626 -
             C54789 * C6793) *
                C54790 +
            (C54842 * C117 - C54786 * C190 + C54843 * C820 - C54787 * C902 +
             C54844 * C2915 - C54788 * C2979 + C54845 * C6630 -
             C54789 * C6796) *
                C139731) *
               C139835 * C4096 +
           ((C54786 * C1654 - C54842 * C1569 + C54787 * C3521 - C54843 * C3439 +
             C54788 * C7864 - C54844 * C7753 + C54789 * C10529 -
             C54845 * C10395) *
                C54790 +
            (C54786 * C1659 - C54842 * C1577 + C54787 * C3525 - C54843 * C3445 +
             C54788 * C7867 - C54844 * C7757 + C54789 * C10531 -
             C54845 * C10399) *
                C139731) *
               C139835 * C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eexz[87] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C139835 * C266 - C265 * C108) * C47136 +
             (C139835 * C272 - C265 * C115) * C47131 + (C279 - C280) * C47138 +
             (C281 - C282) * C47132 + C295 * C47140 + C296 * C47133) *
                C47134 +
            ((C6915 - C6916) * C47136 + (C6917 - C6918) * C47131 +
             C6919 * C47138 + C6920 * C47132 + C21967 * C47140 +
             C21968 * C47133) *
                C139873) *
               C4096 +
           (((C265 * C1570 - C139835 * C1741) * C47136 +
             (C265 * C1579 - C139835 * C1746) * C47131 +
             (C1752 - C1753) * C47138 + (C1754 - C1755) * C47132 +
             (C1756 - C1757) * C47140 + (C1758 - C1759) * C47133) *
                C47134 +
            ((C10635 - C10636) * C47136 + (C10637 - C10638) * C47131 +
             (C7986 - C7987) * C47138 + (C7988 - C7989) * C47132 +
             (C23820 - C23821) * C47140 + (C23822 - C23823) * C47133) *
                C139873) *
               C140002) *
              C139792 * C2324 +
          ((((C280 - C279) * C47136 + (C282 - C281) * C47131 +
             (C284 - C283) * C47138 + (C286 - C285) * C47132 +
             (C288 - C287) * C47140 + (C290 - C289) * C47133) *
                C47134 +
            (C6927 * C47136 + C6928 * C47131 + C22843 * C47138 +
             C22844 * C47132 + (C1003 - C1004) * C47140 +
             (C1005 - C1006) * C47133) *
                C139873) *
               C4096 +
           (((C1753 - C1752) * C47136 + (C1755 - C1754) * C47131 +
             (C1757 - C1756) * C47138 + (C1759 - C1758) * C47132 +
             (C1761 - C1760) * C47140 + (C1763 - C1762) * C47133) *
                C47134 +
            ((C7987 - C7986) * C47136 + (C7989 - C7988) * C47131 +
             (C23821 - C23820) * C47138 + (C23823 - C23822) * C47132 +
             (C139835 * C3597 - C265 * C3441) * C47140 +
             (C139835 * C3601 - C265 * C3449) * C47133) *
                C139873) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C139835 * C266 - C265 * C108) * C54790 +
             (C139835 * C272 - C265 * C115) * C139731) *
                C54786 +
            ((C6915 - C6916) * C54790 + (C6917 - C6918) * C139731) * C54787 +
            C57241 * C54788 + C57244 * C54789) *
               C4096 +
           (((C265 * C1570 - C139835 * C1741) * C54790 +
             (C265 * C1579 - C139835 * C1746) * C139731) *
                C54786 +
            ((C10635 - C10636) * C54790 + (C10637 - C10638) * C139731) *
                C54787 +
            ((C10639 - C10640) * C54790 + (C10641 - C10642) * C139731) *
                C54788 +
            ((C57811 - C57812) * C54790 + (C57813 - C57814) * C139731) *
                C54789) *
               C140002) *
              C139792 * C2324 +
          ((((C280 - C279) * C54790 + (C282 - C281) * C139731) * C54786 +
            (C6927 * C54790 + C6928 * C139731) * C54787 +
            (C6929 * C54790 + C6930 * C139731) * C54788 +
            ((C6931 - C6932) * C54790 + (C6933 - C6934) * C139731) * C54789) *
               C4096 +
           (((C1753 - C1752) * C54790 + (C1755 - C1754) * C139731) * C54786 +
            ((C7987 - C7986) * C54790 + (C7989 - C7988) * C139731) * C54787 +
            ((C7991 - C7990) * C54790 + (C7993 - C7992) * C139731) * C54788 +
            ((C139835 * C10631 - C265 * C10395) * C54790 +
             (C139835 * C10633 - C265 * C10399) * C139731) *
                C54789) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[87] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47131 * C114 - C47136 * C108 + C47132 * C116 - C47138 * C109 +
             C47133 * C118 - C47140 * C110) *
                C47216 +
            (C47131 * C354 - C47136 * C348 + C47132 * C355 - C47138 * C349 +
             C47133 * C356 - C47140 * C350) *
                C47134 +
            (C48294 - C48295 + C48296 - C48297 + C48298 - C48299) * C47217 +
            (C48300 - C48301 + C48302 - C48303 + C48304 - C48305) * C139873) *
               C139835 * C4096 +
           ((C47136 * C1570 - C47131 * C1578 + C47138 * C1569 - C47132 * C1576 +
             C47140 * C1568 - C47133 * C1574) *
                C47216 +
            (C47136 * C1829 - C47131 * C1834 + C47138 * C1830 - C47132 * C1835 +
             C47140 * C1831 - C47133 * C1836) *
                C47134 +
            (C51798 - C51799 + C51800 - C51801 + C51802 - C51803) * C47217 +
            (C51804 - C51805 + C51806 - C51807 + C51808 - C51809) * C139873) *
               C139835 * C140002) *
              C139792 * C2324 +
          (((C47136 * C109 - C47131 * C116 + C47138 * C110 - C47132 * C118 +
             C47140 * C111 - C47133 * C120) *
                C47216 +
            (C47136 * C349 - C47131 * C355 + C47138 * C350 - C47132 * C356 +
             C47140 * C351 - C47133 * C357) *
                C47134 +
            (C48306 - C48307 + C48308 - C48309 + C48310 - C48311) * C47217 +
            (C48312 - C48313 + C48314 - C48315 + C48316 - C48317) * C139873) *
               C139835 * C4096 +
           ((C47131 * C1576 - C47136 * C1569 + C47132 * C1574 - C47138 * C1568 +
             C47133 * C1572 - C47140 * C1567) *
                C47216 +
            (C47131 * C1835 - C47136 * C1830 + C47132 * C1836 - C47138 * C1831 +
             C47133 * C1837 - C47140 * C1832) *
                C47134 +
            (C47131 * C3444 - C47136 * C3439 + C47132 * C3446 - C47138 * C3440 +
             C47133 * C3448 - C47140 * C3441) *
                C47217 +
            (C47131 * C3673 - C47136 * C3669 + C47132 * C3674 - C47138 * C3670 +
             C47133 * C3675 - C47140 * C3671) *
                C139873) *
               C139835 * C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C139731 * C114 - C54790 * C108) * C54842 +
            (C139731 * C354 - C54790 * C348) * C54786 +
            (C55513 - C55514) * C54843 + (C55515 - C55516) * C54787 +
            C57297 * C54844 + C57298 * C54788 + C57299 * C54845 +
            C57300 * C54789) *
               C139835 * C4096 +
           ((C54790 * C1570 - C139731 * C1578) * C54842 +
            (C54790 * C1829 - C139731 * C1834) * C54786 +
            (C57883 - C57884) * C54843 + (C57885 - C57886) * C54787 +
            (C57887 - C57888) * C54844 + (C57889 - C57890) * C54788 +
            (C57891 - C57892) * C54845 + (C57893 - C57894) * C54789) *
               C139835 * C140002) *
              C139792 * C2324 +
          (((C54790 * C109 - C139731 * C116) * C54842 +
            (C54790 * C349 - C139731 * C355) * C54786 +
            (C55525 - C55526) * C54843 + (C55527 - C55528) * C54787 +
            (C55529 - C55530) * C54844 + (C55531 - C55532) * C54788 +
            (C55533 - C55534) * C54845 + (C55535 - C55536) * C54789) *
               C139835 * C4096 +
           ((C139731 * C1576 - C54790 * C1569) * C54842 +
            (C139731 * C1835 - C54790 * C1830) * C54786 +
            (C139731 * C3444 - C54790 * C3439) * C54843 +
            (C139731 * C3673 - C54790 * C3669) * C54787 +
            (C139731 * C7756 - C54790 * C7753) * C54844 +
            (C139731 * C8095 - C54790 * C8092) * C54788 +
            (C139731 * C10398 - C54790 * C10395) * C54845 +
            (C139731 * C10743 - C54790 * C10741) * C54789) *
               C139835 * C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[87] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47216 * C183 - C47470 * C108 - C47216 * C348 + C47134 * C411 +
             C47217 * C896 - C47471 * C813 - C47217 * C1072 + C139873 * C1151) *
                C47131 +
            (C47509 + C47510) * C47132 + C47515 * C47133) *
               C139835 * C4096 -
           ((C49390 + C49391) * C47133 + (C49392 + C49393) * C47132 +
            (C47217 * C3520 - C47471 * C3438 - C47217 * C3668 +
             C139873 * C3742 + C47216 * C1653 - C47470 * C1570 -
             C47216 * C1829 + C47134 * C1908) *
                C47131) *
               C139835 * C140002) *
              C139792 * C2324 +
          (((C49393 + C49392) * C47131 + (C49391 + C49390) * C47132 +
            (C47216 * C1656 - C47470 * C1567 - C47216 * C1832 + C47134 * C1905 +
             C47217 * C3523 - C47471 * C3441 - C47217 * C3671 +
             C139873 * C3745) *
                C47133) *
               C139835 * C140002 -
           ((C47513 + C47514) * C47133 + (C47512 + C47511) * C47132 +
            (C47510 + C47509) * C47131) *
               C139835 * C4096) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C54842 * C183 - C54996 * C108 - C54842 * C348 + C54786 * C411 +
            C54843 * C896 - C54997 * C813 - C54843 * C1072 + C54787 * C1151 +
            C54844 * C2974 - C54998 * C2908 - C54844 * C3090 + C54788 * C3148 +
            C54845 * C6792 - C54999 * C6627 - C54845 * C7032 + C54789 * C7169) *
               C139731 * C139835 * C4096 -
           (C54845 * C10528 - C54999 * C10394 - C54845 * C10740 +
            C54789 * C10858 + C54844 * C7863 - C54998 * C7754 - C54844 * C8091 +
            C54788 * C8196 + C54843 * C3520 - C54997 * C3438 - C54843 * C3668 +
            C54787 * C3742 + C54842 * C1653 - C54996 * C1570 - C54842 * C1829 +
            C54786 * C1908) *
               C139731 * C139835 * C140002) *
              C139792 * C2324 +
          ((C54842 * C1654 - C54996 * C1569 - C54842 * C1830 + C54786 * C1907 +
            C54843 * C3521 - C54997 * C3439 - C54843 * C3669 + C54787 * C3743 +
            C54844 * C7864 - C54998 * C7753 - C54844 * C8092 + C54788 * C8195 +
            C54845 * C10529 - C54999 * C10395 - C54845 * C10741 +
            C54789 * C10859) *
               C139731 * C139835 * C140002 -
           (C54845 * C6793 - C54999 * C6626 - C54845 * C7033 + C54789 * C7168 +
            C54844 * C2975 - C54998 * C2909 - C54844 * C3091 + C54788 * C3149 +
            C54843 * C897 - C54997 * C812 - C54843 * C1073 + C54787 * C1150 +
            C54842 * C184 - C54996 * C109 - C54842 * C349 + C54786 * C412) *
               C139731 * C139835 * C4096) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[87] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C139835 * C266 - C265 * C108) * C47216 +
             (C139835 * C495 - C265 * C348) * C47134 +
             (C6915 - C6916) * C47217 + (C7294 - C7295) * C139873) *
                C47131 +
            ((C279 - C280) * C47216 + (C502 - C503) * C47134 + C6919 * C47217 +
             C7298 * C139873) *
                C47132 +
            C47596 * C47133) *
               C4096 +
           (((C265 * C1570 - C139835 * C1741) * C47216 +
             (C265 * C1829 - C139835 * C1997) * C47134 +
             (C10635 - C10636) * C47217 + (C10961 - C10962) * C139873) *
                C47131 +
            ((C1752 - C1753) * C47216 + (C2003 - C2004) * C47134 +
             (C7986 - C7987) * C47217 + (C8321 - C8322) * C139873) *
                C47132 +
            ((C1756 - C1757) * C47216 + (C2005 - C2006) * C47134 +
             (C23820 - C23821) * C47217 + (C24146 - C24147) * C139873) *
                C47133) *
               C140002) *
              C139792 * C2324 +
          ((((C280 - C279) * C47216 + (C503 - C502) * C47134 + C6927 * C47217 +
             C7300 * C139873) *
                C47131 +
            ((C284 - C283) * C47216 + (C506 - C505) * C47134 + C22843 * C47217 +
             C23191 * C139873) *
                C47132 +
            ((C288 - C287) * C47216 + (C509 - C508) * C47134 +
             (C1003 - C1004) * C47217 + (C1250 - C1251) * C139873) *
                C47133) *
               C4096 +
           (((C1753 - C1752) * C47216 + (C2004 - C2003) * C47134 +
             (C7987 - C7986) * C47217 + (C8322 - C8321) * C139873) *
                C47131 +
            ((C1757 - C1756) * C47216 + (C2006 - C2005) * C47134 +
             (C23821 - C23820) * C47217 + (C24147 - C24146) * C139873) *
                C47132 +
            ((C1761 - C1760) * C47216 + (C2008 - C2007) * C47134 +
             (C139835 * C3597 - C265 * C3441) * C47217 +
             (C139835 * C3815 - C265 * C3671) * C139873) *
                C47133) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C139835 * C266 - C265 * C108) * C54842 +
            (C139835 * C495 - C265 * C348) * C54786 + (C6915 - C6916) * C54843 +
            (C7294 - C7295) * C54787 + C9790 * C54844 + C10047 * C54788 +
            C57235 * C54845 + C57407 * C54789) *
               C139731 * C4096 +
           ((C265 * C1570 - C139835 * C1741) * C54842 +
            (C265 * C1829 - C139835 * C1997) * C54786 +
            (C10635 - C10636) * C54843 + (C10961 - C10962) * C54787 +
            (C10639 - C10640) * C54844 + (C10963 - C10964) * C54788 +
            (C57811 - C57812) * C54845 + (C58029 - C58030) * C54789) *
               C139731 * C140002) *
              C139792 * C2324 +
          (((C280 - C279) * C54842 + (C503 - C502) * C54786 + C6927 * C54843 +
            C7300 * C54787 + C6929 * C54844 + C7301 * C54788 +
            (C6931 - C6932) * C54845 + (C7302 - C7303) * C54789) *
               C139731 * C4096 +
           ((C1753 - C1752) * C54842 + (C2004 - C2003) * C54786 +
            (C7987 - C7986) * C54843 + (C8322 - C8321) * C54787 +
            (C7991 - C7990) * C54844 + (C8324 - C8323) * C54788 +
            (C139835 * C10631 - C265 * C10395) * C54845 +
            (C139835 * C10959 - C265 * C10741) * C54789) *
               C139731 * C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eezx[87] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47131 * C114 - C47136 * C108 + C47132 * C116 - C47138 * C109 +
              C47133 * C118 - C47140 * C110) *
                 C265 +
             (C47131 * C573 - C47136 * C567 + C47132 * C574 - C47138 * C568 +
              C47133 * C575 - C47140 * C569) *
                 C139835) *
                C47134 +
            ((C48294 - C48295 + C48296 - C48297 + C48298 - C48299) * C265 +
             (C48640 - C48641 + C48642 - C48643 + C48644 - C48645) * C139835) *
                C139873) *
               C4096 +
           (((C47136 * C1570 - C47131 * C1578 + C47138 * C1569 -
              C47132 * C1576 + C47140 * C1568 - C47133 * C1574) *
                 C265 +
             (C47136 * C2074 - C47131 * C2079 + C47138 * C2075 -
              C47132 * C2080 + C47140 * C2076 - C47133 * C2081) *
                 C139835) *
                C47134 +
            ((C51798 - C51799 + C51800 - C51801 + C51802 - C51803) * C265 +
             (C52104 - C52105 + C52106 - C52107 + C52108 - C52109) * C139835) *
                C139873) *
               C140002) *
              C139792 * C2324 +
          ((((C47136 * C109 - C47131 * C116 + C47138 * C110 - C47132 * C118 +
              C47140 * C111 - C47133 * C120) *
                 C265 +
             (C47136 * C568 - C47131 * C574 + C47138 * C569 - C47132 * C575 +
              C47140 * C570 - C47133 * C576) *
                 C139835) *
                C47134 +
            ((C48306 - C48307 + C48308 - C48309 + C48310 - C48311) * C265 +
             (C48646 - C48647 + C48648 - C48649 + C48650 - C48651) * C139835) *
                C139873) *
               C4096 +
           (((C47131 * C1576 - C47136 * C1569 + C47132 * C1574 -
              C47138 * C1568 + C47133 * C1572 - C47140 * C1567) *
                 C265 +
             (C47131 * C2080 - C47136 * C2075 + C47132 * C2081 -
              C47138 * C2076 + C47133 * C2082 - C47140 * C2077) *
                 C139835) *
                C47134 +
            ((C47131 * C3444 - C47136 * C3439 + C47132 * C3446 -
              C47138 * C3440 + C47133 * C3448 - C47140 * C3441) *
                 C265 +
             (C47131 * C3887 - C47136 * C3883 + C47132 * C3888 -
              C47138 * C3884 + C47133 * C3889 - C47140 * C3885) *
                 C139835) *
                C139873) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C139731 * C114 - C54790 * C108) * C265 +
             (C139731 * C573 - C54790 * C567) * C139835) *
                C54786 +
            ((C55513 - C55514) * C265 + (C55735 - C55736) * C139835) * C54787 +
            C57470 * C54788 + C57471 * C54789) *
               C4096 +
           (((C54790 * C1570 - C139731 * C1578) * C265 +
             (C54790 * C2074 - C139731 * C2079) * C139835) *
                C54786 +
            ((C57883 - C57884) * C265 + (C58099 - C58100) * C139835) * C54787 +
            ((C57887 - C57888) * C265 + (C58101 - C58102) * C139835) * C54788 +
            ((C57891 - C57892) * C265 + (C58103 - C58104) * C139835) * C54789) *
               C140002) *
              C139792 * C2324 +
          ((((C54790 * C109 - C139731 * C116) * C265 +
             (C54790 * C568 - C139731 * C574) * C139835) *
                C54786 +
            ((C55525 - C55526) * C265 + (C55741 - C55742) * C139835) * C54787 +
            ((C55529 - C55530) * C265 + (C55743 - C55744) * C139835) * C54788 +
            ((C55533 - C55534) * C265 + (C55745 - C55746) * C139835) * C54789) *
               C4096 +
           (((C139731 * C1576 - C54790 * C1569) * C265 +
             (C139731 * C2080 - C54790 * C2075) * C139835) *
                C54786 +
            ((C139731 * C3444 - C54790 * C3439) * C265 +
             (C139731 * C3887 - C54790 * C3883) * C139835) *
                C54787 +
            ((C139731 * C7756 - C54790 * C7753) * C265 +
             (C139731 * C8426 - C54790 * C8423) * C139835) *
                C54788 +
            ((C139731 * C10398 - C54790 * C10395) * C265 +
             (C139731 * C11065 - C54790 * C11063) * C139835) *
                C54789) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eezy[87] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47134 * C183 - C47216 * C108 + C139873 * C896 - C47217 * C813) *
                 C265 +
             (C47134 * C629 - C47216 * C567 + C139873 * C1393 -
              C47217 * C1317) *
                 C139835) *
                C47131 +
            ((C47219 - C47220 + C47221 - C47222) * C265 +
             (C47745 - C47746 + C47747 - C47748) * C139835) *
                C47132 +
            C47762 * C47133) *
               C4096 +
           (((C47216 * C1570 - C47134 * C1653 + C47217 * C3438 -
              C139873 * C3520) *
                 C265 +
             (C47216 * C2074 - C47134 * C2150 + C47217 * C3882 -
              C139873 * C3956) *
                 C139835) *
                C47131 +
            ((C49056 - C49057 + C49058 - C49059) * C265 +
             (C49688 - C49689 + C49690 - C49691) * C139835) *
                C47132 +
            ((C49064 - C49065 + C49066 - C49067) * C265 +
             (C49692 - C49693 + C49694 - C49695) * C139835) *
                C47133) *
               C140002) *
              C139792 * C2324 +
          ((((C47220 - C47219 + C47222 - C47221) * C265 +
             (C47746 - C47745 + C47748 - C47747) * C139835) *
                C47131 +
            ((C47228 - C47227 + C47230 - C47229) * C265 +
             (C47751 - C47750 + C47753 - C47752) * C139835) *
                C47132 +
            ((C47235 - C47236 + C47237 - C47238) * C265 +
             (C47754 - C47755 + C47756 - C47757) * C139835) *
                C47133) *
               C4096 +
           (((C49057 - C49056 + C49059 - C49058) * C265 +
             (C49689 - C49688 + C49691 - C49690) * C139835) *
                C47131 +
            ((C49065 - C49064 + C49067 - C49066) * C265 +
             (C49693 - C49692 + C49695 - C49694) * C139835) *
                C47132 +
            ((C47134 * C1656 - C47216 * C1567 + C139873 * C3523 -
              C47217 * C3441) *
                 C265 +
             (C47134 * C2153 - C47216 * C2077 + C139873 * C3959 -
              C47217 * C3885) *
                 C139835) *
                C47133) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C54786 * C183 - C54842 * C108 + C54787 * C896 - C54843 * C813 +
             C54788 * C2974 - C54844 * C2908 + C54789 * C6792 -
             C54845 * C6627) *
                C265 +
            (C54786 * C629 - C54842 * C567 + C54787 * C1393 - C54843 * C1317 +
             C54788 * C3314 - C54844 * C3256 + C54789 * C7521 -
             C54845 * C7401) *
                C139835) *
               C139731 * C4096 +
           ((C54842 * C1570 - C54786 * C1653 + C54843 * C3438 - C54787 * C3520 +
             C54844 * C7754 - C54788 * C7863 + C54845 * C10394 -
             C54789 * C10528) *
                C265 +
            (C54842 * C2074 - C54786 * C2150 + C54843 * C3882 - C54787 * C3956 +
             C54844 * C8422 - C54788 * C8526 + C54845 * C11062 -
             C54789 * C11172) *
                C139835) *
               C139731 * C140002) *
              C139792 * C2324 +
          (((C54842 * C109 - C54786 * C184 + C54843 * C812 - C54787 * C897 +
             C54844 * C2909 - C54788 * C2975 + C54845 * C6626 -
             C54789 * C6793) *
                C265 +
            (C54842 * C568 - C54786 * C630 + C54843 * C1318 - C54787 * C1394 +
             C54844 * C3257 - C54788 * C3315 + C54845 * C7402 -
             C54789 * C7522) *
                C139835) *
               C139731 * C4096 +
           ((C54786 * C1654 - C54842 * C1569 + C54787 * C3521 - C54843 * C3439 +
             C54788 * C7864 - C54844 * C7753 + C54789 * C10529 -
             C54845 * C10395) *
                C265 +
            (C54786 * C2151 - C54842 * C2075 + C54787 * C3957 - C54843 * C3883 +
             C54788 * C8527 - C54844 * C8423 + C54789 * C11173 -
             C54845 * C11063) *
                C139835) *
               C139731 * C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eezz[87] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C265 * C266 - C701 * C108 - C265 * C567 + C139835 * C702) *
                 C47134 +
             C7652 * C139873) *
                C47131 +
            (C47837 + C47838) * C47132 + C47843 * C47133) *
               C4096 -
           ((C49794 + C49795) * C47133 + (C49796 + C49797) * C47132 +
            (C11288 * C139873 +
             (C265 * C1741 - C701 * C1570 - C265 * C2074 + C139835 * C2230) *
                 C47134) *
                C47131) *
               C140002) *
              C139792 * C2324 +
          (((C49797 + C49796) * C47131 + (C49795 + C49794) * C47132 +
            (C2251 * C47134 +
             (C265 * C3597 - C701 * C3441 - C265 * C3885 + C139835 * C4029) *
                 C139873) *
                C47133) *
               C140002 -
           ((C47841 + C47842) * C47133 + (C47840 + C47839) * C47132 +
            (C47838 + C47837) * C47131) *
               C4096) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C265 * C266 - C701 * C108 - C265 * C567 + C139835 * C702) *
                C54786 +
            C7652 * C54787 + C7653 * C54788 + C10296 * C54789) *
               C139731 * C4096 -
           (C58245 * C54789 + C11287 * C54788 + C11288 * C54787 +
            (C265 * C1741 - C701 * C1570 - C265 * C2074 + C139835 * C2230) *
                C54786) *
               C139731 * C140002) *
              C139792 * C2324 +
          ((C2253 * C54786 + C8651 * C54787 + C8650 * C54788 +
            (C265 * C10631 - C701 * C10395 - C265 * C11063 + C139835 * C11273) *
                C54789) *
               C139731 * C140002 -
           (C7654 * C54789 + C6525 * C54788 + C1496 * C54787 + C733 * C54786) *
               C139731 * C4096) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eexx[88] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47136 * C114 - C47137 * C108 - C47136 * C115 + C47131 * C126 +
             C47138 * C116 - C47139 * C109 - C47138 * C117 + C47132 * C127 +
             C47140 * C118 - C47141 * C110 - C47140 * C119 + C47133 * C128) *
                C139835 * C47134 +
            (C47978 + C47979 + C47980) * C139835 * C139873) *
               C4096 -
           ((C51501 + C51502 + C51503) * C139835 * C139873 +
            (C47140 * C1574 - C47141 * C1568 - C47140 * C1575 + C47133 * C1583 +
             C47138 * C1576 - C47139 * C1569 - C47138 * C1577 + C47132 * C1584 +
             C47136 * C1578 - C47137 * C1570 - C47136 * C1579 +
             C47131 * C1585) *
                C139835 * C47134) *
               C140002) *
              C806 +
          (((C51503 + C51502 + C51501) * C139835 * C47134 +
            (C47136 * C7758 - C47137 * C7754 - C47136 * C7759 + C47131 * C7763 +
             C47138 * C7756 - C47139 * C7753 - C47138 * C7757 + C47132 * C7762 +
             C47140 * C7760 - C47141 * C7755 - C47140 * C7761 +
             C47133 * C7764) *
                C139835 * C139873) *
               C140002 -
           ((C50772 + C50773 + C50774) * C139835 * C139873 +
            (C47980 + C47979 + C47978) * C139835 * C47134) *
               C4096) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C54790 * C114 - C54791 * C108 - C54790 * C115 + C139731 * C126) *
                C139835 * C54786 +
            C55309 * C54787 + C55310 * C54788 + C55311 * C54789) *
               C4096 -
           (C57672 * C54789 + C57673 * C54788 + C57674 * C54787 +
            (C54790 * C1578 - C54791 * C1570 - C54790 * C1579 +
             C139731 * C1585) *
                C139835 * C54786) *
               C140002) *
              C806 +
          ((C57674 * C54786 + C57673 * C54787 + C57672 * C54788 +
            (C54790 * C57647 - C54791 * C57646 - C54790 * C57648 +
             C139731 * C57649) *
                C139835 * C54789) *
               C140002 -
           (C57128 * C54789 + C55311 * C54788 + C55310 * C54787 +
            C55309 * C54786) *
               C4096) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eexy[88] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47134 * C183 - C47216 * C108 + C139873 * C896 - C47217 * C813) *
                C47136 +
            (C47134 * C189 - C47216 * C115 + C139873 * C901 - C47217 * C822) *
                C47131 +
            (C47219 - C47220 + C47221 - C47222) * C47138 +
            (C47223 - C47224 + C47225 - C47226) * C47132 + C47247 * C47140 +
            C47248 * C47133) *
               C139835 * C4096 +
           ((C47216 * C1570 - C47134 * C1653 + C47217 * C3438 -
             C139873 * C3520) *
                C47136 +
            (C47216 * C1579 - C47134 * C1658 + C47217 * C3443 -
             C139873 * C3524) *
                C47131 +
            (C49056 - C49057 + C49058 - C49059) * C47138 +
            (C49060 - C49061 + C49062 - C49063) * C47132 +
            (C49064 - C49065 + C49066 - C49067) * C47140 +
            (C49068 - C49069 + C49070 - C49071) * C47133) *
               C139835 * C140002) *
              C806 +
          (((C47216 * C813 - C47134 * C896 + C47217 * C2908 - C139873 * C2974) *
                C47136 +
            (C47216 * C822 - C47134 * C901 + C47217 * C2913 - C139873 * C2978) *
                C47131 +
            (C48082 - C48083 + C48084 - C48085) * C47138 +
            (C48086 - C48087 + C48088 - C48089) * C47132 +
            (C48090 - C48091 + C48092 - C48093) * C47140 +
            (C48094 - C48095 + C48096 - C48097) * C47133) *
               C139835 * C4096 +
           ((C47134 * C3520 - C47216 * C3438 + C139873 * C7863 -
             C47217 * C7754) *
                C47136 +
            (C47134 * C3524 - C47216 * C3443 + C139873 * C7866 -
             C47217 * C7759) *
                C47131 +
            (C47134 * C3521 - C47216 * C3439 + C139873 * C7864 -
             C47217 * C7753) *
                C47138 +
            (C47134 * C3525 - C47216 * C3445 + C139873 * C7867 -
             C47217 * C7757) *
                C47132 +
            (C47134 * C3522 - C47216 * C3440 + C139873 * C7865 -
             C47217 * C7755) *
                C47140 +
            (C47134 * C3526 - C47216 * C3447 + C139873 * C7868 -
             C47217 * C7761) *
                C47133) *
               C139835 * C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C54786 * C183 - C54842 * C108 + C54787 * C896 - C54843 * C813 +
             C54788 * C2974 - C54844 * C2908 + C54789 * C6792 -
             C54845 * C6627) *
                C54790 +
            (C54786 * C189 - C54842 * C115 + C54787 * C901 - C54843 * C822 +
             C54788 * C2978 - C54844 * C2913 + C54789 * C6795 -
             C54845 * C6632) *
                C139731) *
               C139835 * C4096 +
           ((C54842 * C1570 - C54786 * C1653 + C54843 * C3438 - C54787 * C3520 +
             C54844 * C7754 - C54788 * C7863 + C54845 * C10394 -
             C54789 * C10528) *
                C54790 +
            (C54842 * C1579 - C54786 * C1658 + C54843 * C3443 - C54787 * C3524 +
             C54844 * C7759 - C54788 * C7866 + C54845 * C10397 -
             C54789 * C10530) *
                C139731) *
               C139835 * C140002) *
              C806 +
          (((C54842 * C813 - C54786 * C896 + C54843 * C2908 - C54787 * C2974 +
             C54844 * C6627 - C54788 * C6792 + C54845 * C9609 -
             C54789 * C9707) *
                C54790 +
            (C54842 * C822 - C54786 * C901 + C54843 * C2913 - C54787 * C2978 +
             C54844 * C6632 - C54788 * C6795 + C54845 * C9612 -
             C54789 * C9709) *
                C139731) *
               C139835 * C4096 +
           ((C54786 * C3520 - C54842 * C3438 + C54787 * C7863 - C54843 * C7754 +
             C54788 * C10528 - C54844 * C10394 + C54789 * C57740 -
             C54845 * C57646) *
                C54790 +
            (C54786 * C3524 - C54842 * C3443 + C54787 * C7866 - C54843 * C7759 +
             C54788 * C10530 - C54844 * C10397 + C54789 * C57741 -
             C54845 * C57648) *
                C139731) *
               C139835 * C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eexz[88] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C139835 * C266 - C265 * C108) * C47136 +
             (C139835 * C272 - C265 * C115) * C47131 + (C279 - C280) * C47138 +
             (C281 - C282) * C47132 + C295 * C47140 + C296 * C47133) *
                C47134 +
            ((C6915 - C6916) * C47136 + (C6917 - C6918) * C47131 +
             C6919 * C47138 + C6920 * C47132 + C21967 * C47140 +
             C21968 * C47133) *
                C139873) *
               C4096 +
           (((C265 * C1570 - C139835 * C1741) * C47136 +
             (C265 * C1579 - C139835 * C1746) * C47131 +
             (C1752 - C1753) * C47138 + (C1754 - C1755) * C47132 +
             (C1756 - C1757) * C47140 + (C1758 - C1759) * C47133) *
                C47134 +
            ((C10635 - C10636) * C47136 + (C10637 - C10638) * C47131 +
             (C7986 - C7987) * C47138 + (C7988 - C7989) * C47132 +
             (C23820 - C23821) * C47140 + (C23822 - C23823) * C47133) *
                C139873) *
               C140002) *
              C806 +
          ((((C6916 - C6915) * C47136 + (C6918 - C6917) * C47131 +
             C6927 * C47138 + C6928 * C47132 + C22843 * C47140 +
             C22844 * C47133) *
                C47134 +
            ((C6922 - C6921) * C47136 + (C6924 - C6923) * C47131 +
             C6929 * C47138 + C6930 * C47132 + (C6000 - C6001) * C47140 +
             (C6002 - C6003) * C47133) *
                C139873) *
               C4096 +
           (((C10636 - C10635) * C47136 + (C10638 - C10637) * C47131 +
             (C7987 - C7986) * C47138 + (C7989 - C7988) * C47132 +
             (C23821 - C23820) * C47140 + (C23823 - C23822) * C47133) *
                C47134 +
            ((C10640 - C10639) * C47136 + (C10642 - C10641) * C47131 +
             (C7991 - C7990) * C47138 + (C7993 - C7992) * C47132 +
             (C139835 * C7981 - C265 * C7755) * C47140 +
             (C139835 * C7984 - C265 * C7761) * C47133) *
                C139873) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C139835 * C266 - C265 * C108) * C54790 +
             (C139835 * C272 - C265 * C115) * C139731) *
                C54786 +
            ((C6915 - C6916) * C54790 + (C6917 - C6918) * C139731) * C54787 +
            C57241 * C54788 + C57244 * C54789) *
               C4096 +
           (((C265 * C1570 - C139835 * C1741) * C54790 +
             (C265 * C1579 - C139835 * C1746) * C139731) *
                C54786 +
            ((C10635 - C10636) * C54790 + (C10637 - C10638) * C139731) *
                C54787 +
            ((C10639 - C10640) * C54790 + (C10641 - C10642) * C139731) *
                C54788 +
            ((C57811 - C57812) * C54790 + (C57813 - C57814) * C139731) *
                C54789) *
               C140002) *
              C806 +
          ((((C6916 - C6915) * C54790 + (C6918 - C6917) * C139731) * C54786 +
            ((C6922 - C6921) * C54790 + (C6924 - C6923) * C139731) * C54787 +
            ((C9794 - C9795) * C54790 + (C9796 - C9797) * C139731) * C54788 +
            ((C57237 - C57238) * C54790 + (C57239 - C57240) * C139731) *
                C54789) *
               C4096 +
           (((C10636 - C10635) * C54790 + (C10638 - C10637) * C139731) *
                C54786 +
            ((C10640 - C10639) * C54790 + (C10642 - C10641) * C139731) *
                C54787 +
            ((C57812 - C57811) * C54790 + (C57814 - C57813) * C139731) *
                C54788 +
            ((C139835 * C57808 - C265 * C57646) * C54790 +
             (C139835 * C57809 - C265 * C57648) * C139731) *
                C54789) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eeyx[88] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47131 * C114 - C47136 * C108 + C47132 * C116 - C47138 * C109 +
             C47133 * C118 - C47140 * C110) *
                C47216 +
            (C47131 * C354 - C47136 * C348 + C47132 * C355 - C47138 * C349 +
             C47133 * C356 - C47140 * C350) *
                C47134 +
            (C48294 - C48295 + C48296 - C48297 + C48298 - C48299) * C47217 +
            (C48300 - C48301 + C48302 - C48303 + C48304 - C48305) * C139873) *
               C139835 * C4096 +
           ((C47136 * C1570 - C47131 * C1578 + C47138 * C1569 - C47132 * C1576 +
             C47140 * C1568 - C47133 * C1574) *
                C47216 +
            (C47136 * C1829 - C47131 * C1834 + C47138 * C1830 - C47132 * C1835 +
             C47140 * C1831 - C47133 * C1836) *
                C47134 +
            (C51798 - C51799 + C51800 - C51801 + C51802 - C51803) * C47217 +
            (C51804 - C51805 + C51806 - C51807 + C51808 - C51809) * C139873) *
               C139835 * C140002) *
              C806 +
          (((C48295 - C48294 + C48297 - C48296 + C48299 - C48298) * C47216 +
            (C48301 - C48300 + C48303 - C48302 + C48305 - C48304) * C47134 +
            (C50997 - C50998 + C50999 - C51000 + C51001 - C51002) * C47217 +
            (C51003 - C51004 + C51005 - C51006 + C51007 - C51008) * C139873) *
               C139835 * C4096 +
           ((C51799 - C51798 + C51801 - C51800 + C51803 - C51802) * C47216 +
            (C51805 - C51804 + C51807 - C51806 + C51809 - C51808) * C47134 +
            (C47131 * C7758 - C47136 * C7754 + C47132 * C7756 - C47138 * C7753 +
             C47133 * C7760 - C47140 * C7755) *
                C47217 +
            (C47131 * C8094 - C47136 * C8091 + C47132 * C8095 - C47138 * C8092 +
             C47133 * C8096 - C47140 * C8093) *
                C139873) *
               C139835 * C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C139731 * C114 - C54790 * C108) * C54842 +
            (C139731 * C354 - C54790 * C348) * C54786 +
            (C55513 - C55514) * C54843 + (C55515 - C55516) * C54787 +
            C57297 * C54844 + C57298 * C54788 + C57299 * C54845 +
            C57300 * C54789) *
               C139835 * C4096 +
           ((C54790 * C1570 - C139731 * C1578) * C54842 +
            (C54790 * C1829 - C139731 * C1834) * C54786 +
            (C57883 - C57884) * C54843 + (C57885 - C57886) * C54787 +
            (C57887 - C57888) * C54844 + (C57889 - C57890) * C54788 +
            (C57891 - C57892) * C54845 + (C57893 - C57894) * C54789) *
               C139835 * C140002) *
              C806 +
          (((C55514 - C55513) * C54842 + (C55516 - C55515) * C54786 +
            (C55518 - C55517) * C54843 + (C55520 - C55519) * C54787 +
            (C55522 - C55521) * C54844 + (C55524 - C55523) * C54788 +
            (C57301 - C57302) * C54845 + (C57303 - C57304) * C54789) *
               C139835 * C4096 +
           ((C57884 - C57883) * C54842 + (C57886 - C57885) * C54786 +
            (C57888 - C57887) * C54843 + (C57890 - C57889) * C54787 +
            (C57892 - C57891) * C54844 + (C57894 - C57893) * C54788 +
            (C139731 * C57647 - C54790 * C57646) * C54845 +
            (C139731 * C57881 - C54790 * C57880) * C54789) *
               C139835 * C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eeyy[88] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47216 * C183 - C47470 * C108 - C47216 * C348 + C47134 * C411 +
             C47217 * C896 - C47471 * C813 - C47217 * C1072 + C139873 * C1151) *
                C47131 +
            (C47509 + C47510) * C47132 + C47515 * C47133) *
               C139835 * C4096 -
           ((C49390 + C49391) * C47133 + (C49392 + C49393) * C47132 +
            (C47217 * C3520 - C47471 * C3438 - C47217 * C3668 +
             C139873 * C3742 + C47216 * C1653 - C47470 * C1570 -
             C47216 * C1829 + C47134 * C1908) *
                C47131) *
               C139835 * C140002) *
              C806 +
          (((C47216 * C3520 - C47470 * C3438 - C47216 * C3668 + C47134 * C3742 +
             C47217 * C7863 - C47471 * C7754 - C47217 * C8091 +
             C139873 * C8196) *
                C47131 +
            (C47216 * C3521 - C47470 * C3439 - C47216 * C3669 + C47134 * C3743 +
             C47217 * C7864 - C47471 * C7753 - C47217 * C8092 +
             C139873 * C8195) *
                C47132 +
            (C47216 * C3522 - C47470 * C3440 - C47216 * C3670 + C47134 * C3744 +
             C47217 * C7865 - C47471 * C7755 - C47217 * C8093 +
             C139873 * C8197) *
                C47133) *
               C139835 * C140002 -
           ((C48440 + C48441) * C47133 + (C48442 + C48443) * C47132 +
            (C47217 * C2974 - C47471 * C2908 - C47217 * C3090 +
             C139873 * C3148 + C47216 * C896 - C47470 * C813 - C47216 * C1072 +
             C47134 * C1151) *
                C47131) *
               C139835 * C4096) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C54842 * C183 - C54996 * C108 - C54842 * C348 + C54786 * C411 +
            C54843 * C896 - C54997 * C813 - C54843 * C1072 + C54787 * C1151 +
            C54844 * C2974 - C54998 * C2908 - C54844 * C3090 + C54788 * C3148 +
            C54845 * C6792 - C54999 * C6627 - C54845 * C7032 + C54789 * C7169) *
               C139731 * C139835 * C4096 -
           (C54845 * C10528 - C54999 * C10394 - C54845 * C10740 +
            C54789 * C10858 + C54844 * C7863 - C54998 * C7754 - C54844 * C8091 +
            C54788 * C8196 + C54843 * C3520 - C54997 * C3438 - C54843 * C3668 +
            C54787 * C3742 + C54842 * C1653 - C54996 * C1570 - C54842 * C1829 +
            C54786 * C1908) *
               C139731 * C139835 * C140002) *
              C806 +
          ((C54842 * C3520 - C54996 * C3438 - C54842 * C3668 + C54786 * C3742 +
            C54843 * C7863 - C54997 * C7754 - C54843 * C8091 + C54787 * C8196 +
            C54844 * C10528 - C54998 * C10394 - C54844 * C10740 +
            C54788 * C10858 + C54845 * C57740 - C54999 * C57646 -
            C54845 * C57880 + C54789 * C57960) *
               C139731 * C139835 * C140002 -
           (C54845 * C9707 - C54999 * C9609 - C54845 * C9876 + C54789 * C9968 +
            C54844 * C6792 - C54998 * C6627 - C54844 * C7032 + C54788 * C7169 +
            C54843 * C2974 - C54997 * C2908 - C54843 * C3090 + C54787 * C3148 +
            C54842 * C896 - C54996 * C813 - C54842 * C1072 + C54786 * C1151) *
               C139731 * C139835 * C4096) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eeyz[88] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C139835 * C266 - C265 * C108) * C47216 +
             (C139835 * C495 - C265 * C348) * C47134 +
             (C6915 - C6916) * C47217 + (C7294 - C7295) * C139873) *
                C47131 +
            ((C279 - C280) * C47216 + (C502 - C503) * C47134 + C6919 * C47217 +
             C7298 * C139873) *
                C47132 +
            C47596 * C47133) *
               C4096 +
           (((C265 * C1570 - C139835 * C1741) * C47216 +
             (C265 * C1829 - C139835 * C1997) * C47134 +
             (C10635 - C10636) * C47217 + (C10961 - C10962) * C139873) *
                C47131 +
            ((C1752 - C1753) * C47216 + (C2003 - C2004) * C47134 +
             (C7986 - C7987) * C47217 + (C8321 - C8322) * C139873) *
                C47132 +
            ((C1756 - C1757) * C47216 + (C2005 - C2006) * C47134 +
             (C23820 - C23821) * C47217 + (C24146 - C24147) * C139873) *
                C47133) *
               C140002) *
              C806 +
          ((((C6916 - C6915) * C47216 + (C7295 - C7294) * C47134 +
             (C6922 - C6921) * C47217 + (C7297 - C7296) * C139873) *
                C47131 +
            (C6927 * C47216 + C7300 * C47134 + C6929 * C47217 +
             C7301 * C139873) *
                C47132 +
            (C22843 * C47216 + C23191 * C47134 + (C6000 - C6001) * C47217 +
             (C6273 - C6274) * C139873) *
                C47133) *
               C4096 +
           (((C10636 - C10635) * C47216 + (C10962 - C10961) * C47134 +
             (C10640 - C10639) * C47217 + (C10964 - C10963) * C139873) *
                C47131 +
            ((C7987 - C7986) * C47216 + (C8322 - C8321) * C47134 +
             (C7991 - C7990) * C47217 + (C8324 - C8323) * C139873) *
                C47132 +
            ((C23821 - C23820) * C47216 + (C24147 - C24146) * C47134 +
             (C139835 * C7981 - C265 * C7755) * C47217 +
             (C139835 * C8319 - C265 * C8093) * C139873) *
                C47133) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C139835 * C266 - C265 * C108) * C54842 +
            (C139835 * C495 - C265 * C348) * C54786 + (C6915 - C6916) * C54843 +
            (C7294 - C7295) * C54787 + C9790 * C54844 + C10047 * C54788 +
            C57235 * C54845 + C57407 * C54789) *
               C139731 * C4096 +
           ((C265 * C1570 - C139835 * C1741) * C54842 +
            (C265 * C1829 - C139835 * C1997) * C54786 +
            (C10635 - C10636) * C54843 + (C10961 - C10962) * C54787 +
            (C10639 - C10640) * C54844 + (C10963 - C10964) * C54788 +
            (C57811 - C57812) * C54845 + (C58029 - C58030) * C54789) *
               C139731 * C140002) *
              C806 +
          (((C6916 - C6915) * C54842 + (C7295 - C7294) * C54786 +
            (C6922 - C6921) * C54843 + (C7297 - C7296) * C54787 +
            (C9794 - C9795) * C54844 + (C10048 - C10049) * C54788 +
            (C57237 - C57238) * C54845 + (C57408 - C57409) * C54789) *
               C139731 * C4096 +
           ((C10636 - C10635) * C54842 + (C10962 - C10961) * C54786 +
            (C10640 - C10639) * C54843 + (C10964 - C10963) * C54787 +
            (C57812 - C57811) * C54844 + (C58030 - C58029) * C54788 +
            (C139835 * C57808 - C265 * C57646) * C54845 +
            (C139835 * C58027 - C265 * C57880) * C54789) *
               C139731 * C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eezx[88] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47131 * C114 - C47136 * C108 + C47132 * C116 - C47138 * C109 +
              C47133 * C118 - C47140 * C110) *
                 C265 +
             (C47131 * C573 - C47136 * C567 + C47132 * C574 - C47138 * C568 +
              C47133 * C575 - C47140 * C569) *
                 C139835) *
                C47134 +
            ((C48294 - C48295 + C48296 - C48297 + C48298 - C48299) * C265 +
             (C48640 - C48641 + C48642 - C48643 + C48644 - C48645) * C139835) *
                C139873) *
               C4096 +
           (((C47136 * C1570 - C47131 * C1578 + C47138 * C1569 -
              C47132 * C1576 + C47140 * C1568 - C47133 * C1574) *
                 C265 +
             (C47136 * C2074 - C47131 * C2079 + C47138 * C2075 -
              C47132 * C2080 + C47140 * C2076 - C47133 * C2081) *
                 C139835) *
                C47134 +
            ((C51798 - C51799 + C51800 - C51801 + C51802 - C51803) * C265 +
             (C52104 - C52105 + C52106 - C52107 + C52108 - C52109) * C139835) *
                C139873) *
               C140002) *
              C806 +
          ((((C48295 - C48294 + C48297 - C48296 + C48299 - C48298) * C265 +
             (C48641 - C48640 + C48643 - C48642 + C48645 - C48644) * C139835) *
                C47134 +
            ((C50997 - C50998 + C50999 - C51000 + C51001 - C51002) * C265 +
             (C51231 - C51232 + C51233 - C51234 + C51235 - C51236) * C139835) *
                C139873) *
               C4096 +
           (((C51799 - C51798 + C51801 - C51800 + C51803 - C51802) * C265 +
             (C52105 - C52104 + C52107 - C52106 + C52109 - C52108) * C139835) *
                C47134 +
            ((C47131 * C7758 - C47136 * C7754 + C47132 * C7756 -
              C47138 * C7753 + C47133 * C7760 - C47140 * C7755) *
                 C265 +
             (C47131 * C8425 - C47136 * C8422 + C47132 * C8426 -
              C47138 * C8423 + C47133 * C8427 - C47140 * C8424) *
                 C139835) *
                C139873) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C139731 * C114 - C54790 * C108) * C265 +
             (C139731 * C573 - C54790 * C567) * C139835) *
                C54786 +
            ((C55513 - C55514) * C265 + (C55735 - C55736) * C139835) * C54787 +
            C57470 * C54788 + C57471 * C54789) *
               C4096 +
           (((C54790 * C1570 - C139731 * C1578) * C265 +
             (C54790 * C2074 - C139731 * C2079) * C139835) *
                C54786 +
            ((C57883 - C57884) * C265 + (C58099 - C58100) * C139835) * C54787 +
            ((C57887 - C57888) * C265 + (C58101 - C58102) * C139835) * C54788 +
            ((C57891 - C57892) * C265 + (C58103 - C58104) * C139835) * C54789) *
               C140002) *
              C806 +
          ((((C55514 - C55513) * C265 + (C55736 - C55735) * C139835) * C54786 +
            ((C55518 - C55517) * C265 + (C55738 - C55737) * C139835) * C54787 +
            ((C55522 - C55521) * C265 + (C55740 - C55739) * C139835) * C54788 +
            ((C57301 - C57302) * C265 + (C57466 - C57467) * C139835) * C54789) *
               C4096 +
           (((C57884 - C57883) * C265 + (C58100 - C58099) * C139835) * C54786 +
            ((C57888 - C57887) * C265 + (C58102 - C58101) * C139835) * C54787 +
            ((C57892 - C57891) * C265 + (C58104 - C58103) * C139835) * C54788 +
            ((C139731 * C57647 - C54790 * C57646) * C265 +
             (C139731 * C58097 - C54790 * C58096) * C139835) *
                C54789) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eezy[88] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47134 * C183 - C47216 * C108 + C139873 * C896 - C47217 * C813) *
                 C265 +
             (C47134 * C629 - C47216 * C567 + C139873 * C1393 -
              C47217 * C1317) *
                 C139835) *
                C47131 +
            ((C47219 - C47220 + C47221 - C47222) * C265 +
             (C47745 - C47746 + C47747 - C47748) * C139835) *
                C47132 +
            C47762 * C47133) *
               C4096 +
           (((C47216 * C1570 - C47134 * C1653 + C47217 * C3438 -
              C139873 * C3520) *
                 C265 +
             (C47216 * C2074 - C47134 * C2150 + C47217 * C3882 -
              C139873 * C3956) *
                 C139835) *
                C47131 +
            ((C49056 - C49057 + C49058 - C49059) * C265 +
             (C49688 - C49689 + C49690 - C49691) * C139835) *
                C47132 +
            ((C49064 - C49065 + C49066 - C49067) * C265 +
             (C49692 - C49693 + C49694 - C49695) * C139835) *
                C47133) *
               C140002) *
              C806 +
          ((((C47216 * C813 - C47134 * C896 + C47217 * C2908 -
              C139873 * C2974) *
                 C265 +
             (C47216 * C1317 - C47134 * C1393 + C47217 * C3256 -
              C139873 * C3314) *
                 C139835) *
                C47131 +
            ((C48082 - C48083 + C48084 - C48085) * C265 +
             (C48750 - C48751 + C48752 - C48753) * C139835) *
                C47132 +
            ((C48090 - C48091 + C48092 - C48093) * C265 +
             (C48754 - C48755 + C48756 - C48757) * C139835) *
                C47133) *
               C4096 +
           (((C47134 * C3520 - C47216 * C3438 + C139873 * C7863 -
              C47217 * C7754) *
                 C265 +
             (C47134 * C3956 - C47216 * C3882 + C139873 * C8526 -
              C47217 * C8422) *
                 C139835) *
                C47131 +
            ((C47134 * C3521 - C47216 * C3439 + C139873 * C7864 -
              C47217 * C7753) *
                 C265 +
             (C47134 * C3957 - C47216 * C3883 + C139873 * C8527 -
              C47217 * C8423) *
                 C139835) *
                C47132 +
            ((C47134 * C3522 - C47216 * C3440 + C139873 * C7865 -
              C47217 * C7755) *
                 C265 +
             (C47134 * C3958 - C47216 * C3884 + C139873 * C8528 -
              C47217 * C8424) *
                 C139835) *
                C47133) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C54786 * C183 - C54842 * C108 + C54787 * C896 - C54843 * C813 +
             C54788 * C2974 - C54844 * C2908 + C54789 * C6792 -
             C54845 * C6627) *
                C265 +
            (C54786 * C629 - C54842 * C567 + C54787 * C1393 - C54843 * C1317 +
             C54788 * C3314 - C54844 * C3256 + C54789 * C7521 -
             C54845 * C7401) *
                C139835) *
               C139731 * C4096 +
           ((C54842 * C1570 - C54786 * C1653 + C54843 * C3438 - C54787 * C3520 +
             C54844 * C7754 - C54788 * C7863 + C54845 * C10394 -
             C54789 * C10528) *
                C265 +
            (C54842 * C2074 - C54786 * C2150 + C54843 * C3882 - C54787 * C3956 +
             C54844 * C8422 - C54788 * C8526 + C54845 * C11062 -
             C54789 * C11172) *
                C139835) *
               C139731 * C140002) *
              C806 +
          (((C54842 * C813 - C54786 * C896 + C54843 * C2908 - C54787 * C2974 +
             C54844 * C6627 - C54788 * C6792 + C54845 * C9609 -
             C54789 * C9707) *
                C265 +
            (C54842 * C1317 - C54786 * C1393 + C54843 * C3256 - C54787 * C3314 +
             C54844 * C7401 - C54788 * C7521 + C54845 * C10123 -
             C54789 * C10211) *
                C139835) *
               C139731 * C4096 +
           ((C54786 * C3520 - C54842 * C3438 + C54787 * C7863 - C54843 * C7754 +
             C54788 * C10528 - C54844 * C10394 + C54789 * C57740 -
             C54845 * C57646) *
                C265 +
            (C54786 * C3956 - C54842 * C3882 + C54787 * C8526 - C54843 * C8422 +
             C54788 * C11172 - C54844 * C11062 + C54789 * C58170 -
             C54845 * C58096) *
                C139835) *
               C139731 * C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eezz[88] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C265 * C266 - C701 * C108 - C265 * C567 + C139835 * C702) *
                 C47134 +
             C7652 * C139873) *
                C47131 +
            (C47837 + C47838) * C47132 + C47843 * C47133) *
               C4096 -
           ((C49794 + C49795) * C47133 + (C49796 + C49797) * C47132 +
            (C11288 * C139873 +
             (C265 * C1741 - C701 * C1570 - C265 * C2074 + C139835 * C2230) *
                 C47134) *
                C47131) *
               C140002) *
              C806 +
          (((C11288 * C47134 + C11287 * C139873) * C47131 +
            (C8651 * C47134 + C8650 * C139873) * C47132 +
            (C24459 * C47134 +
             (C265 * C7981 - C701 * C7755 - C265 * C8424 + C139835 * C8635) *
                 C139873) *
                C47133) *
               C140002 -
           ((C48856 + C48857) * C47133 + (C48858 + C48859) * C47132 +
            (C7653 * C139873 + C7652 * C47134) * C47131) *
               C4096) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C265 * C266 - C701 * C108 - C265 * C567 + C139835 * C702) *
                C54786 +
            C7652 * C54787 + C7653 * C54788 + C10296 * C54789) *
               C139731 * C4096 -
           (C58245 * C54789 + C11287 * C54788 + C11288 * C54787 +
            (C265 * C1741 - C701 * C1570 - C265 * C2074 + C139835 * C2230) *
                C54786) *
               C139731 * C140002) *
              C806 +
          ((C11288 * C54786 + C11287 * C54787 + C58245 * C54788 +
            (C265 * C57808 - C701 * C57646 - C265 * C58096 + C139835 * C58237) *
                C54789) *
               C139731 * C140002 -
           (C57580 * C54789 + C10296 * C54788 + C7653 * C54787 +
            C7652 * C54786) *
               C139731 * C4096) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eexx[89] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C47136 * C114 - C47137 * C108 - C47136 * C115 + C47131 * C126 +
            C47138 * C116 - C47139 * C109 - C47138 * C117 + C47132 * C127 +
            C47140 * C118 - C47141 * C110 - C47140 * C119 + C47133 * C128) *
               C139835 * C47134 +
           (C47978 + C47979 + C47980) * C139835 * C139873) *
              C5270 -
          ((C51501 + C51502 + C51503) * C139835 * C139873 +
           (C47140 * C1574 - C47141 * C1568 - C47140 * C1575 + C47133 * C1583 +
            C47138 * C1576 - C47139 * C1569 - C47138 * C1577 + C47132 * C1584 +
            C47136 * C1578 - C47137 * C1570 - C47136 * C1579 + C47131 * C1585) *
               C139835 * C47134) *
              C5271 +
          ((C47136 * C5277 - C47137 * C5273 - C47136 * C5278 + C47131 * C5285 +
            C47138 * C5279 - C47139 * C5274 - C47138 * C5280 + C47132 * C5286 +
            C47140 * C5281 - C47141 * C5275 - C47140 * C5282 + C47133 * C5287) *
               C139835 * C47134 +
           (C47136 * C13130 - C47137 * C13126 - C47136 * C13131 +
            C47131 * C13138 + C47138 * C13132 - C47139 * C13127 -
            C47138 * C13133 + C47132 * C13139 + C47140 * C14660 -
            C47141 * C14659 - C47140 * C14661 + C47133 * C14662) *
               C139835 * C139873) *
              C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C54790 * C114 - C54791 * C108 - C54790 * C115 + C139731 * C126) *
               C139835 * C54786 +
           C55309 * C54787 + C55310 * C54788 + C55311 * C54789) *
              C5270 -
          (C57672 * C54789 + C57673 * C54788 + C57674 * C54787 +
           (C54790 * C1578 - C54791 * C1570 - C54790 * C1579 +
            C139731 * C1585) *
               C139835 * C54786) *
              C5271 +
          ((C54790 * C5277 - C54791 * C5273 - C54790 * C5278 +
            C139731 * C5285) *
               C139835 * C54786 +
           (C54790 * C13130 - C54791 * C13126 - C54790 * C13131 +
            C139731 * C13138) *
               C139835 * C54787 +
           (C54790 * C13134 - C54791 * C13128 - C54790 * C13135 +
            C139731 * C13140) *
               C139835 * C54788 +
           (C54790 * C59484 - C54791 * C59483 - C54790 * C59485 +
            C139731 * C59486) *
               C139835 * C54789) *
              C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q));
    d2eexy[89] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C47134 * C183 - C47216 * C108 + C139873 * C896 - C47217 * C813) *
               C47136 +
           (C47134 * C189 - C47216 * C115 + C139873 * C901 - C47217 * C822) *
               C47131 +
           (C47219 - C47220 + C47221 - C47222) * C47138 +
           (C47223 - C47224 + C47225 - C47226) * C47132 + C47247 * C47140 +
           C47248 * C47133) *
              C139835 * C5270 +
          ((C47216 * C1570 - C47134 * C1653 + C47217 * C3438 -
            C139873 * C3520) *
               C47136 +
           (C47216 * C1579 - C47134 * C1658 + C47217 * C3443 -
            C139873 * C3524) *
               C47131 +
           (C49056 - C49057 + C49058 - C49059) * C47138 +
           (C49060 - C49061 + C49062 - C49063) * C47132 +
           (C49064 - C49065 + C49066 - C49067) * C47140 +
           (C49068 - C49069 + C49070 - C49071) * C47133) *
              C139835 * C5271 +
          ((C47134 * C5339 - C47216 * C5273 + C139873 * C13216 -
            C47217 * C13126) *
               C47136 +
           (C47134 * C5343 - C47216 * C5278 + C139873 * C13220 -
            C47217 * C13131) *
               C47131 +
           (C47134 * C5340 - C47216 * C5274 + C139873 * C13218 -
            C47217 * C13127) *
               C47138 +
           (C47134 * C5344 - C47216 * C5280 + C139873 * C13222 -
            C47217 * C13133) *
               C47132 +
           (C47134 * C5341 - C47216 * C5275 + C139873 * C14761 -
            C47217 * C14659) *
               C47140 +
           (C47134 * C5345 - C47216 * C5282 + C139873 * C14762 -
            C47217 * C14661) *
               C47133) *
              C139835 * C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C54786 * C183 - C54842 * C108 + C54787 * C896 - C54843 * C813 +
            C54788 * C2974 - C54844 * C2908 + C54789 * C6792 - C54845 * C6627) *
               C54790 +
           (C54786 * C189 - C54842 * C115 + C54787 * C901 - C54843 * C822 +
            C54788 * C2978 - C54844 * C2913 + C54789 * C6795 - C54845 * C6632) *
               C139731) *
              C139835 * C5270 +
          ((C54842 * C1570 - C54786 * C1653 + C54843 * C3438 - C54787 * C3520 +
            C54844 * C7754 - C54788 * C7863 + C54845 * C10394 -
            C54789 * C10528) *
               C54790 +
           (C54842 * C1579 - C54786 * C1658 + C54843 * C3443 - C54787 * C3524 +
            C54844 * C7759 - C54788 * C7866 + C54845 * C10397 -
            C54789 * C10530) *
               C139731) *
              C139835 * C5271 +
          ((C54786 * C5339 - C54842 * C5273 + C54787 * C13216 -
            C54843 * C13126 + C54788 * C13217 - C54844 * C13128 +
            C54789 * C59537 - C54845 * C59483) *
               C54790 +
           (C54786 * C5343 - C54842 * C5278 + C54787 * C13220 -
            C54843 * C13131 + C54788 * C13221 - C54844 * C13135 +
            C54789 * C59538 - C54845 * C59485) *
               C139731) *
              C139835 * C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q));
    d2eexz[89] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C139835 * C266 - C265 * C108) * C47136 +
            (C139835 * C272 - C265 * C115) * C47131 + (C279 - C280) * C47138 +
            (C281 - C282) * C47132 + C295 * C47140 + C296 * C47133) *
               C47134 +
           ((C6915 - C6916) * C47136 + (C6917 - C6918) * C47131 +
            C6919 * C47138 + C6920 * C47132 + C21967 * C47140 +
            C21968 * C47133) *
               C139873) *
              C5270 +
          (((C265 * C1570 - C139835 * C1741) * C47136 +
            (C265 * C1579 - C139835 * C1746) * C47131 +
            (C1752 - C1753) * C47138 + (C1754 - C1755) * C47132 +
            (C1756 - C1757) * C47140 + (C1758 - C1759) * C47133) *
               C47134 +
           ((C10635 - C10636) * C47136 + (C10637 - C10638) * C47131 +
            (C7986 - C7987) * C47138 + (C7988 - C7989) * C47132 +
            (C23820 - C23821) * C47140 + (C23822 - C23823) * C47133) *
               C139873) *
              C5271 +
          (((C139835 * C5397 - C265 * C5273) * C47136 +
            (C139835 * C5401 - C265 * C5278) * C47131 +
            (C139835 * C5398 - C265 * C5274) * C47138 +
            (C139835 * C5402 - C265 * C5280) * C47132 +
            (C139835 * C5399 - C265 * C5275) * C47140 +
            (C139835 * C5403 - C265 * C5282) * C47133) *
               C47134 +
           ((C139835 * C13298 - C265 * C13126) * C47136 +
            (C139835 * C13302 - C265 * C13131) * C47131 +
            (C139835 * C13299 - C265 * C13127) * C47138 +
            (C139835 * C13303 - C265 * C13133) * C47132 +
            (C139835 * C14869 - C265 * C14659) * C47140 +
            (C139835 * C14870 - C265 * C14661) * C47133) *
               C139873) *
              C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C139835 * C266 - C265 * C108) * C54790 +
            (C139835 * C272 - C265 * C115) * C139731) *
               C54786 +
           ((C6915 - C6916) * C54790 + (C6917 - C6918) * C139731) * C54787 +
           C57241 * C54788 + C57244 * C54789) *
              C5270 +
          (((C265 * C1570 - C139835 * C1741) * C54790 +
            (C265 * C1579 - C139835 * C1746) * C139731) *
               C54786 +
           ((C10635 - C10636) * C54790 + (C10637 - C10638) * C139731) * C54787 +
           ((C10639 - C10640) * C54790 + (C10641 - C10642) * C139731) * C54788 +
           ((C57811 - C57812) * C54790 + (C57813 - C57814) * C139731) *
               C54789) *
              C5271 +
          (((C139835 * C5397 - C265 * C5273) * C54790 +
            (C139835 * C5401 - C265 * C5278) * C139731) *
               C54786 +
           ((C139835 * C13298 - C265 * C13126) * C54790 +
            (C139835 * C13302 - C265 * C13131) * C139731) *
               C54787 +
           ((C139835 * C13300 - C265 * C13128) * C54790 +
            (C139835 * C13304 - C265 * C13135) * C139731) *
               C54788 +
           ((C139835 * C59589 - C265 * C59483) * C54790 +
            (C139835 * C59590 - C265 * C59485) * C139731) *
               C54789) *
              C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q));
    d2eeyx[89] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C47131 * C114 - C47136 * C108 + C47132 * C116 - C47138 * C109 +
            C47133 * C118 - C47140 * C110) *
               C47216 +
           (C47131 * C354 - C47136 * C348 + C47132 * C355 - C47138 * C349 +
            C47133 * C356 - C47140 * C350) *
               C47134 +
           (C48294 - C48295 + C48296 - C48297 + C48298 - C48299) * C47217 +
           (C48300 - C48301 + C48302 - C48303 + C48304 - C48305) * C139873) *
              C139835 * C5270 +
          ((C47136 * C1570 - C47131 * C1578 + C47138 * C1569 - C47132 * C1576 +
            C47140 * C1568 - C47133 * C1574) *
               C47216 +
           (C47136 * C1829 - C47131 * C1834 + C47138 * C1830 - C47132 * C1835 +
            C47140 * C1831 - C47133 * C1836) *
               C47134 +
           (C51798 - C51799 + C51800 - C51801 + C51802 - C51803) * C47217 +
           (C51804 - C51805 + C51806 - C51807 + C51808 - C51809) * C139873) *
              C139835 * C5271 +
          ((C47131 * C5277 - C47136 * C5273 + C47132 * C5279 - C47138 * C5274 +
            C47133 * C5281 - C47140 * C5275) *
               C47216 +
           (C47131 * C5459 - C47136 * C5455 + C47132 * C5460 - C47138 * C5456 +
            C47133 * C5461 - C47140 * C5457) *
               C47134 +
           (C47131 * C13130 - C47136 * C13126 + C47132 * C13132 -
            C47138 * C13127 + C47133 * C14660 - C47140 * C14659) *
               C47217 +
           (C47131 * C13384 - C47136 * C13380 + C47132 * C13385 -
            C47138 * C13381 + C47133 * C14982 - C47140 * C14981) *
               C139873) *
              C139835 * C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C139731 * C114 - C54790 * C108) * C54842 +
           (C139731 * C354 - C54790 * C348) * C54786 +
           (C55513 - C55514) * C54843 + (C55515 - C55516) * C54787 +
           C57297 * C54844 + C57298 * C54788 + C57299 * C54845 +
           C57300 * C54789) *
              C139835 * C5270 +
          ((C54790 * C1570 - C139731 * C1578) * C54842 +
           (C54790 * C1829 - C139731 * C1834) * C54786 +
           (C57883 - C57884) * C54843 + (C57885 - C57886) * C54787 +
           (C57887 - C57888) * C54844 + (C57889 - C57890) * C54788 +
           (C57891 - C57892) * C54845 + (C57893 - C57894) * C54789) *
              C139835 * C5271 +
          ((C139731 * C5277 - C54790 * C5273) * C54842 +
           (C139731 * C5459 - C54790 * C5455) * C54786 +
           (C139731 * C13130 - C54790 * C13126) * C54843 +
           (C139731 * C13384 - C54790 * C13380) * C54787 +
           (C139731 * C13134 - C54790 * C13128) * C54844 +
           (C139731 * C13386 - C54790 * C13382) * C54788 +
           (C139731 * C59484 - C54790 * C59483) * C54845 +
           (C139731 * C59642 - C54790 * C59641) * C54789) *
              C139835 * C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q));
    d2eeyy[89] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C47216 * C183 - C47470 * C108 - C47216 * C348 + C47134 * C411 +
            C47217 * C896 - C47471 * C813 - C47217 * C1072 + C139873 * C1151) *
               C47131 +
           (C47509 + C47510) * C47132 + C47515 * C47133) *
              C139835 * C5270 -
          ((C49390 + C49391) * C47133 + (C49392 + C49393) * C47132 +
           (C47217 * C3520 - C47471 * C3438 - C47217 * C3668 + C139873 * C3742 +
            C47216 * C1653 - C47470 * C1570 - C47216 * C1829 + C47134 * C1908) *
               C47131) *
              C139835 * C5271 +
          ((C47216 * C5339 - C47470 * C5273 - C47216 * C5455 + C47134 * C5513 +
            C47217 * C13216 - C47471 * C13126 - C47217 * C13380 +
            C139873 * C13462) *
               C47131 +
           (C47216 * C5340 - C47470 * C5274 - C47216 * C5456 + C47134 * C5514 +
            C47217 * C13218 - C47471 * C13127 - C47217 * C13381 +
            C139873 * C13464) *
               C47132 +
           (C47216 * C5341 - C47470 * C5275 - C47216 * C5457 + C47134 * C5515 +
            C47217 * C14761 - C47471 * C14659 - C47217 * C14981 +
            C139873 * C15081) *
               C47133) *
              C139835 * C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((C54842 * C183 - C54996 * C108 - C54842 * C348 + C54786 * C411 +
           C54843 * C896 - C54997 * C813 - C54843 * C1072 + C54787 * C1151 +
           C54844 * C2974 - C54998 * C2908 - C54844 * C3090 + C54788 * C3148 +
           C54845 * C6792 - C54999 * C6627 - C54845 * C7032 + C54789 * C7169) *
              C139731 * C139835 * C5270 -
          (C54845 * C10528 - C54999 * C10394 - C54845 * C10740 +
           C54789 * C10858 + C54844 * C7863 - C54998 * C7754 - C54844 * C8091 +
           C54788 * C8196 + C54843 * C3520 - C54997 * C3438 - C54843 * C3668 +
           C54787 * C3742 + C54842 * C1653 - C54996 * C1570 - C54842 * C1829 +
           C54786 * C1908) *
              C139731 * C139835 * C5271 +
          (C54842 * C5339 - C54996 * C5273 - C54842 * C5455 + C54786 * C5513 +
           C54843 * C13216 - C54997 * C13126 - C54843 * C13380 +
           C54787 * C13462 + C54844 * C13217 - C54998 * C13128 -
           C54844 * C13382 + C54788 * C13463 + C54845 * C59537 -
           C54999 * C59483 - C54845 * C59641 + C54789 * C59693) *
              C139731 * C139835 * C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q));
    d2eeyz[89] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C139835 * C266 - C265 * C108) * C47216 +
            (C139835 * C495 - C265 * C348) * C47134 + (C6915 - C6916) * C47217 +
            (C7294 - C7295) * C139873) *
               C47131 +
           ((C279 - C280) * C47216 + (C502 - C503) * C47134 + C6919 * C47217 +
            C7298 * C139873) *
               C47132 +
           C47596 * C47133) *
              C5270 +
          (((C265 * C1570 - C139835 * C1741) * C47216 +
            (C265 * C1829 - C139835 * C1997) * C47134 +
            (C10635 - C10636) * C47217 + (C10961 - C10962) * C139873) *
               C47131 +
           ((C1752 - C1753) * C47216 + (C2003 - C2004) * C47134 +
            (C7986 - C7987) * C47217 + (C8321 - C8322) * C139873) *
               C47132 +
           ((C1756 - C1757) * C47216 + (C2005 - C2006) * C47134 +
            (C23820 - C23821) * C47217 + (C24146 - C24147) * C139873) *
               C47133) *
              C5271 +
          (((C139835 * C5397 - C265 * C5273) * C47216 +
            (C139835 * C5567 - C265 * C5455) * C47134 +
            (C139835 * C13298 - C265 * C13126) * C47217 +
            (C139835 * C13540 - C265 * C13380) * C139873) *
               C47131 +
           ((C139835 * C5398 - C265 * C5274) * C47216 +
            (C139835 * C5568 - C265 * C5456) * C47134 +
            (C139835 * C13299 - C265 * C13127) * C47217 +
            (C139835 * C13542 - C265 * C13381) * C139873) *
               C47132 +
           ((C139835 * C5399 - C265 * C5275) * C47216 +
            (C139835 * C5569 - C265 * C5457) * C47134 +
            (C139835 * C14869 - C265 * C14659) * C47217 +
            (C139835 * C15194 - C265 * C14981) * C139873) *
               C47133) *
              C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C139835 * C266 - C265 * C108) * C54842 +
           (C139835 * C495 - C265 * C348) * C54786 + (C6915 - C6916) * C54843 +
           (C7294 - C7295) * C54787 + C9790 * C54844 + C10047 * C54788 +
           C57235 * C54845 + C57407 * C54789) *
              C139731 * C5270 +
          ((C265 * C1570 - C139835 * C1741) * C54842 +
           (C265 * C1829 - C139835 * C1997) * C54786 +
           (C10635 - C10636) * C54843 + (C10961 - C10962) * C54787 +
           (C10639 - C10640) * C54844 + (C10963 - C10964) * C54788 +
           (C57811 - C57812) * C54845 + (C58029 - C58030) * C54789) *
              C139731 * C5271 +
          ((C139835 * C5397 - C265 * C5273) * C54842 +
           (C139835 * C5567 - C265 * C5455) * C54786 +
           (C139835 * C13298 - C265 * C13126) * C54843 +
           (C139835 * C13540 - C265 * C13380) * C54787 +
           (C139835 * C13300 - C265 * C13128) * C54844 +
           (C139835 * C13541 - C265 * C13382) * C54788 +
           (C139835 * C59589 - C265 * C59483) * C54845 +
           (C139835 * C59744 - C265 * C59641) * C54789) *
              C139731 * C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q));
    d2eezx[89] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47131 * C114 - C47136 * C108 + C47132 * C116 - C47138 * C109 +
             C47133 * C118 - C47140 * C110) *
                C265 +
            (C47131 * C573 - C47136 * C567 + C47132 * C574 - C47138 * C568 +
             C47133 * C575 - C47140 * C569) *
                C139835) *
               C47134 +
           ((C48294 - C48295 + C48296 - C48297 + C48298 - C48299) * C265 +
            (C48640 - C48641 + C48642 - C48643 + C48644 - C48645) * C139835) *
               C139873) *
              C5270 +
          (((C47136 * C1570 - C47131 * C1578 + C47138 * C1569 - C47132 * C1576 +
             C47140 * C1568 - C47133 * C1574) *
                C265 +
            (C47136 * C2074 - C47131 * C2079 + C47138 * C2075 - C47132 * C2080 +
             C47140 * C2076 - C47133 * C2081) *
                C139835) *
               C47134 +
           ((C51798 - C51799 + C51800 - C51801 + C51802 - C51803) * C265 +
            (C52104 - C52105 + C52106 - C52107 + C52108 - C52109) * C139835) *
               C139873) *
              C5271 +
          (((C47131 * C5277 - C47136 * C5273 + C47132 * C5279 - C47138 * C5274 +
             C47133 * C5281 - C47140 * C5275) *
                C265 +
            (C47131 * C5625 - C47136 * C5621 + C47132 * C5626 - C47138 * C5622 +
             C47133 * C5627 - C47140 * C5623) *
                C139835) *
               C47134 +
           ((C47131 * C13130 - C47136 * C13126 + C47132 * C13132 -
             C47138 * C13127 + C47133 * C14660 - C47140 * C14659) *
                C265 +
            (C47131 * C13622 - C47136 * C13618 + C47132 * C13623 -
             C47138 * C13619 + C47133 * C15300 - C47140 * C15299) *
                C139835) *
               C139873) *
              C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C139731 * C114 - C54790 * C108) * C265 +
            (C139731 * C573 - C54790 * C567) * C139835) *
               C54786 +
           ((C55513 - C55514) * C265 + (C55735 - C55736) * C139835) * C54787 +
           C57470 * C54788 + C57471 * C54789) *
              C5270 +
          (((C54790 * C1570 - C139731 * C1578) * C265 +
            (C54790 * C2074 - C139731 * C2079) * C139835) *
               C54786 +
           ((C57883 - C57884) * C265 + (C58099 - C58100) * C139835) * C54787 +
           ((C57887 - C57888) * C265 + (C58101 - C58102) * C139835) * C54788 +
           ((C57891 - C57892) * C265 + (C58103 - C58104) * C139835) * C54789) *
              C5271 +
          (((C139731 * C5277 - C54790 * C5273) * C265 +
            (C139731 * C5625 - C54790 * C5621) * C139835) *
               C54786 +
           ((C139731 * C13130 - C54790 * C13126) * C265 +
            (C139731 * C13622 - C54790 * C13618) * C139835) *
               C54787 +
           ((C139731 * C13134 - C54790 * C13128) * C265 +
            (C139731 * C13624 - C54790 * C13620) * C139835) *
               C54788 +
           ((C139731 * C59484 - C54790 * C59483) * C265 +
            (C139731 * C59796 - C54790 * C59795) * C139835) *
               C54789) *
              C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q));
    d2eezy[89] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47134 * C183 - C47216 * C108 + C139873 * C896 - C47217 * C813) *
                C265 +
            (C47134 * C629 - C47216 * C567 + C139873 * C1393 - C47217 * C1317) *
                C139835) *
               C47131 +
           ((C47219 - C47220 + C47221 - C47222) * C265 +
            (C47745 - C47746 + C47747 - C47748) * C139835) *
               C47132 +
           C47762 * C47133) *
              C5270 +
          (((C47216 * C1570 - C47134 * C1653 + C47217 * C3438 -
             C139873 * C3520) *
                C265 +
            (C47216 * C2074 - C47134 * C2150 + C47217 * C3882 -
             C139873 * C3956) *
                C139835) *
               C47131 +
           ((C49056 - C49057 + C49058 - C49059) * C265 +
            (C49688 - C49689 + C49690 - C49691) * C139835) *
               C47132 +
           ((C49064 - C49065 + C49066 - C49067) * C265 +
            (C49692 - C49693 + C49694 - C49695) * C139835) *
               C47133) *
              C5271 +
          (((C47134 * C5339 - C47216 * C5273 + C139873 * C13216 -
             C47217 * C13126) *
                C265 +
            (C47134 * C5679 - C47216 * C5621 + C139873 * C13700 -
             C47217 * C13618) *
                C139835) *
               C47131 +
           ((C47134 * C5340 - C47216 * C5274 + C139873 * C13218 -
             C47217 * C13127) *
                C265 +
            (C47134 * C5680 - C47216 * C5622 + C139873 * C13702 -
             C47217 * C13619) *
                C139835) *
               C47132 +
           ((C47134 * C5341 - C47216 * C5275 + C139873 * C14761 -
             C47217 * C14659) *
                C265 +
            (C47134 * C5681 - C47216 * C5623 + C139873 * C15399 -
             C47217 * C15299) *
                C139835) *
               C47133) *
              C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C54786 * C183 - C54842 * C108 + C54787 * C896 - C54843 * C813 +
            C54788 * C2974 - C54844 * C2908 + C54789 * C6792 - C54845 * C6627) *
               C265 +
           (C54786 * C629 - C54842 * C567 + C54787 * C1393 - C54843 * C1317 +
            C54788 * C3314 - C54844 * C3256 + C54789 * C7521 - C54845 * C7401) *
               C139835) *
              C139731 * C5270 +
          ((C54842 * C1570 - C54786 * C1653 + C54843 * C3438 - C54787 * C3520 +
            C54844 * C7754 - C54788 * C7863 + C54845 * C10394 -
            C54789 * C10528) *
               C265 +
           (C54842 * C2074 - C54786 * C2150 + C54843 * C3882 - C54787 * C3956 +
            C54844 * C8422 - C54788 * C8526 + C54845 * C11062 -
            C54789 * C11172) *
               C139835) *
              C139731 * C5271 +
          ((C54786 * C5339 - C54842 * C5273 + C54787 * C13216 -
            C54843 * C13126 + C54788 * C13217 - C54844 * C13128 +
            C54789 * C59537 - C54845 * C59483) *
               C265 +
           (C54786 * C5679 - C54842 * C5621 + C54787 * C13700 -
            C54843 * C13618 + C54788 * C13701 - C54844 * C13620 +
            C54789 * C59847 - C54845 * C59795) *
               C139835) *
              C139731 * C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q));
    d2eezz[89] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C265 * C266 - C701 * C108 - C265 * C567 + C139835 * C702) *
                C47134 +
            C7652 * C139873) *
               C47131 +
           (C47837 + C47838) * C47132 + C47843 * C47133) *
              C5270 -
          ((C49794 + C49795) * C47133 + (C49796 + C49797) * C47132 +
           (C11288 * C139873 +
            (C265 * C1741 - C701 * C1570 - C265 * C2074 + C139835 * C2230) *
                C47134) *
               C47131) *
              C5271 +
          (((C265 * C5397 - C701 * C5273 - C265 * C5621 + C139835 * C5733) *
                C47134 +
            (C265 * C13298 - C701 * C13126 - C265 * C13618 + C139835 * C13778) *
                C139873) *
               C47131 +
           ((C265 * C5398 - C701 * C5274 - C265 * C5622 + C139835 * C5734) *
                C47134 +
            (C265 * C13299 - C701 * C13127 - C265 * C13619 + C139835 * C13780) *
                C139873) *
               C47132 +
           ((C265 * C5399 - C701 * C5275 - C265 * C5623 + C139835 * C5735) *
                C47134 +
            (C265 * C14869 - C701 * C14659 - C265 * C15299 + C139835 * C15502) *
                C139873) *
               C47133) *
              C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C265 * C266 - C701 * C108 - C265 * C567 + C139835 * C702) * C54786 +
           C7652 * C54787 + C7653 * C54788 + C10296 * C54789) *
              C139731 * C5270 -
          (C58245 * C54789 + C11287 * C54788 + C11288 * C54787 +
           (C265 * C1741 - C701 * C1570 - C265 * C2074 + C139835 * C2230) *
               C54786) *
              C139731 * C5271 +
          ((C265 * C5397 - C701 * C5273 - C265 * C5621 + C139835 * C5733) *
               C54786 +
           (C265 * C13298 - C701 * C13126 - C265 * C13618 + C139835 * C13778) *
               C54787 +
           (C265 * C13300 - C701 * C13128 - C265 * C13620 + C139835 * C13779) *
               C54788 +
           (C265 * C59589 - C701 * C59483 - C265 * C59795 + C139835 * C59898) *
               C54789) *
              C139731 * C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q));
    d2eexx[90] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C137755 * C114 - C67752 * C108 - C137755 * C115 + C139967 * C126 +
             C137748 * C116 - C67754 * C109 - C137748 * C117 + C139736 * C127) *
                C92797 +
            (C77607 + C77608) * C139899) *
               C139983 +
           ((C68584 + C68585) * C92797 + C80877 * C139899) * C139873) *
              C139809 * C139792 * C97 -
          (((C76374 + C76373) * C139899 + (C68589 + C68588) * C92797) *
               C139873 +
           ((C77610 + C77609) * C139899 +
            (C137748 * C118 - C67754 * C110 - C137748 * C119 + C139736 * C128 +
             C137755 * C116 - C67752 * C109 - C137755 * C117 + C139967 * C127) *
                C92797) *
               C139983) *
              C139809 * C139792 * C98 +
          (((C137755 * C118 - C67752 * C110 - C137755 * C119 + C139967 * C128 +
             C137748 * C120 - C67754 * C111 - C137748 * C121 + C139736 * C129) *
                C92797 +
            (C137755 * C1574 - C67752 * C1568 - C137755 * C1575 +
             C139967 * C1583 + C137748 * C1572 - C67754 * C1567 -
             C137748 * C1573 + C139736 * C1582) *
                C139899) *
               C139983 +
           ((C137755 * C817 - C67752 * C811 - C137755 * C818 + C139967 * C826 +
             C137748 * C815 - C67754 * C810 - C137748 * C816 + C139736 * C825) *
                C92797 +
            (C137755 * C3446 - C67752 * C3440 - C137755 * C3447 +
             C139967 * C3452 + C137748 * C3448 - C67754 * C3441 -
             C137748 * C3449 + C139736 * C3453) *
                C139899) *
               C139873) *
              C139809 * C139792 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eexy[90] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139983 * C183 - C21860 * C108 + C139873 * C896 - C21861 * C813) *
                C137755 +
            (C139983 * C189 - C21860 * C115 + C139873 * C901 - C21861 * C822) *
                C139967 +
            (C21863 - C21864 + C21865 - C21866) * C137748 +
            (C21867 - C21868 + C21869 - C21870) * C139736) *
               C92797 +
           ((C39482 - C39483 + C39484 - C39485) * C137755 +
            (C39486 - C39487 + C39488 - C39489) * C139967 + C39506 * C137748 +
            C39507 * C139736) *
               C139899) *
              C139809 * C139792 * C97 +
          (((C21864 - C21863 + C21866 - C21865) * C137755 +
            (C21868 - C21867 + C21870 - C21869) * C139967 +
            (C21872 - C21871 + C21874 - C21873) * C137748 +
            (C21876 - C21875 + C21878 - C21877) * C139736) *
               C92797 +
           (C39508 * C137755 + C39509 * C139967 +
            (C23714 - C23715 + C23716 - C23717) * C137748 +
            (C23718 - C23719 + C23720 - C23721) * C139736) *
               C139899) *
              C139809 * C139792 * C98 +
          ((C21891 * C137755 + C21892 * C139967 +
            (C21880 - C21879 + C21882 - C21881) * C137748 +
            (C21884 - C21883 + C21886 - C21885) * C139736) *
               C92797 +
           ((C23715 - C23714 + C23717 - C23716) * C137755 +
            (C23719 - C23718 + C23721 - C23720) * C139967 +
            (C139983 * C1656 - C21860 * C1567 + C139873 * C3523 -
             C21861 * C3441) *
                C137748 +
            (C139983 * C1661 - C21860 * C1573 + C139873 * C3527 -
             C21861 * C3449) *
                C139736) *
               C139899) *
              C139809 * C139792 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eexz[90] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92797 * C266 - C92947 * C108 + C139899 * C1741 - C92948 * C1570) *
                C137755 +
            (C92797 * C272 - C92947 * C115 + C139899 * C1746 - C92948 * C1579) *
                C139967 +
            (C92950 - C92951 + C92952 - C92953) * C137748 +
            (C92954 - C92955 + C92956 - C92957) * C139736) *
               C139983 +
           ((C101320 - C101321 + C101322 - C101323) * C137755 +
            (C101324 - C101325 + C101326 - C101327) * C139967 +
            (C93790 - C93789 + C93792 - C93791) * C137748 +
            (C93794 - C93793 + C93796 - C93795) * C139736) *
               C139873) *
              C139809 * C139792 * C97 +
          (((C92951 - C92950 + C92953 - C92952) * C137755 +
            (C92955 - C92954 + C92957 - C92956) * C139967 +
            (C92959 - C92958 + C92961 - C92960) * C137748 +
            (C92963 - C92962 + C92965 - C92964) * C139736) *
               C139983 +
           ((C93789 - C93790 + C93791 - C93792) * C137755 +
            (C93793 - C93794 + C93795 - C93796) * C139967 +
            (C93797 - C93798 + C93799 - C93800) * C137748 +
            (C93801 - C93802 + C93803 - C93804) * C139736) *
               C139873) *
              C139809 * C139792 * C98 +
          ((C92978 * C137755 + C92979 * C139967 +
            (C92967 - C92966 + C92969 - C92968) * C137748 +
            (C92971 - C92970 + C92973 - C92972) * C139736) *
               C139983 +
           ((C93798 - C93797 + C93800 - C93799) * C137755 +
            (C93802 - C93801 + C93804 - C93803) * C139967 +
            (C92797 * C987 - C92947 * C810 + C139899 * C3597 - C92948 * C3441) *
                C137748 +
            (C92797 * C992 - C92947 * C816 + C139899 * C3601 - C92948 * C3449) *
                C139736) *
               C139873) *
              C139809 * C139792 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[90] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C139967 * C114 - C137755 * C108 + C139736 * C116 -
                       C137748 * C109) *
                          C21860 +
                      (C139967 * C354 - C137755 * C348 + C139736 * C355 -
                       C137748 * C349) *
                          C139983 +
                      (C68898 - C68899 + C68900 - C68901) * C21861 +
                      (C68902 - C68903 + C68904 - C68905) * C139873) *
                         C92797 +
                     ((C78013 - C78014 + C78015 - C78016) * C21860 +
                      (C78017 - C78018 + C78019 - C78020) * C139983 +
                      C81299 * C21861 + C81300 * C139873) *
                         C139899) *
                        C139809 * C139792 * C97 +
                    (((C137755 * C109 - C139967 * C116 + C137748 * C110 -
                       C139736 * C118) *
                          C21860 +
                      (C137755 * C349 - C139967 * C355 + C137748 * C350 -
                       C139736 * C356) *
                          C139983 +
                      (C68914 - C68915 + C68916 - C68917) * C21861 +
                      (C68918 - C68919 + C68920 - C68921) * C139873) *
                         C92797 +
                     ((C78021 - C78022 + C78023 - C78024) * C21860 +
                      (C78025 - C78026 + C78027 - C78028) * C139983 +
                      (C76773 - C76774 + C76775 - C76776) * C21861 +
                      (C76777 - C76778 + C76779 - C76780) * C139873) *
                         C139899) *
                        C139809 * C139792 * C98 +
                    (((C139967 * C118 - C137755 * C110 + C139736 * C120 -
                       C137748 * C111) *
                          C21860 +
                      (C139967 * C356 - C137755 * C350 + C139736 * C357 -
                       C137748 * C351) *
                          C139983 +
                      (C139967 * C817 - C137755 * C811 + C139736 * C815 -
                       C137748 * C810) *
                          C21861 +
                      (C139967 * C1079 - C137755 * C1074 + C139736 * C1080 -
                       C137748 * C1075) *
                          C139873) *
                         C92797 +
                     ((C139967 * C1574 - C137755 * C1568 + C139736 * C1572 -
                       C137748 * C1567) *
                          C21860 +
                      (C139967 * C1836 - C137755 * C1831 + C139736 * C1837 -
                       C137748 * C1832) *
                          C139983 +
                      (C139967 * C3446 - C137755 * C3440 + C139736 * C3448 -
                       C137748 * C3441) *
                          C21861 +
                      (C139967 * C3674 - C137755 * C3670 + C139736 * C3675 -
                       C137748 * C3671) *
                          C139873) *
                         C139899) *
                        C139809 * C139792 * C99)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[90] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C21860 * C183 - C22116 * C108 - C21860 * C348 + C139983 * C411 +
             C21861 * C896 - C22117 * C813 - C21861 * C1072 + C139873 * C1151) *
                C139967 +
            (C22155 + C22156) * C139736) *
               C92797 +
           ((C39934 + C39935) * C139967 + C39916 * C139736) * C139899) *
              C139809 * C139792 * C97 -
          (((C24044 + C24045) * C139736 + C39925 * C139967) * C139899 +
           ((C22158 + C22157) * C139736 + (C22156 + C22155) * C139967) *
               C92797) *
              C139809 * C139792 * C98 +
          ((C22161 * C139967 + (C22160 + C22159) * C139736) * C92797 +
           ((C24045 + C24044) * C139967 +
            (C21860 * C1656 - C22116 * C1567 - C21860 * C1832 +
             C139983 * C1905 + C21861 * C3523 - C22117 * C3441 -
             C21861 * C3671 + C139873 * C3745) *
                C139736) *
               C139899) *
              C139809 * C139792 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[90] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92797 * C266 - C92947 * C108 + C139899 * C1741 - C92948 * C1570) *
                C21860 +
            (C92797 * C495 - C92947 * C348 + C139899 * C1997 - C92948 * C1829) *
                C139983 +
            (C101320 - C101321 + C101322 - C101323) * C21861 +
            (C101638 - C101639 + C101640 - C101641) * C139873) *
               C139967 +
           ((C92950 - C92951 + C92952 - C92953) * C21860 +
            (C93202 - C93203 + C93204 - C93205) * C139983 +
            (C93790 - C93789 + C93792 - C93791) * C21861 +
            (C94100 - C94099 + C94102 - C94101) * C139873) *
               C139736) *
              C139809 * C139792 * C97 +
          (((C92951 - C92950 + C92953 - C92952) * C21860 +
            (C93203 - C93202 + C93205 - C93204) * C139983 +
            (C93789 - C93790 + C93791 - C93792) * C21861 +
            (C94099 - C94100 + C94101 - C94102) * C139873) *
               C139967 +
           ((C92959 - C92958 + C92961 - C92960) * C21860 +
            (C93208 - C93207 + C93210 - C93209) * C139983 +
            (C93797 - C93798 + C93799 - C93800) * C21861 +
            (C94103 - C94104 + C94105 - C94106) * C139873) *
               C139736) *
              C139809 * C139792 * C98 +
          ((C92978 * C21860 + C93217 * C139983 +
            (C93798 - C93797 + C93800 - C93799) * C21861 +
            (C94104 - C94103 + C94106 - C94105) * C139873) *
               C139967 +
           ((C92967 - C92966 + C92969 - C92968) * C21860 +
            (C93212 - C93211 + C93214 - C93213) * C139983 +
            (C92797 * C987 - C92947 * C810 + C139899 * C3597 - C92948 * C3441) *
                C21861 +
            (C92797 * C1243 - C92947 * C1075 + C139899 * C3815 -
             C92948 * C3671) *
                C139873) *
               C139736) *
              C139809 * C139792 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eezx[90] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C139967 * C114 - C137755 * C108 + C139736 * C116 -
                       C137748 * C109) *
                          C92947 +
                      (C139967 * C573 - C137755 * C567 + C139736 * C574 -
                       C137748 * C568) *
                          C92797 +
                      (C78013 - C78014 + C78015 - C78016) * C92948 +
                      (C78421 - C78422 + C78423 - C78424) * C139899) *
                         C139983 +
                     ((C68898 - C68899 + C68900 - C68901) * C92947 +
                      (C69245 - C69246 + C69247 - C69248) * C92797 +
                      C81299 * C92948 + C81701 * C139899) *
                         C139873) *
                        C139809 * C139792 * C97 +
                    (((C137755 * C109 - C139967 * C116 + C137748 * C110 -
                       C139736 * C118) *
                          C92947 +
                      (C137755 * C568 - C139967 * C574 + C137748 * C569 -
                       C139736 * C575) *
                          C92797 +
                      (C78021 - C78022 + C78023 - C78024) * C92948 +
                      (C78425 - C78426 + C78427 - C78428) * C139899) *
                         C139983 +
                     ((C68914 - C68915 + C68916 - C68917) * C92947 +
                      (C69253 - C69254 + C69255 - C69256) * C92797 +
                      (C76773 - C76774 + C76775 - C76776) * C92948 +
                      (C77185 - C77186 + C77187 - C77188) * C139899) *
                         C139873) *
                        C139809 * C139792 * C98 +
                    (((C139967 * C118 - C137755 * C110 + C139736 * C120 -
                       C137748 * C111) *
                          C92947 +
                      (C139967 * C575 - C137755 * C569 + C139736 * C576 -
                       C137748 * C570) *
                          C92797 +
                      (C139967 * C1574 - C137755 * C1568 + C139736 * C1572 -
                       C137748 * C1567) *
                          C92948 +
                      (C139967 * C2081 - C137755 * C2076 + C139736 * C2082 -
                       C137748 * C2077) *
                          C139899) *
                         C139983 +
                     ((C139967 * C817 - C137755 * C811 + C139736 * C815 -
                       C137748 * C810) *
                          C92947 +
                      (C139967 * C1324 - C137755 * C1319 + C139736 * C1325 -
                       C137748 * C1320) *
                          C92797 +
                      (C139967 * C3446 - C137755 * C3440 + C139736 * C3448 -
                       C137748 * C3441) *
                          C92948 +
                      (C139967 * C3888 - C137755 * C3884 + C139736 * C3889 -
                       C137748 * C3885) *
                          C139899) *
                         C139873) *
                        C139809 * C139792 * C99)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[90] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139983 * C183 - C21860 * C108 + C139873 * C896 - C21861 * C813) *
                C92947 +
            (C139983 * C629 - C21860 * C567 + C139873 * C1393 -
             C21861 * C1317) *
                C92797 +
            (C39482 - C39483 + C39484 - C39485) * C92948 +
            (C40332 - C40333 + C40334 - C40335) * C139899) *
               C139967 +
           ((C21863 - C21864 + C21865 - C21866) * C92947 +
            (C22392 - C22393 + C22394 - C22395) * C92797 + C39506 * C92948 +
            C40344 * C139899) *
               C139736) *
              C139809 * C139792 * C97 +
          (((C21864 - C21863 + C21866 - C21865) * C92947 +
            (C22393 - C22392 + C22395 - C22394) * C92797 + C39508 * C92948 +
            C40345 * C139899) *
               C139967 +
           ((C21872 - C21871 + C21874 - C21873) * C92947 +
            (C22398 - C22397 + C22400 - C22399) * C92797 +
            (C23714 - C23715 + C23716 - C23717) * C92948 +
            (C24348 - C24349 + C24350 - C24351) * C139899) *
               C139736) *
              C139809 * C139792 * C98 +
          ((C21891 * C92947 + C22407 * C92797 +
            (C23715 - C23714 + C23717 - C23716) * C92948 +
            (C24349 - C24348 + C24351 - C24350) * C139899) *
               C139967 +
           ((C21880 - C21879 + C21882 - C21881) * C92947 +
            (C22402 - C22401 + C22404 - C22403) * C92797 +
            (C139983 * C1656 - C21860 * C1567 + C139873 * C3523 -
             C21861 * C3441) *
                C92948 +
            (C139983 * C2153 - C21860 * C2077 + C139873 * C3959 -
             C21861 * C3885) *
                C139899) *
               C139736) *
              C139809 * C139792 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eezz[90] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92947 * C266 - C93448 * C108 - C92947 * C567 + C92797 * C702 +
             C92948 * C1741 - C93449 * C1570 - C92948 * C2074 +
             C139899 * C2230) *
                C139983 +
            (C101980 + C101981) * C139873) *
               C139967 +
           ((C93487 + C93488) * C139983 + (C94428 + C94427) * C139873) *
               C139736) *
              C139809 * C139792 * C97 -
          (((C94425 + C94426) * C139873 + (C93490 + C93489) * C139983) *
               C139736 +
           ((C94427 + C94428) * C139873 + (C93488 + C93487) * C139983) *
               C139967) *
              C139809 * C139792 * C98 +
          ((C93493 * C139983 + (C94426 + C94425) * C139873) * C139967 +
           ((C93492 + C93491) * C139983 +
            (C92947 * C987 - C93448 * C810 - C92947 * C1320 + C92797 * C1470 +
             C92948 * C3597 - C93449 * C3441 - C92948 * C3885 +
             C139899 * C4029) *
                C139873) *
               C139736) *
              C139809 * C139792 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eexx[91] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C137755 * C114 - C67752 * C108 - C137755 * C115 + C139967 * C126 +
              C137748 * C116 - C67754 * C109 - C137748 * C117 +
              C139736 * C127) *
                 C92797 +
             (C77607 + C77608) * C139899) *
                C139983 +
            ((C68584 + C68585) * C92797 + C80877 * C139899) * C139873) *
               C139809 * C806 -
           (((C72107 + C72108) * C139899 + (C68587 + C68586) * C92797) *
                C139873 +
            (C80886 * C139899 + (C68585 + C68584) * C92797) * C139983) *
               C139809 * C140000) *
              C808 +
          ((((C68588 + C68589) * C92797 + (C76373 + C76374) * C139899) *
                C139983 +
            ((C68590 + C68591) * C92797 +
             (C137755 * C7756 - C67752 * C7753 - C137755 * C7757 +
              C139967 * C7762 + C137748 * C7760 - C67754 * C7755 -
              C137748 * C7761 + C139736 * C7764) *
                 C139899) *
                C139873) *
               C139809 * C140000 -
           (((C76374 + C76373) * C139899 + (C68589 + C68588) * C92797) *
                C139873 +
            ((C77610 + C77609) * C139899 +
             (C137748 * C118 - C67754 * C110 - C137748 * C119 + C139736 * C128 +
              C137755 * C116 - C67752 * C109 - C137755 * C117 +
              C139967 * C127) *
                 C92797) *
                C139983) *
               C139809 * C806) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexy[91] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139983 * C183 - C21860 * C108 + C139873 * C896 - C21861 * C813) *
                 C137755 +
             (C139983 * C189 - C21860 * C115 + C139873 * C901 - C21861 * C822) *
                 C139967 +
             (C21863 - C21864 + C21865 - C21866) * C137748 +
             (C21867 - C21868 + C21869 - C21870) * C139736) *
                C92797 +
            ((C39482 - C39483 + C39484 - C39485) * C137755 +
             (C39486 - C39487 + C39488 - C39489) * C139967 + C39506 * C137748 +
             C39507 * C139736) *
                C139899) *
               C139809 * C806 +
           (((C21860 * C813 - C139983 * C896 + C21861 * C2908 -
              C139873 * C2974) *
                 C137755 +
             (C21860 * C822 - C139983 * C901 + C21861 * C2913 -
              C139873 * C2978) *
                 C139967 +
             (C22729 - C22730 + C22731 - C22732) * C137748 +
             (C22733 - C22734 + C22735 - C22736) * C139736) *
                C92797 +
            ((C42830 - C42831 + C42832 - C42833) * C137755 +
             (C42834 - C42835 + C42836 - C42837) * C139967 +
             (C38202 - C38203 + C38204 - C38205) * C137748 +
             (C38206 - C38207 + C38208 - C38209) * C139736) *
                C139899) *
               C139809 * C140000) *
              C808 +
          ((((C21864 - C21863 + C21866 - C21865) * C137755 +
             (C21868 - C21867 + C21870 - C21869) * C139967 +
             (C21872 - C21871 + C21874 - C21873) * C137748 +
             (C21876 - C21875 + C21878 - C21877) * C139736) *
                C92797 +
            (C39508 * C137755 + C39509 * C139967 +
             (C23714 - C23715 + C23716 - C23717) * C137748 +
             (C23718 - C23719 + C23720 - C23721) * C139736) *
                C139899) *
               C139809 * C806 +
           (((C22730 - C22729 + C22732 - C22731) * C137755 +
             (C22734 - C22733 + C22736 - C22735) * C139967 +
             (C22738 - C22737 + C22740 - C22739) * C137748 +
             (C22742 - C22741 + C22744 - C22743) * C139736) *
                C92797 +
            ((C38203 - C38202 + C38205 - C38204) * C137755 +
             (C38207 - C38206 + C38209 - C38208) * C139967 +
             (C139983 * C3522 - C21860 * C3440 + C139873 * C7865 -
              C21861 * C7755) *
                 C137748 +
             (C139983 * C3526 - C21860 * C3447 + C139873 * C7868 -
              C21861 * C7761) *
                 C139736) *
                C139899) *
               C139809 * C140000) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexz[91] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C92797 * C266 - C92947 * C108 + C139899 * C1741 -
                        C92948 * C1570) *
                           C137755 +
                       (C92797 * C272 - C92947 * C115 + C139899 * C1746 -
                        C92948 * C1579) *
                           C139967 +
                       (C92950 - C92951 + C92952 - C92953) * C137748 +
                       (C92954 - C92955 + C92956 - C92957) * C139736) *
                          C139983 +
                      ((C101320 - C101321 + C101322 - C101323) * C137755 +
                       (C101324 - C101325 + C101326 - C101327) * C139967 +
                       C114252 * C137748 + C114253 * C139736) *
                          C139873) *
                         C139809 * C806 +
                     (((C101321 - C101320 + C101323 - C101322) * C137755 +
                       (C101325 - C101324 + C101327 - C101326) * C139967 +
                       C114254 * C137748 + C114255 * C139736) *
                          C139983 +
                      ((C101329 - C101328 + C101331 - C101330) * C137755 +
                       (C101333 - C101332 + C101335 - C101334) * C139967 +
                       (C101336 - C101337 + C101338 - C101339) * C137748 +
                       (C101340 - C101341 + C101342 - C101343) * C139736) *
                          C139873) *
                         C139809 * C140000) *
                        C808 +
                    ((((C92951 - C92950 + C92953 - C92952) * C137755 +
                       (C92955 - C92954 + C92957 - C92956) * C139967 +
                       (C92959 - C92958 + C92961 - C92960) * C137748 +
                       (C92963 - C92962 + C92965 - C92964) * C139736) *
                          C139983 +
                      (C114254 * C137755 + C114255 * C139967 +
                       (C93797 - C93798 + C93799 - C93800) * C137748 +
                       (C93801 - C93802 + C93803 - C93804) * C139736) *
                          C139873) *
                         C139809 * C806 +
                     ((C114252 * C137755 + C114253 * C139967 +
                       (C93798 - C93797 + C93800 - C93799) * C137748 +
                       (C93802 - C93801 + C93804 - C93803) * C139736) *
                          C139983 +
                      ((C101337 - C101336 + C101339 - C101338) * C137755 +
                       (C101341 - C101340 + C101343 - C101342) * C139967 +
                       (C92797 * C3034 - C92947 * C2910 + C139899 * C7981 -
                        C92948 * C7755) *
                           C137748 +
                       (C92797 * C3038 - C92947 * C2917 + C139899 * C7984 -
                        C92948 * C7761) *
                           C139736) *
                          C139873) *
                         C139809 * C140000) *
                        C139998)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[91] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C139967 * C114 - C137755 * C108 + C139736 * C116 -
                        C137748 * C109) *
                           C21860 +
                       (C139967 * C354 - C137755 * C348 + C139736 * C355 -
                        C137748 * C349) *
                           C139983 +
                       (C68898 - C68899 + C68900 - C68901) * C21861 +
                       (C68902 - C68903 + C68904 - C68905) * C139873) *
                          C92797 +
                      ((C78013 - C78014 + C78015 - C78016) * C21860 +
                       (C78017 - C78018 + C78019 - C78020) * C139983 +
                       C81299 * C21861 + C81300 * C139873) *
                          C139899) *
                         C139809 * C806 +
                     (((C68899 - C68898 + C68901 - C68900) * C21860 +
                       (C68903 - C68902 + C68905 - C68904) * C139983 +
                       (C68907 - C68906 + C68909 - C68908) * C21861 +
                       (C68911 - C68910 + C68913 - C68912) * C139873) *
                          C92797 +
                      (C81301 * C21860 + C81302 * C139983 +
                       (C72413 - C72414 + C72415 - C72416) * C21861 +
                       (C72417 - C72418 + C72419 - C72420) * C139873) *
                          C139899) *
                         C139809 * C140000) *
                        C808 +
                    ((((C137755 * C109 - C139967 * C116 + C137748 * C110 -
                        C139736 * C118) *
                           C21860 +
                       (C137755 * C349 - C139967 * C355 + C137748 * C350 -
                        C139736 * C356) *
                           C139983 +
                       (C68914 - C68915 + C68916 - C68917) * C21861 +
                       (C68918 - C68919 + C68920 - C68921) * C139873) *
                          C92797 +
                      ((C78021 - C78022 + C78023 - C78024) * C21860 +
                       (C78025 - C78026 + C78027 - C78028) * C139983 +
                       (C76773 - C76774 + C76775 - C76776) * C21861 +
                       (C76777 - C76778 + C76779 - C76780) * C139873) *
                          C139899) *
                         C139809 * C806 +
                     (((C68915 - C68914 + C68917 - C68916) * C21860 +
                       (C68919 - C68918 + C68921 - C68920) * C139983 +
                       (C68923 - C68922 + C68925 - C68924) * C21861 +
                       (C68927 - C68926 + C68929 - C68928) * C139873) *
                          C92797 +
                      ((C76774 - C76773 + C76776 - C76775) * C21860 +
                       (C76778 - C76777 + C76780 - C76779) * C139983 +
                       (C139967 * C7756 - C137755 * C7753 + C139736 * C7760 -
                        C137748 * C7755) *
                           C21861 +
                       (C139967 * C8095 - C137755 * C8092 + C139736 * C8096 -
                        C137748 * C8093) *
                           C139873) *
                          C139899) *
                         C139809 * C140000) *
                        C139998)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[91] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C21860 * C183 - C22116 * C108 - C21860 * C348 + C139983 * C411 +
              C21861 * C896 - C22117 * C813 - C21861 * C1072 +
              C139873 * C1151) *
                 C139967 +
             (C22155 + C22156) * C139736) *
                C92797 +
            ((C39934 + C39935) * C139967 + C39916 * C139736) * C139899) *
               C139809 * C806 -
           (((C38648 + C38649) * C139736 + (C43261 + C43260) * C139967) *
                C139899 +
            ((C23091 + C23092) * C139736 +
             (C21861 * C2974 - C22117 * C2908 - C21861 * C3090 +
              C139873 * C3148 + C21860 * C896 - C22116 * C813 - C21860 * C1072 +
              C139983 * C1151) *
                 C139967) *
                C92797) *
               C139809 * C140000) *
              C808 +
          ((((C23092 + C23091) * C139967 + (C23090 + C23089) * C139736) *
                C92797 +
            ((C38649 + C38648) * C139967 +
             (C21860 * C3522 - C22116 * C3440 - C21860 * C3670 +
              C139983 * C3744 + C21861 * C7865 - C22117 * C7755 -
              C21861 * C8093 + C139873 * C8197) *
                 C139736) *
                C139899) *
               C139809 * C140000 -
           (((C24044 + C24045) * C139736 + C39925 * C139967) * C139899 +
            ((C22158 + C22157) * C139736 + (C22156 + C22155) * C139967) *
                C92797) *
               C139809 * C806) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[91] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C92797 * C266 - C92947 * C108 + C139899 * C1741 -
                        C92948 * C1570) *
                           C21860 +
                       (C92797 * C495 - C92947 * C348 + C139899 * C1997 -
                        C92948 * C1829) *
                           C139983 +
                       (C101320 - C101321 + C101322 - C101323) * C21861 +
                       (C101638 - C101639 + C101640 - C101641) * C139873) *
                          C139967 +
                      ((C92950 - C92951 + C92952 - C92953) * C21860 +
                       (C93202 - C93203 + C93204 - C93205) * C139983 +
                       C114252 * C21861 + C114650 * C139873) *
                          C139736) *
                         C139809 * C806 +
                     (((C101321 - C101320 + C101323 - C101322) * C21860 +
                       (C101639 - C101638 + C101641 - C101640) * C139983 +
                       (C101329 - C101328 + C101331 - C101330) * C21861 +
                       (C101643 - C101642 + C101645 - C101644) * C139873) *
                          C139967 +
                      (C114254 * C21860 + C114651 * C139983 +
                       (C101336 - C101337 + C101338 - C101339) * C21861 +
                       (C101646 - C101647 + C101648 - C101649) * C139873) *
                          C139736) *
                         C139809 * C140000) *
                        C808 +
                    ((((C92951 - C92950 + C92953 - C92952) * C21860 +
                       (C93203 - C93202 + C93205 - C93204) * C139983 +
                       C114254 * C21861 + C114651 * C139873) *
                          C139967 +
                      ((C92959 - C92958 + C92961 - C92960) * C21860 +
                       (C93208 - C93207 + C93210 - C93209) * C139983 +
                       (C93797 - C93798 + C93799 - C93800) * C21861 +
                       (C94103 - C94104 + C94105 - C94106) * C139873) *
                          C139736) *
                         C139809 * C806 +
                     ((C114252 * C21860 + C114650 * C139983 +
                       (C101337 - C101336 + C101339 - C101338) * C21861 +
                       (C101647 - C101646 + C101649 - C101648) * C139873) *
                          C139967 +
                      ((C93798 - C93797 + C93800 - C93799) * C21860 +
                       (C94104 - C94103 + C94106 - C94105) * C139983 +
                       (C92797 * C3034 - C92947 * C2910 + C139899 * C7981 -
                        C92948 * C7755) *
                           C21861 +
                       (C92797 * C3204 - C92947 * C3092 + C139899 * C8319 -
                        C92948 * C8093) *
                           C139873) *
                          C139736) *
                         C139809 * C140000) *
                        C139998)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[91] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C139967 * C114 - C137755 * C108 + C139736 * C116 -
                        C137748 * C109) *
                           C92947 +
                       (C139967 * C573 - C137755 * C567 + C139736 * C574 -
                        C137748 * C568) *
                           C92797 +
                       (C78013 - C78014 + C78015 - C78016) * C92948 +
                       (C78421 - C78422 + C78423 - C78424) * C139899) *
                          C139983 +
                      ((C68898 - C68899 + C68900 - C68901) * C92947 +
                       (C69245 - C69246 + C69247 - C69248) * C92797 +
                       C81299 * C92948 + C81701 * C139899) *
                          C139873) *
                         C139809 * C806 +
                     (((C68899 - C68898 + C68901 - C68900) * C92947 +
                       (C69246 - C69245 + C69248 - C69247) * C92797 +
                       C81301 * C92948 + C81702 * C139899) *
                          C139983 +
                      ((C68907 - C68906 + C68909 - C68908) * C92947 +
                       (C69250 - C69249 + C69252 - C69251) * C92797 +
                       (C72413 - C72414 + C72415 - C72416) * C92948 +
                       (C72719 - C72720 + C72721 - C72722) * C139899) *
                          C139873) *
                         C139809 * C140000) *
                        C808 +
                    ((((C137755 * C109 - C139967 * C116 + C137748 * C110 -
                        C139736 * C118) *
                           C92947 +
                       (C137755 * C568 - C139967 * C574 + C137748 * C569 -
                        C139736 * C575) *
                           C92797 +
                       (C78021 - C78022 + C78023 - C78024) * C92948 +
                       (C78425 - C78426 + C78427 - C78428) * C139899) *
                          C139983 +
                      ((C68914 - C68915 + C68916 - C68917) * C92947 +
                       (C69253 - C69254 + C69255 - C69256) * C92797 +
                       (C76773 - C76774 + C76775 - C76776) * C92948 +
                       (C77185 - C77186 + C77187 - C77188) * C139899) *
                          C139873) *
                         C139809 * C806 +
                     (((C68915 - C68914 + C68917 - C68916) * C92947 +
                       (C69254 - C69253 + C69256 - C69255) * C92797 +
                       (C76774 - C76773 + C76776 - C76775) * C92948 +
                       (C77186 - C77185 + C77188 - C77187) * C139899) *
                          C139983 +
                      ((C68923 - C68922 + C68925 - C68924) * C92947 +
                       (C69258 - C69257 + C69260 - C69259) * C92797 +
                       (C139967 * C7756 - C137755 * C7753 + C139736 * C7760 -
                        C137748 * C7755) *
                           C92948 +
                       (C139967 * C8426 - C137755 * C8423 + C139736 * C8427 -
                        C137748 * C8424) *
                           C139899) *
                          C139873) *
                         C139809 * C140000) *
                        C139998)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[91] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139983 * C183 - C21860 * C108 + C139873 * C896 - C21861 * C813) *
                 C92947 +
             (C139983 * C629 - C21860 * C567 + C139873 * C1393 -
              C21861 * C1317) *
                 C92797 +
             (C39482 - C39483 + C39484 - C39485) * C92948 +
             (C40332 - C40333 + C40334 - C40335) * C139899) *
                C139967 +
            ((C21863 - C21864 + C21865 - C21866) * C92947 +
             (C22392 - C22393 + C22394 - C22395) * C92797 + C39506 * C92948 +
             C40344 * C139899) *
                C139736) *
               C139809 * C806 +
           (((C21860 * C813 - C139983 * C896 + C21861 * C2908 -
              C139873 * C2974) *
                 C92947 +
             (C21860 * C1317 - C139983 * C1393 + C21861 * C3256 -
              C139873 * C3314) *
                 C92797 +
             (C42830 - C42831 + C42832 - C42833) * C92948 +
             (C43662 - C43663 + C43664 - C43665) * C139899) *
                C139967 +
            ((C22729 - C22730 + C22731 - C22732) * C92947 +
             (C23400 - C23401 + C23402 - C23403) * C92797 +
             (C38202 - C38203 + C38204 - C38205) * C92948 +
             (C39058 - C39059 + C39060 - C39061) * C139899) *
                C139736) *
               C139809 * C140000) *
              C808 +
          ((((C21864 - C21863 + C21866 - C21865) * C92947 +
             (C22393 - C22392 + C22395 - C22394) * C92797 + C39508 * C92948 +
             C40345 * C139899) *
                C139967 +
            ((C21872 - C21871 + C21874 - C21873) * C92947 +
             (C22398 - C22397 + C22400 - C22399) * C92797 +
             (C23714 - C23715 + C23716 - C23717) * C92948 +
             (C24348 - C24349 + C24350 - C24351) * C139899) *
                C139736) *
               C139809 * C806 +
           (((C22730 - C22729 + C22732 - C22731) * C92947 +
             (C23401 - C23400 + C23403 - C23402) * C92797 +
             (C38203 - C38202 + C38205 - C38204) * C92948 +
             (C39059 - C39058 + C39061 - C39060) * C139899) *
                C139967 +
            ((C22738 - C22737 + C22740 - C22739) * C92947 +
             (C23405 - C23404 + C23407 - C23406) * C92797 +
             (C139983 * C3522 - C21860 * C3440 + C139873 * C7865 -
              C21861 * C7755) *
                 C92948 +
             (C139983 * C3958 - C21860 * C3884 + C139873 * C8528 -
              C21861 * C8424) *
                 C139899) *
                C139736) *
               C139809 * C140000) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eezz[91] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92947 * C266 - C93448 * C108 - C92947 * C567 + C92797 * C702 +
              C92948 * C1741 - C93449 * C1570 - C92948 * C2074 +
              C139899 * C2230) *
                 C139983 +
             (C101980 + C101981) * C139873) *
                C139967 +
            ((C93487 + C93488) * C139983 + C115042 * C139873) * C139736) *
               C139809 * C806 -
           (((C101985 + C101984) * C139873 + C115043 * C139983) * C139736 +
            ((C101983 + C101982) * C139873 + (C101981 + C101980) * C139983) *
                C139967) *
               C139809 * C140000) *
              C808 +
          (((C115042 * C139983 + (C101984 + C101985) * C139873) * C139967 +
            ((C94426 + C94425) * C139983 +
             (C92947 * C3034 - C93448 * C2910 - C92947 * C3258 +
              C92797 * C3370 + C92948 * C7981 - C93449 * C7755 -
              C92948 * C8424 + C139899 * C8635) *
                 C139873) *
                C139736) *
               C139809 * C140000 -
           (((C94425 + C94426) * C139873 + (C93490 + C93489) * C139983) *
                C139736 +
            (C115043 * C139873 + (C93488 + C93487) * C139983) * C139967) *
               C139809 * C806) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexx[92] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C137755 * C114 - C67752 * C108 - C137755 * C115 + C139967 * C126 +
              C137748 * C116 - C67754 * C109 - C137748 * C117 +
              C139736 * C127) *
                 C92797 +
             (C77607 + C77608) * C139899) *
                C139983 +
            ((C68584 + C68585) * C92797 + C80877 * C139899) * C139873) *
               C1565 -
           (((C80891 + C80892) * C139899 + C80886 * C92797) * C139873 +
            ((C84413 + C84414) * C139899 + (C77608 + C77607) * C92797) *
                C139983) *
               C140002) *
              C139792 * C808 +
          ((((C77609 + C77610) * C92797 +
             (C137755 * C5279 - C67752 * C5274 - C137755 * C5280 +
              C139967 * C5286 + C137748 * C5281 - C67754 * C5275 -
              C137748 * C5282 + C139736 * C5287) *
                 C139899) *
                C139983 +
            ((C76373 + C76374) * C92797 +
             (C137755 * C13132 - C67752 * C13127 - C137755 * C13133 +
              C139967 * C13139 + C137748 * C14660 - C67754 * C14659 -
              C137748 * C14661 + C139736 * C14662) *
                 C139899) *
                C139873) *
               C140002 -
           (((C76374 + C76373) * C139899 + (C68589 + C68588) * C92797) *
                C139873 +
            ((C77610 + C77609) * C139899 +
             (C137748 * C118 - C67754 * C110 - C137748 * C119 + C139736 * C128 +
              C137755 * C116 - C67752 * C109 - C137755 * C117 +
              C139967 * C127) *
                 C92797) *
                C139983) *
               C1565) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexy[92] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139983 * C183 - C21860 * C108 + C139873 * C896 - C21861 * C813) *
                 C137755 +
             (C139983 * C189 - C21860 * C115 + C139873 * C901 - C21861 * C822) *
                 C139967 +
             (C21863 - C21864 + C21865 - C21866) * C137748 +
             (C21867 - C21868 + C21869 - C21870) * C139736) *
                C92797 +
            ((C39482 - C39483 + C39484 - C39485) * C137755 +
             (C39486 - C39487 + C39488 - C39489) * C139967 + C39506 * C137748 +
             C39507 * C139736) *
                C139899) *
               C1565 +
           (((C39483 - C39482 + C39485 - C39484) * C137755 +
             (C39487 - C39486 + C39489 - C39488) * C139967 + C39508 * C137748 +
             C39509 * C139736) *
                C92797 +
            ((C46346 - C46347 + C46348 - C46349) * C137755 +
             (C46350 - C46351 + C46352 - C46353) * C139967 +
             (C39498 - C39499 + C39500 - C39501) * C137748 +
             (C39502 - C39503 + C39504 - C39505) * C139736) *
                C139899) *
               C140002) *
              C139792 * C808 +
          ((((C21864 - C21863 + C21866 - C21865) * C137755 +
             (C21868 - C21867 + C21870 - C21869) * C139967 +
             (C21872 - C21871 + C21874 - C21873) * C137748 +
             (C21876 - C21875 + C21878 - C21877) * C139736) *
                C92797 +
            (C39508 * C137755 + C39509 * C139967 +
             (C23714 - C23715 + C23716 - C23717) * C137748 +
             (C23718 - C23719 + C23720 - C23721) * C139736) *
                C139899) *
               C1565 +
           ((C39506 * C137755 + C39507 * C139967 +
             (C23715 - C23714 + C23717 - C23716) * C137748 +
             (C23719 - C23718 + C23721 - C23720) * C139736) *
                C92797 +
            ((C39499 - C39498 + C39501 - C39500) * C137755 +
             (C39503 - C39502 + C39505 - C39504) * C139967 +
             (C139983 * C5341 - C21860 * C5275 + C139873 * C14761 -
              C21861 * C14659) *
                 C137748 +
             (C139983 * C5345 - C21860 * C5282 + C139873 * C14762 -
              C21861 * C14661) *
                 C139736) *
                C139899) *
               C140002) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexz[92] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C92797 * C266 - C92947 * C108 + C139899 * C1741 -
                        C92948 * C1570) *
                           C137755 +
                       (C92797 * C272 - C92947 * C115 + C139899 * C1746 -
                        C92948 * C1579) *
                           C139967 +
                       (C92950 - C92951 + C92952 - C92953) * C137748 +
                       (C92954 - C92955 + C92956 - C92957) * C139736) *
                          C139983 +
                      ((C101320 - C101321 + C101322 - C101323) * C137755 +
                       (C101324 - C101325 + C101326 - C101327) * C139967 +
                       C114252 * C137748 + C114253 * C139736) *
                          C139873) *
                         C1565 +
                     (((C92947 * C1570 - C92797 * C1741 + C92948 * C5273 -
                        C139899 * C5397) *
                           C137755 +
                       (C92947 * C1579 - C92797 * C1746 + C92948 * C5278 -
                        C139899 * C5401) *
                           C139967 +
                       (C94765 - C94766 + C94767 - C94768) * C137748 +
                       (C94769 - C94770 + C94771 - C94772) * C139736) *
                          C139983 +
                      ((C104814 - C104815 + C104816 - C104817) * C137755 +
                       (C104818 - C104819 + C104820 - C104821) * C139967 +
                       (C115434 - C115435 + C115436 - C115437) * C137748 +
                       (C115438 - C115439 + C115440 - C115441) * C139736) *
                          C139873) *
                         C140002) *
                        C139792 * C808 +
                    ((((C92951 - C92950 + C92953 - C92952) * C137755 +
                       (C92955 - C92954 + C92957 - C92956) * C139967 +
                       (C92959 - C92958 + C92961 - C92960) * C137748 +
                       (C92963 - C92962 + C92965 - C92964) * C139736) *
                          C139983 +
                      (C114254 * C137755 + C114255 * C139967 +
                       (C93797 - C93798 + C93799 - C93800) * C137748 +
                       (C93801 - C93802 + C93803 - C93804) * C139736) *
                          C139873) *
                         C1565 +
                     (((C94766 - C94765 + C94768 - C94767) * C137755 +
                       (C94770 - C94769 + C94772 - C94771) * C139967 +
                       (C94774 - C94773 + C94776 - C94775) * C137748 +
                       (C94778 - C94777 + C94780 - C94779) * C139736) *
                          C139983 +
                      ((C115435 - C115434 + C115437 - C115436) * C137755 +
                       (C115439 - C115438 + C115441 - C115440) * C139967 +
                       (C92797 * C3596 - C92947 * C3440 + C139899 * C14869 -
                        C92948 * C14659) *
                           C137748 +
                       (C92797 * C3600 - C92947 * C3447 + C139899 * C14870 -
                        C92948 * C14661) *
                           C139736) *
                          C139873) *
                         C140002) *
                        C139792 * C139998)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[92] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C139967 * C114 - C137755 * C108 + C139736 * C116 -
                        C137748 * C109) *
                           C21860 +
                       (C139967 * C354 - C137755 * C348 + C139736 * C355 -
                        C137748 * C349) *
                           C139983 +
                       (C68898 - C68899 + C68900 - C68901) * C21861 +
                       (C68902 - C68903 + C68904 - C68905) * C139873) *
                          C92797 +
                      ((C78013 - C78014 + C78015 - C78016) * C21860 +
                       (C78017 - C78018 + C78019 - C78020) * C139983 +
                       C81299 * C21861 + C81300 * C139873) *
                          C139899) *
                         C1565 +
                     (((C78014 - C78013 + C78016 - C78015) * C21860 +
                       (C78018 - C78017 + C78020 - C78019) * C139983 +
                       C81301 * C21861 + C81302 * C139873) *
                          C92797 +
                      ((C84709 - C84710 + C84711 - C84712) * C21860 +
                       (C84713 - C84714 + C84715 - C84716) * C139983 +
                       (C81291 - C81292 + C81293 - C81294) * C21861 +
                       (C81295 - C81296 + C81297 - C81298) * C139873) *
                          C139899) *
                         C140002) *
                        C139792 * C808 +
                    ((((C137755 * C109 - C139967 * C116 + C137748 * C110 -
                        C139736 * C118) *
                           C21860 +
                       (C137755 * C349 - C139967 * C355 + C137748 * C350 -
                        C139736 * C356) *
                           C139983 +
                       (C68914 - C68915 + C68916 - C68917) * C21861 +
                       (C68918 - C68919 + C68920 - C68921) * C139873) *
                          C92797 +
                      ((C78021 - C78022 + C78023 - C78024) * C21860 +
                       (C78025 - C78026 + C78027 - C78028) * C139983 +
                       (C76773 - C76774 + C76775 - C76776) * C21861 +
                       (C76777 - C76778 + C76779 - C76780) * C139873) *
                          C139899) *
                         C1565 +
                     (((C78022 - C78021 + C78024 - C78023) * C21860 +
                       (C78026 - C78025 + C78028 - C78027) * C139983 +
                       (C76774 - C76773 + C76776 - C76775) * C21861 +
                       (C76778 - C76777 + C76780 - C76779) * C139873) *
                          C92797 +
                      ((C139967 * C5279 - C137755 * C5274 + C139736 * C5281 -
                        C137748 * C5275) *
                           C21860 +
                       (C139967 * C5460 - C137755 * C5456 + C139736 * C5461 -
                        C137748 * C5457) *
                           C139983 +
                       (C139967 * C13132 - C137755 * C13127 + C139736 * C14660 -
                        C137748 * C14659) *
                           C21861 +
                       (C139967 * C13385 - C137755 * C13381 + C139736 * C14982 -
                        C137748 * C14981) *
                           C139873) *
                          C139899) *
                         C140002) *
                        C139792 * C139998)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[92] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C21860 * C183 - C22116 * C108 - C21860 * C348 + C139983 * C411 +
              C21861 * C896 - C22117 * C813 - C21861 * C1072 +
              C139873 * C1151) *
                 C139967 +
             (C22155 + C22156) * C139736) *
                C92797 +
            ((C39934 + C39935) * C139967 + C39916 * C139736) * C139899) *
               C1565 -
           (((C39936 + C39937) * C139736 + (C46660 + C46661) * C139967) *
                C139899 +
            (C39925 * C139736 + (C39935 + C39934) * C139967) * C92797) *
               C140002) *
              C139792 * C808 +
          (((C39916 * C139967 + (C24045 + C24044) * C139736) * C92797 +
            ((C39937 + C39936) * C139967 +
             (C21860 * C5341 - C22116 * C5275 - C21860 * C5457 +
              C139983 * C5515 + C21861 * C14761 - C22117 * C14659 -
              C21861 * C14981 + C139873 * C15081) *
                 C139736) *
                C139899) *
               C140002 -
           (((C24044 + C24045) * C139736 + C39925 * C139967) * C139899 +
            ((C22158 + C22157) * C139736 + (C22156 + C22155) * C139967) *
                C92797) *
               C1565) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[92] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C92797 * C266 - C92947 * C108 + C139899 * C1741 -
                        C92948 * C1570) *
                           C21860 +
                       (C92797 * C495 - C92947 * C348 + C139899 * C1997 -
                        C92948 * C1829) *
                           C139983 +
                       (C101320 - C101321 + C101322 - C101323) * C21861 +
                       (C101638 - C101639 + C101640 - C101641) * C139873) *
                          C139967 +
                      ((C92950 - C92951 + C92952 - C92953) * C21860 +
                       (C93202 - C93203 + C93204 - C93205) * C139983 +
                       C114252 * C21861 + C114650 * C139873) *
                          C139736) *
                         C1565 +
                     (((C92947 * C1570 - C92797 * C1741 + C92948 * C5273 -
                        C139899 * C5397) *
                           C21860 +
                       (C92947 * C1829 - C92797 * C1997 + C92948 * C5455 -
                        C139899 * C5567) *
                           C139983 +
                       (C104814 - C104815 + C104816 - C104817) * C21861 +
                       (C105145 - C105146 + C105147 - C105148) * C139873) *
                          C139967 +
                      ((C94765 - C94766 + C94767 - C94768) * C21860 +
                       (C95105 - C95106 + C95107 - C95108) * C139983 +
                       (C115434 - C115435 + C115436 - C115437) * C21861 +
                       (C115832 - C115833 + C115834 - C115835) * C139873) *
                          C139736) *
                         C140002) *
                        C139792 * C808 +
                    ((((C92951 - C92950 + C92953 - C92952) * C21860 +
                       (C93203 - C93202 + C93205 - C93204) * C139983 +
                       C114254 * C21861 + C114651 * C139873) *
                          C139967 +
                      ((C92959 - C92958 + C92961 - C92960) * C21860 +
                       (C93208 - C93207 + C93210 - C93209) * C139983 +
                       (C93797 - C93798 + C93799 - C93800) * C21861 +
                       (C94103 - C94104 + C94105 - C94106) * C139873) *
                          C139736) *
                         C1565 +
                     (((C94766 - C94765 + C94768 - C94767) * C21860 +
                       (C95106 - C95105 + C95108 - C95107) * C139983 +
                       (C115435 - C115434 + C115437 - C115436) * C21861 +
                       (C115833 - C115832 + C115835 - C115834) * C139873) *
                          C139967 +
                      ((C94774 - C94773 + C94776 - C94775) * C21860 +
                       (C95110 - C95109 + C95112 - C95111) * C139983 +
                       (C92797 * C3596 - C92947 * C3440 + C139899 * C14869 -
                        C92948 * C14659) *
                           C21861 +
                       (C92797 * C3814 - C92947 * C3670 + C139899 * C15194 -
                        C92948 * C14981) *
                           C139873) *
                          C139736) *
                         C140002) *
                        C139792 * C139998)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[92] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C139967 * C114 - C137755 * C108 + C139736 * C116 -
                        C137748 * C109) *
                           C92947 +
                       (C139967 * C573 - C137755 * C567 + C139736 * C574 -
                        C137748 * C568) *
                           C92797 +
                       (C78013 - C78014 + C78015 - C78016) * C92948 +
                       (C78421 - C78422 + C78423 - C78424) * C139899) *
                          C139983 +
                      ((C68898 - C68899 + C68900 - C68901) * C92947 +
                       (C69245 - C69246 + C69247 - C69248) * C92797 +
                       C81299 * C92948 + C81701 * C139899) *
                          C139873) *
                         C1565 +
                     (((C78014 - C78013 + C78016 - C78015) * C92947 +
                       (C78422 - C78421 + C78424 - C78423) * C92797 +
                       (C84709 - C84710 + C84711 - C84712) * C92948 +
                       (C85011 - C85012 + C85013 - C85014) * C139899) *
                          C139983 +
                      (C81301 * C92947 + C81702 * C92797 +
                       (C81291 - C81292 + C81293 - C81294) * C92948 +
                       (C81697 - C81698 + C81699 - C81700) * C139899) *
                          C139873) *
                         C140002) *
                        C139792 * C808 +
                    ((((C137755 * C109 - C139967 * C116 + C137748 * C110 -
                        C139736 * C118) *
                           C92947 +
                       (C137755 * C568 - C139967 * C574 + C137748 * C569 -
                        C139736 * C575) *
                           C92797 +
                       (C78021 - C78022 + C78023 - C78024) * C92948 +
                       (C78425 - C78426 + C78427 - C78428) * C139899) *
                          C139983 +
                      ((C68914 - C68915 + C68916 - C68917) * C92947 +
                       (C69253 - C69254 + C69255 - C69256) * C92797 +
                       (C76773 - C76774 + C76775 - C76776) * C92948 +
                       (C77185 - C77186 + C77187 - C77188) * C139899) *
                          C139873) *
                         C1565 +
                     (((C78022 - C78021 + C78024 - C78023) * C92947 +
                       (C78426 - C78425 + C78428 - C78427) * C92797 +
                       (C139967 * C5279 - C137755 * C5274 + C139736 * C5281 -
                        C137748 * C5275) *
                           C92948 +
                       (C139967 * C5626 - C137755 * C5622 + C139736 * C5627 -
                        C137748 * C5623) *
                           C139899) *
                          C139983 +
                      ((C76774 - C76773 + C76776 - C76775) * C92947 +
                       (C77186 - C77185 + C77188 - C77187) * C92797 +
                       (C139967 * C13132 - C137755 * C13127 + C139736 * C14660 -
                        C137748 * C14659) *
                           C92948 +
                       (C139967 * C13623 - C137755 * C13619 + C139736 * C15300 -
                        C137748 * C15299) *
                           C139899) *
                          C139873) *
                         C140002) *
                        C139792 * C139998)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[92] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139983 * C183 - C21860 * C108 + C139873 * C896 - C21861 * C813) *
                 C92947 +
             (C139983 * C629 - C21860 * C567 + C139873 * C1393 -
              C21861 * C1317) *
                 C92797 +
             (C39482 - C39483 + C39484 - C39485) * C92948 +
             (C40332 - C40333 + C40334 - C40335) * C139899) *
                C139967 +
            ((C21863 - C21864 + C21865 - C21866) * C92947 +
             (C22392 - C22393 + C22394 - C22395) * C92797 + C39506 * C92948 +
             C40344 * C139899) *
                C139736) *
               C1565 +
           (((C39483 - C39482 + C39485 - C39484) * C92947 +
             (C40333 - C40332 + C40335 - C40334) * C92797 +
             (C46346 - C46347 + C46348 - C46349) * C92948 +
             (C46956 - C46957 + C46958 - C46959) * C139899) *
                C139967 +
            (C39508 * C92947 + C40345 * C92797 +
             (C39498 - C39499 + C39500 - C39501) * C92948 +
             (C40340 - C40341 + C40342 - C40343) * C139899) *
                C139736) *
               C140002) *
              C139792 * C808 +
          ((((C21864 - C21863 + C21866 - C21865) * C92947 +
             (C22393 - C22392 + C22395 - C22394) * C92797 + C39508 * C92948 +
             C40345 * C139899) *
                C139967 +
            ((C21872 - C21871 + C21874 - C21873) * C92947 +
             (C22398 - C22397 + C22400 - C22399) * C92797 +
             (C23714 - C23715 + C23716 - C23717) * C92948 +
             (C24348 - C24349 + C24350 - C24351) * C139899) *
                C139736) *
               C1565 +
           ((C39506 * C92947 + C40344 * C92797 +
             (C39499 - C39498 + C39501 - C39500) * C92948 +
             (C40341 - C40340 + C40343 - C40342) * C139899) *
                C139967 +
            ((C23715 - C23714 + C23717 - C23716) * C92947 +
             (C24349 - C24348 + C24351 - C24350) * C92797 +
             (C139983 * C5341 - C21860 * C5275 + C139873 * C14761 -
              C21861 * C14659) *
                 C92948 +
             (C139983 * C5681 - C21860 * C5623 + C139873 * C15399 -
              C21861 * C15299) *
                 C139899) *
                C139736) *
               C140002) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eezz[92] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92947 * C266 - C93448 * C108 - C92947 * C567 + C92797 * C702 +
              C92948 * C1741 - C93449 * C1570 - C92948 * C2074 +
              C139899 * C2230) *
                 C139983 +
             (C101980 + C101981) * C139873) *
                C139967 +
            ((C93487 + C93488) * C139983 + C115042 * C139873) * C139736) *
               C1565 -
           (((C116238 + C116239) * C139873 + (C95445 + C95446) * C139983) *
                C139736 +
            ((C105479 + C105480) * C139873 +
             (C92948 * C5397 - C93449 * C5273 - C92948 * C5621 +
              C139899 * C5733 + C92947 * C1741 - C93448 * C1570 -
              C92947 * C2074 + C92797 * C2230) *
                 C139983) *
                C139967) *
               C140002) *
              C139792 * C808 +
          ((((C95446 + C95445) * C139983 + (C116239 + C116238) * C139873) *
                C139967 +
            ((C95444 + C95443) * C139983 +
             (C92947 * C3596 - C93448 * C3440 - C92947 * C3884 +
              C92797 * C4028 + C92948 * C14869 - C93449 * C14659 -
              C92948 * C15299 + C139899 * C15502) *
                 C139873) *
                C139736) *
               C140002 -
           (((C94425 + C94426) * C139873 + (C93490 + C93489) * C139983) *
                C139736 +
            (C115043 * C139873 + (C93488 + C93487) * C139983) * C139967) *
               C1565) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexx[93] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C137755 * C114 - C67752 * C108 - C137755 * C115 + C139967 * C126 +
              C137748 * C116 - C67754 * C109 - C137748 * C117 +
              C139736 * C127) *
                 C92797 +
             (C77607 + C77608) * C139899) *
                C139983 +
            ((C68584 + C68585) * C92797 + C80877 * C139899) * C139873) *
               C139809 * C2322 -
           (((C72107 + C72108) * C139899 + (C68587 + C68586) * C92797) *
                C139873 +
            (C80886 * C139899 + (C68585 + C68584) * C92797) * C139983) *
               C139809 * C140000) *
              C2324 +
          ((((C68588 + C68589) * C92797 + (C76373 + C76374) * C139899) *
                C139983 +
            ((C68590 + C68591) * C92797 +
             (C137755 * C7756 - C67752 * C7753 - C137755 * C7757 +
              C139967 * C7762 + C137748 * C7760 - C67754 * C7755 -
              C137748 * C7761 + C139736 * C7764) *
                 C139899) *
                C139873) *
               C139809 * C140000 -
           (((C76374 + C76373) * C139899 + (C68589 + C68588) * C92797) *
                C139873 +
            ((C77610 + C77609) * C139899 +
             (C137748 * C118 - C67754 * C110 - C137748 * C119 + C139736 * C128 +
              C137755 * C116 - C67752 * C109 - C137755 * C117 +
              C139967 * C127) *
                 C92797) *
                C139983) *
               C139809 * C2322) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexy[93] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139983 * C183 - C21860 * C108 + C139873 * C896 - C21861 * C813) *
                 C137755 +
             (C139983 * C189 - C21860 * C115 + C139873 * C901 - C21861 * C822) *
                 C139967 +
             (C21863 - C21864 + C21865 - C21866) * C137748 +
             (C21867 - C21868 + C21869 - C21870) * C139736) *
                C92797 +
            ((C39482 - C39483 + C39484 - C39485) * C137755 +
             (C39486 - C39487 + C39488 - C39489) * C139967 + C39506 * C137748 +
             C39507 * C139736) *
                C139899) *
               C139809 * C2322 +
           (((C21860 * C813 - C139983 * C896 + C21861 * C2908 -
              C139873 * C2974) *
                 C137755 +
             (C21860 * C822 - C139983 * C901 + C21861 * C2913 -
              C139873 * C2978) *
                 C139967 +
             (C22729 - C22730 + C22731 - C22732) * C137748 +
             (C22733 - C22734 + C22735 - C22736) * C139736) *
                C92797 +
            ((C42830 - C42831 + C42832 - C42833) * C137755 +
             (C42834 - C42835 + C42836 - C42837) * C139967 +
             (C38202 - C38203 + C38204 - C38205) * C137748 +
             (C38206 - C38207 + C38208 - C38209) * C139736) *
                C139899) *
               C139809 * C140000) *
              C2324 +
          ((((C21864 - C21863 + C21866 - C21865) * C137755 +
             (C21868 - C21867 + C21870 - C21869) * C139967 +
             (C21872 - C21871 + C21874 - C21873) * C137748 +
             (C21876 - C21875 + C21878 - C21877) * C139736) *
                C92797 +
            (C39508 * C137755 + C39509 * C139967 +
             (C23714 - C23715 + C23716 - C23717) * C137748 +
             (C23718 - C23719 + C23720 - C23721) * C139736) *
                C139899) *
               C139809 * C2322 +
           (((C22730 - C22729 + C22732 - C22731) * C137755 +
             (C22734 - C22733 + C22736 - C22735) * C139967 +
             (C22738 - C22737 + C22740 - C22739) * C137748 +
             (C22742 - C22741 + C22744 - C22743) * C139736) *
                C92797 +
            ((C38203 - C38202 + C38205 - C38204) * C137755 +
             (C38207 - C38206 + C38209 - C38208) * C139967 +
             (C139983 * C3522 - C21860 * C3440 + C139873 * C7865 -
              C21861 * C7755) *
                 C137748 +
             (C139983 * C3526 - C21860 * C3447 + C139873 * C7868 -
              C21861 * C7761) *
                 C139736) *
                C139899) *
               C139809 * C140000) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexz[93] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C92797 * C266 - C92947 * C108 + C139899 * C1741 -
                        C92948 * C1570) *
                           C137755 +
                       (C92797 * C272 - C92947 * C115 + C139899 * C1746 -
                        C92948 * C1579) *
                           C139967 +
                       (C92950 - C92951 + C92952 - C92953) * C137748 +
                       (C92954 - C92955 + C92956 - C92957) * C139736) *
                          C139983 +
                      ((C101320 - C101321 + C101322 - C101323) * C137755 +
                       (C101324 - C101325 + C101326 - C101327) * C139967 +
                       C114252 * C137748 + C114253 * C139736) *
                          C139873) *
                         C139809 * C2322 +
                     (((C101321 - C101320 + C101323 - C101322) * C137755 +
                       (C101325 - C101324 + C101327 - C101326) * C139967 +
                       C114254 * C137748 + C114255 * C139736) *
                          C139983 +
                      ((C101329 - C101328 + C101331 - C101330) * C137755 +
                       (C101333 - C101332 + C101335 - C101334) * C139967 +
                       (C101336 - C101337 + C101338 - C101339) * C137748 +
                       (C101340 - C101341 + C101342 - C101343) * C139736) *
                          C139873) *
                         C139809 * C140000) *
                        C2324 +
                    ((((C92951 - C92950 + C92953 - C92952) * C137755 +
                       (C92955 - C92954 + C92957 - C92956) * C139967 +
                       (C92959 - C92958 + C92961 - C92960) * C137748 +
                       (C92963 - C92962 + C92965 - C92964) * C139736) *
                          C139983 +
                      (C114254 * C137755 + C114255 * C139967 +
                       (C93797 - C93798 + C93799 - C93800) * C137748 +
                       (C93801 - C93802 + C93803 - C93804) * C139736) *
                          C139873) *
                         C139809 * C2322 +
                     ((C114252 * C137755 + C114253 * C139967 +
                       (C93798 - C93797 + C93800 - C93799) * C137748 +
                       (C93802 - C93801 + C93804 - C93803) * C139736) *
                          C139983 +
                      ((C101337 - C101336 + C101339 - C101338) * C137755 +
                       (C101341 - C101340 + C101343 - C101342) * C139967 +
                       (C92797 * C3034 - C92947 * C2910 + C139899 * C7981 -
                        C92948 * C7755) *
                           C137748 +
                       (C92797 * C3038 - C92947 * C2917 + C139899 * C7984 -
                        C92948 * C7761) *
                           C139736) *
                          C139873) *
                         C139809 * C140000) *
                        C139998)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[93] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C139967 * C114 - C137755 * C108 + C139736 * C116 -
                        C137748 * C109) *
                           C21860 +
                       (C139967 * C354 - C137755 * C348 + C139736 * C355 -
                        C137748 * C349) *
                           C139983 +
                       (C68898 - C68899 + C68900 - C68901) * C21861 +
                       (C68902 - C68903 + C68904 - C68905) * C139873) *
                          C92797 +
                      ((C78013 - C78014 + C78015 - C78016) * C21860 +
                       (C78017 - C78018 + C78019 - C78020) * C139983 +
                       C81299 * C21861 + C81300 * C139873) *
                          C139899) *
                         C139809 * C2322 +
                     (((C68899 - C68898 + C68901 - C68900) * C21860 +
                       (C68903 - C68902 + C68905 - C68904) * C139983 +
                       (C68907 - C68906 + C68909 - C68908) * C21861 +
                       (C68911 - C68910 + C68913 - C68912) * C139873) *
                          C92797 +
                      (C81301 * C21860 + C81302 * C139983 +
                       (C72413 - C72414 + C72415 - C72416) * C21861 +
                       (C72417 - C72418 + C72419 - C72420) * C139873) *
                          C139899) *
                         C139809 * C140000) *
                        C2324 +
                    ((((C137755 * C109 - C139967 * C116 + C137748 * C110 -
                        C139736 * C118) *
                           C21860 +
                       (C137755 * C349 - C139967 * C355 + C137748 * C350 -
                        C139736 * C356) *
                           C139983 +
                       (C68914 - C68915 + C68916 - C68917) * C21861 +
                       (C68918 - C68919 + C68920 - C68921) * C139873) *
                          C92797 +
                      ((C78021 - C78022 + C78023 - C78024) * C21860 +
                       (C78025 - C78026 + C78027 - C78028) * C139983 +
                       (C76773 - C76774 + C76775 - C76776) * C21861 +
                       (C76777 - C76778 + C76779 - C76780) * C139873) *
                          C139899) *
                         C139809 * C2322 +
                     (((C68915 - C68914 + C68917 - C68916) * C21860 +
                       (C68919 - C68918 + C68921 - C68920) * C139983 +
                       (C68923 - C68922 + C68925 - C68924) * C21861 +
                       (C68927 - C68926 + C68929 - C68928) * C139873) *
                          C92797 +
                      ((C76774 - C76773 + C76776 - C76775) * C21860 +
                       (C76778 - C76777 + C76780 - C76779) * C139983 +
                       (C139967 * C7756 - C137755 * C7753 + C139736 * C7760 -
                        C137748 * C7755) *
                           C21861 +
                       (C139967 * C8095 - C137755 * C8092 + C139736 * C8096 -
                        C137748 * C8093) *
                           C139873) *
                          C139899) *
                         C139809 * C140000) *
                        C139998)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[93] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C21860 * C183 - C22116 * C108 - C21860 * C348 + C139983 * C411 +
              C21861 * C896 - C22117 * C813 - C21861 * C1072 +
              C139873 * C1151) *
                 C139967 +
             (C22155 + C22156) * C139736) *
                C92797 +
            ((C39934 + C39935) * C139967 + C39916 * C139736) * C139899) *
               C139809 * C2322 -
           (((C38648 + C38649) * C139736 + (C43261 + C43260) * C139967) *
                C139899 +
            ((C23091 + C23092) * C139736 +
             (C21861 * C2974 - C22117 * C2908 - C21861 * C3090 +
              C139873 * C3148 + C21860 * C896 - C22116 * C813 - C21860 * C1072 +
              C139983 * C1151) *
                 C139967) *
                C92797) *
               C139809 * C140000) *
              C2324 +
          ((((C23092 + C23091) * C139967 + (C23090 + C23089) * C139736) *
                C92797 +
            ((C38649 + C38648) * C139967 +
             (C21860 * C3522 - C22116 * C3440 - C21860 * C3670 +
              C139983 * C3744 + C21861 * C7865 - C22117 * C7755 -
              C21861 * C8093 + C139873 * C8197) *
                 C139736) *
                C139899) *
               C139809 * C140000 -
           (((C24044 + C24045) * C139736 + C39925 * C139967) * C139899 +
            ((C22158 + C22157) * C139736 + (C22156 + C22155) * C139967) *
                C92797) *
               C139809 * C2322) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[93] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C92797 * C266 - C92947 * C108 + C139899 * C1741 -
                        C92948 * C1570) *
                           C21860 +
                       (C92797 * C495 - C92947 * C348 + C139899 * C1997 -
                        C92948 * C1829) *
                           C139983 +
                       (C101320 - C101321 + C101322 - C101323) * C21861 +
                       (C101638 - C101639 + C101640 - C101641) * C139873) *
                          C139967 +
                      ((C92950 - C92951 + C92952 - C92953) * C21860 +
                       (C93202 - C93203 + C93204 - C93205) * C139983 +
                       C114252 * C21861 + C114650 * C139873) *
                          C139736) *
                         C139809 * C2322 +
                     (((C101321 - C101320 + C101323 - C101322) * C21860 +
                       (C101639 - C101638 + C101641 - C101640) * C139983 +
                       (C101329 - C101328 + C101331 - C101330) * C21861 +
                       (C101643 - C101642 + C101645 - C101644) * C139873) *
                          C139967 +
                      (C114254 * C21860 + C114651 * C139983 +
                       (C101336 - C101337 + C101338 - C101339) * C21861 +
                       (C101646 - C101647 + C101648 - C101649) * C139873) *
                          C139736) *
                         C139809 * C140000) *
                        C2324 +
                    ((((C92951 - C92950 + C92953 - C92952) * C21860 +
                       (C93203 - C93202 + C93205 - C93204) * C139983 +
                       C114254 * C21861 + C114651 * C139873) *
                          C139967 +
                      ((C92959 - C92958 + C92961 - C92960) * C21860 +
                       (C93208 - C93207 + C93210 - C93209) * C139983 +
                       (C93797 - C93798 + C93799 - C93800) * C21861 +
                       (C94103 - C94104 + C94105 - C94106) * C139873) *
                          C139736) *
                         C139809 * C2322 +
                     ((C114252 * C21860 + C114650 * C139983 +
                       (C101337 - C101336 + C101339 - C101338) * C21861 +
                       (C101647 - C101646 + C101649 - C101648) * C139873) *
                          C139967 +
                      ((C93798 - C93797 + C93800 - C93799) * C21860 +
                       (C94104 - C94103 + C94106 - C94105) * C139983 +
                       (C92797 * C3034 - C92947 * C2910 + C139899 * C7981 -
                        C92948 * C7755) *
                           C21861 +
                       (C92797 * C3204 - C92947 * C3092 + C139899 * C8319 -
                        C92948 * C8093) *
                           C139873) *
                          C139736) *
                         C139809 * C140000) *
                        C139998)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[93] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C139967 * C114 - C137755 * C108 + C139736 * C116 -
                        C137748 * C109) *
                           C92947 +
                       (C139967 * C573 - C137755 * C567 + C139736 * C574 -
                        C137748 * C568) *
                           C92797 +
                       (C78013 - C78014 + C78015 - C78016) * C92948 +
                       (C78421 - C78422 + C78423 - C78424) * C139899) *
                          C139983 +
                      ((C68898 - C68899 + C68900 - C68901) * C92947 +
                       (C69245 - C69246 + C69247 - C69248) * C92797 +
                       C81299 * C92948 + C81701 * C139899) *
                          C139873) *
                         C139809 * C2322 +
                     (((C68899 - C68898 + C68901 - C68900) * C92947 +
                       (C69246 - C69245 + C69248 - C69247) * C92797 +
                       C81301 * C92948 + C81702 * C139899) *
                          C139983 +
                      ((C68907 - C68906 + C68909 - C68908) * C92947 +
                       (C69250 - C69249 + C69252 - C69251) * C92797 +
                       (C72413 - C72414 + C72415 - C72416) * C92948 +
                       (C72719 - C72720 + C72721 - C72722) * C139899) *
                          C139873) *
                         C139809 * C140000) *
                        C2324 +
                    ((((C137755 * C109 - C139967 * C116 + C137748 * C110 -
                        C139736 * C118) *
                           C92947 +
                       (C137755 * C568 - C139967 * C574 + C137748 * C569 -
                        C139736 * C575) *
                           C92797 +
                       (C78021 - C78022 + C78023 - C78024) * C92948 +
                       (C78425 - C78426 + C78427 - C78428) * C139899) *
                          C139983 +
                      ((C68914 - C68915 + C68916 - C68917) * C92947 +
                       (C69253 - C69254 + C69255 - C69256) * C92797 +
                       (C76773 - C76774 + C76775 - C76776) * C92948 +
                       (C77185 - C77186 + C77187 - C77188) * C139899) *
                          C139873) *
                         C139809 * C2322 +
                     (((C68915 - C68914 + C68917 - C68916) * C92947 +
                       (C69254 - C69253 + C69256 - C69255) * C92797 +
                       (C76774 - C76773 + C76776 - C76775) * C92948 +
                       (C77186 - C77185 + C77188 - C77187) * C139899) *
                          C139983 +
                      ((C68923 - C68922 + C68925 - C68924) * C92947 +
                       (C69258 - C69257 + C69260 - C69259) * C92797 +
                       (C139967 * C7756 - C137755 * C7753 + C139736 * C7760 -
                        C137748 * C7755) *
                           C92948 +
                       (C139967 * C8426 - C137755 * C8423 + C139736 * C8427 -
                        C137748 * C8424) *
                           C139899) *
                          C139873) *
                         C139809 * C140000) *
                        C139998)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[93] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139983 * C183 - C21860 * C108 + C139873 * C896 - C21861 * C813) *
                 C92947 +
             (C139983 * C629 - C21860 * C567 + C139873 * C1393 -
              C21861 * C1317) *
                 C92797 +
             (C39482 - C39483 + C39484 - C39485) * C92948 +
             (C40332 - C40333 + C40334 - C40335) * C139899) *
                C139967 +
            ((C21863 - C21864 + C21865 - C21866) * C92947 +
             (C22392 - C22393 + C22394 - C22395) * C92797 + C39506 * C92948 +
             C40344 * C139899) *
                C139736) *
               C139809 * C2322 +
           (((C21860 * C813 - C139983 * C896 + C21861 * C2908 -
              C139873 * C2974) *
                 C92947 +
             (C21860 * C1317 - C139983 * C1393 + C21861 * C3256 -
              C139873 * C3314) *
                 C92797 +
             (C42830 - C42831 + C42832 - C42833) * C92948 +
             (C43662 - C43663 + C43664 - C43665) * C139899) *
                C139967 +
            ((C22729 - C22730 + C22731 - C22732) * C92947 +
             (C23400 - C23401 + C23402 - C23403) * C92797 +
             (C38202 - C38203 + C38204 - C38205) * C92948 +
             (C39058 - C39059 + C39060 - C39061) * C139899) *
                C139736) *
               C139809 * C140000) *
              C2324 +
          ((((C21864 - C21863 + C21866 - C21865) * C92947 +
             (C22393 - C22392 + C22395 - C22394) * C92797 + C39508 * C92948 +
             C40345 * C139899) *
                C139967 +
            ((C21872 - C21871 + C21874 - C21873) * C92947 +
             (C22398 - C22397 + C22400 - C22399) * C92797 +
             (C23714 - C23715 + C23716 - C23717) * C92948 +
             (C24348 - C24349 + C24350 - C24351) * C139899) *
                C139736) *
               C139809 * C2322 +
           (((C22730 - C22729 + C22732 - C22731) * C92947 +
             (C23401 - C23400 + C23403 - C23402) * C92797 +
             (C38203 - C38202 + C38205 - C38204) * C92948 +
             (C39059 - C39058 + C39061 - C39060) * C139899) *
                C139967 +
            ((C22738 - C22737 + C22740 - C22739) * C92947 +
             (C23405 - C23404 + C23407 - C23406) * C92797 +
             (C139983 * C3522 - C21860 * C3440 + C139873 * C7865 -
              C21861 * C7755) *
                 C92948 +
             (C139983 * C3958 - C21860 * C3884 + C139873 * C8528 -
              C21861 * C8424) *
                 C139899) *
                C139736) *
               C139809 * C140000) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eezz[93] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92947 * C266 - C93448 * C108 - C92947 * C567 + C92797 * C702 +
              C92948 * C1741 - C93449 * C1570 - C92948 * C2074 +
              C139899 * C2230) *
                 C139983 +
             (C101980 + C101981) * C139873) *
                C139967 +
            ((C93487 + C93488) * C139983 + C115042 * C139873) * C139736) *
               C139809 * C2322 -
           (((C101985 + C101984) * C139873 + C115043 * C139983) * C139736 +
            ((C101983 + C101982) * C139873 + (C101981 + C101980) * C139983) *
                C139967) *
               C139809 * C140000) *
              C2324 +
          (((C115042 * C139983 + (C101984 + C101985) * C139873) * C139967 +
            ((C94426 + C94425) * C139983 +
             (C92947 * C3034 - C93448 * C2910 - C92947 * C3258 +
              C92797 * C3370 + C92948 * C7981 - C93449 * C7755 -
              C92948 * C8424 + C139899 * C8635) *
                 C139873) *
                C139736) *
               C139809 * C140000 -
           (((C94425 + C94426) * C139873 + (C93490 + C93489) * C139983) *
                C139736 +
            (C115043 * C139873 + (C93488 + C93487) * C139983) * C139967) *
               C139809 * C2322) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexx[94] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C137755 * C114 - C67752 * C108 - C137755 * C115 + C139967 * C126 +
             C137748 * C116 - C67754 * C109 - C137748 * C117 + C139736 * C127) *
                C92797 +
            (C77607 + C77608) * C139899) *
               C139983 +
           ((C68584 + C68585) * C92797 + C80877 * C139899) * C139873) *
              C139809 * C2904 -
          (((C72107 + C72108) * C139899 + (C68587 + C68586) * C92797) *
               C139873 +
           (C80886 * C139899 + (C68585 + C68584) * C92797) * C139983) *
              C139809 * C2905 +
          ((C71346 * C92797 + (C72108 + C72107) * C139899) * C139983 +
           ((C71361 + C71360) * C92797 +
            (C137755 * C10396 - C67752 * C10394 - C137755 * C10397 +
             C139967 * C10400 + C137748 * C10398 - C67754 * C10395 -
             C137748 * C10399 + C139736 * C10401) *
                C139899) *
               C139873) *
              C139809 * C2906) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eexy[94] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139983 * C183 - C21860 * C108 + C139873 * C896 - C21861 * C813) *
                C137755 +
            (C139983 * C189 - C21860 * C115 + C139873 * C901 - C21861 * C822) *
                C139967 +
            (C21863 - C21864 + C21865 - C21866) * C137748 +
            (C21867 - C21868 + C21869 - C21870) * C139736) *
               C92797 +
           ((C39482 - C39483 + C39484 - C39485) * C137755 +
            (C39486 - C39487 + C39488 - C39489) * C139967 + C39506 * C137748 +
            C39507 * C139736) *
               C139899) *
              C139809 * C2904 +
          (((C21860 * C813 - C139983 * C896 + C21861 * C2908 -
             C139873 * C2974) *
                C137755 +
            (C21860 * C822 - C139983 * C901 + C21861 * C2913 -
             C139873 * C2978) *
                C139967 +
            (C22729 - C22730 + C22731 - C22732) * C137748 +
            (C22733 - C22734 + C22735 - C22736) * C139736) *
               C92797 +
           ((C42830 - C42831 + C42832 - C42833) * C137755 +
            (C42834 - C42835 + C42836 - C42837) * C139967 +
            (C38202 - C38203 + C38204 - C38205) * C137748 +
            (C38206 - C38207 + C38208 - C38209) * C139736) *
               C139899) *
              C139809 * C2905 +
          (((C139983 * C2974 - C21860 * C2908 + C139873 * C6792 -
             C21861 * C6627) *
                C137755 +
            (C139983 * C2978 - C21860 * C2913 + C139873 * C6795 -
             C21861 * C6632) *
                C139967 +
            (C139983 * C2975 - C21860 * C2909 + C139873 * C6793 -
             C21861 * C6626) *
                C137748 +
            (C139983 * C2979 - C21860 * C2915 + C139873 * C6796 -
             C21861 * C6630) *
                C139736) *
               C92797 +
           ((C139983 * C7863 - C21860 * C7754 + C139873 * C10528 -
             C21861 * C10394) *
                C137755 +
            (C139983 * C7866 - C21860 * C7759 + C139873 * C10530 -
             C21861 * C10397) *
                C139967 +
            (C139983 * C7864 - C21860 * C7753 + C139873 * C10529 -
             C21861 * C10395) *
                C137748 +
            (C139983 * C7867 - C21860 * C7757 + C139873 * C10531 -
             C21861 * C10399) *
                C139736) *
               C139899) *
              C139809 * C2906) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eexz[94] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92797 * C266 - C92947 * C108 + C139899 * C1741 - C92948 * C1570) *
                C137755 +
            (C92797 * C272 - C92947 * C115 + C139899 * C1746 - C92948 * C1579) *
                C139967 +
            (C92950 - C92951 + C92952 - C92953) * C137748 +
            (C92954 - C92955 + C92956 - C92957) * C139736) *
               C139983 +
           ((C101320 - C101321 + C101322 - C101323) * C137755 +
            (C101324 - C101325 + C101326 - C101327) * C139967 +
            C114252 * C137748 + C114253 * C139736) *
               C139873) *
              C139809 * C2904 +
          (((C101321 - C101320 + C101323 - C101322) * C137755 +
            (C101325 - C101324 + C101327 - C101326) * C139967 +
            C114254 * C137748 + C114255 * C139736) *
               C139983 +
           ((C101329 - C101328 + C101331 - C101330) * C137755 +
            (C101333 - C101332 + C101335 - C101334) * C139967 +
            (C101336 - C101337 + C101338 - C101339) * C137748 +
            (C101340 - C101341 + C101342 - C101343) * C139736) *
               C139873) *
              C139809 * C2905 +
          ((C104026 * C137755 + C104027 * C139967 +
            (C101337 - C101336 + C101339 - C101338) * C137748 +
            (C101341 - C101340 + C101343 - C101342) * C139736) *
               C139983 +
           ((C104019 - C104018 + C104021 - C104020) * C137755 +
            (C104023 - C104022 + C104025 - C104024) * C139967 +
            (C92797 * C6909 - C92947 * C6626 + C139899 * C10631 -
             C92948 * C10395) *
                C137748 +
            (C92797 * C6912 - C92947 * C6630 + C139899 * C10633 -
             C92948 * C10399) *
                C139736) *
               C139873) *
              C139809 * C2906) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eeyx[94] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C139967 * C114 - C137755 * C108 + C139736 * C116 -
                       C137748 * C109) *
                          C21860 +
                      (C139967 * C354 - C137755 * C348 + C139736 * C355 -
                       C137748 * C349) *
                          C139983 +
                      (C68898 - C68899 + C68900 - C68901) * C21861 +
                      (C68902 - C68903 + C68904 - C68905) * C139873) *
                         C92797 +
                     ((C78013 - C78014 + C78015 - C78016) * C21860 +
                      (C78017 - C78018 + C78019 - C78020) * C139983 +
                      C81299 * C21861 + C81300 * C139873) *
                         C139899) *
                        C139809 * C2904 +
                    (((C68899 - C68898 + C68901 - C68900) * C21860 +
                      (C68903 - C68902 + C68905 - C68904) * C139983 +
                      (C68907 - C68906 + C68909 - C68908) * C21861 +
                      (C68911 - C68910 + C68913 - C68912) * C139873) *
                         C92797 +
                     (C81301 * C21860 + C81302 * C139983 +
                      (C72413 - C72414 + C72415 - C72416) * C21861 +
                      (C72417 - C72418 + C72419 - C72420) * C139873) *
                         C139899) *
                        C139809 * C2905 +
                    ((C71603 * C21860 + C71604 * C139983 +
                      (C71596 - C71595 + C71598 - C71597) * C21861 +
                      (C71600 - C71599 + C71602 - C71601) * C139873) *
                         C92797 +
                     ((C72414 - C72413 + C72416 - C72415) * C21860 +
                      (C72418 - C72417 + C72420 - C72419) * C139983 +
                      (C139967 * C10396 - C137755 * C10394 + C139736 * C10398 -
                       C137748 * C10395) *
                          C21861 +
                      (C139967 * C10742 - C137755 * C10740 + C139736 * C10743 -
                       C137748 * C10741) *
                          C139873) *
                         C139899) *
                        C139809 * C2906) *
                   C139758) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[94] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C21860 * C183 - C22116 * C108 - C21860 * C348 + C139983 * C411 +
             C21861 * C896 - C22117 * C813 - C21861 * C1072 + C139873 * C1151) *
                C139967 +
            (C22155 + C22156) * C139736) *
               C92797 +
           ((C39934 + C39935) * C139967 + C39916 * C139736) * C139899) *
              C139809 * C2904 -
          (((C38648 + C38649) * C139736 + (C43261 + C43260) * C139967) *
               C139899 +
           ((C23091 + C23092) * C139736 +
            (C21861 * C2974 - C22117 * C2908 - C21861 * C3090 +
             C139873 * C3148 + C21860 * C896 - C22116 * C813 - C21860 * C1072 +
             C139983 * C1151) *
                C139967) *
               C92797) *
              C139809 * C2905 +
          (((C21860 * C2974 - C22116 * C2908 - C21860 * C3090 +
             C139983 * C3148 + C21861 * C6792 - C22117 * C6627 -
             C21861 * C7032 + C139873 * C7169) *
                C139967 +
            (C21860 * C2975 - C22116 * C2909 - C21860 * C3091 +
             C139983 * C3149 + C21861 * C6793 - C22117 * C6626 -
             C21861 * C7033 + C139873 * C7168) *
                C139736) *
               C92797 +
           ((C21860 * C7863 - C22116 * C7754 - C21860 * C8091 +
             C139983 * C8196 + C21861 * C10528 - C22117 * C10394 -
             C21861 * C10740 + C139873 * C10858) *
                C139967 +
            (C21860 * C7864 - C22116 * C7753 - C21860 * C8092 +
             C139983 * C8195 + C21861 * C10529 - C22117 * C10395 -
             C21861 * C10741 + C139873 * C10859) *
                C139736) *
               C139899) *
              C139809 * C2906) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eeyz[94] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92797 * C266 - C92947 * C108 + C139899 * C1741 - C92948 * C1570) *
                C21860 +
            (C92797 * C495 - C92947 * C348 + C139899 * C1997 - C92948 * C1829) *
                C139983 +
            (C101320 - C101321 + C101322 - C101323) * C21861 +
            (C101638 - C101639 + C101640 - C101641) * C139873) *
               C139967 +
           ((C92950 - C92951 + C92952 - C92953) * C21860 +
            (C93202 - C93203 + C93204 - C93205) * C139983 + C114252 * C21861 +
            C114650 * C139873) *
               C139736) *
              C139809 * C2904 +
          (((C101321 - C101320 + C101323 - C101322) * C21860 +
            (C101639 - C101638 + C101641 - C101640) * C139983 +
            (C101329 - C101328 + C101331 - C101330) * C21861 +
            (C101643 - C101642 + C101645 - C101644) * C139873) *
               C139967 +
           (C114254 * C21860 + C114651 * C139983 +
            (C101336 - C101337 + C101338 - C101339) * C21861 +
            (C101646 - C101647 + C101648 - C101649) * C139873) *
               C139736) *
              C139809 * C2905 +
          ((C104026 * C21860 + C104259 * C139983 +
            (C104019 - C104018 + C104021 - C104020) * C21861 +
            (C104256 - C104255 + C104258 - C104257) * C139873) *
               C139967 +
           ((C101337 - C101336 + C101339 - C101338) * C21860 +
            (C101647 - C101646 + C101649 - C101648) * C139983 +
            (C92797 * C6909 - C92947 * C6626 + C139899 * C10631 -
             C92948 * C10395) *
                C21861 +
            (C92797 * C7291 - C92947 * C7033 + C139899 * C10959 -
             C92948 * C10741) *
                C139873) *
               C139736) *
              C139809 * C2906) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eezx[94] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C139967 * C114 - C137755 * C108 + C139736 * C116 -
                       C137748 * C109) *
                          C92947 +
                      (C139967 * C573 - C137755 * C567 + C139736 * C574 -
                       C137748 * C568) *
                          C92797 +
                      (C78013 - C78014 + C78015 - C78016) * C92948 +
                      (C78421 - C78422 + C78423 - C78424) * C139899) *
                         C139983 +
                     ((C68898 - C68899 + C68900 - C68901) * C92947 +
                      (C69245 - C69246 + C69247 - C69248) * C92797 +
                      C81299 * C92948 + C81701 * C139899) *
                         C139873) *
                        C139809 * C2904 +
                    (((C68899 - C68898 + C68901 - C68900) * C92947 +
                      (C69246 - C69245 + C69248 - C69247) * C92797 +
                      C81301 * C92948 + C81702 * C139899) *
                         C139983 +
                     ((C68907 - C68906 + C68909 - C68908) * C92947 +
                      (C69250 - C69249 + C69252 - C69251) * C92797 +
                      (C72413 - C72414 + C72415 - C72416) * C92948 +
                      (C72719 - C72720 + C72721 - C72722) * C139899) *
                         C139873) *
                        C139809 * C2905 +
                    ((C71603 * C92947 + C71834 * C92797 +
                      (C72414 - C72413 + C72416 - C72415) * C92948 +
                      (C72720 - C72719 + C72722 - C72721) * C139899) *
                         C139983 +
                     ((C71596 - C71595 + C71598 - C71597) * C92947 +
                      (C71831 - C71830 + C71833 - C71832) * C92797 +
                      (C139967 * C10396 - C137755 * C10394 + C139736 * C10398 -
                       C137748 * C10395) *
                          C92948 +
                      (C139967 * C11064 - C137755 * C11062 + C139736 * C11065 -
                       C137748 * C11063) *
                          C139899) *
                         C139873) *
                        C139809 * C2906) *
                   C139758) /
                  (p * q * std::sqrt(p + q));
    d2eezy[94] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139983 * C183 - C21860 * C108 + C139873 * C896 - C21861 * C813) *
                C92947 +
            (C139983 * C629 - C21860 * C567 + C139873 * C1393 -
             C21861 * C1317) *
                C92797 +
            (C39482 - C39483 + C39484 - C39485) * C92948 +
            (C40332 - C40333 + C40334 - C40335) * C139899) *
               C139967 +
           ((C21863 - C21864 + C21865 - C21866) * C92947 +
            (C22392 - C22393 + C22394 - C22395) * C92797 + C39506 * C92948 +
            C40344 * C139899) *
               C139736) *
              C139809 * C2904 +
          (((C21860 * C813 - C139983 * C896 + C21861 * C2908 -
             C139873 * C2974) *
                C92947 +
            (C21860 * C1317 - C139983 * C1393 + C21861 * C3256 -
             C139873 * C3314) *
                C92797 +
            (C42830 - C42831 + C42832 - C42833) * C92948 +
            (C43662 - C43663 + C43664 - C43665) * C139899) *
               C139967 +
           ((C22729 - C22730 + C22731 - C22732) * C92947 +
            (C23400 - C23401 + C23402 - C23403) * C92797 +
            (C38202 - C38203 + C38204 - C38205) * C92948 +
            (C39058 - C39059 + C39060 - C39061) * C139899) *
               C139736) *
              C139809 * C2905 +
          (((C139983 * C2974 - C21860 * C2908 + C139873 * C6792 -
             C21861 * C6627) *
                C92947 +
            (C139983 * C3314 - C21860 * C3256 + C139873 * C7521 -
             C21861 * C7401) *
                C92797 +
            (C139983 * C7863 - C21860 * C7754 + C139873 * C10528 -
             C21861 * C10394) *
                C92948 +
            (C139983 * C8526 - C21860 * C8422 + C139873 * C11172 -
             C21861 * C11062) *
                C139899) *
               C139967 +
           ((C139983 * C2975 - C21860 * C2909 + C139873 * C6793 -
             C21861 * C6626) *
                C92947 +
            (C139983 * C3315 - C21860 * C3257 + C139873 * C7522 -
             C21861 * C7402) *
                C92797 +
            (C139983 * C7864 - C21860 * C7753 + C139873 * C10529 -
             C21861 * C10395) *
                C92948 +
            (C139983 * C8527 - C21860 * C8423 + C139873 * C11173 -
             C21861 * C11063) *
                C139899) *
               C139736) *
              C139809 * C2906) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eezz[94] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92947 * C266 - C93448 * C108 - C92947 * C567 + C92797 * C702 +
             C92948 * C1741 - C93449 * C1570 - C92948 * C2074 +
             C139899 * C2230) *
                C139983 +
            (C101980 + C101981) * C139873) *
               C139967 +
           ((C93487 + C93488) * C139983 + C115042 * C139873) * C139736) *
              C139809 * C2904 -
          (((C101985 + C101984) * C139873 + C115043 * C139983) * C139736 +
           ((C101983 + C101982) * C139873 + (C101981 + C101980) * C139983) *
               C139967) *
              C139809 * C2905 +
          ((C104489 * C139983 + (C104503 + C104502) * C139873) * C139967 +
           ((C101984 + C101985) * C139983 +
            (C92947 * C6909 - C93448 * C6626 - C92947 * C7402 + C92797 * C7628 +
             C92948 * C10631 - C93449 * C10395 - C92948 * C11063 +
             C139899 * C11273) *
                C139873) *
               C139736) *
              C139809 * C2906) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eexx[95] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C137755 * C114 - C67752 * C108 - C137755 * C115 + C139967 * C126 +
              C137748 * C116 - C67754 * C109 - C137748 * C117 +
              C139736 * C127) *
                 C92797 +
             (C77607 + C77608) * C139899) *
                C139983 +
            ((C68584 + C68585) * C92797 + C80877 * C139899) * C139873) *
               C1565 -
           (((C80891 + C80892) * C139899 + C80886 * C92797) * C139873 +
            ((C84413 + C84414) * C139899 + (C77608 + C77607) * C92797) *
                C139983) *
               C140002) *
              C2322 +
          (((C80877 * C92797 + (C80892 + C80891) * C139899) * C139983 +
            ((C72108 + C72107) * C92797 +
             (C137755 * C13134 - C67752 * C13128 - C137755 * C13135 +
              C139967 * C13140 + C137748 * C13136 - C67754 * C13129 -
              C137748 * C13137 + C139736 * C13141) *
                 C139899) *
                C139873) *
               C140002 -
           (((C72107 + C72108) * C139899 + (C68587 + C68586) * C92797) *
                C139873 +
            (C80886 * C139899 + (C68585 + C68584) * C92797) * C139983) *
               C1565) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eexy[95] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139983 * C183 - C21860 * C108 + C139873 * C896 - C21861 * C813) *
                 C137755 +
             (C139983 * C189 - C21860 * C115 + C139873 * C901 - C21861 * C822) *
                 C139967 +
             (C21863 - C21864 + C21865 - C21866) * C137748 +
             (C21867 - C21868 + C21869 - C21870) * C139736) *
                C92797 +
            ((C39482 - C39483 + C39484 - C39485) * C137755 +
             (C39486 - C39487 + C39488 - C39489) * C139967 + C39506 * C137748 +
             C39507 * C139736) *
                C139899) *
               C1565 +
           (((C39483 - C39482 + C39485 - C39484) * C137755 +
             (C39487 - C39486 + C39489 - C39488) * C139967 + C39508 * C137748 +
             C39509 * C139736) *
                C92797 +
            ((C46346 - C46347 + C46348 - C46349) * C137755 +
             (C46350 - C46351 + C46352 - C46353) * C139967 +
             (C39498 - C39499 + C39500 - C39501) * C137748 +
             (C39502 - C39503 + C39504 - C39505) * C139736) *
                C139899) *
               C140002) *
              C2322 +
          ((((C21860 * C813 - C139983 * C896 + C21861 * C2908 -
              C139873 * C2974) *
                 C137755 +
             (C21860 * C822 - C139983 * C901 + C21861 * C2913 -
              C139873 * C2978) *
                 C139967 +
             (C22729 - C22730 + C22731 - C22732) * C137748 +
             (C22733 - C22734 + C22735 - C22736) * C139736) *
                C92797 +
            ((C42830 - C42831 + C42832 - C42833) * C137755 +
             (C42834 - C42835 + C42836 - C42837) * C139967 +
             (C38202 - C38203 + C38204 - C38205) * C137748 +
             (C38206 - C38207 + C38208 - C38209) * C139736) *
                C139899) *
               C1565 +
           (((C42831 - C42830 + C42833 - C42832) * C137755 +
             (C42835 - C42834 + C42837 - C42836) * C139967 +
             (C38203 - C38202 + C38205 - C38204) * C137748 +
             (C38207 - C38206 + C38209 - C38208) * C139736) *
                C92797 +
            ((C139983 * C13216 - C21860 * C13126 + C139873 * C13217 -
              C21861 * C13128) *
                 C137755 +
             (C139983 * C13220 - C21860 * C13131 + C139873 * C13221 -
              C21861 * C13135) *
                 C139967 +
             (C139983 * C13218 - C21860 * C13127 + C139873 * C13219 -
              C21861 * C13129) *
                 C137748 +
             (C139983 * C13222 - C21860 * C13133 + C139873 * C13223 -
              C21861 * C13137) *
                 C139736) *
                C139899) *
               C140002) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eexz[95] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C92797 * C266 - C92947 * C108 + C139899 * C1741 -
                        C92948 * C1570) *
                           C137755 +
                       (C92797 * C272 - C92947 * C115 + C139899 * C1746 -
                        C92948 * C1579) *
                           C139967 +
                       (C92950 - C92951 + C92952 - C92953) * C137748 +
                       (C92954 - C92955 + C92956 - C92957) * C139736) *
                          C139983 +
                      ((C101320 - C101321 + C101322 - C101323) * C137755 +
                       (C101324 - C101325 + C101326 - C101327) * C139967 +
                       C114252 * C137748 + C114253 * C139736) *
                          C139873) *
                         C1565 +
                     (((C92947 * C1570 - C92797 * C1741 + C92948 * C5273 -
                        C139899 * C5397) *
                           C137755 +
                       (C92947 * C1579 - C92797 * C1746 + C92948 * C5278 -
                        C139899 * C5401) *
                           C139967 +
                       (C94765 - C94766 + C94767 - C94768) * C137748 +
                       (C94769 - C94770 + C94771 - C94772) * C139736) *
                          C139983 +
                      ((C104814 - C104815 + C104816 - C104817) * C137755 +
                       (C104818 - C104819 + C104820 - C104821) * C139967 +
                       (C115434 - C115435 + C115436 - C115437) * C137748 +
                       (C115438 - C115439 + C115440 - C115441) * C139736) *
                          C139873) *
                         C140002) *
                        C2322 +
                    ((((C101321 - C101320 + C101323 - C101322) * C137755 +
                       (C101325 - C101324 + C101327 - C101326) * C139967 +
                       C114254 * C137748 + C114255 * C139736) *
                          C139983 +
                      ((C101329 - C101328 + C101331 - C101330) * C137755 +
                       (C101333 - C101332 + C101335 - C101334) * C139967 +
                       (C101336 - C101337 + C101338 - C101339) * C137748 +
                       (C101340 - C101341 + C101342 - C101343) * C139736) *
                          C139873) *
                         C1565 +
                     (((C104815 - C104814 + C104817 - C104816) * C137755 +
                       (C104819 - C104818 + C104821 - C104820) * C139967 +
                       (C115435 - C115434 + C115437 - C115436) * C137748 +
                       (C115439 - C115438 + C115441 - C115440) * C139736) *
                          C139983 +
                      ((C104823 - C104822 + C104825 - C104824) * C137755 +
                       (C104827 - C104826 + C104829 - C104828) * C139967 +
                       (C92797 * C7980 - C92947 * C7753 + C139899 * C13301 -
                        C92948 * C13129) *
                           C137748 +
                       (C92797 * C7983 - C92947 * C7757 + C139899 * C13305 -
                        C92948 * C13137) *
                           C139736) *
                          C139873) *
                         C140002) *
                        C140000) *
                   C139758) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[95] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C139967 * C114 - C137755 * C108 + C139736 * C116 -
                        C137748 * C109) *
                           C21860 +
                       (C139967 * C354 - C137755 * C348 + C139736 * C355 -
                        C137748 * C349) *
                           C139983 +
                       (C68898 - C68899 + C68900 - C68901) * C21861 +
                       (C68902 - C68903 + C68904 - C68905) * C139873) *
                          C92797 +
                      ((C78013 - C78014 + C78015 - C78016) * C21860 +
                       (C78017 - C78018 + C78019 - C78020) * C139983 +
                       C81299 * C21861 + C81300 * C139873) *
                          C139899) *
                         C1565 +
                     (((C78014 - C78013 + C78016 - C78015) * C21860 +
                       (C78018 - C78017 + C78020 - C78019) * C139983 +
                       C81301 * C21861 + C81302 * C139873) *
                          C92797 +
                      ((C84709 - C84710 + C84711 - C84712) * C21860 +
                       (C84713 - C84714 + C84715 - C84716) * C139983 +
                       (C81291 - C81292 + C81293 - C81294) * C21861 +
                       (C81295 - C81296 + C81297 - C81298) * C139873) *
                          C139899) *
                         C140002) *
                        C2322 +
                    ((((C68899 - C68898 + C68901 - C68900) * C21860 +
                       (C68903 - C68902 + C68905 - C68904) * C139983 +
                       (C68907 - C68906 + C68909 - C68908) * C21861 +
                       (C68911 - C68910 + C68913 - C68912) * C139873) *
                          C92797 +
                      (C81301 * C21860 + C81302 * C139983 +
                       (C72413 - C72414 + C72415 - C72416) * C21861 +
                       (C72417 - C72418 + C72419 - C72420) * C139873) *
                          C139899) *
                         C1565 +
                     ((C81299 * C21860 + C81300 * C139983 +
                       (C72414 - C72413 + C72416 - C72415) * C21861 +
                       (C72418 - C72417 + C72420 - C72419) * C139873) *
                          C92797 +
                      ((C81292 - C81291 + C81294 - C81293) * C21860 +
                       (C81296 - C81295 + C81298 - C81297) * C139983 +
                       (C139967 * C13134 - C137755 * C13128 + C139736 * C13136 -
                        C137748 * C13129) *
                           C21861 +
                       (C139967 * C13386 - C137755 * C13382 + C139736 * C13387 -
                        C137748 * C13383) *
                           C139873) *
                          C139899) *
                         C140002) *
                        C140000) *
                   C139758) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[95] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C21860 * C183 - C22116 * C108 - C21860 * C348 + C139983 * C411 +
              C21861 * C896 - C22117 * C813 - C21861 * C1072 +
              C139873 * C1151) *
                 C139967 +
             (C22155 + C22156) * C139736) *
                C92797 +
            ((C39934 + C39935) * C139967 + C39916 * C139736) * C139899) *
               C1565 -
           (((C39936 + C39937) * C139736 + (C46660 + C46661) * C139967) *
                C139899 +
            (C39925 * C139736 + (C39935 + C39934) * C139967) * C92797) *
               C140002) *
              C2322 +
          ((((C43260 + C43261) * C139967 + (C38649 + C38648) * C139736) *
                C92797 +
            ((C21860 * C13216 - C22116 * C13126 - C21860 * C13380 +
              C139983 * C13462 + C21861 * C13217 - C22117 * C13128 -
              C21861 * C13382 + C139873 * C13463) *
                 C139967 +
             (C21860 * C13218 - C22116 * C13127 - C21860 * C13381 +
              C139983 * C13464 + C21861 * C13219 - C22117 * C13129 -
              C21861 * C13383 + C139873 * C13465) *
                 C139736) *
                C139899) *
               C140002 -
           (((C38648 + C38649) * C139736 + (C43261 + C43260) * C139967) *
                C139899 +
            ((C23091 + C23092) * C139736 +
             (C21861 * C2974 - C22117 * C2908 - C21861 * C3090 +
              C139873 * C3148 + C21860 * C896 - C22116 * C813 - C21860 * C1072 +
              C139983 * C1151) *
                 C139967) *
                C92797) *
               C1565) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eeyz[95] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C92797 * C266 - C92947 * C108 + C139899 * C1741 -
                        C92948 * C1570) *
                           C21860 +
                       (C92797 * C495 - C92947 * C348 + C139899 * C1997 -
                        C92948 * C1829) *
                           C139983 +
                       (C101320 - C101321 + C101322 - C101323) * C21861 +
                       (C101638 - C101639 + C101640 - C101641) * C139873) *
                          C139967 +
                      ((C92950 - C92951 + C92952 - C92953) * C21860 +
                       (C93202 - C93203 + C93204 - C93205) * C139983 +
                       C114252 * C21861 + C114650 * C139873) *
                          C139736) *
                         C1565 +
                     (((C92947 * C1570 - C92797 * C1741 + C92948 * C5273 -
                        C139899 * C5397) *
                           C21860 +
                       (C92947 * C1829 - C92797 * C1997 + C92948 * C5455 -
                        C139899 * C5567) *
                           C139983 +
                       (C104814 - C104815 + C104816 - C104817) * C21861 +
                       (C105145 - C105146 + C105147 - C105148) * C139873) *
                          C139967 +
                      ((C94765 - C94766 + C94767 - C94768) * C21860 +
                       (C95105 - C95106 + C95107 - C95108) * C139983 +
                       (C115434 - C115435 + C115436 - C115437) * C21861 +
                       (C115832 - C115833 + C115834 - C115835) * C139873) *
                          C139736) *
                         C140002) *
                        C2322 +
                    ((((C101321 - C101320 + C101323 - C101322) * C21860 +
                       (C101639 - C101638 + C101641 - C101640) * C139983 +
                       (C101329 - C101328 + C101331 - C101330) * C21861 +
                       (C101643 - C101642 + C101645 - C101644) * C139873) *
                          C139967 +
                      (C114254 * C21860 + C114651 * C139983 +
                       (C101336 - C101337 + C101338 - C101339) * C21861 +
                       (C101646 - C101647 + C101648 - C101649) * C139873) *
                          C139736) *
                         C1565 +
                     (((C104815 - C104814 + C104817 - C104816) * C21860 +
                       (C105146 - C105145 + C105148 - C105147) * C139983 +
                       (C104823 - C104822 + C104825 - C104824) * C21861 +
                       (C105150 - C105149 + C105152 - C105151) * C139873) *
                          C139967 +
                      ((C115435 - C115434 + C115437 - C115436) * C21860 +
                       (C115833 - C115832 + C115835 - C115834) * C139983 +
                       (C92797 * C7980 - C92947 * C7753 + C139899 * C13301 -
                        C92948 * C13129) *
                           C21861 +
                       (C92797 * C8318 - C92947 * C8092 + C139899 * C13543 -
                        C92948 * C13383) *
                           C139873) *
                          C139736) *
                         C140002) *
                        C140000) *
                   C139758) /
                  (p * q * std::sqrt(p + q));
    d2eezx[95] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C139967 * C114 - C137755 * C108 + C139736 * C116 -
                        C137748 * C109) *
                           C92947 +
                       (C139967 * C573 - C137755 * C567 + C139736 * C574 -
                        C137748 * C568) *
                           C92797 +
                       (C78013 - C78014 + C78015 - C78016) * C92948 +
                       (C78421 - C78422 + C78423 - C78424) * C139899) *
                          C139983 +
                      ((C68898 - C68899 + C68900 - C68901) * C92947 +
                       (C69245 - C69246 + C69247 - C69248) * C92797 +
                       C81299 * C92948 + C81701 * C139899) *
                          C139873) *
                         C1565 +
                     (((C78014 - C78013 + C78016 - C78015) * C92947 +
                       (C78422 - C78421 + C78424 - C78423) * C92797 +
                       (C84709 - C84710 + C84711 - C84712) * C92948 +
                       (C85011 - C85012 + C85013 - C85014) * C139899) *
                          C139983 +
                      (C81301 * C92947 + C81702 * C92797 +
                       (C81291 - C81292 + C81293 - C81294) * C92948 +
                       (C81697 - C81698 + C81699 - C81700) * C139899) *
                          C139873) *
                         C140002) *
                        C2322 +
                    ((((C68899 - C68898 + C68901 - C68900) * C92947 +
                       (C69246 - C69245 + C69248 - C69247) * C92797 +
                       C81301 * C92948 + C81702 * C139899) *
                          C139983 +
                      ((C68907 - C68906 + C68909 - C68908) * C92947 +
                       (C69250 - C69249 + C69252 - C69251) * C92797 +
                       (C72413 - C72414 + C72415 - C72416) * C92948 +
                       (C72719 - C72720 + C72721 - C72722) * C139899) *
                          C139873) *
                         C1565 +
                     ((C81299 * C92947 + C81701 * C92797 +
                       (C81292 - C81291 + C81294 - C81293) * C92948 +
                       (C81698 - C81697 + C81700 - C81699) * C139899) *
                          C139983 +
                      ((C72414 - C72413 + C72416 - C72415) * C92947 +
                       (C72720 - C72719 + C72722 - C72721) * C92797 +
                       (C139967 * C13134 - C137755 * C13128 + C139736 * C13136 -
                        C137748 * C13129) *
                           C92948 +
                       (C139967 * C13624 - C137755 * C13620 + C139736 * C13625 -
                        C137748 * C13621) *
                           C139899) *
                          C139873) *
                         C140002) *
                        C140000) *
                   C139758) /
                  (p * q * std::sqrt(p + q));
    d2eezy[95] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139983 * C183 - C21860 * C108 + C139873 * C896 - C21861 * C813) *
                 C92947 +
             (C139983 * C629 - C21860 * C567 + C139873 * C1393 -
              C21861 * C1317) *
                 C92797 +
             (C39482 - C39483 + C39484 - C39485) * C92948 +
             (C40332 - C40333 + C40334 - C40335) * C139899) *
                C139967 +
            ((C21863 - C21864 + C21865 - C21866) * C92947 +
             (C22392 - C22393 + C22394 - C22395) * C92797 + C39506 * C92948 +
             C40344 * C139899) *
                C139736) *
               C1565 +
           (((C39483 - C39482 + C39485 - C39484) * C92947 +
             (C40333 - C40332 + C40335 - C40334) * C92797 +
             (C46346 - C46347 + C46348 - C46349) * C92948 +
             (C46956 - C46957 + C46958 - C46959) * C139899) *
                C139967 +
            (C39508 * C92947 + C40345 * C92797 +
             (C39498 - C39499 + C39500 - C39501) * C92948 +
             (C40340 - C40341 + C40342 - C40343) * C139899) *
                C139736) *
               C140002) *
              C2322 +
          ((((C21860 * C813 - C139983 * C896 + C21861 * C2908 -
              C139873 * C2974) *
                 C92947 +
             (C21860 * C1317 - C139983 * C1393 + C21861 * C3256 -
              C139873 * C3314) *
                 C92797 +
             (C42830 - C42831 + C42832 - C42833) * C92948 +
             (C43662 - C43663 + C43664 - C43665) * C139899) *
                C139967 +
            ((C22729 - C22730 + C22731 - C22732) * C92947 +
             (C23400 - C23401 + C23402 - C23403) * C92797 +
             (C38202 - C38203 + C38204 - C38205) * C92948 +
             (C39058 - C39059 + C39060 - C39061) * C139899) *
                C139736) *
               C1565 +
           (((C42831 - C42830 + C42833 - C42832) * C92947 +
             (C43663 - C43662 + C43665 - C43664) * C92797 +
             (C139983 * C13216 - C21860 * C13126 + C139873 * C13217 -
              C21861 * C13128) *
                 C92948 +
             (C139983 * C13700 - C21860 * C13618 + C139873 * C13701 -
              C21861 * C13620) *
                 C139899) *
                C139967 +
            ((C38203 - C38202 + C38205 - C38204) * C92947 +
             (C39059 - C39058 + C39061 - C39060) * C92797 +
             (C139983 * C13218 - C21860 * C13127 + C139873 * C13219 -
              C21861 * C13129) *
                 C92948 +
             (C139983 * C13702 - C21860 * C13619 + C139873 * C13703 -
              C21861 * C13621) *
                 C139899) *
                C139736) *
               C140002) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eezz[95] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92947 * C266 - C93448 * C108 - C92947 * C567 + C92797 * C702 +
              C92948 * C1741 - C93449 * C1570 - C92948 * C2074 +
              C139899 * C2230) *
                 C139983 +
             (C101980 + C101981) * C139873) *
                C139967 +
            ((C93487 + C93488) * C139983 + C115042 * C139873) * C139736) *
               C1565 -
           (((C116238 + C116239) * C139873 + (C95445 + C95446) * C139983) *
                C139736 +
            ((C105479 + C105480) * C139873 +
             (C92948 * C5397 - C93449 * C5273 - C92948 * C5621 +
              C139899 * C5733 + C92947 * C1741 - C93448 * C1570 -
              C92947 * C2074 + C92797 * C2230) *
                 C139983) *
                C139967) *
               C140002) *
              C2322 +
          ((((C105480 + C105479) * C139983 + (C105478 + C105477) * C139873) *
                C139967 +
            ((C116239 + C116238) * C139983 +
             (C92947 * C7980 - C93448 * C7753 - C92947 * C8423 +
              C92797 * C8633 + C92948 * C13301 - C93449 * C13129 -
              C92948 * C13621 + C139899 * C13781) *
                 C139873) *
                C139736) *
               C140002 -
           (((C101985 + C101984) * C139873 + C115043 * C139983) * C139736 +
            ((C101983 + C101982) * C139873 + (C101981 + C101980) * C139983) *
                C139967) *
               C1565) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eexx[96] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C137755 * C114 - C67752 * C108 - C137755 * C115 + C139967 * C126 +
              C137748 * C116 - C67754 * C109 - C137748 * C117 +
              C139736 * C127) *
                 C92797 +
             (C77607 + C77608) * C139899) *
                C139983 +
            ((C68584 + C68585) * C92797 + C80877 * C139899) * C139873) *
               C4096 -
           (((C80891 + C80892) * C139899 + C80886 * C92797) * C139873 +
            ((C84413 + C84414) * C139899 + (C77608 + C77607) * C92797) *
                C139983) *
               C140002) *
              C139792 * C2324 +
          ((((C77609 + C77610) * C92797 +
             (C137755 * C5279 - C67752 * C5274 - C137755 * C5280 +
              C139967 * C5286 + C137748 * C5281 - C67754 * C5275 -
              C137748 * C5282 + C139736 * C5287) *
                 C139899) *
                C139983 +
            ((C76373 + C76374) * C92797 +
             (C137755 * C13132 - C67752 * C13127 - C137755 * C13133 +
              C139967 * C13139 + C137748 * C14660 - C67754 * C14659 -
              C137748 * C14661 + C139736 * C14662) *
                 C139899) *
                C139873) *
               C140002 -
           (((C76374 + C76373) * C139899 + (C68589 + C68588) * C92797) *
                C139873 +
            ((C77610 + C77609) * C139899 +
             (C137748 * C118 - C67754 * C110 - C137748 * C119 + C139736 * C128 +
              C137755 * C116 - C67752 * C109 - C137755 * C117 +
              C139967 * C127) *
                 C92797) *
                C139983) *
               C4096) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexy[96] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139983 * C183 - C21860 * C108 + C139873 * C896 - C21861 * C813) *
                 C137755 +
             (C139983 * C189 - C21860 * C115 + C139873 * C901 - C21861 * C822) *
                 C139967 +
             (C21863 - C21864 + C21865 - C21866) * C137748 +
             (C21867 - C21868 + C21869 - C21870) * C139736) *
                C92797 +
            ((C39482 - C39483 + C39484 - C39485) * C137755 +
             (C39486 - C39487 + C39488 - C39489) * C139967 + C39506 * C137748 +
             C39507 * C139736) *
                C139899) *
               C4096 +
           (((C39483 - C39482 + C39485 - C39484) * C137755 +
             (C39487 - C39486 + C39489 - C39488) * C139967 + C39508 * C137748 +
             C39509 * C139736) *
                C92797 +
            ((C46346 - C46347 + C46348 - C46349) * C137755 +
             (C46350 - C46351 + C46352 - C46353) * C139967 +
             (C39498 - C39499 + C39500 - C39501) * C137748 +
             (C39502 - C39503 + C39504 - C39505) * C139736) *
                C139899) *
               C140002) *
              C139792 * C2324 +
          ((((C21864 - C21863 + C21866 - C21865) * C137755 +
             (C21868 - C21867 + C21870 - C21869) * C139967 +
             (C21872 - C21871 + C21874 - C21873) * C137748 +
             (C21876 - C21875 + C21878 - C21877) * C139736) *
                C92797 +
            (C39508 * C137755 + C39509 * C139967 +
             (C23714 - C23715 + C23716 - C23717) * C137748 +
             (C23718 - C23719 + C23720 - C23721) * C139736) *
                C139899) *
               C4096 +
           ((C39506 * C137755 + C39507 * C139967 +
             (C23715 - C23714 + C23717 - C23716) * C137748 +
             (C23719 - C23718 + C23721 - C23720) * C139736) *
                C92797 +
            ((C39499 - C39498 + C39501 - C39500) * C137755 +
             (C39503 - C39502 + C39505 - C39504) * C139967 +
             (C139983 * C5341 - C21860 * C5275 + C139873 * C14761 -
              C21861 * C14659) *
                 C137748 +
             (C139983 * C5345 - C21860 * C5282 + C139873 * C14762 -
              C21861 * C14661) *
                 C139736) *
                C139899) *
               C140002) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexz[96] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C92797 * C266 - C92947 * C108 + C139899 * C1741 -
                        C92948 * C1570) *
                           C137755 +
                       (C92797 * C272 - C92947 * C115 + C139899 * C1746 -
                        C92948 * C1579) *
                           C139967 +
                       (C92950 - C92951 + C92952 - C92953) * C137748 +
                       (C92954 - C92955 + C92956 - C92957) * C139736) *
                          C139983 +
                      ((C101320 - C101321 + C101322 - C101323) * C137755 +
                       (C101324 - C101325 + C101326 - C101327) * C139967 +
                       C114252 * C137748 + C114253 * C139736) *
                          C139873) *
                         C4096 +
                     (((C92947 * C1570 - C92797 * C1741 + C92948 * C5273 -
                        C139899 * C5397) *
                           C137755 +
                       (C92947 * C1579 - C92797 * C1746 + C92948 * C5278 -
                        C139899 * C5401) *
                           C139967 +
                       (C94765 - C94766 + C94767 - C94768) * C137748 +
                       (C94769 - C94770 + C94771 - C94772) * C139736) *
                          C139983 +
                      ((C104814 - C104815 + C104816 - C104817) * C137755 +
                       (C104818 - C104819 + C104820 - C104821) * C139967 +
                       (C115434 - C115435 + C115436 - C115437) * C137748 +
                       (C115438 - C115439 + C115440 - C115441) * C139736) *
                          C139873) *
                         C140002) *
                        C139792 * C2324 +
                    ((((C92951 - C92950 + C92953 - C92952) * C137755 +
                       (C92955 - C92954 + C92957 - C92956) * C139967 +
                       (C92959 - C92958 + C92961 - C92960) * C137748 +
                       (C92963 - C92962 + C92965 - C92964) * C139736) *
                          C139983 +
                      (C114254 * C137755 + C114255 * C139967 +
                       (C93797 - C93798 + C93799 - C93800) * C137748 +
                       (C93801 - C93802 + C93803 - C93804) * C139736) *
                          C139873) *
                         C4096 +
                     (((C94766 - C94765 + C94768 - C94767) * C137755 +
                       (C94770 - C94769 + C94772 - C94771) * C139967 +
                       (C94774 - C94773 + C94776 - C94775) * C137748 +
                       (C94778 - C94777 + C94780 - C94779) * C139736) *
                          C139983 +
                      ((C115435 - C115434 + C115437 - C115436) * C137755 +
                       (C115439 - C115438 + C115441 - C115440) * C139967 +
                       (C92797 * C3596 - C92947 * C3440 + C139899 * C14869 -
                        C92948 * C14659) *
                           C137748 +
                       (C92797 * C3600 - C92947 * C3447 + C139899 * C14870 -
                        C92948 * C14661) *
                           C139736) *
                          C139873) *
                         C140002) *
                        C139792 * C139998)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[96] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C139967 * C114 - C137755 * C108 + C139736 * C116 -
                        C137748 * C109) *
                           C21860 +
                       (C139967 * C354 - C137755 * C348 + C139736 * C355 -
                        C137748 * C349) *
                           C139983 +
                       (C68898 - C68899 + C68900 - C68901) * C21861 +
                       (C68902 - C68903 + C68904 - C68905) * C139873) *
                          C92797 +
                      ((C78013 - C78014 + C78015 - C78016) * C21860 +
                       (C78017 - C78018 + C78019 - C78020) * C139983 +
                       C81299 * C21861 + C81300 * C139873) *
                          C139899) *
                         C4096 +
                     (((C78014 - C78013 + C78016 - C78015) * C21860 +
                       (C78018 - C78017 + C78020 - C78019) * C139983 +
                       C81301 * C21861 + C81302 * C139873) *
                          C92797 +
                      ((C84709 - C84710 + C84711 - C84712) * C21860 +
                       (C84713 - C84714 + C84715 - C84716) * C139983 +
                       (C81291 - C81292 + C81293 - C81294) * C21861 +
                       (C81295 - C81296 + C81297 - C81298) * C139873) *
                          C139899) *
                         C140002) *
                        C139792 * C2324 +
                    ((((C137755 * C109 - C139967 * C116 + C137748 * C110 -
                        C139736 * C118) *
                           C21860 +
                       (C137755 * C349 - C139967 * C355 + C137748 * C350 -
                        C139736 * C356) *
                           C139983 +
                       (C68914 - C68915 + C68916 - C68917) * C21861 +
                       (C68918 - C68919 + C68920 - C68921) * C139873) *
                          C92797 +
                      ((C78021 - C78022 + C78023 - C78024) * C21860 +
                       (C78025 - C78026 + C78027 - C78028) * C139983 +
                       (C76773 - C76774 + C76775 - C76776) * C21861 +
                       (C76777 - C76778 + C76779 - C76780) * C139873) *
                          C139899) *
                         C4096 +
                     (((C78022 - C78021 + C78024 - C78023) * C21860 +
                       (C78026 - C78025 + C78028 - C78027) * C139983 +
                       (C76774 - C76773 + C76776 - C76775) * C21861 +
                       (C76778 - C76777 + C76780 - C76779) * C139873) *
                          C92797 +
                      ((C139967 * C5279 - C137755 * C5274 + C139736 * C5281 -
                        C137748 * C5275) *
                           C21860 +
                       (C139967 * C5460 - C137755 * C5456 + C139736 * C5461 -
                        C137748 * C5457) *
                           C139983 +
                       (C139967 * C13132 - C137755 * C13127 + C139736 * C14660 -
                        C137748 * C14659) *
                           C21861 +
                       (C139967 * C13385 - C137755 * C13381 + C139736 * C14982 -
                        C137748 * C14981) *
                           C139873) *
                          C139899) *
                         C140002) *
                        C139792 * C139998)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[96] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C21860 * C183 - C22116 * C108 - C21860 * C348 + C139983 * C411 +
              C21861 * C896 - C22117 * C813 - C21861 * C1072 +
              C139873 * C1151) *
                 C139967 +
             (C22155 + C22156) * C139736) *
                C92797 +
            ((C39934 + C39935) * C139967 + C39916 * C139736) * C139899) *
               C4096 -
           (((C39936 + C39937) * C139736 + (C46660 + C46661) * C139967) *
                C139899 +
            (C39925 * C139736 + (C39935 + C39934) * C139967) * C92797) *
               C140002) *
              C139792 * C2324 +
          (((C39916 * C139967 + (C24045 + C24044) * C139736) * C92797 +
            ((C39937 + C39936) * C139967 +
             (C21860 * C5341 - C22116 * C5275 - C21860 * C5457 +
              C139983 * C5515 + C21861 * C14761 - C22117 * C14659 -
              C21861 * C14981 + C139873 * C15081) *
                 C139736) *
                C139899) *
               C140002 -
           (((C24044 + C24045) * C139736 + C39925 * C139967) * C139899 +
            ((C22158 + C22157) * C139736 + (C22156 + C22155) * C139967) *
                C92797) *
               C4096) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[96] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C92797 * C266 - C92947 * C108 + C139899 * C1741 -
                        C92948 * C1570) *
                           C21860 +
                       (C92797 * C495 - C92947 * C348 + C139899 * C1997 -
                        C92948 * C1829) *
                           C139983 +
                       (C101320 - C101321 + C101322 - C101323) * C21861 +
                       (C101638 - C101639 + C101640 - C101641) * C139873) *
                          C139967 +
                      ((C92950 - C92951 + C92952 - C92953) * C21860 +
                       (C93202 - C93203 + C93204 - C93205) * C139983 +
                       C114252 * C21861 + C114650 * C139873) *
                          C139736) *
                         C4096 +
                     (((C92947 * C1570 - C92797 * C1741 + C92948 * C5273 -
                        C139899 * C5397) *
                           C21860 +
                       (C92947 * C1829 - C92797 * C1997 + C92948 * C5455 -
                        C139899 * C5567) *
                           C139983 +
                       (C104814 - C104815 + C104816 - C104817) * C21861 +
                       (C105145 - C105146 + C105147 - C105148) * C139873) *
                          C139967 +
                      ((C94765 - C94766 + C94767 - C94768) * C21860 +
                       (C95105 - C95106 + C95107 - C95108) * C139983 +
                       (C115434 - C115435 + C115436 - C115437) * C21861 +
                       (C115832 - C115833 + C115834 - C115835) * C139873) *
                          C139736) *
                         C140002) *
                        C139792 * C2324 +
                    ((((C92951 - C92950 + C92953 - C92952) * C21860 +
                       (C93203 - C93202 + C93205 - C93204) * C139983 +
                       C114254 * C21861 + C114651 * C139873) *
                          C139967 +
                      ((C92959 - C92958 + C92961 - C92960) * C21860 +
                       (C93208 - C93207 + C93210 - C93209) * C139983 +
                       (C93797 - C93798 + C93799 - C93800) * C21861 +
                       (C94103 - C94104 + C94105 - C94106) * C139873) *
                          C139736) *
                         C4096 +
                     (((C94766 - C94765 + C94768 - C94767) * C21860 +
                       (C95106 - C95105 + C95108 - C95107) * C139983 +
                       (C115435 - C115434 + C115437 - C115436) * C21861 +
                       (C115833 - C115832 + C115835 - C115834) * C139873) *
                          C139967 +
                      ((C94774 - C94773 + C94776 - C94775) * C21860 +
                       (C95110 - C95109 + C95112 - C95111) * C139983 +
                       (C92797 * C3596 - C92947 * C3440 + C139899 * C14869 -
                        C92948 * C14659) *
                           C21861 +
                       (C92797 * C3814 - C92947 * C3670 + C139899 * C15194 -
                        C92948 * C14981) *
                           C139873) *
                          C139736) *
                         C140002) *
                        C139792 * C139998)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[96] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C139967 * C114 - C137755 * C108 + C139736 * C116 -
                        C137748 * C109) *
                           C92947 +
                       (C139967 * C573 - C137755 * C567 + C139736 * C574 -
                        C137748 * C568) *
                           C92797 +
                       (C78013 - C78014 + C78015 - C78016) * C92948 +
                       (C78421 - C78422 + C78423 - C78424) * C139899) *
                          C139983 +
                      ((C68898 - C68899 + C68900 - C68901) * C92947 +
                       (C69245 - C69246 + C69247 - C69248) * C92797 +
                       C81299 * C92948 + C81701 * C139899) *
                          C139873) *
                         C4096 +
                     (((C78014 - C78013 + C78016 - C78015) * C92947 +
                       (C78422 - C78421 + C78424 - C78423) * C92797 +
                       (C84709 - C84710 + C84711 - C84712) * C92948 +
                       (C85011 - C85012 + C85013 - C85014) * C139899) *
                          C139983 +
                      (C81301 * C92947 + C81702 * C92797 +
                       (C81291 - C81292 + C81293 - C81294) * C92948 +
                       (C81697 - C81698 + C81699 - C81700) * C139899) *
                          C139873) *
                         C140002) *
                        C139792 * C2324 +
                    ((((C137755 * C109 - C139967 * C116 + C137748 * C110 -
                        C139736 * C118) *
                           C92947 +
                       (C137755 * C568 - C139967 * C574 + C137748 * C569 -
                        C139736 * C575) *
                           C92797 +
                       (C78021 - C78022 + C78023 - C78024) * C92948 +
                       (C78425 - C78426 + C78427 - C78428) * C139899) *
                          C139983 +
                      ((C68914 - C68915 + C68916 - C68917) * C92947 +
                       (C69253 - C69254 + C69255 - C69256) * C92797 +
                       (C76773 - C76774 + C76775 - C76776) * C92948 +
                       (C77185 - C77186 + C77187 - C77188) * C139899) *
                          C139873) *
                         C4096 +
                     (((C78022 - C78021 + C78024 - C78023) * C92947 +
                       (C78426 - C78425 + C78428 - C78427) * C92797 +
                       (C139967 * C5279 - C137755 * C5274 + C139736 * C5281 -
                        C137748 * C5275) *
                           C92948 +
                       (C139967 * C5626 - C137755 * C5622 + C139736 * C5627 -
                        C137748 * C5623) *
                           C139899) *
                          C139983 +
                      ((C76774 - C76773 + C76776 - C76775) * C92947 +
                       (C77186 - C77185 + C77188 - C77187) * C92797 +
                       (C139967 * C13132 - C137755 * C13127 + C139736 * C14660 -
                        C137748 * C14659) *
                           C92948 +
                       (C139967 * C13623 - C137755 * C13619 + C139736 * C15300 -
                        C137748 * C15299) *
                           C139899) *
                          C139873) *
                         C140002) *
                        C139792 * C139998)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[96] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139983 * C183 - C21860 * C108 + C139873 * C896 - C21861 * C813) *
                 C92947 +
             (C139983 * C629 - C21860 * C567 + C139873 * C1393 -
              C21861 * C1317) *
                 C92797 +
             (C39482 - C39483 + C39484 - C39485) * C92948 +
             (C40332 - C40333 + C40334 - C40335) * C139899) *
                C139967 +
            ((C21863 - C21864 + C21865 - C21866) * C92947 +
             (C22392 - C22393 + C22394 - C22395) * C92797 + C39506 * C92948 +
             C40344 * C139899) *
                C139736) *
               C4096 +
           (((C39483 - C39482 + C39485 - C39484) * C92947 +
             (C40333 - C40332 + C40335 - C40334) * C92797 +
             (C46346 - C46347 + C46348 - C46349) * C92948 +
             (C46956 - C46957 + C46958 - C46959) * C139899) *
                C139967 +
            (C39508 * C92947 + C40345 * C92797 +
             (C39498 - C39499 + C39500 - C39501) * C92948 +
             (C40340 - C40341 + C40342 - C40343) * C139899) *
                C139736) *
               C140002) *
              C139792 * C2324 +
          ((((C21864 - C21863 + C21866 - C21865) * C92947 +
             (C22393 - C22392 + C22395 - C22394) * C92797 + C39508 * C92948 +
             C40345 * C139899) *
                C139967 +
            ((C21872 - C21871 + C21874 - C21873) * C92947 +
             (C22398 - C22397 + C22400 - C22399) * C92797 +
             (C23714 - C23715 + C23716 - C23717) * C92948 +
             (C24348 - C24349 + C24350 - C24351) * C139899) *
                C139736) *
               C4096 +
           ((C39506 * C92947 + C40344 * C92797 +
             (C39499 - C39498 + C39501 - C39500) * C92948 +
             (C40341 - C40340 + C40343 - C40342) * C139899) *
                C139967 +
            ((C23715 - C23714 + C23717 - C23716) * C92947 +
             (C24349 - C24348 + C24351 - C24350) * C92797 +
             (C139983 * C5341 - C21860 * C5275 + C139873 * C14761 -
              C21861 * C14659) *
                 C92948 +
             (C139983 * C5681 - C21860 * C5623 + C139873 * C15399 -
              C21861 * C15299) *
                 C139899) *
                C139736) *
               C140002) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eezz[96] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92947 * C266 - C93448 * C108 - C92947 * C567 + C92797 * C702 +
              C92948 * C1741 - C93449 * C1570 - C92948 * C2074 +
              C139899 * C2230) *
                 C139983 +
             (C101980 + C101981) * C139873) *
                C139967 +
            ((C93487 + C93488) * C139983 + C115042 * C139873) * C139736) *
               C4096 -
           (((C116238 + C116239) * C139873 + (C95445 + C95446) * C139983) *
                C139736 +
            ((C105479 + C105480) * C139873 +
             (C92948 * C5397 - C93449 * C5273 - C92948 * C5621 +
              C139899 * C5733 + C92947 * C1741 - C93448 * C1570 -
              C92947 * C2074 + C92797 * C2230) *
                 C139983) *
                C139967) *
               C140002) *
              C139792 * C2324 +
          ((((C95446 + C95445) * C139983 + (C116239 + C116238) * C139873) *
                C139967 +
            ((C95444 + C95443) * C139983 +
             (C92947 * C3596 - C93448 * C3440 - C92947 * C3884 +
              C92797 * C4028 + C92948 * C14869 - C93449 * C14659 -
              C92948 * C15299 + C139899 * C15502) *
                 C139873) *
                C139736) *
               C140002 -
           (((C94425 + C94426) * C139873 + (C93490 + C93489) * C139983) *
                C139736 +
            (C115043 * C139873 + (C93488 + C93487) * C139983) * C139967) *
               C4096) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexx[97] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C137755 * C114 - C67752 * C108 - C137755 * C115 + C139967 * C126 +
              C137748 * C116 - C67754 * C109 - C137748 * C117 +
              C139736 * C127) *
                 C92797 +
             (C77607 + C77608) * C139899) *
                C139983 +
            ((C68584 + C68585) * C92797 + C80877 * C139899) * C139873) *
               C4096 -
           (((C80891 + C80892) * C139899 + C80886 * C92797) * C139873 +
            ((C84413 + C84414) * C139899 + (C77608 + C77607) * C92797) *
                C139983) *
               C140002) *
              C806 +
          (((C80877 * C92797 + (C80892 + C80891) * C139899) * C139983 +
            ((C72108 + C72107) * C92797 +
             (C137755 * C13134 - C67752 * C13128 - C137755 * C13135 +
              C139967 * C13140 + C137748 * C13136 - C67754 * C13129 -
              C137748 * C13137 + C139736 * C13141) *
                 C139899) *
                C139873) *
               C140002 -
           (((C72107 + C72108) * C139899 + (C68587 + C68586) * C92797) *
                C139873 +
            (C80886 * C139899 + (C68585 + C68584) * C92797) * C139983) *
               C4096) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eexy[97] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139983 * C183 - C21860 * C108 + C139873 * C896 - C21861 * C813) *
                 C137755 +
             (C139983 * C189 - C21860 * C115 + C139873 * C901 - C21861 * C822) *
                 C139967 +
             (C21863 - C21864 + C21865 - C21866) * C137748 +
             (C21867 - C21868 + C21869 - C21870) * C139736) *
                C92797 +
            ((C39482 - C39483 + C39484 - C39485) * C137755 +
             (C39486 - C39487 + C39488 - C39489) * C139967 + C39506 * C137748 +
             C39507 * C139736) *
                C139899) *
               C4096 +
           (((C39483 - C39482 + C39485 - C39484) * C137755 +
             (C39487 - C39486 + C39489 - C39488) * C139967 + C39508 * C137748 +
             C39509 * C139736) *
                C92797 +
            ((C46346 - C46347 + C46348 - C46349) * C137755 +
             (C46350 - C46351 + C46352 - C46353) * C139967 +
             (C39498 - C39499 + C39500 - C39501) * C137748 +
             (C39502 - C39503 + C39504 - C39505) * C139736) *
                C139899) *
               C140002) *
              C806 +
          ((((C21860 * C813 - C139983 * C896 + C21861 * C2908 -
              C139873 * C2974) *
                 C137755 +
             (C21860 * C822 - C139983 * C901 + C21861 * C2913 -
              C139873 * C2978) *
                 C139967 +
             (C22729 - C22730 + C22731 - C22732) * C137748 +
             (C22733 - C22734 + C22735 - C22736) * C139736) *
                C92797 +
            ((C42830 - C42831 + C42832 - C42833) * C137755 +
             (C42834 - C42835 + C42836 - C42837) * C139967 +
             (C38202 - C38203 + C38204 - C38205) * C137748 +
             (C38206 - C38207 + C38208 - C38209) * C139736) *
                C139899) *
               C4096 +
           (((C42831 - C42830 + C42833 - C42832) * C137755 +
             (C42835 - C42834 + C42837 - C42836) * C139967 +
             (C38203 - C38202 + C38205 - C38204) * C137748 +
             (C38207 - C38206 + C38209 - C38208) * C139736) *
                C92797 +
            ((C139983 * C13216 - C21860 * C13126 + C139873 * C13217 -
              C21861 * C13128) *
                 C137755 +
             (C139983 * C13220 - C21860 * C13131 + C139873 * C13221 -
              C21861 * C13135) *
                 C139967 +
             (C139983 * C13218 - C21860 * C13127 + C139873 * C13219 -
              C21861 * C13129) *
                 C137748 +
             (C139983 * C13222 - C21860 * C13133 + C139873 * C13223 -
              C21861 * C13137) *
                 C139736) *
                C139899) *
               C140002) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eexz[97] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C92797 * C266 - C92947 * C108 + C139899 * C1741 -
                        C92948 * C1570) *
                           C137755 +
                       (C92797 * C272 - C92947 * C115 + C139899 * C1746 -
                        C92948 * C1579) *
                           C139967 +
                       (C92950 - C92951 + C92952 - C92953) * C137748 +
                       (C92954 - C92955 + C92956 - C92957) * C139736) *
                          C139983 +
                      ((C101320 - C101321 + C101322 - C101323) * C137755 +
                       (C101324 - C101325 + C101326 - C101327) * C139967 +
                       C114252 * C137748 + C114253 * C139736) *
                          C139873) *
                         C4096 +
                     (((C92947 * C1570 - C92797 * C1741 + C92948 * C5273 -
                        C139899 * C5397) *
                           C137755 +
                       (C92947 * C1579 - C92797 * C1746 + C92948 * C5278 -
                        C139899 * C5401) *
                           C139967 +
                       (C94765 - C94766 + C94767 - C94768) * C137748 +
                       (C94769 - C94770 + C94771 - C94772) * C139736) *
                          C139983 +
                      ((C104814 - C104815 + C104816 - C104817) * C137755 +
                       (C104818 - C104819 + C104820 - C104821) * C139967 +
                       (C115434 - C115435 + C115436 - C115437) * C137748 +
                       (C115438 - C115439 + C115440 - C115441) * C139736) *
                          C139873) *
                         C140002) *
                        C806 +
                    ((((C101321 - C101320 + C101323 - C101322) * C137755 +
                       (C101325 - C101324 + C101327 - C101326) * C139967 +
                       C114254 * C137748 + C114255 * C139736) *
                          C139983 +
                      ((C101329 - C101328 + C101331 - C101330) * C137755 +
                       (C101333 - C101332 + C101335 - C101334) * C139967 +
                       (C101336 - C101337 + C101338 - C101339) * C137748 +
                       (C101340 - C101341 + C101342 - C101343) * C139736) *
                          C139873) *
                         C4096 +
                     (((C104815 - C104814 + C104817 - C104816) * C137755 +
                       (C104819 - C104818 + C104821 - C104820) * C139967 +
                       (C115435 - C115434 + C115437 - C115436) * C137748 +
                       (C115439 - C115438 + C115441 - C115440) * C139736) *
                          C139983 +
                      ((C104823 - C104822 + C104825 - C104824) * C137755 +
                       (C104827 - C104826 + C104829 - C104828) * C139967 +
                       (C92797 * C7980 - C92947 * C7753 + C139899 * C13301 -
                        C92948 * C13129) *
                           C137748 +
                       (C92797 * C7983 - C92947 * C7757 + C139899 * C13305 -
                        C92948 * C13137) *
                           C139736) *
                          C139873) *
                         C140002) *
                        C140000) *
                   C139758) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[97] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C139967 * C114 - C137755 * C108 + C139736 * C116 -
                        C137748 * C109) *
                           C21860 +
                       (C139967 * C354 - C137755 * C348 + C139736 * C355 -
                        C137748 * C349) *
                           C139983 +
                       (C68898 - C68899 + C68900 - C68901) * C21861 +
                       (C68902 - C68903 + C68904 - C68905) * C139873) *
                          C92797 +
                      ((C78013 - C78014 + C78015 - C78016) * C21860 +
                       (C78017 - C78018 + C78019 - C78020) * C139983 +
                       C81299 * C21861 + C81300 * C139873) *
                          C139899) *
                         C4096 +
                     (((C78014 - C78013 + C78016 - C78015) * C21860 +
                       (C78018 - C78017 + C78020 - C78019) * C139983 +
                       C81301 * C21861 + C81302 * C139873) *
                          C92797 +
                      ((C84709 - C84710 + C84711 - C84712) * C21860 +
                       (C84713 - C84714 + C84715 - C84716) * C139983 +
                       (C81291 - C81292 + C81293 - C81294) * C21861 +
                       (C81295 - C81296 + C81297 - C81298) * C139873) *
                          C139899) *
                         C140002) *
                        C806 +
                    ((((C68899 - C68898 + C68901 - C68900) * C21860 +
                       (C68903 - C68902 + C68905 - C68904) * C139983 +
                       (C68907 - C68906 + C68909 - C68908) * C21861 +
                       (C68911 - C68910 + C68913 - C68912) * C139873) *
                          C92797 +
                      (C81301 * C21860 + C81302 * C139983 +
                       (C72413 - C72414 + C72415 - C72416) * C21861 +
                       (C72417 - C72418 + C72419 - C72420) * C139873) *
                          C139899) *
                         C4096 +
                     ((C81299 * C21860 + C81300 * C139983 +
                       (C72414 - C72413 + C72416 - C72415) * C21861 +
                       (C72418 - C72417 + C72420 - C72419) * C139873) *
                          C92797 +
                      ((C81292 - C81291 + C81294 - C81293) * C21860 +
                       (C81296 - C81295 + C81298 - C81297) * C139983 +
                       (C139967 * C13134 - C137755 * C13128 + C139736 * C13136 -
                        C137748 * C13129) *
                           C21861 +
                       (C139967 * C13386 - C137755 * C13382 + C139736 * C13387 -
                        C137748 * C13383) *
                           C139873) *
                          C139899) *
                         C140002) *
                        C140000) *
                   C139758) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[97] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C21860 * C183 - C22116 * C108 - C21860 * C348 + C139983 * C411 +
              C21861 * C896 - C22117 * C813 - C21861 * C1072 +
              C139873 * C1151) *
                 C139967 +
             (C22155 + C22156) * C139736) *
                C92797 +
            ((C39934 + C39935) * C139967 + C39916 * C139736) * C139899) *
               C4096 -
           (((C39936 + C39937) * C139736 + (C46660 + C46661) * C139967) *
                C139899 +
            (C39925 * C139736 + (C39935 + C39934) * C139967) * C92797) *
               C140002) *
              C806 +
          ((((C43260 + C43261) * C139967 + (C38649 + C38648) * C139736) *
                C92797 +
            ((C21860 * C13216 - C22116 * C13126 - C21860 * C13380 +
              C139983 * C13462 + C21861 * C13217 - C22117 * C13128 -
              C21861 * C13382 + C139873 * C13463) *
                 C139967 +
             (C21860 * C13218 - C22116 * C13127 - C21860 * C13381 +
              C139983 * C13464 + C21861 * C13219 - C22117 * C13129 -
              C21861 * C13383 + C139873 * C13465) *
                 C139736) *
                C139899) *
               C140002 -
           (((C38648 + C38649) * C139736 + (C43261 + C43260) * C139967) *
                C139899 +
            ((C23091 + C23092) * C139736 +
             (C21861 * C2974 - C22117 * C2908 - C21861 * C3090 +
              C139873 * C3148 + C21860 * C896 - C22116 * C813 - C21860 * C1072 +
              C139983 * C1151) *
                 C139967) *
                C92797) *
               C4096) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eeyz[97] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C92797 * C266 - C92947 * C108 + C139899 * C1741 -
                        C92948 * C1570) *
                           C21860 +
                       (C92797 * C495 - C92947 * C348 + C139899 * C1997 -
                        C92948 * C1829) *
                           C139983 +
                       (C101320 - C101321 + C101322 - C101323) * C21861 +
                       (C101638 - C101639 + C101640 - C101641) * C139873) *
                          C139967 +
                      ((C92950 - C92951 + C92952 - C92953) * C21860 +
                       (C93202 - C93203 + C93204 - C93205) * C139983 +
                       C114252 * C21861 + C114650 * C139873) *
                          C139736) *
                         C4096 +
                     (((C92947 * C1570 - C92797 * C1741 + C92948 * C5273 -
                        C139899 * C5397) *
                           C21860 +
                       (C92947 * C1829 - C92797 * C1997 + C92948 * C5455 -
                        C139899 * C5567) *
                           C139983 +
                       (C104814 - C104815 + C104816 - C104817) * C21861 +
                       (C105145 - C105146 + C105147 - C105148) * C139873) *
                          C139967 +
                      ((C94765 - C94766 + C94767 - C94768) * C21860 +
                       (C95105 - C95106 + C95107 - C95108) * C139983 +
                       (C115434 - C115435 + C115436 - C115437) * C21861 +
                       (C115832 - C115833 + C115834 - C115835) * C139873) *
                          C139736) *
                         C140002) *
                        C806 +
                    ((((C101321 - C101320 + C101323 - C101322) * C21860 +
                       (C101639 - C101638 + C101641 - C101640) * C139983 +
                       (C101329 - C101328 + C101331 - C101330) * C21861 +
                       (C101643 - C101642 + C101645 - C101644) * C139873) *
                          C139967 +
                      (C114254 * C21860 + C114651 * C139983 +
                       (C101336 - C101337 + C101338 - C101339) * C21861 +
                       (C101646 - C101647 + C101648 - C101649) * C139873) *
                          C139736) *
                         C4096 +
                     (((C104815 - C104814 + C104817 - C104816) * C21860 +
                       (C105146 - C105145 + C105148 - C105147) * C139983 +
                       (C104823 - C104822 + C104825 - C104824) * C21861 +
                       (C105150 - C105149 + C105152 - C105151) * C139873) *
                          C139967 +
                      ((C115435 - C115434 + C115437 - C115436) * C21860 +
                       (C115833 - C115832 + C115835 - C115834) * C139983 +
                       (C92797 * C7980 - C92947 * C7753 + C139899 * C13301 -
                        C92948 * C13129) *
                           C21861 +
                       (C92797 * C8318 - C92947 * C8092 + C139899 * C13543 -
                        C92948 * C13383) *
                           C139873) *
                          C139736) *
                         C140002) *
                        C140000) *
                   C139758) /
                  (p * q * std::sqrt(p + q));
    d2eezx[97] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C139967 * C114 - C137755 * C108 + C139736 * C116 -
                        C137748 * C109) *
                           C92947 +
                       (C139967 * C573 - C137755 * C567 + C139736 * C574 -
                        C137748 * C568) *
                           C92797 +
                       (C78013 - C78014 + C78015 - C78016) * C92948 +
                       (C78421 - C78422 + C78423 - C78424) * C139899) *
                          C139983 +
                      ((C68898 - C68899 + C68900 - C68901) * C92947 +
                       (C69245 - C69246 + C69247 - C69248) * C92797 +
                       C81299 * C92948 + C81701 * C139899) *
                          C139873) *
                         C4096 +
                     (((C78014 - C78013 + C78016 - C78015) * C92947 +
                       (C78422 - C78421 + C78424 - C78423) * C92797 +
                       (C84709 - C84710 + C84711 - C84712) * C92948 +
                       (C85011 - C85012 + C85013 - C85014) * C139899) *
                          C139983 +
                      (C81301 * C92947 + C81702 * C92797 +
                       (C81291 - C81292 + C81293 - C81294) * C92948 +
                       (C81697 - C81698 + C81699 - C81700) * C139899) *
                          C139873) *
                         C140002) *
                        C806 +
                    ((((C68899 - C68898 + C68901 - C68900) * C92947 +
                       (C69246 - C69245 + C69248 - C69247) * C92797 +
                       C81301 * C92948 + C81702 * C139899) *
                          C139983 +
                      ((C68907 - C68906 + C68909 - C68908) * C92947 +
                       (C69250 - C69249 + C69252 - C69251) * C92797 +
                       (C72413 - C72414 + C72415 - C72416) * C92948 +
                       (C72719 - C72720 + C72721 - C72722) * C139899) *
                          C139873) *
                         C4096 +
                     ((C81299 * C92947 + C81701 * C92797 +
                       (C81292 - C81291 + C81294 - C81293) * C92948 +
                       (C81698 - C81697 + C81700 - C81699) * C139899) *
                          C139983 +
                      ((C72414 - C72413 + C72416 - C72415) * C92947 +
                       (C72720 - C72719 + C72722 - C72721) * C92797 +
                       (C139967 * C13134 - C137755 * C13128 + C139736 * C13136 -
                        C137748 * C13129) *
                           C92948 +
                       (C139967 * C13624 - C137755 * C13620 + C139736 * C13625 -
                        C137748 * C13621) *
                           C139899) *
                          C139873) *
                         C140002) *
                        C140000) *
                   C139758) /
                  (p * q * std::sqrt(p + q));
    d2eezy[97] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139983 * C183 - C21860 * C108 + C139873 * C896 - C21861 * C813) *
                 C92947 +
             (C139983 * C629 - C21860 * C567 + C139873 * C1393 -
              C21861 * C1317) *
                 C92797 +
             (C39482 - C39483 + C39484 - C39485) * C92948 +
             (C40332 - C40333 + C40334 - C40335) * C139899) *
                C139967 +
            ((C21863 - C21864 + C21865 - C21866) * C92947 +
             (C22392 - C22393 + C22394 - C22395) * C92797 + C39506 * C92948 +
             C40344 * C139899) *
                C139736) *
               C4096 +
           (((C39483 - C39482 + C39485 - C39484) * C92947 +
             (C40333 - C40332 + C40335 - C40334) * C92797 +
             (C46346 - C46347 + C46348 - C46349) * C92948 +
             (C46956 - C46957 + C46958 - C46959) * C139899) *
                C139967 +
            (C39508 * C92947 + C40345 * C92797 +
             (C39498 - C39499 + C39500 - C39501) * C92948 +
             (C40340 - C40341 + C40342 - C40343) * C139899) *
                C139736) *
               C140002) *
              C806 +
          ((((C21860 * C813 - C139983 * C896 + C21861 * C2908 -
              C139873 * C2974) *
                 C92947 +
             (C21860 * C1317 - C139983 * C1393 + C21861 * C3256 -
              C139873 * C3314) *
                 C92797 +
             (C42830 - C42831 + C42832 - C42833) * C92948 +
             (C43662 - C43663 + C43664 - C43665) * C139899) *
                C139967 +
            ((C22729 - C22730 + C22731 - C22732) * C92947 +
             (C23400 - C23401 + C23402 - C23403) * C92797 +
             (C38202 - C38203 + C38204 - C38205) * C92948 +
             (C39058 - C39059 + C39060 - C39061) * C139899) *
                C139736) *
               C4096 +
           (((C42831 - C42830 + C42833 - C42832) * C92947 +
             (C43663 - C43662 + C43665 - C43664) * C92797 +
             (C139983 * C13216 - C21860 * C13126 + C139873 * C13217 -
              C21861 * C13128) *
                 C92948 +
             (C139983 * C13700 - C21860 * C13618 + C139873 * C13701 -
              C21861 * C13620) *
                 C139899) *
                C139967 +
            ((C38203 - C38202 + C38205 - C38204) * C92947 +
             (C39059 - C39058 + C39061 - C39060) * C92797 +
             (C139983 * C13218 - C21860 * C13127 + C139873 * C13219 -
              C21861 * C13129) *
                 C92948 +
             (C139983 * C13702 - C21860 * C13619 + C139873 * C13703 -
              C21861 * C13621) *
                 C139899) *
                C139736) *
               C140002) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eezz[97] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92947 * C266 - C93448 * C108 - C92947 * C567 + C92797 * C702 +
              C92948 * C1741 - C93449 * C1570 - C92948 * C2074 +
              C139899 * C2230) *
                 C139983 +
             (C101980 + C101981) * C139873) *
                C139967 +
            ((C93487 + C93488) * C139983 + C115042 * C139873) * C139736) *
               C4096 -
           (((C116238 + C116239) * C139873 + (C95445 + C95446) * C139983) *
                C139736 +
            ((C105479 + C105480) * C139873 +
             (C92948 * C5397 - C93449 * C5273 - C92948 * C5621 +
              C139899 * C5733 + C92947 * C1741 - C93448 * C1570 -
              C92947 * C2074 + C92797 * C2230) *
                 C139983) *
                C139967) *
               C140002) *
              C806 +
          ((((C105480 + C105479) * C139983 + (C105478 + C105477) * C139873) *
                C139967 +
            ((C116239 + C116238) * C139983 +
             (C92947 * C7980 - C93448 * C7753 - C92947 * C8423 +
              C92797 * C8633 + C92948 * C13301 - C93449 * C13129 -
              C92948 * C13621 + C139899 * C13781) *
                 C139873) *
                C139736) *
               C140002 -
           (((C101985 + C101984) * C139873 + C115043 * C139983) * C139736 +
            ((C101983 + C101982) * C139873 + (C101981 + C101980) * C139983) *
                C139967) *
               C4096) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eexx[98] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C137755 * C114 - C67752 * C108 - C137755 * C115 + C139967 * C126 +
             C137748 * C116 - C67754 * C109 - C137748 * C117 + C139736 * C127) *
                C92797 +
            (C77607 + C77608) * C139899) *
               C139983 +
           ((C68584 + C68585) * C92797 + C80877 * C139899) * C139873) *
              C5270 -
          (((C80891 + C80892) * C139899 + C80886 * C92797) * C139873 +
           ((C84413 + C84414) * C139899 + (C77608 + C77607) * C92797) *
               C139983) *
              C5271 +
          (((C84414 + C84413) * C92797 +
            (C137755 * C15627 - C67752 * C15623 - C137755 * C15628 +
             C139967 * C15632 + C137748 * C15625 - C67754 * C15622 -
             C137748 * C15626 + C139736 * C15631) *
                C139899) *
               C139983 +
           ((C80892 + C80891) * C92797 +
            (C137755 * C18304 - C67752 * C18302 - C137755 * C18305 +
             C139967 * C18308 + C137748 * C18306 - C67754 * C18303 -
             C137748 * C18307 + C139736 * C18309) *
                C139899) *
               C139873) *
              C5272) *
         C139792 * C139758) /
        (p * q * std::sqrt(p + q));
    d2eexy[98] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139983 * C183 - C21860 * C108 + C139873 * C896 - C21861 * C813) *
                C137755 +
            (C139983 * C189 - C21860 * C115 + C139873 * C901 - C21861 * C822) *
                C139967 +
            (C21863 - C21864 + C21865 - C21866) * C137748 +
            (C21867 - C21868 + C21869 - C21870) * C139736) *
               C92797 +
           ((C39482 - C39483 + C39484 - C39485) * C137755 +
            (C39486 - C39487 + C39488 - C39489) * C139967 + C39506 * C137748 +
            C39507 * C139736) *
               C139899) *
              C5270 +
          (((C39483 - C39482 + C39485 - C39484) * C137755 +
            (C39487 - C39486 + C39489 - C39488) * C139967 + C39508 * C137748 +
            C39509 * C139736) *
               C92797 +
           ((C46346 - C46347 + C46348 - C46349) * C137755 +
            (C46350 - C46351 + C46352 - C46353) * C139967 +
            (C39498 - C39499 + C39500 - C39501) * C137748 +
            (C39502 - C39503 + C39504 - C39505) * C139736) *
               C139899) *
              C5271 +
          (((C46347 - C46346 + C46349 - C46348) * C137755 +
            (C46351 - C46350 + C46353 - C46352) * C139967 +
            (C39499 - C39498 + C39501 - C39500) * C137748 +
            (C39503 - C39502 + C39505 - C39504) * C139736) *
               C92797 +
           ((C139983 * C15788 - C21860 * C15623 + C139873 * C18422 -
             C21861 * C18302) *
                C137755 +
            (C139983 * C15791 - C21860 * C15628 + C139873 * C18424 -
             C21861 * C18305) *
                C139967 +
            (C139983 * C15789 - C21860 * C15622 + C139873 * C18423 -
             C21861 * C18303) *
                C137748 +
            (C139983 * C15792 - C21860 * C15626 + C139873 * C18425 -
             C21861 * C18307) *
                C139736) *
               C139899) *
              C5272) *
         C139792 * C139758) /
        (p * q * std::sqrt(p + q));
    d2eexz[98] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92797 * C266 - C92947 * C108 + C139899 * C1741 - C92948 * C1570) *
                C137755 +
            (C92797 * C272 - C92947 * C115 + C139899 * C1746 - C92948 * C1579) *
                C139967 +
            (C92950 - C92951 + C92952 - C92953) * C137748 +
            (C92954 - C92955 + C92956 - C92957) * C139736) *
               C139983 +
           ((C101320 - C101321 + C101322 - C101323) * C137755 +
            (C101324 - C101325 + C101326 - C101327) * C139967 +
            C114252 * C137748 + C114253 * C139736) *
               C139873) *
              C5270 +
          (((C92947 * C1570 - C92797 * C1741 + C92948 * C5273 -
             C139899 * C5397) *
                C137755 +
            (C92947 * C1579 - C92797 * C1746 + C92948 * C5278 -
             C139899 * C5401) *
                C139967 +
            (C94765 - C94766 + C94767 - C94768) * C137748 +
            (C94769 - C94770 + C94771 - C94772) * C139736) *
               C139983 +
           ((C104814 - C104815 + C104816 - C104817) * C137755 +
            (C104818 - C104819 + C104820 - C104821) * C139967 +
            (C115434 - C115435 + C115436 - C115437) * C137748 +
            (C115438 - C115439 + C115440 - C115441) * C139736) *
               C139873) *
              C5271 +
          (((C92797 * C5397 - C92947 * C5273 + C139899 * C15912 -
             C92948 * C15623) *
                C137755 +
            (C92797 * C5401 - C92947 * C5278 + C139899 * C15915 -
             C92948 * C15628) *
                C139967 +
            (C92797 * C5398 - C92947 * C5274 + C139899 * C15913 -
             C92948 * C15622) *
                C137748 +
            (C92797 * C5402 - C92947 * C5280 + C139899 * C15916 -
             C92948 * C15626) *
                C139736) *
               C139983 +
           ((C92797 * C13298 - C92947 * C13126 + C139899 * C18532 -
             C92948 * C18302) *
                C137755 +
            (C92797 * C13302 - C92947 * C13131 + C139899 * C18534 -
             C92948 * C18305) *
                C139967 +
            (C92797 * C13299 - C92947 * C13127 + C139899 * C18533 -
             C92948 * C18303) *
                C137748 +
            (C92797 * C13303 - C92947 * C13133 + C139899 * C18535 -
             C92948 * C18307) *
                C139736) *
               C139873) *
              C5272) *
         C139792 * C139758) /
        (p * q * std::sqrt(p + q));
    d2eeyx[98] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C139967 * C114 - C137755 * C108 + C139736 * C116 -
                       C137748 * C109) *
                          C21860 +
                      (C139967 * C354 - C137755 * C348 + C139736 * C355 -
                       C137748 * C349) *
                          C139983 +
                      (C68898 - C68899 + C68900 - C68901) * C21861 +
                      (C68902 - C68903 + C68904 - C68905) * C139873) *
                         C92797 +
                     ((C78013 - C78014 + C78015 - C78016) * C21860 +
                      (C78017 - C78018 + C78019 - C78020) * C139983 +
                      C81299 * C21861 + C81300 * C139873) *
                         C139899) *
                        C5270 +
                    (((C78014 - C78013 + C78016 - C78015) * C21860 +
                      (C78018 - C78017 + C78020 - C78019) * C139983 +
                      C81301 * C21861 + C81302 * C139873) *
                         C92797 +
                     ((C84709 - C84710 + C84711 - C84712) * C21860 +
                      (C84713 - C84714 + C84715 - C84716) * C139983 +
                      (C81291 - C81292 + C81293 - C81294) * C21861 +
                      (C81295 - C81296 + C81297 - C81298) * C139873) *
                         C139899) *
                        C5271 +
                    (((C84710 - C84709 + C84712 - C84711) * C21860 +
                      (C84714 - C84713 + C84716 - C84715) * C139983 +
                      (C81292 - C81291 + C81294 - C81293) * C21861 +
                      (C81296 - C81295 + C81298 - C81297) * C139873) *
                         C92797 +
                     ((C139967 * C15627 - C137755 * C15623 + C139736 * C15625 -
                       C137748 * C15622) *
                          C21860 +
                      (C139967 * C16031 - C137755 * C16028 + C139736 * C16032 -
                       C137748 * C16029) *
                          C139983 +
                      (C139967 * C18304 - C137755 * C18302 + C139736 * C18306 -
                       C137748 * C18303) *
                          C21861 +
                      (C139967 * C18636 - C137755 * C18634 + C139736 * C18637 -
                       C137748 * C18635) *
                          C139873) *
                         C139899) *
                        C5272) *
                   C139792 * C139758) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[98] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C21860 * C183 - C22116 * C108 - C21860 * C348 + C139983 * C411 +
             C21861 * C896 - C22117 * C813 - C21861 * C1072 + C139873 * C1151) *
                C139967 +
            (C22155 + C22156) * C139736) *
               C92797 +
           ((C39934 + C39935) * C139967 + C39916 * C139736) * C139899) *
              C5270 -
          (((C39936 + C39937) * C139736 + (C46660 + C46661) * C139967) *
               C139899 +
           (C39925 * C139736 + (C39935 + C39934) * C139967) * C92797) *
              C5271 +
          (((C46661 + C46660) * C139967 + (C39937 + C39936) * C139736) *
               C92797 +
           ((C21860 * C15788 - C22116 * C15623 - C21860 * C16028 +
             C139983 * C16165 + C21861 * C18422 - C22117 * C18302 -
             C21861 * C18634 + C139873 * C18744) *
                C139967 +
            (C21860 * C15789 - C22116 * C15622 - C21860 * C16029 +
             C139983 * C16164 + C21861 * C18423 - C22117 * C18303 -
             C21861 * C18635 + C139873 * C18745) *
                C139736) *
               C139899) *
              C5272) *
         C139792 * C139758) /
        (p * q * std::sqrt(p + q));
    d2eeyz[98] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92797 * C266 - C92947 * C108 + C139899 * C1741 - C92948 * C1570) *
                C21860 +
            (C92797 * C495 - C92947 * C348 + C139899 * C1997 - C92948 * C1829) *
                C139983 +
            (C101320 - C101321 + C101322 - C101323) * C21861 +
            (C101638 - C101639 + C101640 - C101641) * C139873) *
               C139967 +
           ((C92950 - C92951 + C92952 - C92953) * C21860 +
            (C93202 - C93203 + C93204 - C93205) * C139983 + C114252 * C21861 +
            C114650 * C139873) *
               C139736) *
              C5270 +
          (((C92947 * C1570 - C92797 * C1741 + C92948 * C5273 -
             C139899 * C5397) *
                C21860 +
            (C92947 * C1829 - C92797 * C1997 + C92948 * C5455 -
             C139899 * C5567) *
                C139983 +
            (C104814 - C104815 + C104816 - C104817) * C21861 +
            (C105145 - C105146 + C105147 - C105148) * C139873) *
               C139967 +
           ((C94765 - C94766 + C94767 - C94768) * C21860 +
            (C95105 - C95106 + C95107 - C95108) * C139983 +
            (C115434 - C115435 + C115436 - C115437) * C21861 +
            (C115832 - C115833 + C115834 - C115835) * C139873) *
               C139736) *
              C5271 +
          (((C92797 * C5397 - C92947 * C5273 + C139899 * C15912 -
             C92948 * C15623) *
                C21860 +
            (C92797 * C5567 - C92947 * C5455 + C139899 * C16294 -
             C92948 * C16028) *
                C139983 +
            (C92797 * C13298 - C92947 * C13126 + C139899 * C18532 -
             C92948 * C18302) *
                C21861 +
            (C92797 * C13540 - C92947 * C13380 + C139899 * C18862 -
             C92948 * C18634) *
                C139873) *
               C139967 +
           ((C92797 * C5398 - C92947 * C5274 + C139899 * C15913 -
             C92948 * C15622) *
                C21860 +
            (C92797 * C5568 - C92947 * C5456 + C139899 * C16295 -
             C92948 * C16029) *
                C139983 +
            (C92797 * C13299 - C92947 * C13127 + C139899 * C18533 -
             C92948 * C18303) *
                C21861 +
            (C92797 * C13542 - C92947 * C13381 + C139899 * C18863 -
             C92948 * C18635) *
                C139873) *
               C139736) *
              C5272) *
         C139792 * C139758) /
        (p * q * std::sqrt(p + q));
    d2eezx[98] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C139967 * C114 - C137755 * C108 + C139736 * C116 -
                       C137748 * C109) *
                          C92947 +
                      (C139967 * C573 - C137755 * C567 + C139736 * C574 -
                       C137748 * C568) *
                          C92797 +
                      (C78013 - C78014 + C78015 - C78016) * C92948 +
                      (C78421 - C78422 + C78423 - C78424) * C139899) *
                         C139983 +
                     ((C68898 - C68899 + C68900 - C68901) * C92947 +
                      (C69245 - C69246 + C69247 - C69248) * C92797 +
                      C81299 * C92948 + C81701 * C139899) *
                         C139873) *
                        C5270 +
                    (((C78014 - C78013 + C78016 - C78015) * C92947 +
                      (C78422 - C78421 + C78424 - C78423) * C92797 +
                      (C84709 - C84710 + C84711 - C84712) * C92948 +
                      (C85011 - C85012 + C85013 - C85014) * C139899) *
                         C139983 +
                     (C81301 * C92947 + C81702 * C92797 +
                      (C81291 - C81292 + C81293 - C81294) * C92948 +
                      (C81697 - C81698 + C81699 - C81700) * C139899) *
                         C139873) *
                        C5271 +
                    (((C84710 - C84709 + C84712 - C84711) * C92947 +
                      (C85012 - C85011 + C85014 - C85013) * C92797 +
                      (C139967 * C15627 - C137755 * C15623 + C139736 * C15625 -
                       C137748 * C15622) *
                          C92948 +
                      (C139967 * C16404 - C137755 * C16401 + C139736 * C16405 -
                       C137748 * C16402) *
                          C139899) *
                         C139983 +
                     ((C81292 - C81291 + C81294 - C81293) * C92947 +
                      (C81698 - C81697 + C81700 - C81699) * C92797 +
                      (C139967 * C18304 - C137755 * C18302 + C139736 * C18306 -
                       C137748 * C18303) *
                          C92948 +
                      (C139967 * C18964 - C137755 * C18962 + C139736 * C18965 -
                       C137748 * C18963) *
                          C139899) *
                         C139873) *
                        C5272) *
                   C139792 * C139758) /
                  (p * q * std::sqrt(p + q));
    d2eezy[98] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139983 * C183 - C21860 * C108 + C139873 * C896 - C21861 * C813) *
                C92947 +
            (C139983 * C629 - C21860 * C567 + C139873 * C1393 -
             C21861 * C1317) *
                C92797 +
            (C39482 - C39483 + C39484 - C39485) * C92948 +
            (C40332 - C40333 + C40334 - C40335) * C139899) *
               C139967 +
           ((C21863 - C21864 + C21865 - C21866) * C92947 +
            (C22392 - C22393 + C22394 - C22395) * C92797 + C39506 * C92948 +
            C40344 * C139899) *
               C139736) *
              C5270 +
          (((C39483 - C39482 + C39485 - C39484) * C92947 +
            (C40333 - C40332 + C40335 - C40334) * C92797 +
            (C46346 - C46347 + C46348 - C46349) * C92948 +
            (C46956 - C46957 + C46958 - C46959) * C139899) *
               C139967 +
           (C39508 * C92947 + C40345 * C92797 +
            (C39498 - C39499 + C39500 - C39501) * C92948 +
            (C40340 - C40341 + C40342 - C40343) * C139899) *
               C139736) *
              C5271 +
          (((C46347 - C46346 + C46349 - C46348) * C92947 +
            (C46957 - C46956 + C46959 - C46958) * C92797 +
            (C139983 * C15788 - C21860 * C15623 + C139873 * C18422 -
             C21861 * C18302) *
                C92948 +
            (C139983 * C16521 - C21860 * C16401 + C139873 * C19068 -
             C21861 * C18962) *
                C139899) *
               C139967 +
           ((C39499 - C39498 + C39501 - C39500) * C92947 +
            (C40341 - C40340 + C40343 - C40342) * C92797 +
            (C139983 * C15789 - C21860 * C15622 + C139873 * C18423 -
             C21861 * C18303) *
                C92948 +
            (C139983 * C16522 - C21860 * C16402 + C139873 * C19069 -
             C21861 * C18963) *
                C139899) *
               C139736) *
              C5272) *
         C139792 * C139758) /
        (p * q * std::sqrt(p + q));
    d2eezz[98] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92947 * C266 - C93448 * C108 - C92947 * C567 + C92797 * C702 +
             C92948 * C1741 - C93449 * C1570 - C92948 * C2074 +
             C139899 * C2230) *
                C139983 +
            (C101980 + C101981) * C139873) *
               C139967 +
           ((C93487 + C93488) * C139983 + C115042 * C139873) * C139736) *
              C5270 -
          (((C116238 + C116239) * C139873 + (C95445 + C95446) * C139983) *
               C139736 +
           ((C105479 + C105480) * C139873 +
            (C92948 * C5397 - C93449 * C5273 - C92948 * C5621 +
             C139899 * C5733 + C92947 * C1741 - C93448 * C1570 -
             C92947 * C2074 + C92797 * C2230) *
                C139983) *
               C139967) *
              C5271 +
          (((C92947 * C5397 - C93448 * C5273 - C92947 * C5621 + C92797 * C5733 +
             C92948 * C15912 - C93449 * C15623 - C92948 * C16401 +
             C139899 * C16633) *
                C139983 +
            (C92947 * C13298 - C93448 * C13126 - C92947 * C13618 +
             C92797 * C13778 + C92948 * C18532 - C93449 * C18302 -
             C92948 * C18962 + C139899 * C19172) *
                C139873) *
               C139967 +
           ((C92947 * C5398 - C93448 * C5274 - C92947 * C5622 + C92797 * C5734 +
             C92948 * C15913 - C93449 * C15622 - C92948 * C16402 +
             C139899 * C16632) *
                C139983 +
            (C92947 * C13299 - C93448 * C13127 - C92947 * C13619 +
             C92797 * C13780 + C92948 * C18533 - C93449 * C18303 -
             C92948 * C18963 + C139899 * C19173) *
                C139873) *
               C139736) *
              C5272) *
         C139792 * C139758) /
        (p * q * std::sqrt(p + q));
    d2eexx[99] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C54790 * C114 - C54791 * C108 - C54790 * C115 + C139731 * C126) *
                C140013 +
            C61654 * C140014 + C61655 * C122759) *
               C139983 +
           (C55303 * C140013 + C57671 * C140014 + C60685 * C122759) * C139873) *
              C139809 * C139792 * C97 -
          ((C60687 * C122759 + C60686 * C140014 + C55306 * C140013) * C139873 +
           (C61657 * C122759 + C61656 * C140014 +
            (C54790 * C116 - C54791 * C109 - C54790 * C117 + C139731 * C127) *
                C140013) *
               C139983) *
              C139809 * C139792 * C98 +
          (((C54790 * C118 - C54791 * C110 - C54790 * C119 + C139731 * C128) *
                C140013 +
            (C54790 * C1574 - C54791 * C1568 - C54790 * C1575 +
             C139731 * C1583) *
                C140014 +
            (C54790 * C5281 - C54791 * C5275 - C54790 * C5282 +
             C139731 * C5287) *
                C122759) *
               C139983 +
           ((C54790 * C817 - C54791 * C811 - C54790 * C818 + C139731 * C826) *
                C140013 +
            (C54790 * C3446 - C54791 * C3440 - C54790 * C3447 +
             C139731 * C3452) *
                C140014 +
            (C54790 * C14660 - C54791 * C14659 - C54790 * C14661 +
             C139731 * C14662) *
                C122759) *
               C139873) *
              C139809 * C139792 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eexy[99] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139983 * C183 - C21860 * C108 + C139873 * C896 - C21861 * C813) *
                C54790 +
            (C139983 * C189 - C21860 * C115 + C139873 * C901 - C21861 * C822) *
                C139731) *
               C140013 +
           ((C39482 - C39483 + C39484 - C39485) * C54790 +
            (C39486 - C39487 + C39488 - C39489) * C139731) *
               C140014 +
           ((C46347 - C46346 + C46349 - C46348) * C54790 +
            (C46351 - C46350 + C46353 - C46352) * C139731) *
               C122759) *
              C139809 * C139792 * C97 +
          (((C21864 - C21863 + C21866 - C21865) * C54790 +
            (C21868 - C21867 + C21870 - C21869) * C139731) *
               C140013 +
           (C39508 * C54790 + C39509 * C139731) * C140014 +
           ((C39498 - C39499 + C39500 - C39501) * C54790 +
            (C39502 - C39503 + C39504 - C39505) * C139731) *
               C122759) *
              C139809 * C139792 * C98 +
          ((C21891 * C54790 + C21892 * C139731) * C140013 +
           ((C23715 - C23714 + C23717 - C23716) * C54790 +
            (C23719 - C23718 + C23721 - C23720) * C139731) *
               C140014 +
           ((C139983 * C5341 - C21860 * C5275 + C139873 * C14761 -
             C21861 * C14659) *
                C54790 +
            (C139983 * C5345 - C21860 * C5282 + C139873 * C14762 -
             C21861 * C14661) *
                C139731) *
               C122759) *
              C139809 * C139792 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eexz[99] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C140013 * C266 - C122908 * C108 + C140014 * C1741 -
             C122909 * C1570 + C122759 * C5397 - C122910 * C5273) *
                C54790 +
            (C140013 * C272 - C122908 * C115 + C140014 * C1746 -
             C122909 * C1579 + C122759 * C5401 - C122910 * C5278) *
                C139731) *
               C139983 +
           ((C140013 * C984 - C122908 * C813 + C140014 * C3594 -
             C122909 * C3438 + C122759 * C13298 - C122910 * C13126) *
                C54790 +
            (C140013 * C989 - C122908 * C822 + C140014 * C3598 -
             C122909 * C3443 + C122759 * C13302 - C122910 * C13131) *
                C139731) *
               C139873) *
              C139809 * C139792 * C97 +
          (((C122913 - C122912 + C122915 - C122914 + C122917 - C122916) *
                C54790 +
            (C122919 - C122918 + C122921 - C122920 + C122923 - C122922) *
                C139731) *
               C139983 +
           ((C123731 - C123732 + C123733 - C123734 + C123735 - C123736) *
                C54790 +
            (C123737 - C123738 + C123739 - C123740 + C123741 - C123742) *
                C139731) *
               C139873) *
              C139809 * C139792 * C98 +
          (((C122925 - C122924 + C122927 - C122926 + C122929 - C122928) *
                C54790 +
            (C122931 - C122930 + C122933 - C122932 + C122935 - C122934) *
                C139731) *
               C139983 +
           ((C140013 * C986 - C122908 * C811 + C140014 * C3596 -
             C122909 * C3440 + C122759 * C14869 - C122910 * C14659) *
                C54790 +
            (C140013 * C991 - C122908 * C818 + C140014 * C3600 -
             C122909 * C3447 + C122759 * C14870 - C122910 * C14661) *
                C139731) *
               C139873) *
              C139809 * C139792 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[99] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139731 * C114 - C54790 * C108) * C21860 +
            (C139731 * C354 - C54790 * C348) * C139983 +
            (C55513 - C55514) * C21861 + (C55515 - C55516) * C139873) *
               C140013 +
           ((C61976 - C61977) * C21860 + (C61978 - C61979) * C139983 +
            C64587 * C21861 + C64588 * C139873) *
               C140014 +
           (C67258 * C21860 + C67259 * C139983 + C64589 * C21861 +
            C64590 * C139873) *
               C122759) *
              C139809 * C139792 * C97 +
          (((C54790 * C109 - C139731 * C116) * C21860 +
            (C54790 * C349 - C139731 * C355) * C139983 +
            (C55525 - C55526) * C21861 + (C55527 - C55528) * C139873) *
               C140013 +
           ((C61984 - C61985) * C21860 + (C61986 - C61987) * C139983 +
            (C61001 - C61002) * C21861 + (C61003 - C61004) * C139873) *
               C140014 +
           ((C61988 - C61989) * C21860 + (C61990 - C61991) * C139983 +
            (C61005 - C61006) * C21861 + (C61007 - C61008) * C139873) *
               C122759) *
              C139809 * C139792 * C98 +
          (((C139731 * C118 - C54790 * C110) * C21860 +
            (C139731 * C356 - C54790 * C350) * C139983 +
            (C139731 * C817 - C54790 * C811) * C21861 +
            (C139731 * C1079 - C54790 * C1074) * C139873) *
               C140013 +
           ((C139731 * C1574 - C54790 * C1568) * C21860 +
            (C139731 * C1836 - C54790 * C1831) * C139983 +
            (C139731 * C3446 - C54790 * C3440) * C21861 +
            (C139731 * C3674 - C54790 * C3670) * C139873) *
               C140014 +
           ((C139731 * C5281 - C54790 * C5275) * C21860 +
            (C139731 * C5461 - C54790 * C5457) * C139983 +
            (C139731 * C14660 - C54790 * C14659) * C21861 +
            (C139731 * C14982 - C54790 * C14981) * C139873) *
               C122759) *
              C139809 * C139792 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[99] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C21860 * C183 - C22116 * C108 - C21860 * C348 + C139983 * C411 +
            C21861 * C896 - C22117 * C813 - C21861 * C1072 + C139873 * C1151) *
               C139731 * C140013 +
           (C39934 + C39935) * C139731 * C140014 +
           (C46661 + C46660) * C139731 * C122759) *
              C139809 * C139792 * C97 -
          ((C39936 + C39937) * C139731 * C122759 + C39925 * C139731 * C140014 +
           (C22156 + C22155) * C139731 * C140013) *
              C139809 * C139792 * C98 +
          (C22161 * C139731 * C140013 + (C24045 + C24044) * C139731 * C140014 +
           (C21860 * C5341 - C22116 * C5275 - C21860 * C5457 + C139983 * C5515 +
            C21861 * C14761 - C22117 * C14659 - C21861 * C14981 +
            C139873 * C15081) *
               C139731 * C122759) *
              C139809 * C139792 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[99] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C140013 * C266 - C122908 * C108 + C140014 * C1741 -
            C122909 * C1570 + C122759 * C5397 - C122910 * C5273) *
               C21860 +
           (C140013 * C495 - C122908 * C348 + C140014 * C1997 -
            C122909 * C1829 + C122759 * C5567 - C122910 * C5455) *
               C139983 +
           (C140013 * C984 - C122908 * C813 + C140014 * C3594 -
            C122909 * C3438 + C122759 * C13298 - C122910 * C13126) *
               C21861 +
           (C140013 * C1240 - C122908 * C1072 + C140014 * C3812 -
            C122909 * C3668 + C122759 * C13540 - C122910 * C13380) *
               C139873) *
              C139731 * C139809 * C139792 * C97 +
          ((C122913 - C122912 + C122915 - C122914 + C122917 - C122916) *
               C21860 +
           (C123159 - C123158 + C123161 - C123160 + C123163 - C123162) *
               C139983 +
           (C123731 - C123732 + C123733 - C123734 + C123735 - C123736) *
               C21861 +
           (C124037 - C124038 + C124039 - C124040 + C124041 - C124042) *
               C139873) *
              C139731 * C139809 * C139792 * C98 +
          ((C122925 - C122924 + C122927 - C122926 + C122929 - C122928) *
               C21860 +
           (C123165 - C123164 + C123167 - C123166 + C123169 - C123168) *
               C139983 +
           (C140013 * C986 - C122908 * C811 + C140014 * C3596 -
            C122909 * C3440 + C122759 * C14869 - C122910 * C14659) *
               C21861 +
           (C140013 * C1242 - C122908 * C1074 + C140014 * C3814 -
            C122909 * C3670 + C122759 * C15194 - C122910 * C14981) *
               C139873) *
              C139731 * C139809 * C139792 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eezx[99] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139731 * C114 - C54790 * C108) * C122908 +
            (C139731 * C573 - C54790 * C567) * C140013 +
            (C61976 - C61977) * C122909 + (C62328 - C62329) * C140014 +
            C67258 * C122910 + C67513 * C122759) *
               C139983 +
           ((C55513 - C55514) * C122908 + (C55735 - C55736) * C140013 +
            C64587 * C122909 + C64931 * C140014 + C64589 * C122910 +
            C64932 * C122759) *
               C139873) *
              C139809 * C139792 * C97 +
          (((C54790 * C109 - C139731 * C116) * C122908 +
            (C54790 * C568 - C139731 * C574) * C140013 +
            (C61984 - C61985) * C122909 + (C62332 - C62333) * C140014 +
            (C61988 - C61989) * C122910 + (C62334 - C62335) * C122759) *
               C139983 +
           ((C55525 - C55526) * C122908 + (C55741 - C55742) * C140013 +
            (C61001 - C61002) * C122909 + (C61311 - C61312) * C140014 +
            (C61005 - C61006) * C122910 + (C61313 - C61314) * C122759) *
               C139873) *
              C139809 * C139792 * C98 +
          (((C139731 * C118 - C54790 * C110) * C122908 +
            (C139731 * C575 - C54790 * C569) * C140013 +
            (C139731 * C1574 - C54790 * C1568) * C122909 +
            (C139731 * C2081 - C54790 * C2076) * C140014 +
            (C139731 * C5281 - C54790 * C5275) * C122910 +
            (C139731 * C5627 - C54790 * C5623) * C122759) *
               C139983 +
           ((C139731 * C817 - C54790 * C811) * C122908 +
            (C139731 * C1324 - C54790 * C1319) * C140013 +
            (C139731 * C3446 - C54790 * C3440) * C122909 +
            (C139731 * C3888 - C54790 * C3884) * C140014 +
            (C139731 * C14660 - C54790 * C14659) * C122910 +
            (C139731 * C15300 - C54790 * C15299) * C122759) *
               C139873) *
              C139809 * C139792 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eezy[99] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C139983 * C183 - C21860 * C108 + C139873 * C896 - C21861 * C813) *
               C122908 +
           (C139983 * C629 - C21860 * C567 + C139873 * C1393 - C21861 * C1317) *
               C140013 +
           (C39482 - C39483 + C39484 - C39485) * C122909 +
           (C40332 - C40333 + C40334 - C40335) * C140014 +
           (C46347 - C46346 + C46349 - C46348) * C122910 +
           (C46957 - C46956 + C46959 - C46958) * C122759) *
              C139731 * C139809 * C139792 * C97 +
          ((C21864 - C21863 + C21866 - C21865) * C122908 +
           (C22393 - C22392 + C22395 - C22394) * C140013 + C39508 * C122909 +
           C40345 * C140014 + (C39498 - C39499 + C39500 - C39501) * C122910 +
           (C40340 - C40341 + C40342 - C40343) * C122759) *
              C139731 * C139809 * C139792 * C98 +
          (C21891 * C122908 + C22407 * C140013 +
           (C23715 - C23714 + C23717 - C23716) * C122909 +
           (C24349 - C24348 + C24351 - C24350) * C140014 +
           (C139983 * C5341 - C21860 * C5275 + C139873 * C14761 -
            C21861 * C14659) *
               C122910 +
           (C139983 * C5681 - C21860 * C5623 + C139873 * C15399 -
            C21861 * C15299) *
               C122759) *
              C139731 * C139809 * C139792 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eezz[99] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C122908 * C266 - C123391 * C108 - C122908 * C567 +
                      C140013 * C702 + C122909 * C1741 - C123392 * C1570 -
                      C122909 * C2074 + C140014 * C2230 + C122910 * C5397 -
                      C123393 * C5273 - C122910 * C5621 + C122759 * C5733) *
                         C139983 +
                     (C122908 * C984 - C123391 * C813 - C122908 * C1317 +
                      C140013 * C1473 + C122909 * C3594 - C123392 * C3438 -
                      C122909 * C3882 + C140014 * C4026 + C122910 * C13298 -
                      C123393 * C13126 - C122910 * C13618 + C122759 * C13778) *
                         C139873) *
                        C139731 * C139809 * C139792 * C97 -
                    ((C124355 + C124356 + C124357) * C139873 +
                     (C123433 + C123432 + C123431) * C139983) *
                        C139731 * C139809 * C139792 * C98 +
                    ((C123436 + C123435 + C123434) * C139983 +
                     (C122908 * C986 - C123391 * C811 - C122908 * C1319 +
                      C140013 * C1471 + C122909 * C3596 - C123392 * C3440 -
                      C122909 * C3884 + C140014 * C4028 + C122910 * C14869 -
                      C123393 * C14659 - C122910 * C15299 + C122759 * C15502) *
                         C139873) *
                        C139731 * C139809 * C139792 * C99)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[100] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C54790 * C114 - C54791 * C108 - C54790 * C115 + C139731 * C126) *
                 C140013 +
             C61654 * C140014 + C61655 * C122759) *
                C139983 +
            (C130990 + C130991 + C130992) * C139873) *
               C139809 * C806 -
           ((C63508 * C122759 + C57670 * C140014 + C55304 * C140013) * C139873 +
            (C130992 + C130991 + C130990) * C139983) *
               C139809 * C140000) *
              C808 +
          (((C130993 + C130994 + C130995) * C139983 +
            (C55307 * C140013 + C85988 * C140014 +
             (C54790 * C13136 - C54791 * C13129 - C54790 * C13137 +
              C139731 * C13141) *
                 C122759) *
                C139873) *
               C139809 * C140000 -
           ((C130995 + C130994 + C130993) * C139873 +
            (C61657 * C122759 + C61656 * C140014 +
             (C54790 * C116 - C54791 * C109 - C54790 * C117 + C139731 * C127) *
                 C140013) *
                C139983) *
               C139809 * C806) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexy[100] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139983 * C183 - C21860 * C108 + C139873 * C896 - C21861 * C813) *
                 C54790 +
             (C139983 * C189 - C21860 * C115 + C139873 * C901 - C21861 * C822) *
                 C139731) *
                C140013 +
            ((C39482 - C39483 + C39484 - C39485) * C54790 +
             (C39486 - C39487 + C39488 - C39489) * C139731) *
                C140014 +
            ((C46347 - C46346 + C46349 - C46348) * C54790 +
             (C46351 - C46350 + C46353 - C46352) * C139731) *
                C122759) *
               C139809 * C806 +
           (((C21860 * C813 - C139983 * C896 + C21861 * C2908 -
              C139873 * C2974) *
                 C54790 +
             (C21860 * C822 - C139983 * C901 + C21861 * C2913 -
              C139873 * C2978) *
                 C139731) *
                C140013 +
            ((C42830 - C42831 + C42832 - C42833) * C54790 +
             (C42834 - C42835 + C42836 - C42837) * C139731) *
                C140014 +
            ((C21860 * C13126 - C139983 * C13216 + C21861 * C13128 -
              C139873 * C13217) *
                 C54790 +
             (C21860 * C13131 - C139983 * C13220 + C21861 * C13135 -
              C139873 * C13221) *
                 C139731) *
                C122759) *
               C139809 * C140000) *
              C808 +
          ((((C21864 - C21863 + C21866 - C21865) * C54790 +
             (C21868 - C21867 + C21870 - C21869) * C139731) *
                C140013 +
            (C39508 * C54790 + C39509 * C139731) * C140014 +
            ((C39498 - C39499 + C39500 - C39501) * C54790 +
             (C39502 - C39503 + C39504 - C39505) * C139731) *
                C122759) *
               C139809 * C806 +
           (((C22730 - C22729 + C22732 - C22731) * C54790 +
             (C22734 - C22733 + C22736 - C22735) * C139731) *
                C140013 +
            ((C38203 - C38202 + C38205 - C38204) * C54790 +
             (C38207 - C38206 + C38209 - C38208) * C139731) *
                C140014 +
            ((C139983 * C13218 - C21860 * C13127 + C139873 * C13219 -
              C21861 * C13129) *
                 C54790 +
             (C139983 * C13222 - C21860 * C13133 + C139873 * C13223 -
              C21861 * C13137) *
                 C139731) *
                C122759) *
               C139809 * C140000) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexz[100] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C140013 * C266 - C122908 * C108 + C140014 * C1741 -
              C122909 * C1570 + C122759 * C5397 - C122910 * C5273) *
                 C54790 +
             (C140013 * C272 - C122908 * C115 + C140014 * C1746 -
              C122909 * C1579 + C122759 * C5401 - C122910 * C5278) *
                 C139731) *
                C139983 +
            ((C131192 - C131193 + C131194 - C131195 + C131196 - C131197) *
                 C54790 +
             (C131198 - C131199 + C131200 - C131201 + C131202 - C131203) *
                 C139731) *
                C139873) *
               C139809 * C806 +
           (((C131193 - C131192 + C131195 - C131194 + C131197 - C131196) *
                 C54790 +
             (C131199 - C131198 + C131201 - C131200 + C131203 - C131202) *
                 C139731) *
                C139983 +
            ((C122908 * C2908 - C140013 * C3032 + C122909 * C7754 -
              C140014 * C7979 + C122910 * C13128 - C122759 * C13300) *
                 C54790 +
             (C122908 * C2913 - C140013 * C3036 + C122909 * C7759 -
              C140014 * C7982 + C122910 * C13135 - C122759 * C13304) *
                 C139731) *
                C139873) *
               C139809 * C140000) *
              C808 +
          ((((C122913 - C122912 + C122915 - C122914 + C122917 - C122916) *
                 C54790 +
             (C122919 - C122918 + C122921 - C122920 + C122923 - C122922) *
                 C139731) *
                C139983 +
            ((C123731 - C123732 + C123733 - C123734 + C123735 - C123736) *
                 C54790 +
             (C123737 - C123738 + C123739 - C123740 + C123741 - C123742) *
                 C139731) *
                C139873) *
               C139809 * C806 +
           (((C123732 - C123731 + C123734 - C123733 + C123736 - C123735) *
                 C54790 +
             (C123738 - C123737 + C123740 - C123739 + C123742 - C123741) *
                 C139731) *
                C139983 +
            ((C140013 * C3033 - C122908 * C2909 + C140014 * C7980 -
              C122909 * C7753 + C122759 * C13301 - C122910 * C13129) *
                 C54790 +
             (C140013 * C3037 - C122908 * C2915 + C140014 * C7983 -
              C122909 * C7757 + C122759 * C13305 - C122910 * C13137) *
                 C139731) *
                C139873) *
               C139809 * C140000) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[100] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139731 * C114 - C54790 * C108) * C21860 +
             (C139731 * C354 - C54790 * C348) * C139983 +
             (C55513 - C55514) * C21861 + (C55515 - C55516) * C139873) *
                C140013 +
            ((C61976 - C61977) * C21860 + (C61978 - C61979) * C139983 +
             C64587 * C21861 + C64588 * C139873) *
                C140014 +
            (C67258 * C21860 + C67259 * C139983 + C64589 * C21861 +
             C64590 * C139873) *
                C122759) *
               C139809 * C806 +
           (((C55514 - C55513) * C21860 + (C55516 - C55515) * C139983 +
             (C55518 - C55517) * C21861 + (C55520 - C55519) * C139873) *
                C140013 +
            (C64591 * C21860 + C64592 * C139983 + C89717 * C21861 +
             C89718 * C139873) *
                C140014 +
            (C64593 * C21860 + C64594 * C139983 + (C63744 - C63745) * C21861 +
             (C63746 - C63747) * C139873) *
                C122759) *
               C139809 * C140000) *
              C808 +
          ((((C54790 * C109 - C139731 * C116) * C21860 +
             (C54790 * C349 - C139731 * C355) * C139983 +
             (C55525 - C55526) * C21861 + (C55527 - C55528) * C139873) *
                C140013 +
            ((C61984 - C61985) * C21860 + (C61986 - C61987) * C139983 +
             (C61001 - C61002) * C21861 + (C61003 - C61004) * C139873) *
                C140014 +
            ((C61988 - C61989) * C21860 + (C61990 - C61991) * C139983 +
             (C61005 - C61006) * C21861 + (C61007 - C61008) * C139873) *
                C122759) *
               C139809 * C806 +
           (((C55526 - C55525) * C21860 + (C55528 - C55527) * C139983 +
             (C55530 - C55529) * C21861 + (C55532 - C55531) * C139873) *
                C140013 +
            ((C61002 - C61001) * C21860 + (C61004 - C61003) * C139983 +
             (C86285 - C86284) * C21861 + (C86287 - C86286) * C139873) *
                C140014 +
            ((C61006 - C61005) * C21860 + (C61008 - C61007) * C139983 +
             (C139731 * C13136 - C54790 * C13129) * C21861 +
             (C139731 * C13387 - C54790 * C13383) * C139873) *
                C122759) *
               C139809 * C140000) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[100] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C21860 * C183 - C22116 * C108 - C21860 * C348 + C139983 * C411 +
             C21861 * C896 - C22117 * C813 - C21861 * C1072 + C139873 * C1151) *
                C139731 * C140013 +
            (C39934 + C39935) * C139731 * C140014 +
            (C46661 + C46660) * C139731 * C122759) *
               C139809 * C806 -
           ((C21861 * C13217 - C22117 * C13128 - C21861 * C13382 +
             C139873 * C13463 + C21860 * C13216 - C22116 * C13126 -
             C21860 * C13380 + C139983 * C13462) *
                C139731 * C122759 +
            (C43261 + C43260) * C139731 * C140014 +
            (C21861 * C2974 - C22117 * C2908 - C21861 * C3090 +
             C139873 * C3148 + C21860 * C896 - C22116 * C813 - C21860 * C1072 +
             C139983 * C1151) *
                C139731 * C140013) *
               C139809 * C140000) *
              C808 +
          (((C23092 + C23091) * C139731 * C140013 +
            (C38649 + C38648) * C139731 * C140014 +
            (C21860 * C13218 - C22116 * C13127 - C21860 * C13381 +
             C139983 * C13464 + C21861 * C13219 - C22117 * C13129 -
             C21861 * C13383 + C139873 * C13465) *
                C139731 * C122759) *
               C139809 * C140000 -
           ((C39936 + C39937) * C139731 * C122759 + C39925 * C139731 * C140014 +
            (C22156 + C22155) * C139731 * C140013) *
               C139809 * C806) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[100] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C140013 * C266 - C122908 * C108 + C140014 * C1741 -
             C122909 * C1570 + C122759 * C5397 - C122910 * C5273) *
                C21860 +
            (C140013 * C495 - C122908 * C348 + C140014 * C1997 -
             C122909 * C1829 + C122759 * C5567 - C122910 * C5455) *
                C139983 +
            (C131192 - C131193 + C131194 - C131195 + C131196 - C131197) *
                C21861 +
            (C131498 - C131499 + C131500 - C131501 + C131502 - C131503) *
                C139873) *
               C139731 * C139809 * C806 +
           ((C131193 - C131192 + C131195 - C131194 + C131197 - C131196) *
                C21860 +
            (C131499 - C131498 + C131501 - C131500 + C131503 - C131502) *
                C139983 +
            (C122908 * C2908 - C140013 * C3032 + C122909 * C7754 -
             C140014 * C7979 + C122910 * C13128 - C122759 * C13300) *
                C21861 +
            (C122908 * C3090 - C140013 * C3202 + C122909 * C8091 -
             C140014 * C8317 + C122910 * C13382 - C122759 * C13541) *
                C139873) *
               C139731 * C139809 * C140000) *
              C808 +
          (((C122913 - C122912 + C122915 - C122914 + C122917 - C122916) *
                C21860 +
            (C123159 - C123158 + C123161 - C123160 + C123163 - C123162) *
                C139983 +
            (C123731 - C123732 + C123733 - C123734 + C123735 - C123736) *
                C21861 +
            (C124037 - C124038 + C124039 - C124040 + C124041 - C124042) *
                C139873) *
               C139731 * C139809 * C806 +
           ((C123732 - C123731 + C123734 - C123733 + C123736 - C123735) *
                C21860 +
            (C124038 - C124037 + C124040 - C124039 + C124042 - C124041) *
                C139983 +
            (C140013 * C3033 - C122908 * C2909 + C140014 * C7980 -
             C122909 * C7753 + C122759 * C13301 - C122910 * C13129) *
                C21861 +
            (C140013 * C3203 - C122908 * C3091 + C140014 * C8318 -
             C122909 * C8092 + C122759 * C13543 - C122910 * C13383) *
                C139873) *
               C139731 * C139809 * C140000) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eezx[100] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139731 * C114 - C54790 * C108) * C122908 +
             (C139731 * C573 - C54790 * C567) * C140013 +
             (C61976 - C61977) * C122909 + (C62328 - C62329) * C140014 +
             C67258 * C122910 + C67513 * C122759) *
                C139983 +
            ((C55513 - C55514) * C122908 + (C55735 - C55736) * C140013 +
             C64587 * C122909 + C64931 * C140014 + C64589 * C122910 +
             C64932 * C122759) *
                C139873) *
               C139809 * C806 +
           (((C55514 - C55513) * C122908 + (C55736 - C55735) * C140013 +
             C64591 * C122909 + C64933 * C140014 + C64593 * C122910 +
             C64934 * C122759) *
                C139983 +
            ((C55518 - C55517) * C122908 + (C55738 - C55737) * C140013 +
             C89717 * C122909 + C90038 * C140014 + (C63744 - C63745) * C122910 +
             (C63976 - C63977) * C122759) *
                C139873) *
               C139809 * C140000) *
              C808 +
          ((((C54790 * C109 - C139731 * C116) * C122908 +
             (C54790 * C568 - C139731 * C574) * C140013 +
             (C61984 - C61985) * C122909 + (C62332 - C62333) * C140014 +
             (C61988 - C61989) * C122910 + (C62334 - C62335) * C122759) *
                C139983 +
            ((C55525 - C55526) * C122908 + (C55741 - C55742) * C140013 +
             (C61001 - C61002) * C122909 + (C61311 - C61312) * C140014 +
             (C61005 - C61006) * C122910 + (C61313 - C61314) * C122759) *
                C139873) *
               C139809 * C806 +
           (((C55526 - C55525) * C122908 + (C55742 - C55741) * C140013 +
             (C61002 - C61001) * C122909 + (C61312 - C61311) * C140014 +
             (C61006 - C61005) * C122910 + (C61314 - C61313) * C122759) *
                C139983 +
            ((C55530 - C55529) * C122908 + (C55744 - C55743) * C140013 +
             (C86285 - C86284) * C122909 + (C86583 - C86582) * C140014 +
             (C139731 * C13136 - C54790 * C13129) * C122910 +
             (C139731 * C13625 - C54790 * C13621) * C122759) *
                C139873) *
               C139809 * C140000) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eezy[100] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139983 * C183 - C21860 * C108 + C139873 * C896 - C21861 * C813) *
                C122908 +
            (C139983 * C629 - C21860 * C567 + C139873 * C1393 -
             C21861 * C1317) *
                C140013 +
            (C39482 - C39483 + C39484 - C39485) * C122909 +
            (C40332 - C40333 + C40334 - C40335) * C140014 +
            (C46347 - C46346 + C46349 - C46348) * C122910 +
            (C46957 - C46956 + C46959 - C46958) * C122759) *
               C139731 * C139809 * C806 +
           ((C21860 * C813 - C139983 * C896 + C21861 * C2908 -
             C139873 * C2974) *
                C122908 +
            (C21860 * C1317 - C139983 * C1393 + C21861 * C3256 -
             C139873 * C3314) *
                C140013 +
            (C42830 - C42831 + C42832 - C42833) * C122909 +
            (C43662 - C43663 + C43664 - C43665) * C140014 +
            (C21860 * C13126 - C139983 * C13216 + C21861 * C13128 -
             C139873 * C13217) *
                C122910 +
            (C21860 * C13618 - C139983 * C13700 + C21861 * C13620 -
             C139873 * C13701) *
                C122759) *
               C139731 * C139809 * C140000) *
              C808 +
          (((C21864 - C21863 + C21866 - C21865) * C122908 +
            (C22393 - C22392 + C22395 - C22394) * C140013 + C39508 * C122909 +
            C40345 * C140014 + (C39498 - C39499 + C39500 - C39501) * C122910 +
            (C40340 - C40341 + C40342 - C40343) * C122759) *
               C139731 * C139809 * C806 +
           ((C22730 - C22729 + C22732 - C22731) * C122908 +
            (C23401 - C23400 + C23403 - C23402) * C140013 +
            (C38203 - C38202 + C38205 - C38204) * C122909 +
            (C39059 - C39058 + C39061 - C39060) * C140014 +
            (C139983 * C13218 - C21860 * C13127 + C139873 * C13219 -
             C21861 * C13129) *
                C122910 +
            (C139983 * C13702 - C21860 * C13619 + C139873 * C13703 -
             C21861 * C13621) *
                C122759) *
               C139731 * C139809 * C140000) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eezz[100] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C122908 * C266 - C123391 * C108 - C122908 * C567 + C140013 * C702 +
             C122909 * C1741 - C123392 * C1570 - C122909 * C2074 +
             C140014 * C2230 + C122910 * C5397 - C123393 * C5273 -
             C122910 * C5621 + C122759 * C5733) *
                C139983 +
            (C131816 + C131817 + C131818) * C139873) *
               C139731 * C139809 * C806 -
           ((C122910 * C13300 - C123393 * C13128 - C122910 * C13620 +
             C122759 * C13779 + C122909 * C7979 - C123392 * C7754 -
             C122909 * C8422 + C140014 * C8634 + C122908 * C3032 -
             C123391 * C2908 - C122908 * C3256 + C140013 * C3368) *
                C139873 +
            (C131818 + C131817 + C131816) * C139983) *
               C139731 * C139809 * C140000) *
              C808 +
          (((C124357 + C124356 + C124355) * C139983 +
            (C122908 * C3033 - C123391 * C2909 - C122908 * C3257 +
             C140013 * C3369 + C122909 * C7980 - C123392 * C7753 -
             C122909 * C8423 + C140014 * C8633 + C122910 * C13301 -
             C123393 * C13129 - C122910 * C13621 + C122759 * C13781) *
                C139873) *
               C139731 * C139809 * C140000 -
           ((C124355 + C124356 + C124357) * C139873 +
            (C123433 + C123432 + C123431) * C139983) *
               C139731 * C139809 * C806) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexx[101] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C54790 * C114 - C54791 * C108 - C54790 * C115 + C139731 * C126) *
                 C140013 +
             C61654 * C140014 + C61655 * C122759) *
                C139983 +
            (C130990 + C130991 + C130992) * C139873) *
               C1565 -
           ((C64257 * C122759 + C60685 * C140014 + C57671 * C140013) * C139873 +
            (C67012 * C122759 + C61655 * C140014 + C61654 * C140013) *
                C139983) *
               C140002) *
              C139792 * C808 +
          (((C61656 * C140013 + C61657 * C140014 + C109078 * C122759) *
                C139983 +
            (C60686 * C140013 + C60687 * C140014 +
             (C54790 * C18306 - C54791 * C18303 - C54790 * C18307 +
              C139731 * C18309) *
                 C122759) *
                C139873) *
               C140002 -
           ((C130995 + C130994 + C130993) * C139873 +
            (C61657 * C122759 + C61656 * C140014 +
             (C54790 * C116 - C54791 * C109 - C54790 * C117 + C139731 * C127) *
                 C140013) *
                C139983) *
               C1565) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexy[101] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139983 * C183 - C21860 * C108 + C139873 * C896 - C21861 * C813) *
                 C54790 +
             (C139983 * C189 - C21860 * C115 + C139873 * C901 - C21861 * C822) *
                 C139731) *
                C140013 +
            ((C39482 - C39483 + C39484 - C39485) * C54790 +
             (C39486 - C39487 + C39488 - C39489) * C139731) *
                C140014 +
            ((C46347 - C46346 + C46349 - C46348) * C54790 +
             (C46351 - C46350 + C46353 - C46352) * C139731) *
                C122759) *
               C1565 +
           (((C39483 - C39482 + C39485 - C39484) * C54790 +
             (C39487 - C39486 + C39489 - C39488) * C139731) *
                C140013 +
            ((C46346 - C46347 + C46348 - C46349) * C54790 +
             (C46350 - C46351 + C46352 - C46353) * C139731) *
                C140014 +
            ((C21860 * C15623 - C139983 * C15788 + C21861 * C18302 -
              C139873 * C18422) *
                 C54790 +
             (C21860 * C15628 - C139983 * C15791 + C21861 * C18305 -
              C139873 * C18424) *
                 C139731) *
                C122759) *
               C140002) *
              C139792 * C808 +
          ((((C21864 - C21863 + C21866 - C21865) * C54790 +
             (C21868 - C21867 + C21870 - C21869) * C139731) *
                C140013 +
            (C39508 * C54790 + C39509 * C139731) * C140014 +
            ((C39498 - C39499 + C39500 - C39501) * C54790 +
             (C39502 - C39503 + C39504 - C39505) * C139731) *
                C122759) *
               C1565 +
           ((C39506 * C54790 + C39507 * C139731) * C140013 +
            ((C39499 - C39498 + C39501 - C39500) * C54790 +
             (C39503 - C39502 + C39505 - C39504) * C139731) *
                C140014 +
            ((C139983 * C15789 - C21860 * C15622 + C139873 * C18423 -
              C21861 * C18303) *
                 C54790 +
             (C139983 * C15792 - C21860 * C15626 + C139873 * C18425 -
              C21861 * C18307) *
                 C139731) *
                C122759) *
               C140002) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexz[101] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C140013 * C266 - C122908 * C108 + C140014 * C1741 -
              C122909 * C1570 + C122759 * C5397 - C122910 * C5273) *
                 C54790 +
             (C140013 * C272 - C122908 * C115 + C140014 * C1746 -
              C122909 * C1579 + C122759 * C5401 - C122910 * C5278) *
                 C139731) *
                C139983 +
            ((C131192 - C131193 + C131194 - C131195 + C131196 - C131197) *
                 C54790 +
             (C131198 - C131199 + C131200 - C131201 + C131202 - C131203) *
                 C139731) *
                C139873) *
               C1565 +
           (((C122908 * C1570 - C140013 * C1741 + C122909 * C5273 -
              C140014 * C5397 + C122910 * C15623 - C122759 * C15912) *
                 C54790 +
             (C122908 * C1579 - C140013 * C1746 + C122909 * C5278 -
              C140014 * C5401 + C122910 * C15628 - C122759 * C15915) *
                 C139731) *
                C139983 +
            ((C122908 * C3438 - C140013 * C3594 + C122909 * C13126 -
              C140014 * C13298 + C122910 * C18302 - C122759 * C18532) *
                 C54790 +
             (C122908 * C3443 - C140013 * C3598 + C122909 * C13131 -
              C140014 * C13302 + C122910 * C18305 - C122759 * C18534) *
                 C139731) *
                C139873) *
               C140002) *
              C139792 * C808 +
          ((((C122913 - C122912 + C122915 - C122914 + C122917 - C122916) *
                 C54790 +
             (C122919 - C122918 + C122921 - C122920 + C122923 - C122922) *
                 C139731) *
                C139983 +
            ((C123731 - C123732 + C123733 - C123734 + C123735 - C123736) *
                 C54790 +
             (C123737 - C123738 + C123739 - C123740 + C123741 - C123742) *
                 C139731) *
                C139873) *
               C1565 +
           (((C124667 - C124666 + C124669 - C124668 + C124671 - C124670) *
                 C54790 +
             (C124673 - C124672 + C124675 - C124674 + C124677 - C124676) *
                 C139731) *
                C139983 +
            ((C140013 * C3595 - C122908 * C3439 + C140014 * C13299 -
              C122909 * C13127 + C122759 * C18533 - C122910 * C18303) *
                 C54790 +
             (C140013 * C3599 - C122908 * C3445 + C140014 * C13303 -
              C122909 * C13133 + C122759 * C18535 - C122910 * C18307) *
                 C139731) *
                C139873) *
               C140002) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[101] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139731 * C114 - C54790 * C108) * C21860 +
             (C139731 * C354 - C54790 * C348) * C139983 +
             (C55513 - C55514) * C21861 + (C55515 - C55516) * C139873) *
                C140013 +
            ((C61976 - C61977) * C21860 + (C61978 - C61979) * C139983 +
             C64587 * C21861 + C64588 * C139873) *
                C140014 +
            (C67258 * C21860 + C67259 * C139983 + C64589 * C21861 +
             C64590 * C139873) *
                C122759) *
               C1565 +
           (((C61977 - C61976) * C21860 + (C61979 - C61978) * C139983 +
             C64591 * C21861 + C64592 * C139873) *
                C140013 +
            ((C61981 - C61980) * C21860 + (C61983 - C61982) * C139983 +
             C64593 * C21861 + C64594 * C139873) *
                C140014 +
            ((C67262 - C67263) * C21860 + (C67264 - C67265) * C139983 +
             (C64595 - C64596) * C21861 + (C64597 - C64598) * C139873) *
                C122759) *
               C140002) *
              C139792 * C808 +
          ((((C54790 * C109 - C139731 * C116) * C21860 +
             (C54790 * C349 - C139731 * C355) * C139983 +
             (C55525 - C55526) * C21861 + (C55527 - C55528) * C139873) *
                C140013 +
            ((C61984 - C61985) * C21860 + (C61986 - C61987) * C139983 +
             (C61001 - C61002) * C21861 + (C61003 - C61004) * C139873) *
                C140014 +
            ((C61988 - C61989) * C21860 + (C61990 - C61991) * C139983 +
             (C61005 - C61006) * C21861 + (C61007 - C61008) * C139873) *
                C122759) *
               C1565 +
           (((C61985 - C61984) * C21860 + (C61987 - C61986) * C139983 +
             (C61002 - C61001) * C21861 + (C61004 - C61003) * C139873) *
                C140013 +
            ((C61989 - C61988) * C21860 + (C61991 - C61990) * C139983 +
             (C61006 - C61005) * C21861 + (C61008 - C61007) * C139873) *
                C140014 +
            ((C109278 - C109277) * C21860 + (C109280 - C109279) * C139983 +
             (C139731 * C18306 - C54790 * C18303) * C21861 +
             (C139731 * C18637 - C54790 * C18635) * C139873) *
                C122759) *
               C140002) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[101] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C21860 * C183 - C22116 * C108 - C21860 * C348 + C139983 * C411 +
             C21861 * C896 - C22117 * C813 - C21861 * C1072 + C139873 * C1151) *
                C139731 * C140013 +
            (C39934 + C39935) * C139731 * C140014 +
            (C46661 + C46660) * C139731 * C122759) *
               C1565 -
           ((C21861 * C18422 - C22117 * C18302 - C21861 * C18634 +
             C139873 * C18744 + C21860 * C15788 - C22116 * C15623 -
             C21860 * C16028 + C139983 * C16165) *
                C139731 * C122759 +
            (C46660 + C46661) * C139731 * C140014 +
            (C39935 + C39934) * C139731 * C140013) *
               C140002) *
              C139792 * C808 +
          ((C39916 * C139731 * C140013 + (C39937 + C39936) * C139731 * C140014 +
            (C21860 * C15789 - C22116 * C15622 - C21860 * C16029 +
             C139983 * C16164 + C21861 * C18423 - C22117 * C18303 -
             C21861 * C18635 + C139873 * C18745) *
                C139731 * C122759) *
               C140002 -
           ((C39936 + C39937) * C139731 * C122759 + C39925 * C139731 * C140014 +
            (C22156 + C22155) * C139731 * C140013) *
               C1565) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[101] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C140013 * C266 - C122908 * C108 + C140014 * C1741 -
             C122909 * C1570 + C122759 * C5397 - C122910 * C5273) *
                C21860 +
            (C140013 * C495 - C122908 * C348 + C140014 * C1997 -
             C122909 * C1829 + C122759 * C5567 - C122910 * C5455) *
                C139983 +
            (C131192 - C131193 + C131194 - C131195 + C131196 - C131197) *
                C21861 +
            (C131498 - C131499 + C131500 - C131501 + C131502 - C131503) *
                C139873) *
               C139731 * C1565 +
           ((C122908 * C1570 - C140013 * C1741 + C122909 * C5273 -
             C140014 * C5397 + C122910 * C15623 - C122759 * C15912) *
                C21860 +
            (C122908 * C1829 - C140013 * C1997 + C122909 * C5455 -
             C140014 * C5567 + C122910 * C16028 - C122759 * C16294) *
                C139983 +
            (C122908 * C3438 - C140013 * C3594 + C122909 * C13126 -
             C140014 * C13298 + C122910 * C18302 - C122759 * C18532) *
                C21861 +
            (C122908 * C3668 - C140013 * C3812 + C122909 * C13380 -
             C140014 * C13540 + C122910 * C18634 - C122759 * C18862) *
                C139873) *
               C139731 * C140002) *
              C139792 * C808 +
          (((C122913 - C122912 + C122915 - C122914 + C122917 - C122916) *
                C21860 +
            (C123159 - C123158 + C123161 - C123160 + C123163 - C123162) *
                C139983 +
            (C123731 - C123732 + C123733 - C123734 + C123735 - C123736) *
                C21861 +
            (C124037 - C124038 + C124039 - C124040 + C124041 - C124042) *
                C139873) *
               C139731 * C1565 +
           ((C124667 - C124666 + C124669 - C124668 + C124671 - C124670) *
                C21860 +
            (C124989 - C124988 + C124991 - C124990 + C124993 - C124992) *
                C139983 +
            (C140013 * C3595 - C122908 * C3439 + C140014 * C13299 -
             C122909 * C13127 + C122759 * C18533 - C122910 * C18303) *
                C21861 +
            (C140013 * C3813 - C122908 * C3669 + C140014 * C13542 -
             C122909 * C13381 + C122759 * C18863 - C122910 * C18635) *
                C139873) *
               C139731 * C140002) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eezx[101] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139731 * C114 - C54790 * C108) * C122908 +
             (C139731 * C573 - C54790 * C567) * C140013 +
             (C61976 - C61977) * C122909 + (C62328 - C62329) * C140014 +
             C67258 * C122910 + C67513 * C122759) *
                C139983 +
            ((C55513 - C55514) * C122908 + (C55735 - C55736) * C140013 +
             C64587 * C122909 + C64931 * C140014 + C64589 * C122910 +
             C64932 * C122759) *
                C139873) *
               C1565 +
           (((C61977 - C61976) * C122908 + (C62329 - C62328) * C140013 +
             (C61981 - C61980) * C122909 + (C62331 - C62330) * C140014 +
             (C67262 - C67263) * C122910 + (C67514 - C67515) * C122759) *
                C139983 +
            (C64591 * C122908 + C64933 * C140013 + C64593 * C122909 +
             C64934 * C140014 + (C64595 - C64596) * C122910 +
             (C64935 - C64936) * C122759) *
                C139873) *
               C140002) *
              C139792 * C808 +
          ((((C54790 * C109 - C139731 * C116) * C122908 +
             (C54790 * C568 - C139731 * C574) * C140013 +
             (C61984 - C61985) * C122909 + (C62332 - C62333) * C140014 +
             (C61988 - C61989) * C122910 + (C62334 - C62335) * C122759) *
                C139983 +
            ((C55525 - C55526) * C122908 + (C55741 - C55742) * C140013 +
             (C61001 - C61002) * C122909 + (C61311 - C61312) * C140014 +
             (C61005 - C61006) * C122910 + (C61313 - C61314) * C122759) *
                C139873) *
               C1565 +
           (((C61985 - C61984) * C122908 + (C62333 - C62332) * C140013 +
             (C61989 - C61988) * C122909 + (C62335 - C62334) * C140014 +
             (C109278 - C109277) * C122910 + (C109486 - C109485) * C122759) *
                C139983 +
            ((C61002 - C61001) * C122908 + (C61312 - C61311) * C140013 +
             (C61006 - C61005) * C122909 + (C61314 - C61313) * C140014 +
             (C139731 * C18306 - C54790 * C18303) * C122910 +
             (C139731 * C18965 - C54790 * C18963) * C122759) *
                C139873) *
               C140002) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eezy[101] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139983 * C183 - C21860 * C108 + C139873 * C896 - C21861 * C813) *
                C122908 +
            (C139983 * C629 - C21860 * C567 + C139873 * C1393 -
             C21861 * C1317) *
                C140013 +
            (C39482 - C39483 + C39484 - C39485) * C122909 +
            (C40332 - C40333 + C40334 - C40335) * C140014 +
            (C46347 - C46346 + C46349 - C46348) * C122910 +
            (C46957 - C46956 + C46959 - C46958) * C122759) *
               C139731 * C1565 +
           ((C39483 - C39482 + C39485 - C39484) * C122908 +
            (C40333 - C40332 + C40335 - C40334) * C140013 +
            (C46346 - C46347 + C46348 - C46349) * C122909 +
            (C46956 - C46957 + C46958 - C46959) * C140014 +
            (C21860 * C15623 - C139983 * C15788 + C21861 * C18302 -
             C139873 * C18422) *
                C122910 +
            (C21860 * C16401 - C139983 * C16521 + C21861 * C18962 -
             C139873 * C19068) *
                C122759) *
               C139731 * C140002) *
              C139792 * C808 +
          (((C21864 - C21863 + C21866 - C21865) * C122908 +
            (C22393 - C22392 + C22395 - C22394) * C140013 + C39508 * C122909 +
            C40345 * C140014 + (C39498 - C39499 + C39500 - C39501) * C122910 +
            (C40340 - C40341 + C40342 - C40343) * C122759) *
               C139731 * C1565 +
           (C39506 * C122908 + C40344 * C140013 +
            (C39499 - C39498 + C39501 - C39500) * C122909 +
            (C40341 - C40340 + C40343 - C40342) * C140014 +
            (C139983 * C15789 - C21860 * C15622 + C139873 * C18423 -
             C21861 * C18303) *
                C122910 +
            (C139983 * C16522 - C21860 * C16402 + C139873 * C19069 -
             C21861 * C18963) *
                C122759) *
               C139731 * C140002) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eezz[101] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C122908 * C266 - C123391 * C108 - C122908 * C567 + C140013 * C702 +
             C122909 * C1741 - C123392 * C1570 - C122909 * C2074 +
             C140014 * C2230 + C122910 * C5397 - C123393 * C5273 -
             C122910 * C5621 + C122759 * C5733) *
                C139983 +
            (C131816 + C131817 + C131818) * C139873) *
               C139731 * C1565 -
           ((C122910 * C18532 - C123393 * C18302 - C122910 * C18962 +
             C122759 * C19172 + C122909 * C13298 - C123392 * C13126 -
             C122909 * C13618 + C140014 * C13778 + C122908 * C3594 -
             C123391 * C3438 - C122908 * C3882 + C140013 * C4026) *
                C139873 +
            (C122910 * C15912 - C123393 * C15623 - C122910 * C16401 +
             C122759 * C16633 + C122909 * C5397 - C123392 * C5273 -
             C122909 * C5621 + C140014 * C5733 + C122908 * C1741 -
             C123391 * C1570 - C122908 * C2074 + C140013 * C2230) *
                C139983) *
               C139731 * C140002) *
              C139792 * C808 +
          (((C125312 + C125311 + C125310) * C139983 +
            (C122908 * C3595 - C123391 * C3439 - C122908 * C3883 +
             C140013 * C4027 + C122909 * C13299 - C123392 * C13127 -
             C122909 * C13619 + C140014 * C13780 + C122910 * C18533 -
             C123393 * C18303 - C122910 * C18963 + C122759 * C19173) *
                C139873) *
               C139731 * C140002 -
           ((C124355 + C124356 + C124357) * C139873 +
            (C123433 + C123432 + C123431) * C139983) *
               C139731 * C1565) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexx[102] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C54790 * C114 - C54791 * C108 - C54790 * C115 + C139731 * C126) *
                 C140013 +
             C61654 * C140014 + C61655 * C122759) *
                C139983 +
            (C130990 + C130991 + C130992) * C139873) *
               C139809 * C2322 -
           ((C63508 * C122759 + C57670 * C140014 + C55304 * C140013) * C139873 +
            (C130992 + C130991 + C130990) * C139983) *
               C139809 * C140000) *
              C2324 +
          (((C130993 + C130994 + C130995) * C139983 +
            (C55307 * C140013 + C85988 * C140014 +
             (C54790 * C13136 - C54791 * C13129 - C54790 * C13137 +
              C139731 * C13141) *
                 C122759) *
                C139873) *
               C139809 * C140000 -
           ((C130995 + C130994 + C130993) * C139873 +
            (C61657 * C122759 + C61656 * C140014 +
             (C54790 * C116 - C54791 * C109 - C54790 * C117 + C139731 * C127) *
                 C140013) *
                C139983) *
               C139809 * C2322) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexy[102] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139983 * C183 - C21860 * C108 + C139873 * C896 - C21861 * C813) *
                 C54790 +
             (C139983 * C189 - C21860 * C115 + C139873 * C901 - C21861 * C822) *
                 C139731) *
                C140013 +
            ((C39482 - C39483 + C39484 - C39485) * C54790 +
             (C39486 - C39487 + C39488 - C39489) * C139731) *
                C140014 +
            ((C46347 - C46346 + C46349 - C46348) * C54790 +
             (C46351 - C46350 + C46353 - C46352) * C139731) *
                C122759) *
               C139809 * C2322 +
           (((C21860 * C813 - C139983 * C896 + C21861 * C2908 -
              C139873 * C2974) *
                 C54790 +
             (C21860 * C822 - C139983 * C901 + C21861 * C2913 -
              C139873 * C2978) *
                 C139731) *
                C140013 +
            ((C42830 - C42831 + C42832 - C42833) * C54790 +
             (C42834 - C42835 + C42836 - C42837) * C139731) *
                C140014 +
            ((C21860 * C13126 - C139983 * C13216 + C21861 * C13128 -
              C139873 * C13217) *
                 C54790 +
             (C21860 * C13131 - C139983 * C13220 + C21861 * C13135 -
              C139873 * C13221) *
                 C139731) *
                C122759) *
               C139809 * C140000) *
              C2324 +
          ((((C21864 - C21863 + C21866 - C21865) * C54790 +
             (C21868 - C21867 + C21870 - C21869) * C139731) *
                C140013 +
            (C39508 * C54790 + C39509 * C139731) * C140014 +
            ((C39498 - C39499 + C39500 - C39501) * C54790 +
             (C39502 - C39503 + C39504 - C39505) * C139731) *
                C122759) *
               C139809 * C2322 +
           (((C22730 - C22729 + C22732 - C22731) * C54790 +
             (C22734 - C22733 + C22736 - C22735) * C139731) *
                C140013 +
            ((C38203 - C38202 + C38205 - C38204) * C54790 +
             (C38207 - C38206 + C38209 - C38208) * C139731) *
                C140014 +
            ((C139983 * C13218 - C21860 * C13127 + C139873 * C13219 -
              C21861 * C13129) *
                 C54790 +
             (C139983 * C13222 - C21860 * C13133 + C139873 * C13223 -
              C21861 * C13137) *
                 C139731) *
                C122759) *
               C139809 * C140000) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexz[102] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C140013 * C266 - C122908 * C108 + C140014 * C1741 -
              C122909 * C1570 + C122759 * C5397 - C122910 * C5273) *
                 C54790 +
             (C140013 * C272 - C122908 * C115 + C140014 * C1746 -
              C122909 * C1579 + C122759 * C5401 - C122910 * C5278) *
                 C139731) *
                C139983 +
            ((C131192 - C131193 + C131194 - C131195 + C131196 - C131197) *
                 C54790 +
             (C131198 - C131199 + C131200 - C131201 + C131202 - C131203) *
                 C139731) *
                C139873) *
               C139809 * C2322 +
           (((C131193 - C131192 + C131195 - C131194 + C131197 - C131196) *
                 C54790 +
             (C131199 - C131198 + C131201 - C131200 + C131203 - C131202) *
                 C139731) *
                C139983 +
            ((C122908 * C2908 - C140013 * C3032 + C122909 * C7754 -
              C140014 * C7979 + C122910 * C13128 - C122759 * C13300) *
                 C54790 +
             (C122908 * C2913 - C140013 * C3036 + C122909 * C7759 -
              C140014 * C7982 + C122910 * C13135 - C122759 * C13304) *
                 C139731) *
                C139873) *
               C139809 * C140000) *
              C2324 +
          ((((C122913 - C122912 + C122915 - C122914 + C122917 - C122916) *
                 C54790 +
             (C122919 - C122918 + C122921 - C122920 + C122923 - C122922) *
                 C139731) *
                C139983 +
            ((C123731 - C123732 + C123733 - C123734 + C123735 - C123736) *
                 C54790 +
             (C123737 - C123738 + C123739 - C123740 + C123741 - C123742) *
                 C139731) *
                C139873) *
               C139809 * C2322 +
           (((C123732 - C123731 + C123734 - C123733 + C123736 - C123735) *
                 C54790 +
             (C123738 - C123737 + C123740 - C123739 + C123742 - C123741) *
                 C139731) *
                C139983 +
            ((C140013 * C3033 - C122908 * C2909 + C140014 * C7980 -
              C122909 * C7753 + C122759 * C13301 - C122910 * C13129) *
                 C54790 +
             (C140013 * C3037 - C122908 * C2915 + C140014 * C7983 -
              C122909 * C7757 + C122759 * C13305 - C122910 * C13137) *
                 C139731) *
                C139873) *
               C139809 * C140000) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[102] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139731 * C114 - C54790 * C108) * C21860 +
             (C139731 * C354 - C54790 * C348) * C139983 +
             (C55513 - C55514) * C21861 + (C55515 - C55516) * C139873) *
                C140013 +
            ((C61976 - C61977) * C21860 + (C61978 - C61979) * C139983 +
             C64587 * C21861 + C64588 * C139873) *
                C140014 +
            (C67258 * C21860 + C67259 * C139983 + C64589 * C21861 +
             C64590 * C139873) *
                C122759) *
               C139809 * C2322 +
           (((C55514 - C55513) * C21860 + (C55516 - C55515) * C139983 +
             (C55518 - C55517) * C21861 + (C55520 - C55519) * C139873) *
                C140013 +
            (C64591 * C21860 + C64592 * C139983 + C89717 * C21861 +
             C89718 * C139873) *
                C140014 +
            (C64593 * C21860 + C64594 * C139983 + (C63744 - C63745) * C21861 +
             (C63746 - C63747) * C139873) *
                C122759) *
               C139809 * C140000) *
              C2324 +
          ((((C54790 * C109 - C139731 * C116) * C21860 +
             (C54790 * C349 - C139731 * C355) * C139983 +
             (C55525 - C55526) * C21861 + (C55527 - C55528) * C139873) *
                C140013 +
            ((C61984 - C61985) * C21860 + (C61986 - C61987) * C139983 +
             (C61001 - C61002) * C21861 + (C61003 - C61004) * C139873) *
                C140014 +
            ((C61988 - C61989) * C21860 + (C61990 - C61991) * C139983 +
             (C61005 - C61006) * C21861 + (C61007 - C61008) * C139873) *
                C122759) *
               C139809 * C2322 +
           (((C55526 - C55525) * C21860 + (C55528 - C55527) * C139983 +
             (C55530 - C55529) * C21861 + (C55532 - C55531) * C139873) *
                C140013 +
            ((C61002 - C61001) * C21860 + (C61004 - C61003) * C139983 +
             (C86285 - C86284) * C21861 + (C86287 - C86286) * C139873) *
                C140014 +
            ((C61006 - C61005) * C21860 + (C61008 - C61007) * C139983 +
             (C139731 * C13136 - C54790 * C13129) * C21861 +
             (C139731 * C13387 - C54790 * C13383) * C139873) *
                C122759) *
               C139809 * C140000) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[102] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C21860 * C183 - C22116 * C108 - C21860 * C348 + C139983 * C411 +
             C21861 * C896 - C22117 * C813 - C21861 * C1072 + C139873 * C1151) *
                C139731 * C140013 +
            (C39934 + C39935) * C139731 * C140014 +
            (C46661 + C46660) * C139731 * C122759) *
               C139809 * C2322 -
           ((C21861 * C13217 - C22117 * C13128 - C21861 * C13382 +
             C139873 * C13463 + C21860 * C13216 - C22116 * C13126 -
             C21860 * C13380 + C139983 * C13462) *
                C139731 * C122759 +
            (C43261 + C43260) * C139731 * C140014 +
            (C21861 * C2974 - C22117 * C2908 - C21861 * C3090 +
             C139873 * C3148 + C21860 * C896 - C22116 * C813 - C21860 * C1072 +
             C139983 * C1151) *
                C139731 * C140013) *
               C139809 * C140000) *
              C2324 +
          (((C23092 + C23091) * C139731 * C140013 +
            (C38649 + C38648) * C139731 * C140014 +
            (C21860 * C13218 - C22116 * C13127 - C21860 * C13381 +
             C139983 * C13464 + C21861 * C13219 - C22117 * C13129 -
             C21861 * C13383 + C139873 * C13465) *
                C139731 * C122759) *
               C139809 * C140000 -
           ((C39936 + C39937) * C139731 * C122759 + C39925 * C139731 * C140014 +
            (C22156 + C22155) * C139731 * C140013) *
               C139809 * C2322) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[102] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C140013 * C266 - C122908 * C108 + C140014 * C1741 -
             C122909 * C1570 + C122759 * C5397 - C122910 * C5273) *
                C21860 +
            (C140013 * C495 - C122908 * C348 + C140014 * C1997 -
             C122909 * C1829 + C122759 * C5567 - C122910 * C5455) *
                C139983 +
            (C131192 - C131193 + C131194 - C131195 + C131196 - C131197) *
                C21861 +
            (C131498 - C131499 + C131500 - C131501 + C131502 - C131503) *
                C139873) *
               C139731 * C139809 * C2322 +
           ((C131193 - C131192 + C131195 - C131194 + C131197 - C131196) *
                C21860 +
            (C131499 - C131498 + C131501 - C131500 + C131503 - C131502) *
                C139983 +
            (C122908 * C2908 - C140013 * C3032 + C122909 * C7754 -
             C140014 * C7979 + C122910 * C13128 - C122759 * C13300) *
                C21861 +
            (C122908 * C3090 - C140013 * C3202 + C122909 * C8091 -
             C140014 * C8317 + C122910 * C13382 - C122759 * C13541) *
                C139873) *
               C139731 * C139809 * C140000) *
              C2324 +
          (((C122913 - C122912 + C122915 - C122914 + C122917 - C122916) *
                C21860 +
            (C123159 - C123158 + C123161 - C123160 + C123163 - C123162) *
                C139983 +
            (C123731 - C123732 + C123733 - C123734 + C123735 - C123736) *
                C21861 +
            (C124037 - C124038 + C124039 - C124040 + C124041 - C124042) *
                C139873) *
               C139731 * C139809 * C2322 +
           ((C123732 - C123731 + C123734 - C123733 + C123736 - C123735) *
                C21860 +
            (C124038 - C124037 + C124040 - C124039 + C124042 - C124041) *
                C139983 +
            (C140013 * C3033 - C122908 * C2909 + C140014 * C7980 -
             C122909 * C7753 + C122759 * C13301 - C122910 * C13129) *
                C21861 +
            (C140013 * C3203 - C122908 * C3091 + C140014 * C8318 -
             C122909 * C8092 + C122759 * C13543 - C122910 * C13383) *
                C139873) *
               C139731 * C139809 * C140000) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eezx[102] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139731 * C114 - C54790 * C108) * C122908 +
             (C139731 * C573 - C54790 * C567) * C140013 +
             (C61976 - C61977) * C122909 + (C62328 - C62329) * C140014 +
             C67258 * C122910 + C67513 * C122759) *
                C139983 +
            ((C55513 - C55514) * C122908 + (C55735 - C55736) * C140013 +
             C64587 * C122909 + C64931 * C140014 + C64589 * C122910 +
             C64932 * C122759) *
                C139873) *
               C139809 * C2322 +
           (((C55514 - C55513) * C122908 + (C55736 - C55735) * C140013 +
             C64591 * C122909 + C64933 * C140014 + C64593 * C122910 +
             C64934 * C122759) *
                C139983 +
            ((C55518 - C55517) * C122908 + (C55738 - C55737) * C140013 +
             C89717 * C122909 + C90038 * C140014 + (C63744 - C63745) * C122910 +
             (C63976 - C63977) * C122759) *
                C139873) *
               C139809 * C140000) *
              C2324 +
          ((((C54790 * C109 - C139731 * C116) * C122908 +
             (C54790 * C568 - C139731 * C574) * C140013 +
             (C61984 - C61985) * C122909 + (C62332 - C62333) * C140014 +
             (C61988 - C61989) * C122910 + (C62334 - C62335) * C122759) *
                C139983 +
            ((C55525 - C55526) * C122908 + (C55741 - C55742) * C140013 +
             (C61001 - C61002) * C122909 + (C61311 - C61312) * C140014 +
             (C61005 - C61006) * C122910 + (C61313 - C61314) * C122759) *
                C139873) *
               C139809 * C2322 +
           (((C55526 - C55525) * C122908 + (C55742 - C55741) * C140013 +
             (C61002 - C61001) * C122909 + (C61312 - C61311) * C140014 +
             (C61006 - C61005) * C122910 + (C61314 - C61313) * C122759) *
                C139983 +
            ((C55530 - C55529) * C122908 + (C55744 - C55743) * C140013 +
             (C86285 - C86284) * C122909 + (C86583 - C86582) * C140014 +
             (C139731 * C13136 - C54790 * C13129) * C122910 +
             (C139731 * C13625 - C54790 * C13621) * C122759) *
                C139873) *
               C139809 * C140000) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eezy[102] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139983 * C183 - C21860 * C108 + C139873 * C896 - C21861 * C813) *
                C122908 +
            (C139983 * C629 - C21860 * C567 + C139873 * C1393 -
             C21861 * C1317) *
                C140013 +
            (C39482 - C39483 + C39484 - C39485) * C122909 +
            (C40332 - C40333 + C40334 - C40335) * C140014 +
            (C46347 - C46346 + C46349 - C46348) * C122910 +
            (C46957 - C46956 + C46959 - C46958) * C122759) *
               C139731 * C139809 * C2322 +
           ((C21860 * C813 - C139983 * C896 + C21861 * C2908 -
             C139873 * C2974) *
                C122908 +
            (C21860 * C1317 - C139983 * C1393 + C21861 * C3256 -
             C139873 * C3314) *
                C140013 +
            (C42830 - C42831 + C42832 - C42833) * C122909 +
            (C43662 - C43663 + C43664 - C43665) * C140014 +
            (C21860 * C13126 - C139983 * C13216 + C21861 * C13128 -
             C139873 * C13217) *
                C122910 +
            (C21860 * C13618 - C139983 * C13700 + C21861 * C13620 -
             C139873 * C13701) *
                C122759) *
               C139731 * C139809 * C140000) *
              C2324 +
          (((C21864 - C21863 + C21866 - C21865) * C122908 +
            (C22393 - C22392 + C22395 - C22394) * C140013 + C39508 * C122909 +
            C40345 * C140014 + (C39498 - C39499 + C39500 - C39501) * C122910 +
            (C40340 - C40341 + C40342 - C40343) * C122759) *
               C139731 * C139809 * C2322 +
           ((C22730 - C22729 + C22732 - C22731) * C122908 +
            (C23401 - C23400 + C23403 - C23402) * C140013 +
            (C38203 - C38202 + C38205 - C38204) * C122909 +
            (C39059 - C39058 + C39061 - C39060) * C140014 +
            (C139983 * C13218 - C21860 * C13127 + C139873 * C13219 -
             C21861 * C13129) *
                C122910 +
            (C139983 * C13702 - C21860 * C13619 + C139873 * C13703 -
             C21861 * C13621) *
                C122759) *
               C139731 * C139809 * C140000) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eezz[102] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C122908 * C266 - C123391 * C108 - C122908 * C567 + C140013 * C702 +
             C122909 * C1741 - C123392 * C1570 - C122909 * C2074 +
             C140014 * C2230 + C122910 * C5397 - C123393 * C5273 -
             C122910 * C5621 + C122759 * C5733) *
                C139983 +
            (C131816 + C131817 + C131818) * C139873) *
               C139731 * C139809 * C2322 -
           ((C122910 * C13300 - C123393 * C13128 - C122910 * C13620 +
             C122759 * C13779 + C122909 * C7979 - C123392 * C7754 -
             C122909 * C8422 + C140014 * C8634 + C122908 * C3032 -
             C123391 * C2908 - C122908 * C3256 + C140013 * C3368) *
                C139873 +
            (C131818 + C131817 + C131816) * C139983) *
               C139731 * C139809 * C140000) *
              C2324 +
          (((C124357 + C124356 + C124355) * C139983 +
            (C122908 * C3033 - C123391 * C2909 - C122908 * C3257 +
             C140013 * C3369 + C122909 * C7980 - C123392 * C7753 -
             C122909 * C8423 + C140014 * C8633 + C122910 * C13301 -
             C123393 * C13129 - C122910 * C13621 + C122759 * C13781) *
                C139873) *
               C139731 * C139809 * C140000 -
           ((C124355 + C124356 + C124357) * C139873 +
            (C123433 + C123432 + C123431) * C139983) *
               C139731 * C139809 * C2322) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexx[103] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C54790 * C114 - C54791 * C108 - C54790 * C115 + C139731 * C126) *
                C140013 +
            C61654 * C140014 + C61655 * C122759) *
               C139983 +
           (C130990 + C130991 + C130992) * C139873) *
              C139809 * C2904 -
          ((C133657 + C133658 + C133659) * C139873 +
           (C130992 + C130991 + C130990) * C139983) *
              C139809 * C2905 +
          ((C133659 + C133658 + C133657) * C139983 +
           (C55305 * C140013 + C57669 * C140014 +
            (C54790 * C59484 - C54791 * C59483 - C54790 * C59485 +
             C139731 * C59486) *
                C122759) *
               C139873) *
              C139809 * C2906) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eexy[103] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139983 * C183 - C21860 * C108 + C139873 * C896 - C21861 * C813) *
                C54790 +
            (C139983 * C189 - C21860 * C115 + C139873 * C901 - C21861 * C822) *
                C139731) *
               C140013 +
           ((C39482 - C39483 + C39484 - C39485) * C54790 +
            (C39486 - C39487 + C39488 - C39489) * C139731) *
               C140014 +
           ((C46347 - C46346 + C46349 - C46348) * C54790 +
            (C46351 - C46350 + C46353 - C46352) * C139731) *
               C122759) *
              C139809 * C2904 +
          (((C21860 * C813 - C139983 * C896 + C21861 * C2908 -
             C139873 * C2974) *
                C54790 +
            (C21860 * C822 - C139983 * C901 + C21861 * C2913 -
             C139873 * C2978) *
                C139731) *
               C140013 +
           ((C42830 - C42831 + C42832 - C42833) * C54790 +
            (C42834 - C42835 + C42836 - C42837) * C139731) *
               C140014 +
           ((C21860 * C13126 - C139983 * C13216 + C21861 * C13128 -
             C139873 * C13217) *
                C54790 +
            (C21860 * C13131 - C139983 * C13220 + C21861 * C13135 -
             C139873 * C13221) *
                C139731) *
               C122759) *
              C139809 * C2905 +
          (((C139983 * C2974 - C21860 * C2908 + C139873 * C6792 -
             C21861 * C6627) *
                C54790 +
            (C139983 * C2978 - C21860 * C2913 + C139873 * C6795 -
             C21861 * C6632) *
                C139731) *
               C140013 +
           ((C139983 * C7863 - C21860 * C7754 + C139873 * C10528 -
             C21861 * C10394) *
                C54790 +
            (C139983 * C7866 - C21860 * C7759 + C139873 * C10530 -
             C21861 * C10397) *
                C139731) *
               C140014 +
           ((C139983 * C13217 - C21860 * C13128 + C139873 * C59537 -
             C21861 * C59483) *
                C54790 +
            (C139983 * C13221 - C21860 * C13135 + C139873 * C59538 -
             C21861 * C59485) *
                C139731) *
               C122759) *
              C139809 * C2906) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eexz[103] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C140013 * C266 - C122908 * C108 + C140014 * C1741 -
             C122909 * C1570 + C122759 * C5397 - C122910 * C5273) *
                C54790 +
            (C140013 * C272 - C122908 * C115 + C140014 * C1746 -
             C122909 * C1579 + C122759 * C5401 - C122910 * C5278) *
                C139731) *
               C139983 +
           ((C131192 - C131193 + C131194 - C131195 + C131196 - C131197) *
                C54790 +
            (C131198 - C131199 + C131200 - C131201 + C131202 - C131203) *
                C139731) *
               C139873) *
              C139809 * C2904 +
          (((C131193 - C131192 + C131195 - C131194 + C131197 - C131196) *
                C54790 +
            (C131199 - C131198 + C131201 - C131200 + C131203 - C131202) *
                C139731) *
               C139983 +
           ((C133808 - C133809 + C133810 - C133811 + C133812 - C133813) *
                C54790 +
            (C133814 - C133815 + C133816 - C133817 + C133818 - C133819) *
                C139731) *
               C139873) *
              C139809 * C2905 +
          (((C133809 - C133808 + C133811 - C133810 + C133813 - C133812) *
                C54790 +
            (C133815 - C133814 + C133817 - C133816 + C133819 - C133818) *
                C139731) *
               C139983 +
           ((C140013 * C6908 - C122908 * C6627 + C140014 * C10630 -
             C122909 * C10394 + C122759 * C59589 - C122910 * C59483) *
                C54790 +
            (C140013 * C6911 - C122908 * C6632 + C140014 * C10632 -
             C122909 * C10397 + C122759 * C59590 - C122910 * C59485) *
                C139731) *
               C139873) *
              C139809 * C2906) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eeyx[103] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139731 * C114 - C54790 * C108) * C21860 +
            (C139731 * C354 - C54790 * C348) * C139983 +
            (C55513 - C55514) * C21861 + (C55515 - C55516) * C139873) *
               C140013 +
           ((C61976 - C61977) * C21860 + (C61978 - C61979) * C139983 +
            C64587 * C21861 + C64588 * C139873) *
               C140014 +
           (C67258 * C21860 + C67259 * C139983 + C64589 * C21861 +
            C64590 * C139873) *
               C122759) *
              C139809 * C2904 +
          (((C55514 - C55513) * C21860 + (C55516 - C55515) * C139983 +
            (C55518 - C55517) * C21861 + (C55520 - C55519) * C139873) *
               C140013 +
           (C64591 * C21860 + C64592 * C139983 + C89717 * C21861 +
            C89718 * C139873) *
               C140014 +
           (C64593 * C21860 + C64594 * C139983 + (C63744 - C63745) * C21861 +
            (C63746 - C63747) * C139873) *
               C122759) *
              C139809 * C2905 +
          ((C57297 * C21860 + C57298 * C139983 + C57299 * C21861 +
            C57300 * C139873) *
               C140013 +
           (C88899 * C21860 + C88900 * C139983 + (C57892 - C57891) * C21861 +
            (C57894 - C57893) * C139873) *
               C140014 +
           ((C63745 - C63744) * C21860 + (C63747 - C63746) * C139983 +
            (C139731 * C59484 - C54790 * C59483) * C21861 +
            (C139731 * C59642 - C54790 * C59641) * C139873) *
               C122759) *
              C139809 * C2906) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eeyy[103] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C21860 * C183 - C22116 * C108 - C21860 * C348 + C139983 * C411 +
            C21861 * C896 - C22117 * C813 - C21861 * C1072 + C139873 * C1151) *
               C139731 * C140013 +
           (C39934 + C39935) * C139731 * C140014 +
           (C46661 + C46660) * C139731 * C122759) *
              C139809 * C2904 -
          ((C21861 * C13217 - C22117 * C13128 - C21861 * C13382 +
            C139873 * C13463 + C21860 * C13216 - C22116 * C13126 -
            C21860 * C13380 + C139983 * C13462) *
               C139731 * C122759 +
           (C43261 + C43260) * C139731 * C140014 +
           (C21861 * C2974 - C22117 * C2908 - C21861 * C3090 + C139873 * C3148 +
            C21860 * C896 - C22116 * C813 - C21860 * C1072 + C139983 * C1151) *
               C139731 * C140013) *
              C139809 * C2905 +
          ((C21860 * C2974 - C22116 * C2908 - C21860 * C3090 + C139983 * C3148 +
            C21861 * C6792 - C22117 * C6627 - C21861 * C7032 +
            C139873 * C7169) *
               C139731 * C140013 +
           (C21860 * C7863 - C22116 * C7754 - C21860 * C8091 + C139983 * C8196 +
            C21861 * C10528 - C22117 * C10394 - C21861 * C10740 +
            C139873 * C10858) *
               C139731 * C140014 +
           (C21860 * C13217 - C22116 * C13128 - C21860 * C13382 +
            C139983 * C13463 + C21861 * C59537 - C22117 * C59483 -
            C21861 * C59641 + C139873 * C59693) *
               C139731 * C122759) *
              C139809 * C2906) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eeyz[103] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C140013 * C266 - C122908 * C108 + C140014 * C1741 -
            C122909 * C1570 + C122759 * C5397 - C122910 * C5273) *
               C21860 +
           (C140013 * C495 - C122908 * C348 + C140014 * C1997 -
            C122909 * C1829 + C122759 * C5567 - C122910 * C5455) *
               C139983 +
           (C131192 - C131193 + C131194 - C131195 + C131196 - C131197) *
               C21861 +
           (C131498 - C131499 + C131500 - C131501 + C131502 - C131503) *
               C139873) *
              C139731 * C139809 * C2904 +
          ((C131193 - C131192 + C131195 - C131194 + C131197 - C131196) *
               C21860 +
           (C131499 - C131498 + C131501 - C131500 + C131503 - C131502) *
               C139983 +
           (C133808 - C133809 + C133810 - C133811 + C133812 - C133813) *
               C21861 +
           (C134042 - C134043 + C134044 - C134045 + C134046 - C134047) *
               C139873) *
              C139731 * C139809 * C2905 +
          ((C133809 - C133808 + C133811 - C133810 + C133813 - C133812) *
               C21860 +
           (C134043 - C134042 + C134045 - C134044 + C134047 - C134046) *
               C139983 +
           (C140013 * C6908 - C122908 * C6627 + C140014 * C10630 -
            C122909 * C10394 + C122759 * C59589 - C122910 * C59483) *
               C21861 +
           (C140013 * C7290 - C122908 * C7032 + C140014 * C10958 -
            C122909 * C10740 + C122759 * C59744 - C122910 * C59641) *
               C139873) *
              C139731 * C139809 * C2906) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eezx[103] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139731 * C114 - C54790 * C108) * C122908 +
            (C139731 * C573 - C54790 * C567) * C140013 +
            (C61976 - C61977) * C122909 + (C62328 - C62329) * C140014 +
            C67258 * C122910 + C67513 * C122759) *
               C139983 +
           ((C55513 - C55514) * C122908 + (C55735 - C55736) * C140013 +
            C64587 * C122909 + C64931 * C140014 + C64589 * C122910 +
            C64932 * C122759) *
               C139873) *
              C139809 * C2904 +
          (((C55514 - C55513) * C122908 + (C55736 - C55735) * C140013 +
            C64591 * C122909 + C64933 * C140014 + C64593 * C122910 +
            C64934 * C122759) *
               C139983 +
           ((C55518 - C55517) * C122908 + (C55738 - C55737) * C140013 +
            C89717 * C122909 + C90038 * C140014 + (C63744 - C63745) * C122910 +
            (C63976 - C63977) * C122759) *
               C139873) *
              C139809 * C2905 +
          ((C57297 * C122908 + C57463 * C140013 + C88899 * C122909 +
            C89133 * C140014 + (C63745 - C63744) * C122910 +
            (C63977 - C63976) * C122759) *
               C139983 +
           (C57299 * C122908 + C57465 * C140013 + (C57892 - C57891) * C122909 +
            (C58104 - C58103) * C140014 +
            (C139731 * C59484 - C54790 * C59483) * C122910 +
            (C139731 * C59796 - C54790 * C59795) * C122759) *
               C139873) *
              C139809 * C2906) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eezy[103] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C139983 * C183 - C21860 * C108 + C139873 * C896 - C21861 * C813) *
               C122908 +
           (C139983 * C629 - C21860 * C567 + C139873 * C1393 - C21861 * C1317) *
               C140013 +
           (C39482 - C39483 + C39484 - C39485) * C122909 +
           (C40332 - C40333 + C40334 - C40335) * C140014 +
           (C46347 - C46346 + C46349 - C46348) * C122910 +
           (C46957 - C46956 + C46959 - C46958) * C122759) *
              C139731 * C139809 * C2904 +
          ((C21860 * C813 - C139983 * C896 + C21861 * C2908 - C139873 * C2974) *
               C122908 +
           (C21860 * C1317 - C139983 * C1393 + C21861 * C3256 -
            C139873 * C3314) *
               C140013 +
           (C42830 - C42831 + C42832 - C42833) * C122909 +
           (C43662 - C43663 + C43664 - C43665) * C140014 +
           (C21860 * C13126 - C139983 * C13216 + C21861 * C13128 -
            C139873 * C13217) *
               C122910 +
           (C21860 * C13618 - C139983 * C13700 + C21861 * C13620 -
            C139873 * C13701) *
               C122759) *
              C139731 * C139809 * C2905 +
          ((C139983 * C2974 - C21860 * C2908 + C139873 * C6792 -
            C21861 * C6627) *
               C122908 +
           (C139983 * C3314 - C21860 * C3256 + C139873 * C7521 -
            C21861 * C7401) *
               C140013 +
           (C139983 * C7863 - C21860 * C7754 + C139873 * C10528 -
            C21861 * C10394) *
               C122909 +
           (C139983 * C8526 - C21860 * C8422 + C139873 * C11172 -
            C21861 * C11062) *
               C140014 +
           (C139983 * C13217 - C21860 * C13128 + C139873 * C59537 -
            C21861 * C59483) *
               C122910 +
           (C139983 * C13701 - C21860 * C13620 + C139873 * C59847 -
            C21861 * C59795) *
               C122759) *
              C139731 * C139809 * C2906) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eezz[103] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((C122908 * C266 - C123391 * C108 - C122908 * C567 +
                       C140013 * C702 + C122909 * C1741 - C123392 * C1570 -
                       C122909 * C2074 + C140014 * C2230 + C122910 * C5397 -
                       C123393 * C5273 - C122910 * C5621 + C122759 * C5733) *
                          C139983 +
                      (C131816 + C131817 + C131818) * C139873) *
                         C139731 * C139809 * C2904 -
                     ((C134288 + C134289 + C134290) * C139873 +
                      (C131818 + C131817 + C131816) * C139983) *
                         C139731 * C139809 * C2905 +
                     ((C134290 + C134289 + C134288) * C139983 +
                      (C122908 * C6908 - C123391 * C6627 - C122908 * C7401 +
                       C140013 * C7629 + C122909 * C10630 - C123392 * C10394 -
                       C122909 * C11062 + C140014 * C11272 + C122910 * C59589 -
                       C123393 * C59483 - C122910 * C59795 + C122759 * C59898) *
                          C139873) *
                         C139731 * C139809 * C2906) *
                    C139758) /
                   (p * q * std::sqrt(p + q));
    d2eexx[104] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C54790 * C114 - C54791 * C108 - C54790 * C115 + C139731 * C126) *
                 C140013 +
             C61654 * C140014 + C61655 * C122759) *
                C139983 +
            (C130990 + C130991 + C130992) * C139873) *
               C1565 -
           ((C134389 + C134390 + C134391) * C139873 +
            (C67012 * C122759 + C61655 * C140014 + C61654 * C140013) *
                C139983) *
               C140002) *
              C2322 +
          (((C134391 + C134390 + C134389) * C139983 +
            (C57670 * C140013 + C63508 * C140014 +
             (C54790 * C64245 - C54791 * C64244 - C54790 * C64246 +
              C139731 * C64247) *
                 C122759) *
                C139873) *
               C140002 -
           ((C133657 + C133658 + C133659) * C139873 +
            (C130992 + C130991 + C130990) * C139983) *
               C1565) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eexy[104] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139983 * C183 - C21860 * C108 + C139873 * C896 - C21861 * C813) *
                 C54790 +
             (C139983 * C189 - C21860 * C115 + C139873 * C901 - C21861 * C822) *
                 C139731) *
                C140013 +
            ((C39482 - C39483 + C39484 - C39485) * C54790 +
             (C39486 - C39487 + C39488 - C39489) * C139731) *
                C140014 +
            ((C46347 - C46346 + C46349 - C46348) * C54790 +
             (C46351 - C46350 + C46353 - C46352) * C139731) *
                C122759) *
               C1565 +
           (((C39483 - C39482 + C39485 - C39484) * C54790 +
             (C39487 - C39486 + C39489 - C39488) * C139731) *
                C140013 +
            ((C46346 - C46347 + C46348 - C46349) * C54790 +
             (C46350 - C46351 + C46352 - C46353) * C139731) *
                C140014 +
            ((C21860 * C15623 - C139983 * C15788 + C21861 * C18302 -
              C139873 * C18422) *
                 C54790 +
             (C21860 * C15628 - C139983 * C15791 + C21861 * C18305 -
              C139873 * C18424) *
                 C139731) *
                C122759) *
               C140002) *
              C2322 +
          ((((C21860 * C813 - C139983 * C896 + C21861 * C2908 -
              C139873 * C2974) *
                 C54790 +
             (C21860 * C822 - C139983 * C901 + C21861 * C2913 -
              C139873 * C2978) *
                 C139731) *
                C140013 +
            ((C42830 - C42831 + C42832 - C42833) * C54790 +
             (C42834 - C42835 + C42836 - C42837) * C139731) *
                C140014 +
            ((C134490 - C134491 + C134492 - C134493) * C54790 +
             (C134494 - C134495 + C134496 - C134497) * C139731) *
                C122759) *
               C1565 +
           (((C42831 - C42830 + C42833 - C42832) * C54790 +
             (C42835 - C42834 + C42837 - C42836) * C139731) *
                C140013 +
            ((C134491 - C134490 + C134493 - C134492) * C54790 +
             (C134495 - C134494 + C134497 - C134496) * C139731) *
                C140014 +
            ((C139983 * C18422 - C21860 * C18302 + C139873 * C64356 -
              C21861 * C64244) *
                 C54790 +
             (C139983 * C18424 - C21860 * C18305 + C139873 * C64357 -
              C21861 * C64246) *
                 C139731) *
                C122759) *
               C140002) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eexz[104] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C140013 * C266 - C122908 * C108 + C140014 * C1741 -
              C122909 * C1570 + C122759 * C5397 - C122910 * C5273) *
                 C54790 +
             (C140013 * C272 - C122908 * C115 + C140014 * C1746 -
              C122909 * C1579 + C122759 * C5401 - C122910 * C5278) *
                 C139731) *
                C139983 +
            ((C131192 - C131193 + C131194 - C131195 + C131196 - C131197) *
                 C54790 +
             (C131198 - C131199 + C131200 - C131201 + C131202 - C131203) *
                 C139731) *
                C139873) *
               C1565 +
           (((C122908 * C1570 - C140013 * C1741 + C122909 * C5273 -
              C140014 * C5397 + C122910 * C15623 - C122759 * C15912) *
                 C54790 +
             (C122908 * C1579 - C140013 * C1746 + C122909 * C5278 -
              C140014 * C5401 + C122910 * C15628 - C122759 * C15915) *
                 C139731) *
                C139983 +
            ((C134596 - C134597 + C134598 - C134599 + C134600 - C134601) *
                 C54790 +
             (C134602 - C134603 + C134604 - C134605 + C134606 - C134607) *
                 C139731) *
                C139873) *
               C140002) *
              C2322 +
          ((((C131193 - C131192 + C131195 - C131194 + C131197 - C131196) *
                 C54790 +
             (C131199 - C131198 + C131201 - C131200 + C131203 - C131202) *
                 C139731) *
                C139983 +
            ((C133808 - C133809 + C133810 - C133811 + C133812 - C133813) *
                 C54790 +
             (C133814 - C133815 + C133816 - C133817 + C133818 - C133819) *
                 C139731) *
                C139873) *
               C1565 +
           (((C134597 - C134596 + C134599 - C134598 + C134601 - C134600) *
                 C54790 +
             (C134603 - C134602 + C134605 - C134604 + C134607 - C134606) *
                 C139731) *
                C139983 +
            ((C140013 * C7979 - C122908 * C7754 + C140014 * C13300 -
              C122909 * C13128 + C122759 * C64472 - C122910 * C64244) *
                 C54790 +
             (C140013 * C7982 - C122908 * C7759 + C140014 * C13304 -
              C122909 * C13135 + C122759 * C64473 - C122910 * C64246) *
                 C139731) *
                C139873) *
               C140002) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eeyx[104] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139731 * C114 - C54790 * C108) * C21860 +
             (C139731 * C354 - C54790 * C348) * C139983 +
             (C55513 - C55514) * C21861 + (C55515 - C55516) * C139873) *
                C140013 +
            ((C61976 - C61977) * C21860 + (C61978 - C61979) * C139983 +
             C64587 * C21861 + C64588 * C139873) *
                C140014 +
            (C67258 * C21860 + C67259 * C139983 + C64589 * C21861 +
             C64590 * C139873) *
                C122759) *
               C1565 +
           (((C61977 - C61976) * C21860 + (C61979 - C61978) * C139983 +
             C64591 * C21861 + C64592 * C139873) *
                C140013 +
            ((C61981 - C61980) * C21860 + (C61983 - C61982) * C139983 +
             C64593 * C21861 + C64594 * C139873) *
                C140014 +
            ((C67262 - C67263) * C21860 + (C67264 - C67265) * C139983 +
             (C64595 - C64596) * C21861 + (C64597 - C64598) * C139873) *
                C122759) *
               C140002) *
              C2322 +
          ((((C55514 - C55513) * C21860 + (C55516 - C55515) * C139983 +
             (C55518 - C55517) * C21861 + (C55520 - C55519) * C139873) *
                C140013 +
            (C64591 * C21860 + C64592 * C139983 + C89717 * C21861 +
             C89718 * C139873) *
                C140014 +
            (C64593 * C21860 + C64594 * C139983 + (C63744 - C63745) * C21861 +
             (C63746 - C63747) * C139873) *
                C122759) *
               C1565 +
           ((C64587 * C21860 + C64588 * C139983 + C88899 * C21861 +
             C88900 * C139873) *
                C140013 +
            (C64589 * C21860 + C64590 * C139983 + (C63745 - C63744) * C21861 +
             (C63747 - C63746) * C139873) *
                C140014 +
            ((C64596 - C64595) * C21860 + (C64598 - C64597) * C139983 +
             (C139731 * C64245 - C54790 * C64244) * C21861 +
             (C139731 * C64585 - C54790 * C64584) * C139873) *
                C122759) *
               C140002) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eeyy[104] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C21860 * C183 - C22116 * C108 - C21860 * C348 + C139983 * C411 +
             C21861 * C896 - C22117 * C813 - C21861 * C1072 + C139873 * C1151) *
                C139731 * C140013 +
            (C39934 + C39935) * C139731 * C140014 +
            (C46661 + C46660) * C139731 * C122759) *
               C1565 -
           ((C21861 * C18422 - C22117 * C18302 - C21861 * C18634 +
             C139873 * C18744 + C21860 * C15788 - C22116 * C15623 -
             C21860 * C16028 + C139983 * C16165) *
                C139731 * C122759 +
            (C46660 + C46661) * C139731 * C140014 +
            (C39935 + C39934) * C139731 * C140013) *
               C140002) *
              C2322 +
          (((C43260 + C43261) * C139731 * C140013 +
            (C134816 + C134817) * C139731 * C140014 +
            (C21860 * C18422 - C22116 * C18302 - C21860 * C18634 +
             C139983 * C18744 + C21861 * C64356 - C22117 * C64244 -
             C21861 * C64584 + C139873 * C64696) *
                C139731 * C122759) *
               C140002 -
           ((C134817 + C134816) * C139731 * C122759 +
            (C43261 + C43260) * C139731 * C140014 +
            (C21861 * C2974 - C22117 * C2908 - C21861 * C3090 +
             C139873 * C3148 + C21860 * C896 - C22116 * C813 - C21860 * C1072 +
             C139983 * C1151) *
                C139731 * C140013) *
               C1565) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eeyz[104] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C140013 * C266 - C122908 * C108 + C140014 * C1741 -
             C122909 * C1570 + C122759 * C5397 - C122910 * C5273) *
                C21860 +
            (C140013 * C495 - C122908 * C348 + C140014 * C1997 -
             C122909 * C1829 + C122759 * C5567 - C122910 * C5455) *
                C139983 +
            (C131192 - C131193 + C131194 - C131195 + C131196 - C131197) *
                C21861 +
            (C131498 - C131499 + C131500 - C131501 + C131502 - C131503) *
                C139873) *
               C139731 * C1565 +
           ((C122908 * C1570 - C140013 * C1741 + C122909 * C5273 -
             C140014 * C5397 + C122910 * C15623 - C122759 * C15912) *
                C21860 +
            (C122908 * C1829 - C140013 * C1997 + C122909 * C5455 -
             C140014 * C5567 + C122910 * C16028 - C122759 * C16294) *
                C139983 +
            (C134596 - C134597 + C134598 - C134599 + C134600 - C134601) *
                C21861 +
            (C134916 - C134917 + C134918 - C134919 + C134920 - C134921) *
                C139873) *
               C139731 * C140002) *
              C2322 +
          (((C131193 - C131192 + C131195 - C131194 + C131197 - C131196) *
                C21860 +
            (C131499 - C131498 + C131501 - C131500 + C131503 - C131502) *
                C139983 +
            (C133808 - C133809 + C133810 - C133811 + C133812 - C133813) *
                C21861 +
            (C134042 - C134043 + C134044 - C134045 + C134046 - C134047) *
                C139873) *
               C139731 * C1565 +
           ((C134597 - C134596 + C134599 - C134598 + C134601 - C134600) *
                C21860 +
            (C134917 - C134916 + C134919 - C134918 + C134921 - C134920) *
                C139983 +
            (C140013 * C7979 - C122908 * C7754 + C140014 * C13300 -
             C122909 * C13128 + C122759 * C64472 - C122910 * C64244) *
                C21861 +
            (C140013 * C8317 - C122908 * C8091 + C140014 * C13541 -
             C122909 * C13382 + C122759 * C64823 - C122910 * C64584) *
                C139873) *
               C139731 * C140002) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eezx[104] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139731 * C114 - C54790 * C108) * C122908 +
             (C139731 * C573 - C54790 * C567) * C140013 +
             (C61976 - C61977) * C122909 + (C62328 - C62329) * C140014 +
             C67258 * C122910 + C67513 * C122759) *
                C139983 +
            ((C55513 - C55514) * C122908 + (C55735 - C55736) * C140013 +
             C64587 * C122909 + C64931 * C140014 + C64589 * C122910 +
             C64932 * C122759) *
                C139873) *
               C1565 +
           (((C61977 - C61976) * C122908 + (C62329 - C62328) * C140013 +
             (C61981 - C61980) * C122909 + (C62331 - C62330) * C140014 +
             (C67262 - C67263) * C122910 + (C67514 - C67515) * C122759) *
                C139983 +
            (C64591 * C122908 + C64933 * C140013 + C64593 * C122909 +
             C64934 * C140014 + (C64595 - C64596) * C122910 +
             (C64935 - C64936) * C122759) *
                C139873) *
               C140002) *
              C2322 +
          ((((C55514 - C55513) * C122908 + (C55736 - C55735) * C140013 +
             C64591 * C122909 + C64933 * C140014 + C64593 * C122910 +
             C64934 * C122759) *
                C139983 +
            ((C55518 - C55517) * C122908 + (C55738 - C55737) * C140013 +
             C89717 * C122909 + C90038 * C140014 + (C63744 - C63745) * C122910 +
             (C63976 - C63977) * C122759) *
                C139873) *
               C1565 +
           ((C64587 * C122908 + C64931 * C140013 + C64589 * C122909 +
             C64932 * C140014 + (C64596 - C64595) * C122910 +
             (C64936 - C64935) * C122759) *
                C139983 +
            (C88899 * C122908 + C89133 * C140013 + (C63745 - C63744) * C122909 +
             (C63977 - C63976) * C140014 +
             (C139731 * C64245 - C54790 * C64244) * C122910 +
             (C139731 * C64929 - C54790 * C64928) * C122759) *
                C139873) *
               C140002) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eezy[104] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139983 * C183 - C21860 * C108 + C139873 * C896 - C21861 * C813) *
                C122908 +
            (C139983 * C629 - C21860 * C567 + C139873 * C1393 -
             C21861 * C1317) *
                C140013 +
            (C39482 - C39483 + C39484 - C39485) * C122909 +
            (C40332 - C40333 + C40334 - C40335) * C140014 +
            (C46347 - C46346 + C46349 - C46348) * C122910 +
            (C46957 - C46956 + C46959 - C46958) * C122759) *
               C139731 * C1565 +
           ((C39483 - C39482 + C39485 - C39484) * C122908 +
            (C40333 - C40332 + C40335 - C40334) * C140013 +
            (C46346 - C46347 + C46348 - C46349) * C122909 +
            (C46956 - C46957 + C46958 - C46959) * C140014 +
            (C21860 * C15623 - C139983 * C15788 + C21861 * C18302 -
             C139873 * C18422) *
                C122910 +
            (C21860 * C16401 - C139983 * C16521 + C21861 * C18962 -
             C139873 * C19068) *
                C122759) *
               C139731 * C140002) *
              C2322 +
          (((C21860 * C813 - C139983 * C896 + C21861 * C2908 -
             C139873 * C2974) *
                C122908 +
            (C21860 * C1317 - C139983 * C1393 + C21861 * C3256 -
             C139873 * C3314) *
                C140013 +
            (C42830 - C42831 + C42832 - C42833) * C122909 +
            (C43662 - C43663 + C43664 - C43665) * C140014 +
            (C134490 - C134491 + C134492 - C134493) * C122910 +
            (C135118 - C135119 + C135120 - C135121) * C122759) *
               C139731 * C1565 +
           ((C42831 - C42830 + C42833 - C42832) * C122908 +
            (C43663 - C43662 + C43665 - C43664) * C140013 +
            (C134491 - C134490 + C134493 - C134492) * C122909 +
            (C135119 - C135118 + C135121 - C135120) * C140014 +
            (C139983 * C18422 - C21860 * C18302 + C139873 * C64356 -
             C21861 * C64244) *
                C122910 +
            (C139983 * C19068 - C21860 * C18962 + C139873 * C65034 -
             C21861 * C64928) *
                C122759) *
               C139731 * C140002) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eezz[104] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C122908 * C266 - C123391 * C108 - C122908 * C567 + C140013 * C702 +
             C122909 * C1741 - C123392 * C1570 - C122909 * C2074 +
             C140014 * C2230 + C122910 * C5397 - C123393 * C5273 -
             C122910 * C5621 + C122759 * C5733) *
                C139983 +
            (C131816 + C131817 + C131818) * C139873) *
               C139731 * C1565 -
           ((C135238 + C135239 + C135240) * C139873 +
            (C122910 * C15912 - C123393 * C15623 - C122910 * C16401 +
             C122759 * C16633 + C122909 * C5397 - C123392 * C5273 -
             C122909 * C5621 + C140014 * C5733 + C122908 * C1741 -
             C123391 * C1570 - C122908 * C2074 + C140013 * C2230) *
                C139983) *
               C139731 * C140002) *
              C2322 +
          (((C135240 + C135239 + C135238) * C139983 +
            (C122908 * C7979 - C123391 * C7754 - C122908 * C8422 +
             C140013 * C8634 + C122909 * C13300 - C123392 * C13128 -
             C122909 * C13620 + C140014 * C13779 + C122910 * C64472 -
             C123393 * C64244 - C122910 * C64928 + C122759 * C65141) *
                C139873) *
               C139731 * C140002 -
           ((C134288 + C134289 + C134290) * C139873 +
            (C131818 + C131817 + C131816) * C139983) *
               C139731 * C1565) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eexx[105] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C54790 * C114 - C54791 * C108 - C54790 * C115 + C139731 * C126) *
                 C140013 +
             C61654 * C140014 + C61655 * C122759) *
                C139983 +
            (C130990 + C130991 + C130992) * C139873) *
               C4096 -
           ((C134389 + C134390 + C134391) * C139873 +
            (C67012 * C122759 + C61655 * C140014 + C61654 * C140013) *
                C139983) *
               C140002) *
              C139792 * C2324 +
          (((C61656 * C140013 + C61657 * C140014 + C109078 * C122759) *
                C139983 +
            (C60686 * C140013 + C60687 * C140014 +
             (C54790 * C18306 - C54791 * C18303 - C54790 * C18307 +
              C139731 * C18309) *
                 C122759) *
                C139873) *
               C140002 -
           ((C130995 + C130994 + C130993) * C139873 +
            (C61657 * C122759 + C61656 * C140014 +
             (C54790 * C116 - C54791 * C109 - C54790 * C117 + C139731 * C127) *
                 C140013) *
                C139983) *
               C4096) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexy[105] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139983 * C183 - C21860 * C108 + C139873 * C896 - C21861 * C813) *
                 C54790 +
             (C139983 * C189 - C21860 * C115 + C139873 * C901 - C21861 * C822) *
                 C139731) *
                C140013 +
            ((C39482 - C39483 + C39484 - C39485) * C54790 +
             (C39486 - C39487 + C39488 - C39489) * C139731) *
                C140014 +
            ((C46347 - C46346 + C46349 - C46348) * C54790 +
             (C46351 - C46350 + C46353 - C46352) * C139731) *
                C122759) *
               C4096 +
           (((C39483 - C39482 + C39485 - C39484) * C54790 +
             (C39487 - C39486 + C39489 - C39488) * C139731) *
                C140013 +
            ((C46346 - C46347 + C46348 - C46349) * C54790 +
             (C46350 - C46351 + C46352 - C46353) * C139731) *
                C140014 +
            ((C21860 * C15623 - C139983 * C15788 + C21861 * C18302 -
              C139873 * C18422) *
                 C54790 +
             (C21860 * C15628 - C139983 * C15791 + C21861 * C18305 -
              C139873 * C18424) *
                 C139731) *
                C122759) *
               C140002) *
              C139792 * C2324 +
          ((((C21864 - C21863 + C21866 - C21865) * C54790 +
             (C21868 - C21867 + C21870 - C21869) * C139731) *
                C140013 +
            (C39508 * C54790 + C39509 * C139731) * C140014 +
            ((C39498 - C39499 + C39500 - C39501) * C54790 +
             (C39502 - C39503 + C39504 - C39505) * C139731) *
                C122759) *
               C4096 +
           ((C39506 * C54790 + C39507 * C139731) * C140013 +
            ((C39499 - C39498 + C39501 - C39500) * C54790 +
             (C39503 - C39502 + C39505 - C39504) * C139731) *
                C140014 +
            ((C139983 * C15789 - C21860 * C15622 + C139873 * C18423 -
              C21861 * C18303) *
                 C54790 +
             (C139983 * C15792 - C21860 * C15626 + C139873 * C18425 -
              C21861 * C18307) *
                 C139731) *
                C122759) *
               C140002) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexz[105] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C140013 * C266 - C122908 * C108 + C140014 * C1741 -
              C122909 * C1570 + C122759 * C5397 - C122910 * C5273) *
                 C54790 +
             (C140013 * C272 - C122908 * C115 + C140014 * C1746 -
              C122909 * C1579 + C122759 * C5401 - C122910 * C5278) *
                 C139731) *
                C139983 +
            ((C131192 - C131193 + C131194 - C131195 + C131196 - C131197) *
                 C54790 +
             (C131198 - C131199 + C131200 - C131201 + C131202 - C131203) *
                 C139731) *
                C139873) *
               C4096 +
           (((C122908 * C1570 - C140013 * C1741 + C122909 * C5273 -
              C140014 * C5397 + C122910 * C15623 - C122759 * C15912) *
                 C54790 +
             (C122908 * C1579 - C140013 * C1746 + C122909 * C5278 -
              C140014 * C5401 + C122910 * C15628 - C122759 * C15915) *
                 C139731) *
                C139983 +
            ((C134596 - C134597 + C134598 - C134599 + C134600 - C134601) *
                 C54790 +
             (C134602 - C134603 + C134604 - C134605 + C134606 - C134607) *
                 C139731) *
                C139873) *
               C140002) *
              C139792 * C2324 +
          ((((C122913 - C122912 + C122915 - C122914 + C122917 - C122916) *
                 C54790 +
             (C122919 - C122918 + C122921 - C122920 + C122923 - C122922) *
                 C139731) *
                C139983 +
            ((C123731 - C123732 + C123733 - C123734 + C123735 - C123736) *
                 C54790 +
             (C123737 - C123738 + C123739 - C123740 + C123741 - C123742) *
                 C139731) *
                C139873) *
               C4096 +
           (((C124667 - C124666 + C124669 - C124668 + C124671 - C124670) *
                 C54790 +
             (C124673 - C124672 + C124675 - C124674 + C124677 - C124676) *
                 C139731) *
                C139983 +
            ((C140013 * C3595 - C122908 * C3439 + C140014 * C13299 -
              C122909 * C13127 + C122759 * C18533 - C122910 * C18303) *
                 C54790 +
             (C140013 * C3599 - C122908 * C3445 + C140014 * C13303 -
              C122909 * C13133 + C122759 * C18535 - C122910 * C18307) *
                 C139731) *
                C139873) *
               C140002) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[105] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139731 * C114 - C54790 * C108) * C21860 +
             (C139731 * C354 - C54790 * C348) * C139983 +
             (C55513 - C55514) * C21861 + (C55515 - C55516) * C139873) *
                C140013 +
            ((C61976 - C61977) * C21860 + (C61978 - C61979) * C139983 +
             C64587 * C21861 + C64588 * C139873) *
                C140014 +
            (C67258 * C21860 + C67259 * C139983 + C64589 * C21861 +
             C64590 * C139873) *
                C122759) *
               C4096 +
           (((C61977 - C61976) * C21860 + (C61979 - C61978) * C139983 +
             C64591 * C21861 + C64592 * C139873) *
                C140013 +
            ((C61981 - C61980) * C21860 + (C61983 - C61982) * C139983 +
             C64593 * C21861 + C64594 * C139873) *
                C140014 +
            ((C67262 - C67263) * C21860 + (C67264 - C67265) * C139983 +
             (C64595 - C64596) * C21861 + (C64597 - C64598) * C139873) *
                C122759) *
               C140002) *
              C139792 * C2324 +
          ((((C54790 * C109 - C139731 * C116) * C21860 +
             (C54790 * C349 - C139731 * C355) * C139983 +
             (C55525 - C55526) * C21861 + (C55527 - C55528) * C139873) *
                C140013 +
            ((C61984 - C61985) * C21860 + (C61986 - C61987) * C139983 +
             (C61001 - C61002) * C21861 + (C61003 - C61004) * C139873) *
                C140014 +
            ((C61988 - C61989) * C21860 + (C61990 - C61991) * C139983 +
             (C61005 - C61006) * C21861 + (C61007 - C61008) * C139873) *
                C122759) *
               C4096 +
           (((C61985 - C61984) * C21860 + (C61987 - C61986) * C139983 +
             (C61002 - C61001) * C21861 + (C61004 - C61003) * C139873) *
                C140013 +
            ((C61989 - C61988) * C21860 + (C61991 - C61990) * C139983 +
             (C61006 - C61005) * C21861 + (C61008 - C61007) * C139873) *
                C140014 +
            ((C109278 - C109277) * C21860 + (C109280 - C109279) * C139983 +
             (C139731 * C18306 - C54790 * C18303) * C21861 +
             (C139731 * C18637 - C54790 * C18635) * C139873) *
                C122759) *
               C140002) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[105] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C21860 * C183 - C22116 * C108 - C21860 * C348 + C139983 * C411 +
             C21861 * C896 - C22117 * C813 - C21861 * C1072 + C139873 * C1151) *
                C139731 * C140013 +
            (C39934 + C39935) * C139731 * C140014 +
            (C46661 + C46660) * C139731 * C122759) *
               C4096 -
           ((C21861 * C18422 - C22117 * C18302 - C21861 * C18634 +
             C139873 * C18744 + C21860 * C15788 - C22116 * C15623 -
             C21860 * C16028 + C139983 * C16165) *
                C139731 * C122759 +
            (C46660 + C46661) * C139731 * C140014 +
            (C39935 + C39934) * C139731 * C140013) *
               C140002) *
              C139792 * C2324 +
          ((C39916 * C139731 * C140013 + (C39937 + C39936) * C139731 * C140014 +
            (C21860 * C15789 - C22116 * C15622 - C21860 * C16029 +
             C139983 * C16164 + C21861 * C18423 - C22117 * C18303 -
             C21861 * C18635 + C139873 * C18745) *
                C139731 * C122759) *
               C140002 -
           ((C39936 + C39937) * C139731 * C122759 + C39925 * C139731 * C140014 +
            (C22156 + C22155) * C139731 * C140013) *
               C4096) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[105] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C140013 * C266 - C122908 * C108 + C140014 * C1741 -
             C122909 * C1570 + C122759 * C5397 - C122910 * C5273) *
                C21860 +
            (C140013 * C495 - C122908 * C348 + C140014 * C1997 -
             C122909 * C1829 + C122759 * C5567 - C122910 * C5455) *
                C139983 +
            (C131192 - C131193 + C131194 - C131195 + C131196 - C131197) *
                C21861 +
            (C131498 - C131499 + C131500 - C131501 + C131502 - C131503) *
                C139873) *
               C139731 * C4096 +
           ((C122908 * C1570 - C140013 * C1741 + C122909 * C5273 -
             C140014 * C5397 + C122910 * C15623 - C122759 * C15912) *
                C21860 +
            (C122908 * C1829 - C140013 * C1997 + C122909 * C5455 -
             C140014 * C5567 + C122910 * C16028 - C122759 * C16294) *
                C139983 +
            (C134596 - C134597 + C134598 - C134599 + C134600 - C134601) *
                C21861 +
            (C134916 - C134917 + C134918 - C134919 + C134920 - C134921) *
                C139873) *
               C139731 * C140002) *
              C139792 * C2324 +
          (((C122913 - C122912 + C122915 - C122914 + C122917 - C122916) *
                C21860 +
            (C123159 - C123158 + C123161 - C123160 + C123163 - C123162) *
                C139983 +
            (C123731 - C123732 + C123733 - C123734 + C123735 - C123736) *
                C21861 +
            (C124037 - C124038 + C124039 - C124040 + C124041 - C124042) *
                C139873) *
               C139731 * C4096 +
           ((C124667 - C124666 + C124669 - C124668 + C124671 - C124670) *
                C21860 +
            (C124989 - C124988 + C124991 - C124990 + C124993 - C124992) *
                C139983 +
            (C140013 * C3595 - C122908 * C3439 + C140014 * C13299 -
             C122909 * C13127 + C122759 * C18533 - C122910 * C18303) *
                C21861 +
            (C140013 * C3813 - C122908 * C3669 + C140014 * C13542 -
             C122909 * C13381 + C122759 * C18863 - C122910 * C18635) *
                C139873) *
               C139731 * C140002) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eezx[105] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139731 * C114 - C54790 * C108) * C122908 +
             (C139731 * C573 - C54790 * C567) * C140013 +
             (C61976 - C61977) * C122909 + (C62328 - C62329) * C140014 +
             C67258 * C122910 + C67513 * C122759) *
                C139983 +
            ((C55513 - C55514) * C122908 + (C55735 - C55736) * C140013 +
             C64587 * C122909 + C64931 * C140014 + C64589 * C122910 +
             C64932 * C122759) *
                C139873) *
               C4096 +
           (((C61977 - C61976) * C122908 + (C62329 - C62328) * C140013 +
             (C61981 - C61980) * C122909 + (C62331 - C62330) * C140014 +
             (C67262 - C67263) * C122910 + (C67514 - C67515) * C122759) *
                C139983 +
            (C64591 * C122908 + C64933 * C140013 + C64593 * C122909 +
             C64934 * C140014 + (C64595 - C64596) * C122910 +
             (C64935 - C64936) * C122759) *
                C139873) *
               C140002) *
              C139792 * C2324 +
          ((((C54790 * C109 - C139731 * C116) * C122908 +
             (C54790 * C568 - C139731 * C574) * C140013 +
             (C61984 - C61985) * C122909 + (C62332 - C62333) * C140014 +
             (C61988 - C61989) * C122910 + (C62334 - C62335) * C122759) *
                C139983 +
            ((C55525 - C55526) * C122908 + (C55741 - C55742) * C140013 +
             (C61001 - C61002) * C122909 + (C61311 - C61312) * C140014 +
             (C61005 - C61006) * C122910 + (C61313 - C61314) * C122759) *
                C139873) *
               C4096 +
           (((C61985 - C61984) * C122908 + (C62333 - C62332) * C140013 +
             (C61989 - C61988) * C122909 + (C62335 - C62334) * C140014 +
             (C109278 - C109277) * C122910 + (C109486 - C109485) * C122759) *
                C139983 +
            ((C61002 - C61001) * C122908 + (C61312 - C61311) * C140013 +
             (C61006 - C61005) * C122909 + (C61314 - C61313) * C140014 +
             (C139731 * C18306 - C54790 * C18303) * C122910 +
             (C139731 * C18965 - C54790 * C18963) * C122759) *
                C139873) *
               C140002) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eezy[105] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139983 * C183 - C21860 * C108 + C139873 * C896 - C21861 * C813) *
                C122908 +
            (C139983 * C629 - C21860 * C567 + C139873 * C1393 -
             C21861 * C1317) *
                C140013 +
            (C39482 - C39483 + C39484 - C39485) * C122909 +
            (C40332 - C40333 + C40334 - C40335) * C140014 +
            (C46347 - C46346 + C46349 - C46348) * C122910 +
            (C46957 - C46956 + C46959 - C46958) * C122759) *
               C139731 * C4096 +
           ((C39483 - C39482 + C39485 - C39484) * C122908 +
            (C40333 - C40332 + C40335 - C40334) * C140013 +
            (C46346 - C46347 + C46348 - C46349) * C122909 +
            (C46956 - C46957 + C46958 - C46959) * C140014 +
            (C21860 * C15623 - C139983 * C15788 + C21861 * C18302 -
             C139873 * C18422) *
                C122910 +
            (C21860 * C16401 - C139983 * C16521 + C21861 * C18962 -
             C139873 * C19068) *
                C122759) *
               C139731 * C140002) *
              C139792 * C2324 +
          (((C21864 - C21863 + C21866 - C21865) * C122908 +
            (C22393 - C22392 + C22395 - C22394) * C140013 + C39508 * C122909 +
            C40345 * C140014 + (C39498 - C39499 + C39500 - C39501) * C122910 +
            (C40340 - C40341 + C40342 - C40343) * C122759) *
               C139731 * C4096 +
           (C39506 * C122908 + C40344 * C140013 +
            (C39499 - C39498 + C39501 - C39500) * C122909 +
            (C40341 - C40340 + C40343 - C40342) * C140014 +
            (C139983 * C15789 - C21860 * C15622 + C139873 * C18423 -
             C21861 * C18303) *
                C122910 +
            (C139983 * C16522 - C21860 * C16402 + C139873 * C19069 -
             C21861 * C18963) *
                C122759) *
               C139731 * C140002) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eezz[105] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C122908 * C266 - C123391 * C108 - C122908 * C567 + C140013 * C702 +
             C122909 * C1741 - C123392 * C1570 - C122909 * C2074 +
             C140014 * C2230 + C122910 * C5397 - C123393 * C5273 -
             C122910 * C5621 + C122759 * C5733) *
                C139983 +
            (C131816 + C131817 + C131818) * C139873) *
               C139731 * C4096 -
           ((C135238 + C135239 + C135240) * C139873 +
            (C122910 * C15912 - C123393 * C15623 - C122910 * C16401 +
             C122759 * C16633 + C122909 * C5397 - C123392 * C5273 -
             C122909 * C5621 + C140014 * C5733 + C122908 * C1741 -
             C123391 * C1570 - C122908 * C2074 + C140013 * C2230) *
                C139983) *
               C139731 * C140002) *
              C139792 * C2324 +
          (((C125312 + C125311 + C125310) * C139983 +
            (C122908 * C3595 - C123391 * C3439 - C122908 * C3883 +
             C140013 * C4027 + C122909 * C13299 - C123392 * C13127 -
             C122909 * C13619 + C140014 * C13780 + C122910 * C18533 -
             C123393 * C18303 - C122910 * C18963 + C122759 * C19173) *
                C139873) *
               C139731 * C140002 -
           ((C124355 + C124356 + C124357) * C139873 +
            (C123433 + C123432 + C123431) * C139983) *
               C139731 * C4096) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexx[106] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C54790 * C114 - C54791 * C108 - C54790 * C115 + C139731 * C126) *
                 C140013 +
             C61654 * C140014 + C61655 * C122759) *
                C139983 +
            (C130990 + C130991 + C130992) * C139873) *
               C4096 -
           ((C134389 + C134390 + C134391) * C139873 +
            (C67012 * C122759 + C61655 * C140014 + C61654 * C140013) *
                C139983) *
               C140002) *
              C806 +
          (((C134391 + C134390 + C134389) * C139983 +
            (C57670 * C140013 + C63508 * C140014 +
             (C54790 * C64245 - C54791 * C64244 - C54790 * C64246 +
              C139731 * C64247) *
                 C122759) *
                C139873) *
               C140002 -
           ((C133657 + C133658 + C133659) * C139873 +
            (C130992 + C130991 + C130990) * C139983) *
               C4096) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eexy[106] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139983 * C183 - C21860 * C108 + C139873 * C896 - C21861 * C813) *
                 C54790 +
             (C139983 * C189 - C21860 * C115 + C139873 * C901 - C21861 * C822) *
                 C139731) *
                C140013 +
            ((C39482 - C39483 + C39484 - C39485) * C54790 +
             (C39486 - C39487 + C39488 - C39489) * C139731) *
                C140014 +
            ((C46347 - C46346 + C46349 - C46348) * C54790 +
             (C46351 - C46350 + C46353 - C46352) * C139731) *
                C122759) *
               C4096 +
           (((C39483 - C39482 + C39485 - C39484) * C54790 +
             (C39487 - C39486 + C39489 - C39488) * C139731) *
                C140013 +
            ((C46346 - C46347 + C46348 - C46349) * C54790 +
             (C46350 - C46351 + C46352 - C46353) * C139731) *
                C140014 +
            ((C21860 * C15623 - C139983 * C15788 + C21861 * C18302 -
              C139873 * C18422) *
                 C54790 +
             (C21860 * C15628 - C139983 * C15791 + C21861 * C18305 -
              C139873 * C18424) *
                 C139731) *
                C122759) *
               C140002) *
              C806 +
          ((((C21860 * C813 - C139983 * C896 + C21861 * C2908 -
              C139873 * C2974) *
                 C54790 +
             (C21860 * C822 - C139983 * C901 + C21861 * C2913 -
              C139873 * C2978) *
                 C139731) *
                C140013 +
            ((C42830 - C42831 + C42832 - C42833) * C54790 +
             (C42834 - C42835 + C42836 - C42837) * C139731) *
                C140014 +
            ((C134490 - C134491 + C134492 - C134493) * C54790 +
             (C134494 - C134495 + C134496 - C134497) * C139731) *
                C122759) *
               C4096 +
           (((C42831 - C42830 + C42833 - C42832) * C54790 +
             (C42835 - C42834 + C42837 - C42836) * C139731) *
                C140013 +
            ((C134491 - C134490 + C134493 - C134492) * C54790 +
             (C134495 - C134494 + C134497 - C134496) * C139731) *
                C140014 +
            ((C139983 * C18422 - C21860 * C18302 + C139873 * C64356 -
              C21861 * C64244) *
                 C54790 +
             (C139983 * C18424 - C21860 * C18305 + C139873 * C64357 -
              C21861 * C64246) *
                 C139731) *
                C122759) *
               C140002) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eexz[106] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C140013 * C266 - C122908 * C108 + C140014 * C1741 -
              C122909 * C1570 + C122759 * C5397 - C122910 * C5273) *
                 C54790 +
             (C140013 * C272 - C122908 * C115 + C140014 * C1746 -
              C122909 * C1579 + C122759 * C5401 - C122910 * C5278) *
                 C139731) *
                C139983 +
            ((C131192 - C131193 + C131194 - C131195 + C131196 - C131197) *
                 C54790 +
             (C131198 - C131199 + C131200 - C131201 + C131202 - C131203) *
                 C139731) *
                C139873) *
               C4096 +
           (((C122908 * C1570 - C140013 * C1741 + C122909 * C5273 -
              C140014 * C5397 + C122910 * C15623 - C122759 * C15912) *
                 C54790 +
             (C122908 * C1579 - C140013 * C1746 + C122909 * C5278 -
              C140014 * C5401 + C122910 * C15628 - C122759 * C15915) *
                 C139731) *
                C139983 +
            ((C134596 - C134597 + C134598 - C134599 + C134600 - C134601) *
                 C54790 +
             (C134602 - C134603 + C134604 - C134605 + C134606 - C134607) *
                 C139731) *
                C139873) *
               C140002) *
              C806 +
          ((((C131193 - C131192 + C131195 - C131194 + C131197 - C131196) *
                 C54790 +
             (C131199 - C131198 + C131201 - C131200 + C131203 - C131202) *
                 C139731) *
                C139983 +
            ((C133808 - C133809 + C133810 - C133811 + C133812 - C133813) *
                 C54790 +
             (C133814 - C133815 + C133816 - C133817 + C133818 - C133819) *
                 C139731) *
                C139873) *
               C4096 +
           (((C134597 - C134596 + C134599 - C134598 + C134601 - C134600) *
                 C54790 +
             (C134603 - C134602 + C134605 - C134604 + C134607 - C134606) *
                 C139731) *
                C139983 +
            ((C140013 * C7979 - C122908 * C7754 + C140014 * C13300 -
              C122909 * C13128 + C122759 * C64472 - C122910 * C64244) *
                 C54790 +
             (C140013 * C7982 - C122908 * C7759 + C140014 * C13304 -
              C122909 * C13135 + C122759 * C64473 - C122910 * C64246) *
                 C139731) *
                C139873) *
               C140002) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eeyx[106] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139731 * C114 - C54790 * C108) * C21860 +
             (C139731 * C354 - C54790 * C348) * C139983 +
             (C55513 - C55514) * C21861 + (C55515 - C55516) * C139873) *
                C140013 +
            ((C61976 - C61977) * C21860 + (C61978 - C61979) * C139983 +
             C64587 * C21861 + C64588 * C139873) *
                C140014 +
            (C67258 * C21860 + C67259 * C139983 + C64589 * C21861 +
             C64590 * C139873) *
                C122759) *
               C4096 +
           (((C61977 - C61976) * C21860 + (C61979 - C61978) * C139983 +
             C64591 * C21861 + C64592 * C139873) *
                C140013 +
            ((C61981 - C61980) * C21860 + (C61983 - C61982) * C139983 +
             C64593 * C21861 + C64594 * C139873) *
                C140014 +
            ((C67262 - C67263) * C21860 + (C67264 - C67265) * C139983 +
             (C64595 - C64596) * C21861 + (C64597 - C64598) * C139873) *
                C122759) *
               C140002) *
              C806 +
          ((((C55514 - C55513) * C21860 + (C55516 - C55515) * C139983 +
             (C55518 - C55517) * C21861 + (C55520 - C55519) * C139873) *
                C140013 +
            (C64591 * C21860 + C64592 * C139983 + C89717 * C21861 +
             C89718 * C139873) *
                C140014 +
            (C64593 * C21860 + C64594 * C139983 + (C63744 - C63745) * C21861 +
             (C63746 - C63747) * C139873) *
                C122759) *
               C4096 +
           ((C64587 * C21860 + C64588 * C139983 + C88899 * C21861 +
             C88900 * C139873) *
                C140013 +
            (C64589 * C21860 + C64590 * C139983 + (C63745 - C63744) * C21861 +
             (C63747 - C63746) * C139873) *
                C140014 +
            ((C64596 - C64595) * C21860 + (C64598 - C64597) * C139983 +
             (C139731 * C64245 - C54790 * C64244) * C21861 +
             (C139731 * C64585 - C54790 * C64584) * C139873) *
                C122759) *
               C140002) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eeyy[106] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C21860 * C183 - C22116 * C108 - C21860 * C348 + C139983 * C411 +
             C21861 * C896 - C22117 * C813 - C21861 * C1072 + C139873 * C1151) *
                C139731 * C140013 +
            (C39934 + C39935) * C139731 * C140014 +
            (C46661 + C46660) * C139731 * C122759) *
               C4096 -
           ((C21861 * C18422 - C22117 * C18302 - C21861 * C18634 +
             C139873 * C18744 + C21860 * C15788 - C22116 * C15623 -
             C21860 * C16028 + C139983 * C16165) *
                C139731 * C122759 +
            (C46660 + C46661) * C139731 * C140014 +
            (C39935 + C39934) * C139731 * C140013) *
               C140002) *
              C806 +
          (((C43260 + C43261) * C139731 * C140013 +
            (C134816 + C134817) * C139731 * C140014 +
            (C21860 * C18422 - C22116 * C18302 - C21860 * C18634 +
             C139983 * C18744 + C21861 * C64356 - C22117 * C64244 -
             C21861 * C64584 + C139873 * C64696) *
                C139731 * C122759) *
               C140002 -
           ((C134817 + C134816) * C139731 * C122759 +
            (C43261 + C43260) * C139731 * C140014 +
            (C21861 * C2974 - C22117 * C2908 - C21861 * C3090 +
             C139873 * C3148 + C21860 * C896 - C22116 * C813 - C21860 * C1072 +
             C139983 * C1151) *
                C139731 * C140013) *
               C4096) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eeyz[106] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C140013 * C266 - C122908 * C108 + C140014 * C1741 -
             C122909 * C1570 + C122759 * C5397 - C122910 * C5273) *
                C21860 +
            (C140013 * C495 - C122908 * C348 + C140014 * C1997 -
             C122909 * C1829 + C122759 * C5567 - C122910 * C5455) *
                C139983 +
            (C131192 - C131193 + C131194 - C131195 + C131196 - C131197) *
                C21861 +
            (C131498 - C131499 + C131500 - C131501 + C131502 - C131503) *
                C139873) *
               C139731 * C4096 +
           ((C122908 * C1570 - C140013 * C1741 + C122909 * C5273 -
             C140014 * C5397 + C122910 * C15623 - C122759 * C15912) *
                C21860 +
            (C122908 * C1829 - C140013 * C1997 + C122909 * C5455 -
             C140014 * C5567 + C122910 * C16028 - C122759 * C16294) *
                C139983 +
            (C134596 - C134597 + C134598 - C134599 + C134600 - C134601) *
                C21861 +
            (C134916 - C134917 + C134918 - C134919 + C134920 - C134921) *
                C139873) *
               C139731 * C140002) *
              C806 +
          (((C131193 - C131192 + C131195 - C131194 + C131197 - C131196) *
                C21860 +
            (C131499 - C131498 + C131501 - C131500 + C131503 - C131502) *
                C139983 +
            (C133808 - C133809 + C133810 - C133811 + C133812 - C133813) *
                C21861 +
            (C134042 - C134043 + C134044 - C134045 + C134046 - C134047) *
                C139873) *
               C139731 * C4096 +
           ((C134597 - C134596 + C134599 - C134598 + C134601 - C134600) *
                C21860 +
            (C134917 - C134916 + C134919 - C134918 + C134921 - C134920) *
                C139983 +
            (C140013 * C7979 - C122908 * C7754 + C140014 * C13300 -
             C122909 * C13128 + C122759 * C64472 - C122910 * C64244) *
                C21861 +
            (C140013 * C8317 - C122908 * C8091 + C140014 * C13541 -
             C122909 * C13382 + C122759 * C64823 - C122910 * C64584) *
                C139873) *
               C139731 * C140002) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eezx[106] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139731 * C114 - C54790 * C108) * C122908 +
             (C139731 * C573 - C54790 * C567) * C140013 +
             (C61976 - C61977) * C122909 + (C62328 - C62329) * C140014 +
             C67258 * C122910 + C67513 * C122759) *
                C139983 +
            ((C55513 - C55514) * C122908 + (C55735 - C55736) * C140013 +
             C64587 * C122909 + C64931 * C140014 + C64589 * C122910 +
             C64932 * C122759) *
                C139873) *
               C4096 +
           (((C61977 - C61976) * C122908 + (C62329 - C62328) * C140013 +
             (C61981 - C61980) * C122909 + (C62331 - C62330) * C140014 +
             (C67262 - C67263) * C122910 + (C67514 - C67515) * C122759) *
                C139983 +
            (C64591 * C122908 + C64933 * C140013 + C64593 * C122909 +
             C64934 * C140014 + (C64595 - C64596) * C122910 +
             (C64935 - C64936) * C122759) *
                C139873) *
               C140002) *
              C806 +
          ((((C55514 - C55513) * C122908 + (C55736 - C55735) * C140013 +
             C64591 * C122909 + C64933 * C140014 + C64593 * C122910 +
             C64934 * C122759) *
                C139983 +
            ((C55518 - C55517) * C122908 + (C55738 - C55737) * C140013 +
             C89717 * C122909 + C90038 * C140014 + (C63744 - C63745) * C122910 +
             (C63976 - C63977) * C122759) *
                C139873) *
               C4096 +
           ((C64587 * C122908 + C64931 * C140013 + C64589 * C122909 +
             C64932 * C140014 + (C64596 - C64595) * C122910 +
             (C64936 - C64935) * C122759) *
                C139983 +
            (C88899 * C122908 + C89133 * C140013 + (C63745 - C63744) * C122909 +
             (C63977 - C63976) * C140014 +
             (C139731 * C64245 - C54790 * C64244) * C122910 +
             (C139731 * C64929 - C54790 * C64928) * C122759) *
                C139873) *
               C140002) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eezy[106] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139983 * C183 - C21860 * C108 + C139873 * C896 - C21861 * C813) *
                C122908 +
            (C139983 * C629 - C21860 * C567 + C139873 * C1393 -
             C21861 * C1317) *
                C140013 +
            (C39482 - C39483 + C39484 - C39485) * C122909 +
            (C40332 - C40333 + C40334 - C40335) * C140014 +
            (C46347 - C46346 + C46349 - C46348) * C122910 +
            (C46957 - C46956 + C46959 - C46958) * C122759) *
               C139731 * C4096 +
           ((C39483 - C39482 + C39485 - C39484) * C122908 +
            (C40333 - C40332 + C40335 - C40334) * C140013 +
            (C46346 - C46347 + C46348 - C46349) * C122909 +
            (C46956 - C46957 + C46958 - C46959) * C140014 +
            (C21860 * C15623 - C139983 * C15788 + C21861 * C18302 -
             C139873 * C18422) *
                C122910 +
            (C21860 * C16401 - C139983 * C16521 + C21861 * C18962 -
             C139873 * C19068) *
                C122759) *
               C139731 * C140002) *
              C806 +
          (((C21860 * C813 - C139983 * C896 + C21861 * C2908 -
             C139873 * C2974) *
                C122908 +
            (C21860 * C1317 - C139983 * C1393 + C21861 * C3256 -
             C139873 * C3314) *
                C140013 +
            (C42830 - C42831 + C42832 - C42833) * C122909 +
            (C43662 - C43663 + C43664 - C43665) * C140014 +
            (C134490 - C134491 + C134492 - C134493) * C122910 +
            (C135118 - C135119 + C135120 - C135121) * C122759) *
               C139731 * C4096 +
           ((C42831 - C42830 + C42833 - C42832) * C122908 +
            (C43663 - C43662 + C43665 - C43664) * C140013 +
            (C134491 - C134490 + C134493 - C134492) * C122909 +
            (C135119 - C135118 + C135121 - C135120) * C140014 +
            (C139983 * C18422 - C21860 * C18302 + C139873 * C64356 -
             C21861 * C64244) *
                C122910 +
            (C139983 * C19068 - C21860 * C18962 + C139873 * C65034 -
             C21861 * C64928) *
                C122759) *
               C139731 * C140002) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eezz[106] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C122908 * C266 - C123391 * C108 - C122908 * C567 + C140013 * C702 +
             C122909 * C1741 - C123392 * C1570 - C122909 * C2074 +
             C140014 * C2230 + C122910 * C5397 - C123393 * C5273 -
             C122910 * C5621 + C122759 * C5733) *
                C139983 +
            (C131816 + C131817 + C131818) * C139873) *
               C139731 * C4096 -
           ((C135238 + C135239 + C135240) * C139873 +
            (C122910 * C15912 - C123393 * C15623 - C122910 * C16401 +
             C122759 * C16633 + C122909 * C5397 - C123392 * C5273 -
             C122909 * C5621 + C140014 * C5733 + C122908 * C1741 -
             C123391 * C1570 - C122908 * C2074 + C140013 * C2230) *
                C139983) *
               C139731 * C140002) *
              C806 +
          (((C135240 + C135239 + C135238) * C139983 +
            (C122908 * C7979 - C123391 * C7754 - C122908 * C8422 +
             C140013 * C8634 + C122909 * C13300 - C123392 * C13128 -
             C122909 * C13620 + C140014 * C13779 + C122910 * C64472 -
             C123393 * C64244 - C122910 * C64928 + C122759 * C65141) *
                C139873) *
               C139731 * C140002 -
           ((C134288 + C134289 + C134290) * C139873 +
            (C131818 + C131817 + C131816) * C139983) *
               C139731 * C4096) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eexx[107] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C54790 * C114 - C54791 * C108 - C54790 * C115 + C139731 * C126) *
                C140013 +
            C61654 * C140014 + C61655 * C122759) *
               C139983 +
           (C130990 + C130991 + C130992) * C139873) *
              C5270 -
          ((C134389 + C134390 + C134391) * C139873 +
           (C67012 * C122759 + C61655 * C140014 + C61654 * C140013) * C139983) *
              C5271 +
          ((C61655 * C140013 + C67012 * C140014 + C112521 * C122759) * C139983 +
           (C60685 * C140013 + C64257 * C140014 +
            (C54790 * C67002 - C54791 * C67001 - C54790 * C67003 +
             C139731 * C67004) *
                C122759) *
               C139873) *
              C5272) *
         C139792 * C139758) /
        (p * q * std::sqrt(p + q));
    d2eexy[107] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139983 * C183 - C21860 * C108 + C139873 * C896 - C21861 * C813) *
                C54790 +
            (C139983 * C189 - C21860 * C115 + C139873 * C901 - C21861 * C822) *
                C139731) *
               C140013 +
           ((C39482 - C39483 + C39484 - C39485) * C54790 +
            (C39486 - C39487 + C39488 - C39489) * C139731) *
               C140014 +
           C137169 * C122759) *
              C5270 +
          (((C39483 - C39482 + C39485 - C39484) * C54790 +
            (C39487 - C39486 + C39489 - C39488) * C139731) *
               C140013 +
           ((C46346 - C46347 + C46348 - C46349) * C54790 +
            (C46350 - C46351 + C46352 - C46353) * C139731) *
               C140014 +
           ((C137157 - C137158 + C137159 - C137160) * C54790 +
            (C137161 - C137162 + C137163 - C137164) * C139731) *
               C122759) *
              C5271 +
          (C137169 * C140013 +
           ((C137158 - C137157 + C137160 - C137159) * C54790 +
            (C137162 - C137161 + C137164 - C137163) * C139731) *
               C140014 +
           ((C139983 * C21109 - C21860 * C21012 + C139873 * C67086 -
             C21861 * C67001) *
                C54790 +
            (C139983 * C21111 - C21860 * C21015 + C139873 * C67087 -
             C21861 * C67003) *
                C139731) *
               C122759) *
              C5272) *
         C139792 * C139758) /
        (p * q * std::sqrt(p + q));
    d2eexz[107] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C140013 * C266 - C122908 * C108 + C140014 * C1741 -
             C122909 * C1570 + C122759 * C5397 - C122910 * C5273) *
                C54790 +
            (C140013 * C272 - C122908 * C115 + C140014 * C1746 -
             C122909 * C1579 + C122759 * C5401 - C122910 * C5278) *
                C139731) *
               C139983 +
           ((C131192 - C131193 + C131194 - C131195 + C131196 - C131197) *
                C54790 +
            (C131198 - C131199 + C131200 - C131201 + C131202 - C131203) *
                C139731) *
               C139873) *
              C5270 +
          (((C122908 * C1570 - C140013 * C1741 + C122909 * C5273 -
             C140014 * C5397 + C122910 * C15623 - C122759 * C15912) *
                C54790 +
            (C122908 * C1579 - C140013 * C1746 + C122909 * C5278 -
             C140014 * C5401 + C122910 * C15628 - C122759 * C15915) *
                C139731) *
               C139983 +
           ((C134596 - C134597 + C134598 - C134599 + C134600 - C134601) *
                C54790 +
            (C134602 - C134603 + C134604 - C134605 + C134606 - C134607) *
                C139731) *
               C139873) *
              C5271 +
          (((C140013 * C5397 - C122908 * C5273 + C140014 * C15912 -
             C122909 * C15623 + C122759 * C21200 - C122910 * C21012) *
                C54790 +
            (C140013 * C5401 - C122908 * C5278 + C140014 * C15915 -
             C122909 * C15628 + C122759 * C21202 - C122910 * C21015) *
                C139731) *
               C139983 +
           ((C140013 * C13298 - C122908 * C13126 + C140014 * C18532 -
             C122909 * C18302 + C122759 * C67179 - C122910 * C67001) *
                C54790 +
            (C140013 * C13302 - C122908 * C13131 + C140014 * C18534 -
             C122909 * C18305 + C122759 * C67180 - C122910 * C67003) *
                C139731) *
               C139873) *
              C5272) *
         C139792 * C139758) /
        (p * q * std::sqrt(p + q));
    d2eeyx[107] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139731 * C114 - C54790 * C108) * C21860 +
            (C139731 * C354 - C54790 * C348) * C139983 +
            (C55513 - C55514) * C21861 + (C55515 - C55516) * C139873) *
               C140013 +
           ((C61976 - C61977) * C21860 + (C61978 - C61979) * C139983 +
            C64587 * C21861 + C64588 * C139873) *
               C140014 +
           C137324 * C122759) *
              C5270 +
          (((C61977 - C61976) * C21860 + (C61979 - C61978) * C139983 +
            C64591 * C21861 + C64592 * C139873) *
               C140013 +
           ((C61981 - C61980) * C21860 + (C61983 - C61982) * C139983 +
            C64593 * C21861 + C64594 * C139873) *
               C140014 +
           ((C67262 - C67263) * C21860 + (C67264 - C67265) * C139983 +
            (C64595 - C64596) * C21861 + (C64597 - C64598) * C139873) *
               C122759) *
              C5271 +
          (C137324 * C140013 +
           (C112692 * C21860 + C112693 * C139983 + (C64596 - C64595) * C21861 +
            (C64598 - C64597) * C139873) *
               C140014 +
           ((C112695 - C112694) * C21860 + (C112697 - C112696) * C139983 +
            (C139731 * C67002 - C54790 * C67001) * C21861 +
            (C139731 * C67256 - C54790 * C67255) * C139873) *
               C122759) *
              C5272) *
         C139792 * C139758) /
        (p * q * std::sqrt(p + q));
    d2eeyy[107] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C21860 * C183 - C22116 * C108 - C21860 * C348 + C139983 * C411 +
            C21861 * C896 - C22117 * C813 - C21861 * C1072 + C139873 * C1151) *
               C139731 * C140013 +
           (C39934 + C39935) * C139731 * C140014 + C137408 * C122759) *
              C5270 -
          ((C137413 + C137414) * C139731 * C122759 +
           (C46660 + C46661) * C139731 * C140014 +
           (C39935 + C39934) * C139731 * C140013) *
              C5271 +
          (C137408 * C140013 + (C137414 + C137413) * C139731 * C140014 +
           (C21860 * C21109 - C22116 * C21012 - C21860 * C21278 +
            C139983 * C21373 + C21861 * C67086 - C22117 * C67001 -
            C21861 * C67255 + C139873 * C67344) *
               C139731 * C122759) *
              C5272) *
         C139792 * C139758) /
        (p * q * std::sqrt(p + q));
    d2eeyz[107] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C140013 * C266 - C122908 * C108 + C140014 * C1741 -
            C122909 * C1570 + C122759 * C5397 - C122910 * C5273) *
               C21860 +
           (C140013 * C495 - C122908 * C348 + C140014 * C1997 -
            C122909 * C1829 + C122759 * C5567 - C122910 * C5455) *
               C139983 +
           (C131192 - C131193 + C131194 - C131195 + C131196 - C131197) *
               C21861 +
           (C131498 - C131499 + C131500 - C131501 + C131502 - C131503) *
               C139873) *
              C139731 * C5270 +
          ((C122908 * C1570 - C140013 * C1741 + C122909 * C5273 -
            C140014 * C5397 + C122910 * C15623 - C122759 * C15912) *
               C21860 +
           (C122908 * C1829 - C140013 * C1997 + C122909 * C5455 -
            C140014 * C5567 + C122910 * C16028 - C122759 * C16294) *
               C139983 +
           (C134596 - C134597 + C134598 - C134599 + C134600 - C134601) *
               C21861 +
           (C134916 - C134917 + C134918 - C134919 + C134920 - C134921) *
               C139873) *
              C139731 * C5271 +
          ((C140013 * C5397 - C122908 * C5273 + C140014 * C15912 -
            C122909 * C15623 + C122759 * C21200 - C122910 * C21012) *
               C21860 +
           (C140013 * C5567 - C122908 * C5455 + C140014 * C16294 -
            C122909 * C16028 + C122759 * C21459 - C122910 * C21278) *
               C139983 +
           (C140013 * C13298 - C122908 * C13126 + C140014 * C18532 -
            C122909 * C18302 + C122759 * C67179 - C122910 * C67001) *
               C21861 +
           (C140013 * C13540 - C122908 * C13380 + C140014 * C18862 -
            C122909 * C18634 + C122759 * C67435 - C122910 * C67255) *
               C139873) *
              C139731 * C5272) *
         C139792 * C139758) /
        (p * q * std::sqrt(p + q));
    d2eezx[107] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139731 * C114 - C54790 * C108) * C122908 +
            (C139731 * C573 - C54790 * C567) * C140013 +
            (C61976 - C61977) * C122909 + (C62328 - C62329) * C140014 +
            C67258 * C122910 + C67513 * C122759) *
               C139983 +
           ((C55513 - C55514) * C122908 + (C55735 - C55736) * C140013 +
            C64587 * C122909 + C64931 * C140014 + C64589 * C122910 +
            C64932 * C122759) *
               C139873) *
              C5270 +
          (((C61977 - C61976) * C122908 + (C62329 - C62328) * C140013 +
            (C61981 - C61980) * C122909 + (C62331 - C62330) * C140014 +
            (C67262 - C67263) * C122910 + (C67514 - C67515) * C122759) *
               C139983 +
           (C64591 * C122908 + C64933 * C140013 + C64593 * C122909 +
            C64934 * C140014 + (C64595 - C64596) * C122910 +
            (C64935 - C64936) * C122759) *
               C139873) *
              C5271 +
          ((C67258 * C122908 + C67513 * C140013 + C112692 * C122909 +
            C112864 * C140014 + (C112695 - C112694) * C122910 +
            (C112866 - C112865) * C122759) *
               C139983 +
           (C64589 * C122908 + C64932 * C140013 + (C64596 - C64595) * C122909 +
            (C64936 - C64935) * C140014 +
            (C139731 * C67002 - C54790 * C67001) * C122910 +
            (C139731 * C67511 - C54790 * C67510) * C122759) *
               C139873) *
              C5272) *
         C139792 * C139758) /
        (p * q * std::sqrt(p + q));
    d2eezy[107] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C139983 * C183 - C21860 * C108 + C139873 * C896 - C21861 * C813) *
               C122908 +
           (C139983 * C629 - C21860 * C567 + C139873 * C1393 - C21861 * C1317) *
               C140013 +
           (C39482 - C39483 + C39484 - C39485) * C122909 +
           (C40332 - C40333 + C40334 - C40335) * C140014 + C137165 * C122910 +
           C137643 * C122759) *
              C139731 * C5270 +
          ((C39483 - C39482 + C39485 - C39484) * C122908 +
           (C40333 - C40332 + C40335 - C40334) * C140013 +
           (C46346 - C46347 + C46348 - C46349) * C122909 +
           (C46956 - C46957 + C46958 - C46959) * C140014 +
           (C137157 - C137158 + C137159 - C137160) * C122910 +
           (C137639 - C137640 + C137641 - C137642) * C122759) *
              C139731 * C5271 +
          (C137165 * C122908 + C137643 * C140013 +
           (C137158 - C137157 + C137160 - C137159) * C122909 +
           (C137640 - C137639 + C137642 - C137641) * C140014 +
           (C139983 * C21109 - C21860 * C21012 + C139873 * C67086 -
            C21861 * C67001) *
               C122910 +
           (C139983 * C21620 - C21860 * C21535 + C139873 * C67589 -
            C21861 * C67510) *
               C122759) *
              C139731 * C5272) *
         C139792 * C139758) /
        (p * q * std::sqrt(p + q));
    d2eezz[107] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((C122908 * C266 - C123391 * C108 - C122908 * C567 +
                       C140013 * C702 + C122909 * C1741 - C123392 * C1570 -
                       C122909 * C2074 + C140014 * C2230 + C122910 * C5397 -
                       C123393 * C5273 - C122910 * C5621 + C122759 * C5733) *
                          C139983 +
                      (C131816 + C131817 + C131818) * C139873) *
                         C139731 * C5270 -
                     ((C135238 + C135239 + C135240) * C139873 +
                      (C122910 * C15912 - C123393 * C15623 - C122910 * C16401 +
                       C122759 * C16633 + C122909 * C5397 - C123392 * C5273 -
                       C122909 * C5621 + C140014 * C5733 + C122908 * C1741 -
                       C123391 * C1570 - C122908 * C2074 + C140013 * C2230) *
                          C139983) *
                         C139731 * C5271 +
                     ((C122908 * C5397 - C123391 * C5273 - C122908 * C5621 +
                       C140013 * C5733 + C122909 * C15912 - C123392 * C15623 -
                       C122909 * C16401 + C140014 * C16633 + C122910 * C21200 -
                       C123393 * C21012 - C122910 * C21535 + C122759 * C21699) *
                          C139983 +
                      (C122908 * C13298 - C123391 * C13126 - C122908 * C13618 +
                       C140013 * C13778 + C122909 * C18532 - C123392 * C18302 -
                       C122909 * C18962 + C140014 * C19172 + C122910 * C67179 -
                       C123393 * C67001 - C122910 * C67510 + C122759 * C67671) *
                          C139873) *
                         C139731 * C5272) *
                    C139792 * C139758) /
                   (p * q * std::sqrt(p + q));
    d2eexx[108] +=
        (-std::pow(Pi, 2.5) *
         ((((C54790 * C114 - C54791 * C108 - C54790 * C115 + C139731 * C126) *
                C92797 +
            C61654 * C139899) *
               C5813 +
           (C55303 * C92797 + C57671 * C139899) * C5814 +
           (C55304 * C92797 + C57670 * C139899) * C5815) *
              C139809 * C139792 * C97 -
          ((C85988 * C139899 + C55307 * C92797) * C5815 +
           (C60686 * C139899 + C55306 * C92797) * C5814 +
           (C61656 * C139899 +
            (C54790 * C116 - C54791 * C109 - C54790 * C117 + C139731 * C127) *
                C92797) *
               C5813) *
              C139809 * C139792 * C98 +
          (((C54790 * C118 - C54791 * C110 - C54790 * C119 + C139731 * C128) *
                C92797 +
            (C54790 * C1574 - C54791 * C1568 - C54790 * C1575 +
             C139731 * C1583) *
                C139899) *
               C5813 +
           ((C54790 * C817 - C54791 * C811 - C54790 * C818 + C139731 * C826) *
                C92797 +
            (C54790 * C3446 - C54791 * C3440 - C54790 * C3447 +
             C139731 * C3452) *
                C139899) *
               C5814 +
           ((C54790 * C2916 - C54791 * C2910 - C54790 * C2917 +
             C139731 * C2922) *
                C92797 +
            (C54790 * C7760 - C54791 * C7755 - C54790 * C7761 +
             C139731 * C7764) *
                C139899) *
               C5815) *
              C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C47136 * C114 - C47137 * C108 - C47136 * C115 + C47131 * C126 +
            C47138 * C116 - C47139 * C109 - C47138 * C117 + C47132 * C127 +
            C47140 * C118 - C47141 * C110 - C47140 * C119 + C47133 * C128) *
               C92797 +
           (C47136 * C1578 - C47137 * C1570 - C47136 * C1579 + C47131 * C1585 +
            C47138 * C1576 - C47139 * C1569 - C47138 * C1577 + C47132 * C1584 +
            C47140 * C1574 - C47141 * C1568 - C47140 * C1575 + C47133 * C1583) *
               C139899) *
              C139824 * C139809 * C139792 * C97 -
          ((C47140 * C1572 - C47141 * C1567 - C47140 * C1573 + C47133 * C1582 +
            C47138 * C1574 - C47139 * C1568 - C47138 * C1575 + C47132 * C1583 +
            C47136 * C1576 - C47137 * C1569 - C47136 * C1577 + C47131 * C1584) *
               C139899 +
           (C47140 * C120 - C47141 * C111 - C47140 * C121 + C47133 * C129 +
            C47138 * C118 - C47139 * C110 - C47138 * C119 + C47132 * C128 +
            C47136 * C116 - C47137 * C109 - C47136 * C117 + C47131 * C127) *
               C92797) *
              C139824 * C139809 * C139792 * C98 +
          ((C47136 * C118 - C47137 * C110 - C47136 * C119 + C47131 * C128 +
            C47138 * C120 - C47139 * C111 - C47138 * C121 + C47132 * C129 +
            C47140 * C122 - C47141 * C112 - C47140 * C123 + C47133 * C130) *
               C92797 +
           (C47136 * C1574 - C47137 * C1568 - C47136 * C1575 + C47131 * C1583 +
            C47138 * C1572 - C47139 * C1567 - C47138 * C1573 + C47132 * C1582 +
            C47140 * C1580 - C47141 * C1571 - C47140 * C1581 + C47133 * C1586) *
               C139899) *
              C139824 * C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C54790 * C114 - C54791 * C108 - C54790 * C115 + C139731 * C126) *
               C107999 +
           C61654 * C108000 + C61655 * C108001 + C67012 * C108002) *
              C139824 * C139809 * C139792 * C97 -
          ((C54790 * C15625 - C54791 * C15622 - C54790 * C15626 +
            C139731 * C15631) *
               C108002 +
           C61657 * C108001 + C61656 * C108000 +
           (C54790 * C116 - C54791 * C109 - C54790 * C117 + C139731 * C127) *
               C107999) *
              C139824 * C139809 * C139792 * C98 +
          ((C54790 * C118 - C54791 * C110 - C54790 * C119 + C139731 * C128) *
               C107999 +
           (C54790 * C1574 - C54791 * C1568 - C54790 * C1575 +
            C139731 * C1583) *
               C108000 +
           (C54790 * C5281 - C54791 * C5275 - C54790 * C5282 +
            C139731 * C5287) *
               C108001 +
           (C54790 * C15629 - C54791 * C15624 - C54790 * C15630 +
            C139731 * C15633) *
               C108002) *
              C139824 * C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eexy[108] +=
        (-std::pow(Pi, 2.5) *
         ((((C5813 * C183 - C5894 * C108 + C5814 * C896 - C5895 * C813 +
             C5815 * C2974 - C5896 * C2908) *
                C54790 +
            (C5813 * C189 - C5894 * C115 + C5814 * C901 - C5895 * C822 +
             C5815 * C2978 - C5896 * C2913) *
                C139731) *
               C92797 +
           ((C5813 * C1653 - C5894 * C1570 + C5814 * C3520 - C5895 * C3438 +
             C5815 * C7863 - C5896 * C7754) *
                C54790 +
            (C5813 * C1658 - C5894 * C1579 + C5814 * C3524 - C5895 * C3443 +
             C5815 * C7866 - C5896 * C7759) *
                C139731) *
               C139899) *
              C139809 * C139792 * C97 +
          (((C5899 - C5898 + C5901 - C5900 + C5903 - C5902) * C54790 +
            (C5905 - C5904 + C5907 - C5906 + C5909 - C5908) * C139731) *
               C92797 +
           ((C7870 - C7871 + C7872 - C7873 + C7874 - C7875) * C54790 +
            (C7876 - C7877 + C7878 - C7879 + C7880 - C7881) * C139731) *
               C139899) *
              C139809 * C139792 * C98 +
          (((C5911 - C5910 + C5913 - C5912 + C5915 - C5914) * C54790 +
            (C5917 - C5916 + C5919 - C5918 + C5921 - C5920) * C139731) *
               C92797 +
           ((C5813 * C1655 - C5894 * C1568 + C5814 * C3522 - C5895 * C3440 +
             C5815 * C7865 - C5896 * C7755) *
                C54790 +
            (C5813 * C1660 - C5894 * C1575 + C5814 * C3526 - C5895 * C3447 +
             C5815 * C7868 - C5896 * C7761) *
                C139731) *
               C139899) *
              C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C139824 * C183 - C182 * C108) * C47136 +
            (C139824 * C189 - C182 * C115) * C47131 + (C196 - C197) * C47138 +
            (C198 - C199) * C47132 + C212 * C47140 + C213 * C47133) *
               C92797 +
           ((C15795 - C15796) * C47136 + (C15797 - C15798) * C47131 +
            C15799 * C47138 + C15800 * C47132 + C29549 * C47140 +
            C29550 * C47133) *
               C139899) *
              C139809 * C139792 * C97 +
          (((C197 - C196) * C47136 + (C199 - C198) * C47131 +
            (C201 - C200) * C47138 + (C203 - C202) * C47132 +
            (C205 - C204) * C47140 + (C207 - C206) * C47133) *
               C92797 +
           (C15807 * C47136 + C15808 * C47131 + C31358 * C47138 +
            C31359 * C47132 + (C1672 - C1673) * C47140 +
            (C1674 - C1675) * C47133) *
               C139899) *
              C139809 * C139792 * C98 +
          ((C212 * C47136 + C213 * C47131 + C214 * C47138 + C215 * C47132 +
            (C209 - C208) * C47140 + (C211 - C210) * C47133) *
               C92797 +
           (C29549 * C47136 + C29550 * C47131 + (C1673 - C1672) * C47138 +
            (C1675 - C1674) * C47132 +
            (C139824 * C1657 - C182 * C1571) * C47140 +
            (C139824 * C1662 - C182 * C1581) * C47133) *
               C139899) *
              C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C139824 * C183 - C182 * C108) * C54790 +
            (C139824 * C189 - C182 * C115) * C139731) *
               C107999 +
           ((C15795 - C15796) * C54790 + (C15797 - C15798) * C139731) *
               C108000 +
           (C21114 * C54790 + C21115 * C139731) * C108001 +
           ((C21119 - C21118) * C54790 + (C21121 - C21120) * C139731) *
               C108002) *
              C139809 * C139792 * C97 +
          (((C197 - C196) * C54790 + (C199 - C198) * C139731) * C107999 +
           (C15807 * C54790 + C15808 * C139731) * C108000 +
           (C15809 * C54790 + C15810 * C139731) * C108001 +
           ((C15811 - C15812) * C54790 + (C15813 - C15814) * C139731) *
               C108002) *
              C139809 * C139792 * C98 +
          ((C212 * C54790 + C213 * C139731) * C107999 +
           (C29549 * C54790 + C29550 * C139731) * C108000 +
           ((C13939 - C13938) * C54790 + (C13941 - C13940) * C139731) *
               C108001 +
           ((C139824 * C15790 - C182 * C15624) * C54790 +
            (C139824 * C15793 - C182 * C15630) * C139731) *
               C108002) *
              C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eexz[108] +=
        (-std::pow(Pi, 2.5) *
         ((((C92797 * C266 - C92947 * C108 + C139899 * C1741 - C92948 * C1570) *
                C54790 +
            (C92797 * C272 - C92947 * C115 + C139899 * C1746 - C92948 * C1579) *
                C139731) *
               C5813 +
           ((C92797 * C984 - C92947 * C813 + C139899 * C3594 - C92948 * C3438) *
                C54790 +
            (C92797 * C989 - C92947 * C822 + C139899 * C3598 - C92948 * C3443) *
                C139731) *
               C5814 +
           ((C92797 * C3032 - C92947 * C2908 + C139899 * C7979 -
             C92948 * C7754) *
                C54790 +
            (C92797 * C3036 - C92947 * C2913 + C139899 * C7982 -
             C92948 * C7759) *
                C139731) *
               C5815) *
              C139809 * C139792 * C97 +
          (((C92951 - C92950 + C92953 - C92952) * C54790 +
            (C92955 - C92954 + C92957 - C92956) * C139731) *
               C5813 +
           ((C93789 - C93790 + C93791 - C93792) * C54790 +
            (C93793 - C93794 + C93795 - C93796) * C139731) *
               C5814 +
           ((C92947 * C2909 - C92797 * C3033 + C92948 * C7753 -
             C139899 * C7980) *
                C54790 +
            (C92947 * C2915 - C92797 * C3037 + C92948 * C7757 -
             C139899 * C7983) *
                C139731) *
               C5815) *
              C139809 * C139792 * C98 +
          ((C92978 * C54790 + C92979 * C139731) * C5813 +
           ((C93798 - C93797 + C93800 - C93799) * C54790 +
            (C93802 - C93801 + C93804 - C93803) * C139731) *
               C5814 +
           ((C92797 * C3034 - C92947 * C2910 + C139899 * C7981 -
             C92948 * C7755) *
                C54790 +
            (C92797 * C3038 - C92947 * C2917 + C139899 * C7984 -
             C92948 * C7761) *
                C139731) *
               C5815) *
              C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C92797 * C266 - C92947 * C108 + C139899 * C1741 - C92948 * C1570) *
               C47136 +
           (C92797 * C272 - C92947 * C115 + C139899 * C1746 - C92948 * C1579) *
               C47131 +
           (C92950 - C92951 + C92952 - C92953) * C47138 +
           (C92954 - C92955 + C92956 - C92957) * C47132 + C92978 * C47140 +
           C92979 * C47133) *
              C139824 * C139809 * C139792 * C97 +
          ((C92951 - C92950 + C92953 - C92952) * C47136 +
           (C92955 - C92954 + C92957 - C92956) * C47131 +
           (C92959 - C92958 + C92961 - C92960) * C47138 +
           (C92963 - C92962 + C92965 - C92964) * C47132 +
           (C92966 - C92967 + C92968 - C92969) * C47140 +
           (C92970 - C92971 + C92972 - C92973) * C47133) *
              C139824 * C139809 * C139792 * C98 +
          (C92978 * C47136 + C92979 * C47131 +
           (C92967 - C92966 + C92969 - C92968) * C47138 +
           (C92971 - C92970 + C92973 - C92972) * C47132 +
           (C92797 * C270 - C92947 * C112 + C139899 * C1745 - C92948 * C1571) *
               C47140 +
           (C92797 * C276 - C92947 * C123 + C139899 * C1750 - C92948 * C1581) *
               C47133) *
              C139824 * C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C107999 * C266 - C108103 * C108 + C108000 * C1741 -
            C108104 * C1570 + C108001 * C5397 - C108105 * C5273 +
            C108002 * C15912 - C108106 * C15623) *
               C54790 +
           (C107999 * C272 - C108103 * C115 + C108000 * C1746 -
            C108104 * C1579 + C108001 * C5401 - C108105 * C5278 +
            C108002 * C15915 - C108106 * C15628) *
               C139731) *
              C139824 * C139809 * C139792 * C97 +
          ((C108103 * C109 - C107999 * C267 + C108104 * C1569 -
            C108000 * C1742 + C108105 * C5274 - C108001 * C5398 +
            C108106 * C15622 - C108002 * C15913) *
               C54790 +
           (C108103 * C117 - C107999 * C273 + C108104 * C1577 -
            C108000 * C1747 + C108105 * C5280 - C108001 * C5402 +
            C108106 * C15626 - C108002 * C15916) *
               C139731) *
              C139824 * C139809 * C139792 * C98 +
          ((C107999 * C268 - C108103 * C110 + C108000 * C1743 -
            C108104 * C1568 + C108001 * C5399 - C108105 * C5275 +
            C108002 * C15914 - C108106 * C15624) *
               C54790 +
           (C107999 * C274 - C108103 * C119 + C108000 * C1748 -
            C108104 * C1575 + C108001 * C5403 - C108105 * C5282 +
            C108002 * C15917 - C108106 * C15630) *
               C139731) *
              C139824 * C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[108] +=
        (-std::pow(Pi, 2.5) *
         ((((C139731 * C114 - C54790 * C108) * C5894 +
            (C139731 * C354 - C54790 * C348) * C5813 +
            (C55513 - C55514) * C5895 + (C55515 - C55516) * C5814 +
            C57297 * C5896 + C57298 * C5815) *
               C92797 +
           ((C61976 - C61977) * C5894 + (C61978 - C61979) * C5813 +
            C64587 * C5895 + C64588 * C5814 + C88899 * C5896 + C88900 * C5815) *
               C139899) *
              C139809 * C139792 * C97 +
          (((C54790 * C109 - C139731 * C116) * C5894 +
            (C54790 * C349 - C139731 * C355) * C5813 +
            (C55525 - C55526) * C5895 + (C55527 - C55528) * C5814 +
            (C55529 - C55530) * C5896 + (C55531 - C55532) * C5815) *
               C92797 +
           ((C61984 - C61985) * C5894 + (C61986 - C61987) * C5813 +
            (C61001 - C61002) * C5895 + (C61003 - C61004) * C5814 +
            (C86284 - C86285) * C5896 + (C86286 - C86287) * C5815) *
               C139899) *
              C139809 * C139792 * C98 +
          (((C139731 * C118 - C54790 * C110) * C5894 +
            (C139731 * C356 - C54790 * C350) * C5813 +
            (C139731 * C817 - C54790 * C811) * C5895 +
            (C139731 * C1079 - C54790 * C1074) * C5814 +
            (C139731 * C2916 - C54790 * C2910) * C5896 +
            (C139731 * C3096 - C54790 * C3092) * C5815) *
               C92797 +
           ((C139731 * C1574 - C54790 * C1568) * C5894 +
            (C139731 * C1836 - C54790 * C1831) * C5813 +
            (C139731 * C3446 - C54790 * C3440) * C5895 +
            (C139731 * C3674 - C54790 * C3670) * C5814 +
            (C139731 * C7760 - C54790 * C7755) * C5896 +
            (C139731 * C8096 - C54790 * C8093) * C5815) *
               C139899) *
              C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47131 * C114 - C47136 * C108 + C47132 * C116 - C47138 * C109 +
             C47133 * C118 - C47140 * C110) *
                C182 +
            (C47131 * C354 - C47136 * C348 + C47132 * C355 - C47138 * C349 +
             C47133 * C356 - C47140 * C350) *
                C139824) *
               C92797 +
           ((C47131 * C1578 - C47136 * C1570 + C47132 * C1576 - C47138 * C1569 +
             C47133 * C1574 - C47140 * C1568) *
                C182 +
            (C47131 * C1834 - C47136 * C1829 + C47132 * C1835 - C47138 * C1830 +
             C47133 * C1836 - C47140 * C1831) *
                C139824) *
               C139899) *
              C139809 * C139792 * C97 +
          (((C47136 * C109 - C47131 * C116 + C47138 * C110 - C47132 * C118 +
             C47140 * C111 - C47133 * C120) *
                C182 +
            (C47136 * C349 - C47131 * C355 + C47138 * C350 - C47132 * C356 +
             C47140 * C351 - C47133 * C357) *
                C139824) *
               C92797 +
           ((C47136 * C1569 - C47131 * C1576 + C47138 * C1568 - C47132 * C1574 +
             C47140 * C1567 - C47133 * C1572) *
                C182 +
            (C47136 * C1830 - C47131 * C1835 + C47138 * C1831 - C47132 * C1836 +
             C47140 * C1832 - C47133 * C1837) *
                C139824) *
               C139899) *
              C139809 * C139792 * C98 +
          (((C47131 * C118 - C47136 * C110 + C47132 * C120 - C47138 * C111 +
             C47133 * C122 - C47140 * C112) *
                C182 +
            (C47131 * C356 - C47136 * C350 + C47132 * C357 - C47138 * C351 +
             C47133 * C358 - C47140 * C352) *
                C139824) *
               C92797 +
           ((C47131 * C1574 - C47136 * C1568 + C47132 * C1572 - C47138 * C1567 +
             C47133 * C1580 - C47140 * C1571) *
                C182 +
            (C47131 * C1836 - C47136 * C1831 + C47132 * C1837 - C47138 * C1832 +
             C47133 * C1838 - C47140 * C1833) *
                C139824) *
               C139899) *
              C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C139731 * C114 - C54790 * C108) * C182 +
            (C139731 * C354 - C54790 * C348) * C139824) *
               C107999 +
           ((C61976 - C61977) * C182 + (C61978 - C61979) * C139824) * C108000 +
           (C67258 * C182 + C67259 * C139824) * C108001 +
           ((C67263 - C67262) * C182 + (C67265 - C67264) * C139824) * C108002) *
              C139809 * C139792 * C97 +
          (((C54790 * C109 - C139731 * C116) * C182 +
            (C54790 * C349 - C139731 * C355) * C139824) *
               C107999 +
           ((C61984 - C61985) * C182 + (C61986 - C61987) * C139824) * C108000 +
           ((C61988 - C61989) * C182 + (C61990 - C61991) * C139824) * C108001 +
           ((C54790 * C15622 - C139731 * C15625) * C182 +
            (C54790 * C16029 - C139731 * C16032) * C139824) *
               C108002) *
              C139809 * C139792 * C98 +
          (((C139731 * C118 - C54790 * C110) * C182 +
            (C139731 * C356 - C54790 * C350) * C139824) *
               C107999 +
           ((C139731 * C1574 - C54790 * C1568) * C182 +
            (C139731 * C1836 - C54790 * C1831) * C139824) *
               C108000 +
           ((C139731 * C5281 - C54790 * C5275) * C182 +
            (C139731 * C5461 - C54790 * C5457) * C139824) *
               C108001 +
           ((C139731 * C15629 - C54790 * C15624) * C182 +
            (C139731 * C16033 - C54790 * C16030) * C139824) *
               C108002) *
              C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[108] +=
        (-std::pow(Pi, 2.5) *
         (((C5894 * C183 - C6151 * C108 - C5894 * C348 + C5813 * C411 +
            C5895 * C896 - C6152 * C813 - C5895 * C1072 + C5814 * C1151 +
            C5896 * C2974 - C6153 * C2908 - C5896 * C3090 + C5815 * C3148) *
               C139731 * C92797 +
           (C5894 * C1653 - C6151 * C1570 - C5894 * C1829 + C5813 * C1908 +
            C5895 * C3520 - C6152 * C3438 - C5895 * C3668 + C5814 * C3742 +
            C5896 * C7863 - C6153 * C7754 - C5896 * C8091 + C5815 * C8196) *
               C139731 * C139899) *
              C139809 * C139792 * C97 -
          ((C8217 + C8218 + C8219) * C139731 * C139899 +
           (C6193 + C6192 + C6191) * C139731 * C92797) *
              C139809 * C139792 * C98 +
          ((C6196 + C6195 + C6194) * C139731 * C92797 +
           (C5894 * C1655 - C6151 * C1568 - C5894 * C1831 + C5813 * C1906 +
            C5895 * C3522 - C6152 * C3440 - C5895 * C3670 + C5814 * C3744 +
            C5896 * C7865 - C6153 * C7755 - C5896 * C8093 + C5815 * C8197) *
               C139731 * C139899) *
              C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C182 * C183 - C410 * C108 - C182 * C348 + C139824 * C411) *
                C47131 +
            C442 * C47132 + C443 * C47133) *
               C92797 +
           (C16192 * C47131 + C1931 * C47132 + C1930 * C47133) * C139899) *
              C139809 * C139792 * C97 -
          ((C1929 * C47133 + C1930 * C47132 + C1931 * C47131) * C139899 +
           (C444 * C47133 + C443 * C47132 + C442 * C47131) * C92797) *
              C139809 * C139792 * C98 +
          ((C443 * C47131 + C444 * C47132 + C445 * C47133) * C92797 +
           (C1930 * C47131 + C1929 * C47132 +
            (C182 * C1657 - C410 * C1571 - C182 * C1833 + C139824 * C1909) *
                C47133) *
               C139899) *
              C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C182 * C183 - C410 * C108 - C182 * C348 + C139824 * C411) *
               C139731 * C107999 +
           C16192 * C139731 * C108000 + C16193 * C139731 * C108001 +
           C21384 * C139731 * C108002) *
              C139809 * C139792 * C97 -
          (C16194 * C139731 * C108002 + C14203 * C139731 * C108001 +
           C1931 * C139731 * C108000 + C442 * C139731 * C107999) *
              C139809 * C139792 * C98 +
          (C443 * C139731 * C107999 + C1930 * C139731 * C108000 +
           C14204 * C139731 * C108001 +
           (C182 * C15790 - C410 * C15624 - C182 * C16030 + C139824 * C16166) *
               C139731 * C108002) *
              C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[108] +=
        (-std::pow(Pi, 2.5) *
         (((C92797 * C266 - C92947 * C108 + C139899 * C1741 - C92948 * C1570) *
               C5894 +
           (C92797 * C495 - C92947 * C348 + C139899 * C1997 - C92948 * C1829) *
               C5813 +
           (C92797 * C984 - C92947 * C813 + C139899 * C3594 - C92948 * C3438) *
               C5895 +
           (C92797 * C1240 - C92947 * C1072 + C139899 * C3812 -
            C92948 * C3668) *
               C5814 +
           (C92797 * C3032 - C92947 * C2908 + C139899 * C7979 -
            C92948 * C7754) *
               C5896 +
           (C92797 * C3202 - C92947 * C3090 + C139899 * C8317 -
            C92948 * C8091) *
               C5815) *
              C139731 * C139809 * C139792 * C97 +
          ((C92951 - C92950 + C92953 - C92952) * C5894 +
           (C93203 - C93202 + C93205 - C93204) * C5813 +
           (C93789 - C93790 + C93791 - C93792) * C5895 +
           (C94099 - C94100 + C94101 - C94102) * C5814 +
           (C92947 * C2909 - C92797 * C3033 + C92948 * C7753 -
            C139899 * C7980) *
               C5896 +
           (C92947 * C3091 - C92797 * C3203 + C92948 * C8092 -
            C139899 * C8318) *
               C5815) *
              C139731 * C139809 * C139792 * C98 +
          (C92978 * C5894 + C93217 * C5813 +
           (C93798 - C93797 + C93800 - C93799) * C5895 +
           (C94104 - C94103 + C94106 - C94105) * C5814 +
           (C92797 * C3034 - C92947 * C2910 + C139899 * C7981 -
            C92948 * C7755) *
               C5896 +
           (C92797 * C3204 - C92947 * C3092 + C139899 * C8319 -
            C92948 * C8093) *
               C5815) *
              C139731 * C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C92797 * C266 - C92947 * C108 + C139899 * C1741 - C92948 * C1570) *
                C182 +
            (C92797 * C495 - C92947 * C348 + C139899 * C1997 - C92948 * C1829) *
                C139824) *
               C47131 +
           ((C92950 - C92951 + C92952 - C92953) * C182 +
            (C93202 - C93203 + C93204 - C93205) * C139824) *
               C47132 +
           C93219 * C47133) *
              C139809 * C139792 * C97 +
          (((C92951 - C92950 + C92953 - C92952) * C182 +
            (C93203 - C93202 + C93205 - C93204) * C139824) *
               C47131 +
           ((C92959 - C92958 + C92961 - C92960) * C182 +
            (C93208 - C93207 + C93210 - C93209) * C139824) *
               C47132 +
           ((C92966 - C92967 + C92968 - C92969) * C182 +
            (C93211 - C93212 + C93213 - C93214) * C139824) *
               C47133) *
              C139809 * C139792 * C98 +
          (C93219 * C47131 +
           ((C92967 - C92966 + C92969 - C92968) * C182 +
            (C93212 - C93211 + C93214 - C93213) * C139824) *
               C47132 +
           ((C92797 * C270 - C92947 * C112 + C139899 * C1745 - C92948 * C1571) *
                C182 +
            (C92797 * C499 - C92947 * C352 + C139899 * C2001 - C92948 * C1833) *
                C139824) *
               C47133) *
              C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C107999 * C266 - C108103 * C108 + C108000 * C1741 -
            C108104 * C1570 + C108001 * C5397 - C108105 * C5273 +
            C108002 * C15912 - C108106 * C15623) *
               C182 +
           (C107999 * C495 - C108103 * C348 + C108000 * C1997 -
            C108104 * C1829 + C108001 * C5567 - C108105 * C5455 +
            C108002 * C16294 - C108106 * C16028) *
               C139824) *
              C139731 * C139809 * C139792 * C97 +
          ((C108103 * C109 - C107999 * C267 + C108104 * C1569 -
            C108000 * C1742 + C108105 * C5274 - C108001 * C5398 +
            C108106 * C15622 - C108002 * C15913) *
               C182 +
           (C108103 * C349 - C107999 * C496 + C108104 * C1830 -
            C108000 * C1998 + C108105 * C5456 - C108001 * C5568 +
            C108106 * C16029 - C108002 * C16295) *
               C139824) *
              C139731 * C139809 * C139792 * C98 +
          ((C107999 * C268 - C108103 * C110 + C108000 * C1743 -
            C108104 * C1568 + C108001 * C5399 - C108105 * C5275 +
            C108002 * C15914 - C108106 * C15624) *
               C182 +
           (C107999 * C497 - C108103 * C350 + C108000 * C1999 -
            C108104 * C1831 + C108001 * C5569 - C108105 * C5457 +
            C108002 * C16296 - C108106 * C16030) *
               C139824) *
              C139731 * C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eezx[108] +=
        (-std::pow(Pi, 2.5) *
         ((((C139731 * C114 - C54790 * C108) * C92947 +
            (C139731 * C573 - C54790 * C567) * C92797 +
            (C61976 - C61977) * C92948 + (C62328 - C62329) * C139899) *
               C5813 +
           ((C55513 - C55514) * C92947 + (C55735 - C55736) * C92797 +
            C64587 * C92948 + C64931 * C139899) *
               C5814 +
           (C57297 * C92947 + C57463 * C92797 + C88899 * C92948 +
            C89133 * C139899) *
               C5815) *
              C139809 * C139792 * C97 +
          (((C54790 * C109 - C139731 * C116) * C92947 +
            (C54790 * C568 - C139731 * C574) * C92797 +
            (C61984 - C61985) * C92948 + (C62332 - C62333) * C139899) *
               C5813 +
           ((C55525 - C55526) * C92947 + (C55741 - C55742) * C92797 +
            (C61001 - C61002) * C92948 + (C61311 - C61312) * C139899) *
               C5814 +
           ((C55529 - C55530) * C92947 + (C55743 - C55744) * C92797 +
            (C86284 - C86285) * C92948 + (C86582 - C86583) * C139899) *
               C5815) *
              C139809 * C139792 * C98 +
          (((C139731 * C118 - C54790 * C110) * C92947 +
            (C139731 * C575 - C54790 * C569) * C92797 +
            (C139731 * C1574 - C54790 * C1568) * C92948 +
            (C139731 * C2081 - C54790 * C2076) * C139899) *
               C5813 +
           ((C139731 * C817 - C54790 * C811) * C92947 +
            (C139731 * C1324 - C54790 * C1319) * C92797 +
            (C139731 * C3446 - C54790 * C3440) * C92948 +
            (C139731 * C3888 - C54790 * C3884) * C139899) *
               C5814 +
           ((C139731 * C2916 - C54790 * C2910) * C92947 +
            (C139731 * C3262 - C54790 * C3258) * C92797 +
            (C139731 * C7760 - C54790 * C7755) * C92948 +
            (C139731 * C8427 - C54790 * C8424) * C139899) *
               C5815) *
              C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C47131 * C114 - C47136 * C108 + C47132 * C116 - C47138 * C109 +
            C47133 * C118 - C47140 * C110) *
               C92947 +
           (C47131 * C573 - C47136 * C567 + C47132 * C574 - C47138 * C568 +
            C47133 * C575 - C47140 * C569) *
               C92797 +
           (C47131 * C1578 - C47136 * C1570 + C47132 * C1576 - C47138 * C1569 +
            C47133 * C1574 - C47140 * C1568) *
               C92948 +
           (C47131 * C2079 - C47136 * C2074 + C47132 * C2080 - C47138 * C2075 +
            C47133 * C2081 - C47140 * C2076) *
               C139899) *
              C139824 * C139809 * C139792 * C97 +
          ((C47136 * C109 - C47131 * C116 + C47138 * C110 - C47132 * C118 +
            C47140 * C111 - C47133 * C120) *
               C92947 +
           (C47136 * C568 - C47131 * C574 + C47138 * C569 - C47132 * C575 +
            C47140 * C570 - C47133 * C576) *
               C92797 +
           (C47136 * C1569 - C47131 * C1576 + C47138 * C1568 - C47132 * C1574 +
            C47140 * C1567 - C47133 * C1572) *
               C92948 +
           (C47136 * C2075 - C47131 * C2080 + C47138 * C2076 - C47132 * C2081 +
            C47140 * C2077 - C47133 * C2082) *
               C139899) *
              C139824 * C139809 * C139792 * C98 +
          ((C47131 * C118 - C47136 * C110 + C47132 * C120 - C47138 * C111 +
            C47133 * C122 - C47140 * C112) *
               C92947 +
           (C47131 * C575 - C47136 * C569 + C47132 * C576 - C47138 * C570 +
            C47133 * C577 - C47140 * C571) *
               C92797 +
           (C47131 * C1574 - C47136 * C1568 + C47132 * C1572 - C47138 * C1567 +
            C47133 * C1580 - C47140 * C1571) *
               C92948 +
           (C47131 * C2081 - C47136 * C2076 + C47132 * C2082 - C47138 * C2077 +
            C47133 * C2083 - C47140 * C2078) *
               C139899) *
              C139824 * C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C139731 * C114 - C54790 * C108) * C108103 +
           (C139731 * C573 - C54790 * C567) * C107999 +
           (C61976 - C61977) * C108104 + (C62328 - C62329) * C108000 +
           C67258 * C108105 + C67513 * C108001 + (C67263 - C67262) * C108106 +
           (C67515 - C67514) * C108002) *
              C139824 * C139809 * C139792 * C97 +
          ((C54790 * C109 - C139731 * C116) * C108103 +
           (C54790 * C568 - C139731 * C574) * C107999 +
           (C61984 - C61985) * C108104 + (C62332 - C62333) * C108000 +
           (C61988 - C61989) * C108105 + (C62334 - C62335) * C108001 +
           (C54790 * C15622 - C139731 * C15625) * C108106 +
           (C54790 * C16402 - C139731 * C16405) * C108002) *
              C139824 * C139809 * C139792 * C98 +
          ((C139731 * C118 - C54790 * C110) * C108103 +
           (C139731 * C575 - C54790 * C569) * C107999 +
           (C139731 * C1574 - C54790 * C1568) * C108104 +
           (C139731 * C2081 - C54790 * C2076) * C108000 +
           (C139731 * C5281 - C54790 * C5275) * C108105 +
           (C139731 * C5627 - C54790 * C5623) * C108001 +
           (C139731 * C15629 - C54790 * C15624) * C108106 +
           (C139731 * C16406 - C54790 * C16403) * C108002) *
              C139824 * C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eezy[108] +=
        (-std::pow(Pi, 2.5) *
         (((C5813 * C183 - C5894 * C108 + C5814 * C896 - C5895 * C813 +
            C5815 * C2974 - C5896 * C2908) *
               C92947 +
           (C5813 * C629 - C5894 * C567 + C5814 * C1393 - C5895 * C1317 +
            C5815 * C3314 - C5896 * C3256) *
               C92797 +
           (C5813 * C1653 - C5894 * C1570 + C5814 * C3520 - C5895 * C3438 +
            C5815 * C7863 - C5896 * C7754) *
               C92948 +
           (C5813 * C2150 - C5894 * C2074 + C5814 * C3956 - C5895 * C3882 +
            C5815 * C8526 - C5896 * C8422) *
               C139899) *
              C139731 * C139809 * C139792 * C97 +
          ((C5899 - C5898 + C5901 - C5900 + C5903 - C5902) * C92947 +
           (C6424 - C6423 + C6426 - C6425 + C6428 - C6427) * C92797 +
           (C7870 - C7871 + C7872 - C7873 + C7874 - C7875) * C92948 +
           (C8530 - C8531 + C8532 - C8533 + C8534 - C8535) * C139899) *
              C139731 * C139809 * C139792 * C98 +
          ((C5911 - C5910 + C5913 - C5912 + C5915 - C5914) * C92947 +
           (C6430 - C6429 + C6432 - C6431 + C6434 - C6433) * C92797 +
           (C5813 * C1655 - C5894 * C1568 + C5814 * C3522 - C5895 * C3440 +
            C5815 * C7865 - C5896 * C7755) *
               C92948 +
           (C5813 * C2152 - C5894 * C2076 + C5814 * C3958 - C5895 * C3884 +
            C5815 * C8528 - C5896 * C8424) *
               C139899) *
              C139731 * C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C139824 * C183 - C182 * C108) * C92947 +
            (C139824 * C629 - C182 * C567) * C92797 +
            (C15795 - C15796) * C92948 + (C16525 - C16526) * C139899) *
               C47131 +
           ((C196 - C197) * C92947 + (C636 - C637) * C92797 + C15799 * C92948 +
            C16529 * C139899) *
               C47132 +
           C93374 * C47133) *
              C139809 * C139792 * C97 +
          (((C197 - C196) * C92947 + (C637 - C636) * C92797 + C15807 * C92948 +
            C16531 * C139899) *
               C47131 +
           ((C201 - C200) * C92947 + (C640 - C639) * C92797 + C31358 * C92948 +
            C32014 * C139899) *
               C47132 +
           ((C205 - C204) * C92947 + (C643 - C642) * C92797 +
            (C1672 - C1673) * C92948 + (C2160 - C2161) * C139899) *
               C47133) *
              C139809 * C139792 * C98 +
          (C93374 * C47131 +
           (C214 * C92947 + C647 * C92797 + (C1673 - C1672) * C92948 +
            (C2161 - C2160) * C139899) *
               C47132 +
           ((C209 - C208) * C92947 + (C645 - C644) * C92797 +
            (C139824 * C1657 - C182 * C1571) * C92948 +
            (C139824 * C2154 - C182 * C2078) * C139899) *
               C47133) *
              C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C139824 * C183 - C182 * C108) * C108103 +
           (C139824 * C629 - C182 * C567) * C107999 +
           (C15795 - C15796) * C108104 + (C16525 - C16526) * C108000 +
           C21114 * C108105 + C21623 * C108001 + (C21119 - C21118) * C108106 +
           (C21625 - C21624) * C108002) *
              C139731 * C139809 * C139792 * C97 +
          ((C197 - C196) * C108103 + (C637 - C636) * C107999 +
           C15807 * C108104 + C16531 * C108000 + C15809 * C108105 +
           C16532 * C108001 + (C15811 - C15812) * C108106 +
           (C16533 - C16534) * C108002) *
              C139731 * C139809 * C139792 * C98 +
          (C212 * C108103 + C646 * C107999 + C29549 * C108104 +
           C30048 * C108000 + (C13939 - C13938) * C108105 +
           (C14442 - C14441) * C108001 +
           (C139824 * C15790 - C182 * C15624) * C108106 +
           (C139824 * C16523 - C182 * C16403) * C108002) *
              C139731 * C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eezz[108] +=
        (-std::pow(Pi, 2.5) *
         (((C92947 * C266 - C93448 * C108 - C92947 * C567 + C92797 * C702 +
            C92948 * C1741 - C93449 * C1570 - C92948 * C2074 +
            C139899 * C2230) *
               C5813 +
           (C92947 * C984 - C93448 * C813 - C92947 * C1317 + C92797 * C1473 +
            C92948 * C3594 - C93449 * C3438 - C92948 * C3882 +
            C139899 * C4026) *
               C5814 +
           (C92947 * C3032 - C93448 * C2908 - C92947 * C3256 + C92797 * C3368 +
            C92948 * C7979 - C93449 * C7754 - C92948 * C8422 +
            C139899 * C8634) *
               C5815) *
              C139731 * C139809 * C139792 * C97 -
          ((C92948 * C7980 - C93449 * C7753 - C92948 * C8423 + C139899 * C8633 +
            C92947 * C3033 - C93448 * C2909 - C92947 * C3257 + C92797 * C3369) *
               C5815 +
           (C94427 + C94428) * C5814 + (C93488 + C93487) * C5813) *
              C139731 * C139809 * C139792 * C98 +
          (C93493 * C5813 + (C94426 + C94425) * C5814 +
           (C92947 * C3034 - C93448 * C2910 - C92947 * C3258 + C92797 * C3370 +
            C92948 * C7981 - C93449 * C7755 - C92948 * C8424 +
            C139899 * C8635) *
               C5815) *
              C139731 * C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C92947 * C266 - C93448 * C108 - C92947 * C567 + C92797 * C702 +
            C92948 * C1741 - C93449 * C1570 - C92948 * C2074 +
            C139899 * C2230) *
               C139824 * C47131 +
           (C93487 + C93488) * C139824 * C47132 + C93494 * C47133) *
              C139809 * C139792 * C97 -
          ((C93491 + C93492) * C139824 * C47133 +
           (C93490 + C93489) * C139824 * C47132 +
           (C93488 + C93487) * C139824 * C47131) *
              C139809 * C139792 * C98 +
          (C93494 * C47131 + (C93492 + C93491) * C139824 * C47132 +
           (C92947 * C270 - C93448 * C112 - C92947 * C571 + C92797 * C706 +
            C92948 * C1745 - C93449 * C1571 - C92948 * C2078 +
            C139899 * C2231) *
               C139824 * C47133) *
              C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((C108103 * C266 - C108407 * C108 - C108103 * C567 + C107999 * C702 +
           C108104 * C1741 - C108408 * C1570 - C108104 * C2074 +
           C108000 * C2230 + C108105 * C5397 - C108409 * C5273 -
           C108105 * C5621 + C108001 * C5733 + C108106 * C15912 -
           C108410 * C15623 - C108106 * C16401 + C108002 * C16633) *
              C139824 * C139731 * C139809 * C139792 * C97 -
          (C108106 * C15913 - C108410 * C15622 - C108106 * C16402 +
           C108002 * C16632 + C108105 * C5398 - C108409 * C5274 -
           C108105 * C5622 + C108001 * C5734 + C108104 * C1742 -
           C108408 * C1569 - C108104 * C2075 + C108000 * C2229 +
           C108103 * C267 - C108407 * C109 - C108103 * C568 + C107999 * C703) *
              C139824 * C139731 * C139809 * C139792 * C98 +
          (C108103 * C268 - C108407 * C110 - C108103 * C569 + C107999 * C704 +
           C108104 * C1743 - C108408 * C1568 - C108104 * C2076 +
           C108000 * C2228 + C108105 * C5399 - C108409 * C5275 -
           C108105 * C5623 + C108001 * C5735 + C108106 * C15914 -
           C108410 * C15624 - C108106 * C16403 + C108002 * C16634) *
              C139824 * C139731 * C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eexx[109] +=
        (-std::pow(Pi, 2.5) *
         (((((C54790 * C114 - C54791 * C108 - C54790 * C115 + C139731 * C126) *
                 C92797 +
             C61654 * C139899) *
                C5813 +
            (C101116 + C101117) * C5814 + (C101118 + C101119) * C5815) *
               C139809 * C806 -
           ((C57669 * C139899 + C55305 * C92797) * C5815 +
            (C101119 + C101118) * C5814 + (C101117 + C101116) * C5813) *
               C139809 * C140000) *
              C808 +
          (((C101120 + C101121) * C5813 + (C101122 + C101123) * C5814 +
            (C55308 * C92797 + (C54790 * C10398 - C54791 * C10395 -
                                C54790 * C10399 + C139731 * C10401) *
                                   C139899) *
                C5815) *
               C139809 * C140000 -
           ((C101123 + C101122) * C5815 + (C101121 + C101120) * C5814 +
            (C61656 * C139899 +
             (C54790 * C116 - C54791 * C109 - C54790 * C117 + C139731 * C127) *
                 C92797) *
                C5813) *
               C139809 * C806) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47136 * C114 - C47137 * C108 - C47136 * C115 + C47131 * C126 +
             C47138 * C116 - C47139 * C109 - C47138 * C117 + C47132 * C127 +
             C47140 * C118 - C47141 * C110 - C47140 * C119 + C47133 * C128) *
                C92797 +
            (C47136 * C1578 - C47137 * C1570 - C47136 * C1579 + C47131 * C1585 +
             C47138 * C1576 - C47139 * C1569 - C47138 * C1577 + C47132 * C1584 +
             C47140 * C1574 - C47141 * C1568 - C47140 * C1575 +
             C47133 * C1583) *
                C139899) *
               C139824 * C139809 * C806 -
           ((C51501 + C51502 + C51503) * C139899 +
            (C47980 + C47979 + C47978) * C92797) *
               C139824 * C139809 * C140000) *
              C808 +
          (((C47981 + C47982 + C47983) * C92797 +
            (C47136 * C3444 - C47137 * C3439 - C47136 * C3445 + C47131 * C3451 +
             C47138 * C3446 - C47139 * C3440 - C47138 * C3447 + C47132 * C3452 +
             C47140 * C3448 - C47141 * C3441 - C47140 * C3449 +
             C47133 * C3453) *
                C139899) *
               C139824 * C139809 * C140000 -
           ((C47140 * C1572 - C47141 * C1567 - C47140 * C1573 + C47133 * C1582 +
             C47138 * C1574 - C47139 * C1568 - C47138 * C1575 + C47132 * C1583 +
             C47136 * C1576 - C47137 * C1569 - C47136 * C1577 +
             C47131 * C1584) *
                C139899 +
            (C47140 * C120 - C47141 * C111 - C47140 * C121 + C47133 * C129 +
             C47138 * C118 - C47139 * C110 - C47138 * C119 + C47132 * C128 +
             C47136 * C116 - C47137 * C109 - C47136 * C117 + C47131 * C127) *
                C92797) *
               C139824 * C139809 * C806) *
              C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C54790 * C114 - C54791 * C108 - C54790 * C115 + C139731 * C126) *
                C107999 +
            C61654 * C108000 + C61655 * C108001 + C67012 * C108002) *
               C139824 * C139809 * C806 -
           (C64257 * C108002 + C60685 * C108001 + C57671 * C108000 +
            C55303 * C107999) *
               C139824 * C139809 * C140000) *
              C808 +
          ((C55306 * C107999 + C60686 * C108000 + C60687 * C108001 +
            (C54790 * C18306 - C54791 * C18303 - C54790 * C18307 +
             C139731 * C18309) *
                C108002) *
               C139824 * C139809 * C140000 -
           ((C54790 * C15625 - C54791 * C15622 - C54790 * C15626 +
             C139731 * C15631) *
                C108002 +
            C61657 * C108001 + C61656 * C108000 +
            (C54790 * C116 - C54791 * C109 - C54790 * C117 + C139731 * C127) *
                C107999) *
               C139824 * C139809 * C806) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eexy[109] +=
        (-std::pow(Pi, 2.5) *
         (((((C5813 * C183 - C5894 * C108 + C5814 * C896 - C5895 * C813 +
              C5815 * C2974 - C5896 * C2908) *
                 C54790 +
             (C5813 * C189 - C5894 * C115 + C5814 * C901 - C5895 * C822 +
              C5815 * C2978 - C5896 * C2913) *
                 C139731) *
                C92797 +
            ((C5813 * C1653 - C5894 * C1570 + C5814 * C3520 - C5895 * C3438 +
              C5815 * C7863 - C5896 * C7754) *
                 C54790 +
             (C5813 * C1658 - C5894 * C1579 + C5814 * C3524 - C5895 * C3443 +
              C5815 * C7866 - C5896 * C7759) *
                 C139731) *
                C139899) *
               C139809 * C806 +
           (((C5894 * C813 - C5813 * C896 + C5895 * C2908 - C5814 * C2974 +
              C5896 * C6627 - C5815 * C6792) *
                 C54790 +
             (C5894 * C822 - C5813 * C901 + C5895 * C2913 - C5814 * C2978 +
              C5896 * C6632 - C5815 * C6795) *
                 C139731) *
                C92797 +
            ((C5894 * C3438 - C5813 * C3520 + C5895 * C7754 - C5814 * C7863 +
              C5896 * C10394 - C5815 * C10528) *
                 C54790 +
             (C5894 * C3443 - C5813 * C3524 + C5895 * C7759 - C5814 * C7866 +
              C5896 * C10397 - C5815 * C10530) *
                 C139731) *
                C139899) *
               C139809 * C140000) *
              C808 +
          ((((C5899 - C5898 + C5901 - C5900 + C5903 - C5902) * C54790 +
             (C5905 - C5904 + C5907 - C5906 + C5909 - C5908) * C139731) *
                C92797 +
            ((C7870 - C7871 + C7872 - C7873 + C7874 - C7875) * C54790 +
             (C7876 - C7877 + C7878 - C7879 + C7880 - C7881) * C139731) *
                C139899) *
               C139809 * C806 +
           (((C6800 - C6799 + C6802 - C6801 + C6804 - C6803) * C54790 +
             (C6806 - C6805 + C6808 - C6807 + C6810 - C6809) * C139731) *
                C92797 +
            ((C5813 * C3521 - C5894 * C3439 + C5814 * C7864 - C5895 * C7753 +
              C5815 * C10529 - C5896 * C10395) *
                 C54790 +
             (C5813 * C3525 - C5894 * C3445 + C5814 * C7867 - C5895 * C7757 +
              C5815 * C10531 - C5896 * C10399) *
                 C139731) *
                C139899) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C139824 * C183 - C182 * C108) * C47136 +
             (C139824 * C189 - C182 * C115) * C47131 + (C196 - C197) * C47138 +
             (C198 - C199) * C47132 + C212 * C47140 + C213 * C47133) *
                C92797 +
            ((C15795 - C15796) * C47136 + (C15797 - C15798) * C47131 +
             C15799 * C47138 + C15800 * C47132 + C29549 * C47140 +
             C29550 * C47133) *
                C139899) *
               C139809 * C806 +
           (((C182 * C813 - C139824 * C896) * C47136 +
             (C182 * C822 - C139824 * C901) * C47131 + (C907 - C908) * C47138 +
             (C909 - C910) * C47132 + (C911 - C912) * C47140 +
             (C913 - C914) * C47133) *
                C92797 +
            ((C18427 - C18428) * C47136 + (C18429 - C18430) * C47131 +
             (C14764 - C14765) * C47138 + (C14766 - C14767) * C47132 +
             (C30369 - C30370) * C47140 + (C30371 - C30372) * C47133) *
                C139899) *
               C139809 * C140000) *
              C808 +
          ((((C197 - C196) * C47136 + (C199 - C198) * C47131 +
             (C201 - C200) * C47138 + (C203 - C202) * C47132 +
             (C205 - C204) * C47140 + (C207 - C206) * C47133) *
                C92797 +
            (C15807 * C47136 + C15808 * C47131 + C31358 * C47138 +
             C31359 * C47132 + (C1672 - C1673) * C47140 +
             (C1674 - C1675) * C47133) *
                C139899) *
               C139809 * C806 +
           (((C908 - C907) * C47136 + (C910 - C909) * C47131 +
             (C912 - C911) * C47138 + (C914 - C913) * C47132 +
             (C916 - C915) * C47140 + (C918 - C917) * C47133) *
                C92797 +
            ((C14765 - C14764) * C47136 + (C14767 - C14766) * C47131 +
             (C30370 - C30369) * C47138 + (C30372 - C30371) * C47132 +
             (C139824 * C3523 - C182 * C3441) * C47140 +
             (C139824 * C3527 - C182 * C3449) * C47133) *
                C139899) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C139824 * C183 - C182 * C108) * C54790 +
             (C139824 * C189 - C182 * C115) * C139731) *
                C107999 +
            ((C15795 - C15796) * C54790 + (C15797 - C15798) * C139731) *
                C108000 +
            (C21114 * C54790 + C21115 * C139731) * C108001 +
            ((C21119 - C21118) * C54790 + (C21121 - C21120) * C139731) *
                C108002) *
               C139809 * C806 +
           (((C182 * C813 - C139824 * C896) * C54790 +
             (C182 * C822 - C139824 * C901) * C139731) *
                C107999 +
            ((C18427 - C18428) * C54790 + (C18429 - C18430) * C139731) *
                C108000 +
            ((C18431 - C18432) * C54790 + (C18433 - C18434) * C139731) *
                C108001 +
            ((C182 * C18302 - C139824 * C18422) * C54790 +
             (C182 * C18305 - C139824 * C18424) * C139731) *
                C108002) *
               C139809 * C140000) *
              C808 +
          ((((C197 - C196) * C54790 + (C199 - C198) * C139731) * C107999 +
            (C15807 * C54790 + C15808 * C139731) * C108000 +
            (C15809 * C54790 + C15810 * C139731) * C108001 +
            ((C15811 - C15812) * C54790 + (C15813 - C15814) * C139731) *
                C108002) *
               C139809 * C806 +
           (((C908 - C907) * C54790 + (C910 - C909) * C139731) * C107999 +
            ((C14765 - C14764) * C54790 + (C14767 - C14766) * C139731) *
                C108000 +
            ((C14769 - C14768) * C54790 + (C14771 - C14770) * C139731) *
                C108001 +
            ((C139824 * C18423 - C182 * C18303) * C54790 +
             (C139824 * C18425 - C182 * C18307) * C139731) *
                C108002) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eexz[109] +=
        (-std::pow(Pi, 2.5) *
         (((((C92797 * C266 - C92947 * C108 + C139899 * C1741 -
              C92948 * C1570) *
                 C54790 +
             (C92797 * C272 - C92947 * C115 + C139899 * C1746 -
              C92948 * C1579) *
                 C139731) *
                C5813 +
            ((C101320 - C101321 + C101322 - C101323) * C54790 +
             (C101324 - C101325 + C101326 - C101327) * C139731) *
                C5814 +
            ((C101328 - C101329 + C101330 - C101331) * C54790 +
             (C101332 - C101333 + C101334 - C101335) * C139731) *
                C5815) *
               C139809 * C806 +
           (((C101321 - C101320 + C101323 - C101322) * C54790 +
             (C101325 - C101324 + C101327 - C101326) * C139731) *
                C5813 +
            ((C101329 - C101328 + C101331 - C101330) * C54790 +
             (C101333 - C101332 + C101335 - C101334) * C139731) *
                C5814 +
            ((C92947 * C6627 - C92797 * C6908 + C92948 * C10394 -
              C139899 * C10630) *
                 C54790 +
             (C92947 * C6632 - C92797 * C6911 + C92948 * C10397 -
              C139899 * C10632) *
                 C139731) *
                C5815) *
               C139809 * C140000) *
              C808 +
          ((((C92951 - C92950 + C92953 - C92952) * C54790 +
             (C92955 - C92954 + C92957 - C92956) * C139731) *
                C5813 +
            ((C93789 - C93790 + C93791 - C93792) * C54790 +
             (C93793 - C93794 + C93795 - C93796) * C139731) *
                C5814 +
            ((C101336 - C101337 + C101338 - C101339) * C54790 +
             (C101340 - C101341 + C101342 - C101343) * C139731) *
                C5815) *
               C139809 * C806 +
           (((C93790 - C93789 + C93792 - C93791) * C54790 +
             (C93794 - C93793 + C93796 - C93795) * C139731) *
                C5813 +
            ((C101337 - C101336 + C101339 - C101338) * C54790 +
             (C101341 - C101340 + C101343 - C101342) * C139731) *
                C5814 +
            ((C92797 * C6909 - C92947 * C6626 + C139899 * C10631 -
              C92948 * C10395) *
                 C54790 +
             (C92797 * C6912 - C92947 * C6630 + C139899 * C10633 -
              C92948 * C10399) *
                 C139731) *
                C5815) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C92797 * C266 - C92947 * C108 + C139899 * C1741 - C92948 * C1570) *
                C47136 +
            (C92797 * C272 - C92947 * C115 + C139899 * C1746 - C92948 * C1579) *
                C47131 +
            (C92950 - C92951 + C92952 - C92953) * C47138 +
            (C92954 - C92955 + C92956 - C92957) * C47132 + C92978 * C47140 +
            C92979 * C47133) *
               C139824 * C139809 * C806 +
           ((C92947 * C813 - C92797 * C984 + C92948 * C3438 - C139899 * C3594) *
                C47136 +
            (C92947 * C822 - C92797 * C989 + C92948 * C3443 - C139899 * C3598) *
                C47131 +
            (C93789 - C93790 + C93791 - C93792) * C47138 +
            (C93793 - C93794 + C93795 - C93796) * C47132 +
            (C93797 - C93798 + C93799 - C93800) * C47140 +
            (C93801 - C93802 + C93803 - C93804) * C47133) *
               C139824 * C139809 * C140000) *
              C808 +
          (((C92951 - C92950 + C92953 - C92952) * C47136 +
            (C92955 - C92954 + C92957 - C92956) * C47131 +
            (C92959 - C92958 + C92961 - C92960) * C47138 +
            (C92963 - C92962 + C92965 - C92964) * C47132 +
            (C92966 - C92967 + C92968 - C92969) * C47140 +
            (C92970 - C92971 + C92972 - C92973) * C47133) *
               C139824 * C139809 * C806 +
           ((C93790 - C93789 + C93792 - C93791) * C47136 +
            (C93794 - C93793 + C93796 - C93795) * C47131 +
            (C93798 - C93797 + C93800 - C93799) * C47138 +
            (C93802 - C93801 + C93804 - C93803) * C47132 +
            (C92797 * C987 - C92947 * C810 + C139899 * C3597 - C92948 * C3441) *
                C47140 +
            (C92797 * C992 - C92947 * C816 + C139899 * C3601 - C92948 * C3449) *
                C47133) *
               C139824 * C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C107999 * C266 - C108103 * C108 + C108000 * C1741 -
             C108104 * C1570 + C108001 * C5397 - C108105 * C5273 +
             C108002 * C15912 - C108106 * C15623) *
                C54790 +
            (C107999 * C272 - C108103 * C115 + C108000 * C1746 -
             C108104 * C1579 + C108001 * C5401 - C108105 * C5278 +
             C108002 * C15915 - C108106 * C15628) *
                C139731) *
               C139824 * C139809 * C806 +
           ((C108103 * C813 - C107999 * C984 + C108104 * C3438 -
             C108000 * C3594 + C108105 * C13126 - C108001 * C13298 +
             C108106 * C18302 - C108002 * C18532) *
                C54790 +
            (C108103 * C822 - C107999 * C989 + C108104 * C3443 -
             C108000 * C3598 + C108105 * C13131 - C108001 * C13302 +
             C108106 * C18305 - C108002 * C18534) *
                C139731) *
               C139824 * C139809 * C140000) *
              C808 +
          (((C108103 * C109 - C107999 * C267 + C108104 * C1569 -
             C108000 * C1742 + C108105 * C5274 - C108001 * C5398 +
             C108106 * C15622 - C108002 * C15913) *
                C54790 +
            (C108103 * C117 - C107999 * C273 + C108104 * C1577 -
             C108000 * C1747 + C108105 * C5280 - C108001 * C5402 +
             C108106 * C15626 - C108002 * C15916) *
                C139731) *
               C139824 * C139809 * C806 +
           ((C107999 * C985 - C108103 * C812 + C108000 * C3595 -
             C108104 * C3439 + C108001 * C13299 - C108105 * C13127 +
             C108002 * C18533 - C108106 * C18303) *
                C54790 +
            (C107999 * C990 - C108103 * C820 + C108000 * C3599 -
             C108104 * C3445 + C108001 * C13303 - C108105 * C13133 +
             C108002 * C18535 - C108106 * C18307) *
                C139731) *
               C139824 * C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[109] +=
        (-std::pow(Pi, 2.5) *
         (((((C139731 * C114 - C54790 * C108) * C5894 +
             (C139731 * C354 - C54790 * C348) * C5813 +
             (C55513 - C55514) * C5895 + (C55515 - C55516) * C5814 +
             C57297 * C5896 + C57298 * C5815) *
                C92797 +
            ((C61976 - C61977) * C5894 + (C61978 - C61979) * C5813 +
             C64587 * C5895 + C64588 * C5814 + C88899 * C5896 +
             C88900 * C5815) *
                C139899) *
               C139809 * C806 +
           (((C55514 - C55513) * C5894 + (C55516 - C55515) * C5813 +
             (C55518 - C55517) * C5895 + (C55520 - C55519) * C5814 +
             (C55522 - C55521) * C5896 + (C55524 - C55523) * C5815) *
                C92797 +
            (C64591 * C5894 + C64592 * C5813 + C89717 * C5895 + C89718 * C5814 +
             (C57891 - C57892) * C5896 + (C57893 - C57894) * C5815) *
                C139899) *
               C139809 * C140000) *
              C808 +
          ((((C54790 * C109 - C139731 * C116) * C5894 +
             (C54790 * C349 - C139731 * C355) * C5813 +
             (C55525 - C55526) * C5895 + (C55527 - C55528) * C5814 +
             (C55529 - C55530) * C5896 + (C55531 - C55532) * C5815) *
                C92797 +
            ((C61984 - C61985) * C5894 + (C61986 - C61987) * C5813 +
             (C61001 - C61002) * C5895 + (C61003 - C61004) * C5814 +
             (C86284 - C86285) * C5896 + (C86286 - C86287) * C5815) *
                C139899) *
               C139809 * C806 +
           (((C55526 - C55525) * C5894 + (C55528 - C55527) * C5813 +
             (C55530 - C55529) * C5895 + (C55532 - C55531) * C5814 +
             (C55534 - C55533) * C5896 + (C55536 - C55535) * C5815) *
                C92797 +
            ((C61002 - C61001) * C5894 + (C61004 - C61003) * C5813 +
             (C86285 - C86284) * C5895 + (C86287 - C86286) * C5814 +
             (C139731 * C10398 - C54790 * C10395) * C5896 +
             (C139731 * C10743 - C54790 * C10741) * C5815) *
                C139899) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47131 * C114 - C47136 * C108 + C47132 * C116 - C47138 * C109 +
              C47133 * C118 - C47140 * C110) *
                 C182 +
             (C47131 * C354 - C47136 * C348 + C47132 * C355 - C47138 * C349 +
              C47133 * C356 - C47140 * C350) *
                 C139824) *
                C92797 +
            ((C47131 * C1578 - C47136 * C1570 + C47132 * C1576 -
              C47138 * C1569 + C47133 * C1574 - C47140 * C1568) *
                 C182 +
             (C47131 * C1834 - C47136 * C1829 + C47132 * C1835 -
              C47138 * C1830 + C47133 * C1836 - C47140 * C1831) *
                 C139824) *
                C139899) *
               C139809 * C806 +
           (((C48295 - C48294 + C48297 - C48296 + C48299 - C48298) * C182 +
             (C48301 - C48300 + C48303 - C48302 + C48305 - C48304) * C139824) *
                C92797 +
            ((C51798 - C51799 + C51800 - C51801 + C51802 - C51803) * C182 +
             (C51804 - C51805 + C51806 - C51807 + C51808 - C51809) * C139824) *
                C139899) *
               C139809 * C140000) *
              C808 +
          ((((C47136 * C109 - C47131 * C116 + C47138 * C110 - C47132 * C118 +
              C47140 * C111 - C47133 * C120) *
                 C182 +
             (C47136 * C349 - C47131 * C355 + C47138 * C350 - C47132 * C356 +
              C47140 * C351 - C47133 * C357) *
                 C139824) *
                C92797 +
            ((C47136 * C1569 - C47131 * C1576 + C47138 * C1568 -
              C47132 * C1574 + C47140 * C1567 - C47133 * C1572) *
                 C182 +
             (C47136 * C1830 - C47131 * C1835 + C47138 * C1831 -
              C47132 * C1836 + C47140 * C1832 - C47133 * C1837) *
                 C139824) *
                C139899) *
               C139809 * C806 +
           (((C48307 - C48306 + C48309 - C48308 + C48311 - C48310) * C182 +
             (C48313 - C48312 + C48315 - C48314 + C48317 - C48316) * C139824) *
                C92797 +
            ((C47131 * C3444 - C47136 * C3439 + C47132 * C3446 -
              C47138 * C3440 + C47133 * C3448 - C47140 * C3441) *
                 C182 +
             (C47131 * C3673 - C47136 * C3669 + C47132 * C3674 -
              C47138 * C3670 + C47133 * C3675 - C47140 * C3671) *
                 C139824) *
                C139899) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C139731 * C114 - C54790 * C108) * C182 +
             (C139731 * C354 - C54790 * C348) * C139824) *
                C107999 +
            ((C61976 - C61977) * C182 + (C61978 - C61979) * C139824) * C108000 +
            (C67258 * C182 + C67259 * C139824) * C108001 +
            ((C67263 - C67262) * C182 + (C67265 - C67264) * C139824) *
                C108002) *
               C139809 * C806 +
           (((C55514 - C55513) * C182 + (C55516 - C55515) * C139824) * C107999 +
            (C64591 * C182 + C64592 * C139824) * C108000 +
            (C64593 * C182 + C64594 * C139824) * C108001 +
            ((C64595 - C64596) * C182 + (C64597 - C64598) * C139824) *
                C108002) *
               C139809 * C140000) *
              C808 +
          ((((C54790 * C109 - C139731 * C116) * C182 +
             (C54790 * C349 - C139731 * C355) * C139824) *
                C107999 +
            ((C61984 - C61985) * C182 + (C61986 - C61987) * C139824) * C108000 +
            ((C61988 - C61989) * C182 + (C61990 - C61991) * C139824) * C108001 +
            ((C54790 * C15622 - C139731 * C15625) * C182 +
             (C54790 * C16029 - C139731 * C16032) * C139824) *
                C108002) *
               C139809 * C806 +
           (((C55526 - C55525) * C182 + (C55528 - C55527) * C139824) * C107999 +
            ((C61002 - C61001) * C182 + (C61004 - C61003) * C139824) * C108000 +
            ((C61006 - C61005) * C182 + (C61008 - C61007) * C139824) * C108001 +
            ((C139731 * C18306 - C54790 * C18303) * C182 +
             (C139731 * C18637 - C54790 * C18635) * C139824) *
                C108002) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[109] +=
        (-std::pow(Pi, 2.5) *
         ((((C5894 * C183 - C6151 * C108 - C5894 * C348 + C5813 * C411 +
             C5895 * C896 - C6152 * C813 - C5895 * C1072 + C5814 * C1151 +
             C5896 * C2974 - C6153 * C2908 - C5896 * C3090 + C5815 * C3148) *
                C139731 * C92797 +
            (C5894 * C1653 - C6151 * C1570 - C5894 * C1829 + C5813 * C1908 +
             C5895 * C3520 - C6152 * C3438 - C5895 * C3668 + C5814 * C3742 +
             C5896 * C7863 - C6153 * C7754 - C5896 * C8091 + C5815 * C8196) *
                C139731 * C139899) *
               C139809 * C806 -
           ((C5896 * C10528 - C6153 * C10394 - C5896 * C10740 + C5815 * C10858 +
             C5895 * C7863 - C6152 * C7754 - C5895 * C8091 + C5814 * C8196 +
             C5894 * C3520 - C6151 * C3438 - C5894 * C3668 + C5813 * C3742) *
                C139731 * C139899 +
            (C5896 * C6792 - C6153 * C6627 - C5896 * C7032 + C5815 * C7169 +
             C5895 * C2974 - C6152 * C2908 - C5895 * C3090 + C5814 * C3148 +
             C5894 * C896 - C6151 * C813 - C5894 * C1072 + C5813 * C1151) *
                C139731 * C92797) *
               C139809 * C140000) *
              C808 +
          (((C7192 + C7191 + C7190) * C139731 * C92797 +
            (C5894 * C3521 - C6151 * C3439 - C5894 * C3669 + C5813 * C3743 +
             C5895 * C7864 - C6152 * C7753 - C5895 * C8092 + C5814 * C8195 +
             C5896 * C10529 - C6153 * C10395 - C5896 * C10741 +
             C5815 * C10859) *
                C139731 * C139899) *
               C139809 * C140000 -
           ((C8217 + C8218 + C8219) * C139731 * C139899 +
            (C6193 + C6192 + C6191) * C139731 * C92797) *
               C139809 * C806) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C182 * C183 - C410 * C108 - C182 * C348 + C139824 * C411) *
                 C47131 +
             C442 * C47132 + C443 * C47133) *
                C92797 +
            (C16192 * C47131 + C1931 * C47132 + C1930 * C47133) * C139899) *
               C139809 * C806 -
           ((C30689 * C47133 + C15096 * C47132 + C18761 * C47131) * C139899 +
            (C1173 * C47133 + C1174 * C47132 +
             (C182 * C896 - C410 * C813 - C182 * C1072 + C139824 * C1151) *
                 C47131) *
                C92797) *
               C139809 * C140000) *
              C808 +
          (((C1174 * C47131 + C1173 * C47132 + C1172 * C47133) * C92797 +
            (C15096 * C47131 + C30689 * C47132 +
             (C182 * C3523 - C410 * C3441 - C182 * C3671 + C139824 * C3745) *
                 C47133) *
                C139899) *
               C139809 * C140000 -
           ((C1929 * C47133 + C1930 * C47132 + C1931 * C47131) * C139899 +
            (C444 * C47133 + C443 * C47132 + C442 * C47131) * C92797) *
               C139809 * C806) *
              C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C182 * C183 - C410 * C108 - C182 * C348 + C139824 * C411) *
                C139731 * C107999 +
            C16192 * C139731 * C108000 + C16193 * C139731 * C108001 +
            C21384 * C139731 * C108002) *
               C139809 * C806 -
           ((C182 * C18422 - C410 * C18302 - C182 * C18634 + C139824 * C18744) *
                C139731 * C108002 +
            C18762 * C139731 * C108001 + C18761 * C139731 * C108000 +
            (C182 * C896 - C410 * C813 - C182 * C1072 + C139824 * C1151) *
                C139731 * C107999) *
               C139809 * C140000) *
              C808 +
          ((C1174 * C139731 * C107999 + C15096 * C139731 * C108000 +
            C15095 * C139731 * C108001 +
            (C182 * C18423 - C410 * C18303 - C182 * C18635 + C139824 * C18745) *
                C139731 * C108002) *
               C139809 * C140000 -
           (C16194 * C139731 * C108002 + C14203 * C139731 * C108001 +
            C1931 * C139731 * C108000 + C442 * C139731 * C107999) *
               C139809 * C806) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[109] +=
        (-std::pow(Pi, 2.5) *
         ((((C92797 * C266 - C92947 * C108 + C139899 * C1741 - C92948 * C1570) *
                C5894 +
            (C92797 * C495 - C92947 * C348 + C139899 * C1997 - C92948 * C1829) *
                C5813 +
            (C101320 - C101321 + C101322 - C101323) * C5895 +
            (C101638 - C101639 + C101640 - C101641) * C5814 +
            (C101328 - C101329 + C101330 - C101331) * C5896 +
            (C101642 - C101643 + C101644 - C101645) * C5815) *
               C139731 * C139809 * C806 +
           ((C101321 - C101320 + C101323 - C101322) * C5894 +
            (C101639 - C101638 + C101641 - C101640) * C5813 +
            (C101329 - C101328 + C101331 - C101330) * C5895 +
            (C101643 - C101642 + C101645 - C101644) * C5814 +
            (C92947 * C6627 - C92797 * C6908 + C92948 * C10394 -
             C139899 * C10630) *
                C5896 +
            (C92947 * C7032 - C92797 * C7290 + C92948 * C10740 -
             C139899 * C10958) *
                C5815) *
               C139731 * C139809 * C140000) *
              C808 +
          (((C92951 - C92950 + C92953 - C92952) * C5894 +
            (C93203 - C93202 + C93205 - C93204) * C5813 +
            (C93789 - C93790 + C93791 - C93792) * C5895 +
            (C94099 - C94100 + C94101 - C94102) * C5814 +
            (C101336 - C101337 + C101338 - C101339) * C5896 +
            (C101646 - C101647 + C101648 - C101649) * C5815) *
               C139731 * C139809 * C806 +
           ((C93790 - C93789 + C93792 - C93791) * C5894 +
            (C94100 - C94099 + C94102 - C94101) * C5813 +
            (C101337 - C101336 + C101339 - C101338) * C5895 +
            (C101647 - C101646 + C101649 - C101648) * C5814 +
            (C92797 * C6909 - C92947 * C6626 + C139899 * C10631 -
             C92948 * C10395) *
                C5896 +
            (C92797 * C7291 - C92947 * C7033 + C139899 * C10959 -
             C92948 * C10741) *
                C5815) *
               C139731 * C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C92797 * C266 - C92947 * C108 + C139899 * C1741 -
              C92948 * C1570) *
                 C182 +
             (C92797 * C495 - C92947 * C348 + C139899 * C1997 -
              C92948 * C1829) *
                 C139824) *
                C47131 +
            ((C92950 - C92951 + C92952 - C92953) * C182 +
             (C93202 - C93203 + C93204 - C93205) * C139824) *
                C47132 +
            C93219 * C47133) *
               C139809 * C806 +
           (((C92947 * C813 - C92797 * C984 + C92948 * C3438 -
              C139899 * C3594) *
                 C182 +
             (C92947 * C1072 - C92797 * C1240 + C92948 * C3668 -
              C139899 * C3812) *
                 C139824) *
                C47131 +
            ((C93789 - C93790 + C93791 - C93792) * C182 +
             (C94099 - C94100 + C94101 - C94102) * C139824) *
                C47132 +
            ((C93797 - C93798 + C93799 - C93800) * C182 +
             (C94103 - C94104 + C94105 - C94106) * C139824) *
                C47133) *
               C139809 * C140000) *
              C808 +
          ((((C92951 - C92950 + C92953 - C92952) * C182 +
             (C93203 - C93202 + C93205 - C93204) * C139824) *
                C47131 +
            ((C92959 - C92958 + C92961 - C92960) * C182 +
             (C93208 - C93207 + C93210 - C93209) * C139824) *
                C47132 +
            ((C92966 - C92967 + C92968 - C92969) * C182 +
             (C93211 - C93212 + C93213 - C93214) * C139824) *
                C47133) *
               C139809 * C806 +
           (((C93790 - C93789 + C93792 - C93791) * C182 +
             (C94100 - C94099 + C94102 - C94101) * C139824) *
                C47131 +
            ((C93798 - C93797 + C93800 - C93799) * C182 +
             (C94104 - C94103 + C94106 - C94105) * C139824) *
                C47132 +
            ((C92797 * C987 - C92947 * C810 + C139899 * C3597 -
              C92948 * C3441) *
                 C182 +
             (C92797 * C1243 - C92947 * C1075 + C139899 * C3815 -
              C92948 * C3671) *
                 C139824) *
                C47133) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C107999 * C266 - C108103 * C108 + C108000 * C1741 -
             C108104 * C1570 + C108001 * C5397 - C108105 * C5273 +
             C108002 * C15912 - C108106 * C15623) *
                C182 +
            (C107999 * C495 - C108103 * C348 + C108000 * C1997 -
             C108104 * C1829 + C108001 * C5567 - C108105 * C5455 +
             C108002 * C16294 - C108106 * C16028) *
                C139824) *
               C139731 * C139809 * C806 +
           ((C108103 * C813 - C107999 * C984 + C108104 * C3438 -
             C108000 * C3594 + C108105 * C13126 - C108001 * C13298 +
             C108106 * C18302 - C108002 * C18532) *
                C182 +
            (C108103 * C1072 - C107999 * C1240 + C108104 * C3668 -
             C108000 * C3812 + C108105 * C13380 - C108001 * C13540 +
             C108106 * C18634 - C108002 * C18862) *
                C139824) *
               C139731 * C139809 * C140000) *
              C808 +
          (((C108103 * C109 - C107999 * C267 + C108104 * C1569 -
             C108000 * C1742 + C108105 * C5274 - C108001 * C5398 +
             C108106 * C15622 - C108002 * C15913) *
                C182 +
            (C108103 * C349 - C107999 * C496 + C108104 * C1830 -
             C108000 * C1998 + C108105 * C5456 - C108001 * C5568 +
             C108106 * C16029 - C108002 * C16295) *
                C139824) *
               C139731 * C139809 * C806 +
           ((C107999 * C985 - C108103 * C812 + C108000 * C3595 -
             C108104 * C3439 + C108001 * C13299 - C108105 * C13127 +
             C108002 * C18533 - C108106 * C18303) *
                C182 +
            (C107999 * C1241 - C108103 * C1073 + C108000 * C3813 -
             C108104 * C3669 + C108001 * C13542 - C108105 * C13381 +
             C108002 * C18863 - C108106 * C18635) *
                C139824) *
               C139731 * C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eezx[109] +=
        (-std::pow(Pi, 2.5) *
         (((((C139731 * C114 - C54790 * C108) * C92947 +
             (C139731 * C573 - C54790 * C567) * C92797 +
             (C61976 - C61977) * C92948 + (C62328 - C62329) * C139899) *
                C5813 +
            ((C55513 - C55514) * C92947 + (C55735 - C55736) * C92797 +
             C64587 * C92948 + C64931 * C139899) *
                C5814 +
            (C57297 * C92947 + C57463 * C92797 + C88899 * C92948 +
             C89133 * C139899) *
                C5815) *
               C139809 * C806 +
           (((C55514 - C55513) * C92947 + (C55736 - C55735) * C92797 +
             C64591 * C92948 + C64933 * C139899) *
                C5813 +
            ((C55518 - C55517) * C92947 + (C55738 - C55737) * C92797 +
             C89717 * C92948 + C90038 * C139899) *
                C5814 +
            ((C55522 - C55521) * C92947 + (C55740 - C55739) * C92797 +
             (C57891 - C57892) * C92948 + (C58103 - C58104) * C139899) *
                C5815) *
               C139809 * C140000) *
              C808 +
          ((((C54790 * C109 - C139731 * C116) * C92947 +
             (C54790 * C568 - C139731 * C574) * C92797 +
             (C61984 - C61985) * C92948 + (C62332 - C62333) * C139899) *
                C5813 +
            ((C55525 - C55526) * C92947 + (C55741 - C55742) * C92797 +
             (C61001 - C61002) * C92948 + (C61311 - C61312) * C139899) *
                C5814 +
            ((C55529 - C55530) * C92947 + (C55743 - C55744) * C92797 +
             (C86284 - C86285) * C92948 + (C86582 - C86583) * C139899) *
                C5815) *
               C139809 * C806 +
           (((C55526 - C55525) * C92947 + (C55742 - C55741) * C92797 +
             (C61002 - C61001) * C92948 + (C61312 - C61311) * C139899) *
                C5813 +
            ((C55530 - C55529) * C92947 + (C55744 - C55743) * C92797 +
             (C86285 - C86284) * C92948 + (C86583 - C86582) * C139899) *
                C5814 +
            ((C55534 - C55533) * C92947 + (C55746 - C55745) * C92797 +
             (C139731 * C10398 - C54790 * C10395) * C92948 +
             (C139731 * C11065 - C54790 * C11063) * C139899) *
                C5815) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47131 * C114 - C47136 * C108 + C47132 * C116 - C47138 * C109 +
             C47133 * C118 - C47140 * C110) *
                C92947 +
            (C47131 * C573 - C47136 * C567 + C47132 * C574 - C47138 * C568 +
             C47133 * C575 - C47140 * C569) *
                C92797 +
            (C47131 * C1578 - C47136 * C1570 + C47132 * C1576 - C47138 * C1569 +
             C47133 * C1574 - C47140 * C1568) *
                C92948 +
            (C47131 * C2079 - C47136 * C2074 + C47132 * C2080 - C47138 * C2075 +
             C47133 * C2081 - C47140 * C2076) *
                C139899) *
               C139824 * C139809 * C806 +
           ((C48295 - C48294 + C48297 - C48296 + C48299 - C48298) * C92947 +
            (C48641 - C48640 + C48643 - C48642 + C48645 - C48644) * C92797 +
            (C51798 - C51799 + C51800 - C51801 + C51802 - C51803) * C92948 +
            (C52104 - C52105 + C52106 - C52107 + C52108 - C52109) * C139899) *
               C139824 * C139809 * C140000) *
              C808 +
          (((C47136 * C109 - C47131 * C116 + C47138 * C110 - C47132 * C118 +
             C47140 * C111 - C47133 * C120) *
                C92947 +
            (C47136 * C568 - C47131 * C574 + C47138 * C569 - C47132 * C575 +
             C47140 * C570 - C47133 * C576) *
                C92797 +
            (C47136 * C1569 - C47131 * C1576 + C47138 * C1568 - C47132 * C1574 +
             C47140 * C1567 - C47133 * C1572) *
                C92948 +
            (C47136 * C2075 - C47131 * C2080 + C47138 * C2076 - C47132 * C2081 +
             C47140 * C2077 - C47133 * C2082) *
                C139899) *
               C139824 * C139809 * C806 +
           ((C48307 - C48306 + C48309 - C48308 + C48311 - C48310) * C92947 +
            (C48647 - C48646 + C48649 - C48648 + C48651 - C48650) * C92797 +
            (C47131 * C3444 - C47136 * C3439 + C47132 * C3446 - C47138 * C3440 +
             C47133 * C3448 - C47140 * C3441) *
                C92948 +
            (C47131 * C3887 - C47136 * C3883 + C47132 * C3888 - C47138 * C3884 +
             C47133 * C3889 - C47140 * C3885) *
                C139899) *
               C139824 * C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C139731 * C114 - C54790 * C108) * C108103 +
            (C139731 * C573 - C54790 * C567) * C107999 +
            (C61976 - C61977) * C108104 + (C62328 - C62329) * C108000 +
            C67258 * C108105 + C67513 * C108001 + (C67263 - C67262) * C108106 +
            (C67515 - C67514) * C108002) *
               C139824 * C139809 * C806 +
           ((C55514 - C55513) * C108103 + (C55736 - C55735) * C107999 +
            C64591 * C108104 + C64933 * C108000 + C64593 * C108105 +
            C64934 * C108001 + (C64595 - C64596) * C108106 +
            (C64935 - C64936) * C108002) *
               C139824 * C139809 * C140000) *
              C808 +
          (((C54790 * C109 - C139731 * C116) * C108103 +
            (C54790 * C568 - C139731 * C574) * C107999 +
            (C61984 - C61985) * C108104 + (C62332 - C62333) * C108000 +
            (C61988 - C61989) * C108105 + (C62334 - C62335) * C108001 +
            (C54790 * C15622 - C139731 * C15625) * C108106 +
            (C54790 * C16402 - C139731 * C16405) * C108002) *
               C139824 * C139809 * C806 +
           ((C55526 - C55525) * C108103 + (C55742 - C55741) * C107999 +
            (C61002 - C61001) * C108104 + (C61312 - C61311) * C108000 +
            (C61006 - C61005) * C108105 + (C61314 - C61313) * C108001 +
            (C139731 * C18306 - C54790 * C18303) * C108106 +
            (C139731 * C18965 - C54790 * C18963) * C108002) *
               C139824 * C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eezy[109] +=
        (-std::pow(Pi, 2.5) *
         ((((C5813 * C183 - C5894 * C108 + C5814 * C896 - C5895 * C813 +
             C5815 * C2974 - C5896 * C2908) *
                C92947 +
            (C5813 * C629 - C5894 * C567 + C5814 * C1393 - C5895 * C1317 +
             C5815 * C3314 - C5896 * C3256) *
                C92797 +
            (C5813 * C1653 - C5894 * C1570 + C5814 * C3520 - C5895 * C3438 +
             C5815 * C7863 - C5896 * C7754) *
                C92948 +
            (C5813 * C2150 - C5894 * C2074 + C5814 * C3956 - C5895 * C3882 +
             C5815 * C8526 - C5896 * C8422) *
                C139899) *
               C139731 * C139809 * C806 +
           ((C5894 * C813 - C5813 * C896 + C5895 * C2908 - C5814 * C2974 +
             C5896 * C6627 - C5815 * C6792) *
                C92947 +
            (C5894 * C1317 - C5813 * C1393 + C5895 * C3256 - C5814 * C3314 +
             C5896 * C7401 - C5815 * C7521) *
                C92797 +
            (C5894 * C3438 - C5813 * C3520 + C5895 * C7754 - C5814 * C7863 +
             C5896 * C10394 - C5815 * C10528) *
                C92948 +
            (C5894 * C3882 - C5813 * C3956 + C5895 * C8422 - C5814 * C8526 +
             C5896 * C11062 - C5815 * C11172) *
                C139899) *
               C139731 * C139809 * C140000) *
              C808 +
          (((C5899 - C5898 + C5901 - C5900 + C5903 - C5902) * C92947 +
            (C6424 - C6423 + C6426 - C6425 + C6428 - C6427) * C92797 +
            (C7870 - C7871 + C7872 - C7873 + C7874 - C7875) * C92948 +
            (C8530 - C8531 + C8532 - C8533 + C8534 - C8535) * C139899) *
               C139731 * C139809 * C806 +
           ((C6800 - C6799 + C6802 - C6801 + C6804 - C6803) * C92947 +
            (C7526 - C7525 + C7528 - C7527 + C7530 - C7529) * C92797 +
            (C5813 * C3521 - C5894 * C3439 + C5814 * C7864 - C5895 * C7753 +
             C5815 * C10529 - C5896 * C10395) *
                C92948 +
            (C5813 * C3957 - C5894 * C3883 + C5814 * C8527 - C5895 * C8423 +
             C5815 * C11173 - C5896 * C11063) *
                C139899) *
               C139731 * C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C139824 * C183 - C182 * C108) * C92947 +
             (C139824 * C629 - C182 * C567) * C92797 +
             (C15795 - C15796) * C92948 + (C16525 - C16526) * C139899) *
                C47131 +
            ((C196 - C197) * C92947 + (C636 - C637) * C92797 + C15799 * C92948 +
             C16529 * C139899) *
                C47132 +
            C93374 * C47133) *
               C139809 * C806 +
           (((C182 * C813 - C139824 * C896) * C92947 +
             (C182 * C1317 - C139824 * C1393) * C92797 +
             (C18427 - C18428) * C92948 + (C19071 - C19072) * C139899) *
                C47131 +
            ((C907 - C908) * C92947 + (C1399 - C1400) * C92797 +
             (C14764 - C14765) * C92948 + (C15401 - C15402) * C139899) *
                C47132 +
            ((C911 - C912) * C92947 + (C1401 - C1402) * C92797 +
             (C30369 - C30370) * C92948 + (C30992 - C30993) * C139899) *
                C47133) *
               C139809 * C140000) *
              C808 +
          ((((C197 - C196) * C92947 + (C637 - C636) * C92797 + C15807 * C92948 +
             C16531 * C139899) *
                C47131 +
            ((C201 - C200) * C92947 + (C640 - C639) * C92797 + C31358 * C92948 +
             C32014 * C139899) *
                C47132 +
            ((C205 - C204) * C92947 + (C643 - C642) * C92797 +
             (C1672 - C1673) * C92948 + (C2160 - C2161) * C139899) *
                C47133) *
               C139809 * C806 +
           (((C908 - C907) * C92947 + (C1400 - C1399) * C92797 +
             (C14765 - C14764) * C92948 + (C15402 - C15401) * C139899) *
                C47131 +
            ((C912 - C911) * C92947 + (C1402 - C1401) * C92797 +
             (C30370 - C30369) * C92948 + (C30993 - C30992) * C139899) *
                C47132 +
            ((C916 - C915) * C92947 + (C1404 - C1403) * C92797 +
             (C139824 * C3523 - C182 * C3441) * C92948 +
             (C139824 * C3959 - C182 * C3885) * C139899) *
                C47133) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C139824 * C183 - C182 * C108) * C108103 +
            (C139824 * C629 - C182 * C567) * C107999 +
            (C15795 - C15796) * C108104 + (C16525 - C16526) * C108000 +
            C21114 * C108105 + C21623 * C108001 + (C21119 - C21118) * C108106 +
            (C21625 - C21624) * C108002) *
               C139731 * C139809 * C806 +
           ((C182 * C813 - C139824 * C896) * C108103 +
            (C182 * C1317 - C139824 * C1393) * C107999 +
            (C18427 - C18428) * C108104 + (C19071 - C19072) * C108000 +
            (C18431 - C18432) * C108105 + (C19073 - C19074) * C108001 +
            (C182 * C18302 - C139824 * C18422) * C108106 +
            (C182 * C18962 - C139824 * C19068) * C108002) *
               C139731 * C139809 * C140000) *
              C808 +
          (((C197 - C196) * C108103 + (C637 - C636) * C107999 +
            C15807 * C108104 + C16531 * C108000 + C15809 * C108105 +
            C16532 * C108001 + (C15811 - C15812) * C108106 +
            (C16533 - C16534) * C108002) *
               C139731 * C139809 * C806 +
           ((C908 - C907) * C108103 + (C1400 - C1399) * C107999 +
            (C14765 - C14764) * C108104 + (C15402 - C15401) * C108000 +
            (C14769 - C14768) * C108105 + (C15404 - C15403) * C108001 +
            (C139824 * C18423 - C182 * C18303) * C108106 +
            (C139824 * C19069 - C182 * C18963) * C108002) *
               C139731 * C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eezz[109] +=
        (-std::pow(Pi, 2.5) *
         ((((C92947 * C266 - C93448 * C108 - C92947 * C567 + C92797 * C702 +
             C92948 * C1741 - C93449 * C1570 - C92948 * C2074 +
             C139899 * C2230) *
                C5813 +
            (C101980 + C101981) * C5814 + (C101982 + C101983) * C5815) *
               C139731 * C139809 * C806 -
           ((C92948 * C10630 - C93449 * C10394 - C92948 * C11062 +
             C139899 * C11272 + C92947 * C6908 - C93448 * C6627 -
             C92947 * C7401 + C92797 * C7629) *
                C5815 +
            (C101983 + C101982) * C5814 + (C101981 + C101980) * C5813) *
               C139731 * C139809 * C140000) *
              C808 +
          (((C94428 + C94427) * C5813 + (C101984 + C101985) * C5814 +
            (C92947 * C6909 - C93448 * C6626 - C92947 * C7402 + C92797 * C7628 +
             C92948 * C10631 - C93449 * C10395 - C92948 * C11063 +
             C139899 * C11273) *
                C5815) *
               C139731 * C139809 * C140000 -
           ((C101985 + C101984) * C5815 + (C94427 + C94428) * C5814 +
            (C93488 + C93487) * C5813) *
               C139731 * C139809 * C806) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C92947 * C266 - C93448 * C108 - C92947 * C567 + C92797 * C702 +
             C92948 * C1741 - C93449 * C1570 - C92948 * C2074 +
             C139899 * C2230) *
                C139824 * C47131 +
            (C93487 + C93488) * C139824 * C47132 + C93494 * C47133) *
               C139809 * C806 -
           ((C94425 + C94426) * C139824 * C47133 +
            (C94427 + C94428) * C139824 * C47132 +
            (C92948 * C3594 - C93449 * C3438 - C92948 * C3882 +
             C139899 * C4026 + C92947 * C984 - C93448 * C813 - C92947 * C1317 +
             C92797 * C1473) *
                C139824 * C47131) *
               C139809 * C140000) *
              C808 +
          (((C94428 + C94427) * C139824 * C47131 +
            (C94426 + C94425) * C139824 * C47132 +
            (C92947 * C987 - C93448 * C810 - C92947 * C1320 + C92797 * C1470 +
             C92948 * C3597 - C93449 * C3441 - C92948 * C3885 +
             C139899 * C4029) *
                C139824 * C47133) *
               C139809 * C140000 -
           ((C93491 + C93492) * C139824 * C47133 +
            (C93490 + C93489) * C139824 * C47132 +
            (C93488 + C93487) * C139824 * C47131) *
               C139809 * C806) *
              C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C108103 * C266 - C108407 * C108 - C108103 * C567 + C107999 * C702 +
            C108104 * C1741 - C108408 * C1570 - C108104 * C2074 +
            C108000 * C2230 + C108105 * C5397 - C108409 * C5273 -
            C108105 * C5621 + C108001 * C5733 + C108106 * C15912 -
            C108410 * C15623 - C108106 * C16401 + C108002 * C16633) *
               C139824 * C139731 * C139809 * C806 -
           (C108106 * C18532 - C108410 * C18302 - C108106 * C18962 +
            C108002 * C19172 + C108105 * C13298 - C108409 * C13126 -
            C108105 * C13618 + C108001 * C13778 + C108104 * C3594 -
            C108408 * C3438 - C108104 * C3882 + C108000 * C4026 +
            C108103 * C984 - C108407 * C813 - C108103 * C1317 +
            C107999 * C1473) *
               C139824 * C139731 * C139809 * C140000) *
              C808 +
          ((C108103 * C985 - C108407 * C812 - C108103 * C1318 +
            C107999 * C1472 + C108104 * C3595 - C108408 * C3439 -
            C108104 * C3883 + C108000 * C4027 + C108105 * C13299 -
            C108409 * C13127 - C108105 * C13619 + C108001 * C13780 +
            C108106 * C18533 - C108410 * C18303 - C108106 * C18963 +
            C108002 * C19173) *
               C139824 * C139731 * C139809 * C140000 -
           (C108106 * C15913 - C108410 * C15622 - C108106 * C16402 +
            C108002 * C16632 + C108105 * C5398 - C108409 * C5274 -
            C108105 * C5622 + C108001 * C5734 + C108104 * C1742 -
            C108408 * C1569 - C108104 * C2075 + C108000 * C2229 +
            C108103 * C267 - C108407 * C109 - C108103 * C568 + C107999 * C703) *
               C139824 * C139731 * C139809 * C806) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eexx[110] +=
        (-std::pow(Pi, 2.5) *
         (((((C54790 * C114 - C54791 * C108 - C54790 * C115 + C139731 * C126) *
                 C92797 +
             C61654 * C139899) *
                C5813 +
            (C101116 + C101117) * C5814 + (C101118 + C101119) * C5815) *
               C1565 -
           ((C63508 * C139899 + C57670 * C92797) * C5815 +
            (C60685 * C139899 + C57671 * C92797) * C5814 +
            (C61655 * C139899 + C61654 * C92797) * C5813) *
               C140002) *
              C139792 * C808 +
          (((C61656 * C92797 + C61657 * C139899) * C5813 +
            (C60686 * C92797 + C60687 * C139899) * C5814 +
            (C85988 * C92797 + (C54790 * C13136 - C54791 * C13129 -
                                C54790 * C13137 + C139731 * C13141) *
                                   C139899) *
                C5815) *
               C140002 -
           ((C101123 + C101122) * C5815 + (C101121 + C101120) * C5814 +
            (C61656 * C139899 +
             (C54790 * C116 - C54791 * C109 - C54790 * C117 + C139731 * C127) *
                 C92797) *
                C5813) *
               C1565) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47136 * C114 - C47137 * C108 - C47136 * C115 + C47131 * C126 +
             C47138 * C116 - C47139 * C109 - C47138 * C117 + C47132 * C127 +
             C47140 * C118 - C47141 * C110 - C47140 * C119 + C47133 * C128) *
                C92797 +
            (C94563 + C94564 + C94565) * C139899) *
               C139824 * C1565 -
           ((C47140 * C5281 - C47141 * C5275 - C47140 * C5282 + C47133 * C5287 +
             C47138 * C5279 - C47139 * C5274 - C47138 * C5280 + C47132 * C5286 +
             C47136 * C5277 - C47137 * C5273 - C47136 * C5278 +
             C47131 * C5285) *
                C139899 +
            (C94565 + C94564 + C94563) * C92797) *
               C139824 * C140002) *
              C139792 * C808 +
          (((C94566 + C94567 + C94568) * C92797 +
            (C47136 * C5279 - C47137 * C5274 - C47136 * C5280 + C47131 * C5286 +
             C47138 * C5281 - C47139 * C5275 - C47138 * C5282 + C47132 * C5287 +
             C47140 * C5283 - C47141 * C5276 - C47140 * C5284 +
             C47133 * C5288) *
                C139899) *
               C139824 * C140002 -
           ((C94568 + C94567 + C94566) * C139899 +
            (C47140 * C120 - C47141 * C111 - C47140 * C121 + C47133 * C129 +
             C47138 * C118 - C47139 * C110 - C47138 * C119 + C47132 * C128 +
             C47136 * C116 - C47137 * C109 - C47136 * C117 + C47131 * C127) *
                C92797) *
               C139824 * C1565) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C54790 * C114 - C54791 * C108 - C54790 * C115 + C139731 * C126) *
                C107999 +
            C61654 * C108000 + C61655 * C108001 + C67012 * C108002) *
               C139824 * C1565 -
           ((C54790 * C21014 - C54791 * C21012 - C54790 * C21015 +
             C139731 * C21018) *
                C108002 +
            C67012 * C108001 + C61655 * C108000 + C61654 * C107999) *
               C139824 * C140002) *
              C139792 * C808 +
          ((C61656 * C107999 + C61657 * C108000 + C109078 * C108001 +
            (C54790 * C21016 - C54791 * C21013 - C54790 * C21017 +
             C139731 * C21019) *
                C108002) *
               C139824 * C140002 -
           (C109078 * C108002 + C61657 * C108001 + C61656 * C108000 +
            (C54790 * C116 - C54791 * C109 - C54790 * C117 + C139731 * C127) *
                C107999) *
               C139824 * C1565) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eexy[110] +=
        (-std::pow(Pi, 2.5) *
         (((((C5813 * C183 - C5894 * C108 + C5814 * C896 - C5895 * C813 +
              C5815 * C2974 - C5896 * C2908) *
                 C54790 +
             (C5813 * C189 - C5894 * C115 + C5814 * C901 - C5895 * C822 +
              C5815 * C2978 - C5896 * C2913) *
                 C139731) *
                C92797 +
            ((C102182 - C102183 + C102184 - C102185 + C102186 - C102187) *
                 C54790 +
             (C102188 - C102189 + C102190 - C102191 + C102192 - C102193) *
                 C139731) *
                C139899) *
               C1565 +
           (((C102183 - C102182 + C102185 - C102184 + C102187 - C102186) *
                 C54790 +
             (C102189 - C102188 + C102191 - C102190 + C102193 - C102192) *
                 C139731) *
                C92797 +
            ((C5894 * C5273 - C5813 * C5339 + C5895 * C13126 - C5814 * C13216 +
              C5896 * C13128 - C5815 * C13217) *
                 C54790 +
             (C5894 * C5278 - C5813 * C5343 + C5895 * C13131 - C5814 * C13220 +
              C5896 * C13135 - C5815 * C13221) *
                 C139731) *
                C139899) *
               C140002) *
              C139792 * C808 +
          ((((C5899 - C5898 + C5901 - C5900 + C5903 - C5902) * C54790 +
             (C5905 - C5904 + C5907 - C5906 + C5909 - C5908) * C139731) *
                C92797 +
            ((C7870 - C7871 + C7872 - C7873 + C7874 - C7875) * C54790 +
             (C7876 - C7877 + C7878 - C7879 + C7880 - C7881) * C139731) *
                C139899) *
               C1565 +
           (((C7871 - C7870 + C7873 - C7872 + C7875 - C7874) * C54790 +
             (C7877 - C7876 + C7879 - C7878 + C7881 - C7880) * C139731) *
                C92797 +
            ((C5813 * C5340 - C5894 * C5274 + C5814 * C13218 - C5895 * C13127 +
              C5815 * C13219 - C5896 * C13129) *
                 C54790 +
             (C5813 * C5344 - C5894 * C5280 + C5814 * C13222 - C5895 * C13133 +
              C5815 * C13223 - C5896 * C13137) *
                 C139731) *
                C139899) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C139824 * C183 - C182 * C108) * C47136 +
             (C139824 * C189 - C182 * C115) * C47131 + (C196 - C197) * C47138 +
             (C198 - C199) * C47132 + C212 * C47140 + C213 * C47133) *
                C92797 +
            ((C15795 - C15796) * C47136 + (C15797 - C15798) * C47131 +
             C15799 * C47138 + C15800 * C47132 + C29549 * C47140 +
             C29550 * C47133) *
                C139899) *
               C1565 +
           (((C15796 - C15795) * C47136 + (C15798 - C15797) * C47131 +
             C15807 * C47138 + C15808 * C47132 + C31358 * C47140 +
             C31359 * C47133) *
                C92797 +
            ((C15802 - C15801) * C47136 + (C15804 - C15803) * C47131 +
             C15809 * C47138 + C15810 * C47132 + (C13938 - C13939) * C47140 +
             (C13940 - C13941) * C47133) *
                C139899) *
               C140002) *
              C139792 * C808 +
          ((((C197 - C196) * C47136 + (C199 - C198) * C47131 +
             (C201 - C200) * C47138 + (C203 - C202) * C47132 +
             (C205 - C204) * C47140 + (C207 - C206) * C47133) *
                C92797 +
            (C15807 * C47136 + C15808 * C47131 + C31358 * C47138 +
             C31359 * C47132 + (C1672 - C1673) * C47140 +
             (C1674 - C1675) * C47133) *
                C139899) *
               C1565 +
           ((C15799 * C47136 + C15800 * C47131 + C29549 * C47138 +
             C29550 * C47132 + (C1673 - C1672) * C47140 +
             (C1675 - C1674) * C47133) *
                C92797 +
            (C15805 * C47136 + C15806 * C47131 + (C13939 - C13938) * C47138 +
             (C13941 - C13940) * C47132 +
             (C139824 * C5342 - C182 * C5276) * C47140 +
             (C139824 * C5346 - C182 * C5284) * C47133) *
                C139899) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C139824 * C183 - C182 * C108) * C54790 +
             (C139824 * C189 - C182 * C115) * C139731) *
                C107999 +
            ((C15795 - C15796) * C54790 + (C15797 - C15798) * C139731) *
                C108000 +
            (C21114 * C54790 + C21115 * C139731) * C108001 +
            ((C21119 - C21118) * C54790 + (C21121 - C21120) * C139731) *
                C108002) *
               C1565 +
           (((C15796 - C15795) * C54790 + (C15798 - C15797) * C139731) *
                C107999 +
            ((C15802 - C15801) * C54790 + (C15804 - C15803) * C139731) *
                C108000 +
            ((C21118 - C21119) * C54790 + (C21120 - C21121) * C139731) *
                C108001 +
            ((C182 * C21012 - C139824 * C21109) * C54790 +
             (C182 * C21015 - C139824 * C21111) * C139731) *
                C108002) *
               C140002) *
              C139792 * C808 +
          ((((C197 - C196) * C54790 + (C199 - C198) * C139731) * C107999 +
            (C15807 * C54790 + C15808 * C139731) * C108000 +
            (C15809 * C54790 + C15810 * C139731) * C108001 +
            ((C15811 - C15812) * C54790 + (C15813 - C15814) * C139731) *
                C108002) *
               C1565 +
           ((C15799 * C54790 + C15800 * C139731) * C107999 +
            (C15805 * C54790 + C15806 * C139731) * C108000 +
            ((C15812 - C15811) * C54790 + (C15814 - C15813) * C139731) *
                C108001 +
            ((C139824 * C21110 - C182 * C21013) * C54790 +
             (C139824 * C21112 - C182 * C21017) * C139731) *
                C108002) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eexz[110] +=
        (-std::pow(Pi, 2.5) *
         (((((C92797 * C266 - C92947 * C108 + C139899 * C1741 -
              C92948 * C1570) *
                 C54790 +
             (C92797 * C272 - C92947 * C115 + C139899 * C1746 -
              C92948 * C1579) *
                 C139731) *
                C5813 +
            ((C101320 - C101321 + C101322 - C101323) * C54790 +
             (C101324 - C101325 + C101326 - C101327) * C139731) *
                C5814 +
            ((C101328 - C101329 + C101330 - C101331) * C54790 +
             (C101332 - C101333 + C101334 - C101335) * C139731) *
                C5815) *
               C1565 +
           (((C92947 * C1570 - C92797 * C1741 + C92948 * C5273 -
              C139899 * C5397) *
                 C54790 +
             (C92947 * C1579 - C92797 * C1746 + C92948 * C5278 -
              C139899 * C5401) *
                 C139731) *
                C5813 +
            ((C92947 * C3438 - C92797 * C3594 + C92948 * C13126 -
              C139899 * C13298) *
                 C54790 +
             (C92947 * C3443 - C92797 * C3598 + C92948 * C13131 -
              C139899 * C13302) *
                 C139731) *
                C5814 +
            ((C92947 * C7754 - C92797 * C7979 + C92948 * C13128 -
              C139899 * C13300) *
                 C54790 +
             (C92947 * C7759 - C92797 * C7982 + C92948 * C13135 -
              C139899 * C13304) *
                 C139731) *
                C5815) *
               C140002) *
              C139792 * C808 +
          ((((C92951 - C92950 + C92953 - C92952) * C54790 +
             (C92955 - C92954 + C92957 - C92956) * C139731) *
                C5813 +
            ((C93789 - C93790 + C93791 - C93792) * C54790 +
             (C93793 - C93794 + C93795 - C93796) * C139731) *
                C5814 +
            ((C101336 - C101337 + C101338 - C101339) * C54790 +
             (C101340 - C101341 + C101342 - C101343) * C139731) *
                C5815) *
               C1565 +
           (((C94766 - C94765 + C94768 - C94767) * C54790 +
             (C94770 - C94769 + C94772 - C94771) * C139731) *
                C5813 +
            ((C92797 * C3595 - C92947 * C3439 + C139899 * C13299 -
              C92948 * C13127) *
                 C54790 +
             (C92797 * C3599 - C92947 * C3445 + C139899 * C13303 -
              C92948 * C13133) *
                 C139731) *
                C5814 +
            ((C92797 * C7980 - C92947 * C7753 + C139899 * C13301 -
              C92948 * C13129) *
                 C54790 +
             (C92797 * C7983 - C92947 * C7757 + C139899 * C13305 -
              C92948 * C13137) *
                 C139731) *
                C5815) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C92797 * C266 - C92947 * C108 + C139899 * C1741 - C92948 * C1570) *
                C47136 +
            (C92797 * C272 - C92947 * C115 + C139899 * C1746 - C92948 * C1579) *
                C47131 +
            (C92950 - C92951 + C92952 - C92953) * C47138 +
            (C92954 - C92955 + C92956 - C92957) * C47132 + C92978 * C47140 +
            C92979 * C47133) *
               C139824 * C1565 +
           ((C92947 * C1570 - C92797 * C1741 + C92948 * C5273 -
             C139899 * C5397) *
                C47136 +
            (C92947 * C1579 - C92797 * C1746 + C92948 * C5278 -
             C139899 * C5401) *
                C47131 +
            (C94765 - C94766 + C94767 - C94768) * C47138 +
            (C94769 - C94770 + C94771 - C94772) * C47132 +
            (C94773 - C94774 + C94775 - C94776) * C47140 +
            (C94777 - C94778 + C94779 - C94780) * C47133) *
               C139824 * C140002) *
              C139792 * C808 +
          (((C92951 - C92950 + C92953 - C92952) * C47136 +
            (C92955 - C92954 + C92957 - C92956) * C47131 +
            (C92959 - C92958 + C92961 - C92960) * C47138 +
            (C92963 - C92962 + C92965 - C92964) * C47132 +
            (C92966 - C92967 + C92968 - C92969) * C47140 +
            (C92970 - C92971 + C92972 - C92973) * C47133) *
               C139824 * C1565 +
           ((C94766 - C94765 + C94768 - C94767) * C47136 +
            (C94770 - C94769 + C94772 - C94771) * C47131 +
            (C94774 - C94773 + C94776 - C94775) * C47138 +
            (C94778 - C94777 + C94780 - C94779) * C47132 +
            (C92797 * C1744 - C92947 * C1567 + C139899 * C5400 -
             C92948 * C5276) *
                C47140 +
            (C92797 * C1749 - C92947 * C1573 + C139899 * C5404 -
             C92948 * C5284) *
                C47133) *
               C139824 * C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C107999 * C266 - C108103 * C108 + C108000 * C1741 -
             C108104 * C1570 + C108001 * C5397 - C108105 * C5273 +
             C108002 * C15912 - C108106 * C15623) *
                C54790 +
            (C107999 * C272 - C108103 * C115 + C108000 * C1746 -
             C108104 * C1579 + C108001 * C5401 - C108105 * C5278 +
             C108002 * C15915 - C108106 * C15628) *
                C139731) *
               C139824 * C1565 +
           ((C108103 * C1570 - C107999 * C1741 + C108104 * C5273 -
             C108000 * C5397 + C108105 * C15623 - C108001 * C15912 +
             C108106 * C21012 - C108002 * C21200) *
                C54790 +
            (C108103 * C1579 - C107999 * C1746 + C108104 * C5278 -
             C108000 * C5401 + C108105 * C15628 - C108001 * C15915 +
             C108106 * C21015 - C108002 * C21202) *
                C139731) *
               C139824 * C140002) *
              C139792 * C808 +
          (((C108103 * C109 - C107999 * C267 + C108104 * C1569 -
             C108000 * C1742 + C108105 * C5274 - C108001 * C5398 +
             C108106 * C15622 - C108002 * C15913) *
                C54790 +
            (C108103 * C117 - C107999 * C273 + C108104 * C1577 -
             C108000 * C1747 + C108105 * C5280 - C108001 * C5402 +
             C108106 * C15626 - C108002 * C15916) *
                C139731) *
               C139824 * C1565 +
           ((C107999 * C1742 - C108103 * C1569 + C108000 * C5398 -
             C108104 * C5274 + C108001 * C15913 - C108105 * C15622 +
             C108002 * C21201 - C108106 * C21013) *
                C54790 +
            (C107999 * C1747 - C108103 * C1577 + C108000 * C5402 -
             C108104 * C5280 + C108001 * C15916 - C108105 * C15626 +
             C108002 * C21203 - C108106 * C21017) *
                C139731) *
               C139824 * C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[110] +=
        (-std::pow(Pi, 2.5) *
         (((((C139731 * C114 - C54790 * C108) * C5894 +
             (C139731 * C354 - C54790 * C348) * C5813 +
             (C55513 - C55514) * C5895 + (C55515 - C55516) * C5814 +
             C57297 * C5896 + C57298 * C5815) *
                C92797 +
            ((C61976 - C61977) * C5894 + (C61978 - C61979) * C5813 +
             C64587 * C5895 + C64588 * C5814 + C88899 * C5896 +
             C88900 * C5815) *
                C139899) *
               C1565 +
           (((C61977 - C61976) * C5894 + (C61979 - C61978) * C5813 +
             C64591 * C5895 + C64592 * C5814 + C89717 * C5896 +
             C89718 * C5815) *
                C92797 +
            ((C61981 - C61980) * C5894 + (C61983 - C61982) * C5813 +
             C64593 * C5895 + C64594 * C5814 + (C63744 - C63745) * C5896 +
             (C63746 - C63747) * C5815) *
                C139899) *
               C140002) *
              C139792 * C808 +
          ((((C54790 * C109 - C139731 * C116) * C5894 +
             (C54790 * C349 - C139731 * C355) * C5813 +
             (C55525 - C55526) * C5895 + (C55527 - C55528) * C5814 +
             (C55529 - C55530) * C5896 + (C55531 - C55532) * C5815) *
                C92797 +
            ((C61984 - C61985) * C5894 + (C61986 - C61987) * C5813 +
             (C61001 - C61002) * C5895 + (C61003 - C61004) * C5814 +
             (C86284 - C86285) * C5896 + (C86286 - C86287) * C5815) *
                C139899) *
               C1565 +
           (((C61985 - C61984) * C5894 + (C61987 - C61986) * C5813 +
             (C61002 - C61001) * C5895 + (C61004 - C61003) * C5814 +
             (C86285 - C86284) * C5896 + (C86287 - C86286) * C5815) *
                C92797 +
            ((C61989 - C61988) * C5894 + (C61991 - C61990) * C5813 +
             (C61006 - C61005) * C5895 + (C61008 - C61007) * C5814 +
             (C139731 * C13136 - C54790 * C13129) * C5896 +
             (C139731 * C13387 - C54790 * C13383) * C5815) *
                C139899) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47131 * C114 - C47136 * C108 + C47132 * C116 - C47138 * C109 +
              C47133 * C118 - C47140 * C110) *
                 C182 +
             (C47131 * C354 - C47136 * C348 + C47132 * C355 - C47138 * C349 +
              C47133 * C356 - C47140 * C350) *
                 C139824) *
                C92797 +
            ((C94879 - C94880 + C94881 - C94882 + C94883 - C94884) * C182 +
             (C94885 - C94886 + C94887 - C94888 + C94889 - C94890) * C139824) *
                C139899) *
               C1565 +
           (((C94880 - C94879 + C94882 - C94881 + C94884 - C94883) * C182 +
             (C94886 - C94885 + C94888 - C94887 + C94890 - C94889) * C139824) *
                C92797 +
            ((C47136 * C5273 - C47131 * C5277 + C47138 * C5274 -
              C47132 * C5279 + C47140 * C5275 - C47133 * C5281) *
                 C182 +
             (C47136 * C5455 - C47131 * C5459 + C47138 * C5456 -
              C47132 * C5460 + C47140 * C5457 - C47133 * C5461) *
                 C139824) *
                C139899) *
               C140002) *
              C139792 * C808 +
          ((((C47136 * C109 - C47131 * C116 + C47138 * C110 - C47132 * C118 +
              C47140 * C111 - C47133 * C120) *
                 C182 +
             (C47136 * C349 - C47131 * C355 + C47138 * C350 - C47132 * C356 +
              C47140 * C351 - C47133 * C357) *
                 C139824) *
                C92797 +
            ((C94891 - C94892 + C94893 - C94894 + C94895 - C94896) * C182 +
             (C94897 - C94898 + C94899 - C94900 + C94901 - C94902) * C139824) *
                C139899) *
               C1565 +
           (((C94892 - C94891 + C94894 - C94893 + C94896 - C94895) * C182 +
             (C94898 - C94897 + C94900 - C94899 + C94902 - C94901) * C139824) *
                C92797 +
            ((C47131 * C5279 - C47136 * C5274 + C47132 * C5281 -
              C47138 * C5275 + C47133 * C5283 - C47140 * C5276) *
                 C182 +
             (C47131 * C5460 - C47136 * C5456 + C47132 * C5461 -
              C47138 * C5457 + C47133 * C5462 - C47140 * C5458) *
                 C139824) *
                C139899) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C139731 * C114 - C54790 * C108) * C182 +
             (C139731 * C354 - C54790 * C348) * C139824) *
                C107999 +
            ((C61976 - C61977) * C182 + (C61978 - C61979) * C139824) * C108000 +
            (C67258 * C182 + C67259 * C139824) * C108001 +
            ((C67263 - C67262) * C182 + (C67265 - C67264) * C139824) *
                C108002) *
               C1565 +
           (((C61977 - C61976) * C182 + (C61979 - C61978) * C139824) * C107999 +
            ((C61981 - C61980) * C182 + (C61983 - C61982) * C139824) * C108000 +
            ((C67262 - C67263) * C182 + (C67264 - C67265) * C139824) * C108001 +
            ((C54790 * C21012 - C139731 * C21014) * C182 +
             (C54790 * C21278 - C139731 * C21280) * C139824) *
                C108002) *
               C140002) *
              C139792 * C808 +
          ((((C54790 * C109 - C139731 * C116) * C182 +
             (C54790 * C349 - C139731 * C355) * C139824) *
                C107999 +
            ((C61984 - C61985) * C182 + (C61986 - C61987) * C139824) * C108000 +
            ((C61988 - C61989) * C182 + (C61990 - C61991) * C139824) * C108001 +
            ((C109277 - C109278) * C182 + (C109279 - C109280) * C139824) *
                C108002) *
               C1565 +
           (((C61985 - C61984) * C182 + (C61987 - C61986) * C139824) * C107999 +
            ((C61989 - C61988) * C182 + (C61991 - C61990) * C139824) * C108000 +
            ((C109278 - C109277) * C182 + (C109280 - C109279) * C139824) *
                C108001 +
            ((C139731 * C21016 - C54790 * C21013) * C182 +
             (C139731 * C21281 - C54790 * C21279) * C139824) *
                C108002) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[110] +=
        (-std::pow(Pi, 2.5) *
         ((((C5894 * C183 - C6151 * C108 - C5894 * C348 + C5813 * C411 +
             C5895 * C896 - C6152 * C813 - C5895 * C1072 + C5814 * C1151 +
             C5896 * C2974 - C6153 * C2908 - C5896 * C3090 + C5815 * C3148) *
                C139731 * C92797 +
            (C102506 + C102507 + C102508) * C139731 * C139899) *
               C1565 -
           ((C5896 * C13217 - C6153 * C13128 - C5896 * C13382 + C5815 * C13463 +
             C5895 * C13216 - C6152 * C13126 - C5895 * C13380 + C5814 * C13462 +
             C5894 * C5339 - C6151 * C5273 - C5894 * C5455 + C5813 * C5513) *
                C139731 * C139899 +
            (C102508 + C102507 + C102506) * C139731 * C92797) *
               C140002) *
              C139792 * C808 +
          (((C8219 + C8218 + C8217) * C139731 * C92797 +
            (C5894 * C5340 - C6151 * C5274 - C5894 * C5456 + C5813 * C5514 +
             C5895 * C13218 - C6152 * C13127 - C5895 * C13381 + C5814 * C13464 +
             C5896 * C13219 - C6153 * C13129 - C5896 * C13383 +
             C5815 * C13465) *
                C139731 * C139899) *
               C140002 -
           ((C8217 + C8218 + C8219) * C139731 * C139899 +
            (C6193 + C6192 + C6191) * C139731 * C92797) *
               C1565) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C182 * C183 - C410 * C108 - C182 * C348 + C139824 * C411) *
                 C47131 +
             C442 * C47132 + C443 * C47133) *
                C92797 +
            (C95001 + C95002 + C95003) * C139899) *
               C1565 -
           ((C14204 * C47133 + C14203 * C47132 + C16193 * C47131) * C139899 +
            (C95003 + C95002 + C95001) * C92797) *
               C140002) *
              C139792 * C808 +
          (((C95004 + C95005 + C95006) * C92797 +
            (C14203 * C47131 + C14204 * C47132 +
             (C182 * C5342 - C410 * C5276 - C182 * C5458 + C139824 * C5516) *
                 C47133) *
                C139899) *
               C140002 -
           ((C95006 + C95005 + C95004) * C139899 +
            (C444 * C47133 + C443 * C47132 + C442 * C47131) * C92797) *
               C1565) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C182 * C183 - C410 * C108 - C182 * C348 + C139824 * C411) *
                C139731 * C107999 +
            C109347 * C108000 + C109348 * C108001 + C109349 * C108002) *
               C1565 -
           ((C182 * C21109 - C410 * C21012 - C182 * C21278 + C139824 * C21373) *
                C139731 * C108002 +
            C109349 * C108001 + C109348 * C108000 + C109347 * C107999) *
               C140002) *
              C139792 * C808 +
          ((C109350 * C107999 + C109351 * C108000 + C109352 * C108001 +
            (C182 * C21110 - C410 * C21013 - C182 * C21279 + C139824 * C21374) *
                C139731 * C108002) *
               C140002 -
           (C109352 * C108002 + C109351 * C108001 + C109350 * C108000 +
            C442 * C139731 * C107999) *
               C1565) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[110] +=
        (-std::pow(Pi, 2.5) *
         ((((C92797 * C266 - C92947 * C108 + C139899 * C1741 - C92948 * C1570) *
                C5894 +
            (C92797 * C495 - C92947 * C348 + C139899 * C1997 - C92948 * C1829) *
                C5813 +
            (C101320 - C101321 + C101322 - C101323) * C5895 +
            (C101638 - C101639 + C101640 - C101641) * C5814 +
            (C101328 - C101329 + C101330 - C101331) * C5896 +
            (C101642 - C101643 + C101644 - C101645) * C5815) *
               C139731 * C1565 +
           ((C92947 * C1570 - C92797 * C1741 + C92948 * C5273 -
             C139899 * C5397) *
                C5894 +
            (C92947 * C1829 - C92797 * C1997 + C92948 * C5455 -
             C139899 * C5567) *
                C5813 +
            (C92947 * C3438 - C92797 * C3594 + C92948 * C13126 -
             C139899 * C13298) *
                C5895 +
            (C92947 * C3668 - C92797 * C3812 + C92948 * C13380 -
             C139899 * C13540) *
                C5814 +
            (C92947 * C7754 - C92797 * C7979 + C92948 * C13128 -
             C139899 * C13300) *
                C5896 +
            (C92947 * C8091 - C92797 * C8317 + C92948 * C13382 -
             C139899 * C13541) *
                C5815) *
               C139731 * C140002) *
              C139792 * C808 +
          (((C92951 - C92950 + C92953 - C92952) * C5894 +
            (C93203 - C93202 + C93205 - C93204) * C5813 +
            (C93789 - C93790 + C93791 - C93792) * C5895 +
            (C94099 - C94100 + C94101 - C94102) * C5814 +
            (C101336 - C101337 + C101338 - C101339) * C5896 +
            (C101646 - C101647 + C101648 - C101649) * C5815) *
               C139731 * C1565 +
           ((C94766 - C94765 + C94768 - C94767) * C5894 +
            (C95106 - C95105 + C95108 - C95107) * C5813 +
            (C92797 * C3595 - C92947 * C3439 + C139899 * C13299 -
             C92948 * C13127) *
                C5895 +
            (C92797 * C3813 - C92947 * C3669 + C139899 * C13542 -
             C92948 * C13381) *
                C5814 +
            (C92797 * C7980 - C92947 * C7753 + C139899 * C13301 -
             C92948 * C13129) *
                C5896 +
            (C92797 * C8318 - C92947 * C8092 + C139899 * C13543 -
             C92948 * C13383) *
                C5815) *
               C139731 * C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C92797 * C266 - C92947 * C108 + C139899 * C1741 -
              C92948 * C1570) *
                 C182 +
             (C92797 * C495 - C92947 * C348 + C139899 * C1997 -
              C92948 * C1829) *
                 C139824) *
                C47131 +
            ((C92950 - C92951 + C92952 - C92953) * C182 +
             (C93202 - C93203 + C93204 - C93205) * C139824) *
                C47132 +
            C93219 * C47133) *
               C1565 +
           (((C92947 * C1570 - C92797 * C1741 + C92948 * C5273 -
              C139899 * C5397) *
                 C182 +
             (C92947 * C1829 - C92797 * C1997 + C92948 * C5455 -
              C139899 * C5567) *
                 C139824) *
                C47131 +
            ((C94765 - C94766 + C94767 - C94768) * C182 +
             (C95105 - C95106 + C95107 - C95108) * C139824) *
                C47132 +
            ((C94773 - C94774 + C94775 - C94776) * C182 +
             (C95109 - C95110 + C95111 - C95112) * C139824) *
                C47133) *
               C140002) *
              C139792 * C808 +
          ((((C92951 - C92950 + C92953 - C92952) * C182 +
             (C93203 - C93202 + C93205 - C93204) * C139824) *
                C47131 +
            ((C92959 - C92958 + C92961 - C92960) * C182 +
             (C93208 - C93207 + C93210 - C93209) * C139824) *
                C47132 +
            ((C92966 - C92967 + C92968 - C92969) * C182 +
             (C93211 - C93212 + C93213 - C93214) * C139824) *
                C47133) *
               C1565 +
           (((C94766 - C94765 + C94768 - C94767) * C182 +
             (C95106 - C95105 + C95108 - C95107) * C139824) *
                C47131 +
            ((C94774 - C94773 + C94776 - C94775) * C182 +
             (C95110 - C95109 + C95112 - C95111) * C139824) *
                C47132 +
            ((C92797 * C1744 - C92947 * C1567 + C139899 * C5400 -
              C92948 * C5276) *
                 C182 +
             (C92797 * C2000 - C92947 * C1832 + C139899 * C5570 -
              C92948 * C5458) *
                 C139824) *
                C47133) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C107999 * C266 - C108103 * C108 + C108000 * C1741 -
             C108104 * C1570 + C108001 * C5397 - C108105 * C5273 +
             C108002 * C15912 - C108106 * C15623) *
                C182 +
            (C107999 * C495 - C108103 * C348 + C108000 * C1997 -
             C108104 * C1829 + C108001 * C5567 - C108105 * C5455 +
             C108002 * C16294 - C108106 * C16028) *
                C139824) *
               C139731 * C1565 +
           ((C108103 * C1570 - C107999 * C1741 + C108104 * C5273 -
             C108000 * C5397 + C108105 * C15623 - C108001 * C15912 +
             C108106 * C21012 - C108002 * C21200) *
                C182 +
            (C108103 * C1829 - C107999 * C1997 + C108104 * C5455 -
             C108000 * C5567 + C108105 * C16028 - C108001 * C16294 +
             C108106 * C21278 - C108002 * C21459) *
                C139824) *
               C139731 * C140002) *
              C139792 * C808 +
          (((C108103 * C109 - C107999 * C267 + C108104 * C1569 -
             C108000 * C1742 + C108105 * C5274 - C108001 * C5398 +
             C108106 * C15622 - C108002 * C15913) *
                C182 +
            (C108103 * C349 - C107999 * C496 + C108104 * C1830 -
             C108000 * C1998 + C108105 * C5456 - C108001 * C5568 +
             C108106 * C16029 - C108002 * C16295) *
                C139824) *
               C139731 * C1565 +
           ((C107999 * C1742 - C108103 * C1569 + C108000 * C5398 -
             C108104 * C5274 + C108001 * C15913 - C108105 * C15622 +
             C108002 * C21201 - C108106 * C21013) *
                C182 +
            (C107999 * C1998 - C108103 * C1830 + C108000 * C5568 -
             C108104 * C5456 + C108001 * C16295 - C108105 * C16029 +
             C108002 * C21460 - C108106 * C21279) *
                C139824) *
               C139731 * C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eezx[110] +=
        (-std::pow(Pi, 2.5) *
         (((((C139731 * C114 - C54790 * C108) * C92947 +
             (C139731 * C573 - C54790 * C567) * C92797 +
             (C61976 - C61977) * C92948 + (C62328 - C62329) * C139899) *
                C5813 +
            ((C55513 - C55514) * C92947 + (C55735 - C55736) * C92797 +
             C64587 * C92948 + C64931 * C139899) *
                C5814 +
            (C57297 * C92947 + C57463 * C92797 + C88899 * C92948 +
             C89133 * C139899) *
                C5815) *
               C1565 +
           (((C61977 - C61976) * C92947 + (C62329 - C62328) * C92797 +
             (C61981 - C61980) * C92948 + (C62331 - C62330) * C139899) *
                C5813 +
            (C64591 * C92947 + C64933 * C92797 + C64593 * C92948 +
             C64934 * C139899) *
                C5814 +
            (C89717 * C92947 + C90038 * C92797 + (C63744 - C63745) * C92948 +
             (C63976 - C63977) * C139899) *
                C5815) *
               C140002) *
              C139792 * C808 +
          ((((C54790 * C109 - C139731 * C116) * C92947 +
             (C54790 * C568 - C139731 * C574) * C92797 +
             (C61984 - C61985) * C92948 + (C62332 - C62333) * C139899) *
                C5813 +
            ((C55525 - C55526) * C92947 + (C55741 - C55742) * C92797 +
             (C61001 - C61002) * C92948 + (C61311 - C61312) * C139899) *
                C5814 +
            ((C55529 - C55530) * C92947 + (C55743 - C55744) * C92797 +
             (C86284 - C86285) * C92948 + (C86582 - C86583) * C139899) *
                C5815) *
               C1565 +
           (((C61985 - C61984) * C92947 + (C62333 - C62332) * C92797 +
             (C61989 - C61988) * C92948 + (C62335 - C62334) * C139899) *
                C5813 +
            ((C61002 - C61001) * C92947 + (C61312 - C61311) * C92797 +
             (C61006 - C61005) * C92948 + (C61314 - C61313) * C139899) *
                C5814 +
            ((C86285 - C86284) * C92947 + (C86583 - C86582) * C92797 +
             (C139731 * C13136 - C54790 * C13129) * C92948 +
             (C139731 * C13625 - C54790 * C13621) * C139899) *
                C5815) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47131 * C114 - C47136 * C108 + C47132 * C116 - C47138 * C109 +
             C47133 * C118 - C47140 * C110) *
                C92947 +
            (C47131 * C573 - C47136 * C567 + C47132 * C574 - C47138 * C568 +
             C47133 * C575 - C47140 * C569) *
                C92797 +
            (C94879 - C94880 + C94881 - C94882 + C94883 - C94884) * C92948 +
            (C95211 - C95212 + C95213 - C95214 + C95215 - C95216) * C139899) *
               C139824 * C1565 +
           ((C94880 - C94879 + C94882 - C94881 + C94884 - C94883) * C92947 +
            (C95212 - C95211 + C95214 - C95213 + C95216 - C95215) * C92797 +
            (C47136 * C5273 - C47131 * C5277 + C47138 * C5274 - C47132 * C5279 +
             C47140 * C5275 - C47133 * C5281) *
                C92948 +
            (C47136 * C5621 - C47131 * C5625 + C47138 * C5622 - C47132 * C5626 +
             C47140 * C5623 - C47133 * C5627) *
                C139899) *
               C139824 * C140002) *
              C139792 * C808 +
          (((C47136 * C109 - C47131 * C116 + C47138 * C110 - C47132 * C118 +
             C47140 * C111 - C47133 * C120) *
                C92947 +
            (C47136 * C568 - C47131 * C574 + C47138 * C569 - C47132 * C575 +
             C47140 * C570 - C47133 * C576) *
                C92797 +
            (C94891 - C94892 + C94893 - C94894 + C94895 - C94896) * C92948 +
            (C95217 - C95218 + C95219 - C95220 + C95221 - C95222) * C139899) *
               C139824 * C1565 +
           ((C94892 - C94891 + C94894 - C94893 + C94896 - C94895) * C92947 +
            (C95218 - C95217 + C95220 - C95219 + C95222 - C95221) * C92797 +
            (C47131 * C5279 - C47136 * C5274 + C47132 * C5281 - C47138 * C5275 +
             C47133 * C5283 - C47140 * C5276) *
                C92948 +
            (C47131 * C5626 - C47136 * C5622 + C47132 * C5627 - C47138 * C5623 +
             C47133 * C5628 - C47140 * C5624) *
                C139899) *
               C139824 * C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C139731 * C114 - C54790 * C108) * C108103 +
            (C139731 * C573 - C54790 * C567) * C107999 +
            (C61976 - C61977) * C108104 + (C62328 - C62329) * C108000 +
            C67258 * C108105 + C67513 * C108001 + (C67263 - C67262) * C108106 +
            (C67515 - C67514) * C108002) *
               C139824 * C1565 +
           ((C61977 - C61976) * C108103 + (C62329 - C62328) * C107999 +
            (C61981 - C61980) * C108104 + (C62331 - C62330) * C108000 +
            (C67262 - C67263) * C108105 + (C67514 - C67515) * C108001 +
            (C54790 * C21012 - C139731 * C21014) * C108106 +
            (C54790 * C21535 - C139731 * C21537) * C108002) *
               C139824 * C140002) *
              C139792 * C808 +
          (((C54790 * C109 - C139731 * C116) * C108103 +
            (C54790 * C568 - C139731 * C574) * C107999 +
            (C61984 - C61985) * C108104 + (C62332 - C62333) * C108000 +
            (C61988 - C61989) * C108105 + (C62334 - C62335) * C108001 +
            (C109277 - C109278) * C108106 + (C109485 - C109486) * C108002) *
               C139824 * C1565 +
           ((C61985 - C61984) * C108103 + (C62333 - C62332) * C107999 +
            (C61989 - C61988) * C108104 + (C62335 - C62334) * C108000 +
            (C109278 - C109277) * C108105 + (C109486 - C109485) * C108001 +
            (C139731 * C21016 - C54790 * C21013) * C108106 +
            (C139731 * C21538 - C54790 * C21536) * C108002) *
               C139824 * C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eezy[110] +=
        (-std::pow(Pi, 2.5) *
         ((((C5813 * C183 - C5894 * C108 + C5814 * C896 - C5895 * C813 +
             C5815 * C2974 - C5896 * C2908) *
                C92947 +
            (C5813 * C629 - C5894 * C567 + C5814 * C1393 - C5895 * C1317 +
             C5815 * C3314 - C5896 * C3256) *
                C92797 +
            (C102182 - C102183 + C102184 - C102185 + C102186 - C102187) *
                C92948 +
            (C102803 - C102804 + C102805 - C102806 + C102807 - C102808) *
                C139899) *
               C139731 * C1565 +
           ((C102183 - C102182 + C102185 - C102184 + C102187 - C102186) *
                C92947 +
            (C102804 - C102803 + C102806 - C102805 + C102808 - C102807) *
                C92797 +
            (C5894 * C5273 - C5813 * C5339 + C5895 * C13126 - C5814 * C13216 +
             C5896 * C13128 - C5815 * C13217) *
                C92948 +
            (C5894 * C5621 - C5813 * C5679 + C5895 * C13618 - C5814 * C13700 +
             C5896 * C13620 - C5815 * C13701) *
                C139899) *
               C139731 * C140002) *
              C139792 * C808 +
          (((C5899 - C5898 + C5901 - C5900 + C5903 - C5902) * C92947 +
            (C6424 - C6423 + C6426 - C6425 + C6428 - C6427) * C92797 +
            (C7870 - C7871 + C7872 - C7873 + C7874 - C7875) * C92948 +
            (C8530 - C8531 + C8532 - C8533 + C8534 - C8535) * C139899) *
               C139731 * C1565 +
           ((C7871 - C7870 + C7873 - C7872 + C7875 - C7874) * C92947 +
            (C8531 - C8530 + C8533 - C8532 + C8535 - C8534) * C92797 +
            (C5813 * C5340 - C5894 * C5274 + C5814 * C13218 - C5895 * C13127 +
             C5815 * C13219 - C5896 * C13129) *
                C92948 +
            (C5813 * C5680 - C5894 * C5622 + C5814 * C13702 - C5895 * C13619 +
             C5815 * C13703 - C5896 * C13621) *
                C139899) *
               C139731 * C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C139824 * C183 - C182 * C108) * C92947 +
             (C139824 * C629 - C182 * C567) * C92797 +
             (C15795 - C15796) * C92948 + (C16525 - C16526) * C139899) *
                C47131 +
            ((C196 - C197) * C92947 + (C636 - C637) * C92797 + C15799 * C92948 +
             C16529 * C139899) *
                C47132 +
            C93374 * C47133) *
               C1565 +
           (((C15796 - C15795) * C92947 + (C16526 - C16525) * C92797 +
             (C15802 - C15801) * C92948 + (C16528 - C16527) * C139899) *
                C47131 +
            (C15807 * C92947 + C16531 * C92797 + C15809 * C92948 +
             C16532 * C139899) *
                C47132 +
            (C31358 * C92947 + C32014 * C92797 + (C13938 - C13939) * C92948 +
             (C14441 - C14442) * C139899) *
                C47133) *
               C140002) *
              C139792 * C808 +
          ((((C197 - C196) * C92947 + (C637 - C636) * C92797 + C15807 * C92948 +
             C16531 * C139899) *
                C47131 +
            ((C201 - C200) * C92947 + (C640 - C639) * C92797 + C31358 * C92948 +
             C32014 * C139899) *
                C47132 +
            ((C205 - C204) * C92947 + (C643 - C642) * C92797 +
             (C1672 - C1673) * C92948 + (C2160 - C2161) * C139899) *
                C47133) *
               C1565 +
           ((C15799 * C92947 + C16529 * C92797 + C15805 * C92948 +
             C16530 * C139899) *
                C47131 +
            (C29549 * C92947 + C30048 * C92797 + (C13939 - C13938) * C92948 +
             (C14442 - C14441) * C139899) *
                C47132 +
            ((C1673 - C1672) * C92947 + (C2161 - C2160) * C92797 +
             (C139824 * C5342 - C182 * C5276) * C92948 +
             (C139824 * C5682 - C182 * C5624) * C139899) *
                C47133) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C139824 * C183 - C182 * C108) * C108103 +
            (C139824 * C629 - C182 * C567) * C107999 +
            (C15795 - C15796) * C108104 + (C16525 - C16526) * C108000 +
            C21114 * C108105 + C21623 * C108001 + (C21119 - C21118) * C108106 +
            (C21625 - C21624) * C108002) *
               C139731 * C1565 +
           ((C15796 - C15795) * C108103 + (C16526 - C16525) * C107999 +
            (C15802 - C15801) * C108104 + (C16528 - C16527) * C108000 +
            (C21118 - C21119) * C108105 + (C21624 - C21625) * C108001 +
            (C182 * C21012 - C139824 * C21109) * C108106 +
            (C182 * C21535 - C139824 * C21620) * C108002) *
               C139731 * C140002) *
              C139792 * C808 +
          (((C197 - C196) * C108103 + (C637 - C636) * C107999 +
            C15807 * C108104 + C16531 * C108000 + C15809 * C108105 +
            C16532 * C108001 + (C15811 - C15812) * C108106 +
            (C16533 - C16534) * C108002) *
               C139731 * C1565 +
           (C15799 * C108103 + C16529 * C107999 + C15805 * C108104 +
            C16530 * C108000 + (C15812 - C15811) * C108105 +
            (C16534 - C16533) * C108001 +
            (C139824 * C21110 - C182 * C21013) * C108106 +
            (C139824 * C21621 - C182 * C21536) * C108002) *
               C139731 * C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eezz[110] +=
        (-std::pow(Pi, 2.5) *
         ((((C92947 * C266 - C93448 * C108 - C92947 * C567 + C92797 * C702 +
             C92948 * C1741 - C93449 * C1570 - C92948 * C2074 +
             C139899 * C2230) *
                C5813 +
            (C101980 + C101981) * C5814 + (C101982 + C101983) * C5815) *
               C139731 * C1565 -
           ((C92948 * C13300 - C93449 * C13128 - C92948 * C13620 +
             C139899 * C13779 + C92947 * C7979 - C93448 * C7754 -
             C92947 * C8422 + C92797 * C8634) *
                C5815 +
            (C92948 * C13298 - C93449 * C13126 - C92948 * C13618 +
             C139899 * C13778 + C92947 * C3594 - C93448 * C3438 -
             C92947 * C3882 + C92797 * C4026) *
                C5814 +
            (C92948 * C5397 - C93449 * C5273 - C92948 * C5621 +
             C139899 * C5733 + C92947 * C1741 - C93448 * C1570 -
             C92947 * C2074 + C92797 * C2230) *
                C5813) *
               C139731 * C140002) *
              C139792 * C808 +
          (((C95446 + C95445) * C5813 +
            (C92947 * C3595 - C93448 * C3439 - C92947 * C3883 + C92797 * C4027 +
             C92948 * C13299 - C93449 * C13127 - C92948 * C13619 +
             C139899 * C13780) *
                C5814 +
            (C92947 * C7980 - C93448 * C7753 - C92947 * C8423 + C92797 * C8633 +
             C92948 * C13301 - C93449 * C13129 - C92948 * C13621 +
             C139899 * C13781) *
                C5815) *
               C139731 * C140002 -
           ((C101985 + C101984) * C5815 + (C94427 + C94428) * C5814 +
            (C93488 + C93487) * C5813) *
               C139731 * C1565) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C92947 * C266 - C93448 * C108 - C92947 * C567 + C92797 * C702 +
             C92948 * C1741 - C93449 * C1570 - C92948 * C2074 +
             C139899 * C2230) *
                C139824 * C47131 +
            (C93487 + C93488) * C139824 * C47132 + C93494 * C47133) *
               C1565 -
           ((C95443 + C95444) * C139824 * C47133 +
            (C95445 + C95446) * C139824 * C47132 +
            (C92948 * C5397 - C93449 * C5273 - C92948 * C5621 +
             C139899 * C5733 + C92947 * C1741 - C93448 * C1570 -
             C92947 * C2074 + C92797 * C2230) *
                C139824 * C47131) *
               C140002) *
              C139792 * C808 +
          (((C95446 + C95445) * C139824 * C47131 +
            (C95444 + C95443) * C139824 * C47132 +
            (C92947 * C1744 - C93448 * C1567 - C92947 * C2077 + C92797 * C2227 +
             C92948 * C5400 - C93449 * C5276 - C92948 * C5624 +
             C139899 * C5736) *
                C139824 * C47133) *
               C140002 -
           ((C93491 + C93492) * C139824 * C47133 +
            (C93490 + C93489) * C139824 * C47132 +
            (C93488 + C93487) * C139824 * C47131) *
               C1565) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C108103 * C266 - C108407 * C108 - C108103 * C567 + C107999 * C702 +
            C108104 * C1741 - C108408 * C1570 - C108104 * C2074 +
            C108000 * C2230 + C108105 * C5397 - C108409 * C5273 -
            C108105 * C5621 + C108001 * C5733 + C108106 * C15912 -
            C108410 * C15623 - C108106 * C16401 + C108002 * C16633) *
               C139824 * C139731 * C1565 -
           (C108106 * C21200 - C108410 * C21012 - C108106 * C21535 +
            C108002 * C21699 + C108105 * C15912 - C108409 * C15623 -
            C108105 * C16401 + C108001 * C16633 + C108104 * C5397 -
            C108408 * C5273 - C108104 * C5621 + C108000 * C5733 +
            C108103 * C1741 - C108407 * C1570 - C108103 * C2074 +
            C107999 * C2230) *
               C139824 * C139731 * C140002) *
              C139792 * C808 +
          ((C108103 * C1742 - C108407 * C1569 - C108103 * C2075 +
            C107999 * C2229 + C108104 * C5398 - C108408 * C5274 -
            C108104 * C5622 + C108000 * C5734 + C108105 * C15913 -
            C108409 * C15622 - C108105 * C16402 + C108001 * C16632 +
            C108106 * C21201 - C108410 * C21013 - C108106 * C21536 +
            C108002 * C21700) *
               C139824 * C139731 * C140002 -
           (C108106 * C15913 - C108410 * C15622 - C108106 * C16402 +
            C108002 * C16632 + C108105 * C5398 - C108409 * C5274 -
            C108105 * C5622 + C108001 * C5734 + C108104 * C1742 -
            C108408 * C1569 - C108104 * C2075 + C108000 * C2229 +
            C108103 * C267 - C108407 * C109 - C108103 * C568 + C107999 * C703) *
               C139824 * C139731 * C1565) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eexx[111] +=
        (-std::pow(Pi, 2.5) *
         (((((C54790 * C114 - C54791 * C108 - C54790 * C115 + C139731 * C126) *
                 C92797 +
             C61654 * C139899) *
                C5813 +
            (C101116 + C101117) * C5814 + (C101118 + C101119) * C5815) *
               C139809 * C2322 -
           ((C57669 * C139899 + C55305 * C92797) * C5815 +
            (C101119 + C101118) * C5814 + (C101117 + C101116) * C5813) *
               C139809 * C140000) *
              C2324 +
          (((C101120 + C101121) * C5813 + (C101122 + C101123) * C5814 +
            (C55308 * C92797 + (C54790 * C10398 - C54791 * C10395 -
                                C54790 * C10399 + C139731 * C10401) *
                                   C139899) *
                C5815) *
               C139809 * C140000 -
           ((C101123 + C101122) * C5815 + (C101121 + C101120) * C5814 +
            (C61656 * C139899 +
             (C54790 * C116 - C54791 * C109 - C54790 * C117 + C139731 * C127) *
                 C92797) *
                C5813) *
               C139809 * C2322) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47136 * C114 - C47137 * C108 - C47136 * C115 + C47131 * C126 +
             C47138 * C116 - C47139 * C109 - C47138 * C117 + C47132 * C127 +
             C47140 * C118 - C47141 * C110 - C47140 * C119 + C47133 * C128) *
                C92797 +
            (C94563 + C94564 + C94565) * C139899) *
               C139824 * C139809 * C2322 -
           ((C51501 + C51502 + C51503) * C139899 +
            (C47980 + C47979 + C47978) * C92797) *
               C139824 * C139809 * C140000) *
              C2324 +
          (((C47981 + C47982 + C47983) * C92797 +
            (C47136 * C3444 - C47137 * C3439 - C47136 * C3445 + C47131 * C3451 +
             C47138 * C3446 - C47139 * C3440 - C47138 * C3447 + C47132 * C3452 +
             C47140 * C3448 - C47141 * C3441 - C47140 * C3449 +
             C47133 * C3453) *
                C139899) *
               C139824 * C139809 * C140000 -
           ((C94568 + C94567 + C94566) * C139899 +
            (C47140 * C120 - C47141 * C111 - C47140 * C121 + C47133 * C129 +
             C47138 * C118 - C47139 * C110 - C47138 * C119 + C47132 * C128 +
             C47136 * C116 - C47137 * C109 - C47136 * C117 + C47131 * C127) *
                C92797) *
               C139824 * C139809 * C2322) *
              C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C54790 * C114 - C54791 * C108 - C54790 * C115 + C139731 * C126) *
                C107999 +
            C61654 * C108000 + C61655 * C108001 + C67012 * C108002) *
               C139824 * C139809 * C2322 -
           (C64257 * C108002 + C60685 * C108001 + C57671 * C108000 +
            C55303 * C107999) *
               C139824 * C139809 * C140000) *
              C2324 +
          ((C55306 * C107999 + C60686 * C108000 + C60687 * C108001 +
            (C54790 * C18306 - C54791 * C18303 - C54790 * C18307 +
             C139731 * C18309) *
                C108002) *
               C139824 * C139809 * C140000 -
           (C109078 * C108002 + C61657 * C108001 + C61656 * C108000 +
            (C54790 * C116 - C54791 * C109 - C54790 * C117 + C139731 * C127) *
                C107999) *
               C139824 * C139809 * C2322) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eexy[111] +=
        (-std::pow(Pi, 2.5) *
         (((((C5813 * C183 - C5894 * C108 + C5814 * C896 - C5895 * C813 +
              C5815 * C2974 - C5896 * C2908) *
                 C54790 +
             (C5813 * C189 - C5894 * C115 + C5814 * C901 - C5895 * C822 +
              C5815 * C2978 - C5896 * C2913) *
                 C139731) *
                C92797 +
            ((C102182 - C102183 + C102184 - C102185 + C102186 - C102187) *
                 C54790 +
             (C102188 - C102189 + C102190 - C102191 + C102192 - C102193) *
                 C139731) *
                C139899) *
               C139809 * C2322 +
           (((C5894 * C813 - C5813 * C896 + C5895 * C2908 - C5814 * C2974 +
              C5896 * C6627 - C5815 * C6792) *
                 C54790 +
             (C5894 * C822 - C5813 * C901 + C5895 * C2913 - C5814 * C2978 +
              C5896 * C6632 - C5815 * C6795) *
                 C139731) *
                C92797 +
            ((C5894 * C3438 - C5813 * C3520 + C5895 * C7754 - C5814 * C7863 +
              C5896 * C10394 - C5815 * C10528) *
                 C54790 +
             (C5894 * C3443 - C5813 * C3524 + C5895 * C7759 - C5814 * C7866 +
              C5896 * C10397 - C5815 * C10530) *
                 C139731) *
                C139899) *
               C139809 * C140000) *
              C2324 +
          ((((C5899 - C5898 + C5901 - C5900 + C5903 - C5902) * C54790 +
             (C5905 - C5904 + C5907 - C5906 + C5909 - C5908) * C139731) *
                C92797 +
            ((C7870 - C7871 + C7872 - C7873 + C7874 - C7875) * C54790 +
             (C7876 - C7877 + C7878 - C7879 + C7880 - C7881) * C139731) *
                C139899) *
               C139809 * C2322 +
           (((C6800 - C6799 + C6802 - C6801 + C6804 - C6803) * C54790 +
             (C6806 - C6805 + C6808 - C6807 + C6810 - C6809) * C139731) *
                C92797 +
            ((C5813 * C3521 - C5894 * C3439 + C5814 * C7864 - C5895 * C7753 +
              C5815 * C10529 - C5896 * C10395) *
                 C54790 +
             (C5813 * C3525 - C5894 * C3445 + C5814 * C7867 - C5895 * C7757 +
              C5815 * C10531 - C5896 * C10399) *
                 C139731) *
                C139899) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C139824 * C183 - C182 * C108) * C47136 +
             (C139824 * C189 - C182 * C115) * C47131 + (C196 - C197) * C47138 +
             (C198 - C199) * C47132 + C212 * C47140 + C213 * C47133) *
                C92797 +
            ((C15795 - C15796) * C47136 + (C15797 - C15798) * C47131 +
             C15799 * C47138 + C15800 * C47132 + C29549 * C47140 +
             C29550 * C47133) *
                C139899) *
               C139809 * C2322 +
           (((C182 * C813 - C139824 * C896) * C47136 +
             (C182 * C822 - C139824 * C901) * C47131 + (C907 - C908) * C47138 +
             (C909 - C910) * C47132 + (C911 - C912) * C47140 +
             (C913 - C914) * C47133) *
                C92797 +
            ((C18427 - C18428) * C47136 + (C18429 - C18430) * C47131 +
             (C14764 - C14765) * C47138 + (C14766 - C14767) * C47132 +
             (C30369 - C30370) * C47140 + (C30371 - C30372) * C47133) *
                C139899) *
               C139809 * C140000) *
              C2324 +
          ((((C197 - C196) * C47136 + (C199 - C198) * C47131 +
             (C201 - C200) * C47138 + (C203 - C202) * C47132 +
             (C205 - C204) * C47140 + (C207 - C206) * C47133) *
                C92797 +
            (C15807 * C47136 + C15808 * C47131 + C31358 * C47138 +
             C31359 * C47132 + (C1672 - C1673) * C47140 +
             (C1674 - C1675) * C47133) *
                C139899) *
               C139809 * C2322 +
           (((C908 - C907) * C47136 + (C910 - C909) * C47131 +
             (C912 - C911) * C47138 + (C914 - C913) * C47132 +
             (C916 - C915) * C47140 + (C918 - C917) * C47133) *
                C92797 +
            ((C14765 - C14764) * C47136 + (C14767 - C14766) * C47131 +
             (C30370 - C30369) * C47138 + (C30372 - C30371) * C47132 +
             (C139824 * C3523 - C182 * C3441) * C47140 +
             (C139824 * C3527 - C182 * C3449) * C47133) *
                C139899) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C139824 * C183 - C182 * C108) * C54790 +
             (C139824 * C189 - C182 * C115) * C139731) *
                C107999 +
            ((C15795 - C15796) * C54790 + (C15797 - C15798) * C139731) *
                C108000 +
            (C21114 * C54790 + C21115 * C139731) * C108001 +
            ((C21119 - C21118) * C54790 + (C21121 - C21120) * C139731) *
                C108002) *
               C139809 * C2322 +
           (((C182 * C813 - C139824 * C896) * C54790 +
             (C182 * C822 - C139824 * C901) * C139731) *
                C107999 +
            ((C18427 - C18428) * C54790 + (C18429 - C18430) * C139731) *
                C108000 +
            ((C18431 - C18432) * C54790 + (C18433 - C18434) * C139731) *
                C108001 +
            ((C182 * C18302 - C139824 * C18422) * C54790 +
             (C182 * C18305 - C139824 * C18424) * C139731) *
                C108002) *
               C139809 * C140000) *
              C2324 +
          ((((C197 - C196) * C54790 + (C199 - C198) * C139731) * C107999 +
            (C15807 * C54790 + C15808 * C139731) * C108000 +
            (C15809 * C54790 + C15810 * C139731) * C108001 +
            ((C15811 - C15812) * C54790 + (C15813 - C15814) * C139731) *
                C108002) *
               C139809 * C2322 +
           (((C908 - C907) * C54790 + (C910 - C909) * C139731) * C107999 +
            ((C14765 - C14764) * C54790 + (C14767 - C14766) * C139731) *
                C108000 +
            ((C14769 - C14768) * C54790 + (C14771 - C14770) * C139731) *
                C108001 +
            ((C139824 * C18423 - C182 * C18303) * C54790 +
             (C139824 * C18425 - C182 * C18307) * C139731) *
                C108002) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eexz[111] +=
        (-std::pow(Pi, 2.5) *
         (((((C92797 * C266 - C92947 * C108 + C139899 * C1741 -
              C92948 * C1570) *
                 C54790 +
             (C92797 * C272 - C92947 * C115 + C139899 * C1746 -
              C92948 * C1579) *
                 C139731) *
                C5813 +
            ((C101320 - C101321 + C101322 - C101323) * C54790 +
             (C101324 - C101325 + C101326 - C101327) * C139731) *
                C5814 +
            ((C101328 - C101329 + C101330 - C101331) * C54790 +
             (C101332 - C101333 + C101334 - C101335) * C139731) *
                C5815) *
               C139809 * C2322 +
           (((C101321 - C101320 + C101323 - C101322) * C54790 +
             (C101325 - C101324 + C101327 - C101326) * C139731) *
                C5813 +
            ((C101329 - C101328 + C101331 - C101330) * C54790 +
             (C101333 - C101332 + C101335 - C101334) * C139731) *
                C5814 +
            ((C92947 * C6627 - C92797 * C6908 + C92948 * C10394 -
              C139899 * C10630) *
                 C54790 +
             (C92947 * C6632 - C92797 * C6911 + C92948 * C10397 -
              C139899 * C10632) *
                 C139731) *
                C5815) *
               C139809 * C140000) *
              C2324 +
          ((((C92951 - C92950 + C92953 - C92952) * C54790 +
             (C92955 - C92954 + C92957 - C92956) * C139731) *
                C5813 +
            ((C93789 - C93790 + C93791 - C93792) * C54790 +
             (C93793 - C93794 + C93795 - C93796) * C139731) *
                C5814 +
            ((C101336 - C101337 + C101338 - C101339) * C54790 +
             (C101340 - C101341 + C101342 - C101343) * C139731) *
                C5815) *
               C139809 * C2322 +
           (((C93790 - C93789 + C93792 - C93791) * C54790 +
             (C93794 - C93793 + C93796 - C93795) * C139731) *
                C5813 +
            ((C101337 - C101336 + C101339 - C101338) * C54790 +
             (C101341 - C101340 + C101343 - C101342) * C139731) *
                C5814 +
            ((C92797 * C6909 - C92947 * C6626 + C139899 * C10631 -
              C92948 * C10395) *
                 C54790 +
             (C92797 * C6912 - C92947 * C6630 + C139899 * C10633 -
              C92948 * C10399) *
                 C139731) *
                C5815) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C92797 * C266 - C92947 * C108 + C139899 * C1741 - C92948 * C1570) *
                C47136 +
            (C92797 * C272 - C92947 * C115 + C139899 * C1746 - C92948 * C1579) *
                C47131 +
            (C92950 - C92951 + C92952 - C92953) * C47138 +
            (C92954 - C92955 + C92956 - C92957) * C47132 + C92978 * C47140 +
            C92979 * C47133) *
               C139824 * C139809 * C2322 +
           ((C92947 * C813 - C92797 * C984 + C92948 * C3438 - C139899 * C3594) *
                C47136 +
            (C92947 * C822 - C92797 * C989 + C92948 * C3443 - C139899 * C3598) *
                C47131 +
            (C93789 - C93790 + C93791 - C93792) * C47138 +
            (C93793 - C93794 + C93795 - C93796) * C47132 +
            (C93797 - C93798 + C93799 - C93800) * C47140 +
            (C93801 - C93802 + C93803 - C93804) * C47133) *
               C139824 * C139809 * C140000) *
              C2324 +
          (((C92951 - C92950 + C92953 - C92952) * C47136 +
            (C92955 - C92954 + C92957 - C92956) * C47131 +
            (C92959 - C92958 + C92961 - C92960) * C47138 +
            (C92963 - C92962 + C92965 - C92964) * C47132 +
            (C92966 - C92967 + C92968 - C92969) * C47140 +
            (C92970 - C92971 + C92972 - C92973) * C47133) *
               C139824 * C139809 * C2322 +
           ((C93790 - C93789 + C93792 - C93791) * C47136 +
            (C93794 - C93793 + C93796 - C93795) * C47131 +
            (C93798 - C93797 + C93800 - C93799) * C47138 +
            (C93802 - C93801 + C93804 - C93803) * C47132 +
            (C92797 * C987 - C92947 * C810 + C139899 * C3597 - C92948 * C3441) *
                C47140 +
            (C92797 * C992 - C92947 * C816 + C139899 * C3601 - C92948 * C3449) *
                C47133) *
               C139824 * C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C107999 * C266 - C108103 * C108 + C108000 * C1741 -
             C108104 * C1570 + C108001 * C5397 - C108105 * C5273 +
             C108002 * C15912 - C108106 * C15623) *
                C54790 +
            (C107999 * C272 - C108103 * C115 + C108000 * C1746 -
             C108104 * C1579 + C108001 * C5401 - C108105 * C5278 +
             C108002 * C15915 - C108106 * C15628) *
                C139731) *
               C139824 * C139809 * C2322 +
           ((C108103 * C813 - C107999 * C984 + C108104 * C3438 -
             C108000 * C3594 + C108105 * C13126 - C108001 * C13298 +
             C108106 * C18302 - C108002 * C18532) *
                C54790 +
            (C108103 * C822 - C107999 * C989 + C108104 * C3443 -
             C108000 * C3598 + C108105 * C13131 - C108001 * C13302 +
             C108106 * C18305 - C108002 * C18534) *
                C139731) *
               C139824 * C139809 * C140000) *
              C2324 +
          (((C108103 * C109 - C107999 * C267 + C108104 * C1569 -
             C108000 * C1742 + C108105 * C5274 - C108001 * C5398 +
             C108106 * C15622 - C108002 * C15913) *
                C54790 +
            (C108103 * C117 - C107999 * C273 + C108104 * C1577 -
             C108000 * C1747 + C108105 * C5280 - C108001 * C5402 +
             C108106 * C15626 - C108002 * C15916) *
                C139731) *
               C139824 * C139809 * C2322 +
           ((C107999 * C985 - C108103 * C812 + C108000 * C3595 -
             C108104 * C3439 + C108001 * C13299 - C108105 * C13127 +
             C108002 * C18533 - C108106 * C18303) *
                C54790 +
            (C107999 * C990 - C108103 * C820 + C108000 * C3599 -
             C108104 * C3445 + C108001 * C13303 - C108105 * C13133 +
             C108002 * C18535 - C108106 * C18307) *
                C139731) *
               C139824 * C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[111] +=
        (-std::pow(Pi, 2.5) *
         (((((C139731 * C114 - C54790 * C108) * C5894 +
             (C139731 * C354 - C54790 * C348) * C5813 +
             (C55513 - C55514) * C5895 + (C55515 - C55516) * C5814 +
             C57297 * C5896 + C57298 * C5815) *
                C92797 +
            ((C61976 - C61977) * C5894 + (C61978 - C61979) * C5813 +
             C64587 * C5895 + C64588 * C5814 + C88899 * C5896 +
             C88900 * C5815) *
                C139899) *
               C139809 * C2322 +
           (((C55514 - C55513) * C5894 + (C55516 - C55515) * C5813 +
             (C55518 - C55517) * C5895 + (C55520 - C55519) * C5814 +
             (C55522 - C55521) * C5896 + (C55524 - C55523) * C5815) *
                C92797 +
            (C64591 * C5894 + C64592 * C5813 + C89717 * C5895 + C89718 * C5814 +
             (C57891 - C57892) * C5896 + (C57893 - C57894) * C5815) *
                C139899) *
               C139809 * C140000) *
              C2324 +
          ((((C54790 * C109 - C139731 * C116) * C5894 +
             (C54790 * C349 - C139731 * C355) * C5813 +
             (C55525 - C55526) * C5895 + (C55527 - C55528) * C5814 +
             (C55529 - C55530) * C5896 + (C55531 - C55532) * C5815) *
                C92797 +
            ((C61984 - C61985) * C5894 + (C61986 - C61987) * C5813 +
             (C61001 - C61002) * C5895 + (C61003 - C61004) * C5814 +
             (C86284 - C86285) * C5896 + (C86286 - C86287) * C5815) *
                C139899) *
               C139809 * C2322 +
           (((C55526 - C55525) * C5894 + (C55528 - C55527) * C5813 +
             (C55530 - C55529) * C5895 + (C55532 - C55531) * C5814 +
             (C55534 - C55533) * C5896 + (C55536 - C55535) * C5815) *
                C92797 +
            ((C61002 - C61001) * C5894 + (C61004 - C61003) * C5813 +
             (C86285 - C86284) * C5895 + (C86287 - C86286) * C5814 +
             (C139731 * C10398 - C54790 * C10395) * C5896 +
             (C139731 * C10743 - C54790 * C10741) * C5815) *
                C139899) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47131 * C114 - C47136 * C108 + C47132 * C116 - C47138 * C109 +
              C47133 * C118 - C47140 * C110) *
                 C182 +
             (C47131 * C354 - C47136 * C348 + C47132 * C355 - C47138 * C349 +
              C47133 * C356 - C47140 * C350) *
                 C139824) *
                C92797 +
            ((C94879 - C94880 + C94881 - C94882 + C94883 - C94884) * C182 +
             (C94885 - C94886 + C94887 - C94888 + C94889 - C94890) * C139824) *
                C139899) *
               C139809 * C2322 +
           (((C48295 - C48294 + C48297 - C48296 + C48299 - C48298) * C182 +
             (C48301 - C48300 + C48303 - C48302 + C48305 - C48304) * C139824) *
                C92797 +
            ((C51798 - C51799 + C51800 - C51801 + C51802 - C51803) * C182 +
             (C51804 - C51805 + C51806 - C51807 + C51808 - C51809) * C139824) *
                C139899) *
               C139809 * C140000) *
              C2324 +
          ((((C47136 * C109 - C47131 * C116 + C47138 * C110 - C47132 * C118 +
              C47140 * C111 - C47133 * C120) *
                 C182 +
             (C47136 * C349 - C47131 * C355 + C47138 * C350 - C47132 * C356 +
              C47140 * C351 - C47133 * C357) *
                 C139824) *
                C92797 +
            ((C94891 - C94892 + C94893 - C94894 + C94895 - C94896) * C182 +
             (C94897 - C94898 + C94899 - C94900 + C94901 - C94902) * C139824) *
                C139899) *
               C139809 * C2322 +
           (((C48307 - C48306 + C48309 - C48308 + C48311 - C48310) * C182 +
             (C48313 - C48312 + C48315 - C48314 + C48317 - C48316) * C139824) *
                C92797 +
            ((C47131 * C3444 - C47136 * C3439 + C47132 * C3446 -
              C47138 * C3440 + C47133 * C3448 - C47140 * C3441) *
                 C182 +
             (C47131 * C3673 - C47136 * C3669 + C47132 * C3674 -
              C47138 * C3670 + C47133 * C3675 - C47140 * C3671) *
                 C139824) *
                C139899) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C139731 * C114 - C54790 * C108) * C182 +
             (C139731 * C354 - C54790 * C348) * C139824) *
                C107999 +
            ((C61976 - C61977) * C182 + (C61978 - C61979) * C139824) * C108000 +
            (C67258 * C182 + C67259 * C139824) * C108001 +
            ((C67263 - C67262) * C182 + (C67265 - C67264) * C139824) *
                C108002) *
               C139809 * C2322 +
           (((C55514 - C55513) * C182 + (C55516 - C55515) * C139824) * C107999 +
            (C64591 * C182 + C64592 * C139824) * C108000 +
            (C64593 * C182 + C64594 * C139824) * C108001 +
            ((C64595 - C64596) * C182 + (C64597 - C64598) * C139824) *
                C108002) *
               C139809 * C140000) *
              C2324 +
          ((((C54790 * C109 - C139731 * C116) * C182 +
             (C54790 * C349 - C139731 * C355) * C139824) *
                C107999 +
            ((C61984 - C61985) * C182 + (C61986 - C61987) * C139824) * C108000 +
            ((C61988 - C61989) * C182 + (C61990 - C61991) * C139824) * C108001 +
            ((C109277 - C109278) * C182 + (C109279 - C109280) * C139824) *
                C108002) *
               C139809 * C2322 +
           (((C55526 - C55525) * C182 + (C55528 - C55527) * C139824) * C107999 +
            ((C61002 - C61001) * C182 + (C61004 - C61003) * C139824) * C108000 +
            ((C61006 - C61005) * C182 + (C61008 - C61007) * C139824) * C108001 +
            ((C139731 * C18306 - C54790 * C18303) * C182 +
             (C139731 * C18637 - C54790 * C18635) * C139824) *
                C108002) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[111] +=
        (-std::pow(Pi, 2.5) *
         ((((C5894 * C183 - C6151 * C108 - C5894 * C348 + C5813 * C411 +
             C5895 * C896 - C6152 * C813 - C5895 * C1072 + C5814 * C1151 +
             C5896 * C2974 - C6153 * C2908 - C5896 * C3090 + C5815 * C3148) *
                C139731 * C92797 +
            (C102506 + C102507 + C102508) * C139731 * C139899) *
               C139809 * C2322 -
           ((C5896 * C10528 - C6153 * C10394 - C5896 * C10740 + C5815 * C10858 +
             C5895 * C7863 - C6152 * C7754 - C5895 * C8091 + C5814 * C8196 +
             C5894 * C3520 - C6151 * C3438 - C5894 * C3668 + C5813 * C3742) *
                C139731 * C139899 +
            (C5896 * C6792 - C6153 * C6627 - C5896 * C7032 + C5815 * C7169 +
             C5895 * C2974 - C6152 * C2908 - C5895 * C3090 + C5814 * C3148 +
             C5894 * C896 - C6151 * C813 - C5894 * C1072 + C5813 * C1151) *
                C139731 * C92797) *
               C139809 * C140000) *
              C2324 +
          (((C7192 + C7191 + C7190) * C139731 * C92797 +
            (C5894 * C3521 - C6151 * C3439 - C5894 * C3669 + C5813 * C3743 +
             C5895 * C7864 - C6152 * C7753 - C5895 * C8092 + C5814 * C8195 +
             C5896 * C10529 - C6153 * C10395 - C5896 * C10741 +
             C5815 * C10859) *
                C139731 * C139899) *
               C139809 * C140000 -
           ((C8217 + C8218 + C8219) * C139731 * C139899 +
            (C6193 + C6192 + C6191) * C139731 * C92797) *
               C139809 * C2322) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C182 * C183 - C410 * C108 - C182 * C348 + C139824 * C411) *
                 C47131 +
             C442 * C47132 + C443 * C47133) *
                C92797 +
            (C95001 + C95002 + C95003) * C139899) *
               C139809 * C2322 -
           ((C30689 * C47133 + C15096 * C47132 + C18761 * C47131) * C139899 +
            (C1173 * C47133 + C1174 * C47132 +
             (C182 * C896 - C410 * C813 - C182 * C1072 + C139824 * C1151) *
                 C47131) *
                C92797) *
               C139809 * C140000) *
              C2324 +
          (((C1174 * C47131 + C1173 * C47132 + C1172 * C47133) * C92797 +
            (C15096 * C47131 + C30689 * C47132 +
             (C182 * C3523 - C410 * C3441 - C182 * C3671 + C139824 * C3745) *
                 C47133) *
                C139899) *
               C139809 * C140000 -
           ((C95006 + C95005 + C95004) * C139899 +
            (C444 * C47133 + C443 * C47132 + C442 * C47131) * C92797) *
               C139809 * C2322) *
              C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C182 * C183 - C410 * C108 - C182 * C348 + C139824 * C411) *
                C139731 * C107999 +
            C109347 * C108000 + C109348 * C108001 + C109349 * C108002) *
               C139809 * C2322 -
           ((C182 * C18422 - C410 * C18302 - C182 * C18634 + C139824 * C18744) *
                C139731 * C108002 +
            C18762 * C139731 * C108001 + C18761 * C139731 * C108000 +
            (C182 * C896 - C410 * C813 - C182 * C1072 + C139824 * C1151) *
                C139731 * C107999) *
               C139809 * C140000) *
              C2324 +
          ((C1174 * C139731 * C107999 + C15096 * C139731 * C108000 +
            C15095 * C139731 * C108001 +
            (C182 * C18423 - C410 * C18303 - C182 * C18635 + C139824 * C18745) *
                C139731 * C108002) *
               C139809 * C140000 -
           (C109352 * C108002 + C109351 * C108001 + C109350 * C108000 +
            C442 * C139731 * C107999) *
               C139809 * C2322) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[111] +=
        (-std::pow(Pi, 2.5) *
         ((((C92797 * C266 - C92947 * C108 + C139899 * C1741 - C92948 * C1570) *
                C5894 +
            (C92797 * C495 - C92947 * C348 + C139899 * C1997 - C92948 * C1829) *
                C5813 +
            (C101320 - C101321 + C101322 - C101323) * C5895 +
            (C101638 - C101639 + C101640 - C101641) * C5814 +
            (C101328 - C101329 + C101330 - C101331) * C5896 +
            (C101642 - C101643 + C101644 - C101645) * C5815) *
               C139731 * C139809 * C2322 +
           ((C101321 - C101320 + C101323 - C101322) * C5894 +
            (C101639 - C101638 + C101641 - C101640) * C5813 +
            (C101329 - C101328 + C101331 - C101330) * C5895 +
            (C101643 - C101642 + C101645 - C101644) * C5814 +
            (C92947 * C6627 - C92797 * C6908 + C92948 * C10394 -
             C139899 * C10630) *
                C5896 +
            (C92947 * C7032 - C92797 * C7290 + C92948 * C10740 -
             C139899 * C10958) *
                C5815) *
               C139731 * C139809 * C140000) *
              C2324 +
          (((C92951 - C92950 + C92953 - C92952) * C5894 +
            (C93203 - C93202 + C93205 - C93204) * C5813 +
            (C93789 - C93790 + C93791 - C93792) * C5895 +
            (C94099 - C94100 + C94101 - C94102) * C5814 +
            (C101336 - C101337 + C101338 - C101339) * C5896 +
            (C101646 - C101647 + C101648 - C101649) * C5815) *
               C139731 * C139809 * C2322 +
           ((C93790 - C93789 + C93792 - C93791) * C5894 +
            (C94100 - C94099 + C94102 - C94101) * C5813 +
            (C101337 - C101336 + C101339 - C101338) * C5895 +
            (C101647 - C101646 + C101649 - C101648) * C5814 +
            (C92797 * C6909 - C92947 * C6626 + C139899 * C10631 -
             C92948 * C10395) *
                C5896 +
            (C92797 * C7291 - C92947 * C7033 + C139899 * C10959 -
             C92948 * C10741) *
                C5815) *
               C139731 * C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C92797 * C266 - C92947 * C108 + C139899 * C1741 -
              C92948 * C1570) *
                 C182 +
             (C92797 * C495 - C92947 * C348 + C139899 * C1997 -
              C92948 * C1829) *
                 C139824) *
                C47131 +
            ((C92950 - C92951 + C92952 - C92953) * C182 +
             (C93202 - C93203 + C93204 - C93205) * C139824) *
                C47132 +
            C93219 * C47133) *
               C139809 * C2322 +
           (((C92947 * C813 - C92797 * C984 + C92948 * C3438 -
              C139899 * C3594) *
                 C182 +
             (C92947 * C1072 - C92797 * C1240 + C92948 * C3668 -
              C139899 * C3812) *
                 C139824) *
                C47131 +
            ((C93789 - C93790 + C93791 - C93792) * C182 +
             (C94099 - C94100 + C94101 - C94102) * C139824) *
                C47132 +
            ((C93797 - C93798 + C93799 - C93800) * C182 +
             (C94103 - C94104 + C94105 - C94106) * C139824) *
                C47133) *
               C139809 * C140000) *
              C2324 +
          ((((C92951 - C92950 + C92953 - C92952) * C182 +
             (C93203 - C93202 + C93205 - C93204) * C139824) *
                C47131 +
            ((C92959 - C92958 + C92961 - C92960) * C182 +
             (C93208 - C93207 + C93210 - C93209) * C139824) *
                C47132 +
            ((C92966 - C92967 + C92968 - C92969) * C182 +
             (C93211 - C93212 + C93213 - C93214) * C139824) *
                C47133) *
               C139809 * C2322 +
           (((C93790 - C93789 + C93792 - C93791) * C182 +
             (C94100 - C94099 + C94102 - C94101) * C139824) *
                C47131 +
            ((C93798 - C93797 + C93800 - C93799) * C182 +
             (C94104 - C94103 + C94106 - C94105) * C139824) *
                C47132 +
            ((C92797 * C987 - C92947 * C810 + C139899 * C3597 -
              C92948 * C3441) *
                 C182 +
             (C92797 * C1243 - C92947 * C1075 + C139899 * C3815 -
              C92948 * C3671) *
                 C139824) *
                C47133) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C107999 * C266 - C108103 * C108 + C108000 * C1741 -
             C108104 * C1570 + C108001 * C5397 - C108105 * C5273 +
             C108002 * C15912 - C108106 * C15623) *
                C182 +
            (C107999 * C495 - C108103 * C348 + C108000 * C1997 -
             C108104 * C1829 + C108001 * C5567 - C108105 * C5455 +
             C108002 * C16294 - C108106 * C16028) *
                C139824) *
               C139731 * C139809 * C2322 +
           ((C108103 * C813 - C107999 * C984 + C108104 * C3438 -
             C108000 * C3594 + C108105 * C13126 - C108001 * C13298 +
             C108106 * C18302 - C108002 * C18532) *
                C182 +
            (C108103 * C1072 - C107999 * C1240 + C108104 * C3668 -
             C108000 * C3812 + C108105 * C13380 - C108001 * C13540 +
             C108106 * C18634 - C108002 * C18862) *
                C139824) *
               C139731 * C139809 * C140000) *
              C2324 +
          (((C108103 * C109 - C107999 * C267 + C108104 * C1569 -
             C108000 * C1742 + C108105 * C5274 - C108001 * C5398 +
             C108106 * C15622 - C108002 * C15913) *
                C182 +
            (C108103 * C349 - C107999 * C496 + C108104 * C1830 -
             C108000 * C1998 + C108105 * C5456 - C108001 * C5568 +
             C108106 * C16029 - C108002 * C16295) *
                C139824) *
               C139731 * C139809 * C2322 +
           ((C107999 * C985 - C108103 * C812 + C108000 * C3595 -
             C108104 * C3439 + C108001 * C13299 - C108105 * C13127 +
             C108002 * C18533 - C108106 * C18303) *
                C182 +
            (C107999 * C1241 - C108103 * C1073 + C108000 * C3813 -
             C108104 * C3669 + C108001 * C13542 - C108105 * C13381 +
             C108002 * C18863 - C108106 * C18635) *
                C139824) *
               C139731 * C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eezx[111] +=
        (-std::pow(Pi, 2.5) *
         (((((C139731 * C114 - C54790 * C108) * C92947 +
             (C139731 * C573 - C54790 * C567) * C92797 +
             (C61976 - C61977) * C92948 + (C62328 - C62329) * C139899) *
                C5813 +
            ((C55513 - C55514) * C92947 + (C55735 - C55736) * C92797 +
             C64587 * C92948 + C64931 * C139899) *
                C5814 +
            (C57297 * C92947 + C57463 * C92797 + C88899 * C92948 +
             C89133 * C139899) *
                C5815) *
               C139809 * C2322 +
           (((C55514 - C55513) * C92947 + (C55736 - C55735) * C92797 +
             C64591 * C92948 + C64933 * C139899) *
                C5813 +
            ((C55518 - C55517) * C92947 + (C55738 - C55737) * C92797 +
             C89717 * C92948 + C90038 * C139899) *
                C5814 +
            ((C55522 - C55521) * C92947 + (C55740 - C55739) * C92797 +
             (C57891 - C57892) * C92948 + (C58103 - C58104) * C139899) *
                C5815) *
               C139809 * C140000) *
              C2324 +
          ((((C54790 * C109 - C139731 * C116) * C92947 +
             (C54790 * C568 - C139731 * C574) * C92797 +
             (C61984 - C61985) * C92948 + (C62332 - C62333) * C139899) *
                C5813 +
            ((C55525 - C55526) * C92947 + (C55741 - C55742) * C92797 +
             (C61001 - C61002) * C92948 + (C61311 - C61312) * C139899) *
                C5814 +
            ((C55529 - C55530) * C92947 + (C55743 - C55744) * C92797 +
             (C86284 - C86285) * C92948 + (C86582 - C86583) * C139899) *
                C5815) *
               C139809 * C2322 +
           (((C55526 - C55525) * C92947 + (C55742 - C55741) * C92797 +
             (C61002 - C61001) * C92948 + (C61312 - C61311) * C139899) *
                C5813 +
            ((C55530 - C55529) * C92947 + (C55744 - C55743) * C92797 +
             (C86285 - C86284) * C92948 + (C86583 - C86582) * C139899) *
                C5814 +
            ((C55534 - C55533) * C92947 + (C55746 - C55745) * C92797 +
             (C139731 * C10398 - C54790 * C10395) * C92948 +
             (C139731 * C11065 - C54790 * C11063) * C139899) *
                C5815) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47131 * C114 - C47136 * C108 + C47132 * C116 - C47138 * C109 +
             C47133 * C118 - C47140 * C110) *
                C92947 +
            (C47131 * C573 - C47136 * C567 + C47132 * C574 - C47138 * C568 +
             C47133 * C575 - C47140 * C569) *
                C92797 +
            (C94879 - C94880 + C94881 - C94882 + C94883 - C94884) * C92948 +
            (C95211 - C95212 + C95213 - C95214 + C95215 - C95216) * C139899) *
               C139824 * C139809 * C2322 +
           ((C48295 - C48294 + C48297 - C48296 + C48299 - C48298) * C92947 +
            (C48641 - C48640 + C48643 - C48642 + C48645 - C48644) * C92797 +
            (C51798 - C51799 + C51800 - C51801 + C51802 - C51803) * C92948 +
            (C52104 - C52105 + C52106 - C52107 + C52108 - C52109) * C139899) *
               C139824 * C139809 * C140000) *
              C2324 +
          (((C47136 * C109 - C47131 * C116 + C47138 * C110 - C47132 * C118 +
             C47140 * C111 - C47133 * C120) *
                C92947 +
            (C47136 * C568 - C47131 * C574 + C47138 * C569 - C47132 * C575 +
             C47140 * C570 - C47133 * C576) *
                C92797 +
            (C94891 - C94892 + C94893 - C94894 + C94895 - C94896) * C92948 +
            (C95217 - C95218 + C95219 - C95220 + C95221 - C95222) * C139899) *
               C139824 * C139809 * C2322 +
           ((C48307 - C48306 + C48309 - C48308 + C48311 - C48310) * C92947 +
            (C48647 - C48646 + C48649 - C48648 + C48651 - C48650) * C92797 +
            (C47131 * C3444 - C47136 * C3439 + C47132 * C3446 - C47138 * C3440 +
             C47133 * C3448 - C47140 * C3441) *
                C92948 +
            (C47131 * C3887 - C47136 * C3883 + C47132 * C3888 - C47138 * C3884 +
             C47133 * C3889 - C47140 * C3885) *
                C139899) *
               C139824 * C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C139731 * C114 - C54790 * C108) * C108103 +
            (C139731 * C573 - C54790 * C567) * C107999 +
            (C61976 - C61977) * C108104 + (C62328 - C62329) * C108000 +
            C67258 * C108105 + C67513 * C108001 + (C67263 - C67262) * C108106 +
            (C67515 - C67514) * C108002) *
               C139824 * C139809 * C2322 +
           ((C55514 - C55513) * C108103 + (C55736 - C55735) * C107999 +
            C64591 * C108104 + C64933 * C108000 + C64593 * C108105 +
            C64934 * C108001 + (C64595 - C64596) * C108106 +
            (C64935 - C64936) * C108002) *
               C139824 * C139809 * C140000) *
              C2324 +
          (((C54790 * C109 - C139731 * C116) * C108103 +
            (C54790 * C568 - C139731 * C574) * C107999 +
            (C61984 - C61985) * C108104 + (C62332 - C62333) * C108000 +
            (C61988 - C61989) * C108105 + (C62334 - C62335) * C108001 +
            (C109277 - C109278) * C108106 + (C109485 - C109486) * C108002) *
               C139824 * C139809 * C2322 +
           ((C55526 - C55525) * C108103 + (C55742 - C55741) * C107999 +
            (C61002 - C61001) * C108104 + (C61312 - C61311) * C108000 +
            (C61006 - C61005) * C108105 + (C61314 - C61313) * C108001 +
            (C139731 * C18306 - C54790 * C18303) * C108106 +
            (C139731 * C18965 - C54790 * C18963) * C108002) *
               C139824 * C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eezy[111] +=
        (-std::pow(Pi, 2.5) *
         ((((C5813 * C183 - C5894 * C108 + C5814 * C896 - C5895 * C813 +
             C5815 * C2974 - C5896 * C2908) *
                C92947 +
            (C5813 * C629 - C5894 * C567 + C5814 * C1393 - C5895 * C1317 +
             C5815 * C3314 - C5896 * C3256) *
                C92797 +
            (C102182 - C102183 + C102184 - C102185 + C102186 - C102187) *
                C92948 +
            (C102803 - C102804 + C102805 - C102806 + C102807 - C102808) *
                C139899) *
               C139731 * C139809 * C2322 +
           ((C5894 * C813 - C5813 * C896 + C5895 * C2908 - C5814 * C2974 +
             C5896 * C6627 - C5815 * C6792) *
                C92947 +
            (C5894 * C1317 - C5813 * C1393 + C5895 * C3256 - C5814 * C3314 +
             C5896 * C7401 - C5815 * C7521) *
                C92797 +
            (C5894 * C3438 - C5813 * C3520 + C5895 * C7754 - C5814 * C7863 +
             C5896 * C10394 - C5815 * C10528) *
                C92948 +
            (C5894 * C3882 - C5813 * C3956 + C5895 * C8422 - C5814 * C8526 +
             C5896 * C11062 - C5815 * C11172) *
                C139899) *
               C139731 * C139809 * C140000) *
              C2324 +
          (((C5899 - C5898 + C5901 - C5900 + C5903 - C5902) * C92947 +
            (C6424 - C6423 + C6426 - C6425 + C6428 - C6427) * C92797 +
            (C7870 - C7871 + C7872 - C7873 + C7874 - C7875) * C92948 +
            (C8530 - C8531 + C8532 - C8533 + C8534 - C8535) * C139899) *
               C139731 * C139809 * C2322 +
           ((C6800 - C6799 + C6802 - C6801 + C6804 - C6803) * C92947 +
            (C7526 - C7525 + C7528 - C7527 + C7530 - C7529) * C92797 +
            (C5813 * C3521 - C5894 * C3439 + C5814 * C7864 - C5895 * C7753 +
             C5815 * C10529 - C5896 * C10395) *
                C92948 +
            (C5813 * C3957 - C5894 * C3883 + C5814 * C8527 - C5895 * C8423 +
             C5815 * C11173 - C5896 * C11063) *
                C139899) *
               C139731 * C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C139824 * C183 - C182 * C108) * C92947 +
             (C139824 * C629 - C182 * C567) * C92797 +
             (C15795 - C15796) * C92948 + (C16525 - C16526) * C139899) *
                C47131 +
            ((C196 - C197) * C92947 + (C636 - C637) * C92797 + C15799 * C92948 +
             C16529 * C139899) *
                C47132 +
            C93374 * C47133) *
               C139809 * C2322 +
           (((C182 * C813 - C139824 * C896) * C92947 +
             (C182 * C1317 - C139824 * C1393) * C92797 +
             (C18427 - C18428) * C92948 + (C19071 - C19072) * C139899) *
                C47131 +
            ((C907 - C908) * C92947 + (C1399 - C1400) * C92797 +
             (C14764 - C14765) * C92948 + (C15401 - C15402) * C139899) *
                C47132 +
            ((C911 - C912) * C92947 + (C1401 - C1402) * C92797 +
             (C30369 - C30370) * C92948 + (C30992 - C30993) * C139899) *
                C47133) *
               C139809 * C140000) *
              C2324 +
          ((((C197 - C196) * C92947 + (C637 - C636) * C92797 + C15807 * C92948 +
             C16531 * C139899) *
                C47131 +
            ((C201 - C200) * C92947 + (C640 - C639) * C92797 + C31358 * C92948 +
             C32014 * C139899) *
                C47132 +
            ((C205 - C204) * C92947 + (C643 - C642) * C92797 +
             (C1672 - C1673) * C92948 + (C2160 - C2161) * C139899) *
                C47133) *
               C139809 * C2322 +
           (((C908 - C907) * C92947 + (C1400 - C1399) * C92797 +
             (C14765 - C14764) * C92948 + (C15402 - C15401) * C139899) *
                C47131 +
            ((C912 - C911) * C92947 + (C1402 - C1401) * C92797 +
             (C30370 - C30369) * C92948 + (C30993 - C30992) * C139899) *
                C47132 +
            ((C916 - C915) * C92947 + (C1404 - C1403) * C92797 +
             (C139824 * C3523 - C182 * C3441) * C92948 +
             (C139824 * C3959 - C182 * C3885) * C139899) *
                C47133) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C139824 * C183 - C182 * C108) * C108103 +
            (C139824 * C629 - C182 * C567) * C107999 +
            (C15795 - C15796) * C108104 + (C16525 - C16526) * C108000 +
            C21114 * C108105 + C21623 * C108001 + (C21119 - C21118) * C108106 +
            (C21625 - C21624) * C108002) *
               C139731 * C139809 * C2322 +
           ((C182 * C813 - C139824 * C896) * C108103 +
            (C182 * C1317 - C139824 * C1393) * C107999 +
            (C18427 - C18428) * C108104 + (C19071 - C19072) * C108000 +
            (C18431 - C18432) * C108105 + (C19073 - C19074) * C108001 +
            (C182 * C18302 - C139824 * C18422) * C108106 +
            (C182 * C18962 - C139824 * C19068) * C108002) *
               C139731 * C139809 * C140000) *
              C2324 +
          (((C197 - C196) * C108103 + (C637 - C636) * C107999 +
            C15807 * C108104 + C16531 * C108000 + C15809 * C108105 +
            C16532 * C108001 + (C15811 - C15812) * C108106 +
            (C16533 - C16534) * C108002) *
               C139731 * C139809 * C2322 +
           ((C908 - C907) * C108103 + (C1400 - C1399) * C107999 +
            (C14765 - C14764) * C108104 + (C15402 - C15401) * C108000 +
            (C14769 - C14768) * C108105 + (C15404 - C15403) * C108001 +
            (C139824 * C18423 - C182 * C18303) * C108106 +
            (C139824 * C19069 - C182 * C18963) * C108002) *
               C139731 * C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eezz[111] +=
        (-std::pow(Pi, 2.5) *
         ((((C92947 * C266 - C93448 * C108 - C92947 * C567 + C92797 * C702 +
             C92948 * C1741 - C93449 * C1570 - C92948 * C2074 +
             C139899 * C2230) *
                C5813 +
            (C101980 + C101981) * C5814 + (C101982 + C101983) * C5815) *
               C139731 * C139809 * C2322 -
           ((C92948 * C10630 - C93449 * C10394 - C92948 * C11062 +
             C139899 * C11272 + C92947 * C6908 - C93448 * C6627 -
             C92947 * C7401 + C92797 * C7629) *
                C5815 +
            (C101983 + C101982) * C5814 + (C101981 + C101980) * C5813) *
               C139731 * C139809 * C140000) *
              C2324 +
          (((C94428 + C94427) * C5813 + (C101984 + C101985) * C5814 +
            (C92947 * C6909 - C93448 * C6626 - C92947 * C7402 + C92797 * C7628 +
             C92948 * C10631 - C93449 * C10395 - C92948 * C11063 +
             C139899 * C11273) *
                C5815) *
               C139731 * C139809 * C140000 -
           ((C101985 + C101984) * C5815 + (C94427 + C94428) * C5814 +
            (C93488 + C93487) * C5813) *
               C139731 * C139809 * C2322) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C92947 * C266 - C93448 * C108 - C92947 * C567 + C92797 * C702 +
             C92948 * C1741 - C93449 * C1570 - C92948 * C2074 +
             C139899 * C2230) *
                C139824 * C47131 +
            (C93487 + C93488) * C139824 * C47132 + C93494 * C47133) *
               C139809 * C2322 -
           ((C94425 + C94426) * C139824 * C47133 +
            (C94427 + C94428) * C139824 * C47132 +
            (C92948 * C3594 - C93449 * C3438 - C92948 * C3882 +
             C139899 * C4026 + C92947 * C984 - C93448 * C813 - C92947 * C1317 +
             C92797 * C1473) *
                C139824 * C47131) *
               C139809 * C140000) *
              C2324 +
          (((C94428 + C94427) * C139824 * C47131 +
            (C94426 + C94425) * C139824 * C47132 +
            (C92947 * C987 - C93448 * C810 - C92947 * C1320 + C92797 * C1470 +
             C92948 * C3597 - C93449 * C3441 - C92948 * C3885 +
             C139899 * C4029) *
                C139824 * C47133) *
               C139809 * C140000 -
           ((C93491 + C93492) * C139824 * C47133 +
            (C93490 + C93489) * C139824 * C47132 +
            (C93488 + C93487) * C139824 * C47131) *
               C139809 * C2322) *
              C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C108103 * C266 - C108407 * C108 - C108103 * C567 + C107999 * C702 +
            C108104 * C1741 - C108408 * C1570 - C108104 * C2074 +
            C108000 * C2230 + C108105 * C5397 - C108409 * C5273 -
            C108105 * C5621 + C108001 * C5733 + C108106 * C15912 -
            C108410 * C15623 - C108106 * C16401 + C108002 * C16633) *
               C139824 * C139731 * C139809 * C2322 -
           (C108106 * C18532 - C108410 * C18302 - C108106 * C18962 +
            C108002 * C19172 + C108105 * C13298 - C108409 * C13126 -
            C108105 * C13618 + C108001 * C13778 + C108104 * C3594 -
            C108408 * C3438 - C108104 * C3882 + C108000 * C4026 +
            C108103 * C984 - C108407 * C813 - C108103 * C1317 +
            C107999 * C1473) *
               C139824 * C139731 * C139809 * C140000) *
              C2324 +
          ((C108103 * C985 - C108407 * C812 - C108103 * C1318 +
            C107999 * C1472 + C108104 * C3595 - C108408 * C3439 -
            C108104 * C3883 + C108000 * C4027 + C108105 * C13299 -
            C108409 * C13127 - C108105 * C13619 + C108001 * C13780 +
            C108106 * C18533 - C108410 * C18303 - C108106 * C18963 +
            C108002 * C19173) *
               C139824 * C139731 * C139809 * C140000 -
           (C108106 * C15913 - C108410 * C15622 - C108106 * C16402 +
            C108002 * C16632 + C108105 * C5398 - C108409 * C5274 -
            C108105 * C5622 + C108001 * C5734 + C108104 * C1742 -
            C108408 * C1569 - C108104 * C2075 + C108000 * C2229 +
            C108103 * C267 - C108407 * C109 - C108103 * C568 + C107999 * C703) *
               C139824 * C139731 * C139809 * C2322) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eexx[112] +=
        (-std::pow(Pi, 2.5) *
         ((((C54790 * C114 - C54791 * C108 - C54790 * C115 + C139731 * C126) *
                C92797 +
            C61654 * C139899) *
               C5813 +
           (C101116 + C101117) * C5814 + C103863 * C5815) *
              C139809 * C2904 -
          ((C103864 + C103865) * C5815 + (C101119 + C101118) * C5814 +
           (C101117 + C101116) * C5813) *
              C139809 * C2905 +
          (C103863 * C5813 + (C103865 + C103864) * C5814 +
           (C57127 * C92797 + (C54790 * C57647 - C54791 * C57646 -
                               C54790 * C57648 + C139731 * C57649) *
                                  C139899) *
               C5815) *
              C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C47136 * C114 - C47137 * C108 - C47136 * C115 + C47131 * C126 +
            C47138 * C116 - C47139 * C109 - C47138 * C117 + C47132 * C127 +
            C47140 * C118 - C47141 * C110 - C47140 * C119 + C47133 * C128) *
               C92797 +
           (C94563 + C94564 + C94565) * C139899) *
              C139824 * C139809 * C2904 -
          ((C51501 + C51502 + C51503) * C139899 +
           (C47980 + C47979 + C47978) * C92797) *
              C139824 * C139809 * C2905 +
          ((C50774 + C50773 + C50772) * C92797 +
           (C47136 * C7758 - C47137 * C7754 - C47136 * C7759 + C47131 * C7763 +
            C47138 * C7756 - C47139 * C7753 - C47138 * C7757 + C47132 * C7762 +
            C47140 * C7760 - C47141 * C7755 - C47140 * C7761 + C47133 * C7764) *
               C139899) *
              C139824 * C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C54790 * C114 - C54791 * C108 - C54790 * C115 + C139731 * C126) *
               C107999 +
           C61654 * C108000 + C61655 * C108001 + C67012 * C108002) *
              C139824 * C139809 * C2904 -
          (C64257 * C108002 + C60685 * C108001 + C57671 * C108000 +
           C55303 * C107999) *
              C139824 * C139809 * C2905 +
          (C55304 * C107999 + C57670 * C108000 + C63508 * C108001 +
           (C54790 * C64245 - C54791 * C64244 - C54790 * C64246 +
            C139731 * C64247) *
               C108002) *
              C139824 * C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eexy[112] +=
        (-std::pow(Pi, 2.5) *
         ((((C5813 * C183 - C5894 * C108 + C5814 * C896 - C5895 * C813 +
             C5815 * C2974 - C5896 * C2908) *
                C54790 +
            (C5813 * C189 - C5894 * C115 + C5814 * C901 - C5895 * C822 +
             C5815 * C2978 - C5896 * C2913) *
                C139731) *
               C92797 +
           ((C102182 - C102183 + C102184 - C102185 + C102186 - C102187) *
                C54790 +
            (C102188 - C102189 + C102190 - C102191 + C102192 - C102193) *
                C139731) *
               C139899) *
              C139809 * C2904 +
          (((C5894 * C813 - C5813 * C896 + C5895 * C2908 - C5814 * C2974 +
             C5896 * C6627 - C5815 * C6792) *
                C54790 +
            (C5894 * C822 - C5813 * C901 + C5895 * C2913 - C5814 * C2978 +
             C5896 * C6632 - C5815 * C6795) *
                C139731) *
               C92797 +
           ((C5894 * C3438 - C5813 * C3520 + C5895 * C7754 - C5814 * C7863 +
             C5896 * C10394 - C5815 * C10528) *
                C54790 +
            (C5894 * C3443 - C5813 * C3524 + C5895 * C7759 - C5814 * C7866 +
             C5896 * C10397 - C5815 * C10530) *
                C139731) *
               C139899) *
              C139809 * C2905 +
          (((C5813 * C2974 - C5894 * C2908 + C5814 * C6792 - C5895 * C6627 +
             C5815 * C9707 - C5896 * C9609) *
                C54790 +
            (C5813 * C2978 - C5894 * C2913 + C5814 * C6795 - C5895 * C6632 +
             C5815 * C9709 - C5896 * C9612) *
                C139731) *
               C92797 +
           ((C5813 * C7863 - C5894 * C7754 + C5814 * C10528 - C5895 * C10394 +
             C5815 * C57740 - C5896 * C57646) *
                C54790 +
            (C5813 * C7866 - C5894 * C7759 + C5814 * C10530 - C5895 * C10397 +
             C5815 * C57741 - C5896 * C57648) *
                C139731) *
               C139899) *
              C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C139824 * C183 - C182 * C108) * C47136 +
            (C139824 * C189 - C182 * C115) * C47131 + (C196 - C197) * C47138 +
            (C198 - C199) * C47132 + C212 * C47140 + C213 * C47133) *
               C92797 +
           ((C15795 - C15796) * C47136 + (C15797 - C15798) * C47131 +
            C15799 * C47138 + C15800 * C47132 + C29549 * C47140 +
            C29550 * C47133) *
               C139899) *
              C139809 * C2904 +
          (((C182 * C813 - C139824 * C896) * C47136 +
            (C182 * C822 - C139824 * C901) * C47131 + (C907 - C908) * C47138 +
            (C909 - C910) * C47132 + (C911 - C912) * C47140 +
            (C913 - C914) * C47133) *
               C92797 +
           ((C18427 - C18428) * C47136 + (C18429 - C18430) * C47131 +
            (C14764 - C14765) * C47138 + (C14766 - C14767) * C47132 +
            (C30369 - C30370) * C47140 + (C30371 - C30372) * C47133) *
               C139899) *
              C139809 * C2905 +
          (((C139824 * C2974 - C182 * C2908) * C47136 +
            (C139824 * C2978 - C182 * C2913) * C47131 +
            (C139824 * C2975 - C182 * C2909) * C47138 +
            (C139824 * C2979 - C182 * C2915) * C47132 +
            (C139824 * C2976 - C182 * C2910) * C47140 +
            (C139824 * C2980 - C182 * C2917) * C47133) *
               C92797 +
           ((C139824 * C7863 - C182 * C7754) * C47136 +
            (C139824 * C7866 - C182 * C7759) * C47131 +
            (C139824 * C7864 - C182 * C7753) * C47138 +
            (C139824 * C7867 - C182 * C7757) * C47132 +
            (C139824 * C7865 - C182 * C7755) * C47140 +
            (C139824 * C7868 - C182 * C7761) * C47133) *
               C139899) *
              C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C139824 * C183 - C182 * C108) * C54790 +
            (C139824 * C189 - C182 * C115) * C139731) *
               C107999 +
           ((C15795 - C15796) * C54790 + (C15797 - C15798) * C139731) *
               C108000 +
           (C21114 * C54790 + C21115 * C139731) * C108001 +
           ((C21119 - C21118) * C54790 + (C21121 - C21120) * C139731) *
               C108002) *
              C139809 * C2904 +
          (((C182 * C813 - C139824 * C896) * C54790 +
            (C182 * C822 - C139824 * C901) * C139731) *
               C107999 +
           ((C18427 - C18428) * C54790 + (C18429 - C18430) * C139731) *
               C108000 +
           ((C18431 - C18432) * C54790 + (C18433 - C18434) * C139731) *
               C108001 +
           ((C182 * C18302 - C139824 * C18422) * C54790 +
            (C182 * C18305 - C139824 * C18424) * C139731) *
               C108002) *
              C139809 * C2905 +
          (((C139824 * C2974 - C182 * C2908) * C54790 +
            (C139824 * C2978 - C182 * C2913) * C139731) *
               C107999 +
           ((C139824 * C7863 - C182 * C7754) * C54790 +
            (C139824 * C7866 - C182 * C7759) * C139731) *
               C108000 +
           ((C139824 * C13217 - C182 * C13128) * C54790 +
            (C139824 * C13221 - C182 * C13135) * C139731) *
               C108001 +
           ((C139824 * C64356 - C182 * C64244) * C54790 +
            (C139824 * C64357 - C182 * C64246) * C139731) *
               C108002) *
              C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eexz[112] +=
        (-std::pow(Pi, 2.5) *
         ((((C92797 * C266 - C92947 * C108 + C139899 * C1741 - C92948 * C1570) *
                C54790 +
            (C92797 * C272 - C92947 * C115 + C139899 * C1746 - C92948 * C1579) *
                C139731) *
               C5813 +
           ((C101320 - C101321 + C101322 - C101323) * C54790 +
            (C101324 - C101325 + C101326 - C101327) * C139731) *
               C5814 +
           C104030 * C5815) *
              C139809 * C2904 +
          (((C101321 - C101320 + C101323 - C101322) * C54790 +
            (C101325 - C101324 + C101327 - C101326) * C139731) *
               C5813 +
           ((C101329 - C101328 + C101331 - C101330) * C54790 +
            (C101333 - C101332 + C101335 - C101334) * C139731) *
               C5814 +
           ((C104018 - C104019 + C104020 - C104021) * C54790 +
            (C104022 - C104023 + C104024 - C104025) * C139731) *
               C5815) *
              C139809 * C2905 +
          (C104030 * C5813 +
           ((C104019 - C104018 + C104021 - C104020) * C54790 +
            (C104023 - C104022 + C104025 - C104024) * C139731) *
               C5814 +
           ((C92797 * C9785 - C92947 * C9609 + C139899 * C57808 -
             C92948 * C57646) *
                C54790 +
            (C92797 * C9787 - C92947 * C9612 + C139899 * C57809 -
             C92948 * C57648) *
                C139731) *
               C5815) *
              C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C92797 * C266 - C92947 * C108 + C139899 * C1741 - C92948 * C1570) *
               C47136 +
           (C92797 * C272 - C92947 * C115 + C139899 * C1746 - C92948 * C1579) *
               C47131 +
           (C92950 - C92951 + C92952 - C92953) * C47138 +
           (C92954 - C92955 + C92956 - C92957) * C47132 + C92978 * C47140 +
           C92979 * C47133) *
              C139824 * C139809 * C2904 +
          ((C92947 * C813 - C92797 * C984 + C92948 * C3438 - C139899 * C3594) *
               C47136 +
           (C92947 * C822 - C92797 * C989 + C92948 * C3443 - C139899 * C3598) *
               C47131 +
           (C93789 - C93790 + C93791 - C93792) * C47138 +
           (C93793 - C93794 + C93795 - C93796) * C47132 +
           (C93797 - C93798 + C93799 - C93800) * C47140 +
           (C93801 - C93802 + C93803 - C93804) * C47133) *
              C139824 * C139809 * C2905 +
          ((C92797 * C3032 - C92947 * C2908 + C139899 * C7979 -
            C92948 * C7754) *
               C47136 +
           (C92797 * C3036 - C92947 * C2913 + C139899 * C7982 -
            C92948 * C7759) *
               C47131 +
           (C92797 * C3033 - C92947 * C2909 + C139899 * C7980 -
            C92948 * C7753) *
               C47138 +
           (C92797 * C3037 - C92947 * C2915 + C139899 * C7983 -
            C92948 * C7757) *
               C47132 +
           (C92797 * C3034 - C92947 * C2910 + C139899 * C7981 -
            C92948 * C7755) *
               C47140 +
           (C92797 * C3038 - C92947 * C2917 + C139899 * C7984 -
            C92948 * C7761) *
               C47133) *
              C139824 * C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C107999 * C266 - C108103 * C108 + C108000 * C1741 -
            C108104 * C1570 + C108001 * C5397 - C108105 * C5273 +
            C108002 * C15912 - C108106 * C15623) *
               C54790 +
           (C107999 * C272 - C108103 * C115 + C108000 * C1746 -
            C108104 * C1579 + C108001 * C5401 - C108105 * C5278 +
            C108002 * C15915 - C108106 * C15628) *
               C139731) *
              C139824 * C139809 * C2904 +
          ((C108103 * C813 - C107999 * C984 + C108104 * C3438 -
            C108000 * C3594 + C108105 * C13126 - C108001 * C13298 +
            C108106 * C18302 - C108002 * C18532) *
               C54790 +
           (C108103 * C822 - C107999 * C989 + C108104 * C3443 -
            C108000 * C3598 + C108105 * C13131 - C108001 * C13302 +
            C108106 * C18305 - C108002 * C18534) *
               C139731) *
              C139824 * C139809 * C2905 +
          ((C107999 * C3032 - C108103 * C2908 + C108000 * C7979 -
            C108104 * C7754 + C108001 * C13300 - C108105 * C13128 +
            C108002 * C64472 - C108106 * C64244) *
               C54790 +
           (C107999 * C3036 - C108103 * C2913 + C108000 * C7982 -
            C108104 * C7759 + C108001 * C13304 - C108105 * C13135 +
            C108002 * C64473 - C108106 * C64246) *
               C139731) *
              C139824 * C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eeyx[112] +=
        (-std::pow(Pi, 2.5) *
         ((((C139731 * C114 - C54790 * C108) * C5894 +
            (C139731 * C354 - C54790 * C348) * C5813 +
            (C55513 - C55514) * C5895 + (C55515 - C55516) * C5814 +
            C57297 * C5896 + C57298 * C5815) *
               C92797 +
           ((C61976 - C61977) * C5894 + (C61978 - C61979) * C5813 +
            C64587 * C5895 + C64588 * C5814 + C88899 * C5896 + C88900 * C5815) *
               C139899) *
              C139809 * C2904 +
          (((C55514 - C55513) * C5894 + (C55516 - C55515) * C5813 +
            (C55518 - C55517) * C5895 + (C55520 - C55519) * C5814 +
            (C55522 - C55521) * C5896 + (C55524 - C55523) * C5815) *
               C92797 +
           (C64591 * C5894 + C64592 * C5813 + C89717 * C5895 + C89718 * C5814 +
            (C57891 - C57892) * C5896 + (C57893 - C57894) * C5815) *
               C139899) *
              C139809 * C2905 +
          ((C57297 * C5894 + C57298 * C5813 + C57299 * C5895 + C57300 * C5814 +
            (C57302 - C57301) * C5896 + (C57304 - C57303) * C5815) *
               C92797 +
           (C88899 * C5894 + C88900 * C5813 + (C57892 - C57891) * C5895 +
            (C57894 - C57893) * C5814 +
            (C139731 * C57647 - C54790 * C57646) * C5896 +
            (C139731 * C57881 - C54790 * C57880) * C5815) *
               C139899) *
              C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47131 * C114 - C47136 * C108 + C47132 * C116 - C47138 * C109 +
             C47133 * C118 - C47140 * C110) *
                C182 +
            (C47131 * C354 - C47136 * C348 + C47132 * C355 - C47138 * C349 +
             C47133 * C356 - C47140 * C350) *
                C139824) *
               C92797 +
           ((C94879 - C94880 + C94881 - C94882 + C94883 - C94884) * C182 +
            (C94885 - C94886 + C94887 - C94888 + C94889 - C94890) * C139824) *
               C139899) *
              C139809 * C2904 +
          (((C48295 - C48294 + C48297 - C48296 + C48299 - C48298) * C182 +
            (C48301 - C48300 + C48303 - C48302 + C48305 - C48304) * C139824) *
               C92797 +
           ((C51798 - C51799 + C51800 - C51801 + C51802 - C51803) * C182 +
            (C51804 - C51805 + C51806 - C51807 + C51808 - C51809) * C139824) *
               C139899) *
              C139809 * C2905 +
          (((C50998 - C50997 + C51000 - C50999 + C51002 - C51001) * C182 +
            (C51004 - C51003 + C51006 - C51005 + C51008 - C51007) * C139824) *
               C92797 +
           ((C47131 * C7758 - C47136 * C7754 + C47132 * C7756 - C47138 * C7753 +
             C47133 * C7760 - C47140 * C7755) *
                C182 +
            (C47131 * C8094 - C47136 * C8091 + C47132 * C8095 - C47138 * C8092 +
             C47133 * C8096 - C47140 * C8093) *
                C139824) *
               C139899) *
              C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C139731 * C114 - C54790 * C108) * C182 +
            (C139731 * C354 - C54790 * C348) * C139824) *
               C107999 +
           ((C61976 - C61977) * C182 + (C61978 - C61979) * C139824) * C108000 +
           (C67258 * C182 + C67259 * C139824) * C108001 +
           ((C67263 - C67262) * C182 + (C67265 - C67264) * C139824) * C108002) *
              C139809 * C2904 +
          (((C55514 - C55513) * C182 + (C55516 - C55515) * C139824) * C107999 +
           (C64591 * C182 + C64592 * C139824) * C108000 +
           (C64593 * C182 + C64594 * C139824) * C108001 +
           ((C64595 - C64596) * C182 + (C64597 - C64598) * C139824) * C108002) *
              C139809 * C2905 +
          ((C57297 * C182 + C57298 * C139824) * C107999 +
           (C88899 * C182 + C88900 * C139824) * C108000 +
           ((C63745 - C63744) * C182 + (C63747 - C63746) * C139824) * C108001 +
           ((C139731 * C64245 - C54790 * C64244) * C182 +
            (C139731 * C64585 - C54790 * C64584) * C139824) *
               C108002) *
              C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eeyy[112] +=
        (-std::pow(Pi, 2.5) *
         (((C5894 * C183 - C6151 * C108 - C5894 * C348 + C5813 * C411 +
            C5895 * C896 - C6152 * C813 - C5895 * C1072 + C5814 * C1151 +
            C5896 * C2974 - C6153 * C2908 - C5896 * C3090 + C5815 * C3148) *
               C139731 * C92797 +
           (C102506 + C102507 + C102508) * C139731 * C139899) *
              C139809 * C2904 -
          ((C5896 * C10528 - C6153 * C10394 - C5896 * C10740 + C5815 * C10858 +
            C5895 * C7863 - C6152 * C7754 - C5895 * C8091 + C5814 * C8196 +
            C5894 * C3520 - C6151 * C3438 - C5894 * C3668 + C5813 * C3742) *
               C139731 * C139899 +
           (C5896 * C6792 - C6153 * C6627 - C5896 * C7032 + C5815 * C7169 +
            C5895 * C2974 - C6152 * C2908 - C5895 * C3090 + C5814 * C3148 +
            C5894 * C896 - C6151 * C813 - C5894 * C1072 + C5813 * C1151) *
               C139731 * C92797) *
              C139809 * C2905 +
          ((C5894 * C2974 - C6151 * C2908 - C5894 * C3090 + C5813 * C3148 +
            C5895 * C6792 - C6152 * C6627 - C5895 * C7032 + C5814 * C7169 +
            C5896 * C9707 - C6153 * C9609 - C5896 * C9876 + C5815 * C9968) *
               C139731 * C92797 +
           (C5894 * C7863 - C6151 * C7754 - C5894 * C8091 + C5813 * C8196 +
            C5895 * C10528 - C6152 * C10394 - C5895 * C10740 + C5814 * C10858 +
            C5896 * C57740 - C6153 * C57646 - C5896 * C57880 + C5815 * C57960) *
               C139731 * C139899) *
              C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C182 * C183 - C410 * C108 - C182 * C348 + C139824 * C411) *
                C47131 +
            C442 * C47132 + C443 * C47133) *
               C92797 +
           (C95001 + C95002 + C95003) * C139899) *
              C139809 * C2904 -
          ((C30689 * C47133 + C15096 * C47132 + C18761 * C47131) * C139899 +
           (C1173 * C47133 + C1174 * C47132 +
            (C182 * C896 - C410 * C813 - C182 * C1072 + C139824 * C1151) *
                C47131) *
               C92797) *
              C139809 * C2905 +
          (((C182 * C2974 - C410 * C2908 - C182 * C3090 + C139824 * C3148) *
                C47131 +
            (C182 * C2975 - C410 * C2909 - C182 * C3091 + C139824 * C3149) *
                C47132 +
            (C182 * C2976 - C410 * C2910 - C182 * C3092 + C139824 * C3150) *
                C47133) *
               C92797 +
           ((C182 * C7863 - C410 * C7754 - C182 * C8091 + C139824 * C8196) *
                C47131 +
            (C182 * C7864 - C410 * C7753 - C182 * C8092 + C139824 * C8195) *
                C47132 +
            (C182 * C7865 - C410 * C7755 - C182 * C8093 + C139824 * C8197) *
                C47133) *
               C139899) *
              C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C182 * C183 - C410 * C108 - C182 * C348 + C139824 * C411) *
               C139731 * C107999 +
           C109347 * C108000 + C109348 * C108001 + C109349 * C108002) *
              C139809 * C2904 -
          ((C182 * C18422 - C410 * C18302 - C182 * C18634 + C139824 * C18744) *
               C139731 * C108002 +
           C18762 * C139731 * C108001 + C18761 * C139731 * C108000 +
           (C182 * C896 - C410 * C813 - C182 * C1072 + C139824 * C1151) *
               C139731 * C107999) *
              C139809 * C2905 +
          ((C182 * C2974 - C410 * C2908 - C182 * C3090 + C139824 * C3148) *
               C139731 * C107999 +
           (C182 * C7863 - C410 * C7754 - C182 * C8091 + C139824 * C8196) *
               C139731 * C108000 +
           (C182 * C13217 - C410 * C13128 - C182 * C13382 + C139824 * C13463) *
               C139731 * C108001 +
           (C182 * C64356 - C410 * C64244 - C182 * C64584 + C139824 * C64696) *
               C139731 * C108002) *
              C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eeyz[112] +=
        (-std::pow(Pi, 2.5) *
         (((C92797 * C266 - C92947 * C108 + C139899 * C1741 - C92948 * C1570) *
               C5894 +
           (C92797 * C495 - C92947 * C348 + C139899 * C1997 - C92948 * C1829) *
               C5813 +
           (C101320 - C101321 + C101322 - C101323) * C5895 +
           (C101638 - C101639 + C101640 - C101641) * C5814 + C104026 * C5896 +
           C104259 * C5815) *
              C139731 * C139809 * C2904 +
          ((C101321 - C101320 + C101323 - C101322) * C5894 +
           (C101639 - C101638 + C101641 - C101640) * C5813 +
           (C101329 - C101328 + C101331 - C101330) * C5895 +
           (C101643 - C101642 + C101645 - C101644) * C5814 +
           (C104018 - C104019 + C104020 - C104021) * C5896 +
           (C104255 - C104256 + C104257 - C104258) * C5815) *
              C139731 * C139809 * C2905 +
          (C104026 * C5894 + C104259 * C5813 +
           (C104019 - C104018 + C104021 - C104020) * C5895 +
           (C104256 - C104255 + C104258 - C104257) * C5814 +
           (C92797 * C9785 - C92947 * C9609 + C139899 * C57808 -
            C92948 * C57646) *
               C5896 +
           (C92797 * C10044 - C92947 * C9876 + C139899 * C58027 -
            C92948 * C57880) *
               C5815) *
              C139731 * C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C92797 * C266 - C92947 * C108 + C139899 * C1741 - C92948 * C1570) *
                C182 +
            (C92797 * C495 - C92947 * C348 + C139899 * C1997 - C92948 * C1829) *
                C139824) *
               C47131 +
           ((C92950 - C92951 + C92952 - C92953) * C182 +
            (C93202 - C93203 + C93204 - C93205) * C139824) *
               C47132 +
           C93219 * C47133) *
              C139809 * C2904 +
          (((C92947 * C813 - C92797 * C984 + C92948 * C3438 - C139899 * C3594) *
                C182 +
            (C92947 * C1072 - C92797 * C1240 + C92948 * C3668 -
             C139899 * C3812) *
                C139824) *
               C47131 +
           ((C93789 - C93790 + C93791 - C93792) * C182 +
            (C94099 - C94100 + C94101 - C94102) * C139824) *
               C47132 +
           ((C93797 - C93798 + C93799 - C93800) * C182 +
            (C94103 - C94104 + C94105 - C94106) * C139824) *
               C47133) *
              C139809 * C2905 +
          (((C92797 * C3032 - C92947 * C2908 + C139899 * C7979 -
             C92948 * C7754) *
                C182 +
            (C92797 * C3202 - C92947 * C3090 + C139899 * C8317 -
             C92948 * C8091) *
                C139824) *
               C47131 +
           ((C92797 * C3033 - C92947 * C2909 + C139899 * C7980 -
             C92948 * C7753) *
                C182 +
            (C92797 * C3203 - C92947 * C3091 + C139899 * C8318 -
             C92948 * C8092) *
                C139824) *
               C47132 +
           ((C92797 * C3034 - C92947 * C2910 + C139899 * C7981 -
             C92948 * C7755) *
                C182 +
            (C92797 * C3204 - C92947 * C3092 + C139899 * C8319 -
             C92948 * C8093) *
                C139824) *
               C47133) *
              C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C107999 * C266 - C108103 * C108 + C108000 * C1741 -
            C108104 * C1570 + C108001 * C5397 - C108105 * C5273 +
            C108002 * C15912 - C108106 * C15623) *
               C182 +
           (C107999 * C495 - C108103 * C348 + C108000 * C1997 -
            C108104 * C1829 + C108001 * C5567 - C108105 * C5455 +
            C108002 * C16294 - C108106 * C16028) *
               C139824) *
              C139731 * C139809 * C2904 +
          ((C108103 * C813 - C107999 * C984 + C108104 * C3438 -
            C108000 * C3594 + C108105 * C13126 - C108001 * C13298 +
            C108106 * C18302 - C108002 * C18532) *
               C182 +
           (C108103 * C1072 - C107999 * C1240 + C108104 * C3668 -
            C108000 * C3812 + C108105 * C13380 - C108001 * C13540 +
            C108106 * C18634 - C108002 * C18862) *
               C139824) *
              C139731 * C139809 * C2905 +
          ((C107999 * C3032 - C108103 * C2908 + C108000 * C7979 -
            C108104 * C7754 + C108001 * C13300 - C108105 * C13128 +
            C108002 * C64472 - C108106 * C64244) *
               C182 +
           (C107999 * C3202 - C108103 * C3090 + C108000 * C8317 -
            C108104 * C8091 + C108001 * C13541 - C108105 * C13382 +
            C108002 * C64823 - C108106 * C64584) *
               C139824) *
              C139731 * C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eezx[112] +=
        (-std::pow(Pi, 2.5) *
         ((((C139731 * C114 - C54790 * C108) * C92947 +
            (C139731 * C573 - C54790 * C567) * C92797 +
            (C61976 - C61977) * C92948 + (C62328 - C62329) * C139899) *
               C5813 +
           ((C55513 - C55514) * C92947 + (C55735 - C55736) * C92797 +
            C64587 * C92948 + C64931 * C139899) *
               C5814 +
           C104340 * C5815) *
              C139809 * C2904 +
          (((C55514 - C55513) * C92947 + (C55736 - C55735) * C92797 +
            C64591 * C92948 + C64933 * C139899) *
               C5813 +
           ((C55518 - C55517) * C92947 + (C55738 - C55737) * C92797 +
            C89717 * C92948 + C90038 * C139899) *
               C5814 +
           ((C55522 - C55521) * C92947 + (C55740 - C55739) * C92797 +
            (C57891 - C57892) * C92948 + (C58103 - C58104) * C139899) *
               C5815) *
              C139809 * C2905 +
          (C104340 * C5813 +
           (C57299 * C92947 + C57465 * C92797 + (C57892 - C57891) * C92948 +
            (C58104 - C58103) * C139899) *
               C5814 +
           ((C57302 - C57301) * C92947 + (C57467 - C57466) * C92797 +
            (C139731 * C57647 - C54790 * C57646) * C92948 +
            (C139731 * C58097 - C54790 * C58096) * C139899) *
               C5815) *
              C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C47131 * C114 - C47136 * C108 + C47132 * C116 - C47138 * C109 +
            C47133 * C118 - C47140 * C110) *
               C92947 +
           (C47131 * C573 - C47136 * C567 + C47132 * C574 - C47138 * C568 +
            C47133 * C575 - C47140 * C569) *
               C92797 +
           (C94879 - C94880 + C94881 - C94882 + C94883 - C94884) * C92948 +
           (C95211 - C95212 + C95213 - C95214 + C95215 - C95216) * C139899) *
              C139824 * C139809 * C2904 +
          ((C48295 - C48294 + C48297 - C48296 + C48299 - C48298) * C92947 +
           (C48641 - C48640 + C48643 - C48642 + C48645 - C48644) * C92797 +
           (C51798 - C51799 + C51800 - C51801 + C51802 - C51803) * C92948 +
           (C52104 - C52105 + C52106 - C52107 + C52108 - C52109) * C139899) *
              C139824 * C139809 * C2905 +
          ((C50998 - C50997 + C51000 - C50999 + C51002 - C51001) * C92947 +
           (C51232 - C51231 + C51234 - C51233 + C51236 - C51235) * C92797 +
           (C47131 * C7758 - C47136 * C7754 + C47132 * C7756 - C47138 * C7753 +
            C47133 * C7760 - C47140 * C7755) *
               C92948 +
           (C47131 * C8425 - C47136 * C8422 + C47132 * C8426 - C47138 * C8423 +
            C47133 * C8427 - C47140 * C8424) *
               C139899) *
              C139824 * C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C139731 * C114 - C54790 * C108) * C108103 +
           (C139731 * C573 - C54790 * C567) * C107999 +
           (C61976 - C61977) * C108104 + (C62328 - C62329) * C108000 +
           C67258 * C108105 + C67513 * C108001 + (C67263 - C67262) * C108106 +
           (C67515 - C67514) * C108002) *
              C139824 * C139809 * C2904 +
          ((C55514 - C55513) * C108103 + (C55736 - C55735) * C107999 +
           C64591 * C108104 + C64933 * C108000 + C64593 * C108105 +
           C64934 * C108001 + (C64595 - C64596) * C108106 +
           (C64935 - C64936) * C108002) *
              C139824 * C139809 * C2905 +
          (C57297 * C108103 + C57463 * C107999 + C88899 * C108104 +
           C89133 * C108000 + (C63745 - C63744) * C108105 +
           (C63977 - C63976) * C108001 +
           (C139731 * C64245 - C54790 * C64244) * C108106 +
           (C139731 * C64929 - C54790 * C64928) * C108002) *
              C139824 * C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eezy[112] +=
        (-std::pow(Pi, 2.5) *
         (((C5813 * C183 - C5894 * C108 + C5814 * C896 - C5895 * C813 +
            C5815 * C2974 - C5896 * C2908) *
               C92947 +
           (C5813 * C629 - C5894 * C567 + C5814 * C1393 - C5895 * C1317 +
            C5815 * C3314 - C5896 * C3256) *
               C92797 +
           (C102182 - C102183 + C102184 - C102185 + C102186 - C102187) *
               C92948 +
           (C102803 - C102804 + C102805 - C102806 + C102807 - C102808) *
               C139899) *
              C139731 * C139809 * C2904 +
          ((C5894 * C813 - C5813 * C896 + C5895 * C2908 - C5814 * C2974 +
            C5896 * C6627 - C5815 * C6792) *
               C92947 +
           (C5894 * C1317 - C5813 * C1393 + C5895 * C3256 - C5814 * C3314 +
            C5896 * C7401 - C5815 * C7521) *
               C92797 +
           (C5894 * C3438 - C5813 * C3520 + C5895 * C7754 - C5814 * C7863 +
            C5896 * C10394 - C5815 * C10528) *
               C92948 +
           (C5894 * C3882 - C5813 * C3956 + C5895 * C8422 - C5814 * C8526 +
            C5896 * C11062 - C5815 * C11172) *
               C139899) *
              C139731 * C139809 * C2905 +
          ((C5813 * C2974 - C5894 * C2908 + C5814 * C6792 - C5895 * C6627 +
            C5815 * C9707 - C5896 * C9609) *
               C92947 +
           (C5813 * C3314 - C5894 * C3256 + C5814 * C7521 - C5895 * C7401 +
            C5815 * C10211 - C5896 * C10123) *
               C92797 +
           (C5813 * C7863 - C5894 * C7754 + C5814 * C10528 - C5895 * C10394 +
            C5815 * C57740 - C5896 * C57646) *
               C92948 +
           (C5813 * C8526 - C5894 * C8422 + C5814 * C11172 - C5895 * C11062 +
            C5815 * C58170 - C5896 * C58096) *
               C139899) *
              C139731 * C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C139824 * C183 - C182 * C108) * C92947 +
            (C139824 * C629 - C182 * C567) * C92797 +
            (C15795 - C15796) * C92948 + (C16525 - C16526) * C139899) *
               C47131 +
           ((C196 - C197) * C92947 + (C636 - C637) * C92797 + C15799 * C92948 +
            C16529 * C139899) *
               C47132 +
           C93374 * C47133) *
              C139809 * C2904 +
          (((C182 * C813 - C139824 * C896) * C92947 +
            (C182 * C1317 - C139824 * C1393) * C92797 +
            (C18427 - C18428) * C92948 + (C19071 - C19072) * C139899) *
               C47131 +
           ((C907 - C908) * C92947 + (C1399 - C1400) * C92797 +
            (C14764 - C14765) * C92948 + (C15401 - C15402) * C139899) *
               C47132 +
           ((C911 - C912) * C92947 + (C1401 - C1402) * C92797 +
            (C30369 - C30370) * C92948 + (C30992 - C30993) * C139899) *
               C47133) *
              C139809 * C2905 +
          (((C139824 * C2974 - C182 * C2908) * C92947 +
            (C139824 * C3314 - C182 * C3256) * C92797 +
            (C139824 * C7863 - C182 * C7754) * C92948 +
            (C139824 * C8526 - C182 * C8422) * C139899) *
               C47131 +
           ((C139824 * C2975 - C182 * C2909) * C92947 +
            (C139824 * C3315 - C182 * C3257) * C92797 +
            (C139824 * C7864 - C182 * C7753) * C92948 +
            (C139824 * C8527 - C182 * C8423) * C139899) *
               C47132 +
           ((C139824 * C2976 - C182 * C2910) * C92947 +
            (C139824 * C3316 - C182 * C3258) * C92797 +
            (C139824 * C7865 - C182 * C7755) * C92948 +
            (C139824 * C8528 - C182 * C8424) * C139899) *
               C47133) *
              C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C139824 * C183 - C182 * C108) * C108103 +
           (C139824 * C629 - C182 * C567) * C107999 +
           (C15795 - C15796) * C108104 + (C16525 - C16526) * C108000 +
           C21114 * C108105 + C21623 * C108001 + (C21119 - C21118) * C108106 +
           (C21625 - C21624) * C108002) *
              C139731 * C139809 * C2904 +
          ((C182 * C813 - C139824 * C896) * C108103 +
           (C182 * C1317 - C139824 * C1393) * C107999 +
           (C18427 - C18428) * C108104 + (C19071 - C19072) * C108000 +
           (C18431 - C18432) * C108105 + (C19073 - C19074) * C108001 +
           (C182 * C18302 - C139824 * C18422) * C108106 +
           (C182 * C18962 - C139824 * C19068) * C108002) *
              C139731 * C139809 * C2905 +
          ((C139824 * C2974 - C182 * C2908) * C108103 +
           (C139824 * C3314 - C182 * C3256) * C107999 +
           (C139824 * C7863 - C182 * C7754) * C108104 +
           (C139824 * C8526 - C182 * C8422) * C108000 +
           (C139824 * C13217 - C182 * C13128) * C108105 +
           (C139824 * C13701 - C182 * C13620) * C108001 +
           (C139824 * C64356 - C182 * C64244) * C108106 +
           (C139824 * C65034 - C182 * C64928) * C108002) *
              C139731 * C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eezz[112] +=
        (-std::pow(Pi, 2.5) *
         (((C92947 * C266 - C93448 * C108 - C92947 * C567 + C92797 * C702 +
            C92948 * C1741 - C93449 * C1570 - C92948 * C2074 +
            C139899 * C2230) *
               C5813 +
           (C101980 + C101981) * C5814 + C104489 * C5815) *
              C139731 * C139809 * C2904 -
          ((C104502 + C104503) * C5815 + (C101983 + C101982) * C5814 +
           (C101981 + C101980) * C5813) *
              C139731 * C139809 * C2905 +
          (C104489 * C5813 + (C104503 + C104502) * C5814 +
           (C92947 * C9785 - C93448 * C9609 - C92947 * C10123 +
            C92797 * C10287 + C92948 * C57808 - C93449 * C57646 -
            C92948 * C58096 + C139899 * C58237) *
               C5815) *
              C139731 * C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C92947 * C266 - C93448 * C108 - C92947 * C567 + C92797 * C702 +
            C92948 * C1741 - C93449 * C1570 - C92948 * C2074 +
            C139899 * C2230) *
               C139824 * C47131 +
           (C93487 + C93488) * C139824 * C47132 + C93494 * C47133) *
              C139809 * C2904 -
          ((C94425 + C94426) * C139824 * C47133 +
           (C94427 + C94428) * C139824 * C47132 +
           (C92948 * C3594 - C93449 * C3438 - C92948 * C3882 + C139899 * C4026 +
            C92947 * C984 - C93448 * C813 - C92947 * C1317 + C92797 * C1473) *
               C139824 * C47131) *
              C139809 * C2905 +
          ((C92947 * C3032 - C93448 * C2908 - C92947 * C3256 + C92797 * C3368 +
            C92948 * C7979 - C93449 * C7754 - C92948 * C8422 +
            C139899 * C8634) *
               C139824 * C47131 +
           (C92947 * C3033 - C93448 * C2909 - C92947 * C3257 + C92797 * C3369 +
            C92948 * C7980 - C93449 * C7753 - C92948 * C8423 +
            C139899 * C8633) *
               C139824 * C47132 +
           (C92947 * C3034 - C93448 * C2910 - C92947 * C3258 + C92797 * C3370 +
            C92948 * C7981 - C93449 * C7755 - C92948 * C8424 +
            C139899 * C8635) *
               C139824 * C47133) *
              C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((C108103 * C266 - C108407 * C108 - C108103 * C567 + C107999 * C702 +
           C108104 * C1741 - C108408 * C1570 - C108104 * C2074 +
           C108000 * C2230 + C108105 * C5397 - C108409 * C5273 -
           C108105 * C5621 + C108001 * C5733 + C108106 * C15912 -
           C108410 * C15623 - C108106 * C16401 + C108002 * C16633) *
              C139824 * C139731 * C139809 * C2904 -
          (C108106 * C18532 - C108410 * C18302 - C108106 * C18962 +
           C108002 * C19172 + C108105 * C13298 - C108409 * C13126 -
           C108105 * C13618 + C108001 * C13778 + C108104 * C3594 -
           C108408 * C3438 - C108104 * C3882 + C108000 * C4026 +
           C108103 * C984 - C108407 * C813 - C108103 * C1317 +
           C107999 * C1473) *
              C139824 * C139731 * C139809 * C2905 +
          (C108103 * C3032 - C108407 * C2908 - C108103 * C3256 +
           C107999 * C3368 + C108104 * C7979 - C108408 * C7754 -
           C108104 * C8422 + C108000 * C8634 + C108105 * C13300 -
           C108409 * C13128 - C108105 * C13620 + C108001 * C13779 +
           C108106 * C64472 - C108410 * C64244 - C108106 * C64928 +
           C108002 * C65141) *
              C139824 * C139731 * C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eexx[113] +=
        (-std::pow(Pi, 2.5) *
         (((((C54790 * C114 - C54791 * C108 - C54790 * C115 + C139731 * C126) *
                 C92797 +
             C61654 * C139899) *
                C5813 +
            (C101116 + C101117) * C5814 + C103863 * C5815) *
               C1565 -
           ((C104602 + C104603) * C5815 + (C104604 + C104605) * C5814 +
            (C61655 * C139899 + C61654 * C92797) * C5813) *
               C140002) *
              C2322 +
          (((C104605 + C104604) * C5813 + (C104603 + C104602) * C5814 +
            (C57669 * C92797 + (C54790 * C59484 - C54791 * C59483 -
                                C54790 * C59485 + C139731 * C59486) *
                                   C139899) *
                C5815) *
               C140002 -
           ((C103864 + C103865) * C5815 + (C101119 + C101118) * C5814 +
            (C101117 + C101116) * C5813) *
               C1565) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47136 * C114 - C47137 * C108 - C47136 * C115 + C47131 * C126 +
             C47138 * C116 - C47139 * C109 - C47138 * C117 + C47132 * C127 +
             C47140 * C118 - C47141 * C110 - C47140 * C119 + C47133 * C128) *
                C92797 +
            (C94563 + C94564 + C94565) * C139899) *
               C139824 * C1565 -
           ((C47140 * C5281 - C47141 * C5275 - C47140 * C5282 + C47133 * C5287 +
             C47138 * C5279 - C47139 * C5274 - C47138 * C5280 + C47132 * C5286 +
             C47136 * C5277 - C47137 * C5273 - C47136 * C5278 +
             C47131 * C5285) *
                C139899 +
            (C94565 + C94564 + C94563) * C92797) *
               C139824 * C140002) *
              C2322 +
          (((C51503 + C51502 + C51501) * C92797 +
            (C47136 * C13130 - C47137 * C13126 - C47136 * C13131 +
             C47131 * C13138 + C47138 * C13132 - C47139 * C13127 -
             C47138 * C13133 + C47132 * C13139 + C47140 * C14660 -
             C47141 * C14659 - C47140 * C14661 + C47133 * C14662) *
                C139899) *
               C139824 * C140002 -
           ((C51501 + C51502 + C51503) * C139899 +
            (C47980 + C47979 + C47978) * C92797) *
               C139824 * C1565) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C54790 * C114 - C54791 * C108 - C54790 * C115 + C139731 * C126) *
                C107999 +
            C61654 * C108000 + C61655 * C108001 + C67012 * C108002) *
               C139824 * C1565 -
           ((C54790 * C21014 - C54791 * C21012 - C54790 * C21015 +
             C139731 * C21018) *
                C108002 +
            C67012 * C108001 + C61655 * C108000 + C61654 * C107999) *
               C139824 * C140002) *
              C2322 +
          ((C57671 * C107999 + C60685 * C108000 + C64257 * C108001 +
            (C54790 * C67002 - C54791 * C67001 - C54790 * C67003 +
             C139731 * C67004) *
                C108002) *
               C139824 * C140002 -
           (C64257 * C108002 + C60685 * C108001 + C57671 * C108000 +
            C55303 * C107999) *
               C139824 * C1565) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eexy[113] +=
        (-std::pow(Pi, 2.5) *
         (((((C5813 * C183 - C5894 * C108 + C5814 * C896 - C5895 * C813 +
              C5815 * C2974 - C5896 * C2908) *
                 C54790 +
             (C5813 * C189 - C5894 * C115 + C5814 * C901 - C5895 * C822 +
              C5815 * C2978 - C5896 * C2913) *
                 C139731) *
                C92797 +
            ((C102182 - C102183 + C102184 - C102185 + C102186 - C102187) *
                 C54790 +
             (C102188 - C102189 + C102190 - C102191 + C102192 - C102193) *
                 C139731) *
                C139899) *
               C1565 +
           (((C102183 - C102182 + C102185 - C102184 + C102187 - C102186) *
                 C54790 +
             (C102189 - C102188 + C102191 - C102190 + C102193 - C102192) *
                 C139731) *
                C92797 +
            ((C5894 * C5273 - C5813 * C5339 + C5895 * C13126 - C5814 * C13216 +
              C5896 * C13128 - C5815 * C13217) *
                 C54790 +
             (C5894 * C5278 - C5813 * C5343 + C5895 * C13131 - C5814 * C13220 +
              C5896 * C13135 - C5815 * C13221) *
                 C139731) *
                C139899) *
               C140002) *
              C2322 +
          ((((C5894 * C813 - C5813 * C896 + C5895 * C2908 - C5814 * C2974 +
              C5896 * C6627 - C5815 * C6792) *
                 C54790 +
             (C5894 * C822 - C5813 * C901 + C5895 * C2913 - C5814 * C2978 +
              C5896 * C6632 - C5815 * C6795) *
                 C139731) *
                C92797 +
            ((C104704 - C104705 + C104706 - C104707 + C104708 - C104709) *
                 C54790 +
             (C104710 - C104711 + C104712 - C104713 + C104714 - C104715) *
                 C139731) *
                C139899) *
               C1565 +
           (((C104705 - C104704 + C104707 - C104706 + C104709 - C104708) *
                 C54790 +
             (C104711 - C104710 + C104713 - C104712 + C104715 - C104714) *
                 C139731) *
                C92797 +
            ((C5813 * C13216 - C5894 * C13126 + C5814 * C13217 -
              C5895 * C13128 + C5815 * C59537 - C5896 * C59483) *
                 C54790 +
             (C5813 * C13220 - C5894 * C13131 + C5814 * C13221 -
              C5895 * C13135 + C5815 * C59538 - C5896 * C59485) *
                 C139731) *
                C139899) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C139824 * C183 - C182 * C108) * C47136 +
             (C139824 * C189 - C182 * C115) * C47131 + (C196 - C197) * C47138 +
             (C198 - C199) * C47132 + C212 * C47140 + C213 * C47133) *
                C92797 +
            ((C15795 - C15796) * C47136 + (C15797 - C15798) * C47131 +
             C15799 * C47138 + C15800 * C47132 + C29549 * C47140 +
             C29550 * C47133) *
                C139899) *
               C1565 +
           (((C15796 - C15795) * C47136 + (C15798 - C15797) * C47131 +
             C15807 * C47138 + C15808 * C47132 + C31358 * C47140 +
             C31359 * C47133) *
                C92797 +
            ((C15802 - C15801) * C47136 + (C15804 - C15803) * C47131 +
             C15809 * C47138 + C15810 * C47132 + (C13938 - C13939) * C47140 +
             (C13940 - C13941) * C47133) *
                C139899) *
               C140002) *
              C2322 +
          ((((C182 * C813 - C139824 * C896) * C47136 +
             (C182 * C822 - C139824 * C901) * C47131 + (C907 - C908) * C47138 +
             (C909 - C910) * C47132 + (C911 - C912) * C47140 +
             (C913 - C914) * C47133) *
                C92797 +
            ((C18427 - C18428) * C47136 + (C18429 - C18430) * C47131 +
             (C14764 - C14765) * C47138 + (C14766 - C14767) * C47132 +
             (C30369 - C30370) * C47140 + (C30371 - C30372) * C47133) *
                C139899) *
               C1565 +
           (((C18428 - C18427) * C47136 + (C18430 - C18429) * C47131 +
             (C14765 - C14764) * C47138 + (C14767 - C14766) * C47132 +
             (C30370 - C30369) * C47140 + (C30372 - C30371) * C47133) *
                C92797 +
            ((C18432 - C18431) * C47136 + (C18434 - C18433) * C47131 +
             (C14769 - C14768) * C47138 + (C14771 - C14770) * C47132 +
             (C139824 * C14761 - C182 * C14659) * C47140 +
             (C139824 * C14762 - C182 * C14661) * C47133) *
                C139899) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C139824 * C183 - C182 * C108) * C54790 +
             (C139824 * C189 - C182 * C115) * C139731) *
                C107999 +
            ((C15795 - C15796) * C54790 + (C15797 - C15798) * C139731) *
                C108000 +
            (C21114 * C54790 + C21115 * C139731) * C108001 +
            ((C21119 - C21118) * C54790 + (C21121 - C21120) * C139731) *
                C108002) *
               C1565 +
           (((C15796 - C15795) * C54790 + (C15798 - C15797) * C139731) *
                C107999 +
            ((C15802 - C15801) * C54790 + (C15804 - C15803) * C139731) *
                C108000 +
            ((C21118 - C21119) * C54790 + (C21120 - C21121) * C139731) *
                C108001 +
            ((C182 * C21012 - C139824 * C21109) * C54790 +
             (C182 * C21015 - C139824 * C21111) * C139731) *
                C108002) *
               C140002) *
              C2322 +
          ((((C182 * C813 - C139824 * C896) * C54790 +
             (C182 * C822 - C139824 * C901) * C139731) *
                C107999 +
            ((C18427 - C18428) * C54790 + (C18429 - C18430) * C139731) *
                C108000 +
            ((C18431 - C18432) * C54790 + (C18433 - C18434) * C139731) *
                C108001 +
            ((C110795 - C110796) * C54790 + (C110797 - C110798) * C139731) *
                C108002) *
               C1565 +
           (((C18428 - C18427) * C54790 + (C18430 - C18429) * C139731) *
                C107999 +
            ((C18432 - C18431) * C54790 + (C18434 - C18433) * C139731) *
                C108000 +
            ((C110796 - C110795) * C54790 + (C110798 - C110797) * C139731) *
                C108001 +
            ((C139824 * C67086 - C182 * C67001) * C54790 +
             (C139824 * C67087 - C182 * C67003) * C139731) *
                C108002) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eexz[113] +=
        (-std::pow(Pi, 2.5) *
         (((((C92797 * C266 - C92947 * C108 + C139899 * C1741 -
              C92948 * C1570) *
                 C54790 +
             (C92797 * C272 - C92947 * C115 + C139899 * C1746 -
              C92948 * C1579) *
                 C139731) *
                C5813 +
            ((C101320 - C101321 + C101322 - C101323) * C54790 +
             (C101324 - C101325 + C101326 - C101327) * C139731) *
                C5814 +
            C104030 * C5815) *
               C1565 +
           (((C92947 * C1570 - C92797 * C1741 + C92948 * C5273 -
              C139899 * C5397) *
                 C54790 +
             (C92947 * C1579 - C92797 * C1746 + C92948 * C5278 -
              C139899 * C5401) *
                 C139731) *
                C5813 +
            ((C104814 - C104815 + C104816 - C104817) * C54790 +
             (C104818 - C104819 + C104820 - C104821) * C139731) *
                C5814 +
            ((C104822 - C104823 + C104824 - C104825) * C54790 +
             (C104826 - C104827 + C104828 - C104829) * C139731) *
                C5815) *
               C140002) *
              C2322 +
          ((((C101321 - C101320 + C101323 - C101322) * C54790 +
             (C101325 - C101324 + C101327 - C101326) * C139731) *
                C5813 +
            ((C101329 - C101328 + C101331 - C101330) * C54790 +
             (C101333 - C101332 + C101335 - C101334) * C139731) *
                C5814 +
            ((C104018 - C104019 + C104020 - C104021) * C54790 +
             (C104022 - C104023 + C104024 - C104025) * C139731) *
                C5815) *
               C1565 +
           (((C104815 - C104814 + C104817 - C104816) * C54790 +
             (C104819 - C104818 + C104821 - C104820) * C139731) *
                C5813 +
            ((C104823 - C104822 + C104825 - C104824) * C54790 +
             (C104827 - C104826 + C104829 - C104828) * C139731) *
                C5814 +
            ((C92797 * C10630 - C92947 * C10394 + C139899 * C59589 -
              C92948 * C59483) *
                 C54790 +
             (C92797 * C10632 - C92947 * C10397 + C139899 * C59590 -
              C92948 * C59485) *
                 C139731) *
                C5815) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C92797 * C266 - C92947 * C108 + C139899 * C1741 - C92948 * C1570) *
                C47136 +
            (C92797 * C272 - C92947 * C115 + C139899 * C1746 - C92948 * C1579) *
                C47131 +
            (C92950 - C92951 + C92952 - C92953) * C47138 +
            (C92954 - C92955 + C92956 - C92957) * C47132 + C92978 * C47140 +
            C92979 * C47133) *
               C139824 * C1565 +
           ((C92947 * C1570 - C92797 * C1741 + C92948 * C5273 -
             C139899 * C5397) *
                C47136 +
            (C92947 * C1579 - C92797 * C1746 + C92948 * C5278 -
             C139899 * C5401) *
                C47131 +
            (C94765 - C94766 + C94767 - C94768) * C47138 +
            (C94769 - C94770 + C94771 - C94772) * C47132 +
            (C94773 - C94774 + C94775 - C94776) * C47140 +
            (C94777 - C94778 + C94779 - C94780) * C47133) *
               C139824 * C140002) *
              C2322 +
          (((C92947 * C813 - C92797 * C984 + C92948 * C3438 - C139899 * C3594) *
                C47136 +
            (C92947 * C822 - C92797 * C989 + C92948 * C3443 - C139899 * C3598) *
                C47131 +
            (C93789 - C93790 + C93791 - C93792) * C47138 +
            (C93793 - C93794 + C93795 - C93796) * C47132 +
            (C93797 - C93798 + C93799 - C93800) * C47140 +
            (C93801 - C93802 + C93803 - C93804) * C47133) *
               C139824 * C1565 +
           ((C92797 * C3594 - C92947 * C3438 + C139899 * C13298 -
             C92948 * C13126) *
                C47136 +
            (C92797 * C3598 - C92947 * C3443 + C139899 * C13302 -
             C92948 * C13131) *
                C47131 +
            (C92797 * C3595 - C92947 * C3439 + C139899 * C13299 -
             C92948 * C13127) *
                C47138 +
            (C92797 * C3599 - C92947 * C3445 + C139899 * C13303 -
             C92948 * C13133) *
                C47132 +
            (C92797 * C3596 - C92947 * C3440 + C139899 * C14869 -
             C92948 * C14659) *
                C47140 +
            (C92797 * C3600 - C92947 * C3447 + C139899 * C14870 -
             C92948 * C14661) *
                C47133) *
               C139824 * C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C107999 * C266 - C108103 * C108 + C108000 * C1741 -
             C108104 * C1570 + C108001 * C5397 - C108105 * C5273 +
             C108002 * C15912 - C108106 * C15623) *
                C54790 +
            (C107999 * C272 - C108103 * C115 + C108000 * C1746 -
             C108104 * C1579 + C108001 * C5401 - C108105 * C5278 +
             C108002 * C15915 - C108106 * C15628) *
                C139731) *
               C139824 * C1565 +
           ((C108103 * C1570 - C107999 * C1741 + C108104 * C5273 -
             C108000 * C5397 + C108105 * C15623 - C108001 * C15912 +
             C108106 * C21012 - C108002 * C21200) *
                C54790 +
            (C108103 * C1579 - C107999 * C1746 + C108104 * C5278 -
             C108000 * C5401 + C108105 * C15628 - C108001 * C15915 +
             C108106 * C21015 - C108002 * C21202) *
                C139731) *
               C139824 * C140002) *
              C2322 +
          (((C108103 * C813 - C107999 * C984 + C108104 * C3438 -
             C108000 * C3594 + C108105 * C13126 - C108001 * C13298 +
             C108106 * C18302 - C108002 * C18532) *
                C54790 +
            (C108103 * C822 - C107999 * C989 + C108104 * C3443 -
             C108000 * C3598 + C108105 * C13131 - C108001 * C13302 +
             C108106 * C18305 - C108002 * C18534) *
                C139731) *
               C139824 * C1565 +
           ((C107999 * C3594 - C108103 * C3438 + C108000 * C13298 -
             C108104 * C13126 + C108001 * C18532 - C108105 * C18302 +
             C108002 * C67179 - C108106 * C67001) *
                C54790 +
            (C107999 * C3598 - C108103 * C3443 + C108000 * C13302 -
             C108104 * C13131 + C108001 * C18534 - C108105 * C18305 +
             C108002 * C67180 - C108106 * C67003) *
                C139731) *
               C139824 * C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eeyx[113] +=
        (-std::pow(Pi, 2.5) *
         (((((C139731 * C114 - C54790 * C108) * C5894 +
             (C139731 * C354 - C54790 * C348) * C5813 +
             (C55513 - C55514) * C5895 + (C55515 - C55516) * C5814 +
             C57297 * C5896 + C57298 * C5815) *
                C92797 +
            ((C61976 - C61977) * C5894 + (C61978 - C61979) * C5813 +
             C64587 * C5895 + C64588 * C5814 + C88899 * C5896 +
             C88900 * C5815) *
                C139899) *
               C1565 +
           (((C61977 - C61976) * C5894 + (C61979 - C61978) * C5813 +
             C64591 * C5895 + C64592 * C5814 + C89717 * C5896 +
             C89718 * C5815) *
                C92797 +
            ((C61981 - C61980) * C5894 + (C61983 - C61982) * C5813 +
             C64593 * C5895 + C64594 * C5814 + (C63744 - C63745) * C5896 +
             (C63746 - C63747) * C5815) *
                C139899) *
               C140002) *
              C2322 +
          ((((C55514 - C55513) * C5894 + (C55516 - C55515) * C5813 +
             (C55518 - C55517) * C5895 + (C55520 - C55519) * C5814 +
             (C55522 - C55521) * C5896 + (C55524 - C55523) * C5815) *
                C92797 +
            (C64591 * C5894 + C64592 * C5813 + C89717 * C5895 + C89718 * C5814 +
             (C57891 - C57892) * C5896 + (C57893 - C57894) * C5815) *
                C139899) *
               C1565 +
           ((C64587 * C5894 + C64588 * C5813 + C88899 * C5895 + C88900 * C5814 +
             (C57892 - C57891) * C5896 + (C57894 - C57893) * C5815) *
                C92797 +
            (C64589 * C5894 + C64590 * C5813 + (C63745 - C63744) * C5895 +
             (C63747 - C63746) * C5814 +
             (C139731 * C59484 - C54790 * C59483) * C5896 +
             (C139731 * C59642 - C54790 * C59641) * C5815) *
                C139899) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47131 * C114 - C47136 * C108 + C47132 * C116 - C47138 * C109 +
              C47133 * C118 - C47140 * C110) *
                 C182 +
             (C47131 * C354 - C47136 * C348 + C47132 * C355 - C47138 * C349 +
              C47133 * C356 - C47140 * C350) *
                 C139824) *
                C92797 +
            ((C94879 - C94880 + C94881 - C94882 + C94883 - C94884) * C182 +
             (C94885 - C94886 + C94887 - C94888 + C94889 - C94890) * C139824) *
                C139899) *
               C1565 +
           (((C94880 - C94879 + C94882 - C94881 + C94884 - C94883) * C182 +
             (C94886 - C94885 + C94888 - C94887 + C94890 - C94889) * C139824) *
                C92797 +
            ((C47136 * C5273 - C47131 * C5277 + C47138 * C5274 -
              C47132 * C5279 + C47140 * C5275 - C47133 * C5281) *
                 C182 +
             (C47136 * C5455 - C47131 * C5459 + C47138 * C5456 -
              C47132 * C5460 + C47140 * C5457 - C47133 * C5461) *
                 C139824) *
                C139899) *
               C140002) *
              C2322 +
          ((((C48295 - C48294 + C48297 - C48296 + C48299 - C48298) * C182 +
             (C48301 - C48300 + C48303 - C48302 + C48305 - C48304) * C139824) *
                C92797 +
            ((C51798 - C51799 + C51800 - C51801 + C51802 - C51803) * C182 +
             (C51804 - C51805 + C51806 - C51807 + C51808 - C51809) * C139824) *
                C139899) *
               C1565 +
           (((C51799 - C51798 + C51801 - C51800 + C51803 - C51802) * C182 +
             (C51805 - C51804 + C51807 - C51806 + C51809 - C51808) * C139824) *
                C92797 +
            ((C47131 * C13130 - C47136 * C13126 + C47132 * C13132 -
              C47138 * C13127 + C47133 * C14660 - C47140 * C14659) *
                 C182 +
             (C47131 * C13384 - C47136 * C13380 + C47132 * C13385 -
              C47138 * C13381 + C47133 * C14982 - C47140 * C14981) *
                 C139824) *
                C139899) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C139731 * C114 - C54790 * C108) * C182 +
             (C139731 * C354 - C54790 * C348) * C139824) *
                C107999 +
            ((C61976 - C61977) * C182 + (C61978 - C61979) * C139824) * C108000 +
            (C67258 * C182 + C67259 * C139824) * C108001 +
            ((C67263 - C67262) * C182 + (C67265 - C67264) * C139824) *
                C108002) *
               C1565 +
           (((C61977 - C61976) * C182 + (C61979 - C61978) * C139824) * C107999 +
            ((C61981 - C61980) * C182 + (C61983 - C61982) * C139824) * C108000 +
            ((C67262 - C67263) * C182 + (C67264 - C67265) * C139824) * C108001 +
            ((C54790 * C21012 - C139731 * C21014) * C182 +
             (C54790 * C21278 - C139731 * C21280) * C139824) *
                C108002) *
               C140002) *
              C2322 +
          ((((C55514 - C55513) * C182 + (C55516 - C55515) * C139824) * C107999 +
            (C64591 * C182 + C64592 * C139824) * C108000 +
            (C64593 * C182 + C64594 * C139824) * C108001 +
            ((C64595 - C64596) * C182 + (C64597 - C64598) * C139824) *
                C108002) *
               C1565 +
           ((C64587 * C182 + C64588 * C139824) * C107999 +
            (C64589 * C182 + C64590 * C139824) * C108000 +
            ((C64596 - C64595) * C182 + (C64598 - C64597) * C139824) * C108001 +
            ((C139731 * C67002 - C54790 * C67001) * C182 +
             (C139731 * C67256 - C54790 * C67255) * C139824) *
                C108002) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eeyy[113] +=
        (-std::pow(Pi, 2.5) *
         ((((C5894 * C183 - C6151 * C108 - C5894 * C348 + C5813 * C411 +
             C5895 * C896 - C6152 * C813 - C5895 * C1072 + C5814 * C1151 +
             C5896 * C2974 - C6153 * C2908 - C5896 * C3090 + C5815 * C3148) *
                C139731 * C92797 +
            (C102506 + C102507 + C102508) * C139731 * C139899) *
               C1565 -
           ((C5896 * C13217 - C6153 * C13128 - C5896 * C13382 + C5815 * C13463 +
             C5895 * C13216 - C6152 * C13126 - C5895 * C13380 + C5814 * C13462 +
             C5894 * C5339 - C6151 * C5273 - C5894 * C5455 + C5813 * C5513) *
                C139731 * C139899 +
            (C102508 + C102507 + C102506) * C139731 * C92797) *
               C140002) *
              C2322 +
          (((C105044 + C105045 + C105046) * C139731 * C92797 +
            (C5894 * C13216 - C6151 * C13126 - C5894 * C13380 + C5813 * C13462 +
             C5895 * C13217 - C6152 * C13128 - C5895 * C13382 + C5814 * C13463 +
             C5896 * C59537 - C6153 * C59483 - C5896 * C59641 +
             C5815 * C59693) *
                C139731 * C139899) *
               C140002 -
           ((C105046 + C105045 + C105044) * C139731 * C139899 +
            (C5896 * C6792 - C6153 * C6627 - C5896 * C7032 + C5815 * C7169 +
             C5895 * C2974 - C6152 * C2908 - C5895 * C3090 + C5814 * C3148 +
             C5894 * C896 - C6151 * C813 - C5894 * C1072 + C5813 * C1151) *
                C139731 * C92797) *
               C1565) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C182 * C183 - C410 * C108 - C182 * C348 + C139824 * C411) *
                 C47131 +
             C442 * C47132 + C443 * C47133) *
                C92797 +
            (C95001 + C95002 + C95003) * C139899) *
               C1565 -
           ((C14204 * C47133 + C14203 * C47132 + C16193 * C47131) * C139899 +
            (C95003 + C95002 + C95001) * C92797) *
               C140002) *
              C2322 +
          (((C97485 + C97486 + C97487) * C92797 +
            (C18762 * C47131 + C15095 * C47132 +
             (C182 * C14761 - C410 * C14659 - C182 * C14981 +
              C139824 * C15081) *
                 C47133) *
                C139899) *
               C140002 -
           ((C97487 + C97486 + C97485) * C139899 +
            (C1173 * C47133 + C1174 * C47132 +
             (C182 * C896 - C410 * C813 - C182 * C1072 + C139824 * C1151) *
                 C47131) *
                C92797) *
               C1565) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C182 * C183 - C410 * C108 - C182 * C348 + C139824 * C411) *
                C139731 * C107999 +
            C109347 * C108000 + C109348 * C108001 + C109349 * C108002) *
               C1565 -
           ((C182 * C21109 - C410 * C21012 - C182 * C21278 + C139824 * C21373) *
                C139731 * C108002 +
            C109349 * C108001 + C109348 * C108000 + C109347 * C107999) *
               C140002) *
              C2322 +
          ((C110997 * C107999 + C110998 * C108000 + C111006 * C108001 +
            (C182 * C67086 - C410 * C67001 - C182 * C67255 + C139824 * C67344) *
                C139731 * C108002) *
               C140002 -
           (C111006 * C108002 + C110998 * C108001 + C110997 * C108000 +
            (C182 * C896 - C410 * C813 - C182 * C1072 + C139824 * C1151) *
                C139731 * C107999) *
               C1565) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eeyz[113] +=
        (-std::pow(Pi, 2.5) *
         ((((C92797 * C266 - C92947 * C108 + C139899 * C1741 - C92948 * C1570) *
                C5894 +
            (C92797 * C495 - C92947 * C348 + C139899 * C1997 - C92948 * C1829) *
                C5813 +
            (C101320 - C101321 + C101322 - C101323) * C5895 +
            (C101638 - C101639 + C101640 - C101641) * C5814 + C104026 * C5896 +
            C104259 * C5815) *
               C139731 * C1565 +
           ((C92947 * C1570 - C92797 * C1741 + C92948 * C5273 -
             C139899 * C5397) *
                C5894 +
            (C92947 * C1829 - C92797 * C1997 + C92948 * C5455 -
             C139899 * C5567) *
                C5813 +
            (C104814 - C104815 + C104816 - C104817) * C5895 +
            (C105145 - C105146 + C105147 - C105148) * C5814 +
            (C104822 - C104823 + C104824 - C104825) * C5896 +
            (C105149 - C105150 + C105151 - C105152) * C5815) *
               C139731 * C140002) *
              C2322 +
          (((C101321 - C101320 + C101323 - C101322) * C5894 +
            (C101639 - C101638 + C101641 - C101640) * C5813 +
            (C101329 - C101328 + C101331 - C101330) * C5895 +
            (C101643 - C101642 + C101645 - C101644) * C5814 +
            (C104018 - C104019 + C104020 - C104021) * C5896 +
            (C104255 - C104256 + C104257 - C104258) * C5815) *
               C139731 * C1565 +
           ((C104815 - C104814 + C104817 - C104816) * C5894 +
            (C105146 - C105145 + C105148 - C105147) * C5813 +
            (C104823 - C104822 + C104825 - C104824) * C5895 +
            (C105150 - C105149 + C105152 - C105151) * C5814 +
            (C92797 * C10630 - C92947 * C10394 + C139899 * C59589 -
             C92948 * C59483) *
                C5896 +
            (C92797 * C10958 - C92947 * C10740 + C139899 * C59744 -
             C92948 * C59641) *
                C5815) *
               C139731 * C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C92797 * C266 - C92947 * C108 + C139899 * C1741 -
              C92948 * C1570) *
                 C182 +
             (C92797 * C495 - C92947 * C348 + C139899 * C1997 -
              C92948 * C1829) *
                 C139824) *
                C47131 +
            ((C92950 - C92951 + C92952 - C92953) * C182 +
             (C93202 - C93203 + C93204 - C93205) * C139824) *
                C47132 +
            C93219 * C47133) *
               C1565 +
           (((C92947 * C1570 - C92797 * C1741 + C92948 * C5273 -
              C139899 * C5397) *
                 C182 +
             (C92947 * C1829 - C92797 * C1997 + C92948 * C5455 -
              C139899 * C5567) *
                 C139824) *
                C47131 +
            ((C94765 - C94766 + C94767 - C94768) * C182 +
             (C95105 - C95106 + C95107 - C95108) * C139824) *
                C47132 +
            ((C94773 - C94774 + C94775 - C94776) * C182 +
             (C95109 - C95110 + C95111 - C95112) * C139824) *
                C47133) *
               C140002) *
              C2322 +
          ((((C92947 * C813 - C92797 * C984 + C92948 * C3438 -
              C139899 * C3594) *
                 C182 +
             (C92947 * C1072 - C92797 * C1240 + C92948 * C3668 -
              C139899 * C3812) *
                 C139824) *
                C47131 +
            ((C93789 - C93790 + C93791 - C93792) * C182 +
             (C94099 - C94100 + C94101 - C94102) * C139824) *
                C47132 +
            ((C93797 - C93798 + C93799 - C93800) * C182 +
             (C94103 - C94104 + C94105 - C94106) * C139824) *
                C47133) *
               C1565 +
           (((C92797 * C3594 - C92947 * C3438 + C139899 * C13298 -
              C92948 * C13126) *
                 C182 +
             (C92797 * C3812 - C92947 * C3668 + C139899 * C13540 -
              C92948 * C13380) *
                 C139824) *
                C47131 +
            ((C92797 * C3595 - C92947 * C3439 + C139899 * C13299 -
              C92948 * C13127) *
                 C182 +
             (C92797 * C3813 - C92947 * C3669 + C139899 * C13542 -
              C92948 * C13381) *
                 C139824) *
                C47132 +
            ((C92797 * C3596 - C92947 * C3440 + C139899 * C14869 -
              C92948 * C14659) *
                 C182 +
             (C92797 * C3814 - C92947 * C3670 + C139899 * C15194 -
              C92948 * C14981) *
                 C139824) *
                C47133) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C107999 * C266 - C108103 * C108 + C108000 * C1741 -
             C108104 * C1570 + C108001 * C5397 - C108105 * C5273 +
             C108002 * C15912 - C108106 * C15623) *
                C182 +
            (C107999 * C495 - C108103 * C348 + C108000 * C1997 -
             C108104 * C1829 + C108001 * C5567 - C108105 * C5455 +
             C108002 * C16294 - C108106 * C16028) *
                C139824) *
               C139731 * C1565 +
           ((C108103 * C1570 - C107999 * C1741 + C108104 * C5273 -
             C108000 * C5397 + C108105 * C15623 - C108001 * C15912 +
             C108106 * C21012 - C108002 * C21200) *
                C182 +
            (C108103 * C1829 - C107999 * C1997 + C108104 * C5455 -
             C108000 * C5567 + C108105 * C16028 - C108001 * C16294 +
             C108106 * C21278 - C108002 * C21459) *
                C139824) *
               C139731 * C140002) *
              C2322 +
          (((C108103 * C813 - C107999 * C984 + C108104 * C3438 -
             C108000 * C3594 + C108105 * C13126 - C108001 * C13298 +
             C108106 * C18302 - C108002 * C18532) *
                C182 +
            (C108103 * C1072 - C107999 * C1240 + C108104 * C3668 -
             C108000 * C3812 + C108105 * C13380 - C108001 * C13540 +
             C108106 * C18634 - C108002 * C18862) *
                C139824) *
               C139731 * C1565 +
           ((C107999 * C3594 - C108103 * C3438 + C108000 * C13298 -
             C108104 * C13126 + C108001 * C18532 - C108105 * C18302 +
             C108002 * C67179 - C108106 * C67001) *
                C182 +
            (C107999 * C3812 - C108103 * C3668 + C108000 * C13540 -
             C108104 * C13380 + C108001 * C18862 - C108105 * C18634 +
             C108002 * C67435 - C108106 * C67255) *
                C139824) *
               C139731 * C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eezx[113] +=
        (-std::pow(Pi, 2.5) *
         (((((C139731 * C114 - C54790 * C108) * C92947 +
             (C139731 * C573 - C54790 * C567) * C92797 +
             (C61976 - C61977) * C92948 + (C62328 - C62329) * C139899) *
                C5813 +
            ((C55513 - C55514) * C92947 + (C55735 - C55736) * C92797 +
             C64587 * C92948 + C64931 * C139899) *
                C5814 +
            C104340 * C5815) *
               C1565 +
           (((C61977 - C61976) * C92947 + (C62329 - C62328) * C92797 +
             (C61981 - C61980) * C92948 + (C62331 - C62330) * C139899) *
                C5813 +
            (C64591 * C92947 + C64933 * C92797 + C64593 * C92948 +
             C64934 * C139899) *
                C5814 +
            (C89717 * C92947 + C90038 * C92797 + (C63744 - C63745) * C92948 +
             (C63976 - C63977) * C139899) *
                C5815) *
               C140002) *
              C2322 +
          ((((C55514 - C55513) * C92947 + (C55736 - C55735) * C92797 +
             C64591 * C92948 + C64933 * C139899) *
                C5813 +
            ((C55518 - C55517) * C92947 + (C55738 - C55737) * C92797 +
             C89717 * C92948 + C90038 * C139899) *
                C5814 +
            ((C55522 - C55521) * C92947 + (C55740 - C55739) * C92797 +
             (C57891 - C57892) * C92948 + (C58103 - C58104) * C139899) *
                C5815) *
               C1565 +
           ((C64587 * C92947 + C64931 * C92797 + C64589 * C92948 +
             C64932 * C139899) *
                C5813 +
            (C88899 * C92947 + C89133 * C92797 + (C63745 - C63744) * C92948 +
             (C63977 - C63976) * C139899) *
                C5814 +
            ((C57892 - C57891) * C92947 + (C58104 - C58103) * C92797 +
             (C139731 * C59484 - C54790 * C59483) * C92948 +
             (C139731 * C59796 - C54790 * C59795) * C139899) *
                C5815) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47131 * C114 - C47136 * C108 + C47132 * C116 - C47138 * C109 +
             C47133 * C118 - C47140 * C110) *
                C92947 +
            (C47131 * C573 - C47136 * C567 + C47132 * C574 - C47138 * C568 +
             C47133 * C575 - C47140 * C569) *
                C92797 +
            (C94879 - C94880 + C94881 - C94882 + C94883 - C94884) * C92948 +
            (C95211 - C95212 + C95213 - C95214 + C95215 - C95216) * C139899) *
               C139824 * C1565 +
           ((C94880 - C94879 + C94882 - C94881 + C94884 - C94883) * C92947 +
            (C95212 - C95211 + C95214 - C95213 + C95216 - C95215) * C92797 +
            (C47136 * C5273 - C47131 * C5277 + C47138 * C5274 - C47132 * C5279 +
             C47140 * C5275 - C47133 * C5281) *
                C92948 +
            (C47136 * C5621 - C47131 * C5625 + C47138 * C5622 - C47132 * C5626 +
             C47140 * C5623 - C47133 * C5627) *
                C139899) *
               C139824 * C140002) *
              C2322 +
          (((C48295 - C48294 + C48297 - C48296 + C48299 - C48298) * C92947 +
            (C48641 - C48640 + C48643 - C48642 + C48645 - C48644) * C92797 +
            (C51798 - C51799 + C51800 - C51801 + C51802 - C51803) * C92948 +
            (C52104 - C52105 + C52106 - C52107 + C52108 - C52109) * C139899) *
               C139824 * C1565 +
           ((C51799 - C51798 + C51801 - C51800 + C51803 - C51802) * C92947 +
            (C52105 - C52104 + C52107 - C52106 + C52109 - C52108) * C92797 +
            (C47131 * C13130 - C47136 * C13126 + C47132 * C13132 -
             C47138 * C13127 + C47133 * C14660 - C47140 * C14659) *
                C92948 +
            (C47131 * C13622 - C47136 * C13618 + C47132 * C13623 -
             C47138 * C13619 + C47133 * C15300 - C47140 * C15299) *
                C139899) *
               C139824 * C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C139731 * C114 - C54790 * C108) * C108103 +
            (C139731 * C573 - C54790 * C567) * C107999 +
            (C61976 - C61977) * C108104 + (C62328 - C62329) * C108000 +
            C67258 * C108105 + C67513 * C108001 + (C67263 - C67262) * C108106 +
            (C67515 - C67514) * C108002) *
               C139824 * C1565 +
           ((C61977 - C61976) * C108103 + (C62329 - C62328) * C107999 +
            (C61981 - C61980) * C108104 + (C62331 - C62330) * C108000 +
            (C67262 - C67263) * C108105 + (C67514 - C67515) * C108001 +
            (C54790 * C21012 - C139731 * C21014) * C108106 +
            (C54790 * C21535 - C139731 * C21537) * C108002) *
               C139824 * C140002) *
              C2322 +
          (((C55514 - C55513) * C108103 + (C55736 - C55735) * C107999 +
            C64591 * C108104 + C64933 * C108000 + C64593 * C108105 +
            C64934 * C108001 + (C64595 - C64596) * C108106 +
            (C64935 - C64936) * C108002) *
               C139824 * C1565 +
           (C64587 * C108103 + C64931 * C107999 + C64589 * C108104 +
            C64932 * C108000 + (C64596 - C64595) * C108105 +
            (C64936 - C64935) * C108001 +
            (C139731 * C67002 - C54790 * C67001) * C108106 +
            (C139731 * C67511 - C54790 * C67510) * C108002) *
               C139824 * C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eezy[113] +=
        (-std::pow(Pi, 2.5) *
         ((((C5813 * C183 - C5894 * C108 + C5814 * C896 - C5895 * C813 +
             C5815 * C2974 - C5896 * C2908) *
                C92947 +
            (C5813 * C629 - C5894 * C567 + C5814 * C1393 - C5895 * C1317 +
             C5815 * C3314 - C5896 * C3256) *
                C92797 +
            (C102182 - C102183 + C102184 - C102185 + C102186 - C102187) *
                C92948 +
            (C102803 - C102804 + C102805 - C102806 + C102807 - C102808) *
                C139899) *
               C139731 * C1565 +
           ((C102183 - C102182 + C102185 - C102184 + C102187 - C102186) *
                C92947 +
            (C102804 - C102803 + C102806 - C102805 + C102808 - C102807) *
                C92797 +
            (C5894 * C5273 - C5813 * C5339 + C5895 * C13126 - C5814 * C13216 +
             C5896 * C13128 - C5815 * C13217) *
                C92948 +
            (C5894 * C5621 - C5813 * C5679 + C5895 * C13618 - C5814 * C13700 +
             C5896 * C13620 - C5815 * C13701) *
                C139899) *
               C139731 * C140002) *
              C2322 +
          (((C5894 * C813 - C5813 * C896 + C5895 * C2908 - C5814 * C2974 +
             C5896 * C6627 - C5815 * C6792) *
                C92947 +
            (C5894 * C1317 - C5813 * C1393 + C5895 * C3256 - C5814 * C3314 +
             C5896 * C7401 - C5815 * C7521) *
                C92797 +
            (C104704 - C104705 + C104706 - C104707 + C104708 - C104709) *
                C92948 +
            (C105349 - C105350 + C105351 - C105352 + C105353 - C105354) *
                C139899) *
               C139731 * C1565 +
           ((C104705 - C104704 + C104707 - C104706 + C104709 - C104708) *
                C92947 +
            (C105350 - C105349 + C105352 - C105351 + C105354 - C105353) *
                C92797 +
            (C5813 * C13216 - C5894 * C13126 + C5814 * C13217 - C5895 * C13128 +
             C5815 * C59537 - C5896 * C59483) *
                C92948 +
            (C5813 * C13700 - C5894 * C13618 + C5814 * C13701 - C5895 * C13620 +
             C5815 * C59847 - C5896 * C59795) *
                C139899) *
               C139731 * C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C139824 * C183 - C182 * C108) * C92947 +
             (C139824 * C629 - C182 * C567) * C92797 +
             (C15795 - C15796) * C92948 + (C16525 - C16526) * C139899) *
                C47131 +
            ((C196 - C197) * C92947 + (C636 - C637) * C92797 + C15799 * C92948 +
             C16529 * C139899) *
                C47132 +
            C93374 * C47133) *
               C1565 +
           (((C15796 - C15795) * C92947 + (C16526 - C16525) * C92797 +
             (C15802 - C15801) * C92948 + (C16528 - C16527) * C139899) *
                C47131 +
            (C15807 * C92947 + C16531 * C92797 + C15809 * C92948 +
             C16532 * C139899) *
                C47132 +
            (C31358 * C92947 + C32014 * C92797 + (C13938 - C13939) * C92948 +
             (C14441 - C14442) * C139899) *
                C47133) *
               C140002) *
              C2322 +
          ((((C182 * C813 - C139824 * C896) * C92947 +
             (C182 * C1317 - C139824 * C1393) * C92797 +
             (C18427 - C18428) * C92948 + (C19071 - C19072) * C139899) *
                C47131 +
            ((C907 - C908) * C92947 + (C1399 - C1400) * C92797 +
             (C14764 - C14765) * C92948 + (C15401 - C15402) * C139899) *
                C47132 +
            ((C911 - C912) * C92947 + (C1401 - C1402) * C92797 +
             (C30369 - C30370) * C92948 + (C30992 - C30993) * C139899) *
                C47133) *
               C1565 +
           (((C18428 - C18427) * C92947 + (C19072 - C19071) * C92797 +
             (C18432 - C18431) * C92948 + (C19074 - C19073) * C139899) *
                C47131 +
            ((C14765 - C14764) * C92947 + (C15402 - C15401) * C92797 +
             (C14769 - C14768) * C92948 + (C15404 - C15403) * C139899) *
                C47132 +
            ((C30370 - C30369) * C92947 + (C30993 - C30992) * C92797 +
             (C139824 * C14761 - C182 * C14659) * C92948 +
             (C139824 * C15399 - C182 * C15299) * C139899) *
                C47133) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C139824 * C183 - C182 * C108) * C108103 +
            (C139824 * C629 - C182 * C567) * C107999 +
            (C15795 - C15796) * C108104 + (C16525 - C16526) * C108000 +
            C21114 * C108105 + C21623 * C108001 + (C21119 - C21118) * C108106 +
            (C21625 - C21624) * C108002) *
               C139731 * C1565 +
           ((C15796 - C15795) * C108103 + (C16526 - C16525) * C107999 +
            (C15802 - C15801) * C108104 + (C16528 - C16527) * C108000 +
            (C21118 - C21119) * C108105 + (C21624 - C21625) * C108001 +
            (C182 * C21012 - C139824 * C21109) * C108106 +
            (C182 * C21535 - C139824 * C21620) * C108002) *
               C139731 * C140002) *
              C2322 +
          (((C182 * C813 - C139824 * C896) * C108103 +
            (C182 * C1317 - C139824 * C1393) * C107999 +
            (C18427 - C18428) * C108104 + (C19071 - C19072) * C108000 +
            (C18431 - C18432) * C108105 + (C19073 - C19074) * C108001 +
            (C110795 - C110796) * C108106 + (C111205 - C111206) * C108002) *
               C139731 * C1565 +
           ((C18428 - C18427) * C108103 + (C19072 - C19071) * C107999 +
            (C18432 - C18431) * C108104 + (C19074 - C19073) * C108000 +
            (C110796 - C110795) * C108105 + (C111206 - C111205) * C108001 +
            (C139824 * C67086 - C182 * C67001) * C108106 +
            (C139824 * C67589 - C182 * C67510) * C108002) *
               C139731 * C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eezz[113] +=
        (-std::pow(Pi, 2.5) *
         ((((C92947 * C266 - C93448 * C108 - C92947 * C567 + C92797 * C702 +
             C92948 * C1741 - C93449 * C1570 - C92948 * C2074 +
             C139899 * C2230) *
                C5813 +
            (C101980 + C101981) * C5814 + C104489 * C5815) *
               C139731 * C1565 -
           ((C105477 + C105478) * C5815 + (C105479 + C105480) * C5814 +
            (C92948 * C5397 - C93449 * C5273 - C92948 * C5621 +
             C139899 * C5733 + C92947 * C1741 - C93448 * C1570 -
             C92947 * C2074 + C92797 * C2230) *
                C5813) *
               C139731 * C140002) *
              C2322 +
          (((C105480 + C105479) * C5813 + (C105478 + C105477) * C5814 +
            (C92947 * C10630 - C93448 * C10394 - C92947 * C11062 +
             C92797 * C11272 + C92948 * C59589 - C93449 * C59483 -
             C92948 * C59795 + C139899 * C59898) *
                C5815) *
               C139731 * C140002 -
           ((C104502 + C104503) * C5815 + (C101983 + C101982) * C5814 +
            (C101981 + C101980) * C5813) *
               C139731 * C1565) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C92947 * C266 - C93448 * C108 - C92947 * C567 + C92797 * C702 +
             C92948 * C1741 - C93449 * C1570 - C92948 * C2074 +
             C139899 * C2230) *
                C139824 * C47131 +
            (C93487 + C93488) * C139824 * C47132 + C93494 * C47133) *
               C1565 -
           ((C95443 + C95444) * C139824 * C47133 +
            (C95445 + C95446) * C139824 * C47132 +
            (C92948 * C5397 - C93449 * C5273 - C92948 * C5621 +
             C139899 * C5733 + C92947 * C1741 - C93448 * C1570 -
             C92947 * C2074 + C92797 * C2230) *
                C139824 * C47131) *
               C140002) *
              C2322 +
          (((C92947 * C3594 - C93448 * C3438 - C92947 * C3882 + C92797 * C4026 +
             C92948 * C13298 - C93449 * C13126 - C92948 * C13618 +
             C139899 * C13778) *
                C139824 * C47131 +
            (C92947 * C3595 - C93448 * C3439 - C92947 * C3883 + C92797 * C4027 +
             C92948 * C13299 - C93449 * C13127 - C92948 * C13619 +
             C139899 * C13780) *
                C139824 * C47132 +
            (C92947 * C3596 - C93448 * C3440 - C92947 * C3884 + C92797 * C4028 +
             C92948 * C14869 - C93449 * C14659 - C92948 * C15299 +
             C139899 * C15502) *
                C139824 * C47133) *
               C140002 -
           ((C94425 + C94426) * C139824 * C47133 +
            (C94427 + C94428) * C139824 * C47132 +
            (C92948 * C3594 - C93449 * C3438 - C92948 * C3882 +
             C139899 * C4026 + C92947 * C984 - C93448 * C813 - C92947 * C1317 +
             C92797 * C1473) *
                C139824 * C47131) *
               C1565) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C108103 * C266 - C108407 * C108 - C108103 * C567 + C107999 * C702 +
            C108104 * C1741 - C108408 * C1570 - C108104 * C2074 +
            C108000 * C2230 + C108105 * C5397 - C108409 * C5273 -
            C108105 * C5621 + C108001 * C5733 + C108106 * C15912 -
            C108410 * C15623 - C108106 * C16401 + C108002 * C16633) *
               C139824 * C139731 * C1565 -
           (C108106 * C21200 - C108410 * C21012 - C108106 * C21535 +
            C108002 * C21699 + C108105 * C15912 - C108409 * C15623 -
            C108105 * C16401 + C108001 * C16633 + C108104 * C5397 -
            C108408 * C5273 - C108104 * C5621 + C108000 * C5733 +
            C108103 * C1741 - C108407 * C1570 - C108103 * C2074 +
            C107999 * C2230) *
               C139824 * C139731 * C140002) *
              C2322 +
          ((C108103 * C3594 - C108407 * C3438 - C108103 * C3882 +
            C107999 * C4026 + C108104 * C13298 - C108408 * C13126 -
            C108104 * C13618 + C108000 * C13778 + C108105 * C18532 -
            C108409 * C18302 - C108105 * C18962 + C108001 * C19172 +
            C108106 * C67179 - C108410 * C67001 - C108106 * C67510 +
            C108002 * C67671) *
               C139824 * C139731 * C140002 -
           (C108106 * C18532 - C108410 * C18302 - C108106 * C18962 +
            C108002 * C19172 + C108105 * C13298 - C108409 * C13126 -
            C108105 * C13618 + C108001 * C13778 + C108104 * C3594 -
            C108408 * C3438 - C108104 * C3882 + C108000 * C4026 +
            C108103 * C984 - C108407 * C813 - C108103 * C1317 +
            C107999 * C1473) *
               C139824 * C139731 * C1565) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eexx[114] +=
        (-std::pow(Pi, 2.5) *
         (((((C54790 * C114 - C54791 * C108 - C54790 * C115 + C139731 * C126) *
                 C92797 +
             C61654 * C139899) *
                C5813 +
            (C101116 + C101117) * C5814 + C103863 * C5815) *
               C4096 -
           ((C104602 + C104603) * C5815 + (C104604 + C104605) * C5814 +
            (C61655 * C139899 + C61654 * C92797) * C5813) *
               C140002) *
              C139792 * C2324 +
          (((C61656 * C92797 + C61657 * C139899) * C5813 +
            (C60686 * C92797 + C60687 * C139899) * C5814 +
            (C85988 * C92797 + (C54790 * C13136 - C54791 * C13129 -
                                C54790 * C13137 + C139731 * C13141) *
                                   C139899) *
                C5815) *
               C140002 -
           ((C101123 + C101122) * C5815 + (C101121 + C101120) * C5814 +
            (C61656 * C139899 +
             (C54790 * C116 - C54791 * C109 - C54790 * C117 + C139731 * C127) *
                 C92797) *
                C5813) *
               C4096) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47136 * C114 - C47137 * C108 - C47136 * C115 + C47131 * C126 +
             C47138 * C116 - C47139 * C109 - C47138 * C117 + C47132 * C127 +
             C47140 * C118 - C47141 * C110 - C47140 * C119 + C47133 * C128) *
                C92797 +
            (C94563 + C94564 + C94565) * C139899) *
               C139824 * C4096 -
           ((C47140 * C5281 - C47141 * C5275 - C47140 * C5282 + C47133 * C5287 +
             C47138 * C5279 - C47139 * C5274 - C47138 * C5280 + C47132 * C5286 +
             C47136 * C5277 - C47137 * C5273 - C47136 * C5278 +
             C47131 * C5285) *
                C139899 +
            (C94565 + C94564 + C94563) * C92797) *
               C139824 * C140002) *
              C139792 * C2324 +
          (((C94566 + C94567 + C94568) * C92797 +
            (C47136 * C5279 - C47137 * C5274 - C47136 * C5280 + C47131 * C5286 +
             C47138 * C5281 - C47139 * C5275 - C47138 * C5282 + C47132 * C5287 +
             C47140 * C5283 - C47141 * C5276 - C47140 * C5284 +
             C47133 * C5288) *
                C139899) *
               C139824 * C140002 -
           ((C94568 + C94567 + C94566) * C139899 +
            (C47140 * C120 - C47141 * C111 - C47140 * C121 + C47133 * C129 +
             C47138 * C118 - C47139 * C110 - C47138 * C119 + C47132 * C128 +
             C47136 * C116 - C47137 * C109 - C47136 * C117 + C47131 * C127) *
                C92797) *
               C139824 * C4096) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C54790 * C114 - C54791 * C108 - C54790 * C115 + C139731 * C126) *
                C107999 +
            C61654 * C108000 + C61655 * C108001 + C67012 * C108002) *
               C139824 * C4096 -
           ((C54790 * C21014 - C54791 * C21012 - C54790 * C21015 +
             C139731 * C21018) *
                C108002 +
            C67012 * C108001 + C61655 * C108000 + C61654 * C107999) *
               C139824 * C140002) *
              C139792 * C2324 +
          ((C61656 * C107999 + C61657 * C108000 + C109078 * C108001 +
            (C54790 * C21016 - C54791 * C21013 - C54790 * C21017 +
             C139731 * C21019) *
                C108002) *
               C139824 * C140002 -
           (C109078 * C108002 + C61657 * C108001 + C61656 * C108000 +
            (C54790 * C116 - C54791 * C109 - C54790 * C117 + C139731 * C127) *
                C107999) *
               C139824 * C4096) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eexy[114] +=
        (-std::pow(Pi, 2.5) *
         (((((C5813 * C183 - C5894 * C108 + C5814 * C896 - C5895 * C813 +
              C5815 * C2974 - C5896 * C2908) *
                 C54790 +
             (C5813 * C189 - C5894 * C115 + C5814 * C901 - C5895 * C822 +
              C5815 * C2978 - C5896 * C2913) *
                 C139731) *
                C92797 +
            ((C102182 - C102183 + C102184 - C102185 + C102186 - C102187) *
                 C54790 +
             (C102188 - C102189 + C102190 - C102191 + C102192 - C102193) *
                 C139731) *
                C139899) *
               C4096 +
           (((C102183 - C102182 + C102185 - C102184 + C102187 - C102186) *
                 C54790 +
             (C102189 - C102188 + C102191 - C102190 + C102193 - C102192) *
                 C139731) *
                C92797 +
            ((C5894 * C5273 - C5813 * C5339 + C5895 * C13126 - C5814 * C13216 +
              C5896 * C13128 - C5815 * C13217) *
                 C54790 +
             (C5894 * C5278 - C5813 * C5343 + C5895 * C13131 - C5814 * C13220 +
              C5896 * C13135 - C5815 * C13221) *
                 C139731) *
                C139899) *
               C140002) *
              C139792 * C2324 +
          ((((C5899 - C5898 + C5901 - C5900 + C5903 - C5902) * C54790 +
             (C5905 - C5904 + C5907 - C5906 + C5909 - C5908) * C139731) *
                C92797 +
            ((C7870 - C7871 + C7872 - C7873 + C7874 - C7875) * C54790 +
             (C7876 - C7877 + C7878 - C7879 + C7880 - C7881) * C139731) *
                C139899) *
               C4096 +
           (((C7871 - C7870 + C7873 - C7872 + C7875 - C7874) * C54790 +
             (C7877 - C7876 + C7879 - C7878 + C7881 - C7880) * C139731) *
                C92797 +
            ((C5813 * C5340 - C5894 * C5274 + C5814 * C13218 - C5895 * C13127 +
              C5815 * C13219 - C5896 * C13129) *
                 C54790 +
             (C5813 * C5344 - C5894 * C5280 + C5814 * C13222 - C5895 * C13133 +
              C5815 * C13223 - C5896 * C13137) *
                 C139731) *
                C139899) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C139824 * C183 - C182 * C108) * C47136 +
             (C139824 * C189 - C182 * C115) * C47131 + (C196 - C197) * C47138 +
             (C198 - C199) * C47132 + C212 * C47140 + C213 * C47133) *
                C92797 +
            ((C15795 - C15796) * C47136 + (C15797 - C15798) * C47131 +
             C15799 * C47138 + C15800 * C47132 + C29549 * C47140 +
             C29550 * C47133) *
                C139899) *
               C4096 +
           (((C15796 - C15795) * C47136 + (C15798 - C15797) * C47131 +
             C15807 * C47138 + C15808 * C47132 + C31358 * C47140 +
             C31359 * C47133) *
                C92797 +
            ((C15802 - C15801) * C47136 + (C15804 - C15803) * C47131 +
             C15809 * C47138 + C15810 * C47132 + (C13938 - C13939) * C47140 +
             (C13940 - C13941) * C47133) *
                C139899) *
               C140002) *
              C139792 * C2324 +
          ((((C197 - C196) * C47136 + (C199 - C198) * C47131 +
             (C201 - C200) * C47138 + (C203 - C202) * C47132 +
             (C205 - C204) * C47140 + (C207 - C206) * C47133) *
                C92797 +
            (C15807 * C47136 + C15808 * C47131 + C31358 * C47138 +
             C31359 * C47132 + (C1672 - C1673) * C47140 +
             (C1674 - C1675) * C47133) *
                C139899) *
               C4096 +
           ((C15799 * C47136 + C15800 * C47131 + C29549 * C47138 +
             C29550 * C47132 + (C1673 - C1672) * C47140 +
             (C1675 - C1674) * C47133) *
                C92797 +
            (C15805 * C47136 + C15806 * C47131 + (C13939 - C13938) * C47138 +
             (C13941 - C13940) * C47132 +
             (C139824 * C5342 - C182 * C5276) * C47140 +
             (C139824 * C5346 - C182 * C5284) * C47133) *
                C139899) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C139824 * C183 - C182 * C108) * C54790 +
             (C139824 * C189 - C182 * C115) * C139731) *
                C107999 +
            ((C15795 - C15796) * C54790 + (C15797 - C15798) * C139731) *
                C108000 +
            (C21114 * C54790 + C21115 * C139731) * C108001 +
            ((C21119 - C21118) * C54790 + (C21121 - C21120) * C139731) *
                C108002) *
               C4096 +
           (((C15796 - C15795) * C54790 + (C15798 - C15797) * C139731) *
                C107999 +
            ((C15802 - C15801) * C54790 + (C15804 - C15803) * C139731) *
                C108000 +
            ((C21118 - C21119) * C54790 + (C21120 - C21121) * C139731) *
                C108001 +
            ((C182 * C21012 - C139824 * C21109) * C54790 +
             (C182 * C21015 - C139824 * C21111) * C139731) *
                C108002) *
               C140002) *
              C139792 * C2324 +
          ((((C197 - C196) * C54790 + (C199 - C198) * C139731) * C107999 +
            (C15807 * C54790 + C15808 * C139731) * C108000 +
            (C15809 * C54790 + C15810 * C139731) * C108001 +
            ((C15811 - C15812) * C54790 + (C15813 - C15814) * C139731) *
                C108002) *
               C4096 +
           ((C15799 * C54790 + C15800 * C139731) * C107999 +
            (C15805 * C54790 + C15806 * C139731) * C108000 +
            ((C15812 - C15811) * C54790 + (C15814 - C15813) * C139731) *
                C108001 +
            ((C139824 * C21110 - C182 * C21013) * C54790 +
             (C139824 * C21112 - C182 * C21017) * C139731) *
                C108002) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eexz[114] +=
        (-std::pow(Pi, 2.5) *
         (((((C92797 * C266 - C92947 * C108 + C139899 * C1741 -
              C92948 * C1570) *
                 C54790 +
             (C92797 * C272 - C92947 * C115 + C139899 * C1746 -
              C92948 * C1579) *
                 C139731) *
                C5813 +
            ((C101320 - C101321 + C101322 - C101323) * C54790 +
             (C101324 - C101325 + C101326 - C101327) * C139731) *
                C5814 +
            C104030 * C5815) *
               C4096 +
           (((C92947 * C1570 - C92797 * C1741 + C92948 * C5273 -
              C139899 * C5397) *
                 C54790 +
             (C92947 * C1579 - C92797 * C1746 + C92948 * C5278 -
              C139899 * C5401) *
                 C139731) *
                C5813 +
            ((C104814 - C104815 + C104816 - C104817) * C54790 +
             (C104818 - C104819 + C104820 - C104821) * C139731) *
                C5814 +
            ((C104822 - C104823 + C104824 - C104825) * C54790 +
             (C104826 - C104827 + C104828 - C104829) * C139731) *
                C5815) *
               C140002) *
              C139792 * C2324 +
          ((((C92951 - C92950 + C92953 - C92952) * C54790 +
             (C92955 - C92954 + C92957 - C92956) * C139731) *
                C5813 +
            ((C93789 - C93790 + C93791 - C93792) * C54790 +
             (C93793 - C93794 + C93795 - C93796) * C139731) *
                C5814 +
            ((C101336 - C101337 + C101338 - C101339) * C54790 +
             (C101340 - C101341 + C101342 - C101343) * C139731) *
                C5815) *
               C4096 +
           (((C94766 - C94765 + C94768 - C94767) * C54790 +
             (C94770 - C94769 + C94772 - C94771) * C139731) *
                C5813 +
            ((C92797 * C3595 - C92947 * C3439 + C139899 * C13299 -
              C92948 * C13127) *
                 C54790 +
             (C92797 * C3599 - C92947 * C3445 + C139899 * C13303 -
              C92948 * C13133) *
                 C139731) *
                C5814 +
            ((C92797 * C7980 - C92947 * C7753 + C139899 * C13301 -
              C92948 * C13129) *
                 C54790 +
             (C92797 * C7983 - C92947 * C7757 + C139899 * C13305 -
              C92948 * C13137) *
                 C139731) *
                C5815) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C92797 * C266 - C92947 * C108 + C139899 * C1741 - C92948 * C1570) *
                C47136 +
            (C92797 * C272 - C92947 * C115 + C139899 * C1746 - C92948 * C1579) *
                C47131 +
            (C92950 - C92951 + C92952 - C92953) * C47138 +
            (C92954 - C92955 + C92956 - C92957) * C47132 + C92978 * C47140 +
            C92979 * C47133) *
               C139824 * C4096 +
           ((C92947 * C1570 - C92797 * C1741 + C92948 * C5273 -
             C139899 * C5397) *
                C47136 +
            (C92947 * C1579 - C92797 * C1746 + C92948 * C5278 -
             C139899 * C5401) *
                C47131 +
            (C94765 - C94766 + C94767 - C94768) * C47138 +
            (C94769 - C94770 + C94771 - C94772) * C47132 +
            (C94773 - C94774 + C94775 - C94776) * C47140 +
            (C94777 - C94778 + C94779 - C94780) * C47133) *
               C139824 * C140002) *
              C139792 * C2324 +
          (((C92951 - C92950 + C92953 - C92952) * C47136 +
            (C92955 - C92954 + C92957 - C92956) * C47131 +
            (C92959 - C92958 + C92961 - C92960) * C47138 +
            (C92963 - C92962 + C92965 - C92964) * C47132 +
            (C92966 - C92967 + C92968 - C92969) * C47140 +
            (C92970 - C92971 + C92972 - C92973) * C47133) *
               C139824 * C4096 +
           ((C94766 - C94765 + C94768 - C94767) * C47136 +
            (C94770 - C94769 + C94772 - C94771) * C47131 +
            (C94774 - C94773 + C94776 - C94775) * C47138 +
            (C94778 - C94777 + C94780 - C94779) * C47132 +
            (C92797 * C1744 - C92947 * C1567 + C139899 * C5400 -
             C92948 * C5276) *
                C47140 +
            (C92797 * C1749 - C92947 * C1573 + C139899 * C5404 -
             C92948 * C5284) *
                C47133) *
               C139824 * C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C107999 * C266 - C108103 * C108 + C108000 * C1741 -
             C108104 * C1570 + C108001 * C5397 - C108105 * C5273 +
             C108002 * C15912 - C108106 * C15623) *
                C54790 +
            (C107999 * C272 - C108103 * C115 + C108000 * C1746 -
             C108104 * C1579 + C108001 * C5401 - C108105 * C5278 +
             C108002 * C15915 - C108106 * C15628) *
                C139731) *
               C139824 * C4096 +
           ((C108103 * C1570 - C107999 * C1741 + C108104 * C5273 -
             C108000 * C5397 + C108105 * C15623 - C108001 * C15912 +
             C108106 * C21012 - C108002 * C21200) *
                C54790 +
            (C108103 * C1579 - C107999 * C1746 + C108104 * C5278 -
             C108000 * C5401 + C108105 * C15628 - C108001 * C15915 +
             C108106 * C21015 - C108002 * C21202) *
                C139731) *
               C139824 * C140002) *
              C139792 * C2324 +
          (((C108103 * C109 - C107999 * C267 + C108104 * C1569 -
             C108000 * C1742 + C108105 * C5274 - C108001 * C5398 +
             C108106 * C15622 - C108002 * C15913) *
                C54790 +
            (C108103 * C117 - C107999 * C273 + C108104 * C1577 -
             C108000 * C1747 + C108105 * C5280 - C108001 * C5402 +
             C108106 * C15626 - C108002 * C15916) *
                C139731) *
               C139824 * C4096 +
           ((C107999 * C1742 - C108103 * C1569 + C108000 * C5398 -
             C108104 * C5274 + C108001 * C15913 - C108105 * C15622 +
             C108002 * C21201 - C108106 * C21013) *
                C54790 +
            (C107999 * C1747 - C108103 * C1577 + C108000 * C5402 -
             C108104 * C5280 + C108001 * C15916 - C108105 * C15626 +
             C108002 * C21203 - C108106 * C21017) *
                C139731) *
               C139824 * C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[114] +=
        (-std::pow(Pi, 2.5) *
         (((((C139731 * C114 - C54790 * C108) * C5894 +
             (C139731 * C354 - C54790 * C348) * C5813 +
             (C55513 - C55514) * C5895 + (C55515 - C55516) * C5814 +
             C57297 * C5896 + C57298 * C5815) *
                C92797 +
            ((C61976 - C61977) * C5894 + (C61978 - C61979) * C5813 +
             C64587 * C5895 + C64588 * C5814 + C88899 * C5896 +
             C88900 * C5815) *
                C139899) *
               C4096 +
           (((C61977 - C61976) * C5894 + (C61979 - C61978) * C5813 +
             C64591 * C5895 + C64592 * C5814 + C89717 * C5896 +
             C89718 * C5815) *
                C92797 +
            ((C61981 - C61980) * C5894 + (C61983 - C61982) * C5813 +
             C64593 * C5895 + C64594 * C5814 + (C63744 - C63745) * C5896 +
             (C63746 - C63747) * C5815) *
                C139899) *
               C140002) *
              C139792 * C2324 +
          ((((C54790 * C109 - C139731 * C116) * C5894 +
             (C54790 * C349 - C139731 * C355) * C5813 +
             (C55525 - C55526) * C5895 + (C55527 - C55528) * C5814 +
             (C55529 - C55530) * C5896 + (C55531 - C55532) * C5815) *
                C92797 +
            ((C61984 - C61985) * C5894 + (C61986 - C61987) * C5813 +
             (C61001 - C61002) * C5895 + (C61003 - C61004) * C5814 +
             (C86284 - C86285) * C5896 + (C86286 - C86287) * C5815) *
                C139899) *
               C4096 +
           (((C61985 - C61984) * C5894 + (C61987 - C61986) * C5813 +
             (C61002 - C61001) * C5895 + (C61004 - C61003) * C5814 +
             (C86285 - C86284) * C5896 + (C86287 - C86286) * C5815) *
                C92797 +
            ((C61989 - C61988) * C5894 + (C61991 - C61990) * C5813 +
             (C61006 - C61005) * C5895 + (C61008 - C61007) * C5814 +
             (C139731 * C13136 - C54790 * C13129) * C5896 +
             (C139731 * C13387 - C54790 * C13383) * C5815) *
                C139899) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47131 * C114 - C47136 * C108 + C47132 * C116 - C47138 * C109 +
              C47133 * C118 - C47140 * C110) *
                 C182 +
             (C47131 * C354 - C47136 * C348 + C47132 * C355 - C47138 * C349 +
              C47133 * C356 - C47140 * C350) *
                 C139824) *
                C92797 +
            ((C94879 - C94880 + C94881 - C94882 + C94883 - C94884) * C182 +
             (C94885 - C94886 + C94887 - C94888 + C94889 - C94890) * C139824) *
                C139899) *
               C4096 +
           (((C94880 - C94879 + C94882 - C94881 + C94884 - C94883) * C182 +
             (C94886 - C94885 + C94888 - C94887 + C94890 - C94889) * C139824) *
                C92797 +
            ((C47136 * C5273 - C47131 * C5277 + C47138 * C5274 -
              C47132 * C5279 + C47140 * C5275 - C47133 * C5281) *
                 C182 +
             (C47136 * C5455 - C47131 * C5459 + C47138 * C5456 -
              C47132 * C5460 + C47140 * C5457 - C47133 * C5461) *
                 C139824) *
                C139899) *
               C140002) *
              C139792 * C2324 +
          ((((C47136 * C109 - C47131 * C116 + C47138 * C110 - C47132 * C118 +
              C47140 * C111 - C47133 * C120) *
                 C182 +
             (C47136 * C349 - C47131 * C355 + C47138 * C350 - C47132 * C356 +
              C47140 * C351 - C47133 * C357) *
                 C139824) *
                C92797 +
            ((C94891 - C94892 + C94893 - C94894 + C94895 - C94896) * C182 +
             (C94897 - C94898 + C94899 - C94900 + C94901 - C94902) * C139824) *
                C139899) *
               C4096 +
           (((C94892 - C94891 + C94894 - C94893 + C94896 - C94895) * C182 +
             (C94898 - C94897 + C94900 - C94899 + C94902 - C94901) * C139824) *
                C92797 +
            ((C47131 * C5279 - C47136 * C5274 + C47132 * C5281 -
              C47138 * C5275 + C47133 * C5283 - C47140 * C5276) *
                 C182 +
             (C47131 * C5460 - C47136 * C5456 + C47132 * C5461 -
              C47138 * C5457 + C47133 * C5462 - C47140 * C5458) *
                 C139824) *
                C139899) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C139731 * C114 - C54790 * C108) * C182 +
             (C139731 * C354 - C54790 * C348) * C139824) *
                C107999 +
            ((C61976 - C61977) * C182 + (C61978 - C61979) * C139824) * C108000 +
            (C67258 * C182 + C67259 * C139824) * C108001 +
            ((C67263 - C67262) * C182 + (C67265 - C67264) * C139824) *
                C108002) *
               C4096 +
           (((C61977 - C61976) * C182 + (C61979 - C61978) * C139824) * C107999 +
            ((C61981 - C61980) * C182 + (C61983 - C61982) * C139824) * C108000 +
            ((C67262 - C67263) * C182 + (C67264 - C67265) * C139824) * C108001 +
            ((C54790 * C21012 - C139731 * C21014) * C182 +
             (C54790 * C21278 - C139731 * C21280) * C139824) *
                C108002) *
               C140002) *
              C139792 * C2324 +
          ((((C54790 * C109 - C139731 * C116) * C182 +
             (C54790 * C349 - C139731 * C355) * C139824) *
                C107999 +
            ((C61984 - C61985) * C182 + (C61986 - C61987) * C139824) * C108000 +
            ((C61988 - C61989) * C182 + (C61990 - C61991) * C139824) * C108001 +
            ((C109277 - C109278) * C182 + (C109279 - C109280) * C139824) *
                C108002) *
               C4096 +
           (((C61985 - C61984) * C182 + (C61987 - C61986) * C139824) * C107999 +
            ((C61989 - C61988) * C182 + (C61991 - C61990) * C139824) * C108000 +
            ((C109278 - C109277) * C182 + (C109280 - C109279) * C139824) *
                C108001 +
            ((C139731 * C21016 - C54790 * C21013) * C182 +
             (C139731 * C21281 - C54790 * C21279) * C139824) *
                C108002) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[114] +=
        (-std::pow(Pi, 2.5) *
         ((((C5894 * C183 - C6151 * C108 - C5894 * C348 + C5813 * C411 +
             C5895 * C896 - C6152 * C813 - C5895 * C1072 + C5814 * C1151 +
             C5896 * C2974 - C6153 * C2908 - C5896 * C3090 + C5815 * C3148) *
                C139731 * C92797 +
            (C102506 + C102507 + C102508) * C139731 * C139899) *
               C4096 -
           ((C5896 * C13217 - C6153 * C13128 - C5896 * C13382 + C5815 * C13463 +
             C5895 * C13216 - C6152 * C13126 - C5895 * C13380 + C5814 * C13462 +
             C5894 * C5339 - C6151 * C5273 - C5894 * C5455 + C5813 * C5513) *
                C139731 * C139899 +
            (C102508 + C102507 + C102506) * C139731 * C92797) *
               C140002) *
              C139792 * C2324 +
          (((C8219 + C8218 + C8217) * C139731 * C92797 +
            (C5894 * C5340 - C6151 * C5274 - C5894 * C5456 + C5813 * C5514 +
             C5895 * C13218 - C6152 * C13127 - C5895 * C13381 + C5814 * C13464 +
             C5896 * C13219 - C6153 * C13129 - C5896 * C13383 +
             C5815 * C13465) *
                C139731 * C139899) *
               C140002 -
           ((C8217 + C8218 + C8219) * C139731 * C139899 +
            (C6193 + C6192 + C6191) * C139731 * C92797) *
               C4096) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C182 * C183 - C410 * C108 - C182 * C348 + C139824 * C411) *
                 C47131 +
             C442 * C47132 + C443 * C47133) *
                C92797 +
            (C95001 + C95002 + C95003) * C139899) *
               C4096 -
           ((C14204 * C47133 + C14203 * C47132 + C16193 * C47131) * C139899 +
            (C95003 + C95002 + C95001) * C92797) *
               C140002) *
              C139792 * C2324 +
          (((C95004 + C95005 + C95006) * C92797 +
            (C14203 * C47131 + C14204 * C47132 +
             (C182 * C5342 - C410 * C5276 - C182 * C5458 + C139824 * C5516) *
                 C47133) *
                C139899) *
               C140002 -
           ((C95006 + C95005 + C95004) * C139899 +
            (C444 * C47133 + C443 * C47132 + C442 * C47131) * C92797) *
               C4096) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C182 * C183 - C410 * C108 - C182 * C348 + C139824 * C411) *
                C139731 * C107999 +
            C109347 * C108000 + C109348 * C108001 + C109349 * C108002) *
               C4096 -
           ((C182 * C21109 - C410 * C21012 - C182 * C21278 + C139824 * C21373) *
                C139731 * C108002 +
            C109349 * C108001 + C109348 * C108000 + C109347 * C107999) *
               C140002) *
              C139792 * C2324 +
          ((C109350 * C107999 + C109351 * C108000 + C109352 * C108001 +
            (C182 * C21110 - C410 * C21013 - C182 * C21279 + C139824 * C21374) *
                C139731 * C108002) *
               C140002 -
           (C109352 * C108002 + C109351 * C108001 + C109350 * C108000 +
            C442 * C139731 * C107999) *
               C4096) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[114] +=
        (-std::pow(Pi, 2.5) *
         ((((C92797 * C266 - C92947 * C108 + C139899 * C1741 - C92948 * C1570) *
                C5894 +
            (C92797 * C495 - C92947 * C348 + C139899 * C1997 - C92948 * C1829) *
                C5813 +
            (C101320 - C101321 + C101322 - C101323) * C5895 +
            (C101638 - C101639 + C101640 - C101641) * C5814 + C104026 * C5896 +
            C104259 * C5815) *
               C139731 * C4096 +
           ((C92947 * C1570 - C92797 * C1741 + C92948 * C5273 -
             C139899 * C5397) *
                C5894 +
            (C92947 * C1829 - C92797 * C1997 + C92948 * C5455 -
             C139899 * C5567) *
                C5813 +
            (C104814 - C104815 + C104816 - C104817) * C5895 +
            (C105145 - C105146 + C105147 - C105148) * C5814 +
            (C104822 - C104823 + C104824 - C104825) * C5896 +
            (C105149 - C105150 + C105151 - C105152) * C5815) *
               C139731 * C140002) *
              C139792 * C2324 +
          (((C92951 - C92950 + C92953 - C92952) * C5894 +
            (C93203 - C93202 + C93205 - C93204) * C5813 +
            (C93789 - C93790 + C93791 - C93792) * C5895 +
            (C94099 - C94100 + C94101 - C94102) * C5814 +
            (C101336 - C101337 + C101338 - C101339) * C5896 +
            (C101646 - C101647 + C101648 - C101649) * C5815) *
               C139731 * C4096 +
           ((C94766 - C94765 + C94768 - C94767) * C5894 +
            (C95106 - C95105 + C95108 - C95107) * C5813 +
            (C92797 * C3595 - C92947 * C3439 + C139899 * C13299 -
             C92948 * C13127) *
                C5895 +
            (C92797 * C3813 - C92947 * C3669 + C139899 * C13542 -
             C92948 * C13381) *
                C5814 +
            (C92797 * C7980 - C92947 * C7753 + C139899 * C13301 -
             C92948 * C13129) *
                C5896 +
            (C92797 * C8318 - C92947 * C8092 + C139899 * C13543 -
             C92948 * C13383) *
                C5815) *
               C139731 * C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C92797 * C266 - C92947 * C108 + C139899 * C1741 -
              C92948 * C1570) *
                 C182 +
             (C92797 * C495 - C92947 * C348 + C139899 * C1997 -
              C92948 * C1829) *
                 C139824) *
                C47131 +
            ((C92950 - C92951 + C92952 - C92953) * C182 +
             (C93202 - C93203 + C93204 - C93205) * C139824) *
                C47132 +
            C93219 * C47133) *
               C4096 +
           (((C92947 * C1570 - C92797 * C1741 + C92948 * C5273 -
              C139899 * C5397) *
                 C182 +
             (C92947 * C1829 - C92797 * C1997 + C92948 * C5455 -
              C139899 * C5567) *
                 C139824) *
                C47131 +
            ((C94765 - C94766 + C94767 - C94768) * C182 +
             (C95105 - C95106 + C95107 - C95108) * C139824) *
                C47132 +
            ((C94773 - C94774 + C94775 - C94776) * C182 +
             (C95109 - C95110 + C95111 - C95112) * C139824) *
                C47133) *
               C140002) *
              C139792 * C2324 +
          ((((C92951 - C92950 + C92953 - C92952) * C182 +
             (C93203 - C93202 + C93205 - C93204) * C139824) *
                C47131 +
            ((C92959 - C92958 + C92961 - C92960) * C182 +
             (C93208 - C93207 + C93210 - C93209) * C139824) *
                C47132 +
            ((C92966 - C92967 + C92968 - C92969) * C182 +
             (C93211 - C93212 + C93213 - C93214) * C139824) *
                C47133) *
               C4096 +
           (((C94766 - C94765 + C94768 - C94767) * C182 +
             (C95106 - C95105 + C95108 - C95107) * C139824) *
                C47131 +
            ((C94774 - C94773 + C94776 - C94775) * C182 +
             (C95110 - C95109 + C95112 - C95111) * C139824) *
                C47132 +
            ((C92797 * C1744 - C92947 * C1567 + C139899 * C5400 -
              C92948 * C5276) *
                 C182 +
             (C92797 * C2000 - C92947 * C1832 + C139899 * C5570 -
              C92948 * C5458) *
                 C139824) *
                C47133) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C107999 * C266 - C108103 * C108 + C108000 * C1741 -
             C108104 * C1570 + C108001 * C5397 - C108105 * C5273 +
             C108002 * C15912 - C108106 * C15623) *
                C182 +
            (C107999 * C495 - C108103 * C348 + C108000 * C1997 -
             C108104 * C1829 + C108001 * C5567 - C108105 * C5455 +
             C108002 * C16294 - C108106 * C16028) *
                C139824) *
               C139731 * C4096 +
           ((C108103 * C1570 - C107999 * C1741 + C108104 * C5273 -
             C108000 * C5397 + C108105 * C15623 - C108001 * C15912 +
             C108106 * C21012 - C108002 * C21200) *
                C182 +
            (C108103 * C1829 - C107999 * C1997 + C108104 * C5455 -
             C108000 * C5567 + C108105 * C16028 - C108001 * C16294 +
             C108106 * C21278 - C108002 * C21459) *
                C139824) *
               C139731 * C140002) *
              C139792 * C2324 +
          (((C108103 * C109 - C107999 * C267 + C108104 * C1569 -
             C108000 * C1742 + C108105 * C5274 - C108001 * C5398 +
             C108106 * C15622 - C108002 * C15913) *
                C182 +
            (C108103 * C349 - C107999 * C496 + C108104 * C1830 -
             C108000 * C1998 + C108105 * C5456 - C108001 * C5568 +
             C108106 * C16029 - C108002 * C16295) *
                C139824) *
               C139731 * C4096 +
           ((C107999 * C1742 - C108103 * C1569 + C108000 * C5398 -
             C108104 * C5274 + C108001 * C15913 - C108105 * C15622 +
             C108002 * C21201 - C108106 * C21013) *
                C182 +
            (C107999 * C1998 - C108103 * C1830 + C108000 * C5568 -
             C108104 * C5456 + C108001 * C16295 - C108105 * C16029 +
             C108002 * C21460 - C108106 * C21279) *
                C139824) *
               C139731 * C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eezx[114] +=
        (-std::pow(Pi, 2.5) *
         (((((C139731 * C114 - C54790 * C108) * C92947 +
             (C139731 * C573 - C54790 * C567) * C92797 +
             (C61976 - C61977) * C92948 + (C62328 - C62329) * C139899) *
                C5813 +
            ((C55513 - C55514) * C92947 + (C55735 - C55736) * C92797 +
             C64587 * C92948 + C64931 * C139899) *
                C5814 +
            C104340 * C5815) *
               C4096 +
           (((C61977 - C61976) * C92947 + (C62329 - C62328) * C92797 +
             (C61981 - C61980) * C92948 + (C62331 - C62330) * C139899) *
                C5813 +
            (C64591 * C92947 + C64933 * C92797 + C64593 * C92948 +
             C64934 * C139899) *
                C5814 +
            (C89717 * C92947 + C90038 * C92797 + (C63744 - C63745) * C92948 +
             (C63976 - C63977) * C139899) *
                C5815) *
               C140002) *
              C139792 * C2324 +
          ((((C54790 * C109 - C139731 * C116) * C92947 +
             (C54790 * C568 - C139731 * C574) * C92797 +
             (C61984 - C61985) * C92948 + (C62332 - C62333) * C139899) *
                C5813 +
            ((C55525 - C55526) * C92947 + (C55741 - C55742) * C92797 +
             (C61001 - C61002) * C92948 + (C61311 - C61312) * C139899) *
                C5814 +
            ((C55529 - C55530) * C92947 + (C55743 - C55744) * C92797 +
             (C86284 - C86285) * C92948 + (C86582 - C86583) * C139899) *
                C5815) *
               C4096 +
           (((C61985 - C61984) * C92947 + (C62333 - C62332) * C92797 +
             (C61989 - C61988) * C92948 + (C62335 - C62334) * C139899) *
                C5813 +
            ((C61002 - C61001) * C92947 + (C61312 - C61311) * C92797 +
             (C61006 - C61005) * C92948 + (C61314 - C61313) * C139899) *
                C5814 +
            ((C86285 - C86284) * C92947 + (C86583 - C86582) * C92797 +
             (C139731 * C13136 - C54790 * C13129) * C92948 +
             (C139731 * C13625 - C54790 * C13621) * C139899) *
                C5815) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47131 * C114 - C47136 * C108 + C47132 * C116 - C47138 * C109 +
             C47133 * C118 - C47140 * C110) *
                C92947 +
            (C47131 * C573 - C47136 * C567 + C47132 * C574 - C47138 * C568 +
             C47133 * C575 - C47140 * C569) *
                C92797 +
            (C94879 - C94880 + C94881 - C94882 + C94883 - C94884) * C92948 +
            (C95211 - C95212 + C95213 - C95214 + C95215 - C95216) * C139899) *
               C139824 * C4096 +
           ((C94880 - C94879 + C94882 - C94881 + C94884 - C94883) * C92947 +
            (C95212 - C95211 + C95214 - C95213 + C95216 - C95215) * C92797 +
            (C47136 * C5273 - C47131 * C5277 + C47138 * C5274 - C47132 * C5279 +
             C47140 * C5275 - C47133 * C5281) *
                C92948 +
            (C47136 * C5621 - C47131 * C5625 + C47138 * C5622 - C47132 * C5626 +
             C47140 * C5623 - C47133 * C5627) *
                C139899) *
               C139824 * C140002) *
              C139792 * C2324 +
          (((C47136 * C109 - C47131 * C116 + C47138 * C110 - C47132 * C118 +
             C47140 * C111 - C47133 * C120) *
                C92947 +
            (C47136 * C568 - C47131 * C574 + C47138 * C569 - C47132 * C575 +
             C47140 * C570 - C47133 * C576) *
                C92797 +
            (C94891 - C94892 + C94893 - C94894 + C94895 - C94896) * C92948 +
            (C95217 - C95218 + C95219 - C95220 + C95221 - C95222) * C139899) *
               C139824 * C4096 +
           ((C94892 - C94891 + C94894 - C94893 + C94896 - C94895) * C92947 +
            (C95218 - C95217 + C95220 - C95219 + C95222 - C95221) * C92797 +
            (C47131 * C5279 - C47136 * C5274 + C47132 * C5281 - C47138 * C5275 +
             C47133 * C5283 - C47140 * C5276) *
                C92948 +
            (C47131 * C5626 - C47136 * C5622 + C47132 * C5627 - C47138 * C5623 +
             C47133 * C5628 - C47140 * C5624) *
                C139899) *
               C139824 * C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C139731 * C114 - C54790 * C108) * C108103 +
            (C139731 * C573 - C54790 * C567) * C107999 +
            (C61976 - C61977) * C108104 + (C62328 - C62329) * C108000 +
            C67258 * C108105 + C67513 * C108001 + (C67263 - C67262) * C108106 +
            (C67515 - C67514) * C108002) *
               C139824 * C4096 +
           ((C61977 - C61976) * C108103 + (C62329 - C62328) * C107999 +
            (C61981 - C61980) * C108104 + (C62331 - C62330) * C108000 +
            (C67262 - C67263) * C108105 + (C67514 - C67515) * C108001 +
            (C54790 * C21012 - C139731 * C21014) * C108106 +
            (C54790 * C21535 - C139731 * C21537) * C108002) *
               C139824 * C140002) *
              C139792 * C2324 +
          (((C54790 * C109 - C139731 * C116) * C108103 +
            (C54790 * C568 - C139731 * C574) * C107999 +
            (C61984 - C61985) * C108104 + (C62332 - C62333) * C108000 +
            (C61988 - C61989) * C108105 + (C62334 - C62335) * C108001 +
            (C109277 - C109278) * C108106 + (C109485 - C109486) * C108002) *
               C139824 * C4096 +
           ((C61985 - C61984) * C108103 + (C62333 - C62332) * C107999 +
            (C61989 - C61988) * C108104 + (C62335 - C62334) * C108000 +
            (C109278 - C109277) * C108105 + (C109486 - C109485) * C108001 +
            (C139731 * C21016 - C54790 * C21013) * C108106 +
            (C139731 * C21538 - C54790 * C21536) * C108002) *
               C139824 * C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eezy[114] +=
        (-std::pow(Pi, 2.5) *
         ((((C5813 * C183 - C5894 * C108 + C5814 * C896 - C5895 * C813 +
             C5815 * C2974 - C5896 * C2908) *
                C92947 +
            (C5813 * C629 - C5894 * C567 + C5814 * C1393 - C5895 * C1317 +
             C5815 * C3314 - C5896 * C3256) *
                C92797 +
            (C102182 - C102183 + C102184 - C102185 + C102186 - C102187) *
                C92948 +
            (C102803 - C102804 + C102805 - C102806 + C102807 - C102808) *
                C139899) *
               C139731 * C4096 +
           ((C102183 - C102182 + C102185 - C102184 + C102187 - C102186) *
                C92947 +
            (C102804 - C102803 + C102806 - C102805 + C102808 - C102807) *
                C92797 +
            (C5894 * C5273 - C5813 * C5339 + C5895 * C13126 - C5814 * C13216 +
             C5896 * C13128 - C5815 * C13217) *
                C92948 +
            (C5894 * C5621 - C5813 * C5679 + C5895 * C13618 - C5814 * C13700 +
             C5896 * C13620 - C5815 * C13701) *
                C139899) *
               C139731 * C140002) *
              C139792 * C2324 +
          (((C5899 - C5898 + C5901 - C5900 + C5903 - C5902) * C92947 +
            (C6424 - C6423 + C6426 - C6425 + C6428 - C6427) * C92797 +
            (C7870 - C7871 + C7872 - C7873 + C7874 - C7875) * C92948 +
            (C8530 - C8531 + C8532 - C8533 + C8534 - C8535) * C139899) *
               C139731 * C4096 +
           ((C7871 - C7870 + C7873 - C7872 + C7875 - C7874) * C92947 +
            (C8531 - C8530 + C8533 - C8532 + C8535 - C8534) * C92797 +
            (C5813 * C5340 - C5894 * C5274 + C5814 * C13218 - C5895 * C13127 +
             C5815 * C13219 - C5896 * C13129) *
                C92948 +
            (C5813 * C5680 - C5894 * C5622 + C5814 * C13702 - C5895 * C13619 +
             C5815 * C13703 - C5896 * C13621) *
                C139899) *
               C139731 * C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C139824 * C183 - C182 * C108) * C92947 +
             (C139824 * C629 - C182 * C567) * C92797 +
             (C15795 - C15796) * C92948 + (C16525 - C16526) * C139899) *
                C47131 +
            ((C196 - C197) * C92947 + (C636 - C637) * C92797 + C15799 * C92948 +
             C16529 * C139899) *
                C47132 +
            C93374 * C47133) *
               C4096 +
           (((C15796 - C15795) * C92947 + (C16526 - C16525) * C92797 +
             (C15802 - C15801) * C92948 + (C16528 - C16527) * C139899) *
                C47131 +
            (C15807 * C92947 + C16531 * C92797 + C15809 * C92948 +
             C16532 * C139899) *
                C47132 +
            (C31358 * C92947 + C32014 * C92797 + (C13938 - C13939) * C92948 +
             (C14441 - C14442) * C139899) *
                C47133) *
               C140002) *
              C139792 * C2324 +
          ((((C197 - C196) * C92947 + (C637 - C636) * C92797 + C15807 * C92948 +
             C16531 * C139899) *
                C47131 +
            ((C201 - C200) * C92947 + (C640 - C639) * C92797 + C31358 * C92948 +
             C32014 * C139899) *
                C47132 +
            ((C205 - C204) * C92947 + (C643 - C642) * C92797 +
             (C1672 - C1673) * C92948 + (C2160 - C2161) * C139899) *
                C47133) *
               C4096 +
           ((C15799 * C92947 + C16529 * C92797 + C15805 * C92948 +
             C16530 * C139899) *
                C47131 +
            (C29549 * C92947 + C30048 * C92797 + (C13939 - C13938) * C92948 +
             (C14442 - C14441) * C139899) *
                C47132 +
            ((C1673 - C1672) * C92947 + (C2161 - C2160) * C92797 +
             (C139824 * C5342 - C182 * C5276) * C92948 +
             (C139824 * C5682 - C182 * C5624) * C139899) *
                C47133) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C139824 * C183 - C182 * C108) * C108103 +
            (C139824 * C629 - C182 * C567) * C107999 +
            (C15795 - C15796) * C108104 + (C16525 - C16526) * C108000 +
            C21114 * C108105 + C21623 * C108001 + (C21119 - C21118) * C108106 +
            (C21625 - C21624) * C108002) *
               C139731 * C4096 +
           ((C15796 - C15795) * C108103 + (C16526 - C16525) * C107999 +
            (C15802 - C15801) * C108104 + (C16528 - C16527) * C108000 +
            (C21118 - C21119) * C108105 + (C21624 - C21625) * C108001 +
            (C182 * C21012 - C139824 * C21109) * C108106 +
            (C182 * C21535 - C139824 * C21620) * C108002) *
               C139731 * C140002) *
              C139792 * C2324 +
          (((C197 - C196) * C108103 + (C637 - C636) * C107999 +
            C15807 * C108104 + C16531 * C108000 + C15809 * C108105 +
            C16532 * C108001 + (C15811 - C15812) * C108106 +
            (C16533 - C16534) * C108002) *
               C139731 * C4096 +
           (C15799 * C108103 + C16529 * C107999 + C15805 * C108104 +
            C16530 * C108000 + (C15812 - C15811) * C108105 +
            (C16534 - C16533) * C108001 +
            (C139824 * C21110 - C182 * C21013) * C108106 +
            (C139824 * C21621 - C182 * C21536) * C108002) *
               C139731 * C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eezz[114] +=
        (-std::pow(Pi, 2.5) *
         ((((C92947 * C266 - C93448 * C108 - C92947 * C567 + C92797 * C702 +
             C92948 * C1741 - C93449 * C1570 - C92948 * C2074 +
             C139899 * C2230) *
                C5813 +
            (C101980 + C101981) * C5814 + C104489 * C5815) *
               C139731 * C4096 -
           ((C105477 + C105478) * C5815 + (C105479 + C105480) * C5814 +
            (C92948 * C5397 - C93449 * C5273 - C92948 * C5621 +
             C139899 * C5733 + C92947 * C1741 - C93448 * C1570 -
             C92947 * C2074 + C92797 * C2230) *
                C5813) *
               C139731 * C140002) *
              C139792 * C2324 +
          (((C95446 + C95445) * C5813 +
            (C92947 * C3595 - C93448 * C3439 - C92947 * C3883 + C92797 * C4027 +
             C92948 * C13299 - C93449 * C13127 - C92948 * C13619 +
             C139899 * C13780) *
                C5814 +
            (C92947 * C7980 - C93448 * C7753 - C92947 * C8423 + C92797 * C8633 +
             C92948 * C13301 - C93449 * C13129 - C92948 * C13621 +
             C139899 * C13781) *
                C5815) *
               C139731 * C140002 -
           ((C101985 + C101984) * C5815 + (C94427 + C94428) * C5814 +
            (C93488 + C93487) * C5813) *
               C139731 * C4096) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C92947 * C266 - C93448 * C108 - C92947 * C567 + C92797 * C702 +
             C92948 * C1741 - C93449 * C1570 - C92948 * C2074 +
             C139899 * C2230) *
                C139824 * C47131 +
            (C93487 + C93488) * C139824 * C47132 + C93494 * C47133) *
               C4096 -
           ((C95443 + C95444) * C139824 * C47133 +
            (C95445 + C95446) * C139824 * C47132 +
            (C92948 * C5397 - C93449 * C5273 - C92948 * C5621 +
             C139899 * C5733 + C92947 * C1741 - C93448 * C1570 -
             C92947 * C2074 + C92797 * C2230) *
                C139824 * C47131) *
               C140002) *
              C139792 * C2324 +
          (((C95446 + C95445) * C139824 * C47131 +
            (C95444 + C95443) * C139824 * C47132 +
            (C92947 * C1744 - C93448 * C1567 - C92947 * C2077 + C92797 * C2227 +
             C92948 * C5400 - C93449 * C5276 - C92948 * C5624 +
             C139899 * C5736) *
                C139824 * C47133) *
               C140002 -
           ((C93491 + C93492) * C139824 * C47133 +
            (C93490 + C93489) * C139824 * C47132 +
            (C93488 + C93487) * C139824 * C47131) *
               C4096) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C108103 * C266 - C108407 * C108 - C108103 * C567 + C107999 * C702 +
            C108104 * C1741 - C108408 * C1570 - C108104 * C2074 +
            C108000 * C2230 + C108105 * C5397 - C108409 * C5273 -
            C108105 * C5621 + C108001 * C5733 + C108106 * C15912 -
            C108410 * C15623 - C108106 * C16401 + C108002 * C16633) *
               C139824 * C139731 * C4096 -
           (C108106 * C21200 - C108410 * C21012 - C108106 * C21535 +
            C108002 * C21699 + C108105 * C15912 - C108409 * C15623 -
            C108105 * C16401 + C108001 * C16633 + C108104 * C5397 -
            C108408 * C5273 - C108104 * C5621 + C108000 * C5733 +
            C108103 * C1741 - C108407 * C1570 - C108103 * C2074 +
            C107999 * C2230) *
               C139824 * C139731 * C140002) *
              C139792 * C2324 +
          ((C108103 * C1742 - C108407 * C1569 - C108103 * C2075 +
            C107999 * C2229 + C108104 * C5398 - C108408 * C5274 -
            C108104 * C5622 + C108000 * C5734 + C108105 * C15913 -
            C108409 * C15622 - C108105 * C16402 + C108001 * C16632 +
            C108106 * C21201 - C108410 * C21013 - C108106 * C21536 +
            C108002 * C21700) *
               C139824 * C139731 * C140002 -
           (C108106 * C15913 - C108410 * C15622 - C108106 * C16402 +
            C108002 * C16632 + C108105 * C5398 - C108409 * C5274 -
            C108105 * C5622 + C108001 * C5734 + C108104 * C1742 -
            C108408 * C1569 - C108104 * C2075 + C108000 * C2229 +
            C108103 * C267 - C108407 * C109 - C108103 * C568 + C107999 * C703) *
               C139824 * C139731 * C4096) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eexx[115] +=
        (-std::pow(Pi, 2.5) *
         (((((C54790 * C114 - C54791 * C108 - C54790 * C115 + C139731 * C126) *
                 C92797 +
             C61654 * C139899) *
                C5813 +
            (C101116 + C101117) * C5814 + C103863 * C5815) *
               C4096 -
           ((C104602 + C104603) * C5815 + (C104604 + C104605) * C5814 +
            (C61655 * C139899 + C61654 * C92797) * C5813) *
               C140002) *
              C806 +
          (((C104605 + C104604) * C5813 + (C104603 + C104602) * C5814 +
            (C57669 * C92797 + (C54790 * C59484 - C54791 * C59483 -
                                C54790 * C59485 + C139731 * C59486) *
                                   C139899) *
                C5815) *
               C140002 -
           ((C103864 + C103865) * C5815 + (C101119 + C101118) * C5814 +
            (C101117 + C101116) * C5813) *
               C4096) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47136 * C114 - C47137 * C108 - C47136 * C115 + C47131 * C126 +
             C47138 * C116 - C47139 * C109 - C47138 * C117 + C47132 * C127 +
             C47140 * C118 - C47141 * C110 - C47140 * C119 + C47133 * C128) *
                C92797 +
            (C94563 + C94564 + C94565) * C139899) *
               C139824 * C4096 -
           ((C47140 * C5281 - C47141 * C5275 - C47140 * C5282 + C47133 * C5287 +
             C47138 * C5279 - C47139 * C5274 - C47138 * C5280 + C47132 * C5286 +
             C47136 * C5277 - C47137 * C5273 - C47136 * C5278 +
             C47131 * C5285) *
                C139899 +
            (C94565 + C94564 + C94563) * C92797) *
               C139824 * C140002) *
              C806 +
          (((C51503 + C51502 + C51501) * C92797 +
            (C47136 * C13130 - C47137 * C13126 - C47136 * C13131 +
             C47131 * C13138 + C47138 * C13132 - C47139 * C13127 -
             C47138 * C13133 + C47132 * C13139 + C47140 * C14660 -
             C47141 * C14659 - C47140 * C14661 + C47133 * C14662) *
                C139899) *
               C139824 * C140002 -
           ((C51501 + C51502 + C51503) * C139899 +
            (C47980 + C47979 + C47978) * C92797) *
               C139824 * C4096) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C54790 * C114 - C54791 * C108 - C54790 * C115 + C139731 * C126) *
                C107999 +
            C61654 * C108000 + C61655 * C108001 + C67012 * C108002) *
               C139824 * C4096 -
           ((C54790 * C21014 - C54791 * C21012 - C54790 * C21015 +
             C139731 * C21018) *
                C108002 +
            C67012 * C108001 + C61655 * C108000 + C61654 * C107999) *
               C139824 * C140002) *
              C806 +
          ((C57671 * C107999 + C60685 * C108000 + C64257 * C108001 +
            (C54790 * C67002 - C54791 * C67001 - C54790 * C67003 +
             C139731 * C67004) *
                C108002) *
               C139824 * C140002 -
           (C64257 * C108002 + C60685 * C108001 + C57671 * C108000 +
            C55303 * C107999) *
               C139824 * C4096) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eexy[115] +=
        (-std::pow(Pi, 2.5) *
         (((((C5813 * C183 - C5894 * C108 + C5814 * C896 - C5895 * C813 +
              C5815 * C2974 - C5896 * C2908) *
                 C54790 +
             (C5813 * C189 - C5894 * C115 + C5814 * C901 - C5895 * C822 +
              C5815 * C2978 - C5896 * C2913) *
                 C139731) *
                C92797 +
            ((C102182 - C102183 + C102184 - C102185 + C102186 - C102187) *
                 C54790 +
             (C102188 - C102189 + C102190 - C102191 + C102192 - C102193) *
                 C139731) *
                C139899) *
               C4096 +
           (((C102183 - C102182 + C102185 - C102184 + C102187 - C102186) *
                 C54790 +
             (C102189 - C102188 + C102191 - C102190 + C102193 - C102192) *
                 C139731) *
                C92797 +
            ((C5894 * C5273 - C5813 * C5339 + C5895 * C13126 - C5814 * C13216 +
              C5896 * C13128 - C5815 * C13217) *
                 C54790 +
             (C5894 * C5278 - C5813 * C5343 + C5895 * C13131 - C5814 * C13220 +
              C5896 * C13135 - C5815 * C13221) *
                 C139731) *
                C139899) *
               C140002) *
              C806 +
          ((((C5894 * C813 - C5813 * C896 + C5895 * C2908 - C5814 * C2974 +
              C5896 * C6627 - C5815 * C6792) *
                 C54790 +
             (C5894 * C822 - C5813 * C901 + C5895 * C2913 - C5814 * C2978 +
              C5896 * C6632 - C5815 * C6795) *
                 C139731) *
                C92797 +
            ((C104704 - C104705 + C104706 - C104707 + C104708 - C104709) *
                 C54790 +
             (C104710 - C104711 + C104712 - C104713 + C104714 - C104715) *
                 C139731) *
                C139899) *
               C4096 +
           (((C104705 - C104704 + C104707 - C104706 + C104709 - C104708) *
                 C54790 +
             (C104711 - C104710 + C104713 - C104712 + C104715 - C104714) *
                 C139731) *
                C92797 +
            ((C5813 * C13216 - C5894 * C13126 + C5814 * C13217 -
              C5895 * C13128 + C5815 * C59537 - C5896 * C59483) *
                 C54790 +
             (C5813 * C13220 - C5894 * C13131 + C5814 * C13221 -
              C5895 * C13135 + C5815 * C59538 - C5896 * C59485) *
                 C139731) *
                C139899) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C139824 * C183 - C182 * C108) * C47136 +
             (C139824 * C189 - C182 * C115) * C47131 + (C196 - C197) * C47138 +
             (C198 - C199) * C47132 + C212 * C47140 + C213 * C47133) *
                C92797 +
            ((C15795 - C15796) * C47136 + (C15797 - C15798) * C47131 +
             C15799 * C47138 + C15800 * C47132 + C29549 * C47140 +
             C29550 * C47133) *
                C139899) *
               C4096 +
           (((C15796 - C15795) * C47136 + (C15798 - C15797) * C47131 +
             C15807 * C47138 + C15808 * C47132 + C31358 * C47140 +
             C31359 * C47133) *
                C92797 +
            ((C15802 - C15801) * C47136 + (C15804 - C15803) * C47131 +
             C15809 * C47138 + C15810 * C47132 + (C13938 - C13939) * C47140 +
             (C13940 - C13941) * C47133) *
                C139899) *
               C140002) *
              C806 +
          ((((C182 * C813 - C139824 * C896) * C47136 +
             (C182 * C822 - C139824 * C901) * C47131 + (C907 - C908) * C47138 +
             (C909 - C910) * C47132 + (C911 - C912) * C47140 +
             (C913 - C914) * C47133) *
                C92797 +
            ((C18427 - C18428) * C47136 + (C18429 - C18430) * C47131 +
             (C14764 - C14765) * C47138 + (C14766 - C14767) * C47132 +
             (C30369 - C30370) * C47140 + (C30371 - C30372) * C47133) *
                C139899) *
               C4096 +
           (((C18428 - C18427) * C47136 + (C18430 - C18429) * C47131 +
             (C14765 - C14764) * C47138 + (C14767 - C14766) * C47132 +
             (C30370 - C30369) * C47140 + (C30372 - C30371) * C47133) *
                C92797 +
            ((C18432 - C18431) * C47136 + (C18434 - C18433) * C47131 +
             (C14769 - C14768) * C47138 + (C14771 - C14770) * C47132 +
             (C139824 * C14761 - C182 * C14659) * C47140 +
             (C139824 * C14762 - C182 * C14661) * C47133) *
                C139899) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C139824 * C183 - C182 * C108) * C54790 +
             (C139824 * C189 - C182 * C115) * C139731) *
                C107999 +
            ((C15795 - C15796) * C54790 + (C15797 - C15798) * C139731) *
                C108000 +
            (C21114 * C54790 + C21115 * C139731) * C108001 +
            ((C21119 - C21118) * C54790 + (C21121 - C21120) * C139731) *
                C108002) *
               C4096 +
           (((C15796 - C15795) * C54790 + (C15798 - C15797) * C139731) *
                C107999 +
            ((C15802 - C15801) * C54790 + (C15804 - C15803) * C139731) *
                C108000 +
            ((C21118 - C21119) * C54790 + (C21120 - C21121) * C139731) *
                C108001 +
            ((C182 * C21012 - C139824 * C21109) * C54790 +
             (C182 * C21015 - C139824 * C21111) * C139731) *
                C108002) *
               C140002) *
              C806 +
          ((((C182 * C813 - C139824 * C896) * C54790 +
             (C182 * C822 - C139824 * C901) * C139731) *
                C107999 +
            ((C18427 - C18428) * C54790 + (C18429 - C18430) * C139731) *
                C108000 +
            ((C18431 - C18432) * C54790 + (C18433 - C18434) * C139731) *
                C108001 +
            ((C110795 - C110796) * C54790 + (C110797 - C110798) * C139731) *
                C108002) *
               C4096 +
           (((C18428 - C18427) * C54790 + (C18430 - C18429) * C139731) *
                C107999 +
            ((C18432 - C18431) * C54790 + (C18434 - C18433) * C139731) *
                C108000 +
            ((C110796 - C110795) * C54790 + (C110798 - C110797) * C139731) *
                C108001 +
            ((C139824 * C67086 - C182 * C67001) * C54790 +
             (C139824 * C67087 - C182 * C67003) * C139731) *
                C108002) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eexz[115] +=
        (-std::pow(Pi, 2.5) *
         (((((C92797 * C266 - C92947 * C108 + C139899 * C1741 -
              C92948 * C1570) *
                 C54790 +
             (C92797 * C272 - C92947 * C115 + C139899 * C1746 -
              C92948 * C1579) *
                 C139731) *
                C5813 +
            ((C101320 - C101321 + C101322 - C101323) * C54790 +
             (C101324 - C101325 + C101326 - C101327) * C139731) *
                C5814 +
            C104030 * C5815) *
               C4096 +
           (((C92947 * C1570 - C92797 * C1741 + C92948 * C5273 -
              C139899 * C5397) *
                 C54790 +
             (C92947 * C1579 - C92797 * C1746 + C92948 * C5278 -
              C139899 * C5401) *
                 C139731) *
                C5813 +
            ((C104814 - C104815 + C104816 - C104817) * C54790 +
             (C104818 - C104819 + C104820 - C104821) * C139731) *
                C5814 +
            ((C104822 - C104823 + C104824 - C104825) * C54790 +
             (C104826 - C104827 + C104828 - C104829) * C139731) *
                C5815) *
               C140002) *
              C806 +
          ((((C101321 - C101320 + C101323 - C101322) * C54790 +
             (C101325 - C101324 + C101327 - C101326) * C139731) *
                C5813 +
            ((C101329 - C101328 + C101331 - C101330) * C54790 +
             (C101333 - C101332 + C101335 - C101334) * C139731) *
                C5814 +
            ((C104018 - C104019 + C104020 - C104021) * C54790 +
             (C104022 - C104023 + C104024 - C104025) * C139731) *
                C5815) *
               C4096 +
           (((C104815 - C104814 + C104817 - C104816) * C54790 +
             (C104819 - C104818 + C104821 - C104820) * C139731) *
                C5813 +
            ((C104823 - C104822 + C104825 - C104824) * C54790 +
             (C104827 - C104826 + C104829 - C104828) * C139731) *
                C5814 +
            ((C92797 * C10630 - C92947 * C10394 + C139899 * C59589 -
              C92948 * C59483) *
                 C54790 +
             (C92797 * C10632 - C92947 * C10397 + C139899 * C59590 -
              C92948 * C59485) *
                 C139731) *
                C5815) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C92797 * C266 - C92947 * C108 + C139899 * C1741 - C92948 * C1570) *
                C47136 +
            (C92797 * C272 - C92947 * C115 + C139899 * C1746 - C92948 * C1579) *
                C47131 +
            (C92950 - C92951 + C92952 - C92953) * C47138 +
            (C92954 - C92955 + C92956 - C92957) * C47132 + C92978 * C47140 +
            C92979 * C47133) *
               C139824 * C4096 +
           ((C92947 * C1570 - C92797 * C1741 + C92948 * C5273 -
             C139899 * C5397) *
                C47136 +
            (C92947 * C1579 - C92797 * C1746 + C92948 * C5278 -
             C139899 * C5401) *
                C47131 +
            (C94765 - C94766 + C94767 - C94768) * C47138 +
            (C94769 - C94770 + C94771 - C94772) * C47132 +
            (C94773 - C94774 + C94775 - C94776) * C47140 +
            (C94777 - C94778 + C94779 - C94780) * C47133) *
               C139824 * C140002) *
              C806 +
          (((C92947 * C813 - C92797 * C984 + C92948 * C3438 - C139899 * C3594) *
                C47136 +
            (C92947 * C822 - C92797 * C989 + C92948 * C3443 - C139899 * C3598) *
                C47131 +
            (C93789 - C93790 + C93791 - C93792) * C47138 +
            (C93793 - C93794 + C93795 - C93796) * C47132 +
            (C93797 - C93798 + C93799 - C93800) * C47140 +
            (C93801 - C93802 + C93803 - C93804) * C47133) *
               C139824 * C4096 +
           ((C92797 * C3594 - C92947 * C3438 + C139899 * C13298 -
             C92948 * C13126) *
                C47136 +
            (C92797 * C3598 - C92947 * C3443 + C139899 * C13302 -
             C92948 * C13131) *
                C47131 +
            (C92797 * C3595 - C92947 * C3439 + C139899 * C13299 -
             C92948 * C13127) *
                C47138 +
            (C92797 * C3599 - C92947 * C3445 + C139899 * C13303 -
             C92948 * C13133) *
                C47132 +
            (C92797 * C3596 - C92947 * C3440 + C139899 * C14869 -
             C92948 * C14659) *
                C47140 +
            (C92797 * C3600 - C92947 * C3447 + C139899 * C14870 -
             C92948 * C14661) *
                C47133) *
               C139824 * C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C107999 * C266 - C108103 * C108 + C108000 * C1741 -
             C108104 * C1570 + C108001 * C5397 - C108105 * C5273 +
             C108002 * C15912 - C108106 * C15623) *
                C54790 +
            (C107999 * C272 - C108103 * C115 + C108000 * C1746 -
             C108104 * C1579 + C108001 * C5401 - C108105 * C5278 +
             C108002 * C15915 - C108106 * C15628) *
                C139731) *
               C139824 * C4096 +
           ((C108103 * C1570 - C107999 * C1741 + C108104 * C5273 -
             C108000 * C5397 + C108105 * C15623 - C108001 * C15912 +
             C108106 * C21012 - C108002 * C21200) *
                C54790 +
            (C108103 * C1579 - C107999 * C1746 + C108104 * C5278 -
             C108000 * C5401 + C108105 * C15628 - C108001 * C15915 +
             C108106 * C21015 - C108002 * C21202) *
                C139731) *
               C139824 * C140002) *
              C806 +
          (((C108103 * C813 - C107999 * C984 + C108104 * C3438 -
             C108000 * C3594 + C108105 * C13126 - C108001 * C13298 +
             C108106 * C18302 - C108002 * C18532) *
                C54790 +
            (C108103 * C822 - C107999 * C989 + C108104 * C3443 -
             C108000 * C3598 + C108105 * C13131 - C108001 * C13302 +
             C108106 * C18305 - C108002 * C18534) *
                C139731) *
               C139824 * C4096 +
           ((C107999 * C3594 - C108103 * C3438 + C108000 * C13298 -
             C108104 * C13126 + C108001 * C18532 - C108105 * C18302 +
             C108002 * C67179 - C108106 * C67001) *
                C54790 +
            (C107999 * C3598 - C108103 * C3443 + C108000 * C13302 -
             C108104 * C13131 + C108001 * C18534 - C108105 * C18305 +
             C108002 * C67180 - C108106 * C67003) *
                C139731) *
               C139824 * C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eeyx[115] +=
        (-std::pow(Pi, 2.5) *
         (((((C139731 * C114 - C54790 * C108) * C5894 +
             (C139731 * C354 - C54790 * C348) * C5813 +
             (C55513 - C55514) * C5895 + (C55515 - C55516) * C5814 +
             C57297 * C5896 + C57298 * C5815) *
                C92797 +
            ((C61976 - C61977) * C5894 + (C61978 - C61979) * C5813 +
             C64587 * C5895 + C64588 * C5814 + C88899 * C5896 +
             C88900 * C5815) *
                C139899) *
               C4096 +
           (((C61977 - C61976) * C5894 + (C61979 - C61978) * C5813 +
             C64591 * C5895 + C64592 * C5814 + C89717 * C5896 +
             C89718 * C5815) *
                C92797 +
            ((C61981 - C61980) * C5894 + (C61983 - C61982) * C5813 +
             C64593 * C5895 + C64594 * C5814 + (C63744 - C63745) * C5896 +
             (C63746 - C63747) * C5815) *
                C139899) *
               C140002) *
              C806 +
          ((((C55514 - C55513) * C5894 + (C55516 - C55515) * C5813 +
             (C55518 - C55517) * C5895 + (C55520 - C55519) * C5814 +
             (C55522 - C55521) * C5896 + (C55524 - C55523) * C5815) *
                C92797 +
            (C64591 * C5894 + C64592 * C5813 + C89717 * C5895 + C89718 * C5814 +
             (C57891 - C57892) * C5896 + (C57893 - C57894) * C5815) *
                C139899) *
               C4096 +
           ((C64587 * C5894 + C64588 * C5813 + C88899 * C5895 + C88900 * C5814 +
             (C57892 - C57891) * C5896 + (C57894 - C57893) * C5815) *
                C92797 +
            (C64589 * C5894 + C64590 * C5813 + (C63745 - C63744) * C5895 +
             (C63747 - C63746) * C5814 +
             (C139731 * C59484 - C54790 * C59483) * C5896 +
             (C139731 * C59642 - C54790 * C59641) * C5815) *
                C139899) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47131 * C114 - C47136 * C108 + C47132 * C116 - C47138 * C109 +
              C47133 * C118 - C47140 * C110) *
                 C182 +
             (C47131 * C354 - C47136 * C348 + C47132 * C355 - C47138 * C349 +
              C47133 * C356 - C47140 * C350) *
                 C139824) *
                C92797 +
            ((C94879 - C94880 + C94881 - C94882 + C94883 - C94884) * C182 +
             (C94885 - C94886 + C94887 - C94888 + C94889 - C94890) * C139824) *
                C139899) *
               C4096 +
           (((C94880 - C94879 + C94882 - C94881 + C94884 - C94883) * C182 +
             (C94886 - C94885 + C94888 - C94887 + C94890 - C94889) * C139824) *
                C92797 +
            ((C47136 * C5273 - C47131 * C5277 + C47138 * C5274 -
              C47132 * C5279 + C47140 * C5275 - C47133 * C5281) *
                 C182 +
             (C47136 * C5455 - C47131 * C5459 + C47138 * C5456 -
              C47132 * C5460 + C47140 * C5457 - C47133 * C5461) *
                 C139824) *
                C139899) *
               C140002) *
              C806 +
          ((((C48295 - C48294 + C48297 - C48296 + C48299 - C48298) * C182 +
             (C48301 - C48300 + C48303 - C48302 + C48305 - C48304) * C139824) *
                C92797 +
            ((C51798 - C51799 + C51800 - C51801 + C51802 - C51803) * C182 +
             (C51804 - C51805 + C51806 - C51807 + C51808 - C51809) * C139824) *
                C139899) *
               C4096 +
           (((C51799 - C51798 + C51801 - C51800 + C51803 - C51802) * C182 +
             (C51805 - C51804 + C51807 - C51806 + C51809 - C51808) * C139824) *
                C92797 +
            ((C47131 * C13130 - C47136 * C13126 + C47132 * C13132 -
              C47138 * C13127 + C47133 * C14660 - C47140 * C14659) *
                 C182 +
             (C47131 * C13384 - C47136 * C13380 + C47132 * C13385 -
              C47138 * C13381 + C47133 * C14982 - C47140 * C14981) *
                 C139824) *
                C139899) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C139731 * C114 - C54790 * C108) * C182 +
             (C139731 * C354 - C54790 * C348) * C139824) *
                C107999 +
            ((C61976 - C61977) * C182 + (C61978 - C61979) * C139824) * C108000 +
            (C67258 * C182 + C67259 * C139824) * C108001 +
            ((C67263 - C67262) * C182 + (C67265 - C67264) * C139824) *
                C108002) *
               C4096 +
           (((C61977 - C61976) * C182 + (C61979 - C61978) * C139824) * C107999 +
            ((C61981 - C61980) * C182 + (C61983 - C61982) * C139824) * C108000 +
            ((C67262 - C67263) * C182 + (C67264 - C67265) * C139824) * C108001 +
            ((C54790 * C21012 - C139731 * C21014) * C182 +
             (C54790 * C21278 - C139731 * C21280) * C139824) *
                C108002) *
               C140002) *
              C806 +
          ((((C55514 - C55513) * C182 + (C55516 - C55515) * C139824) * C107999 +
            (C64591 * C182 + C64592 * C139824) * C108000 +
            (C64593 * C182 + C64594 * C139824) * C108001 +
            ((C64595 - C64596) * C182 + (C64597 - C64598) * C139824) *
                C108002) *
               C4096 +
           ((C64587 * C182 + C64588 * C139824) * C107999 +
            (C64589 * C182 + C64590 * C139824) * C108000 +
            ((C64596 - C64595) * C182 + (C64598 - C64597) * C139824) * C108001 +
            ((C139731 * C67002 - C54790 * C67001) * C182 +
             (C139731 * C67256 - C54790 * C67255) * C139824) *
                C108002) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eeyy[115] +=
        (-std::pow(Pi, 2.5) *
         ((((C5894 * C183 - C6151 * C108 - C5894 * C348 + C5813 * C411 +
             C5895 * C896 - C6152 * C813 - C5895 * C1072 + C5814 * C1151 +
             C5896 * C2974 - C6153 * C2908 - C5896 * C3090 + C5815 * C3148) *
                C139731 * C92797 +
            (C102506 + C102507 + C102508) * C139731 * C139899) *
               C4096 -
           ((C5896 * C13217 - C6153 * C13128 - C5896 * C13382 + C5815 * C13463 +
             C5895 * C13216 - C6152 * C13126 - C5895 * C13380 + C5814 * C13462 +
             C5894 * C5339 - C6151 * C5273 - C5894 * C5455 + C5813 * C5513) *
                C139731 * C139899 +
            (C102508 + C102507 + C102506) * C139731 * C92797) *
               C140002) *
              C806 +
          (((C105044 + C105045 + C105046) * C139731 * C92797 +
            (C5894 * C13216 - C6151 * C13126 - C5894 * C13380 + C5813 * C13462 +
             C5895 * C13217 - C6152 * C13128 - C5895 * C13382 + C5814 * C13463 +
             C5896 * C59537 - C6153 * C59483 - C5896 * C59641 +
             C5815 * C59693) *
                C139731 * C139899) *
               C140002 -
           ((C105046 + C105045 + C105044) * C139731 * C139899 +
            (C5896 * C6792 - C6153 * C6627 - C5896 * C7032 + C5815 * C7169 +
             C5895 * C2974 - C6152 * C2908 - C5895 * C3090 + C5814 * C3148 +
             C5894 * C896 - C6151 * C813 - C5894 * C1072 + C5813 * C1151) *
                C139731 * C92797) *
               C4096) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C182 * C183 - C410 * C108 - C182 * C348 + C139824 * C411) *
                 C47131 +
             C442 * C47132 + C443 * C47133) *
                C92797 +
            (C95001 + C95002 + C95003) * C139899) *
               C4096 -
           ((C14204 * C47133 + C14203 * C47132 + C16193 * C47131) * C139899 +
            (C95003 + C95002 + C95001) * C92797) *
               C140002) *
              C806 +
          (((C97485 + C97486 + C97487) * C92797 +
            (C18762 * C47131 + C15095 * C47132 +
             (C182 * C14761 - C410 * C14659 - C182 * C14981 +
              C139824 * C15081) *
                 C47133) *
                C139899) *
               C140002 -
           ((C97487 + C97486 + C97485) * C139899 +
            (C1173 * C47133 + C1174 * C47132 +
             (C182 * C896 - C410 * C813 - C182 * C1072 + C139824 * C1151) *
                 C47131) *
                C92797) *
               C4096) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C182 * C183 - C410 * C108 - C182 * C348 + C139824 * C411) *
                C139731 * C107999 +
            C109347 * C108000 + C109348 * C108001 + C109349 * C108002) *
               C4096 -
           ((C182 * C21109 - C410 * C21012 - C182 * C21278 + C139824 * C21373) *
                C139731 * C108002 +
            C109349 * C108001 + C109348 * C108000 + C109347 * C107999) *
               C140002) *
              C806 +
          ((C110997 * C107999 + C110998 * C108000 + C111006 * C108001 +
            (C182 * C67086 - C410 * C67001 - C182 * C67255 + C139824 * C67344) *
                C139731 * C108002) *
               C140002 -
           (C111006 * C108002 + C110998 * C108001 + C110997 * C108000 +
            (C182 * C896 - C410 * C813 - C182 * C1072 + C139824 * C1151) *
                C139731 * C107999) *
               C4096) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eeyz[115] +=
        (-std::pow(Pi, 2.5) *
         ((((C92797 * C266 - C92947 * C108 + C139899 * C1741 - C92948 * C1570) *
                C5894 +
            (C92797 * C495 - C92947 * C348 + C139899 * C1997 - C92948 * C1829) *
                C5813 +
            (C101320 - C101321 + C101322 - C101323) * C5895 +
            (C101638 - C101639 + C101640 - C101641) * C5814 + C104026 * C5896 +
            C104259 * C5815) *
               C139731 * C4096 +
           ((C92947 * C1570 - C92797 * C1741 + C92948 * C5273 -
             C139899 * C5397) *
                C5894 +
            (C92947 * C1829 - C92797 * C1997 + C92948 * C5455 -
             C139899 * C5567) *
                C5813 +
            (C104814 - C104815 + C104816 - C104817) * C5895 +
            (C105145 - C105146 + C105147 - C105148) * C5814 +
            (C104822 - C104823 + C104824 - C104825) * C5896 +
            (C105149 - C105150 + C105151 - C105152) * C5815) *
               C139731 * C140002) *
              C806 +
          (((C101321 - C101320 + C101323 - C101322) * C5894 +
            (C101639 - C101638 + C101641 - C101640) * C5813 +
            (C101329 - C101328 + C101331 - C101330) * C5895 +
            (C101643 - C101642 + C101645 - C101644) * C5814 +
            (C104018 - C104019 + C104020 - C104021) * C5896 +
            (C104255 - C104256 + C104257 - C104258) * C5815) *
               C139731 * C4096 +
           ((C104815 - C104814 + C104817 - C104816) * C5894 +
            (C105146 - C105145 + C105148 - C105147) * C5813 +
            (C104823 - C104822 + C104825 - C104824) * C5895 +
            (C105150 - C105149 + C105152 - C105151) * C5814 +
            (C92797 * C10630 - C92947 * C10394 + C139899 * C59589 -
             C92948 * C59483) *
                C5896 +
            (C92797 * C10958 - C92947 * C10740 + C139899 * C59744 -
             C92948 * C59641) *
                C5815) *
               C139731 * C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C92797 * C266 - C92947 * C108 + C139899 * C1741 -
              C92948 * C1570) *
                 C182 +
             (C92797 * C495 - C92947 * C348 + C139899 * C1997 -
              C92948 * C1829) *
                 C139824) *
                C47131 +
            ((C92950 - C92951 + C92952 - C92953) * C182 +
             (C93202 - C93203 + C93204 - C93205) * C139824) *
                C47132 +
            C93219 * C47133) *
               C4096 +
           (((C92947 * C1570 - C92797 * C1741 + C92948 * C5273 -
              C139899 * C5397) *
                 C182 +
             (C92947 * C1829 - C92797 * C1997 + C92948 * C5455 -
              C139899 * C5567) *
                 C139824) *
                C47131 +
            ((C94765 - C94766 + C94767 - C94768) * C182 +
             (C95105 - C95106 + C95107 - C95108) * C139824) *
                C47132 +
            ((C94773 - C94774 + C94775 - C94776) * C182 +
             (C95109 - C95110 + C95111 - C95112) * C139824) *
                C47133) *
               C140002) *
              C806 +
          ((((C92947 * C813 - C92797 * C984 + C92948 * C3438 -
              C139899 * C3594) *
                 C182 +
             (C92947 * C1072 - C92797 * C1240 + C92948 * C3668 -
              C139899 * C3812) *
                 C139824) *
                C47131 +
            ((C93789 - C93790 + C93791 - C93792) * C182 +
             (C94099 - C94100 + C94101 - C94102) * C139824) *
                C47132 +
            ((C93797 - C93798 + C93799 - C93800) * C182 +
             (C94103 - C94104 + C94105 - C94106) * C139824) *
                C47133) *
               C4096 +
           (((C92797 * C3594 - C92947 * C3438 + C139899 * C13298 -
              C92948 * C13126) *
                 C182 +
             (C92797 * C3812 - C92947 * C3668 + C139899 * C13540 -
              C92948 * C13380) *
                 C139824) *
                C47131 +
            ((C92797 * C3595 - C92947 * C3439 + C139899 * C13299 -
              C92948 * C13127) *
                 C182 +
             (C92797 * C3813 - C92947 * C3669 + C139899 * C13542 -
              C92948 * C13381) *
                 C139824) *
                C47132 +
            ((C92797 * C3596 - C92947 * C3440 + C139899 * C14869 -
              C92948 * C14659) *
                 C182 +
             (C92797 * C3814 - C92947 * C3670 + C139899 * C15194 -
              C92948 * C14981) *
                 C139824) *
                C47133) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C107999 * C266 - C108103 * C108 + C108000 * C1741 -
             C108104 * C1570 + C108001 * C5397 - C108105 * C5273 +
             C108002 * C15912 - C108106 * C15623) *
                C182 +
            (C107999 * C495 - C108103 * C348 + C108000 * C1997 -
             C108104 * C1829 + C108001 * C5567 - C108105 * C5455 +
             C108002 * C16294 - C108106 * C16028) *
                C139824) *
               C139731 * C4096 +
           ((C108103 * C1570 - C107999 * C1741 + C108104 * C5273 -
             C108000 * C5397 + C108105 * C15623 - C108001 * C15912 +
             C108106 * C21012 - C108002 * C21200) *
                C182 +
            (C108103 * C1829 - C107999 * C1997 + C108104 * C5455 -
             C108000 * C5567 + C108105 * C16028 - C108001 * C16294 +
             C108106 * C21278 - C108002 * C21459) *
                C139824) *
               C139731 * C140002) *
              C806 +
          (((C108103 * C813 - C107999 * C984 + C108104 * C3438 -
             C108000 * C3594 + C108105 * C13126 - C108001 * C13298 +
             C108106 * C18302 - C108002 * C18532) *
                C182 +
            (C108103 * C1072 - C107999 * C1240 + C108104 * C3668 -
             C108000 * C3812 + C108105 * C13380 - C108001 * C13540 +
             C108106 * C18634 - C108002 * C18862) *
                C139824) *
               C139731 * C4096 +
           ((C107999 * C3594 - C108103 * C3438 + C108000 * C13298 -
             C108104 * C13126 + C108001 * C18532 - C108105 * C18302 +
             C108002 * C67179 - C108106 * C67001) *
                C182 +
            (C107999 * C3812 - C108103 * C3668 + C108000 * C13540 -
             C108104 * C13380 + C108001 * C18862 - C108105 * C18634 +
             C108002 * C67435 - C108106 * C67255) *
                C139824) *
               C139731 * C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eezx[115] +=
        (-std::pow(Pi, 2.5) *
         (((((C139731 * C114 - C54790 * C108) * C92947 +
             (C139731 * C573 - C54790 * C567) * C92797 +
             (C61976 - C61977) * C92948 + (C62328 - C62329) * C139899) *
                C5813 +
            ((C55513 - C55514) * C92947 + (C55735 - C55736) * C92797 +
             C64587 * C92948 + C64931 * C139899) *
                C5814 +
            C104340 * C5815) *
               C4096 +
           (((C61977 - C61976) * C92947 + (C62329 - C62328) * C92797 +
             (C61981 - C61980) * C92948 + (C62331 - C62330) * C139899) *
                C5813 +
            (C64591 * C92947 + C64933 * C92797 + C64593 * C92948 +
             C64934 * C139899) *
                C5814 +
            (C89717 * C92947 + C90038 * C92797 + (C63744 - C63745) * C92948 +
             (C63976 - C63977) * C139899) *
                C5815) *
               C140002) *
              C806 +
          ((((C55514 - C55513) * C92947 + (C55736 - C55735) * C92797 +
             C64591 * C92948 + C64933 * C139899) *
                C5813 +
            ((C55518 - C55517) * C92947 + (C55738 - C55737) * C92797 +
             C89717 * C92948 + C90038 * C139899) *
                C5814 +
            ((C55522 - C55521) * C92947 + (C55740 - C55739) * C92797 +
             (C57891 - C57892) * C92948 + (C58103 - C58104) * C139899) *
                C5815) *
               C4096 +
           ((C64587 * C92947 + C64931 * C92797 + C64589 * C92948 +
             C64932 * C139899) *
                C5813 +
            (C88899 * C92947 + C89133 * C92797 + (C63745 - C63744) * C92948 +
             (C63977 - C63976) * C139899) *
                C5814 +
            ((C57892 - C57891) * C92947 + (C58104 - C58103) * C92797 +
             (C139731 * C59484 - C54790 * C59483) * C92948 +
             (C139731 * C59796 - C54790 * C59795) * C139899) *
                C5815) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47131 * C114 - C47136 * C108 + C47132 * C116 - C47138 * C109 +
             C47133 * C118 - C47140 * C110) *
                C92947 +
            (C47131 * C573 - C47136 * C567 + C47132 * C574 - C47138 * C568 +
             C47133 * C575 - C47140 * C569) *
                C92797 +
            (C94879 - C94880 + C94881 - C94882 + C94883 - C94884) * C92948 +
            (C95211 - C95212 + C95213 - C95214 + C95215 - C95216) * C139899) *
               C139824 * C4096 +
           ((C94880 - C94879 + C94882 - C94881 + C94884 - C94883) * C92947 +
            (C95212 - C95211 + C95214 - C95213 + C95216 - C95215) * C92797 +
            (C47136 * C5273 - C47131 * C5277 + C47138 * C5274 - C47132 * C5279 +
             C47140 * C5275 - C47133 * C5281) *
                C92948 +
            (C47136 * C5621 - C47131 * C5625 + C47138 * C5622 - C47132 * C5626 +
             C47140 * C5623 - C47133 * C5627) *
                C139899) *
               C139824 * C140002) *
              C806 +
          (((C48295 - C48294 + C48297 - C48296 + C48299 - C48298) * C92947 +
            (C48641 - C48640 + C48643 - C48642 + C48645 - C48644) * C92797 +
            (C51798 - C51799 + C51800 - C51801 + C51802 - C51803) * C92948 +
            (C52104 - C52105 + C52106 - C52107 + C52108 - C52109) * C139899) *
               C139824 * C4096 +
           ((C51799 - C51798 + C51801 - C51800 + C51803 - C51802) * C92947 +
            (C52105 - C52104 + C52107 - C52106 + C52109 - C52108) * C92797 +
            (C47131 * C13130 - C47136 * C13126 + C47132 * C13132 -
             C47138 * C13127 + C47133 * C14660 - C47140 * C14659) *
                C92948 +
            (C47131 * C13622 - C47136 * C13618 + C47132 * C13623 -
             C47138 * C13619 + C47133 * C15300 - C47140 * C15299) *
                C139899) *
               C139824 * C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C139731 * C114 - C54790 * C108) * C108103 +
            (C139731 * C573 - C54790 * C567) * C107999 +
            (C61976 - C61977) * C108104 + (C62328 - C62329) * C108000 +
            C67258 * C108105 + C67513 * C108001 + (C67263 - C67262) * C108106 +
            (C67515 - C67514) * C108002) *
               C139824 * C4096 +
           ((C61977 - C61976) * C108103 + (C62329 - C62328) * C107999 +
            (C61981 - C61980) * C108104 + (C62331 - C62330) * C108000 +
            (C67262 - C67263) * C108105 + (C67514 - C67515) * C108001 +
            (C54790 * C21012 - C139731 * C21014) * C108106 +
            (C54790 * C21535 - C139731 * C21537) * C108002) *
               C139824 * C140002) *
              C806 +
          (((C55514 - C55513) * C108103 + (C55736 - C55735) * C107999 +
            C64591 * C108104 + C64933 * C108000 + C64593 * C108105 +
            C64934 * C108001 + (C64595 - C64596) * C108106 +
            (C64935 - C64936) * C108002) *
               C139824 * C4096 +
           (C64587 * C108103 + C64931 * C107999 + C64589 * C108104 +
            C64932 * C108000 + (C64596 - C64595) * C108105 +
            (C64936 - C64935) * C108001 +
            (C139731 * C67002 - C54790 * C67001) * C108106 +
            (C139731 * C67511 - C54790 * C67510) * C108002) *
               C139824 * C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eezy[115] +=
        (-std::pow(Pi, 2.5) *
         ((((C5813 * C183 - C5894 * C108 + C5814 * C896 - C5895 * C813 +
             C5815 * C2974 - C5896 * C2908) *
                C92947 +
            (C5813 * C629 - C5894 * C567 + C5814 * C1393 - C5895 * C1317 +
             C5815 * C3314 - C5896 * C3256) *
                C92797 +
            (C102182 - C102183 + C102184 - C102185 + C102186 - C102187) *
                C92948 +
            (C102803 - C102804 + C102805 - C102806 + C102807 - C102808) *
                C139899) *
               C139731 * C4096 +
           ((C102183 - C102182 + C102185 - C102184 + C102187 - C102186) *
                C92947 +
            (C102804 - C102803 + C102806 - C102805 + C102808 - C102807) *
                C92797 +
            (C5894 * C5273 - C5813 * C5339 + C5895 * C13126 - C5814 * C13216 +
             C5896 * C13128 - C5815 * C13217) *
                C92948 +
            (C5894 * C5621 - C5813 * C5679 + C5895 * C13618 - C5814 * C13700 +
             C5896 * C13620 - C5815 * C13701) *
                C139899) *
               C139731 * C140002) *
              C806 +
          (((C5894 * C813 - C5813 * C896 + C5895 * C2908 - C5814 * C2974 +
             C5896 * C6627 - C5815 * C6792) *
                C92947 +
            (C5894 * C1317 - C5813 * C1393 + C5895 * C3256 - C5814 * C3314 +
             C5896 * C7401 - C5815 * C7521) *
                C92797 +
            (C104704 - C104705 + C104706 - C104707 + C104708 - C104709) *
                C92948 +
            (C105349 - C105350 + C105351 - C105352 + C105353 - C105354) *
                C139899) *
               C139731 * C4096 +
           ((C104705 - C104704 + C104707 - C104706 + C104709 - C104708) *
                C92947 +
            (C105350 - C105349 + C105352 - C105351 + C105354 - C105353) *
                C92797 +
            (C5813 * C13216 - C5894 * C13126 + C5814 * C13217 - C5895 * C13128 +
             C5815 * C59537 - C5896 * C59483) *
                C92948 +
            (C5813 * C13700 - C5894 * C13618 + C5814 * C13701 - C5895 * C13620 +
             C5815 * C59847 - C5896 * C59795) *
                C139899) *
               C139731 * C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C139824 * C183 - C182 * C108) * C92947 +
             (C139824 * C629 - C182 * C567) * C92797 +
             (C15795 - C15796) * C92948 + (C16525 - C16526) * C139899) *
                C47131 +
            ((C196 - C197) * C92947 + (C636 - C637) * C92797 + C15799 * C92948 +
             C16529 * C139899) *
                C47132 +
            C93374 * C47133) *
               C4096 +
           (((C15796 - C15795) * C92947 + (C16526 - C16525) * C92797 +
             (C15802 - C15801) * C92948 + (C16528 - C16527) * C139899) *
                C47131 +
            (C15807 * C92947 + C16531 * C92797 + C15809 * C92948 +
             C16532 * C139899) *
                C47132 +
            (C31358 * C92947 + C32014 * C92797 + (C13938 - C13939) * C92948 +
             (C14441 - C14442) * C139899) *
                C47133) *
               C140002) *
              C806 +
          ((((C182 * C813 - C139824 * C896) * C92947 +
             (C182 * C1317 - C139824 * C1393) * C92797 +
             (C18427 - C18428) * C92948 + (C19071 - C19072) * C139899) *
                C47131 +
            ((C907 - C908) * C92947 + (C1399 - C1400) * C92797 +
             (C14764 - C14765) * C92948 + (C15401 - C15402) * C139899) *
                C47132 +
            ((C911 - C912) * C92947 + (C1401 - C1402) * C92797 +
             (C30369 - C30370) * C92948 + (C30992 - C30993) * C139899) *
                C47133) *
               C4096 +
           (((C18428 - C18427) * C92947 + (C19072 - C19071) * C92797 +
             (C18432 - C18431) * C92948 + (C19074 - C19073) * C139899) *
                C47131 +
            ((C14765 - C14764) * C92947 + (C15402 - C15401) * C92797 +
             (C14769 - C14768) * C92948 + (C15404 - C15403) * C139899) *
                C47132 +
            ((C30370 - C30369) * C92947 + (C30993 - C30992) * C92797 +
             (C139824 * C14761 - C182 * C14659) * C92948 +
             (C139824 * C15399 - C182 * C15299) * C139899) *
                C47133) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C139824 * C183 - C182 * C108) * C108103 +
            (C139824 * C629 - C182 * C567) * C107999 +
            (C15795 - C15796) * C108104 + (C16525 - C16526) * C108000 +
            C21114 * C108105 + C21623 * C108001 + (C21119 - C21118) * C108106 +
            (C21625 - C21624) * C108002) *
               C139731 * C4096 +
           ((C15796 - C15795) * C108103 + (C16526 - C16525) * C107999 +
            (C15802 - C15801) * C108104 + (C16528 - C16527) * C108000 +
            (C21118 - C21119) * C108105 + (C21624 - C21625) * C108001 +
            (C182 * C21012 - C139824 * C21109) * C108106 +
            (C182 * C21535 - C139824 * C21620) * C108002) *
               C139731 * C140002) *
              C806 +
          (((C182 * C813 - C139824 * C896) * C108103 +
            (C182 * C1317 - C139824 * C1393) * C107999 +
            (C18427 - C18428) * C108104 + (C19071 - C19072) * C108000 +
            (C18431 - C18432) * C108105 + (C19073 - C19074) * C108001 +
            (C110795 - C110796) * C108106 + (C111205 - C111206) * C108002) *
               C139731 * C4096 +
           ((C18428 - C18427) * C108103 + (C19072 - C19071) * C107999 +
            (C18432 - C18431) * C108104 + (C19074 - C19073) * C108000 +
            (C110796 - C110795) * C108105 + (C111206 - C111205) * C108001 +
            (C139824 * C67086 - C182 * C67001) * C108106 +
            (C139824 * C67589 - C182 * C67510) * C108002) *
               C139731 * C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eezz[115] +=
        (-std::pow(Pi, 2.5) *
         ((((C92947 * C266 - C93448 * C108 - C92947 * C567 + C92797 * C702 +
             C92948 * C1741 - C93449 * C1570 - C92948 * C2074 +
             C139899 * C2230) *
                C5813 +
            (C101980 + C101981) * C5814 + C104489 * C5815) *
               C139731 * C4096 -
           ((C105477 + C105478) * C5815 + (C105479 + C105480) * C5814 +
            (C92948 * C5397 - C93449 * C5273 - C92948 * C5621 +
             C139899 * C5733 + C92947 * C1741 - C93448 * C1570 -
             C92947 * C2074 + C92797 * C2230) *
                C5813) *
               C139731 * C140002) *
              C806 +
          (((C105480 + C105479) * C5813 + (C105478 + C105477) * C5814 +
            (C92947 * C10630 - C93448 * C10394 - C92947 * C11062 +
             C92797 * C11272 + C92948 * C59589 - C93449 * C59483 -
             C92948 * C59795 + C139899 * C59898) *
                C5815) *
               C139731 * C140002 -
           ((C104502 + C104503) * C5815 + (C101983 + C101982) * C5814 +
            (C101981 + C101980) * C5813) *
               C139731 * C4096) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C92947 * C266 - C93448 * C108 - C92947 * C567 + C92797 * C702 +
             C92948 * C1741 - C93449 * C1570 - C92948 * C2074 +
             C139899 * C2230) *
                C139824 * C47131 +
            (C93487 + C93488) * C139824 * C47132 + C93494 * C47133) *
               C4096 -
           ((C95443 + C95444) * C139824 * C47133 +
            (C95445 + C95446) * C139824 * C47132 +
            (C92948 * C5397 - C93449 * C5273 - C92948 * C5621 +
             C139899 * C5733 + C92947 * C1741 - C93448 * C1570 -
             C92947 * C2074 + C92797 * C2230) *
                C139824 * C47131) *
               C140002) *
              C806 +
          (((C92947 * C3594 - C93448 * C3438 - C92947 * C3882 + C92797 * C4026 +
             C92948 * C13298 - C93449 * C13126 - C92948 * C13618 +
             C139899 * C13778) *
                C139824 * C47131 +
            (C92947 * C3595 - C93448 * C3439 - C92947 * C3883 + C92797 * C4027 +
             C92948 * C13299 - C93449 * C13127 - C92948 * C13619 +
             C139899 * C13780) *
                C139824 * C47132 +
            (C92947 * C3596 - C93448 * C3440 - C92947 * C3884 + C92797 * C4028 +
             C92948 * C14869 - C93449 * C14659 - C92948 * C15299 +
             C139899 * C15502) *
                C139824 * C47133) *
               C140002 -
           ((C94425 + C94426) * C139824 * C47133 +
            (C94427 + C94428) * C139824 * C47132 +
            (C92948 * C3594 - C93449 * C3438 - C92948 * C3882 +
             C139899 * C4026 + C92947 * C984 - C93448 * C813 - C92947 * C1317 +
             C92797 * C1473) *
                C139824 * C47131) *
               C4096) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C108103 * C266 - C108407 * C108 - C108103 * C567 + C107999 * C702 +
            C108104 * C1741 - C108408 * C1570 - C108104 * C2074 +
            C108000 * C2230 + C108105 * C5397 - C108409 * C5273 -
            C108105 * C5621 + C108001 * C5733 + C108106 * C15912 -
            C108410 * C15623 - C108106 * C16401 + C108002 * C16633) *
               C139824 * C139731 * C4096 -
           (C108106 * C21200 - C108410 * C21012 - C108106 * C21535 +
            C108002 * C21699 + C108105 * C15912 - C108409 * C15623 -
            C108105 * C16401 + C108001 * C16633 + C108104 * C5397 -
            C108408 * C5273 - C108104 * C5621 + C108000 * C5733 +
            C108103 * C1741 - C108407 * C1570 - C108103 * C2074 +
            C107999 * C2230) *
               C139824 * C139731 * C140002) *
              C806 +
          ((C108103 * C3594 - C108407 * C3438 - C108103 * C3882 +
            C107999 * C4026 + C108104 * C13298 - C108408 * C13126 -
            C108104 * C13618 + C108000 * C13778 + C108105 * C18532 -
            C108409 * C18302 - C108105 * C18962 + C108001 * C19172 +
            C108106 * C67179 - C108410 * C67001 - C108106 * C67510 +
            C108002 * C67671) *
               C139824 * C139731 * C140002 -
           (C108106 * C18532 - C108410 * C18302 - C108106 * C18962 +
            C108002 * C19172 + C108105 * C13298 - C108409 * C13126 -
            C108105 * C13618 + C108001 * C13778 + C108104 * C3594 -
            C108408 * C3438 - C108104 * C3882 + C108000 * C4026 +
            C108103 * C984 - C108407 * C813 - C108103 * C1317 +
            C107999 * C1473) *
               C139824 * C139731 * C4096) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eexx[116] +=
        (-std::pow(Pi, 2.5) *
         ((((C54790 * C114 - C54791 * C108 - C54790 * C115 + C139731 * C126) *
                C92797 +
            C61654 * C139899) *
               C5813 +
           (C101116 + C101117) * C5814 + C103863 * C5815) *
              C5270 -
          ((C104602 + C104603) * C5815 + (C104604 + C104605) * C5814 +
           (C61655 * C139899 + C61654 * C92797) * C5813) *
              C5271 +
          ((C61655 * C92797 + C67012 * C139899) * C5813 +
           (C60685 * C92797 + C64257 * C139899) * C5814 +
           (C63508 * C92797 + (C54790 * C64245 - C54791 * C64244 -
                               C54790 * C64246 + C139731 * C64247) *
                                  C139899) *
               C5815) *
              C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C47136 * C114 - C47137 * C108 - C47136 * C115 + C47131 * C126 +
            C47138 * C116 - C47139 * C109 - C47138 * C117 + C47132 * C127 +
            C47140 * C118 - C47141 * C110 - C47140 * C119 + C47133 * C128) *
               C92797 +
           (C94563 + C94564 + C94565) * C139899) *
              C139824 * C5270 -
          ((C99736 + C99737 + C99738) * C139899 +
           (C94565 + C94564 + C94563) * C92797) *
              C139824 * C5271 +
          ((C99738 + C99737 + C99736) * C92797 +
           (C47136 * C15627 - C47137 * C15623 - C47136 * C15628 +
            C47131 * C15632 + C47138 * C15625 - C47139 * C15622 -
            C47138 * C15626 + C47132 * C15631 + C47140 * C15629 -
            C47141 * C15624 - C47140 * C15630 + C47133 * C15633) *
               C139899) *
              C139824 * C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C54790 * C114 - C54791 * C108 - C54790 * C115 + C139731 * C126) *
               C107999 +
           C61654 * C108000 + C61655 * C108001 + C67012 * C108002) *
              C139824 * C5270 -
          (C112521 * C108002 + C67012 * C108001 + C61655 * C108000 +
           C61654 * C107999) *
              C139824 * C5271 +
          (C61655 * C107999 + C67012 * C108000 + C112521 * C108001 +
           (C54790 * C112511 - C54791 * C112510 - C54790 * C112512 +
            C139731 * C112513) *
               C108002) *
              C139824 * C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q));
    d2eexy[116] +=
        (-std::pow(Pi, 2.5) *
         ((((C5813 * C183 - C5894 * C108 + C5814 * C896 - C5895 * C813 +
             C5815 * C2974 - C5896 * C2908) *
                C54790 +
            (C5813 * C189 - C5894 * C115 + C5814 * C901 - C5895 * C822 +
             C5815 * C2978 - C5896 * C2913) *
                C139731) *
               C92797 +
           ((C102182 - C102183 + C102184 - C102185 + C102186 - C102187) *
                C54790 +
            (C102188 - C102189 + C102190 - C102191 + C102192 - C102193) *
                C139731) *
               C139899) *
              C5270 +
          (((C102183 - C102182 + C102185 - C102184 + C102187 - C102186) *
                C54790 +
            (C102189 - C102188 + C102191 - C102190 + C102193 - C102192) *
                C139731) *
               C92797 +
           ((C107393 - C107394 + C107395 - C107396 + C107397 - C107398) *
                C54790 +
            (C107399 - C107400 + C107401 - C107402 + C107403 - C107404) *
                C139731) *
               C139899) *
              C5271 +
          (((C107394 - C107393 + C107396 - C107395 + C107398 - C107397) *
                C54790 +
            (C107400 - C107399 + C107402 - C107401 + C107404 - C107403) *
                C139731) *
               C92797 +
           ((C5813 * C15788 - C5894 * C15623 + C5814 * C18422 - C5895 * C18302 +
             C5815 * C64356 - C5896 * C64244) *
                C54790 +
            (C5813 * C15791 - C5894 * C15628 + C5814 * C18424 - C5895 * C18305 +
             C5815 * C64357 - C5896 * C64246) *
                C139731) *
               C139899) *
              C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C139824 * C183 - C182 * C108) * C47136 +
            (C139824 * C189 - C182 * C115) * C47131 + (C196 - C197) * C47138 +
            (C198 - C199) * C47132 + C212 * C47140 + C213 * C47133) *
               C92797 +
           ((C15795 - C15796) * C47136 + (C15797 - C15798) * C47131 +
            C15799 * C47138 + C15800 * C47132 + C29549 * C47140 +
            C29550 * C47133) *
               C139899) *
              C5270 +
          (((C15796 - C15795) * C47136 + (C15798 - C15797) * C47131 +
            C15807 * C47138 + C15808 * C47132 + C31358 * C47140 +
            C31359 * C47133) *
               C92797 +
           ((C15802 - C15801) * C47136 + (C15804 - C15803) * C47131 +
            C15809 * C47138 + C15810 * C47132 + (C13938 - C13939) * C47140 +
            (C13940 - C13941) * C47133) *
               C139899) *
              C5271 +
          ((C21114 * C47136 + C21115 * C47131 + C15805 * C47138 +
            C15806 * C47132 + (C13939 - C13938) * C47140 +
            (C13941 - C13940) * C47133) *
               C92797 +
           ((C21119 - C21118) * C47136 + (C21121 - C21120) * C47131 +
            (C15812 - C15811) * C47138 + (C15814 - C15813) * C47132 +
            (C139824 * C15790 - C182 * C15624) * C47140 +
            (C139824 * C15793 - C182 * C15630) * C47133) *
               C139899) *
              C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C139824 * C183 - C182 * C108) * C54790 +
            (C139824 * C189 - C182 * C115) * C139731) *
               C107999 +
           ((C15795 - C15796) * C54790 + (C15797 - C15798) * C139731) *
               C108000 +
           C112582 * C108001 + C112585 * C108002) *
              C5270 +
          (((C15796 - C15795) * C54790 + (C15798 - C15797) * C139731) *
               C107999 +
           ((C15802 - C15801) * C54790 + (C15804 - C15803) * C139731) *
               C108000 +
           ((C21118 - C21119) * C54790 + (C21120 - C21121) * C139731) *
               C108001 +
           ((C112578 - C112579) * C54790 + (C112580 - C112581) * C139731) *
               C108002) *
              C5271 +
          (C112582 * C107999 + C112585 * C108000 +
           ((C112579 - C112578) * C54790 + (C112581 - C112580) * C139731) *
               C108001 +
           ((C139824 * C112571 - C182 * C112510) * C54790 +
            (C139824 * C112572 - C182 * C112512) * C139731) *
               C108002) *
              C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q));
    d2eexz[116] +=
        (-std::pow(Pi, 2.5) *
         ((((C92797 * C266 - C92947 * C108 + C139899 * C1741 - C92948 * C1570) *
                C54790 +
            (C92797 * C272 - C92947 * C115 + C139899 * C1746 - C92948 * C1579) *
                C139731) *
               C5813 +
           ((C101320 - C101321 + C101322 - C101323) * C54790 +
            (C101324 - C101325 + C101326 - C101327) * C139731) *
               C5814 +
           C104030 * C5815) *
              C5270 +
          (((C92947 * C1570 - C92797 * C1741 + C92948 * C5273 -
             C139899 * C5397) *
                C54790 +
            (C92947 * C1579 - C92797 * C1746 + C92948 * C5278 -
             C139899 * C5401) *
                C139731) *
               C5813 +
           ((C104814 - C104815 + C104816 - C104817) * C54790 +
            (C104818 - C104819 + C104820 - C104821) * C139731) *
               C5814 +
           ((C104822 - C104823 + C104824 - C104825) * C54790 +
            (C104826 - C104827 + C104828 - C104829) * C139731) *
               C5815) *
              C5271 +
          (((C92797 * C5397 - C92947 * C5273 + C139899 * C15912 -
             C92948 * C15623) *
                C54790 +
            (C92797 * C5401 - C92947 * C5278 + C139899 * C15915 -
             C92948 * C15628) *
                C139731) *
               C5813 +
           ((C92797 * C13298 - C92947 * C13126 + C139899 * C18532 -
             C92948 * C18302) *
                C54790 +
            (C92797 * C13302 - C92947 * C13131 + C139899 * C18534 -
             C92948 * C18305) *
                C139731) *
               C5814 +
           ((C92797 * C13300 - C92947 * C13128 + C139899 * C64472 -
             C92948 * C64244) *
                C54790 +
            (C92797 * C13304 - C92947 * C13135 + C139899 * C64473 -
             C92948 * C64246) *
                C139731) *
               C5815) *
              C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C92797 * C266 - C92947 * C108 + C139899 * C1741 - C92948 * C1570) *
               C47136 +
           (C92797 * C272 - C92947 * C115 + C139899 * C1746 - C92948 * C1579) *
               C47131 +
           (C92950 - C92951 + C92952 - C92953) * C47138 +
           (C92954 - C92955 + C92956 - C92957) * C47132 + C92978 * C47140 +
           C92979 * C47133) *
              C139824 * C5270 +
          ((C92947 * C1570 - C92797 * C1741 + C92948 * C5273 -
            C139899 * C5397) *
               C47136 +
           (C92947 * C1579 - C92797 * C1746 + C92948 * C5278 -
            C139899 * C5401) *
               C47131 +
           (C94765 - C94766 + C94767 - C94768) * C47138 +
           (C94769 - C94770 + C94771 - C94772) * C47132 +
           (C94773 - C94774 + C94775 - C94776) * C47140 +
           (C94777 - C94778 + C94779 - C94780) * C47133) *
              C139824 * C5271 +
          ((C92797 * C5397 - C92947 * C5273 + C139899 * C15912 -
            C92948 * C15623) *
               C47136 +
           (C92797 * C5401 - C92947 * C5278 + C139899 * C15915 -
            C92948 * C15628) *
               C47131 +
           (C92797 * C5398 - C92947 * C5274 + C139899 * C15913 -
            C92948 * C15622) *
               C47138 +
           (C92797 * C5402 - C92947 * C5280 + C139899 * C15916 -
            C92948 * C15626) *
               C47132 +
           (C92797 * C5399 - C92947 * C5275 + C139899 * C15914 -
            C92948 * C15624) *
               C47140 +
           (C92797 * C5403 - C92947 * C5282 + C139899 * C15917 -
            C92948 * C15630) *
               C47133) *
              C139824 * C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C107999 * C266 - C108103 * C108 + C108000 * C1741 -
            C108104 * C1570 + C108001 * C5397 - C108105 * C5273 +
            C108002 * C15912 - C108106 * C15623) *
               C54790 +
           (C107999 * C272 - C108103 * C115 + C108000 * C1746 -
            C108104 * C1579 + C108001 * C5401 - C108105 * C5278 +
            C108002 * C15915 - C108106 * C15628) *
               C139731) *
              C139824 * C5270 +
          ((C108103 * C1570 - C107999 * C1741 + C108104 * C5273 -
            C108000 * C5397 + C108105 * C15623 - C108001 * C15912 +
            C108106 * C21012 - C108002 * C21200) *
               C54790 +
           (C108103 * C1579 - C107999 * C1746 + C108104 * C5278 -
            C108000 * C5401 + C108105 * C15628 - C108001 * C15915 +
            C108106 * C21015 - C108002 * C21202) *
               C139731) *
              C139824 * C5271 +
          ((C107999 * C5397 - C108103 * C5273 + C108000 * C15912 -
            C108104 * C15623 + C108001 * C21200 - C108105 * C21012 +
            C108002 * C112635 - C108106 * C112510) *
               C54790 +
           (C107999 * C5401 - C108103 * C5278 + C108000 * C15915 -
            C108104 * C15628 + C108001 * C21202 - C108105 * C21015 +
            C108002 * C112636 - C108106 * C112512) *
               C139731) *
              C139824 * C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q));
    d2eeyx[116] +=
        (-std::pow(Pi, 2.5) *
         ((((C139731 * C114 - C54790 * C108) * C5894 +
            (C139731 * C354 - C54790 * C348) * C5813 +
            (C55513 - C55514) * C5895 + (C55515 - C55516) * C5814 +
            C57297 * C5896 + C57298 * C5815) *
               C92797 +
           ((C61976 - C61977) * C5894 + (C61978 - C61979) * C5813 +
            C64587 * C5895 + C64588 * C5814 + C88899 * C5896 + C88900 * C5815) *
               C139899) *
              C5270 +
          (((C61977 - C61976) * C5894 + (C61979 - C61978) * C5813 +
            C64591 * C5895 + C64592 * C5814 + C89717 * C5896 + C89718 * C5815) *
               C92797 +
           ((C61981 - C61980) * C5894 + (C61983 - C61982) * C5813 +
            C64593 * C5895 + C64594 * C5814 + (C63744 - C63745) * C5896 +
            (C63746 - C63747) * C5815) *
               C139899) *
              C5271 +
          ((C67258 * C5894 + C67259 * C5813 + C64589 * C5895 + C64590 * C5814 +
            (C63745 - C63744) * C5896 + (C63747 - C63746) * C5815) *
               C92797 +
           ((C67263 - C67262) * C5894 + (C67265 - C67264) * C5813 +
            (C64596 - C64595) * C5895 + (C64598 - C64597) * C5814 +
            (C139731 * C64245 - C54790 * C64244) * C5896 +
            (C139731 * C64585 - C54790 * C64584) * C5815) *
               C139899) *
              C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47131 * C114 - C47136 * C108 + C47132 * C116 - C47138 * C109 +
             C47133 * C118 - C47140 * C110) *
                C182 +
            (C47131 * C354 - C47136 * C348 + C47132 * C355 - C47138 * C349 +
             C47133 * C356 - C47140 * C350) *
                C139824) *
               C92797 +
           ((C94879 - C94880 + C94881 - C94882 + C94883 - C94884) * C182 +
            (C94885 - C94886 + C94887 - C94888 + C94889 - C94890) * C139824) *
               C139899) *
              C5270 +
          (((C94880 - C94879 + C94882 - C94881 + C94884 - C94883) * C182 +
            (C94886 - C94885 + C94888 - C94887 + C94890 - C94889) * C139824) *
               C92797 +
           ((C99961 - C99962 + C99963 - C99964 + C99965 - C99966) * C182 +
            (C99967 - C99968 + C99969 - C99970 + C99971 - C99972) * C139824) *
               C139899) *
              C5271 +
          (((C99962 - C99961 + C99964 - C99963 + C99966 - C99965) * C182 +
            (C99968 - C99967 + C99970 - C99969 + C99972 - C99971) * C139824) *
               C92797 +
           ((C47131 * C15627 - C47136 * C15623 + C47132 * C15625 -
             C47138 * C15622 + C47133 * C15629 - C47140 * C15624) *
                C182 +
            (C47131 * C16031 - C47136 * C16028 + C47132 * C16032 -
             C47138 * C16029 + C47133 * C16033 - C47140 * C16030) *
                C139824) *
               C139899) *
              C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C139731 * C114 - C54790 * C108) * C182 +
            (C139731 * C354 - C54790 * C348) * C139824) *
               C107999 +
           ((C61976 - C61977) * C182 + (C61978 - C61979) * C139824) * C108000 +
           C112698 * C108001 + C112701 * C108002) *
              C5270 +
          (((C61977 - C61976) * C182 + (C61979 - C61978) * C139824) * C107999 +
           ((C61981 - C61980) * C182 + (C61983 - C61982) * C139824) * C108000 +
           ((C67262 - C67263) * C182 + (C67264 - C67265) * C139824) * C108001 +
           ((C112694 - C112695) * C182 + (C112696 - C112697) * C139824) *
               C108002) *
              C5271 +
          (C112698 * C107999 + C112701 * C108000 +
           ((C112695 - C112694) * C182 + (C112697 - C112696) * C139824) *
               C108001 +
           ((C139731 * C112511 - C54790 * C112510) * C182 +
            (C139731 * C112688 - C54790 * C112687) * C139824) *
               C108002) *
              C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q));
    d2eeyy[116] +=
        (-std::pow(Pi, 2.5) *
         (((C5894 * C183 - C6151 * C108 - C5894 * C348 + C5813 * C411 +
            C5895 * C896 - C6152 * C813 - C5895 * C1072 + C5814 * C1151 +
            C5896 * C2974 - C6153 * C2908 - C5896 * C3090 + C5815 * C3148) *
               C139731 * C92797 +
           (C102506 + C102507 + C102508) * C139731 * C139899) *
              C5270 -
          ((C107645 + C107646 + C107647) * C139731 * C139899 +
           (C102508 + C102507 + C102506) * C139731 * C92797) *
              C5271 +
          ((C107647 + C107646 + C107645) * C139731 * C92797 +
           (C5894 * C15788 - C6151 * C15623 - C5894 * C16028 + C5813 * C16165 +
            C5895 * C18422 - C6152 * C18302 - C5895 * C18634 + C5814 * C18744 +
            C5896 * C64356 - C6153 * C64244 - C5896 * C64584 + C5815 * C64696) *
               C139731 * C139899) *
              C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C182 * C183 - C410 * C108 - C182 * C348 + C139824 * C411) *
                C47131 +
            C442 * C47132 + C443 * C47133) *
               C92797 +
           (C95001 + C95002 + C95003) * C139899) *
              C5270 -
          ((C100047 + C100048 + C100049) * C139899 +
           (C95003 + C95002 + C95001) * C92797) *
              C5271 +
          ((C100049 + C100048 + C100047) * C92797 +
           (C21384 * C47131 + C16194 * C47132 +
            (C182 * C15790 - C410 * C15624 - C182 * C16030 + C139824 * C16166) *
                C47133) *
               C139899) *
              C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C182 * C183 - C410 * C108 - C182 * C348 + C139824 * C411) *
               C139731 * C107999 +
           C109347 * C108000 + C109348 * C108001 + C109349 * C108002) *
              C5270 -
          (C112760 * C108002 + C109349 * C108001 + C109348 * C108000 +
           C109347 * C107999) *
              C5271 +
          (C109348 * C107999 + C109349 * C108000 + C112760 * C108001 +
           (C182 * C112571 - C410 * C112510 - C182 * C112687 +
            C139824 * C112751) *
               C139731 * C108002) *
              C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q));
    d2eeyz[116] +=
        (-std::pow(Pi, 2.5) *
         (((C92797 * C266 - C92947 * C108 + C139899 * C1741 - C92948 * C1570) *
               C5894 +
           (C92797 * C495 - C92947 * C348 + C139899 * C1997 - C92948 * C1829) *
               C5813 +
           (C101320 - C101321 + C101322 - C101323) * C5895 +
           (C101638 - C101639 + C101640 - C101641) * C5814 + C104026 * C5896 +
           C104259 * C5815) *
              C139731 * C5270 +
          ((C92947 * C1570 - C92797 * C1741 + C92948 * C5273 -
            C139899 * C5397) *
               C5894 +
           (C92947 * C1829 - C92797 * C1997 + C92948 * C5455 -
            C139899 * C5567) *
               C5813 +
           (C104814 - C104815 + C104816 - C104817) * C5895 +
           (C105145 - C105146 + C105147 - C105148) * C5814 +
           (C104822 - C104823 + C104824 - C104825) * C5896 +
           (C105149 - C105150 + C105151 - C105152) * C5815) *
              C139731 * C5271 +
          ((C92797 * C5397 - C92947 * C5273 + C139899 * C15912 -
            C92948 * C15623) *
               C5894 +
           (C92797 * C5567 - C92947 * C5455 + C139899 * C16294 -
            C92948 * C16028) *
               C5813 +
           (C92797 * C13298 - C92947 * C13126 + C139899 * C18532 -
            C92948 * C18302) *
               C5895 +
           (C92797 * C13540 - C92947 * C13380 + C139899 * C18862 -
            C92948 * C18634) *
               C5814 +
           (C92797 * C13300 - C92947 * C13128 + C139899 * C64472 -
            C92948 * C64244) *
               C5896 +
           (C92797 * C13541 - C92947 * C13382 + C139899 * C64823 -
            C92948 * C64584) *
               C5815) *
              C139731 * C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C92797 * C266 - C92947 * C108 + C139899 * C1741 - C92948 * C1570) *
                C182 +
            (C92797 * C495 - C92947 * C348 + C139899 * C1997 - C92948 * C1829) *
                C139824) *
               C47131 +
           ((C92950 - C92951 + C92952 - C92953) * C182 +
            (C93202 - C93203 + C93204 - C93205) * C139824) *
               C47132 +
           C93219 * C47133) *
              C5270 +
          (((C92947 * C1570 - C92797 * C1741 + C92948 * C5273 -
             C139899 * C5397) *
                C182 +
            (C92947 * C1829 - C92797 * C1997 + C92948 * C5455 -
             C139899 * C5567) *
                C139824) *
               C47131 +
           ((C94765 - C94766 + C94767 - C94768) * C182 +
            (C95105 - C95106 + C95107 - C95108) * C139824) *
               C47132 +
           ((C94773 - C94774 + C94775 - C94776) * C182 +
            (C95109 - C95110 + C95111 - C95112) * C139824) *
               C47133) *
              C5271 +
          (((C92797 * C5397 - C92947 * C5273 + C139899 * C15912 -
             C92948 * C15623) *
                C182 +
            (C92797 * C5567 - C92947 * C5455 + C139899 * C16294 -
             C92948 * C16028) *
                C139824) *
               C47131 +
           ((C92797 * C5398 - C92947 * C5274 + C139899 * C15913 -
             C92948 * C15622) *
                C182 +
            (C92797 * C5568 - C92947 * C5456 + C139899 * C16295 -
             C92948 * C16029) *
                C139824) *
               C47132 +
           ((C92797 * C5399 - C92947 * C5275 + C139899 * C15914 -
             C92948 * C15624) *
                C182 +
            (C92797 * C5569 - C92947 * C5457 + C139899 * C16296 -
             C92948 * C16030) *
                C139824) *
               C47133) *
              C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C107999 * C266 - C108103 * C108 + C108000 * C1741 -
            C108104 * C1570 + C108001 * C5397 - C108105 * C5273 +
            C108002 * C15912 - C108106 * C15623) *
               C182 +
           (C107999 * C495 - C108103 * C348 + C108000 * C1997 -
            C108104 * C1829 + C108001 * C5567 - C108105 * C5455 +
            C108002 * C16294 - C108106 * C16028) *
               C139824) *
              C139731 * C5270 +
          ((C108103 * C1570 - C107999 * C1741 + C108104 * C5273 -
            C108000 * C5397 + C108105 * C15623 - C108001 * C15912 +
            C108106 * C21012 - C108002 * C21200) *
               C182 +
           (C108103 * C1829 - C107999 * C1997 + C108104 * C5455 -
            C108000 * C5567 + C108105 * C16028 - C108001 * C16294 +
            C108106 * C21278 - C108002 * C21459) *
               C139824) *
              C139731 * C5271 +
          ((C107999 * C5397 - C108103 * C5273 + C108000 * C15912 -
            C108104 * C15623 + C108001 * C21200 - C108105 * C21012 +
            C108002 * C112635 - C108106 * C112510) *
               C182 +
           (C107999 * C5567 - C108103 * C5455 + C108000 * C16294 -
            C108104 * C16028 + C108001 * C21459 - C108105 * C21278 +
            C108002 * C112810 - C108106 * C112687) *
               C139824) *
              C139731 * C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q));
    d2eezx[116] +=
        (-std::pow(Pi, 2.5) *
         ((((C139731 * C114 - C54790 * C108) * C92947 +
            (C139731 * C573 - C54790 * C567) * C92797 +
            (C61976 - C61977) * C92948 + (C62328 - C62329) * C139899) *
               C5813 +
           ((C55513 - C55514) * C92947 + (C55735 - C55736) * C92797 +
            C64587 * C92948 + C64931 * C139899) *
               C5814 +
           C104340 * C5815) *
              C5270 +
          (((C61977 - C61976) * C92947 + (C62329 - C62328) * C92797 +
            (C61981 - C61980) * C92948 + (C62331 - C62330) * C139899) *
               C5813 +
           (C64591 * C92947 + C64933 * C92797 + C64593 * C92948 +
            C64934 * C139899) *
               C5814 +
           (C89717 * C92947 + C90038 * C92797 + (C63744 - C63745) * C92948 +
            (C63976 - C63977) * C139899) *
               C5815) *
              C5271 +
          ((C67258 * C92947 + C67513 * C92797 + (C67263 - C67262) * C92948 +
            (C67515 - C67514) * C139899) *
               C5813 +
           (C64589 * C92947 + C64932 * C92797 + (C64596 - C64595) * C92948 +
            (C64936 - C64935) * C139899) *
               C5814 +
           ((C63745 - C63744) * C92947 + (C63977 - C63976) * C92797 +
            (C139731 * C64245 - C54790 * C64244) * C92948 +
            (C139731 * C64929 - C54790 * C64928) * C139899) *
               C5815) *
              C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C47131 * C114 - C47136 * C108 + C47132 * C116 - C47138 * C109 +
            C47133 * C118 - C47140 * C110) *
               C92947 +
           (C47131 * C573 - C47136 * C567 + C47132 * C574 - C47138 * C568 +
            C47133 * C575 - C47140 * C569) *
               C92797 +
           (C94879 - C94880 + C94881 - C94882 + C94883 - C94884) * C92948 +
           (C95211 - C95212 + C95213 - C95214 + C95215 - C95216) * C139899) *
              C139824 * C5270 +
          ((C94880 - C94879 + C94882 - C94881 + C94884 - C94883) * C92947 +
           (C95212 - C95211 + C95214 - C95213 + C95216 - C95215) * C92797 +
           (C99961 - C99962 + C99963 - C99964 + C99965 - C99966) * C92948 +
           (C100198 - C100199 + C100200 - C100201 + C100202 - C100203) *
               C139899) *
              C139824 * C5271 +
          ((C99962 - C99961 + C99964 - C99963 + C99966 - C99965) * C92947 +
           (C100199 - C100198 + C100201 - C100200 + C100203 - C100202) *
               C92797 +
           (C47131 * C15627 - C47136 * C15623 + C47132 * C15625 -
            C47138 * C15622 + C47133 * C15629 - C47140 * C15624) *
               C92948 +
           (C47131 * C16404 - C47136 * C16401 + C47132 * C16405 -
            C47138 * C16402 + C47133 * C16406 - C47140 * C16403) *
               C139899) *
              C139824 * C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C139731 * C114 - C54790 * C108) * C108103 +
           (C139731 * C573 - C54790 * C567) * C107999 +
           (C61976 - C61977) * C108104 + (C62328 - C62329) * C108000 +
           C67258 * C108105 + C67513 * C108001 + C112692 * C108106 +
           C112864 * C108002) *
              C139824 * C5270 +
          ((C61977 - C61976) * C108103 + (C62329 - C62328) * C107999 +
           (C61981 - C61980) * C108104 + (C62331 - C62330) * C108000 +
           (C67262 - C67263) * C108105 + (C67514 - C67515) * C108001 +
           (C112694 - C112695) * C108106 + (C112865 - C112866) * C108002) *
              C139824 * C5271 +
          (C67258 * C108103 + C67513 * C107999 + C112692 * C108104 +
           C112864 * C108000 + (C112695 - C112694) * C108105 +
           (C112866 - C112865) * C108001 +
           (C139731 * C112511 - C54790 * C112510) * C108106 +
           (C139731 * C112862 - C54790 * C112861) * C108002) *
              C139824 * C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q));
    d2eezy[116] +=
        (-std::pow(Pi, 2.5) *
         (((C5813 * C183 - C5894 * C108 + C5814 * C896 - C5895 * C813 +
            C5815 * C2974 - C5896 * C2908) *
               C92947 +
           (C5813 * C629 - C5894 * C567 + C5814 * C1393 - C5895 * C1317 +
            C5815 * C3314 - C5896 * C3256) *
               C92797 +
           (C102182 - C102183 + C102184 - C102185 + C102186 - C102187) *
               C92948 +
           (C102803 - C102804 + C102805 - C102806 + C102807 - C102808) *
               C139899) *
              C139731 * C5270 +
          ((C102183 - C102182 + C102185 - C102184 + C102187 - C102186) *
               C92947 +
           (C102804 - C102803 + C102806 - C102805 + C102808 - C102807) *
               C92797 +
           (C107393 - C107394 + C107395 - C107396 + C107397 - C107398) *
               C92948 +
           (C107870 - C107871 + C107872 - C107873 + C107874 - C107875) *
               C139899) *
              C139731 * C5271 +
          ((C107394 - C107393 + C107396 - C107395 + C107398 - C107397) *
               C92947 +
           (C107871 - C107870 + C107873 - C107872 + C107875 - C107874) *
               C92797 +
           (C5813 * C15788 - C5894 * C15623 + C5814 * C18422 - C5895 * C18302 +
            C5815 * C64356 - C5896 * C64244) *
               C92948 +
           (C5813 * C16521 - C5894 * C16401 + C5814 * C19068 - C5895 * C18962 +
            C5815 * C65034 - C5896 * C64928) *
               C139899) *
              C139731 * C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C139824 * C183 - C182 * C108) * C92947 +
            (C139824 * C629 - C182 * C567) * C92797 +
            (C15795 - C15796) * C92948 + (C16525 - C16526) * C139899) *
               C47131 +
           ((C196 - C197) * C92947 + (C636 - C637) * C92797 + C15799 * C92948 +
            C16529 * C139899) *
               C47132 +
           C93374 * C47133) *
              C5270 +
          (((C15796 - C15795) * C92947 + (C16526 - C16525) * C92797 +
            (C15802 - C15801) * C92948 + (C16528 - C16527) * C139899) *
               C47131 +
           (C15807 * C92947 + C16531 * C92797 + C15809 * C92948 +
            C16532 * C139899) *
               C47132 +
           (C31358 * C92947 + C32014 * C92797 + (C13938 - C13939) * C92948 +
            (C14441 - C14442) * C139899) *
               C47133) *
              C5271 +
          ((C21114 * C92947 + C21623 * C92797 + (C21119 - C21118) * C92948 +
            (C21625 - C21624) * C139899) *
               C47131 +
           (C15805 * C92947 + C16530 * C92797 + (C15812 - C15811) * C92948 +
            (C16534 - C16533) * C139899) *
               C47132 +
           ((C13939 - C13938) * C92947 + (C14442 - C14441) * C92797 +
            (C139824 * C15790 - C182 * C15624) * C92948 +
            (C139824 * C16523 - C182 * C16403) * C139899) *
               C47133) *
              C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C139824 * C183 - C182 * C108) * C108103 +
           (C139824 * C629 - C182 * C567) * C107999 +
           (C15795 - C15796) * C108104 + (C16525 - C16526) * C108000 +
           C21114 * C108105 + C21623 * C108001 + C112576 * C108106 +
           C112918 * C108002) *
              C139731 * C5270 +
          ((C15796 - C15795) * C108103 + (C16526 - C16525) * C107999 +
           (C15802 - C15801) * C108104 + (C16528 - C16527) * C108000 +
           (C21118 - C21119) * C108105 + (C21624 - C21625) * C108001 +
           (C112578 - C112579) * C108106 + (C112919 - C112920) * C108002) *
              C139731 * C5271 +
          (C21114 * C108103 + C21623 * C107999 + C112576 * C108104 +
           C112918 * C108000 + (C112579 - C112578) * C108105 +
           (C112920 - C112919) * C108001 +
           (C139824 * C112571 - C182 * C112510) * C108106 +
           (C139824 * C112916 - C182 * C112861) * C108002) *
              C139731 * C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q));
    d2eezz[116] +=
        (-std::pow(Pi, 2.5) *
         (((C92947 * C266 - C93448 * C108 - C92947 * C567 + C92797 * C702 +
            C92948 * C1741 - C93449 * C1570 - C92948 * C2074 +
            C139899 * C2230) *
               C5813 +
           (C101980 + C101981) * C5814 + C104489 * C5815) *
              C139731 * C5270 -
          ((C105477 + C105478) * C5815 + (C105479 + C105480) * C5814 +
           (C92948 * C5397 - C93449 * C5273 - C92948 * C5621 + C139899 * C5733 +
            C92947 * C1741 - C93448 * C1570 - C92947 * C2074 + C92797 * C2230) *
               C5813) *
              C139731 * C5271 +
          ((C92947 * C5397 - C93448 * C5273 - C92947 * C5621 + C92797 * C5733 +
            C92948 * C15912 - C93449 * C15623 - C92948 * C16401 +
            C139899 * C16633) *
               C5813 +
           (C92947 * C13298 - C93448 * C13126 - C92947 * C13618 +
            C92797 * C13778 + C92948 * C18532 - C93449 * C18302 -
            C92948 * C18962 + C139899 * C19172) *
               C5814 +
           (C92947 * C13300 - C93448 * C13128 - C92947 * C13620 +
            C92797 * C13779 + C92948 * C64472 - C93449 * C64244 -
            C92948 * C64928 + C139899 * C65141) *
               C5815) *
              C139731 * C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C92947 * C266 - C93448 * C108 - C92947 * C567 + C92797 * C702 +
            C92948 * C1741 - C93449 * C1570 - C92948 * C2074 +
            C139899 * C2230) *
               C139824 * C47131 +
           (C93487 + C93488) * C139824 * C47132 + C93494 * C47133) *
              C5270 -
          ((C95443 + C95444) * C139824 * C47133 +
           (C95445 + C95446) * C139824 * C47132 +
           (C92948 * C5397 - C93449 * C5273 - C92948 * C5621 + C139899 * C5733 +
            C92947 * C1741 - C93448 * C1570 - C92947 * C2074 + C92797 * C2230) *
               C139824 * C47131) *
              C5271 +
          ((C92947 * C5397 - C93448 * C5273 - C92947 * C5621 + C92797 * C5733 +
            C92948 * C15912 - C93449 * C15623 - C92948 * C16401 +
            C139899 * C16633) *
               C139824 * C47131 +
           (C92947 * C5398 - C93448 * C5274 - C92947 * C5622 + C92797 * C5734 +
            C92948 * C15913 - C93449 * C15622 - C92948 * C16402 +
            C139899 * C16632) *
               C139824 * C47132 +
           (C92947 * C5399 - C93448 * C5275 - C92947 * C5623 + C92797 * C5735 +
            C92948 * C15914 - C93449 * C15624 - C92948 * C16403 +
            C139899 * C16634) *
               C139824 * C47133) *
              C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((C108103 * C266 - C108407 * C108 - C108103 * C567 + C107999 * C702 +
           C108104 * C1741 - C108408 * C1570 - C108104 * C2074 +
           C108000 * C2230 + C108105 * C5397 - C108409 * C5273 -
           C108105 * C5621 + C108001 * C5733 + C108106 * C15912 -
           C108410 * C15623 - C108106 * C16401 + C108002 * C16633) *
              C139824 * C139731 * C5270 -
          (C108106 * C21200 - C108410 * C21012 - C108106 * C21535 +
           C108002 * C21699 + C108105 * C15912 - C108409 * C15623 -
           C108105 * C16401 + C108001 * C16633 + C108104 * C5397 -
           C108408 * C5273 - C108104 * C5621 + C108000 * C5733 +
           C108103 * C1741 - C108407 * C1570 - C108103 * C2074 +
           C107999 * C2230) *
              C139824 * C139731 * C5271 +
          (C108103 * C5397 - C108407 * C5273 - C108103 * C5621 +
           C107999 * C5733 + C108104 * C15912 - C108408 * C15623 -
           C108104 * C16401 + C108000 * C16633 + C108105 * C21200 -
           C108409 * C21012 - C108105 * C21535 + C108001 * C21699 +
           C108106 * C112635 - C108410 * C112510 - C108106 * C112861 +
           C108002 * C112970) *
              C139824 * C139731 * C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q));
    d2eexx[117] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C137755 * C114 - C67752 * C108 - C137755 * C115 + C139967 * C126 +
            C137748 * C116 - C67754 * C109 - C137748 * C117 + C139736 * C127) *
               C140013 +
           (C77607 + C77608) * C140014 + (C84414 + C84413) * C122759) *
              C139824 * C139809 * C139792 * C97 -
          ((C137748 * C5281 - C67754 * C5275 - C137748 * C5282 +
            C139736 * C5287 + C137755 * C5279 - C67752 * C5274 -
            C137755 * C5280 + C139967 * C5286) *
               C122759 +
           (C77610 + C77609) * C140014 +
           (C137748 * C118 - C67754 * C110 - C137748 * C119 + C139736 * C128 +
            C137755 * C116 - C67752 * C109 - C137755 * C117 + C139967 * C127) *
               C140013) *
              C139824 * C139809 * C139792 * C98 +
          ((C137755 * C118 - C67752 * C110 - C137755 * C119 + C139967 * C128 +
            C137748 * C120 - C67754 * C111 - C137748 * C121 + C139736 * C129) *
               C140013 +
           (C137755 * C1574 - C67752 * C1568 - C137755 * C1575 +
            C139967 * C1583 + C137748 * C1572 - C67754 * C1567 -
            C137748 * C1573 + C139736 * C1582) *
               C140014 +
           (C137755 * C5281 - C67752 * C5275 - C137755 * C5282 +
            C139967 * C5287 + C137748 * C5283 - C67754 * C5276 -
            C137748 * C5284 + C139736 * C5288) *
               C122759) *
              C139824 * C139809 * C139792 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eexy[117] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139824 * C183 - C182 * C108) * C137755 +
            (C139824 * C189 - C182 * C115) * C139967 + (C196 - C197) * C137748 +
            (C198 - C199) * C139736) *
               C140013 +
           ((C15795 - C15796) * C137755 + (C15797 - C15798) * C139967 +
            C15799 * C137748 + C15800 * C139736) *
               C140014 +
           (C21114 * C137755 + C21115 * C139967 + C15805 * C137748 +
            C15806 * C139736) *
               C122759) *
              C139809 * C139792 * C97 +
          (((C197 - C196) * C137755 + (C199 - C198) * C139967 +
            (C201 - C200) * C137748 + (C203 - C202) * C139736) *
               C140013 +
           (C15807 * C137755 + C15808 * C139967 + C31358 * C137748 +
            C31359 * C139736) *
               C140014 +
           (C15809 * C137755 + C15810 * C139967 + (C13938 - C13939) * C137748 +
            (C13940 - C13941) * C139736) *
               C122759) *
              C139809 * C139792 * C98 +
          ((C212 * C137755 + C213 * C139967 + C214 * C137748 + C215 * C139736) *
               C140013 +
           (C29549 * C137755 + C29550 * C139967 + (C1673 - C1672) * C137748 +
            (C1675 - C1674) * C139736) *
               C140014 +
           ((C13939 - C13938) * C137755 + (C13941 - C13940) * C139967 +
            (C139824 * C5342 - C182 * C5276) * C137748 +
            (C139824 * C5346 - C182 * C5284) * C139736) *
               C122759) *
              C139809 * C139792 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eexz[117] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C140013 * C266 - C122908 * C108 + C140014 * C1741 -
            C122909 * C1570 + C122759 * C5397 - C122910 * C5273) *
               C137755 +
           (C140013 * C272 - C122908 * C115 + C140014 * C1746 -
            C122909 * C1579 + C122759 * C5401 - C122910 * C5278) *
               C139967 +
           (C122912 - C122913 + C122914 - C122915 + C122916 - C122917) *
               C137748 +
           (C122918 - C122919 + C122920 - C122921 + C122922 - C122923) *
               C139736) *
              C139824 * C139809 * C139792 * C97 +
          ((C122913 - C122912 + C122915 - C122914 + C122917 - C122916) *
               C137755 +
           (C122919 - C122918 + C122921 - C122920 + C122923 - C122922) *
               C139967 +
           (C122924 - C122925 + C122926 - C122927 + C122928 - C122929) *
               C137748 +
           (C122930 - C122931 + C122932 - C122933 + C122934 - C122935) *
               C139736) *
              C139824 * C139809 * C139792 * C98 +
          ((C122925 - C122924 + C122927 - C122926 + C122929 - C122928) *
               C137755 +
           (C122931 - C122930 + C122933 - C122932 + C122935 - C122934) *
               C139967 +
           (C140013 * C269 - C122908 * C111 + C140014 * C1744 -
            C122909 * C1567 + C122759 * C5400 - C122910 * C5276) *
               C137748 +
           (C140013 * C275 - C122908 * C121 + C140014 * C1749 -
            C122909 * C1573 + C122759 * C5404 - C122910 * C5284) *
               C139736) *
              C139824 * C139809 * C139792 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[117] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((C139967 * C114 - C137755 * C108 + C139736 * C116 -
                        C137748 * C109) *
                           C182 +
                       (C139967 * C354 - C137755 * C348 + C139736 * C355 -
                        C137748 * C349) *
                           C139824) *
                          C140013 +
                      ((C78013 - C78014 + C78015 - C78016) * C182 +
                       (C78017 - C78018 + C78019 - C78020) * C139824) *
                          C140014 +
                      ((C84710 - C84709 + C84712 - C84711) * C182 +
                       (C84714 - C84713 + C84716 - C84715) * C139824) *
                          C122759) *
                         C139809 * C139792 * C97 +
                     (((C137755 * C109 - C139967 * C116 + C137748 * C110 -
                        C139736 * C118) *
                           C182 +
                       (C137755 * C349 - C139967 * C355 + C137748 * C350 -
                        C139736 * C356) *
                           C139824) *
                          C140013 +
                      ((C78021 - C78022 + C78023 - C78024) * C182 +
                       (C78025 - C78026 + C78027 - C78028) * C139824) *
                          C140014 +
                      ((C137755 * C5274 - C139967 * C5279 + C137748 * C5275 -
                        C139736 * C5281) *
                           C182 +
                       (C137755 * C5456 - C139967 * C5460 + C137748 * C5457 -
                        C139736 * C5461) *
                           C139824) *
                          C122759) *
                         C139809 * C139792 * C98 +
                     (((C139967 * C118 - C137755 * C110 + C139736 * C120 -
                        C137748 * C111) *
                           C182 +
                       (C139967 * C356 - C137755 * C350 + C139736 * C357 -
                        C137748 * C351) *
                           C139824) *
                          C140013 +
                      ((C139967 * C1574 - C137755 * C1568 + C139736 * C1572 -
                        C137748 * C1567) *
                           C182 +
                       (C139967 * C1836 - C137755 * C1831 + C139736 * C1837 -
                        C137748 * C1832) *
                           C139824) *
                          C140014 +
                      ((C139967 * C5281 - C137755 * C5275 + C139736 * C5283 -
                        C137748 * C5276) *
                           C182 +
                       (C139967 * C5461 - C137755 * C5457 + C139736 * C5462 -
                        C137748 * C5458) *
                           C139824) *
                          C122759) *
                         C139809 * C139792 * C99)) /
                   (p * q * std::sqrt(p + q));
    d2eeyy[117] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C182 * C183 - C410 * C108 - C182 * C348 + C139824 * C411) *
                C139967 +
            C442 * C139736) *
               C140013 +
           (C16192 * C139967 + C1931 * C139736) * C140014 +
           (C16193 * C139967 + C14203 * C139736) * C122759) *
              C139809 * C139792 * C97 -
          ((C14204 * C139736 + C14203 * C139967) * C122759 +
           (C1930 * C139736 + C1931 * C139967) * C140014 +
           (C443 * C139736 + C442 * C139967) * C140013) *
              C139809 * C139792 * C98 +
          ((C443 * C139967 + C444 * C139736) * C140013 +
           (C1930 * C139967 + C1929 * C139736) * C140014 +
           (C14204 * C139967 +
            (C182 * C5342 - C410 * C5276 - C182 * C5458 + C139824 * C5516) *
                C139736) *
               C122759) *
              C139809 * C139792 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[117] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C140013 * C266 - C122908 * C108 + C140014 * C1741 -
             C122909 * C1570 + C122759 * C5397 - C122910 * C5273) *
                C182 +
            (C140013 * C495 - C122908 * C348 + C140014 * C1997 -
             C122909 * C1829 + C122759 * C5567 - C122910 * C5455) *
                C139824) *
               C139967 +
           ((C122912 - C122913 + C122914 - C122915 + C122916 - C122917) * C182 +
            (C123158 - C123159 + C123160 - C123161 + C123162 - C123163) *
                C139824) *
               C139736) *
              C139809 * C139792 * C97 +
          (((C122913 - C122912 + C122915 - C122914 + C122917 - C122916) * C182 +
            (C123159 - C123158 + C123161 - C123160 + C123163 - C123162) *
                C139824) *
               C139967 +
           ((C122924 - C122925 + C122926 - C122927 + C122928 - C122929) * C182 +
            (C123164 - C123165 + C123166 - C123167 + C123168 - C123169) *
                C139824) *
               C139736) *
              C139809 * C139792 * C98 +
          (((C122925 - C122924 + C122927 - C122926 + C122929 - C122928) * C182 +
            (C123165 - C123164 + C123167 - C123166 + C123169 - C123168) *
                C139824) *
               C139967 +
           ((C140013 * C269 - C122908 * C111 + C140014 * C1744 -
             C122909 * C1567 + C122759 * C5400 - C122910 * C5276) *
                C182 +
            (C140013 * C498 - C122908 * C351 + C140014 * C2000 -
             C122909 * C1832 + C122759 * C5570 - C122910 * C5458) *
                C139824) *
               C139736) *
              C139809 * C139792 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eezx[117] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C139967 * C114 - C137755 * C108 + C139736 * C116 - C137748 * C109) *
               C122908 +
           (C139967 * C573 - C137755 * C567 + C139736 * C574 - C137748 * C568) *
               C140013 +
           (C78013 - C78014 + C78015 - C78016) * C122909 +
           (C78421 - C78422 + C78423 - C78424) * C140014 +
           (C84710 - C84709 + C84712 - C84711) * C122910 +
           (C85012 - C85011 + C85014 - C85013) * C122759) *
              C139824 * C139809 * C139792 * C97 +
          ((C137755 * C109 - C139967 * C116 + C137748 * C110 - C139736 * C118) *
               C122908 +
           (C137755 * C568 - C139967 * C574 + C137748 * C569 - C139736 * C575) *
               C140013 +
           (C78021 - C78022 + C78023 - C78024) * C122909 +
           (C78425 - C78426 + C78427 - C78428) * C140014 +
           (C137755 * C5274 - C139967 * C5279 + C137748 * C5275 -
            C139736 * C5281) *
               C122910 +
           (C137755 * C5622 - C139967 * C5626 + C137748 * C5623 -
            C139736 * C5627) *
               C122759) *
              C139824 * C139809 * C139792 * C98 +
          ((C139967 * C118 - C137755 * C110 + C139736 * C120 - C137748 * C111) *
               C122908 +
           (C139967 * C575 - C137755 * C569 + C139736 * C576 - C137748 * C570) *
               C140013 +
           (C139967 * C1574 - C137755 * C1568 + C139736 * C1572 -
            C137748 * C1567) *
               C122909 +
           (C139967 * C2081 - C137755 * C2076 + C139736 * C2082 -
            C137748 * C2077) *
               C140014 +
           (C139967 * C5281 - C137755 * C5275 + C139736 * C5283 -
            C137748 * C5276) *
               C122910 +
           (C139967 * C5627 - C137755 * C5623 + C139736 * C5628 -
            C137748 * C5624) *
               C122759) *
              C139824 * C139809 * C139792 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eezy[117] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139824 * C183 - C182 * C108) * C122908 +
            (C139824 * C629 - C182 * C567) * C140013 +
            (C15795 - C15796) * C122909 + (C16525 - C16526) * C140014 +
            C21114 * C122910 + C21623 * C122759) *
               C139967 +
           ((C196 - C197) * C122908 + (C636 - C637) * C140013 +
            C15799 * C122909 + C16529 * C140014 + C15805 * C122910 +
            C16530 * C122759) *
               C139736) *
              C139809 * C139792 * C97 +
          (((C197 - C196) * C122908 + (C637 - C636) * C140013 +
            C15807 * C122909 + C16531 * C140014 + C15809 * C122910 +
            C16532 * C122759) *
               C139967 +
           ((C201 - C200) * C122908 + (C640 - C639) * C140013 +
            C31358 * C122909 + C32014 * C140014 + (C13938 - C13939) * C122910 +
            (C14441 - C14442) * C122759) *
               C139736) *
              C139809 * C139792 * C98 +
          ((C212 * C122908 + C646 * C140013 + C29549 * C122909 +
            C30048 * C140014 + (C13939 - C13938) * C122910 +
            (C14442 - C14441) * C122759) *
               C139967 +
           (C214 * C122908 + C647 * C140013 + (C1673 - C1672) * C122909 +
            (C2161 - C2160) * C140014 +
            (C139824 * C5342 - C182 * C5276) * C122910 +
            (C139824 * C5682 - C182 * C5624) * C122759) *
               C139736) *
              C139809 * C139792 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eezz[117] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((C122908 * C266 - C123391 * C108 - C122908 * C567 +
                       C140013 * C702 + C122909 * C1741 - C123392 * C1570 -
                       C122909 * C2074 + C140014 * C2230 + C122910 * C5397 -
                       C123393 * C5273 - C122910 * C5621 + C122759 * C5733) *
                          C139824 * C139967 +
                      (C123431 + C123432 + C123433) * C139824 * C139736) *
                         C139809 * C139792 * C97 -
                     ((C123434 + C123435 + C123436) * C139824 * C139736 +
                      (C123433 + C123432 + C123431) * C139824 * C139967) *
                         C139809 * C139792 * C98 +
                     ((C123436 + C123435 + C123434) * C139824 * C139967 +
                      (C122908 * C269 - C123391 * C111 - C122908 * C570 +
                       C140013 * C705 + C122909 * C1744 - C123392 * C1567 -
                       C122909 * C2077 + C140014 * C2227 + C122910 * C5400 -
                       C123393 * C5276 - C122910 * C5624 + C122759 * C5736) *
                          C139824 * C139736) *
                         C139809 * C139792 * C99)) /
                   (p * q * std::sqrt(p + q));
    d2eexx[118] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C137755 * C114 - C67752 * C108 - C137755 * C115 + C139967 * C126 +
             C137748 * C116 - C67754 * C109 - C137748 * C117 + C139736 * C127) *
                C140013 +
            (C77607 + C77608) * C140014 + (C84414 + C84413) * C122759) *
               C139824 * C139809 * C806 -
           ((C80891 + C80892) * C122759 + C80886 * C140014 +
            (C68585 + C68584) * C140013) *
               C139824 * C139809 * C140000) *
              C808 +
          (((C68588 + C68589) * C140013 + (C76373 + C76374) * C140014 +
            (C137755 * C13132 - C67752 * C13127 - C137755 * C13133 +
             C139967 * C13139 + C137748 * C14660 - C67754 * C14659 -
             C137748 * C14661 + C139736 * C14662) *
                C122759) *
               C139824 * C139809 * C140000 -
           ((C137748 * C5281 - C67754 * C5275 - C137748 * C5282 +
             C139736 * C5287 + C137755 * C5279 - C67752 * C5274 -
             C137755 * C5280 + C139967 * C5286) *
                C122759 +
            (C77610 + C77609) * C140014 +
            (C137748 * C118 - C67754 * C110 - C137748 * C119 + C139736 * C128 +
             C137755 * C116 - C67752 * C109 - C137755 * C117 + C139967 * C127) *
                C140013) *
               C139824 * C139809 * C806) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexy[118] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139824 * C183 - C182 * C108) * C137755 +
             (C139824 * C189 - C182 * C115) * C139967 +
             (C196 - C197) * C137748 + (C198 - C199) * C139736) *
                C140013 +
            ((C15795 - C15796) * C137755 + (C15797 - C15798) * C139967 +
             C15799 * C137748 + C15800 * C139736) *
                C140014 +
            (C21114 * C137755 + C21115 * C139967 + C15805 * C137748 +
             C15806 * C139736) *
                C122759) *
               C139809 * C806 +
           (((C182 * C813 - C139824 * C896) * C137755 +
             (C182 * C822 - C139824 * C901) * C139967 +
             (C907 - C908) * C137748 + (C909 - C910) * C139736) *
                C140013 +
            ((C18427 - C18428) * C137755 + (C18429 - C18430) * C139967 +
             (C14764 - C14765) * C137748 + (C14766 - C14767) * C139736) *
                C140014 +
            ((C18431 - C18432) * C137755 + (C18433 - C18434) * C139967 +
             (C14768 - C14769) * C137748 + (C14770 - C14771) * C139736) *
                C122759) *
               C139809 * C140000) *
              C808 +
          ((((C197 - C196) * C137755 + (C199 - C198) * C139967 +
             (C201 - C200) * C137748 + (C203 - C202) * C139736) *
                C140013 +
            (C15807 * C137755 + C15808 * C139967 + C31358 * C137748 +
             C31359 * C139736) *
                C140014 +
            (C15809 * C137755 + C15810 * C139967 + (C13938 - C13939) * C137748 +
             (C13940 - C13941) * C139736) *
                C122759) *
               C139809 * C806 +
           (((C908 - C907) * C137755 + (C910 - C909) * C139967 +
             (C912 - C911) * C137748 + (C914 - C913) * C139736) *
                C140013 +
            ((C14765 - C14764) * C137755 + (C14767 - C14766) * C139967 +
             (C30370 - C30369) * C137748 + (C30372 - C30371) * C139736) *
                C140014 +
            ((C14769 - C14768) * C137755 + (C14771 - C14770) * C139967 +
             (C139824 * C14761 - C182 * C14659) * C137748 +
             (C139824 * C14762 - C182 * C14661) * C139736) *
                C122759) *
               C139809 * C140000) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexz[118] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C140013 * C266 - C122908 * C108 + C140014 * C1741 -
             C122909 * C1570 + C122759 * C5397 - C122910 * C5273) *
                C137755 +
            (C140013 * C272 - C122908 * C115 + C140014 * C1746 -
             C122909 * C1579 + C122759 * C5401 - C122910 * C5278) *
                C139967 +
            (C122912 - C122913 + C122914 - C122915 + C122916 - C122917) *
                C137748 +
            (C122918 - C122919 + C122920 - C122921 + C122922 - C122923) *
                C139736) *
               C139824 * C139809 * C806 +
           ((C122908 * C813 - C140013 * C984 + C122909 * C3438 -
             C140014 * C3594 + C122910 * C13126 - C122759 * C13298) *
                C137755 +
            (C122908 * C822 - C140013 * C989 + C122909 * C3443 -
             C140014 * C3598 + C122910 * C13131 - C122759 * C13302) *
                C139967 +
            (C123731 - C123732 + C123733 - C123734 + C123735 - C123736) *
                C137748 +
            (C123737 - C123738 + C123739 - C123740 + C123741 - C123742) *
                C139736) *
               C139824 * C139809 * C140000) *
              C808 +
          (((C122913 - C122912 + C122915 - C122914 + C122917 - C122916) *
                C137755 +
            (C122919 - C122918 + C122921 - C122920 + C122923 - C122922) *
                C139967 +
            (C122924 - C122925 + C122926 - C122927 + C122928 - C122929) *
                C137748 +
            (C122930 - C122931 + C122932 - C122933 + C122934 - C122935) *
                C139736) *
               C139824 * C139809 * C806 +
           ((C123732 - C123731 + C123734 - C123733 + C123736 - C123735) *
                C137755 +
            (C123738 - C123737 + C123740 - C123739 + C123742 - C123741) *
                C139967 +
            (C140013 * C986 - C122908 * C811 + C140014 * C3596 -
             C122909 * C3440 + C122759 * C14869 - C122910 * C14659) *
                C137748 +
            (C140013 * C991 - C122908 * C818 + C140014 * C3600 -
             C122909 * C3447 + C122759 * C14870 - C122910 * C14661) *
                C139736) *
               C139824 * C139809 * C140000) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[118] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((((C139967 * C114 - C137755 * C108 + C139736 * C116 -
                         C137748 * C109) *
                            C182 +
                        (C139967 * C354 - C137755 * C348 + C139736 * C355 -
                         C137748 * C349) *
                            C139824) *
                           C140013 +
                       ((C78013 - C78014 + C78015 - C78016) * C182 +
                        (C78017 - C78018 + C78019 - C78020) * C139824) *
                           C140014 +
                       ((C84710 - C84709 + C84712 - C84711) * C182 +
                        (C84714 - C84713 + C84716 - C84715) * C139824) *
                           C122759) *
                          C139809 * C806 +
                      (((C68899 - C68898 + C68901 - C68900) * C182 +
                        (C68903 - C68902 + C68905 - C68904) * C139824) *
                           C140013 +
                       (C81301 * C182 + C81302 * C139824) * C140014 +
                       ((C81291 - C81292 + C81293 - C81294) * C182 +
                        (C81295 - C81296 + C81297 - C81298) * C139824) *
                           C122759) *
                          C139809 * C140000) *
                         C808 +
                     ((((C137755 * C109 - C139967 * C116 + C137748 * C110 -
                         C139736 * C118) *
                            C182 +
                        (C137755 * C349 - C139967 * C355 + C137748 * C350 -
                         C139736 * C356) *
                            C139824) *
                           C140013 +
                       ((C78021 - C78022 + C78023 - C78024) * C182 +
                        (C78025 - C78026 + C78027 - C78028) * C139824) *
                           C140014 +
                       ((C137755 * C5274 - C139967 * C5279 + C137748 * C5275 -
                         C139736 * C5281) *
                            C182 +
                        (C137755 * C5456 - C139967 * C5460 + C137748 * C5457 -
                         C139736 * C5461) *
                            C139824) *
                           C122759) *
                          C139809 * C806 +
                      (((C68915 - C68914 + C68917 - C68916) * C182 +
                        (C68919 - C68918 + C68921 - C68920) * C139824) *
                           C140013 +
                       ((C76774 - C76773 + C76776 - C76775) * C182 +
                        (C76778 - C76777 + C76780 - C76779) * C139824) *
                           C140014 +
                       ((C139967 * C13132 - C137755 * C13127 +
                         C139736 * C14660 - C137748 * C14659) *
                            C182 +
                        (C139967 * C13385 - C137755 * C13381 +
                         C139736 * C14982 - C137748 * C14981) *
                            C139824) *
                           C122759) *
                          C139809 * C140000) *
                         C139998)) /
                   (p * q * std::sqrt(p + q));
    d2eeyy[118] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C182 * C183 - C410 * C108 - C182 * C348 + C139824 * C411) *
                 C139967 +
             C442 * C139736) *
                C140013 +
            (C16192 * C139967 + C1931 * C139736) * C140014 +
            (C16193 * C139967 + C14203 * C139736) * C122759) *
               C139809 * C806 -
           ((C15095 * C139736 + C18762 * C139967) * C122759 +
            (C15096 * C139736 + C18761 * C139967) * C140014 +
            (C1174 * C139736 +
             (C182 * C896 - C410 * C813 - C182 * C1072 + C139824 * C1151) *
                 C139967) *
                C140013) *
               C139809 * C140000) *
              C808 +
          (((C1174 * C139967 + C1173 * C139736) * C140013 +
            (C15096 * C139967 + C30689 * C139736) * C140014 +
            (C15095 * C139967 + (C182 * C14761 - C410 * C14659 - C182 * C14981 +
                                 C139824 * C15081) *
                                    C139736) *
                C122759) *
               C139809 * C140000 -
           ((C14204 * C139736 + C14203 * C139967) * C122759 +
            (C1930 * C139736 + C1931 * C139967) * C140014 +
            (C443 * C139736 + C442 * C139967) * C140013) *
               C139809 * C806) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[118] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C140013 * C266 - C122908 * C108 + C140014 * C1741 -
              C122909 * C1570 + C122759 * C5397 - C122910 * C5273) *
                 C182 +
             (C140013 * C495 - C122908 * C348 + C140014 * C1997 -
              C122909 * C1829 + C122759 * C5567 - C122910 * C5455) *
                 C139824) *
                C139967 +
            ((C122912 - C122913 + C122914 - C122915 + C122916 - C122917) *
                 C182 +
             (C123158 - C123159 + C123160 - C123161 + C123162 - C123163) *
                 C139824) *
                C139736) *
               C139809 * C806 +
           (((C122908 * C813 - C140013 * C984 + C122909 * C3438 -
              C140014 * C3594 + C122910 * C13126 - C122759 * C13298) *
                 C182 +
             (C122908 * C1072 - C140013 * C1240 + C122909 * C3668 -
              C140014 * C3812 + C122910 * C13380 - C122759 * C13540) *
                 C139824) *
                C139967 +
            ((C123731 - C123732 + C123733 - C123734 + C123735 - C123736) *
                 C182 +
             (C124037 - C124038 + C124039 - C124040 + C124041 - C124042) *
                 C139824) *
                C139736) *
               C139809 * C140000) *
              C808 +
          ((((C122913 - C122912 + C122915 - C122914 + C122917 - C122916) *
                 C182 +
             (C123159 - C123158 + C123161 - C123160 + C123163 - C123162) *
                 C139824) *
                C139967 +
            ((C122924 - C122925 + C122926 - C122927 + C122928 - C122929) *
                 C182 +
             (C123164 - C123165 + C123166 - C123167 + C123168 - C123169) *
                 C139824) *
                C139736) *
               C139809 * C806 +
           (((C123732 - C123731 + C123734 - C123733 + C123736 - C123735) *
                 C182 +
             (C124038 - C124037 + C124040 - C124039 + C124042 - C124041) *
                 C139824) *
                C139967 +
            ((C140013 * C986 - C122908 * C811 + C140014 * C3596 -
              C122909 * C3440 + C122759 * C14869 - C122910 * C14659) *
                 C182 +
             (C140013 * C1242 - C122908 * C1074 + C140014 * C3814 -
              C122909 * C3670 + C122759 * C15194 - C122910 * C14981) *
                 C139824) *
                C139736) *
               C139809 * C140000) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eezx[118] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139967 * C114 - C137755 * C108 + C139736 * C116 -
             C137748 * C109) *
                C122908 +
            (C139967 * C573 - C137755 * C567 + C139736 * C574 -
             C137748 * C568) *
                C140013 +
            (C78013 - C78014 + C78015 - C78016) * C122909 +
            (C78421 - C78422 + C78423 - C78424) * C140014 +
            (C84710 - C84709 + C84712 - C84711) * C122910 +
            (C85012 - C85011 + C85014 - C85013) * C122759) *
               C139824 * C139809 * C806 +
           ((C68899 - C68898 + C68901 - C68900) * C122908 +
            (C69246 - C69245 + C69248 - C69247) * C140013 + C81301 * C122909 +
            C81702 * C140014 + (C81291 - C81292 + C81293 - C81294) * C122910 +
            (C81697 - C81698 + C81699 - C81700) * C122759) *
               C139824 * C139809 * C140000) *
              C808 +
          (((C137755 * C109 - C139967 * C116 + C137748 * C110 -
             C139736 * C118) *
                C122908 +
            (C137755 * C568 - C139967 * C574 + C137748 * C569 -
             C139736 * C575) *
                C140013 +
            (C78021 - C78022 + C78023 - C78024) * C122909 +
            (C78425 - C78426 + C78427 - C78428) * C140014 +
            (C137755 * C5274 - C139967 * C5279 + C137748 * C5275 -
             C139736 * C5281) *
                C122910 +
            (C137755 * C5622 - C139967 * C5626 + C137748 * C5623 -
             C139736 * C5627) *
                C122759) *
               C139824 * C139809 * C806 +
           ((C68915 - C68914 + C68917 - C68916) * C122908 +
            (C69254 - C69253 + C69256 - C69255) * C140013 +
            (C76774 - C76773 + C76776 - C76775) * C122909 +
            (C77186 - C77185 + C77188 - C77187) * C140014 +
            (C139967 * C13132 - C137755 * C13127 + C139736 * C14660 -
             C137748 * C14659) *
                C122910 +
            (C139967 * C13623 - C137755 * C13619 + C139736 * C15300 -
             C137748 * C15299) *
                C122759) *
               C139824 * C139809 * C140000) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eezy[118] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139824 * C183 - C182 * C108) * C122908 +
             (C139824 * C629 - C182 * C567) * C140013 +
             (C15795 - C15796) * C122909 + (C16525 - C16526) * C140014 +
             C21114 * C122910 + C21623 * C122759) *
                C139967 +
            ((C196 - C197) * C122908 + (C636 - C637) * C140013 +
             C15799 * C122909 + C16529 * C140014 + C15805 * C122910 +
             C16530 * C122759) *
                C139736) *
               C139809 * C806 +
           (((C182 * C813 - C139824 * C896) * C122908 +
             (C182 * C1317 - C139824 * C1393) * C140013 +
             (C18427 - C18428) * C122909 + (C19071 - C19072) * C140014 +
             (C18431 - C18432) * C122910 + (C19073 - C19074) * C122759) *
                C139967 +
            ((C907 - C908) * C122908 + (C1399 - C1400) * C140013 +
             (C14764 - C14765) * C122909 + (C15401 - C15402) * C140014 +
             (C14768 - C14769) * C122910 + (C15403 - C15404) * C122759) *
                C139736) *
               C139809 * C140000) *
              C808 +
          ((((C197 - C196) * C122908 + (C637 - C636) * C140013 +
             C15807 * C122909 + C16531 * C140014 + C15809 * C122910 +
             C16532 * C122759) *
                C139967 +
            ((C201 - C200) * C122908 + (C640 - C639) * C140013 +
             C31358 * C122909 + C32014 * C140014 + (C13938 - C13939) * C122910 +
             (C14441 - C14442) * C122759) *
                C139736) *
               C139809 * C806 +
           (((C908 - C907) * C122908 + (C1400 - C1399) * C140013 +
             (C14765 - C14764) * C122909 + (C15402 - C15401) * C140014 +
             (C14769 - C14768) * C122910 + (C15404 - C15403) * C122759) *
                C139967 +
            ((C912 - C911) * C122908 + (C1402 - C1401) * C140013 +
             (C30370 - C30369) * C122909 + (C30993 - C30992) * C140014 +
             (C139824 * C14761 - C182 * C14659) * C122910 +
             (C139824 * C15399 - C182 * C15299) * C122759) *
                C139736) *
               C139809 * C140000) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eezz[118] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C122908 * C266 - C123391 * C108 - C122908 * C567 + C140013 * C702 +
             C122909 * C1741 - C123392 * C1570 - C122909 * C2074 +
             C140014 * C2230 + C122910 * C5397 - C123393 * C5273 -
             C122910 * C5621 + C122759 * C5733) *
                C139824 * C139967 +
            (C123431 + C123432 + C123433) * C139824 * C139736) *
               C139809 * C806 -
           ((C124355 + C124356 + C124357) * C139824 * C139736 +
            (C122910 * C13298 - C123393 * C13126 - C122910 * C13618 +
             C122759 * C13778 + C122909 * C3594 - C123392 * C3438 -
             C122909 * C3882 + C140014 * C4026 + C122908 * C984 -
             C123391 * C813 - C122908 * C1317 + C140013 * C1473) *
                C139824 * C139967) *
               C139809 * C140000) *
              C808 +
          (((C124357 + C124356 + C124355) * C139824 * C139967 +
            (C122908 * C986 - C123391 * C811 - C122908 * C1319 +
             C140013 * C1471 + C122909 * C3596 - C123392 * C3440 -
             C122909 * C3884 + C140014 * C4028 + C122910 * C14869 -
             C123393 * C14659 - C122910 * C15299 + C122759 * C15502) *
                C139824 * C139736) *
               C139809 * C140000 -
           ((C123434 + C123435 + C123436) * C139824 * C139736 +
            (C123433 + C123432 + C123431) * C139824 * C139967) *
               C139809 * C806) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexx[119] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C137755 * C114 - C67752 * C108 - C137755 * C115 + C139967 * C126 +
             C137748 * C116 - C67754 * C109 - C137748 * C117 + C139736 * C127) *
                C140013 +
            (C77607 + C77608) * C140014 + (C84414 + C84413) * C122759) *
               C139824 * C1565 -
           ((C137748 * C15625 - C67754 * C15622 - C137748 * C15626 +
             C139736 * C15631 + C137755 * C15627 - C67752 * C15623 -
             C137755 * C15628 + C139967 * C15632) *
                C122759 +
            (C84413 + C84414) * C140014 + (C77608 + C77607) * C140013) *
               C139824 * C140002) *
              C139792 * C808 +
          (((C77609 + C77610) * C140013 + (C124468 + C124469) * C140014 +
            (C137755 * C15625 - C67752 * C15622 - C137755 * C15626 +
             C139967 * C15631 + C137748 * C15629 - C67754 * C15624 -
             C137748 * C15630 + C139736 * C15633) *
                C122759) *
               C139824 * C140002 -
           ((C124469 + C124468) * C122759 + (C77610 + C77609) * C140014 +
            (C137748 * C118 - C67754 * C110 - C137748 * C119 + C139736 * C128 +
             C137755 * C116 - C67752 * C109 - C137755 * C117 + C139967 * C127) *
                C140013) *
               C139824 * C1565) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexy[119] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139824 * C183 - C182 * C108) * C137755 +
             (C139824 * C189 - C182 * C115) * C139967 +
             (C196 - C197) * C137748 + (C198 - C199) * C139736) *
                C140013 +
            ((C15795 - C15796) * C137755 + (C15797 - C15798) * C139967 +
             C15799 * C137748 + C15800 * C139736) *
                C140014 +
            (C21114 * C137755 + C21115 * C139967 + C15805 * C137748 +
             C15806 * C139736) *
                C122759) *
               C1565 +
           (((C15796 - C15795) * C137755 + (C15798 - C15797) * C139967 +
             C15807 * C137748 + C15808 * C139736) *
                C140013 +
            ((C15802 - C15801) * C137755 + (C15804 - C15803) * C139967 +
             C15809 * C137748 + C15810 * C139736) *
                C140014 +
            ((C21118 - C21119) * C137755 + (C21120 - C21121) * C139967 +
             (C15811 - C15812) * C137748 + (C15813 - C15814) * C139736) *
                C122759) *
               C140002) *
              C139792 * C808 +
          ((((C197 - C196) * C137755 + (C199 - C198) * C139967 +
             (C201 - C200) * C137748 + (C203 - C202) * C139736) *
                C140013 +
            (C15807 * C137755 + C15808 * C139967 + C31358 * C137748 +
             C31359 * C139736) *
                C140014 +
            (C15809 * C137755 + C15810 * C139967 + (C13938 - C13939) * C137748 +
             (C13940 - C13941) * C139736) *
                C122759) *
               C1565 +
           ((C15799 * C137755 + C15800 * C139967 + C29549 * C137748 +
             C29550 * C139736) *
                C140013 +
            (C15805 * C137755 + C15806 * C139967 + (C13939 - C13938) * C137748 +
             (C13941 - C13940) * C139736) *
                C140014 +
            ((C15812 - C15811) * C137755 + (C15814 - C15813) * C139967 +
             (C139824 * C15790 - C182 * C15624) * C137748 +
             (C139824 * C15793 - C182 * C15630) * C139736) *
                C122759) *
               C140002) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexz[119] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C140013 * C266 - C122908 * C108 + C140014 * C1741 -
             C122909 * C1570 + C122759 * C5397 - C122910 * C5273) *
                C137755 +
            (C140013 * C272 - C122908 * C115 + C140014 * C1746 -
             C122909 * C1579 + C122759 * C5401 - C122910 * C5278) *
                C139967 +
            (C122912 - C122913 + C122914 - C122915 + C122916 - C122917) *
                C137748 +
            (C122918 - C122919 + C122920 - C122921 + C122922 - C122923) *
                C139736) *
               C139824 * C1565 +
           ((C122908 * C1570 - C140013 * C1741 + C122909 * C5273 -
             C140014 * C5397 + C122910 * C15623 - C122759 * C15912) *
                C137755 +
            (C122908 * C1579 - C140013 * C1746 + C122909 * C5278 -
             C140014 * C5401 + C122910 * C15628 - C122759 * C15915) *
                C139967 +
            (C124666 - C124667 + C124668 - C124669 + C124670 - C124671) *
                C137748 +
            (C124672 - C124673 + C124674 - C124675 + C124676 - C124677) *
                C139736) *
               C139824 * C140002) *
              C139792 * C808 +
          (((C122913 - C122912 + C122915 - C122914 + C122917 - C122916) *
                C137755 +
            (C122919 - C122918 + C122921 - C122920 + C122923 - C122922) *
                C139967 +
            (C122924 - C122925 + C122926 - C122927 + C122928 - C122929) *
                C137748 +
            (C122930 - C122931 + C122932 - C122933 + C122934 - C122935) *
                C139736) *
               C139824 * C1565 +
           ((C124667 - C124666 + C124669 - C124668 + C124671 - C124670) *
                C137755 +
            (C124673 - C124672 + C124675 - C124674 + C124677 - C124676) *
                C139967 +
            (C140013 * C1743 - C122908 * C1568 + C140014 * C5399 -
             C122909 * C5275 + C122759 * C15914 - C122910 * C15624) *
                C137748 +
            (C140013 * C1748 - C122908 * C1575 + C140014 * C5403 -
             C122909 * C5282 + C122759 * C15917 - C122910 * C15630) *
                C139736) *
               C139824 * C140002) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[119] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((((C139967 * C114 - C137755 * C108 + C139736 * C116 -
                         C137748 * C109) *
                            C182 +
                        (C139967 * C354 - C137755 * C348 + C139736 * C355 -
                         C137748 * C349) *
                            C139824) *
                           C140013 +
                       ((C78013 - C78014 + C78015 - C78016) * C182 +
                        (C78017 - C78018 + C78019 - C78020) * C139824) *
                           C140014 +
                       ((C84710 - C84709 + C84712 - C84711) * C182 +
                        (C84714 - C84713 + C84716 - C84715) * C139824) *
                           C122759) *
                          C1565 +
                      (((C78014 - C78013 + C78016 - C78015) * C182 +
                        (C78018 - C78017 + C78020 - C78019) * C139824) *
                           C140013 +
                       ((C84709 - C84710 + C84711 - C84712) * C182 +
                        (C84713 - C84714 + C84715 - C84716) * C139824) *
                           C140014 +
                       ((C137755 * C15623 - C139967 * C15627 +
                         C137748 * C15622 - C139736 * C15625) *
                            C182 +
                        (C137755 * C16028 - C139967 * C16031 +
                         C137748 * C16029 - C139736 * C16032) *
                            C139824) *
                           C122759) *
                          C140002) *
                         C139792 * C808 +
                     ((((C137755 * C109 - C139967 * C116 + C137748 * C110 -
                         C139736 * C118) *
                            C182 +
                        (C137755 * C349 - C139967 * C355 + C137748 * C350 -
                         C139736 * C356) *
                            C139824) *
                           C140013 +
                       ((C78021 - C78022 + C78023 - C78024) * C182 +
                        (C78025 - C78026 + C78027 - C78028) * C139824) *
                           C140014 +
                       ((C124776 - C124777 + C124778 - C124779) * C182 +
                        (C124780 - C124781 + C124782 - C124783) * C139824) *
                           C122759) *
                          C1565 +
                      (((C78022 - C78021 + C78024 - C78023) * C182 +
                        (C78026 - C78025 + C78028 - C78027) * C139824) *
                           C140013 +
                       ((C124777 - C124776 + C124779 - C124778) * C182 +
                        (C124781 - C124780 + C124783 - C124782) * C139824) *
                           C140014 +
                       ((C139967 * C15625 - C137755 * C15622 +
                         C139736 * C15629 - C137748 * C15624) *
                            C182 +
                        (C139967 * C16032 - C137755 * C16029 +
                         C139736 * C16033 - C137748 * C16030) *
                            C139824) *
                           C122759) *
                          C140002) *
                         C139792 * C139998)) /
                   (p * q * std::sqrt(p + q));
    d2eeyy[119] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C182 * C183 - C410 * C108 - C182 * C348 + C139824 * C411) *
                 C139967 +
             C442 * C139736) *
                C140013 +
            (C124882 + C124883) * C140014 + (C124884 + C124885) * C122759) *
               C1565 -
           ((C16194 * C139736 + C21384 * C139967) * C122759 +
            (C124885 + C124884) * C140014 + (C124883 + C124882) * C140013) *
               C140002) *
              C139792 * C808 +
          (((C124886 + C124887) * C140013 + (C124888 + C124889) * C140014 +
            (C16194 * C139967 + (C182 * C15790 - C410 * C15624 - C182 * C16030 +
                                 C139824 * C16166) *
                                    C139736) *
                C122759) *
               C140002 -
           ((C124889 + C124888) * C122759 + (C124887 + C124886) * C140014 +
            (C443 * C139736 + C442 * C139967) * C140013) *
               C1565) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[119] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C140013 * C266 - C122908 * C108 + C140014 * C1741 -
              C122909 * C1570 + C122759 * C5397 - C122910 * C5273) *
                 C182 +
             (C140013 * C495 - C122908 * C348 + C140014 * C1997 -
              C122909 * C1829 + C122759 * C5567 - C122910 * C5455) *
                 C139824) *
                C139967 +
            ((C122912 - C122913 + C122914 - C122915 + C122916 - C122917) *
                 C182 +
             (C123158 - C123159 + C123160 - C123161 + C123162 - C123163) *
                 C139824) *
                C139736) *
               C1565 +
           (((C122908 * C1570 - C140013 * C1741 + C122909 * C5273 -
              C140014 * C5397 + C122910 * C15623 - C122759 * C15912) *
                 C182 +
             (C122908 * C1829 - C140013 * C1997 + C122909 * C5455 -
              C140014 * C5567 + C122910 * C16028 - C122759 * C16294) *
                 C139824) *
                C139967 +
            ((C124666 - C124667 + C124668 - C124669 + C124670 - C124671) *
                 C182 +
             (C124988 - C124989 + C124990 - C124991 + C124992 - C124993) *
                 C139824) *
                C139736) *
               C140002) *
              C139792 * C808 +
          ((((C122913 - C122912 + C122915 - C122914 + C122917 - C122916) *
                 C182 +
             (C123159 - C123158 + C123161 - C123160 + C123163 - C123162) *
                 C139824) *
                C139967 +
            ((C122924 - C122925 + C122926 - C122927 + C122928 - C122929) *
                 C182 +
             (C123164 - C123165 + C123166 - C123167 + C123168 - C123169) *
                 C139824) *
                C139736) *
               C1565 +
           (((C124667 - C124666 + C124669 - C124668 + C124671 - C124670) *
                 C182 +
             (C124989 - C124988 + C124991 - C124990 + C124993 - C124992) *
                 C139824) *
                C139967 +
            ((C140013 * C1743 - C122908 * C1568 + C140014 * C5399 -
              C122909 * C5275 + C122759 * C15914 - C122910 * C15624) *
                 C182 +
             (C140013 * C1999 - C122908 * C1831 + C140014 * C5569 -
              C122909 * C5457 + C122759 * C16296 - C122910 * C16030) *
                 C139824) *
                C139736) *
               C140002) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eezx[119] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((C139967 * C114 - C137755 * C108 + C139736 * C116 -
                        C137748 * C109) *
                           C122908 +
                       (C139967 * C573 - C137755 * C567 + C139736 * C574 -
                        C137748 * C568) *
                           C140013 +
                       (C78013 - C78014 + C78015 - C78016) * C122909 +
                       (C78421 - C78422 + C78423 - C78424) * C140014 +
                       (C84710 - C84709 + C84712 - C84711) * C122910 +
                       (C85012 - C85011 + C85014 - C85013) * C122759) *
                          C139824 * C1565 +
                      ((C78014 - C78013 + C78016 - C78015) * C122908 +
                       (C78422 - C78421 + C78424 - C78423) * C140013 +
                       (C84709 - C84710 + C84711 - C84712) * C122909 +
                       (C85011 - C85012 + C85013 - C85014) * C140014 +
                       (C137755 * C15623 - C139967 * C15627 + C137748 * C15622 -
                        C139736 * C15625) *
                           C122910 +
                       (C137755 * C16401 - C139967 * C16404 + C137748 * C16402 -
                        C139736 * C16405) *
                           C122759) *
                          C139824 * C140002) *
                         C139792 * C808 +
                     (((C137755 * C109 - C139967 * C116 + C137748 * C110 -
                        C139736 * C118) *
                           C122908 +
                       (C137755 * C568 - C139967 * C574 + C137748 * C569 -
                        C139736 * C575) *
                           C140013 +
                       (C78021 - C78022 + C78023 - C78024) * C122909 +
                       (C78425 - C78426 + C78427 - C78428) * C140014 +
                       (C124776 - C124777 + C124778 - C124779) * C122910 +
                       (C125092 - C125093 + C125094 - C125095) * C122759) *
                          C139824 * C1565 +
                      ((C78022 - C78021 + C78024 - C78023) * C122908 +
                       (C78426 - C78425 + C78428 - C78427) * C140013 +
                       (C124777 - C124776 + C124779 - C124778) * C122909 +
                       (C125093 - C125092 + C125095 - C125094) * C140014 +
                       (C139967 * C15625 - C137755 * C15622 + C139736 * C15629 -
                        C137748 * C15624) *
                           C122910 +
                       (C139967 * C16405 - C137755 * C16402 + C139736 * C16406 -
                        C137748 * C16403) *
                           C122759) *
                          C139824 * C140002) *
                         C139792 * C139998)) /
                   (p * q * std::sqrt(p + q));
    d2eezy[119] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139824 * C183 - C182 * C108) * C122908 +
             (C139824 * C629 - C182 * C567) * C140013 +
             (C15795 - C15796) * C122909 + (C16525 - C16526) * C140014 +
             C21114 * C122910 + C21623 * C122759) *
                C139967 +
            ((C196 - C197) * C122908 + (C636 - C637) * C140013 +
             C15799 * C122909 + C16529 * C140014 + C15805 * C122910 +
             C16530 * C122759) *
                C139736) *
               C1565 +
           (((C15796 - C15795) * C122908 + (C16526 - C16525) * C140013 +
             (C15802 - C15801) * C122909 + (C16528 - C16527) * C140014 +
             (C21118 - C21119) * C122910 + (C21624 - C21625) * C122759) *
                C139967 +
            (C15807 * C122908 + C16531 * C140013 + C15809 * C122909 +
             C16532 * C140014 + (C15811 - C15812) * C122910 +
             (C16533 - C16534) * C122759) *
                C139736) *
               C140002) *
              C139792 * C808 +
          ((((C197 - C196) * C122908 + (C637 - C636) * C140013 +
             C15807 * C122909 + C16531 * C140014 + C15809 * C122910 +
             C16532 * C122759) *
                C139967 +
            ((C201 - C200) * C122908 + (C640 - C639) * C140013 +
             C31358 * C122909 + C32014 * C140014 + (C13938 - C13939) * C122910 +
             (C14441 - C14442) * C122759) *
                C139736) *
               C1565 +
           ((C15799 * C122908 + C16529 * C140013 + C15805 * C122909 +
             C16530 * C140014 + (C15812 - C15811) * C122910 +
             (C16534 - C16533) * C122759) *
                C139967 +
            (C29549 * C122908 + C30048 * C140013 + (C13939 - C13938) * C122909 +
             (C14442 - C14441) * C140014 +
             (C139824 * C15790 - C182 * C15624) * C122910 +
             (C139824 * C16523 - C182 * C16403) * C122759) *
                C139736) *
               C140002) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eezz[119] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C122908 * C266 - C123391 * C108 - C122908 * C567 + C140013 * C702 +
             C122909 * C1741 - C123392 * C1570 - C122909 * C2074 +
             C140014 * C2230 + C122910 * C5397 - C123393 * C5273 -
             C122910 * C5621 + C122759 * C5733) *
                C139824 * C139967 +
            (C123431 + C123432 + C123433) * C139824 * C139736) *
               C1565 -
           ((C125310 + C125311 + C125312) * C139824 * C139736 +
            (C122910 * C15912 - C123393 * C15623 - C122910 * C16401 +
             C122759 * C16633 + C122909 * C5397 - C123392 * C5273 -
             C122909 * C5621 + C140014 * C5733 + C122908 * C1741 -
             C123391 * C1570 - C122908 * C2074 + C140013 * C2230) *
                C139824 * C139967) *
               C140002) *
              C139792 * C808 +
          (((C125312 + C125311 + C125310) * C139824 * C139967 +
            (C122908 * C1743 - C123391 * C1568 - C122908 * C2076 +
             C140013 * C2228 + C122909 * C5399 - C123392 * C5275 -
             C122909 * C5623 + C140014 * C5735 + C122910 * C15914 -
             C123393 * C15624 - C122910 * C16403 + C122759 * C16634) *
                C139824 * C139736) *
               C140002 -
           ((C123434 + C123435 + C123436) * C139824 * C139736 +
            (C123433 + C123432 + C123431) * C139824 * C139967) *
               C1565) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexx[120] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C137755 * C114 - C67752 * C108 - C137755 * C115 + C139967 * C126 +
             C137748 * C116 - C67754 * C109 - C137748 * C117 + C139736 * C127) *
                C140013 +
            (C77607 + C77608) * C140014 + (C84414 + C84413) * C122759) *
               C139824 * C139809 * C2322 -
           ((C80891 + C80892) * C122759 + C80886 * C140014 +
            (C68585 + C68584) * C140013) *
               C139824 * C139809 * C140000) *
              C2324 +
          (((C68588 + C68589) * C140013 + (C76373 + C76374) * C140014 +
            (C137755 * C13132 - C67752 * C13127 - C137755 * C13133 +
             C139967 * C13139 + C137748 * C14660 - C67754 * C14659 -
             C137748 * C14661 + C139736 * C14662) *
                C122759) *
               C139824 * C139809 * C140000 -
           ((C124469 + C124468) * C122759 + (C77610 + C77609) * C140014 +
            (C137748 * C118 - C67754 * C110 - C137748 * C119 + C139736 * C128 +
             C137755 * C116 - C67752 * C109 - C137755 * C117 + C139967 * C127) *
                C140013) *
               C139824 * C139809 * C2322) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexy[120] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139824 * C183 - C182 * C108) * C137755 +
             (C139824 * C189 - C182 * C115) * C139967 +
             (C196 - C197) * C137748 + (C198 - C199) * C139736) *
                C140013 +
            ((C15795 - C15796) * C137755 + (C15797 - C15798) * C139967 +
             C15799 * C137748 + C15800 * C139736) *
                C140014 +
            (C21114 * C137755 + C21115 * C139967 + C15805 * C137748 +
             C15806 * C139736) *
                C122759) *
               C139809 * C2322 +
           (((C182 * C813 - C139824 * C896) * C137755 +
             (C182 * C822 - C139824 * C901) * C139967 +
             (C907 - C908) * C137748 + (C909 - C910) * C139736) *
                C140013 +
            ((C18427 - C18428) * C137755 + (C18429 - C18430) * C139967 +
             (C14764 - C14765) * C137748 + (C14766 - C14767) * C139736) *
                C140014 +
            ((C18431 - C18432) * C137755 + (C18433 - C18434) * C139967 +
             (C14768 - C14769) * C137748 + (C14770 - C14771) * C139736) *
                C122759) *
               C139809 * C140000) *
              C2324 +
          ((((C197 - C196) * C137755 + (C199 - C198) * C139967 +
             (C201 - C200) * C137748 + (C203 - C202) * C139736) *
                C140013 +
            (C15807 * C137755 + C15808 * C139967 + C31358 * C137748 +
             C31359 * C139736) *
                C140014 +
            (C15809 * C137755 + C15810 * C139967 + (C13938 - C13939) * C137748 +
             (C13940 - C13941) * C139736) *
                C122759) *
               C139809 * C2322 +
           (((C908 - C907) * C137755 + (C910 - C909) * C139967 +
             (C912 - C911) * C137748 + (C914 - C913) * C139736) *
                C140013 +
            ((C14765 - C14764) * C137755 + (C14767 - C14766) * C139967 +
             (C30370 - C30369) * C137748 + (C30372 - C30371) * C139736) *
                C140014 +
            ((C14769 - C14768) * C137755 + (C14771 - C14770) * C139967 +
             (C139824 * C14761 - C182 * C14659) * C137748 +
             (C139824 * C14762 - C182 * C14661) * C139736) *
                C122759) *
               C139809 * C140000) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexz[120] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C140013 * C266 - C122908 * C108 + C140014 * C1741 -
             C122909 * C1570 + C122759 * C5397 - C122910 * C5273) *
                C137755 +
            (C140013 * C272 - C122908 * C115 + C140014 * C1746 -
             C122909 * C1579 + C122759 * C5401 - C122910 * C5278) *
                C139967 +
            (C122912 - C122913 + C122914 - C122915 + C122916 - C122917) *
                C137748 +
            (C122918 - C122919 + C122920 - C122921 + C122922 - C122923) *
                C139736) *
               C139824 * C139809 * C2322 +
           ((C122908 * C813 - C140013 * C984 + C122909 * C3438 -
             C140014 * C3594 + C122910 * C13126 - C122759 * C13298) *
                C137755 +
            (C122908 * C822 - C140013 * C989 + C122909 * C3443 -
             C140014 * C3598 + C122910 * C13131 - C122759 * C13302) *
                C139967 +
            (C123731 - C123732 + C123733 - C123734 + C123735 - C123736) *
                C137748 +
            (C123737 - C123738 + C123739 - C123740 + C123741 - C123742) *
                C139736) *
               C139824 * C139809 * C140000) *
              C2324 +
          (((C122913 - C122912 + C122915 - C122914 + C122917 - C122916) *
                C137755 +
            (C122919 - C122918 + C122921 - C122920 + C122923 - C122922) *
                C139967 +
            (C122924 - C122925 + C122926 - C122927 + C122928 - C122929) *
                C137748 +
            (C122930 - C122931 + C122932 - C122933 + C122934 - C122935) *
                C139736) *
               C139824 * C139809 * C2322 +
           ((C123732 - C123731 + C123734 - C123733 + C123736 - C123735) *
                C137755 +
            (C123738 - C123737 + C123740 - C123739 + C123742 - C123741) *
                C139967 +
            (C140013 * C986 - C122908 * C811 + C140014 * C3596 -
             C122909 * C3440 + C122759 * C14869 - C122910 * C14659) *
                C137748 +
            (C140013 * C991 - C122908 * C818 + C140014 * C3600 -
             C122909 * C3447 + C122759 * C14870 - C122910 * C14661) *
                C139736) *
               C139824 * C139809 * C140000) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[120] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((((C139967 * C114 - C137755 * C108 + C139736 * C116 -
                         C137748 * C109) *
                            C182 +
                        (C139967 * C354 - C137755 * C348 + C139736 * C355 -
                         C137748 * C349) *
                            C139824) *
                           C140013 +
                       ((C78013 - C78014 + C78015 - C78016) * C182 +
                        (C78017 - C78018 + C78019 - C78020) * C139824) *
                           C140014 +
                       ((C84710 - C84709 + C84712 - C84711) * C182 +
                        (C84714 - C84713 + C84716 - C84715) * C139824) *
                           C122759) *
                          C139809 * C2322 +
                      (((C68899 - C68898 + C68901 - C68900) * C182 +
                        (C68903 - C68902 + C68905 - C68904) * C139824) *
                           C140013 +
                       (C81301 * C182 + C81302 * C139824) * C140014 +
                       ((C81291 - C81292 + C81293 - C81294) * C182 +
                        (C81295 - C81296 + C81297 - C81298) * C139824) *
                           C122759) *
                          C139809 * C140000) *
                         C2324 +
                     ((((C137755 * C109 - C139967 * C116 + C137748 * C110 -
                         C139736 * C118) *
                            C182 +
                        (C137755 * C349 - C139967 * C355 + C137748 * C350 -
                         C139736 * C356) *
                            C139824) *
                           C140013 +
                       ((C78021 - C78022 + C78023 - C78024) * C182 +
                        (C78025 - C78026 + C78027 - C78028) * C139824) *
                           C140014 +
                       ((C124776 - C124777 + C124778 - C124779) * C182 +
                        (C124780 - C124781 + C124782 - C124783) * C139824) *
                           C122759) *
                          C139809 * C2322 +
                      (((C68915 - C68914 + C68917 - C68916) * C182 +
                        (C68919 - C68918 + C68921 - C68920) * C139824) *
                           C140013 +
                       ((C76774 - C76773 + C76776 - C76775) * C182 +
                        (C76778 - C76777 + C76780 - C76779) * C139824) *
                           C140014 +
                       ((C139967 * C13132 - C137755 * C13127 +
                         C139736 * C14660 - C137748 * C14659) *
                            C182 +
                        (C139967 * C13385 - C137755 * C13381 +
                         C139736 * C14982 - C137748 * C14981) *
                            C139824) *
                           C122759) *
                          C139809 * C140000) *
                         C139998)) /
                   (p * q * std::sqrt(p + q));
    d2eeyy[120] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C182 * C183 - C410 * C108 - C182 * C348 + C139824 * C411) *
                 C139967 +
             C442 * C139736) *
                C140013 +
            (C124882 + C124883) * C140014 + (C124884 + C124885) * C122759) *
               C139809 * C2322 -
           ((C15095 * C139736 + C18762 * C139967) * C122759 +
            (C15096 * C139736 + C18761 * C139967) * C140014 +
            (C1174 * C139736 +
             (C182 * C896 - C410 * C813 - C182 * C1072 + C139824 * C1151) *
                 C139967) *
                C140013) *
               C139809 * C140000) *
              C2324 +
          (((C1174 * C139967 + C1173 * C139736) * C140013 +
            (C15096 * C139967 + C30689 * C139736) * C140014 +
            (C15095 * C139967 + (C182 * C14761 - C410 * C14659 - C182 * C14981 +
                                 C139824 * C15081) *
                                    C139736) *
                C122759) *
               C139809 * C140000 -
           ((C124889 + C124888) * C122759 + (C124887 + C124886) * C140014 +
            (C443 * C139736 + C442 * C139967) * C140013) *
               C139809 * C2322) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[120] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C140013 * C266 - C122908 * C108 + C140014 * C1741 -
              C122909 * C1570 + C122759 * C5397 - C122910 * C5273) *
                 C182 +
             (C140013 * C495 - C122908 * C348 + C140014 * C1997 -
              C122909 * C1829 + C122759 * C5567 - C122910 * C5455) *
                 C139824) *
                C139967 +
            ((C122912 - C122913 + C122914 - C122915 + C122916 - C122917) *
                 C182 +
             (C123158 - C123159 + C123160 - C123161 + C123162 - C123163) *
                 C139824) *
                C139736) *
               C139809 * C2322 +
           (((C122908 * C813 - C140013 * C984 + C122909 * C3438 -
              C140014 * C3594 + C122910 * C13126 - C122759 * C13298) *
                 C182 +
             (C122908 * C1072 - C140013 * C1240 + C122909 * C3668 -
              C140014 * C3812 + C122910 * C13380 - C122759 * C13540) *
                 C139824) *
                C139967 +
            ((C123731 - C123732 + C123733 - C123734 + C123735 - C123736) *
                 C182 +
             (C124037 - C124038 + C124039 - C124040 + C124041 - C124042) *
                 C139824) *
                C139736) *
               C139809 * C140000) *
              C2324 +
          ((((C122913 - C122912 + C122915 - C122914 + C122917 - C122916) *
                 C182 +
             (C123159 - C123158 + C123161 - C123160 + C123163 - C123162) *
                 C139824) *
                C139967 +
            ((C122924 - C122925 + C122926 - C122927 + C122928 - C122929) *
                 C182 +
             (C123164 - C123165 + C123166 - C123167 + C123168 - C123169) *
                 C139824) *
                C139736) *
               C139809 * C2322 +
           (((C123732 - C123731 + C123734 - C123733 + C123736 - C123735) *
                 C182 +
             (C124038 - C124037 + C124040 - C124039 + C124042 - C124041) *
                 C139824) *
                C139967 +
            ((C140013 * C986 - C122908 * C811 + C140014 * C3596 -
              C122909 * C3440 + C122759 * C14869 - C122910 * C14659) *
                 C182 +
             (C140013 * C1242 - C122908 * C1074 + C140014 * C3814 -
              C122909 * C3670 + C122759 * C15194 - C122910 * C14981) *
                 C139824) *
                C139736) *
               C139809 * C140000) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eezx[120] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139967 * C114 - C137755 * C108 + C139736 * C116 -
             C137748 * C109) *
                C122908 +
            (C139967 * C573 - C137755 * C567 + C139736 * C574 -
             C137748 * C568) *
                C140013 +
            (C78013 - C78014 + C78015 - C78016) * C122909 +
            (C78421 - C78422 + C78423 - C78424) * C140014 +
            (C84710 - C84709 + C84712 - C84711) * C122910 +
            (C85012 - C85011 + C85014 - C85013) * C122759) *
               C139824 * C139809 * C2322 +
           ((C68899 - C68898 + C68901 - C68900) * C122908 +
            (C69246 - C69245 + C69248 - C69247) * C140013 + C81301 * C122909 +
            C81702 * C140014 + (C81291 - C81292 + C81293 - C81294) * C122910 +
            (C81697 - C81698 + C81699 - C81700) * C122759) *
               C139824 * C139809 * C140000) *
              C2324 +
          (((C137755 * C109 - C139967 * C116 + C137748 * C110 -
             C139736 * C118) *
                C122908 +
            (C137755 * C568 - C139967 * C574 + C137748 * C569 -
             C139736 * C575) *
                C140013 +
            (C78021 - C78022 + C78023 - C78024) * C122909 +
            (C78425 - C78426 + C78427 - C78428) * C140014 +
            (C124776 - C124777 + C124778 - C124779) * C122910 +
            (C125092 - C125093 + C125094 - C125095) * C122759) *
               C139824 * C139809 * C2322 +
           ((C68915 - C68914 + C68917 - C68916) * C122908 +
            (C69254 - C69253 + C69256 - C69255) * C140013 +
            (C76774 - C76773 + C76776 - C76775) * C122909 +
            (C77186 - C77185 + C77188 - C77187) * C140014 +
            (C139967 * C13132 - C137755 * C13127 + C139736 * C14660 -
             C137748 * C14659) *
                C122910 +
            (C139967 * C13623 - C137755 * C13619 + C139736 * C15300 -
             C137748 * C15299) *
                C122759) *
               C139824 * C139809 * C140000) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eezy[120] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139824 * C183 - C182 * C108) * C122908 +
             (C139824 * C629 - C182 * C567) * C140013 +
             (C15795 - C15796) * C122909 + (C16525 - C16526) * C140014 +
             C21114 * C122910 + C21623 * C122759) *
                C139967 +
            ((C196 - C197) * C122908 + (C636 - C637) * C140013 +
             C15799 * C122909 + C16529 * C140014 + C15805 * C122910 +
             C16530 * C122759) *
                C139736) *
               C139809 * C2322 +
           (((C182 * C813 - C139824 * C896) * C122908 +
             (C182 * C1317 - C139824 * C1393) * C140013 +
             (C18427 - C18428) * C122909 + (C19071 - C19072) * C140014 +
             (C18431 - C18432) * C122910 + (C19073 - C19074) * C122759) *
                C139967 +
            ((C907 - C908) * C122908 + (C1399 - C1400) * C140013 +
             (C14764 - C14765) * C122909 + (C15401 - C15402) * C140014 +
             (C14768 - C14769) * C122910 + (C15403 - C15404) * C122759) *
                C139736) *
               C139809 * C140000) *
              C2324 +
          ((((C197 - C196) * C122908 + (C637 - C636) * C140013 +
             C15807 * C122909 + C16531 * C140014 + C15809 * C122910 +
             C16532 * C122759) *
                C139967 +
            ((C201 - C200) * C122908 + (C640 - C639) * C140013 +
             C31358 * C122909 + C32014 * C140014 + (C13938 - C13939) * C122910 +
             (C14441 - C14442) * C122759) *
                C139736) *
               C139809 * C2322 +
           (((C908 - C907) * C122908 + (C1400 - C1399) * C140013 +
             (C14765 - C14764) * C122909 + (C15402 - C15401) * C140014 +
             (C14769 - C14768) * C122910 + (C15404 - C15403) * C122759) *
                C139967 +
            ((C912 - C911) * C122908 + (C1402 - C1401) * C140013 +
             (C30370 - C30369) * C122909 + (C30993 - C30992) * C140014 +
             (C139824 * C14761 - C182 * C14659) * C122910 +
             (C139824 * C15399 - C182 * C15299) * C122759) *
                C139736) *
               C139809 * C140000) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eezz[120] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C122908 * C266 - C123391 * C108 - C122908 * C567 + C140013 * C702 +
             C122909 * C1741 - C123392 * C1570 - C122909 * C2074 +
             C140014 * C2230 + C122910 * C5397 - C123393 * C5273 -
             C122910 * C5621 + C122759 * C5733) *
                C139824 * C139967 +
            (C123431 + C123432 + C123433) * C139824 * C139736) *
               C139809 * C2322 -
           ((C124355 + C124356 + C124357) * C139824 * C139736 +
            (C122910 * C13298 - C123393 * C13126 - C122910 * C13618 +
             C122759 * C13778 + C122909 * C3594 - C123392 * C3438 -
             C122909 * C3882 + C140014 * C4026 + C122908 * C984 -
             C123391 * C813 - C122908 * C1317 + C140013 * C1473) *
                C139824 * C139967) *
               C139809 * C140000) *
              C2324 +
          (((C124357 + C124356 + C124355) * C139824 * C139967 +
            (C122908 * C986 - C123391 * C811 - C122908 * C1319 +
             C140013 * C1471 + C122909 * C3596 - C123392 * C3440 -
             C122909 * C3884 + C140014 * C4028 + C122910 * C14869 -
             C123393 * C14659 - C122910 * C15299 + C122759 * C15502) *
                C139824 * C139736) *
               C139809 * C140000 -
           ((C123434 + C123435 + C123436) * C139824 * C139736 +
            (C123433 + C123432 + C123431) * C139824 * C139967) *
               C139809 * C2322) *
              C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexx[121] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C137755 * C114 - C67752 * C108 - C137755 * C115 + C139967 * C126 +
            C137748 * C116 - C67754 * C109 - C137748 * C117 + C139736 * C127) *
               C140013 +
           (C77607 + C77608) * C140014 + (C84414 + C84413) * C122759) *
              C139824 * C139809 * C2904 -
          ((C80891 + C80892) * C122759 + C80886 * C140014 +
           (C68585 + C68584) * C140013) *
              C139824 * C139809 * C2905 +
          (C71346 * C140013 + (C72108 + C72107) * C140014 +
           (C137755 * C13134 - C67752 * C13128 - C137755 * C13135 +
            C139967 * C13140 + C137748 * C13136 - C67754 * C13129 -
            C137748 * C13137 + C139736 * C13141) *
               C122759) *
              C139824 * C139809 * C2906) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eexy[121] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139824 * C183 - C182 * C108) * C137755 +
            (C139824 * C189 - C182 * C115) * C139967 + (C196 - C197) * C137748 +
            (C198 - C199) * C139736) *
               C140013 +
           ((C15795 - C15796) * C137755 + (C15797 - C15798) * C139967 +
            C15799 * C137748 + C15800 * C139736) *
               C140014 +
           (C21114 * C137755 + C21115 * C139967 + C15805 * C137748 +
            C15806 * C139736) *
               C122759) *
              C139809 * C2904 +
          (((C182 * C813 - C139824 * C896) * C137755 +
            (C182 * C822 - C139824 * C901) * C139967 + (C907 - C908) * C137748 +
            (C909 - C910) * C139736) *
               C140013 +
           ((C18427 - C18428) * C137755 + (C18429 - C18430) * C139967 +
            (C14764 - C14765) * C137748 + (C14766 - C14767) * C139736) *
               C140014 +
           ((C18431 - C18432) * C137755 + (C18433 - C18434) * C139967 +
            (C14768 - C14769) * C137748 + (C14770 - C14771) * C139736) *
               C122759) *
              C139809 * C2905 +
          (((C139824 * C2974 - C182 * C2908) * C137755 +
            (C139824 * C2978 - C182 * C2913) * C139967 +
            (C139824 * C2975 - C182 * C2909) * C137748 +
            (C139824 * C2979 - C182 * C2915) * C139736) *
               C140013 +
           ((C139824 * C7863 - C182 * C7754) * C137755 +
            (C139824 * C7866 - C182 * C7759) * C139967 +
            (C139824 * C7864 - C182 * C7753) * C137748 +
            (C139824 * C7867 - C182 * C7757) * C139736) *
               C140014 +
           ((C139824 * C13217 - C182 * C13128) * C137755 +
            (C139824 * C13221 - C182 * C13135) * C139967 +
            (C139824 * C13219 - C182 * C13129) * C137748 +
            (C139824 * C13223 - C182 * C13137) * C139736) *
               C122759) *
              C139809 * C2906) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eexz[121] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C140013 * C266 - C122908 * C108 + C140014 * C1741 -
            C122909 * C1570 + C122759 * C5397 - C122910 * C5273) *
               C137755 +
           (C140013 * C272 - C122908 * C115 + C140014 * C1746 -
            C122909 * C1579 + C122759 * C5401 - C122910 * C5278) *
               C139967 +
           (C122912 - C122913 + C122914 - C122915 + C122916 - C122917) *
               C137748 +
           (C122918 - C122919 + C122920 - C122921 + C122922 - C122923) *
               C139736) *
              C139824 * C139809 * C2904 +
          ((C122908 * C813 - C140013 * C984 + C122909 * C3438 -
            C140014 * C3594 + C122910 * C13126 - C122759 * C13298) *
               C137755 +
           (C122908 * C822 - C140013 * C989 + C122909 * C3443 -
            C140014 * C3598 + C122910 * C13131 - C122759 * C13302) *
               C139967 +
           (C123731 - C123732 + C123733 - C123734 + C123735 - C123736) *
               C137748 +
           (C123737 - C123738 + C123739 - C123740 + C123741 - C123742) *
               C139736) *
              C139824 * C139809 * C2905 +
          ((C140013 * C3032 - C122908 * C2908 + C140014 * C7979 -
            C122909 * C7754 + C122759 * C13300 - C122910 * C13128) *
               C137755 +
           (C140013 * C3036 - C122908 * C2913 + C140014 * C7982 -
            C122909 * C7759 + C122759 * C13304 - C122910 * C13135) *
               C139967 +
           (C140013 * C3033 - C122908 * C2909 + C140014 * C7980 -
            C122909 * C7753 + C122759 * C13301 - C122910 * C13129) *
               C137748 +
           (C140013 * C3037 - C122908 * C2915 + C140014 * C7983 -
            C122909 * C7757 + C122759 * C13305 - C122910 * C13137) *
               C139736) *
              C139824 * C139809 * C2906) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eeyx[121] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((C139967 * C114 - C137755 * C108 + C139736 * C116 -
                        C137748 * C109) *
                           C182 +
                       (C139967 * C354 - C137755 * C348 + C139736 * C355 -
                        C137748 * C349) *
                           C139824) *
                          C140013 +
                      ((C78013 - C78014 + C78015 - C78016) * C182 +
                       (C78017 - C78018 + C78019 - C78020) * C139824) *
                          C140014 +
                      ((C84710 - C84709 + C84712 - C84711) * C182 +
                       (C84714 - C84713 + C84716 - C84715) * C139824) *
                          C122759) *
                         C139809 * C2904 +
                     (((C68899 - C68898 + C68901 - C68900) * C182 +
                       (C68903 - C68902 + C68905 - C68904) * C139824) *
                          C140013 +
                      (C81301 * C182 + C81302 * C139824) * C140014 +
                      ((C81291 - C81292 + C81293 - C81294) * C182 +
                       (C81295 - C81296 + C81297 - C81298) * C139824) *
                          C122759) *
                         C139809 * C2905 +
                     ((C71603 * C182 + C71604 * C139824) * C140013 +
                      ((C72414 - C72413 + C72416 - C72415) * C182 +
                       (C72418 - C72417 + C72420 - C72419) * C139824) *
                          C140014 +
                      ((C139967 * C13134 - C137755 * C13128 + C139736 * C13136 -
                        C137748 * C13129) *
                           C182 +
                       (C139967 * C13386 - C137755 * C13382 + C139736 * C13387 -
                        C137748 * C13383) *
                           C139824) *
                          C122759) *
                         C139809 * C2906) *
                    C139758) /
                   (p * q * std::sqrt(p + q));
    d2eeyy[121] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C182 * C183 - C410 * C108 - C182 * C348 + C139824 * C411) *
                C139967 +
            C442 * C139736) *
               C140013 +
           (C124882 + C124883) * C140014 + (C124884 + C124885) * C122759) *
              C139809 * C2904 -
          ((C15095 * C139736 + C18762 * C139967) * C122759 +
           (C15096 * C139736 + C18761 * C139967) * C140014 +
           (C1174 * C139736 +
            (C182 * C896 - C410 * C813 - C182 * C1072 + C139824 * C1151) *
                C139967) *
               C140013) *
              C139809 * C2905 +
          (((C182 * C2974 - C410 * C2908 - C182 * C3090 + C139824 * C3148) *
                C139967 +
            (C182 * C2975 - C410 * C2909 - C182 * C3091 + C139824 * C3149) *
                C139736) *
               C140013 +
           ((C182 * C7863 - C410 * C7754 - C182 * C8091 + C139824 * C8196) *
                C139967 +
            (C182 * C7864 - C410 * C7753 - C182 * C8092 + C139824 * C8195) *
                C139736) *
               C140014 +
           ((C182 * C13217 - C410 * C13128 - C182 * C13382 + C139824 * C13463) *
                C139967 +
            (C182 * C13219 - C410 * C13129 - C182 * C13383 + C139824 * C13465) *
                C139736) *
               C122759) *
              C139809 * C2906) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eeyz[121] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C140013 * C266 - C122908 * C108 + C140014 * C1741 -
             C122909 * C1570 + C122759 * C5397 - C122910 * C5273) *
                C182 +
            (C140013 * C495 - C122908 * C348 + C140014 * C1997 -
             C122909 * C1829 + C122759 * C5567 - C122910 * C5455) *
                C139824) *
               C139967 +
           ((C122912 - C122913 + C122914 - C122915 + C122916 - C122917) * C182 +
            (C123158 - C123159 + C123160 - C123161 + C123162 - C123163) *
                C139824) *
               C139736) *
              C139809 * C2904 +
          (((C122908 * C813 - C140013 * C984 + C122909 * C3438 -
             C140014 * C3594 + C122910 * C13126 - C122759 * C13298) *
                C182 +
            (C122908 * C1072 - C140013 * C1240 + C122909 * C3668 -
             C140014 * C3812 + C122910 * C13380 - C122759 * C13540) *
                C139824) *
               C139967 +
           ((C123731 - C123732 + C123733 - C123734 + C123735 - C123736) * C182 +
            (C124037 - C124038 + C124039 - C124040 + C124041 - C124042) *
                C139824) *
               C139736) *
              C139809 * C2905 +
          (((C140013 * C3032 - C122908 * C2908 + C140014 * C7979 -
             C122909 * C7754 + C122759 * C13300 - C122910 * C13128) *
                C182 +
            (C140013 * C3202 - C122908 * C3090 + C140014 * C8317 -
             C122909 * C8091 + C122759 * C13541 - C122910 * C13382) *
                C139824) *
               C139967 +
           ((C140013 * C3033 - C122908 * C2909 + C140014 * C7980 -
             C122909 * C7753 + C122759 * C13301 - C122910 * C13129) *
                C182 +
            (C140013 * C3203 - C122908 * C3091 + C140014 * C8318 -
             C122909 * C8092 + C122759 * C13543 - C122910 * C13383) *
                C139824) *
               C139736) *
              C139809 * C2906) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eezx[121] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C139967 * C114 - C137755 * C108 + C139736 * C116 - C137748 * C109) *
               C122908 +
           (C139967 * C573 - C137755 * C567 + C139736 * C574 - C137748 * C568) *
               C140013 +
           (C78013 - C78014 + C78015 - C78016) * C122909 +
           (C78421 - C78422 + C78423 - C78424) * C140014 +
           (C84710 - C84709 + C84712 - C84711) * C122910 +
           (C85012 - C85011 + C85014 - C85013) * C122759) *
              C139824 * C139809 * C2904 +
          ((C68899 - C68898 + C68901 - C68900) * C122908 +
           (C69246 - C69245 + C69248 - C69247) * C140013 + C81301 * C122909 +
           C81702 * C140014 + (C81291 - C81292 + C81293 - C81294) * C122910 +
           (C81697 - C81698 + C81699 - C81700) * C122759) *
              C139824 * C139809 * C2905 +
          (C71603 * C122908 + C71834 * C140013 +
           (C72414 - C72413 + C72416 - C72415) * C122909 +
           (C72720 - C72719 + C72722 - C72721) * C140014 +
           (C139967 * C13134 - C137755 * C13128 + C139736 * C13136 -
            C137748 * C13129) *
               C122910 +
           (C139967 * C13624 - C137755 * C13620 + C139736 * C13625 -
            C137748 * C13621) *
               C122759) *
              C139824 * C139809 * C2906) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eezy[121] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139824 * C183 - C182 * C108) * C122908 +
            (C139824 * C629 - C182 * C567) * C140013 +
            (C15795 - C15796) * C122909 + (C16525 - C16526) * C140014 +
            C21114 * C122910 + C21623 * C122759) *
               C139967 +
           ((C196 - C197) * C122908 + (C636 - C637) * C140013 +
            C15799 * C122909 + C16529 * C140014 + C15805 * C122910 +
            C16530 * C122759) *
               C139736) *
              C139809 * C2904 +
          (((C182 * C813 - C139824 * C896) * C122908 +
            (C182 * C1317 - C139824 * C1393) * C140013 +
            (C18427 - C18428) * C122909 + (C19071 - C19072) * C140014 +
            (C18431 - C18432) * C122910 + (C19073 - C19074) * C122759) *
               C139967 +
           ((C907 - C908) * C122908 + (C1399 - C1400) * C140013 +
            (C14764 - C14765) * C122909 + (C15401 - C15402) * C140014 +
            (C14768 - C14769) * C122910 + (C15403 - C15404) * C122759) *
               C139736) *
              C139809 * C2905 +
          (((C139824 * C2974 - C182 * C2908) * C122908 +
            (C139824 * C3314 - C182 * C3256) * C140013 +
            (C139824 * C7863 - C182 * C7754) * C122909 +
            (C139824 * C8526 - C182 * C8422) * C140014 +
            (C139824 * C13217 - C182 * C13128) * C122910 +
            (C139824 * C13701 - C182 * C13620) * C122759) *
               C139967 +
           ((C139824 * C2975 - C182 * C2909) * C122908 +
            (C139824 * C3315 - C182 * C3257) * C140013 +
            (C139824 * C7864 - C182 * C7753) * C122909 +
            (C139824 * C8527 - C182 * C8423) * C140014 +
            (C139824 * C13219 - C182 * C13129) * C122910 +
            (C139824 * C13703 - C182 * C13621) * C122759) *
               C139736) *
              C139809 * C2906) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eezz[121] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((C122908 * C266 - C123391 * C108 - C122908 * C567 +
                       C140013 * C702 + C122909 * C1741 - C123392 * C1570 -
                       C122909 * C2074 + C140014 * C2230 + C122910 * C5397 -
                       C123393 * C5273 - C122910 * C5621 + C122759 * C5733) *
                          C139824 * C139967 +
                      (C123431 + C123432 + C123433) * C139824 * C139736) *
                         C139809 * C2904 -
                     ((C124355 + C124356 + C124357) * C139824 * C139736 +
                      (C122910 * C13298 - C123393 * C13126 - C122910 * C13618 +
                       C122759 * C13778 + C122909 * C3594 - C123392 * C3438 -
                       C122909 * C3882 + C140014 * C4026 + C122908 * C984 -
                       C123391 * C813 - C122908 * C1317 + C140013 * C1473) *
                          C139824 * C139967) *
                         C139809 * C2905 +
                     ((C122908 * C3032 - C123391 * C2908 - C122908 * C3256 +
                       C140013 * C3368 + C122909 * C7979 - C123392 * C7754 -
                       C122909 * C8422 + C140014 * C8634 + C122910 * C13300 -
                       C123393 * C13128 - C122910 * C13620 + C122759 * C13779) *
                          C139824 * C139967 +
                      (C122908 * C3033 - C123391 * C2909 - C122908 * C3257 +
                       C140013 * C3369 + C122909 * C7980 - C123392 * C7753 -
                       C122909 * C8423 + C140014 * C8633 + C122910 * C13301 -
                       C123393 * C13129 - C122910 * C13621 + C122759 * C13781) *
                          C139824 * C139736) *
                         C139809 * C2906) *
                    C139758) /
                   (p * q * std::sqrt(p + q));
    d2eexx[122] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C137755 * C114 - C67752 * C108 - C137755 * C115 + C139967 * C126 +
             C137748 * C116 - C67754 * C109 - C137748 * C117 + C139736 * C127) *
                C140013 +
            (C77607 + C77608) * C140014 + (C84414 + C84413) * C122759) *
               C139824 * C1565 -
           ((C137748 * C15625 - C67754 * C15622 - C137748 * C15626 +
             C139736 * C15631 + C137755 * C15627 - C67752 * C15623 -
             C137755 * C15628 + C139967 * C15632) *
                C122759 +
            (C84413 + C84414) * C140014 + (C77608 + C77607) * C140013) *
               C139824 * C140002) *
              C2322 +
          ((C80877 * C140013 + (C80892 + C80891) * C140014 +
            (C137755 * C18304 - C67752 * C18302 - C137755 * C18305 +
             C139967 * C18308 + C137748 * C18306 - C67754 * C18303 -
             C137748 * C18307 + C139736 * C18309) *
                C122759) *
               C139824 * C140002 -
           ((C80891 + C80892) * C122759 + C80886 * C140014 +
            (C68585 + C68584) * C140013) *
               C139824 * C1565) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eexy[122] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139824 * C183 - C182 * C108) * C137755 +
             (C139824 * C189 - C182 * C115) * C139967 +
             (C196 - C197) * C137748 + (C198 - C199) * C139736) *
                C140013 +
            ((C15795 - C15796) * C137755 + (C15797 - C15798) * C139967 +
             C15799 * C137748 + C15800 * C139736) *
                C140014 +
            (C21114 * C137755 + C21115 * C139967 + C15805 * C137748 +
             C15806 * C139736) *
                C122759) *
               C1565 +
           (((C15796 - C15795) * C137755 + (C15798 - C15797) * C139967 +
             C15807 * C137748 + C15808 * C139736) *
                C140013 +
            ((C15802 - C15801) * C137755 + (C15804 - C15803) * C139967 +
             C15809 * C137748 + C15810 * C139736) *
                C140014 +
            ((C21118 - C21119) * C137755 + (C21120 - C21121) * C139967 +
             (C15811 - C15812) * C137748 + (C15813 - C15814) * C139736) *
                C122759) *
               C140002) *
              C2322 +
          ((((C182 * C813 - C139824 * C896) * C137755 +
             (C182 * C822 - C139824 * C901) * C139967 +
             (C907 - C908) * C137748 + (C909 - C910) * C139736) *
                C140013 +
            ((C18427 - C18428) * C137755 + (C18429 - C18430) * C139967 +
             (C14764 - C14765) * C137748 + (C14766 - C14767) * C139736) *
                C140014 +
            ((C18431 - C18432) * C137755 + (C18433 - C18434) * C139967 +
             (C14768 - C14769) * C137748 + (C14770 - C14771) * C139736) *
                C122759) *
               C1565 +
           (((C18428 - C18427) * C137755 + (C18430 - C18429) * C139967 +
             (C14765 - C14764) * C137748 + (C14767 - C14766) * C139736) *
                C140013 +
            ((C18432 - C18431) * C137755 + (C18434 - C18433) * C139967 +
             (C14769 - C14768) * C137748 + (C14771 - C14770) * C139736) *
                C140014 +
            ((C110796 - C110795) * C137755 + (C110798 - C110797) * C139967 +
             (C139824 * C18423 - C182 * C18303) * C137748 +
             (C139824 * C18425 - C182 * C18307) * C139736) *
                C122759) *
               C140002) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eexz[122] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C140013 * C266 - C122908 * C108 + C140014 * C1741 -
             C122909 * C1570 + C122759 * C5397 - C122910 * C5273) *
                C137755 +
            (C140013 * C272 - C122908 * C115 + C140014 * C1746 -
             C122909 * C1579 + C122759 * C5401 - C122910 * C5278) *
                C139967 +
            (C122912 - C122913 + C122914 - C122915 + C122916 - C122917) *
                C137748 +
            (C122918 - C122919 + C122920 - C122921 + C122922 - C122923) *
                C139736) *
               C139824 * C1565 +
           ((C122908 * C1570 - C140013 * C1741 + C122909 * C5273 -
             C140014 * C5397 + C122910 * C15623 - C122759 * C15912) *
                C137755 +
            (C122908 * C1579 - C140013 * C1746 + C122909 * C5278 -
             C140014 * C5401 + C122910 * C15628 - C122759 * C15915) *
                C139967 +
            (C124666 - C124667 + C124668 - C124669 + C124670 - C124671) *
                C137748 +
            (C124672 - C124673 + C124674 - C124675 + C124676 - C124677) *
                C139736) *
               C139824 * C140002) *
              C2322 +
          (((C122908 * C813 - C140013 * C984 + C122909 * C3438 -
             C140014 * C3594 + C122910 * C13126 - C122759 * C13298) *
                C137755 +
            (C122908 * C822 - C140013 * C989 + C122909 * C3443 -
             C140014 * C3598 + C122910 * C13131 - C122759 * C13302) *
                C139967 +
            (C123731 - C123732 + C123733 - C123734 + C123735 - C123736) *
                C137748 +
            (C123737 - C123738 + C123739 - C123740 + C123741 - C123742) *
                C139736) *
               C139824 * C1565 +
           ((C140013 * C3594 - C122908 * C3438 + C140014 * C13298 -
             C122909 * C13126 + C122759 * C18532 - C122910 * C18302) *
                C137755 +
            (C140013 * C3598 - C122908 * C3443 + C140014 * C13302 -
             C122909 * C13131 + C122759 * C18534 - C122910 * C18305) *
                C139967 +
            (C140013 * C3595 - C122908 * C3439 + C140014 * C13299 -
             C122909 * C13127 + C122759 * C18533 - C122910 * C18303) *
                C137748 +
            (C140013 * C3599 - C122908 * C3445 + C140014 * C13303 -
             C122909 * C13133 + C122759 * C18535 - C122910 * C18307) *
                C139736) *
               C139824 * C140002) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eeyx[122] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((((C139967 * C114 - C137755 * C108 + C139736 * C116 -
                         C137748 * C109) *
                            C182 +
                        (C139967 * C354 - C137755 * C348 + C139736 * C355 -
                         C137748 * C349) *
                            C139824) *
                           C140013 +
                       ((C78013 - C78014 + C78015 - C78016) * C182 +
                        (C78017 - C78018 + C78019 - C78020) * C139824) *
                           C140014 +
                       ((C84710 - C84709 + C84712 - C84711) * C182 +
                        (C84714 - C84713 + C84716 - C84715) * C139824) *
                           C122759) *
                          C1565 +
                      (((C78014 - C78013 + C78016 - C78015) * C182 +
                        (C78018 - C78017 + C78020 - C78019) * C139824) *
                           C140013 +
                       ((C84709 - C84710 + C84711 - C84712) * C182 +
                        (C84713 - C84714 + C84715 - C84716) * C139824) *
                           C140014 +
                       ((C137755 * C15623 - C139967 * C15627 +
                         C137748 * C15622 - C139736 * C15625) *
                            C182 +
                        (C137755 * C16028 - C139967 * C16031 +
                         C137748 * C16029 - C139736 * C16032) *
                            C139824) *
                           C122759) *
                          C140002) *
                         C2322 +
                     ((((C68899 - C68898 + C68901 - C68900) * C182 +
                        (C68903 - C68902 + C68905 - C68904) * C139824) *
                           C140013 +
                       (C81301 * C182 + C81302 * C139824) * C140014 +
                       ((C81291 - C81292 + C81293 - C81294) * C182 +
                        (C81295 - C81296 + C81297 - C81298) * C139824) *
                           C122759) *
                          C1565 +
                      ((C81299 * C182 + C81300 * C139824) * C140013 +
                       ((C81292 - C81291 + C81294 - C81293) * C182 +
                        (C81296 - C81295 + C81298 - C81297) * C139824) *
                           C140014 +
                       ((C139967 * C18304 - C137755 * C18302 +
                         C139736 * C18306 - C137748 * C18303) *
                            C182 +
                        (C139967 * C18636 - C137755 * C18634 +
                         C139736 * C18637 - C137748 * C18635) *
                            C139824) *
                           C122759) *
                          C140002) *
                         C140000) *
                    C139758) /
                   (p * q * std::sqrt(p + q));
    d2eeyy[122] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C182 * C183 - C410 * C108 - C182 * C348 + C139824 * C411) *
                 C139967 +
             C442 * C139736) *
                C140013 +
            (C124882 + C124883) * C140014 + (C124884 + C124885) * C122759) *
               C1565 -
           ((C16194 * C139736 + C21384 * C139967) * C122759 +
            (C124885 + C124884) * C140014 + (C124883 + C124882) * C140013) *
               C140002) *
              C2322 +
          (((C127351 + C127352) * C140013 + (C127353 + C127354) * C140014 +
            (C111005 * C139967 + (C182 * C18423 - C410 * C18303 -
                                  C182 * C18635 + C139824 * C18745) *
                                     C139736) *
                C122759) *
               C140002 -
           ((C127354 + C127353) * C122759 + (C127352 + C127351) * C140014 +
            (C1174 * C139736 +
             (C182 * C896 - C410 * C813 - C182 * C1072 + C139824 * C1151) *
                 C139967) *
                C140013) *
               C1565) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eeyz[122] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C140013 * C266 - C122908 * C108 + C140014 * C1741 -
              C122909 * C1570 + C122759 * C5397 - C122910 * C5273) *
                 C182 +
             (C140013 * C495 - C122908 * C348 + C140014 * C1997 -
              C122909 * C1829 + C122759 * C5567 - C122910 * C5455) *
                 C139824) *
                C139967 +
            ((C122912 - C122913 + C122914 - C122915 + C122916 - C122917) *
                 C182 +
             (C123158 - C123159 + C123160 - C123161 + C123162 - C123163) *
                 C139824) *
                C139736) *
               C1565 +
           (((C122908 * C1570 - C140013 * C1741 + C122909 * C5273 -
              C140014 * C5397 + C122910 * C15623 - C122759 * C15912) *
                 C182 +
             (C122908 * C1829 - C140013 * C1997 + C122909 * C5455 -
              C140014 * C5567 + C122910 * C16028 - C122759 * C16294) *
                 C139824) *
                C139967 +
            ((C124666 - C124667 + C124668 - C124669 + C124670 - C124671) *
                 C182 +
             (C124988 - C124989 + C124990 - C124991 + C124992 - C124993) *
                 C139824) *
                C139736) *
               C140002) *
              C2322 +
          ((((C122908 * C813 - C140013 * C984 + C122909 * C3438 -
              C140014 * C3594 + C122910 * C13126 - C122759 * C13298) *
                 C182 +
             (C122908 * C1072 - C140013 * C1240 + C122909 * C3668 -
              C140014 * C3812 + C122910 * C13380 - C122759 * C13540) *
                 C139824) *
                C139967 +
            ((C123731 - C123732 + C123733 - C123734 + C123735 - C123736) *
                 C182 +
             (C124037 - C124038 + C124039 - C124040 + C124041 - C124042) *
                 C139824) *
                C139736) *
               C1565 +
           (((C140013 * C3594 - C122908 * C3438 + C140014 * C13298 -
              C122909 * C13126 + C122759 * C18532 - C122910 * C18302) *
                 C182 +
             (C140013 * C3812 - C122908 * C3668 + C140014 * C13540 -
              C122909 * C13380 + C122759 * C18862 - C122910 * C18634) *
                 C139824) *
                C139967 +
            ((C140013 * C3595 - C122908 * C3439 + C140014 * C13299 -
              C122909 * C13127 + C122759 * C18533 - C122910 * C18303) *
                 C182 +
             (C140013 * C3813 - C122908 * C3669 + C140014 * C13542 -
              C122909 * C13381 + C122759 * C18863 - C122910 * C18635) *
                 C139824) *
                C139736) *
               C140002) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eezx[122] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139967 * C114 - C137755 * C108 + C139736 * C116 -
             C137748 * C109) *
                C122908 +
            (C139967 * C573 - C137755 * C567 + C139736 * C574 -
             C137748 * C568) *
                C140013 +
            (C78013 - C78014 + C78015 - C78016) * C122909 +
            (C78421 - C78422 + C78423 - C78424) * C140014 +
            (C84710 - C84709 + C84712 - C84711) * C122910 +
            (C85012 - C85011 + C85014 - C85013) * C122759) *
               C139824 * C1565 +
           ((C78014 - C78013 + C78016 - C78015) * C122908 +
            (C78422 - C78421 + C78424 - C78423) * C140013 +
            (C84709 - C84710 + C84711 - C84712) * C122909 +
            (C85011 - C85012 + C85013 - C85014) * C140014 +
            (C137755 * C15623 - C139967 * C15627 + C137748 * C15622 -
             C139736 * C15625) *
                C122910 +
            (C137755 * C16401 - C139967 * C16404 + C137748 * C16402 -
             C139736 * C16405) *
                C122759) *
               C139824 * C140002) *
              C2322 +
          (((C68899 - C68898 + C68901 - C68900) * C122908 +
            (C69246 - C69245 + C69248 - C69247) * C140013 + C81301 * C122909 +
            C81702 * C140014 + (C81291 - C81292 + C81293 - C81294) * C122910 +
            (C81697 - C81698 + C81699 - C81700) * C122759) *
               C139824 * C1565 +
           (C81299 * C122908 + C81701 * C140013 +
            (C81292 - C81291 + C81294 - C81293) * C122909 +
            (C81698 - C81697 + C81700 - C81699) * C140014 +
            (C139967 * C18304 - C137755 * C18302 + C139736 * C18306 -
             C137748 * C18303) *
                C122910 +
            (C139967 * C18964 - C137755 * C18962 + C139736 * C18965 -
             C137748 * C18963) *
                C122759) *
               C139824 * C140002) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eezy[122] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139824 * C183 - C182 * C108) * C122908 +
             (C139824 * C629 - C182 * C567) * C140013 +
             (C15795 - C15796) * C122909 + (C16525 - C16526) * C140014 +
             C21114 * C122910 + C21623 * C122759) *
                C139967 +
            ((C196 - C197) * C122908 + (C636 - C637) * C140013 +
             C15799 * C122909 + C16529 * C140014 + C15805 * C122910 +
             C16530 * C122759) *
                C139736) *
               C1565 +
           (((C15796 - C15795) * C122908 + (C16526 - C16525) * C140013 +
             (C15802 - C15801) * C122909 + (C16528 - C16527) * C140014 +
             (C21118 - C21119) * C122910 + (C21624 - C21625) * C122759) *
                C139967 +
            (C15807 * C122908 + C16531 * C140013 + C15809 * C122909 +
             C16532 * C140014 + (C15811 - C15812) * C122910 +
             (C16533 - C16534) * C122759) *
                C139736) *
               C140002) *
              C2322 +
          ((((C182 * C813 - C139824 * C896) * C122908 +
             (C182 * C1317 - C139824 * C1393) * C140013 +
             (C18427 - C18428) * C122909 + (C19071 - C19072) * C140014 +
             (C18431 - C18432) * C122910 + (C19073 - C19074) * C122759) *
                C139967 +
            ((C907 - C908) * C122908 + (C1399 - C1400) * C140013 +
             (C14764 - C14765) * C122909 + (C15401 - C15402) * C140014 +
             (C14768 - C14769) * C122910 + (C15403 - C15404) * C122759) *
                C139736) *
               C1565 +
           (((C18428 - C18427) * C122908 + (C19072 - C19071) * C140013 +
             (C18432 - C18431) * C122909 + (C19074 - C19073) * C140014 +
             (C110796 - C110795) * C122910 + (C111206 - C111205) * C122759) *
                C139967 +
            ((C14765 - C14764) * C122908 + (C15402 - C15401) * C140013 +
             (C14769 - C14768) * C122909 + (C15404 - C15403) * C140014 +
             (C139824 * C18423 - C182 * C18303) * C122910 +
             (C139824 * C19069 - C182 * C18963) * C122759) *
                C139736) *
               C140002) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eezz[122] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C122908 * C266 - C123391 * C108 - C122908 * C567 + C140013 * C702 +
             C122909 * C1741 - C123392 * C1570 - C122909 * C2074 +
             C140014 * C2230 + C122910 * C5397 - C123393 * C5273 -
             C122910 * C5621 + C122759 * C5733) *
                C139824 * C139967 +
            (C123431 + C123432 + C123433) * C139824 * C139736) *
               C1565 -
           ((C125310 + C125311 + C125312) * C139824 * C139736 +
            (C122910 * C15912 - C123393 * C15623 - C122910 * C16401 +
             C122759 * C16633 + C122909 * C5397 - C123392 * C5273 -
             C122909 * C5621 + C140014 * C5733 + C122908 * C1741 -
             C123391 * C1570 - C122908 * C2074 + C140013 * C2230) *
                C139824 * C139967) *
               C140002) *
              C2322 +
          (((C122908 * C3594 - C123391 * C3438 - C122908 * C3882 +
             C140013 * C4026 + C122909 * C13298 - C123392 * C13126 -
             C122909 * C13618 + C140014 * C13778 + C122910 * C18532 -
             C123393 * C18302 - C122910 * C18962 + C122759 * C19172) *
                C139824 * C139967 +
            (C122908 * C3595 - C123391 * C3439 - C122908 * C3883 +
             C140013 * C4027 + C122909 * C13299 - C123392 * C13127 -
             C122909 * C13619 + C140014 * C13780 + C122910 * C18533 -
             C123393 * C18303 - C122910 * C18963 + C122759 * C19173) *
                C139824 * C139736) *
               C140002 -
           ((C124355 + C124356 + C124357) * C139824 * C139736 +
            (C122910 * C13298 - C123393 * C13126 - C122910 * C13618 +
             C122759 * C13778 + C122909 * C3594 - C123392 * C3438 -
             C122909 * C3882 + C140014 * C4026 + C122908 * C984 -
             C123391 * C813 - C122908 * C1317 + C140013 * C1473) *
                C139824 * C139967) *
               C1565) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eexx[123] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C137755 * C114 - C67752 * C108 - C137755 * C115 + C139967 * C126 +
             C137748 * C116 - C67754 * C109 - C137748 * C117 + C139736 * C127) *
                C140013 +
            (C77607 + C77608) * C140014 + (C84414 + C84413) * C122759) *
               C139824 * C4096 -
           ((C137748 * C15625 - C67754 * C15622 - C137748 * C15626 +
             C139736 * C15631 + C137755 * C15627 - C67752 * C15623 -
             C137755 * C15628 + C139967 * C15632) *
                C122759 +
            (C84413 + C84414) * C140014 + (C77608 + C77607) * C140013) *
               C139824 * C140002) *
              C139792 * C2324 +
          (((C77609 + C77610) * C140013 + (C124468 + C124469) * C140014 +
            (C137755 * C15625 - C67752 * C15622 - C137755 * C15626 +
             C139967 * C15631 + C137748 * C15629 - C67754 * C15624 -
             C137748 * C15630 + C139736 * C15633) *
                C122759) *
               C139824 * C140002 -
           ((C124469 + C124468) * C122759 + (C77610 + C77609) * C140014 +
            (C137748 * C118 - C67754 * C110 - C137748 * C119 + C139736 * C128 +
             C137755 * C116 - C67752 * C109 - C137755 * C117 + C139967 * C127) *
                C140013) *
               C139824 * C4096) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexy[123] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139824 * C183 - C182 * C108) * C137755 +
             (C139824 * C189 - C182 * C115) * C139967 +
             (C196 - C197) * C137748 + (C198 - C199) * C139736) *
                C140013 +
            ((C15795 - C15796) * C137755 + (C15797 - C15798) * C139967 +
             C15799 * C137748 + C15800 * C139736) *
                C140014 +
            (C21114 * C137755 + C21115 * C139967 + C15805 * C137748 +
             C15806 * C139736) *
                C122759) *
               C4096 +
           (((C15796 - C15795) * C137755 + (C15798 - C15797) * C139967 +
             C15807 * C137748 + C15808 * C139736) *
                C140013 +
            ((C15802 - C15801) * C137755 + (C15804 - C15803) * C139967 +
             C15809 * C137748 + C15810 * C139736) *
                C140014 +
            ((C21118 - C21119) * C137755 + (C21120 - C21121) * C139967 +
             (C15811 - C15812) * C137748 + (C15813 - C15814) * C139736) *
                C122759) *
               C140002) *
              C139792 * C2324 +
          ((((C197 - C196) * C137755 + (C199 - C198) * C139967 +
             (C201 - C200) * C137748 + (C203 - C202) * C139736) *
                C140013 +
            (C15807 * C137755 + C15808 * C139967 + C31358 * C137748 +
             C31359 * C139736) *
                C140014 +
            (C15809 * C137755 + C15810 * C139967 + (C13938 - C13939) * C137748 +
             (C13940 - C13941) * C139736) *
                C122759) *
               C4096 +
           ((C15799 * C137755 + C15800 * C139967 + C29549 * C137748 +
             C29550 * C139736) *
                C140013 +
            (C15805 * C137755 + C15806 * C139967 + (C13939 - C13938) * C137748 +
             (C13941 - C13940) * C139736) *
                C140014 +
            ((C15812 - C15811) * C137755 + (C15814 - C15813) * C139967 +
             (C139824 * C15790 - C182 * C15624) * C137748 +
             (C139824 * C15793 - C182 * C15630) * C139736) *
                C122759) *
               C140002) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexz[123] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C140013 * C266 - C122908 * C108 + C140014 * C1741 -
             C122909 * C1570 + C122759 * C5397 - C122910 * C5273) *
                C137755 +
            (C140013 * C272 - C122908 * C115 + C140014 * C1746 -
             C122909 * C1579 + C122759 * C5401 - C122910 * C5278) *
                C139967 +
            (C122912 - C122913 + C122914 - C122915 + C122916 - C122917) *
                C137748 +
            (C122918 - C122919 + C122920 - C122921 + C122922 - C122923) *
                C139736) *
               C139824 * C4096 +
           ((C122908 * C1570 - C140013 * C1741 + C122909 * C5273 -
             C140014 * C5397 + C122910 * C15623 - C122759 * C15912) *
                C137755 +
            (C122908 * C1579 - C140013 * C1746 + C122909 * C5278 -
             C140014 * C5401 + C122910 * C15628 - C122759 * C15915) *
                C139967 +
            (C124666 - C124667 + C124668 - C124669 + C124670 - C124671) *
                C137748 +
            (C124672 - C124673 + C124674 - C124675 + C124676 - C124677) *
                C139736) *
               C139824 * C140002) *
              C139792 * C2324 +
          (((C122913 - C122912 + C122915 - C122914 + C122917 - C122916) *
                C137755 +
            (C122919 - C122918 + C122921 - C122920 + C122923 - C122922) *
                C139967 +
            (C122924 - C122925 + C122926 - C122927 + C122928 - C122929) *
                C137748 +
            (C122930 - C122931 + C122932 - C122933 + C122934 - C122935) *
                C139736) *
               C139824 * C4096 +
           ((C124667 - C124666 + C124669 - C124668 + C124671 - C124670) *
                C137755 +
            (C124673 - C124672 + C124675 - C124674 + C124677 - C124676) *
                C139967 +
            (C140013 * C1743 - C122908 * C1568 + C140014 * C5399 -
             C122909 * C5275 + C122759 * C15914 - C122910 * C15624) *
                C137748 +
            (C140013 * C1748 - C122908 * C1575 + C140014 * C5403 -
             C122909 * C5282 + C122759 * C15917 - C122910 * C15630) *
                C139736) *
               C139824 * C140002) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[123] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((((C139967 * C114 - C137755 * C108 + C139736 * C116 -
                         C137748 * C109) *
                            C182 +
                        (C139967 * C354 - C137755 * C348 + C139736 * C355 -
                         C137748 * C349) *
                            C139824) *
                           C140013 +
                       ((C78013 - C78014 + C78015 - C78016) * C182 +
                        (C78017 - C78018 + C78019 - C78020) * C139824) *
                           C140014 +
                       ((C84710 - C84709 + C84712 - C84711) * C182 +
                        (C84714 - C84713 + C84716 - C84715) * C139824) *
                           C122759) *
                          C4096 +
                      (((C78014 - C78013 + C78016 - C78015) * C182 +
                        (C78018 - C78017 + C78020 - C78019) * C139824) *
                           C140013 +
                       ((C84709 - C84710 + C84711 - C84712) * C182 +
                        (C84713 - C84714 + C84715 - C84716) * C139824) *
                           C140014 +
                       ((C137755 * C15623 - C139967 * C15627 +
                         C137748 * C15622 - C139736 * C15625) *
                            C182 +
                        (C137755 * C16028 - C139967 * C16031 +
                         C137748 * C16029 - C139736 * C16032) *
                            C139824) *
                           C122759) *
                          C140002) *
                         C139792 * C2324 +
                     ((((C137755 * C109 - C139967 * C116 + C137748 * C110 -
                         C139736 * C118) *
                            C182 +
                        (C137755 * C349 - C139967 * C355 + C137748 * C350 -
                         C139736 * C356) *
                            C139824) *
                           C140013 +
                       ((C78021 - C78022 + C78023 - C78024) * C182 +
                        (C78025 - C78026 + C78027 - C78028) * C139824) *
                           C140014 +
                       ((C124776 - C124777 + C124778 - C124779) * C182 +
                        (C124780 - C124781 + C124782 - C124783) * C139824) *
                           C122759) *
                          C4096 +
                      (((C78022 - C78021 + C78024 - C78023) * C182 +
                        (C78026 - C78025 + C78028 - C78027) * C139824) *
                           C140013 +
                       ((C124777 - C124776 + C124779 - C124778) * C182 +
                        (C124781 - C124780 + C124783 - C124782) * C139824) *
                           C140014 +
                       ((C139967 * C15625 - C137755 * C15622 +
                         C139736 * C15629 - C137748 * C15624) *
                            C182 +
                        (C139967 * C16032 - C137755 * C16029 +
                         C139736 * C16033 - C137748 * C16030) *
                            C139824) *
                           C122759) *
                          C140002) *
                         C139792 * C139998)) /
                   (p * q * std::sqrt(p + q));
    d2eeyy[123] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C182 * C183 - C410 * C108 - C182 * C348 + C139824 * C411) *
                 C139967 +
             C442 * C139736) *
                C140013 +
            (C124882 + C124883) * C140014 + (C124884 + C124885) * C122759) *
               C4096 -
           ((C16194 * C139736 + C21384 * C139967) * C122759 +
            (C124885 + C124884) * C140014 + (C124883 + C124882) * C140013) *
               C140002) *
              C139792 * C2324 +
          (((C124886 + C124887) * C140013 + (C124888 + C124889) * C140014 +
            (C16194 * C139967 + (C182 * C15790 - C410 * C15624 - C182 * C16030 +
                                 C139824 * C16166) *
                                    C139736) *
                C122759) *
               C140002 -
           ((C124889 + C124888) * C122759 + (C124887 + C124886) * C140014 +
            (C443 * C139736 + C442 * C139967) * C140013) *
               C4096) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[123] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C140013 * C266 - C122908 * C108 + C140014 * C1741 -
              C122909 * C1570 + C122759 * C5397 - C122910 * C5273) *
                 C182 +
             (C140013 * C495 - C122908 * C348 + C140014 * C1997 -
              C122909 * C1829 + C122759 * C5567 - C122910 * C5455) *
                 C139824) *
                C139967 +
            ((C122912 - C122913 + C122914 - C122915 + C122916 - C122917) *
                 C182 +
             (C123158 - C123159 + C123160 - C123161 + C123162 - C123163) *
                 C139824) *
                C139736) *
               C4096 +
           (((C122908 * C1570 - C140013 * C1741 + C122909 * C5273 -
              C140014 * C5397 + C122910 * C15623 - C122759 * C15912) *
                 C182 +
             (C122908 * C1829 - C140013 * C1997 + C122909 * C5455 -
              C140014 * C5567 + C122910 * C16028 - C122759 * C16294) *
                 C139824) *
                C139967 +
            ((C124666 - C124667 + C124668 - C124669 + C124670 - C124671) *
                 C182 +
             (C124988 - C124989 + C124990 - C124991 + C124992 - C124993) *
                 C139824) *
                C139736) *
               C140002) *
              C139792 * C2324 +
          ((((C122913 - C122912 + C122915 - C122914 + C122917 - C122916) *
                 C182 +
             (C123159 - C123158 + C123161 - C123160 + C123163 - C123162) *
                 C139824) *
                C139967 +
            ((C122924 - C122925 + C122926 - C122927 + C122928 - C122929) *
                 C182 +
             (C123164 - C123165 + C123166 - C123167 + C123168 - C123169) *
                 C139824) *
                C139736) *
               C4096 +
           (((C124667 - C124666 + C124669 - C124668 + C124671 - C124670) *
                 C182 +
             (C124989 - C124988 + C124991 - C124990 + C124993 - C124992) *
                 C139824) *
                C139967 +
            ((C140013 * C1743 - C122908 * C1568 + C140014 * C5399 -
              C122909 * C5275 + C122759 * C15914 - C122910 * C15624) *
                 C182 +
             (C140013 * C1999 - C122908 * C1831 + C140014 * C5569 -
              C122909 * C5457 + C122759 * C16296 - C122910 * C16030) *
                 C139824) *
                C139736) *
               C140002) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eezx[123] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((C139967 * C114 - C137755 * C108 + C139736 * C116 -
                        C137748 * C109) *
                           C122908 +
                       (C139967 * C573 - C137755 * C567 + C139736 * C574 -
                        C137748 * C568) *
                           C140013 +
                       (C78013 - C78014 + C78015 - C78016) * C122909 +
                       (C78421 - C78422 + C78423 - C78424) * C140014 +
                       (C84710 - C84709 + C84712 - C84711) * C122910 +
                       (C85012 - C85011 + C85014 - C85013) * C122759) *
                          C139824 * C4096 +
                      ((C78014 - C78013 + C78016 - C78015) * C122908 +
                       (C78422 - C78421 + C78424 - C78423) * C140013 +
                       (C84709 - C84710 + C84711 - C84712) * C122909 +
                       (C85011 - C85012 + C85013 - C85014) * C140014 +
                       (C137755 * C15623 - C139967 * C15627 + C137748 * C15622 -
                        C139736 * C15625) *
                           C122910 +
                       (C137755 * C16401 - C139967 * C16404 + C137748 * C16402 -
                        C139736 * C16405) *
                           C122759) *
                          C139824 * C140002) *
                         C139792 * C2324 +
                     (((C137755 * C109 - C139967 * C116 + C137748 * C110 -
                        C139736 * C118) *
                           C122908 +
                       (C137755 * C568 - C139967 * C574 + C137748 * C569 -
                        C139736 * C575) *
                           C140013 +
                       (C78021 - C78022 + C78023 - C78024) * C122909 +
                       (C78425 - C78426 + C78427 - C78428) * C140014 +
                       (C124776 - C124777 + C124778 - C124779) * C122910 +
                       (C125092 - C125093 + C125094 - C125095) * C122759) *
                          C139824 * C4096 +
                      ((C78022 - C78021 + C78024 - C78023) * C122908 +
                       (C78426 - C78425 + C78428 - C78427) * C140013 +
                       (C124777 - C124776 + C124779 - C124778) * C122909 +
                       (C125093 - C125092 + C125095 - C125094) * C140014 +
                       (C139967 * C15625 - C137755 * C15622 + C139736 * C15629 -
                        C137748 * C15624) *
                           C122910 +
                       (C139967 * C16405 - C137755 * C16402 + C139736 * C16406 -
                        C137748 * C16403) *
                           C122759) *
                          C139824 * C140002) *
                         C139792 * C139998)) /
                   (p * q * std::sqrt(p + q));
    d2eezy[123] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139824 * C183 - C182 * C108) * C122908 +
             (C139824 * C629 - C182 * C567) * C140013 +
             (C15795 - C15796) * C122909 + (C16525 - C16526) * C140014 +
             C21114 * C122910 + C21623 * C122759) *
                C139967 +
            ((C196 - C197) * C122908 + (C636 - C637) * C140013 +
             C15799 * C122909 + C16529 * C140014 + C15805 * C122910 +
             C16530 * C122759) *
                C139736) *
               C4096 +
           (((C15796 - C15795) * C122908 + (C16526 - C16525) * C140013 +
             (C15802 - C15801) * C122909 + (C16528 - C16527) * C140014 +
             (C21118 - C21119) * C122910 + (C21624 - C21625) * C122759) *
                C139967 +
            (C15807 * C122908 + C16531 * C140013 + C15809 * C122909 +
             C16532 * C140014 + (C15811 - C15812) * C122910 +
             (C16533 - C16534) * C122759) *
                C139736) *
               C140002) *
              C139792 * C2324 +
          ((((C197 - C196) * C122908 + (C637 - C636) * C140013 +
             C15807 * C122909 + C16531 * C140014 + C15809 * C122910 +
             C16532 * C122759) *
                C139967 +
            ((C201 - C200) * C122908 + (C640 - C639) * C140013 +
             C31358 * C122909 + C32014 * C140014 + (C13938 - C13939) * C122910 +
             (C14441 - C14442) * C122759) *
                C139736) *
               C4096 +
           ((C15799 * C122908 + C16529 * C140013 + C15805 * C122909 +
             C16530 * C140014 + (C15812 - C15811) * C122910 +
             (C16534 - C16533) * C122759) *
                C139967 +
            (C29549 * C122908 + C30048 * C140013 + (C13939 - C13938) * C122909 +
             (C14442 - C14441) * C140014 +
             (C139824 * C15790 - C182 * C15624) * C122910 +
             (C139824 * C16523 - C182 * C16403) * C122759) *
                C139736) *
               C140002) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eezz[123] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C122908 * C266 - C123391 * C108 - C122908 * C567 + C140013 * C702 +
             C122909 * C1741 - C123392 * C1570 - C122909 * C2074 +
             C140014 * C2230 + C122910 * C5397 - C123393 * C5273 -
             C122910 * C5621 + C122759 * C5733) *
                C139824 * C139967 +
            (C123431 + C123432 + C123433) * C139824 * C139736) *
               C4096 -
           ((C125310 + C125311 + C125312) * C139824 * C139736 +
            (C122910 * C15912 - C123393 * C15623 - C122910 * C16401 +
             C122759 * C16633 + C122909 * C5397 - C123392 * C5273 -
             C122909 * C5621 + C140014 * C5733 + C122908 * C1741 -
             C123391 * C1570 - C122908 * C2074 + C140013 * C2230) *
                C139824 * C139967) *
               C140002) *
              C139792 * C2324 +
          (((C125312 + C125311 + C125310) * C139824 * C139967 +
            (C122908 * C1743 - C123391 * C1568 - C122908 * C2076 +
             C140013 * C2228 + C122909 * C5399 - C123392 * C5275 -
             C122909 * C5623 + C140014 * C5735 + C122910 * C15914 -
             C123393 * C15624 - C122910 * C16403 + C122759 * C16634) *
                C139824 * C139736) *
               C140002 -
           ((C123434 + C123435 + C123436) * C139824 * C139736 +
            (C123433 + C123432 + C123431) * C139824 * C139967) *
               C4096) *
              C139792 * C139998)) /
        (p * q * std::sqrt(p + q));
    d2eexx[124] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C137755 * C114 - C67752 * C108 - C137755 * C115 + C139967 * C126 +
             C137748 * C116 - C67754 * C109 - C137748 * C117 + C139736 * C127) *
                C140013 +
            (C77607 + C77608) * C140014 + (C84414 + C84413) * C122759) *
               C139824 * C4096 -
           ((C137748 * C15625 - C67754 * C15622 - C137748 * C15626 +
             C139736 * C15631 + C137755 * C15627 - C67752 * C15623 -
             C137755 * C15628 + C139967 * C15632) *
                C122759 +
            (C84413 + C84414) * C140014 + (C77608 + C77607) * C140013) *
               C139824 * C140002) *
              C806 +
          ((C80877 * C140013 + (C80892 + C80891) * C140014 +
            (C137755 * C18304 - C67752 * C18302 - C137755 * C18305 +
             C139967 * C18308 + C137748 * C18306 - C67754 * C18303 -
             C137748 * C18307 + C139736 * C18309) *
                C122759) *
               C139824 * C140002 -
           ((C80891 + C80892) * C122759 + C80886 * C140014 +
            (C68585 + C68584) * C140013) *
               C139824 * C4096) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eexy[124] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139824 * C183 - C182 * C108) * C137755 +
             (C139824 * C189 - C182 * C115) * C139967 +
             (C196 - C197) * C137748 + (C198 - C199) * C139736) *
                C140013 +
            ((C15795 - C15796) * C137755 + (C15797 - C15798) * C139967 +
             C15799 * C137748 + C15800 * C139736) *
                C140014 +
            (C21114 * C137755 + C21115 * C139967 + C15805 * C137748 +
             C15806 * C139736) *
                C122759) *
               C4096 +
           (((C15796 - C15795) * C137755 + (C15798 - C15797) * C139967 +
             C15807 * C137748 + C15808 * C139736) *
                C140013 +
            ((C15802 - C15801) * C137755 + (C15804 - C15803) * C139967 +
             C15809 * C137748 + C15810 * C139736) *
                C140014 +
            ((C21118 - C21119) * C137755 + (C21120 - C21121) * C139967 +
             (C15811 - C15812) * C137748 + (C15813 - C15814) * C139736) *
                C122759) *
               C140002) *
              C806 +
          ((((C182 * C813 - C139824 * C896) * C137755 +
             (C182 * C822 - C139824 * C901) * C139967 +
             (C907 - C908) * C137748 + (C909 - C910) * C139736) *
                C140013 +
            ((C18427 - C18428) * C137755 + (C18429 - C18430) * C139967 +
             (C14764 - C14765) * C137748 + (C14766 - C14767) * C139736) *
                C140014 +
            ((C18431 - C18432) * C137755 + (C18433 - C18434) * C139967 +
             (C14768 - C14769) * C137748 + (C14770 - C14771) * C139736) *
                C122759) *
               C4096 +
           (((C18428 - C18427) * C137755 + (C18430 - C18429) * C139967 +
             (C14765 - C14764) * C137748 + (C14767 - C14766) * C139736) *
                C140013 +
            ((C18432 - C18431) * C137755 + (C18434 - C18433) * C139967 +
             (C14769 - C14768) * C137748 + (C14771 - C14770) * C139736) *
                C140014 +
            ((C110796 - C110795) * C137755 + (C110798 - C110797) * C139967 +
             (C139824 * C18423 - C182 * C18303) * C137748 +
             (C139824 * C18425 - C182 * C18307) * C139736) *
                C122759) *
               C140002) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eexz[124] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C140013 * C266 - C122908 * C108 + C140014 * C1741 -
             C122909 * C1570 + C122759 * C5397 - C122910 * C5273) *
                C137755 +
            (C140013 * C272 - C122908 * C115 + C140014 * C1746 -
             C122909 * C1579 + C122759 * C5401 - C122910 * C5278) *
                C139967 +
            (C122912 - C122913 + C122914 - C122915 + C122916 - C122917) *
                C137748 +
            (C122918 - C122919 + C122920 - C122921 + C122922 - C122923) *
                C139736) *
               C139824 * C4096 +
           ((C122908 * C1570 - C140013 * C1741 + C122909 * C5273 -
             C140014 * C5397 + C122910 * C15623 - C122759 * C15912) *
                C137755 +
            (C122908 * C1579 - C140013 * C1746 + C122909 * C5278 -
             C140014 * C5401 + C122910 * C15628 - C122759 * C15915) *
                C139967 +
            (C124666 - C124667 + C124668 - C124669 + C124670 - C124671) *
                C137748 +
            (C124672 - C124673 + C124674 - C124675 + C124676 - C124677) *
                C139736) *
               C139824 * C140002) *
              C806 +
          (((C122908 * C813 - C140013 * C984 + C122909 * C3438 -
             C140014 * C3594 + C122910 * C13126 - C122759 * C13298) *
                C137755 +
            (C122908 * C822 - C140013 * C989 + C122909 * C3443 -
             C140014 * C3598 + C122910 * C13131 - C122759 * C13302) *
                C139967 +
            (C123731 - C123732 + C123733 - C123734 + C123735 - C123736) *
                C137748 +
            (C123737 - C123738 + C123739 - C123740 + C123741 - C123742) *
                C139736) *
               C139824 * C4096 +
           ((C140013 * C3594 - C122908 * C3438 + C140014 * C13298 -
             C122909 * C13126 + C122759 * C18532 - C122910 * C18302) *
                C137755 +
            (C140013 * C3598 - C122908 * C3443 + C140014 * C13302 -
             C122909 * C13131 + C122759 * C18534 - C122910 * C18305) *
                C139967 +
            (C140013 * C3595 - C122908 * C3439 + C140014 * C13299 -
             C122909 * C13127 + C122759 * C18533 - C122910 * C18303) *
                C137748 +
            (C140013 * C3599 - C122908 * C3445 + C140014 * C13303 -
             C122909 * C13133 + C122759 * C18535 - C122910 * C18307) *
                C139736) *
               C139824 * C140002) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eeyx[124] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((((C139967 * C114 - C137755 * C108 + C139736 * C116 -
                         C137748 * C109) *
                            C182 +
                        (C139967 * C354 - C137755 * C348 + C139736 * C355 -
                         C137748 * C349) *
                            C139824) *
                           C140013 +
                       ((C78013 - C78014 + C78015 - C78016) * C182 +
                        (C78017 - C78018 + C78019 - C78020) * C139824) *
                           C140014 +
                       ((C84710 - C84709 + C84712 - C84711) * C182 +
                        (C84714 - C84713 + C84716 - C84715) * C139824) *
                           C122759) *
                          C4096 +
                      (((C78014 - C78013 + C78016 - C78015) * C182 +
                        (C78018 - C78017 + C78020 - C78019) * C139824) *
                           C140013 +
                       ((C84709 - C84710 + C84711 - C84712) * C182 +
                        (C84713 - C84714 + C84715 - C84716) * C139824) *
                           C140014 +
                       ((C137755 * C15623 - C139967 * C15627 +
                         C137748 * C15622 - C139736 * C15625) *
                            C182 +
                        (C137755 * C16028 - C139967 * C16031 +
                         C137748 * C16029 - C139736 * C16032) *
                            C139824) *
                           C122759) *
                          C140002) *
                         C806 +
                     ((((C68899 - C68898 + C68901 - C68900) * C182 +
                        (C68903 - C68902 + C68905 - C68904) * C139824) *
                           C140013 +
                       (C81301 * C182 + C81302 * C139824) * C140014 +
                       ((C81291 - C81292 + C81293 - C81294) * C182 +
                        (C81295 - C81296 + C81297 - C81298) * C139824) *
                           C122759) *
                          C4096 +
                      ((C81299 * C182 + C81300 * C139824) * C140013 +
                       ((C81292 - C81291 + C81294 - C81293) * C182 +
                        (C81296 - C81295 + C81298 - C81297) * C139824) *
                           C140014 +
                       ((C139967 * C18304 - C137755 * C18302 +
                         C139736 * C18306 - C137748 * C18303) *
                            C182 +
                        (C139967 * C18636 - C137755 * C18634 +
                         C139736 * C18637 - C137748 * C18635) *
                            C139824) *
                           C122759) *
                          C140002) *
                         C140000) *
                    C139758) /
                   (p * q * std::sqrt(p + q));
    d2eeyy[124] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C182 * C183 - C410 * C108 - C182 * C348 + C139824 * C411) *
                 C139967 +
             C442 * C139736) *
                C140013 +
            (C124882 + C124883) * C140014 + (C124884 + C124885) * C122759) *
               C4096 -
           ((C16194 * C139736 + C21384 * C139967) * C122759 +
            (C124885 + C124884) * C140014 + (C124883 + C124882) * C140013) *
               C140002) *
              C806 +
          (((C127351 + C127352) * C140013 + (C127353 + C127354) * C140014 +
            (C111005 * C139967 + (C182 * C18423 - C410 * C18303 -
                                  C182 * C18635 + C139824 * C18745) *
                                     C139736) *
                C122759) *
               C140002 -
           ((C127354 + C127353) * C122759 + (C127352 + C127351) * C140014 +
            (C1174 * C139736 +
             (C182 * C896 - C410 * C813 - C182 * C1072 + C139824 * C1151) *
                 C139967) *
                C140013) *
               C4096) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eeyz[124] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C140013 * C266 - C122908 * C108 + C140014 * C1741 -
              C122909 * C1570 + C122759 * C5397 - C122910 * C5273) *
                 C182 +
             (C140013 * C495 - C122908 * C348 + C140014 * C1997 -
              C122909 * C1829 + C122759 * C5567 - C122910 * C5455) *
                 C139824) *
                C139967 +
            ((C122912 - C122913 + C122914 - C122915 + C122916 - C122917) *
                 C182 +
             (C123158 - C123159 + C123160 - C123161 + C123162 - C123163) *
                 C139824) *
                C139736) *
               C4096 +
           (((C122908 * C1570 - C140013 * C1741 + C122909 * C5273 -
              C140014 * C5397 + C122910 * C15623 - C122759 * C15912) *
                 C182 +
             (C122908 * C1829 - C140013 * C1997 + C122909 * C5455 -
              C140014 * C5567 + C122910 * C16028 - C122759 * C16294) *
                 C139824) *
                C139967 +
            ((C124666 - C124667 + C124668 - C124669 + C124670 - C124671) *
                 C182 +
             (C124988 - C124989 + C124990 - C124991 + C124992 - C124993) *
                 C139824) *
                C139736) *
               C140002) *
              C806 +
          ((((C122908 * C813 - C140013 * C984 + C122909 * C3438 -
              C140014 * C3594 + C122910 * C13126 - C122759 * C13298) *
                 C182 +
             (C122908 * C1072 - C140013 * C1240 + C122909 * C3668 -
              C140014 * C3812 + C122910 * C13380 - C122759 * C13540) *
                 C139824) *
                C139967 +
            ((C123731 - C123732 + C123733 - C123734 + C123735 - C123736) *
                 C182 +
             (C124037 - C124038 + C124039 - C124040 + C124041 - C124042) *
                 C139824) *
                C139736) *
               C4096 +
           (((C140013 * C3594 - C122908 * C3438 + C140014 * C13298 -
              C122909 * C13126 + C122759 * C18532 - C122910 * C18302) *
                 C182 +
             (C140013 * C3812 - C122908 * C3668 + C140014 * C13540 -
              C122909 * C13380 + C122759 * C18862 - C122910 * C18634) *
                 C139824) *
                C139967 +
            ((C140013 * C3595 - C122908 * C3439 + C140014 * C13299 -
              C122909 * C13127 + C122759 * C18533 - C122910 * C18303) *
                 C182 +
             (C140013 * C3813 - C122908 * C3669 + C140014 * C13542 -
              C122909 * C13381 + C122759 * C18863 - C122910 * C18635) *
                 C139824) *
                C139736) *
               C140002) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eezx[124] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139967 * C114 - C137755 * C108 + C139736 * C116 -
             C137748 * C109) *
                C122908 +
            (C139967 * C573 - C137755 * C567 + C139736 * C574 -
             C137748 * C568) *
                C140013 +
            (C78013 - C78014 + C78015 - C78016) * C122909 +
            (C78421 - C78422 + C78423 - C78424) * C140014 +
            (C84710 - C84709 + C84712 - C84711) * C122910 +
            (C85012 - C85011 + C85014 - C85013) * C122759) *
               C139824 * C4096 +
           ((C78014 - C78013 + C78016 - C78015) * C122908 +
            (C78422 - C78421 + C78424 - C78423) * C140013 +
            (C84709 - C84710 + C84711 - C84712) * C122909 +
            (C85011 - C85012 + C85013 - C85014) * C140014 +
            (C137755 * C15623 - C139967 * C15627 + C137748 * C15622 -
             C139736 * C15625) *
                C122910 +
            (C137755 * C16401 - C139967 * C16404 + C137748 * C16402 -
             C139736 * C16405) *
                C122759) *
               C139824 * C140002) *
              C806 +
          (((C68899 - C68898 + C68901 - C68900) * C122908 +
            (C69246 - C69245 + C69248 - C69247) * C140013 + C81301 * C122909 +
            C81702 * C140014 + (C81291 - C81292 + C81293 - C81294) * C122910 +
            (C81697 - C81698 + C81699 - C81700) * C122759) *
               C139824 * C4096 +
           (C81299 * C122908 + C81701 * C140013 +
            (C81292 - C81291 + C81294 - C81293) * C122909 +
            (C81698 - C81697 + C81700 - C81699) * C140014 +
            (C139967 * C18304 - C137755 * C18302 + C139736 * C18306 -
             C137748 * C18303) *
                C122910 +
            (C139967 * C18964 - C137755 * C18962 + C139736 * C18965 -
             C137748 * C18963) *
                C122759) *
               C139824 * C140002) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eezy[124] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139824 * C183 - C182 * C108) * C122908 +
             (C139824 * C629 - C182 * C567) * C140013 +
             (C15795 - C15796) * C122909 + (C16525 - C16526) * C140014 +
             C21114 * C122910 + C21623 * C122759) *
                C139967 +
            ((C196 - C197) * C122908 + (C636 - C637) * C140013 +
             C15799 * C122909 + C16529 * C140014 + C15805 * C122910 +
             C16530 * C122759) *
                C139736) *
               C4096 +
           (((C15796 - C15795) * C122908 + (C16526 - C16525) * C140013 +
             (C15802 - C15801) * C122909 + (C16528 - C16527) * C140014 +
             (C21118 - C21119) * C122910 + (C21624 - C21625) * C122759) *
                C139967 +
            (C15807 * C122908 + C16531 * C140013 + C15809 * C122909 +
             C16532 * C140014 + (C15811 - C15812) * C122910 +
             (C16533 - C16534) * C122759) *
                C139736) *
               C140002) *
              C806 +
          ((((C182 * C813 - C139824 * C896) * C122908 +
             (C182 * C1317 - C139824 * C1393) * C140013 +
             (C18427 - C18428) * C122909 + (C19071 - C19072) * C140014 +
             (C18431 - C18432) * C122910 + (C19073 - C19074) * C122759) *
                C139967 +
            ((C907 - C908) * C122908 + (C1399 - C1400) * C140013 +
             (C14764 - C14765) * C122909 + (C15401 - C15402) * C140014 +
             (C14768 - C14769) * C122910 + (C15403 - C15404) * C122759) *
                C139736) *
               C4096 +
           (((C18428 - C18427) * C122908 + (C19072 - C19071) * C140013 +
             (C18432 - C18431) * C122909 + (C19074 - C19073) * C140014 +
             (C110796 - C110795) * C122910 + (C111206 - C111205) * C122759) *
                C139967 +
            ((C14765 - C14764) * C122908 + (C15402 - C15401) * C140013 +
             (C14769 - C14768) * C122909 + (C15404 - C15403) * C140014 +
             (C139824 * C18423 - C182 * C18303) * C122910 +
             (C139824 * C19069 - C182 * C18963) * C122759) *
                C139736) *
               C140002) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eezz[124] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C122908 * C266 - C123391 * C108 - C122908 * C567 + C140013 * C702 +
             C122909 * C1741 - C123392 * C1570 - C122909 * C2074 +
             C140014 * C2230 + C122910 * C5397 - C123393 * C5273 -
             C122910 * C5621 + C122759 * C5733) *
                C139824 * C139967 +
            (C123431 + C123432 + C123433) * C139824 * C139736) *
               C4096 -
           ((C125310 + C125311 + C125312) * C139824 * C139736 +
            (C122910 * C15912 - C123393 * C15623 - C122910 * C16401 +
             C122759 * C16633 + C122909 * C5397 - C123392 * C5273 -
             C122909 * C5621 + C140014 * C5733 + C122908 * C1741 -
             C123391 * C1570 - C122908 * C2074 + C140013 * C2230) *
                C139824 * C139967) *
               C140002) *
              C806 +
          (((C122908 * C3594 - C123391 * C3438 - C122908 * C3882 +
             C140013 * C4026 + C122909 * C13298 - C123392 * C13126 -
             C122909 * C13618 + C140014 * C13778 + C122910 * C18532 -
             C123393 * C18302 - C122910 * C18962 + C122759 * C19172) *
                C139824 * C139967 +
            (C122908 * C3595 - C123391 * C3439 - C122908 * C3883 +
             C140013 * C4027 + C122909 * C13299 - C123392 * C13127 -
             C122909 * C13619 + C140014 * C13780 + C122910 * C18533 -
             C123393 * C18303 - C122910 * C18963 + C122759 * C19173) *
                C139824 * C139736) *
               C140002 -
           ((C124355 + C124356 + C124357) * C139824 * C139736 +
            (C122910 * C13298 - C123393 * C13126 - C122910 * C13618 +
             C122759 * C13778 + C122909 * C3594 - C123392 * C3438 -
             C122909 * C3882 + C140014 * C4026 + C122908 * C984 -
             C123391 * C813 - C122908 * C1317 + C140013 * C1473) *
                C139824 * C139967) *
               C4096) *
              C140000) *
         C139758) /
        (p * q * std::sqrt(p + q));
    d2eexx[125] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C137755 * C114 - C67752 * C108 - C137755 * C115 + C139967 * C126 +
            C137748 * C116 - C67754 * C109 - C137748 * C117 + C139736 * C127) *
               C140013 +
           (C77607 + C77608) * C140014 + C129585 * C122759) *
              C139824 * C5270 -
          ((C129598 + C129599) * C122759 + (C84413 + C84414) * C140014 +
           (C77608 + C77607) * C140013) *
              C139824 * C5271 +
          (C129585 * C140013 + (C129599 + C129598) * C140014 +
           (C137755 * C21014 - C67752 * C21012 - C137755 * C21015 +
            C139967 * C21018 + C137748 * C21016 - C67754 * C21013 -
            C137748 * C21017 + C139736 * C21019) *
               C122759) *
              C139824 * C5272) *
         C139792 * C139758) /
        (p * q * std::sqrt(p + q));
    d2eexy[125] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139824 * C183 - C182 * C108) * C137755 +
            (C139824 * C189 - C182 * C115) * C139967 + (C196 - C197) * C137748 +
            (C198 - C199) * C139736) *
               C140013 +
           ((C15795 - C15796) * C137755 + (C15797 - C15798) * C139967 +
            C15799 * C137748 + C15800 * C139736) *
               C140014 +
           C129680 * C122759) *
              C5270 +
          (((C15796 - C15795) * C137755 + (C15798 - C15797) * C139967 +
            C15807 * C137748 + C15808 * C139736) *
               C140013 +
           ((C15802 - C15801) * C137755 + (C15804 - C15803) * C139967 +
            C15809 * C137748 + C15810 * C139736) *
               C140014 +
           ((C21118 - C21119) * C137755 + (C21120 - C21121) * C139967 +
            (C15811 - C15812) * C137748 + (C15813 - C15814) * C139736) *
               C122759) *
              C5271 +
          (C129680 * C140013 +
           (C112576 * C137755 + C112577 * C139967 +
            (C15812 - C15811) * C137748 + (C15814 - C15813) * C139736) *
               C140014 +
           ((C112579 - C112578) * C137755 + (C112581 - C112580) * C139967 +
            (C139824 * C21110 - C182 * C21013) * C137748 +
            (C139824 * C21112 - C182 * C21017) * C139736) *
               C122759) *
              C5272) *
         C139792 * C139758) /
        (p * q * std::sqrt(p + q));
    d2eexz[125] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C140013 * C266 - C122908 * C108 + C140014 * C1741 -
            C122909 * C1570 + C122759 * C5397 - C122910 * C5273) *
               C137755 +
           (C140013 * C272 - C122908 * C115 + C140014 * C1746 -
            C122909 * C1579 + C122759 * C5401 - C122910 * C5278) *
               C139967 +
           (C122912 - C122913 + C122914 - C122915 + C122916 - C122917) *
               C137748 +
           (C122918 - C122919 + C122920 - C122921 + C122922 - C122923) *
               C139736) *
              C139824 * C5270 +
          ((C122908 * C1570 - C140013 * C1741 + C122909 * C5273 -
            C140014 * C5397 + C122910 * C15623 - C122759 * C15912) *
               C137755 +
           (C122908 * C1579 - C140013 * C1746 + C122909 * C5278 -
            C140014 * C5401 + C122910 * C15628 - C122759 * C15915) *
               C139967 +
           (C124666 - C124667 + C124668 - C124669 + C124670 - C124671) *
               C137748 +
           (C124672 - C124673 + C124674 - C124675 + C124676 - C124677) *
               C139736) *
              C139824 * C5271 +
          ((C140013 * C5397 - C122908 * C5273 + C140014 * C15912 -
            C122909 * C15623 + C122759 * C21200 - C122910 * C21012) *
               C137755 +
           (C140013 * C5401 - C122908 * C5278 + C140014 * C15915 -
            C122909 * C15628 + C122759 * C21202 - C122910 * C21015) *
               C139967 +
           (C140013 * C5398 - C122908 * C5274 + C140014 * C15913 -
            C122909 * C15622 + C122759 * C21201 - C122910 * C21013) *
               C137748 +
           (C140013 * C5402 - C122908 * C5280 + C140014 * C15916 -
            C122909 * C15626 + C122759 * C21203 - C122910 * C21017) *
               C139736) *
              C139824 * C5272) *
         C139792 * C139758) /
        (p * q * std::sqrt(p + q));
    d2eeyx[125] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((C139967 * C114 - C137755 * C108 + C139736 * C116 -
                        C137748 * C109) *
                           C182 +
                       (C139967 * C354 - C137755 * C348 + C139736 * C355 -
                        C137748 * C349) *
                           C139824) *
                          C140013 +
                      ((C78013 - C78014 + C78015 - C78016) * C182 +
                       (C78017 - C78018 + C78019 - C78020) * C139824) *
                          C140014 +
                      C129845 * C122759) *
                         C5270 +
                     (((C78014 - C78013 + C78016 - C78015) * C182 +
                       (C78018 - C78017 + C78020 - C78019) * C139824) *
                          C140013 +
                      ((C84709 - C84710 + C84711 - C84712) * C182 +
                       (C84713 - C84714 + C84715 - C84716) * C139824) *
                          C140014 +
                      ((C129833 - C129834 + C129835 - C129836) * C182 +
                       (C129837 - C129838 + C129839 - C129840) * C139824) *
                          C122759) *
                         C5271 +
                     (C129845 * C140013 +
                      ((C129834 - C129833 + C129836 - C129835) * C182 +
                       (C129838 - C129837 + C129840 - C129839) * C139824) *
                          C140014 +
                      ((C139967 * C21014 - C137755 * C21012 + C139736 * C21016 -
                        C137748 * C21013) *
                           C182 +
                       (C139967 * C21280 - C137755 * C21278 + C139736 * C21281 -
                        C137748 * C21279) *
                           C139824) *
                          C122759) *
                         C5272) *
                    C139792 * C139758) /
                   (p * q * std::sqrt(p + q));
    d2eeyy[125] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C182 * C183 - C410 * C108 - C182 * C348 + C139824 * C411) *
                C139967 +
            C442 * C139736) *
               C140013 +
           (C124882 + C124883) * C140014 + C129920 * C122759) *
              C5270 -
          ((C129921 + C129922) * C122759 + (C124885 + C124884) * C140014 +
           (C124883 + C124882) * C140013) *
              C5271 +
          (C129920 * C140013 + (C129922 + C129921) * C140014 +
           (C112759 * C139967 +
            (C182 * C21110 - C410 * C21013 - C182 * C21279 + C139824 * C21374) *
                C139736) *
               C122759) *
              C5272) *
         C139792 * C139758) /
        (p * q * std::sqrt(p + q));
    d2eeyz[125] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C140013 * C266 - C122908 * C108 + C140014 * C1741 -
             C122909 * C1570 + C122759 * C5397 - C122910 * C5273) *
                C182 +
            (C140013 * C495 - C122908 * C348 + C140014 * C1997 -
             C122909 * C1829 + C122759 * C5567 - C122910 * C5455) *
                C139824) *
               C139967 +
           ((C122912 - C122913 + C122914 - C122915 + C122916 - C122917) * C182 +
            (C123158 - C123159 + C123160 - C123161 + C123162 - C123163) *
                C139824) *
               C139736) *
              C5270 +
          (((C122908 * C1570 - C140013 * C1741 + C122909 * C5273 -
             C140014 * C5397 + C122910 * C15623 - C122759 * C15912) *
                C182 +
            (C122908 * C1829 - C140013 * C1997 + C122909 * C5455 -
             C140014 * C5567 + C122910 * C16028 - C122759 * C16294) *
                C139824) *
               C139967 +
           ((C124666 - C124667 + C124668 - C124669 + C124670 - C124671) * C182 +
            (C124988 - C124989 + C124990 - C124991 + C124992 - C124993) *
                C139824) *
               C139736) *
              C5271 +
          (((C140013 * C5397 - C122908 * C5273 + C140014 * C15912 -
             C122909 * C15623 + C122759 * C21200 - C122910 * C21012) *
                C182 +
            (C140013 * C5567 - C122908 * C5455 + C140014 * C16294 -
             C122909 * C16028 + C122759 * C21459 - C122910 * C21278) *
                C139824) *
               C139967 +
           ((C140013 * C5398 - C122908 * C5274 + C140014 * C15913 -
             C122909 * C15622 + C122759 * C21201 - C122910 * C21013) *
                C182 +
            (C140013 * C5568 - C122908 * C5456 + C140014 * C16295 -
             C122909 * C16029 + C122759 * C21460 - C122910 * C21279) *
                C139824) *
               C139736) *
              C5272) *
         C139792 * C139758) /
        (p * q * std::sqrt(p + q));
    d2eezx[125] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C139967 * C114 - C137755 * C108 + C139736 * C116 - C137748 * C109) *
               C122908 +
           (C139967 * C573 - C137755 * C567 + C139736 * C574 - C137748 * C568) *
               C140013 +
           (C78013 - C78014 + C78015 - C78016) * C122909 +
           (C78421 - C78422 + C78423 - C78424) * C140014 + C129841 * C122910 +
           C130077 * C122759) *
              C139824 * C5270 +
          ((C78014 - C78013 + C78016 - C78015) * C122908 +
           (C78422 - C78421 + C78424 - C78423) * C140013 +
           (C84709 - C84710 + C84711 - C84712) * C122909 +
           (C85011 - C85012 + C85013 - C85014) * C140014 +
           (C129833 - C129834 + C129835 - C129836) * C122910 +
           (C130073 - C130074 + C130075 - C130076) * C122759) *
              C139824 * C5271 +
          (C129841 * C122908 + C130077 * C140013 +
           (C129834 - C129833 + C129836 - C129835) * C122909 +
           (C130074 - C130073 + C130076 - C130075) * C140014 +
           (C139967 * C21014 - C137755 * C21012 + C139736 * C21016 -
            C137748 * C21013) *
               C122910 +
           (C139967 * C21537 - C137755 * C21535 + C139736 * C21538 -
            C137748 * C21536) *
               C122759) *
              C139824 * C5272) *
         C139792 * C139758) /
        (p * q * std::sqrt(p + q));
    d2eezy[125] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139824 * C183 - C182 * C108) * C122908 +
            (C139824 * C629 - C182 * C567) * C140013 +
            (C15795 - C15796) * C122909 + (C16525 - C16526) * C140014 +
            C21114 * C122910 + C21623 * C122759) *
               C139967 +
           ((C196 - C197) * C122908 + (C636 - C637) * C140013 +
            C15799 * C122909 + C16529 * C140014 + C15805 * C122910 +
            C16530 * C122759) *
               C139736) *
              C5270 +
          (((C15796 - C15795) * C122908 + (C16526 - C16525) * C140013 +
            (C15802 - C15801) * C122909 + (C16528 - C16527) * C140014 +
            (C21118 - C21119) * C122910 + (C21624 - C21625) * C122759) *
               C139967 +
           (C15807 * C122908 + C16531 * C140013 + C15809 * C122909 +
            C16532 * C140014 + (C15811 - C15812) * C122910 +
            (C16533 - C16534) * C122759) *
               C139736) *
              C5271 +
          ((C21114 * C122908 + C21623 * C140013 + C112576 * C122909 +
            C112918 * C140014 + (C112579 - C112578) * C122910 +
            (C112920 - C112919) * C122759) *
               C139967 +
           (C15805 * C122908 + C16530 * C140013 + (C15812 - C15811) * C122909 +
            (C16534 - C16533) * C140014 +
            (C139824 * C21110 - C182 * C21013) * C122910 +
            (C139824 * C21621 - C182 * C21536) * C122759) *
               C139736) *
              C5272) *
         C139792 * C139758) /
        (p * q * std::sqrt(p + q));
    d2eezz[125] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((C122908 * C266 - C123391 * C108 - C122908 * C567 +
                       C140013 * C702 + C122909 * C1741 - C123392 * C1570 -
                       C122909 * C2074 + C140014 * C2230 + C122910 * C5397 -
                       C123393 * C5273 - C122910 * C5621 + C122759 * C5733) *
                          C139824 * C139967 +
                      (C123431 + C123432 + C123433) * C139824 * C139736) *
                         C5270 -
                     ((C125310 + C125311 + C125312) * C139824 * C139736 +
                      (C122910 * C15912 - C123393 * C15623 - C122910 * C16401 +
                       C122759 * C16633 + C122909 * C5397 - C123392 * C5273 -
                       C122909 * C5621 + C140014 * C5733 + C122908 * C1741 -
                       C123391 * C1570 - C122908 * C2074 + C140013 * C2230) *
                          C139824 * C139967) *
                         C5271 +
                     ((C122908 * C5397 - C123391 * C5273 - C122908 * C5621 +
                       C140013 * C5733 + C122909 * C15912 - C123392 * C15623 -
                       C122909 * C16401 + C140014 * C16633 + C122910 * C21200 -
                       C123393 * C21012 - C122910 * C21535 + C122759 * C21699) *
                          C139824 * C139967 +
                      (C122908 * C5398 - C123391 * C5274 - C122908 * C5622 +
                       C140013 * C5734 + C122909 * C15913 - C123392 * C15622 -
                       C122909 * C16402 + C140014 * C16632 + C122910 * C21201 -
                       C123393 * C21013 - C122910 * C21536 + C122759 * C21700) *
                          C139824 * C139736) *
                         C5272) *
                    C139792 * C139758) /
                   (p * q * std::sqrt(p + q));
    d2eexx[126] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C47136 * C114 - C47137 * C108 - C47136 * C115 + C47131 * C126 +
            C47138 * C116 - C47139 * C109 - C47138 * C117 + C47132 * C127 +
            C47140 * C118 - C47141 * C110 - C47140 * C119 + C47133 * C128) *
               C92797 +
           (C47136 * C1578 - C47137 * C1570 - C47136 * C1579 + C47131 * C1585 +
            C47138 * C1576 - C47139 * C1569 - C47138 * C1577 + C47132 * C1584 +
            C47140 * C1574 - C47141 * C1568 - C47140 * C1575 + C47133 * C1583) *
               C139899) *
              C139824 * C139809 * C139792 * C97 -
          ((C47140 * C1572 - C47141 * C1567 - C47140 * C1573 + C47133 * C1582 +
            C47138 * C1574 - C47139 * C1568 - C47138 * C1575 + C47132 * C1583 +
            C47136 * C1576 - C47137 * C1569 - C47136 * C1577 + C47131 * C1584) *
               C139899 +
           (C47140 * C120 - C47141 * C111 - C47140 * C121 + C47133 * C129 +
            C47138 * C118 - C47139 * C110 - C47138 * C119 + C47132 * C128 +
            C47136 * C116 - C47137 * C109 - C47136 * C117 + C47131 * C127) *
               C92797) *
              C139824 * C139809 * C139792 * C98 +
          ((C47136 * C118 - C47137 * C110 - C47136 * C119 + C47131 * C128 +
            C47138 * C120 - C47139 * C111 - C47138 * C121 + C47132 * C129 +
            C47140 * C122 - C47141 * C112 - C47140 * C123 + C47133 * C130) *
               C92797 +
           (C47136 * C1574 - C47137 * C1568 - C47136 * C1575 + C47131 * C1583 +
            C47138 * C1572 - C47139 * C1567 - C47138 * C1573 + C47132 * C1582 +
            C47140 * C1580 - C47141 * C1571 - C47140 * C1581 + C47133 * C1586) *
               C139899) *
              C139824 * C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C54790 * C114 - C54791 * C108 - C54790 * C115 + C139731 * C126) *
                C92797 +
            C61654 * C139899) *
               C5813 +
           (C55303 * C92797 + C57671 * C139899) * C5814 +
           (C55304 * C92797 + C57670 * C139899) * C5815) *
              C139809 * C139792 * C97 -
          ((C85988 * C139899 + C55307 * C92797) * C5815 +
           (C60686 * C139899 + C55306 * C92797) * C5814 +
           (C61656 * C139899 +
            (C54790 * C116 - C54791 * C109 - C54790 * C117 + C139731 * C127) *
                C92797) *
               C5813) *
              C139809 * C139792 * C98 +
          (((C54790 * C118 - C54791 * C110 - C54790 * C119 + C139731 * C128) *
                C92797 +
            (C54790 * C1574 - C54791 * C1568 - C54790 * C1575 +
             C139731 * C1583) *
                C139899) *
               C5813 +
           ((C54790 * C817 - C54791 * C811 - C54790 * C818 + C139731 * C826) *
                C92797 +
            (C54790 * C3446 - C54791 * C3440 - C54790 * C3447 +
             C139731 * C3452) *
                C139899) *
               C5814 +
           ((C54790 * C2916 - C54791 * C2910 - C54790 * C2917 +
             C139731 * C2922) *
                C92797 +
            (C54790 * C7760 - C54791 * C7755 - C54790 * C7761 +
             C139731 * C7764) *
                C139899) *
               C5815) *
              C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eexy[126] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C139824 * C183 - C182 * C108) * C47136 +
            (C139824 * C189 - C182 * C115) * C47131 + (C196 - C197) * C47138 +
            (C198 - C199) * C47132 + C212 * C47140 + C213 * C47133) *
               C92797 +
           ((C15795 - C15796) * C47136 + (C15797 - C15798) * C47131 +
            C15799 * C47138 + C15800 * C47132 + C29549 * C47140 +
            C29550 * C47133) *
               C139899) *
              C139809 * C139792 * C97 +
          (((C197 - C196) * C47136 + (C199 - C198) * C47131 +
            (C201 - C200) * C47138 + (C203 - C202) * C47132 +
            (C205 - C204) * C47140 + (C207 - C206) * C47133) *
               C92797 +
           (C15807 * C47136 + C15808 * C47131 + C31358 * C47138 +
            C31359 * C47132 + (C1672 - C1673) * C47140 +
            (C1674 - C1675) * C47133) *
               C139899) *
              C139809 * C139792 * C98 +
          ((C212 * C47136 + C213 * C47131 + C214 * C47138 + C215 * C47132 +
            (C209 - C208) * C47140 + (C211 - C210) * C47133) *
               C92797 +
           (C29549 * C47136 + C29550 * C47131 + (C1673 - C1672) * C47138 +
            (C1675 - C1674) * C47132 +
            (C139824 * C1657 - C182 * C1571) * C47140 +
            (C139824 * C1662 - C182 * C1581) * C47133) *
               C139899) *
              C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5813 * C183 - C5894 * C108 + C5814 * C896 - C5895 * C813 +
             C5815 * C2974 - C5896 * C2908) *
                C54790 +
            (C5813 * C189 - C5894 * C115 + C5814 * C901 - C5895 * C822 +
             C5815 * C2978 - C5896 * C2913) *
                C139731) *
               C92797 +
           ((C5813 * C1653 - C5894 * C1570 + C5814 * C3520 - C5895 * C3438 +
             C5815 * C7863 - C5896 * C7754) *
                C54790 +
            (C5813 * C1658 - C5894 * C1579 + C5814 * C3524 - C5895 * C3443 +
             C5815 * C7866 - C5896 * C7759) *
                C139731) *
               C139899) *
              C139809 * C139792 * C97 +
          (((C5899 - C5898 + C5901 - C5900 + C5903 - C5902) * C54790 +
            (C5905 - C5904 + C5907 - C5906 + C5909 - C5908) * C139731) *
               C92797 +
           ((C7870 - C7871 + C7872 - C7873 + C7874 - C7875) * C54790 +
            (C7876 - C7877 + C7878 - C7879 + C7880 - C7881) * C139731) *
               C139899) *
              C139809 * C139792 * C98 +
          (((C5911 - C5910 + C5913 - C5912 + C5915 - C5914) * C54790 +
            (C5917 - C5916 + C5919 - C5918 + C5921 - C5920) * C139731) *
               C92797 +
           ((C5813 * C1655 - C5894 * C1568 + C5814 * C3522 - C5895 * C3440 +
             C5815 * C7865 - C5896 * C7755) *
                C54790 +
            (C5813 * C1660 - C5894 * C1575 + C5814 * C3526 - C5895 * C3447 +
             C5815 * C7868 - C5896 * C7761) *
                C139731) *
               C139899) *
              C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eexz[126] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C92797 * C266 - C92947 * C108 + C139899 * C1741 - C92948 * C1570) *
               C47136 +
           (C92797 * C272 - C92947 * C115 + C139899 * C1746 - C92948 * C1579) *
               C47131 +
           (C92950 - C92951 + C92952 - C92953) * C47138 +
           (C92954 - C92955 + C92956 - C92957) * C47132 + C92978 * C47140 +
           C92979 * C47133) *
              C139824 * C139809 * C139792 * C97 +
          ((C92951 - C92950 + C92953 - C92952) * C47136 +
           (C92955 - C92954 + C92957 - C92956) * C47131 +
           (C92959 - C92958 + C92961 - C92960) * C47138 +
           (C92963 - C92962 + C92965 - C92964) * C47132 +
           (C92966 - C92967 + C92968 - C92969) * C47140 +
           (C92970 - C92971 + C92972 - C92973) * C47133) *
              C139824 * C139809 * C139792 * C98 +
          (C92978 * C47136 + C92979 * C47131 +
           (C92967 - C92966 + C92969 - C92968) * C47138 +
           (C92971 - C92970 + C92973 - C92972) * C47132 +
           (C92797 * C270 - C92947 * C112 + C139899 * C1745 - C92948 * C1571) *
               C47140 +
           (C92797 * C276 - C92947 * C123 + C139899 * C1750 - C92948 * C1581) *
               C47133) *
              C139824 * C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92797 * C266 - C92947 * C108 + C139899 * C1741 - C92948 * C1570) *
                C54790 +
            (C92797 * C272 - C92947 * C115 + C139899 * C1746 - C92948 * C1579) *
                C139731) *
               C5813 +
           ((C92797 * C984 - C92947 * C813 + C139899 * C3594 - C92948 * C3438) *
                C54790 +
            (C92797 * C989 - C92947 * C822 + C139899 * C3598 - C92948 * C3443) *
                C139731) *
               C5814 +
           ((C92797 * C3032 - C92947 * C2908 + C139899 * C7979 -
             C92948 * C7754) *
                C54790 +
            (C92797 * C3036 - C92947 * C2913 + C139899 * C7982 -
             C92948 * C7759) *
                C139731) *
               C5815) *
              C139809 * C139792 * C97 +
          (((C92951 - C92950 + C92953 - C92952) * C54790 +
            (C92955 - C92954 + C92957 - C92956) * C139731) *
               C5813 +
           ((C93789 - C93790 + C93791 - C93792) * C54790 +
            (C93793 - C93794 + C93795 - C93796) * C139731) *
               C5814 +
           ((C92947 * C2909 - C92797 * C3033 + C92948 * C7753 -
             C139899 * C7980) *
                C54790 +
            (C92947 * C2915 - C92797 * C3037 + C92948 * C7757 -
             C139899 * C7983) *
                C139731) *
               C5815) *
              C139809 * C139792 * C98 +
          ((C92978 * C54790 + C92979 * C139731) * C5813 +
           ((C93798 - C93797 + C93800 - C93799) * C54790 +
            (C93802 - C93801 + C93804 - C93803) * C139731) *
               C5814 +
           ((C92797 * C3034 - C92947 * C2910 + C139899 * C7981 -
             C92948 * C7755) *
                C54790 +
            (C92797 * C3038 - C92947 * C2917 + C139899 * C7984 -
             C92948 * C7761) *
                C139731) *
               C5815) *
              C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[126] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47131 * C114 - C47136 * C108 + C47132 * C116 - C47138 * C109 +
             C47133 * C118 - C47140 * C110) *
                C182 +
            (C47131 * C354 - C47136 * C348 + C47132 * C355 - C47138 * C349 +
             C47133 * C356 - C47140 * C350) *
                C139824) *
               C92797 +
           ((C47131 * C1578 - C47136 * C1570 + C47132 * C1576 - C47138 * C1569 +
             C47133 * C1574 - C47140 * C1568) *
                C182 +
            (C47131 * C1834 - C47136 * C1829 + C47132 * C1835 - C47138 * C1830 +
             C47133 * C1836 - C47140 * C1831) *
                C139824) *
               C139899) *
              C139809 * C139792 * C97 +
          (((C47136 * C109 - C47131 * C116 + C47138 * C110 - C47132 * C118 +
             C47140 * C111 - C47133 * C120) *
                C182 +
            (C47136 * C349 - C47131 * C355 + C47138 * C350 - C47132 * C356 +
             C47140 * C351 - C47133 * C357) *
                C139824) *
               C92797 +
           ((C47136 * C1569 - C47131 * C1576 + C47138 * C1568 - C47132 * C1574 +
             C47140 * C1567 - C47133 * C1572) *
                C182 +
            (C47136 * C1830 - C47131 * C1835 + C47138 * C1831 - C47132 * C1836 +
             C47140 * C1832 - C47133 * C1837) *
                C139824) *
               C139899) *
              C139809 * C139792 * C98 +
          (((C47131 * C118 - C47136 * C110 + C47132 * C120 - C47138 * C111 +
             C47133 * C122 - C47140 * C112) *
                C182 +
            (C47131 * C356 - C47136 * C350 + C47132 * C357 - C47138 * C351 +
             C47133 * C358 - C47140 * C352) *
                C139824) *
               C92797 +
           ((C47131 * C1574 - C47136 * C1568 + C47132 * C1572 - C47138 * C1567 +
             C47133 * C1580 - C47140 * C1571) *
                C182 +
            (C47131 * C1836 - C47136 * C1831 + C47132 * C1837 - C47138 * C1832 +
             C47133 * C1838 - C47140 * C1833) *
                C139824) *
               C139899) *
              C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C139731 * C114 - C54790 * C108) * C5894 +
            (C139731 * C354 - C54790 * C348) * C5813 +
            (C55513 - C55514) * C5895 + (C55515 - C55516) * C5814 +
            C57297 * C5896 + C57298 * C5815) *
               C92797 +
           ((C61976 - C61977) * C5894 + (C61978 - C61979) * C5813 +
            C64587 * C5895 + C64588 * C5814 + C88899 * C5896 + C88900 * C5815) *
               C139899) *
              C139809 * C139792 * C97 +
          (((C54790 * C109 - C139731 * C116) * C5894 +
            (C54790 * C349 - C139731 * C355) * C5813 +
            (C55525 - C55526) * C5895 + (C55527 - C55528) * C5814 +
            (C55529 - C55530) * C5896 + (C55531 - C55532) * C5815) *
               C92797 +
           ((C61984 - C61985) * C5894 + (C61986 - C61987) * C5813 +
            (C61001 - C61002) * C5895 + (C61003 - C61004) * C5814 +
            (C86284 - C86285) * C5896 + (C86286 - C86287) * C5815) *
               C139899) *
              C139809 * C139792 * C98 +
          (((C139731 * C118 - C54790 * C110) * C5894 +
            (C139731 * C356 - C54790 * C350) * C5813 +
            (C139731 * C817 - C54790 * C811) * C5895 +
            (C139731 * C1079 - C54790 * C1074) * C5814 +
            (C139731 * C2916 - C54790 * C2910) * C5896 +
            (C139731 * C3096 - C54790 * C3092) * C5815) *
               C92797 +
           ((C139731 * C1574 - C54790 * C1568) * C5894 +
            (C139731 * C1836 - C54790 * C1831) * C5813 +
            (C139731 * C3446 - C54790 * C3440) * C5895 +
            (C139731 * C3674 - C54790 * C3670) * C5814 +
            (C139731 * C7760 - C54790 * C7755) * C5896 +
            (C139731 * C8096 - C54790 * C8093) * C5815) *
               C139899) *
              C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[126] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C182 * C183 - C410 * C108 - C182 * C348 + C139824 * C411) *
                C47131 +
            C442 * C47132 + C443 * C47133) *
               C92797 +
           (C16192 * C47131 + C1931 * C47132 + C1930 * C47133) * C139899) *
              C139809 * C139792 * C97 -
          ((C1929 * C47133 + C1930 * C47132 + C1931 * C47131) * C139899 +
           (C444 * C47133 + C443 * C47132 + C442 * C47131) * C92797) *
              C139809 * C139792 * C98 +
          ((C443 * C47131 + C444 * C47132 + C445 * C47133) * C92797 +
           (C1930 * C47131 + C1929 * C47132 +
            (C182 * C1657 - C410 * C1571 - C182 * C1833 + C139824 * C1909) *
                C47133) *
               C139899) *
              C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C5894 * C183 - C6151 * C108 - C5894 * C348 + C5813 * C411 +
            C5895 * C896 - C6152 * C813 - C5895 * C1072 + C5814 * C1151 +
            C5896 * C2974 - C6153 * C2908 - C5896 * C3090 + C5815 * C3148) *
               C139731 * C92797 +
           (C5894 * C1653 - C6151 * C1570 - C5894 * C1829 + C5813 * C1908 +
            C5895 * C3520 - C6152 * C3438 - C5895 * C3668 + C5814 * C3742 +
            C5896 * C7863 - C6153 * C7754 - C5896 * C8091 + C5815 * C8196) *
               C139731 * C139899) *
              C139809 * C139792 * C97 -
          ((C8217 + C8218 + C8219) * C139731 * C139899 +
           (C6193 + C6192 + C6191) * C139731 * C92797) *
              C139809 * C139792 * C98 +
          ((C6196 + C6195 + C6194) * C139731 * C92797 +
           (C5894 * C1655 - C6151 * C1568 - C5894 * C1831 + C5813 * C1906 +
            C5895 * C3522 - C6152 * C3440 - C5895 * C3670 + C5814 * C3744 +
            C5896 * C7865 - C6153 * C7755 - C5896 * C8093 + C5815 * C8197) *
               C139731 * C139899) *
              C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[126] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92797 * C266 - C92947 * C108 + C139899 * C1741 - C92948 * C1570) *
                C182 +
            (C92797 * C495 - C92947 * C348 + C139899 * C1997 - C92948 * C1829) *
                C139824) *
               C47131 +
           ((C92950 - C92951 + C92952 - C92953) * C182 +
            (C93202 - C93203 + C93204 - C93205) * C139824) *
               C47132 +
           C93219 * C47133) *
              C139809 * C139792 * C97 +
          (((C92951 - C92950 + C92953 - C92952) * C182 +
            (C93203 - C93202 + C93205 - C93204) * C139824) *
               C47131 +
           ((C92959 - C92958 + C92961 - C92960) * C182 +
            (C93208 - C93207 + C93210 - C93209) * C139824) *
               C47132 +
           ((C92966 - C92967 + C92968 - C92969) * C182 +
            (C93211 - C93212 + C93213 - C93214) * C139824) *
               C47133) *
              C139809 * C139792 * C98 +
          (C93219 * C47131 +
           ((C92967 - C92966 + C92969 - C92968) * C182 +
            (C93212 - C93211 + C93214 - C93213) * C139824) *
               C47132 +
           ((C92797 * C270 - C92947 * C112 + C139899 * C1745 - C92948 * C1571) *
                C182 +
            (C92797 * C499 - C92947 * C352 + C139899 * C2001 - C92948 * C1833) *
                C139824) *
               C47133) *
              C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C92797 * C266 - C92947 * C108 + C139899 * C1741 - C92948 * C1570) *
               C5894 +
           (C92797 * C495 - C92947 * C348 + C139899 * C1997 - C92948 * C1829) *
               C5813 +
           (C92797 * C984 - C92947 * C813 + C139899 * C3594 - C92948 * C3438) *
               C5895 +
           (C92797 * C1240 - C92947 * C1072 + C139899 * C3812 -
            C92948 * C3668) *
               C5814 +
           (C92797 * C3032 - C92947 * C2908 + C139899 * C7979 -
            C92948 * C7754) *
               C5896 +
           (C92797 * C3202 - C92947 * C3090 + C139899 * C8317 -
            C92948 * C8091) *
               C5815) *
              C139731 * C139809 * C139792 * C97 +
          ((C92951 - C92950 + C92953 - C92952) * C5894 +
           (C93203 - C93202 + C93205 - C93204) * C5813 +
           (C93789 - C93790 + C93791 - C93792) * C5895 +
           (C94099 - C94100 + C94101 - C94102) * C5814 +
           (C92947 * C2909 - C92797 * C3033 + C92948 * C7753 -
            C139899 * C7980) *
               C5896 +
           (C92947 * C3091 - C92797 * C3203 + C92948 * C8092 -
            C139899 * C8318) *
               C5815) *
              C139731 * C139809 * C139792 * C98 +
          (C92978 * C5894 + C93217 * C5813 +
           (C93798 - C93797 + C93800 - C93799) * C5895 +
           (C94104 - C94103 + C94106 - C94105) * C5814 +
           (C92797 * C3034 - C92947 * C2910 + C139899 * C7981 -
            C92948 * C7755) *
               C5896 +
           (C92797 * C3204 - C92947 * C3092 + C139899 * C8319 -
            C92948 * C8093) *
               C5815) *
              C139731 * C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eezx[126] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C47131 * C114 - C47136 * C108 + C47132 * C116 - C47138 * C109 +
            C47133 * C118 - C47140 * C110) *
               C92947 +
           (C47131 * C573 - C47136 * C567 + C47132 * C574 - C47138 * C568 +
            C47133 * C575 - C47140 * C569) *
               C92797 +
           (C47131 * C1578 - C47136 * C1570 + C47132 * C1576 - C47138 * C1569 +
            C47133 * C1574 - C47140 * C1568) *
               C92948 +
           (C47131 * C2079 - C47136 * C2074 + C47132 * C2080 - C47138 * C2075 +
            C47133 * C2081 - C47140 * C2076) *
               C139899) *
              C139824 * C139809 * C139792 * C97 +
          ((C47136 * C109 - C47131 * C116 + C47138 * C110 - C47132 * C118 +
            C47140 * C111 - C47133 * C120) *
               C92947 +
           (C47136 * C568 - C47131 * C574 + C47138 * C569 - C47132 * C575 +
            C47140 * C570 - C47133 * C576) *
               C92797 +
           (C47136 * C1569 - C47131 * C1576 + C47138 * C1568 - C47132 * C1574 +
            C47140 * C1567 - C47133 * C1572) *
               C92948 +
           (C47136 * C2075 - C47131 * C2080 + C47138 * C2076 - C47132 * C2081 +
            C47140 * C2077 - C47133 * C2082) *
               C139899) *
              C139824 * C139809 * C139792 * C98 +
          ((C47131 * C118 - C47136 * C110 + C47132 * C120 - C47138 * C111 +
            C47133 * C122 - C47140 * C112) *
               C92947 +
           (C47131 * C575 - C47136 * C569 + C47132 * C576 - C47138 * C570 +
            C47133 * C577 - C47140 * C571) *
               C92797 +
           (C47131 * C1574 - C47136 * C1568 + C47132 * C1572 - C47138 * C1567 +
            C47133 * C1580 - C47140 * C1571) *
               C92948 +
           (C47131 * C2081 - C47136 * C2076 + C47132 * C2082 - C47138 * C2077 +
            C47133 * C2083 - C47140 * C2078) *
               C139899) *
              C139824 * C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C139731 * C114 - C54790 * C108) * C92947 +
            (C139731 * C573 - C54790 * C567) * C92797 +
            (C61976 - C61977) * C92948 + (C62328 - C62329) * C139899) *
               C5813 +
           ((C55513 - C55514) * C92947 + (C55735 - C55736) * C92797 +
            C64587 * C92948 + C64931 * C139899) *
               C5814 +
           (C57297 * C92947 + C57463 * C92797 + C88899 * C92948 +
            C89133 * C139899) *
               C5815) *
              C139809 * C139792 * C97 +
          (((C54790 * C109 - C139731 * C116) * C92947 +
            (C54790 * C568 - C139731 * C574) * C92797 +
            (C61984 - C61985) * C92948 + (C62332 - C62333) * C139899) *
               C5813 +
           ((C55525 - C55526) * C92947 + (C55741 - C55742) * C92797 +
            (C61001 - C61002) * C92948 + (C61311 - C61312) * C139899) *
               C5814 +
           ((C55529 - C55530) * C92947 + (C55743 - C55744) * C92797 +
            (C86284 - C86285) * C92948 + (C86582 - C86583) * C139899) *
               C5815) *
              C139809 * C139792 * C98 +
          (((C139731 * C118 - C54790 * C110) * C92947 +
            (C139731 * C575 - C54790 * C569) * C92797 +
            (C139731 * C1574 - C54790 * C1568) * C92948 +
            (C139731 * C2081 - C54790 * C2076) * C139899) *
               C5813 +
           ((C139731 * C817 - C54790 * C811) * C92947 +
            (C139731 * C1324 - C54790 * C1319) * C92797 +
            (C139731 * C3446 - C54790 * C3440) * C92948 +
            (C139731 * C3888 - C54790 * C3884) * C139899) *
               C5814 +
           ((C139731 * C2916 - C54790 * C2910) * C92947 +
            (C139731 * C3262 - C54790 * C3258) * C92797 +
            (C139731 * C7760 - C54790 * C7755) * C92948 +
            (C139731 * C8427 - C54790 * C8424) * C139899) *
               C5815) *
              C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eezy[126] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C139824 * C183 - C182 * C108) * C92947 +
            (C139824 * C629 - C182 * C567) * C92797 +
            (C15795 - C15796) * C92948 + (C16525 - C16526) * C139899) *
               C47131 +
           ((C196 - C197) * C92947 + (C636 - C637) * C92797 + C15799 * C92948 +
            C16529 * C139899) *
               C47132 +
           C93374 * C47133) *
              C139809 * C139792 * C97 +
          (((C197 - C196) * C92947 + (C637 - C636) * C92797 + C15807 * C92948 +
            C16531 * C139899) *
               C47131 +
           ((C201 - C200) * C92947 + (C640 - C639) * C92797 + C31358 * C92948 +
            C32014 * C139899) *
               C47132 +
           ((C205 - C204) * C92947 + (C643 - C642) * C92797 +
            (C1672 - C1673) * C92948 + (C2160 - C2161) * C139899) *
               C47133) *
              C139809 * C139792 * C98 +
          (C93374 * C47131 +
           (C214 * C92947 + C647 * C92797 + (C1673 - C1672) * C92948 +
            (C2161 - C2160) * C139899) *
               C47132 +
           ((C209 - C208) * C92947 + (C645 - C644) * C92797 +
            (C139824 * C1657 - C182 * C1571) * C92948 +
            (C139824 * C2154 - C182 * C2078) * C139899) *
               C47133) *
              C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C5813 * C183 - C5894 * C108 + C5814 * C896 - C5895 * C813 +
            C5815 * C2974 - C5896 * C2908) *
               C92947 +
           (C5813 * C629 - C5894 * C567 + C5814 * C1393 - C5895 * C1317 +
            C5815 * C3314 - C5896 * C3256) *
               C92797 +
           (C5813 * C1653 - C5894 * C1570 + C5814 * C3520 - C5895 * C3438 +
            C5815 * C7863 - C5896 * C7754) *
               C92948 +
           (C5813 * C2150 - C5894 * C2074 + C5814 * C3956 - C5895 * C3882 +
            C5815 * C8526 - C5896 * C8422) *
               C139899) *
              C139731 * C139809 * C139792 * C97 +
          ((C5899 - C5898 + C5901 - C5900 + C5903 - C5902) * C92947 +
           (C6424 - C6423 + C6426 - C6425 + C6428 - C6427) * C92797 +
           (C7870 - C7871 + C7872 - C7873 + C7874 - C7875) * C92948 +
           (C8530 - C8531 + C8532 - C8533 + C8534 - C8535) * C139899) *
              C139731 * C139809 * C139792 * C98 +
          ((C5911 - C5910 + C5913 - C5912 + C5915 - C5914) * C92947 +
           (C6430 - C6429 + C6432 - C6431 + C6434 - C6433) * C92797 +
           (C5813 * C1655 - C5894 * C1568 + C5814 * C3522 - C5895 * C3440 +
            C5815 * C7865 - C5896 * C7755) *
               C92948 +
           (C5813 * C2152 - C5894 * C2076 + C5814 * C3958 - C5895 * C3884 +
            C5815 * C8528 - C5896 * C8424) *
               C139899) *
              C139731 * C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eezz[126] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C92947 * C266 - C93448 * C108 - C92947 * C567 + C92797 * C702 +
            C92948 * C1741 - C93449 * C1570 - C92948 * C2074 +
            C139899 * C2230) *
               C139824 * C47131 +
           (C93487 + C93488) * C139824 * C47132 + C93494 * C47133) *
              C139809 * C139792 * C97 -
          ((C93491 + C93492) * C139824 * C47133 +
           (C93490 + C93489) * C139824 * C47132 +
           (C93488 + C93487) * C139824 * C47131) *
              C139809 * C139792 * C98 +
          (C93494 * C47131 + (C93492 + C93491) * C139824 * C47132 +
           (C92947 * C270 - C93448 * C112 - C92947 * C571 + C92797 * C706 +
            C92948 * C1745 - C93449 * C1571 - C92948 * C2078 +
            C139899 * C2231) *
               C139824 * C47133) *
              C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C92947 * C266 - C93448 * C108 - C92947 * C567 + C92797 * C702 +
            C92948 * C1741 - C93449 * C1570 - C92948 * C2074 +
            C139899 * C2230) *
               C5813 +
           (C92947 * C984 - C93448 * C813 - C92947 * C1317 + C92797 * C1473 +
            C92948 * C3594 - C93449 * C3438 - C92948 * C3882 +
            C139899 * C4026) *
               C5814 +
           (C92947 * C3032 - C93448 * C2908 - C92947 * C3256 + C92797 * C3368 +
            C92948 * C7979 - C93449 * C7754 - C92948 * C8422 +
            C139899 * C8634) *
               C5815) *
              C139731 * C139809 * C139792 * C97 -
          ((C92948 * C7980 - C93449 * C7753 - C92948 * C8423 + C139899 * C8633 +
            C92947 * C3033 - C93448 * C2909 - C92947 * C3257 + C92797 * C3369) *
               C5815 +
           (C94427 + C94428) * C5814 + (C93488 + C93487) * C5813) *
              C139731 * C139809 * C139792 * C98 +
          (C93493 * C5813 + (C94426 + C94425) * C5814 +
           (C92947 * C3034 - C93448 * C2910 - C92947 * C3258 + C92797 * C3370 +
            C92948 * C7981 - C93449 * C7755 - C92948 * C8424 +
            C139899 * C8635) *
               C5815) *
              C139731 * C139809 * C139792 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eexx[127] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47136 * C114 - C47137 * C108 - C47136 * C115 + C47131 * C126 +
             C47138 * C116 - C47139 * C109 - C47138 * C117 + C47132 * C127 +
             C47140 * C118 - C47141 * C110 - C47140 * C119 + C47133 * C128) *
                C92797 +
            (C47136 * C1578 - C47137 * C1570 - C47136 * C1579 + C47131 * C1585 +
             C47138 * C1576 - C47139 * C1569 - C47138 * C1577 + C47132 * C1584 +
             C47140 * C1574 - C47141 * C1568 - C47140 * C1575 +
             C47133 * C1583) *
                C139899) *
               C139824 * C139809 * C806 -
           ((C51501 + C51502 + C51503) * C139899 +
            (C47980 + C47979 + C47978) * C92797) *
               C139824 * C139809 * C140000) *
              C808 +
          (((C47981 + C47982 + C47983) * C92797 +
            (C47136 * C3444 - C47137 * C3439 - C47136 * C3445 + C47131 * C3451 +
             C47138 * C3446 - C47139 * C3440 - C47138 * C3447 + C47132 * C3452 +
             C47140 * C3448 - C47141 * C3441 - C47140 * C3449 +
             C47133 * C3453) *
                C139899) *
               C139824 * C139809 * C140000 -
           ((C47140 * C1572 - C47141 * C1567 - C47140 * C1573 + C47133 * C1582 +
             C47138 * C1574 - C47139 * C1568 - C47138 * C1575 + C47132 * C1583 +
             C47136 * C1576 - C47137 * C1569 - C47136 * C1577 +
             C47131 * C1584) *
                C139899 +
            (C47140 * C120 - C47141 * C111 - C47140 * C121 + C47133 * C129 +
             C47138 * C118 - C47139 * C110 - C47138 * C119 + C47132 * C128 +
             C47136 * C116 - C47137 * C109 - C47136 * C117 + C47131 * C127) *
                C92797) *
               C139824 * C139809 * C806) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C54790 * C114 - C54791 * C108 - C54790 * C115 + C139731 * C126) *
                 C92797 +
             C61654 * C139899) *
                C5813 +
            (C101116 + C101117) * C5814 + (C101118 + C101119) * C5815) *
               C139809 * C806 -
           ((C57669 * C139899 + C55305 * C92797) * C5815 +
            (C101119 + C101118) * C5814 + (C101117 + C101116) * C5813) *
               C139809 * C140000) *
              C808 +
          (((C101120 + C101121) * C5813 + (C101122 + C101123) * C5814 +
            (C55308 * C92797 + (C54790 * C10398 - C54791 * C10395 -
                                C54790 * C10399 + C139731 * C10401) *
                                   C139899) *
                C5815) *
               C139809 * C140000 -
           ((C101123 + C101122) * C5815 + (C101121 + C101120) * C5814 +
            (C61656 * C139899 +
             (C54790 * C116 - C54791 * C109 - C54790 * C117 + C139731 * C127) *
                 C92797) *
                C5813) *
               C139809 * C806) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eexy[127] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C139824 * C183 - C182 * C108) * C47136 +
             (C139824 * C189 - C182 * C115) * C47131 + (C196 - C197) * C47138 +
             (C198 - C199) * C47132 + C212 * C47140 + C213 * C47133) *
                C92797 +
            ((C15795 - C15796) * C47136 + (C15797 - C15798) * C47131 +
             C15799 * C47138 + C15800 * C47132 + C29549 * C47140 +
             C29550 * C47133) *
                C139899) *
               C139809 * C806 +
           (((C182 * C813 - C139824 * C896) * C47136 +
             (C182 * C822 - C139824 * C901) * C47131 + (C907 - C908) * C47138 +
             (C909 - C910) * C47132 + (C911 - C912) * C47140 +
             (C913 - C914) * C47133) *
                C92797 +
            ((C18427 - C18428) * C47136 + (C18429 - C18430) * C47131 +
             (C14764 - C14765) * C47138 + (C14766 - C14767) * C47132 +
             (C30369 - C30370) * C47140 + (C30371 - C30372) * C47133) *
                C139899) *
               C139809 * C140000) *
              C808 +
          ((((C197 - C196) * C47136 + (C199 - C198) * C47131 +
             (C201 - C200) * C47138 + (C203 - C202) * C47132 +
             (C205 - C204) * C47140 + (C207 - C206) * C47133) *
                C92797 +
            (C15807 * C47136 + C15808 * C47131 + C31358 * C47138 +
             C31359 * C47132 + (C1672 - C1673) * C47140 +
             (C1674 - C1675) * C47133) *
                C139899) *
               C139809 * C806 +
           (((C908 - C907) * C47136 + (C910 - C909) * C47131 +
             (C912 - C911) * C47138 + (C914 - C913) * C47132 +
             (C916 - C915) * C47140 + (C918 - C917) * C47133) *
                C92797 +
            ((C14765 - C14764) * C47136 + (C14767 - C14766) * C47131 +
             (C30370 - C30369) * C47138 + (C30372 - C30371) * C47132 +
             (C139824 * C3523 - C182 * C3441) * C47140 +
             (C139824 * C3527 - C182 * C3449) * C47133) *
                C139899) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5813 * C183 - C5894 * C108 + C5814 * C896 - C5895 * C813 +
              C5815 * C2974 - C5896 * C2908) *
                 C54790 +
             (C5813 * C189 - C5894 * C115 + C5814 * C901 - C5895 * C822 +
              C5815 * C2978 - C5896 * C2913) *
                 C139731) *
                C92797 +
            ((C5813 * C1653 - C5894 * C1570 + C5814 * C3520 - C5895 * C3438 +
              C5815 * C7863 - C5896 * C7754) *
                 C54790 +
             (C5813 * C1658 - C5894 * C1579 + C5814 * C3524 - C5895 * C3443 +
              C5815 * C7866 - C5896 * C7759) *
                 C139731) *
                C139899) *
               C139809 * C806 +
           (((C5894 * C813 - C5813 * C896 + C5895 * C2908 - C5814 * C2974 +
              C5896 * C6627 - C5815 * C6792) *
                 C54790 +
             (C5894 * C822 - C5813 * C901 + C5895 * C2913 - C5814 * C2978 +
              C5896 * C6632 - C5815 * C6795) *
                 C139731) *
                C92797 +
            ((C5894 * C3438 - C5813 * C3520 + C5895 * C7754 - C5814 * C7863 +
              C5896 * C10394 - C5815 * C10528) *
                 C54790 +
             (C5894 * C3443 - C5813 * C3524 + C5895 * C7759 - C5814 * C7866 +
              C5896 * C10397 - C5815 * C10530) *
                 C139731) *
                C139899) *
               C139809 * C140000) *
              C808 +
          ((((C5899 - C5898 + C5901 - C5900 + C5903 - C5902) * C54790 +
             (C5905 - C5904 + C5907 - C5906 + C5909 - C5908) * C139731) *
                C92797 +
            ((C7870 - C7871 + C7872 - C7873 + C7874 - C7875) * C54790 +
             (C7876 - C7877 + C7878 - C7879 + C7880 - C7881) * C139731) *
                C139899) *
               C139809 * C806 +
           (((C6800 - C6799 + C6802 - C6801 + C6804 - C6803) * C54790 +
             (C6806 - C6805 + C6808 - C6807 + C6810 - C6809) * C139731) *
                C92797 +
            ((C5813 * C3521 - C5894 * C3439 + C5814 * C7864 - C5895 * C7753 +
              C5815 * C10529 - C5896 * C10395) *
                 C54790 +
             (C5813 * C3525 - C5894 * C3445 + C5814 * C7867 - C5895 * C7757 +
              C5815 * C10531 - C5896 * C10399) *
                 C139731) *
                C139899) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eexz[127] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92797 * C266 - C92947 * C108 + C139899 * C1741 - C92948 * C1570) *
                C47136 +
            (C92797 * C272 - C92947 * C115 + C139899 * C1746 - C92948 * C1579) *
                C47131 +
            (C92950 - C92951 + C92952 - C92953) * C47138 +
            (C92954 - C92955 + C92956 - C92957) * C47132 + C92978 * C47140 +
            C92979 * C47133) *
               C139824 * C139809 * C806 +
           ((C92947 * C813 - C92797 * C984 + C92948 * C3438 - C139899 * C3594) *
                C47136 +
            (C92947 * C822 - C92797 * C989 + C92948 * C3443 - C139899 * C3598) *
                C47131 +
            (C93789 - C93790 + C93791 - C93792) * C47138 +
            (C93793 - C93794 + C93795 - C93796) * C47132 +
            (C93797 - C93798 + C93799 - C93800) * C47140 +
            (C93801 - C93802 + C93803 - C93804) * C47133) *
               C139824 * C139809 * C140000) *
              C808 +
          (((C92951 - C92950 + C92953 - C92952) * C47136 +
            (C92955 - C92954 + C92957 - C92956) * C47131 +
            (C92959 - C92958 + C92961 - C92960) * C47138 +
            (C92963 - C92962 + C92965 - C92964) * C47132 +
            (C92966 - C92967 + C92968 - C92969) * C47140 +
            (C92970 - C92971 + C92972 - C92973) * C47133) *
               C139824 * C139809 * C806 +
           ((C93790 - C93789 + C93792 - C93791) * C47136 +
            (C93794 - C93793 + C93796 - C93795) * C47131 +
            (C93798 - C93797 + C93800 - C93799) * C47138 +
            (C93802 - C93801 + C93804 - C93803) * C47132 +
            (C92797 * C987 - C92947 * C810 + C139899 * C3597 - C92948 * C3441) *
                C47140 +
            (C92797 * C992 - C92947 * C816 + C139899 * C3601 - C92948 * C3449) *
                C47133) *
               C139824 * C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C92797 * C266 - C92947 * C108 + C139899 * C1741 -
              C92948 * C1570) *
                 C54790 +
             (C92797 * C272 - C92947 * C115 + C139899 * C1746 -
              C92948 * C1579) *
                 C139731) *
                C5813 +
            ((C101320 - C101321 + C101322 - C101323) * C54790 +
             (C101324 - C101325 + C101326 - C101327) * C139731) *
                C5814 +
            ((C101328 - C101329 + C101330 - C101331) * C54790 +
             (C101332 - C101333 + C101334 - C101335) * C139731) *
                C5815) *
               C139809 * C806 +
           (((C101321 - C101320 + C101323 - C101322) * C54790 +
             (C101325 - C101324 + C101327 - C101326) * C139731) *
                C5813 +
            ((C101329 - C101328 + C101331 - C101330) * C54790 +
             (C101333 - C101332 + C101335 - C101334) * C139731) *
                C5814 +
            ((C92947 * C6627 - C92797 * C6908 + C92948 * C10394 -
              C139899 * C10630) *
                 C54790 +
             (C92947 * C6632 - C92797 * C6911 + C92948 * C10397 -
              C139899 * C10632) *
                 C139731) *
                C5815) *
               C139809 * C140000) *
              C808 +
          ((((C92951 - C92950 + C92953 - C92952) * C54790 +
             (C92955 - C92954 + C92957 - C92956) * C139731) *
                C5813 +
            ((C93789 - C93790 + C93791 - C93792) * C54790 +
             (C93793 - C93794 + C93795 - C93796) * C139731) *
                C5814 +
            ((C101336 - C101337 + C101338 - C101339) * C54790 +
             (C101340 - C101341 + C101342 - C101343) * C139731) *
                C5815) *
               C139809 * C806 +
           (((C93790 - C93789 + C93792 - C93791) * C54790 +
             (C93794 - C93793 + C93796 - C93795) * C139731) *
                C5813 +
            ((C101337 - C101336 + C101339 - C101338) * C54790 +
             (C101341 - C101340 + C101343 - C101342) * C139731) *
                C5814 +
            ((C92797 * C6909 - C92947 * C6626 + C139899 * C10631 -
              C92948 * C10395) *
                 C54790 +
             (C92797 * C6912 - C92947 * C6630 + C139899 * C10633 -
              C92948 * C10399) *
                 C139731) *
                C5815) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[127] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47131 * C114 - C47136 * C108 + C47132 * C116 - C47138 * C109 +
              C47133 * C118 - C47140 * C110) *
                 C182 +
             (C47131 * C354 - C47136 * C348 + C47132 * C355 - C47138 * C349 +
              C47133 * C356 - C47140 * C350) *
                 C139824) *
                C92797 +
            ((C47131 * C1578 - C47136 * C1570 + C47132 * C1576 -
              C47138 * C1569 + C47133 * C1574 - C47140 * C1568) *
                 C182 +
             (C47131 * C1834 - C47136 * C1829 + C47132 * C1835 -
              C47138 * C1830 + C47133 * C1836 - C47140 * C1831) *
                 C139824) *
                C139899) *
               C139809 * C806 +
           (((C48295 - C48294 + C48297 - C48296 + C48299 - C48298) * C182 +
             (C48301 - C48300 + C48303 - C48302 + C48305 - C48304) * C139824) *
                C92797 +
            ((C51798 - C51799 + C51800 - C51801 + C51802 - C51803) * C182 +
             (C51804 - C51805 + C51806 - C51807 + C51808 - C51809) * C139824) *
                C139899) *
               C139809 * C140000) *
              C808 +
          ((((C47136 * C109 - C47131 * C116 + C47138 * C110 - C47132 * C118 +
              C47140 * C111 - C47133 * C120) *
                 C182 +
             (C47136 * C349 - C47131 * C355 + C47138 * C350 - C47132 * C356 +
              C47140 * C351 - C47133 * C357) *
                 C139824) *
                C92797 +
            ((C47136 * C1569 - C47131 * C1576 + C47138 * C1568 -
              C47132 * C1574 + C47140 * C1567 - C47133 * C1572) *
                 C182 +
             (C47136 * C1830 - C47131 * C1835 + C47138 * C1831 -
              C47132 * C1836 + C47140 * C1832 - C47133 * C1837) *
                 C139824) *
                C139899) *
               C139809 * C806 +
           (((C48307 - C48306 + C48309 - C48308 + C48311 - C48310) * C182 +
             (C48313 - C48312 + C48315 - C48314 + C48317 - C48316) * C139824) *
                C92797 +
            ((C47131 * C3444 - C47136 * C3439 + C47132 * C3446 -
              C47138 * C3440 + C47133 * C3448 - C47140 * C3441) *
                 C182 +
             (C47131 * C3673 - C47136 * C3669 + C47132 * C3674 -
              C47138 * C3670 + C47133 * C3675 - C47140 * C3671) *
                 C139824) *
                C139899) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C139731 * C114 - C54790 * C108) * C5894 +
             (C139731 * C354 - C54790 * C348) * C5813 +
             (C55513 - C55514) * C5895 + (C55515 - C55516) * C5814 +
             C57297 * C5896 + C57298 * C5815) *
                C92797 +
            ((C61976 - C61977) * C5894 + (C61978 - C61979) * C5813 +
             C64587 * C5895 + C64588 * C5814 + C88899 * C5896 +
             C88900 * C5815) *
                C139899) *
               C139809 * C806 +
           (((C55514 - C55513) * C5894 + (C55516 - C55515) * C5813 +
             (C55518 - C55517) * C5895 + (C55520 - C55519) * C5814 +
             (C55522 - C55521) * C5896 + (C55524 - C55523) * C5815) *
                C92797 +
            (C64591 * C5894 + C64592 * C5813 + C89717 * C5895 + C89718 * C5814 +
             (C57891 - C57892) * C5896 + (C57893 - C57894) * C5815) *
                C139899) *
               C139809 * C140000) *
              C808 +
          ((((C54790 * C109 - C139731 * C116) * C5894 +
             (C54790 * C349 - C139731 * C355) * C5813 +
             (C55525 - C55526) * C5895 + (C55527 - C55528) * C5814 +
             (C55529 - C55530) * C5896 + (C55531 - C55532) * C5815) *
                C92797 +
            ((C61984 - C61985) * C5894 + (C61986 - C61987) * C5813 +
             (C61001 - C61002) * C5895 + (C61003 - C61004) * C5814 +
             (C86284 - C86285) * C5896 + (C86286 - C86287) * C5815) *
                C139899) *
               C139809 * C806 +
           (((C55526 - C55525) * C5894 + (C55528 - C55527) * C5813 +
             (C55530 - C55529) * C5895 + (C55532 - C55531) * C5814 +
             (C55534 - C55533) * C5896 + (C55536 - C55535) * C5815) *
                C92797 +
            ((C61002 - C61001) * C5894 + (C61004 - C61003) * C5813 +
             (C86285 - C86284) * C5895 + (C86287 - C86286) * C5814 +
             (C139731 * C10398 - C54790 * C10395) * C5896 +
             (C139731 * C10743 - C54790 * C10741) * C5815) *
                C139899) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[127] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C182 * C183 - C410 * C108 - C182 * C348 + C139824 * C411) *
                 C47131 +
             C442 * C47132 + C443 * C47133) *
                C92797 +
            (C16192 * C47131 + C1931 * C47132 + C1930 * C47133) * C139899) *
               C139809 * C806 -
           ((C30689 * C47133 + C15096 * C47132 + C18761 * C47131) * C139899 +
            (C1173 * C47133 + C1174 * C47132 +
             (C182 * C896 - C410 * C813 - C182 * C1072 + C139824 * C1151) *
                 C47131) *
                C92797) *
               C139809 * C140000) *
              C808 +
          (((C1174 * C47131 + C1173 * C47132 + C1172 * C47133) * C92797 +
            (C15096 * C47131 + C30689 * C47132 +
             (C182 * C3523 - C410 * C3441 - C182 * C3671 + C139824 * C3745) *
                 C47133) *
                C139899) *
               C139809 * C140000 -
           ((C1929 * C47133 + C1930 * C47132 + C1931 * C47131) * C139899 +
            (C444 * C47133 + C443 * C47132 + C442 * C47131) * C92797) *
               C139809 * C806) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5894 * C183 - C6151 * C108 - C5894 * C348 + C5813 * C411 +
             C5895 * C896 - C6152 * C813 - C5895 * C1072 + C5814 * C1151 +
             C5896 * C2974 - C6153 * C2908 - C5896 * C3090 + C5815 * C3148) *
                C139731 * C92797 +
            (C5894 * C1653 - C6151 * C1570 - C5894 * C1829 + C5813 * C1908 +
             C5895 * C3520 - C6152 * C3438 - C5895 * C3668 + C5814 * C3742 +
             C5896 * C7863 - C6153 * C7754 - C5896 * C8091 + C5815 * C8196) *
                C139731 * C139899) *
               C139809 * C806 -
           ((C5896 * C10528 - C6153 * C10394 - C5896 * C10740 + C5815 * C10858 +
             C5895 * C7863 - C6152 * C7754 - C5895 * C8091 + C5814 * C8196 +
             C5894 * C3520 - C6151 * C3438 - C5894 * C3668 + C5813 * C3742) *
                C139731 * C139899 +
            (C5896 * C6792 - C6153 * C6627 - C5896 * C7032 + C5815 * C7169 +
             C5895 * C2974 - C6152 * C2908 - C5895 * C3090 + C5814 * C3148 +
             C5894 * C896 - C6151 * C813 - C5894 * C1072 + C5813 * C1151) *
                C139731 * C92797) *
               C139809 * C140000) *
              C808 +
          (((C7192 + C7191 + C7190) * C139731 * C92797 +
            (C5894 * C3521 - C6151 * C3439 - C5894 * C3669 + C5813 * C3743 +
             C5895 * C7864 - C6152 * C7753 - C5895 * C8092 + C5814 * C8195 +
             C5896 * C10529 - C6153 * C10395 - C5896 * C10741 +
             C5815 * C10859) *
                C139731 * C139899) *
               C139809 * C140000 -
           ((C8217 + C8218 + C8219) * C139731 * C139899 +
            (C6193 + C6192 + C6191) * C139731 * C92797) *
               C139809 * C806) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[127] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C92797 * C266 - C92947 * C108 + C139899 * C1741 -
              C92948 * C1570) *
                 C182 +
             (C92797 * C495 - C92947 * C348 + C139899 * C1997 -
              C92948 * C1829) *
                 C139824) *
                C47131 +
            ((C92950 - C92951 + C92952 - C92953) * C182 +
             (C93202 - C93203 + C93204 - C93205) * C139824) *
                C47132 +
            C93219 * C47133) *
               C139809 * C806 +
           (((C92947 * C813 - C92797 * C984 + C92948 * C3438 -
              C139899 * C3594) *
                 C182 +
             (C92947 * C1072 - C92797 * C1240 + C92948 * C3668 -
              C139899 * C3812) *
                 C139824) *
                C47131 +
            ((C93789 - C93790 + C93791 - C93792) * C182 +
             (C94099 - C94100 + C94101 - C94102) * C139824) *
                C47132 +
            ((C93797 - C93798 + C93799 - C93800) * C182 +
             (C94103 - C94104 + C94105 - C94106) * C139824) *
                C47133) *
               C139809 * C140000) *
              C808 +
          ((((C92951 - C92950 + C92953 - C92952) * C182 +
             (C93203 - C93202 + C93205 - C93204) * C139824) *
                C47131 +
            ((C92959 - C92958 + C92961 - C92960) * C182 +
             (C93208 - C93207 + C93210 - C93209) * C139824) *
                C47132 +
            ((C92966 - C92967 + C92968 - C92969) * C182 +
             (C93211 - C93212 + C93213 - C93214) * C139824) *
                C47133) *
               C139809 * C806 +
           (((C93790 - C93789 + C93792 - C93791) * C182 +
             (C94100 - C94099 + C94102 - C94101) * C139824) *
                C47131 +
            ((C93798 - C93797 + C93800 - C93799) * C182 +
             (C94104 - C94103 + C94106 - C94105) * C139824) *
                C47132 +
            ((C92797 * C987 - C92947 * C810 + C139899 * C3597 -
              C92948 * C3441) *
                 C182 +
             (C92797 * C1243 - C92947 * C1075 + C139899 * C3815 -
              C92948 * C3671) *
                 C139824) *
                C47133) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92797 * C266 - C92947 * C108 + C139899 * C1741 - C92948 * C1570) *
                C5894 +
            (C92797 * C495 - C92947 * C348 + C139899 * C1997 - C92948 * C1829) *
                C5813 +
            (C101320 - C101321 + C101322 - C101323) * C5895 +
            (C101638 - C101639 + C101640 - C101641) * C5814 +
            (C101328 - C101329 + C101330 - C101331) * C5896 +
            (C101642 - C101643 + C101644 - C101645) * C5815) *
               C139731 * C139809 * C806 +
           ((C101321 - C101320 + C101323 - C101322) * C5894 +
            (C101639 - C101638 + C101641 - C101640) * C5813 +
            (C101329 - C101328 + C101331 - C101330) * C5895 +
            (C101643 - C101642 + C101645 - C101644) * C5814 +
            (C92947 * C6627 - C92797 * C6908 + C92948 * C10394 -
             C139899 * C10630) *
                C5896 +
            (C92947 * C7032 - C92797 * C7290 + C92948 * C10740 -
             C139899 * C10958) *
                C5815) *
               C139731 * C139809 * C140000) *
              C808 +
          (((C92951 - C92950 + C92953 - C92952) * C5894 +
            (C93203 - C93202 + C93205 - C93204) * C5813 +
            (C93789 - C93790 + C93791 - C93792) * C5895 +
            (C94099 - C94100 + C94101 - C94102) * C5814 +
            (C101336 - C101337 + C101338 - C101339) * C5896 +
            (C101646 - C101647 + C101648 - C101649) * C5815) *
               C139731 * C139809 * C806 +
           ((C93790 - C93789 + C93792 - C93791) * C5894 +
            (C94100 - C94099 + C94102 - C94101) * C5813 +
            (C101337 - C101336 + C101339 - C101338) * C5895 +
            (C101647 - C101646 + C101649 - C101648) * C5814 +
            (C92797 * C6909 - C92947 * C6626 + C139899 * C10631 -
             C92948 * C10395) *
                C5896 +
            (C92797 * C7291 - C92947 * C7033 + C139899 * C10959 -
             C92948 * C10741) *
                C5815) *
               C139731 * C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eezx[127] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47131 * C114 - C47136 * C108 + C47132 * C116 - C47138 * C109 +
             C47133 * C118 - C47140 * C110) *
                C92947 +
            (C47131 * C573 - C47136 * C567 + C47132 * C574 - C47138 * C568 +
             C47133 * C575 - C47140 * C569) *
                C92797 +
            (C47131 * C1578 - C47136 * C1570 + C47132 * C1576 - C47138 * C1569 +
             C47133 * C1574 - C47140 * C1568) *
                C92948 +
            (C47131 * C2079 - C47136 * C2074 + C47132 * C2080 - C47138 * C2075 +
             C47133 * C2081 - C47140 * C2076) *
                C139899) *
               C139824 * C139809 * C806 +
           ((C48295 - C48294 + C48297 - C48296 + C48299 - C48298) * C92947 +
            (C48641 - C48640 + C48643 - C48642 + C48645 - C48644) * C92797 +
            (C51798 - C51799 + C51800 - C51801 + C51802 - C51803) * C92948 +
            (C52104 - C52105 + C52106 - C52107 + C52108 - C52109) * C139899) *
               C139824 * C139809 * C140000) *
              C808 +
          (((C47136 * C109 - C47131 * C116 + C47138 * C110 - C47132 * C118 +
             C47140 * C111 - C47133 * C120) *
                C92947 +
            (C47136 * C568 - C47131 * C574 + C47138 * C569 - C47132 * C575 +
             C47140 * C570 - C47133 * C576) *
                C92797 +
            (C47136 * C1569 - C47131 * C1576 + C47138 * C1568 - C47132 * C1574 +
             C47140 * C1567 - C47133 * C1572) *
                C92948 +
            (C47136 * C2075 - C47131 * C2080 + C47138 * C2076 - C47132 * C2081 +
             C47140 * C2077 - C47133 * C2082) *
                C139899) *
               C139824 * C139809 * C806 +
           ((C48307 - C48306 + C48309 - C48308 + C48311 - C48310) * C92947 +
            (C48647 - C48646 + C48649 - C48648 + C48651 - C48650) * C92797 +
            (C47131 * C3444 - C47136 * C3439 + C47132 * C3446 - C47138 * C3440 +
             C47133 * C3448 - C47140 * C3441) *
                C92948 +
            (C47131 * C3887 - C47136 * C3883 + C47132 * C3888 - C47138 * C3884 +
             C47133 * C3889 - C47140 * C3885) *
                C139899) *
               C139824 * C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C139731 * C114 - C54790 * C108) * C92947 +
             (C139731 * C573 - C54790 * C567) * C92797 +
             (C61976 - C61977) * C92948 + (C62328 - C62329) * C139899) *
                C5813 +
            ((C55513 - C55514) * C92947 + (C55735 - C55736) * C92797 +
             C64587 * C92948 + C64931 * C139899) *
                C5814 +
            (C57297 * C92947 + C57463 * C92797 + C88899 * C92948 +
             C89133 * C139899) *
                C5815) *
               C139809 * C806 +
           (((C55514 - C55513) * C92947 + (C55736 - C55735) * C92797 +
             C64591 * C92948 + C64933 * C139899) *
                C5813 +
            ((C55518 - C55517) * C92947 + (C55738 - C55737) * C92797 +
             C89717 * C92948 + C90038 * C139899) *
                C5814 +
            ((C55522 - C55521) * C92947 + (C55740 - C55739) * C92797 +
             (C57891 - C57892) * C92948 + (C58103 - C58104) * C139899) *
                C5815) *
               C139809 * C140000) *
              C808 +
          ((((C54790 * C109 - C139731 * C116) * C92947 +
             (C54790 * C568 - C139731 * C574) * C92797 +
             (C61984 - C61985) * C92948 + (C62332 - C62333) * C139899) *
                C5813 +
            ((C55525 - C55526) * C92947 + (C55741 - C55742) * C92797 +
             (C61001 - C61002) * C92948 + (C61311 - C61312) * C139899) *
                C5814 +
            ((C55529 - C55530) * C92947 + (C55743 - C55744) * C92797 +
             (C86284 - C86285) * C92948 + (C86582 - C86583) * C139899) *
                C5815) *
               C139809 * C806 +
           (((C55526 - C55525) * C92947 + (C55742 - C55741) * C92797 +
             (C61002 - C61001) * C92948 + (C61312 - C61311) * C139899) *
                C5813 +
            ((C55530 - C55529) * C92947 + (C55744 - C55743) * C92797 +
             (C86285 - C86284) * C92948 + (C86583 - C86582) * C139899) *
                C5814 +
            ((C55534 - C55533) * C92947 + (C55746 - C55745) * C92797 +
             (C139731 * C10398 - C54790 * C10395) * C92948 +
             (C139731 * C11065 - C54790 * C11063) * C139899) *
                C5815) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eezy[127] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C139824 * C183 - C182 * C108) * C92947 +
             (C139824 * C629 - C182 * C567) * C92797 +
             (C15795 - C15796) * C92948 + (C16525 - C16526) * C139899) *
                C47131 +
            ((C196 - C197) * C92947 + (C636 - C637) * C92797 + C15799 * C92948 +
             C16529 * C139899) *
                C47132 +
            C93374 * C47133) *
               C139809 * C806 +
           (((C182 * C813 - C139824 * C896) * C92947 +
             (C182 * C1317 - C139824 * C1393) * C92797 +
             (C18427 - C18428) * C92948 + (C19071 - C19072) * C139899) *
                C47131 +
            ((C907 - C908) * C92947 + (C1399 - C1400) * C92797 +
             (C14764 - C14765) * C92948 + (C15401 - C15402) * C139899) *
                C47132 +
            ((C911 - C912) * C92947 + (C1401 - C1402) * C92797 +
             (C30369 - C30370) * C92948 + (C30992 - C30993) * C139899) *
                C47133) *
               C139809 * C140000) *
              C808 +
          ((((C197 - C196) * C92947 + (C637 - C636) * C92797 + C15807 * C92948 +
             C16531 * C139899) *
                C47131 +
            ((C201 - C200) * C92947 + (C640 - C639) * C92797 + C31358 * C92948 +
             C32014 * C139899) *
                C47132 +
            ((C205 - C204) * C92947 + (C643 - C642) * C92797 +
             (C1672 - C1673) * C92948 + (C2160 - C2161) * C139899) *
                C47133) *
               C139809 * C806 +
           (((C908 - C907) * C92947 + (C1400 - C1399) * C92797 +
             (C14765 - C14764) * C92948 + (C15402 - C15401) * C139899) *
                C47131 +
            ((C912 - C911) * C92947 + (C1402 - C1401) * C92797 +
             (C30370 - C30369) * C92948 + (C30993 - C30992) * C139899) *
                C47132 +
            ((C916 - C915) * C92947 + (C1404 - C1403) * C92797 +
             (C139824 * C3523 - C182 * C3441) * C92948 +
             (C139824 * C3959 - C182 * C3885) * C139899) *
                C47133) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5813 * C183 - C5894 * C108 + C5814 * C896 - C5895 * C813 +
             C5815 * C2974 - C5896 * C2908) *
                C92947 +
            (C5813 * C629 - C5894 * C567 + C5814 * C1393 - C5895 * C1317 +
             C5815 * C3314 - C5896 * C3256) *
                C92797 +
            (C5813 * C1653 - C5894 * C1570 + C5814 * C3520 - C5895 * C3438 +
             C5815 * C7863 - C5896 * C7754) *
                C92948 +
            (C5813 * C2150 - C5894 * C2074 + C5814 * C3956 - C5895 * C3882 +
             C5815 * C8526 - C5896 * C8422) *
                C139899) *
               C139731 * C139809 * C806 +
           ((C5894 * C813 - C5813 * C896 + C5895 * C2908 - C5814 * C2974 +
             C5896 * C6627 - C5815 * C6792) *
                C92947 +
            (C5894 * C1317 - C5813 * C1393 + C5895 * C3256 - C5814 * C3314 +
             C5896 * C7401 - C5815 * C7521) *
                C92797 +
            (C5894 * C3438 - C5813 * C3520 + C5895 * C7754 - C5814 * C7863 +
             C5896 * C10394 - C5815 * C10528) *
                C92948 +
            (C5894 * C3882 - C5813 * C3956 + C5895 * C8422 - C5814 * C8526 +
             C5896 * C11062 - C5815 * C11172) *
                C139899) *
               C139731 * C139809 * C140000) *
              C808 +
          (((C5899 - C5898 + C5901 - C5900 + C5903 - C5902) * C92947 +
            (C6424 - C6423 + C6426 - C6425 + C6428 - C6427) * C92797 +
            (C7870 - C7871 + C7872 - C7873 + C7874 - C7875) * C92948 +
            (C8530 - C8531 + C8532 - C8533 + C8534 - C8535) * C139899) *
               C139731 * C139809 * C806 +
           ((C6800 - C6799 + C6802 - C6801 + C6804 - C6803) * C92947 +
            (C7526 - C7525 + C7528 - C7527 + C7530 - C7529) * C92797 +
            (C5813 * C3521 - C5894 * C3439 + C5814 * C7864 - C5895 * C7753 +
             C5815 * C10529 - C5896 * C10395) *
                C92948 +
            (C5813 * C3957 - C5894 * C3883 + C5814 * C8527 - C5895 * C8423 +
             C5815 * C11173 - C5896 * C11063) *
                C139899) *
               C139731 * C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eezz[127] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92947 * C266 - C93448 * C108 - C92947 * C567 + C92797 * C702 +
             C92948 * C1741 - C93449 * C1570 - C92948 * C2074 +
             C139899 * C2230) *
                C139824 * C47131 +
            (C93487 + C93488) * C139824 * C47132 + C93494 * C47133) *
               C139809 * C806 -
           ((C94425 + C94426) * C139824 * C47133 +
            (C94427 + C94428) * C139824 * C47132 +
            (C92948 * C3594 - C93449 * C3438 - C92948 * C3882 +
             C139899 * C4026 + C92947 * C984 - C93448 * C813 - C92947 * C1317 +
             C92797 * C1473) *
                C139824 * C47131) *
               C139809 * C140000) *
              C808 +
          (((C94428 + C94427) * C139824 * C47131 +
            (C94426 + C94425) * C139824 * C47132 +
            (C92947 * C987 - C93448 * C810 - C92947 * C1320 + C92797 * C1470 +
             C92948 * C3597 - C93449 * C3441 - C92948 * C3885 +
             C139899 * C4029) *
                C139824 * C47133) *
               C139809 * C140000 -
           ((C93491 + C93492) * C139824 * C47133 +
            (C93490 + C93489) * C139824 * C47132 +
            (C93488 + C93487) * C139824 * C47131) *
               C139809 * C806) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92947 * C266 - C93448 * C108 - C92947 * C567 + C92797 * C702 +
             C92948 * C1741 - C93449 * C1570 - C92948 * C2074 +
             C139899 * C2230) *
                C5813 +
            (C101980 + C101981) * C5814 + (C101982 + C101983) * C5815) *
               C139731 * C139809 * C806 -
           ((C92948 * C10630 - C93449 * C10394 - C92948 * C11062 +
             C139899 * C11272 + C92947 * C6908 - C93448 * C6627 -
             C92947 * C7401 + C92797 * C7629) *
                C5815 +
            (C101983 + C101982) * C5814 + (C101981 + C101980) * C5813) *
               C139731 * C139809 * C140000) *
              C808 +
          (((C94428 + C94427) * C5813 + (C101984 + C101985) * C5814 +
            (C92947 * C6909 - C93448 * C6626 - C92947 * C7402 + C92797 * C7628 +
             C92948 * C10631 - C93449 * C10395 - C92948 * C11063 +
             C139899 * C11273) *
                C5815) *
               C139731 * C139809 * C140000 -
           ((C101985 + C101984) * C5815 + (C94427 + C94428) * C5814 +
            (C93488 + C93487) * C5813) *
               C139731 * C139809 * C806) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eexx[128] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47136 * C114 - C47137 * C108 - C47136 * C115 + C47131 * C126 +
             C47138 * C116 - C47139 * C109 - C47138 * C117 + C47132 * C127 +
             C47140 * C118 - C47141 * C110 - C47140 * C119 + C47133 * C128) *
                C92797 +
            (C94563 + C94564 + C94565) * C139899) *
               C139824 * C1565 -
           ((C47140 * C5281 - C47141 * C5275 - C47140 * C5282 + C47133 * C5287 +
             C47138 * C5279 - C47139 * C5274 - C47138 * C5280 + C47132 * C5286 +
             C47136 * C5277 - C47137 * C5273 - C47136 * C5278 +
             C47131 * C5285) *
                C139899 +
            (C94565 + C94564 + C94563) * C92797) *
               C139824 * C140002) *
              C139792 * C808 +
          (((C94566 + C94567 + C94568) * C92797 +
            (C47136 * C5279 - C47137 * C5274 - C47136 * C5280 + C47131 * C5286 +
             C47138 * C5281 - C47139 * C5275 - C47138 * C5282 + C47132 * C5287 +
             C47140 * C5283 - C47141 * C5276 - C47140 * C5284 +
             C47133 * C5288) *
                C139899) *
               C139824 * C140002 -
           ((C94568 + C94567 + C94566) * C139899 +
            (C47140 * C120 - C47141 * C111 - C47140 * C121 + C47133 * C129 +
             C47138 * C118 - C47139 * C110 - C47138 * C119 + C47132 * C128 +
             C47136 * C116 - C47137 * C109 - C47136 * C117 + C47131 * C127) *
                C92797) *
               C139824 * C1565) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C54790 * C114 - C54791 * C108 - C54790 * C115 + C139731 * C126) *
                 C92797 +
             C61654 * C139899) *
                C5813 +
            (C101116 + C101117) * C5814 + (C101118 + C101119) * C5815) *
               C1565 -
           ((C63508 * C139899 + C57670 * C92797) * C5815 +
            (C60685 * C139899 + C57671 * C92797) * C5814 +
            (C61655 * C139899 + C61654 * C92797) * C5813) *
               C140002) *
              C139792 * C808 +
          (((C61656 * C92797 + C61657 * C139899) * C5813 +
            (C60686 * C92797 + C60687 * C139899) * C5814 +
            (C85988 * C92797 + (C54790 * C13136 - C54791 * C13129 -
                                C54790 * C13137 + C139731 * C13141) *
                                   C139899) *
                C5815) *
               C140002 -
           ((C101123 + C101122) * C5815 + (C101121 + C101120) * C5814 +
            (C61656 * C139899 +
             (C54790 * C116 - C54791 * C109 - C54790 * C117 + C139731 * C127) *
                 C92797) *
                C5813) *
               C1565) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eexy[128] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C139824 * C183 - C182 * C108) * C47136 +
             (C139824 * C189 - C182 * C115) * C47131 + (C196 - C197) * C47138 +
             (C198 - C199) * C47132 + C212 * C47140 + C213 * C47133) *
                C92797 +
            ((C15795 - C15796) * C47136 + (C15797 - C15798) * C47131 +
             C15799 * C47138 + C15800 * C47132 + C29549 * C47140 +
             C29550 * C47133) *
                C139899) *
               C1565 +
           (((C15796 - C15795) * C47136 + (C15798 - C15797) * C47131 +
             C15807 * C47138 + C15808 * C47132 + C31358 * C47140 +
             C31359 * C47133) *
                C92797 +
            ((C15802 - C15801) * C47136 + (C15804 - C15803) * C47131 +
             C15809 * C47138 + C15810 * C47132 + (C13938 - C13939) * C47140 +
             (C13940 - C13941) * C47133) *
                C139899) *
               C140002) *
              C139792 * C808 +
          ((((C197 - C196) * C47136 + (C199 - C198) * C47131 +
             (C201 - C200) * C47138 + (C203 - C202) * C47132 +
             (C205 - C204) * C47140 + (C207 - C206) * C47133) *
                C92797 +
            (C15807 * C47136 + C15808 * C47131 + C31358 * C47138 +
             C31359 * C47132 + (C1672 - C1673) * C47140 +
             (C1674 - C1675) * C47133) *
                C139899) *
               C1565 +
           ((C15799 * C47136 + C15800 * C47131 + C29549 * C47138 +
             C29550 * C47132 + (C1673 - C1672) * C47140 +
             (C1675 - C1674) * C47133) *
                C92797 +
            (C15805 * C47136 + C15806 * C47131 + (C13939 - C13938) * C47138 +
             (C13941 - C13940) * C47132 +
             (C139824 * C5342 - C182 * C5276) * C47140 +
             (C139824 * C5346 - C182 * C5284) * C47133) *
                C139899) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5813 * C183 - C5894 * C108 + C5814 * C896 - C5895 * C813 +
              C5815 * C2974 - C5896 * C2908) *
                 C54790 +
             (C5813 * C189 - C5894 * C115 + C5814 * C901 - C5895 * C822 +
              C5815 * C2978 - C5896 * C2913) *
                 C139731) *
                C92797 +
            ((C102182 - C102183 + C102184 - C102185 + C102186 - C102187) *
                 C54790 +
             (C102188 - C102189 + C102190 - C102191 + C102192 - C102193) *
                 C139731) *
                C139899) *
               C1565 +
           (((C102183 - C102182 + C102185 - C102184 + C102187 - C102186) *
                 C54790 +
             (C102189 - C102188 + C102191 - C102190 + C102193 - C102192) *
                 C139731) *
                C92797 +
            ((C5894 * C5273 - C5813 * C5339 + C5895 * C13126 - C5814 * C13216 +
              C5896 * C13128 - C5815 * C13217) *
                 C54790 +
             (C5894 * C5278 - C5813 * C5343 + C5895 * C13131 - C5814 * C13220 +
              C5896 * C13135 - C5815 * C13221) *
                 C139731) *
                C139899) *
               C140002) *
              C139792 * C808 +
          ((((C5899 - C5898 + C5901 - C5900 + C5903 - C5902) * C54790 +
             (C5905 - C5904 + C5907 - C5906 + C5909 - C5908) * C139731) *
                C92797 +
            ((C7870 - C7871 + C7872 - C7873 + C7874 - C7875) * C54790 +
             (C7876 - C7877 + C7878 - C7879 + C7880 - C7881) * C139731) *
                C139899) *
               C1565 +
           (((C7871 - C7870 + C7873 - C7872 + C7875 - C7874) * C54790 +
             (C7877 - C7876 + C7879 - C7878 + C7881 - C7880) * C139731) *
                C92797 +
            ((C5813 * C5340 - C5894 * C5274 + C5814 * C13218 - C5895 * C13127 +
              C5815 * C13219 - C5896 * C13129) *
                 C54790 +
             (C5813 * C5344 - C5894 * C5280 + C5814 * C13222 - C5895 * C13133 +
              C5815 * C13223 - C5896 * C13137) *
                 C139731) *
                C139899) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eexz[128] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92797 * C266 - C92947 * C108 + C139899 * C1741 - C92948 * C1570) *
                C47136 +
            (C92797 * C272 - C92947 * C115 + C139899 * C1746 - C92948 * C1579) *
                C47131 +
            (C92950 - C92951 + C92952 - C92953) * C47138 +
            (C92954 - C92955 + C92956 - C92957) * C47132 + C92978 * C47140 +
            C92979 * C47133) *
               C139824 * C1565 +
           ((C92947 * C1570 - C92797 * C1741 + C92948 * C5273 -
             C139899 * C5397) *
                C47136 +
            (C92947 * C1579 - C92797 * C1746 + C92948 * C5278 -
             C139899 * C5401) *
                C47131 +
            (C94765 - C94766 + C94767 - C94768) * C47138 +
            (C94769 - C94770 + C94771 - C94772) * C47132 +
            (C94773 - C94774 + C94775 - C94776) * C47140 +
            (C94777 - C94778 + C94779 - C94780) * C47133) *
               C139824 * C140002) *
              C139792 * C808 +
          (((C92951 - C92950 + C92953 - C92952) * C47136 +
            (C92955 - C92954 + C92957 - C92956) * C47131 +
            (C92959 - C92958 + C92961 - C92960) * C47138 +
            (C92963 - C92962 + C92965 - C92964) * C47132 +
            (C92966 - C92967 + C92968 - C92969) * C47140 +
            (C92970 - C92971 + C92972 - C92973) * C47133) *
               C139824 * C1565 +
           ((C94766 - C94765 + C94768 - C94767) * C47136 +
            (C94770 - C94769 + C94772 - C94771) * C47131 +
            (C94774 - C94773 + C94776 - C94775) * C47138 +
            (C94778 - C94777 + C94780 - C94779) * C47132 +
            (C92797 * C1744 - C92947 * C1567 + C139899 * C5400 -
             C92948 * C5276) *
                C47140 +
            (C92797 * C1749 - C92947 * C1573 + C139899 * C5404 -
             C92948 * C5284) *
                C47133) *
               C139824 * C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C92797 * C266 - C92947 * C108 + C139899 * C1741 -
              C92948 * C1570) *
                 C54790 +
             (C92797 * C272 - C92947 * C115 + C139899 * C1746 -
              C92948 * C1579) *
                 C139731) *
                C5813 +
            ((C101320 - C101321 + C101322 - C101323) * C54790 +
             (C101324 - C101325 + C101326 - C101327) * C139731) *
                C5814 +
            ((C101328 - C101329 + C101330 - C101331) * C54790 +
             (C101332 - C101333 + C101334 - C101335) * C139731) *
                C5815) *
               C1565 +
           (((C92947 * C1570 - C92797 * C1741 + C92948 * C5273 -
              C139899 * C5397) *
                 C54790 +
             (C92947 * C1579 - C92797 * C1746 + C92948 * C5278 -
              C139899 * C5401) *
                 C139731) *
                C5813 +
            ((C92947 * C3438 - C92797 * C3594 + C92948 * C13126 -
              C139899 * C13298) *
                 C54790 +
             (C92947 * C3443 - C92797 * C3598 + C92948 * C13131 -
              C139899 * C13302) *
                 C139731) *
                C5814 +
            ((C92947 * C7754 - C92797 * C7979 + C92948 * C13128 -
              C139899 * C13300) *
                 C54790 +
             (C92947 * C7759 - C92797 * C7982 + C92948 * C13135 -
              C139899 * C13304) *
                 C139731) *
                C5815) *
               C140002) *
              C139792 * C808 +
          ((((C92951 - C92950 + C92953 - C92952) * C54790 +
             (C92955 - C92954 + C92957 - C92956) * C139731) *
                C5813 +
            ((C93789 - C93790 + C93791 - C93792) * C54790 +
             (C93793 - C93794 + C93795 - C93796) * C139731) *
                C5814 +
            ((C101336 - C101337 + C101338 - C101339) * C54790 +
             (C101340 - C101341 + C101342 - C101343) * C139731) *
                C5815) *
               C1565 +
           (((C94766 - C94765 + C94768 - C94767) * C54790 +
             (C94770 - C94769 + C94772 - C94771) * C139731) *
                C5813 +
            ((C92797 * C3595 - C92947 * C3439 + C139899 * C13299 -
              C92948 * C13127) *
                 C54790 +
             (C92797 * C3599 - C92947 * C3445 + C139899 * C13303 -
              C92948 * C13133) *
                 C139731) *
                C5814 +
            ((C92797 * C7980 - C92947 * C7753 + C139899 * C13301 -
              C92948 * C13129) *
                 C54790 +
             (C92797 * C7983 - C92947 * C7757 + C139899 * C13305 -
              C92948 * C13137) *
                 C139731) *
                C5815) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[128] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47131 * C114 - C47136 * C108 + C47132 * C116 - C47138 * C109 +
              C47133 * C118 - C47140 * C110) *
                 C182 +
             (C47131 * C354 - C47136 * C348 + C47132 * C355 - C47138 * C349 +
              C47133 * C356 - C47140 * C350) *
                 C139824) *
                C92797 +
            ((C94879 - C94880 + C94881 - C94882 + C94883 - C94884) * C182 +
             (C94885 - C94886 + C94887 - C94888 + C94889 - C94890) * C139824) *
                C139899) *
               C1565 +
           (((C94880 - C94879 + C94882 - C94881 + C94884 - C94883) * C182 +
             (C94886 - C94885 + C94888 - C94887 + C94890 - C94889) * C139824) *
                C92797 +
            ((C47136 * C5273 - C47131 * C5277 + C47138 * C5274 -
              C47132 * C5279 + C47140 * C5275 - C47133 * C5281) *
                 C182 +
             (C47136 * C5455 - C47131 * C5459 + C47138 * C5456 -
              C47132 * C5460 + C47140 * C5457 - C47133 * C5461) *
                 C139824) *
                C139899) *
               C140002) *
              C139792 * C808 +
          ((((C47136 * C109 - C47131 * C116 + C47138 * C110 - C47132 * C118 +
              C47140 * C111 - C47133 * C120) *
                 C182 +
             (C47136 * C349 - C47131 * C355 + C47138 * C350 - C47132 * C356 +
              C47140 * C351 - C47133 * C357) *
                 C139824) *
                C92797 +
            ((C94891 - C94892 + C94893 - C94894 + C94895 - C94896) * C182 +
             (C94897 - C94898 + C94899 - C94900 + C94901 - C94902) * C139824) *
                C139899) *
               C1565 +
           (((C94892 - C94891 + C94894 - C94893 + C94896 - C94895) * C182 +
             (C94898 - C94897 + C94900 - C94899 + C94902 - C94901) * C139824) *
                C92797 +
            ((C47131 * C5279 - C47136 * C5274 + C47132 * C5281 -
              C47138 * C5275 + C47133 * C5283 - C47140 * C5276) *
                 C182 +
             (C47131 * C5460 - C47136 * C5456 + C47132 * C5461 -
              C47138 * C5457 + C47133 * C5462 - C47140 * C5458) *
                 C139824) *
                C139899) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C139731 * C114 - C54790 * C108) * C5894 +
             (C139731 * C354 - C54790 * C348) * C5813 +
             (C55513 - C55514) * C5895 + (C55515 - C55516) * C5814 +
             C57297 * C5896 + C57298 * C5815) *
                C92797 +
            ((C61976 - C61977) * C5894 + (C61978 - C61979) * C5813 +
             C64587 * C5895 + C64588 * C5814 + C88899 * C5896 +
             C88900 * C5815) *
                C139899) *
               C1565 +
           (((C61977 - C61976) * C5894 + (C61979 - C61978) * C5813 +
             C64591 * C5895 + C64592 * C5814 + C89717 * C5896 +
             C89718 * C5815) *
                C92797 +
            ((C61981 - C61980) * C5894 + (C61983 - C61982) * C5813 +
             C64593 * C5895 + C64594 * C5814 + (C63744 - C63745) * C5896 +
             (C63746 - C63747) * C5815) *
                C139899) *
               C140002) *
              C139792 * C808 +
          ((((C54790 * C109 - C139731 * C116) * C5894 +
             (C54790 * C349 - C139731 * C355) * C5813 +
             (C55525 - C55526) * C5895 + (C55527 - C55528) * C5814 +
             (C55529 - C55530) * C5896 + (C55531 - C55532) * C5815) *
                C92797 +
            ((C61984 - C61985) * C5894 + (C61986 - C61987) * C5813 +
             (C61001 - C61002) * C5895 + (C61003 - C61004) * C5814 +
             (C86284 - C86285) * C5896 + (C86286 - C86287) * C5815) *
                C139899) *
               C1565 +
           (((C61985 - C61984) * C5894 + (C61987 - C61986) * C5813 +
             (C61002 - C61001) * C5895 + (C61004 - C61003) * C5814 +
             (C86285 - C86284) * C5896 + (C86287 - C86286) * C5815) *
                C92797 +
            ((C61989 - C61988) * C5894 + (C61991 - C61990) * C5813 +
             (C61006 - C61005) * C5895 + (C61008 - C61007) * C5814 +
             (C139731 * C13136 - C54790 * C13129) * C5896 +
             (C139731 * C13387 - C54790 * C13383) * C5815) *
                C139899) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[128] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C182 * C183 - C410 * C108 - C182 * C348 + C139824 * C411) *
                 C47131 +
             C442 * C47132 + C443 * C47133) *
                C92797 +
            (C95001 + C95002 + C95003) * C139899) *
               C1565 -
           ((C14204 * C47133 + C14203 * C47132 + C16193 * C47131) * C139899 +
            (C95003 + C95002 + C95001) * C92797) *
               C140002) *
              C139792 * C808 +
          (((C95004 + C95005 + C95006) * C92797 +
            (C14203 * C47131 + C14204 * C47132 +
             (C182 * C5342 - C410 * C5276 - C182 * C5458 + C139824 * C5516) *
                 C47133) *
                C139899) *
               C140002 -
           ((C95006 + C95005 + C95004) * C139899 +
            (C444 * C47133 + C443 * C47132 + C442 * C47131) * C92797) *
               C1565) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5894 * C183 - C6151 * C108 - C5894 * C348 + C5813 * C411 +
             C5895 * C896 - C6152 * C813 - C5895 * C1072 + C5814 * C1151 +
             C5896 * C2974 - C6153 * C2908 - C5896 * C3090 + C5815 * C3148) *
                C139731 * C92797 +
            (C102506 + C102507 + C102508) * C139731 * C139899) *
               C1565 -
           ((C5896 * C13217 - C6153 * C13128 - C5896 * C13382 + C5815 * C13463 +
             C5895 * C13216 - C6152 * C13126 - C5895 * C13380 + C5814 * C13462 +
             C5894 * C5339 - C6151 * C5273 - C5894 * C5455 + C5813 * C5513) *
                C139731 * C139899 +
            (C102508 + C102507 + C102506) * C139731 * C92797) *
               C140002) *
              C139792 * C808 +
          (((C8219 + C8218 + C8217) * C139731 * C92797 +
            (C5894 * C5340 - C6151 * C5274 - C5894 * C5456 + C5813 * C5514 +
             C5895 * C13218 - C6152 * C13127 - C5895 * C13381 + C5814 * C13464 +
             C5896 * C13219 - C6153 * C13129 - C5896 * C13383 +
             C5815 * C13465) *
                C139731 * C139899) *
               C140002 -
           ((C8217 + C8218 + C8219) * C139731 * C139899 +
            (C6193 + C6192 + C6191) * C139731 * C92797) *
               C1565) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[128] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C92797 * C266 - C92947 * C108 + C139899 * C1741 -
              C92948 * C1570) *
                 C182 +
             (C92797 * C495 - C92947 * C348 + C139899 * C1997 -
              C92948 * C1829) *
                 C139824) *
                C47131 +
            ((C92950 - C92951 + C92952 - C92953) * C182 +
             (C93202 - C93203 + C93204 - C93205) * C139824) *
                C47132 +
            C93219 * C47133) *
               C1565 +
           (((C92947 * C1570 - C92797 * C1741 + C92948 * C5273 -
              C139899 * C5397) *
                 C182 +
             (C92947 * C1829 - C92797 * C1997 + C92948 * C5455 -
              C139899 * C5567) *
                 C139824) *
                C47131 +
            ((C94765 - C94766 + C94767 - C94768) * C182 +
             (C95105 - C95106 + C95107 - C95108) * C139824) *
                C47132 +
            ((C94773 - C94774 + C94775 - C94776) * C182 +
             (C95109 - C95110 + C95111 - C95112) * C139824) *
                C47133) *
               C140002) *
              C139792 * C808 +
          ((((C92951 - C92950 + C92953 - C92952) * C182 +
             (C93203 - C93202 + C93205 - C93204) * C139824) *
                C47131 +
            ((C92959 - C92958 + C92961 - C92960) * C182 +
             (C93208 - C93207 + C93210 - C93209) * C139824) *
                C47132 +
            ((C92966 - C92967 + C92968 - C92969) * C182 +
             (C93211 - C93212 + C93213 - C93214) * C139824) *
                C47133) *
               C1565 +
           (((C94766 - C94765 + C94768 - C94767) * C182 +
             (C95106 - C95105 + C95108 - C95107) * C139824) *
                C47131 +
            ((C94774 - C94773 + C94776 - C94775) * C182 +
             (C95110 - C95109 + C95112 - C95111) * C139824) *
                C47132 +
            ((C92797 * C1744 - C92947 * C1567 + C139899 * C5400 -
              C92948 * C5276) *
                 C182 +
             (C92797 * C2000 - C92947 * C1832 + C139899 * C5570 -
              C92948 * C5458) *
                 C139824) *
                C47133) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92797 * C266 - C92947 * C108 + C139899 * C1741 - C92948 * C1570) *
                C5894 +
            (C92797 * C495 - C92947 * C348 + C139899 * C1997 - C92948 * C1829) *
                C5813 +
            (C101320 - C101321 + C101322 - C101323) * C5895 +
            (C101638 - C101639 + C101640 - C101641) * C5814 +
            (C101328 - C101329 + C101330 - C101331) * C5896 +
            (C101642 - C101643 + C101644 - C101645) * C5815) *
               C139731 * C1565 +
           ((C92947 * C1570 - C92797 * C1741 + C92948 * C5273 -
             C139899 * C5397) *
                C5894 +
            (C92947 * C1829 - C92797 * C1997 + C92948 * C5455 -
             C139899 * C5567) *
                C5813 +
            (C92947 * C3438 - C92797 * C3594 + C92948 * C13126 -
             C139899 * C13298) *
                C5895 +
            (C92947 * C3668 - C92797 * C3812 + C92948 * C13380 -
             C139899 * C13540) *
                C5814 +
            (C92947 * C7754 - C92797 * C7979 + C92948 * C13128 -
             C139899 * C13300) *
                C5896 +
            (C92947 * C8091 - C92797 * C8317 + C92948 * C13382 -
             C139899 * C13541) *
                C5815) *
               C139731 * C140002) *
              C139792 * C808 +
          (((C92951 - C92950 + C92953 - C92952) * C5894 +
            (C93203 - C93202 + C93205 - C93204) * C5813 +
            (C93789 - C93790 + C93791 - C93792) * C5895 +
            (C94099 - C94100 + C94101 - C94102) * C5814 +
            (C101336 - C101337 + C101338 - C101339) * C5896 +
            (C101646 - C101647 + C101648 - C101649) * C5815) *
               C139731 * C1565 +
           ((C94766 - C94765 + C94768 - C94767) * C5894 +
            (C95106 - C95105 + C95108 - C95107) * C5813 +
            (C92797 * C3595 - C92947 * C3439 + C139899 * C13299 -
             C92948 * C13127) *
                C5895 +
            (C92797 * C3813 - C92947 * C3669 + C139899 * C13542 -
             C92948 * C13381) *
                C5814 +
            (C92797 * C7980 - C92947 * C7753 + C139899 * C13301 -
             C92948 * C13129) *
                C5896 +
            (C92797 * C8318 - C92947 * C8092 + C139899 * C13543 -
             C92948 * C13383) *
                C5815) *
               C139731 * C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eezx[128] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47131 * C114 - C47136 * C108 + C47132 * C116 - C47138 * C109 +
             C47133 * C118 - C47140 * C110) *
                C92947 +
            (C47131 * C573 - C47136 * C567 + C47132 * C574 - C47138 * C568 +
             C47133 * C575 - C47140 * C569) *
                C92797 +
            (C94879 - C94880 + C94881 - C94882 + C94883 - C94884) * C92948 +
            (C95211 - C95212 + C95213 - C95214 + C95215 - C95216) * C139899) *
               C139824 * C1565 +
           ((C94880 - C94879 + C94882 - C94881 + C94884 - C94883) * C92947 +
            (C95212 - C95211 + C95214 - C95213 + C95216 - C95215) * C92797 +
            (C47136 * C5273 - C47131 * C5277 + C47138 * C5274 - C47132 * C5279 +
             C47140 * C5275 - C47133 * C5281) *
                C92948 +
            (C47136 * C5621 - C47131 * C5625 + C47138 * C5622 - C47132 * C5626 +
             C47140 * C5623 - C47133 * C5627) *
                C139899) *
               C139824 * C140002) *
              C139792 * C808 +
          (((C47136 * C109 - C47131 * C116 + C47138 * C110 - C47132 * C118 +
             C47140 * C111 - C47133 * C120) *
                C92947 +
            (C47136 * C568 - C47131 * C574 + C47138 * C569 - C47132 * C575 +
             C47140 * C570 - C47133 * C576) *
                C92797 +
            (C94891 - C94892 + C94893 - C94894 + C94895 - C94896) * C92948 +
            (C95217 - C95218 + C95219 - C95220 + C95221 - C95222) * C139899) *
               C139824 * C1565 +
           ((C94892 - C94891 + C94894 - C94893 + C94896 - C94895) * C92947 +
            (C95218 - C95217 + C95220 - C95219 + C95222 - C95221) * C92797 +
            (C47131 * C5279 - C47136 * C5274 + C47132 * C5281 - C47138 * C5275 +
             C47133 * C5283 - C47140 * C5276) *
                C92948 +
            (C47131 * C5626 - C47136 * C5622 + C47132 * C5627 - C47138 * C5623 +
             C47133 * C5628 - C47140 * C5624) *
                C139899) *
               C139824 * C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C139731 * C114 - C54790 * C108) * C92947 +
             (C139731 * C573 - C54790 * C567) * C92797 +
             (C61976 - C61977) * C92948 + (C62328 - C62329) * C139899) *
                C5813 +
            ((C55513 - C55514) * C92947 + (C55735 - C55736) * C92797 +
             C64587 * C92948 + C64931 * C139899) *
                C5814 +
            (C57297 * C92947 + C57463 * C92797 + C88899 * C92948 +
             C89133 * C139899) *
                C5815) *
               C1565 +
           (((C61977 - C61976) * C92947 + (C62329 - C62328) * C92797 +
             (C61981 - C61980) * C92948 + (C62331 - C62330) * C139899) *
                C5813 +
            (C64591 * C92947 + C64933 * C92797 + C64593 * C92948 +
             C64934 * C139899) *
                C5814 +
            (C89717 * C92947 + C90038 * C92797 + (C63744 - C63745) * C92948 +
             (C63976 - C63977) * C139899) *
                C5815) *
               C140002) *
              C139792 * C808 +
          ((((C54790 * C109 - C139731 * C116) * C92947 +
             (C54790 * C568 - C139731 * C574) * C92797 +
             (C61984 - C61985) * C92948 + (C62332 - C62333) * C139899) *
                C5813 +
            ((C55525 - C55526) * C92947 + (C55741 - C55742) * C92797 +
             (C61001 - C61002) * C92948 + (C61311 - C61312) * C139899) *
                C5814 +
            ((C55529 - C55530) * C92947 + (C55743 - C55744) * C92797 +
             (C86284 - C86285) * C92948 + (C86582 - C86583) * C139899) *
                C5815) *
               C1565 +
           (((C61985 - C61984) * C92947 + (C62333 - C62332) * C92797 +
             (C61989 - C61988) * C92948 + (C62335 - C62334) * C139899) *
                C5813 +
            ((C61002 - C61001) * C92947 + (C61312 - C61311) * C92797 +
             (C61006 - C61005) * C92948 + (C61314 - C61313) * C139899) *
                C5814 +
            ((C86285 - C86284) * C92947 + (C86583 - C86582) * C92797 +
             (C139731 * C13136 - C54790 * C13129) * C92948 +
             (C139731 * C13625 - C54790 * C13621) * C139899) *
                C5815) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eezy[128] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C139824 * C183 - C182 * C108) * C92947 +
             (C139824 * C629 - C182 * C567) * C92797 +
             (C15795 - C15796) * C92948 + (C16525 - C16526) * C139899) *
                C47131 +
            ((C196 - C197) * C92947 + (C636 - C637) * C92797 + C15799 * C92948 +
             C16529 * C139899) *
                C47132 +
            C93374 * C47133) *
               C1565 +
           (((C15796 - C15795) * C92947 + (C16526 - C16525) * C92797 +
             (C15802 - C15801) * C92948 + (C16528 - C16527) * C139899) *
                C47131 +
            (C15807 * C92947 + C16531 * C92797 + C15809 * C92948 +
             C16532 * C139899) *
                C47132 +
            (C31358 * C92947 + C32014 * C92797 + (C13938 - C13939) * C92948 +
             (C14441 - C14442) * C139899) *
                C47133) *
               C140002) *
              C139792 * C808 +
          ((((C197 - C196) * C92947 + (C637 - C636) * C92797 + C15807 * C92948 +
             C16531 * C139899) *
                C47131 +
            ((C201 - C200) * C92947 + (C640 - C639) * C92797 + C31358 * C92948 +
             C32014 * C139899) *
                C47132 +
            ((C205 - C204) * C92947 + (C643 - C642) * C92797 +
             (C1672 - C1673) * C92948 + (C2160 - C2161) * C139899) *
                C47133) *
               C1565 +
           ((C15799 * C92947 + C16529 * C92797 + C15805 * C92948 +
             C16530 * C139899) *
                C47131 +
            (C29549 * C92947 + C30048 * C92797 + (C13939 - C13938) * C92948 +
             (C14442 - C14441) * C139899) *
                C47132 +
            ((C1673 - C1672) * C92947 + (C2161 - C2160) * C92797 +
             (C139824 * C5342 - C182 * C5276) * C92948 +
             (C139824 * C5682 - C182 * C5624) * C139899) *
                C47133) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5813 * C183 - C5894 * C108 + C5814 * C896 - C5895 * C813 +
             C5815 * C2974 - C5896 * C2908) *
                C92947 +
            (C5813 * C629 - C5894 * C567 + C5814 * C1393 - C5895 * C1317 +
             C5815 * C3314 - C5896 * C3256) *
                C92797 +
            (C102182 - C102183 + C102184 - C102185 + C102186 - C102187) *
                C92948 +
            (C102803 - C102804 + C102805 - C102806 + C102807 - C102808) *
                C139899) *
               C139731 * C1565 +
           ((C102183 - C102182 + C102185 - C102184 + C102187 - C102186) *
                C92947 +
            (C102804 - C102803 + C102806 - C102805 + C102808 - C102807) *
                C92797 +
            (C5894 * C5273 - C5813 * C5339 + C5895 * C13126 - C5814 * C13216 +
             C5896 * C13128 - C5815 * C13217) *
                C92948 +
            (C5894 * C5621 - C5813 * C5679 + C5895 * C13618 - C5814 * C13700 +
             C5896 * C13620 - C5815 * C13701) *
                C139899) *
               C139731 * C140002) *
              C139792 * C808 +
          (((C5899 - C5898 + C5901 - C5900 + C5903 - C5902) * C92947 +
            (C6424 - C6423 + C6426 - C6425 + C6428 - C6427) * C92797 +
            (C7870 - C7871 + C7872 - C7873 + C7874 - C7875) * C92948 +
            (C8530 - C8531 + C8532 - C8533 + C8534 - C8535) * C139899) *
               C139731 * C1565 +
           ((C7871 - C7870 + C7873 - C7872 + C7875 - C7874) * C92947 +
            (C8531 - C8530 + C8533 - C8532 + C8535 - C8534) * C92797 +
            (C5813 * C5340 - C5894 * C5274 + C5814 * C13218 - C5895 * C13127 +
             C5815 * C13219 - C5896 * C13129) *
                C92948 +
            (C5813 * C5680 - C5894 * C5622 + C5814 * C13702 - C5895 * C13619 +
             C5815 * C13703 - C5896 * C13621) *
                C139899) *
               C139731 * C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eezz[128] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92947 * C266 - C93448 * C108 - C92947 * C567 + C92797 * C702 +
             C92948 * C1741 - C93449 * C1570 - C92948 * C2074 +
             C139899 * C2230) *
                C139824 * C47131 +
            (C93487 + C93488) * C139824 * C47132 + C93494 * C47133) *
               C1565 -
           ((C95443 + C95444) * C139824 * C47133 +
            (C95445 + C95446) * C139824 * C47132 +
            (C92948 * C5397 - C93449 * C5273 - C92948 * C5621 +
             C139899 * C5733 + C92947 * C1741 - C93448 * C1570 -
             C92947 * C2074 + C92797 * C2230) *
                C139824 * C47131) *
               C140002) *
              C139792 * C808 +
          (((C95446 + C95445) * C139824 * C47131 +
            (C95444 + C95443) * C139824 * C47132 +
            (C92947 * C1744 - C93448 * C1567 - C92947 * C2077 + C92797 * C2227 +
             C92948 * C5400 - C93449 * C5276 - C92948 * C5624 +
             C139899 * C5736) *
                C139824 * C47133) *
               C140002 -
           ((C93491 + C93492) * C139824 * C47133 +
            (C93490 + C93489) * C139824 * C47132 +
            (C93488 + C93487) * C139824 * C47131) *
               C1565) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92947 * C266 - C93448 * C108 - C92947 * C567 + C92797 * C702 +
             C92948 * C1741 - C93449 * C1570 - C92948 * C2074 +
             C139899 * C2230) *
                C5813 +
            (C101980 + C101981) * C5814 + (C101982 + C101983) * C5815) *
               C139731 * C1565 -
           ((C92948 * C13300 - C93449 * C13128 - C92948 * C13620 +
             C139899 * C13779 + C92947 * C7979 - C93448 * C7754 -
             C92947 * C8422 + C92797 * C8634) *
                C5815 +
            (C92948 * C13298 - C93449 * C13126 - C92948 * C13618 +
             C139899 * C13778 + C92947 * C3594 - C93448 * C3438 -
             C92947 * C3882 + C92797 * C4026) *
                C5814 +
            (C92948 * C5397 - C93449 * C5273 - C92948 * C5621 +
             C139899 * C5733 + C92947 * C1741 - C93448 * C1570 -
             C92947 * C2074 + C92797 * C2230) *
                C5813) *
               C139731 * C140002) *
              C139792 * C808 +
          (((C95446 + C95445) * C5813 +
            (C92947 * C3595 - C93448 * C3439 - C92947 * C3883 + C92797 * C4027 +
             C92948 * C13299 - C93449 * C13127 - C92948 * C13619 +
             C139899 * C13780) *
                C5814 +
            (C92947 * C7980 - C93448 * C7753 - C92947 * C8423 + C92797 * C8633 +
             C92948 * C13301 - C93449 * C13129 - C92948 * C13621 +
             C139899 * C13781) *
                C5815) *
               C139731 * C140002 -
           ((C101985 + C101984) * C5815 + (C94427 + C94428) * C5814 +
            (C93488 + C93487) * C5813) *
               C139731 * C1565) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eexx[129] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47136 * C114 - C47137 * C108 - C47136 * C115 + C47131 * C126 +
             C47138 * C116 - C47139 * C109 - C47138 * C117 + C47132 * C127 +
             C47140 * C118 - C47141 * C110 - C47140 * C119 + C47133 * C128) *
                C92797 +
            (C94563 + C94564 + C94565) * C139899) *
               C139824 * C139809 * C2322 -
           ((C51501 + C51502 + C51503) * C139899 +
            (C47980 + C47979 + C47978) * C92797) *
               C139824 * C139809 * C140000) *
              C2324 +
          (((C47981 + C47982 + C47983) * C92797 +
            (C47136 * C3444 - C47137 * C3439 - C47136 * C3445 + C47131 * C3451 +
             C47138 * C3446 - C47139 * C3440 - C47138 * C3447 + C47132 * C3452 +
             C47140 * C3448 - C47141 * C3441 - C47140 * C3449 +
             C47133 * C3453) *
                C139899) *
               C139824 * C139809 * C140000 -
           ((C94568 + C94567 + C94566) * C139899 +
            (C47140 * C120 - C47141 * C111 - C47140 * C121 + C47133 * C129 +
             C47138 * C118 - C47139 * C110 - C47138 * C119 + C47132 * C128 +
             C47136 * C116 - C47137 * C109 - C47136 * C117 + C47131 * C127) *
                C92797) *
               C139824 * C139809 * C2322) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C54790 * C114 - C54791 * C108 - C54790 * C115 + C139731 * C126) *
                 C92797 +
             C61654 * C139899) *
                C5813 +
            (C101116 + C101117) * C5814 + (C101118 + C101119) * C5815) *
               C139809 * C2322 -
           ((C57669 * C139899 + C55305 * C92797) * C5815 +
            (C101119 + C101118) * C5814 + (C101117 + C101116) * C5813) *
               C139809 * C140000) *
              C2324 +
          (((C101120 + C101121) * C5813 + (C101122 + C101123) * C5814 +
            (C55308 * C92797 + (C54790 * C10398 - C54791 * C10395 -
                                C54790 * C10399 + C139731 * C10401) *
                                   C139899) *
                C5815) *
               C139809 * C140000 -
           ((C101123 + C101122) * C5815 + (C101121 + C101120) * C5814 +
            (C61656 * C139899 +
             (C54790 * C116 - C54791 * C109 - C54790 * C117 + C139731 * C127) *
                 C92797) *
                C5813) *
               C139809 * C2322) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eexy[129] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C139824 * C183 - C182 * C108) * C47136 +
             (C139824 * C189 - C182 * C115) * C47131 + (C196 - C197) * C47138 +
             (C198 - C199) * C47132 + C212 * C47140 + C213 * C47133) *
                C92797 +
            ((C15795 - C15796) * C47136 + (C15797 - C15798) * C47131 +
             C15799 * C47138 + C15800 * C47132 + C29549 * C47140 +
             C29550 * C47133) *
                C139899) *
               C139809 * C2322 +
           (((C182 * C813 - C139824 * C896) * C47136 +
             (C182 * C822 - C139824 * C901) * C47131 + (C907 - C908) * C47138 +
             (C909 - C910) * C47132 + (C911 - C912) * C47140 +
             (C913 - C914) * C47133) *
                C92797 +
            ((C18427 - C18428) * C47136 + (C18429 - C18430) * C47131 +
             (C14764 - C14765) * C47138 + (C14766 - C14767) * C47132 +
             (C30369 - C30370) * C47140 + (C30371 - C30372) * C47133) *
                C139899) *
               C139809 * C140000) *
              C2324 +
          ((((C197 - C196) * C47136 + (C199 - C198) * C47131 +
             (C201 - C200) * C47138 + (C203 - C202) * C47132 +
             (C205 - C204) * C47140 + (C207 - C206) * C47133) *
                C92797 +
            (C15807 * C47136 + C15808 * C47131 + C31358 * C47138 +
             C31359 * C47132 + (C1672 - C1673) * C47140 +
             (C1674 - C1675) * C47133) *
                C139899) *
               C139809 * C2322 +
           (((C908 - C907) * C47136 + (C910 - C909) * C47131 +
             (C912 - C911) * C47138 + (C914 - C913) * C47132 +
             (C916 - C915) * C47140 + (C918 - C917) * C47133) *
                C92797 +
            ((C14765 - C14764) * C47136 + (C14767 - C14766) * C47131 +
             (C30370 - C30369) * C47138 + (C30372 - C30371) * C47132 +
             (C139824 * C3523 - C182 * C3441) * C47140 +
             (C139824 * C3527 - C182 * C3449) * C47133) *
                C139899) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5813 * C183 - C5894 * C108 + C5814 * C896 - C5895 * C813 +
              C5815 * C2974 - C5896 * C2908) *
                 C54790 +
             (C5813 * C189 - C5894 * C115 + C5814 * C901 - C5895 * C822 +
              C5815 * C2978 - C5896 * C2913) *
                 C139731) *
                C92797 +
            ((C102182 - C102183 + C102184 - C102185 + C102186 - C102187) *
                 C54790 +
             (C102188 - C102189 + C102190 - C102191 + C102192 - C102193) *
                 C139731) *
                C139899) *
               C139809 * C2322 +
           (((C5894 * C813 - C5813 * C896 + C5895 * C2908 - C5814 * C2974 +
              C5896 * C6627 - C5815 * C6792) *
                 C54790 +
             (C5894 * C822 - C5813 * C901 + C5895 * C2913 - C5814 * C2978 +
              C5896 * C6632 - C5815 * C6795) *
                 C139731) *
                C92797 +
            ((C5894 * C3438 - C5813 * C3520 + C5895 * C7754 - C5814 * C7863 +
              C5896 * C10394 - C5815 * C10528) *
                 C54790 +
             (C5894 * C3443 - C5813 * C3524 + C5895 * C7759 - C5814 * C7866 +
              C5896 * C10397 - C5815 * C10530) *
                 C139731) *
                C139899) *
               C139809 * C140000) *
              C2324 +
          ((((C5899 - C5898 + C5901 - C5900 + C5903 - C5902) * C54790 +
             (C5905 - C5904 + C5907 - C5906 + C5909 - C5908) * C139731) *
                C92797 +
            ((C7870 - C7871 + C7872 - C7873 + C7874 - C7875) * C54790 +
             (C7876 - C7877 + C7878 - C7879 + C7880 - C7881) * C139731) *
                C139899) *
               C139809 * C2322 +
           (((C6800 - C6799 + C6802 - C6801 + C6804 - C6803) * C54790 +
             (C6806 - C6805 + C6808 - C6807 + C6810 - C6809) * C139731) *
                C92797 +
            ((C5813 * C3521 - C5894 * C3439 + C5814 * C7864 - C5895 * C7753 +
              C5815 * C10529 - C5896 * C10395) *
                 C54790 +
             (C5813 * C3525 - C5894 * C3445 + C5814 * C7867 - C5895 * C7757 +
              C5815 * C10531 - C5896 * C10399) *
                 C139731) *
                C139899) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eexz[129] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92797 * C266 - C92947 * C108 + C139899 * C1741 - C92948 * C1570) *
                C47136 +
            (C92797 * C272 - C92947 * C115 + C139899 * C1746 - C92948 * C1579) *
                C47131 +
            (C92950 - C92951 + C92952 - C92953) * C47138 +
            (C92954 - C92955 + C92956 - C92957) * C47132 + C92978 * C47140 +
            C92979 * C47133) *
               C139824 * C139809 * C2322 +
           ((C92947 * C813 - C92797 * C984 + C92948 * C3438 - C139899 * C3594) *
                C47136 +
            (C92947 * C822 - C92797 * C989 + C92948 * C3443 - C139899 * C3598) *
                C47131 +
            (C93789 - C93790 + C93791 - C93792) * C47138 +
            (C93793 - C93794 + C93795 - C93796) * C47132 +
            (C93797 - C93798 + C93799 - C93800) * C47140 +
            (C93801 - C93802 + C93803 - C93804) * C47133) *
               C139824 * C139809 * C140000) *
              C2324 +
          (((C92951 - C92950 + C92953 - C92952) * C47136 +
            (C92955 - C92954 + C92957 - C92956) * C47131 +
            (C92959 - C92958 + C92961 - C92960) * C47138 +
            (C92963 - C92962 + C92965 - C92964) * C47132 +
            (C92966 - C92967 + C92968 - C92969) * C47140 +
            (C92970 - C92971 + C92972 - C92973) * C47133) *
               C139824 * C139809 * C2322 +
           ((C93790 - C93789 + C93792 - C93791) * C47136 +
            (C93794 - C93793 + C93796 - C93795) * C47131 +
            (C93798 - C93797 + C93800 - C93799) * C47138 +
            (C93802 - C93801 + C93804 - C93803) * C47132 +
            (C92797 * C987 - C92947 * C810 + C139899 * C3597 - C92948 * C3441) *
                C47140 +
            (C92797 * C992 - C92947 * C816 + C139899 * C3601 - C92948 * C3449) *
                C47133) *
               C139824 * C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C92797 * C266 - C92947 * C108 + C139899 * C1741 -
              C92948 * C1570) *
                 C54790 +
             (C92797 * C272 - C92947 * C115 + C139899 * C1746 -
              C92948 * C1579) *
                 C139731) *
                C5813 +
            ((C101320 - C101321 + C101322 - C101323) * C54790 +
             (C101324 - C101325 + C101326 - C101327) * C139731) *
                C5814 +
            ((C101328 - C101329 + C101330 - C101331) * C54790 +
             (C101332 - C101333 + C101334 - C101335) * C139731) *
                C5815) *
               C139809 * C2322 +
           (((C101321 - C101320 + C101323 - C101322) * C54790 +
             (C101325 - C101324 + C101327 - C101326) * C139731) *
                C5813 +
            ((C101329 - C101328 + C101331 - C101330) * C54790 +
             (C101333 - C101332 + C101335 - C101334) * C139731) *
                C5814 +
            ((C92947 * C6627 - C92797 * C6908 + C92948 * C10394 -
              C139899 * C10630) *
                 C54790 +
             (C92947 * C6632 - C92797 * C6911 + C92948 * C10397 -
              C139899 * C10632) *
                 C139731) *
                C5815) *
               C139809 * C140000) *
              C2324 +
          ((((C92951 - C92950 + C92953 - C92952) * C54790 +
             (C92955 - C92954 + C92957 - C92956) * C139731) *
                C5813 +
            ((C93789 - C93790 + C93791 - C93792) * C54790 +
             (C93793 - C93794 + C93795 - C93796) * C139731) *
                C5814 +
            ((C101336 - C101337 + C101338 - C101339) * C54790 +
             (C101340 - C101341 + C101342 - C101343) * C139731) *
                C5815) *
               C139809 * C2322 +
           (((C93790 - C93789 + C93792 - C93791) * C54790 +
             (C93794 - C93793 + C93796 - C93795) * C139731) *
                C5813 +
            ((C101337 - C101336 + C101339 - C101338) * C54790 +
             (C101341 - C101340 + C101343 - C101342) * C139731) *
                C5814 +
            ((C92797 * C6909 - C92947 * C6626 + C139899 * C10631 -
              C92948 * C10395) *
                 C54790 +
             (C92797 * C6912 - C92947 * C6630 + C139899 * C10633 -
              C92948 * C10399) *
                 C139731) *
                C5815) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[129] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47131 * C114 - C47136 * C108 + C47132 * C116 - C47138 * C109 +
              C47133 * C118 - C47140 * C110) *
                 C182 +
             (C47131 * C354 - C47136 * C348 + C47132 * C355 - C47138 * C349 +
              C47133 * C356 - C47140 * C350) *
                 C139824) *
                C92797 +
            ((C94879 - C94880 + C94881 - C94882 + C94883 - C94884) * C182 +
             (C94885 - C94886 + C94887 - C94888 + C94889 - C94890) * C139824) *
                C139899) *
               C139809 * C2322 +
           (((C48295 - C48294 + C48297 - C48296 + C48299 - C48298) * C182 +
             (C48301 - C48300 + C48303 - C48302 + C48305 - C48304) * C139824) *
                C92797 +
            ((C51798 - C51799 + C51800 - C51801 + C51802 - C51803) * C182 +
             (C51804 - C51805 + C51806 - C51807 + C51808 - C51809) * C139824) *
                C139899) *
               C139809 * C140000) *
              C2324 +
          ((((C47136 * C109 - C47131 * C116 + C47138 * C110 - C47132 * C118 +
              C47140 * C111 - C47133 * C120) *
                 C182 +
             (C47136 * C349 - C47131 * C355 + C47138 * C350 - C47132 * C356 +
              C47140 * C351 - C47133 * C357) *
                 C139824) *
                C92797 +
            ((C94891 - C94892 + C94893 - C94894 + C94895 - C94896) * C182 +
             (C94897 - C94898 + C94899 - C94900 + C94901 - C94902) * C139824) *
                C139899) *
               C139809 * C2322 +
           (((C48307 - C48306 + C48309 - C48308 + C48311 - C48310) * C182 +
             (C48313 - C48312 + C48315 - C48314 + C48317 - C48316) * C139824) *
                C92797 +
            ((C47131 * C3444 - C47136 * C3439 + C47132 * C3446 -
              C47138 * C3440 + C47133 * C3448 - C47140 * C3441) *
                 C182 +
             (C47131 * C3673 - C47136 * C3669 + C47132 * C3674 -
              C47138 * C3670 + C47133 * C3675 - C47140 * C3671) *
                 C139824) *
                C139899) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C139731 * C114 - C54790 * C108) * C5894 +
             (C139731 * C354 - C54790 * C348) * C5813 +
             (C55513 - C55514) * C5895 + (C55515 - C55516) * C5814 +
             C57297 * C5896 + C57298 * C5815) *
                C92797 +
            ((C61976 - C61977) * C5894 + (C61978 - C61979) * C5813 +
             C64587 * C5895 + C64588 * C5814 + C88899 * C5896 +
             C88900 * C5815) *
                C139899) *
               C139809 * C2322 +
           (((C55514 - C55513) * C5894 + (C55516 - C55515) * C5813 +
             (C55518 - C55517) * C5895 + (C55520 - C55519) * C5814 +
             (C55522 - C55521) * C5896 + (C55524 - C55523) * C5815) *
                C92797 +
            (C64591 * C5894 + C64592 * C5813 + C89717 * C5895 + C89718 * C5814 +
             (C57891 - C57892) * C5896 + (C57893 - C57894) * C5815) *
                C139899) *
               C139809 * C140000) *
              C2324 +
          ((((C54790 * C109 - C139731 * C116) * C5894 +
             (C54790 * C349 - C139731 * C355) * C5813 +
             (C55525 - C55526) * C5895 + (C55527 - C55528) * C5814 +
             (C55529 - C55530) * C5896 + (C55531 - C55532) * C5815) *
                C92797 +
            ((C61984 - C61985) * C5894 + (C61986 - C61987) * C5813 +
             (C61001 - C61002) * C5895 + (C61003 - C61004) * C5814 +
             (C86284 - C86285) * C5896 + (C86286 - C86287) * C5815) *
                C139899) *
               C139809 * C2322 +
           (((C55526 - C55525) * C5894 + (C55528 - C55527) * C5813 +
             (C55530 - C55529) * C5895 + (C55532 - C55531) * C5814 +
             (C55534 - C55533) * C5896 + (C55536 - C55535) * C5815) *
                C92797 +
            ((C61002 - C61001) * C5894 + (C61004 - C61003) * C5813 +
             (C86285 - C86284) * C5895 + (C86287 - C86286) * C5814 +
             (C139731 * C10398 - C54790 * C10395) * C5896 +
             (C139731 * C10743 - C54790 * C10741) * C5815) *
                C139899) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[129] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C182 * C183 - C410 * C108 - C182 * C348 + C139824 * C411) *
                 C47131 +
             C442 * C47132 + C443 * C47133) *
                C92797 +
            (C95001 + C95002 + C95003) * C139899) *
               C139809 * C2322 -
           ((C30689 * C47133 + C15096 * C47132 + C18761 * C47131) * C139899 +
            (C1173 * C47133 + C1174 * C47132 +
             (C182 * C896 - C410 * C813 - C182 * C1072 + C139824 * C1151) *
                 C47131) *
                C92797) *
               C139809 * C140000) *
              C2324 +
          (((C1174 * C47131 + C1173 * C47132 + C1172 * C47133) * C92797 +
            (C15096 * C47131 + C30689 * C47132 +
             (C182 * C3523 - C410 * C3441 - C182 * C3671 + C139824 * C3745) *
                 C47133) *
                C139899) *
               C139809 * C140000 -
           ((C95006 + C95005 + C95004) * C139899 +
            (C444 * C47133 + C443 * C47132 + C442 * C47131) * C92797) *
               C139809 * C2322) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5894 * C183 - C6151 * C108 - C5894 * C348 + C5813 * C411 +
             C5895 * C896 - C6152 * C813 - C5895 * C1072 + C5814 * C1151 +
             C5896 * C2974 - C6153 * C2908 - C5896 * C3090 + C5815 * C3148) *
                C139731 * C92797 +
            (C102506 + C102507 + C102508) * C139731 * C139899) *
               C139809 * C2322 -
           ((C5896 * C10528 - C6153 * C10394 - C5896 * C10740 + C5815 * C10858 +
             C5895 * C7863 - C6152 * C7754 - C5895 * C8091 + C5814 * C8196 +
             C5894 * C3520 - C6151 * C3438 - C5894 * C3668 + C5813 * C3742) *
                C139731 * C139899 +
            (C5896 * C6792 - C6153 * C6627 - C5896 * C7032 + C5815 * C7169 +
             C5895 * C2974 - C6152 * C2908 - C5895 * C3090 + C5814 * C3148 +
             C5894 * C896 - C6151 * C813 - C5894 * C1072 + C5813 * C1151) *
                C139731 * C92797) *
               C139809 * C140000) *
              C2324 +
          (((C7192 + C7191 + C7190) * C139731 * C92797 +
            (C5894 * C3521 - C6151 * C3439 - C5894 * C3669 + C5813 * C3743 +
             C5895 * C7864 - C6152 * C7753 - C5895 * C8092 + C5814 * C8195 +
             C5896 * C10529 - C6153 * C10395 - C5896 * C10741 +
             C5815 * C10859) *
                C139731 * C139899) *
               C139809 * C140000 -
           ((C8217 + C8218 + C8219) * C139731 * C139899 +
            (C6193 + C6192 + C6191) * C139731 * C92797) *
               C139809 * C2322) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[129] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C92797 * C266 - C92947 * C108 + C139899 * C1741 -
              C92948 * C1570) *
                 C182 +
             (C92797 * C495 - C92947 * C348 + C139899 * C1997 -
              C92948 * C1829) *
                 C139824) *
                C47131 +
            ((C92950 - C92951 + C92952 - C92953) * C182 +
             (C93202 - C93203 + C93204 - C93205) * C139824) *
                C47132 +
            C93219 * C47133) *
               C139809 * C2322 +
           (((C92947 * C813 - C92797 * C984 + C92948 * C3438 -
              C139899 * C3594) *
                 C182 +
             (C92947 * C1072 - C92797 * C1240 + C92948 * C3668 -
              C139899 * C3812) *
                 C139824) *
                C47131 +
            ((C93789 - C93790 + C93791 - C93792) * C182 +
             (C94099 - C94100 + C94101 - C94102) * C139824) *
                C47132 +
            ((C93797 - C93798 + C93799 - C93800) * C182 +
             (C94103 - C94104 + C94105 - C94106) * C139824) *
                C47133) *
               C139809 * C140000) *
              C2324 +
          ((((C92951 - C92950 + C92953 - C92952) * C182 +
             (C93203 - C93202 + C93205 - C93204) * C139824) *
                C47131 +
            ((C92959 - C92958 + C92961 - C92960) * C182 +
             (C93208 - C93207 + C93210 - C93209) * C139824) *
                C47132 +
            ((C92966 - C92967 + C92968 - C92969) * C182 +
             (C93211 - C93212 + C93213 - C93214) * C139824) *
                C47133) *
               C139809 * C2322 +
           (((C93790 - C93789 + C93792 - C93791) * C182 +
             (C94100 - C94099 + C94102 - C94101) * C139824) *
                C47131 +
            ((C93798 - C93797 + C93800 - C93799) * C182 +
             (C94104 - C94103 + C94106 - C94105) * C139824) *
                C47132 +
            ((C92797 * C987 - C92947 * C810 + C139899 * C3597 -
              C92948 * C3441) *
                 C182 +
             (C92797 * C1243 - C92947 * C1075 + C139899 * C3815 -
              C92948 * C3671) *
                 C139824) *
                C47133) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92797 * C266 - C92947 * C108 + C139899 * C1741 - C92948 * C1570) *
                C5894 +
            (C92797 * C495 - C92947 * C348 + C139899 * C1997 - C92948 * C1829) *
                C5813 +
            (C101320 - C101321 + C101322 - C101323) * C5895 +
            (C101638 - C101639 + C101640 - C101641) * C5814 +
            (C101328 - C101329 + C101330 - C101331) * C5896 +
            (C101642 - C101643 + C101644 - C101645) * C5815) *
               C139731 * C139809 * C2322 +
           ((C101321 - C101320 + C101323 - C101322) * C5894 +
            (C101639 - C101638 + C101641 - C101640) * C5813 +
            (C101329 - C101328 + C101331 - C101330) * C5895 +
            (C101643 - C101642 + C101645 - C101644) * C5814 +
            (C92947 * C6627 - C92797 * C6908 + C92948 * C10394 -
             C139899 * C10630) *
                C5896 +
            (C92947 * C7032 - C92797 * C7290 + C92948 * C10740 -
             C139899 * C10958) *
                C5815) *
               C139731 * C139809 * C140000) *
              C2324 +
          (((C92951 - C92950 + C92953 - C92952) * C5894 +
            (C93203 - C93202 + C93205 - C93204) * C5813 +
            (C93789 - C93790 + C93791 - C93792) * C5895 +
            (C94099 - C94100 + C94101 - C94102) * C5814 +
            (C101336 - C101337 + C101338 - C101339) * C5896 +
            (C101646 - C101647 + C101648 - C101649) * C5815) *
               C139731 * C139809 * C2322 +
           ((C93790 - C93789 + C93792 - C93791) * C5894 +
            (C94100 - C94099 + C94102 - C94101) * C5813 +
            (C101337 - C101336 + C101339 - C101338) * C5895 +
            (C101647 - C101646 + C101649 - C101648) * C5814 +
            (C92797 * C6909 - C92947 * C6626 + C139899 * C10631 -
             C92948 * C10395) *
                C5896 +
            (C92797 * C7291 - C92947 * C7033 + C139899 * C10959 -
             C92948 * C10741) *
                C5815) *
               C139731 * C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eezx[129] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47131 * C114 - C47136 * C108 + C47132 * C116 - C47138 * C109 +
             C47133 * C118 - C47140 * C110) *
                C92947 +
            (C47131 * C573 - C47136 * C567 + C47132 * C574 - C47138 * C568 +
             C47133 * C575 - C47140 * C569) *
                C92797 +
            (C94879 - C94880 + C94881 - C94882 + C94883 - C94884) * C92948 +
            (C95211 - C95212 + C95213 - C95214 + C95215 - C95216) * C139899) *
               C139824 * C139809 * C2322 +
           ((C48295 - C48294 + C48297 - C48296 + C48299 - C48298) * C92947 +
            (C48641 - C48640 + C48643 - C48642 + C48645 - C48644) * C92797 +
            (C51798 - C51799 + C51800 - C51801 + C51802 - C51803) * C92948 +
            (C52104 - C52105 + C52106 - C52107 + C52108 - C52109) * C139899) *
               C139824 * C139809 * C140000) *
              C2324 +
          (((C47136 * C109 - C47131 * C116 + C47138 * C110 - C47132 * C118 +
             C47140 * C111 - C47133 * C120) *
                C92947 +
            (C47136 * C568 - C47131 * C574 + C47138 * C569 - C47132 * C575 +
             C47140 * C570 - C47133 * C576) *
                C92797 +
            (C94891 - C94892 + C94893 - C94894 + C94895 - C94896) * C92948 +
            (C95217 - C95218 + C95219 - C95220 + C95221 - C95222) * C139899) *
               C139824 * C139809 * C2322 +
           ((C48307 - C48306 + C48309 - C48308 + C48311 - C48310) * C92947 +
            (C48647 - C48646 + C48649 - C48648 + C48651 - C48650) * C92797 +
            (C47131 * C3444 - C47136 * C3439 + C47132 * C3446 - C47138 * C3440 +
             C47133 * C3448 - C47140 * C3441) *
                C92948 +
            (C47131 * C3887 - C47136 * C3883 + C47132 * C3888 - C47138 * C3884 +
             C47133 * C3889 - C47140 * C3885) *
                C139899) *
               C139824 * C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C139731 * C114 - C54790 * C108) * C92947 +
             (C139731 * C573 - C54790 * C567) * C92797 +
             (C61976 - C61977) * C92948 + (C62328 - C62329) * C139899) *
                C5813 +
            ((C55513 - C55514) * C92947 + (C55735 - C55736) * C92797 +
             C64587 * C92948 + C64931 * C139899) *
                C5814 +
            (C57297 * C92947 + C57463 * C92797 + C88899 * C92948 +
             C89133 * C139899) *
                C5815) *
               C139809 * C2322 +
           (((C55514 - C55513) * C92947 + (C55736 - C55735) * C92797 +
             C64591 * C92948 + C64933 * C139899) *
                C5813 +
            ((C55518 - C55517) * C92947 + (C55738 - C55737) * C92797 +
             C89717 * C92948 + C90038 * C139899) *
                C5814 +
            ((C55522 - C55521) * C92947 + (C55740 - C55739) * C92797 +
             (C57891 - C57892) * C92948 + (C58103 - C58104) * C139899) *
                C5815) *
               C139809 * C140000) *
              C2324 +
          ((((C54790 * C109 - C139731 * C116) * C92947 +
             (C54790 * C568 - C139731 * C574) * C92797 +
             (C61984 - C61985) * C92948 + (C62332 - C62333) * C139899) *
                C5813 +
            ((C55525 - C55526) * C92947 + (C55741 - C55742) * C92797 +
             (C61001 - C61002) * C92948 + (C61311 - C61312) * C139899) *
                C5814 +
            ((C55529 - C55530) * C92947 + (C55743 - C55744) * C92797 +
             (C86284 - C86285) * C92948 + (C86582 - C86583) * C139899) *
                C5815) *
               C139809 * C2322 +
           (((C55526 - C55525) * C92947 + (C55742 - C55741) * C92797 +
             (C61002 - C61001) * C92948 + (C61312 - C61311) * C139899) *
                C5813 +
            ((C55530 - C55529) * C92947 + (C55744 - C55743) * C92797 +
             (C86285 - C86284) * C92948 + (C86583 - C86582) * C139899) *
                C5814 +
            ((C55534 - C55533) * C92947 + (C55746 - C55745) * C92797 +
             (C139731 * C10398 - C54790 * C10395) * C92948 +
             (C139731 * C11065 - C54790 * C11063) * C139899) *
                C5815) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eezy[129] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C139824 * C183 - C182 * C108) * C92947 +
             (C139824 * C629 - C182 * C567) * C92797 +
             (C15795 - C15796) * C92948 + (C16525 - C16526) * C139899) *
                C47131 +
            ((C196 - C197) * C92947 + (C636 - C637) * C92797 + C15799 * C92948 +
             C16529 * C139899) *
                C47132 +
            C93374 * C47133) *
               C139809 * C2322 +
           (((C182 * C813 - C139824 * C896) * C92947 +
             (C182 * C1317 - C139824 * C1393) * C92797 +
             (C18427 - C18428) * C92948 + (C19071 - C19072) * C139899) *
                C47131 +
            ((C907 - C908) * C92947 + (C1399 - C1400) * C92797 +
             (C14764 - C14765) * C92948 + (C15401 - C15402) * C139899) *
                C47132 +
            ((C911 - C912) * C92947 + (C1401 - C1402) * C92797 +
             (C30369 - C30370) * C92948 + (C30992 - C30993) * C139899) *
                C47133) *
               C139809 * C140000) *
              C2324 +
          ((((C197 - C196) * C92947 + (C637 - C636) * C92797 + C15807 * C92948 +
             C16531 * C139899) *
                C47131 +
            ((C201 - C200) * C92947 + (C640 - C639) * C92797 + C31358 * C92948 +
             C32014 * C139899) *
                C47132 +
            ((C205 - C204) * C92947 + (C643 - C642) * C92797 +
             (C1672 - C1673) * C92948 + (C2160 - C2161) * C139899) *
                C47133) *
               C139809 * C2322 +
           (((C908 - C907) * C92947 + (C1400 - C1399) * C92797 +
             (C14765 - C14764) * C92948 + (C15402 - C15401) * C139899) *
                C47131 +
            ((C912 - C911) * C92947 + (C1402 - C1401) * C92797 +
             (C30370 - C30369) * C92948 + (C30993 - C30992) * C139899) *
                C47132 +
            ((C916 - C915) * C92947 + (C1404 - C1403) * C92797 +
             (C139824 * C3523 - C182 * C3441) * C92948 +
             (C139824 * C3959 - C182 * C3885) * C139899) *
                C47133) *
               C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5813 * C183 - C5894 * C108 + C5814 * C896 - C5895 * C813 +
             C5815 * C2974 - C5896 * C2908) *
                C92947 +
            (C5813 * C629 - C5894 * C567 + C5814 * C1393 - C5895 * C1317 +
             C5815 * C3314 - C5896 * C3256) *
                C92797 +
            (C102182 - C102183 + C102184 - C102185 + C102186 - C102187) *
                C92948 +
            (C102803 - C102804 + C102805 - C102806 + C102807 - C102808) *
                C139899) *
               C139731 * C139809 * C2322 +
           ((C5894 * C813 - C5813 * C896 + C5895 * C2908 - C5814 * C2974 +
             C5896 * C6627 - C5815 * C6792) *
                C92947 +
            (C5894 * C1317 - C5813 * C1393 + C5895 * C3256 - C5814 * C3314 +
             C5896 * C7401 - C5815 * C7521) *
                C92797 +
            (C5894 * C3438 - C5813 * C3520 + C5895 * C7754 - C5814 * C7863 +
             C5896 * C10394 - C5815 * C10528) *
                C92948 +
            (C5894 * C3882 - C5813 * C3956 + C5895 * C8422 - C5814 * C8526 +
             C5896 * C11062 - C5815 * C11172) *
                C139899) *
               C139731 * C139809 * C140000) *
              C2324 +
          (((C5899 - C5898 + C5901 - C5900 + C5903 - C5902) * C92947 +
            (C6424 - C6423 + C6426 - C6425 + C6428 - C6427) * C92797 +
            (C7870 - C7871 + C7872 - C7873 + C7874 - C7875) * C92948 +
            (C8530 - C8531 + C8532 - C8533 + C8534 - C8535) * C139899) *
               C139731 * C139809 * C2322 +
           ((C6800 - C6799 + C6802 - C6801 + C6804 - C6803) * C92947 +
            (C7526 - C7525 + C7528 - C7527 + C7530 - C7529) * C92797 +
            (C5813 * C3521 - C5894 * C3439 + C5814 * C7864 - C5895 * C7753 +
             C5815 * C10529 - C5896 * C10395) *
                C92948 +
            (C5813 * C3957 - C5894 * C3883 + C5814 * C8527 - C5895 * C8423 +
             C5815 * C11173 - C5896 * C11063) *
                C139899) *
               C139731 * C139809 * C140000) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eezz[129] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92947 * C266 - C93448 * C108 - C92947 * C567 + C92797 * C702 +
             C92948 * C1741 - C93449 * C1570 - C92948 * C2074 +
             C139899 * C2230) *
                C139824 * C47131 +
            (C93487 + C93488) * C139824 * C47132 + C93494 * C47133) *
               C139809 * C2322 -
           ((C94425 + C94426) * C139824 * C47133 +
            (C94427 + C94428) * C139824 * C47132 +
            (C92948 * C3594 - C93449 * C3438 - C92948 * C3882 +
             C139899 * C4026 + C92947 * C984 - C93448 * C813 - C92947 * C1317 +
             C92797 * C1473) *
                C139824 * C47131) *
               C139809 * C140000) *
              C2324 +
          (((C94428 + C94427) * C139824 * C47131 +
            (C94426 + C94425) * C139824 * C47132 +
            (C92947 * C987 - C93448 * C810 - C92947 * C1320 + C92797 * C1470 +
             C92948 * C3597 - C93449 * C3441 - C92948 * C3885 +
             C139899 * C4029) *
                C139824 * C47133) *
               C139809 * C140000 -
           ((C93491 + C93492) * C139824 * C47133 +
            (C93490 + C93489) * C139824 * C47132 +
            (C93488 + C93487) * C139824 * C47131) *
               C139809 * C2322) *
              C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92947 * C266 - C93448 * C108 - C92947 * C567 + C92797 * C702 +
             C92948 * C1741 - C93449 * C1570 - C92948 * C2074 +
             C139899 * C2230) *
                C5813 +
            (C101980 + C101981) * C5814 + (C101982 + C101983) * C5815) *
               C139731 * C139809 * C2322 -
           ((C92948 * C10630 - C93449 * C10394 - C92948 * C11062 +
             C139899 * C11272 + C92947 * C6908 - C93448 * C6627 -
             C92947 * C7401 + C92797 * C7629) *
                C5815 +
            (C101983 + C101982) * C5814 + (C101981 + C101980) * C5813) *
               C139731 * C139809 * C140000) *
              C2324 +
          (((C94428 + C94427) * C5813 + (C101984 + C101985) * C5814 +
            (C92947 * C6909 - C93448 * C6626 - C92947 * C7402 + C92797 * C7628 +
             C92948 * C10631 - C93449 * C10395 - C92948 * C11063 +
             C139899 * C11273) *
                C5815) *
               C139731 * C139809 * C140000 -
           ((C101985 + C101984) * C5815 + (C94427 + C94428) * C5814 +
            (C93488 + C93487) * C5813) *
               C139731 * C139809 * C2322) *
              C139998)) /
            (p * q * std::sqrt(p + q));
    d2eexx[130] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C47136 * C114 - C47137 * C108 - C47136 * C115 + C47131 * C126 +
            C47138 * C116 - C47139 * C109 - C47138 * C117 + C47132 * C127 +
            C47140 * C118 - C47141 * C110 - C47140 * C119 + C47133 * C128) *
               C92797 +
           (C94563 + C94564 + C94565) * C139899) *
              C139824 * C139809 * C2904 -
          ((C51501 + C51502 + C51503) * C139899 +
           (C47980 + C47979 + C47978) * C92797) *
              C139824 * C139809 * C2905 +
          ((C50774 + C50773 + C50772) * C92797 +
           (C47136 * C7758 - C47137 * C7754 - C47136 * C7759 + C47131 * C7763 +
            C47138 * C7756 - C47139 * C7753 - C47138 * C7757 + C47132 * C7762 +
            C47140 * C7760 - C47141 * C7755 - C47140 * C7761 + C47133 * C7764) *
               C139899) *
              C139824 * C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C54790 * C114 - C54791 * C108 - C54790 * C115 + C139731 * C126) *
                C92797 +
            C61654 * C139899) *
               C5813 +
           (C101116 + C101117) * C5814 + C103863 * C5815) *
              C139809 * C2904 -
          ((C103864 + C103865) * C5815 + (C101119 + C101118) * C5814 +
           (C101117 + C101116) * C5813) *
              C139809 * C2905 +
          (C103863 * C5813 + (C103865 + C103864) * C5814 +
           (C57127 * C92797 + (C54790 * C57647 - C54791 * C57646 -
                               C54790 * C57648 + C139731 * C57649) *
                                  C139899) *
               C5815) *
              C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eexy[130] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C139824 * C183 - C182 * C108) * C47136 +
            (C139824 * C189 - C182 * C115) * C47131 + (C196 - C197) * C47138 +
            (C198 - C199) * C47132 + C212 * C47140 + C213 * C47133) *
               C92797 +
           ((C15795 - C15796) * C47136 + (C15797 - C15798) * C47131 +
            C15799 * C47138 + C15800 * C47132 + C29549 * C47140 +
            C29550 * C47133) *
               C139899) *
              C139809 * C2904 +
          (((C182 * C813 - C139824 * C896) * C47136 +
            (C182 * C822 - C139824 * C901) * C47131 + (C907 - C908) * C47138 +
            (C909 - C910) * C47132 + (C911 - C912) * C47140 +
            (C913 - C914) * C47133) *
               C92797 +
           ((C18427 - C18428) * C47136 + (C18429 - C18430) * C47131 +
            (C14764 - C14765) * C47138 + (C14766 - C14767) * C47132 +
            (C30369 - C30370) * C47140 + (C30371 - C30372) * C47133) *
               C139899) *
              C139809 * C2905 +
          (((C139824 * C2974 - C182 * C2908) * C47136 +
            (C139824 * C2978 - C182 * C2913) * C47131 +
            (C139824 * C2975 - C182 * C2909) * C47138 +
            (C139824 * C2979 - C182 * C2915) * C47132 +
            (C139824 * C2976 - C182 * C2910) * C47140 +
            (C139824 * C2980 - C182 * C2917) * C47133) *
               C92797 +
           ((C139824 * C7863 - C182 * C7754) * C47136 +
            (C139824 * C7866 - C182 * C7759) * C47131 +
            (C139824 * C7864 - C182 * C7753) * C47138 +
            (C139824 * C7867 - C182 * C7757) * C47132 +
            (C139824 * C7865 - C182 * C7755) * C47140 +
            (C139824 * C7868 - C182 * C7761) * C47133) *
               C139899) *
              C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5813 * C183 - C5894 * C108 + C5814 * C896 - C5895 * C813 +
             C5815 * C2974 - C5896 * C2908) *
                C54790 +
            (C5813 * C189 - C5894 * C115 + C5814 * C901 - C5895 * C822 +
             C5815 * C2978 - C5896 * C2913) *
                C139731) *
               C92797 +
           ((C102182 - C102183 + C102184 - C102185 + C102186 - C102187) *
                C54790 +
            (C102188 - C102189 + C102190 - C102191 + C102192 - C102193) *
                C139731) *
               C139899) *
              C139809 * C2904 +
          (((C5894 * C813 - C5813 * C896 + C5895 * C2908 - C5814 * C2974 +
             C5896 * C6627 - C5815 * C6792) *
                C54790 +
            (C5894 * C822 - C5813 * C901 + C5895 * C2913 - C5814 * C2978 +
             C5896 * C6632 - C5815 * C6795) *
                C139731) *
               C92797 +
           ((C5894 * C3438 - C5813 * C3520 + C5895 * C7754 - C5814 * C7863 +
             C5896 * C10394 - C5815 * C10528) *
                C54790 +
            (C5894 * C3443 - C5813 * C3524 + C5895 * C7759 - C5814 * C7866 +
             C5896 * C10397 - C5815 * C10530) *
                C139731) *
               C139899) *
              C139809 * C2905 +
          (((C5813 * C2974 - C5894 * C2908 + C5814 * C6792 - C5895 * C6627 +
             C5815 * C9707 - C5896 * C9609) *
                C54790 +
            (C5813 * C2978 - C5894 * C2913 + C5814 * C6795 - C5895 * C6632 +
             C5815 * C9709 - C5896 * C9612) *
                C139731) *
               C92797 +
           ((C5813 * C7863 - C5894 * C7754 + C5814 * C10528 - C5895 * C10394 +
             C5815 * C57740 - C5896 * C57646) *
                C54790 +
            (C5813 * C7866 - C5894 * C7759 + C5814 * C10530 - C5895 * C10397 +
             C5815 * C57741 - C5896 * C57648) *
                C139731) *
               C139899) *
              C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eexz[130] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C92797 * C266 - C92947 * C108 + C139899 * C1741 - C92948 * C1570) *
               C47136 +
           (C92797 * C272 - C92947 * C115 + C139899 * C1746 - C92948 * C1579) *
               C47131 +
           (C92950 - C92951 + C92952 - C92953) * C47138 +
           (C92954 - C92955 + C92956 - C92957) * C47132 + C92978 * C47140 +
           C92979 * C47133) *
              C139824 * C139809 * C2904 +
          ((C92947 * C813 - C92797 * C984 + C92948 * C3438 - C139899 * C3594) *
               C47136 +
           (C92947 * C822 - C92797 * C989 + C92948 * C3443 - C139899 * C3598) *
               C47131 +
           (C93789 - C93790 + C93791 - C93792) * C47138 +
           (C93793 - C93794 + C93795 - C93796) * C47132 +
           (C93797 - C93798 + C93799 - C93800) * C47140 +
           (C93801 - C93802 + C93803 - C93804) * C47133) *
              C139824 * C139809 * C2905 +
          ((C92797 * C3032 - C92947 * C2908 + C139899 * C7979 -
            C92948 * C7754) *
               C47136 +
           (C92797 * C3036 - C92947 * C2913 + C139899 * C7982 -
            C92948 * C7759) *
               C47131 +
           (C92797 * C3033 - C92947 * C2909 + C139899 * C7980 -
            C92948 * C7753) *
               C47138 +
           (C92797 * C3037 - C92947 * C2915 + C139899 * C7983 -
            C92948 * C7757) *
               C47132 +
           (C92797 * C3034 - C92947 * C2910 + C139899 * C7981 -
            C92948 * C7755) *
               C47140 +
           (C92797 * C3038 - C92947 * C2917 + C139899 * C7984 -
            C92948 * C7761) *
               C47133) *
              C139824 * C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92797 * C266 - C92947 * C108 + C139899 * C1741 - C92948 * C1570) *
                C54790 +
            (C92797 * C272 - C92947 * C115 + C139899 * C1746 - C92948 * C1579) *
                C139731) *
               C5813 +
           ((C101320 - C101321 + C101322 - C101323) * C54790 +
            (C101324 - C101325 + C101326 - C101327) * C139731) *
               C5814 +
           C104030 * C5815) *
              C139809 * C2904 +
          (((C101321 - C101320 + C101323 - C101322) * C54790 +
            (C101325 - C101324 + C101327 - C101326) * C139731) *
               C5813 +
           ((C101329 - C101328 + C101331 - C101330) * C54790 +
            (C101333 - C101332 + C101335 - C101334) * C139731) *
               C5814 +
           ((C104018 - C104019 + C104020 - C104021) * C54790 +
            (C104022 - C104023 + C104024 - C104025) * C139731) *
               C5815) *
              C139809 * C2905 +
          (C104030 * C5813 +
           ((C104019 - C104018 + C104021 - C104020) * C54790 +
            (C104023 - C104022 + C104025 - C104024) * C139731) *
               C5814 +
           ((C92797 * C9785 - C92947 * C9609 + C139899 * C57808 -
             C92948 * C57646) *
                C54790 +
            (C92797 * C9787 - C92947 * C9612 + C139899 * C57809 -
             C92948 * C57648) *
                C139731) *
               C5815) *
              C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eeyx[130] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47131 * C114 - C47136 * C108 + C47132 * C116 - C47138 * C109 +
             C47133 * C118 - C47140 * C110) *
                C182 +
            (C47131 * C354 - C47136 * C348 + C47132 * C355 - C47138 * C349 +
             C47133 * C356 - C47140 * C350) *
                C139824) *
               C92797 +
           ((C94879 - C94880 + C94881 - C94882 + C94883 - C94884) * C182 +
            (C94885 - C94886 + C94887 - C94888 + C94889 - C94890) * C139824) *
               C139899) *
              C139809 * C2904 +
          (((C48295 - C48294 + C48297 - C48296 + C48299 - C48298) * C182 +
            (C48301 - C48300 + C48303 - C48302 + C48305 - C48304) * C139824) *
               C92797 +
           ((C51798 - C51799 + C51800 - C51801 + C51802 - C51803) * C182 +
            (C51804 - C51805 + C51806 - C51807 + C51808 - C51809) * C139824) *
               C139899) *
              C139809 * C2905 +
          (((C50998 - C50997 + C51000 - C50999 + C51002 - C51001) * C182 +
            (C51004 - C51003 + C51006 - C51005 + C51008 - C51007) * C139824) *
               C92797 +
           ((C47131 * C7758 - C47136 * C7754 + C47132 * C7756 - C47138 * C7753 +
             C47133 * C7760 - C47140 * C7755) *
                C182 +
            (C47131 * C8094 - C47136 * C8091 + C47132 * C8095 - C47138 * C8092 +
             C47133 * C8096 - C47140 * C8093) *
                C139824) *
               C139899) *
              C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C139731 * C114 - C54790 * C108) * C5894 +
            (C139731 * C354 - C54790 * C348) * C5813 +
            (C55513 - C55514) * C5895 + (C55515 - C55516) * C5814 +
            C57297 * C5896 + C57298 * C5815) *
               C92797 +
           ((C61976 - C61977) * C5894 + (C61978 - C61979) * C5813 +
            C64587 * C5895 + C64588 * C5814 + C88899 * C5896 + C88900 * C5815) *
               C139899) *
              C139809 * C2904 +
          (((C55514 - C55513) * C5894 + (C55516 - C55515) * C5813 +
            (C55518 - C55517) * C5895 + (C55520 - C55519) * C5814 +
            (C55522 - C55521) * C5896 + (C55524 - C55523) * C5815) *
               C92797 +
           (C64591 * C5894 + C64592 * C5813 + C89717 * C5895 + C89718 * C5814 +
            (C57891 - C57892) * C5896 + (C57893 - C57894) * C5815) *
               C139899) *
              C139809 * C2905 +
          ((C57297 * C5894 + C57298 * C5813 + C57299 * C5895 + C57300 * C5814 +
            (C57302 - C57301) * C5896 + (C57304 - C57303) * C5815) *
               C92797 +
           (C88899 * C5894 + C88900 * C5813 + (C57892 - C57891) * C5895 +
            (C57894 - C57893) * C5814 +
            (C139731 * C57647 - C54790 * C57646) * C5896 +
            (C139731 * C57881 - C54790 * C57880) * C5815) *
               C139899) *
              C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eeyy[130] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C182 * C183 - C410 * C108 - C182 * C348 + C139824 * C411) *
                C47131 +
            C442 * C47132 + C443 * C47133) *
               C92797 +
           (C95001 + C95002 + C95003) * C139899) *
              C139809 * C2904 -
          ((C30689 * C47133 + C15096 * C47132 + C18761 * C47131) * C139899 +
           (C1173 * C47133 + C1174 * C47132 +
            (C182 * C896 - C410 * C813 - C182 * C1072 + C139824 * C1151) *
                C47131) *
               C92797) *
              C139809 * C2905 +
          (((C182 * C2974 - C410 * C2908 - C182 * C3090 + C139824 * C3148) *
                C47131 +
            (C182 * C2975 - C410 * C2909 - C182 * C3091 + C139824 * C3149) *
                C47132 +
            (C182 * C2976 - C410 * C2910 - C182 * C3092 + C139824 * C3150) *
                C47133) *
               C92797 +
           ((C182 * C7863 - C410 * C7754 - C182 * C8091 + C139824 * C8196) *
                C47131 +
            (C182 * C7864 - C410 * C7753 - C182 * C8092 + C139824 * C8195) *
                C47132 +
            (C182 * C7865 - C410 * C7755 - C182 * C8093 + C139824 * C8197) *
                C47133) *
               C139899) *
              C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C5894 * C183 - C6151 * C108 - C5894 * C348 + C5813 * C411 +
            C5895 * C896 - C6152 * C813 - C5895 * C1072 + C5814 * C1151 +
            C5896 * C2974 - C6153 * C2908 - C5896 * C3090 + C5815 * C3148) *
               C139731 * C92797 +
           (C102506 + C102507 + C102508) * C139731 * C139899) *
              C139809 * C2904 -
          ((C5896 * C10528 - C6153 * C10394 - C5896 * C10740 + C5815 * C10858 +
            C5895 * C7863 - C6152 * C7754 - C5895 * C8091 + C5814 * C8196 +
            C5894 * C3520 - C6151 * C3438 - C5894 * C3668 + C5813 * C3742) *
               C139731 * C139899 +
           (C5896 * C6792 - C6153 * C6627 - C5896 * C7032 + C5815 * C7169 +
            C5895 * C2974 - C6152 * C2908 - C5895 * C3090 + C5814 * C3148 +
            C5894 * C896 - C6151 * C813 - C5894 * C1072 + C5813 * C1151) *
               C139731 * C92797) *
              C139809 * C2905 +
          ((C5894 * C2974 - C6151 * C2908 - C5894 * C3090 + C5813 * C3148 +
            C5895 * C6792 - C6152 * C6627 - C5895 * C7032 + C5814 * C7169 +
            C5896 * C9707 - C6153 * C9609 - C5896 * C9876 + C5815 * C9968) *
               C139731 * C92797 +
           (C5894 * C7863 - C6151 * C7754 - C5894 * C8091 + C5813 * C8196 +
            C5895 * C10528 - C6152 * C10394 - C5895 * C10740 + C5814 * C10858 +
            C5896 * C57740 - C6153 * C57646 - C5896 * C57880 + C5815 * C57960) *
               C139731 * C139899) *
              C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eeyz[130] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92797 * C266 - C92947 * C108 + C139899 * C1741 - C92948 * C1570) *
                C182 +
            (C92797 * C495 - C92947 * C348 + C139899 * C1997 - C92948 * C1829) *
                C139824) *
               C47131 +
           ((C92950 - C92951 + C92952 - C92953) * C182 +
            (C93202 - C93203 + C93204 - C93205) * C139824) *
               C47132 +
           C93219 * C47133) *
              C139809 * C2904 +
          (((C92947 * C813 - C92797 * C984 + C92948 * C3438 - C139899 * C3594) *
                C182 +
            (C92947 * C1072 - C92797 * C1240 + C92948 * C3668 -
             C139899 * C3812) *
                C139824) *
               C47131 +
           ((C93789 - C93790 + C93791 - C93792) * C182 +
            (C94099 - C94100 + C94101 - C94102) * C139824) *
               C47132 +
           ((C93797 - C93798 + C93799 - C93800) * C182 +
            (C94103 - C94104 + C94105 - C94106) * C139824) *
               C47133) *
              C139809 * C2905 +
          (((C92797 * C3032 - C92947 * C2908 + C139899 * C7979 -
             C92948 * C7754) *
                C182 +
            (C92797 * C3202 - C92947 * C3090 + C139899 * C8317 -
             C92948 * C8091) *
                C139824) *
               C47131 +
           ((C92797 * C3033 - C92947 * C2909 + C139899 * C7980 -
             C92948 * C7753) *
                C182 +
            (C92797 * C3203 - C92947 * C3091 + C139899 * C8318 -
             C92948 * C8092) *
                C139824) *
               C47132 +
           ((C92797 * C3034 - C92947 * C2910 + C139899 * C7981 -
             C92948 * C7755) *
                C182 +
            (C92797 * C3204 - C92947 * C3092 + C139899 * C8319 -
             C92948 * C8093) *
                C139824) *
               C47133) *
              C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C92797 * C266 - C92947 * C108 + C139899 * C1741 - C92948 * C1570) *
               C5894 +
           (C92797 * C495 - C92947 * C348 + C139899 * C1997 - C92948 * C1829) *
               C5813 +
           (C101320 - C101321 + C101322 - C101323) * C5895 +
           (C101638 - C101639 + C101640 - C101641) * C5814 + C104026 * C5896 +
           C104259 * C5815) *
              C139731 * C139809 * C2904 +
          ((C101321 - C101320 + C101323 - C101322) * C5894 +
           (C101639 - C101638 + C101641 - C101640) * C5813 +
           (C101329 - C101328 + C101331 - C101330) * C5895 +
           (C101643 - C101642 + C101645 - C101644) * C5814 +
           (C104018 - C104019 + C104020 - C104021) * C5896 +
           (C104255 - C104256 + C104257 - C104258) * C5815) *
              C139731 * C139809 * C2905 +
          (C104026 * C5894 + C104259 * C5813 +
           (C104019 - C104018 + C104021 - C104020) * C5895 +
           (C104256 - C104255 + C104258 - C104257) * C5814 +
           (C92797 * C9785 - C92947 * C9609 + C139899 * C57808 -
            C92948 * C57646) *
               C5896 +
           (C92797 * C10044 - C92947 * C9876 + C139899 * C58027 -
            C92948 * C57880) *
               C5815) *
              C139731 * C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eezx[130] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C47131 * C114 - C47136 * C108 + C47132 * C116 - C47138 * C109 +
            C47133 * C118 - C47140 * C110) *
               C92947 +
           (C47131 * C573 - C47136 * C567 + C47132 * C574 - C47138 * C568 +
            C47133 * C575 - C47140 * C569) *
               C92797 +
           (C94879 - C94880 + C94881 - C94882 + C94883 - C94884) * C92948 +
           (C95211 - C95212 + C95213 - C95214 + C95215 - C95216) * C139899) *
              C139824 * C139809 * C2904 +
          ((C48295 - C48294 + C48297 - C48296 + C48299 - C48298) * C92947 +
           (C48641 - C48640 + C48643 - C48642 + C48645 - C48644) * C92797 +
           (C51798 - C51799 + C51800 - C51801 + C51802 - C51803) * C92948 +
           (C52104 - C52105 + C52106 - C52107 + C52108 - C52109) * C139899) *
              C139824 * C139809 * C2905 +
          ((C50998 - C50997 + C51000 - C50999 + C51002 - C51001) * C92947 +
           (C51232 - C51231 + C51234 - C51233 + C51236 - C51235) * C92797 +
           (C47131 * C7758 - C47136 * C7754 + C47132 * C7756 - C47138 * C7753 +
            C47133 * C7760 - C47140 * C7755) *
               C92948 +
           (C47131 * C8425 - C47136 * C8422 + C47132 * C8426 - C47138 * C8423 +
            C47133 * C8427 - C47140 * C8424) *
               C139899) *
              C139824 * C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C139731 * C114 - C54790 * C108) * C92947 +
            (C139731 * C573 - C54790 * C567) * C92797 +
            (C61976 - C61977) * C92948 + (C62328 - C62329) * C139899) *
               C5813 +
           ((C55513 - C55514) * C92947 + (C55735 - C55736) * C92797 +
            C64587 * C92948 + C64931 * C139899) *
               C5814 +
           C104340 * C5815) *
              C139809 * C2904 +
          (((C55514 - C55513) * C92947 + (C55736 - C55735) * C92797 +
            C64591 * C92948 + C64933 * C139899) *
               C5813 +
           ((C55518 - C55517) * C92947 + (C55738 - C55737) * C92797 +
            C89717 * C92948 + C90038 * C139899) *
               C5814 +
           ((C55522 - C55521) * C92947 + (C55740 - C55739) * C92797 +
            (C57891 - C57892) * C92948 + (C58103 - C58104) * C139899) *
               C5815) *
              C139809 * C2905 +
          (C104340 * C5813 +
           (C57299 * C92947 + C57465 * C92797 + (C57892 - C57891) * C92948 +
            (C58104 - C58103) * C139899) *
               C5814 +
           ((C57302 - C57301) * C92947 + (C57467 - C57466) * C92797 +
            (C139731 * C57647 - C54790 * C57646) * C92948 +
            (C139731 * C58097 - C54790 * C58096) * C139899) *
               C5815) *
              C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eezy[130] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C139824 * C183 - C182 * C108) * C92947 +
            (C139824 * C629 - C182 * C567) * C92797 +
            (C15795 - C15796) * C92948 + (C16525 - C16526) * C139899) *
               C47131 +
           ((C196 - C197) * C92947 + (C636 - C637) * C92797 + C15799 * C92948 +
            C16529 * C139899) *
               C47132 +
           C93374 * C47133) *
              C139809 * C2904 +
          (((C182 * C813 - C139824 * C896) * C92947 +
            (C182 * C1317 - C139824 * C1393) * C92797 +
            (C18427 - C18428) * C92948 + (C19071 - C19072) * C139899) *
               C47131 +
           ((C907 - C908) * C92947 + (C1399 - C1400) * C92797 +
            (C14764 - C14765) * C92948 + (C15401 - C15402) * C139899) *
               C47132 +
           ((C911 - C912) * C92947 + (C1401 - C1402) * C92797 +
            (C30369 - C30370) * C92948 + (C30992 - C30993) * C139899) *
               C47133) *
              C139809 * C2905 +
          (((C139824 * C2974 - C182 * C2908) * C92947 +
            (C139824 * C3314 - C182 * C3256) * C92797 +
            (C139824 * C7863 - C182 * C7754) * C92948 +
            (C139824 * C8526 - C182 * C8422) * C139899) *
               C47131 +
           ((C139824 * C2975 - C182 * C2909) * C92947 +
            (C139824 * C3315 - C182 * C3257) * C92797 +
            (C139824 * C7864 - C182 * C7753) * C92948 +
            (C139824 * C8527 - C182 * C8423) * C139899) *
               C47132 +
           ((C139824 * C2976 - C182 * C2910) * C92947 +
            (C139824 * C3316 - C182 * C3258) * C92797 +
            (C139824 * C7865 - C182 * C7755) * C92948 +
            (C139824 * C8528 - C182 * C8424) * C139899) *
               C47133) *
              C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C5813 * C183 - C5894 * C108 + C5814 * C896 - C5895 * C813 +
            C5815 * C2974 - C5896 * C2908) *
               C92947 +
           (C5813 * C629 - C5894 * C567 + C5814 * C1393 - C5895 * C1317 +
            C5815 * C3314 - C5896 * C3256) *
               C92797 +
           (C102182 - C102183 + C102184 - C102185 + C102186 - C102187) *
               C92948 +
           (C102803 - C102804 + C102805 - C102806 + C102807 - C102808) *
               C139899) *
              C139731 * C139809 * C2904 +
          ((C5894 * C813 - C5813 * C896 + C5895 * C2908 - C5814 * C2974 +
            C5896 * C6627 - C5815 * C6792) *
               C92947 +
           (C5894 * C1317 - C5813 * C1393 + C5895 * C3256 - C5814 * C3314 +
            C5896 * C7401 - C5815 * C7521) *
               C92797 +
           (C5894 * C3438 - C5813 * C3520 + C5895 * C7754 - C5814 * C7863 +
            C5896 * C10394 - C5815 * C10528) *
               C92948 +
           (C5894 * C3882 - C5813 * C3956 + C5895 * C8422 - C5814 * C8526 +
            C5896 * C11062 - C5815 * C11172) *
               C139899) *
              C139731 * C139809 * C2905 +
          ((C5813 * C2974 - C5894 * C2908 + C5814 * C6792 - C5895 * C6627 +
            C5815 * C9707 - C5896 * C9609) *
               C92947 +
           (C5813 * C3314 - C5894 * C3256 + C5814 * C7521 - C5895 * C7401 +
            C5815 * C10211 - C5896 * C10123) *
               C92797 +
           (C5813 * C7863 - C5894 * C7754 + C5814 * C10528 - C5895 * C10394 +
            C5815 * C57740 - C5896 * C57646) *
               C92948 +
           (C5813 * C8526 - C5894 * C8422 + C5814 * C11172 - C5895 * C11062 +
            C5815 * C58170 - C5896 * C58096) *
               C139899) *
              C139731 * C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eezz[130] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C92947 * C266 - C93448 * C108 - C92947 * C567 + C92797 * C702 +
            C92948 * C1741 - C93449 * C1570 - C92948 * C2074 +
            C139899 * C2230) *
               C139824 * C47131 +
           (C93487 + C93488) * C139824 * C47132 + C93494 * C47133) *
              C139809 * C2904 -
          ((C94425 + C94426) * C139824 * C47133 +
           (C94427 + C94428) * C139824 * C47132 +
           (C92948 * C3594 - C93449 * C3438 - C92948 * C3882 + C139899 * C4026 +
            C92947 * C984 - C93448 * C813 - C92947 * C1317 + C92797 * C1473) *
               C139824 * C47131) *
              C139809 * C2905 +
          ((C92947 * C3032 - C93448 * C2908 - C92947 * C3256 + C92797 * C3368 +
            C92948 * C7979 - C93449 * C7754 - C92948 * C8422 +
            C139899 * C8634) *
               C139824 * C47131 +
           (C92947 * C3033 - C93448 * C2909 - C92947 * C3257 + C92797 * C3369 +
            C92948 * C7980 - C93449 * C7753 - C92948 * C8423 +
            C139899 * C8633) *
               C139824 * C47132 +
           (C92947 * C3034 - C93448 * C2910 - C92947 * C3258 + C92797 * C3370 +
            C92948 * C7981 - C93449 * C7755 - C92948 * C8424 +
            C139899 * C8635) *
               C139824 * C47133) *
              C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C92947 * C266 - C93448 * C108 - C92947 * C567 + C92797 * C702 +
            C92948 * C1741 - C93449 * C1570 - C92948 * C2074 +
            C139899 * C2230) *
               C5813 +
           (C101980 + C101981) * C5814 + C104489 * C5815) *
              C139731 * C139809 * C2904 -
          ((C104502 + C104503) * C5815 + (C101983 + C101982) * C5814 +
           (C101981 + C101980) * C5813) *
              C139731 * C139809 * C2905 +
          (C104489 * C5813 + (C104503 + C104502) * C5814 +
           (C92947 * C9785 - C93448 * C9609 - C92947 * C10123 +
            C92797 * C10287 + C92948 * C57808 - C93449 * C57646 -
            C92948 * C58096 + C139899 * C58237) *
               C5815) *
              C139731 * C139809 * C2906) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eexx[131] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47136 * C114 - C47137 * C108 - C47136 * C115 + C47131 * C126 +
             C47138 * C116 - C47139 * C109 - C47138 * C117 + C47132 * C127 +
             C47140 * C118 - C47141 * C110 - C47140 * C119 + C47133 * C128) *
                C92797 +
            (C94563 + C94564 + C94565) * C139899) *
               C139824 * C1565 -
           ((C47140 * C5281 - C47141 * C5275 - C47140 * C5282 + C47133 * C5287 +
             C47138 * C5279 - C47139 * C5274 - C47138 * C5280 + C47132 * C5286 +
             C47136 * C5277 - C47137 * C5273 - C47136 * C5278 +
             C47131 * C5285) *
                C139899 +
            (C94565 + C94564 + C94563) * C92797) *
               C139824 * C140002) *
              C2322 +
          (((C51503 + C51502 + C51501) * C92797 +
            (C47136 * C13130 - C47137 * C13126 - C47136 * C13131 +
             C47131 * C13138 + C47138 * C13132 - C47139 * C13127 -
             C47138 * C13133 + C47132 * C13139 + C47140 * C14660 -
             C47141 * C14659 - C47140 * C14661 + C47133 * C14662) *
                C139899) *
               C139824 * C140002 -
           ((C51501 + C51502 + C51503) * C139899 +
            (C47980 + C47979 + C47978) * C92797) *
               C139824 * C1565) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C54790 * C114 - C54791 * C108 - C54790 * C115 + C139731 * C126) *
                 C92797 +
             C61654 * C139899) *
                C5813 +
            (C101116 + C101117) * C5814 + C103863 * C5815) *
               C1565 -
           ((C104602 + C104603) * C5815 + (C104604 + C104605) * C5814 +
            (C61655 * C139899 + C61654 * C92797) * C5813) *
               C140002) *
              C2322 +
          (((C104605 + C104604) * C5813 + (C104603 + C104602) * C5814 +
            (C57669 * C92797 + (C54790 * C59484 - C54791 * C59483 -
                                C54790 * C59485 + C139731 * C59486) *
                                   C139899) *
                C5815) *
               C140002 -
           ((C103864 + C103865) * C5815 + (C101119 + C101118) * C5814 +
            (C101117 + C101116) * C5813) *
               C1565) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eexy[131] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C139824 * C183 - C182 * C108) * C47136 +
             (C139824 * C189 - C182 * C115) * C47131 + (C196 - C197) * C47138 +
             (C198 - C199) * C47132 + C212 * C47140 + C213 * C47133) *
                C92797 +
            ((C15795 - C15796) * C47136 + (C15797 - C15798) * C47131 +
             C15799 * C47138 + C15800 * C47132 + C29549 * C47140 +
             C29550 * C47133) *
                C139899) *
               C1565 +
           (((C15796 - C15795) * C47136 + (C15798 - C15797) * C47131 +
             C15807 * C47138 + C15808 * C47132 + C31358 * C47140 +
             C31359 * C47133) *
                C92797 +
            ((C15802 - C15801) * C47136 + (C15804 - C15803) * C47131 +
             C15809 * C47138 + C15810 * C47132 + (C13938 - C13939) * C47140 +
             (C13940 - C13941) * C47133) *
                C139899) *
               C140002) *
              C2322 +
          ((((C182 * C813 - C139824 * C896) * C47136 +
             (C182 * C822 - C139824 * C901) * C47131 + (C907 - C908) * C47138 +
             (C909 - C910) * C47132 + (C911 - C912) * C47140 +
             (C913 - C914) * C47133) *
                C92797 +
            ((C18427 - C18428) * C47136 + (C18429 - C18430) * C47131 +
             (C14764 - C14765) * C47138 + (C14766 - C14767) * C47132 +
             (C30369 - C30370) * C47140 + (C30371 - C30372) * C47133) *
                C139899) *
               C1565 +
           (((C18428 - C18427) * C47136 + (C18430 - C18429) * C47131 +
             (C14765 - C14764) * C47138 + (C14767 - C14766) * C47132 +
             (C30370 - C30369) * C47140 + (C30372 - C30371) * C47133) *
                C92797 +
            ((C18432 - C18431) * C47136 + (C18434 - C18433) * C47131 +
             (C14769 - C14768) * C47138 + (C14771 - C14770) * C47132 +
             (C139824 * C14761 - C182 * C14659) * C47140 +
             (C139824 * C14762 - C182 * C14661) * C47133) *
                C139899) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5813 * C183 - C5894 * C108 + C5814 * C896 - C5895 * C813 +
              C5815 * C2974 - C5896 * C2908) *
                 C54790 +
             (C5813 * C189 - C5894 * C115 + C5814 * C901 - C5895 * C822 +
              C5815 * C2978 - C5896 * C2913) *
                 C139731) *
                C92797 +
            ((C102182 - C102183 + C102184 - C102185 + C102186 - C102187) *
                 C54790 +
             (C102188 - C102189 + C102190 - C102191 + C102192 - C102193) *
                 C139731) *
                C139899) *
               C1565 +
           (((C102183 - C102182 + C102185 - C102184 + C102187 - C102186) *
                 C54790 +
             (C102189 - C102188 + C102191 - C102190 + C102193 - C102192) *
                 C139731) *
                C92797 +
            ((C5894 * C5273 - C5813 * C5339 + C5895 * C13126 - C5814 * C13216 +
              C5896 * C13128 - C5815 * C13217) *
                 C54790 +
             (C5894 * C5278 - C5813 * C5343 + C5895 * C13131 - C5814 * C13220 +
              C5896 * C13135 - C5815 * C13221) *
                 C139731) *
                C139899) *
               C140002) *
              C2322 +
          ((((C5894 * C813 - C5813 * C896 + C5895 * C2908 - C5814 * C2974 +
              C5896 * C6627 - C5815 * C6792) *
                 C54790 +
             (C5894 * C822 - C5813 * C901 + C5895 * C2913 - C5814 * C2978 +
              C5896 * C6632 - C5815 * C6795) *
                 C139731) *
                C92797 +
            ((C104704 - C104705 + C104706 - C104707 + C104708 - C104709) *
                 C54790 +
             (C104710 - C104711 + C104712 - C104713 + C104714 - C104715) *
                 C139731) *
                C139899) *
               C1565 +
           (((C104705 - C104704 + C104707 - C104706 + C104709 - C104708) *
                 C54790 +
             (C104711 - C104710 + C104713 - C104712 + C104715 - C104714) *
                 C139731) *
                C92797 +
            ((C5813 * C13216 - C5894 * C13126 + C5814 * C13217 -
              C5895 * C13128 + C5815 * C59537 - C5896 * C59483) *
                 C54790 +
             (C5813 * C13220 - C5894 * C13131 + C5814 * C13221 -
              C5895 * C13135 + C5815 * C59538 - C5896 * C59485) *
                 C139731) *
                C139899) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eexz[131] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92797 * C266 - C92947 * C108 + C139899 * C1741 - C92948 * C1570) *
                C47136 +
            (C92797 * C272 - C92947 * C115 + C139899 * C1746 - C92948 * C1579) *
                C47131 +
            (C92950 - C92951 + C92952 - C92953) * C47138 +
            (C92954 - C92955 + C92956 - C92957) * C47132 + C92978 * C47140 +
            C92979 * C47133) *
               C139824 * C1565 +
           ((C92947 * C1570 - C92797 * C1741 + C92948 * C5273 -
             C139899 * C5397) *
                C47136 +
            (C92947 * C1579 - C92797 * C1746 + C92948 * C5278 -
             C139899 * C5401) *
                C47131 +
            (C94765 - C94766 + C94767 - C94768) * C47138 +
            (C94769 - C94770 + C94771 - C94772) * C47132 +
            (C94773 - C94774 + C94775 - C94776) * C47140 +
            (C94777 - C94778 + C94779 - C94780) * C47133) *
               C139824 * C140002) *
              C2322 +
          (((C92947 * C813 - C92797 * C984 + C92948 * C3438 - C139899 * C3594) *
                C47136 +
            (C92947 * C822 - C92797 * C989 + C92948 * C3443 - C139899 * C3598) *
                C47131 +
            (C93789 - C93790 + C93791 - C93792) * C47138 +
            (C93793 - C93794 + C93795 - C93796) * C47132 +
            (C93797 - C93798 + C93799 - C93800) * C47140 +
            (C93801 - C93802 + C93803 - C93804) * C47133) *
               C139824 * C1565 +
           ((C92797 * C3594 - C92947 * C3438 + C139899 * C13298 -
             C92948 * C13126) *
                C47136 +
            (C92797 * C3598 - C92947 * C3443 + C139899 * C13302 -
             C92948 * C13131) *
                C47131 +
            (C92797 * C3595 - C92947 * C3439 + C139899 * C13299 -
             C92948 * C13127) *
                C47138 +
            (C92797 * C3599 - C92947 * C3445 + C139899 * C13303 -
             C92948 * C13133) *
                C47132 +
            (C92797 * C3596 - C92947 * C3440 + C139899 * C14869 -
             C92948 * C14659) *
                C47140 +
            (C92797 * C3600 - C92947 * C3447 + C139899 * C14870 -
             C92948 * C14661) *
                C47133) *
               C139824 * C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C92797 * C266 - C92947 * C108 + C139899 * C1741 -
              C92948 * C1570) *
                 C54790 +
             (C92797 * C272 - C92947 * C115 + C139899 * C1746 -
              C92948 * C1579) *
                 C139731) *
                C5813 +
            ((C101320 - C101321 + C101322 - C101323) * C54790 +
             (C101324 - C101325 + C101326 - C101327) * C139731) *
                C5814 +
            C104030 * C5815) *
               C1565 +
           (((C92947 * C1570 - C92797 * C1741 + C92948 * C5273 -
              C139899 * C5397) *
                 C54790 +
             (C92947 * C1579 - C92797 * C1746 + C92948 * C5278 -
              C139899 * C5401) *
                 C139731) *
                C5813 +
            ((C104814 - C104815 + C104816 - C104817) * C54790 +
             (C104818 - C104819 + C104820 - C104821) * C139731) *
                C5814 +
            ((C104822 - C104823 + C104824 - C104825) * C54790 +
             (C104826 - C104827 + C104828 - C104829) * C139731) *
                C5815) *
               C140002) *
              C2322 +
          ((((C101321 - C101320 + C101323 - C101322) * C54790 +
             (C101325 - C101324 + C101327 - C101326) * C139731) *
                C5813 +
            ((C101329 - C101328 + C101331 - C101330) * C54790 +
             (C101333 - C101332 + C101335 - C101334) * C139731) *
                C5814 +
            ((C104018 - C104019 + C104020 - C104021) * C54790 +
             (C104022 - C104023 + C104024 - C104025) * C139731) *
                C5815) *
               C1565 +
           (((C104815 - C104814 + C104817 - C104816) * C54790 +
             (C104819 - C104818 + C104821 - C104820) * C139731) *
                C5813 +
            ((C104823 - C104822 + C104825 - C104824) * C54790 +
             (C104827 - C104826 + C104829 - C104828) * C139731) *
                C5814 +
            ((C92797 * C10630 - C92947 * C10394 + C139899 * C59589 -
              C92948 * C59483) *
                 C54790 +
             (C92797 * C10632 - C92947 * C10397 + C139899 * C59590 -
              C92948 * C59485) *
                 C139731) *
                C5815) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eeyx[131] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47131 * C114 - C47136 * C108 + C47132 * C116 - C47138 * C109 +
              C47133 * C118 - C47140 * C110) *
                 C182 +
             (C47131 * C354 - C47136 * C348 + C47132 * C355 - C47138 * C349 +
              C47133 * C356 - C47140 * C350) *
                 C139824) *
                C92797 +
            ((C94879 - C94880 + C94881 - C94882 + C94883 - C94884) * C182 +
             (C94885 - C94886 + C94887 - C94888 + C94889 - C94890) * C139824) *
                C139899) *
               C1565 +
           (((C94880 - C94879 + C94882 - C94881 + C94884 - C94883) * C182 +
             (C94886 - C94885 + C94888 - C94887 + C94890 - C94889) * C139824) *
                C92797 +
            ((C47136 * C5273 - C47131 * C5277 + C47138 * C5274 -
              C47132 * C5279 + C47140 * C5275 - C47133 * C5281) *
                 C182 +
             (C47136 * C5455 - C47131 * C5459 + C47138 * C5456 -
              C47132 * C5460 + C47140 * C5457 - C47133 * C5461) *
                 C139824) *
                C139899) *
               C140002) *
              C2322 +
          ((((C48295 - C48294 + C48297 - C48296 + C48299 - C48298) * C182 +
             (C48301 - C48300 + C48303 - C48302 + C48305 - C48304) * C139824) *
                C92797 +
            ((C51798 - C51799 + C51800 - C51801 + C51802 - C51803) * C182 +
             (C51804 - C51805 + C51806 - C51807 + C51808 - C51809) * C139824) *
                C139899) *
               C1565 +
           (((C51799 - C51798 + C51801 - C51800 + C51803 - C51802) * C182 +
             (C51805 - C51804 + C51807 - C51806 + C51809 - C51808) * C139824) *
                C92797 +
            ((C47131 * C13130 - C47136 * C13126 + C47132 * C13132 -
              C47138 * C13127 + C47133 * C14660 - C47140 * C14659) *
                 C182 +
             (C47131 * C13384 - C47136 * C13380 + C47132 * C13385 -
              C47138 * C13381 + C47133 * C14982 - C47140 * C14981) *
                 C139824) *
                C139899) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C139731 * C114 - C54790 * C108) * C5894 +
             (C139731 * C354 - C54790 * C348) * C5813 +
             (C55513 - C55514) * C5895 + (C55515 - C55516) * C5814 +
             C57297 * C5896 + C57298 * C5815) *
                C92797 +
            ((C61976 - C61977) * C5894 + (C61978 - C61979) * C5813 +
             C64587 * C5895 + C64588 * C5814 + C88899 * C5896 +
             C88900 * C5815) *
                C139899) *
               C1565 +
           (((C61977 - C61976) * C5894 + (C61979 - C61978) * C5813 +
             C64591 * C5895 + C64592 * C5814 + C89717 * C5896 +
             C89718 * C5815) *
                C92797 +
            ((C61981 - C61980) * C5894 + (C61983 - C61982) * C5813 +
             C64593 * C5895 + C64594 * C5814 + (C63744 - C63745) * C5896 +
             (C63746 - C63747) * C5815) *
                C139899) *
               C140002) *
              C2322 +
          ((((C55514 - C55513) * C5894 + (C55516 - C55515) * C5813 +
             (C55518 - C55517) * C5895 + (C55520 - C55519) * C5814 +
             (C55522 - C55521) * C5896 + (C55524 - C55523) * C5815) *
                C92797 +
            (C64591 * C5894 + C64592 * C5813 + C89717 * C5895 + C89718 * C5814 +
             (C57891 - C57892) * C5896 + (C57893 - C57894) * C5815) *
                C139899) *
               C1565 +
           ((C64587 * C5894 + C64588 * C5813 + C88899 * C5895 + C88900 * C5814 +
             (C57892 - C57891) * C5896 + (C57894 - C57893) * C5815) *
                C92797 +
            (C64589 * C5894 + C64590 * C5813 + (C63745 - C63744) * C5895 +
             (C63747 - C63746) * C5814 +
             (C139731 * C59484 - C54790 * C59483) * C5896 +
             (C139731 * C59642 - C54790 * C59641) * C5815) *
                C139899) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eeyy[131] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C182 * C183 - C410 * C108 - C182 * C348 + C139824 * C411) *
                 C47131 +
             C442 * C47132 + C443 * C47133) *
                C92797 +
            (C95001 + C95002 + C95003) * C139899) *
               C1565 -
           ((C14204 * C47133 + C14203 * C47132 + C16193 * C47131) * C139899 +
            (C95003 + C95002 + C95001) * C92797) *
               C140002) *
              C2322 +
          (((C97485 + C97486 + C97487) * C92797 +
            (C18762 * C47131 + C15095 * C47132 +
             (C182 * C14761 - C410 * C14659 - C182 * C14981 +
              C139824 * C15081) *
                 C47133) *
                C139899) *
               C140002 -
           ((C97487 + C97486 + C97485) * C139899 +
            (C1173 * C47133 + C1174 * C47132 +
             (C182 * C896 - C410 * C813 - C182 * C1072 + C139824 * C1151) *
                 C47131) *
                C92797) *
               C1565) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5894 * C183 - C6151 * C108 - C5894 * C348 + C5813 * C411 +
             C5895 * C896 - C6152 * C813 - C5895 * C1072 + C5814 * C1151 +
             C5896 * C2974 - C6153 * C2908 - C5896 * C3090 + C5815 * C3148) *
                C139731 * C92797 +
            (C102506 + C102507 + C102508) * C139731 * C139899) *
               C1565 -
           ((C5896 * C13217 - C6153 * C13128 - C5896 * C13382 + C5815 * C13463 +
             C5895 * C13216 - C6152 * C13126 - C5895 * C13380 + C5814 * C13462 +
             C5894 * C5339 - C6151 * C5273 - C5894 * C5455 + C5813 * C5513) *
                C139731 * C139899 +
            (C102508 + C102507 + C102506) * C139731 * C92797) *
               C140002) *
              C2322 +
          (((C105044 + C105045 + C105046) * C139731 * C92797 +
            (C5894 * C13216 - C6151 * C13126 - C5894 * C13380 + C5813 * C13462 +
             C5895 * C13217 - C6152 * C13128 - C5895 * C13382 + C5814 * C13463 +
             C5896 * C59537 - C6153 * C59483 - C5896 * C59641 +
             C5815 * C59693) *
                C139731 * C139899) *
               C140002 -
           ((C105046 + C105045 + C105044) * C139731 * C139899 +
            (C5896 * C6792 - C6153 * C6627 - C5896 * C7032 + C5815 * C7169 +
             C5895 * C2974 - C6152 * C2908 - C5895 * C3090 + C5814 * C3148 +
             C5894 * C896 - C6151 * C813 - C5894 * C1072 + C5813 * C1151) *
                C139731 * C92797) *
               C1565) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eeyz[131] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C92797 * C266 - C92947 * C108 + C139899 * C1741 -
              C92948 * C1570) *
                 C182 +
             (C92797 * C495 - C92947 * C348 + C139899 * C1997 -
              C92948 * C1829) *
                 C139824) *
                C47131 +
            ((C92950 - C92951 + C92952 - C92953) * C182 +
             (C93202 - C93203 + C93204 - C93205) * C139824) *
                C47132 +
            C93219 * C47133) *
               C1565 +
           (((C92947 * C1570 - C92797 * C1741 + C92948 * C5273 -
              C139899 * C5397) *
                 C182 +
             (C92947 * C1829 - C92797 * C1997 + C92948 * C5455 -
              C139899 * C5567) *
                 C139824) *
                C47131 +
            ((C94765 - C94766 + C94767 - C94768) * C182 +
             (C95105 - C95106 + C95107 - C95108) * C139824) *
                C47132 +
            ((C94773 - C94774 + C94775 - C94776) * C182 +
             (C95109 - C95110 + C95111 - C95112) * C139824) *
                C47133) *
               C140002) *
              C2322 +
          ((((C92947 * C813 - C92797 * C984 + C92948 * C3438 -
              C139899 * C3594) *
                 C182 +
             (C92947 * C1072 - C92797 * C1240 + C92948 * C3668 -
              C139899 * C3812) *
                 C139824) *
                C47131 +
            ((C93789 - C93790 + C93791 - C93792) * C182 +
             (C94099 - C94100 + C94101 - C94102) * C139824) *
                C47132 +
            ((C93797 - C93798 + C93799 - C93800) * C182 +
             (C94103 - C94104 + C94105 - C94106) * C139824) *
                C47133) *
               C1565 +
           (((C92797 * C3594 - C92947 * C3438 + C139899 * C13298 -
              C92948 * C13126) *
                 C182 +
             (C92797 * C3812 - C92947 * C3668 + C139899 * C13540 -
              C92948 * C13380) *
                 C139824) *
                C47131 +
            ((C92797 * C3595 - C92947 * C3439 + C139899 * C13299 -
              C92948 * C13127) *
                 C182 +
             (C92797 * C3813 - C92947 * C3669 + C139899 * C13542 -
              C92948 * C13381) *
                 C139824) *
                C47132 +
            ((C92797 * C3596 - C92947 * C3440 + C139899 * C14869 -
              C92948 * C14659) *
                 C182 +
             (C92797 * C3814 - C92947 * C3670 + C139899 * C15194 -
              C92948 * C14981) *
                 C139824) *
                C47133) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92797 * C266 - C92947 * C108 + C139899 * C1741 - C92948 * C1570) *
                C5894 +
            (C92797 * C495 - C92947 * C348 + C139899 * C1997 - C92948 * C1829) *
                C5813 +
            (C101320 - C101321 + C101322 - C101323) * C5895 +
            (C101638 - C101639 + C101640 - C101641) * C5814 + C104026 * C5896 +
            C104259 * C5815) *
               C139731 * C1565 +
           ((C92947 * C1570 - C92797 * C1741 + C92948 * C5273 -
             C139899 * C5397) *
                C5894 +
            (C92947 * C1829 - C92797 * C1997 + C92948 * C5455 -
             C139899 * C5567) *
                C5813 +
            (C104814 - C104815 + C104816 - C104817) * C5895 +
            (C105145 - C105146 + C105147 - C105148) * C5814 +
            (C104822 - C104823 + C104824 - C104825) * C5896 +
            (C105149 - C105150 + C105151 - C105152) * C5815) *
               C139731 * C140002) *
              C2322 +
          (((C101321 - C101320 + C101323 - C101322) * C5894 +
            (C101639 - C101638 + C101641 - C101640) * C5813 +
            (C101329 - C101328 + C101331 - C101330) * C5895 +
            (C101643 - C101642 + C101645 - C101644) * C5814 +
            (C104018 - C104019 + C104020 - C104021) * C5896 +
            (C104255 - C104256 + C104257 - C104258) * C5815) *
               C139731 * C1565 +
           ((C104815 - C104814 + C104817 - C104816) * C5894 +
            (C105146 - C105145 + C105148 - C105147) * C5813 +
            (C104823 - C104822 + C104825 - C104824) * C5895 +
            (C105150 - C105149 + C105152 - C105151) * C5814 +
            (C92797 * C10630 - C92947 * C10394 + C139899 * C59589 -
             C92948 * C59483) *
                C5896 +
            (C92797 * C10958 - C92947 * C10740 + C139899 * C59744 -
             C92948 * C59641) *
                C5815) *
               C139731 * C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eezx[131] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47131 * C114 - C47136 * C108 + C47132 * C116 - C47138 * C109 +
             C47133 * C118 - C47140 * C110) *
                C92947 +
            (C47131 * C573 - C47136 * C567 + C47132 * C574 - C47138 * C568 +
             C47133 * C575 - C47140 * C569) *
                C92797 +
            (C94879 - C94880 + C94881 - C94882 + C94883 - C94884) * C92948 +
            (C95211 - C95212 + C95213 - C95214 + C95215 - C95216) * C139899) *
               C139824 * C1565 +
           ((C94880 - C94879 + C94882 - C94881 + C94884 - C94883) * C92947 +
            (C95212 - C95211 + C95214 - C95213 + C95216 - C95215) * C92797 +
            (C47136 * C5273 - C47131 * C5277 + C47138 * C5274 - C47132 * C5279 +
             C47140 * C5275 - C47133 * C5281) *
                C92948 +
            (C47136 * C5621 - C47131 * C5625 + C47138 * C5622 - C47132 * C5626 +
             C47140 * C5623 - C47133 * C5627) *
                C139899) *
               C139824 * C140002) *
              C2322 +
          (((C48295 - C48294 + C48297 - C48296 + C48299 - C48298) * C92947 +
            (C48641 - C48640 + C48643 - C48642 + C48645 - C48644) * C92797 +
            (C51798 - C51799 + C51800 - C51801 + C51802 - C51803) * C92948 +
            (C52104 - C52105 + C52106 - C52107 + C52108 - C52109) * C139899) *
               C139824 * C1565 +
           ((C51799 - C51798 + C51801 - C51800 + C51803 - C51802) * C92947 +
            (C52105 - C52104 + C52107 - C52106 + C52109 - C52108) * C92797 +
            (C47131 * C13130 - C47136 * C13126 + C47132 * C13132 -
             C47138 * C13127 + C47133 * C14660 - C47140 * C14659) *
                C92948 +
            (C47131 * C13622 - C47136 * C13618 + C47132 * C13623 -
             C47138 * C13619 + C47133 * C15300 - C47140 * C15299) *
                C139899) *
               C139824 * C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C139731 * C114 - C54790 * C108) * C92947 +
             (C139731 * C573 - C54790 * C567) * C92797 +
             (C61976 - C61977) * C92948 + (C62328 - C62329) * C139899) *
                C5813 +
            ((C55513 - C55514) * C92947 + (C55735 - C55736) * C92797 +
             C64587 * C92948 + C64931 * C139899) *
                C5814 +
            C104340 * C5815) *
               C1565 +
           (((C61977 - C61976) * C92947 + (C62329 - C62328) * C92797 +
             (C61981 - C61980) * C92948 + (C62331 - C62330) * C139899) *
                C5813 +
            (C64591 * C92947 + C64933 * C92797 + C64593 * C92948 +
             C64934 * C139899) *
                C5814 +
            (C89717 * C92947 + C90038 * C92797 + (C63744 - C63745) * C92948 +
             (C63976 - C63977) * C139899) *
                C5815) *
               C140002) *
              C2322 +
          ((((C55514 - C55513) * C92947 + (C55736 - C55735) * C92797 +
             C64591 * C92948 + C64933 * C139899) *
                C5813 +
            ((C55518 - C55517) * C92947 + (C55738 - C55737) * C92797 +
             C89717 * C92948 + C90038 * C139899) *
                C5814 +
            ((C55522 - C55521) * C92947 + (C55740 - C55739) * C92797 +
             (C57891 - C57892) * C92948 + (C58103 - C58104) * C139899) *
                C5815) *
               C1565 +
           ((C64587 * C92947 + C64931 * C92797 + C64589 * C92948 +
             C64932 * C139899) *
                C5813 +
            (C88899 * C92947 + C89133 * C92797 + (C63745 - C63744) * C92948 +
             (C63977 - C63976) * C139899) *
                C5814 +
            ((C57892 - C57891) * C92947 + (C58104 - C58103) * C92797 +
             (C139731 * C59484 - C54790 * C59483) * C92948 +
             (C139731 * C59796 - C54790 * C59795) * C139899) *
                C5815) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eezy[131] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C139824 * C183 - C182 * C108) * C92947 +
             (C139824 * C629 - C182 * C567) * C92797 +
             (C15795 - C15796) * C92948 + (C16525 - C16526) * C139899) *
                C47131 +
            ((C196 - C197) * C92947 + (C636 - C637) * C92797 + C15799 * C92948 +
             C16529 * C139899) *
                C47132 +
            C93374 * C47133) *
               C1565 +
           (((C15796 - C15795) * C92947 + (C16526 - C16525) * C92797 +
             (C15802 - C15801) * C92948 + (C16528 - C16527) * C139899) *
                C47131 +
            (C15807 * C92947 + C16531 * C92797 + C15809 * C92948 +
             C16532 * C139899) *
                C47132 +
            (C31358 * C92947 + C32014 * C92797 + (C13938 - C13939) * C92948 +
             (C14441 - C14442) * C139899) *
                C47133) *
               C140002) *
              C2322 +
          ((((C182 * C813 - C139824 * C896) * C92947 +
             (C182 * C1317 - C139824 * C1393) * C92797 +
             (C18427 - C18428) * C92948 + (C19071 - C19072) * C139899) *
                C47131 +
            ((C907 - C908) * C92947 + (C1399 - C1400) * C92797 +
             (C14764 - C14765) * C92948 + (C15401 - C15402) * C139899) *
                C47132 +
            ((C911 - C912) * C92947 + (C1401 - C1402) * C92797 +
             (C30369 - C30370) * C92948 + (C30992 - C30993) * C139899) *
                C47133) *
               C1565 +
           (((C18428 - C18427) * C92947 + (C19072 - C19071) * C92797 +
             (C18432 - C18431) * C92948 + (C19074 - C19073) * C139899) *
                C47131 +
            ((C14765 - C14764) * C92947 + (C15402 - C15401) * C92797 +
             (C14769 - C14768) * C92948 + (C15404 - C15403) * C139899) *
                C47132 +
            ((C30370 - C30369) * C92947 + (C30993 - C30992) * C92797 +
             (C139824 * C14761 - C182 * C14659) * C92948 +
             (C139824 * C15399 - C182 * C15299) * C139899) *
                C47133) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5813 * C183 - C5894 * C108 + C5814 * C896 - C5895 * C813 +
             C5815 * C2974 - C5896 * C2908) *
                C92947 +
            (C5813 * C629 - C5894 * C567 + C5814 * C1393 - C5895 * C1317 +
             C5815 * C3314 - C5896 * C3256) *
                C92797 +
            (C102182 - C102183 + C102184 - C102185 + C102186 - C102187) *
                C92948 +
            (C102803 - C102804 + C102805 - C102806 + C102807 - C102808) *
                C139899) *
               C139731 * C1565 +
           ((C102183 - C102182 + C102185 - C102184 + C102187 - C102186) *
                C92947 +
            (C102804 - C102803 + C102806 - C102805 + C102808 - C102807) *
                C92797 +
            (C5894 * C5273 - C5813 * C5339 + C5895 * C13126 - C5814 * C13216 +
             C5896 * C13128 - C5815 * C13217) *
                C92948 +
            (C5894 * C5621 - C5813 * C5679 + C5895 * C13618 - C5814 * C13700 +
             C5896 * C13620 - C5815 * C13701) *
                C139899) *
               C139731 * C140002) *
              C2322 +
          (((C5894 * C813 - C5813 * C896 + C5895 * C2908 - C5814 * C2974 +
             C5896 * C6627 - C5815 * C6792) *
                C92947 +
            (C5894 * C1317 - C5813 * C1393 + C5895 * C3256 - C5814 * C3314 +
             C5896 * C7401 - C5815 * C7521) *
                C92797 +
            (C104704 - C104705 + C104706 - C104707 + C104708 - C104709) *
                C92948 +
            (C105349 - C105350 + C105351 - C105352 + C105353 - C105354) *
                C139899) *
               C139731 * C1565 +
           ((C104705 - C104704 + C104707 - C104706 + C104709 - C104708) *
                C92947 +
            (C105350 - C105349 + C105352 - C105351 + C105354 - C105353) *
                C92797 +
            (C5813 * C13216 - C5894 * C13126 + C5814 * C13217 - C5895 * C13128 +
             C5815 * C59537 - C5896 * C59483) *
                C92948 +
            (C5813 * C13700 - C5894 * C13618 + C5814 * C13701 - C5895 * C13620 +
             C5815 * C59847 - C5896 * C59795) *
                C139899) *
               C139731 * C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eezz[131] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92947 * C266 - C93448 * C108 - C92947 * C567 + C92797 * C702 +
             C92948 * C1741 - C93449 * C1570 - C92948 * C2074 +
             C139899 * C2230) *
                C139824 * C47131 +
            (C93487 + C93488) * C139824 * C47132 + C93494 * C47133) *
               C1565 -
           ((C95443 + C95444) * C139824 * C47133 +
            (C95445 + C95446) * C139824 * C47132 +
            (C92948 * C5397 - C93449 * C5273 - C92948 * C5621 +
             C139899 * C5733 + C92947 * C1741 - C93448 * C1570 -
             C92947 * C2074 + C92797 * C2230) *
                C139824 * C47131) *
               C140002) *
              C2322 +
          (((C92947 * C3594 - C93448 * C3438 - C92947 * C3882 + C92797 * C4026 +
             C92948 * C13298 - C93449 * C13126 - C92948 * C13618 +
             C139899 * C13778) *
                C139824 * C47131 +
            (C92947 * C3595 - C93448 * C3439 - C92947 * C3883 + C92797 * C4027 +
             C92948 * C13299 - C93449 * C13127 - C92948 * C13619 +
             C139899 * C13780) *
                C139824 * C47132 +
            (C92947 * C3596 - C93448 * C3440 - C92947 * C3884 + C92797 * C4028 +
             C92948 * C14869 - C93449 * C14659 - C92948 * C15299 +
             C139899 * C15502) *
                C139824 * C47133) *
               C140002 -
           ((C94425 + C94426) * C139824 * C47133 +
            (C94427 + C94428) * C139824 * C47132 +
            (C92948 * C3594 - C93449 * C3438 - C92948 * C3882 +
             C139899 * C4026 + C92947 * C984 - C93448 * C813 - C92947 * C1317 +
             C92797 * C1473) *
                C139824 * C47131) *
               C1565) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92947 * C266 - C93448 * C108 - C92947 * C567 + C92797 * C702 +
             C92948 * C1741 - C93449 * C1570 - C92948 * C2074 +
             C139899 * C2230) *
                C5813 +
            (C101980 + C101981) * C5814 + C104489 * C5815) *
               C139731 * C1565 -
           ((C105477 + C105478) * C5815 + (C105479 + C105480) * C5814 +
            (C92948 * C5397 - C93449 * C5273 - C92948 * C5621 +
             C139899 * C5733 + C92947 * C1741 - C93448 * C1570 -
             C92947 * C2074 + C92797 * C2230) *
                C5813) *
               C139731 * C140002) *
              C2322 +
          (((C105480 + C105479) * C5813 + (C105478 + C105477) * C5814 +
            (C92947 * C10630 - C93448 * C10394 - C92947 * C11062 +
             C92797 * C11272 + C92948 * C59589 - C93449 * C59483 -
             C92948 * C59795 + C139899 * C59898) *
                C5815) *
               C139731 * C140002 -
           ((C104502 + C104503) * C5815 + (C101983 + C101982) * C5814 +
            (C101981 + C101980) * C5813) *
               C139731 * C1565) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eexx[132] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47136 * C114 - C47137 * C108 - C47136 * C115 + C47131 * C126 +
             C47138 * C116 - C47139 * C109 - C47138 * C117 + C47132 * C127 +
             C47140 * C118 - C47141 * C110 - C47140 * C119 + C47133 * C128) *
                C92797 +
            (C94563 + C94564 + C94565) * C139899) *
               C139824 * C4096 -
           ((C47140 * C5281 - C47141 * C5275 - C47140 * C5282 + C47133 * C5287 +
             C47138 * C5279 - C47139 * C5274 - C47138 * C5280 + C47132 * C5286 +
             C47136 * C5277 - C47137 * C5273 - C47136 * C5278 +
             C47131 * C5285) *
                C139899 +
            (C94565 + C94564 + C94563) * C92797) *
               C139824 * C140002) *
              C139792 * C2324 +
          (((C94566 + C94567 + C94568) * C92797 +
            (C47136 * C5279 - C47137 * C5274 - C47136 * C5280 + C47131 * C5286 +
             C47138 * C5281 - C47139 * C5275 - C47138 * C5282 + C47132 * C5287 +
             C47140 * C5283 - C47141 * C5276 - C47140 * C5284 +
             C47133 * C5288) *
                C139899) *
               C139824 * C140002 -
           ((C94568 + C94567 + C94566) * C139899 +
            (C47140 * C120 - C47141 * C111 - C47140 * C121 + C47133 * C129 +
             C47138 * C118 - C47139 * C110 - C47138 * C119 + C47132 * C128 +
             C47136 * C116 - C47137 * C109 - C47136 * C117 + C47131 * C127) *
                C92797) *
               C139824 * C4096) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C54790 * C114 - C54791 * C108 - C54790 * C115 + C139731 * C126) *
                 C92797 +
             C61654 * C139899) *
                C5813 +
            (C101116 + C101117) * C5814 + C103863 * C5815) *
               C4096 -
           ((C104602 + C104603) * C5815 + (C104604 + C104605) * C5814 +
            (C61655 * C139899 + C61654 * C92797) * C5813) *
               C140002) *
              C139792 * C2324 +
          (((C61656 * C92797 + C61657 * C139899) * C5813 +
            (C60686 * C92797 + C60687 * C139899) * C5814 +
            (C85988 * C92797 + (C54790 * C13136 - C54791 * C13129 -
                                C54790 * C13137 + C139731 * C13141) *
                                   C139899) *
                C5815) *
               C140002 -
           ((C101123 + C101122) * C5815 + (C101121 + C101120) * C5814 +
            (C61656 * C139899 +
             (C54790 * C116 - C54791 * C109 - C54790 * C117 + C139731 * C127) *
                 C92797) *
                C5813) *
               C4096) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eexy[132] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C139824 * C183 - C182 * C108) * C47136 +
             (C139824 * C189 - C182 * C115) * C47131 + (C196 - C197) * C47138 +
             (C198 - C199) * C47132 + C212 * C47140 + C213 * C47133) *
                C92797 +
            ((C15795 - C15796) * C47136 + (C15797 - C15798) * C47131 +
             C15799 * C47138 + C15800 * C47132 + C29549 * C47140 +
             C29550 * C47133) *
                C139899) *
               C4096 +
           (((C15796 - C15795) * C47136 + (C15798 - C15797) * C47131 +
             C15807 * C47138 + C15808 * C47132 + C31358 * C47140 +
             C31359 * C47133) *
                C92797 +
            ((C15802 - C15801) * C47136 + (C15804 - C15803) * C47131 +
             C15809 * C47138 + C15810 * C47132 + (C13938 - C13939) * C47140 +
             (C13940 - C13941) * C47133) *
                C139899) *
               C140002) *
              C139792 * C2324 +
          ((((C197 - C196) * C47136 + (C199 - C198) * C47131 +
             (C201 - C200) * C47138 + (C203 - C202) * C47132 +
             (C205 - C204) * C47140 + (C207 - C206) * C47133) *
                C92797 +
            (C15807 * C47136 + C15808 * C47131 + C31358 * C47138 +
             C31359 * C47132 + (C1672 - C1673) * C47140 +
             (C1674 - C1675) * C47133) *
                C139899) *
               C4096 +
           ((C15799 * C47136 + C15800 * C47131 + C29549 * C47138 +
             C29550 * C47132 + (C1673 - C1672) * C47140 +
             (C1675 - C1674) * C47133) *
                C92797 +
            (C15805 * C47136 + C15806 * C47131 + (C13939 - C13938) * C47138 +
             (C13941 - C13940) * C47132 +
             (C139824 * C5342 - C182 * C5276) * C47140 +
             (C139824 * C5346 - C182 * C5284) * C47133) *
                C139899) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5813 * C183 - C5894 * C108 + C5814 * C896 - C5895 * C813 +
              C5815 * C2974 - C5896 * C2908) *
                 C54790 +
             (C5813 * C189 - C5894 * C115 + C5814 * C901 - C5895 * C822 +
              C5815 * C2978 - C5896 * C2913) *
                 C139731) *
                C92797 +
            ((C102182 - C102183 + C102184 - C102185 + C102186 - C102187) *
                 C54790 +
             (C102188 - C102189 + C102190 - C102191 + C102192 - C102193) *
                 C139731) *
                C139899) *
               C4096 +
           (((C102183 - C102182 + C102185 - C102184 + C102187 - C102186) *
                 C54790 +
             (C102189 - C102188 + C102191 - C102190 + C102193 - C102192) *
                 C139731) *
                C92797 +
            ((C5894 * C5273 - C5813 * C5339 + C5895 * C13126 - C5814 * C13216 +
              C5896 * C13128 - C5815 * C13217) *
                 C54790 +
             (C5894 * C5278 - C5813 * C5343 + C5895 * C13131 - C5814 * C13220 +
              C5896 * C13135 - C5815 * C13221) *
                 C139731) *
                C139899) *
               C140002) *
              C139792 * C2324 +
          ((((C5899 - C5898 + C5901 - C5900 + C5903 - C5902) * C54790 +
             (C5905 - C5904 + C5907 - C5906 + C5909 - C5908) * C139731) *
                C92797 +
            ((C7870 - C7871 + C7872 - C7873 + C7874 - C7875) * C54790 +
             (C7876 - C7877 + C7878 - C7879 + C7880 - C7881) * C139731) *
                C139899) *
               C4096 +
           (((C7871 - C7870 + C7873 - C7872 + C7875 - C7874) * C54790 +
             (C7877 - C7876 + C7879 - C7878 + C7881 - C7880) * C139731) *
                C92797 +
            ((C5813 * C5340 - C5894 * C5274 + C5814 * C13218 - C5895 * C13127 +
              C5815 * C13219 - C5896 * C13129) *
                 C54790 +
             (C5813 * C5344 - C5894 * C5280 + C5814 * C13222 - C5895 * C13133 +
              C5815 * C13223 - C5896 * C13137) *
                 C139731) *
                C139899) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eexz[132] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92797 * C266 - C92947 * C108 + C139899 * C1741 - C92948 * C1570) *
                C47136 +
            (C92797 * C272 - C92947 * C115 + C139899 * C1746 - C92948 * C1579) *
                C47131 +
            (C92950 - C92951 + C92952 - C92953) * C47138 +
            (C92954 - C92955 + C92956 - C92957) * C47132 + C92978 * C47140 +
            C92979 * C47133) *
               C139824 * C4096 +
           ((C92947 * C1570 - C92797 * C1741 + C92948 * C5273 -
             C139899 * C5397) *
                C47136 +
            (C92947 * C1579 - C92797 * C1746 + C92948 * C5278 -
             C139899 * C5401) *
                C47131 +
            (C94765 - C94766 + C94767 - C94768) * C47138 +
            (C94769 - C94770 + C94771 - C94772) * C47132 +
            (C94773 - C94774 + C94775 - C94776) * C47140 +
            (C94777 - C94778 + C94779 - C94780) * C47133) *
               C139824 * C140002) *
              C139792 * C2324 +
          (((C92951 - C92950 + C92953 - C92952) * C47136 +
            (C92955 - C92954 + C92957 - C92956) * C47131 +
            (C92959 - C92958 + C92961 - C92960) * C47138 +
            (C92963 - C92962 + C92965 - C92964) * C47132 +
            (C92966 - C92967 + C92968 - C92969) * C47140 +
            (C92970 - C92971 + C92972 - C92973) * C47133) *
               C139824 * C4096 +
           ((C94766 - C94765 + C94768 - C94767) * C47136 +
            (C94770 - C94769 + C94772 - C94771) * C47131 +
            (C94774 - C94773 + C94776 - C94775) * C47138 +
            (C94778 - C94777 + C94780 - C94779) * C47132 +
            (C92797 * C1744 - C92947 * C1567 + C139899 * C5400 -
             C92948 * C5276) *
                C47140 +
            (C92797 * C1749 - C92947 * C1573 + C139899 * C5404 -
             C92948 * C5284) *
                C47133) *
               C139824 * C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C92797 * C266 - C92947 * C108 + C139899 * C1741 -
              C92948 * C1570) *
                 C54790 +
             (C92797 * C272 - C92947 * C115 + C139899 * C1746 -
              C92948 * C1579) *
                 C139731) *
                C5813 +
            ((C101320 - C101321 + C101322 - C101323) * C54790 +
             (C101324 - C101325 + C101326 - C101327) * C139731) *
                C5814 +
            C104030 * C5815) *
               C4096 +
           (((C92947 * C1570 - C92797 * C1741 + C92948 * C5273 -
              C139899 * C5397) *
                 C54790 +
             (C92947 * C1579 - C92797 * C1746 + C92948 * C5278 -
              C139899 * C5401) *
                 C139731) *
                C5813 +
            ((C104814 - C104815 + C104816 - C104817) * C54790 +
             (C104818 - C104819 + C104820 - C104821) * C139731) *
                C5814 +
            ((C104822 - C104823 + C104824 - C104825) * C54790 +
             (C104826 - C104827 + C104828 - C104829) * C139731) *
                C5815) *
               C140002) *
              C139792 * C2324 +
          ((((C92951 - C92950 + C92953 - C92952) * C54790 +
             (C92955 - C92954 + C92957 - C92956) * C139731) *
                C5813 +
            ((C93789 - C93790 + C93791 - C93792) * C54790 +
             (C93793 - C93794 + C93795 - C93796) * C139731) *
                C5814 +
            ((C101336 - C101337 + C101338 - C101339) * C54790 +
             (C101340 - C101341 + C101342 - C101343) * C139731) *
                C5815) *
               C4096 +
           (((C94766 - C94765 + C94768 - C94767) * C54790 +
             (C94770 - C94769 + C94772 - C94771) * C139731) *
                C5813 +
            ((C92797 * C3595 - C92947 * C3439 + C139899 * C13299 -
              C92948 * C13127) *
                 C54790 +
             (C92797 * C3599 - C92947 * C3445 + C139899 * C13303 -
              C92948 * C13133) *
                 C139731) *
                C5814 +
            ((C92797 * C7980 - C92947 * C7753 + C139899 * C13301 -
              C92948 * C13129) *
                 C54790 +
             (C92797 * C7983 - C92947 * C7757 + C139899 * C13305 -
              C92948 * C13137) *
                 C139731) *
                C5815) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[132] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47131 * C114 - C47136 * C108 + C47132 * C116 - C47138 * C109 +
              C47133 * C118 - C47140 * C110) *
                 C182 +
             (C47131 * C354 - C47136 * C348 + C47132 * C355 - C47138 * C349 +
              C47133 * C356 - C47140 * C350) *
                 C139824) *
                C92797 +
            ((C94879 - C94880 + C94881 - C94882 + C94883 - C94884) * C182 +
             (C94885 - C94886 + C94887 - C94888 + C94889 - C94890) * C139824) *
                C139899) *
               C4096 +
           (((C94880 - C94879 + C94882 - C94881 + C94884 - C94883) * C182 +
             (C94886 - C94885 + C94888 - C94887 + C94890 - C94889) * C139824) *
                C92797 +
            ((C47136 * C5273 - C47131 * C5277 + C47138 * C5274 -
              C47132 * C5279 + C47140 * C5275 - C47133 * C5281) *
                 C182 +
             (C47136 * C5455 - C47131 * C5459 + C47138 * C5456 -
              C47132 * C5460 + C47140 * C5457 - C47133 * C5461) *
                 C139824) *
                C139899) *
               C140002) *
              C139792 * C2324 +
          ((((C47136 * C109 - C47131 * C116 + C47138 * C110 - C47132 * C118 +
              C47140 * C111 - C47133 * C120) *
                 C182 +
             (C47136 * C349 - C47131 * C355 + C47138 * C350 - C47132 * C356 +
              C47140 * C351 - C47133 * C357) *
                 C139824) *
                C92797 +
            ((C94891 - C94892 + C94893 - C94894 + C94895 - C94896) * C182 +
             (C94897 - C94898 + C94899 - C94900 + C94901 - C94902) * C139824) *
                C139899) *
               C4096 +
           (((C94892 - C94891 + C94894 - C94893 + C94896 - C94895) * C182 +
             (C94898 - C94897 + C94900 - C94899 + C94902 - C94901) * C139824) *
                C92797 +
            ((C47131 * C5279 - C47136 * C5274 + C47132 * C5281 -
              C47138 * C5275 + C47133 * C5283 - C47140 * C5276) *
                 C182 +
             (C47131 * C5460 - C47136 * C5456 + C47132 * C5461 -
              C47138 * C5457 + C47133 * C5462 - C47140 * C5458) *
                 C139824) *
                C139899) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C139731 * C114 - C54790 * C108) * C5894 +
             (C139731 * C354 - C54790 * C348) * C5813 +
             (C55513 - C55514) * C5895 + (C55515 - C55516) * C5814 +
             C57297 * C5896 + C57298 * C5815) *
                C92797 +
            ((C61976 - C61977) * C5894 + (C61978 - C61979) * C5813 +
             C64587 * C5895 + C64588 * C5814 + C88899 * C5896 +
             C88900 * C5815) *
                C139899) *
               C4096 +
           (((C61977 - C61976) * C5894 + (C61979 - C61978) * C5813 +
             C64591 * C5895 + C64592 * C5814 + C89717 * C5896 +
             C89718 * C5815) *
                C92797 +
            ((C61981 - C61980) * C5894 + (C61983 - C61982) * C5813 +
             C64593 * C5895 + C64594 * C5814 + (C63744 - C63745) * C5896 +
             (C63746 - C63747) * C5815) *
                C139899) *
               C140002) *
              C139792 * C2324 +
          ((((C54790 * C109 - C139731 * C116) * C5894 +
             (C54790 * C349 - C139731 * C355) * C5813 +
             (C55525 - C55526) * C5895 + (C55527 - C55528) * C5814 +
             (C55529 - C55530) * C5896 + (C55531 - C55532) * C5815) *
                C92797 +
            ((C61984 - C61985) * C5894 + (C61986 - C61987) * C5813 +
             (C61001 - C61002) * C5895 + (C61003 - C61004) * C5814 +
             (C86284 - C86285) * C5896 + (C86286 - C86287) * C5815) *
                C139899) *
               C4096 +
           (((C61985 - C61984) * C5894 + (C61987 - C61986) * C5813 +
             (C61002 - C61001) * C5895 + (C61004 - C61003) * C5814 +
             (C86285 - C86284) * C5896 + (C86287 - C86286) * C5815) *
                C92797 +
            ((C61989 - C61988) * C5894 + (C61991 - C61990) * C5813 +
             (C61006 - C61005) * C5895 + (C61008 - C61007) * C5814 +
             (C139731 * C13136 - C54790 * C13129) * C5896 +
             (C139731 * C13387 - C54790 * C13383) * C5815) *
                C139899) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[132] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C182 * C183 - C410 * C108 - C182 * C348 + C139824 * C411) *
                 C47131 +
             C442 * C47132 + C443 * C47133) *
                C92797 +
            (C95001 + C95002 + C95003) * C139899) *
               C4096 -
           ((C14204 * C47133 + C14203 * C47132 + C16193 * C47131) * C139899 +
            (C95003 + C95002 + C95001) * C92797) *
               C140002) *
              C139792 * C2324 +
          (((C95004 + C95005 + C95006) * C92797 +
            (C14203 * C47131 + C14204 * C47132 +
             (C182 * C5342 - C410 * C5276 - C182 * C5458 + C139824 * C5516) *
                 C47133) *
                C139899) *
               C140002 -
           ((C95006 + C95005 + C95004) * C139899 +
            (C444 * C47133 + C443 * C47132 + C442 * C47131) * C92797) *
               C4096) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5894 * C183 - C6151 * C108 - C5894 * C348 + C5813 * C411 +
             C5895 * C896 - C6152 * C813 - C5895 * C1072 + C5814 * C1151 +
             C5896 * C2974 - C6153 * C2908 - C5896 * C3090 + C5815 * C3148) *
                C139731 * C92797 +
            (C102506 + C102507 + C102508) * C139731 * C139899) *
               C4096 -
           ((C5896 * C13217 - C6153 * C13128 - C5896 * C13382 + C5815 * C13463 +
             C5895 * C13216 - C6152 * C13126 - C5895 * C13380 + C5814 * C13462 +
             C5894 * C5339 - C6151 * C5273 - C5894 * C5455 + C5813 * C5513) *
                C139731 * C139899 +
            (C102508 + C102507 + C102506) * C139731 * C92797) *
               C140002) *
              C139792 * C2324 +
          (((C8219 + C8218 + C8217) * C139731 * C92797 +
            (C5894 * C5340 - C6151 * C5274 - C5894 * C5456 + C5813 * C5514 +
             C5895 * C13218 - C6152 * C13127 - C5895 * C13381 + C5814 * C13464 +
             C5896 * C13219 - C6153 * C13129 - C5896 * C13383 +
             C5815 * C13465) *
                C139731 * C139899) *
               C140002 -
           ((C8217 + C8218 + C8219) * C139731 * C139899 +
            (C6193 + C6192 + C6191) * C139731 * C92797) *
               C4096) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[132] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C92797 * C266 - C92947 * C108 + C139899 * C1741 -
              C92948 * C1570) *
                 C182 +
             (C92797 * C495 - C92947 * C348 + C139899 * C1997 -
              C92948 * C1829) *
                 C139824) *
                C47131 +
            ((C92950 - C92951 + C92952 - C92953) * C182 +
             (C93202 - C93203 + C93204 - C93205) * C139824) *
                C47132 +
            C93219 * C47133) *
               C4096 +
           (((C92947 * C1570 - C92797 * C1741 + C92948 * C5273 -
              C139899 * C5397) *
                 C182 +
             (C92947 * C1829 - C92797 * C1997 + C92948 * C5455 -
              C139899 * C5567) *
                 C139824) *
                C47131 +
            ((C94765 - C94766 + C94767 - C94768) * C182 +
             (C95105 - C95106 + C95107 - C95108) * C139824) *
                C47132 +
            ((C94773 - C94774 + C94775 - C94776) * C182 +
             (C95109 - C95110 + C95111 - C95112) * C139824) *
                C47133) *
               C140002) *
              C139792 * C2324 +
          ((((C92951 - C92950 + C92953 - C92952) * C182 +
             (C93203 - C93202 + C93205 - C93204) * C139824) *
                C47131 +
            ((C92959 - C92958 + C92961 - C92960) * C182 +
             (C93208 - C93207 + C93210 - C93209) * C139824) *
                C47132 +
            ((C92966 - C92967 + C92968 - C92969) * C182 +
             (C93211 - C93212 + C93213 - C93214) * C139824) *
                C47133) *
               C4096 +
           (((C94766 - C94765 + C94768 - C94767) * C182 +
             (C95106 - C95105 + C95108 - C95107) * C139824) *
                C47131 +
            ((C94774 - C94773 + C94776 - C94775) * C182 +
             (C95110 - C95109 + C95112 - C95111) * C139824) *
                C47132 +
            ((C92797 * C1744 - C92947 * C1567 + C139899 * C5400 -
              C92948 * C5276) *
                 C182 +
             (C92797 * C2000 - C92947 * C1832 + C139899 * C5570 -
              C92948 * C5458) *
                 C139824) *
                C47133) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92797 * C266 - C92947 * C108 + C139899 * C1741 - C92948 * C1570) *
                C5894 +
            (C92797 * C495 - C92947 * C348 + C139899 * C1997 - C92948 * C1829) *
                C5813 +
            (C101320 - C101321 + C101322 - C101323) * C5895 +
            (C101638 - C101639 + C101640 - C101641) * C5814 + C104026 * C5896 +
            C104259 * C5815) *
               C139731 * C4096 +
           ((C92947 * C1570 - C92797 * C1741 + C92948 * C5273 -
             C139899 * C5397) *
                C5894 +
            (C92947 * C1829 - C92797 * C1997 + C92948 * C5455 -
             C139899 * C5567) *
                C5813 +
            (C104814 - C104815 + C104816 - C104817) * C5895 +
            (C105145 - C105146 + C105147 - C105148) * C5814 +
            (C104822 - C104823 + C104824 - C104825) * C5896 +
            (C105149 - C105150 + C105151 - C105152) * C5815) *
               C139731 * C140002) *
              C139792 * C2324 +
          (((C92951 - C92950 + C92953 - C92952) * C5894 +
            (C93203 - C93202 + C93205 - C93204) * C5813 +
            (C93789 - C93790 + C93791 - C93792) * C5895 +
            (C94099 - C94100 + C94101 - C94102) * C5814 +
            (C101336 - C101337 + C101338 - C101339) * C5896 +
            (C101646 - C101647 + C101648 - C101649) * C5815) *
               C139731 * C4096 +
           ((C94766 - C94765 + C94768 - C94767) * C5894 +
            (C95106 - C95105 + C95108 - C95107) * C5813 +
            (C92797 * C3595 - C92947 * C3439 + C139899 * C13299 -
             C92948 * C13127) *
                C5895 +
            (C92797 * C3813 - C92947 * C3669 + C139899 * C13542 -
             C92948 * C13381) *
                C5814 +
            (C92797 * C7980 - C92947 * C7753 + C139899 * C13301 -
             C92948 * C13129) *
                C5896 +
            (C92797 * C8318 - C92947 * C8092 + C139899 * C13543 -
             C92948 * C13383) *
                C5815) *
               C139731 * C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eezx[132] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47131 * C114 - C47136 * C108 + C47132 * C116 - C47138 * C109 +
             C47133 * C118 - C47140 * C110) *
                C92947 +
            (C47131 * C573 - C47136 * C567 + C47132 * C574 - C47138 * C568 +
             C47133 * C575 - C47140 * C569) *
                C92797 +
            (C94879 - C94880 + C94881 - C94882 + C94883 - C94884) * C92948 +
            (C95211 - C95212 + C95213 - C95214 + C95215 - C95216) * C139899) *
               C139824 * C4096 +
           ((C94880 - C94879 + C94882 - C94881 + C94884 - C94883) * C92947 +
            (C95212 - C95211 + C95214 - C95213 + C95216 - C95215) * C92797 +
            (C47136 * C5273 - C47131 * C5277 + C47138 * C5274 - C47132 * C5279 +
             C47140 * C5275 - C47133 * C5281) *
                C92948 +
            (C47136 * C5621 - C47131 * C5625 + C47138 * C5622 - C47132 * C5626 +
             C47140 * C5623 - C47133 * C5627) *
                C139899) *
               C139824 * C140002) *
              C139792 * C2324 +
          (((C47136 * C109 - C47131 * C116 + C47138 * C110 - C47132 * C118 +
             C47140 * C111 - C47133 * C120) *
                C92947 +
            (C47136 * C568 - C47131 * C574 + C47138 * C569 - C47132 * C575 +
             C47140 * C570 - C47133 * C576) *
                C92797 +
            (C94891 - C94892 + C94893 - C94894 + C94895 - C94896) * C92948 +
            (C95217 - C95218 + C95219 - C95220 + C95221 - C95222) * C139899) *
               C139824 * C4096 +
           ((C94892 - C94891 + C94894 - C94893 + C94896 - C94895) * C92947 +
            (C95218 - C95217 + C95220 - C95219 + C95222 - C95221) * C92797 +
            (C47131 * C5279 - C47136 * C5274 + C47132 * C5281 - C47138 * C5275 +
             C47133 * C5283 - C47140 * C5276) *
                C92948 +
            (C47131 * C5626 - C47136 * C5622 + C47132 * C5627 - C47138 * C5623 +
             C47133 * C5628 - C47140 * C5624) *
                C139899) *
               C139824 * C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C139731 * C114 - C54790 * C108) * C92947 +
             (C139731 * C573 - C54790 * C567) * C92797 +
             (C61976 - C61977) * C92948 + (C62328 - C62329) * C139899) *
                C5813 +
            ((C55513 - C55514) * C92947 + (C55735 - C55736) * C92797 +
             C64587 * C92948 + C64931 * C139899) *
                C5814 +
            C104340 * C5815) *
               C4096 +
           (((C61977 - C61976) * C92947 + (C62329 - C62328) * C92797 +
             (C61981 - C61980) * C92948 + (C62331 - C62330) * C139899) *
                C5813 +
            (C64591 * C92947 + C64933 * C92797 + C64593 * C92948 +
             C64934 * C139899) *
                C5814 +
            (C89717 * C92947 + C90038 * C92797 + (C63744 - C63745) * C92948 +
             (C63976 - C63977) * C139899) *
                C5815) *
               C140002) *
              C139792 * C2324 +
          ((((C54790 * C109 - C139731 * C116) * C92947 +
             (C54790 * C568 - C139731 * C574) * C92797 +
             (C61984 - C61985) * C92948 + (C62332 - C62333) * C139899) *
                C5813 +
            ((C55525 - C55526) * C92947 + (C55741 - C55742) * C92797 +
             (C61001 - C61002) * C92948 + (C61311 - C61312) * C139899) *
                C5814 +
            ((C55529 - C55530) * C92947 + (C55743 - C55744) * C92797 +
             (C86284 - C86285) * C92948 + (C86582 - C86583) * C139899) *
                C5815) *
               C4096 +
           (((C61985 - C61984) * C92947 + (C62333 - C62332) * C92797 +
             (C61989 - C61988) * C92948 + (C62335 - C62334) * C139899) *
                C5813 +
            ((C61002 - C61001) * C92947 + (C61312 - C61311) * C92797 +
             (C61006 - C61005) * C92948 + (C61314 - C61313) * C139899) *
                C5814 +
            ((C86285 - C86284) * C92947 + (C86583 - C86582) * C92797 +
             (C139731 * C13136 - C54790 * C13129) * C92948 +
             (C139731 * C13625 - C54790 * C13621) * C139899) *
                C5815) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eezy[132] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C139824 * C183 - C182 * C108) * C92947 +
             (C139824 * C629 - C182 * C567) * C92797 +
             (C15795 - C15796) * C92948 + (C16525 - C16526) * C139899) *
                C47131 +
            ((C196 - C197) * C92947 + (C636 - C637) * C92797 + C15799 * C92948 +
             C16529 * C139899) *
                C47132 +
            C93374 * C47133) *
               C4096 +
           (((C15796 - C15795) * C92947 + (C16526 - C16525) * C92797 +
             (C15802 - C15801) * C92948 + (C16528 - C16527) * C139899) *
                C47131 +
            (C15807 * C92947 + C16531 * C92797 + C15809 * C92948 +
             C16532 * C139899) *
                C47132 +
            (C31358 * C92947 + C32014 * C92797 + (C13938 - C13939) * C92948 +
             (C14441 - C14442) * C139899) *
                C47133) *
               C140002) *
              C139792 * C2324 +
          ((((C197 - C196) * C92947 + (C637 - C636) * C92797 + C15807 * C92948 +
             C16531 * C139899) *
                C47131 +
            ((C201 - C200) * C92947 + (C640 - C639) * C92797 + C31358 * C92948 +
             C32014 * C139899) *
                C47132 +
            ((C205 - C204) * C92947 + (C643 - C642) * C92797 +
             (C1672 - C1673) * C92948 + (C2160 - C2161) * C139899) *
                C47133) *
               C4096 +
           ((C15799 * C92947 + C16529 * C92797 + C15805 * C92948 +
             C16530 * C139899) *
                C47131 +
            (C29549 * C92947 + C30048 * C92797 + (C13939 - C13938) * C92948 +
             (C14442 - C14441) * C139899) *
                C47132 +
            ((C1673 - C1672) * C92947 + (C2161 - C2160) * C92797 +
             (C139824 * C5342 - C182 * C5276) * C92948 +
             (C139824 * C5682 - C182 * C5624) * C139899) *
                C47133) *
               C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5813 * C183 - C5894 * C108 + C5814 * C896 - C5895 * C813 +
             C5815 * C2974 - C5896 * C2908) *
                C92947 +
            (C5813 * C629 - C5894 * C567 + C5814 * C1393 - C5895 * C1317 +
             C5815 * C3314 - C5896 * C3256) *
                C92797 +
            (C102182 - C102183 + C102184 - C102185 + C102186 - C102187) *
                C92948 +
            (C102803 - C102804 + C102805 - C102806 + C102807 - C102808) *
                C139899) *
               C139731 * C4096 +
           ((C102183 - C102182 + C102185 - C102184 + C102187 - C102186) *
                C92947 +
            (C102804 - C102803 + C102806 - C102805 + C102808 - C102807) *
                C92797 +
            (C5894 * C5273 - C5813 * C5339 + C5895 * C13126 - C5814 * C13216 +
             C5896 * C13128 - C5815 * C13217) *
                C92948 +
            (C5894 * C5621 - C5813 * C5679 + C5895 * C13618 - C5814 * C13700 +
             C5896 * C13620 - C5815 * C13701) *
                C139899) *
               C139731 * C140002) *
              C139792 * C2324 +
          (((C5899 - C5898 + C5901 - C5900 + C5903 - C5902) * C92947 +
            (C6424 - C6423 + C6426 - C6425 + C6428 - C6427) * C92797 +
            (C7870 - C7871 + C7872 - C7873 + C7874 - C7875) * C92948 +
            (C8530 - C8531 + C8532 - C8533 + C8534 - C8535) * C139899) *
               C139731 * C4096 +
           ((C7871 - C7870 + C7873 - C7872 + C7875 - C7874) * C92947 +
            (C8531 - C8530 + C8533 - C8532 + C8535 - C8534) * C92797 +
            (C5813 * C5340 - C5894 * C5274 + C5814 * C13218 - C5895 * C13127 +
             C5815 * C13219 - C5896 * C13129) *
                C92948 +
            (C5813 * C5680 - C5894 * C5622 + C5814 * C13702 - C5895 * C13619 +
             C5815 * C13703 - C5896 * C13621) *
                C139899) *
               C139731 * C140002) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eezz[132] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92947 * C266 - C93448 * C108 - C92947 * C567 + C92797 * C702 +
             C92948 * C1741 - C93449 * C1570 - C92948 * C2074 +
             C139899 * C2230) *
                C139824 * C47131 +
            (C93487 + C93488) * C139824 * C47132 + C93494 * C47133) *
               C4096 -
           ((C95443 + C95444) * C139824 * C47133 +
            (C95445 + C95446) * C139824 * C47132 +
            (C92948 * C5397 - C93449 * C5273 - C92948 * C5621 +
             C139899 * C5733 + C92947 * C1741 - C93448 * C1570 -
             C92947 * C2074 + C92797 * C2230) *
                C139824 * C47131) *
               C140002) *
              C139792 * C2324 +
          (((C95446 + C95445) * C139824 * C47131 +
            (C95444 + C95443) * C139824 * C47132 +
            (C92947 * C1744 - C93448 * C1567 - C92947 * C2077 + C92797 * C2227 +
             C92948 * C5400 - C93449 * C5276 - C92948 * C5624 +
             C139899 * C5736) *
                C139824 * C47133) *
               C140002 -
           ((C93491 + C93492) * C139824 * C47133 +
            (C93490 + C93489) * C139824 * C47132 +
            (C93488 + C93487) * C139824 * C47131) *
               C4096) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92947 * C266 - C93448 * C108 - C92947 * C567 + C92797 * C702 +
             C92948 * C1741 - C93449 * C1570 - C92948 * C2074 +
             C139899 * C2230) *
                C5813 +
            (C101980 + C101981) * C5814 + C104489 * C5815) *
               C139731 * C4096 -
           ((C105477 + C105478) * C5815 + (C105479 + C105480) * C5814 +
            (C92948 * C5397 - C93449 * C5273 - C92948 * C5621 +
             C139899 * C5733 + C92947 * C1741 - C93448 * C1570 -
             C92947 * C2074 + C92797 * C2230) *
                C5813) *
               C139731 * C140002) *
              C139792 * C2324 +
          (((C95446 + C95445) * C5813 +
            (C92947 * C3595 - C93448 * C3439 - C92947 * C3883 + C92797 * C4027 +
             C92948 * C13299 - C93449 * C13127 - C92948 * C13619 +
             C139899 * C13780) *
                C5814 +
            (C92947 * C7980 - C93448 * C7753 - C92947 * C8423 + C92797 * C8633 +
             C92948 * C13301 - C93449 * C13129 - C92948 * C13621 +
             C139899 * C13781) *
                C5815) *
               C139731 * C140002 -
           ((C101985 + C101984) * C5815 + (C94427 + C94428) * C5814 +
            (C93488 + C93487) * C5813) *
               C139731 * C4096) *
              C139792 * C139998)) /
            (p * q * std::sqrt(p + q));
    d2eexx[133] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47136 * C114 - C47137 * C108 - C47136 * C115 + C47131 * C126 +
             C47138 * C116 - C47139 * C109 - C47138 * C117 + C47132 * C127 +
             C47140 * C118 - C47141 * C110 - C47140 * C119 + C47133 * C128) *
                C92797 +
            (C94563 + C94564 + C94565) * C139899) *
               C139824 * C4096 -
           ((C47140 * C5281 - C47141 * C5275 - C47140 * C5282 + C47133 * C5287 +
             C47138 * C5279 - C47139 * C5274 - C47138 * C5280 + C47132 * C5286 +
             C47136 * C5277 - C47137 * C5273 - C47136 * C5278 +
             C47131 * C5285) *
                C139899 +
            (C94565 + C94564 + C94563) * C92797) *
               C139824 * C140002) *
              C806 +
          (((C51503 + C51502 + C51501) * C92797 +
            (C47136 * C13130 - C47137 * C13126 - C47136 * C13131 +
             C47131 * C13138 + C47138 * C13132 - C47139 * C13127 -
             C47138 * C13133 + C47132 * C13139 + C47140 * C14660 -
             C47141 * C14659 - C47140 * C14661 + C47133 * C14662) *
                C139899) *
               C139824 * C140002 -
           ((C51501 + C51502 + C51503) * C139899 +
            (C47980 + C47979 + C47978) * C92797) *
               C139824 * C4096) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C54790 * C114 - C54791 * C108 - C54790 * C115 + C139731 * C126) *
                 C92797 +
             C61654 * C139899) *
                C5813 +
            (C101116 + C101117) * C5814 + C103863 * C5815) *
               C4096 -
           ((C104602 + C104603) * C5815 + (C104604 + C104605) * C5814 +
            (C61655 * C139899 + C61654 * C92797) * C5813) *
               C140002) *
              C806 +
          (((C104605 + C104604) * C5813 + (C104603 + C104602) * C5814 +
            (C57669 * C92797 + (C54790 * C59484 - C54791 * C59483 -
                                C54790 * C59485 + C139731 * C59486) *
                                   C139899) *
                C5815) *
               C140002 -
           ((C103864 + C103865) * C5815 + (C101119 + C101118) * C5814 +
            (C101117 + C101116) * C5813) *
               C4096) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eexy[133] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C139824 * C183 - C182 * C108) * C47136 +
             (C139824 * C189 - C182 * C115) * C47131 + (C196 - C197) * C47138 +
             (C198 - C199) * C47132 + C212 * C47140 + C213 * C47133) *
                C92797 +
            ((C15795 - C15796) * C47136 + (C15797 - C15798) * C47131 +
             C15799 * C47138 + C15800 * C47132 + C29549 * C47140 +
             C29550 * C47133) *
                C139899) *
               C4096 +
           (((C15796 - C15795) * C47136 + (C15798 - C15797) * C47131 +
             C15807 * C47138 + C15808 * C47132 + C31358 * C47140 +
             C31359 * C47133) *
                C92797 +
            ((C15802 - C15801) * C47136 + (C15804 - C15803) * C47131 +
             C15809 * C47138 + C15810 * C47132 + (C13938 - C13939) * C47140 +
             (C13940 - C13941) * C47133) *
                C139899) *
               C140002) *
              C806 +
          ((((C182 * C813 - C139824 * C896) * C47136 +
             (C182 * C822 - C139824 * C901) * C47131 + (C907 - C908) * C47138 +
             (C909 - C910) * C47132 + (C911 - C912) * C47140 +
             (C913 - C914) * C47133) *
                C92797 +
            ((C18427 - C18428) * C47136 + (C18429 - C18430) * C47131 +
             (C14764 - C14765) * C47138 + (C14766 - C14767) * C47132 +
             (C30369 - C30370) * C47140 + (C30371 - C30372) * C47133) *
                C139899) *
               C4096 +
           (((C18428 - C18427) * C47136 + (C18430 - C18429) * C47131 +
             (C14765 - C14764) * C47138 + (C14767 - C14766) * C47132 +
             (C30370 - C30369) * C47140 + (C30372 - C30371) * C47133) *
                C92797 +
            ((C18432 - C18431) * C47136 + (C18434 - C18433) * C47131 +
             (C14769 - C14768) * C47138 + (C14771 - C14770) * C47132 +
             (C139824 * C14761 - C182 * C14659) * C47140 +
             (C139824 * C14762 - C182 * C14661) * C47133) *
                C139899) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5813 * C183 - C5894 * C108 + C5814 * C896 - C5895 * C813 +
              C5815 * C2974 - C5896 * C2908) *
                 C54790 +
             (C5813 * C189 - C5894 * C115 + C5814 * C901 - C5895 * C822 +
              C5815 * C2978 - C5896 * C2913) *
                 C139731) *
                C92797 +
            ((C102182 - C102183 + C102184 - C102185 + C102186 - C102187) *
                 C54790 +
             (C102188 - C102189 + C102190 - C102191 + C102192 - C102193) *
                 C139731) *
                C139899) *
               C4096 +
           (((C102183 - C102182 + C102185 - C102184 + C102187 - C102186) *
                 C54790 +
             (C102189 - C102188 + C102191 - C102190 + C102193 - C102192) *
                 C139731) *
                C92797 +
            ((C5894 * C5273 - C5813 * C5339 + C5895 * C13126 - C5814 * C13216 +
              C5896 * C13128 - C5815 * C13217) *
                 C54790 +
             (C5894 * C5278 - C5813 * C5343 + C5895 * C13131 - C5814 * C13220 +
              C5896 * C13135 - C5815 * C13221) *
                 C139731) *
                C139899) *
               C140002) *
              C806 +
          ((((C5894 * C813 - C5813 * C896 + C5895 * C2908 - C5814 * C2974 +
              C5896 * C6627 - C5815 * C6792) *
                 C54790 +
             (C5894 * C822 - C5813 * C901 + C5895 * C2913 - C5814 * C2978 +
              C5896 * C6632 - C5815 * C6795) *
                 C139731) *
                C92797 +
            ((C104704 - C104705 + C104706 - C104707 + C104708 - C104709) *
                 C54790 +
             (C104710 - C104711 + C104712 - C104713 + C104714 - C104715) *
                 C139731) *
                C139899) *
               C4096 +
           (((C104705 - C104704 + C104707 - C104706 + C104709 - C104708) *
                 C54790 +
             (C104711 - C104710 + C104713 - C104712 + C104715 - C104714) *
                 C139731) *
                C92797 +
            ((C5813 * C13216 - C5894 * C13126 + C5814 * C13217 -
              C5895 * C13128 + C5815 * C59537 - C5896 * C59483) *
                 C54790 +
             (C5813 * C13220 - C5894 * C13131 + C5814 * C13221 -
              C5895 * C13135 + C5815 * C59538 - C5896 * C59485) *
                 C139731) *
                C139899) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eexz[133] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92797 * C266 - C92947 * C108 + C139899 * C1741 - C92948 * C1570) *
                C47136 +
            (C92797 * C272 - C92947 * C115 + C139899 * C1746 - C92948 * C1579) *
                C47131 +
            (C92950 - C92951 + C92952 - C92953) * C47138 +
            (C92954 - C92955 + C92956 - C92957) * C47132 + C92978 * C47140 +
            C92979 * C47133) *
               C139824 * C4096 +
           ((C92947 * C1570 - C92797 * C1741 + C92948 * C5273 -
             C139899 * C5397) *
                C47136 +
            (C92947 * C1579 - C92797 * C1746 + C92948 * C5278 -
             C139899 * C5401) *
                C47131 +
            (C94765 - C94766 + C94767 - C94768) * C47138 +
            (C94769 - C94770 + C94771 - C94772) * C47132 +
            (C94773 - C94774 + C94775 - C94776) * C47140 +
            (C94777 - C94778 + C94779 - C94780) * C47133) *
               C139824 * C140002) *
              C806 +
          (((C92947 * C813 - C92797 * C984 + C92948 * C3438 - C139899 * C3594) *
                C47136 +
            (C92947 * C822 - C92797 * C989 + C92948 * C3443 - C139899 * C3598) *
                C47131 +
            (C93789 - C93790 + C93791 - C93792) * C47138 +
            (C93793 - C93794 + C93795 - C93796) * C47132 +
            (C93797 - C93798 + C93799 - C93800) * C47140 +
            (C93801 - C93802 + C93803 - C93804) * C47133) *
               C139824 * C4096 +
           ((C92797 * C3594 - C92947 * C3438 + C139899 * C13298 -
             C92948 * C13126) *
                C47136 +
            (C92797 * C3598 - C92947 * C3443 + C139899 * C13302 -
             C92948 * C13131) *
                C47131 +
            (C92797 * C3595 - C92947 * C3439 + C139899 * C13299 -
             C92948 * C13127) *
                C47138 +
            (C92797 * C3599 - C92947 * C3445 + C139899 * C13303 -
             C92948 * C13133) *
                C47132 +
            (C92797 * C3596 - C92947 * C3440 + C139899 * C14869 -
             C92948 * C14659) *
                C47140 +
            (C92797 * C3600 - C92947 * C3447 + C139899 * C14870 -
             C92948 * C14661) *
                C47133) *
               C139824 * C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C92797 * C266 - C92947 * C108 + C139899 * C1741 -
              C92948 * C1570) *
                 C54790 +
             (C92797 * C272 - C92947 * C115 + C139899 * C1746 -
              C92948 * C1579) *
                 C139731) *
                C5813 +
            ((C101320 - C101321 + C101322 - C101323) * C54790 +
             (C101324 - C101325 + C101326 - C101327) * C139731) *
                C5814 +
            C104030 * C5815) *
               C4096 +
           (((C92947 * C1570 - C92797 * C1741 + C92948 * C5273 -
              C139899 * C5397) *
                 C54790 +
             (C92947 * C1579 - C92797 * C1746 + C92948 * C5278 -
              C139899 * C5401) *
                 C139731) *
                C5813 +
            ((C104814 - C104815 + C104816 - C104817) * C54790 +
             (C104818 - C104819 + C104820 - C104821) * C139731) *
                C5814 +
            ((C104822 - C104823 + C104824 - C104825) * C54790 +
             (C104826 - C104827 + C104828 - C104829) * C139731) *
                C5815) *
               C140002) *
              C806 +
          ((((C101321 - C101320 + C101323 - C101322) * C54790 +
             (C101325 - C101324 + C101327 - C101326) * C139731) *
                C5813 +
            ((C101329 - C101328 + C101331 - C101330) * C54790 +
             (C101333 - C101332 + C101335 - C101334) * C139731) *
                C5814 +
            ((C104018 - C104019 + C104020 - C104021) * C54790 +
             (C104022 - C104023 + C104024 - C104025) * C139731) *
                C5815) *
               C4096 +
           (((C104815 - C104814 + C104817 - C104816) * C54790 +
             (C104819 - C104818 + C104821 - C104820) * C139731) *
                C5813 +
            ((C104823 - C104822 + C104825 - C104824) * C54790 +
             (C104827 - C104826 + C104829 - C104828) * C139731) *
                C5814 +
            ((C92797 * C10630 - C92947 * C10394 + C139899 * C59589 -
              C92948 * C59483) *
                 C54790 +
             (C92797 * C10632 - C92947 * C10397 + C139899 * C59590 -
              C92948 * C59485) *
                 C139731) *
                C5815) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eeyx[133] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47131 * C114 - C47136 * C108 + C47132 * C116 - C47138 * C109 +
              C47133 * C118 - C47140 * C110) *
                 C182 +
             (C47131 * C354 - C47136 * C348 + C47132 * C355 - C47138 * C349 +
              C47133 * C356 - C47140 * C350) *
                 C139824) *
                C92797 +
            ((C94879 - C94880 + C94881 - C94882 + C94883 - C94884) * C182 +
             (C94885 - C94886 + C94887 - C94888 + C94889 - C94890) * C139824) *
                C139899) *
               C4096 +
           (((C94880 - C94879 + C94882 - C94881 + C94884 - C94883) * C182 +
             (C94886 - C94885 + C94888 - C94887 + C94890 - C94889) * C139824) *
                C92797 +
            ((C47136 * C5273 - C47131 * C5277 + C47138 * C5274 -
              C47132 * C5279 + C47140 * C5275 - C47133 * C5281) *
                 C182 +
             (C47136 * C5455 - C47131 * C5459 + C47138 * C5456 -
              C47132 * C5460 + C47140 * C5457 - C47133 * C5461) *
                 C139824) *
                C139899) *
               C140002) *
              C806 +
          ((((C48295 - C48294 + C48297 - C48296 + C48299 - C48298) * C182 +
             (C48301 - C48300 + C48303 - C48302 + C48305 - C48304) * C139824) *
                C92797 +
            ((C51798 - C51799 + C51800 - C51801 + C51802 - C51803) * C182 +
             (C51804 - C51805 + C51806 - C51807 + C51808 - C51809) * C139824) *
                C139899) *
               C4096 +
           (((C51799 - C51798 + C51801 - C51800 + C51803 - C51802) * C182 +
             (C51805 - C51804 + C51807 - C51806 + C51809 - C51808) * C139824) *
                C92797 +
            ((C47131 * C13130 - C47136 * C13126 + C47132 * C13132 -
              C47138 * C13127 + C47133 * C14660 - C47140 * C14659) *
                 C182 +
             (C47131 * C13384 - C47136 * C13380 + C47132 * C13385 -
              C47138 * C13381 + C47133 * C14982 - C47140 * C14981) *
                 C139824) *
                C139899) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C139731 * C114 - C54790 * C108) * C5894 +
             (C139731 * C354 - C54790 * C348) * C5813 +
             (C55513 - C55514) * C5895 + (C55515 - C55516) * C5814 +
             C57297 * C5896 + C57298 * C5815) *
                C92797 +
            ((C61976 - C61977) * C5894 + (C61978 - C61979) * C5813 +
             C64587 * C5895 + C64588 * C5814 + C88899 * C5896 +
             C88900 * C5815) *
                C139899) *
               C4096 +
           (((C61977 - C61976) * C5894 + (C61979 - C61978) * C5813 +
             C64591 * C5895 + C64592 * C5814 + C89717 * C5896 +
             C89718 * C5815) *
                C92797 +
            ((C61981 - C61980) * C5894 + (C61983 - C61982) * C5813 +
             C64593 * C5895 + C64594 * C5814 + (C63744 - C63745) * C5896 +
             (C63746 - C63747) * C5815) *
                C139899) *
               C140002) *
              C806 +
          ((((C55514 - C55513) * C5894 + (C55516 - C55515) * C5813 +
             (C55518 - C55517) * C5895 + (C55520 - C55519) * C5814 +
             (C55522 - C55521) * C5896 + (C55524 - C55523) * C5815) *
                C92797 +
            (C64591 * C5894 + C64592 * C5813 + C89717 * C5895 + C89718 * C5814 +
             (C57891 - C57892) * C5896 + (C57893 - C57894) * C5815) *
                C139899) *
               C4096 +
           ((C64587 * C5894 + C64588 * C5813 + C88899 * C5895 + C88900 * C5814 +
             (C57892 - C57891) * C5896 + (C57894 - C57893) * C5815) *
                C92797 +
            (C64589 * C5894 + C64590 * C5813 + (C63745 - C63744) * C5895 +
             (C63747 - C63746) * C5814 +
             (C139731 * C59484 - C54790 * C59483) * C5896 +
             (C139731 * C59642 - C54790 * C59641) * C5815) *
                C139899) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eeyy[133] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C182 * C183 - C410 * C108 - C182 * C348 + C139824 * C411) *
                 C47131 +
             C442 * C47132 + C443 * C47133) *
                C92797 +
            (C95001 + C95002 + C95003) * C139899) *
               C4096 -
           ((C14204 * C47133 + C14203 * C47132 + C16193 * C47131) * C139899 +
            (C95003 + C95002 + C95001) * C92797) *
               C140002) *
              C806 +
          (((C97485 + C97486 + C97487) * C92797 +
            (C18762 * C47131 + C15095 * C47132 +
             (C182 * C14761 - C410 * C14659 - C182 * C14981 +
              C139824 * C15081) *
                 C47133) *
                C139899) *
               C140002 -
           ((C97487 + C97486 + C97485) * C139899 +
            (C1173 * C47133 + C1174 * C47132 +
             (C182 * C896 - C410 * C813 - C182 * C1072 + C139824 * C1151) *
                 C47131) *
                C92797) *
               C4096) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5894 * C183 - C6151 * C108 - C5894 * C348 + C5813 * C411 +
             C5895 * C896 - C6152 * C813 - C5895 * C1072 + C5814 * C1151 +
             C5896 * C2974 - C6153 * C2908 - C5896 * C3090 + C5815 * C3148) *
                C139731 * C92797 +
            (C102506 + C102507 + C102508) * C139731 * C139899) *
               C4096 -
           ((C5896 * C13217 - C6153 * C13128 - C5896 * C13382 + C5815 * C13463 +
             C5895 * C13216 - C6152 * C13126 - C5895 * C13380 + C5814 * C13462 +
             C5894 * C5339 - C6151 * C5273 - C5894 * C5455 + C5813 * C5513) *
                C139731 * C139899 +
            (C102508 + C102507 + C102506) * C139731 * C92797) *
               C140002) *
              C806 +
          (((C105044 + C105045 + C105046) * C139731 * C92797 +
            (C5894 * C13216 - C6151 * C13126 - C5894 * C13380 + C5813 * C13462 +
             C5895 * C13217 - C6152 * C13128 - C5895 * C13382 + C5814 * C13463 +
             C5896 * C59537 - C6153 * C59483 - C5896 * C59641 +
             C5815 * C59693) *
                C139731 * C139899) *
               C140002 -
           ((C105046 + C105045 + C105044) * C139731 * C139899 +
            (C5896 * C6792 - C6153 * C6627 - C5896 * C7032 + C5815 * C7169 +
             C5895 * C2974 - C6152 * C2908 - C5895 * C3090 + C5814 * C3148 +
             C5894 * C896 - C6151 * C813 - C5894 * C1072 + C5813 * C1151) *
                C139731 * C92797) *
               C4096) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eeyz[133] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C92797 * C266 - C92947 * C108 + C139899 * C1741 -
              C92948 * C1570) *
                 C182 +
             (C92797 * C495 - C92947 * C348 + C139899 * C1997 -
              C92948 * C1829) *
                 C139824) *
                C47131 +
            ((C92950 - C92951 + C92952 - C92953) * C182 +
             (C93202 - C93203 + C93204 - C93205) * C139824) *
                C47132 +
            C93219 * C47133) *
               C4096 +
           (((C92947 * C1570 - C92797 * C1741 + C92948 * C5273 -
              C139899 * C5397) *
                 C182 +
             (C92947 * C1829 - C92797 * C1997 + C92948 * C5455 -
              C139899 * C5567) *
                 C139824) *
                C47131 +
            ((C94765 - C94766 + C94767 - C94768) * C182 +
             (C95105 - C95106 + C95107 - C95108) * C139824) *
                C47132 +
            ((C94773 - C94774 + C94775 - C94776) * C182 +
             (C95109 - C95110 + C95111 - C95112) * C139824) *
                C47133) *
               C140002) *
              C806 +
          ((((C92947 * C813 - C92797 * C984 + C92948 * C3438 -
              C139899 * C3594) *
                 C182 +
             (C92947 * C1072 - C92797 * C1240 + C92948 * C3668 -
              C139899 * C3812) *
                 C139824) *
                C47131 +
            ((C93789 - C93790 + C93791 - C93792) * C182 +
             (C94099 - C94100 + C94101 - C94102) * C139824) *
                C47132 +
            ((C93797 - C93798 + C93799 - C93800) * C182 +
             (C94103 - C94104 + C94105 - C94106) * C139824) *
                C47133) *
               C4096 +
           (((C92797 * C3594 - C92947 * C3438 + C139899 * C13298 -
              C92948 * C13126) *
                 C182 +
             (C92797 * C3812 - C92947 * C3668 + C139899 * C13540 -
              C92948 * C13380) *
                 C139824) *
                C47131 +
            ((C92797 * C3595 - C92947 * C3439 + C139899 * C13299 -
              C92948 * C13127) *
                 C182 +
             (C92797 * C3813 - C92947 * C3669 + C139899 * C13542 -
              C92948 * C13381) *
                 C139824) *
                C47132 +
            ((C92797 * C3596 - C92947 * C3440 + C139899 * C14869 -
              C92948 * C14659) *
                 C182 +
             (C92797 * C3814 - C92947 * C3670 + C139899 * C15194 -
              C92948 * C14981) *
                 C139824) *
                C47133) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92797 * C266 - C92947 * C108 + C139899 * C1741 - C92948 * C1570) *
                C5894 +
            (C92797 * C495 - C92947 * C348 + C139899 * C1997 - C92948 * C1829) *
                C5813 +
            (C101320 - C101321 + C101322 - C101323) * C5895 +
            (C101638 - C101639 + C101640 - C101641) * C5814 + C104026 * C5896 +
            C104259 * C5815) *
               C139731 * C4096 +
           ((C92947 * C1570 - C92797 * C1741 + C92948 * C5273 -
             C139899 * C5397) *
                C5894 +
            (C92947 * C1829 - C92797 * C1997 + C92948 * C5455 -
             C139899 * C5567) *
                C5813 +
            (C104814 - C104815 + C104816 - C104817) * C5895 +
            (C105145 - C105146 + C105147 - C105148) * C5814 +
            (C104822 - C104823 + C104824 - C104825) * C5896 +
            (C105149 - C105150 + C105151 - C105152) * C5815) *
               C139731 * C140002) *
              C806 +
          (((C101321 - C101320 + C101323 - C101322) * C5894 +
            (C101639 - C101638 + C101641 - C101640) * C5813 +
            (C101329 - C101328 + C101331 - C101330) * C5895 +
            (C101643 - C101642 + C101645 - C101644) * C5814 +
            (C104018 - C104019 + C104020 - C104021) * C5896 +
            (C104255 - C104256 + C104257 - C104258) * C5815) *
               C139731 * C4096 +
           ((C104815 - C104814 + C104817 - C104816) * C5894 +
            (C105146 - C105145 + C105148 - C105147) * C5813 +
            (C104823 - C104822 + C104825 - C104824) * C5895 +
            (C105150 - C105149 + C105152 - C105151) * C5814 +
            (C92797 * C10630 - C92947 * C10394 + C139899 * C59589 -
             C92948 * C59483) *
                C5896 +
            (C92797 * C10958 - C92947 * C10740 + C139899 * C59744 -
             C92948 * C59641) *
                C5815) *
               C139731 * C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eezx[133] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47131 * C114 - C47136 * C108 + C47132 * C116 - C47138 * C109 +
             C47133 * C118 - C47140 * C110) *
                C92947 +
            (C47131 * C573 - C47136 * C567 + C47132 * C574 - C47138 * C568 +
             C47133 * C575 - C47140 * C569) *
                C92797 +
            (C94879 - C94880 + C94881 - C94882 + C94883 - C94884) * C92948 +
            (C95211 - C95212 + C95213 - C95214 + C95215 - C95216) * C139899) *
               C139824 * C4096 +
           ((C94880 - C94879 + C94882 - C94881 + C94884 - C94883) * C92947 +
            (C95212 - C95211 + C95214 - C95213 + C95216 - C95215) * C92797 +
            (C47136 * C5273 - C47131 * C5277 + C47138 * C5274 - C47132 * C5279 +
             C47140 * C5275 - C47133 * C5281) *
                C92948 +
            (C47136 * C5621 - C47131 * C5625 + C47138 * C5622 - C47132 * C5626 +
             C47140 * C5623 - C47133 * C5627) *
                C139899) *
               C139824 * C140002) *
              C806 +
          (((C48295 - C48294 + C48297 - C48296 + C48299 - C48298) * C92947 +
            (C48641 - C48640 + C48643 - C48642 + C48645 - C48644) * C92797 +
            (C51798 - C51799 + C51800 - C51801 + C51802 - C51803) * C92948 +
            (C52104 - C52105 + C52106 - C52107 + C52108 - C52109) * C139899) *
               C139824 * C4096 +
           ((C51799 - C51798 + C51801 - C51800 + C51803 - C51802) * C92947 +
            (C52105 - C52104 + C52107 - C52106 + C52109 - C52108) * C92797 +
            (C47131 * C13130 - C47136 * C13126 + C47132 * C13132 -
             C47138 * C13127 + C47133 * C14660 - C47140 * C14659) *
                C92948 +
            (C47131 * C13622 - C47136 * C13618 + C47132 * C13623 -
             C47138 * C13619 + C47133 * C15300 - C47140 * C15299) *
                C139899) *
               C139824 * C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C139731 * C114 - C54790 * C108) * C92947 +
             (C139731 * C573 - C54790 * C567) * C92797 +
             (C61976 - C61977) * C92948 + (C62328 - C62329) * C139899) *
                C5813 +
            ((C55513 - C55514) * C92947 + (C55735 - C55736) * C92797 +
             C64587 * C92948 + C64931 * C139899) *
                C5814 +
            C104340 * C5815) *
               C4096 +
           (((C61977 - C61976) * C92947 + (C62329 - C62328) * C92797 +
             (C61981 - C61980) * C92948 + (C62331 - C62330) * C139899) *
                C5813 +
            (C64591 * C92947 + C64933 * C92797 + C64593 * C92948 +
             C64934 * C139899) *
                C5814 +
            (C89717 * C92947 + C90038 * C92797 + (C63744 - C63745) * C92948 +
             (C63976 - C63977) * C139899) *
                C5815) *
               C140002) *
              C806 +
          ((((C55514 - C55513) * C92947 + (C55736 - C55735) * C92797 +
             C64591 * C92948 + C64933 * C139899) *
                C5813 +
            ((C55518 - C55517) * C92947 + (C55738 - C55737) * C92797 +
             C89717 * C92948 + C90038 * C139899) *
                C5814 +
            ((C55522 - C55521) * C92947 + (C55740 - C55739) * C92797 +
             (C57891 - C57892) * C92948 + (C58103 - C58104) * C139899) *
                C5815) *
               C4096 +
           ((C64587 * C92947 + C64931 * C92797 + C64589 * C92948 +
             C64932 * C139899) *
                C5813 +
            (C88899 * C92947 + C89133 * C92797 + (C63745 - C63744) * C92948 +
             (C63977 - C63976) * C139899) *
                C5814 +
            ((C57892 - C57891) * C92947 + (C58104 - C58103) * C92797 +
             (C139731 * C59484 - C54790 * C59483) * C92948 +
             (C139731 * C59796 - C54790 * C59795) * C139899) *
                C5815) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eezy[133] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C139824 * C183 - C182 * C108) * C92947 +
             (C139824 * C629 - C182 * C567) * C92797 +
             (C15795 - C15796) * C92948 + (C16525 - C16526) * C139899) *
                C47131 +
            ((C196 - C197) * C92947 + (C636 - C637) * C92797 + C15799 * C92948 +
             C16529 * C139899) *
                C47132 +
            C93374 * C47133) *
               C4096 +
           (((C15796 - C15795) * C92947 + (C16526 - C16525) * C92797 +
             (C15802 - C15801) * C92948 + (C16528 - C16527) * C139899) *
                C47131 +
            (C15807 * C92947 + C16531 * C92797 + C15809 * C92948 +
             C16532 * C139899) *
                C47132 +
            (C31358 * C92947 + C32014 * C92797 + (C13938 - C13939) * C92948 +
             (C14441 - C14442) * C139899) *
                C47133) *
               C140002) *
              C806 +
          ((((C182 * C813 - C139824 * C896) * C92947 +
             (C182 * C1317 - C139824 * C1393) * C92797 +
             (C18427 - C18428) * C92948 + (C19071 - C19072) * C139899) *
                C47131 +
            ((C907 - C908) * C92947 + (C1399 - C1400) * C92797 +
             (C14764 - C14765) * C92948 + (C15401 - C15402) * C139899) *
                C47132 +
            ((C911 - C912) * C92947 + (C1401 - C1402) * C92797 +
             (C30369 - C30370) * C92948 + (C30992 - C30993) * C139899) *
                C47133) *
               C4096 +
           (((C18428 - C18427) * C92947 + (C19072 - C19071) * C92797 +
             (C18432 - C18431) * C92948 + (C19074 - C19073) * C139899) *
                C47131 +
            ((C14765 - C14764) * C92947 + (C15402 - C15401) * C92797 +
             (C14769 - C14768) * C92948 + (C15404 - C15403) * C139899) *
                C47132 +
            ((C30370 - C30369) * C92947 + (C30993 - C30992) * C92797 +
             (C139824 * C14761 - C182 * C14659) * C92948 +
             (C139824 * C15399 - C182 * C15299) * C139899) *
                C47133) *
               C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5813 * C183 - C5894 * C108 + C5814 * C896 - C5895 * C813 +
             C5815 * C2974 - C5896 * C2908) *
                C92947 +
            (C5813 * C629 - C5894 * C567 + C5814 * C1393 - C5895 * C1317 +
             C5815 * C3314 - C5896 * C3256) *
                C92797 +
            (C102182 - C102183 + C102184 - C102185 + C102186 - C102187) *
                C92948 +
            (C102803 - C102804 + C102805 - C102806 + C102807 - C102808) *
                C139899) *
               C139731 * C4096 +
           ((C102183 - C102182 + C102185 - C102184 + C102187 - C102186) *
                C92947 +
            (C102804 - C102803 + C102806 - C102805 + C102808 - C102807) *
                C92797 +
            (C5894 * C5273 - C5813 * C5339 + C5895 * C13126 - C5814 * C13216 +
             C5896 * C13128 - C5815 * C13217) *
                C92948 +
            (C5894 * C5621 - C5813 * C5679 + C5895 * C13618 - C5814 * C13700 +
             C5896 * C13620 - C5815 * C13701) *
                C139899) *
               C139731 * C140002) *
              C806 +
          (((C5894 * C813 - C5813 * C896 + C5895 * C2908 - C5814 * C2974 +
             C5896 * C6627 - C5815 * C6792) *
                C92947 +
            (C5894 * C1317 - C5813 * C1393 + C5895 * C3256 - C5814 * C3314 +
             C5896 * C7401 - C5815 * C7521) *
                C92797 +
            (C104704 - C104705 + C104706 - C104707 + C104708 - C104709) *
                C92948 +
            (C105349 - C105350 + C105351 - C105352 + C105353 - C105354) *
                C139899) *
               C139731 * C4096 +
           ((C104705 - C104704 + C104707 - C104706 + C104709 - C104708) *
                C92947 +
            (C105350 - C105349 + C105352 - C105351 + C105354 - C105353) *
                C92797 +
            (C5813 * C13216 - C5894 * C13126 + C5814 * C13217 - C5895 * C13128 +
             C5815 * C59537 - C5896 * C59483) *
                C92948 +
            (C5813 * C13700 - C5894 * C13618 + C5814 * C13701 - C5895 * C13620 +
             C5815 * C59847 - C5896 * C59795) *
                C139899) *
               C139731 * C140002) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eezz[133] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92947 * C266 - C93448 * C108 - C92947 * C567 + C92797 * C702 +
             C92948 * C1741 - C93449 * C1570 - C92948 * C2074 +
             C139899 * C2230) *
                C139824 * C47131 +
            (C93487 + C93488) * C139824 * C47132 + C93494 * C47133) *
               C4096 -
           ((C95443 + C95444) * C139824 * C47133 +
            (C95445 + C95446) * C139824 * C47132 +
            (C92948 * C5397 - C93449 * C5273 - C92948 * C5621 +
             C139899 * C5733 + C92947 * C1741 - C93448 * C1570 -
             C92947 * C2074 + C92797 * C2230) *
                C139824 * C47131) *
               C140002) *
              C806 +
          (((C92947 * C3594 - C93448 * C3438 - C92947 * C3882 + C92797 * C4026 +
             C92948 * C13298 - C93449 * C13126 - C92948 * C13618 +
             C139899 * C13778) *
                C139824 * C47131 +
            (C92947 * C3595 - C93448 * C3439 - C92947 * C3883 + C92797 * C4027 +
             C92948 * C13299 - C93449 * C13127 - C92948 * C13619 +
             C139899 * C13780) *
                C139824 * C47132 +
            (C92947 * C3596 - C93448 * C3440 - C92947 * C3884 + C92797 * C4028 +
             C92948 * C14869 - C93449 * C14659 - C92948 * C15299 +
             C139899 * C15502) *
                C139824 * C47133) *
               C140002 -
           ((C94425 + C94426) * C139824 * C47133 +
            (C94427 + C94428) * C139824 * C47132 +
            (C92948 * C3594 - C93449 * C3438 - C92948 * C3882 +
             C139899 * C4026 + C92947 * C984 - C93448 * C813 - C92947 * C1317 +
             C92797 * C1473) *
                C139824 * C47131) *
               C4096) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92947 * C266 - C93448 * C108 - C92947 * C567 + C92797 * C702 +
             C92948 * C1741 - C93449 * C1570 - C92948 * C2074 +
             C139899 * C2230) *
                C5813 +
            (C101980 + C101981) * C5814 + C104489 * C5815) *
               C139731 * C4096 -
           ((C105477 + C105478) * C5815 + (C105479 + C105480) * C5814 +
            (C92948 * C5397 - C93449 * C5273 - C92948 * C5621 +
             C139899 * C5733 + C92947 * C1741 - C93448 * C1570 -
             C92947 * C2074 + C92797 * C2230) *
                C5813) *
               C139731 * C140002) *
              C806 +
          (((C105480 + C105479) * C5813 + (C105478 + C105477) * C5814 +
            (C92947 * C10630 - C93448 * C10394 - C92947 * C11062 +
             C92797 * C11272 + C92948 * C59589 - C93449 * C59483 -
             C92948 * C59795 + C139899 * C59898) *
                C5815) *
               C139731 * C140002 -
           ((C104502 + C104503) * C5815 + (C101983 + C101982) * C5814 +
            (C101981 + C101980) * C5813) *
               C139731 * C4096) *
              C140000) *
         C139758) /
            (p * q * std::sqrt(p + q));
    d2eexx[134] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C47136 * C114 - C47137 * C108 - C47136 * C115 + C47131 * C126 +
            C47138 * C116 - C47139 * C109 - C47138 * C117 + C47132 * C127 +
            C47140 * C118 - C47141 * C110 - C47140 * C119 + C47133 * C128) *
               C92797 +
           (C94563 + C94564 + C94565) * C139899) *
              C139824 * C5270 -
          ((C99736 + C99737 + C99738) * C139899 +
           (C94565 + C94564 + C94563) * C92797) *
              C139824 * C5271 +
          ((C99738 + C99737 + C99736) * C92797 +
           (C47136 * C15627 - C47137 * C15623 - C47136 * C15628 +
            C47131 * C15632 + C47138 * C15625 - C47139 * C15622 -
            C47138 * C15626 + C47132 * C15631 + C47140 * C15629 -
            C47141 * C15624 - C47140 * C15630 + C47133 * C15633) *
               C139899) *
              C139824 * C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C54790 * C114 - C54791 * C108 - C54790 * C115 + C139731 * C126) *
                C92797 +
            C61654 * C139899) *
               C5813 +
           (C101116 + C101117) * C5814 + C103863 * C5815) *
              C5270 -
          ((C104602 + C104603) * C5815 + (C104604 + C104605) * C5814 +
           (C61655 * C139899 + C61654 * C92797) * C5813) *
              C5271 +
          ((C61655 * C92797 + C67012 * C139899) * C5813 +
           (C60685 * C92797 + C64257 * C139899) * C5814 +
           (C63508 * C92797 + (C54790 * C64245 - C54791 * C64244 -
                               C54790 * C64246 + C139731 * C64247) *
                                  C139899) *
               C5815) *
              C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q));
    d2eexy[134] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C139824 * C183 - C182 * C108) * C47136 +
            (C139824 * C189 - C182 * C115) * C47131 + (C196 - C197) * C47138 +
            (C198 - C199) * C47132 + C212 * C47140 + C213 * C47133) *
               C92797 +
           ((C15795 - C15796) * C47136 + (C15797 - C15798) * C47131 +
            C15799 * C47138 + C15800 * C47132 + C29549 * C47140 +
            C29550 * C47133) *
               C139899) *
              C5270 +
          (((C15796 - C15795) * C47136 + (C15798 - C15797) * C47131 +
            C15807 * C47138 + C15808 * C47132 + C31358 * C47140 +
            C31359 * C47133) *
               C92797 +
           ((C15802 - C15801) * C47136 + (C15804 - C15803) * C47131 +
            C15809 * C47138 + C15810 * C47132 + (C13938 - C13939) * C47140 +
            (C13940 - C13941) * C47133) *
               C139899) *
              C5271 +
          ((C21114 * C47136 + C21115 * C47131 + C15805 * C47138 +
            C15806 * C47132 + (C13939 - C13938) * C47140 +
            (C13941 - C13940) * C47133) *
               C92797 +
           ((C21119 - C21118) * C47136 + (C21121 - C21120) * C47131 +
            (C15812 - C15811) * C47138 + (C15814 - C15813) * C47132 +
            (C139824 * C15790 - C182 * C15624) * C47140 +
            (C139824 * C15793 - C182 * C15630) * C47133) *
               C139899) *
              C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5813 * C183 - C5894 * C108 + C5814 * C896 - C5895 * C813 +
             C5815 * C2974 - C5896 * C2908) *
                C54790 +
            (C5813 * C189 - C5894 * C115 + C5814 * C901 - C5895 * C822 +
             C5815 * C2978 - C5896 * C2913) *
                C139731) *
               C92797 +
           ((C102182 - C102183 + C102184 - C102185 + C102186 - C102187) *
                C54790 +
            (C102188 - C102189 + C102190 - C102191 + C102192 - C102193) *
                C139731) *
               C139899) *
              C5270 +
          (((C102183 - C102182 + C102185 - C102184 + C102187 - C102186) *
                C54790 +
            (C102189 - C102188 + C102191 - C102190 + C102193 - C102192) *
                C139731) *
               C92797 +
           ((C107393 - C107394 + C107395 - C107396 + C107397 - C107398) *
                C54790 +
            (C107399 - C107400 + C107401 - C107402 + C107403 - C107404) *
                C139731) *
               C139899) *
              C5271 +
          (((C107394 - C107393 + C107396 - C107395 + C107398 - C107397) *
                C54790 +
            (C107400 - C107399 + C107402 - C107401 + C107404 - C107403) *
                C139731) *
               C92797 +
           ((C5813 * C15788 - C5894 * C15623 + C5814 * C18422 - C5895 * C18302 +
             C5815 * C64356 - C5896 * C64244) *
                C54790 +
            (C5813 * C15791 - C5894 * C15628 + C5814 * C18424 - C5895 * C18305 +
             C5815 * C64357 - C5896 * C64246) *
                C139731) *
               C139899) *
              C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q));
    d2eexz[134] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C92797 * C266 - C92947 * C108 + C139899 * C1741 - C92948 * C1570) *
               C47136 +
           (C92797 * C272 - C92947 * C115 + C139899 * C1746 - C92948 * C1579) *
               C47131 +
           (C92950 - C92951 + C92952 - C92953) * C47138 +
           (C92954 - C92955 + C92956 - C92957) * C47132 + C92978 * C47140 +
           C92979 * C47133) *
              C139824 * C5270 +
          ((C92947 * C1570 - C92797 * C1741 + C92948 * C5273 -
            C139899 * C5397) *
               C47136 +
           (C92947 * C1579 - C92797 * C1746 + C92948 * C5278 -
            C139899 * C5401) *
               C47131 +
           (C94765 - C94766 + C94767 - C94768) * C47138 +
           (C94769 - C94770 + C94771 - C94772) * C47132 +
           (C94773 - C94774 + C94775 - C94776) * C47140 +
           (C94777 - C94778 + C94779 - C94780) * C47133) *
              C139824 * C5271 +
          ((C92797 * C5397 - C92947 * C5273 + C139899 * C15912 -
            C92948 * C15623) *
               C47136 +
           (C92797 * C5401 - C92947 * C5278 + C139899 * C15915 -
            C92948 * C15628) *
               C47131 +
           (C92797 * C5398 - C92947 * C5274 + C139899 * C15913 -
            C92948 * C15622) *
               C47138 +
           (C92797 * C5402 - C92947 * C5280 + C139899 * C15916 -
            C92948 * C15626) *
               C47132 +
           (C92797 * C5399 - C92947 * C5275 + C139899 * C15914 -
            C92948 * C15624) *
               C47140 +
           (C92797 * C5403 - C92947 * C5282 + C139899 * C15917 -
            C92948 * C15630) *
               C47133) *
              C139824 * C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92797 * C266 - C92947 * C108 + C139899 * C1741 - C92948 * C1570) *
                C54790 +
            (C92797 * C272 - C92947 * C115 + C139899 * C1746 - C92948 * C1579) *
                C139731) *
               C5813 +
           ((C101320 - C101321 + C101322 - C101323) * C54790 +
            (C101324 - C101325 + C101326 - C101327) * C139731) *
               C5814 +
           C104030 * C5815) *
              C5270 +
          (((C92947 * C1570 - C92797 * C1741 + C92948 * C5273 -
             C139899 * C5397) *
                C54790 +
            (C92947 * C1579 - C92797 * C1746 + C92948 * C5278 -
             C139899 * C5401) *
                C139731) *
               C5813 +
           ((C104814 - C104815 + C104816 - C104817) * C54790 +
            (C104818 - C104819 + C104820 - C104821) * C139731) *
               C5814 +
           ((C104822 - C104823 + C104824 - C104825) * C54790 +
            (C104826 - C104827 + C104828 - C104829) * C139731) *
               C5815) *
              C5271 +
          (((C92797 * C5397 - C92947 * C5273 + C139899 * C15912 -
             C92948 * C15623) *
                C54790 +
            (C92797 * C5401 - C92947 * C5278 + C139899 * C15915 -
             C92948 * C15628) *
                C139731) *
               C5813 +
           ((C92797 * C13298 - C92947 * C13126 + C139899 * C18532 -
             C92948 * C18302) *
                C54790 +
            (C92797 * C13302 - C92947 * C13131 + C139899 * C18534 -
             C92948 * C18305) *
                C139731) *
               C5814 +
           ((C92797 * C13300 - C92947 * C13128 + C139899 * C64472 -
             C92948 * C64244) *
                C54790 +
            (C92797 * C13304 - C92947 * C13135 + C139899 * C64473 -
             C92948 * C64246) *
                C139731) *
               C5815) *
              C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q));
    d2eeyx[134] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47131 * C114 - C47136 * C108 + C47132 * C116 - C47138 * C109 +
             C47133 * C118 - C47140 * C110) *
                C182 +
            (C47131 * C354 - C47136 * C348 + C47132 * C355 - C47138 * C349 +
             C47133 * C356 - C47140 * C350) *
                C139824) *
               C92797 +
           ((C94879 - C94880 + C94881 - C94882 + C94883 - C94884) * C182 +
            (C94885 - C94886 + C94887 - C94888 + C94889 - C94890) * C139824) *
               C139899) *
              C5270 +
          (((C94880 - C94879 + C94882 - C94881 + C94884 - C94883) * C182 +
            (C94886 - C94885 + C94888 - C94887 + C94890 - C94889) * C139824) *
               C92797 +
           ((C99961 - C99962 + C99963 - C99964 + C99965 - C99966) * C182 +
            (C99967 - C99968 + C99969 - C99970 + C99971 - C99972) * C139824) *
               C139899) *
              C5271 +
          (((C99962 - C99961 + C99964 - C99963 + C99966 - C99965) * C182 +
            (C99968 - C99967 + C99970 - C99969 + C99972 - C99971) * C139824) *
               C92797 +
           ((C47131 * C15627 - C47136 * C15623 + C47132 * C15625 -
             C47138 * C15622 + C47133 * C15629 - C47140 * C15624) *
                C182 +
            (C47131 * C16031 - C47136 * C16028 + C47132 * C16032 -
             C47138 * C16029 + C47133 * C16033 - C47140 * C16030) *
                C139824) *
               C139899) *
              C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C139731 * C114 - C54790 * C108) * C5894 +
            (C139731 * C354 - C54790 * C348) * C5813 +
            (C55513 - C55514) * C5895 + (C55515 - C55516) * C5814 +
            C57297 * C5896 + C57298 * C5815) *
               C92797 +
           ((C61976 - C61977) * C5894 + (C61978 - C61979) * C5813 +
            C64587 * C5895 + C64588 * C5814 + C88899 * C5896 + C88900 * C5815) *
               C139899) *
              C5270 +
          (((C61977 - C61976) * C5894 + (C61979 - C61978) * C5813 +
            C64591 * C5895 + C64592 * C5814 + C89717 * C5896 + C89718 * C5815) *
               C92797 +
           ((C61981 - C61980) * C5894 + (C61983 - C61982) * C5813 +
            C64593 * C5895 + C64594 * C5814 + (C63744 - C63745) * C5896 +
            (C63746 - C63747) * C5815) *
               C139899) *
              C5271 +
          ((C67258 * C5894 + C67259 * C5813 + C64589 * C5895 + C64590 * C5814 +
            (C63745 - C63744) * C5896 + (C63747 - C63746) * C5815) *
               C92797 +
           ((C67263 - C67262) * C5894 + (C67265 - C67264) * C5813 +
            (C64596 - C64595) * C5895 + (C64598 - C64597) * C5814 +
            (C139731 * C64245 - C54790 * C64244) * C5896 +
            (C139731 * C64585 - C54790 * C64584) * C5815) *
               C139899) *
              C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q));
    d2eeyy[134] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C182 * C183 - C410 * C108 - C182 * C348 + C139824 * C411) *
                C47131 +
            C442 * C47132 + C443 * C47133) *
               C92797 +
           (C95001 + C95002 + C95003) * C139899) *
              C5270 -
          ((C100047 + C100048 + C100049) * C139899 +
           (C95003 + C95002 + C95001) * C92797) *
              C5271 +
          ((C100049 + C100048 + C100047) * C92797 +
           (C21384 * C47131 + C16194 * C47132 +
            (C182 * C15790 - C410 * C15624 - C182 * C16030 + C139824 * C16166) *
                C47133) *
               C139899) *
              C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C5894 * C183 - C6151 * C108 - C5894 * C348 + C5813 * C411 +
            C5895 * C896 - C6152 * C813 - C5895 * C1072 + C5814 * C1151 +
            C5896 * C2974 - C6153 * C2908 - C5896 * C3090 + C5815 * C3148) *
               C139731 * C92797 +
           (C102506 + C102507 + C102508) * C139731 * C139899) *
              C5270 -
          ((C107645 + C107646 + C107647) * C139731 * C139899 +
           (C102508 + C102507 + C102506) * C139731 * C92797) *
              C5271 +
          ((C107647 + C107646 + C107645) * C139731 * C92797 +
           (C5894 * C15788 - C6151 * C15623 - C5894 * C16028 + C5813 * C16165 +
            C5895 * C18422 - C6152 * C18302 - C5895 * C18634 + C5814 * C18744 +
            C5896 * C64356 - C6153 * C64244 - C5896 * C64584 + C5815 * C64696) *
               C139731 * C139899) *
              C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q));
    d2eeyz[134] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92797 * C266 - C92947 * C108 + C139899 * C1741 - C92948 * C1570) *
                C182 +
            (C92797 * C495 - C92947 * C348 + C139899 * C1997 - C92948 * C1829) *
                C139824) *
               C47131 +
           ((C92950 - C92951 + C92952 - C92953) * C182 +
            (C93202 - C93203 + C93204 - C93205) * C139824) *
               C47132 +
           C93219 * C47133) *
              C5270 +
          (((C92947 * C1570 - C92797 * C1741 + C92948 * C5273 -
             C139899 * C5397) *
                C182 +
            (C92947 * C1829 - C92797 * C1997 + C92948 * C5455 -
             C139899 * C5567) *
                C139824) *
               C47131 +
           ((C94765 - C94766 + C94767 - C94768) * C182 +
            (C95105 - C95106 + C95107 - C95108) * C139824) *
               C47132 +
           ((C94773 - C94774 + C94775 - C94776) * C182 +
            (C95109 - C95110 + C95111 - C95112) * C139824) *
               C47133) *
              C5271 +
          (((C92797 * C5397 - C92947 * C5273 + C139899 * C15912 -
             C92948 * C15623) *
                C182 +
            (C92797 * C5567 - C92947 * C5455 + C139899 * C16294 -
             C92948 * C16028) *
                C139824) *
               C47131 +
           ((C92797 * C5398 - C92947 * C5274 + C139899 * C15913 -
             C92948 * C15622) *
                C182 +
            (C92797 * C5568 - C92947 * C5456 + C139899 * C16295 -
             C92948 * C16029) *
                C139824) *
               C47132 +
           ((C92797 * C5399 - C92947 * C5275 + C139899 * C15914 -
             C92948 * C15624) *
                C182 +
            (C92797 * C5569 - C92947 * C5457 + C139899 * C16296 -
             C92948 * C16030) *
                C139824) *
               C47133) *
              C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C92797 * C266 - C92947 * C108 + C139899 * C1741 - C92948 * C1570) *
               C5894 +
           (C92797 * C495 - C92947 * C348 + C139899 * C1997 - C92948 * C1829) *
               C5813 +
           (C101320 - C101321 + C101322 - C101323) * C5895 +
           (C101638 - C101639 + C101640 - C101641) * C5814 + C104026 * C5896 +
           C104259 * C5815) *
              C139731 * C5270 +
          ((C92947 * C1570 - C92797 * C1741 + C92948 * C5273 -
            C139899 * C5397) *
               C5894 +
           (C92947 * C1829 - C92797 * C1997 + C92948 * C5455 -
            C139899 * C5567) *
               C5813 +
           (C104814 - C104815 + C104816 - C104817) * C5895 +
           (C105145 - C105146 + C105147 - C105148) * C5814 +
           (C104822 - C104823 + C104824 - C104825) * C5896 +
           (C105149 - C105150 + C105151 - C105152) * C5815) *
              C139731 * C5271 +
          ((C92797 * C5397 - C92947 * C5273 + C139899 * C15912 -
            C92948 * C15623) *
               C5894 +
           (C92797 * C5567 - C92947 * C5455 + C139899 * C16294 -
            C92948 * C16028) *
               C5813 +
           (C92797 * C13298 - C92947 * C13126 + C139899 * C18532 -
            C92948 * C18302) *
               C5895 +
           (C92797 * C13540 - C92947 * C13380 + C139899 * C18862 -
            C92948 * C18634) *
               C5814 +
           (C92797 * C13300 - C92947 * C13128 + C139899 * C64472 -
            C92948 * C64244) *
               C5896 +
           (C92797 * C13541 - C92947 * C13382 + C139899 * C64823 -
            C92948 * C64584) *
               C5815) *
              C139731 * C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q));
    d2eezx[134] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C47131 * C114 - C47136 * C108 + C47132 * C116 - C47138 * C109 +
            C47133 * C118 - C47140 * C110) *
               C92947 +
           (C47131 * C573 - C47136 * C567 + C47132 * C574 - C47138 * C568 +
            C47133 * C575 - C47140 * C569) *
               C92797 +
           (C94879 - C94880 + C94881 - C94882 + C94883 - C94884) * C92948 +
           (C95211 - C95212 + C95213 - C95214 + C95215 - C95216) * C139899) *
              C139824 * C5270 +
          ((C94880 - C94879 + C94882 - C94881 + C94884 - C94883) * C92947 +
           (C95212 - C95211 + C95214 - C95213 + C95216 - C95215) * C92797 +
           (C99961 - C99962 + C99963 - C99964 + C99965 - C99966) * C92948 +
           (C100198 - C100199 + C100200 - C100201 + C100202 - C100203) *
               C139899) *
              C139824 * C5271 +
          ((C99962 - C99961 + C99964 - C99963 + C99966 - C99965) * C92947 +
           (C100199 - C100198 + C100201 - C100200 + C100203 - C100202) *
               C92797 +
           (C47131 * C15627 - C47136 * C15623 + C47132 * C15625 -
            C47138 * C15622 + C47133 * C15629 - C47140 * C15624) *
               C92948 +
           (C47131 * C16404 - C47136 * C16401 + C47132 * C16405 -
            C47138 * C16402 + C47133 * C16406 - C47140 * C16403) *
               C139899) *
              C139824 * C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C139731 * C114 - C54790 * C108) * C92947 +
            (C139731 * C573 - C54790 * C567) * C92797 +
            (C61976 - C61977) * C92948 + (C62328 - C62329) * C139899) *
               C5813 +
           ((C55513 - C55514) * C92947 + (C55735 - C55736) * C92797 +
            C64587 * C92948 + C64931 * C139899) *
               C5814 +
           C104340 * C5815) *
              C5270 +
          (((C61977 - C61976) * C92947 + (C62329 - C62328) * C92797 +
            (C61981 - C61980) * C92948 + (C62331 - C62330) * C139899) *
               C5813 +
           (C64591 * C92947 + C64933 * C92797 + C64593 * C92948 +
            C64934 * C139899) *
               C5814 +
           (C89717 * C92947 + C90038 * C92797 + (C63744 - C63745) * C92948 +
            (C63976 - C63977) * C139899) *
               C5815) *
              C5271 +
          ((C67258 * C92947 + C67513 * C92797 + (C67263 - C67262) * C92948 +
            (C67515 - C67514) * C139899) *
               C5813 +
           (C64589 * C92947 + C64932 * C92797 + (C64596 - C64595) * C92948 +
            (C64936 - C64935) * C139899) *
               C5814 +
           ((C63745 - C63744) * C92947 + (C63977 - C63976) * C92797 +
            (C139731 * C64245 - C54790 * C64244) * C92948 +
            (C139731 * C64929 - C54790 * C64928) * C139899) *
               C5815) *
              C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q));
    d2eezy[134] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C139824 * C183 - C182 * C108) * C92947 +
            (C139824 * C629 - C182 * C567) * C92797 +
            (C15795 - C15796) * C92948 + (C16525 - C16526) * C139899) *
               C47131 +
           ((C196 - C197) * C92947 + (C636 - C637) * C92797 + C15799 * C92948 +
            C16529 * C139899) *
               C47132 +
           C93374 * C47133) *
              C5270 +
          (((C15796 - C15795) * C92947 + (C16526 - C16525) * C92797 +
            (C15802 - C15801) * C92948 + (C16528 - C16527) * C139899) *
               C47131 +
           (C15807 * C92947 + C16531 * C92797 + C15809 * C92948 +
            C16532 * C139899) *
               C47132 +
           (C31358 * C92947 + C32014 * C92797 + (C13938 - C13939) * C92948 +
            (C14441 - C14442) * C139899) *
               C47133) *
              C5271 +
          ((C21114 * C92947 + C21623 * C92797 + (C21119 - C21118) * C92948 +
            (C21625 - C21624) * C139899) *
               C47131 +
           (C15805 * C92947 + C16530 * C92797 + (C15812 - C15811) * C92948 +
            (C16534 - C16533) * C139899) *
               C47132 +
           ((C13939 - C13938) * C92947 + (C14442 - C14441) * C92797 +
            (C139824 * C15790 - C182 * C15624) * C92948 +
            (C139824 * C16523 - C182 * C16403) * C139899) *
               C47133) *
              C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C5813 * C183 - C5894 * C108 + C5814 * C896 - C5895 * C813 +
            C5815 * C2974 - C5896 * C2908) *
               C92947 +
           (C5813 * C629 - C5894 * C567 + C5814 * C1393 - C5895 * C1317 +
            C5815 * C3314 - C5896 * C3256) *
               C92797 +
           (C102182 - C102183 + C102184 - C102185 + C102186 - C102187) *
               C92948 +
           (C102803 - C102804 + C102805 - C102806 + C102807 - C102808) *
               C139899) *
              C139731 * C5270 +
          ((C102183 - C102182 + C102185 - C102184 + C102187 - C102186) *
               C92947 +
           (C102804 - C102803 + C102806 - C102805 + C102808 - C102807) *
               C92797 +
           (C107393 - C107394 + C107395 - C107396 + C107397 - C107398) *
               C92948 +
           (C107870 - C107871 + C107872 - C107873 + C107874 - C107875) *
               C139899) *
              C139731 * C5271 +
          ((C107394 - C107393 + C107396 - C107395 + C107398 - C107397) *
               C92947 +
           (C107871 - C107870 + C107873 - C107872 + C107875 - C107874) *
               C92797 +
           (C5813 * C15788 - C5894 * C15623 + C5814 * C18422 - C5895 * C18302 +
            C5815 * C64356 - C5896 * C64244) *
               C92948 +
           (C5813 * C16521 - C5894 * C16401 + C5814 * C19068 - C5895 * C18962 +
            C5815 * C65034 - C5896 * C64928) *
               C139899) *
              C139731 * C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q));
    d2eezz[134] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C92947 * C266 - C93448 * C108 - C92947 * C567 + C92797 * C702 +
            C92948 * C1741 - C93449 * C1570 - C92948 * C2074 +
            C139899 * C2230) *
               C139824 * C47131 +
           (C93487 + C93488) * C139824 * C47132 + C93494 * C47133) *
              C5270 -
          ((C95443 + C95444) * C139824 * C47133 +
           (C95445 + C95446) * C139824 * C47132 +
           (C92948 * C5397 - C93449 * C5273 - C92948 * C5621 + C139899 * C5733 +
            C92947 * C1741 - C93448 * C1570 - C92947 * C2074 + C92797 * C2230) *
               C139824 * C47131) *
              C5271 +
          ((C92947 * C5397 - C93448 * C5273 - C92947 * C5621 + C92797 * C5733 +
            C92948 * C15912 - C93449 * C15623 - C92948 * C16401 +
            C139899 * C16633) *
               C139824 * C47131 +
           (C92947 * C5398 - C93448 * C5274 - C92947 * C5622 + C92797 * C5734 +
            C92948 * C15913 - C93449 * C15622 - C92948 * C16402 +
            C139899 * C16632) *
               C139824 * C47132 +
           (C92947 * C5399 - C93448 * C5275 - C92947 * C5623 + C92797 * C5735 +
            C92948 * C15914 - C93449 * C15624 - C92948 * C16403 +
            C139899 * C16634) *
               C139824 * C47133) *
              C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C92947 * C266 - C93448 * C108 - C92947 * C567 + C92797 * C702 +
            C92948 * C1741 - C93449 * C1570 - C92948 * C2074 +
            C139899 * C2230) *
               C5813 +
           (C101980 + C101981) * C5814 + C104489 * C5815) *
              C139731 * C5270 -
          ((C105477 + C105478) * C5815 + (C105479 + C105480) * C5814 +
           (C92948 * C5397 - C93449 * C5273 - C92948 * C5621 + C139899 * C5733 +
            C92947 * C1741 - C93448 * C1570 - C92947 * C2074 + C92797 * C2230) *
               C5813) *
              C139731 * C5271 +
          ((C92947 * C5397 - C93448 * C5273 - C92947 * C5621 + C92797 * C5733 +
            C92948 * C15912 - C93449 * C15623 - C92948 * C16401 +
            C139899 * C16633) *
               C5813 +
           (C92947 * C13298 - C93448 * C13126 - C92947 * C13618 +
            C92797 * C13778 + C92948 * C18532 - C93449 * C18302 -
            C92948 * C18962 + C139899 * C19172) *
               C5814 +
           (C92947 * C13300 - C93448 * C13128 - C92947 * C13620 +
            C92797 * C13779 + C92948 * C64472 - C93449 * C64244 -
            C92948 * C64928 + C139899 * C65141) *
               C5815) *
              C139731 * C5272) *
         C139792 * C139758) /
            (p * q * std::sqrt(p + q));
}
